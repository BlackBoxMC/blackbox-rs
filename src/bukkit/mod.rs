use crate::JNIRaw;
/// An instantiatable struct that implements Server. Needed for returning it from Java.
pub struct Server<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> Server<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Server from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Server") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Server object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn reload(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "reload", "()V", &[])?;
        Ok(())
    }
    pub fn version(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getVersion",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn get_map(
        &mut self,
        arg0: i32,
    ) -> Result<crate::bukkit::map::MapView<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMap",
            "(I)Lorg/bukkit/map/MapView;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::map::MapView(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn create_map(
        &mut self,
        arg0: crate::bukkit::World<'mc>,
    ) -> Result<crate::bukkit::map::MapView<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createMap",
            "(Lorg/bukkit/World;)Lorg/bukkit/map/MapView;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::map::MapView(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getName",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn shutdown(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "shutdown", "()V", &[])?;
        Ok(())
    }
    pub fn get_unsafe(
        &mut self,
    ) -> Result<crate::bukkit::UnsafeValues<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getUnsafe",
            "()Lorg/bukkit/UnsafeValues;",
            &[],
        )?;
        let ret = {
            crate::bukkit::UnsafeValues(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn logger(&mut self) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getLogger",
            "()Ljava/util/logging/Logger;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn port(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getPort", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn broadcast(
        &mut self,
        arg0: String,
        arg1: String,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let val_1 = jni::objects::JObject::from(self.jni_ref().new_string(arg1).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "broadcast",
            "(Ljava/lang/String;Ljava/lang/String;)I",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn get_tag(
        &mut self,
        arg0: String,
        arg1: crate::bukkit::NamespacedKey<'mc>,
        arg2: jni::objects::JClass<'mc>,
    ) -> Result<crate::bukkit::Tag<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let val_2 = arg2;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTag",
            "(Ljava/lang/String;Lorg/bukkit/NamespacedKey;Ljava/lang/Class;)Lorg/bukkit/Tag;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            crate::bukkit::Tag(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn spigot(
        &mut self,
    ) -> Result<crate::bukkit::ServerSpigot<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "spigot",
            "()Lorg/bukkit/Server$Spigot;",
            &[],
        )?;
        let ret = {
            crate::bukkit::ServerSpigot(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_loot_table(
        &mut self,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::loot::LootTable<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getLootTable",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/loot/LootTable;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::loot::LootTable(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_recipe(
        &mut self,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::inventory::Recipe<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getRecipe",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/inventory/Recipe;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::inventory::Recipe(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_boss_bar(
        &mut self,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::boss::KeyedBossBar<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBossBar",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/boss/KeyedBossBar;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::boss::KeyedBossBar(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn create_chunk_data(
        &mut self,
        arg0: crate::bukkit::World<'mc>,
    ) -> Result<crate::bukkit::generator::ChunkGeneratorChunkData<'mc>, Box<dyn std::error::Error>>
    {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createChunkData",
            "(Lorg/bukkit/World;)Lorg/bukkit/generator/ChunkGenerator$ChunkData;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::generator::ChunkGeneratorChunkData(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn plugin_manager(
        &mut self,
    ) -> Result<crate::bukkit::plugin::PluginManager<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPluginManager",
            "()Lorg/bukkit/plugin/PluginManager;",
            &[],
        )?;
        let ret = {
            crate::bukkit::plugin::PluginManager(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn item_factory(
        &mut self,
    ) -> Result<crate::bukkit::inventory::ItemFactory<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getItemFactory",
            "()Lorg/bukkit/inventory/ItemFactory;",
            &[],
        )?;
        let ret = {
            crate::bukkit::inventory::ItemFactory(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn bukkit_version(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBukkitVersion",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn max_players(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getMaxPlayers", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_max_players(&mut self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setMaxPlayers",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn view_distance(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getViewDistance", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn simulation_distance(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getSimulationDistance", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn ip(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getIp", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn world_type(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWorldType",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn generate_structures(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getGenerateStructures", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn max_world_size(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getMaxWorldSize", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn allow_end(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getAllowEnd", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn allow_nether(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getAllowNether", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn data_pack_manager(
        &mut self,
    ) -> Result<crate::bukkit::packs::DataPackManager<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDataPackManager",
            "()Lorg/bukkit/packs/DataPackManager;",
            &[],
        )?;
        let ret = {
            crate::bukkit::packs::DataPackManager(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn resource_pack(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getResourcePack",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn resource_pack_hash(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getResourcePackHash",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn resource_pack_prompt(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getResourcePackPrompt",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn is_resource_pack_required(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isResourcePackRequired", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn has_whitelist(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasWhitelist", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_whitelist(&mut self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setWhitelist",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn is_whitelist_enforced(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isWhitelistEnforced", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_whitelist_enforced(&mut self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setWhitelistEnforced",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn reload_whitelist(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "reloadWhitelist", "()V", &[])?;
        Ok(())
    }
    pub fn broadcast_message(&mut self, arg0: String) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "broadcastMessage",
            "(Ljava/lang/String;)I",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn update_folder(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getUpdateFolder",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn connection_throttle(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getConnectionThrottle", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn ticks_per_animal_spawns(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerAnimalSpawns",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn ticks_per_monster_spawns(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerMonsterSpawns",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn ticks_per_water_spawns(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getTicksPerWaterSpawns", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn ticks_per_water_ambient_spawns(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerWaterAmbientSpawns",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn ticks_per_water_underground_creature_spawns(
        &mut self,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerWaterUndergroundCreatureSpawns",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn ticks_per_ambient_spawns(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerAmbientSpawns",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn get_ticks_per_spawns(
        &mut self,
        arg0: crate::bukkit::entity::SpawnCategory<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerSpawns",
            "(Lorg/bukkit/entity/SpawnCategory;)I",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn get_player_exact(
        &mut self,
        arg0: String,
    ) -> Result<crate::bukkit::entity::Player<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPlayerExact",
            "(Ljava/lang/String;)Lorg/bukkit/entity/Player;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::entity::Player(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn scheduler(
        &mut self,
    ) -> Result<crate::bukkit::scheduler::BukkitScheduler<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getScheduler",
            "()Lorg/bukkit/scheduler/BukkitScheduler;",
            &[],
        )?;
        let ret = {
            crate::bukkit::scheduler::BukkitScheduler(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn services_manager(
        &mut self,
    ) -> Result<crate::bukkit::plugin::ServicesManager<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getServicesManager",
            "()Lorg/bukkit/plugin/ServicesManager;",
            &[],
        )?;
        let ret = {
            crate::bukkit::plugin::ServicesManager(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn create_world(
        &mut self,
        arg0: crate::bukkit::WorldCreator<'mc>,
    ) -> Result<crate::bukkit::World<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createWorld",
            "(Lorg/bukkit/WorldCreator;)Lorg/bukkit/World;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::World(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn create_world_border(
        &mut self,
    ) -> Result<crate::bukkit::WorldBorder<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createWorldBorder",
            "()Lorg/bukkit/WorldBorder;",
            &[],
        )?;
        let ret = {
            crate::bukkit::WorldBorder(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn create_explorer_map_with_world(
        &mut self,
        arg0: crate::bukkit::World<'mc>,
        arg1: crate::bukkit::Location<'mc>,
        arg2: std::option::Option<crate::bukkit::StructureType<'mc>>,
        arg3: std::option::Option<i32>,
        arg4: std::option::Option<bool>,
    ) -> Result<crate::bukkit::inventory::ItemStack<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let val_2 = unsafe { jni::objects::JObject::from_raw(arg2.unwrap().1.clone()) };
        let val_3 = jni::objects::JValueGen::Int(arg3.unwrap().into());
        let val_4 = jni::objects::JValueGen::Bool(arg4.unwrap().into());
        let res =
self.jni_ref().call_method(&self.jni_object(),"createExplorerMap","(Lorg/bukkit/World;Lorg/bukkit/Location;Lorg/bukkit/StructureType;IZ)Lorg/bukkit/inventory/ItemStack;",&[jni::objects::JValueGen::from(&val_0),jni::objects::JValueGen::from(&val_1),jni::objects::JValueGen::from(&val_2),jni::objects::JValueGen::from(&val_3),jni::objects::JValueGen::from(&val_4)])?;
        let ret = {
            crate::bukkit::inventory::ItemStack(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn reload_data(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "reloadData", "()V", &[])?;
        Ok(())
    }
    pub fn get_plugin_command(
        &mut self,
        arg0: String,
    ) -> Result<crate::bukkit::command::PluginCommand<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPluginCommand",
            "(Ljava/lang/String;)Lorg/bukkit/command/PluginCommand;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::command::PluginCommand(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn save_players(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "savePlayers", "()V", &[])?;
        Ok(())
    }
    pub fn dispatch_command(
        &mut self,
        arg0: crate::bukkit::command::CommandSender<'mc>,
        arg1: String,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = jni::objects::JObject::from(self.jni_ref().new_string(arg1).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "dispatchCommand",
            "(Lorg/bukkit/command/CommandSender;Ljava/lang/String;)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn add_recipe(
        &mut self,
        arg0: crate::bukkit::inventory::Recipe<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "addRecipe",
            "(Lorg/bukkit/inventory/Recipe;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn get_crafting_recipe(
        &mut self,
        _arg0: Vec<crate::bukkit::inventory::ItemStack<'mc>>,
        arg1: crate::bukkit::World<'mc>,
    ) -> Result<crate::bukkit::inventory::Recipe<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getCraftingRecipe",
            "(Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/World;)Lorg/bukkit/inventory/Recipe;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::inventory::Recipe(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn craft_item(
        &mut self,
        _arg0: Vec<crate::bukkit::inventory::ItemStack<'mc>>,
        arg1: crate::bukkit::World<'mc>,
        arg2: crate::bukkit::entity::Player<'mc>,
    ) -> Result<crate::bukkit::inventory::ItemStack<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg2.1.clone()) };
        let res =
self.jni_ref().call_method(&self.jni_object(),"craftItem","(Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Lorg/bukkit/inventory/ItemStack;",&[jni::objects::JValueGen::from(&val_0),jni::objects::JValueGen::from(&val_1)])?;
        let ret = {
            crate::bukkit::inventory::ItemStack(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn clear_recipes(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "clearRecipes", "()V", &[])?;
        Ok(())
    }
    pub fn reset_recipes(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "resetRecipes", "()V", &[])?;
        Ok(())
    }
    pub fn remove_recipe(
        &mut self,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removeRecipe",
            "(Lorg/bukkit/NamespacedKey;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn spawn_radius(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSpawnRadius", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_spawn_radius(&mut self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setSpawnRadius",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn should_send_chat_previews(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "shouldSendChatPreviews", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_enforcing_secure_profiles(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isEnforcingSecureProfiles",
            "()Z",
            &[],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn hide_online_players(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getHideOnlinePlayers", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn online_mode(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getOnlineMode", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn allow_flight(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getAllowFlight", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_hardcore(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isHardcore", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn get_ban_list(
        &mut self,
        arg0: crate::bukkit::BanListType<'mc>,
    ) -> Result<crate::bukkit::BanList<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBanList",
            "(Lorg/bukkit/BanList$Type;)Lorg/bukkit/BanList;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::BanList(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn default_game_mode(
        &mut self,
    ) -> Result<crate::bukkit::GameMode<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDefaultGameMode",
            "()Lorg/bukkit/GameMode;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::GameMode(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::GameMode::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn set_default_game_mode(
        &mut self,
        arg0: crate::bukkit::GameMode<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        self.jni_ref().call_method(
            &self.jni_object(),
            "setDefaultGameMode",
            "(Lorg/bukkit/GameMode;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn console_sender(
        &mut self,
    ) -> Result<crate::bukkit::command::ConsoleCommandSender<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getConsoleSender",
            "()Lorg/bukkit/command/ConsoleCommandSender;",
            &[],
        )?;
        let ret = {
            crate::bukkit::command::ConsoleCommandSender(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn messenger(
        &mut self,
    ) -> Result<crate::bukkit::plugin::messaging::Messenger<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMessenger",
            "()Lorg/bukkit/plugin/messaging/Messenger;",
            &[],
        )?;
        let ret = {
            crate::bukkit::plugin::messaging::Messenger(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn help_map(
        &mut self,
    ) -> Result<crate::bukkit::help::HelpMap<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getHelpMap",
            "()Lorg/bukkit/help/HelpMap;",
            &[],
        )?;
        let ret = {
            crate::bukkit::help::HelpMap(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn create_merchant(
        &mut self,
        arg0: String,
    ) -> Result<crate::bukkit::inventory::Merchant<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createMerchant",
            "(Ljava/lang/String;)Lorg/bukkit/inventory/Merchant;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::inventory::Merchant(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn max_chained_neighbor_updates(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMaxChainedNeighborUpdates",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn monster_spawn_limit(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getMonsterSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn animal_spawn_limit(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getAnimalSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn water_animal_spawn_limit(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterAnimalSpawnLimit",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn water_ambient_spawn_limit(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterAmbientSpawnLimit",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn water_underground_creature_spawn_limit(
        &mut self,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterUndergroundCreatureSpawnLimit",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn ambient_spawn_limit(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getAmbientSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn get_spawn_limit(
        &mut self,
        arg0: crate::bukkit::entity::SpawnCategory<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getSpawnLimit",
            "(Lorg/bukkit/entity/SpawnCategory;)I",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn is_primary_thread(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isPrimaryThread", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn motd(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMotd",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn set_motd(&mut self, arg0: String) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setMotd",
            "(Ljava/lang/String;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn shutdown_message(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getShutdownMessage",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn warning_state(
        &mut self,
    ) -> Result<crate::bukkit::WarningWarningState<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWarningState",
            "()Lorg/bukkit/Warning$WarningState;",
            &[],
        )?;
        let ret = {
            crate::bukkit::WarningWarningState(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn scoreboard_manager(
        &mut self,
    ) -> Result<crate::bukkit::scoreboard::ScoreboardManager<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getScoreboardManager",
            "()Lorg/bukkit/scoreboard/ScoreboardManager;",
            &[],
        )?;
        let ret = {
            crate::bukkit::scoreboard::ScoreboardManager(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_scoreboard_criteria(
        &mut self,
        arg0: String,
    ) -> Result<crate::bukkit::scoreboard::Criteria<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getScoreboardCriteria",
            "(Ljava/lang/String;)Lorg/bukkit/scoreboard/Criteria;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::scoreboard::Criteria(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn server_icon(
        &mut self,
    ) -> Result<crate::bukkit::util::CachedServerIcon<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getServerIcon",
            "()Lorg/bukkit/util/CachedServerIcon;",
            &[],
        )?;
        let ret = {
            crate::bukkit::util::CachedServerIcon(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn set_idle_timeout(&mut self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setIdleTimeout",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn idle_timeout(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getIdleTimeout", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn remove_boss_bar(
        &mut self,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removeBossBar",
            "(Lorg/bukkit/NamespacedKey;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn get_entity(
        &mut self,
        arg0: u128,
    ) -> Result<crate::bukkit::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let upper = (arg0 >> 64) as u64 as i64;
        let lower = arg0 as u64 as i64;
        let val_0 = jni::objects::JValueGen::Object(
            self.jni_ref()
                .new_object("java/util/UUID", "(JJ)V", &[upper.into(), lower.into()])
                .unwrap(),
        );
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEntity",
            "(Ljava/util/UUID;)Lorg/bukkit/entity/Entity;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::entity::Entity(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_advancement(
        &mut self,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::advancement::Advancement<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getAdvancement",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/advancement/Advancement;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::advancement::Advancement(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn structure_manager(
        &mut self,
    ) -> Result<crate::bukkit::structure::StructureManager<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getStructureManager",
            "()Lorg/bukkit/structure/StructureManager;",
            &[],
        )?;
        let ret = {
            crate::bukkit::structure::StructureManager(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_registry(
        &mut self,
        arg0: jni::objects::JClass<'mc>,
    ) -> Result<crate::bukkit::Registry<'mc>, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getRegistry",
            "(Ljava/lang/Class;)Lorg/bukkit/Registry;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::Registry(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn send_plugin_message(
        &mut self,
        arg0: crate::bukkit::plugin::Plugin<'mc>,
        arg1: String,
        _arg2: Vec<i8>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = jni::objects::JObject::from(self.jni_ref().new_string(arg1).unwrap());
        self.jni_ref().call_method(
            &self.jni_object(),
            "sendPluginMessage",
            "(Lorg/bukkit/plugin/Plugin;Ljava/lang/String;B)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
}
impl<'mc> crate::JNIRaw<'mc> for Server<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct ServerSpigot<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for ServerSpigot<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> ServerSpigot<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate ServerSpigot from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("ServerSpigot") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ServerSpigot object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn config(
        &mut self,
    ) -> Result<
        crate::bukkit::configuration::file::YamlConfiguration<'mc>,
        Box<dyn std::error::Error>,
    > {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getConfig",
            "()Lorg/bukkit/configuration/file/YamlConfiguration;",
            &[],
        )?;
        let ret = {
            crate::bukkit::configuration::file::YamlConfiguration(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn restart(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "restart", "()V", &[])?;
        Ok(())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub enum DifficultyEnum {
    Peaceful,
    Easy,
    Normal,
    Hard,
}
impl std::fmt::Display for DifficultyEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            DifficultyEnum::Peaceful => f.write_str("PEACEFUL"),
            DifficultyEnum::Easy => f.write_str("EASY"),
            DifficultyEnum::Normal => f.write_str("NORMAL"),
            DifficultyEnum::Hard => f.write_str("HARD"),
        }
    }
}
pub struct Difficulty<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub DifficultyEnum,
);
impl<'mc> std::ops::Deref for Difficulty<'mc> {
    type Target = DifficultyEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for Difficulty<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Difficulty<'mc> {
    pub const PEACEFUL: DifficultyEnum = DifficultyEnum::Peaceful;
    pub const EASY: DifficultyEnum = DifficultyEnum::Easy;
    pub const NORMAL: DifficultyEnum = DifficultyEnum::Normal;
    pub const HARD: DifficultyEnum = DifficultyEnum::Hard;
    pub fn from_string(str: String) -> std::option::Option<DifficultyEnum> {
        match str.as_str() {
            "PEACEFUL" => Some(DifficultyEnum::Peaceful),
            "EASY" => Some(DifficultyEnum::Easy),
            "NORMAL" => Some(DifficultyEnum::Normal),
            "HARD" => Some(DifficultyEnum::Hard),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Difficulty<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Difficulty")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Difficulty;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Difficulty(
                jni,
                raw_obj,
                crate::bukkit::Difficulty::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn value(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getValue", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn get_by_value(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<crate::bukkit::Difficulty<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let cls = &jni.find_class("org/bukkit/Difficulty")?;
        let res = jni.call_static_method(
            cls,
            "getByValue",
            "(I)Lorg/bukkit/Difficulty;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Difficulty(
                jni,
                raw_obj,
                crate::bukkit::Difficulty::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
/// An instantiatable struct that implements FeatureFlag. Needed for returning it from Java.
pub struct FeatureFlag<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> FeatureFlag<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate FeatureFlag from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("FeatureFlag") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a FeatureFlag object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
}
impl<'mc> crate::JNIRaw<'mc> for FeatureFlag<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub enum TreeSpeciesEnum {
    Generic,
    Redwood,
    Birch,
    Jungle,
    Acacia,
    DarkOak,
}
impl std::fmt::Display for TreeSpeciesEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            TreeSpeciesEnum::Generic => f.write_str("GENERIC"),
            TreeSpeciesEnum::Redwood => f.write_str("REDWOOD"),
            TreeSpeciesEnum::Birch => f.write_str("BIRCH"),
            TreeSpeciesEnum::Jungle => f.write_str("JUNGLE"),
            TreeSpeciesEnum::Acacia => f.write_str("ACACIA"),
            TreeSpeciesEnum::DarkOak => f.write_str("DARK_OAK"),
        }
    }
}
pub struct TreeSpecies<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub TreeSpeciesEnum,
);
impl<'mc> std::ops::Deref for TreeSpecies<'mc> {
    type Target = TreeSpeciesEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for TreeSpecies<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> TreeSpecies<'mc> {
    pub const GENERIC: TreeSpeciesEnum = TreeSpeciesEnum::Generic;
    pub const REDWOOD: TreeSpeciesEnum = TreeSpeciesEnum::Redwood;
    pub const BIRCH: TreeSpeciesEnum = TreeSpeciesEnum::Birch;
    pub const JUNGLE: TreeSpeciesEnum = TreeSpeciesEnum::Jungle;
    pub const ACACIA: TreeSpeciesEnum = TreeSpeciesEnum::Acacia;
    pub const DARKOAK: TreeSpeciesEnum = TreeSpeciesEnum::DarkOak;
    pub fn from_string(str: String) -> std::option::Option<TreeSpeciesEnum> {
        match str.as_str() {
            "GENERIC" => Some(TreeSpeciesEnum::Generic),
            "REDWOOD" => Some(TreeSpeciesEnum::Redwood),
            "BIRCH" => Some(TreeSpeciesEnum::Birch),
            "JUNGLE" => Some(TreeSpeciesEnum::Jungle),
            "ACACIA" => Some(TreeSpeciesEnum::Acacia),
            "DARK_OAK" => Some(TreeSpeciesEnum::DarkOak),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::TreeSpecies<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/TreeSpecies")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/TreeSpecies;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::TreeSpecies(
                jni,
                raw_obj,
                crate::bukkit::TreeSpecies::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn data(&mut self) -> Result<i8, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getData", "()B", &[])?;
        Ok(res.b().unwrap())
    }
    pub fn get_by_data(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i8,
    ) -> Result<crate::bukkit::TreeSpecies<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Byte(arg0.into());
        let cls = &jni.find_class("org/bukkit/TreeSpecies")?;
        let res = jni.call_static_method(
            cls,
            "getByData",
            "(B)Lorg/bukkit/TreeSpecies;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::TreeSpecies(
                jni,
                raw_obj,
                crate::bukkit::TreeSpecies::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
/// An instantiatable struct that implements Raid. Needed for returning it from Java.
pub struct Raid<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> Raid<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Raid from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Raid") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Raid object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn location(&mut self) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getLocation",
            "()Lorg/bukkit/Location;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Location(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn is_started(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isStarted", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn active_ticks(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getActiveTicks", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn bad_omen_level(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBadOmenLevel", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_bad_omen_level(&mut self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setBadOmenLevel",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn status(
        &mut self,
    ) -> Result<crate::bukkit::RaidRaidStatus<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getStatus",
            "()Lorg/bukkit/Raid$RaidStatus;",
            &[],
        )?;
        let ret = {
            crate::bukkit::RaidRaidStatus(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn spawned_groups(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSpawnedGroups", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn total_groups(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getTotalGroups", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn total_waves(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getTotalWaves", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn total_health(&mut self) -> Result<f32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getTotalHealth", "()F", &[])?;
        Ok(res.f().unwrap())
    }
}
impl<'mc> crate::JNIRaw<'mc> for Raid<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
/// An instantiatable struct that implements UnsafeValues. Needed for returning it from Java.
pub struct UnsafeValues<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> UnsafeValues<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate UnsafeValues from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("UnsafeValues") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a UnsafeValues object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn get_material(
        &mut self,
        arg0: String,
        arg1: i32,
    ) -> Result<crate::bukkit::Material<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMaterial",
            "(Ljava/lang/String;I)Lorg/bukkit/Material;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Material(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Material::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn to_legacy(
        &mut self,
        arg0: crate::bukkit::Material<'mc>,
    ) -> Result<crate::bukkit::Material<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toLegacy",
            "(Lorg/bukkit/Material;)Lorg/bukkit/Material;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Material(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Material::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn data_version(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getDataVersion", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn check_supported(
        &mut self,
        arg0: crate::bukkit::plugin::PluginDescriptionFile<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        self.jni_ref().call_method(
            &self.jni_object(),
            "checkSupported",
            "(Lorg/bukkit/plugin/PluginDescriptionFile;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn modify_item_stack(
        &mut self,
        arg0: crate::bukkit::inventory::ItemStack<'mc>,
        arg1: String,
    ) -> Result<crate::bukkit::inventory::ItemStack<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = jni::objects::JObject::from(self.jni_ref().new_string(arg1).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "modifyItemStack",
            "(Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;)Lorg/bukkit/inventory/ItemStack;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            crate::bukkit::inventory::ItemStack(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn load_advancement(
        &mut self,
        arg0: crate::bukkit::NamespacedKey<'mc>,
        arg1: String,
    ) -> Result<crate::bukkit::advancement::Advancement<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = jni::objects::JObject::from(self.jni_ref().new_string(arg1).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "loadAdvancement",
            "(Lorg/bukkit/NamespacedKey;Ljava/lang/String;)Lorg/bukkit/advancement/Advancement;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            crate::bukkit::advancement::Advancement(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn remove_advancement(
        &mut self,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removeAdvancement",
            "(Lorg/bukkit/NamespacedKey;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn get_creative_category(
        &mut self,
        arg0: crate::bukkit::Material<'mc>,
    ) -> Result<crate::bukkit::inventory::CreativeCategory<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getCreativeCategory",
            "(Lorg/bukkit/Material;)Lorg/bukkit/inventory/CreativeCategory;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::inventory::CreativeCategory(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::inventory::CreativeCategory::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn get_block_translation_key(
        &mut self,
        arg0: crate::bukkit::Material<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockTranslationKey",
            "(Lorg/bukkit/Material;)Ljava/lang/String;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn get_item_translation_key(
        &mut self,
        arg0: crate::bukkit::Material<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getItemTranslationKey",
            "(Lorg/bukkit/Material;)Ljava/lang/String;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn get_feature_flag(
        &mut self,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::FeatureFlag<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getFeatureFlag",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/FeatureFlag;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::FeatureFlag(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
}
impl<'mc> crate::JNIRaw<'mc> for UnsafeValues<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
/// An instantiatable struct that implements World. Needed for returning it from Java.
pub struct World<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> World<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate World from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("World") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a World object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn set_time(&mut self, arg0: i64) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setTime",
            "(J)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn time(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getTime", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn save(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "save", "()V", &[])?;
        Ok(())
    }
    pub fn set_ticks_per_water_underground_creature_spawns(
        &mut self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerWaterUndergroundCreatureSpawns",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn spigot(
        &mut self,
    ) -> Result<crate::bukkit::WorldSpigot<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "spigot",
            "()Lorg/bukkit/World$Spigot;",
            &[],
        )?;
        let ret = {
            crate::bukkit::WorldSpigot(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn ray_trace_blocks_with_location(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
        arg1: crate::bukkit::util::Vector<'mc>,
        arg2: std::option::Option<f64>,
        arg3: std::option::Option<crate::bukkit::FluidCollisionMode<'mc>>,
        arg4: std::option::Option<bool>,
    ) -> Result<crate::bukkit::util::RayTraceResult<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let val_2 = jni::objects::JValueGen::Double(arg2.unwrap().into());
        let val_3 = unsafe { jni::objects::JObject::from_raw(arg3.unwrap().1.clone()) };
        let val_4 = jni::objects::JValueGen::Bool(arg4.unwrap().into());
        let res =
self.jni_ref().call_method(&self.jni_object(),"rayTraceBlocks","(Lorg/bukkit/Location;Lorg/bukkit/util/Vector;DLorg/bukkit/FluidCollisionMode;Z)Lorg/bukkit/util/RayTraceResult;",&[jni::objects::JValueGen::from(&val_0),jni::objects::JValueGen::from(&val_1),jni::objects::JValueGen::from(&val_2),jni::objects::JValueGen::from(&val_3),jni::objects::JValueGen::from(&val_4)])?;
        let ret = {
            crate::bukkit::util::RayTraceResult(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn ray_trace(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
        arg1: crate::bukkit::util::Vector<'mc>,
        arg2: f64,
        arg3: crate::bukkit::FluidCollisionMode<'mc>,
        arg4: bool,
        arg5: f64,
        arg6: jni::objects::JObject<'mc>,
    ) -> Result<crate::bukkit::util::RayTraceResult<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let val_2 = jni::objects::JValueGen::Double(arg2.into());
        let val_3 = unsafe { jni::objects::JObject::from_raw(arg3.1.clone()) };
        let val_4 = jni::objects::JValueGen::Bool(arg4.into());
        let val_5 = jni::objects::JValueGen::Double(arg5.into());
        let val_6 = arg6;
        let res =
self.jni_ref().call_method(&self.jni_object(),"rayTrace","(Lorg/bukkit/Location;Lorg/bukkit/util/Vector;DLorg/bukkit/FluidCollisionMode;ZDLjava/util/function/Predicate;)Lorg/bukkit/util/RayTraceResult;",&[jni::objects::JValueGen::from(&val_0),jni::objects::JValueGen::from(&val_1),jni::objects::JValueGen::from(&val_2),jni::objects::JValueGen::from(&val_3),jni::objects::JValueGen::from(&val_4),jni::objects::JValueGen::from(&val_5),jni::objects::JValueGen::from(&val_6)])?;
        let ret = {
            crate::bukkit::util::RayTraceResult(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn add_plugin_chunk_ticket(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: crate::bukkit::plugin::Plugin<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = unsafe { jni::objects::JObject::from_raw(arg2.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "addPluginChunkTicket",
            "(IILorg/bukkit/plugin/Plugin;)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn remove_plugin_chunk_ticket(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: crate::bukkit::plugin::Plugin<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = unsafe { jni::objects::JObject::from_raw(arg2.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removePluginChunkTicket",
            "(IILorg/bukkit/plugin/Plugin;)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn view_distance(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getViewDistance", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn simulation_distance(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getSimulationDistance", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn world_type(
        &mut self,
    ) -> Result<crate::bukkit::WorldType<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWorldType",
            "()Lorg/bukkit/WorldType;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::WorldType(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::WorldType::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn ticks_per_animal_spawns(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerAnimalSpawns",
            "()J",
            &[],
        )?;
        Ok(res.j().unwrap())
    }
    pub fn ticks_per_monster_spawns(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerMonsterSpawns",
            "()J",
            &[],
        )?;
        Ok(res.j().unwrap())
    }
    pub fn ticks_per_water_spawns(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getTicksPerWaterSpawns", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn ticks_per_water_ambient_spawns(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerWaterAmbientSpawns",
            "()J",
            &[],
        )?;
        Ok(res.j().unwrap())
    }
    pub fn ticks_per_water_underground_creature_spawns(
        &mut self,
    ) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerWaterUndergroundCreatureSpawns",
            "()J",
            &[],
        )?;
        Ok(res.j().unwrap())
    }
    pub fn ticks_per_ambient_spawns(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerAmbientSpawns",
            "()J",
            &[],
        )?;
        Ok(res.j().unwrap())
    }
    pub fn get_ticks_per_spawns(
        &mut self,
        arg0: crate::bukkit::entity::SpawnCategory<'mc>,
    ) -> Result<i64, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerSpawns",
            "(Lorg/bukkit/entity/SpawnCategory;)J",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.j().unwrap())
    }
    pub fn is_hardcore(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isHardcore", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn monster_spawn_limit(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getMonsterSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn animal_spawn_limit(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getAnimalSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn water_animal_spawn_limit(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterAnimalSpawnLimit",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn water_ambient_spawn_limit(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterAmbientSpawnLimit",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn water_underground_creature_spawn_limit(
        &mut self,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterUndergroundCreatureSpawnLimit",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn ambient_spawn_limit(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getAmbientSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn get_spawn_limit(
        &mut self,
        arg0: crate::bukkit::entity::SpawnCategory<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getSpawnLimit",
            "(Lorg/bukkit/entity/SpawnCategory;)I",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn get_temperature_with_int(
        &mut self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<f64, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        let val_2 = jni::objects::JValueGen::Int(arg2.unwrap().into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTemperature",
            "(III)D",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        Ok(res.d().unwrap())
    }
    pub fn get_humidity_with_int(
        &mut self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<f64, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        let val_2 = jni::objects::JValueGen::Int(arg2.unwrap().into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getHumidity",
            "(III)D",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        Ok(res.d().unwrap())
    }
    pub fn drop_item_with_location(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
        arg1: std::option::Option<crate::bukkit::inventory::ItemStack<'mc>>,
        arg2: std::option::Option<crate::bukkit::util::Consumer<'mc>>,
    ) -> Result<crate::bukkit::entity::Item<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.unwrap().1.clone()) };
        let val_2 = unsafe { jni::objects::JObject::from_raw(arg2.unwrap().1.clone()) };
        let res =
self.jni_ref().call_method(&self.jni_object(),"dropItem","(Lorg/bukkit/Location;Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/util/Consumer;)Lorg/bukkit/entity/Item;",&[jni::objects::JValueGen::from(&val_0),jni::objects::JValueGen::from(&val_1),jni::objects::JValueGen::from(&val_2)])?;
        let ret = {
            crate::bukkit::entity::Item(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn drop_item_naturally_with_location(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
        arg1: std::option::Option<crate::bukkit::inventory::ItemStack<'mc>>,
        arg2: std::option::Option<crate::bukkit::util::Consumer<'mc>>,
    ) -> Result<crate::bukkit::entity::Item<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.unwrap().1.clone()) };
        let val_2 = unsafe { jni::objects::JObject::from_raw(arg2.unwrap().1.clone()) };
        let res =
self.jni_ref().call_method(&self.jni_object(),"dropItemNaturally","(Lorg/bukkit/Location;Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/util/Consumer;)Lorg/bukkit/entity/Item;",&[jni::objects::JValueGen::from(&val_0),jni::objects::JValueGen::from(&val_1),jni::objects::JValueGen::from(&val_2)])?;
        let ret = {
            crate::bukkit::entity::Item(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn world_border(
        &mut self,
    ) -> Result<crate::bukkit::WorldBorder<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWorldBorder",
            "()Lorg/bukkit/WorldBorder;",
            &[],
        )?;
        let ret = {
            crate::bukkit::WorldBorder(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn generator(
        &mut self,
    ) -> Result<crate::bukkit::generator::ChunkGenerator<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getGenerator",
            "()Lorg/bukkit/generator/ChunkGenerator;",
            &[],
        )?;
        let ret = {
            crate::bukkit::generator::ChunkGenerator(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn biome_provider(
        &mut self,
    ) -> Result<crate::bukkit::generator::BiomeProvider<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBiomeProvider",
            "()Lorg/bukkit/generator/BiomeProvider;",
            &[],
        )?;
        let ret = {
            crate::bukkit::generator::BiomeProvider(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn can_generate_structures(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "canGenerateStructures", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_chunk_generated(
        &mut self,
        arg0: i32,
        arg1: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isChunkGenerated",
            "(II)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn is_chunk_in_use(
        &mut self,
        arg0: i32,
        arg1: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isChunkInUse",
            "(II)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn unload_chunk_request(
        &mut self,
        arg0: i32,
        arg1: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "unloadChunkRequest",
            "(II)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn regenerate_chunk(
        &mut self,
        arg0: i32,
        arg1: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "regenerateChunk",
            "(II)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn refresh_chunk(
        &mut self,
        arg0: i32,
        arg1: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "refreshChunk",
            "(II)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn is_chunk_force_loaded(
        &mut self,
        arg0: i32,
        arg1: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isChunkForceLoaded",
            "(II)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn set_chunk_force_loaded(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: bool,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = jni::objects::JValueGen::Bool(arg2.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setChunkForceLoaded",
            "(IIZ)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        Ok(())
    }
    pub fn remove_plugin_chunk_tickets(
        &mut self,
        arg0: crate::bukkit::plugin::Plugin<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        self.jni_ref().call_method(
            &self.jni_object(),
            "removePluginChunkTickets",
            "(Lorg/bukkit/plugin/Plugin;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn spawn_arrow_with_location(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
        arg1: crate::bukkit::util::Vector<'mc>,
        arg2: f32,
        arg3: std::option::Option<f32>,
        arg4: std::option::Option<jni::objects::JClass<'mc>>,
    ) -> Result<crate::bukkit::entity::AbstractArrow<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let val_2 = jni::objects::JValueGen::Float(arg2.into());
        let val_3 = jni::objects::JValueGen::Float(arg3.unwrap().into());
        let val_4 = arg4.unwrap();
        let res =
self.jni_ref().call_method(&self.jni_object(),"spawnArrow","(Lorg/bukkit/Location;Lorg/bukkit/util/Vector;FFLjava/lang/Class;)Lorg/bukkit/entity/AbstractArrow;",&[jni::objects::JValueGen::from(&val_0),jni::objects::JValueGen::from(&val_1),jni::objects::JValueGen::from(&val_2),jni::objects::JValueGen::from(&val_3),jni::objects::JValueGen::from(&val_4)])?;
        let ret = {
            crate::bukkit::entity::AbstractArrow(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn strike_lightning(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
    ) -> Result<crate::bukkit::entity::LightningStrike<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "strikeLightning",
            "(Lorg/bukkit/Location;)Lorg/bukkit/entity/LightningStrike;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::entity::LightningStrike(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn strike_lightning_effect(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
    ) -> Result<crate::bukkit::entity::LightningStrike<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "strikeLightningEffect",
            "(Lorg/bukkit/Location;)Lorg/bukkit/entity/LightningStrike;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::entity::LightningStrike(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn spawn_location(
        &mut self,
    ) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getSpawnLocation",
            "()Lorg/bukkit/Location;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Location(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn full_time(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getFullTime", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn set_full_time(&mut self, arg0: i64) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setFullTime",
            "(J)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn game_time(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getGameTime", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn has_storm(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasStorm", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_storm(&mut self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setStorm",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn weather_duration(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getWeatherDuration", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_weather_duration(&mut self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setWeatherDuration",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn is_thundering(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isThundering", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_thundering(&mut self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setThundering",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn thunder_duration(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getThunderDuration", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_thunder_duration(&mut self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setThunderDuration",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn is_clear_weather(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isClearWeather", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_clear_weather_duration(
        &mut self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setClearWeatherDuration",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn clear_weather_duration(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClearWeatherDuration",
            "()I",
            &[],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn pvp(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getPVP", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_pvp(&mut self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setPVP",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn get_empty_chunk_snapshot(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: bool,
        arg3: bool,
    ) -> Result<crate::bukkit::ChunkSnapshot<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = jni::objects::JValueGen::Bool(arg2.into());
        let val_3 = jni::objects::JValueGen::Bool(arg3.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEmptyChunkSnapshot",
            "(IIZZ)Lorg/bukkit/ChunkSnapshot;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
                jni::objects::JValueGen::from(&val_3),
            ],
        )?;
        let ret = {
            crate::bukkit::ChunkSnapshot(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn set_spawn_flags(
        &mut self,
        arg0: bool,
        arg1: bool,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        let val_1 = jni::objects::JValueGen::Bool(arg1.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setSpawnFlags",
            "(ZZ)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn allow_animals(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getAllowAnimals", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn allow_monsters(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getAllowMonsters", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn logical_height(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getLogicalHeight", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn is_natural(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isNatural", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_bed_works(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isBedWorks", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn has_sky_light(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasSkyLight", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn has_ceiling(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasCeiling", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_piglin_safe(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isPiglinSafe", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_respawn_anchor_works(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isRespawnAnchorWorks", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn has_raids(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasRaids", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_ultra_warm(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isUltraWarm", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn sea_level(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSeaLevel", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn keep_spawn_in_memory(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getKeepSpawnInMemory", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_keep_spawn_in_memory(
        &mut self,
        arg0: bool,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setKeepSpawnInMemory",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn is_auto_save(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isAutoSave", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_auto_save(&mut self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setAutoSave",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_difficulty(
        &mut self,
        arg0: crate::bukkit::Difficulty<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        self.jni_ref().call_method(
            &self.jni_object(),
            "setDifficulty",
            "(Lorg/bukkit/Difficulty;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn difficulty(
        &mut self,
    ) -> Result<crate::bukkit::Difficulty<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDifficulty",
            "()Lorg/bukkit/Difficulty;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Difficulty(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Difficulty::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn set_hardcore(&mut self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setHardcore",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_ticks_per_animal_spawns(
        &mut self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerAnimalSpawns",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_ticks_per_monster_spawns(
        &mut self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerMonsterSpawns",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_ticks_per_water_spawns(
        &mut self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerWaterSpawns",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_ticks_per_water_ambient_spawns(
        &mut self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerWaterAmbientSpawns",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_ticks_per_ambient_spawns(
        &mut self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerAmbientSpawns",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_ticks_per_spawns(
        &mut self,
        arg0: crate::bukkit::entity::SpawnCategory<'mc>,
        arg1: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerSpawns",
            "(Lorg/bukkit/entity/SpawnCategory;I)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn set_monster_spawn_limit(&mut self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setMonsterSpawnLimit",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_animal_spawn_limit(&mut self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setAnimalSpawnLimit",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_water_animal_spawn_limit(
        &mut self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setWaterAnimalSpawnLimit",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_water_underground_creature_spawn_limit(
        &mut self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setWaterUndergroundCreatureSpawnLimit",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_water_ambient_spawn_limit(
        &mut self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setWaterAmbientSpawnLimit",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_ambient_spawn_limit(&mut self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setAmbientSpawnLimit",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_spawn_limit(
        &mut self,
        arg0: crate::bukkit::entity::SpawnCategory<'mc>,
        arg1: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setSpawnLimit",
            "(Lorg/bukkit/entity/SpawnCategory;I)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn set_game_rule_value(
        &mut self,
        arg0: String,
        arg1: String,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let val_1 = jni::objects::JObject::from(self.jni_ref().new_string(arg1).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setGameRuleValue",
            "(Ljava/lang/String;Ljava/lang/String;)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn is_game_rule(&mut self, arg0: String) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isGameRule",
            "(Ljava/lang/String;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn get_game_rule_default(
        &mut self,
        arg0: crate::bukkit::GameRule<'mc>,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getGameRuleDefault",
            "(Lorg/bukkit/GameRule;)Ljava/lang/Object;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn set_game_rule(
        &mut self,
        arg0: crate::bukkit::GameRule<'mc>,
        arg1: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = arg1;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setGameRule",
            "(Lorg/bukkit/GameRule;Ljava/lang/Object;)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn locate_nearest_raid(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
        arg1: i32,
    ) -> Result<crate::bukkit::Raid<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "locateNearestRaid",
            "(Lorg/bukkit/Location;I)Lorg/bukkit/Raid;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            crate::bukkit::Raid(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn ender_dragon_battle(
        &mut self,
    ) -> Result<crate::bukkit::boss::DragonBattle<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEnderDragonBattle",
            "()Lorg/bukkit/boss/DragonBattle;",
            &[],
        )?;
        let ret = {
            crate::bukkit::boss::DragonBattle(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn spawn_entity_with_location(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
        arg1: std::option::Option<crate::bukkit::entity::EntityType<'mc>>,
        arg2: std::option::Option<bool>,
    ) -> Result<crate::bukkit::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.unwrap().1.clone()) };
        let val_2 = jni::objects::JValueGen::Bool(arg2.unwrap().into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "spawnEntity",
            "(Lorg/bukkit/Location;Lorg/bukkit/entity/EntityType;Z)Lorg/bukkit/entity/Entity;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            crate::bukkit::entity::Entity(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn seed(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSeed", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getName",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn environment(
        &mut self,
    ) -> Result<crate::bukkit::WorldEnvironment<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEnvironment",
            "()Lorg/bukkit/World$Environment;",
            &[],
        )?;
        let ret = {
            crate::bukkit::WorldEnvironment(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn min_height(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getMinHeight", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn max_height(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getMaxHeight", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn send_plugin_message(
        &mut self,
        arg0: crate::bukkit::plugin::Plugin<'mc>,
        arg1: String,
        _arg2: Vec<i8>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = jni::objects::JObject::from(self.jni_ref().new_string(arg1).unwrap());
        self.jni_ref().call_method(
            &self.jni_object(),
            "sendPluginMessage",
            "(Lorg/bukkit/plugin/Plugin;Ljava/lang/String;B)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn set_metadata(
        &mut self,
        arg0: String,
        arg1: crate::bukkit::metadata::MetadataValue<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        self.jni_ref().call_method(
            &self.jni_object(),
            "setMetadata",
            "(Ljava/lang/String;Lorg/bukkit/metadata/MetadataValue;)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn has_metadata(&mut self, arg0: String) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "hasMetadata",
            "(Ljava/lang/String;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn remove_metadata(
        &mut self,
        arg0: String,
        arg1: crate::bukkit::plugin::Plugin<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        self.jni_ref().call_method(
            &self.jni_object(),
            "removeMetadata",
            "(Ljava/lang/String;Lorg/bukkit/plugin/Plugin;)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn persistent_data_container(
        &mut self,
    ) -> Result<crate::bukkit::persistence::PersistentDataContainer<'mc>, Box<dyn std::error::Error>>
    {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPersistentDataContainer",
            "()Lorg/bukkit/persistence/PersistentDataContainer;",
            &[],
        )?;
        let ret = {
            crate::bukkit::persistence::PersistentDataContainer(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
}
impl<'mc> crate::JNIRaw<'mc> for World<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub enum FluidCollisionModeEnum {
    Never,
    SourceOnly,
    Always,
}
impl std::fmt::Display for FluidCollisionModeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            FluidCollisionModeEnum::Never => f.write_str("NEVER"),
            FluidCollisionModeEnum::SourceOnly => f.write_str("SOURCE_ONLY"),
            FluidCollisionModeEnum::Always => f.write_str("ALWAYS"),
        }
    }
}
pub struct FluidCollisionMode<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub FluidCollisionModeEnum,
);
impl<'mc> std::ops::Deref for FluidCollisionMode<'mc> {
    type Target = FluidCollisionModeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for FluidCollisionMode<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> FluidCollisionMode<'mc> {
    pub const NEVER: FluidCollisionModeEnum = FluidCollisionModeEnum::Never;
    pub const SOURCEONLY: FluidCollisionModeEnum = FluidCollisionModeEnum::SourceOnly;
    pub const ALWAYS: FluidCollisionModeEnum = FluidCollisionModeEnum::Always;
    pub fn from_string(str: String) -> std::option::Option<FluidCollisionModeEnum> {
        match str.as_str() {
            "NEVER" => Some(FluidCollisionModeEnum::Never),
            "SOURCE_ONLY" => Some(FluidCollisionModeEnum::SourceOnly),
            "ALWAYS" => Some(FluidCollisionModeEnum::Always),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::FluidCollisionMode<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/FluidCollisionMode")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/FluidCollisionMode;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::FluidCollisionMode(
                jni,
                raw_obj,
                crate::bukkit::FluidCollisionMode::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
/// An instantiatable struct that implements Nameable. Needed for returning it from Java.
pub struct Nameable<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> Nameable<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Nameable from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Nameable") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Nameable object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn custom_name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getCustomName",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn set_custom_name(&mut self, arg0: String) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setCustomName",
            "(Ljava/lang/String;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
}
impl<'mc> crate::JNIRaw<'mc> for Nameable<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub enum ParticleEnum {
    ExplosionNormal,
    ExplosionLarge,
    ExplosionHuge,
    FireworksSpark,
    WaterBubble,
    WaterSplash,
    WaterWake,
    Suspended,
    SuspendedDepth,
    Crit,
    CritMagic,
    SmokeNormal,
    SmokeLarge,
    Spell,
    SpellInstant,
    SpellMob,
    SpellMobAmbient,
    SpellWitch,
    DripWater,
    DripLava,
    VillagerAngry,
    VillagerHappy,
    TownAura,
    Note,
    Portal,
    EnchantmentTable,
    Flame,
    Lava,
    Cloud,
    Redstone,
    Snowball,
    SnowShovel,
    Slime,
    Heart,
    ItemCrack,
    BlockCrack,
    BlockDust,
    WaterDrop,
    MobAppearance,
    DragonBreath,
    EndRod,
    DamageIndicator,
    SweepAttack,
    FallingDust,
    Totem,
    Spit,
    SquidInk,
    BubblePop,
    CurrentDown,
    BubbleColumnUp,
    Nautilus,
    Dolphin,
    Sneeze,
    CampfireCosySmoke,
    CampfireSignalSmoke,
    Composter,
    Flash,
    FallingLava,
    LandingLava,
    FallingWater,
    DrippingHoney,
    FallingHoney,
    LandingHoney,
    FallingNectar,
    SoulFireFlame,
    Ash,
    CrimsonSpore,
    WarpedSpore,
    Soul,
    DrippingObsidianTear,
    FallingObsidianTear,
    LandingObsidianTear,
    ReversePortal,
    WhiteAsh,
    DustColorTransition,
    Vibration,
    FallingSporeBlossom,
    SporeBlossomAir,
    SmallFlame,
    Snowflake,
    DrippingDripstoneLava,
    FallingDripstoneLava,
    DrippingDripstoneWater,
    FallingDripstoneWater,
    GlowSquidInk,
    Glow,
    WaxOn,
    WaxOff,
    ElectricSpark,
    Scrape,
    SonicBoom,
    SculkSoul,
    SculkCharge,
    SculkChargePop,
    Shriek,
    CherryLeaves,
    EggCrack,
    BlockMarker,
    LegacyBlockCrack,
    LegacyBlockDust,
    LegacyFallingDust,
}
impl std::fmt::Display for ParticleEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            ParticleEnum::ExplosionNormal => f.write_str("EXPLOSION_NORMAL"),
            ParticleEnum::ExplosionLarge => f.write_str("EXPLOSION_LARGE"),
            ParticleEnum::ExplosionHuge => f.write_str("EXPLOSION_HUGE"),
            ParticleEnum::FireworksSpark => f.write_str("FIREWORKS_SPARK"),
            ParticleEnum::WaterBubble => f.write_str("WATER_BUBBLE"),
            ParticleEnum::WaterSplash => f.write_str("WATER_SPLASH"),
            ParticleEnum::WaterWake => f.write_str("WATER_WAKE"),
            ParticleEnum::Suspended => f.write_str("SUSPENDED"),
            ParticleEnum::SuspendedDepth => f.write_str("SUSPENDED_DEPTH"),
            ParticleEnum::Crit => f.write_str("CRIT"),
            ParticleEnum::CritMagic => f.write_str("CRIT_MAGIC"),
            ParticleEnum::SmokeNormal => f.write_str("SMOKE_NORMAL"),
            ParticleEnum::SmokeLarge => f.write_str("SMOKE_LARGE"),
            ParticleEnum::Spell => f.write_str("SPELL"),
            ParticleEnum::SpellInstant => f.write_str("SPELL_INSTANT"),
            ParticleEnum::SpellMob => f.write_str("SPELL_MOB"),
            ParticleEnum::SpellMobAmbient => f.write_str("SPELL_MOB_AMBIENT"),
            ParticleEnum::SpellWitch => f.write_str("SPELL_WITCH"),
            ParticleEnum::DripWater => f.write_str("DRIP_WATER"),
            ParticleEnum::DripLava => f.write_str("DRIP_LAVA"),
            ParticleEnum::VillagerAngry => f.write_str("VILLAGER_ANGRY"),
            ParticleEnum::VillagerHappy => f.write_str("VILLAGER_HAPPY"),
            ParticleEnum::TownAura => f.write_str("TOWN_AURA"),
            ParticleEnum::Note => f.write_str("NOTE"),
            ParticleEnum::Portal => f.write_str("PORTAL"),
            ParticleEnum::EnchantmentTable => f.write_str("ENCHANTMENT_TABLE"),
            ParticleEnum::Flame => f.write_str("FLAME"),
            ParticleEnum::Lava => f.write_str("LAVA"),
            ParticleEnum::Cloud => f.write_str("CLOUD"),
            ParticleEnum::Redstone => f.write_str("REDSTONE"),
            ParticleEnum::Snowball => f.write_str("SNOWBALL"),
            ParticleEnum::SnowShovel => f.write_str("SNOW_SHOVEL"),
            ParticleEnum::Slime => f.write_str("SLIME"),
            ParticleEnum::Heart => f.write_str("HEART"),
            ParticleEnum::ItemCrack => f.write_str("ITEM_CRACK"),
            ParticleEnum::BlockCrack => f.write_str("BLOCK_CRACK"),
            ParticleEnum::BlockDust => f.write_str("BLOCK_DUST"),
            ParticleEnum::WaterDrop => f.write_str("WATER_DROP"),
            ParticleEnum::MobAppearance => f.write_str("MOB_APPEARANCE"),
            ParticleEnum::DragonBreath => f.write_str("DRAGON_BREATH"),
            ParticleEnum::EndRod => f.write_str("END_ROD"),
            ParticleEnum::DamageIndicator => f.write_str("DAMAGE_INDICATOR"),
            ParticleEnum::SweepAttack => f.write_str("SWEEP_ATTACK"),
            ParticleEnum::FallingDust => f.write_str("FALLING_DUST"),
            ParticleEnum::Totem => f.write_str("TOTEM"),
            ParticleEnum::Spit => f.write_str("SPIT"),
            ParticleEnum::SquidInk => f.write_str("SQUID_INK"),
            ParticleEnum::BubblePop => f.write_str("BUBBLE_POP"),
            ParticleEnum::CurrentDown => f.write_str("CURRENT_DOWN"),
            ParticleEnum::BubbleColumnUp => f.write_str("BUBBLE_COLUMN_UP"),
            ParticleEnum::Nautilus => f.write_str("NAUTILUS"),
            ParticleEnum::Dolphin => f.write_str("DOLPHIN"),
            ParticleEnum::Sneeze => f.write_str("SNEEZE"),
            ParticleEnum::CampfireCosySmoke => f.write_str("CAMPFIRE_COSY_SMOKE"),
            ParticleEnum::CampfireSignalSmoke => f.write_str("CAMPFIRE_SIGNAL_SMOKE"),
            ParticleEnum::Composter => f.write_str("COMPOSTER"),
            ParticleEnum::Flash => f.write_str("FLASH"),
            ParticleEnum::FallingLava => f.write_str("FALLING_LAVA"),
            ParticleEnum::LandingLava => f.write_str("LANDING_LAVA"),
            ParticleEnum::FallingWater => f.write_str("FALLING_WATER"),
            ParticleEnum::DrippingHoney => f.write_str("DRIPPING_HONEY"),
            ParticleEnum::FallingHoney => f.write_str("FALLING_HONEY"),
            ParticleEnum::LandingHoney => f.write_str("LANDING_HONEY"),
            ParticleEnum::FallingNectar => f.write_str("FALLING_NECTAR"),
            ParticleEnum::SoulFireFlame => f.write_str("SOUL_FIRE_FLAME"),
            ParticleEnum::Ash => f.write_str("ASH"),
            ParticleEnum::CrimsonSpore => f.write_str("CRIMSON_SPORE"),
            ParticleEnum::WarpedSpore => f.write_str("WARPED_SPORE"),
            ParticleEnum::Soul => f.write_str("SOUL"),
            ParticleEnum::DrippingObsidianTear => f.write_str("DRIPPING_OBSIDIAN_TEAR"),
            ParticleEnum::FallingObsidianTear => f.write_str("FALLING_OBSIDIAN_TEAR"),
            ParticleEnum::LandingObsidianTear => f.write_str("LANDING_OBSIDIAN_TEAR"),
            ParticleEnum::ReversePortal => f.write_str("REVERSE_PORTAL"),
            ParticleEnum::WhiteAsh => f.write_str("WHITE_ASH"),
            ParticleEnum::DustColorTransition => f.write_str("DUST_COLOR_TRANSITION"),
            ParticleEnum::Vibration => f.write_str("VIBRATION"),
            ParticleEnum::FallingSporeBlossom => f.write_str("FALLING_SPORE_BLOSSOM"),
            ParticleEnum::SporeBlossomAir => f.write_str("SPORE_BLOSSOM_AIR"),
            ParticleEnum::SmallFlame => f.write_str("SMALL_FLAME"),
            ParticleEnum::Snowflake => f.write_str("SNOWFLAKE"),
            ParticleEnum::DrippingDripstoneLava => f.write_str("DRIPPING_DRIPSTONE_LAVA"),
            ParticleEnum::FallingDripstoneLava => f.write_str("FALLING_DRIPSTONE_LAVA"),
            ParticleEnum::DrippingDripstoneWater => f.write_str("DRIPPING_DRIPSTONE_WATER"),
            ParticleEnum::FallingDripstoneWater => f.write_str("FALLING_DRIPSTONE_WATER"),
            ParticleEnum::GlowSquidInk => f.write_str("GLOW_SQUID_INK"),
            ParticleEnum::Glow => f.write_str("GLOW"),
            ParticleEnum::WaxOn => f.write_str("WAX_ON"),
            ParticleEnum::WaxOff => f.write_str("WAX_OFF"),
            ParticleEnum::ElectricSpark => f.write_str("ELECTRIC_SPARK"),
            ParticleEnum::Scrape => f.write_str("SCRAPE"),
            ParticleEnum::SonicBoom => f.write_str("SONIC_BOOM"),
            ParticleEnum::SculkSoul => f.write_str("SCULK_SOUL"),
            ParticleEnum::SculkCharge => f.write_str("SCULK_CHARGE"),
            ParticleEnum::SculkChargePop => f.write_str("SCULK_CHARGE_POP"),
            ParticleEnum::Shriek => f.write_str("SHRIEK"),
            ParticleEnum::CherryLeaves => f.write_str("CHERRY_LEAVES"),
            ParticleEnum::EggCrack => f.write_str("EGG_CRACK"),
            ParticleEnum::BlockMarker => f.write_str("BLOCK_MARKER"),
            ParticleEnum::LegacyBlockCrack => f.write_str("LEGACY_BLOCK_CRACK"),
            ParticleEnum::LegacyBlockDust => f.write_str("LEGACY_BLOCK_DUST"),
            ParticleEnum::LegacyFallingDust => f.write_str("LEGACY_FALLING_DUST"),
        }
    }
}
pub struct Particle<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub ParticleEnum,
);
impl<'mc> std::ops::Deref for Particle<'mc> {
    type Target = ParticleEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for Particle<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct ParticleDustOptions<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for ParticleDustOptions<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> ParticleDustOptions<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate ParticleDustOptions from null object.").into(),
            );
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("ParticleDustOptions") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ParticleDustOptions object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn size(&mut self) -> Result<f32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSize", "()F", &[])?;
        Ok(res.f().unwrap())
    }
    pub fn color(&mut self) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getColor",
            "()Lorg/bukkit/Color;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Color(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub struct ParticleDustTransition<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for ParticleDustTransition<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> ParticleDustTransition<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate ParticleDustTransition from null object."
            )
            .into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("ParticleDustTransition") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ParticleDustTransition object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn to_color(&mut self) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getToColor",
            "()Lorg/bukkit/Color;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Color(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn size(&mut self) -> Result<f32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSize", "()F", &[])?;
        Ok(res.f().unwrap())
    }
    pub fn color(&mut self) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getColor",
            "()Lorg/bukkit/Color;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Color(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
impl<'mc> Particle<'mc> {
    pub const EXPLOSIONNORMAL: ParticleEnum = ParticleEnum::ExplosionNormal;
    pub const EXPLOSIONLARGE: ParticleEnum = ParticleEnum::ExplosionLarge;
    pub const EXPLOSIONHUGE: ParticleEnum = ParticleEnum::ExplosionHuge;
    pub const FIREWORKSSPARK: ParticleEnum = ParticleEnum::FireworksSpark;
    pub const WATERBUBBLE: ParticleEnum = ParticleEnum::WaterBubble;
    pub const WATERSPLASH: ParticleEnum = ParticleEnum::WaterSplash;
    pub const WATERWAKE: ParticleEnum = ParticleEnum::WaterWake;
    pub const SUSPENDED: ParticleEnum = ParticleEnum::Suspended;
    pub const SUSPENDEDDEPTH: ParticleEnum = ParticleEnum::SuspendedDepth;
    pub const CRIT: ParticleEnum = ParticleEnum::Crit;
    pub const CRITMAGIC: ParticleEnum = ParticleEnum::CritMagic;
    pub const SMOKENORMAL: ParticleEnum = ParticleEnum::SmokeNormal;
    pub const SMOKELARGE: ParticleEnum = ParticleEnum::SmokeLarge;
    pub const SPELL: ParticleEnum = ParticleEnum::Spell;
    pub const SPELLINSTANT: ParticleEnum = ParticleEnum::SpellInstant;
    pub const SPELLMOB: ParticleEnum = ParticleEnum::SpellMob;
    pub const SPELLMOBAMBIENT: ParticleEnum = ParticleEnum::SpellMobAmbient;
    pub const SPELLWITCH: ParticleEnum = ParticleEnum::SpellWitch;
    pub const DRIPWATER: ParticleEnum = ParticleEnum::DripWater;
    pub const DRIPLAVA: ParticleEnum = ParticleEnum::DripLava;
    pub const VILLAGERANGRY: ParticleEnum = ParticleEnum::VillagerAngry;
    pub const VILLAGERHAPPY: ParticleEnum = ParticleEnum::VillagerHappy;
    pub const TOWNAURA: ParticleEnum = ParticleEnum::TownAura;
    pub const NOTE: ParticleEnum = ParticleEnum::Note;
    pub const PORTAL: ParticleEnum = ParticleEnum::Portal;
    pub const ENCHANTMENTTABLE: ParticleEnum = ParticleEnum::EnchantmentTable;
    pub const FLAME: ParticleEnum = ParticleEnum::Flame;
    pub const LAVA: ParticleEnum = ParticleEnum::Lava;
    pub const CLOUD: ParticleEnum = ParticleEnum::Cloud;
    pub const REDSTONE: ParticleEnum = ParticleEnum::Redstone;
    pub const SNOWBALL: ParticleEnum = ParticleEnum::Snowball;
    pub const SNOWSHOVEL: ParticleEnum = ParticleEnum::SnowShovel;
    pub const SLIME: ParticleEnum = ParticleEnum::Slime;
    pub const HEART: ParticleEnum = ParticleEnum::Heart;
    pub const ITEMCRACK: ParticleEnum = ParticleEnum::ItemCrack;
    pub const BLOCKCRACK: ParticleEnum = ParticleEnum::BlockCrack;
    pub const BLOCKDUST: ParticleEnum = ParticleEnum::BlockDust;
    pub const WATERDROP: ParticleEnum = ParticleEnum::WaterDrop;
    pub const MOBAPPEARANCE: ParticleEnum = ParticleEnum::MobAppearance;
    pub const DRAGONBREATH: ParticleEnum = ParticleEnum::DragonBreath;
    pub const ENDROD: ParticleEnum = ParticleEnum::EndRod;
    pub const DAMAGEINDICATOR: ParticleEnum = ParticleEnum::DamageIndicator;
    pub const SWEEPATTACK: ParticleEnum = ParticleEnum::SweepAttack;
    pub const FALLINGDUST: ParticleEnum = ParticleEnum::FallingDust;
    pub const TOTEM: ParticleEnum = ParticleEnum::Totem;
    pub const SPIT: ParticleEnum = ParticleEnum::Spit;
    pub const SQUIDINK: ParticleEnum = ParticleEnum::SquidInk;
    pub const BUBBLEPOP: ParticleEnum = ParticleEnum::BubblePop;
    pub const CURRENTDOWN: ParticleEnum = ParticleEnum::CurrentDown;
    pub const BUBBLECOLUMNUP: ParticleEnum = ParticleEnum::BubbleColumnUp;
    pub const NAUTILUS: ParticleEnum = ParticleEnum::Nautilus;
    pub const DOLPHIN: ParticleEnum = ParticleEnum::Dolphin;
    pub const SNEEZE: ParticleEnum = ParticleEnum::Sneeze;
    pub const CAMPFIRECOSYSMOKE: ParticleEnum = ParticleEnum::CampfireCosySmoke;
    pub const CAMPFIRESIGNALSMOKE: ParticleEnum = ParticleEnum::CampfireSignalSmoke;
    pub const COMPOSTER: ParticleEnum = ParticleEnum::Composter;
    pub const FLASH: ParticleEnum = ParticleEnum::Flash;
    pub const FALLINGLAVA: ParticleEnum = ParticleEnum::FallingLava;
    pub const LANDINGLAVA: ParticleEnum = ParticleEnum::LandingLava;
    pub const FALLINGWATER: ParticleEnum = ParticleEnum::FallingWater;
    pub const DRIPPINGHONEY: ParticleEnum = ParticleEnum::DrippingHoney;
    pub const FALLINGHONEY: ParticleEnum = ParticleEnum::FallingHoney;
    pub const LANDINGHONEY: ParticleEnum = ParticleEnum::LandingHoney;
    pub const FALLINGNECTAR: ParticleEnum = ParticleEnum::FallingNectar;
    pub const SOULFIREFLAME: ParticleEnum = ParticleEnum::SoulFireFlame;
    pub const ASH: ParticleEnum = ParticleEnum::Ash;
    pub const CRIMSONSPORE: ParticleEnum = ParticleEnum::CrimsonSpore;
    pub const WARPEDSPORE: ParticleEnum = ParticleEnum::WarpedSpore;
    pub const SOUL: ParticleEnum = ParticleEnum::Soul;
    pub const DRIPPINGOBSIDIANTEAR: ParticleEnum = ParticleEnum::DrippingObsidianTear;
    pub const FALLINGOBSIDIANTEAR: ParticleEnum = ParticleEnum::FallingObsidianTear;
    pub const LANDINGOBSIDIANTEAR: ParticleEnum = ParticleEnum::LandingObsidianTear;
    pub const REVERSEPORTAL: ParticleEnum = ParticleEnum::ReversePortal;
    pub const WHITEASH: ParticleEnum = ParticleEnum::WhiteAsh;
    pub const DUSTCOLORTRANSITION: ParticleEnum = ParticleEnum::DustColorTransition;
    pub const VIBRATION: ParticleEnum = ParticleEnum::Vibration;
    pub const FALLINGSPOREBLOSSOM: ParticleEnum = ParticleEnum::FallingSporeBlossom;
    pub const SPOREBLOSSOMAIR: ParticleEnum = ParticleEnum::SporeBlossomAir;
    pub const SMALLFLAME: ParticleEnum = ParticleEnum::SmallFlame;
    pub const SNOWFLAKE: ParticleEnum = ParticleEnum::Snowflake;
    pub const DRIPPINGDRIPSTONELAVA: ParticleEnum = ParticleEnum::DrippingDripstoneLava;
    pub const FALLINGDRIPSTONELAVA: ParticleEnum = ParticleEnum::FallingDripstoneLava;
    pub const DRIPPINGDRIPSTONEWATER: ParticleEnum = ParticleEnum::DrippingDripstoneWater;
    pub const FALLINGDRIPSTONEWATER: ParticleEnum = ParticleEnum::FallingDripstoneWater;
    pub const GLOWSQUIDINK: ParticleEnum = ParticleEnum::GlowSquidInk;
    pub const GLOW: ParticleEnum = ParticleEnum::Glow;
    pub const WAXON: ParticleEnum = ParticleEnum::WaxOn;
    pub const WAXOFF: ParticleEnum = ParticleEnum::WaxOff;
    pub const ELECTRICSPARK: ParticleEnum = ParticleEnum::ElectricSpark;
    pub const SCRAPE: ParticleEnum = ParticleEnum::Scrape;
    pub const SONICBOOM: ParticleEnum = ParticleEnum::SonicBoom;
    pub const SCULKSOUL: ParticleEnum = ParticleEnum::SculkSoul;
    pub const SCULKCHARGE: ParticleEnum = ParticleEnum::SculkCharge;
    pub const SCULKCHARGEPOP: ParticleEnum = ParticleEnum::SculkChargePop;
    pub const SHRIEK: ParticleEnum = ParticleEnum::Shriek;
    pub const CHERRYLEAVES: ParticleEnum = ParticleEnum::CherryLeaves;
    pub const EGGCRACK: ParticleEnum = ParticleEnum::EggCrack;
    pub const BLOCKMARKER: ParticleEnum = ParticleEnum::BlockMarker;
    pub const LEGACYBLOCKCRACK: ParticleEnum = ParticleEnum::LegacyBlockCrack;
    pub const LEGACYBLOCKDUST: ParticleEnum = ParticleEnum::LegacyBlockDust;
    pub const LEGACYFALLINGDUST: ParticleEnum = ParticleEnum::LegacyFallingDust;
    pub fn from_string(str: String) -> std::option::Option<ParticleEnum> {
        match str.as_str() {
            "EXPLOSION_NORMAL" => Some(ParticleEnum::ExplosionNormal),
            "EXPLOSION_LARGE" => Some(ParticleEnum::ExplosionLarge),
            "EXPLOSION_HUGE" => Some(ParticleEnum::ExplosionHuge),
            "FIREWORKS_SPARK" => Some(ParticleEnum::FireworksSpark),
            "WATER_BUBBLE" => Some(ParticleEnum::WaterBubble),
            "WATER_SPLASH" => Some(ParticleEnum::WaterSplash),
            "WATER_WAKE" => Some(ParticleEnum::WaterWake),
            "SUSPENDED" => Some(ParticleEnum::Suspended),
            "SUSPENDED_DEPTH" => Some(ParticleEnum::SuspendedDepth),
            "CRIT" => Some(ParticleEnum::Crit),
            "CRIT_MAGIC" => Some(ParticleEnum::CritMagic),
            "SMOKE_NORMAL" => Some(ParticleEnum::SmokeNormal),
            "SMOKE_LARGE" => Some(ParticleEnum::SmokeLarge),
            "SPELL" => Some(ParticleEnum::Spell),
            "SPELL_INSTANT" => Some(ParticleEnum::SpellInstant),
            "SPELL_MOB" => Some(ParticleEnum::SpellMob),
            "SPELL_MOB_AMBIENT" => Some(ParticleEnum::SpellMobAmbient),
            "SPELL_WITCH" => Some(ParticleEnum::SpellWitch),
            "DRIP_WATER" => Some(ParticleEnum::DripWater),
            "DRIP_LAVA" => Some(ParticleEnum::DripLava),
            "VILLAGER_ANGRY" => Some(ParticleEnum::VillagerAngry),
            "VILLAGER_HAPPY" => Some(ParticleEnum::VillagerHappy),
            "TOWN_AURA" => Some(ParticleEnum::TownAura),
            "NOTE" => Some(ParticleEnum::Note),
            "PORTAL" => Some(ParticleEnum::Portal),
            "ENCHANTMENT_TABLE" => Some(ParticleEnum::EnchantmentTable),
            "FLAME" => Some(ParticleEnum::Flame),
            "LAVA" => Some(ParticleEnum::Lava),
            "CLOUD" => Some(ParticleEnum::Cloud),
            "REDSTONE" => Some(ParticleEnum::Redstone),
            "SNOWBALL" => Some(ParticleEnum::Snowball),
            "SNOW_SHOVEL" => Some(ParticleEnum::SnowShovel),
            "SLIME" => Some(ParticleEnum::Slime),
            "HEART" => Some(ParticleEnum::Heart),
            "ITEM_CRACK" => Some(ParticleEnum::ItemCrack),
            "BLOCK_CRACK" => Some(ParticleEnum::BlockCrack),
            "BLOCK_DUST" => Some(ParticleEnum::BlockDust),
            "WATER_DROP" => Some(ParticleEnum::WaterDrop),
            "MOB_APPEARANCE" => Some(ParticleEnum::MobAppearance),
            "DRAGON_BREATH" => Some(ParticleEnum::DragonBreath),
            "END_ROD" => Some(ParticleEnum::EndRod),
            "DAMAGE_INDICATOR" => Some(ParticleEnum::DamageIndicator),
            "SWEEP_ATTACK" => Some(ParticleEnum::SweepAttack),
            "FALLING_DUST" => Some(ParticleEnum::FallingDust),
            "TOTEM" => Some(ParticleEnum::Totem),
            "SPIT" => Some(ParticleEnum::Spit),
            "SQUID_INK" => Some(ParticleEnum::SquidInk),
            "BUBBLE_POP" => Some(ParticleEnum::BubblePop),
            "CURRENT_DOWN" => Some(ParticleEnum::CurrentDown),
            "BUBBLE_COLUMN_UP" => Some(ParticleEnum::BubbleColumnUp),
            "NAUTILUS" => Some(ParticleEnum::Nautilus),
            "DOLPHIN" => Some(ParticleEnum::Dolphin),
            "SNEEZE" => Some(ParticleEnum::Sneeze),
            "CAMPFIRE_COSY_SMOKE" => Some(ParticleEnum::CampfireCosySmoke),
            "CAMPFIRE_SIGNAL_SMOKE" => Some(ParticleEnum::CampfireSignalSmoke),
            "COMPOSTER" => Some(ParticleEnum::Composter),
            "FLASH" => Some(ParticleEnum::Flash),
            "FALLING_LAVA" => Some(ParticleEnum::FallingLava),
            "LANDING_LAVA" => Some(ParticleEnum::LandingLava),
            "FALLING_WATER" => Some(ParticleEnum::FallingWater),
            "DRIPPING_HONEY" => Some(ParticleEnum::DrippingHoney),
            "FALLING_HONEY" => Some(ParticleEnum::FallingHoney),
            "LANDING_HONEY" => Some(ParticleEnum::LandingHoney),
            "FALLING_NECTAR" => Some(ParticleEnum::FallingNectar),
            "SOUL_FIRE_FLAME" => Some(ParticleEnum::SoulFireFlame),
            "ASH" => Some(ParticleEnum::Ash),
            "CRIMSON_SPORE" => Some(ParticleEnum::CrimsonSpore),
            "WARPED_SPORE" => Some(ParticleEnum::WarpedSpore),
            "SOUL" => Some(ParticleEnum::Soul),
            "DRIPPING_OBSIDIAN_TEAR" => Some(ParticleEnum::DrippingObsidianTear),
            "FALLING_OBSIDIAN_TEAR" => Some(ParticleEnum::FallingObsidianTear),
            "LANDING_OBSIDIAN_TEAR" => Some(ParticleEnum::LandingObsidianTear),
            "REVERSE_PORTAL" => Some(ParticleEnum::ReversePortal),
            "WHITE_ASH" => Some(ParticleEnum::WhiteAsh),
            "DUST_COLOR_TRANSITION" => Some(ParticleEnum::DustColorTransition),
            "VIBRATION" => Some(ParticleEnum::Vibration),
            "FALLING_SPORE_BLOSSOM" => Some(ParticleEnum::FallingSporeBlossom),
            "SPORE_BLOSSOM_AIR" => Some(ParticleEnum::SporeBlossomAir),
            "SMALL_FLAME" => Some(ParticleEnum::SmallFlame),
            "SNOWFLAKE" => Some(ParticleEnum::Snowflake),
            "DRIPPING_DRIPSTONE_LAVA" => Some(ParticleEnum::DrippingDripstoneLava),
            "FALLING_DRIPSTONE_LAVA" => Some(ParticleEnum::FallingDripstoneLava),
            "DRIPPING_DRIPSTONE_WATER" => Some(ParticleEnum::DrippingDripstoneWater),
            "FALLING_DRIPSTONE_WATER" => Some(ParticleEnum::FallingDripstoneWater),
            "GLOW_SQUID_INK" => Some(ParticleEnum::GlowSquidInk),
            "GLOW" => Some(ParticleEnum::Glow),
            "WAX_ON" => Some(ParticleEnum::WaxOn),
            "WAX_OFF" => Some(ParticleEnum::WaxOff),
            "ELECTRIC_SPARK" => Some(ParticleEnum::ElectricSpark),
            "SCRAPE" => Some(ParticleEnum::Scrape),
            "SONIC_BOOM" => Some(ParticleEnum::SonicBoom),
            "SCULK_SOUL" => Some(ParticleEnum::SculkSoul),
            "SCULK_CHARGE" => Some(ParticleEnum::SculkCharge),
            "SCULK_CHARGE_POP" => Some(ParticleEnum::SculkChargePop),
            "SHRIEK" => Some(ParticleEnum::Shriek),
            "CHERRY_LEAVES" => Some(ParticleEnum::CherryLeaves),
            "EGG_CRACK" => Some(ParticleEnum::EggCrack),
            "BLOCK_MARKER" => Some(ParticleEnum::BlockMarker),
            "LEGACY_BLOCK_CRACK" => Some(ParticleEnum::LegacyBlockCrack),
            "LEGACY_BLOCK_DUST" => Some(ParticleEnum::LegacyBlockDust),
            "LEGACY_FALLING_DUST" => Some(ParticleEnum::LegacyFallingDust),
            _ => None,
        }
    }
    pub fn data_type(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDataType",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Particle<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Particle")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Particle;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Particle(
                jni,
                raw_obj,
                crate::bukkit::Particle::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub enum EntityEffectEnum {
    ArrowParticles,
    RabbitJump,
    Hurt,
    Death,
    WolfSmoke,
    WolfHearts,
    WolfShake,
    SheepEat,
    IronGolemRose,
    VillagerHeart,
    VillagerAngry,
    VillagerHappy,
    WitchMagic,
    ZombieTransform,
    FireworkExplode,
    LoveHearts,
    SquidRotate,
    EntityPoof,
    GuardianTarget,
    ShieldBlock,
    ShieldBreak,
    ArmorStandHit,
    ThornsHurt,
    IronGolemSheath,
    TotemResurrect,
    HurtDrown,
    HurtExplosion,
    DolphinFed,
    RavagerStunned,
    CatTameFail,
    CatTameSuccess,
    VillagerSplash,
    PlayerBadOmenRaid,
    HurtBerryBush,
    FoxChew,
    TeleportEnder,
    BreakEquipmentMainHand,
    BreakEquipmentOffHand,
    BreakEquipmentHelmet,
    BreakEquipmentChestplate,
    BreakEquipmentLeggings,
    BreakEquipmentBoots,
}
impl std::fmt::Display for EntityEffectEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            EntityEffectEnum::ArrowParticles => f.write_str("ARROW_PARTICLES"),
            EntityEffectEnum::RabbitJump => f.write_str("RABBIT_JUMP"),
            EntityEffectEnum::Hurt => f.write_str("HURT"),
            EntityEffectEnum::Death => f.write_str("DEATH"),
            EntityEffectEnum::WolfSmoke => f.write_str("WOLF_SMOKE"),
            EntityEffectEnum::WolfHearts => f.write_str("WOLF_HEARTS"),
            EntityEffectEnum::WolfShake => f.write_str("WOLF_SHAKE"),
            EntityEffectEnum::SheepEat => f.write_str("SHEEP_EAT"),
            EntityEffectEnum::IronGolemRose => f.write_str("IRON_GOLEM_ROSE"),
            EntityEffectEnum::VillagerHeart => f.write_str("VILLAGER_HEART"),
            EntityEffectEnum::VillagerAngry => f.write_str("VILLAGER_ANGRY"),
            EntityEffectEnum::VillagerHappy => f.write_str("VILLAGER_HAPPY"),
            EntityEffectEnum::WitchMagic => f.write_str("WITCH_MAGIC"),
            EntityEffectEnum::ZombieTransform => f.write_str("ZOMBIE_TRANSFORM"),
            EntityEffectEnum::FireworkExplode => f.write_str("FIREWORK_EXPLODE"),
            EntityEffectEnum::LoveHearts => f.write_str("LOVE_HEARTS"),
            EntityEffectEnum::SquidRotate => f.write_str("SQUID_ROTATE"),
            EntityEffectEnum::EntityPoof => f.write_str("ENTITY_POOF"),
            EntityEffectEnum::GuardianTarget => f.write_str("GUARDIAN_TARGET"),
            EntityEffectEnum::ShieldBlock => f.write_str("SHIELD_BLOCK"),
            EntityEffectEnum::ShieldBreak => f.write_str("SHIELD_BREAK"),
            EntityEffectEnum::ArmorStandHit => f.write_str("ARMOR_STAND_HIT"),
            EntityEffectEnum::ThornsHurt => f.write_str("THORNS_HURT"),
            EntityEffectEnum::IronGolemSheath => f.write_str("IRON_GOLEM_SHEATH"),
            EntityEffectEnum::TotemResurrect => f.write_str("TOTEM_RESURRECT"),
            EntityEffectEnum::HurtDrown => f.write_str("HURT_DROWN"),
            EntityEffectEnum::HurtExplosion => f.write_str("HURT_EXPLOSION"),
            EntityEffectEnum::DolphinFed => f.write_str("DOLPHIN_FED"),
            EntityEffectEnum::RavagerStunned => f.write_str("RAVAGER_STUNNED"),
            EntityEffectEnum::CatTameFail => f.write_str("CAT_TAME_FAIL"),
            EntityEffectEnum::CatTameSuccess => f.write_str("CAT_TAME_SUCCESS"),
            EntityEffectEnum::VillagerSplash => f.write_str("VILLAGER_SPLASH"),
            EntityEffectEnum::PlayerBadOmenRaid => f.write_str("PLAYER_BAD_OMEN_RAID"),
            EntityEffectEnum::HurtBerryBush => f.write_str("HURT_BERRY_BUSH"),
            EntityEffectEnum::FoxChew => f.write_str("FOX_CHEW"),
            EntityEffectEnum::TeleportEnder => f.write_str("TELEPORT_ENDER"),
            EntityEffectEnum::BreakEquipmentMainHand => f.write_str("BREAK_EQUIPMENT_MAIN_HAND"),
            EntityEffectEnum::BreakEquipmentOffHand => f.write_str("BREAK_EQUIPMENT_OFF_HAND"),
            EntityEffectEnum::BreakEquipmentHelmet => f.write_str("BREAK_EQUIPMENT_HELMET"),
            EntityEffectEnum::BreakEquipmentChestplate => f.write_str("BREAK_EQUIPMENT_CHESTPLATE"),
            EntityEffectEnum::BreakEquipmentLeggings => f.write_str("BREAK_EQUIPMENT_LEGGINGS"),
            EntityEffectEnum::BreakEquipmentBoots => f.write_str("BREAK_EQUIPMENT_BOOTS"),
        }
    }
}
pub struct EntityEffect<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub EntityEffectEnum,
);
impl<'mc> std::ops::Deref for EntityEffect<'mc> {
    type Target = EntityEffectEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for EntityEffect<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> EntityEffect<'mc> {
    pub const ARROWPARTICLES: EntityEffectEnum = EntityEffectEnum::ArrowParticles;
    pub const RABBITJUMP: EntityEffectEnum = EntityEffectEnum::RabbitJump;
    pub const HURT: EntityEffectEnum = EntityEffectEnum::Hurt;
    pub const DEATH: EntityEffectEnum = EntityEffectEnum::Death;
    pub const WOLFSMOKE: EntityEffectEnum = EntityEffectEnum::WolfSmoke;
    pub const WOLFHEARTS: EntityEffectEnum = EntityEffectEnum::WolfHearts;
    pub const WOLFSHAKE: EntityEffectEnum = EntityEffectEnum::WolfShake;
    pub const SHEEPEAT: EntityEffectEnum = EntityEffectEnum::SheepEat;
    pub const IRONGOLEMROSE: EntityEffectEnum = EntityEffectEnum::IronGolemRose;
    pub const VILLAGERHEART: EntityEffectEnum = EntityEffectEnum::VillagerHeart;
    pub const VILLAGERANGRY: EntityEffectEnum = EntityEffectEnum::VillagerAngry;
    pub const VILLAGERHAPPY: EntityEffectEnum = EntityEffectEnum::VillagerHappy;
    pub const WITCHMAGIC: EntityEffectEnum = EntityEffectEnum::WitchMagic;
    pub const ZOMBIETRANSFORM: EntityEffectEnum = EntityEffectEnum::ZombieTransform;
    pub const FIREWORKEXPLODE: EntityEffectEnum = EntityEffectEnum::FireworkExplode;
    pub const LOVEHEARTS: EntityEffectEnum = EntityEffectEnum::LoveHearts;
    pub const SQUIDROTATE: EntityEffectEnum = EntityEffectEnum::SquidRotate;
    pub const ENTITYPOOF: EntityEffectEnum = EntityEffectEnum::EntityPoof;
    pub const GUARDIANTARGET: EntityEffectEnum = EntityEffectEnum::GuardianTarget;
    pub const SHIELDBLOCK: EntityEffectEnum = EntityEffectEnum::ShieldBlock;
    pub const SHIELDBREAK: EntityEffectEnum = EntityEffectEnum::ShieldBreak;
    pub const ARMORSTANDHIT: EntityEffectEnum = EntityEffectEnum::ArmorStandHit;
    pub const THORNSHURT: EntityEffectEnum = EntityEffectEnum::ThornsHurt;
    pub const IRONGOLEMSHEATH: EntityEffectEnum = EntityEffectEnum::IronGolemSheath;
    pub const TOTEMRESURRECT: EntityEffectEnum = EntityEffectEnum::TotemResurrect;
    pub const HURTDROWN: EntityEffectEnum = EntityEffectEnum::HurtDrown;
    pub const HURTEXPLOSION: EntityEffectEnum = EntityEffectEnum::HurtExplosion;
    pub const DOLPHINFED: EntityEffectEnum = EntityEffectEnum::DolphinFed;
    pub const RAVAGERSTUNNED: EntityEffectEnum = EntityEffectEnum::RavagerStunned;
    pub const CATTAMEFAIL: EntityEffectEnum = EntityEffectEnum::CatTameFail;
    pub const CATTAMESUCCESS: EntityEffectEnum = EntityEffectEnum::CatTameSuccess;
    pub const VILLAGERSPLASH: EntityEffectEnum = EntityEffectEnum::VillagerSplash;
    pub const PLAYERBADOMENRAID: EntityEffectEnum = EntityEffectEnum::PlayerBadOmenRaid;
    pub const HURTBERRYBUSH: EntityEffectEnum = EntityEffectEnum::HurtBerryBush;
    pub const FOXCHEW: EntityEffectEnum = EntityEffectEnum::FoxChew;
    pub const TELEPORTENDER: EntityEffectEnum = EntityEffectEnum::TeleportEnder;
    pub const BREAKEQUIPMENTMAINHAND: EntityEffectEnum = EntityEffectEnum::BreakEquipmentMainHand;
    pub const BREAKEQUIPMENTOFFHAND: EntityEffectEnum = EntityEffectEnum::BreakEquipmentOffHand;
    pub const BREAKEQUIPMENTHELMET: EntityEffectEnum = EntityEffectEnum::BreakEquipmentHelmet;
    pub const BREAKEQUIPMENTCHESTPLATE: EntityEffectEnum =
        EntityEffectEnum::BreakEquipmentChestplate;
    pub const BREAKEQUIPMENTLEGGINGS: EntityEffectEnum = EntityEffectEnum::BreakEquipmentLeggings;
    pub const BREAKEQUIPMENTBOOTS: EntityEffectEnum = EntityEffectEnum::BreakEquipmentBoots;
    pub fn from_string(str: String) -> std::option::Option<EntityEffectEnum> {
        match str.as_str() {
            "ARROW_PARTICLES" => Some(EntityEffectEnum::ArrowParticles),
            "RABBIT_JUMP" => Some(EntityEffectEnum::RabbitJump),
            "HURT" => Some(EntityEffectEnum::Hurt),
            "DEATH" => Some(EntityEffectEnum::Death),
            "WOLF_SMOKE" => Some(EntityEffectEnum::WolfSmoke),
            "WOLF_HEARTS" => Some(EntityEffectEnum::WolfHearts),
            "WOLF_SHAKE" => Some(EntityEffectEnum::WolfShake),
            "SHEEP_EAT" => Some(EntityEffectEnum::SheepEat),
            "IRON_GOLEM_ROSE" => Some(EntityEffectEnum::IronGolemRose),
            "VILLAGER_HEART" => Some(EntityEffectEnum::VillagerHeart),
            "VILLAGER_ANGRY" => Some(EntityEffectEnum::VillagerAngry),
            "VILLAGER_HAPPY" => Some(EntityEffectEnum::VillagerHappy),
            "WITCH_MAGIC" => Some(EntityEffectEnum::WitchMagic),
            "ZOMBIE_TRANSFORM" => Some(EntityEffectEnum::ZombieTransform),
            "FIREWORK_EXPLODE" => Some(EntityEffectEnum::FireworkExplode),
            "LOVE_HEARTS" => Some(EntityEffectEnum::LoveHearts),
            "SQUID_ROTATE" => Some(EntityEffectEnum::SquidRotate),
            "ENTITY_POOF" => Some(EntityEffectEnum::EntityPoof),
            "GUARDIAN_TARGET" => Some(EntityEffectEnum::GuardianTarget),
            "SHIELD_BLOCK" => Some(EntityEffectEnum::ShieldBlock),
            "SHIELD_BREAK" => Some(EntityEffectEnum::ShieldBreak),
            "ARMOR_STAND_HIT" => Some(EntityEffectEnum::ArmorStandHit),
            "THORNS_HURT" => Some(EntityEffectEnum::ThornsHurt),
            "IRON_GOLEM_SHEATH" => Some(EntityEffectEnum::IronGolemSheath),
            "TOTEM_RESURRECT" => Some(EntityEffectEnum::TotemResurrect),
            "HURT_DROWN" => Some(EntityEffectEnum::HurtDrown),
            "HURT_EXPLOSION" => Some(EntityEffectEnum::HurtExplosion),
            "DOLPHIN_FED" => Some(EntityEffectEnum::DolphinFed),
            "RAVAGER_STUNNED" => Some(EntityEffectEnum::RavagerStunned),
            "CAT_TAME_FAIL" => Some(EntityEffectEnum::CatTameFail),
            "CAT_TAME_SUCCESS" => Some(EntityEffectEnum::CatTameSuccess),
            "VILLAGER_SPLASH" => Some(EntityEffectEnum::VillagerSplash),
            "PLAYER_BAD_OMEN_RAID" => Some(EntityEffectEnum::PlayerBadOmenRaid),
            "HURT_BERRY_BUSH" => Some(EntityEffectEnum::HurtBerryBush),
            "FOX_CHEW" => Some(EntityEffectEnum::FoxChew),
            "TELEPORT_ENDER" => Some(EntityEffectEnum::TeleportEnder),
            "BREAK_EQUIPMENT_MAIN_HAND" => Some(EntityEffectEnum::BreakEquipmentMainHand),
            "BREAK_EQUIPMENT_OFF_HAND" => Some(EntityEffectEnum::BreakEquipmentOffHand),
            "BREAK_EQUIPMENT_HELMET" => Some(EntityEffectEnum::BreakEquipmentHelmet),
            "BREAK_EQUIPMENT_CHESTPLATE" => Some(EntityEffectEnum::BreakEquipmentChestplate),
            "BREAK_EQUIPMENT_LEGGINGS" => Some(EntityEffectEnum::BreakEquipmentLeggings),
            "BREAK_EQUIPMENT_BOOTS" => Some(EntityEffectEnum::BreakEquipmentBoots),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::EntityEffect<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/EntityEffect")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/EntityEffect;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::EntityEffect(
                jni,
                raw_obj,
                crate::bukkit::EntityEffect::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn data(&mut self) -> Result<i8, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getData", "()B", &[])?;
        Ok(res.b().unwrap())
    }
    pub fn applicable(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getApplicable",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
}
pub enum GrassSpeciesEnum {
    Dead,
    Normal,
    FernLike,
}
impl std::fmt::Display for GrassSpeciesEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            GrassSpeciesEnum::Dead => f.write_str("DEAD"),
            GrassSpeciesEnum::Normal => f.write_str("NORMAL"),
            GrassSpeciesEnum::FernLike => f.write_str("FERN_LIKE"),
        }
    }
}
pub struct GrassSpecies<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub GrassSpeciesEnum,
);
impl<'mc> std::ops::Deref for GrassSpecies<'mc> {
    type Target = GrassSpeciesEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for GrassSpecies<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> GrassSpecies<'mc> {
    pub const DEAD: GrassSpeciesEnum = GrassSpeciesEnum::Dead;
    pub const NORMAL: GrassSpeciesEnum = GrassSpeciesEnum::Normal;
    pub const FERNLIKE: GrassSpeciesEnum = GrassSpeciesEnum::FernLike;
    pub fn from_string(str: String) -> std::option::Option<GrassSpeciesEnum> {
        match str.as_str() {
            "DEAD" => Some(GrassSpeciesEnum::Dead),
            "NORMAL" => Some(GrassSpeciesEnum::Normal),
            "FERN_LIKE" => Some(GrassSpeciesEnum::FernLike),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::GrassSpecies<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/GrassSpecies")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/GrassSpecies;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::GrassSpecies(
                jni,
                raw_obj,
                crate::bukkit::GrassSpecies::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn data(&mut self) -> Result<i8, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getData", "()B", &[])?;
        Ok(res.b().unwrap())
    }
    pub fn get_by_data(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i8,
    ) -> Result<crate::bukkit::GrassSpecies<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Byte(arg0.into());
        let cls = &jni.find_class("org/bukkit/GrassSpecies")?;
        let res = jni.call_static_method(
            cls,
            "getByData",
            "(B)Lorg/bukkit/GrassSpecies;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::GrassSpecies(
                jni,
                raw_obj,
                crate::bukkit::GrassSpecies::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
/// An instantiatable struct that implements Utility. Needed for returning it from Java.
pub struct Utility<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> Utility<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Utility from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Utility") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Utility object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn annotation_type(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "annotationType",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
}
impl<'mc> crate::JNIRaw<'mc> for Utility<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub enum WorldTypeEnum {
    Normal,
    Flat,
    LargeBiomes,
    Amplified,
}
impl std::fmt::Display for WorldTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            WorldTypeEnum::Normal => f.write_str("NORMAL"),
            WorldTypeEnum::Flat => f.write_str("FLAT"),
            WorldTypeEnum::LargeBiomes => f.write_str("LARGE_BIOMES"),
            WorldTypeEnum::Amplified => f.write_str("AMPLIFIED"),
        }
    }
}
pub struct WorldType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub WorldTypeEnum,
);
impl<'mc> std::ops::Deref for WorldType<'mc> {
    type Target = WorldTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for WorldType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> WorldType<'mc> {
    pub const NORMAL: WorldTypeEnum = WorldTypeEnum::Normal;
    pub const FLAT: WorldTypeEnum = WorldTypeEnum::Flat;
    pub const LARGEBIOMES: WorldTypeEnum = WorldTypeEnum::LargeBiomes;
    pub const AMPLIFIED: WorldTypeEnum = WorldTypeEnum::Amplified;
    pub fn from_string(str: String) -> std::option::Option<WorldTypeEnum> {
        match str.as_str() {
            "NORMAL" => Some(WorldTypeEnum::Normal),
            "FLAT" => Some(WorldTypeEnum::Flat),
            "LARGE_BIOMES" => Some(WorldTypeEnum::LargeBiomes),
            "AMPLIFIED" => Some(WorldTypeEnum::Amplified),
            _ => None,
        }
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getName",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::WorldType<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/WorldType")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/WorldType;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::WorldType(
                jni,
                raw_obj,
                crate::bukkit::WorldType::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn get_by_name(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::WorldType<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/WorldType")?;
        let res = jni.call_static_method(
            cls,
            "getByName",
            "(Ljava/lang/String;)Lorg/bukkit/WorldType;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::WorldType(
                jni,
                raw_obj,
                crate::bukkit::WorldType::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub struct GameEvent<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for GameEvent<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> GameEvent<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate GameEvent from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("GameEvent") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a GameEvent object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_by_key(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::GameEvent<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/GameEvent")?;
        let res = jni.call_static_method(
            cls,
            "getByKey",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/GameEvent;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::GameEvent(jni, obj)
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
/// An instantiatable struct that implements OfflinePlayer. Needed for returning it from Java.
pub struct OfflinePlayer<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> OfflinePlayer<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate OfflinePlayer from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("OfflinePlayer") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a OfflinePlayer object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getName",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn is_banned(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isBanned", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn player(
        &mut self,
    ) -> Result<crate::bukkit::entity::Player<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPlayer",
            "()Lorg/bukkit/entity/Player;",
            &[],
        )?;
        let ret = {
            crate::bukkit::entity::Player(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn last_death_location(
        &mut self,
    ) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getLastDeathLocation",
            "()Lorg/bukkit/Location;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Location(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn bed_spawn_location(
        &mut self,
    ) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBedSpawnLocation",
            "()Lorg/bukkit/Location;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Location(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn is_online(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isOnline", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn player_profile(
        &mut self,
    ) -> Result<crate::bukkit::profile::PlayerProfile<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPlayerProfile",
            "()Lorg/bukkit/profile/PlayerProfile;",
            &[],
        )?;
        let ret = {
            crate::bukkit::profile::PlayerProfile(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn ban(
        &mut self,
        arg0: String,
        arg1: jni::objects::JObject<'mc>,
        arg2: String,
    ) -> Result<crate::bukkit::BanEntry<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let val_1 = arg1;
        let val_2 = jni::objects::JObject::from(self.jni_ref().new_string(arg2).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "ban",
            "(Ljava/lang/String;Ljava/util/Date;Ljava/lang/String;)Lorg/bukkit/BanEntry;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            crate::bukkit::BanEntry(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn is_whitelisted(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isWhitelisted", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_whitelisted(&mut self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setWhitelisted",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn first_played(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getFirstPlayed", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn last_played(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getLastPlayed", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn has_played_before(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasPlayedBefore", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_op(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isOp", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_op(&mut self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setOp",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
}
impl<'mc> crate::JNIRaw<'mc> for OfflinePlayer<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct WorldSpigot<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for WorldSpigot<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> WorldSpigot<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate WorldSpigot from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("WorldSpigot") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WorldSpigot object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn strike_lightning(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
        arg1: bool,
    ) -> Result<crate::bukkit::entity::LightningStrike<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = jni::objects::JValueGen::Bool(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "strikeLightning",
            "(Lorg/bukkit/Location;Z)Lorg/bukkit/entity/LightningStrike;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            crate::bukkit::entity::LightningStrike(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn strike_lightning_effect(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
        arg1: bool,
    ) -> Result<crate::bukkit::entity::LightningStrike<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = jni::objects::JValueGen::Bool(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "strikeLightningEffect",
            "(Lorg/bukkit/Location;Z)Lorg/bukkit/entity/LightningStrike;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            crate::bukkit::entity::LightningStrike(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub struct WarningWarningState<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for WarningWarningState<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> WarningWarningState<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate WarningWarningState from null object.").into(),
            );
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("WarningWarningState") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WarningWarningState object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn value(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::WarningWarningState<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Warning$WarningState")?;
        let res = jni.call_static_method(
            cls,
            "value",
            "(Ljava/lang/String;)Lorg/bukkit/Warning$WarningState;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::WarningWarningState(jni, obj)
        };
        Ok(ret)
    }
    pub fn print_for(
        &mut self,
        arg0: crate::bukkit::Warning<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "printFor",
            "(Lorg/bukkit/Warning;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "name", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn describe_constable(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "describeConstable",
            "()Ljava/util/Optional;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn declaring_class(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDeclaringClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn ordinal(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "ordinal", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub enum SoundCategoryEnum {
    Master,
    Music,
    Records,
    Weather,
    Blocks,
    Hostile,
    Neutral,
    Players,
    Ambient,
    Voice,
}
impl std::fmt::Display for SoundCategoryEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            SoundCategoryEnum::Master => f.write_str("MASTER"),
            SoundCategoryEnum::Music => f.write_str("MUSIC"),
            SoundCategoryEnum::Records => f.write_str("RECORDS"),
            SoundCategoryEnum::Weather => f.write_str("WEATHER"),
            SoundCategoryEnum::Blocks => f.write_str("BLOCKS"),
            SoundCategoryEnum::Hostile => f.write_str("HOSTILE"),
            SoundCategoryEnum::Neutral => f.write_str("NEUTRAL"),
            SoundCategoryEnum::Players => f.write_str("PLAYERS"),
            SoundCategoryEnum::Ambient => f.write_str("AMBIENT"),
            SoundCategoryEnum::Voice => f.write_str("VOICE"),
        }
    }
}
pub struct SoundCategory<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub SoundCategoryEnum,
);
impl<'mc> std::ops::Deref for SoundCategory<'mc> {
    type Target = SoundCategoryEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for SoundCategory<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> SoundCategory<'mc> {
    pub const MASTER: SoundCategoryEnum = SoundCategoryEnum::Master;
    pub const MUSIC: SoundCategoryEnum = SoundCategoryEnum::Music;
    pub const RECORDS: SoundCategoryEnum = SoundCategoryEnum::Records;
    pub const WEATHER: SoundCategoryEnum = SoundCategoryEnum::Weather;
    pub const BLOCKS: SoundCategoryEnum = SoundCategoryEnum::Blocks;
    pub const HOSTILE: SoundCategoryEnum = SoundCategoryEnum::Hostile;
    pub const NEUTRAL: SoundCategoryEnum = SoundCategoryEnum::Neutral;
    pub const PLAYERS: SoundCategoryEnum = SoundCategoryEnum::Players;
    pub const AMBIENT: SoundCategoryEnum = SoundCategoryEnum::Ambient;
    pub const VOICE: SoundCategoryEnum = SoundCategoryEnum::Voice;
    pub fn from_string(str: String) -> std::option::Option<SoundCategoryEnum> {
        match str.as_str() {
            "MASTER" => Some(SoundCategoryEnum::Master),
            "MUSIC" => Some(SoundCategoryEnum::Music),
            "RECORDS" => Some(SoundCategoryEnum::Records),
            "WEATHER" => Some(SoundCategoryEnum::Weather),
            "BLOCKS" => Some(SoundCategoryEnum::Blocks),
            "HOSTILE" => Some(SoundCategoryEnum::Hostile),
            "NEUTRAL" => Some(SoundCategoryEnum::Neutral),
            "PLAYERS" => Some(SoundCategoryEnum::Players),
            "AMBIENT" => Some(SoundCategoryEnum::Ambient),
            "VOICE" => Some(SoundCategoryEnum::Voice),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::SoundCategory<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/SoundCategory")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/SoundCategory;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::SoundCategory(
                jni,
                raw_obj,
                crate::bukkit::SoundCategory::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub enum HeightMapEnum {
    MotionBlocking,
    MotionBlockingNoLeaves,
    OceanFloor,
    OceanFloorWg,
    WorldSurface,
    WorldSurfaceWg,
}
impl std::fmt::Display for HeightMapEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            HeightMapEnum::MotionBlocking => f.write_str("MOTION_BLOCKING"),
            HeightMapEnum::MotionBlockingNoLeaves => f.write_str("MOTION_BLOCKING_NO_LEAVES"),
            HeightMapEnum::OceanFloor => f.write_str("OCEAN_FLOOR"),
            HeightMapEnum::OceanFloorWg => f.write_str("OCEAN_FLOOR_WG"),
            HeightMapEnum::WorldSurface => f.write_str("WORLD_SURFACE"),
            HeightMapEnum::WorldSurfaceWg => f.write_str("WORLD_SURFACE_WG"),
        }
    }
}
pub struct HeightMap<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub HeightMapEnum,
);
impl<'mc> std::ops::Deref for HeightMap<'mc> {
    type Target = HeightMapEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for HeightMap<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> HeightMap<'mc> {
    pub const MOTIONBLOCKING: HeightMapEnum = HeightMapEnum::MotionBlocking;
    pub const MOTIONBLOCKINGNOLEAVES: HeightMapEnum = HeightMapEnum::MotionBlockingNoLeaves;
    pub const OCEANFLOOR: HeightMapEnum = HeightMapEnum::OceanFloor;
    pub const OCEANFLOORWG: HeightMapEnum = HeightMapEnum::OceanFloorWg;
    pub const WORLDSURFACE: HeightMapEnum = HeightMapEnum::WorldSurface;
    pub const WORLDSURFACEWG: HeightMapEnum = HeightMapEnum::WorldSurfaceWg;
    pub fn from_string(str: String) -> std::option::Option<HeightMapEnum> {
        match str.as_str() {
            "MOTION_BLOCKING" => Some(HeightMapEnum::MotionBlocking),
            "MOTION_BLOCKING_NO_LEAVES" => Some(HeightMapEnum::MotionBlockingNoLeaves),
            "OCEAN_FLOOR" => Some(HeightMapEnum::OceanFloor),
            "OCEAN_FLOOR_WG" => Some(HeightMapEnum::OceanFloorWg),
            "WORLD_SURFACE" => Some(HeightMapEnum::WorldSurface),
            "WORLD_SURFACE_WG" => Some(HeightMapEnum::WorldSurfaceWg),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::HeightMap<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/HeightMap")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/HeightMap;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::HeightMap(
                jni,
                raw_obj,
                crate::bukkit::HeightMap::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub struct Color<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for Color<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Color<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Color from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Color") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Color object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn deserialize(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: std::collections::HashMap<String, jni::objects::JObject<'mc>>,
    ) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let raw_val_0 = jni.new_object("java/util/HashMap", "()V", &[]).unwrap();
        for (k, v) in arg0 {
            let map_val_0 = jni::objects::JObject::from(jni.new_string(k).unwrap());
            let map_val_1 = v;
            jni.call_method(
                &raw_val_0,
                "put",
                "(Ljava/Lang/ObjectLjava/Lang/Object)V",
                &[
                    jni::objects::JValueGen::from(&map_val_0),
                    jni::objects::JValueGen::from(&map_val_1),
                ],
            )?;
        }
        let val_0 = jni::objects::JValueGen::Object(raw_val_0);
        let cls = &jni.find_class("org/bukkit/Color")?;
        let res = jni.call_static_method(
            cls,
            "deserialize",
            "(Ljava/util/Map;)Lorg/bukkit/Color;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::Color(jni, obj)
        };
        Ok(ret)
    }
    pub fn from_rgb_with_int(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        let val_2 = jni::objects::JValueGen::Int(arg2.unwrap().into());
        let cls = &jni.find_class("org/bukkit/Color")?;
        let res = jni.call_static_method(
            cls,
            "fromRGB",
            "(III)Lorg/bukkit/Color;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::Color(jni, obj)
        };
        Ok(ret)
    }
    pub fn from_argb_with_int(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
        arg3: std::option::Option<i32>,
    ) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        let val_2 = jni::objects::JValueGen::Int(arg2.unwrap().into());
        let val_3 = jni::objects::JValueGen::Int(arg3.unwrap().into());
        let cls = &jni.find_class("org/bukkit/Color")?;
        let res = jni.call_static_method(
            cls,
            "fromARGB",
            "(IIII)Lorg/bukkit/Color;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
                jni::objects::JValueGen::from(&val_3),
            ],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::Color(jni, obj)
        };
        Ok(ret)
    }
    pub fn from_bgr_with_int(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        let val_2 = jni::objects::JValueGen::Int(arg2.unwrap().into());
        let cls = &jni.find_class("org/bukkit/Color")?;
        let res = jni.call_static_method(
            cls,
            "fromBGR",
            "(III)Lorg/bukkit/Color;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::Color(jni, obj)
        };
        Ok(ret)
    }
    pub fn alpha(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getAlpha", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_alpha(
        &mut self,
        arg0: i32,
    ) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setAlpha",
            "(I)Lorg/bukkit/Color;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::Color(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn red(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getRed", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn green(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getGreen", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn blue(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlue", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_red(
        &mut self,
        arg0: i32,
    ) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setRed",
            "(I)Lorg/bukkit/Color;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::Color(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn set_green(
        &mut self,
        arg0: i32,
    ) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setGreen",
            "(I)Lorg/bukkit/Color;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::Color(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn set_blue(
        &mut self,
        arg0: i32,
    ) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setBlue",
            "(I)Lorg/bukkit/Color;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::Color(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn as_rgb(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "asRGB", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn as_argb(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "asARGB", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn as_bgr(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "asBGR", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn mix_dyes(
        &mut self,
        _arg0: Vec<crate::bukkit::DyeColor<'mc>>,
    ) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "mixDyes",
            "(Lorg/bukkit/DyeColor;)Lorg/bukkit/Color;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Color(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn mix_colors(
        &mut self,
        _arg0: Vec<crate::bukkit::Color<'mc>>,
    ) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "mixColors",
            "(Lorg/bukkit/Color;)Lorg/bukkit/Color;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Color(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub enum FluidEnum {
    Water,
    FlowingWater,
    Lava,
    FlowingLava,
}
impl std::fmt::Display for FluidEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            FluidEnum::Water => f.write_str("WATER"),
            FluidEnum::FlowingWater => f.write_str("FLOWING_WATER"),
            FluidEnum::Lava => f.write_str("LAVA"),
            FluidEnum::FlowingLava => f.write_str("FLOWING_LAVA"),
        }
    }
}
pub struct Fluid<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub FluidEnum,
);
impl<'mc> std::ops::Deref for Fluid<'mc> {
    type Target = FluidEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for Fluid<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Fluid<'mc> {
    pub const WATER: FluidEnum = FluidEnum::Water;
    pub const FLOWINGWATER: FluidEnum = FluidEnum::FlowingWater;
    pub const LAVA: FluidEnum = FluidEnum::Lava;
    pub const FLOWINGLAVA: FluidEnum = FluidEnum::FlowingLava;
    pub fn from_string(str: String) -> std::option::Option<FluidEnum> {
        match str.as_str() {
            "WATER" => Some(FluidEnum::Water),
            "FLOWING_WATER" => Some(FluidEnum::FlowingWater),
            "LAVA" => Some(FluidEnum::Lava),
            "FLOWING_LAVA" => Some(FluidEnum::FlowingLava),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Fluid<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Fluid")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Fluid;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Fluid(
                jni,
                raw_obj,
                crate::bukkit::Fluid::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
}
pub enum CropStateEnum {
    Seeded,
    Germinated,
    VerySmall,
    Small,
    Medium,
    Tall,
    VeryTall,
    Ripe,
}
impl std::fmt::Display for CropStateEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            CropStateEnum::Seeded => f.write_str("SEEDED"),
            CropStateEnum::Germinated => f.write_str("GERMINATED"),
            CropStateEnum::VerySmall => f.write_str("VERY_SMALL"),
            CropStateEnum::Small => f.write_str("SMALL"),
            CropStateEnum::Medium => f.write_str("MEDIUM"),
            CropStateEnum::Tall => f.write_str("TALL"),
            CropStateEnum::VeryTall => f.write_str("VERY_TALL"),
            CropStateEnum::Ripe => f.write_str("RIPE"),
        }
    }
}
pub struct CropState<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub CropStateEnum,
);
impl<'mc> std::ops::Deref for CropState<'mc> {
    type Target = CropStateEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for CropState<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> CropState<'mc> {
    pub const SEEDED: CropStateEnum = CropStateEnum::Seeded;
    pub const GERMINATED: CropStateEnum = CropStateEnum::Germinated;
    pub const VERYSMALL: CropStateEnum = CropStateEnum::VerySmall;
    pub const SMALL: CropStateEnum = CropStateEnum::Small;
    pub const MEDIUM: CropStateEnum = CropStateEnum::Medium;
    pub const TALL: CropStateEnum = CropStateEnum::Tall;
    pub const VERYTALL: CropStateEnum = CropStateEnum::VeryTall;
    pub const RIPE: CropStateEnum = CropStateEnum::Ripe;
    pub fn from_string(str: String) -> std::option::Option<CropStateEnum> {
        match str.as_str() {
            "SEEDED" => Some(CropStateEnum::Seeded),
            "GERMINATED" => Some(CropStateEnum::Germinated),
            "VERY_SMALL" => Some(CropStateEnum::VerySmall),
            "SMALL" => Some(CropStateEnum::Small),
            "MEDIUM" => Some(CropStateEnum::Medium),
            "TALL" => Some(CropStateEnum::Tall),
            "VERY_TALL" => Some(CropStateEnum::VeryTall),
            "RIPE" => Some(CropStateEnum::Ripe),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::CropState<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/CropState")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/CropState;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::CropState(
                jni,
                raw_obj,
                crate::bukkit::CropState::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn data(&mut self) -> Result<i8, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getData", "()B", &[])?;
        Ok(res.b().unwrap())
    }
    pub fn get_by_data(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i8,
    ) -> Result<crate::bukkit::CropState<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Byte(arg0.into());
        let cls = &jni.find_class("org/bukkit/CropState")?;
        let res = jni.call_static_method(
            cls,
            "getByData",
            "(B)Lorg/bukkit/CropState;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::CropState(
                jni,
                raw_obj,
                crate::bukkit::CropState::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub enum NetherWartsStateEnum {
    Seeded,
    StageOne,
    StageTwo,
    Ripe,
}
impl std::fmt::Display for NetherWartsStateEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            NetherWartsStateEnum::Seeded => f.write_str("SEEDED"),
            NetherWartsStateEnum::StageOne => f.write_str("STAGE_ONE"),
            NetherWartsStateEnum::StageTwo => f.write_str("STAGE_TWO"),
            NetherWartsStateEnum::Ripe => f.write_str("RIPE"),
        }
    }
}
pub struct NetherWartsState<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub NetherWartsStateEnum,
);
impl<'mc> std::ops::Deref for NetherWartsState<'mc> {
    type Target = NetherWartsStateEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for NetherWartsState<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> NetherWartsState<'mc> {
    pub const SEEDED: NetherWartsStateEnum = NetherWartsStateEnum::Seeded;
    pub const STAGEONE: NetherWartsStateEnum = NetherWartsStateEnum::StageOne;
    pub const STAGETWO: NetherWartsStateEnum = NetherWartsStateEnum::StageTwo;
    pub const RIPE: NetherWartsStateEnum = NetherWartsStateEnum::Ripe;
    pub fn from_string(str: String) -> std::option::Option<NetherWartsStateEnum> {
        match str.as_str() {
            "SEEDED" => Some(NetherWartsStateEnum::Seeded),
            "STAGE_ONE" => Some(NetherWartsStateEnum::StageOne),
            "STAGE_TWO" => Some(NetherWartsStateEnum::StageTwo),
            "RIPE" => Some(NetherWartsStateEnum::Ripe),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::NetherWartsState<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/NetherWartsState")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/NetherWartsState;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::NetherWartsState(
                jni,
                raw_obj,
                crate::bukkit::NetherWartsState::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub enum SoundEnum {
    AmbientBasaltDeltasAdditions,
    AmbientBasaltDeltasLoop,
    AmbientBasaltDeltasMood,
    AmbientCave,
    AmbientCrimsonForestAdditions,
    AmbientCrimsonForestLoop,
    AmbientCrimsonForestMood,
    AmbientNetherWastesAdditions,
    AmbientNetherWastesLoop,
    AmbientNetherWastesMood,
    AmbientSoulSandValleyAdditions,
    AmbientSoulSandValleyLoop,
    AmbientSoulSandValleyMood,
    AmbientUnderwaterEnter,
    AmbientUnderwaterExit,
    AmbientUnderwaterLoop,
    AmbientUnderwaterLoopAdditions,
    AmbientUnderwaterLoopAdditionsRare,
    AmbientUnderwaterLoopAdditionsUltraRare,
    AmbientWarpedForestAdditions,
    AmbientWarpedForestLoop,
    AmbientWarpedForestMood,
    BlockAmethystBlockBreak,
    BlockAmethystBlockChime,
    BlockAmethystBlockFall,
    BlockAmethystBlockHit,
    BlockAmethystBlockPlace,
    BlockAmethystBlockResonate,
    BlockAmethystBlockStep,
    BlockAmethystClusterBreak,
    BlockAmethystClusterFall,
    BlockAmethystClusterHit,
    BlockAmethystClusterPlace,
    BlockAmethystClusterStep,
    BlockAncientDebrisBreak,
    BlockAncientDebrisFall,
    BlockAncientDebrisHit,
    BlockAncientDebrisPlace,
    BlockAncientDebrisStep,
    BlockAnvilBreak,
    BlockAnvilDestroy,
    BlockAnvilFall,
    BlockAnvilHit,
    BlockAnvilLand,
    BlockAnvilPlace,
    BlockAnvilStep,
    BlockAnvilUse,
    BlockAzaleaBreak,
    BlockAzaleaFall,
    BlockAzaleaHit,
    BlockAzaleaLeavesBreak,
    BlockAzaleaLeavesFall,
    BlockAzaleaLeavesHit,
    BlockAzaleaLeavesPlace,
    BlockAzaleaLeavesStep,
    BlockAzaleaPlace,
    BlockAzaleaStep,
    BlockBambooBreak,
    BlockBambooFall,
    BlockBambooHit,
    BlockBambooPlace,
    BlockBambooSaplingBreak,
    BlockBambooSaplingHit,
    BlockBambooSaplingPlace,
    BlockBambooStep,
    BlockBambooWoodBreak,
    BlockBambooWoodButtonClickOff,
    BlockBambooWoodButtonClickOn,
    BlockBambooWoodDoorClose,
    BlockBambooWoodDoorOpen,
    BlockBambooWoodFall,
    BlockBambooWoodFenceGateClose,
    BlockBambooWoodFenceGateOpen,
    BlockBambooWoodHangingSignBreak,
    BlockBambooWoodHangingSignFall,
    BlockBambooWoodHangingSignHit,
    BlockBambooWoodHangingSignPlace,
    BlockBambooWoodHangingSignStep,
    BlockBambooWoodHit,
    BlockBambooWoodPlace,
    BlockBambooWoodPressurePlateClickOff,
    BlockBambooWoodPressurePlateClickOn,
    BlockBambooWoodStep,
    BlockBambooWoodTrapdoorClose,
    BlockBambooWoodTrapdoorOpen,
    BlockBarrelClose,
    BlockBarrelOpen,
    BlockBasaltBreak,
    BlockBasaltFall,
    BlockBasaltHit,
    BlockBasaltPlace,
    BlockBasaltStep,
    BlockBeaconActivate,
    BlockBeaconAmbient,
    BlockBeaconDeactivate,
    BlockBeaconPowerSelect,
    BlockBeehiveDrip,
    BlockBeehiveEnter,
    BlockBeehiveExit,
    BlockBeehiveShear,
    BlockBeehiveWork,
    BlockBellResonate,
    BlockBellUse,
    BlockBigDripleafBreak,
    BlockBigDripleafFall,
    BlockBigDripleafHit,
    BlockBigDripleafPlace,
    BlockBigDripleafStep,
    BlockBigDripleafTiltDown,
    BlockBigDripleafTiltUp,
    BlockBlastfurnaceFireCrackle,
    BlockBoneBlockBreak,
    BlockBoneBlockFall,
    BlockBoneBlockHit,
    BlockBoneBlockPlace,
    BlockBoneBlockStep,
    BlockBrewingStandBrew,
    BlockBubbleColumnBubblePop,
    BlockBubbleColumnUpwardsAmbient,
    BlockBubbleColumnUpwardsInside,
    BlockBubbleColumnWhirlpoolAmbient,
    BlockBubbleColumnWhirlpoolInside,
    BlockCakeAddCandle,
    BlockCalciteBreak,
    BlockCalciteFall,
    BlockCalciteHit,
    BlockCalcitePlace,
    BlockCalciteStep,
    BlockCampfireCrackle,
    BlockCandleAmbient,
    BlockCandleBreak,
    BlockCandleExtinguish,
    BlockCandleFall,
    BlockCandleHit,
    BlockCandlePlace,
    BlockCandleStep,
    BlockCaveVinesBreak,
    BlockCaveVinesFall,
    BlockCaveVinesHit,
    BlockCaveVinesPickBerries,
    BlockCaveVinesPlace,
    BlockCaveVinesStep,
    BlockChainBreak,
    BlockChainFall,
    BlockChainHit,
    BlockChainPlace,
    BlockChainStep,
    BlockCherryLeavesBreak,
    BlockCherryLeavesFall,
    BlockCherryLeavesHit,
    BlockCherryLeavesPlace,
    BlockCherryLeavesStep,
    BlockCherrySaplingBreak,
    BlockCherrySaplingFall,
    BlockCherrySaplingHit,
    BlockCherrySaplingPlace,
    BlockCherrySaplingStep,
    BlockCherryWoodBreak,
    BlockCherryWoodButtonClickOff,
    BlockCherryWoodButtonClickOn,
    BlockCherryWoodDoorClose,
    BlockCherryWoodDoorOpen,
    BlockCherryWoodFall,
    BlockCherryWoodFenceGateClose,
    BlockCherryWoodFenceGateOpen,
    BlockCherryWoodHangingSignBreak,
    BlockCherryWoodHangingSignFall,
    BlockCherryWoodHangingSignHit,
    BlockCherryWoodHangingSignPlace,
    BlockCherryWoodHangingSignStep,
    BlockCherryWoodHit,
    BlockCherryWoodPlace,
    BlockCherryWoodPressurePlateClickOff,
    BlockCherryWoodPressurePlateClickOn,
    BlockCherryWoodStep,
    BlockCherryWoodTrapdoorClose,
    BlockCherryWoodTrapdoorOpen,
    BlockChestClose,
    BlockChestLocked,
    BlockChestOpen,
    BlockChiseledBookshelfBreak,
    BlockChiseledBookshelfFall,
    BlockChiseledBookshelfHit,
    BlockChiseledBookshelfInsert,
    BlockChiseledBookshelfInsertEnchanted,
    BlockChiseledBookshelfPickup,
    BlockChiseledBookshelfPickupEnchanted,
    BlockChiseledBookshelfPlace,
    BlockChiseledBookshelfStep,
    BlockChorusFlowerDeath,
    BlockChorusFlowerGrow,
    BlockComparatorClick,
    BlockComposterEmpty,
    BlockComposterFill,
    BlockComposterFillSuccess,
    BlockComposterReady,
    BlockConduitActivate,
    BlockConduitAmbient,
    BlockConduitAmbientShort,
    BlockConduitAttackTarget,
    BlockConduitDeactivate,
    BlockCopperBreak,
    BlockCopperFall,
    BlockCopperHit,
    BlockCopperPlace,
    BlockCopperStep,
    BlockCoralBlockBreak,
    BlockCoralBlockFall,
    BlockCoralBlockHit,
    BlockCoralBlockPlace,
    BlockCoralBlockStep,
    BlockCropBreak,
    BlockDecoratedPotBreak,
    BlockDecoratedPotFall,
    BlockDecoratedPotHit,
    BlockDecoratedPotPlace,
    BlockDecoratedPotShatter,
    BlockDecoratedPotStep,
    BlockDeepslateBreak,
    BlockDeepslateBricksBreak,
    BlockDeepslateBricksFall,
    BlockDeepslateBricksHit,
    BlockDeepslateBricksPlace,
    BlockDeepslateBricksStep,
    BlockDeepslateFall,
    BlockDeepslateHit,
    BlockDeepslatePlace,
    BlockDeepslateStep,
    BlockDeepslateTilesBreak,
    BlockDeepslateTilesFall,
    BlockDeepslateTilesHit,
    BlockDeepslateTilesPlace,
    BlockDeepslateTilesStep,
    BlockDispenserDispense,
    BlockDispenserFail,
    BlockDispenserLaunch,
    BlockDripstoneBlockBreak,
    BlockDripstoneBlockFall,
    BlockDripstoneBlockHit,
    BlockDripstoneBlockPlace,
    BlockDripstoneBlockStep,
    BlockEnchantmentTableUse,
    BlockEnderChestClose,
    BlockEnderChestOpen,
    BlockEndGatewaySpawn,
    BlockEndPortalFrameFill,
    BlockEndPortalSpawn,
    BlockFenceGateClose,
    BlockFenceGateOpen,
    BlockFireAmbient,
    BlockFireExtinguish,
    BlockFloweringAzaleaBreak,
    BlockFloweringAzaleaFall,
    BlockFloweringAzaleaHit,
    BlockFloweringAzaleaPlace,
    BlockFloweringAzaleaStep,
    BlockFroglightBreak,
    BlockFroglightFall,
    BlockFroglightHit,
    BlockFroglightPlace,
    BlockFroglightStep,
    BlockFrogspawnBreak,
    BlockFrogspawnFall,
    BlockFrogspawnHatch,
    BlockFrogspawnHit,
    BlockFrogspawnPlace,
    BlockFrogspawnStep,
    BlockFungusBreak,
    BlockFungusFall,
    BlockFungusHit,
    BlockFungusPlace,
    BlockFungusStep,
    BlockFurnaceFireCrackle,
    BlockGildedBlackstoneBreak,
    BlockGildedBlackstoneFall,
    BlockGildedBlackstoneHit,
    BlockGildedBlackstonePlace,
    BlockGildedBlackstoneStep,
    BlockGlassBreak,
    BlockGlassFall,
    BlockGlassHit,
    BlockGlassPlace,
    BlockGlassStep,
    BlockGrassBreak,
    BlockGrassFall,
    BlockGrassHit,
    BlockGrassPlace,
    BlockGrassStep,
    BlockGravelBreak,
    BlockGravelFall,
    BlockGravelHit,
    BlockGravelPlace,
    BlockGravelStep,
    BlockGrindstoneUse,
    BlockGrowingPlantCrop,
    BlockHangingRootsBreak,
    BlockHangingRootsFall,
    BlockHangingRootsHit,
    BlockHangingRootsPlace,
    BlockHangingRootsStep,
    BlockHangingSignBreak,
    BlockHangingSignFall,
    BlockHangingSignHit,
    BlockHangingSignPlace,
    BlockHangingSignStep,
    BlockHoneyBlockBreak,
    BlockHoneyBlockFall,
    BlockHoneyBlockHit,
    BlockHoneyBlockPlace,
    BlockHoneyBlockSlide,
    BlockHoneyBlockStep,
    BlockIronDoorClose,
    BlockIronDoorOpen,
    BlockIronTrapdoorClose,
    BlockIronTrapdoorOpen,
    BlockLadderBreak,
    BlockLadderFall,
    BlockLadderHit,
    BlockLadderPlace,
    BlockLadderStep,
    BlockLanternBreak,
    BlockLanternFall,
    BlockLanternHit,
    BlockLanternPlace,
    BlockLanternStep,
    BlockLargeAmethystBudBreak,
    BlockLargeAmethystBudPlace,
    BlockLavaAmbient,
    BlockLavaExtinguish,
    BlockLavaPop,
    BlockLeverClick,
    BlockLilyPadPlace,
    BlockLodestoneBreak,
    BlockLodestoneFall,
    BlockLodestoneHit,
    BlockLodestonePlace,
    BlockLodestoneStep,
    BlockMangroveRootsBreak,
    BlockMangroveRootsFall,
    BlockMangroveRootsHit,
    BlockMangroveRootsPlace,
    BlockMangroveRootsStep,
    BlockMediumAmethystBudBreak,
    BlockMediumAmethystBudPlace,
    BlockMetalBreak,
    BlockMetalFall,
    BlockMetalHit,
    BlockMetalPlace,
    BlockMetalPressurePlateClickOff,
    BlockMetalPressurePlateClickOn,
    BlockMetalStep,
    BlockMossBreak,
    BlockMossCarpetBreak,
    BlockMossCarpetFall,
    BlockMossCarpetHit,
    BlockMossCarpetPlace,
    BlockMossCarpetStep,
    BlockMossFall,
    BlockMossHit,
    BlockMossPlace,
    BlockMossStep,
    BlockMuddyMangroveRootsBreak,
    BlockMuddyMangroveRootsFall,
    BlockMuddyMangroveRootsHit,
    BlockMuddyMangroveRootsPlace,
    BlockMuddyMangroveRootsStep,
    BlockMudBreak,
    BlockMudBricksBreak,
    BlockMudBricksFall,
    BlockMudBricksHit,
    BlockMudBricksPlace,
    BlockMudBricksStep,
    BlockMudFall,
    BlockMudHit,
    BlockMudPlace,
    BlockMudStep,
    BlockNetheriteBlockBreak,
    BlockNetheriteBlockFall,
    BlockNetheriteBlockHit,
    BlockNetheriteBlockPlace,
    BlockNetheriteBlockStep,
    BlockNetherrackBreak,
    BlockNetherrackFall,
    BlockNetherrackHit,
    BlockNetherrackPlace,
    BlockNetherrackStep,
    BlockNetherBricksBreak,
    BlockNetherBricksFall,
    BlockNetherBricksHit,
    BlockNetherBricksPlace,
    BlockNetherBricksStep,
    BlockNetherGoldOreBreak,
    BlockNetherGoldOreFall,
    BlockNetherGoldOreHit,
    BlockNetherGoldOrePlace,
    BlockNetherGoldOreStep,
    BlockNetherOreBreak,
    BlockNetherOreFall,
    BlockNetherOreHit,
    BlockNetherOrePlace,
    BlockNetherOreStep,
    BlockNetherSproutsBreak,
    BlockNetherSproutsFall,
    BlockNetherSproutsHit,
    BlockNetherSproutsPlace,
    BlockNetherSproutsStep,
    BlockNetherWartBreak,
    BlockNetherWoodBreak,
    BlockNetherWoodButtonClickOff,
    BlockNetherWoodButtonClickOn,
    BlockNetherWoodDoorClose,
    BlockNetherWoodDoorOpen,
    BlockNetherWoodFall,
    BlockNetherWoodFenceGateClose,
    BlockNetherWoodFenceGateOpen,
    BlockNetherWoodHangingSignBreak,
    BlockNetherWoodHangingSignFall,
    BlockNetherWoodHangingSignHit,
    BlockNetherWoodHangingSignPlace,
    BlockNetherWoodHangingSignStep,
    BlockNetherWoodHit,
    BlockNetherWoodPlace,
    BlockNetherWoodPressurePlateClickOff,
    BlockNetherWoodPressurePlateClickOn,
    BlockNetherWoodStep,
    BlockNetherWoodTrapdoorClose,
    BlockNetherWoodTrapdoorOpen,
    BlockNoteBlockBanjo,
    BlockNoteBlockBasedrum,
    BlockNoteBlockBass,
    BlockNoteBlockBell,
    BlockNoteBlockBit,
    BlockNoteBlockChime,
    BlockNoteBlockCowBell,
    BlockNoteBlockDidgeridoo,
    BlockNoteBlockFlute,
    BlockNoteBlockGuitar,
    BlockNoteBlockHarp,
    BlockNoteBlockHat,
    BlockNoteBlockImitateCreeper,
    BlockNoteBlockImitateEnderDragon,
    BlockNoteBlockImitatePiglin,
    BlockNoteBlockImitateSkeleton,
    BlockNoteBlockImitateWitherSkeleton,
    BlockNoteBlockImitateZombie,
    BlockNoteBlockIronXylophone,
    BlockNoteBlockPling,
    BlockNoteBlockSnare,
    BlockNoteBlockXylophone,
    BlockNyliumBreak,
    BlockNyliumFall,
    BlockNyliumHit,
    BlockNyliumPlace,
    BlockNyliumStep,
    BlockPackedMudBreak,
    BlockPackedMudFall,
    BlockPackedMudHit,
    BlockPackedMudPlace,
    BlockPackedMudStep,
    BlockPinkPetalsBreak,
    BlockPinkPetalsFall,
    BlockPinkPetalsHit,
    BlockPinkPetalsPlace,
    BlockPinkPetalsStep,
    BlockPistonContract,
    BlockPistonExtend,
    BlockPointedDripstoneBreak,
    BlockPointedDripstoneDripLava,
    BlockPointedDripstoneDripLavaIntoCauldron,
    BlockPointedDripstoneDripWater,
    BlockPointedDripstoneDripWaterIntoCauldron,
    BlockPointedDripstoneFall,
    BlockPointedDripstoneHit,
    BlockPointedDripstoneLand,
    BlockPointedDripstonePlace,
    BlockPointedDripstoneStep,
    BlockPolishedDeepslateBreak,
    BlockPolishedDeepslateFall,
    BlockPolishedDeepslateHit,
    BlockPolishedDeepslatePlace,
    BlockPolishedDeepslateStep,
    BlockPortalAmbient,
    BlockPortalTravel,
    BlockPortalTrigger,
    BlockPowderSnowBreak,
    BlockPowderSnowFall,
    BlockPowderSnowHit,
    BlockPowderSnowPlace,
    BlockPowderSnowStep,
    BlockPumpkinCarve,
    BlockRedstoneTorchBurnout,
    BlockRespawnAnchorAmbient,
    BlockRespawnAnchorCharge,
    BlockRespawnAnchorDeplete,
    BlockRespawnAnchorSetSpawn,
    BlockRootedDirtBreak,
    BlockRootedDirtFall,
    BlockRootedDirtHit,
    BlockRootedDirtPlace,
    BlockRootedDirtStep,
    BlockRootsBreak,
    BlockRootsFall,
    BlockRootsHit,
    BlockRootsPlace,
    BlockRootsStep,
    BlockSandBreak,
    BlockSandFall,
    BlockSandHit,
    BlockSandPlace,
    BlockSandStep,
    BlockScaffoldingBreak,
    BlockScaffoldingFall,
    BlockScaffoldingHit,
    BlockScaffoldingPlace,
    BlockScaffoldingStep,
    BlockSculkBreak,
    BlockSculkCatalystBloom,
    BlockSculkCatalystBreak,
    BlockSculkCatalystFall,
    BlockSculkCatalystHit,
    BlockSculkCatalystPlace,
    BlockSculkCatalystStep,
    BlockSculkCharge,
    BlockSculkFall,
    BlockSculkHit,
    BlockSculkPlace,
    BlockSculkSensorBreak,
    BlockSculkSensorClicking,
    BlockSculkSensorClickingStop,
    BlockSculkSensorFall,
    BlockSculkSensorHit,
    BlockSculkSensorPlace,
    BlockSculkSensorStep,
    BlockSculkShriekerBreak,
    BlockSculkShriekerFall,
    BlockSculkShriekerHit,
    BlockSculkShriekerPlace,
    BlockSculkShriekerShriek,
    BlockSculkShriekerStep,
    BlockSculkSpread,
    BlockSculkStep,
    BlockSculkVeinBreak,
    BlockSculkVeinFall,
    BlockSculkVeinHit,
    BlockSculkVeinPlace,
    BlockSculkVeinStep,
    BlockShroomlightBreak,
    BlockShroomlightFall,
    BlockShroomlightHit,
    BlockShroomlightPlace,
    BlockShroomlightStep,
    BlockShulkerBoxClose,
    BlockShulkerBoxOpen,
    BlockSignWaxedInteractFail,
    BlockSlimeBlockBreak,
    BlockSlimeBlockFall,
    BlockSlimeBlockHit,
    BlockSlimeBlockPlace,
    BlockSlimeBlockStep,
    BlockSmallAmethystBudBreak,
    BlockSmallAmethystBudPlace,
    BlockSmallDripleafBreak,
    BlockSmallDripleafFall,
    BlockSmallDripleafHit,
    BlockSmallDripleafPlace,
    BlockSmallDripleafStep,
    BlockSmithingTableUse,
    BlockSmokerSmoke,
    BlockSnifferEggCrack,
    BlockSnifferEggHatch,
    BlockSnifferEggPlop,
    BlockSnowBreak,
    BlockSnowFall,
    BlockSnowHit,
    BlockSnowPlace,
    BlockSnowStep,
    BlockSoulSandBreak,
    BlockSoulSandFall,
    BlockSoulSandHit,
    BlockSoulSandPlace,
    BlockSoulSandStep,
    BlockSoulSoilBreak,
    BlockSoulSoilFall,
    BlockSoulSoilHit,
    BlockSoulSoilPlace,
    BlockSoulSoilStep,
    BlockSporeBlossomBreak,
    BlockSporeBlossomFall,
    BlockSporeBlossomHit,
    BlockSporeBlossomPlace,
    BlockSporeBlossomStep,
    BlockStemBreak,
    BlockStemFall,
    BlockStemHit,
    BlockStemPlace,
    BlockStemStep,
    BlockStoneBreak,
    BlockStoneButtonClickOff,
    BlockStoneButtonClickOn,
    BlockStoneFall,
    BlockStoneHit,
    BlockStonePlace,
    BlockStonePressurePlateClickOff,
    BlockStonePressurePlateClickOn,
    BlockStoneStep,
    BlockSuspiciousGravelBreak,
    BlockSuspiciousGravelFall,
    BlockSuspiciousGravelHit,
    BlockSuspiciousGravelPlace,
    BlockSuspiciousGravelStep,
    BlockSuspiciousSandBreak,
    BlockSuspiciousSandFall,
    BlockSuspiciousSandHit,
    BlockSuspiciousSandPlace,
    BlockSuspiciousSandStep,
    BlockSweetBerryBushBreak,
    BlockSweetBerryBushPickBerries,
    BlockSweetBerryBushPlace,
    BlockTripwireAttach,
    BlockTripwireClickOff,
    BlockTripwireClickOn,
    BlockTripwireDetach,
    BlockTuffBreak,
    BlockTuffFall,
    BlockTuffHit,
    BlockTuffPlace,
    BlockTuffStep,
    BlockVineBreak,
    BlockVineFall,
    BlockVineHit,
    BlockVinePlace,
    BlockVineStep,
    BlockWartBlockBreak,
    BlockWartBlockFall,
    BlockWartBlockHit,
    BlockWartBlockPlace,
    BlockWartBlockStep,
    BlockWaterAmbient,
    BlockWeepingVinesBreak,
    BlockWeepingVinesFall,
    BlockWeepingVinesHit,
    BlockWeepingVinesPlace,
    BlockWeepingVinesStep,
    BlockWetGrassBreak,
    BlockWetGrassFall,
    BlockWetGrassHit,
    BlockWetGrassPlace,
    BlockWetGrassStep,
    BlockWoodenButtonClickOff,
    BlockWoodenButtonClickOn,
    BlockWoodenDoorClose,
    BlockWoodenDoorOpen,
    BlockWoodenPressurePlateClickOff,
    BlockWoodenPressurePlateClickOn,
    BlockWoodenTrapdoorClose,
    BlockWoodenTrapdoorOpen,
    BlockWoodBreak,
    BlockWoodFall,
    BlockWoodHit,
    BlockWoodPlace,
    BlockWoodStep,
    BlockWoolBreak,
    BlockWoolFall,
    BlockWoolHit,
    BlockWoolPlace,
    BlockWoolStep,
    EnchantThornsHit,
    EntityAllayAmbientWithoutItem,
    EntityAllayAmbientWithItem,
    EntityAllayDeath,
    EntityAllayHurt,
    EntityAllayItemGiven,
    EntityAllayItemTaken,
    EntityAllayItemThrown,
    EntityArmorStandBreak,
    EntityArmorStandFall,
    EntityArmorStandHit,
    EntityArmorStandPlace,
    EntityArrowHit,
    EntityArrowHitPlayer,
    EntityArrowShoot,
    EntityAxolotlAttack,
    EntityAxolotlDeath,
    EntityAxolotlHurt,
    EntityAxolotlIdleAir,
    EntityAxolotlIdleWater,
    EntityAxolotlSplash,
    EntityAxolotlSwim,
    EntityBatAmbient,
    EntityBatDeath,
    EntityBatHurt,
    EntityBatLoop,
    EntityBatTakeoff,
    EntityBeeDeath,
    EntityBeeHurt,
    EntityBeeLoop,
    EntityBeeLoopAggressive,
    EntityBeePollinate,
    EntityBeeSting,
    EntityBlazeAmbient,
    EntityBlazeBurn,
    EntityBlazeDeath,
    EntityBlazeHurt,
    EntityBlazeShoot,
    EntityBoatPaddleLand,
    EntityBoatPaddleWater,
    EntityCamelAmbient,
    EntityCamelDash,
    EntityCamelDashReady,
    EntityCamelDeath,
    EntityCamelEat,
    EntityCamelHurt,
    EntityCamelSaddle,
    EntityCamelSit,
    EntityCamelStand,
    EntityCamelStep,
    EntityCamelStepSand,
    EntityCatAmbient,
    EntityCatBegForFood,
    EntityCatDeath,
    EntityCatEat,
    EntityCatHiss,
    EntityCatHurt,
    EntityCatPurr,
    EntityCatPurreow,
    EntityCatStrayAmbient,
    EntityChickenAmbient,
    EntityChickenDeath,
    EntityChickenEgg,
    EntityChickenHurt,
    EntityChickenStep,
    EntityCodAmbient,
    EntityCodDeath,
    EntityCodFlop,
    EntityCodHurt,
    EntityCowAmbient,
    EntityCowDeath,
    EntityCowHurt,
    EntityCowMilk,
    EntityCowStep,
    EntityCreeperDeath,
    EntityCreeperHurt,
    EntityCreeperPrimed,
    EntityDolphinAmbient,
    EntityDolphinAmbientWater,
    EntityDolphinAttack,
    EntityDolphinDeath,
    EntityDolphinEat,
    EntityDolphinHurt,
    EntityDolphinJump,
    EntityDolphinPlay,
    EntityDolphinSplash,
    EntityDolphinSwim,
    EntityDonkeyAmbient,
    EntityDonkeyAngry,
    EntityDonkeyChest,
    EntityDonkeyDeath,
    EntityDonkeyEat,
    EntityDonkeyHurt,
    EntityDragonFireballExplode,
    EntityDrownedAmbient,
    EntityDrownedAmbientWater,
    EntityDrownedDeath,
    EntityDrownedDeathWater,
    EntityDrownedHurt,
    EntityDrownedHurtWater,
    EntityDrownedShoot,
    EntityDrownedStep,
    EntityDrownedSwim,
    EntityEggThrow,
    EntityElderGuardianAmbient,
    EntityElderGuardianAmbientLand,
    EntityElderGuardianCurse,
    EntityElderGuardianDeath,
    EntityElderGuardianDeathLand,
    EntityElderGuardianFlop,
    EntityElderGuardianHurt,
    EntityElderGuardianHurtLand,
    EntityEndermanAmbient,
    EntityEndermanDeath,
    EntityEndermanHurt,
    EntityEndermanScream,
    EntityEndermanStare,
    EntityEndermanTeleport,
    EntityEndermiteAmbient,
    EntityEndermiteDeath,
    EntityEndermiteHurt,
    EntityEndermiteStep,
    EntityEnderDragonAmbient,
    EntityEnderDragonDeath,
    EntityEnderDragonFlap,
    EntityEnderDragonGrowl,
    EntityEnderDragonHurt,
    EntityEnderDragonShoot,
    EntityEnderEyeDeath,
    EntityEnderEyeLaunch,
    EntityEnderPearlThrow,
    EntityEvokerAmbient,
    EntityEvokerCastSpell,
    EntityEvokerCelebrate,
    EntityEvokerDeath,
    EntityEvokerFangsAttack,
    EntityEvokerHurt,
    EntityEvokerPrepareAttack,
    EntityEvokerPrepareSummon,
    EntityEvokerPrepareWololo,
    EntityExperienceBottleThrow,
    EntityExperienceOrbPickup,
    EntityFireworkRocketBlast,
    EntityFireworkRocketBlastFar,
    EntityFireworkRocketLargeBlast,
    EntityFireworkRocketLargeBlastFar,
    EntityFireworkRocketLaunch,
    EntityFireworkRocketShoot,
    EntityFireworkRocketTwinkle,
    EntityFireworkRocketTwinkleFar,
    EntityFishingBobberRetrieve,
    EntityFishingBobberSplash,
    EntityFishingBobberThrow,
    EntityFishSwim,
    EntityFoxAggro,
    EntityFoxAmbient,
    EntityFoxBite,
    EntityFoxDeath,
    EntityFoxEat,
    EntityFoxHurt,
    EntityFoxScreech,
    EntityFoxSleep,
    EntityFoxSniff,
    EntityFoxSpit,
    EntityFoxTeleport,
    EntityFrogAmbient,
    EntityFrogDeath,
    EntityFrogEat,
    EntityFrogHurt,
    EntityFrogLaySpawn,
    EntityFrogLongJump,
    EntityFrogStep,
    EntityFrogTongue,
    EntityGenericBigFall,
    EntityGenericBurn,
    EntityGenericDeath,
    EntityGenericDrink,
    EntityGenericEat,
    EntityGenericExplode,
    EntityGenericExtinguishFire,
    EntityGenericHurt,
    EntityGenericSmallFall,
    EntityGenericSplash,
    EntityGenericSwim,
    EntityGhastAmbient,
    EntityGhastDeath,
    EntityGhastHurt,
    EntityGhastScream,
    EntityGhastShoot,
    EntityGhastWarn,
    EntityGlowItemFrameAddItem,
    EntityGlowItemFrameBreak,
    EntityGlowItemFramePlace,
    EntityGlowItemFrameRemoveItem,
    EntityGlowItemFrameRotateItem,
    EntityGlowSquidAmbient,
    EntityGlowSquidDeath,
    EntityGlowSquidHurt,
    EntityGlowSquidSquirt,
    EntityGoatAmbient,
    EntityGoatDeath,
    EntityGoatEat,
    EntityGoatHornBreak,
    EntityGoatHurt,
    EntityGoatLongJump,
    EntityGoatMilk,
    EntityGoatPrepareRam,
    EntityGoatRamImpact,
    EntityGoatScreamingAmbient,
    EntityGoatScreamingDeath,
    EntityGoatScreamingEat,
    EntityGoatScreamingHornBreak,
    EntityGoatScreamingHurt,
    EntityGoatScreamingLongJump,
    EntityGoatScreamingMilk,
    EntityGoatScreamingPrepareRam,
    EntityGoatScreamingRamImpact,
    EntityGoatStep,
    EntityGuardianAmbient,
    EntityGuardianAmbientLand,
    EntityGuardianAttack,
    EntityGuardianDeath,
    EntityGuardianDeathLand,
    EntityGuardianFlop,
    EntityGuardianHurt,
    EntityGuardianHurtLand,
    EntityHoglinAmbient,
    EntityHoglinAngry,
    EntityHoglinAttack,
    EntityHoglinConvertedToZombified,
    EntityHoglinDeath,
    EntityHoglinHurt,
    EntityHoglinRetreat,
    EntityHoglinStep,
    EntityHorseAmbient,
    EntityHorseAngry,
    EntityHorseArmor,
    EntityHorseBreathe,
    EntityHorseDeath,
    EntityHorseEat,
    EntityHorseGallop,
    EntityHorseHurt,
    EntityHorseJump,
    EntityHorseLand,
    EntityHorseSaddle,
    EntityHorseStep,
    EntityHorseStepWood,
    EntityHostileBigFall,
    EntityHostileDeath,
    EntityHostileHurt,
    EntityHostileSmallFall,
    EntityHostileSplash,
    EntityHostileSwim,
    EntityHuskAmbient,
    EntityHuskConvertedToZombie,
    EntityHuskDeath,
    EntityHuskHurt,
    EntityHuskStep,
    EntityIllusionerAmbient,
    EntityIllusionerCastSpell,
    EntityIllusionerDeath,
    EntityIllusionerHurt,
    EntityIllusionerMirrorMove,
    EntityIllusionerPrepareBlindness,
    EntityIllusionerPrepareMirror,
    EntityIronGolemAttack,
    EntityIronGolemDamage,
    EntityIronGolemDeath,
    EntityIronGolemHurt,
    EntityIronGolemRepair,
    EntityIronGolemStep,
    EntityItemBreak,
    EntityItemFrameAddItem,
    EntityItemFrameBreak,
    EntityItemFramePlace,
    EntityItemFrameRemoveItem,
    EntityItemFrameRotateItem,
    EntityItemPickup,
    EntityLeashKnotBreak,
    EntityLeashKnotPlace,
    EntityLightningBoltImpact,
    EntityLightningBoltThunder,
    EntityLingeringPotionThrow,
    EntityLlamaAmbient,
    EntityLlamaAngry,
    EntityLlamaChest,
    EntityLlamaDeath,
    EntityLlamaEat,
    EntityLlamaHurt,
    EntityLlamaSpit,
    EntityLlamaStep,
    EntityLlamaSwag,
    EntityMagmaCubeDeath,
    EntityMagmaCubeDeathSmall,
    EntityMagmaCubeHurt,
    EntityMagmaCubeHurtSmall,
    EntityMagmaCubeJump,
    EntityMagmaCubeSquish,
    EntityMagmaCubeSquishSmall,
    EntityMinecartInside,
    EntityMinecartInsideUnderwater,
    EntityMinecartRiding,
    EntityMooshroomConvert,
    EntityMooshroomEat,
    EntityMooshroomMilk,
    EntityMooshroomShear,
    EntityMooshroomSuspiciousMilk,
    EntityMuleAmbient,
    EntityMuleAngry,
    EntityMuleChest,
    EntityMuleDeath,
    EntityMuleEat,
    EntityMuleHurt,
    EntityOcelotAmbient,
    EntityOcelotDeath,
    EntityOcelotHurt,
    EntityPaintingBreak,
    EntityPaintingPlace,
    EntityPandaAggressiveAmbient,
    EntityPandaAmbient,
    EntityPandaBite,
    EntityPandaCantBreed,
    EntityPandaDeath,
    EntityPandaEat,
    EntityPandaHurt,
    EntityPandaPreSneeze,
    EntityPandaSneeze,
    EntityPandaStep,
    EntityPandaWorriedAmbient,
    EntityParrotAmbient,
    EntityParrotDeath,
    EntityParrotEat,
    EntityParrotFly,
    EntityParrotHurt,
    EntityParrotImitateBlaze,
    EntityParrotImitateCreeper,
    EntityParrotImitateDrowned,
    EntityParrotImitateElderGuardian,
    EntityParrotImitateEndermite,
    EntityParrotImitateEnderDragon,
    EntityParrotImitateEvoker,
    EntityParrotImitateGhast,
    EntityParrotImitateGuardian,
    EntityParrotImitateHoglin,
    EntityParrotImitateHusk,
    EntityParrotImitateIllusioner,
    EntityParrotImitateMagmaCube,
    EntityParrotImitatePhantom,
    EntityParrotImitatePiglin,
    EntityParrotImitatePiglinBrute,
    EntityParrotImitatePillager,
    EntityParrotImitateRavager,
    EntityParrotImitateShulker,
    EntityParrotImitateSilverfish,
    EntityParrotImitateSkeleton,
    EntityParrotImitateSlime,
    EntityParrotImitateSpider,
    EntityParrotImitateStray,
    EntityParrotImitateVex,
    EntityParrotImitateVindicator,
    EntityParrotImitateWarden,
    EntityParrotImitateWitch,
    EntityParrotImitateWither,
    EntityParrotImitateWitherSkeleton,
    EntityParrotImitateZoglin,
    EntityParrotImitateZombie,
    EntityParrotImitateZombieVillager,
    EntityParrotStep,
    EntityPhantomAmbient,
    EntityPhantomBite,
    EntityPhantomDeath,
    EntityPhantomFlap,
    EntityPhantomHurt,
    EntityPhantomSwoop,
    EntityPiglinAdmiringItem,
    EntityPiglinAmbient,
    EntityPiglinAngry,
    EntityPiglinBruteAmbient,
    EntityPiglinBruteAngry,
    EntityPiglinBruteConvertedToZombified,
    EntityPiglinBruteDeath,
    EntityPiglinBruteHurt,
    EntityPiglinBruteStep,
    EntityPiglinCelebrate,
    EntityPiglinConvertedToZombified,
    EntityPiglinDeath,
    EntityPiglinHurt,
    EntityPiglinJealous,
    EntityPiglinRetreat,
    EntityPiglinStep,
    EntityPigAmbient,
    EntityPigDeath,
    EntityPigHurt,
    EntityPigSaddle,
    EntityPigStep,
    EntityPillagerAmbient,
    EntityPillagerCelebrate,
    EntityPillagerDeath,
    EntityPillagerHurt,
    EntityPlayerAttackCrit,
    EntityPlayerAttackKnockback,
    EntityPlayerAttackNodamage,
    EntityPlayerAttackStrong,
    EntityPlayerAttackSweep,
    EntityPlayerAttackWeak,
    EntityPlayerBigFall,
    EntityPlayerBreath,
    EntityPlayerBurp,
    EntityPlayerDeath,
    EntityPlayerHurt,
    EntityPlayerHurtDrown,
    EntityPlayerHurtFreeze,
    EntityPlayerHurtOnFire,
    EntityPlayerHurtSweetBerryBush,
    EntityPlayerLevelup,
    EntityPlayerSmallFall,
    EntityPlayerSplash,
    EntityPlayerSplashHighSpeed,
    EntityPlayerSwim,
    EntityPolarBearAmbient,
    EntityPolarBearAmbientBaby,
    EntityPolarBearDeath,
    EntityPolarBearHurt,
    EntityPolarBearStep,
    EntityPolarBearWarning,
    EntityPufferFishAmbient,
    EntityPufferFishBlowOut,
    EntityPufferFishBlowUp,
    EntityPufferFishDeath,
    EntityPufferFishFlop,
    EntityPufferFishHurt,
    EntityPufferFishSting,
    EntityRabbitAmbient,
    EntityRabbitAttack,
    EntityRabbitDeath,
    EntityRabbitHurt,
    EntityRabbitJump,
    EntityRavagerAmbient,
    EntityRavagerAttack,
    EntityRavagerCelebrate,
    EntityRavagerDeath,
    EntityRavagerHurt,
    EntityRavagerRoar,
    EntityRavagerStep,
    EntityRavagerStunned,
    EntitySalmonAmbient,
    EntitySalmonDeath,
    EntitySalmonFlop,
    EntitySalmonHurt,
    EntitySheepAmbient,
    EntitySheepDeath,
    EntitySheepHurt,
    EntitySheepShear,
    EntitySheepStep,
    EntityShulkerAmbient,
    EntityShulkerBulletHit,
    EntityShulkerBulletHurt,
    EntityShulkerClose,
    EntityShulkerDeath,
    EntityShulkerHurt,
    EntityShulkerHurtClosed,
    EntityShulkerOpen,
    EntityShulkerShoot,
    EntityShulkerTeleport,
    EntitySilverfishAmbient,
    EntitySilverfishDeath,
    EntitySilverfishHurt,
    EntitySilverfishStep,
    EntitySkeletonAmbient,
    EntitySkeletonConvertedToStray,
    EntitySkeletonDeath,
    EntitySkeletonHorseAmbient,
    EntitySkeletonHorseAmbientWater,
    EntitySkeletonHorseDeath,
    EntitySkeletonHorseGallopWater,
    EntitySkeletonHorseHurt,
    EntitySkeletonHorseJumpWater,
    EntitySkeletonHorseStepWater,
    EntitySkeletonHorseSwim,
    EntitySkeletonHurt,
    EntitySkeletonShoot,
    EntitySkeletonStep,
    EntitySlimeAttack,
    EntitySlimeDeath,
    EntitySlimeDeathSmall,
    EntitySlimeHurt,
    EntitySlimeHurtSmall,
    EntitySlimeJump,
    EntitySlimeJumpSmall,
    EntitySlimeSquish,
    EntitySlimeSquishSmall,
    EntitySnifferDeath,
    EntitySnifferDigging,
    EntitySnifferDiggingStop,
    EntitySnifferDropSeed,
    EntitySnifferEat,
    EntitySnifferHappy,
    EntitySnifferHurt,
    EntitySnifferIdle,
    EntitySnifferScenting,
    EntitySnifferSearching,
    EntitySnifferSniffing,
    EntitySnifferStep,
    EntitySnowballThrow,
    EntitySnowGolemAmbient,
    EntitySnowGolemDeath,
    EntitySnowGolemHurt,
    EntitySnowGolemShear,
    EntitySnowGolemShoot,
    EntitySpiderAmbient,
    EntitySpiderDeath,
    EntitySpiderHurt,
    EntitySpiderStep,
    EntitySplashPotionBreak,
    EntitySplashPotionThrow,
    EntitySquidAmbient,
    EntitySquidDeath,
    EntitySquidHurt,
    EntitySquidSquirt,
    EntityStrayAmbient,
    EntityStrayDeath,
    EntityStrayHurt,
    EntityStrayStep,
    EntityStriderAmbient,
    EntityStriderDeath,
    EntityStriderEat,
    EntityStriderHappy,
    EntityStriderHurt,
    EntityStriderRetreat,
    EntityStriderSaddle,
    EntityStriderStep,
    EntityStriderStepLava,
    EntityTadpoleDeath,
    EntityTadpoleFlop,
    EntityTadpoleGrowUp,
    EntityTadpoleHurt,
    EntityTntPrimed,
    EntityTropicalFishAmbient,
    EntityTropicalFishDeath,
    EntityTropicalFishFlop,
    EntityTropicalFishHurt,
    EntityTurtleAmbientLand,
    EntityTurtleDeath,
    EntityTurtleDeathBaby,
    EntityTurtleEggBreak,
    EntityTurtleEggCrack,
    EntityTurtleEggHatch,
    EntityTurtleHurt,
    EntityTurtleHurtBaby,
    EntityTurtleLayEgg,
    EntityTurtleShamble,
    EntityTurtleShambleBaby,
    EntityTurtleSwim,
    EntityVexAmbient,
    EntityVexCharge,
    EntityVexDeath,
    EntityVexHurt,
    EntityVillagerAmbient,
    EntityVillagerCelebrate,
    EntityVillagerDeath,
    EntityVillagerHurt,
    EntityVillagerNo,
    EntityVillagerTrade,
    EntityVillagerWorkArmorer,
    EntityVillagerWorkButcher,
    EntityVillagerWorkCartographer,
    EntityVillagerWorkCleric,
    EntityVillagerWorkFarmer,
    EntityVillagerWorkFisherman,
    EntityVillagerWorkFletcher,
    EntityVillagerWorkLeatherworker,
    EntityVillagerWorkLibrarian,
    EntityVillagerWorkMason,
    EntityVillagerWorkShepherd,
    EntityVillagerWorkToolsmith,
    EntityVillagerWorkWeaponsmith,
    EntityVillagerYes,
    EntityVindicatorAmbient,
    EntityVindicatorCelebrate,
    EntityVindicatorDeath,
    EntityVindicatorHurt,
    EntityWanderingTraderAmbient,
    EntityWanderingTraderDeath,
    EntityWanderingTraderDisappeared,
    EntityWanderingTraderDrinkMilk,
    EntityWanderingTraderDrinkPotion,
    EntityWanderingTraderHurt,
    EntityWanderingTraderNo,
    EntityWanderingTraderReappeared,
    EntityWanderingTraderTrade,
    EntityWanderingTraderYes,
    EntityWardenAgitated,
    EntityWardenAmbient,
    EntityWardenAngry,
    EntityWardenAttackImpact,
    EntityWardenDeath,
    EntityWardenDig,
    EntityWardenEmerge,
    EntityWardenHeartbeat,
    EntityWardenHurt,
    EntityWardenListening,
    EntityWardenListeningAngry,
    EntityWardenNearbyClose,
    EntityWardenNearbyCloser,
    EntityWardenNearbyClosest,
    EntityWardenRoar,
    EntityWardenSniff,
    EntityWardenSonicBoom,
    EntityWardenSonicCharge,
    EntityWardenStep,
    EntityWardenTendrilClicks,
    EntityWitchAmbient,
    EntityWitchCelebrate,
    EntityWitchDeath,
    EntityWitchDrink,
    EntityWitchHurt,
    EntityWitchThrow,
    EntityWitherAmbient,
    EntityWitherBreakBlock,
    EntityWitherDeath,
    EntityWitherHurt,
    EntityWitherShoot,
    EntityWitherSkeletonAmbient,
    EntityWitherSkeletonDeath,
    EntityWitherSkeletonHurt,
    EntityWitherSkeletonStep,
    EntityWitherSpawn,
    EntityWolfAmbient,
    EntityWolfDeath,
    EntityWolfGrowl,
    EntityWolfHowl,
    EntityWolfHurt,
    EntityWolfPant,
    EntityWolfShake,
    EntityWolfStep,
    EntityWolfWhine,
    EntityZoglinAmbient,
    EntityZoglinAngry,
    EntityZoglinAttack,
    EntityZoglinDeath,
    EntityZoglinHurt,
    EntityZoglinStep,
    EntityZombieAmbient,
    EntityZombieAttackIronDoor,
    EntityZombieAttackWoodenDoor,
    EntityZombieBreakWoodenDoor,
    EntityZombieConvertedToDrowned,
    EntityZombieDeath,
    EntityZombieDestroyEgg,
    EntityZombieHorseAmbient,
    EntityZombieHorseDeath,
    EntityZombieHorseHurt,
    EntityZombieHurt,
    EntityZombieInfect,
    EntityZombieStep,
    EntityZombieVillagerAmbient,
    EntityZombieVillagerConverted,
    EntityZombieVillagerCure,
    EntityZombieVillagerDeath,
    EntityZombieVillagerHurt,
    EntityZombieVillagerStep,
    EntityZombifiedPiglinAmbient,
    EntityZombifiedPiglinAngry,
    EntityZombifiedPiglinDeath,
    EntityZombifiedPiglinHurt,
    EventRaidHorn,
    IntentionallyEmpty,
    ItemArmorEquipChain,
    ItemArmorEquipDiamond,
    ItemArmorEquipElytra,
    ItemArmorEquipGeneric,
    ItemArmorEquipGold,
    ItemArmorEquipIron,
    ItemArmorEquipLeather,
    ItemArmorEquipNetherite,
    ItemArmorEquipTurtle,
    ItemAxeScrape,
    ItemAxeStrip,
    ItemAxeWaxOff,
    ItemBoneMealUse,
    ItemBookPageTurn,
    ItemBookPut,
    ItemBottleEmpty,
    ItemBottleFill,
    ItemBottleFillDragonbreath,
    ItemBrushBrushingGeneric,
    ItemBrushBrushingGravel,
    ItemBrushBrushingGravelComplete,
    ItemBrushBrushingSand,
    ItemBrushBrushingSandComplete,
    ItemBucketEmpty,
    ItemBucketEmptyAxolotl,
    ItemBucketEmptyFish,
    ItemBucketEmptyLava,
    ItemBucketEmptyPowderSnow,
    ItemBucketEmptyTadpole,
    ItemBucketFill,
    ItemBucketFillAxolotl,
    ItemBucketFillFish,
    ItemBucketFillLava,
    ItemBucketFillPowderSnow,
    ItemBucketFillTadpole,
    ItemBundleDropContents,
    ItemBundleInsert,
    ItemBundleRemoveOne,
    ItemChorusFruitTeleport,
    ItemCropPlant,
    ItemCrossbowHit,
    ItemCrossbowLoadingEnd,
    ItemCrossbowLoadingMiddle,
    ItemCrossbowLoadingStart,
    ItemCrossbowQuickCharge1,
    ItemCrossbowQuickCharge2,
    ItemCrossbowQuickCharge3,
    ItemCrossbowShoot,
    ItemDyeUse,
    ItemElytraFlying,
    ItemFirechargeUse,
    ItemFlintandsteelUse,
    ItemGlowInkSacUse,
    ItemGoatHornPlay,
    ItemGoatHornSound0,
    ItemGoatHornSound1,
    ItemGoatHornSound2,
    ItemGoatHornSound3,
    ItemGoatHornSound4,
    ItemGoatHornSound5,
    ItemGoatHornSound6,
    ItemGoatHornSound7,
    ItemHoeTill,
    ItemHoneycombWaxOn,
    ItemHoneyBottleDrink,
    ItemInkSacUse,
    ItemLodestoneCompassLock,
    ItemNetherWartPlant,
    ItemShieldBlock,
    ItemShieldBreak,
    ItemShovelFlatten,
    ItemSpyglassStopUsing,
    ItemSpyglassUse,
    ItemTotemUse,
    ItemTridentHit,
    ItemTridentHitGround,
    ItemTridentReturn,
    ItemTridentRiptide1,
    ItemTridentRiptide2,
    ItemTridentRiptide3,
    ItemTridentThrow,
    ItemTridentThunder,
    MusicCreative,
    MusicCredits,
    MusicDisc11,
    MusicDisc13,
    MusicDisc5,
    MusicDiscBlocks,
    MusicDiscCat,
    MusicDiscChirp,
    MusicDiscFar,
    MusicDiscMall,
    MusicDiscMellohi,
    MusicDiscOtherside,
    MusicDiscPigstep,
    MusicDiscRelic,
    MusicDiscStal,
    MusicDiscStrad,
    MusicDiscWait,
    MusicDiscWard,
    MusicDragon,
    MusicEnd,
    MusicGame,
    MusicMenu,
    MusicNetherBasaltDeltas,
    MusicNetherCrimsonForest,
    MusicNetherNetherWastes,
    MusicNetherSoulSandValley,
    MusicNetherWarpedForest,
    MusicOverworldBadlands,
    MusicOverworldBambooJungle,
    MusicOverworldCherryGrove,
    MusicOverworldDeepDark,
    MusicOverworldDesert,
    MusicOverworldDripstoneCaves,
    MusicOverworldFlowerForest,
    MusicOverworldForest,
    MusicOverworldFrozenPeaks,
    MusicOverworldGrove,
    MusicOverworldJaggedPeaks,
    MusicOverworldJungle,
    MusicOverworldLushCaves,
    MusicOverworldMeadow,
    MusicOverworldOldGrowthTaiga,
    MusicOverworldSnowySlopes,
    MusicOverworldSparseJungle,
    MusicOverworldStonyPeaks,
    MusicOverworldSwamp,
    MusicUnderWater,
    ParticleSoulEscape,
    UiButtonClick,
    UiCartographyTableTakeResult,
    UiLoomSelectPattern,
    UiLoomTakeResult,
    UiStonecutterSelectRecipe,
    UiStonecutterTakeResult,
    UiToastChallengeComplete,
    UiToastIn,
    UiToastOut,
    WeatherRain,
    WeatherRainAbove,
}
impl std::fmt::Display for SoundEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            SoundEnum::AmbientBasaltDeltasAdditions => {
                f.write_str("AMBIENT_BASALT_DELTAS_ADDITIONS")
            }
            SoundEnum::AmbientBasaltDeltasLoop => f.write_str("AMBIENT_BASALT_DELTAS_LOOP"),
            SoundEnum::AmbientBasaltDeltasMood => f.write_str("AMBIENT_BASALT_DELTAS_MOOD"),
            SoundEnum::AmbientCave => f.write_str("AMBIENT_CAVE"),
            SoundEnum::AmbientCrimsonForestAdditions => {
                f.write_str("AMBIENT_CRIMSON_FOREST_ADDITIONS")
            }
            SoundEnum::AmbientCrimsonForestLoop => f.write_str("AMBIENT_CRIMSON_FOREST_LOOP"),
            SoundEnum::AmbientCrimsonForestMood => f.write_str("AMBIENT_CRIMSON_FOREST_MOOD"),
            SoundEnum::AmbientNetherWastesAdditions => {
                f.write_str("AMBIENT_NETHER_WASTES_ADDITIONS")
            }
            SoundEnum::AmbientNetherWastesLoop => f.write_str("AMBIENT_NETHER_WASTES_LOOP"),
            SoundEnum::AmbientNetherWastesMood => f.write_str("AMBIENT_NETHER_WASTES_MOOD"),
            SoundEnum::AmbientSoulSandValleyAdditions => {
                f.write_str("AMBIENT_SOUL_SAND_VALLEY_ADDITIONS")
            }
            SoundEnum::AmbientSoulSandValleyLoop => f.write_str("AMBIENT_SOUL_SAND_VALLEY_LOOP"),
            SoundEnum::AmbientSoulSandValleyMood => f.write_str("AMBIENT_SOUL_SAND_VALLEY_MOOD"),
            SoundEnum::AmbientUnderwaterEnter => f.write_str("AMBIENT_UNDERWATER_ENTER"),
            SoundEnum::AmbientUnderwaterExit => f.write_str("AMBIENT_UNDERWATER_EXIT"),
            SoundEnum::AmbientUnderwaterLoop => f.write_str("AMBIENT_UNDERWATER_LOOP"),
            SoundEnum::AmbientUnderwaterLoopAdditions => {
                f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS")
            }
            SoundEnum::AmbientUnderwaterLoopAdditionsRare => {
                f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE")
            }
            SoundEnum::AmbientUnderwaterLoopAdditionsUltraRare => {
                f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE")
            }
            SoundEnum::AmbientWarpedForestAdditions => {
                f.write_str("AMBIENT_WARPED_FOREST_ADDITIONS")
            }
            SoundEnum::AmbientWarpedForestLoop => f.write_str("AMBIENT_WARPED_FOREST_LOOP"),
            SoundEnum::AmbientWarpedForestMood => f.write_str("AMBIENT_WARPED_FOREST_MOOD"),
            SoundEnum::BlockAmethystBlockBreak => f.write_str("BLOCK_AMETHYST_BLOCK_BREAK"),
            SoundEnum::BlockAmethystBlockChime => f.write_str("BLOCK_AMETHYST_BLOCK_CHIME"),
            SoundEnum::BlockAmethystBlockFall => f.write_str("BLOCK_AMETHYST_BLOCK_FALL"),
            SoundEnum::BlockAmethystBlockHit => f.write_str("BLOCK_AMETHYST_BLOCK_HIT"),
            SoundEnum::BlockAmethystBlockPlace => f.write_str("BLOCK_AMETHYST_BLOCK_PLACE"),
            SoundEnum::BlockAmethystBlockResonate => f.write_str("BLOCK_AMETHYST_BLOCK_RESONATE"),
            SoundEnum::BlockAmethystBlockStep => f.write_str("BLOCK_AMETHYST_BLOCK_STEP"),
            SoundEnum::BlockAmethystClusterBreak => f.write_str("BLOCK_AMETHYST_CLUSTER_BREAK"),
            SoundEnum::BlockAmethystClusterFall => f.write_str("BLOCK_AMETHYST_CLUSTER_FALL"),
            SoundEnum::BlockAmethystClusterHit => f.write_str("BLOCK_AMETHYST_CLUSTER_HIT"),
            SoundEnum::BlockAmethystClusterPlace => f.write_str("BLOCK_AMETHYST_CLUSTER_PLACE"),
            SoundEnum::BlockAmethystClusterStep => f.write_str("BLOCK_AMETHYST_CLUSTER_STEP"),
            SoundEnum::BlockAncientDebrisBreak => f.write_str("BLOCK_ANCIENT_DEBRIS_BREAK"),
            SoundEnum::BlockAncientDebrisFall => f.write_str("BLOCK_ANCIENT_DEBRIS_FALL"),
            SoundEnum::BlockAncientDebrisHit => f.write_str("BLOCK_ANCIENT_DEBRIS_HIT"),
            SoundEnum::BlockAncientDebrisPlace => f.write_str("BLOCK_ANCIENT_DEBRIS_PLACE"),
            SoundEnum::BlockAncientDebrisStep => f.write_str("BLOCK_ANCIENT_DEBRIS_STEP"),
            SoundEnum::BlockAnvilBreak => f.write_str("BLOCK_ANVIL_BREAK"),
            SoundEnum::BlockAnvilDestroy => f.write_str("BLOCK_ANVIL_DESTROY"),
            SoundEnum::BlockAnvilFall => f.write_str("BLOCK_ANVIL_FALL"),
            SoundEnum::BlockAnvilHit => f.write_str("BLOCK_ANVIL_HIT"),
            SoundEnum::BlockAnvilLand => f.write_str("BLOCK_ANVIL_LAND"),
            SoundEnum::BlockAnvilPlace => f.write_str("BLOCK_ANVIL_PLACE"),
            SoundEnum::BlockAnvilStep => f.write_str("BLOCK_ANVIL_STEP"),
            SoundEnum::BlockAnvilUse => f.write_str("BLOCK_ANVIL_USE"),
            SoundEnum::BlockAzaleaBreak => f.write_str("BLOCK_AZALEA_BREAK"),
            SoundEnum::BlockAzaleaFall => f.write_str("BLOCK_AZALEA_FALL"),
            SoundEnum::BlockAzaleaHit => f.write_str("BLOCK_AZALEA_HIT"),
            SoundEnum::BlockAzaleaLeavesBreak => f.write_str("BLOCK_AZALEA_LEAVES_BREAK"),
            SoundEnum::BlockAzaleaLeavesFall => f.write_str("BLOCK_AZALEA_LEAVES_FALL"),
            SoundEnum::BlockAzaleaLeavesHit => f.write_str("BLOCK_AZALEA_LEAVES_HIT"),
            SoundEnum::BlockAzaleaLeavesPlace => f.write_str("BLOCK_AZALEA_LEAVES_PLACE"),
            SoundEnum::BlockAzaleaLeavesStep => f.write_str("BLOCK_AZALEA_LEAVES_STEP"),
            SoundEnum::BlockAzaleaPlace => f.write_str("BLOCK_AZALEA_PLACE"),
            SoundEnum::BlockAzaleaStep => f.write_str("BLOCK_AZALEA_STEP"),
            SoundEnum::BlockBambooBreak => f.write_str("BLOCK_BAMBOO_BREAK"),
            SoundEnum::BlockBambooFall => f.write_str("BLOCK_BAMBOO_FALL"),
            SoundEnum::BlockBambooHit => f.write_str("BLOCK_BAMBOO_HIT"),
            SoundEnum::BlockBambooPlace => f.write_str("BLOCK_BAMBOO_PLACE"),
            SoundEnum::BlockBambooSaplingBreak => f.write_str("BLOCK_BAMBOO_SAPLING_BREAK"),
            SoundEnum::BlockBambooSaplingHit => f.write_str("BLOCK_BAMBOO_SAPLING_HIT"),
            SoundEnum::BlockBambooSaplingPlace => f.write_str("BLOCK_BAMBOO_SAPLING_PLACE"),
            SoundEnum::BlockBambooStep => f.write_str("BLOCK_BAMBOO_STEP"),
            SoundEnum::BlockBambooWoodBreak => f.write_str("BLOCK_BAMBOO_WOOD_BREAK"),
            SoundEnum::BlockBambooWoodButtonClickOff => {
                f.write_str("BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF")
            }
            SoundEnum::BlockBambooWoodButtonClickOn => {
                f.write_str("BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON")
            }
            SoundEnum::BlockBambooWoodDoorClose => f.write_str("BLOCK_BAMBOO_WOOD_DOOR_CLOSE"),
            SoundEnum::BlockBambooWoodDoorOpen => f.write_str("BLOCK_BAMBOO_WOOD_DOOR_OPEN"),
            SoundEnum::BlockBambooWoodFall => f.write_str("BLOCK_BAMBOO_WOOD_FALL"),
            SoundEnum::BlockBambooWoodFenceGateClose => {
                f.write_str("BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE")
            }
            SoundEnum::BlockBambooWoodFenceGateOpen => {
                f.write_str("BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN")
            }
            SoundEnum::BlockBambooWoodHangingSignBreak => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK")
            }
            SoundEnum::BlockBambooWoodHangingSignFall => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL")
            }
            SoundEnum::BlockBambooWoodHangingSignHit => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT")
            }
            SoundEnum::BlockBambooWoodHangingSignPlace => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE")
            }
            SoundEnum::BlockBambooWoodHangingSignStep => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP")
            }
            SoundEnum::BlockBambooWoodHit => f.write_str("BLOCK_BAMBOO_WOOD_HIT"),
            SoundEnum::BlockBambooWoodPlace => f.write_str("BLOCK_BAMBOO_WOOD_PLACE"),
            SoundEnum::BlockBambooWoodPressurePlateClickOff => {
                f.write_str("BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockBambooWoodPressurePlateClickOn => {
                f.write_str("BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockBambooWoodStep => f.write_str("BLOCK_BAMBOO_WOOD_STEP"),
            SoundEnum::BlockBambooWoodTrapdoorClose => {
                f.write_str("BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE")
            }
            SoundEnum::BlockBambooWoodTrapdoorOpen => {
                f.write_str("BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN")
            }
            SoundEnum::BlockBarrelClose => f.write_str("BLOCK_BARREL_CLOSE"),
            SoundEnum::BlockBarrelOpen => f.write_str("BLOCK_BARREL_OPEN"),
            SoundEnum::BlockBasaltBreak => f.write_str("BLOCK_BASALT_BREAK"),
            SoundEnum::BlockBasaltFall => f.write_str("BLOCK_BASALT_FALL"),
            SoundEnum::BlockBasaltHit => f.write_str("BLOCK_BASALT_HIT"),
            SoundEnum::BlockBasaltPlace => f.write_str("BLOCK_BASALT_PLACE"),
            SoundEnum::BlockBasaltStep => f.write_str("BLOCK_BASALT_STEP"),
            SoundEnum::BlockBeaconActivate => f.write_str("BLOCK_BEACON_ACTIVATE"),
            SoundEnum::BlockBeaconAmbient => f.write_str("BLOCK_BEACON_AMBIENT"),
            SoundEnum::BlockBeaconDeactivate => f.write_str("BLOCK_BEACON_DEACTIVATE"),
            SoundEnum::BlockBeaconPowerSelect => f.write_str("BLOCK_BEACON_POWER_SELECT"),
            SoundEnum::BlockBeehiveDrip => f.write_str("BLOCK_BEEHIVE_DRIP"),
            SoundEnum::BlockBeehiveEnter => f.write_str("BLOCK_BEEHIVE_ENTER"),
            SoundEnum::BlockBeehiveExit => f.write_str("BLOCK_BEEHIVE_EXIT"),
            SoundEnum::BlockBeehiveShear => f.write_str("BLOCK_BEEHIVE_SHEAR"),
            SoundEnum::BlockBeehiveWork => f.write_str("BLOCK_BEEHIVE_WORK"),
            SoundEnum::BlockBellResonate => f.write_str("BLOCK_BELL_RESONATE"),
            SoundEnum::BlockBellUse => f.write_str("BLOCK_BELL_USE"),
            SoundEnum::BlockBigDripleafBreak => f.write_str("BLOCK_BIG_DRIPLEAF_BREAK"),
            SoundEnum::BlockBigDripleafFall => f.write_str("BLOCK_BIG_DRIPLEAF_FALL"),
            SoundEnum::BlockBigDripleafHit => f.write_str("BLOCK_BIG_DRIPLEAF_HIT"),
            SoundEnum::BlockBigDripleafPlace => f.write_str("BLOCK_BIG_DRIPLEAF_PLACE"),
            SoundEnum::BlockBigDripleafStep => f.write_str("BLOCK_BIG_DRIPLEAF_STEP"),
            SoundEnum::BlockBigDripleafTiltDown => f.write_str("BLOCK_BIG_DRIPLEAF_TILT_DOWN"),
            SoundEnum::BlockBigDripleafTiltUp => f.write_str("BLOCK_BIG_DRIPLEAF_TILT_UP"),
            SoundEnum::BlockBlastfurnaceFireCrackle => {
                f.write_str("BLOCK_BLASTFURNACE_FIRE_CRACKLE")
            }
            SoundEnum::BlockBoneBlockBreak => f.write_str("BLOCK_BONE_BLOCK_BREAK"),
            SoundEnum::BlockBoneBlockFall => f.write_str("BLOCK_BONE_BLOCK_FALL"),
            SoundEnum::BlockBoneBlockHit => f.write_str("BLOCK_BONE_BLOCK_HIT"),
            SoundEnum::BlockBoneBlockPlace => f.write_str("BLOCK_BONE_BLOCK_PLACE"),
            SoundEnum::BlockBoneBlockStep => f.write_str("BLOCK_BONE_BLOCK_STEP"),
            SoundEnum::BlockBrewingStandBrew => f.write_str("BLOCK_BREWING_STAND_BREW"),
            SoundEnum::BlockBubbleColumnBubblePop => f.write_str("BLOCK_BUBBLE_COLUMN_BUBBLE_POP"),
            SoundEnum::BlockBubbleColumnUpwardsAmbient => {
                f.write_str("BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT")
            }
            SoundEnum::BlockBubbleColumnUpwardsInside => {
                f.write_str("BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE")
            }
            SoundEnum::BlockBubbleColumnWhirlpoolAmbient => {
                f.write_str("BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT")
            }
            SoundEnum::BlockBubbleColumnWhirlpoolInside => {
                f.write_str("BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE")
            }
            SoundEnum::BlockCakeAddCandle => f.write_str("BLOCK_CAKE_ADD_CANDLE"),
            SoundEnum::BlockCalciteBreak => f.write_str("BLOCK_CALCITE_BREAK"),
            SoundEnum::BlockCalciteFall => f.write_str("BLOCK_CALCITE_FALL"),
            SoundEnum::BlockCalciteHit => f.write_str("BLOCK_CALCITE_HIT"),
            SoundEnum::BlockCalcitePlace => f.write_str("BLOCK_CALCITE_PLACE"),
            SoundEnum::BlockCalciteStep => f.write_str("BLOCK_CALCITE_STEP"),
            SoundEnum::BlockCampfireCrackle => f.write_str("BLOCK_CAMPFIRE_CRACKLE"),
            SoundEnum::BlockCandleAmbient => f.write_str("BLOCK_CANDLE_AMBIENT"),
            SoundEnum::BlockCandleBreak => f.write_str("BLOCK_CANDLE_BREAK"),
            SoundEnum::BlockCandleExtinguish => f.write_str("BLOCK_CANDLE_EXTINGUISH"),
            SoundEnum::BlockCandleFall => f.write_str("BLOCK_CANDLE_FALL"),
            SoundEnum::BlockCandleHit => f.write_str("BLOCK_CANDLE_HIT"),
            SoundEnum::BlockCandlePlace => f.write_str("BLOCK_CANDLE_PLACE"),
            SoundEnum::BlockCandleStep => f.write_str("BLOCK_CANDLE_STEP"),
            SoundEnum::BlockCaveVinesBreak => f.write_str("BLOCK_CAVE_VINES_BREAK"),
            SoundEnum::BlockCaveVinesFall => f.write_str("BLOCK_CAVE_VINES_FALL"),
            SoundEnum::BlockCaveVinesHit => f.write_str("BLOCK_CAVE_VINES_HIT"),
            SoundEnum::BlockCaveVinesPickBerries => f.write_str("BLOCK_CAVE_VINES_PICK_BERRIES"),
            SoundEnum::BlockCaveVinesPlace => f.write_str("BLOCK_CAVE_VINES_PLACE"),
            SoundEnum::BlockCaveVinesStep => f.write_str("BLOCK_CAVE_VINES_STEP"),
            SoundEnum::BlockChainBreak => f.write_str("BLOCK_CHAIN_BREAK"),
            SoundEnum::BlockChainFall => f.write_str("BLOCK_CHAIN_FALL"),
            SoundEnum::BlockChainHit => f.write_str("BLOCK_CHAIN_HIT"),
            SoundEnum::BlockChainPlace => f.write_str("BLOCK_CHAIN_PLACE"),
            SoundEnum::BlockChainStep => f.write_str("BLOCK_CHAIN_STEP"),
            SoundEnum::BlockCherryLeavesBreak => f.write_str("BLOCK_CHERRY_LEAVES_BREAK"),
            SoundEnum::BlockCherryLeavesFall => f.write_str("BLOCK_CHERRY_LEAVES_FALL"),
            SoundEnum::BlockCherryLeavesHit => f.write_str("BLOCK_CHERRY_LEAVES_HIT"),
            SoundEnum::BlockCherryLeavesPlace => f.write_str("BLOCK_CHERRY_LEAVES_PLACE"),
            SoundEnum::BlockCherryLeavesStep => f.write_str("BLOCK_CHERRY_LEAVES_STEP"),
            SoundEnum::BlockCherrySaplingBreak => f.write_str("BLOCK_CHERRY_SAPLING_BREAK"),
            SoundEnum::BlockCherrySaplingFall => f.write_str("BLOCK_CHERRY_SAPLING_FALL"),
            SoundEnum::BlockCherrySaplingHit => f.write_str("BLOCK_CHERRY_SAPLING_HIT"),
            SoundEnum::BlockCherrySaplingPlace => f.write_str("BLOCK_CHERRY_SAPLING_PLACE"),
            SoundEnum::BlockCherrySaplingStep => f.write_str("BLOCK_CHERRY_SAPLING_STEP"),
            SoundEnum::BlockCherryWoodBreak => f.write_str("BLOCK_CHERRY_WOOD_BREAK"),
            SoundEnum::BlockCherryWoodButtonClickOff => {
                f.write_str("BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF")
            }
            SoundEnum::BlockCherryWoodButtonClickOn => {
                f.write_str("BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON")
            }
            SoundEnum::BlockCherryWoodDoorClose => f.write_str("BLOCK_CHERRY_WOOD_DOOR_CLOSE"),
            SoundEnum::BlockCherryWoodDoorOpen => f.write_str("BLOCK_CHERRY_WOOD_DOOR_OPEN"),
            SoundEnum::BlockCherryWoodFall => f.write_str("BLOCK_CHERRY_WOOD_FALL"),
            SoundEnum::BlockCherryWoodFenceGateClose => {
                f.write_str("BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE")
            }
            SoundEnum::BlockCherryWoodFenceGateOpen => {
                f.write_str("BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN")
            }
            SoundEnum::BlockCherryWoodHangingSignBreak => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK")
            }
            SoundEnum::BlockCherryWoodHangingSignFall => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL")
            }
            SoundEnum::BlockCherryWoodHangingSignHit => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT")
            }
            SoundEnum::BlockCherryWoodHangingSignPlace => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE")
            }
            SoundEnum::BlockCherryWoodHangingSignStep => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP")
            }
            SoundEnum::BlockCherryWoodHit => f.write_str("BLOCK_CHERRY_WOOD_HIT"),
            SoundEnum::BlockCherryWoodPlace => f.write_str("BLOCK_CHERRY_WOOD_PLACE"),
            SoundEnum::BlockCherryWoodPressurePlateClickOff => {
                f.write_str("BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockCherryWoodPressurePlateClickOn => {
                f.write_str("BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockCherryWoodStep => f.write_str("BLOCK_CHERRY_WOOD_STEP"),
            SoundEnum::BlockCherryWoodTrapdoorClose => {
                f.write_str("BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE")
            }
            SoundEnum::BlockCherryWoodTrapdoorOpen => {
                f.write_str("BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN")
            }
            SoundEnum::BlockChestClose => f.write_str("BLOCK_CHEST_CLOSE"),
            SoundEnum::BlockChestLocked => f.write_str("BLOCK_CHEST_LOCKED"),
            SoundEnum::BlockChestOpen => f.write_str("BLOCK_CHEST_OPEN"),
            SoundEnum::BlockChiseledBookshelfBreak => f.write_str("BLOCK_CHISELED_BOOKSHELF_BREAK"),
            SoundEnum::BlockChiseledBookshelfFall => f.write_str("BLOCK_CHISELED_BOOKSHELF_FALL"),
            SoundEnum::BlockChiseledBookshelfHit => f.write_str("BLOCK_CHISELED_BOOKSHELF_HIT"),
            SoundEnum::BlockChiseledBookshelfInsert => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_INSERT")
            }
            SoundEnum::BlockChiseledBookshelfInsertEnchanted => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED")
            }
            SoundEnum::BlockChiseledBookshelfPickup => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_PICKUP")
            }
            SoundEnum::BlockChiseledBookshelfPickupEnchanted => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED")
            }
            SoundEnum::BlockChiseledBookshelfPlace => f.write_str("BLOCK_CHISELED_BOOKSHELF_PLACE"),
            SoundEnum::BlockChiseledBookshelfStep => f.write_str("BLOCK_CHISELED_BOOKSHELF_STEP"),
            SoundEnum::BlockChorusFlowerDeath => f.write_str("BLOCK_CHORUS_FLOWER_DEATH"),
            SoundEnum::BlockChorusFlowerGrow => f.write_str("BLOCK_CHORUS_FLOWER_GROW"),
            SoundEnum::BlockComparatorClick => f.write_str("BLOCK_COMPARATOR_CLICK"),
            SoundEnum::BlockComposterEmpty => f.write_str("BLOCK_COMPOSTER_EMPTY"),
            SoundEnum::BlockComposterFill => f.write_str("BLOCK_COMPOSTER_FILL"),
            SoundEnum::BlockComposterFillSuccess => f.write_str("BLOCK_COMPOSTER_FILL_SUCCESS"),
            SoundEnum::BlockComposterReady => f.write_str("BLOCK_COMPOSTER_READY"),
            SoundEnum::BlockConduitActivate => f.write_str("BLOCK_CONDUIT_ACTIVATE"),
            SoundEnum::BlockConduitAmbient => f.write_str("BLOCK_CONDUIT_AMBIENT"),
            SoundEnum::BlockConduitAmbientShort => f.write_str("BLOCK_CONDUIT_AMBIENT_SHORT"),
            SoundEnum::BlockConduitAttackTarget => f.write_str("BLOCK_CONDUIT_ATTACK_TARGET"),
            SoundEnum::BlockConduitDeactivate => f.write_str("BLOCK_CONDUIT_DEACTIVATE"),
            SoundEnum::BlockCopperBreak => f.write_str("BLOCK_COPPER_BREAK"),
            SoundEnum::BlockCopperFall => f.write_str("BLOCK_COPPER_FALL"),
            SoundEnum::BlockCopperHit => f.write_str("BLOCK_COPPER_HIT"),
            SoundEnum::BlockCopperPlace => f.write_str("BLOCK_COPPER_PLACE"),
            SoundEnum::BlockCopperStep => f.write_str("BLOCK_COPPER_STEP"),
            SoundEnum::BlockCoralBlockBreak => f.write_str("BLOCK_CORAL_BLOCK_BREAK"),
            SoundEnum::BlockCoralBlockFall => f.write_str("BLOCK_CORAL_BLOCK_FALL"),
            SoundEnum::BlockCoralBlockHit => f.write_str("BLOCK_CORAL_BLOCK_HIT"),
            SoundEnum::BlockCoralBlockPlace => f.write_str("BLOCK_CORAL_BLOCK_PLACE"),
            SoundEnum::BlockCoralBlockStep => f.write_str("BLOCK_CORAL_BLOCK_STEP"),
            SoundEnum::BlockCropBreak => f.write_str("BLOCK_CROP_BREAK"),
            SoundEnum::BlockDecoratedPotBreak => f.write_str("BLOCK_DECORATED_POT_BREAK"),
            SoundEnum::BlockDecoratedPotFall => f.write_str("BLOCK_DECORATED_POT_FALL"),
            SoundEnum::BlockDecoratedPotHit => f.write_str("BLOCK_DECORATED_POT_HIT"),
            SoundEnum::BlockDecoratedPotPlace => f.write_str("BLOCK_DECORATED_POT_PLACE"),
            SoundEnum::BlockDecoratedPotShatter => f.write_str("BLOCK_DECORATED_POT_SHATTER"),
            SoundEnum::BlockDecoratedPotStep => f.write_str("BLOCK_DECORATED_POT_STEP"),
            SoundEnum::BlockDeepslateBreak => f.write_str("BLOCK_DEEPSLATE_BREAK"),
            SoundEnum::BlockDeepslateBricksBreak => f.write_str("BLOCK_DEEPSLATE_BRICKS_BREAK"),
            SoundEnum::BlockDeepslateBricksFall => f.write_str("BLOCK_DEEPSLATE_BRICKS_FALL"),
            SoundEnum::BlockDeepslateBricksHit => f.write_str("BLOCK_DEEPSLATE_BRICKS_HIT"),
            SoundEnum::BlockDeepslateBricksPlace => f.write_str("BLOCK_DEEPSLATE_BRICKS_PLACE"),
            SoundEnum::BlockDeepslateBricksStep => f.write_str("BLOCK_DEEPSLATE_BRICKS_STEP"),
            SoundEnum::BlockDeepslateFall => f.write_str("BLOCK_DEEPSLATE_FALL"),
            SoundEnum::BlockDeepslateHit => f.write_str("BLOCK_DEEPSLATE_HIT"),
            SoundEnum::BlockDeepslatePlace => f.write_str("BLOCK_DEEPSLATE_PLACE"),
            SoundEnum::BlockDeepslateStep => f.write_str("BLOCK_DEEPSLATE_STEP"),
            SoundEnum::BlockDeepslateTilesBreak => f.write_str("BLOCK_DEEPSLATE_TILES_BREAK"),
            SoundEnum::BlockDeepslateTilesFall => f.write_str("BLOCK_DEEPSLATE_TILES_FALL"),
            SoundEnum::BlockDeepslateTilesHit => f.write_str("BLOCK_DEEPSLATE_TILES_HIT"),
            SoundEnum::BlockDeepslateTilesPlace => f.write_str("BLOCK_DEEPSLATE_TILES_PLACE"),
            SoundEnum::BlockDeepslateTilesStep => f.write_str("BLOCK_DEEPSLATE_TILES_STEP"),
            SoundEnum::BlockDispenserDispense => f.write_str("BLOCK_DISPENSER_DISPENSE"),
            SoundEnum::BlockDispenserFail => f.write_str("BLOCK_DISPENSER_FAIL"),
            SoundEnum::BlockDispenserLaunch => f.write_str("BLOCK_DISPENSER_LAUNCH"),
            SoundEnum::BlockDripstoneBlockBreak => f.write_str("BLOCK_DRIPSTONE_BLOCK_BREAK"),
            SoundEnum::BlockDripstoneBlockFall => f.write_str("BLOCK_DRIPSTONE_BLOCK_FALL"),
            SoundEnum::BlockDripstoneBlockHit => f.write_str("BLOCK_DRIPSTONE_BLOCK_HIT"),
            SoundEnum::BlockDripstoneBlockPlace => f.write_str("BLOCK_DRIPSTONE_BLOCK_PLACE"),
            SoundEnum::BlockDripstoneBlockStep => f.write_str("BLOCK_DRIPSTONE_BLOCK_STEP"),
            SoundEnum::BlockEnchantmentTableUse => f.write_str("BLOCK_ENCHANTMENT_TABLE_USE"),
            SoundEnum::BlockEnderChestClose => f.write_str("BLOCK_ENDER_CHEST_CLOSE"),
            SoundEnum::BlockEnderChestOpen => f.write_str("BLOCK_ENDER_CHEST_OPEN"),
            SoundEnum::BlockEndGatewaySpawn => f.write_str("BLOCK_END_GATEWAY_SPAWN"),
            SoundEnum::BlockEndPortalFrameFill => f.write_str("BLOCK_END_PORTAL_FRAME_FILL"),
            SoundEnum::BlockEndPortalSpawn => f.write_str("BLOCK_END_PORTAL_SPAWN"),
            SoundEnum::BlockFenceGateClose => f.write_str("BLOCK_FENCE_GATE_CLOSE"),
            SoundEnum::BlockFenceGateOpen => f.write_str("BLOCK_FENCE_GATE_OPEN"),
            SoundEnum::BlockFireAmbient => f.write_str("BLOCK_FIRE_AMBIENT"),
            SoundEnum::BlockFireExtinguish => f.write_str("BLOCK_FIRE_EXTINGUISH"),
            SoundEnum::BlockFloweringAzaleaBreak => f.write_str("BLOCK_FLOWERING_AZALEA_BREAK"),
            SoundEnum::BlockFloweringAzaleaFall => f.write_str("BLOCK_FLOWERING_AZALEA_FALL"),
            SoundEnum::BlockFloweringAzaleaHit => f.write_str("BLOCK_FLOWERING_AZALEA_HIT"),
            SoundEnum::BlockFloweringAzaleaPlace => f.write_str("BLOCK_FLOWERING_AZALEA_PLACE"),
            SoundEnum::BlockFloweringAzaleaStep => f.write_str("BLOCK_FLOWERING_AZALEA_STEP"),
            SoundEnum::BlockFroglightBreak => f.write_str("BLOCK_FROGLIGHT_BREAK"),
            SoundEnum::BlockFroglightFall => f.write_str("BLOCK_FROGLIGHT_FALL"),
            SoundEnum::BlockFroglightHit => f.write_str("BLOCK_FROGLIGHT_HIT"),
            SoundEnum::BlockFroglightPlace => f.write_str("BLOCK_FROGLIGHT_PLACE"),
            SoundEnum::BlockFroglightStep => f.write_str("BLOCK_FROGLIGHT_STEP"),
            SoundEnum::BlockFrogspawnBreak => f.write_str("BLOCK_FROGSPAWN_BREAK"),
            SoundEnum::BlockFrogspawnFall => f.write_str("BLOCK_FROGSPAWN_FALL"),
            SoundEnum::BlockFrogspawnHatch => f.write_str("BLOCK_FROGSPAWN_HATCH"),
            SoundEnum::BlockFrogspawnHit => f.write_str("BLOCK_FROGSPAWN_HIT"),
            SoundEnum::BlockFrogspawnPlace => f.write_str("BLOCK_FROGSPAWN_PLACE"),
            SoundEnum::BlockFrogspawnStep => f.write_str("BLOCK_FROGSPAWN_STEP"),
            SoundEnum::BlockFungusBreak => f.write_str("BLOCK_FUNGUS_BREAK"),
            SoundEnum::BlockFungusFall => f.write_str("BLOCK_FUNGUS_FALL"),
            SoundEnum::BlockFungusHit => f.write_str("BLOCK_FUNGUS_HIT"),
            SoundEnum::BlockFungusPlace => f.write_str("BLOCK_FUNGUS_PLACE"),
            SoundEnum::BlockFungusStep => f.write_str("BLOCK_FUNGUS_STEP"),
            SoundEnum::BlockFurnaceFireCrackle => f.write_str("BLOCK_FURNACE_FIRE_CRACKLE"),
            SoundEnum::BlockGildedBlackstoneBreak => f.write_str("BLOCK_GILDED_BLACKSTONE_BREAK"),
            SoundEnum::BlockGildedBlackstoneFall => f.write_str("BLOCK_GILDED_BLACKSTONE_FALL"),
            SoundEnum::BlockGildedBlackstoneHit => f.write_str("BLOCK_GILDED_BLACKSTONE_HIT"),
            SoundEnum::BlockGildedBlackstonePlace => f.write_str("BLOCK_GILDED_BLACKSTONE_PLACE"),
            SoundEnum::BlockGildedBlackstoneStep => f.write_str("BLOCK_GILDED_BLACKSTONE_STEP"),
            SoundEnum::BlockGlassBreak => f.write_str("BLOCK_GLASS_BREAK"),
            SoundEnum::BlockGlassFall => f.write_str("BLOCK_GLASS_FALL"),
            SoundEnum::BlockGlassHit => f.write_str("BLOCK_GLASS_HIT"),
            SoundEnum::BlockGlassPlace => f.write_str("BLOCK_GLASS_PLACE"),
            SoundEnum::BlockGlassStep => f.write_str("BLOCK_GLASS_STEP"),
            SoundEnum::BlockGrassBreak => f.write_str("BLOCK_GRASS_BREAK"),
            SoundEnum::BlockGrassFall => f.write_str("BLOCK_GRASS_FALL"),
            SoundEnum::BlockGrassHit => f.write_str("BLOCK_GRASS_HIT"),
            SoundEnum::BlockGrassPlace => f.write_str("BLOCK_GRASS_PLACE"),
            SoundEnum::BlockGrassStep => f.write_str("BLOCK_GRASS_STEP"),
            SoundEnum::BlockGravelBreak => f.write_str("BLOCK_GRAVEL_BREAK"),
            SoundEnum::BlockGravelFall => f.write_str("BLOCK_GRAVEL_FALL"),
            SoundEnum::BlockGravelHit => f.write_str("BLOCK_GRAVEL_HIT"),
            SoundEnum::BlockGravelPlace => f.write_str("BLOCK_GRAVEL_PLACE"),
            SoundEnum::BlockGravelStep => f.write_str("BLOCK_GRAVEL_STEP"),
            SoundEnum::BlockGrindstoneUse => f.write_str("BLOCK_GRINDSTONE_USE"),
            SoundEnum::BlockGrowingPlantCrop => f.write_str("BLOCK_GROWING_PLANT_CROP"),
            SoundEnum::BlockHangingRootsBreak => f.write_str("BLOCK_HANGING_ROOTS_BREAK"),
            SoundEnum::BlockHangingRootsFall => f.write_str("BLOCK_HANGING_ROOTS_FALL"),
            SoundEnum::BlockHangingRootsHit => f.write_str("BLOCK_HANGING_ROOTS_HIT"),
            SoundEnum::BlockHangingRootsPlace => f.write_str("BLOCK_HANGING_ROOTS_PLACE"),
            SoundEnum::BlockHangingRootsStep => f.write_str("BLOCK_HANGING_ROOTS_STEP"),
            SoundEnum::BlockHangingSignBreak => f.write_str("BLOCK_HANGING_SIGN_BREAK"),
            SoundEnum::BlockHangingSignFall => f.write_str("BLOCK_HANGING_SIGN_FALL"),
            SoundEnum::BlockHangingSignHit => f.write_str("BLOCK_HANGING_SIGN_HIT"),
            SoundEnum::BlockHangingSignPlace => f.write_str("BLOCK_HANGING_SIGN_PLACE"),
            SoundEnum::BlockHangingSignStep => f.write_str("BLOCK_HANGING_SIGN_STEP"),
            SoundEnum::BlockHoneyBlockBreak => f.write_str("BLOCK_HONEY_BLOCK_BREAK"),
            SoundEnum::BlockHoneyBlockFall => f.write_str("BLOCK_HONEY_BLOCK_FALL"),
            SoundEnum::BlockHoneyBlockHit => f.write_str("BLOCK_HONEY_BLOCK_HIT"),
            SoundEnum::BlockHoneyBlockPlace => f.write_str("BLOCK_HONEY_BLOCK_PLACE"),
            SoundEnum::BlockHoneyBlockSlide => f.write_str("BLOCK_HONEY_BLOCK_SLIDE"),
            SoundEnum::BlockHoneyBlockStep => f.write_str("BLOCK_HONEY_BLOCK_STEP"),
            SoundEnum::BlockIronDoorClose => f.write_str("BLOCK_IRON_DOOR_CLOSE"),
            SoundEnum::BlockIronDoorOpen => f.write_str("BLOCK_IRON_DOOR_OPEN"),
            SoundEnum::BlockIronTrapdoorClose => f.write_str("BLOCK_IRON_TRAPDOOR_CLOSE"),
            SoundEnum::BlockIronTrapdoorOpen => f.write_str("BLOCK_IRON_TRAPDOOR_OPEN"),
            SoundEnum::BlockLadderBreak => f.write_str("BLOCK_LADDER_BREAK"),
            SoundEnum::BlockLadderFall => f.write_str("BLOCK_LADDER_FALL"),
            SoundEnum::BlockLadderHit => f.write_str("BLOCK_LADDER_HIT"),
            SoundEnum::BlockLadderPlace => f.write_str("BLOCK_LADDER_PLACE"),
            SoundEnum::BlockLadderStep => f.write_str("BLOCK_LADDER_STEP"),
            SoundEnum::BlockLanternBreak => f.write_str("BLOCK_LANTERN_BREAK"),
            SoundEnum::BlockLanternFall => f.write_str("BLOCK_LANTERN_FALL"),
            SoundEnum::BlockLanternHit => f.write_str("BLOCK_LANTERN_HIT"),
            SoundEnum::BlockLanternPlace => f.write_str("BLOCK_LANTERN_PLACE"),
            SoundEnum::BlockLanternStep => f.write_str("BLOCK_LANTERN_STEP"),
            SoundEnum::BlockLargeAmethystBudBreak => f.write_str("BLOCK_LARGE_AMETHYST_BUD_BREAK"),
            SoundEnum::BlockLargeAmethystBudPlace => f.write_str("BLOCK_LARGE_AMETHYST_BUD_PLACE"),
            SoundEnum::BlockLavaAmbient => f.write_str("BLOCK_LAVA_AMBIENT"),
            SoundEnum::BlockLavaExtinguish => f.write_str("BLOCK_LAVA_EXTINGUISH"),
            SoundEnum::BlockLavaPop => f.write_str("BLOCK_LAVA_POP"),
            SoundEnum::BlockLeverClick => f.write_str("BLOCK_LEVER_CLICK"),
            SoundEnum::BlockLilyPadPlace => f.write_str("BLOCK_LILY_PAD_PLACE"),
            SoundEnum::BlockLodestoneBreak => f.write_str("BLOCK_LODESTONE_BREAK"),
            SoundEnum::BlockLodestoneFall => f.write_str("BLOCK_LODESTONE_FALL"),
            SoundEnum::BlockLodestoneHit => f.write_str("BLOCK_LODESTONE_HIT"),
            SoundEnum::BlockLodestonePlace => f.write_str("BLOCK_LODESTONE_PLACE"),
            SoundEnum::BlockLodestoneStep => f.write_str("BLOCK_LODESTONE_STEP"),
            SoundEnum::BlockMangroveRootsBreak => f.write_str("BLOCK_MANGROVE_ROOTS_BREAK"),
            SoundEnum::BlockMangroveRootsFall => f.write_str("BLOCK_MANGROVE_ROOTS_FALL"),
            SoundEnum::BlockMangroveRootsHit => f.write_str("BLOCK_MANGROVE_ROOTS_HIT"),
            SoundEnum::BlockMangroveRootsPlace => f.write_str("BLOCK_MANGROVE_ROOTS_PLACE"),
            SoundEnum::BlockMangroveRootsStep => f.write_str("BLOCK_MANGROVE_ROOTS_STEP"),
            SoundEnum::BlockMediumAmethystBudBreak => {
                f.write_str("BLOCK_MEDIUM_AMETHYST_BUD_BREAK")
            }
            SoundEnum::BlockMediumAmethystBudPlace => {
                f.write_str("BLOCK_MEDIUM_AMETHYST_BUD_PLACE")
            }
            SoundEnum::BlockMetalBreak => f.write_str("BLOCK_METAL_BREAK"),
            SoundEnum::BlockMetalFall => f.write_str("BLOCK_METAL_FALL"),
            SoundEnum::BlockMetalHit => f.write_str("BLOCK_METAL_HIT"),
            SoundEnum::BlockMetalPlace => f.write_str("BLOCK_METAL_PLACE"),
            SoundEnum::BlockMetalPressurePlateClickOff => {
                f.write_str("BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockMetalPressurePlateClickOn => {
                f.write_str("BLOCK_METAL_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockMetalStep => f.write_str("BLOCK_METAL_STEP"),
            SoundEnum::BlockMossBreak => f.write_str("BLOCK_MOSS_BREAK"),
            SoundEnum::BlockMossCarpetBreak => f.write_str("BLOCK_MOSS_CARPET_BREAK"),
            SoundEnum::BlockMossCarpetFall => f.write_str("BLOCK_MOSS_CARPET_FALL"),
            SoundEnum::BlockMossCarpetHit => f.write_str("BLOCK_MOSS_CARPET_HIT"),
            SoundEnum::BlockMossCarpetPlace => f.write_str("BLOCK_MOSS_CARPET_PLACE"),
            SoundEnum::BlockMossCarpetStep => f.write_str("BLOCK_MOSS_CARPET_STEP"),
            SoundEnum::BlockMossFall => f.write_str("BLOCK_MOSS_FALL"),
            SoundEnum::BlockMossHit => f.write_str("BLOCK_MOSS_HIT"),
            SoundEnum::BlockMossPlace => f.write_str("BLOCK_MOSS_PLACE"),
            SoundEnum::BlockMossStep => f.write_str("BLOCK_MOSS_STEP"),
            SoundEnum::BlockMuddyMangroveRootsBreak => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_BREAK")
            }
            SoundEnum::BlockMuddyMangroveRootsFall => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_FALL")
            }
            SoundEnum::BlockMuddyMangroveRootsHit => f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_HIT"),
            SoundEnum::BlockMuddyMangroveRootsPlace => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_PLACE")
            }
            SoundEnum::BlockMuddyMangroveRootsStep => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_STEP")
            }
            SoundEnum::BlockMudBreak => f.write_str("BLOCK_MUD_BREAK"),
            SoundEnum::BlockMudBricksBreak => f.write_str("BLOCK_MUD_BRICKS_BREAK"),
            SoundEnum::BlockMudBricksFall => f.write_str("BLOCK_MUD_BRICKS_FALL"),
            SoundEnum::BlockMudBricksHit => f.write_str("BLOCK_MUD_BRICKS_HIT"),
            SoundEnum::BlockMudBricksPlace => f.write_str("BLOCK_MUD_BRICKS_PLACE"),
            SoundEnum::BlockMudBricksStep => f.write_str("BLOCK_MUD_BRICKS_STEP"),
            SoundEnum::BlockMudFall => f.write_str("BLOCK_MUD_FALL"),
            SoundEnum::BlockMudHit => f.write_str("BLOCK_MUD_HIT"),
            SoundEnum::BlockMudPlace => f.write_str("BLOCK_MUD_PLACE"),
            SoundEnum::BlockMudStep => f.write_str("BLOCK_MUD_STEP"),
            SoundEnum::BlockNetheriteBlockBreak => f.write_str("BLOCK_NETHERITE_BLOCK_BREAK"),
            SoundEnum::BlockNetheriteBlockFall => f.write_str("BLOCK_NETHERITE_BLOCK_FALL"),
            SoundEnum::BlockNetheriteBlockHit => f.write_str("BLOCK_NETHERITE_BLOCK_HIT"),
            SoundEnum::BlockNetheriteBlockPlace => f.write_str("BLOCK_NETHERITE_BLOCK_PLACE"),
            SoundEnum::BlockNetheriteBlockStep => f.write_str("BLOCK_NETHERITE_BLOCK_STEP"),
            SoundEnum::BlockNetherrackBreak => f.write_str("BLOCK_NETHERRACK_BREAK"),
            SoundEnum::BlockNetherrackFall => f.write_str("BLOCK_NETHERRACK_FALL"),
            SoundEnum::BlockNetherrackHit => f.write_str("BLOCK_NETHERRACK_HIT"),
            SoundEnum::BlockNetherrackPlace => f.write_str("BLOCK_NETHERRACK_PLACE"),
            SoundEnum::BlockNetherrackStep => f.write_str("BLOCK_NETHERRACK_STEP"),
            SoundEnum::BlockNetherBricksBreak => f.write_str("BLOCK_NETHER_BRICKS_BREAK"),
            SoundEnum::BlockNetherBricksFall => f.write_str("BLOCK_NETHER_BRICKS_FALL"),
            SoundEnum::BlockNetherBricksHit => f.write_str("BLOCK_NETHER_BRICKS_HIT"),
            SoundEnum::BlockNetherBricksPlace => f.write_str("BLOCK_NETHER_BRICKS_PLACE"),
            SoundEnum::BlockNetherBricksStep => f.write_str("BLOCK_NETHER_BRICKS_STEP"),
            SoundEnum::BlockNetherGoldOreBreak => f.write_str("BLOCK_NETHER_GOLD_ORE_BREAK"),
            SoundEnum::BlockNetherGoldOreFall => f.write_str("BLOCK_NETHER_GOLD_ORE_FALL"),
            SoundEnum::BlockNetherGoldOreHit => f.write_str("BLOCK_NETHER_GOLD_ORE_HIT"),
            SoundEnum::BlockNetherGoldOrePlace => f.write_str("BLOCK_NETHER_GOLD_ORE_PLACE"),
            SoundEnum::BlockNetherGoldOreStep => f.write_str("BLOCK_NETHER_GOLD_ORE_STEP"),
            SoundEnum::BlockNetherOreBreak => f.write_str("BLOCK_NETHER_ORE_BREAK"),
            SoundEnum::BlockNetherOreFall => f.write_str("BLOCK_NETHER_ORE_FALL"),
            SoundEnum::BlockNetherOreHit => f.write_str("BLOCK_NETHER_ORE_HIT"),
            SoundEnum::BlockNetherOrePlace => f.write_str("BLOCK_NETHER_ORE_PLACE"),
            SoundEnum::BlockNetherOreStep => f.write_str("BLOCK_NETHER_ORE_STEP"),
            SoundEnum::BlockNetherSproutsBreak => f.write_str("BLOCK_NETHER_SPROUTS_BREAK"),
            SoundEnum::BlockNetherSproutsFall => f.write_str("BLOCK_NETHER_SPROUTS_FALL"),
            SoundEnum::BlockNetherSproutsHit => f.write_str("BLOCK_NETHER_SPROUTS_HIT"),
            SoundEnum::BlockNetherSproutsPlace => f.write_str("BLOCK_NETHER_SPROUTS_PLACE"),
            SoundEnum::BlockNetherSproutsStep => f.write_str("BLOCK_NETHER_SPROUTS_STEP"),
            SoundEnum::BlockNetherWartBreak => f.write_str("BLOCK_NETHER_WART_BREAK"),
            SoundEnum::BlockNetherWoodBreak => f.write_str("BLOCK_NETHER_WOOD_BREAK"),
            SoundEnum::BlockNetherWoodButtonClickOff => {
                f.write_str("BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF")
            }
            SoundEnum::BlockNetherWoodButtonClickOn => {
                f.write_str("BLOCK_NETHER_WOOD_BUTTON_CLICK_ON")
            }
            SoundEnum::BlockNetherWoodDoorClose => f.write_str("BLOCK_NETHER_WOOD_DOOR_CLOSE"),
            SoundEnum::BlockNetherWoodDoorOpen => f.write_str("BLOCK_NETHER_WOOD_DOOR_OPEN"),
            SoundEnum::BlockNetherWoodFall => f.write_str("BLOCK_NETHER_WOOD_FALL"),
            SoundEnum::BlockNetherWoodFenceGateClose => {
                f.write_str("BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE")
            }
            SoundEnum::BlockNetherWoodFenceGateOpen => {
                f.write_str("BLOCK_NETHER_WOOD_FENCE_GATE_OPEN")
            }
            SoundEnum::BlockNetherWoodHangingSignBreak => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK")
            }
            SoundEnum::BlockNetherWoodHangingSignFall => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_FALL")
            }
            SoundEnum::BlockNetherWoodHangingSignHit => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_HIT")
            }
            SoundEnum::BlockNetherWoodHangingSignPlace => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE")
            }
            SoundEnum::BlockNetherWoodHangingSignStep => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_STEP")
            }
            SoundEnum::BlockNetherWoodHit => f.write_str("BLOCK_NETHER_WOOD_HIT"),
            SoundEnum::BlockNetherWoodPlace => f.write_str("BLOCK_NETHER_WOOD_PLACE"),
            SoundEnum::BlockNetherWoodPressurePlateClickOff => {
                f.write_str("BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockNetherWoodPressurePlateClickOn => {
                f.write_str("BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockNetherWoodStep => f.write_str("BLOCK_NETHER_WOOD_STEP"),
            SoundEnum::BlockNetherWoodTrapdoorClose => {
                f.write_str("BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE")
            }
            SoundEnum::BlockNetherWoodTrapdoorOpen => {
                f.write_str("BLOCK_NETHER_WOOD_TRAPDOOR_OPEN")
            }
            SoundEnum::BlockNoteBlockBanjo => f.write_str("BLOCK_NOTE_BLOCK_BANJO"),
            SoundEnum::BlockNoteBlockBasedrum => f.write_str("BLOCK_NOTE_BLOCK_BASEDRUM"),
            SoundEnum::BlockNoteBlockBass => f.write_str("BLOCK_NOTE_BLOCK_BASS"),
            SoundEnum::BlockNoteBlockBell => f.write_str("BLOCK_NOTE_BLOCK_BELL"),
            SoundEnum::BlockNoteBlockBit => f.write_str("BLOCK_NOTE_BLOCK_BIT"),
            SoundEnum::BlockNoteBlockChime => f.write_str("BLOCK_NOTE_BLOCK_CHIME"),
            SoundEnum::BlockNoteBlockCowBell => f.write_str("BLOCK_NOTE_BLOCK_COW_BELL"),
            SoundEnum::BlockNoteBlockDidgeridoo => f.write_str("BLOCK_NOTE_BLOCK_DIDGERIDOO"),
            SoundEnum::BlockNoteBlockFlute => f.write_str("BLOCK_NOTE_BLOCK_FLUTE"),
            SoundEnum::BlockNoteBlockGuitar => f.write_str("BLOCK_NOTE_BLOCK_GUITAR"),
            SoundEnum::BlockNoteBlockHarp => f.write_str("BLOCK_NOTE_BLOCK_HARP"),
            SoundEnum::BlockNoteBlockHat => f.write_str("BLOCK_NOTE_BLOCK_HAT"),
            SoundEnum::BlockNoteBlockImitateCreeper => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_CREEPER")
            }
            SoundEnum::BlockNoteBlockImitateEnderDragon => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON")
            }
            SoundEnum::BlockNoteBlockImitatePiglin => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_PIGLIN")
            }
            SoundEnum::BlockNoteBlockImitateSkeleton => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_SKELETON")
            }
            SoundEnum::BlockNoteBlockImitateWitherSkeleton => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON")
            }
            SoundEnum::BlockNoteBlockImitateZombie => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE")
            }
            SoundEnum::BlockNoteBlockIronXylophone => {
                f.write_str("BLOCK_NOTE_BLOCK_IRON_XYLOPHONE")
            }
            SoundEnum::BlockNoteBlockPling => f.write_str("BLOCK_NOTE_BLOCK_PLING"),
            SoundEnum::BlockNoteBlockSnare => f.write_str("BLOCK_NOTE_BLOCK_SNARE"),
            SoundEnum::BlockNoteBlockXylophone => f.write_str("BLOCK_NOTE_BLOCK_XYLOPHONE"),
            SoundEnum::BlockNyliumBreak => f.write_str("BLOCK_NYLIUM_BREAK"),
            SoundEnum::BlockNyliumFall => f.write_str("BLOCK_NYLIUM_FALL"),
            SoundEnum::BlockNyliumHit => f.write_str("BLOCK_NYLIUM_HIT"),
            SoundEnum::BlockNyliumPlace => f.write_str("BLOCK_NYLIUM_PLACE"),
            SoundEnum::BlockNyliumStep => f.write_str("BLOCK_NYLIUM_STEP"),
            SoundEnum::BlockPackedMudBreak => f.write_str("BLOCK_PACKED_MUD_BREAK"),
            SoundEnum::BlockPackedMudFall => f.write_str("BLOCK_PACKED_MUD_FALL"),
            SoundEnum::BlockPackedMudHit => f.write_str("BLOCK_PACKED_MUD_HIT"),
            SoundEnum::BlockPackedMudPlace => f.write_str("BLOCK_PACKED_MUD_PLACE"),
            SoundEnum::BlockPackedMudStep => f.write_str("BLOCK_PACKED_MUD_STEP"),
            SoundEnum::BlockPinkPetalsBreak => f.write_str("BLOCK_PINK_PETALS_BREAK"),
            SoundEnum::BlockPinkPetalsFall => f.write_str("BLOCK_PINK_PETALS_FALL"),
            SoundEnum::BlockPinkPetalsHit => f.write_str("BLOCK_PINK_PETALS_HIT"),
            SoundEnum::BlockPinkPetalsPlace => f.write_str("BLOCK_PINK_PETALS_PLACE"),
            SoundEnum::BlockPinkPetalsStep => f.write_str("BLOCK_PINK_PETALS_STEP"),
            SoundEnum::BlockPistonContract => f.write_str("BLOCK_PISTON_CONTRACT"),
            SoundEnum::BlockPistonExtend => f.write_str("BLOCK_PISTON_EXTEND"),
            SoundEnum::BlockPointedDripstoneBreak => f.write_str("BLOCK_POINTED_DRIPSTONE_BREAK"),
            SoundEnum::BlockPointedDripstoneDripLava => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_LAVA")
            }
            SoundEnum::BlockPointedDripstoneDripLavaIntoCauldron => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON")
            }
            SoundEnum::BlockPointedDripstoneDripWater => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_WATER")
            }
            SoundEnum::BlockPointedDripstoneDripWaterIntoCauldron => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON")
            }
            SoundEnum::BlockPointedDripstoneFall => f.write_str("BLOCK_POINTED_DRIPSTONE_FALL"),
            SoundEnum::BlockPointedDripstoneHit => f.write_str("BLOCK_POINTED_DRIPSTONE_HIT"),
            SoundEnum::BlockPointedDripstoneLand => f.write_str("BLOCK_POINTED_DRIPSTONE_LAND"),
            SoundEnum::BlockPointedDripstonePlace => f.write_str("BLOCK_POINTED_DRIPSTONE_PLACE"),
            SoundEnum::BlockPointedDripstoneStep => f.write_str("BLOCK_POINTED_DRIPSTONE_STEP"),
            SoundEnum::BlockPolishedDeepslateBreak => f.write_str("BLOCK_POLISHED_DEEPSLATE_BREAK"),
            SoundEnum::BlockPolishedDeepslateFall => f.write_str("BLOCK_POLISHED_DEEPSLATE_FALL"),
            SoundEnum::BlockPolishedDeepslateHit => f.write_str("BLOCK_POLISHED_DEEPSLATE_HIT"),
            SoundEnum::BlockPolishedDeepslatePlace => f.write_str("BLOCK_POLISHED_DEEPSLATE_PLACE"),
            SoundEnum::BlockPolishedDeepslateStep => f.write_str("BLOCK_POLISHED_DEEPSLATE_STEP"),
            SoundEnum::BlockPortalAmbient => f.write_str("BLOCK_PORTAL_AMBIENT"),
            SoundEnum::BlockPortalTravel => f.write_str("BLOCK_PORTAL_TRAVEL"),
            SoundEnum::BlockPortalTrigger => f.write_str("BLOCK_PORTAL_TRIGGER"),
            SoundEnum::BlockPowderSnowBreak => f.write_str("BLOCK_POWDER_SNOW_BREAK"),
            SoundEnum::BlockPowderSnowFall => f.write_str("BLOCK_POWDER_SNOW_FALL"),
            SoundEnum::BlockPowderSnowHit => f.write_str("BLOCK_POWDER_SNOW_HIT"),
            SoundEnum::BlockPowderSnowPlace => f.write_str("BLOCK_POWDER_SNOW_PLACE"),
            SoundEnum::BlockPowderSnowStep => f.write_str("BLOCK_POWDER_SNOW_STEP"),
            SoundEnum::BlockPumpkinCarve => f.write_str("BLOCK_PUMPKIN_CARVE"),
            SoundEnum::BlockRedstoneTorchBurnout => f.write_str("BLOCK_REDSTONE_TORCH_BURNOUT"),
            SoundEnum::BlockRespawnAnchorAmbient => f.write_str("BLOCK_RESPAWN_ANCHOR_AMBIENT"),
            SoundEnum::BlockRespawnAnchorCharge => f.write_str("BLOCK_RESPAWN_ANCHOR_CHARGE"),
            SoundEnum::BlockRespawnAnchorDeplete => f.write_str("BLOCK_RESPAWN_ANCHOR_DEPLETE"),
            SoundEnum::BlockRespawnAnchorSetSpawn => f.write_str("BLOCK_RESPAWN_ANCHOR_SET_SPAWN"),
            SoundEnum::BlockRootedDirtBreak => f.write_str("BLOCK_ROOTED_DIRT_BREAK"),
            SoundEnum::BlockRootedDirtFall => f.write_str("BLOCK_ROOTED_DIRT_FALL"),
            SoundEnum::BlockRootedDirtHit => f.write_str("BLOCK_ROOTED_DIRT_HIT"),
            SoundEnum::BlockRootedDirtPlace => f.write_str("BLOCK_ROOTED_DIRT_PLACE"),
            SoundEnum::BlockRootedDirtStep => f.write_str("BLOCK_ROOTED_DIRT_STEP"),
            SoundEnum::BlockRootsBreak => f.write_str("BLOCK_ROOTS_BREAK"),
            SoundEnum::BlockRootsFall => f.write_str("BLOCK_ROOTS_FALL"),
            SoundEnum::BlockRootsHit => f.write_str("BLOCK_ROOTS_HIT"),
            SoundEnum::BlockRootsPlace => f.write_str("BLOCK_ROOTS_PLACE"),
            SoundEnum::BlockRootsStep => f.write_str("BLOCK_ROOTS_STEP"),
            SoundEnum::BlockSandBreak => f.write_str("BLOCK_SAND_BREAK"),
            SoundEnum::BlockSandFall => f.write_str("BLOCK_SAND_FALL"),
            SoundEnum::BlockSandHit => f.write_str("BLOCK_SAND_HIT"),
            SoundEnum::BlockSandPlace => f.write_str("BLOCK_SAND_PLACE"),
            SoundEnum::BlockSandStep => f.write_str("BLOCK_SAND_STEP"),
            SoundEnum::BlockScaffoldingBreak => f.write_str("BLOCK_SCAFFOLDING_BREAK"),
            SoundEnum::BlockScaffoldingFall => f.write_str("BLOCK_SCAFFOLDING_FALL"),
            SoundEnum::BlockScaffoldingHit => f.write_str("BLOCK_SCAFFOLDING_HIT"),
            SoundEnum::BlockScaffoldingPlace => f.write_str("BLOCK_SCAFFOLDING_PLACE"),
            SoundEnum::BlockScaffoldingStep => f.write_str("BLOCK_SCAFFOLDING_STEP"),
            SoundEnum::BlockSculkBreak => f.write_str("BLOCK_SCULK_BREAK"),
            SoundEnum::BlockSculkCatalystBloom => f.write_str("BLOCK_SCULK_CATALYST_BLOOM"),
            SoundEnum::BlockSculkCatalystBreak => f.write_str("BLOCK_SCULK_CATALYST_BREAK"),
            SoundEnum::BlockSculkCatalystFall => f.write_str("BLOCK_SCULK_CATALYST_FALL"),
            SoundEnum::BlockSculkCatalystHit => f.write_str("BLOCK_SCULK_CATALYST_HIT"),
            SoundEnum::BlockSculkCatalystPlace => f.write_str("BLOCK_SCULK_CATALYST_PLACE"),
            SoundEnum::BlockSculkCatalystStep => f.write_str("BLOCK_SCULK_CATALYST_STEP"),
            SoundEnum::BlockSculkCharge => f.write_str("BLOCK_SCULK_CHARGE"),
            SoundEnum::BlockSculkFall => f.write_str("BLOCK_SCULK_FALL"),
            SoundEnum::BlockSculkHit => f.write_str("BLOCK_SCULK_HIT"),
            SoundEnum::BlockSculkPlace => f.write_str("BLOCK_SCULK_PLACE"),
            SoundEnum::BlockSculkSensorBreak => f.write_str("BLOCK_SCULK_SENSOR_BREAK"),
            SoundEnum::BlockSculkSensorClicking => f.write_str("BLOCK_SCULK_SENSOR_CLICKING"),
            SoundEnum::BlockSculkSensorClickingStop => {
                f.write_str("BLOCK_SCULK_SENSOR_CLICKING_STOP")
            }
            SoundEnum::BlockSculkSensorFall => f.write_str("BLOCK_SCULK_SENSOR_FALL"),
            SoundEnum::BlockSculkSensorHit => f.write_str("BLOCK_SCULK_SENSOR_HIT"),
            SoundEnum::BlockSculkSensorPlace => f.write_str("BLOCK_SCULK_SENSOR_PLACE"),
            SoundEnum::BlockSculkSensorStep => f.write_str("BLOCK_SCULK_SENSOR_STEP"),
            SoundEnum::BlockSculkShriekerBreak => f.write_str("BLOCK_SCULK_SHRIEKER_BREAK"),
            SoundEnum::BlockSculkShriekerFall => f.write_str("BLOCK_SCULK_SHRIEKER_FALL"),
            SoundEnum::BlockSculkShriekerHit => f.write_str("BLOCK_SCULK_SHRIEKER_HIT"),
            SoundEnum::BlockSculkShriekerPlace => f.write_str("BLOCK_SCULK_SHRIEKER_PLACE"),
            SoundEnum::BlockSculkShriekerShriek => f.write_str("BLOCK_SCULK_SHRIEKER_SHRIEK"),
            SoundEnum::BlockSculkShriekerStep => f.write_str("BLOCK_SCULK_SHRIEKER_STEP"),
            SoundEnum::BlockSculkSpread => f.write_str("BLOCK_SCULK_SPREAD"),
            SoundEnum::BlockSculkStep => f.write_str("BLOCK_SCULK_STEP"),
            SoundEnum::BlockSculkVeinBreak => f.write_str("BLOCK_SCULK_VEIN_BREAK"),
            SoundEnum::BlockSculkVeinFall => f.write_str("BLOCK_SCULK_VEIN_FALL"),
            SoundEnum::BlockSculkVeinHit => f.write_str("BLOCK_SCULK_VEIN_HIT"),
            SoundEnum::BlockSculkVeinPlace => f.write_str("BLOCK_SCULK_VEIN_PLACE"),
            SoundEnum::BlockSculkVeinStep => f.write_str("BLOCK_SCULK_VEIN_STEP"),
            SoundEnum::BlockShroomlightBreak => f.write_str("BLOCK_SHROOMLIGHT_BREAK"),
            SoundEnum::BlockShroomlightFall => f.write_str("BLOCK_SHROOMLIGHT_FALL"),
            SoundEnum::BlockShroomlightHit => f.write_str("BLOCK_SHROOMLIGHT_HIT"),
            SoundEnum::BlockShroomlightPlace => f.write_str("BLOCK_SHROOMLIGHT_PLACE"),
            SoundEnum::BlockShroomlightStep => f.write_str("BLOCK_SHROOMLIGHT_STEP"),
            SoundEnum::BlockShulkerBoxClose => f.write_str("BLOCK_SHULKER_BOX_CLOSE"),
            SoundEnum::BlockShulkerBoxOpen => f.write_str("BLOCK_SHULKER_BOX_OPEN"),
            SoundEnum::BlockSignWaxedInteractFail => f.write_str("BLOCK_SIGN_WAXED_INTERACT_FAIL"),
            SoundEnum::BlockSlimeBlockBreak => f.write_str("BLOCK_SLIME_BLOCK_BREAK"),
            SoundEnum::BlockSlimeBlockFall => f.write_str("BLOCK_SLIME_BLOCK_FALL"),
            SoundEnum::BlockSlimeBlockHit => f.write_str("BLOCK_SLIME_BLOCK_HIT"),
            SoundEnum::BlockSlimeBlockPlace => f.write_str("BLOCK_SLIME_BLOCK_PLACE"),
            SoundEnum::BlockSlimeBlockStep => f.write_str("BLOCK_SLIME_BLOCK_STEP"),
            SoundEnum::BlockSmallAmethystBudBreak => f.write_str("BLOCK_SMALL_AMETHYST_BUD_BREAK"),
            SoundEnum::BlockSmallAmethystBudPlace => f.write_str("BLOCK_SMALL_AMETHYST_BUD_PLACE"),
            SoundEnum::BlockSmallDripleafBreak => f.write_str("BLOCK_SMALL_DRIPLEAF_BREAK"),
            SoundEnum::BlockSmallDripleafFall => f.write_str("BLOCK_SMALL_DRIPLEAF_FALL"),
            SoundEnum::BlockSmallDripleafHit => f.write_str("BLOCK_SMALL_DRIPLEAF_HIT"),
            SoundEnum::BlockSmallDripleafPlace => f.write_str("BLOCK_SMALL_DRIPLEAF_PLACE"),
            SoundEnum::BlockSmallDripleafStep => f.write_str("BLOCK_SMALL_DRIPLEAF_STEP"),
            SoundEnum::BlockSmithingTableUse => f.write_str("BLOCK_SMITHING_TABLE_USE"),
            SoundEnum::BlockSmokerSmoke => f.write_str("BLOCK_SMOKER_SMOKE"),
            SoundEnum::BlockSnifferEggCrack => f.write_str("BLOCK_SNIFFER_EGG_CRACK"),
            SoundEnum::BlockSnifferEggHatch => f.write_str("BLOCK_SNIFFER_EGG_HATCH"),
            SoundEnum::BlockSnifferEggPlop => f.write_str("BLOCK_SNIFFER_EGG_PLOP"),
            SoundEnum::BlockSnowBreak => f.write_str("BLOCK_SNOW_BREAK"),
            SoundEnum::BlockSnowFall => f.write_str("BLOCK_SNOW_FALL"),
            SoundEnum::BlockSnowHit => f.write_str("BLOCK_SNOW_HIT"),
            SoundEnum::BlockSnowPlace => f.write_str("BLOCK_SNOW_PLACE"),
            SoundEnum::BlockSnowStep => f.write_str("BLOCK_SNOW_STEP"),
            SoundEnum::BlockSoulSandBreak => f.write_str("BLOCK_SOUL_SAND_BREAK"),
            SoundEnum::BlockSoulSandFall => f.write_str("BLOCK_SOUL_SAND_FALL"),
            SoundEnum::BlockSoulSandHit => f.write_str("BLOCK_SOUL_SAND_HIT"),
            SoundEnum::BlockSoulSandPlace => f.write_str("BLOCK_SOUL_SAND_PLACE"),
            SoundEnum::BlockSoulSandStep => f.write_str("BLOCK_SOUL_SAND_STEP"),
            SoundEnum::BlockSoulSoilBreak => f.write_str("BLOCK_SOUL_SOIL_BREAK"),
            SoundEnum::BlockSoulSoilFall => f.write_str("BLOCK_SOUL_SOIL_FALL"),
            SoundEnum::BlockSoulSoilHit => f.write_str("BLOCK_SOUL_SOIL_HIT"),
            SoundEnum::BlockSoulSoilPlace => f.write_str("BLOCK_SOUL_SOIL_PLACE"),
            SoundEnum::BlockSoulSoilStep => f.write_str("BLOCK_SOUL_SOIL_STEP"),
            SoundEnum::BlockSporeBlossomBreak => f.write_str("BLOCK_SPORE_BLOSSOM_BREAK"),
            SoundEnum::BlockSporeBlossomFall => f.write_str("BLOCK_SPORE_BLOSSOM_FALL"),
            SoundEnum::BlockSporeBlossomHit => f.write_str("BLOCK_SPORE_BLOSSOM_HIT"),
            SoundEnum::BlockSporeBlossomPlace => f.write_str("BLOCK_SPORE_BLOSSOM_PLACE"),
            SoundEnum::BlockSporeBlossomStep => f.write_str("BLOCK_SPORE_BLOSSOM_STEP"),
            SoundEnum::BlockStemBreak => f.write_str("BLOCK_STEM_BREAK"),
            SoundEnum::BlockStemFall => f.write_str("BLOCK_STEM_FALL"),
            SoundEnum::BlockStemHit => f.write_str("BLOCK_STEM_HIT"),
            SoundEnum::BlockStemPlace => f.write_str("BLOCK_STEM_PLACE"),
            SoundEnum::BlockStemStep => f.write_str("BLOCK_STEM_STEP"),
            SoundEnum::BlockStoneBreak => f.write_str("BLOCK_STONE_BREAK"),
            SoundEnum::BlockStoneButtonClickOff => f.write_str("BLOCK_STONE_BUTTON_CLICK_OFF"),
            SoundEnum::BlockStoneButtonClickOn => f.write_str("BLOCK_STONE_BUTTON_CLICK_ON"),
            SoundEnum::BlockStoneFall => f.write_str("BLOCK_STONE_FALL"),
            SoundEnum::BlockStoneHit => f.write_str("BLOCK_STONE_HIT"),
            SoundEnum::BlockStonePlace => f.write_str("BLOCK_STONE_PLACE"),
            SoundEnum::BlockStonePressurePlateClickOff => {
                f.write_str("BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockStonePressurePlateClickOn => {
                f.write_str("BLOCK_STONE_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockStoneStep => f.write_str("BLOCK_STONE_STEP"),
            SoundEnum::BlockSuspiciousGravelBreak => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_BREAK"),
            SoundEnum::BlockSuspiciousGravelFall => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_FALL"),
            SoundEnum::BlockSuspiciousGravelHit => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_HIT"),
            SoundEnum::BlockSuspiciousGravelPlace => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_PLACE"),
            SoundEnum::BlockSuspiciousGravelStep => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_STEP"),
            SoundEnum::BlockSuspiciousSandBreak => f.write_str("BLOCK_SUSPICIOUS_SAND_BREAK"),
            SoundEnum::BlockSuspiciousSandFall => f.write_str("BLOCK_SUSPICIOUS_SAND_FALL"),
            SoundEnum::BlockSuspiciousSandHit => f.write_str("BLOCK_SUSPICIOUS_SAND_HIT"),
            SoundEnum::BlockSuspiciousSandPlace => f.write_str("BLOCK_SUSPICIOUS_SAND_PLACE"),
            SoundEnum::BlockSuspiciousSandStep => f.write_str("BLOCK_SUSPICIOUS_SAND_STEP"),
            SoundEnum::BlockSweetBerryBushBreak => f.write_str("BLOCK_SWEET_BERRY_BUSH_BREAK"),
            SoundEnum::BlockSweetBerryBushPickBerries => {
                f.write_str("BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES")
            }
            SoundEnum::BlockSweetBerryBushPlace => f.write_str("BLOCK_SWEET_BERRY_BUSH_PLACE"),
            SoundEnum::BlockTripwireAttach => f.write_str("BLOCK_TRIPWIRE_ATTACH"),
            SoundEnum::BlockTripwireClickOff => f.write_str("BLOCK_TRIPWIRE_CLICK_OFF"),
            SoundEnum::BlockTripwireClickOn => f.write_str("BLOCK_TRIPWIRE_CLICK_ON"),
            SoundEnum::BlockTripwireDetach => f.write_str("BLOCK_TRIPWIRE_DETACH"),
            SoundEnum::BlockTuffBreak => f.write_str("BLOCK_TUFF_BREAK"),
            SoundEnum::BlockTuffFall => f.write_str("BLOCK_TUFF_FALL"),
            SoundEnum::BlockTuffHit => f.write_str("BLOCK_TUFF_HIT"),
            SoundEnum::BlockTuffPlace => f.write_str("BLOCK_TUFF_PLACE"),
            SoundEnum::BlockTuffStep => f.write_str("BLOCK_TUFF_STEP"),
            SoundEnum::BlockVineBreak => f.write_str("BLOCK_VINE_BREAK"),
            SoundEnum::BlockVineFall => f.write_str("BLOCK_VINE_FALL"),
            SoundEnum::BlockVineHit => f.write_str("BLOCK_VINE_HIT"),
            SoundEnum::BlockVinePlace => f.write_str("BLOCK_VINE_PLACE"),
            SoundEnum::BlockVineStep => f.write_str("BLOCK_VINE_STEP"),
            SoundEnum::BlockWartBlockBreak => f.write_str("BLOCK_WART_BLOCK_BREAK"),
            SoundEnum::BlockWartBlockFall => f.write_str("BLOCK_WART_BLOCK_FALL"),
            SoundEnum::BlockWartBlockHit => f.write_str("BLOCK_WART_BLOCK_HIT"),
            SoundEnum::BlockWartBlockPlace => f.write_str("BLOCK_WART_BLOCK_PLACE"),
            SoundEnum::BlockWartBlockStep => f.write_str("BLOCK_WART_BLOCK_STEP"),
            SoundEnum::BlockWaterAmbient => f.write_str("BLOCK_WATER_AMBIENT"),
            SoundEnum::BlockWeepingVinesBreak => f.write_str("BLOCK_WEEPING_VINES_BREAK"),
            SoundEnum::BlockWeepingVinesFall => f.write_str("BLOCK_WEEPING_VINES_FALL"),
            SoundEnum::BlockWeepingVinesHit => f.write_str("BLOCK_WEEPING_VINES_HIT"),
            SoundEnum::BlockWeepingVinesPlace => f.write_str("BLOCK_WEEPING_VINES_PLACE"),
            SoundEnum::BlockWeepingVinesStep => f.write_str("BLOCK_WEEPING_VINES_STEP"),
            SoundEnum::BlockWetGrassBreak => f.write_str("BLOCK_WET_GRASS_BREAK"),
            SoundEnum::BlockWetGrassFall => f.write_str("BLOCK_WET_GRASS_FALL"),
            SoundEnum::BlockWetGrassHit => f.write_str("BLOCK_WET_GRASS_HIT"),
            SoundEnum::BlockWetGrassPlace => f.write_str("BLOCK_WET_GRASS_PLACE"),
            SoundEnum::BlockWetGrassStep => f.write_str("BLOCK_WET_GRASS_STEP"),
            SoundEnum::BlockWoodenButtonClickOff => f.write_str("BLOCK_WOODEN_BUTTON_CLICK_OFF"),
            SoundEnum::BlockWoodenButtonClickOn => f.write_str("BLOCK_WOODEN_BUTTON_CLICK_ON"),
            SoundEnum::BlockWoodenDoorClose => f.write_str("BLOCK_WOODEN_DOOR_CLOSE"),
            SoundEnum::BlockWoodenDoorOpen => f.write_str("BLOCK_WOODEN_DOOR_OPEN"),
            SoundEnum::BlockWoodenPressurePlateClickOff => {
                f.write_str("BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockWoodenPressurePlateClickOn => {
                f.write_str("BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockWoodenTrapdoorClose => f.write_str("BLOCK_WOODEN_TRAPDOOR_CLOSE"),
            SoundEnum::BlockWoodenTrapdoorOpen => f.write_str("BLOCK_WOODEN_TRAPDOOR_OPEN"),
            SoundEnum::BlockWoodBreak => f.write_str("BLOCK_WOOD_BREAK"),
            SoundEnum::BlockWoodFall => f.write_str("BLOCK_WOOD_FALL"),
            SoundEnum::BlockWoodHit => f.write_str("BLOCK_WOOD_HIT"),
            SoundEnum::BlockWoodPlace => f.write_str("BLOCK_WOOD_PLACE"),
            SoundEnum::BlockWoodStep => f.write_str("BLOCK_WOOD_STEP"),
            SoundEnum::BlockWoolBreak => f.write_str("BLOCK_WOOL_BREAK"),
            SoundEnum::BlockWoolFall => f.write_str("BLOCK_WOOL_FALL"),
            SoundEnum::BlockWoolHit => f.write_str("BLOCK_WOOL_HIT"),
            SoundEnum::BlockWoolPlace => f.write_str("BLOCK_WOOL_PLACE"),
            SoundEnum::BlockWoolStep => f.write_str("BLOCK_WOOL_STEP"),
            SoundEnum::EnchantThornsHit => f.write_str("ENCHANT_THORNS_HIT"),
            SoundEnum::EntityAllayAmbientWithoutItem => {
                f.write_str("ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM")
            }
            SoundEnum::EntityAllayAmbientWithItem => f.write_str("ENTITY_ALLAY_AMBIENT_WITH_ITEM"),
            SoundEnum::EntityAllayDeath => f.write_str("ENTITY_ALLAY_DEATH"),
            SoundEnum::EntityAllayHurt => f.write_str("ENTITY_ALLAY_HURT"),
            SoundEnum::EntityAllayItemGiven => f.write_str("ENTITY_ALLAY_ITEM_GIVEN"),
            SoundEnum::EntityAllayItemTaken => f.write_str("ENTITY_ALLAY_ITEM_TAKEN"),
            SoundEnum::EntityAllayItemThrown => f.write_str("ENTITY_ALLAY_ITEM_THROWN"),
            SoundEnum::EntityArmorStandBreak => f.write_str("ENTITY_ARMOR_STAND_BREAK"),
            SoundEnum::EntityArmorStandFall => f.write_str("ENTITY_ARMOR_STAND_FALL"),
            SoundEnum::EntityArmorStandHit => f.write_str("ENTITY_ARMOR_STAND_HIT"),
            SoundEnum::EntityArmorStandPlace => f.write_str("ENTITY_ARMOR_STAND_PLACE"),
            SoundEnum::EntityArrowHit => f.write_str("ENTITY_ARROW_HIT"),
            SoundEnum::EntityArrowHitPlayer => f.write_str("ENTITY_ARROW_HIT_PLAYER"),
            SoundEnum::EntityArrowShoot => f.write_str("ENTITY_ARROW_SHOOT"),
            SoundEnum::EntityAxolotlAttack => f.write_str("ENTITY_AXOLOTL_ATTACK"),
            SoundEnum::EntityAxolotlDeath => f.write_str("ENTITY_AXOLOTL_DEATH"),
            SoundEnum::EntityAxolotlHurt => f.write_str("ENTITY_AXOLOTL_HURT"),
            SoundEnum::EntityAxolotlIdleAir => f.write_str("ENTITY_AXOLOTL_IDLE_AIR"),
            SoundEnum::EntityAxolotlIdleWater => f.write_str("ENTITY_AXOLOTL_IDLE_WATER"),
            SoundEnum::EntityAxolotlSplash => f.write_str("ENTITY_AXOLOTL_SPLASH"),
            SoundEnum::EntityAxolotlSwim => f.write_str("ENTITY_AXOLOTL_SWIM"),
            SoundEnum::EntityBatAmbient => f.write_str("ENTITY_BAT_AMBIENT"),
            SoundEnum::EntityBatDeath => f.write_str("ENTITY_BAT_DEATH"),
            SoundEnum::EntityBatHurt => f.write_str("ENTITY_BAT_HURT"),
            SoundEnum::EntityBatLoop => f.write_str("ENTITY_BAT_LOOP"),
            SoundEnum::EntityBatTakeoff => f.write_str("ENTITY_BAT_TAKEOFF"),
            SoundEnum::EntityBeeDeath => f.write_str("ENTITY_BEE_DEATH"),
            SoundEnum::EntityBeeHurt => f.write_str("ENTITY_BEE_HURT"),
            SoundEnum::EntityBeeLoop => f.write_str("ENTITY_BEE_LOOP"),
            SoundEnum::EntityBeeLoopAggressive => f.write_str("ENTITY_BEE_LOOP_AGGRESSIVE"),
            SoundEnum::EntityBeePollinate => f.write_str("ENTITY_BEE_POLLINATE"),
            SoundEnum::EntityBeeSting => f.write_str("ENTITY_BEE_STING"),
            SoundEnum::EntityBlazeAmbient => f.write_str("ENTITY_BLAZE_AMBIENT"),
            SoundEnum::EntityBlazeBurn => f.write_str("ENTITY_BLAZE_BURN"),
            SoundEnum::EntityBlazeDeath => f.write_str("ENTITY_BLAZE_DEATH"),
            SoundEnum::EntityBlazeHurt => f.write_str("ENTITY_BLAZE_HURT"),
            SoundEnum::EntityBlazeShoot => f.write_str("ENTITY_BLAZE_SHOOT"),
            SoundEnum::EntityBoatPaddleLand => f.write_str("ENTITY_BOAT_PADDLE_LAND"),
            SoundEnum::EntityBoatPaddleWater => f.write_str("ENTITY_BOAT_PADDLE_WATER"),
            SoundEnum::EntityCamelAmbient => f.write_str("ENTITY_CAMEL_AMBIENT"),
            SoundEnum::EntityCamelDash => f.write_str("ENTITY_CAMEL_DASH"),
            SoundEnum::EntityCamelDashReady => f.write_str("ENTITY_CAMEL_DASH_READY"),
            SoundEnum::EntityCamelDeath => f.write_str("ENTITY_CAMEL_DEATH"),
            SoundEnum::EntityCamelEat => f.write_str("ENTITY_CAMEL_EAT"),
            SoundEnum::EntityCamelHurt => f.write_str("ENTITY_CAMEL_HURT"),
            SoundEnum::EntityCamelSaddle => f.write_str("ENTITY_CAMEL_SADDLE"),
            SoundEnum::EntityCamelSit => f.write_str("ENTITY_CAMEL_SIT"),
            SoundEnum::EntityCamelStand => f.write_str("ENTITY_CAMEL_STAND"),
            SoundEnum::EntityCamelStep => f.write_str("ENTITY_CAMEL_STEP"),
            SoundEnum::EntityCamelStepSand => f.write_str("ENTITY_CAMEL_STEP_SAND"),
            SoundEnum::EntityCatAmbient => f.write_str("ENTITY_CAT_AMBIENT"),
            SoundEnum::EntityCatBegForFood => f.write_str("ENTITY_CAT_BEG_FOR_FOOD"),
            SoundEnum::EntityCatDeath => f.write_str("ENTITY_CAT_DEATH"),
            SoundEnum::EntityCatEat => f.write_str("ENTITY_CAT_EAT"),
            SoundEnum::EntityCatHiss => f.write_str("ENTITY_CAT_HISS"),
            SoundEnum::EntityCatHurt => f.write_str("ENTITY_CAT_HURT"),
            SoundEnum::EntityCatPurr => f.write_str("ENTITY_CAT_PURR"),
            SoundEnum::EntityCatPurreow => f.write_str("ENTITY_CAT_PURREOW"),
            SoundEnum::EntityCatStrayAmbient => f.write_str("ENTITY_CAT_STRAY_AMBIENT"),
            SoundEnum::EntityChickenAmbient => f.write_str("ENTITY_CHICKEN_AMBIENT"),
            SoundEnum::EntityChickenDeath => f.write_str("ENTITY_CHICKEN_DEATH"),
            SoundEnum::EntityChickenEgg => f.write_str("ENTITY_CHICKEN_EGG"),
            SoundEnum::EntityChickenHurt => f.write_str("ENTITY_CHICKEN_HURT"),
            SoundEnum::EntityChickenStep => f.write_str("ENTITY_CHICKEN_STEP"),
            SoundEnum::EntityCodAmbient => f.write_str("ENTITY_COD_AMBIENT"),
            SoundEnum::EntityCodDeath => f.write_str("ENTITY_COD_DEATH"),
            SoundEnum::EntityCodFlop => f.write_str("ENTITY_COD_FLOP"),
            SoundEnum::EntityCodHurt => f.write_str("ENTITY_COD_HURT"),
            SoundEnum::EntityCowAmbient => f.write_str("ENTITY_COW_AMBIENT"),
            SoundEnum::EntityCowDeath => f.write_str("ENTITY_COW_DEATH"),
            SoundEnum::EntityCowHurt => f.write_str("ENTITY_COW_HURT"),
            SoundEnum::EntityCowMilk => f.write_str("ENTITY_COW_MILK"),
            SoundEnum::EntityCowStep => f.write_str("ENTITY_COW_STEP"),
            SoundEnum::EntityCreeperDeath => f.write_str("ENTITY_CREEPER_DEATH"),
            SoundEnum::EntityCreeperHurt => f.write_str("ENTITY_CREEPER_HURT"),
            SoundEnum::EntityCreeperPrimed => f.write_str("ENTITY_CREEPER_PRIMED"),
            SoundEnum::EntityDolphinAmbient => f.write_str("ENTITY_DOLPHIN_AMBIENT"),
            SoundEnum::EntityDolphinAmbientWater => f.write_str("ENTITY_DOLPHIN_AMBIENT_WATER"),
            SoundEnum::EntityDolphinAttack => f.write_str("ENTITY_DOLPHIN_ATTACK"),
            SoundEnum::EntityDolphinDeath => f.write_str("ENTITY_DOLPHIN_DEATH"),
            SoundEnum::EntityDolphinEat => f.write_str("ENTITY_DOLPHIN_EAT"),
            SoundEnum::EntityDolphinHurt => f.write_str("ENTITY_DOLPHIN_HURT"),
            SoundEnum::EntityDolphinJump => f.write_str("ENTITY_DOLPHIN_JUMP"),
            SoundEnum::EntityDolphinPlay => f.write_str("ENTITY_DOLPHIN_PLAY"),
            SoundEnum::EntityDolphinSplash => f.write_str("ENTITY_DOLPHIN_SPLASH"),
            SoundEnum::EntityDolphinSwim => f.write_str("ENTITY_DOLPHIN_SWIM"),
            SoundEnum::EntityDonkeyAmbient => f.write_str("ENTITY_DONKEY_AMBIENT"),
            SoundEnum::EntityDonkeyAngry => f.write_str("ENTITY_DONKEY_ANGRY"),
            SoundEnum::EntityDonkeyChest => f.write_str("ENTITY_DONKEY_CHEST"),
            SoundEnum::EntityDonkeyDeath => f.write_str("ENTITY_DONKEY_DEATH"),
            SoundEnum::EntityDonkeyEat => f.write_str("ENTITY_DONKEY_EAT"),
            SoundEnum::EntityDonkeyHurt => f.write_str("ENTITY_DONKEY_HURT"),
            SoundEnum::EntityDragonFireballExplode => f.write_str("ENTITY_DRAGON_FIREBALL_EXPLODE"),
            SoundEnum::EntityDrownedAmbient => f.write_str("ENTITY_DROWNED_AMBIENT"),
            SoundEnum::EntityDrownedAmbientWater => f.write_str("ENTITY_DROWNED_AMBIENT_WATER"),
            SoundEnum::EntityDrownedDeath => f.write_str("ENTITY_DROWNED_DEATH"),
            SoundEnum::EntityDrownedDeathWater => f.write_str("ENTITY_DROWNED_DEATH_WATER"),
            SoundEnum::EntityDrownedHurt => f.write_str("ENTITY_DROWNED_HURT"),
            SoundEnum::EntityDrownedHurtWater => f.write_str("ENTITY_DROWNED_HURT_WATER"),
            SoundEnum::EntityDrownedShoot => f.write_str("ENTITY_DROWNED_SHOOT"),
            SoundEnum::EntityDrownedStep => f.write_str("ENTITY_DROWNED_STEP"),
            SoundEnum::EntityDrownedSwim => f.write_str("ENTITY_DROWNED_SWIM"),
            SoundEnum::EntityEggThrow => f.write_str("ENTITY_EGG_THROW"),
            SoundEnum::EntityElderGuardianAmbient => f.write_str("ENTITY_ELDER_GUARDIAN_AMBIENT"),
            SoundEnum::EntityElderGuardianAmbientLand => {
                f.write_str("ENTITY_ELDER_GUARDIAN_AMBIENT_LAND")
            }
            SoundEnum::EntityElderGuardianCurse => f.write_str("ENTITY_ELDER_GUARDIAN_CURSE"),
            SoundEnum::EntityElderGuardianDeath => f.write_str("ENTITY_ELDER_GUARDIAN_DEATH"),
            SoundEnum::EntityElderGuardianDeathLand => {
                f.write_str("ENTITY_ELDER_GUARDIAN_DEATH_LAND")
            }
            SoundEnum::EntityElderGuardianFlop => f.write_str("ENTITY_ELDER_GUARDIAN_FLOP"),
            SoundEnum::EntityElderGuardianHurt => f.write_str("ENTITY_ELDER_GUARDIAN_HURT"),
            SoundEnum::EntityElderGuardianHurtLand => {
                f.write_str("ENTITY_ELDER_GUARDIAN_HURT_LAND")
            }
            SoundEnum::EntityEndermanAmbient => f.write_str("ENTITY_ENDERMAN_AMBIENT"),
            SoundEnum::EntityEndermanDeath => f.write_str("ENTITY_ENDERMAN_DEATH"),
            SoundEnum::EntityEndermanHurt => f.write_str("ENTITY_ENDERMAN_HURT"),
            SoundEnum::EntityEndermanScream => f.write_str("ENTITY_ENDERMAN_SCREAM"),
            SoundEnum::EntityEndermanStare => f.write_str("ENTITY_ENDERMAN_STARE"),
            SoundEnum::EntityEndermanTeleport => f.write_str("ENTITY_ENDERMAN_TELEPORT"),
            SoundEnum::EntityEndermiteAmbient => f.write_str("ENTITY_ENDERMITE_AMBIENT"),
            SoundEnum::EntityEndermiteDeath => f.write_str("ENTITY_ENDERMITE_DEATH"),
            SoundEnum::EntityEndermiteHurt => f.write_str("ENTITY_ENDERMITE_HURT"),
            SoundEnum::EntityEndermiteStep => f.write_str("ENTITY_ENDERMITE_STEP"),
            SoundEnum::EntityEnderDragonAmbient => f.write_str("ENTITY_ENDER_DRAGON_AMBIENT"),
            SoundEnum::EntityEnderDragonDeath => f.write_str("ENTITY_ENDER_DRAGON_DEATH"),
            SoundEnum::EntityEnderDragonFlap => f.write_str("ENTITY_ENDER_DRAGON_FLAP"),
            SoundEnum::EntityEnderDragonGrowl => f.write_str("ENTITY_ENDER_DRAGON_GROWL"),
            SoundEnum::EntityEnderDragonHurt => f.write_str("ENTITY_ENDER_DRAGON_HURT"),
            SoundEnum::EntityEnderDragonShoot => f.write_str("ENTITY_ENDER_DRAGON_SHOOT"),
            SoundEnum::EntityEnderEyeDeath => f.write_str("ENTITY_ENDER_EYE_DEATH"),
            SoundEnum::EntityEnderEyeLaunch => f.write_str("ENTITY_ENDER_EYE_LAUNCH"),
            SoundEnum::EntityEnderPearlThrow => f.write_str("ENTITY_ENDER_PEARL_THROW"),
            SoundEnum::EntityEvokerAmbient => f.write_str("ENTITY_EVOKER_AMBIENT"),
            SoundEnum::EntityEvokerCastSpell => f.write_str("ENTITY_EVOKER_CAST_SPELL"),
            SoundEnum::EntityEvokerCelebrate => f.write_str("ENTITY_EVOKER_CELEBRATE"),
            SoundEnum::EntityEvokerDeath => f.write_str("ENTITY_EVOKER_DEATH"),
            SoundEnum::EntityEvokerFangsAttack => f.write_str("ENTITY_EVOKER_FANGS_ATTACK"),
            SoundEnum::EntityEvokerHurt => f.write_str("ENTITY_EVOKER_HURT"),
            SoundEnum::EntityEvokerPrepareAttack => f.write_str("ENTITY_EVOKER_PREPARE_ATTACK"),
            SoundEnum::EntityEvokerPrepareSummon => f.write_str("ENTITY_EVOKER_PREPARE_SUMMON"),
            SoundEnum::EntityEvokerPrepareWololo => f.write_str("ENTITY_EVOKER_PREPARE_WOLOLO"),
            SoundEnum::EntityExperienceBottleThrow => f.write_str("ENTITY_EXPERIENCE_BOTTLE_THROW"),
            SoundEnum::EntityExperienceOrbPickup => f.write_str("ENTITY_EXPERIENCE_ORB_PICKUP"),
            SoundEnum::EntityFireworkRocketBlast => f.write_str("ENTITY_FIREWORK_ROCKET_BLAST"),
            SoundEnum::EntityFireworkRocketBlastFar => {
                f.write_str("ENTITY_FIREWORK_ROCKET_BLAST_FAR")
            }
            SoundEnum::EntityFireworkRocketLargeBlast => {
                f.write_str("ENTITY_FIREWORK_ROCKET_LARGE_BLAST")
            }
            SoundEnum::EntityFireworkRocketLargeBlastFar => {
                f.write_str("ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR")
            }
            SoundEnum::EntityFireworkRocketLaunch => f.write_str("ENTITY_FIREWORK_ROCKET_LAUNCH"),
            SoundEnum::EntityFireworkRocketShoot => f.write_str("ENTITY_FIREWORK_ROCKET_SHOOT"),
            SoundEnum::EntityFireworkRocketTwinkle => f.write_str("ENTITY_FIREWORK_ROCKET_TWINKLE"),
            SoundEnum::EntityFireworkRocketTwinkleFar => {
                f.write_str("ENTITY_FIREWORK_ROCKET_TWINKLE_FAR")
            }
            SoundEnum::EntityFishingBobberRetrieve => f.write_str("ENTITY_FISHING_BOBBER_RETRIEVE"),
            SoundEnum::EntityFishingBobberSplash => f.write_str("ENTITY_FISHING_BOBBER_SPLASH"),
            SoundEnum::EntityFishingBobberThrow => f.write_str("ENTITY_FISHING_BOBBER_THROW"),
            SoundEnum::EntityFishSwim => f.write_str("ENTITY_FISH_SWIM"),
            SoundEnum::EntityFoxAggro => f.write_str("ENTITY_FOX_AGGRO"),
            SoundEnum::EntityFoxAmbient => f.write_str("ENTITY_FOX_AMBIENT"),
            SoundEnum::EntityFoxBite => f.write_str("ENTITY_FOX_BITE"),
            SoundEnum::EntityFoxDeath => f.write_str("ENTITY_FOX_DEATH"),
            SoundEnum::EntityFoxEat => f.write_str("ENTITY_FOX_EAT"),
            SoundEnum::EntityFoxHurt => f.write_str("ENTITY_FOX_HURT"),
            SoundEnum::EntityFoxScreech => f.write_str("ENTITY_FOX_SCREECH"),
            SoundEnum::EntityFoxSleep => f.write_str("ENTITY_FOX_SLEEP"),
            SoundEnum::EntityFoxSniff => f.write_str("ENTITY_FOX_SNIFF"),
            SoundEnum::EntityFoxSpit => f.write_str("ENTITY_FOX_SPIT"),
            SoundEnum::EntityFoxTeleport => f.write_str("ENTITY_FOX_TELEPORT"),
            SoundEnum::EntityFrogAmbient => f.write_str("ENTITY_FROG_AMBIENT"),
            SoundEnum::EntityFrogDeath => f.write_str("ENTITY_FROG_DEATH"),
            SoundEnum::EntityFrogEat => f.write_str("ENTITY_FROG_EAT"),
            SoundEnum::EntityFrogHurt => f.write_str("ENTITY_FROG_HURT"),
            SoundEnum::EntityFrogLaySpawn => f.write_str("ENTITY_FROG_LAY_SPAWN"),
            SoundEnum::EntityFrogLongJump => f.write_str("ENTITY_FROG_LONG_JUMP"),
            SoundEnum::EntityFrogStep => f.write_str("ENTITY_FROG_STEP"),
            SoundEnum::EntityFrogTongue => f.write_str("ENTITY_FROG_TONGUE"),
            SoundEnum::EntityGenericBigFall => f.write_str("ENTITY_GENERIC_BIG_FALL"),
            SoundEnum::EntityGenericBurn => f.write_str("ENTITY_GENERIC_BURN"),
            SoundEnum::EntityGenericDeath => f.write_str("ENTITY_GENERIC_DEATH"),
            SoundEnum::EntityGenericDrink => f.write_str("ENTITY_GENERIC_DRINK"),
            SoundEnum::EntityGenericEat => f.write_str("ENTITY_GENERIC_EAT"),
            SoundEnum::EntityGenericExplode => f.write_str("ENTITY_GENERIC_EXPLODE"),
            SoundEnum::EntityGenericExtinguishFire => f.write_str("ENTITY_GENERIC_EXTINGUISH_FIRE"),
            SoundEnum::EntityGenericHurt => f.write_str("ENTITY_GENERIC_HURT"),
            SoundEnum::EntityGenericSmallFall => f.write_str("ENTITY_GENERIC_SMALL_FALL"),
            SoundEnum::EntityGenericSplash => f.write_str("ENTITY_GENERIC_SPLASH"),
            SoundEnum::EntityGenericSwim => f.write_str("ENTITY_GENERIC_SWIM"),
            SoundEnum::EntityGhastAmbient => f.write_str("ENTITY_GHAST_AMBIENT"),
            SoundEnum::EntityGhastDeath => f.write_str("ENTITY_GHAST_DEATH"),
            SoundEnum::EntityGhastHurt => f.write_str("ENTITY_GHAST_HURT"),
            SoundEnum::EntityGhastScream => f.write_str("ENTITY_GHAST_SCREAM"),
            SoundEnum::EntityGhastShoot => f.write_str("ENTITY_GHAST_SHOOT"),
            SoundEnum::EntityGhastWarn => f.write_str("ENTITY_GHAST_WARN"),
            SoundEnum::EntityGlowItemFrameAddItem => f.write_str("ENTITY_GLOW_ITEM_FRAME_ADD_ITEM"),
            SoundEnum::EntityGlowItemFrameBreak => f.write_str("ENTITY_GLOW_ITEM_FRAME_BREAK"),
            SoundEnum::EntityGlowItemFramePlace => f.write_str("ENTITY_GLOW_ITEM_FRAME_PLACE"),
            SoundEnum::EntityGlowItemFrameRemoveItem => {
                f.write_str("ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM")
            }
            SoundEnum::EntityGlowItemFrameRotateItem => {
                f.write_str("ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM")
            }
            SoundEnum::EntityGlowSquidAmbient => f.write_str("ENTITY_GLOW_SQUID_AMBIENT"),
            SoundEnum::EntityGlowSquidDeath => f.write_str("ENTITY_GLOW_SQUID_DEATH"),
            SoundEnum::EntityGlowSquidHurt => f.write_str("ENTITY_GLOW_SQUID_HURT"),
            SoundEnum::EntityGlowSquidSquirt => f.write_str("ENTITY_GLOW_SQUID_SQUIRT"),
            SoundEnum::EntityGoatAmbient => f.write_str("ENTITY_GOAT_AMBIENT"),
            SoundEnum::EntityGoatDeath => f.write_str("ENTITY_GOAT_DEATH"),
            SoundEnum::EntityGoatEat => f.write_str("ENTITY_GOAT_EAT"),
            SoundEnum::EntityGoatHornBreak => f.write_str("ENTITY_GOAT_HORN_BREAK"),
            SoundEnum::EntityGoatHurt => f.write_str("ENTITY_GOAT_HURT"),
            SoundEnum::EntityGoatLongJump => f.write_str("ENTITY_GOAT_LONG_JUMP"),
            SoundEnum::EntityGoatMilk => f.write_str("ENTITY_GOAT_MILK"),
            SoundEnum::EntityGoatPrepareRam => f.write_str("ENTITY_GOAT_PREPARE_RAM"),
            SoundEnum::EntityGoatRamImpact => f.write_str("ENTITY_GOAT_RAM_IMPACT"),
            SoundEnum::EntityGoatScreamingAmbient => f.write_str("ENTITY_GOAT_SCREAMING_AMBIENT"),
            SoundEnum::EntityGoatScreamingDeath => f.write_str("ENTITY_GOAT_SCREAMING_DEATH"),
            SoundEnum::EntityGoatScreamingEat => f.write_str("ENTITY_GOAT_SCREAMING_EAT"),
            SoundEnum::EntityGoatScreamingHornBreak => {
                f.write_str("ENTITY_GOAT_SCREAMING_HORN_BREAK")
            }
            SoundEnum::EntityGoatScreamingHurt => f.write_str("ENTITY_GOAT_SCREAMING_HURT"),
            SoundEnum::EntityGoatScreamingLongJump => {
                f.write_str("ENTITY_GOAT_SCREAMING_LONG_JUMP")
            }
            SoundEnum::EntityGoatScreamingMilk => f.write_str("ENTITY_GOAT_SCREAMING_MILK"),
            SoundEnum::EntityGoatScreamingPrepareRam => {
                f.write_str("ENTITY_GOAT_SCREAMING_PREPARE_RAM")
            }
            SoundEnum::EntityGoatScreamingRamImpact => {
                f.write_str("ENTITY_GOAT_SCREAMING_RAM_IMPACT")
            }
            SoundEnum::EntityGoatStep => f.write_str("ENTITY_GOAT_STEP"),
            SoundEnum::EntityGuardianAmbient => f.write_str("ENTITY_GUARDIAN_AMBIENT"),
            SoundEnum::EntityGuardianAmbientLand => f.write_str("ENTITY_GUARDIAN_AMBIENT_LAND"),
            SoundEnum::EntityGuardianAttack => f.write_str("ENTITY_GUARDIAN_ATTACK"),
            SoundEnum::EntityGuardianDeath => f.write_str("ENTITY_GUARDIAN_DEATH"),
            SoundEnum::EntityGuardianDeathLand => f.write_str("ENTITY_GUARDIAN_DEATH_LAND"),
            SoundEnum::EntityGuardianFlop => f.write_str("ENTITY_GUARDIAN_FLOP"),
            SoundEnum::EntityGuardianHurt => f.write_str("ENTITY_GUARDIAN_HURT"),
            SoundEnum::EntityGuardianHurtLand => f.write_str("ENTITY_GUARDIAN_HURT_LAND"),
            SoundEnum::EntityHoglinAmbient => f.write_str("ENTITY_HOGLIN_AMBIENT"),
            SoundEnum::EntityHoglinAngry => f.write_str("ENTITY_HOGLIN_ANGRY"),
            SoundEnum::EntityHoglinAttack => f.write_str("ENTITY_HOGLIN_ATTACK"),
            SoundEnum::EntityHoglinConvertedToZombified => {
                f.write_str("ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED")
            }
            SoundEnum::EntityHoglinDeath => f.write_str("ENTITY_HOGLIN_DEATH"),
            SoundEnum::EntityHoglinHurt => f.write_str("ENTITY_HOGLIN_HURT"),
            SoundEnum::EntityHoglinRetreat => f.write_str("ENTITY_HOGLIN_RETREAT"),
            SoundEnum::EntityHoglinStep => f.write_str("ENTITY_HOGLIN_STEP"),
            SoundEnum::EntityHorseAmbient => f.write_str("ENTITY_HORSE_AMBIENT"),
            SoundEnum::EntityHorseAngry => f.write_str("ENTITY_HORSE_ANGRY"),
            SoundEnum::EntityHorseArmor => f.write_str("ENTITY_HORSE_ARMOR"),
            SoundEnum::EntityHorseBreathe => f.write_str("ENTITY_HORSE_BREATHE"),
            SoundEnum::EntityHorseDeath => f.write_str("ENTITY_HORSE_DEATH"),
            SoundEnum::EntityHorseEat => f.write_str("ENTITY_HORSE_EAT"),
            SoundEnum::EntityHorseGallop => f.write_str("ENTITY_HORSE_GALLOP"),
            SoundEnum::EntityHorseHurt => f.write_str("ENTITY_HORSE_HURT"),
            SoundEnum::EntityHorseJump => f.write_str("ENTITY_HORSE_JUMP"),
            SoundEnum::EntityHorseLand => f.write_str("ENTITY_HORSE_LAND"),
            SoundEnum::EntityHorseSaddle => f.write_str("ENTITY_HORSE_SADDLE"),
            SoundEnum::EntityHorseStep => f.write_str("ENTITY_HORSE_STEP"),
            SoundEnum::EntityHorseStepWood => f.write_str("ENTITY_HORSE_STEP_WOOD"),
            SoundEnum::EntityHostileBigFall => f.write_str("ENTITY_HOSTILE_BIG_FALL"),
            SoundEnum::EntityHostileDeath => f.write_str("ENTITY_HOSTILE_DEATH"),
            SoundEnum::EntityHostileHurt => f.write_str("ENTITY_HOSTILE_HURT"),
            SoundEnum::EntityHostileSmallFall => f.write_str("ENTITY_HOSTILE_SMALL_FALL"),
            SoundEnum::EntityHostileSplash => f.write_str("ENTITY_HOSTILE_SPLASH"),
            SoundEnum::EntityHostileSwim => f.write_str("ENTITY_HOSTILE_SWIM"),
            SoundEnum::EntityHuskAmbient => f.write_str("ENTITY_HUSK_AMBIENT"),
            SoundEnum::EntityHuskConvertedToZombie => {
                f.write_str("ENTITY_HUSK_CONVERTED_TO_ZOMBIE")
            }
            SoundEnum::EntityHuskDeath => f.write_str("ENTITY_HUSK_DEATH"),
            SoundEnum::EntityHuskHurt => f.write_str("ENTITY_HUSK_HURT"),
            SoundEnum::EntityHuskStep => f.write_str("ENTITY_HUSK_STEP"),
            SoundEnum::EntityIllusionerAmbient => f.write_str("ENTITY_ILLUSIONER_AMBIENT"),
            SoundEnum::EntityIllusionerCastSpell => f.write_str("ENTITY_ILLUSIONER_CAST_SPELL"),
            SoundEnum::EntityIllusionerDeath => f.write_str("ENTITY_ILLUSIONER_DEATH"),
            SoundEnum::EntityIllusionerHurt => f.write_str("ENTITY_ILLUSIONER_HURT"),
            SoundEnum::EntityIllusionerMirrorMove => f.write_str("ENTITY_ILLUSIONER_MIRROR_MOVE"),
            SoundEnum::EntityIllusionerPrepareBlindness => {
                f.write_str("ENTITY_ILLUSIONER_PREPARE_BLINDNESS")
            }
            SoundEnum::EntityIllusionerPrepareMirror => {
                f.write_str("ENTITY_ILLUSIONER_PREPARE_MIRROR")
            }
            SoundEnum::EntityIronGolemAttack => f.write_str("ENTITY_IRON_GOLEM_ATTACK"),
            SoundEnum::EntityIronGolemDamage => f.write_str("ENTITY_IRON_GOLEM_DAMAGE"),
            SoundEnum::EntityIronGolemDeath => f.write_str("ENTITY_IRON_GOLEM_DEATH"),
            SoundEnum::EntityIronGolemHurt => f.write_str("ENTITY_IRON_GOLEM_HURT"),
            SoundEnum::EntityIronGolemRepair => f.write_str("ENTITY_IRON_GOLEM_REPAIR"),
            SoundEnum::EntityIronGolemStep => f.write_str("ENTITY_IRON_GOLEM_STEP"),
            SoundEnum::EntityItemBreak => f.write_str("ENTITY_ITEM_BREAK"),
            SoundEnum::EntityItemFrameAddItem => f.write_str("ENTITY_ITEM_FRAME_ADD_ITEM"),
            SoundEnum::EntityItemFrameBreak => f.write_str("ENTITY_ITEM_FRAME_BREAK"),
            SoundEnum::EntityItemFramePlace => f.write_str("ENTITY_ITEM_FRAME_PLACE"),
            SoundEnum::EntityItemFrameRemoveItem => f.write_str("ENTITY_ITEM_FRAME_REMOVE_ITEM"),
            SoundEnum::EntityItemFrameRotateItem => f.write_str("ENTITY_ITEM_FRAME_ROTATE_ITEM"),
            SoundEnum::EntityItemPickup => f.write_str("ENTITY_ITEM_PICKUP"),
            SoundEnum::EntityLeashKnotBreak => f.write_str("ENTITY_LEASH_KNOT_BREAK"),
            SoundEnum::EntityLeashKnotPlace => f.write_str("ENTITY_LEASH_KNOT_PLACE"),
            SoundEnum::EntityLightningBoltImpact => f.write_str("ENTITY_LIGHTNING_BOLT_IMPACT"),
            SoundEnum::EntityLightningBoltThunder => f.write_str("ENTITY_LIGHTNING_BOLT_THUNDER"),
            SoundEnum::EntityLingeringPotionThrow => f.write_str("ENTITY_LINGERING_POTION_THROW"),
            SoundEnum::EntityLlamaAmbient => f.write_str("ENTITY_LLAMA_AMBIENT"),
            SoundEnum::EntityLlamaAngry => f.write_str("ENTITY_LLAMA_ANGRY"),
            SoundEnum::EntityLlamaChest => f.write_str("ENTITY_LLAMA_CHEST"),
            SoundEnum::EntityLlamaDeath => f.write_str("ENTITY_LLAMA_DEATH"),
            SoundEnum::EntityLlamaEat => f.write_str("ENTITY_LLAMA_EAT"),
            SoundEnum::EntityLlamaHurt => f.write_str("ENTITY_LLAMA_HURT"),
            SoundEnum::EntityLlamaSpit => f.write_str("ENTITY_LLAMA_SPIT"),
            SoundEnum::EntityLlamaStep => f.write_str("ENTITY_LLAMA_STEP"),
            SoundEnum::EntityLlamaSwag => f.write_str("ENTITY_LLAMA_SWAG"),
            SoundEnum::EntityMagmaCubeDeath => f.write_str("ENTITY_MAGMA_CUBE_DEATH"),
            SoundEnum::EntityMagmaCubeDeathSmall => f.write_str("ENTITY_MAGMA_CUBE_DEATH_SMALL"),
            SoundEnum::EntityMagmaCubeHurt => f.write_str("ENTITY_MAGMA_CUBE_HURT"),
            SoundEnum::EntityMagmaCubeHurtSmall => f.write_str("ENTITY_MAGMA_CUBE_HURT_SMALL"),
            SoundEnum::EntityMagmaCubeJump => f.write_str("ENTITY_MAGMA_CUBE_JUMP"),
            SoundEnum::EntityMagmaCubeSquish => f.write_str("ENTITY_MAGMA_CUBE_SQUISH"),
            SoundEnum::EntityMagmaCubeSquishSmall => f.write_str("ENTITY_MAGMA_CUBE_SQUISH_SMALL"),
            SoundEnum::EntityMinecartInside => f.write_str("ENTITY_MINECART_INSIDE"),
            SoundEnum::EntityMinecartInsideUnderwater => {
                f.write_str("ENTITY_MINECART_INSIDE_UNDERWATER")
            }
            SoundEnum::EntityMinecartRiding => f.write_str("ENTITY_MINECART_RIDING"),
            SoundEnum::EntityMooshroomConvert => f.write_str("ENTITY_MOOSHROOM_CONVERT"),
            SoundEnum::EntityMooshroomEat => f.write_str("ENTITY_MOOSHROOM_EAT"),
            SoundEnum::EntityMooshroomMilk => f.write_str("ENTITY_MOOSHROOM_MILK"),
            SoundEnum::EntityMooshroomShear => f.write_str("ENTITY_MOOSHROOM_SHEAR"),
            SoundEnum::EntityMooshroomSuspiciousMilk => {
                f.write_str("ENTITY_MOOSHROOM_SUSPICIOUS_MILK")
            }
            SoundEnum::EntityMuleAmbient => f.write_str("ENTITY_MULE_AMBIENT"),
            SoundEnum::EntityMuleAngry => f.write_str("ENTITY_MULE_ANGRY"),
            SoundEnum::EntityMuleChest => f.write_str("ENTITY_MULE_CHEST"),
            SoundEnum::EntityMuleDeath => f.write_str("ENTITY_MULE_DEATH"),
            SoundEnum::EntityMuleEat => f.write_str("ENTITY_MULE_EAT"),
            SoundEnum::EntityMuleHurt => f.write_str("ENTITY_MULE_HURT"),
            SoundEnum::EntityOcelotAmbient => f.write_str("ENTITY_OCELOT_AMBIENT"),
            SoundEnum::EntityOcelotDeath => f.write_str("ENTITY_OCELOT_DEATH"),
            SoundEnum::EntityOcelotHurt => f.write_str("ENTITY_OCELOT_HURT"),
            SoundEnum::EntityPaintingBreak => f.write_str("ENTITY_PAINTING_BREAK"),
            SoundEnum::EntityPaintingPlace => f.write_str("ENTITY_PAINTING_PLACE"),
            SoundEnum::EntityPandaAggressiveAmbient => {
                f.write_str("ENTITY_PANDA_AGGRESSIVE_AMBIENT")
            }
            SoundEnum::EntityPandaAmbient => f.write_str("ENTITY_PANDA_AMBIENT"),
            SoundEnum::EntityPandaBite => f.write_str("ENTITY_PANDA_BITE"),
            SoundEnum::EntityPandaCantBreed => f.write_str("ENTITY_PANDA_CANT_BREED"),
            SoundEnum::EntityPandaDeath => f.write_str("ENTITY_PANDA_DEATH"),
            SoundEnum::EntityPandaEat => f.write_str("ENTITY_PANDA_EAT"),
            SoundEnum::EntityPandaHurt => f.write_str("ENTITY_PANDA_HURT"),
            SoundEnum::EntityPandaPreSneeze => f.write_str("ENTITY_PANDA_PRE_SNEEZE"),
            SoundEnum::EntityPandaSneeze => f.write_str("ENTITY_PANDA_SNEEZE"),
            SoundEnum::EntityPandaStep => f.write_str("ENTITY_PANDA_STEP"),
            SoundEnum::EntityPandaWorriedAmbient => f.write_str("ENTITY_PANDA_WORRIED_AMBIENT"),
            SoundEnum::EntityParrotAmbient => f.write_str("ENTITY_PARROT_AMBIENT"),
            SoundEnum::EntityParrotDeath => f.write_str("ENTITY_PARROT_DEATH"),
            SoundEnum::EntityParrotEat => f.write_str("ENTITY_PARROT_EAT"),
            SoundEnum::EntityParrotFly => f.write_str("ENTITY_PARROT_FLY"),
            SoundEnum::EntityParrotHurt => f.write_str("ENTITY_PARROT_HURT"),
            SoundEnum::EntityParrotImitateBlaze => f.write_str("ENTITY_PARROT_IMITATE_BLAZE"),
            SoundEnum::EntityParrotImitateCreeper => f.write_str("ENTITY_PARROT_IMITATE_CREEPER"),
            SoundEnum::EntityParrotImitateDrowned => f.write_str("ENTITY_PARROT_IMITATE_DROWNED"),
            SoundEnum::EntityParrotImitateElderGuardian => {
                f.write_str("ENTITY_PARROT_IMITATE_ELDER_GUARDIAN")
            }
            SoundEnum::EntityParrotImitateEndermite => {
                f.write_str("ENTITY_PARROT_IMITATE_ENDERMITE")
            }
            SoundEnum::EntityParrotImitateEnderDragon => {
                f.write_str("ENTITY_PARROT_IMITATE_ENDER_DRAGON")
            }
            SoundEnum::EntityParrotImitateEvoker => f.write_str("ENTITY_PARROT_IMITATE_EVOKER"),
            SoundEnum::EntityParrotImitateGhast => f.write_str("ENTITY_PARROT_IMITATE_GHAST"),
            SoundEnum::EntityParrotImitateGuardian => f.write_str("ENTITY_PARROT_IMITATE_GUARDIAN"),
            SoundEnum::EntityParrotImitateHoglin => f.write_str("ENTITY_PARROT_IMITATE_HOGLIN"),
            SoundEnum::EntityParrotImitateHusk => f.write_str("ENTITY_PARROT_IMITATE_HUSK"),
            SoundEnum::EntityParrotImitateIllusioner => {
                f.write_str("ENTITY_PARROT_IMITATE_ILLUSIONER")
            }
            SoundEnum::EntityParrotImitateMagmaCube => {
                f.write_str("ENTITY_PARROT_IMITATE_MAGMA_CUBE")
            }
            SoundEnum::EntityParrotImitatePhantom => f.write_str("ENTITY_PARROT_IMITATE_PHANTOM"),
            SoundEnum::EntityParrotImitatePiglin => f.write_str("ENTITY_PARROT_IMITATE_PIGLIN"),
            SoundEnum::EntityParrotImitatePiglinBrute => {
                f.write_str("ENTITY_PARROT_IMITATE_PIGLIN_BRUTE")
            }
            SoundEnum::EntityParrotImitatePillager => f.write_str("ENTITY_PARROT_IMITATE_PILLAGER"),
            SoundEnum::EntityParrotImitateRavager => f.write_str("ENTITY_PARROT_IMITATE_RAVAGER"),
            SoundEnum::EntityParrotImitateShulker => f.write_str("ENTITY_PARROT_IMITATE_SHULKER"),
            SoundEnum::EntityParrotImitateSilverfish => {
                f.write_str("ENTITY_PARROT_IMITATE_SILVERFISH")
            }
            SoundEnum::EntityParrotImitateSkeleton => f.write_str("ENTITY_PARROT_IMITATE_SKELETON"),
            SoundEnum::EntityParrotImitateSlime => f.write_str("ENTITY_PARROT_IMITATE_SLIME"),
            SoundEnum::EntityParrotImitateSpider => f.write_str("ENTITY_PARROT_IMITATE_SPIDER"),
            SoundEnum::EntityParrotImitateStray => f.write_str("ENTITY_PARROT_IMITATE_STRAY"),
            SoundEnum::EntityParrotImitateVex => f.write_str("ENTITY_PARROT_IMITATE_VEX"),
            SoundEnum::EntityParrotImitateVindicator => {
                f.write_str("ENTITY_PARROT_IMITATE_VINDICATOR")
            }
            SoundEnum::EntityParrotImitateWarden => f.write_str("ENTITY_PARROT_IMITATE_WARDEN"),
            SoundEnum::EntityParrotImitateWitch => f.write_str("ENTITY_PARROT_IMITATE_WITCH"),
            SoundEnum::EntityParrotImitateWither => f.write_str("ENTITY_PARROT_IMITATE_WITHER"),
            SoundEnum::EntityParrotImitateWitherSkeleton => {
                f.write_str("ENTITY_PARROT_IMITATE_WITHER_SKELETON")
            }
            SoundEnum::EntityParrotImitateZoglin => f.write_str("ENTITY_PARROT_IMITATE_ZOGLIN"),
            SoundEnum::EntityParrotImitateZombie => f.write_str("ENTITY_PARROT_IMITATE_ZOMBIE"),
            SoundEnum::EntityParrotImitateZombieVillager => {
                f.write_str("ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER")
            }
            SoundEnum::EntityParrotStep => f.write_str("ENTITY_PARROT_STEP"),
            SoundEnum::EntityPhantomAmbient => f.write_str("ENTITY_PHANTOM_AMBIENT"),
            SoundEnum::EntityPhantomBite => f.write_str("ENTITY_PHANTOM_BITE"),
            SoundEnum::EntityPhantomDeath => f.write_str("ENTITY_PHANTOM_DEATH"),
            SoundEnum::EntityPhantomFlap => f.write_str("ENTITY_PHANTOM_FLAP"),
            SoundEnum::EntityPhantomHurt => f.write_str("ENTITY_PHANTOM_HURT"),
            SoundEnum::EntityPhantomSwoop => f.write_str("ENTITY_PHANTOM_SWOOP"),
            SoundEnum::EntityPiglinAdmiringItem => f.write_str("ENTITY_PIGLIN_ADMIRING_ITEM"),
            SoundEnum::EntityPiglinAmbient => f.write_str("ENTITY_PIGLIN_AMBIENT"),
            SoundEnum::EntityPiglinAngry => f.write_str("ENTITY_PIGLIN_ANGRY"),
            SoundEnum::EntityPiglinBruteAmbient => f.write_str("ENTITY_PIGLIN_BRUTE_AMBIENT"),
            SoundEnum::EntityPiglinBruteAngry => f.write_str("ENTITY_PIGLIN_BRUTE_ANGRY"),
            SoundEnum::EntityPiglinBruteConvertedToZombified => {
                f.write_str("ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED")
            }
            SoundEnum::EntityPiglinBruteDeath => f.write_str("ENTITY_PIGLIN_BRUTE_DEATH"),
            SoundEnum::EntityPiglinBruteHurt => f.write_str("ENTITY_PIGLIN_BRUTE_HURT"),
            SoundEnum::EntityPiglinBruteStep => f.write_str("ENTITY_PIGLIN_BRUTE_STEP"),
            SoundEnum::EntityPiglinCelebrate => f.write_str("ENTITY_PIGLIN_CELEBRATE"),
            SoundEnum::EntityPiglinConvertedToZombified => {
                f.write_str("ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED")
            }
            SoundEnum::EntityPiglinDeath => f.write_str("ENTITY_PIGLIN_DEATH"),
            SoundEnum::EntityPiglinHurt => f.write_str("ENTITY_PIGLIN_HURT"),
            SoundEnum::EntityPiglinJealous => f.write_str("ENTITY_PIGLIN_JEALOUS"),
            SoundEnum::EntityPiglinRetreat => f.write_str("ENTITY_PIGLIN_RETREAT"),
            SoundEnum::EntityPiglinStep => f.write_str("ENTITY_PIGLIN_STEP"),
            SoundEnum::EntityPigAmbient => f.write_str("ENTITY_PIG_AMBIENT"),
            SoundEnum::EntityPigDeath => f.write_str("ENTITY_PIG_DEATH"),
            SoundEnum::EntityPigHurt => f.write_str("ENTITY_PIG_HURT"),
            SoundEnum::EntityPigSaddle => f.write_str("ENTITY_PIG_SADDLE"),
            SoundEnum::EntityPigStep => f.write_str("ENTITY_PIG_STEP"),
            SoundEnum::EntityPillagerAmbient => f.write_str("ENTITY_PILLAGER_AMBIENT"),
            SoundEnum::EntityPillagerCelebrate => f.write_str("ENTITY_PILLAGER_CELEBRATE"),
            SoundEnum::EntityPillagerDeath => f.write_str("ENTITY_PILLAGER_DEATH"),
            SoundEnum::EntityPillagerHurt => f.write_str("ENTITY_PILLAGER_HURT"),
            SoundEnum::EntityPlayerAttackCrit => f.write_str("ENTITY_PLAYER_ATTACK_CRIT"),
            SoundEnum::EntityPlayerAttackKnockback => f.write_str("ENTITY_PLAYER_ATTACK_KNOCKBACK"),
            SoundEnum::EntityPlayerAttackNodamage => f.write_str("ENTITY_PLAYER_ATTACK_NODAMAGE"),
            SoundEnum::EntityPlayerAttackStrong => f.write_str("ENTITY_PLAYER_ATTACK_STRONG"),
            SoundEnum::EntityPlayerAttackSweep => f.write_str("ENTITY_PLAYER_ATTACK_SWEEP"),
            SoundEnum::EntityPlayerAttackWeak => f.write_str("ENTITY_PLAYER_ATTACK_WEAK"),
            SoundEnum::EntityPlayerBigFall => f.write_str("ENTITY_PLAYER_BIG_FALL"),
            SoundEnum::EntityPlayerBreath => f.write_str("ENTITY_PLAYER_BREATH"),
            SoundEnum::EntityPlayerBurp => f.write_str("ENTITY_PLAYER_BURP"),
            SoundEnum::EntityPlayerDeath => f.write_str("ENTITY_PLAYER_DEATH"),
            SoundEnum::EntityPlayerHurt => f.write_str("ENTITY_PLAYER_HURT"),
            SoundEnum::EntityPlayerHurtDrown => f.write_str("ENTITY_PLAYER_HURT_DROWN"),
            SoundEnum::EntityPlayerHurtFreeze => f.write_str("ENTITY_PLAYER_HURT_FREEZE"),
            SoundEnum::EntityPlayerHurtOnFire => f.write_str("ENTITY_PLAYER_HURT_ON_FIRE"),
            SoundEnum::EntityPlayerHurtSweetBerryBush => {
                f.write_str("ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH")
            }
            SoundEnum::EntityPlayerLevelup => f.write_str("ENTITY_PLAYER_LEVELUP"),
            SoundEnum::EntityPlayerSmallFall => f.write_str("ENTITY_PLAYER_SMALL_FALL"),
            SoundEnum::EntityPlayerSplash => f.write_str("ENTITY_PLAYER_SPLASH"),
            SoundEnum::EntityPlayerSplashHighSpeed => {
                f.write_str("ENTITY_PLAYER_SPLASH_HIGH_SPEED")
            }
            SoundEnum::EntityPlayerSwim => f.write_str("ENTITY_PLAYER_SWIM"),
            SoundEnum::EntityPolarBearAmbient => f.write_str("ENTITY_POLAR_BEAR_AMBIENT"),
            SoundEnum::EntityPolarBearAmbientBaby => f.write_str("ENTITY_POLAR_BEAR_AMBIENT_BABY"),
            SoundEnum::EntityPolarBearDeath => f.write_str("ENTITY_POLAR_BEAR_DEATH"),
            SoundEnum::EntityPolarBearHurt => f.write_str("ENTITY_POLAR_BEAR_HURT"),
            SoundEnum::EntityPolarBearStep => f.write_str("ENTITY_POLAR_BEAR_STEP"),
            SoundEnum::EntityPolarBearWarning => f.write_str("ENTITY_POLAR_BEAR_WARNING"),
            SoundEnum::EntityPufferFishAmbient => f.write_str("ENTITY_PUFFER_FISH_AMBIENT"),
            SoundEnum::EntityPufferFishBlowOut => f.write_str("ENTITY_PUFFER_FISH_BLOW_OUT"),
            SoundEnum::EntityPufferFishBlowUp => f.write_str("ENTITY_PUFFER_FISH_BLOW_UP"),
            SoundEnum::EntityPufferFishDeath => f.write_str("ENTITY_PUFFER_FISH_DEATH"),
            SoundEnum::EntityPufferFishFlop => f.write_str("ENTITY_PUFFER_FISH_FLOP"),
            SoundEnum::EntityPufferFishHurt => f.write_str("ENTITY_PUFFER_FISH_HURT"),
            SoundEnum::EntityPufferFishSting => f.write_str("ENTITY_PUFFER_FISH_STING"),
            SoundEnum::EntityRabbitAmbient => f.write_str("ENTITY_RABBIT_AMBIENT"),
            SoundEnum::EntityRabbitAttack => f.write_str("ENTITY_RABBIT_ATTACK"),
            SoundEnum::EntityRabbitDeath => f.write_str("ENTITY_RABBIT_DEATH"),
            SoundEnum::EntityRabbitHurt => f.write_str("ENTITY_RABBIT_HURT"),
            SoundEnum::EntityRabbitJump => f.write_str("ENTITY_RABBIT_JUMP"),
            SoundEnum::EntityRavagerAmbient => f.write_str("ENTITY_RAVAGER_AMBIENT"),
            SoundEnum::EntityRavagerAttack => f.write_str("ENTITY_RAVAGER_ATTACK"),
            SoundEnum::EntityRavagerCelebrate => f.write_str("ENTITY_RAVAGER_CELEBRATE"),
            SoundEnum::EntityRavagerDeath => f.write_str("ENTITY_RAVAGER_DEATH"),
            SoundEnum::EntityRavagerHurt => f.write_str("ENTITY_RAVAGER_HURT"),
            SoundEnum::EntityRavagerRoar => f.write_str("ENTITY_RAVAGER_ROAR"),
            SoundEnum::EntityRavagerStep => f.write_str("ENTITY_RAVAGER_STEP"),
            SoundEnum::EntityRavagerStunned => f.write_str("ENTITY_RAVAGER_STUNNED"),
            SoundEnum::EntitySalmonAmbient => f.write_str("ENTITY_SALMON_AMBIENT"),
            SoundEnum::EntitySalmonDeath => f.write_str("ENTITY_SALMON_DEATH"),
            SoundEnum::EntitySalmonFlop => f.write_str("ENTITY_SALMON_FLOP"),
            SoundEnum::EntitySalmonHurt => f.write_str("ENTITY_SALMON_HURT"),
            SoundEnum::EntitySheepAmbient => f.write_str("ENTITY_SHEEP_AMBIENT"),
            SoundEnum::EntitySheepDeath => f.write_str("ENTITY_SHEEP_DEATH"),
            SoundEnum::EntitySheepHurt => f.write_str("ENTITY_SHEEP_HURT"),
            SoundEnum::EntitySheepShear => f.write_str("ENTITY_SHEEP_SHEAR"),
            SoundEnum::EntitySheepStep => f.write_str("ENTITY_SHEEP_STEP"),
            SoundEnum::EntityShulkerAmbient => f.write_str("ENTITY_SHULKER_AMBIENT"),
            SoundEnum::EntityShulkerBulletHit => f.write_str("ENTITY_SHULKER_BULLET_HIT"),
            SoundEnum::EntityShulkerBulletHurt => f.write_str("ENTITY_SHULKER_BULLET_HURT"),
            SoundEnum::EntityShulkerClose => f.write_str("ENTITY_SHULKER_CLOSE"),
            SoundEnum::EntityShulkerDeath => f.write_str("ENTITY_SHULKER_DEATH"),
            SoundEnum::EntityShulkerHurt => f.write_str("ENTITY_SHULKER_HURT"),
            SoundEnum::EntityShulkerHurtClosed => f.write_str("ENTITY_SHULKER_HURT_CLOSED"),
            SoundEnum::EntityShulkerOpen => f.write_str("ENTITY_SHULKER_OPEN"),
            SoundEnum::EntityShulkerShoot => f.write_str("ENTITY_SHULKER_SHOOT"),
            SoundEnum::EntityShulkerTeleport => f.write_str("ENTITY_SHULKER_TELEPORT"),
            SoundEnum::EntitySilverfishAmbient => f.write_str("ENTITY_SILVERFISH_AMBIENT"),
            SoundEnum::EntitySilverfishDeath => f.write_str("ENTITY_SILVERFISH_DEATH"),
            SoundEnum::EntitySilverfishHurt => f.write_str("ENTITY_SILVERFISH_HURT"),
            SoundEnum::EntitySilverfishStep => f.write_str("ENTITY_SILVERFISH_STEP"),
            SoundEnum::EntitySkeletonAmbient => f.write_str("ENTITY_SKELETON_AMBIENT"),
            SoundEnum::EntitySkeletonConvertedToStray => {
                f.write_str("ENTITY_SKELETON_CONVERTED_TO_STRAY")
            }
            SoundEnum::EntitySkeletonDeath => f.write_str("ENTITY_SKELETON_DEATH"),
            SoundEnum::EntitySkeletonHorseAmbient => f.write_str("ENTITY_SKELETON_HORSE_AMBIENT"),
            SoundEnum::EntitySkeletonHorseAmbientWater => {
                f.write_str("ENTITY_SKELETON_HORSE_AMBIENT_WATER")
            }
            SoundEnum::EntitySkeletonHorseDeath => f.write_str("ENTITY_SKELETON_HORSE_DEATH"),
            SoundEnum::EntitySkeletonHorseGallopWater => {
                f.write_str("ENTITY_SKELETON_HORSE_GALLOP_WATER")
            }
            SoundEnum::EntitySkeletonHorseHurt => f.write_str("ENTITY_SKELETON_HORSE_HURT"),
            SoundEnum::EntitySkeletonHorseJumpWater => {
                f.write_str("ENTITY_SKELETON_HORSE_JUMP_WATER")
            }
            SoundEnum::EntitySkeletonHorseStepWater => {
                f.write_str("ENTITY_SKELETON_HORSE_STEP_WATER")
            }
            SoundEnum::EntitySkeletonHorseSwim => f.write_str("ENTITY_SKELETON_HORSE_SWIM"),
            SoundEnum::EntitySkeletonHurt => f.write_str("ENTITY_SKELETON_HURT"),
            SoundEnum::EntitySkeletonShoot => f.write_str("ENTITY_SKELETON_SHOOT"),
            SoundEnum::EntitySkeletonStep => f.write_str("ENTITY_SKELETON_STEP"),
            SoundEnum::EntitySlimeAttack => f.write_str("ENTITY_SLIME_ATTACK"),
            SoundEnum::EntitySlimeDeath => f.write_str("ENTITY_SLIME_DEATH"),
            SoundEnum::EntitySlimeDeathSmall => f.write_str("ENTITY_SLIME_DEATH_SMALL"),
            SoundEnum::EntitySlimeHurt => f.write_str("ENTITY_SLIME_HURT"),
            SoundEnum::EntitySlimeHurtSmall => f.write_str("ENTITY_SLIME_HURT_SMALL"),
            SoundEnum::EntitySlimeJump => f.write_str("ENTITY_SLIME_JUMP"),
            SoundEnum::EntitySlimeJumpSmall => f.write_str("ENTITY_SLIME_JUMP_SMALL"),
            SoundEnum::EntitySlimeSquish => f.write_str("ENTITY_SLIME_SQUISH"),
            SoundEnum::EntitySlimeSquishSmall => f.write_str("ENTITY_SLIME_SQUISH_SMALL"),
            SoundEnum::EntitySnifferDeath => f.write_str("ENTITY_SNIFFER_DEATH"),
            SoundEnum::EntitySnifferDigging => f.write_str("ENTITY_SNIFFER_DIGGING"),
            SoundEnum::EntitySnifferDiggingStop => f.write_str("ENTITY_SNIFFER_DIGGING_STOP"),
            SoundEnum::EntitySnifferDropSeed => f.write_str("ENTITY_SNIFFER_DROP_SEED"),
            SoundEnum::EntitySnifferEat => f.write_str("ENTITY_SNIFFER_EAT"),
            SoundEnum::EntitySnifferHappy => f.write_str("ENTITY_SNIFFER_HAPPY"),
            SoundEnum::EntitySnifferHurt => f.write_str("ENTITY_SNIFFER_HURT"),
            SoundEnum::EntitySnifferIdle => f.write_str("ENTITY_SNIFFER_IDLE"),
            SoundEnum::EntitySnifferScenting => f.write_str("ENTITY_SNIFFER_SCENTING"),
            SoundEnum::EntitySnifferSearching => f.write_str("ENTITY_SNIFFER_SEARCHING"),
            SoundEnum::EntitySnifferSniffing => f.write_str("ENTITY_SNIFFER_SNIFFING"),
            SoundEnum::EntitySnifferStep => f.write_str("ENTITY_SNIFFER_STEP"),
            SoundEnum::EntitySnowballThrow => f.write_str("ENTITY_SNOWBALL_THROW"),
            SoundEnum::EntitySnowGolemAmbient => f.write_str("ENTITY_SNOW_GOLEM_AMBIENT"),
            SoundEnum::EntitySnowGolemDeath => f.write_str("ENTITY_SNOW_GOLEM_DEATH"),
            SoundEnum::EntitySnowGolemHurt => f.write_str("ENTITY_SNOW_GOLEM_HURT"),
            SoundEnum::EntitySnowGolemShear => f.write_str("ENTITY_SNOW_GOLEM_SHEAR"),
            SoundEnum::EntitySnowGolemShoot => f.write_str("ENTITY_SNOW_GOLEM_SHOOT"),
            SoundEnum::EntitySpiderAmbient => f.write_str("ENTITY_SPIDER_AMBIENT"),
            SoundEnum::EntitySpiderDeath => f.write_str("ENTITY_SPIDER_DEATH"),
            SoundEnum::EntitySpiderHurt => f.write_str("ENTITY_SPIDER_HURT"),
            SoundEnum::EntitySpiderStep => f.write_str("ENTITY_SPIDER_STEP"),
            SoundEnum::EntitySplashPotionBreak => f.write_str("ENTITY_SPLASH_POTION_BREAK"),
            SoundEnum::EntitySplashPotionThrow => f.write_str("ENTITY_SPLASH_POTION_THROW"),
            SoundEnum::EntitySquidAmbient => f.write_str("ENTITY_SQUID_AMBIENT"),
            SoundEnum::EntitySquidDeath => f.write_str("ENTITY_SQUID_DEATH"),
            SoundEnum::EntitySquidHurt => f.write_str("ENTITY_SQUID_HURT"),
            SoundEnum::EntitySquidSquirt => f.write_str("ENTITY_SQUID_SQUIRT"),
            SoundEnum::EntityStrayAmbient => f.write_str("ENTITY_STRAY_AMBIENT"),
            SoundEnum::EntityStrayDeath => f.write_str("ENTITY_STRAY_DEATH"),
            SoundEnum::EntityStrayHurt => f.write_str("ENTITY_STRAY_HURT"),
            SoundEnum::EntityStrayStep => f.write_str("ENTITY_STRAY_STEP"),
            SoundEnum::EntityStriderAmbient => f.write_str("ENTITY_STRIDER_AMBIENT"),
            SoundEnum::EntityStriderDeath => f.write_str("ENTITY_STRIDER_DEATH"),
            SoundEnum::EntityStriderEat => f.write_str("ENTITY_STRIDER_EAT"),
            SoundEnum::EntityStriderHappy => f.write_str("ENTITY_STRIDER_HAPPY"),
            SoundEnum::EntityStriderHurt => f.write_str("ENTITY_STRIDER_HURT"),
            SoundEnum::EntityStriderRetreat => f.write_str("ENTITY_STRIDER_RETREAT"),
            SoundEnum::EntityStriderSaddle => f.write_str("ENTITY_STRIDER_SADDLE"),
            SoundEnum::EntityStriderStep => f.write_str("ENTITY_STRIDER_STEP"),
            SoundEnum::EntityStriderStepLava => f.write_str("ENTITY_STRIDER_STEP_LAVA"),
            SoundEnum::EntityTadpoleDeath => f.write_str("ENTITY_TADPOLE_DEATH"),
            SoundEnum::EntityTadpoleFlop => f.write_str("ENTITY_TADPOLE_FLOP"),
            SoundEnum::EntityTadpoleGrowUp => f.write_str("ENTITY_TADPOLE_GROW_UP"),
            SoundEnum::EntityTadpoleHurt => f.write_str("ENTITY_TADPOLE_HURT"),
            SoundEnum::EntityTntPrimed => f.write_str("ENTITY_TNT_PRIMED"),
            SoundEnum::EntityTropicalFishAmbient => f.write_str("ENTITY_TROPICAL_FISH_AMBIENT"),
            SoundEnum::EntityTropicalFishDeath => f.write_str("ENTITY_TROPICAL_FISH_DEATH"),
            SoundEnum::EntityTropicalFishFlop => f.write_str("ENTITY_TROPICAL_FISH_FLOP"),
            SoundEnum::EntityTropicalFishHurt => f.write_str("ENTITY_TROPICAL_FISH_HURT"),
            SoundEnum::EntityTurtleAmbientLand => f.write_str("ENTITY_TURTLE_AMBIENT_LAND"),
            SoundEnum::EntityTurtleDeath => f.write_str("ENTITY_TURTLE_DEATH"),
            SoundEnum::EntityTurtleDeathBaby => f.write_str("ENTITY_TURTLE_DEATH_BABY"),
            SoundEnum::EntityTurtleEggBreak => f.write_str("ENTITY_TURTLE_EGG_BREAK"),
            SoundEnum::EntityTurtleEggCrack => f.write_str("ENTITY_TURTLE_EGG_CRACK"),
            SoundEnum::EntityTurtleEggHatch => f.write_str("ENTITY_TURTLE_EGG_HATCH"),
            SoundEnum::EntityTurtleHurt => f.write_str("ENTITY_TURTLE_HURT"),
            SoundEnum::EntityTurtleHurtBaby => f.write_str("ENTITY_TURTLE_HURT_BABY"),
            SoundEnum::EntityTurtleLayEgg => f.write_str("ENTITY_TURTLE_LAY_EGG"),
            SoundEnum::EntityTurtleShamble => f.write_str("ENTITY_TURTLE_SHAMBLE"),
            SoundEnum::EntityTurtleShambleBaby => f.write_str("ENTITY_TURTLE_SHAMBLE_BABY"),
            SoundEnum::EntityTurtleSwim => f.write_str("ENTITY_TURTLE_SWIM"),
            SoundEnum::EntityVexAmbient => f.write_str("ENTITY_VEX_AMBIENT"),
            SoundEnum::EntityVexCharge => f.write_str("ENTITY_VEX_CHARGE"),
            SoundEnum::EntityVexDeath => f.write_str("ENTITY_VEX_DEATH"),
            SoundEnum::EntityVexHurt => f.write_str("ENTITY_VEX_HURT"),
            SoundEnum::EntityVillagerAmbient => f.write_str("ENTITY_VILLAGER_AMBIENT"),
            SoundEnum::EntityVillagerCelebrate => f.write_str("ENTITY_VILLAGER_CELEBRATE"),
            SoundEnum::EntityVillagerDeath => f.write_str("ENTITY_VILLAGER_DEATH"),
            SoundEnum::EntityVillagerHurt => f.write_str("ENTITY_VILLAGER_HURT"),
            SoundEnum::EntityVillagerNo => f.write_str("ENTITY_VILLAGER_NO"),
            SoundEnum::EntityVillagerTrade => f.write_str("ENTITY_VILLAGER_TRADE"),
            SoundEnum::EntityVillagerWorkArmorer => f.write_str("ENTITY_VILLAGER_WORK_ARMORER"),
            SoundEnum::EntityVillagerWorkButcher => f.write_str("ENTITY_VILLAGER_WORK_BUTCHER"),
            SoundEnum::EntityVillagerWorkCartographer => {
                f.write_str("ENTITY_VILLAGER_WORK_CARTOGRAPHER")
            }
            SoundEnum::EntityVillagerWorkCleric => f.write_str("ENTITY_VILLAGER_WORK_CLERIC"),
            SoundEnum::EntityVillagerWorkFarmer => f.write_str("ENTITY_VILLAGER_WORK_FARMER"),
            SoundEnum::EntityVillagerWorkFisherman => f.write_str("ENTITY_VILLAGER_WORK_FISHERMAN"),
            SoundEnum::EntityVillagerWorkFletcher => f.write_str("ENTITY_VILLAGER_WORK_FLETCHER"),
            SoundEnum::EntityVillagerWorkLeatherworker => {
                f.write_str("ENTITY_VILLAGER_WORK_LEATHERWORKER")
            }
            SoundEnum::EntityVillagerWorkLibrarian => f.write_str("ENTITY_VILLAGER_WORK_LIBRARIAN"),
            SoundEnum::EntityVillagerWorkMason => f.write_str("ENTITY_VILLAGER_WORK_MASON"),
            SoundEnum::EntityVillagerWorkShepherd => f.write_str("ENTITY_VILLAGER_WORK_SHEPHERD"),
            SoundEnum::EntityVillagerWorkToolsmith => f.write_str("ENTITY_VILLAGER_WORK_TOOLSMITH"),
            SoundEnum::EntityVillagerWorkWeaponsmith => {
                f.write_str("ENTITY_VILLAGER_WORK_WEAPONSMITH")
            }
            SoundEnum::EntityVillagerYes => f.write_str("ENTITY_VILLAGER_YES"),
            SoundEnum::EntityVindicatorAmbient => f.write_str("ENTITY_VINDICATOR_AMBIENT"),
            SoundEnum::EntityVindicatorCelebrate => f.write_str("ENTITY_VINDICATOR_CELEBRATE"),
            SoundEnum::EntityVindicatorDeath => f.write_str("ENTITY_VINDICATOR_DEATH"),
            SoundEnum::EntityVindicatorHurt => f.write_str("ENTITY_VINDICATOR_HURT"),
            SoundEnum::EntityWanderingTraderAmbient => {
                f.write_str("ENTITY_WANDERING_TRADER_AMBIENT")
            }
            SoundEnum::EntityWanderingTraderDeath => f.write_str("ENTITY_WANDERING_TRADER_DEATH"),
            SoundEnum::EntityWanderingTraderDisappeared => {
                f.write_str("ENTITY_WANDERING_TRADER_DISAPPEARED")
            }
            SoundEnum::EntityWanderingTraderDrinkMilk => {
                f.write_str("ENTITY_WANDERING_TRADER_DRINK_MILK")
            }
            SoundEnum::EntityWanderingTraderDrinkPotion => {
                f.write_str("ENTITY_WANDERING_TRADER_DRINK_POTION")
            }
            SoundEnum::EntityWanderingTraderHurt => f.write_str("ENTITY_WANDERING_TRADER_HURT"),
            SoundEnum::EntityWanderingTraderNo => f.write_str("ENTITY_WANDERING_TRADER_NO"),
            SoundEnum::EntityWanderingTraderReappeared => {
                f.write_str("ENTITY_WANDERING_TRADER_REAPPEARED")
            }
            SoundEnum::EntityWanderingTraderTrade => f.write_str("ENTITY_WANDERING_TRADER_TRADE"),
            SoundEnum::EntityWanderingTraderYes => f.write_str("ENTITY_WANDERING_TRADER_YES"),
            SoundEnum::EntityWardenAgitated => f.write_str("ENTITY_WARDEN_AGITATED"),
            SoundEnum::EntityWardenAmbient => f.write_str("ENTITY_WARDEN_AMBIENT"),
            SoundEnum::EntityWardenAngry => f.write_str("ENTITY_WARDEN_ANGRY"),
            SoundEnum::EntityWardenAttackImpact => f.write_str("ENTITY_WARDEN_ATTACK_IMPACT"),
            SoundEnum::EntityWardenDeath => f.write_str("ENTITY_WARDEN_DEATH"),
            SoundEnum::EntityWardenDig => f.write_str("ENTITY_WARDEN_DIG"),
            SoundEnum::EntityWardenEmerge => f.write_str("ENTITY_WARDEN_EMERGE"),
            SoundEnum::EntityWardenHeartbeat => f.write_str("ENTITY_WARDEN_HEARTBEAT"),
            SoundEnum::EntityWardenHurt => f.write_str("ENTITY_WARDEN_HURT"),
            SoundEnum::EntityWardenListening => f.write_str("ENTITY_WARDEN_LISTENING"),
            SoundEnum::EntityWardenListeningAngry => f.write_str("ENTITY_WARDEN_LISTENING_ANGRY"),
            SoundEnum::EntityWardenNearbyClose => f.write_str("ENTITY_WARDEN_NEARBY_CLOSE"),
            SoundEnum::EntityWardenNearbyCloser => f.write_str("ENTITY_WARDEN_NEARBY_CLOSER"),
            SoundEnum::EntityWardenNearbyClosest => f.write_str("ENTITY_WARDEN_NEARBY_CLOSEST"),
            SoundEnum::EntityWardenRoar => f.write_str("ENTITY_WARDEN_ROAR"),
            SoundEnum::EntityWardenSniff => f.write_str("ENTITY_WARDEN_SNIFF"),
            SoundEnum::EntityWardenSonicBoom => f.write_str("ENTITY_WARDEN_SONIC_BOOM"),
            SoundEnum::EntityWardenSonicCharge => f.write_str("ENTITY_WARDEN_SONIC_CHARGE"),
            SoundEnum::EntityWardenStep => f.write_str("ENTITY_WARDEN_STEP"),
            SoundEnum::EntityWardenTendrilClicks => f.write_str("ENTITY_WARDEN_TENDRIL_CLICKS"),
            SoundEnum::EntityWitchAmbient => f.write_str("ENTITY_WITCH_AMBIENT"),
            SoundEnum::EntityWitchCelebrate => f.write_str("ENTITY_WITCH_CELEBRATE"),
            SoundEnum::EntityWitchDeath => f.write_str("ENTITY_WITCH_DEATH"),
            SoundEnum::EntityWitchDrink => f.write_str("ENTITY_WITCH_DRINK"),
            SoundEnum::EntityWitchHurt => f.write_str("ENTITY_WITCH_HURT"),
            SoundEnum::EntityWitchThrow => f.write_str("ENTITY_WITCH_THROW"),
            SoundEnum::EntityWitherAmbient => f.write_str("ENTITY_WITHER_AMBIENT"),
            SoundEnum::EntityWitherBreakBlock => f.write_str("ENTITY_WITHER_BREAK_BLOCK"),
            SoundEnum::EntityWitherDeath => f.write_str("ENTITY_WITHER_DEATH"),
            SoundEnum::EntityWitherHurt => f.write_str("ENTITY_WITHER_HURT"),
            SoundEnum::EntityWitherShoot => f.write_str("ENTITY_WITHER_SHOOT"),
            SoundEnum::EntityWitherSkeletonAmbient => f.write_str("ENTITY_WITHER_SKELETON_AMBIENT"),
            SoundEnum::EntityWitherSkeletonDeath => f.write_str("ENTITY_WITHER_SKELETON_DEATH"),
            SoundEnum::EntityWitherSkeletonHurt => f.write_str("ENTITY_WITHER_SKELETON_HURT"),
            SoundEnum::EntityWitherSkeletonStep => f.write_str("ENTITY_WITHER_SKELETON_STEP"),
            SoundEnum::EntityWitherSpawn => f.write_str("ENTITY_WITHER_SPAWN"),
            SoundEnum::EntityWolfAmbient => f.write_str("ENTITY_WOLF_AMBIENT"),
            SoundEnum::EntityWolfDeath => f.write_str("ENTITY_WOLF_DEATH"),
            SoundEnum::EntityWolfGrowl => f.write_str("ENTITY_WOLF_GROWL"),
            SoundEnum::EntityWolfHowl => f.write_str("ENTITY_WOLF_HOWL"),
            SoundEnum::EntityWolfHurt => f.write_str("ENTITY_WOLF_HURT"),
            SoundEnum::EntityWolfPant => f.write_str("ENTITY_WOLF_PANT"),
            SoundEnum::EntityWolfShake => f.write_str("ENTITY_WOLF_SHAKE"),
            SoundEnum::EntityWolfStep => f.write_str("ENTITY_WOLF_STEP"),
            SoundEnum::EntityWolfWhine => f.write_str("ENTITY_WOLF_WHINE"),
            SoundEnum::EntityZoglinAmbient => f.write_str("ENTITY_ZOGLIN_AMBIENT"),
            SoundEnum::EntityZoglinAngry => f.write_str("ENTITY_ZOGLIN_ANGRY"),
            SoundEnum::EntityZoglinAttack => f.write_str("ENTITY_ZOGLIN_ATTACK"),
            SoundEnum::EntityZoglinDeath => f.write_str("ENTITY_ZOGLIN_DEATH"),
            SoundEnum::EntityZoglinHurt => f.write_str("ENTITY_ZOGLIN_HURT"),
            SoundEnum::EntityZoglinStep => f.write_str("ENTITY_ZOGLIN_STEP"),
            SoundEnum::EntityZombieAmbient => f.write_str("ENTITY_ZOMBIE_AMBIENT"),
            SoundEnum::EntityZombieAttackIronDoor => f.write_str("ENTITY_ZOMBIE_ATTACK_IRON_DOOR"),
            SoundEnum::EntityZombieAttackWoodenDoor => {
                f.write_str("ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR")
            }
            SoundEnum::EntityZombieBreakWoodenDoor => {
                f.write_str("ENTITY_ZOMBIE_BREAK_WOODEN_DOOR")
            }
            SoundEnum::EntityZombieConvertedToDrowned => {
                f.write_str("ENTITY_ZOMBIE_CONVERTED_TO_DROWNED")
            }
            SoundEnum::EntityZombieDeath => f.write_str("ENTITY_ZOMBIE_DEATH"),
            SoundEnum::EntityZombieDestroyEgg => f.write_str("ENTITY_ZOMBIE_DESTROY_EGG"),
            SoundEnum::EntityZombieHorseAmbient => f.write_str("ENTITY_ZOMBIE_HORSE_AMBIENT"),
            SoundEnum::EntityZombieHorseDeath => f.write_str("ENTITY_ZOMBIE_HORSE_DEATH"),
            SoundEnum::EntityZombieHorseHurt => f.write_str("ENTITY_ZOMBIE_HORSE_HURT"),
            SoundEnum::EntityZombieHurt => f.write_str("ENTITY_ZOMBIE_HURT"),
            SoundEnum::EntityZombieInfect => f.write_str("ENTITY_ZOMBIE_INFECT"),
            SoundEnum::EntityZombieStep => f.write_str("ENTITY_ZOMBIE_STEP"),
            SoundEnum::EntityZombieVillagerAmbient => f.write_str("ENTITY_ZOMBIE_VILLAGER_AMBIENT"),
            SoundEnum::EntityZombieVillagerConverted => {
                f.write_str("ENTITY_ZOMBIE_VILLAGER_CONVERTED")
            }
            SoundEnum::EntityZombieVillagerCure => f.write_str("ENTITY_ZOMBIE_VILLAGER_CURE"),
            SoundEnum::EntityZombieVillagerDeath => f.write_str("ENTITY_ZOMBIE_VILLAGER_DEATH"),
            SoundEnum::EntityZombieVillagerHurt => f.write_str("ENTITY_ZOMBIE_VILLAGER_HURT"),
            SoundEnum::EntityZombieVillagerStep => f.write_str("ENTITY_ZOMBIE_VILLAGER_STEP"),
            SoundEnum::EntityZombifiedPiglinAmbient => {
                f.write_str("ENTITY_ZOMBIFIED_PIGLIN_AMBIENT")
            }
            SoundEnum::EntityZombifiedPiglinAngry => f.write_str("ENTITY_ZOMBIFIED_PIGLIN_ANGRY"),
            SoundEnum::EntityZombifiedPiglinDeath => f.write_str("ENTITY_ZOMBIFIED_PIGLIN_DEATH"),
            SoundEnum::EntityZombifiedPiglinHurt => f.write_str("ENTITY_ZOMBIFIED_PIGLIN_HURT"),
            SoundEnum::EventRaidHorn => f.write_str("EVENT_RAID_HORN"),
            SoundEnum::IntentionallyEmpty => f.write_str("INTENTIONALLY_EMPTY"),
            SoundEnum::ItemArmorEquipChain => f.write_str("ITEM_ARMOR_EQUIP_CHAIN"),
            SoundEnum::ItemArmorEquipDiamond => f.write_str("ITEM_ARMOR_EQUIP_DIAMOND"),
            SoundEnum::ItemArmorEquipElytra => f.write_str("ITEM_ARMOR_EQUIP_ELYTRA"),
            SoundEnum::ItemArmorEquipGeneric => f.write_str("ITEM_ARMOR_EQUIP_GENERIC"),
            SoundEnum::ItemArmorEquipGold => f.write_str("ITEM_ARMOR_EQUIP_GOLD"),
            SoundEnum::ItemArmorEquipIron => f.write_str("ITEM_ARMOR_EQUIP_IRON"),
            SoundEnum::ItemArmorEquipLeather => f.write_str("ITEM_ARMOR_EQUIP_LEATHER"),
            SoundEnum::ItemArmorEquipNetherite => f.write_str("ITEM_ARMOR_EQUIP_NETHERITE"),
            SoundEnum::ItemArmorEquipTurtle => f.write_str("ITEM_ARMOR_EQUIP_TURTLE"),
            SoundEnum::ItemAxeScrape => f.write_str("ITEM_AXE_SCRAPE"),
            SoundEnum::ItemAxeStrip => f.write_str("ITEM_AXE_STRIP"),
            SoundEnum::ItemAxeWaxOff => f.write_str("ITEM_AXE_WAX_OFF"),
            SoundEnum::ItemBoneMealUse => f.write_str("ITEM_BONE_MEAL_USE"),
            SoundEnum::ItemBookPageTurn => f.write_str("ITEM_BOOK_PAGE_TURN"),
            SoundEnum::ItemBookPut => f.write_str("ITEM_BOOK_PUT"),
            SoundEnum::ItemBottleEmpty => f.write_str("ITEM_BOTTLE_EMPTY"),
            SoundEnum::ItemBottleFill => f.write_str("ITEM_BOTTLE_FILL"),
            SoundEnum::ItemBottleFillDragonbreath => f.write_str("ITEM_BOTTLE_FILL_DRAGONBREATH"),
            SoundEnum::ItemBrushBrushingGeneric => f.write_str("ITEM_BRUSH_BRUSHING_GENERIC"),
            SoundEnum::ItemBrushBrushingGravel => f.write_str("ITEM_BRUSH_BRUSHING_GRAVEL"),
            SoundEnum::ItemBrushBrushingGravelComplete => {
                f.write_str("ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE")
            }
            SoundEnum::ItemBrushBrushingSand => f.write_str("ITEM_BRUSH_BRUSHING_SAND"),
            SoundEnum::ItemBrushBrushingSandComplete => {
                f.write_str("ITEM_BRUSH_BRUSHING_SAND_COMPLETE")
            }
            SoundEnum::ItemBucketEmpty => f.write_str("ITEM_BUCKET_EMPTY"),
            SoundEnum::ItemBucketEmptyAxolotl => f.write_str("ITEM_BUCKET_EMPTY_AXOLOTL"),
            SoundEnum::ItemBucketEmptyFish => f.write_str("ITEM_BUCKET_EMPTY_FISH"),
            SoundEnum::ItemBucketEmptyLava => f.write_str("ITEM_BUCKET_EMPTY_LAVA"),
            SoundEnum::ItemBucketEmptyPowderSnow => f.write_str("ITEM_BUCKET_EMPTY_POWDER_SNOW"),
            SoundEnum::ItemBucketEmptyTadpole => f.write_str("ITEM_BUCKET_EMPTY_TADPOLE"),
            SoundEnum::ItemBucketFill => f.write_str("ITEM_BUCKET_FILL"),
            SoundEnum::ItemBucketFillAxolotl => f.write_str("ITEM_BUCKET_FILL_AXOLOTL"),
            SoundEnum::ItemBucketFillFish => f.write_str("ITEM_BUCKET_FILL_FISH"),
            SoundEnum::ItemBucketFillLava => f.write_str("ITEM_BUCKET_FILL_LAVA"),
            SoundEnum::ItemBucketFillPowderSnow => f.write_str("ITEM_BUCKET_FILL_POWDER_SNOW"),
            SoundEnum::ItemBucketFillTadpole => f.write_str("ITEM_BUCKET_FILL_TADPOLE"),
            SoundEnum::ItemBundleDropContents => f.write_str("ITEM_BUNDLE_DROP_CONTENTS"),
            SoundEnum::ItemBundleInsert => f.write_str("ITEM_BUNDLE_INSERT"),
            SoundEnum::ItemBundleRemoveOne => f.write_str("ITEM_BUNDLE_REMOVE_ONE"),
            SoundEnum::ItemChorusFruitTeleport => f.write_str("ITEM_CHORUS_FRUIT_TELEPORT"),
            SoundEnum::ItemCropPlant => f.write_str("ITEM_CROP_PLANT"),
            SoundEnum::ItemCrossbowHit => f.write_str("ITEM_CROSSBOW_HIT"),
            SoundEnum::ItemCrossbowLoadingEnd => f.write_str("ITEM_CROSSBOW_LOADING_END"),
            SoundEnum::ItemCrossbowLoadingMiddle => f.write_str("ITEM_CROSSBOW_LOADING_MIDDLE"),
            SoundEnum::ItemCrossbowLoadingStart => f.write_str("ITEM_CROSSBOW_LOADING_START"),
            SoundEnum::ItemCrossbowQuickCharge1 => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_1"),
            SoundEnum::ItemCrossbowQuickCharge2 => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_2"),
            SoundEnum::ItemCrossbowQuickCharge3 => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_3"),
            SoundEnum::ItemCrossbowShoot => f.write_str("ITEM_CROSSBOW_SHOOT"),
            SoundEnum::ItemDyeUse => f.write_str("ITEM_DYE_USE"),
            SoundEnum::ItemElytraFlying => f.write_str("ITEM_ELYTRA_FLYING"),
            SoundEnum::ItemFirechargeUse => f.write_str("ITEM_FIRECHARGE_USE"),
            SoundEnum::ItemFlintandsteelUse => f.write_str("ITEM_FLINTANDSTEEL_USE"),
            SoundEnum::ItemGlowInkSacUse => f.write_str("ITEM_GLOW_INK_SAC_USE"),
            SoundEnum::ItemGoatHornPlay => f.write_str("ITEM_GOAT_HORN_PLAY"),
            SoundEnum::ItemGoatHornSound0 => f.write_str("ITEM_GOAT_HORN_SOUND_0"),
            SoundEnum::ItemGoatHornSound1 => f.write_str("ITEM_GOAT_HORN_SOUND_1"),
            SoundEnum::ItemGoatHornSound2 => f.write_str("ITEM_GOAT_HORN_SOUND_2"),
            SoundEnum::ItemGoatHornSound3 => f.write_str("ITEM_GOAT_HORN_SOUND_3"),
            SoundEnum::ItemGoatHornSound4 => f.write_str("ITEM_GOAT_HORN_SOUND_4"),
            SoundEnum::ItemGoatHornSound5 => f.write_str("ITEM_GOAT_HORN_SOUND_5"),
            SoundEnum::ItemGoatHornSound6 => f.write_str("ITEM_GOAT_HORN_SOUND_6"),
            SoundEnum::ItemGoatHornSound7 => f.write_str("ITEM_GOAT_HORN_SOUND_7"),
            SoundEnum::ItemHoeTill => f.write_str("ITEM_HOE_TILL"),
            SoundEnum::ItemHoneycombWaxOn => f.write_str("ITEM_HONEYCOMB_WAX_ON"),
            SoundEnum::ItemHoneyBottleDrink => f.write_str("ITEM_HONEY_BOTTLE_DRINK"),
            SoundEnum::ItemInkSacUse => f.write_str("ITEM_INK_SAC_USE"),
            SoundEnum::ItemLodestoneCompassLock => f.write_str("ITEM_LODESTONE_COMPASS_LOCK"),
            SoundEnum::ItemNetherWartPlant => f.write_str("ITEM_NETHER_WART_PLANT"),
            SoundEnum::ItemShieldBlock => f.write_str("ITEM_SHIELD_BLOCK"),
            SoundEnum::ItemShieldBreak => f.write_str("ITEM_SHIELD_BREAK"),
            SoundEnum::ItemShovelFlatten => f.write_str("ITEM_SHOVEL_FLATTEN"),
            SoundEnum::ItemSpyglassStopUsing => f.write_str("ITEM_SPYGLASS_STOP_USING"),
            SoundEnum::ItemSpyglassUse => f.write_str("ITEM_SPYGLASS_USE"),
            SoundEnum::ItemTotemUse => f.write_str("ITEM_TOTEM_USE"),
            SoundEnum::ItemTridentHit => f.write_str("ITEM_TRIDENT_HIT"),
            SoundEnum::ItemTridentHitGround => f.write_str("ITEM_TRIDENT_HIT_GROUND"),
            SoundEnum::ItemTridentReturn => f.write_str("ITEM_TRIDENT_RETURN"),
            SoundEnum::ItemTridentRiptide1 => f.write_str("ITEM_TRIDENT_RIPTIDE_1"),
            SoundEnum::ItemTridentRiptide2 => f.write_str("ITEM_TRIDENT_RIPTIDE_2"),
            SoundEnum::ItemTridentRiptide3 => f.write_str("ITEM_TRIDENT_RIPTIDE_3"),
            SoundEnum::ItemTridentThrow => f.write_str("ITEM_TRIDENT_THROW"),
            SoundEnum::ItemTridentThunder => f.write_str("ITEM_TRIDENT_THUNDER"),
            SoundEnum::MusicCreative => f.write_str("MUSIC_CREATIVE"),
            SoundEnum::MusicCredits => f.write_str("MUSIC_CREDITS"),
            SoundEnum::MusicDisc11 => f.write_str("MUSIC_DISC_11"),
            SoundEnum::MusicDisc13 => f.write_str("MUSIC_DISC_13"),
            SoundEnum::MusicDisc5 => f.write_str("MUSIC_DISC_5"),
            SoundEnum::MusicDiscBlocks => f.write_str("MUSIC_DISC_BLOCKS"),
            SoundEnum::MusicDiscCat => f.write_str("MUSIC_DISC_CAT"),
            SoundEnum::MusicDiscChirp => f.write_str("MUSIC_DISC_CHIRP"),
            SoundEnum::MusicDiscFar => f.write_str("MUSIC_DISC_FAR"),
            SoundEnum::MusicDiscMall => f.write_str("MUSIC_DISC_MALL"),
            SoundEnum::MusicDiscMellohi => f.write_str("MUSIC_DISC_MELLOHI"),
            SoundEnum::MusicDiscOtherside => f.write_str("MUSIC_DISC_OTHERSIDE"),
            SoundEnum::MusicDiscPigstep => f.write_str("MUSIC_DISC_PIGSTEP"),
            SoundEnum::MusicDiscRelic => f.write_str("MUSIC_DISC_RELIC"),
            SoundEnum::MusicDiscStal => f.write_str("MUSIC_DISC_STAL"),
            SoundEnum::MusicDiscStrad => f.write_str("MUSIC_DISC_STRAD"),
            SoundEnum::MusicDiscWait => f.write_str("MUSIC_DISC_WAIT"),
            SoundEnum::MusicDiscWard => f.write_str("MUSIC_DISC_WARD"),
            SoundEnum::MusicDragon => f.write_str("MUSIC_DRAGON"),
            SoundEnum::MusicEnd => f.write_str("MUSIC_END"),
            SoundEnum::MusicGame => f.write_str("MUSIC_GAME"),
            SoundEnum::MusicMenu => f.write_str("MUSIC_MENU"),
            SoundEnum::MusicNetherBasaltDeltas => f.write_str("MUSIC_NETHER_BASALT_DELTAS"),
            SoundEnum::MusicNetherCrimsonForest => f.write_str("MUSIC_NETHER_CRIMSON_FOREST"),
            SoundEnum::MusicNetherNetherWastes => f.write_str("MUSIC_NETHER_NETHER_WASTES"),
            SoundEnum::MusicNetherSoulSandValley => f.write_str("MUSIC_NETHER_SOUL_SAND_VALLEY"),
            SoundEnum::MusicNetherWarpedForest => f.write_str("MUSIC_NETHER_WARPED_FOREST"),
            SoundEnum::MusicOverworldBadlands => f.write_str("MUSIC_OVERWORLD_BADLANDS"),
            SoundEnum::MusicOverworldBambooJungle => f.write_str("MUSIC_OVERWORLD_BAMBOO_JUNGLE"),
            SoundEnum::MusicOverworldCherryGrove => f.write_str("MUSIC_OVERWORLD_CHERRY_GROVE"),
            SoundEnum::MusicOverworldDeepDark => f.write_str("MUSIC_OVERWORLD_DEEP_DARK"),
            SoundEnum::MusicOverworldDesert => f.write_str("MUSIC_OVERWORLD_DESERT"),
            SoundEnum::MusicOverworldDripstoneCaves => {
                f.write_str("MUSIC_OVERWORLD_DRIPSTONE_CAVES")
            }
            SoundEnum::MusicOverworldFlowerForest => f.write_str("MUSIC_OVERWORLD_FLOWER_FOREST"),
            SoundEnum::MusicOverworldForest => f.write_str("MUSIC_OVERWORLD_FOREST"),
            SoundEnum::MusicOverworldFrozenPeaks => f.write_str("MUSIC_OVERWORLD_FROZEN_PEAKS"),
            SoundEnum::MusicOverworldGrove => f.write_str("MUSIC_OVERWORLD_GROVE"),
            SoundEnum::MusicOverworldJaggedPeaks => f.write_str("MUSIC_OVERWORLD_JAGGED_PEAKS"),
            SoundEnum::MusicOverworldJungle => f.write_str("MUSIC_OVERWORLD_JUNGLE"),
            SoundEnum::MusicOverworldLushCaves => f.write_str("MUSIC_OVERWORLD_LUSH_CAVES"),
            SoundEnum::MusicOverworldMeadow => f.write_str("MUSIC_OVERWORLD_MEADOW"),
            SoundEnum::MusicOverworldOldGrowthTaiga => {
                f.write_str("MUSIC_OVERWORLD_OLD_GROWTH_TAIGA")
            }
            SoundEnum::MusicOverworldSnowySlopes => f.write_str("MUSIC_OVERWORLD_SNOWY_SLOPES"),
            SoundEnum::MusicOverworldSparseJungle => f.write_str("MUSIC_OVERWORLD_SPARSE_JUNGLE"),
            SoundEnum::MusicOverworldStonyPeaks => f.write_str("MUSIC_OVERWORLD_STONY_PEAKS"),
            SoundEnum::MusicOverworldSwamp => f.write_str("MUSIC_OVERWORLD_SWAMP"),
            SoundEnum::MusicUnderWater => f.write_str("MUSIC_UNDER_WATER"),
            SoundEnum::ParticleSoulEscape => f.write_str("PARTICLE_SOUL_ESCAPE"),
            SoundEnum::UiButtonClick => f.write_str("UI_BUTTON_CLICK"),
            SoundEnum::UiCartographyTableTakeResult => {
                f.write_str("UI_CARTOGRAPHY_TABLE_TAKE_RESULT")
            }
            SoundEnum::UiLoomSelectPattern => f.write_str("UI_LOOM_SELECT_PATTERN"),
            SoundEnum::UiLoomTakeResult => f.write_str("UI_LOOM_TAKE_RESULT"),
            SoundEnum::UiStonecutterSelectRecipe => f.write_str("UI_STONECUTTER_SELECT_RECIPE"),
            SoundEnum::UiStonecutterTakeResult => f.write_str("UI_STONECUTTER_TAKE_RESULT"),
            SoundEnum::UiToastChallengeComplete => f.write_str("UI_TOAST_CHALLENGE_COMPLETE"),
            SoundEnum::UiToastIn => f.write_str("UI_TOAST_IN"),
            SoundEnum::UiToastOut => f.write_str("UI_TOAST_OUT"),
            SoundEnum::WeatherRain => f.write_str("WEATHER_RAIN"),
            SoundEnum::WeatherRainAbove => f.write_str("WEATHER_RAIN_ABOVE"),
        }
    }
}
pub struct Sound<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub SoundEnum,
);
impl<'mc> std::ops::Deref for Sound<'mc> {
    type Target = SoundEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for Sound<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Sound<'mc> {
    pub const AMBIENTBASALTDELTASADDITIONS: SoundEnum = SoundEnum::AmbientBasaltDeltasAdditions;
    pub const AMBIENTBASALTDELTASLOOP: SoundEnum = SoundEnum::AmbientBasaltDeltasLoop;
    pub const AMBIENTBASALTDELTASMOOD: SoundEnum = SoundEnum::AmbientBasaltDeltasMood;
    pub const AMBIENTCAVE: SoundEnum = SoundEnum::AmbientCave;
    pub const AMBIENTCRIMSONFORESTADDITIONS: SoundEnum = SoundEnum::AmbientCrimsonForestAdditions;
    pub const AMBIENTCRIMSONFORESTLOOP: SoundEnum = SoundEnum::AmbientCrimsonForestLoop;
    pub const AMBIENTCRIMSONFORESTMOOD: SoundEnum = SoundEnum::AmbientCrimsonForestMood;
    pub const AMBIENTNETHERWASTESADDITIONS: SoundEnum = SoundEnum::AmbientNetherWastesAdditions;
    pub const AMBIENTNETHERWASTESLOOP: SoundEnum = SoundEnum::AmbientNetherWastesLoop;
    pub const AMBIENTNETHERWASTESMOOD: SoundEnum = SoundEnum::AmbientNetherWastesMood;
    pub const AMBIENTSOULSANDVALLEYADDITIONS: SoundEnum = SoundEnum::AmbientSoulSandValleyAdditions;
    pub const AMBIENTSOULSANDVALLEYLOOP: SoundEnum = SoundEnum::AmbientSoulSandValleyLoop;
    pub const AMBIENTSOULSANDVALLEYMOOD: SoundEnum = SoundEnum::AmbientSoulSandValleyMood;
    pub const AMBIENTUNDERWATERENTER: SoundEnum = SoundEnum::AmbientUnderwaterEnter;
    pub const AMBIENTUNDERWATEREXIT: SoundEnum = SoundEnum::AmbientUnderwaterExit;
    pub const AMBIENTUNDERWATERLOOP: SoundEnum = SoundEnum::AmbientUnderwaterLoop;
    pub const AMBIENTUNDERWATERLOOPADDITIONS: SoundEnum = SoundEnum::AmbientUnderwaterLoopAdditions;
    pub const AMBIENTUNDERWATERLOOPADDITIONSRARE: SoundEnum =
        SoundEnum::AmbientUnderwaterLoopAdditionsRare;
    pub const AMBIENTUNDERWATERLOOPADDITIONSULTRARARE: SoundEnum =
        SoundEnum::AmbientUnderwaterLoopAdditionsUltraRare;
    pub const AMBIENTWARPEDFORESTADDITIONS: SoundEnum = SoundEnum::AmbientWarpedForestAdditions;
    pub const AMBIENTWARPEDFORESTLOOP: SoundEnum = SoundEnum::AmbientWarpedForestLoop;
    pub const AMBIENTWARPEDFORESTMOOD: SoundEnum = SoundEnum::AmbientWarpedForestMood;
    pub const BLOCKAMETHYSTBLOCKBREAK: SoundEnum = SoundEnum::BlockAmethystBlockBreak;
    pub const BLOCKAMETHYSTBLOCKCHIME: SoundEnum = SoundEnum::BlockAmethystBlockChime;
    pub const BLOCKAMETHYSTBLOCKFALL: SoundEnum = SoundEnum::BlockAmethystBlockFall;
    pub const BLOCKAMETHYSTBLOCKHIT: SoundEnum = SoundEnum::BlockAmethystBlockHit;
    pub const BLOCKAMETHYSTBLOCKPLACE: SoundEnum = SoundEnum::BlockAmethystBlockPlace;
    pub const BLOCKAMETHYSTBLOCKRESONATE: SoundEnum = SoundEnum::BlockAmethystBlockResonate;
    pub const BLOCKAMETHYSTBLOCKSTEP: SoundEnum = SoundEnum::BlockAmethystBlockStep;
    pub const BLOCKAMETHYSTCLUSTERBREAK: SoundEnum = SoundEnum::BlockAmethystClusterBreak;
    pub const BLOCKAMETHYSTCLUSTERFALL: SoundEnum = SoundEnum::BlockAmethystClusterFall;
    pub const BLOCKAMETHYSTCLUSTERHIT: SoundEnum = SoundEnum::BlockAmethystClusterHit;
    pub const BLOCKAMETHYSTCLUSTERPLACE: SoundEnum = SoundEnum::BlockAmethystClusterPlace;
    pub const BLOCKAMETHYSTCLUSTERSTEP: SoundEnum = SoundEnum::BlockAmethystClusterStep;
    pub const BLOCKANCIENTDEBRISBREAK: SoundEnum = SoundEnum::BlockAncientDebrisBreak;
    pub const BLOCKANCIENTDEBRISFALL: SoundEnum = SoundEnum::BlockAncientDebrisFall;
    pub const BLOCKANCIENTDEBRISHIT: SoundEnum = SoundEnum::BlockAncientDebrisHit;
    pub const BLOCKANCIENTDEBRISPLACE: SoundEnum = SoundEnum::BlockAncientDebrisPlace;
    pub const BLOCKANCIENTDEBRISSTEP: SoundEnum = SoundEnum::BlockAncientDebrisStep;
    pub const BLOCKANVILBREAK: SoundEnum = SoundEnum::BlockAnvilBreak;
    pub const BLOCKANVILDESTROY: SoundEnum = SoundEnum::BlockAnvilDestroy;
    pub const BLOCKANVILFALL: SoundEnum = SoundEnum::BlockAnvilFall;
    pub const BLOCKANVILHIT: SoundEnum = SoundEnum::BlockAnvilHit;
    pub const BLOCKANVILLAND: SoundEnum = SoundEnum::BlockAnvilLand;
    pub const BLOCKANVILPLACE: SoundEnum = SoundEnum::BlockAnvilPlace;
    pub const BLOCKANVILSTEP: SoundEnum = SoundEnum::BlockAnvilStep;
    pub const BLOCKANVILUSE: SoundEnum = SoundEnum::BlockAnvilUse;
    pub const BLOCKAZALEABREAK: SoundEnum = SoundEnum::BlockAzaleaBreak;
    pub const BLOCKAZALEAFALL: SoundEnum = SoundEnum::BlockAzaleaFall;
    pub const BLOCKAZALEAHIT: SoundEnum = SoundEnum::BlockAzaleaHit;
    pub const BLOCKAZALEALEAVESBREAK: SoundEnum = SoundEnum::BlockAzaleaLeavesBreak;
    pub const BLOCKAZALEALEAVESFALL: SoundEnum = SoundEnum::BlockAzaleaLeavesFall;
    pub const BLOCKAZALEALEAVESHIT: SoundEnum = SoundEnum::BlockAzaleaLeavesHit;
    pub const BLOCKAZALEALEAVESPLACE: SoundEnum = SoundEnum::BlockAzaleaLeavesPlace;
    pub const BLOCKAZALEALEAVESSTEP: SoundEnum = SoundEnum::BlockAzaleaLeavesStep;
    pub const BLOCKAZALEAPLACE: SoundEnum = SoundEnum::BlockAzaleaPlace;
    pub const BLOCKAZALEASTEP: SoundEnum = SoundEnum::BlockAzaleaStep;
    pub const BLOCKBAMBOOBREAK: SoundEnum = SoundEnum::BlockBambooBreak;
    pub const BLOCKBAMBOOFALL: SoundEnum = SoundEnum::BlockBambooFall;
    pub const BLOCKBAMBOOHIT: SoundEnum = SoundEnum::BlockBambooHit;
    pub const BLOCKBAMBOOPLACE: SoundEnum = SoundEnum::BlockBambooPlace;
    pub const BLOCKBAMBOOSAPLINGBREAK: SoundEnum = SoundEnum::BlockBambooSaplingBreak;
    pub const BLOCKBAMBOOSAPLINGHIT: SoundEnum = SoundEnum::BlockBambooSaplingHit;
    pub const BLOCKBAMBOOSAPLINGPLACE: SoundEnum = SoundEnum::BlockBambooSaplingPlace;
    pub const BLOCKBAMBOOSTEP: SoundEnum = SoundEnum::BlockBambooStep;
    pub const BLOCKBAMBOOWOODBREAK: SoundEnum = SoundEnum::BlockBambooWoodBreak;
    pub const BLOCKBAMBOOWOODBUTTONCLICKOFF: SoundEnum = SoundEnum::BlockBambooWoodButtonClickOff;
    pub const BLOCKBAMBOOWOODBUTTONCLICKON: SoundEnum = SoundEnum::BlockBambooWoodButtonClickOn;
    pub const BLOCKBAMBOOWOODDOORCLOSE: SoundEnum = SoundEnum::BlockBambooWoodDoorClose;
    pub const BLOCKBAMBOOWOODDOOROPEN: SoundEnum = SoundEnum::BlockBambooWoodDoorOpen;
    pub const BLOCKBAMBOOWOODFALL: SoundEnum = SoundEnum::BlockBambooWoodFall;
    pub const BLOCKBAMBOOWOODFENCEGATECLOSE: SoundEnum = SoundEnum::BlockBambooWoodFenceGateClose;
    pub const BLOCKBAMBOOWOODFENCEGATEOPEN: SoundEnum = SoundEnum::BlockBambooWoodFenceGateOpen;
    pub const BLOCKBAMBOOWOODHANGINGSIGNBREAK: SoundEnum =
        SoundEnum::BlockBambooWoodHangingSignBreak;
    pub const BLOCKBAMBOOWOODHANGINGSIGNFALL: SoundEnum = SoundEnum::BlockBambooWoodHangingSignFall;
    pub const BLOCKBAMBOOWOODHANGINGSIGNHIT: SoundEnum = SoundEnum::BlockBambooWoodHangingSignHit;
    pub const BLOCKBAMBOOWOODHANGINGSIGNPLACE: SoundEnum =
        SoundEnum::BlockBambooWoodHangingSignPlace;
    pub const BLOCKBAMBOOWOODHANGINGSIGNSTEP: SoundEnum = SoundEnum::BlockBambooWoodHangingSignStep;
    pub const BLOCKBAMBOOWOODHIT: SoundEnum = SoundEnum::BlockBambooWoodHit;
    pub const BLOCKBAMBOOWOODPLACE: SoundEnum = SoundEnum::BlockBambooWoodPlace;
    pub const BLOCKBAMBOOWOODPRESSUREPLATECLICKOFF: SoundEnum =
        SoundEnum::BlockBambooWoodPressurePlateClickOff;
    pub const BLOCKBAMBOOWOODPRESSUREPLATECLICKON: SoundEnum =
        SoundEnum::BlockBambooWoodPressurePlateClickOn;
    pub const BLOCKBAMBOOWOODSTEP: SoundEnum = SoundEnum::BlockBambooWoodStep;
    pub const BLOCKBAMBOOWOODTRAPDOORCLOSE: SoundEnum = SoundEnum::BlockBambooWoodTrapdoorClose;
    pub const BLOCKBAMBOOWOODTRAPDOOROPEN: SoundEnum = SoundEnum::BlockBambooWoodTrapdoorOpen;
    pub const BLOCKBARRELCLOSE: SoundEnum = SoundEnum::BlockBarrelClose;
    pub const BLOCKBARRELOPEN: SoundEnum = SoundEnum::BlockBarrelOpen;
    pub const BLOCKBASALTBREAK: SoundEnum = SoundEnum::BlockBasaltBreak;
    pub const BLOCKBASALTFALL: SoundEnum = SoundEnum::BlockBasaltFall;
    pub const BLOCKBASALTHIT: SoundEnum = SoundEnum::BlockBasaltHit;
    pub const BLOCKBASALTPLACE: SoundEnum = SoundEnum::BlockBasaltPlace;
    pub const BLOCKBASALTSTEP: SoundEnum = SoundEnum::BlockBasaltStep;
    pub const BLOCKBEACONACTIVATE: SoundEnum = SoundEnum::BlockBeaconActivate;
    pub const BLOCKBEACONAMBIENT: SoundEnum = SoundEnum::BlockBeaconAmbient;
    pub const BLOCKBEACONDEACTIVATE: SoundEnum = SoundEnum::BlockBeaconDeactivate;
    pub const BLOCKBEACONPOWERSELECT: SoundEnum = SoundEnum::BlockBeaconPowerSelect;
    pub const BLOCKBEEHIVEDRIP: SoundEnum = SoundEnum::BlockBeehiveDrip;
    pub const BLOCKBEEHIVEENTER: SoundEnum = SoundEnum::BlockBeehiveEnter;
    pub const BLOCKBEEHIVEEXIT: SoundEnum = SoundEnum::BlockBeehiveExit;
    pub const BLOCKBEEHIVESHEAR: SoundEnum = SoundEnum::BlockBeehiveShear;
    pub const BLOCKBEEHIVEWORK: SoundEnum = SoundEnum::BlockBeehiveWork;
    pub const BLOCKBELLRESONATE: SoundEnum = SoundEnum::BlockBellResonate;
    pub const BLOCKBELLUSE: SoundEnum = SoundEnum::BlockBellUse;
    pub const BLOCKBIGDRIPLEAFBREAK: SoundEnum = SoundEnum::BlockBigDripleafBreak;
    pub const BLOCKBIGDRIPLEAFFALL: SoundEnum = SoundEnum::BlockBigDripleafFall;
    pub const BLOCKBIGDRIPLEAFHIT: SoundEnum = SoundEnum::BlockBigDripleafHit;
    pub const BLOCKBIGDRIPLEAFPLACE: SoundEnum = SoundEnum::BlockBigDripleafPlace;
    pub const BLOCKBIGDRIPLEAFSTEP: SoundEnum = SoundEnum::BlockBigDripleafStep;
    pub const BLOCKBIGDRIPLEAFTILTDOWN: SoundEnum = SoundEnum::BlockBigDripleafTiltDown;
    pub const BLOCKBIGDRIPLEAFTILTUP: SoundEnum = SoundEnum::BlockBigDripleafTiltUp;
    pub const BLOCKBLASTFURNACEFIRECRACKLE: SoundEnum = SoundEnum::BlockBlastfurnaceFireCrackle;
    pub const BLOCKBONEBLOCKBREAK: SoundEnum = SoundEnum::BlockBoneBlockBreak;
    pub const BLOCKBONEBLOCKFALL: SoundEnum = SoundEnum::BlockBoneBlockFall;
    pub const BLOCKBONEBLOCKHIT: SoundEnum = SoundEnum::BlockBoneBlockHit;
    pub const BLOCKBONEBLOCKPLACE: SoundEnum = SoundEnum::BlockBoneBlockPlace;
    pub const BLOCKBONEBLOCKSTEP: SoundEnum = SoundEnum::BlockBoneBlockStep;
    pub const BLOCKBREWINGSTANDBREW: SoundEnum = SoundEnum::BlockBrewingStandBrew;
    pub const BLOCKBUBBLECOLUMNBUBBLEPOP: SoundEnum = SoundEnum::BlockBubbleColumnBubblePop;
    pub const BLOCKBUBBLECOLUMNUPWARDSAMBIENT: SoundEnum =
        SoundEnum::BlockBubbleColumnUpwardsAmbient;
    pub const BLOCKBUBBLECOLUMNUPWARDSINSIDE: SoundEnum = SoundEnum::BlockBubbleColumnUpwardsInside;
    pub const BLOCKBUBBLECOLUMNWHIRLPOOLAMBIENT: SoundEnum =
        SoundEnum::BlockBubbleColumnWhirlpoolAmbient;
    pub const BLOCKBUBBLECOLUMNWHIRLPOOLINSIDE: SoundEnum =
        SoundEnum::BlockBubbleColumnWhirlpoolInside;
    pub const BLOCKCAKEADDCANDLE: SoundEnum = SoundEnum::BlockCakeAddCandle;
    pub const BLOCKCALCITEBREAK: SoundEnum = SoundEnum::BlockCalciteBreak;
    pub const BLOCKCALCITEFALL: SoundEnum = SoundEnum::BlockCalciteFall;
    pub const BLOCKCALCITEHIT: SoundEnum = SoundEnum::BlockCalciteHit;
    pub const BLOCKCALCITEPLACE: SoundEnum = SoundEnum::BlockCalcitePlace;
    pub const BLOCKCALCITESTEP: SoundEnum = SoundEnum::BlockCalciteStep;
    pub const BLOCKCAMPFIRECRACKLE: SoundEnum = SoundEnum::BlockCampfireCrackle;
    pub const BLOCKCANDLEAMBIENT: SoundEnum = SoundEnum::BlockCandleAmbient;
    pub const BLOCKCANDLEBREAK: SoundEnum = SoundEnum::BlockCandleBreak;
    pub const BLOCKCANDLEEXTINGUISH: SoundEnum = SoundEnum::BlockCandleExtinguish;
    pub const BLOCKCANDLEFALL: SoundEnum = SoundEnum::BlockCandleFall;
    pub const BLOCKCANDLEHIT: SoundEnum = SoundEnum::BlockCandleHit;
    pub const BLOCKCANDLEPLACE: SoundEnum = SoundEnum::BlockCandlePlace;
    pub const BLOCKCANDLESTEP: SoundEnum = SoundEnum::BlockCandleStep;
    pub const BLOCKCAVEVINESBREAK: SoundEnum = SoundEnum::BlockCaveVinesBreak;
    pub const BLOCKCAVEVINESFALL: SoundEnum = SoundEnum::BlockCaveVinesFall;
    pub const BLOCKCAVEVINESHIT: SoundEnum = SoundEnum::BlockCaveVinesHit;
    pub const BLOCKCAVEVINESPICKBERRIES: SoundEnum = SoundEnum::BlockCaveVinesPickBerries;
    pub const BLOCKCAVEVINESPLACE: SoundEnum = SoundEnum::BlockCaveVinesPlace;
    pub const BLOCKCAVEVINESSTEP: SoundEnum = SoundEnum::BlockCaveVinesStep;
    pub const BLOCKCHAINBREAK: SoundEnum = SoundEnum::BlockChainBreak;
    pub const BLOCKCHAINFALL: SoundEnum = SoundEnum::BlockChainFall;
    pub const BLOCKCHAINHIT: SoundEnum = SoundEnum::BlockChainHit;
    pub const BLOCKCHAINPLACE: SoundEnum = SoundEnum::BlockChainPlace;
    pub const BLOCKCHAINSTEP: SoundEnum = SoundEnum::BlockChainStep;
    pub const BLOCKCHERRYLEAVESBREAK: SoundEnum = SoundEnum::BlockCherryLeavesBreak;
    pub const BLOCKCHERRYLEAVESFALL: SoundEnum = SoundEnum::BlockCherryLeavesFall;
    pub const BLOCKCHERRYLEAVESHIT: SoundEnum = SoundEnum::BlockCherryLeavesHit;
    pub const BLOCKCHERRYLEAVESPLACE: SoundEnum = SoundEnum::BlockCherryLeavesPlace;
    pub const BLOCKCHERRYLEAVESSTEP: SoundEnum = SoundEnum::BlockCherryLeavesStep;
    pub const BLOCKCHERRYSAPLINGBREAK: SoundEnum = SoundEnum::BlockCherrySaplingBreak;
    pub const BLOCKCHERRYSAPLINGFALL: SoundEnum = SoundEnum::BlockCherrySaplingFall;
    pub const BLOCKCHERRYSAPLINGHIT: SoundEnum = SoundEnum::BlockCherrySaplingHit;
    pub const BLOCKCHERRYSAPLINGPLACE: SoundEnum = SoundEnum::BlockCherrySaplingPlace;
    pub const BLOCKCHERRYSAPLINGSTEP: SoundEnum = SoundEnum::BlockCherrySaplingStep;
    pub const BLOCKCHERRYWOODBREAK: SoundEnum = SoundEnum::BlockCherryWoodBreak;
    pub const BLOCKCHERRYWOODBUTTONCLICKOFF: SoundEnum = SoundEnum::BlockCherryWoodButtonClickOff;
    pub const BLOCKCHERRYWOODBUTTONCLICKON: SoundEnum = SoundEnum::BlockCherryWoodButtonClickOn;
    pub const BLOCKCHERRYWOODDOORCLOSE: SoundEnum = SoundEnum::BlockCherryWoodDoorClose;
    pub const BLOCKCHERRYWOODDOOROPEN: SoundEnum = SoundEnum::BlockCherryWoodDoorOpen;
    pub const BLOCKCHERRYWOODFALL: SoundEnum = SoundEnum::BlockCherryWoodFall;
    pub const BLOCKCHERRYWOODFENCEGATECLOSE: SoundEnum = SoundEnum::BlockCherryWoodFenceGateClose;
    pub const BLOCKCHERRYWOODFENCEGATEOPEN: SoundEnum = SoundEnum::BlockCherryWoodFenceGateOpen;
    pub const BLOCKCHERRYWOODHANGINGSIGNBREAK: SoundEnum =
        SoundEnum::BlockCherryWoodHangingSignBreak;
    pub const BLOCKCHERRYWOODHANGINGSIGNFALL: SoundEnum = SoundEnum::BlockCherryWoodHangingSignFall;
    pub const BLOCKCHERRYWOODHANGINGSIGNHIT: SoundEnum = SoundEnum::BlockCherryWoodHangingSignHit;
    pub const BLOCKCHERRYWOODHANGINGSIGNPLACE: SoundEnum =
        SoundEnum::BlockCherryWoodHangingSignPlace;
    pub const BLOCKCHERRYWOODHANGINGSIGNSTEP: SoundEnum = SoundEnum::BlockCherryWoodHangingSignStep;
    pub const BLOCKCHERRYWOODHIT: SoundEnum = SoundEnum::BlockCherryWoodHit;
    pub const BLOCKCHERRYWOODPLACE: SoundEnum = SoundEnum::BlockCherryWoodPlace;
    pub const BLOCKCHERRYWOODPRESSUREPLATECLICKOFF: SoundEnum =
        SoundEnum::BlockCherryWoodPressurePlateClickOff;
    pub const BLOCKCHERRYWOODPRESSUREPLATECLICKON: SoundEnum =
        SoundEnum::BlockCherryWoodPressurePlateClickOn;
    pub const BLOCKCHERRYWOODSTEP: SoundEnum = SoundEnum::BlockCherryWoodStep;
    pub const BLOCKCHERRYWOODTRAPDOORCLOSE: SoundEnum = SoundEnum::BlockCherryWoodTrapdoorClose;
    pub const BLOCKCHERRYWOODTRAPDOOROPEN: SoundEnum = SoundEnum::BlockCherryWoodTrapdoorOpen;
    pub const BLOCKCHESTCLOSE: SoundEnum = SoundEnum::BlockChestClose;
    pub const BLOCKCHESTLOCKED: SoundEnum = SoundEnum::BlockChestLocked;
    pub const BLOCKCHESTOPEN: SoundEnum = SoundEnum::BlockChestOpen;
    pub const BLOCKCHISELEDBOOKSHELFBREAK: SoundEnum = SoundEnum::BlockChiseledBookshelfBreak;
    pub const BLOCKCHISELEDBOOKSHELFFALL: SoundEnum = SoundEnum::BlockChiseledBookshelfFall;
    pub const BLOCKCHISELEDBOOKSHELFHIT: SoundEnum = SoundEnum::BlockChiseledBookshelfHit;
    pub const BLOCKCHISELEDBOOKSHELFINSERT: SoundEnum = SoundEnum::BlockChiseledBookshelfInsert;
    pub const BLOCKCHISELEDBOOKSHELFINSERTENCHANTED: SoundEnum =
        SoundEnum::BlockChiseledBookshelfInsertEnchanted;
    pub const BLOCKCHISELEDBOOKSHELFPICKUP: SoundEnum = SoundEnum::BlockChiseledBookshelfPickup;
    pub const BLOCKCHISELEDBOOKSHELFPICKUPENCHANTED: SoundEnum =
        SoundEnum::BlockChiseledBookshelfPickupEnchanted;
    pub const BLOCKCHISELEDBOOKSHELFPLACE: SoundEnum = SoundEnum::BlockChiseledBookshelfPlace;
    pub const BLOCKCHISELEDBOOKSHELFSTEP: SoundEnum = SoundEnum::BlockChiseledBookshelfStep;
    pub const BLOCKCHORUSFLOWERDEATH: SoundEnum = SoundEnum::BlockChorusFlowerDeath;
    pub const BLOCKCHORUSFLOWERGROW: SoundEnum = SoundEnum::BlockChorusFlowerGrow;
    pub const BLOCKCOMPARATORCLICK: SoundEnum = SoundEnum::BlockComparatorClick;
    pub const BLOCKCOMPOSTEREMPTY: SoundEnum = SoundEnum::BlockComposterEmpty;
    pub const BLOCKCOMPOSTERFILL: SoundEnum = SoundEnum::BlockComposterFill;
    pub const BLOCKCOMPOSTERFILLSUCCESS: SoundEnum = SoundEnum::BlockComposterFillSuccess;
    pub const BLOCKCOMPOSTERREADY: SoundEnum = SoundEnum::BlockComposterReady;
    pub const BLOCKCONDUITACTIVATE: SoundEnum = SoundEnum::BlockConduitActivate;
    pub const BLOCKCONDUITAMBIENT: SoundEnum = SoundEnum::BlockConduitAmbient;
    pub const BLOCKCONDUITAMBIENTSHORT: SoundEnum = SoundEnum::BlockConduitAmbientShort;
    pub const BLOCKCONDUITATTACKTARGET: SoundEnum = SoundEnum::BlockConduitAttackTarget;
    pub const BLOCKCONDUITDEACTIVATE: SoundEnum = SoundEnum::BlockConduitDeactivate;
    pub const BLOCKCOPPERBREAK: SoundEnum = SoundEnum::BlockCopperBreak;
    pub const BLOCKCOPPERFALL: SoundEnum = SoundEnum::BlockCopperFall;
    pub const BLOCKCOPPERHIT: SoundEnum = SoundEnum::BlockCopperHit;
    pub const BLOCKCOPPERPLACE: SoundEnum = SoundEnum::BlockCopperPlace;
    pub const BLOCKCOPPERSTEP: SoundEnum = SoundEnum::BlockCopperStep;
    pub const BLOCKCORALBLOCKBREAK: SoundEnum = SoundEnum::BlockCoralBlockBreak;
    pub const BLOCKCORALBLOCKFALL: SoundEnum = SoundEnum::BlockCoralBlockFall;
    pub const BLOCKCORALBLOCKHIT: SoundEnum = SoundEnum::BlockCoralBlockHit;
    pub const BLOCKCORALBLOCKPLACE: SoundEnum = SoundEnum::BlockCoralBlockPlace;
    pub const BLOCKCORALBLOCKSTEP: SoundEnum = SoundEnum::BlockCoralBlockStep;
    pub const BLOCKCROPBREAK: SoundEnum = SoundEnum::BlockCropBreak;
    pub const BLOCKDECORATEDPOTBREAK: SoundEnum = SoundEnum::BlockDecoratedPotBreak;
    pub const BLOCKDECORATEDPOTFALL: SoundEnum = SoundEnum::BlockDecoratedPotFall;
    pub const BLOCKDECORATEDPOTHIT: SoundEnum = SoundEnum::BlockDecoratedPotHit;
    pub const BLOCKDECORATEDPOTPLACE: SoundEnum = SoundEnum::BlockDecoratedPotPlace;
    pub const BLOCKDECORATEDPOTSHATTER: SoundEnum = SoundEnum::BlockDecoratedPotShatter;
    pub const BLOCKDECORATEDPOTSTEP: SoundEnum = SoundEnum::BlockDecoratedPotStep;
    pub const BLOCKDEEPSLATEBREAK: SoundEnum = SoundEnum::BlockDeepslateBreak;
    pub const BLOCKDEEPSLATEBRICKSBREAK: SoundEnum = SoundEnum::BlockDeepslateBricksBreak;
    pub const BLOCKDEEPSLATEBRICKSFALL: SoundEnum = SoundEnum::BlockDeepslateBricksFall;
    pub const BLOCKDEEPSLATEBRICKSHIT: SoundEnum = SoundEnum::BlockDeepslateBricksHit;
    pub const BLOCKDEEPSLATEBRICKSPLACE: SoundEnum = SoundEnum::BlockDeepslateBricksPlace;
    pub const BLOCKDEEPSLATEBRICKSSTEP: SoundEnum = SoundEnum::BlockDeepslateBricksStep;
    pub const BLOCKDEEPSLATEFALL: SoundEnum = SoundEnum::BlockDeepslateFall;
    pub const BLOCKDEEPSLATEHIT: SoundEnum = SoundEnum::BlockDeepslateHit;
    pub const BLOCKDEEPSLATEPLACE: SoundEnum = SoundEnum::BlockDeepslatePlace;
    pub const BLOCKDEEPSLATESTEP: SoundEnum = SoundEnum::BlockDeepslateStep;
    pub const BLOCKDEEPSLATETILESBREAK: SoundEnum = SoundEnum::BlockDeepslateTilesBreak;
    pub const BLOCKDEEPSLATETILESFALL: SoundEnum = SoundEnum::BlockDeepslateTilesFall;
    pub const BLOCKDEEPSLATETILESHIT: SoundEnum = SoundEnum::BlockDeepslateTilesHit;
    pub const BLOCKDEEPSLATETILESPLACE: SoundEnum = SoundEnum::BlockDeepslateTilesPlace;
    pub const BLOCKDEEPSLATETILESSTEP: SoundEnum = SoundEnum::BlockDeepslateTilesStep;
    pub const BLOCKDISPENSERDISPENSE: SoundEnum = SoundEnum::BlockDispenserDispense;
    pub const BLOCKDISPENSERFAIL: SoundEnum = SoundEnum::BlockDispenserFail;
    pub const BLOCKDISPENSERLAUNCH: SoundEnum = SoundEnum::BlockDispenserLaunch;
    pub const BLOCKDRIPSTONEBLOCKBREAK: SoundEnum = SoundEnum::BlockDripstoneBlockBreak;
    pub const BLOCKDRIPSTONEBLOCKFALL: SoundEnum = SoundEnum::BlockDripstoneBlockFall;
    pub const BLOCKDRIPSTONEBLOCKHIT: SoundEnum = SoundEnum::BlockDripstoneBlockHit;
    pub const BLOCKDRIPSTONEBLOCKPLACE: SoundEnum = SoundEnum::BlockDripstoneBlockPlace;
    pub const BLOCKDRIPSTONEBLOCKSTEP: SoundEnum = SoundEnum::BlockDripstoneBlockStep;
    pub const BLOCKENCHANTMENTTABLEUSE: SoundEnum = SoundEnum::BlockEnchantmentTableUse;
    pub const BLOCKENDERCHESTCLOSE: SoundEnum = SoundEnum::BlockEnderChestClose;
    pub const BLOCKENDERCHESTOPEN: SoundEnum = SoundEnum::BlockEnderChestOpen;
    pub const BLOCKENDGATEWAYSPAWN: SoundEnum = SoundEnum::BlockEndGatewaySpawn;
    pub const BLOCKENDPORTALFRAMEFILL: SoundEnum = SoundEnum::BlockEndPortalFrameFill;
    pub const BLOCKENDPORTALSPAWN: SoundEnum = SoundEnum::BlockEndPortalSpawn;
    pub const BLOCKFENCEGATECLOSE: SoundEnum = SoundEnum::BlockFenceGateClose;
    pub const BLOCKFENCEGATEOPEN: SoundEnum = SoundEnum::BlockFenceGateOpen;
    pub const BLOCKFIREAMBIENT: SoundEnum = SoundEnum::BlockFireAmbient;
    pub const BLOCKFIREEXTINGUISH: SoundEnum = SoundEnum::BlockFireExtinguish;
    pub const BLOCKFLOWERINGAZALEABREAK: SoundEnum = SoundEnum::BlockFloweringAzaleaBreak;
    pub const BLOCKFLOWERINGAZALEAFALL: SoundEnum = SoundEnum::BlockFloweringAzaleaFall;
    pub const BLOCKFLOWERINGAZALEAHIT: SoundEnum = SoundEnum::BlockFloweringAzaleaHit;
    pub const BLOCKFLOWERINGAZALEAPLACE: SoundEnum = SoundEnum::BlockFloweringAzaleaPlace;
    pub const BLOCKFLOWERINGAZALEASTEP: SoundEnum = SoundEnum::BlockFloweringAzaleaStep;
    pub const BLOCKFROGLIGHTBREAK: SoundEnum = SoundEnum::BlockFroglightBreak;
    pub const BLOCKFROGLIGHTFALL: SoundEnum = SoundEnum::BlockFroglightFall;
    pub const BLOCKFROGLIGHTHIT: SoundEnum = SoundEnum::BlockFroglightHit;
    pub const BLOCKFROGLIGHTPLACE: SoundEnum = SoundEnum::BlockFroglightPlace;
    pub const BLOCKFROGLIGHTSTEP: SoundEnum = SoundEnum::BlockFroglightStep;
    pub const BLOCKFROGSPAWNBREAK: SoundEnum = SoundEnum::BlockFrogspawnBreak;
    pub const BLOCKFROGSPAWNFALL: SoundEnum = SoundEnum::BlockFrogspawnFall;
    pub const BLOCKFROGSPAWNHATCH: SoundEnum = SoundEnum::BlockFrogspawnHatch;
    pub const BLOCKFROGSPAWNHIT: SoundEnum = SoundEnum::BlockFrogspawnHit;
    pub const BLOCKFROGSPAWNPLACE: SoundEnum = SoundEnum::BlockFrogspawnPlace;
    pub const BLOCKFROGSPAWNSTEP: SoundEnum = SoundEnum::BlockFrogspawnStep;
    pub const BLOCKFUNGUSBREAK: SoundEnum = SoundEnum::BlockFungusBreak;
    pub const BLOCKFUNGUSFALL: SoundEnum = SoundEnum::BlockFungusFall;
    pub const BLOCKFUNGUSHIT: SoundEnum = SoundEnum::BlockFungusHit;
    pub const BLOCKFUNGUSPLACE: SoundEnum = SoundEnum::BlockFungusPlace;
    pub const BLOCKFUNGUSSTEP: SoundEnum = SoundEnum::BlockFungusStep;
    pub const BLOCKFURNACEFIRECRACKLE: SoundEnum = SoundEnum::BlockFurnaceFireCrackle;
    pub const BLOCKGILDEDBLACKSTONEBREAK: SoundEnum = SoundEnum::BlockGildedBlackstoneBreak;
    pub const BLOCKGILDEDBLACKSTONEFALL: SoundEnum = SoundEnum::BlockGildedBlackstoneFall;
    pub const BLOCKGILDEDBLACKSTONEHIT: SoundEnum = SoundEnum::BlockGildedBlackstoneHit;
    pub const BLOCKGILDEDBLACKSTONEPLACE: SoundEnum = SoundEnum::BlockGildedBlackstonePlace;
    pub const BLOCKGILDEDBLACKSTONESTEP: SoundEnum = SoundEnum::BlockGildedBlackstoneStep;
    pub const BLOCKGLASSBREAK: SoundEnum = SoundEnum::BlockGlassBreak;
    pub const BLOCKGLASSFALL: SoundEnum = SoundEnum::BlockGlassFall;
    pub const BLOCKGLASSHIT: SoundEnum = SoundEnum::BlockGlassHit;
    pub const BLOCKGLASSPLACE: SoundEnum = SoundEnum::BlockGlassPlace;
    pub const BLOCKGLASSSTEP: SoundEnum = SoundEnum::BlockGlassStep;
    pub const BLOCKGRASSBREAK: SoundEnum = SoundEnum::BlockGrassBreak;
    pub const BLOCKGRASSFALL: SoundEnum = SoundEnum::BlockGrassFall;
    pub const BLOCKGRASSHIT: SoundEnum = SoundEnum::BlockGrassHit;
    pub const BLOCKGRASSPLACE: SoundEnum = SoundEnum::BlockGrassPlace;
    pub const BLOCKGRASSSTEP: SoundEnum = SoundEnum::BlockGrassStep;
    pub const BLOCKGRAVELBREAK: SoundEnum = SoundEnum::BlockGravelBreak;
    pub const BLOCKGRAVELFALL: SoundEnum = SoundEnum::BlockGravelFall;
    pub const BLOCKGRAVELHIT: SoundEnum = SoundEnum::BlockGravelHit;
    pub const BLOCKGRAVELPLACE: SoundEnum = SoundEnum::BlockGravelPlace;
    pub const BLOCKGRAVELSTEP: SoundEnum = SoundEnum::BlockGravelStep;
    pub const BLOCKGRINDSTONEUSE: SoundEnum = SoundEnum::BlockGrindstoneUse;
    pub const BLOCKGROWINGPLANTCROP: SoundEnum = SoundEnum::BlockGrowingPlantCrop;
    pub const BLOCKHANGINGROOTSBREAK: SoundEnum = SoundEnum::BlockHangingRootsBreak;
    pub const BLOCKHANGINGROOTSFALL: SoundEnum = SoundEnum::BlockHangingRootsFall;
    pub const BLOCKHANGINGROOTSHIT: SoundEnum = SoundEnum::BlockHangingRootsHit;
    pub const BLOCKHANGINGROOTSPLACE: SoundEnum = SoundEnum::BlockHangingRootsPlace;
    pub const BLOCKHANGINGROOTSSTEP: SoundEnum = SoundEnum::BlockHangingRootsStep;
    pub const BLOCKHANGINGSIGNBREAK: SoundEnum = SoundEnum::BlockHangingSignBreak;
    pub const BLOCKHANGINGSIGNFALL: SoundEnum = SoundEnum::BlockHangingSignFall;
    pub const BLOCKHANGINGSIGNHIT: SoundEnum = SoundEnum::BlockHangingSignHit;
    pub const BLOCKHANGINGSIGNPLACE: SoundEnum = SoundEnum::BlockHangingSignPlace;
    pub const BLOCKHANGINGSIGNSTEP: SoundEnum = SoundEnum::BlockHangingSignStep;
    pub const BLOCKHONEYBLOCKBREAK: SoundEnum = SoundEnum::BlockHoneyBlockBreak;
    pub const BLOCKHONEYBLOCKFALL: SoundEnum = SoundEnum::BlockHoneyBlockFall;
    pub const BLOCKHONEYBLOCKHIT: SoundEnum = SoundEnum::BlockHoneyBlockHit;
    pub const BLOCKHONEYBLOCKPLACE: SoundEnum = SoundEnum::BlockHoneyBlockPlace;
    pub const BLOCKHONEYBLOCKSLIDE: SoundEnum = SoundEnum::BlockHoneyBlockSlide;
    pub const BLOCKHONEYBLOCKSTEP: SoundEnum = SoundEnum::BlockHoneyBlockStep;
    pub const BLOCKIRONDOORCLOSE: SoundEnum = SoundEnum::BlockIronDoorClose;
    pub const BLOCKIRONDOOROPEN: SoundEnum = SoundEnum::BlockIronDoorOpen;
    pub const BLOCKIRONTRAPDOORCLOSE: SoundEnum = SoundEnum::BlockIronTrapdoorClose;
    pub const BLOCKIRONTRAPDOOROPEN: SoundEnum = SoundEnum::BlockIronTrapdoorOpen;
    pub const BLOCKLADDERBREAK: SoundEnum = SoundEnum::BlockLadderBreak;
    pub const BLOCKLADDERFALL: SoundEnum = SoundEnum::BlockLadderFall;
    pub const BLOCKLADDERHIT: SoundEnum = SoundEnum::BlockLadderHit;
    pub const BLOCKLADDERPLACE: SoundEnum = SoundEnum::BlockLadderPlace;
    pub const BLOCKLADDERSTEP: SoundEnum = SoundEnum::BlockLadderStep;
    pub const BLOCKLANTERNBREAK: SoundEnum = SoundEnum::BlockLanternBreak;
    pub const BLOCKLANTERNFALL: SoundEnum = SoundEnum::BlockLanternFall;
    pub const BLOCKLANTERNHIT: SoundEnum = SoundEnum::BlockLanternHit;
    pub const BLOCKLANTERNPLACE: SoundEnum = SoundEnum::BlockLanternPlace;
    pub const BLOCKLANTERNSTEP: SoundEnum = SoundEnum::BlockLanternStep;
    pub const BLOCKLARGEAMETHYSTBUDBREAK: SoundEnum = SoundEnum::BlockLargeAmethystBudBreak;
    pub const BLOCKLARGEAMETHYSTBUDPLACE: SoundEnum = SoundEnum::BlockLargeAmethystBudPlace;
    pub const BLOCKLAVAAMBIENT: SoundEnum = SoundEnum::BlockLavaAmbient;
    pub const BLOCKLAVAEXTINGUISH: SoundEnum = SoundEnum::BlockLavaExtinguish;
    pub const BLOCKLAVAPOP: SoundEnum = SoundEnum::BlockLavaPop;
    pub const BLOCKLEVERCLICK: SoundEnum = SoundEnum::BlockLeverClick;
    pub const BLOCKLILYPADPLACE: SoundEnum = SoundEnum::BlockLilyPadPlace;
    pub const BLOCKLODESTONEBREAK: SoundEnum = SoundEnum::BlockLodestoneBreak;
    pub const BLOCKLODESTONEFALL: SoundEnum = SoundEnum::BlockLodestoneFall;
    pub const BLOCKLODESTONEHIT: SoundEnum = SoundEnum::BlockLodestoneHit;
    pub const BLOCKLODESTONEPLACE: SoundEnum = SoundEnum::BlockLodestonePlace;
    pub const BLOCKLODESTONESTEP: SoundEnum = SoundEnum::BlockLodestoneStep;
    pub const BLOCKMANGROVEROOTSBREAK: SoundEnum = SoundEnum::BlockMangroveRootsBreak;
    pub const BLOCKMANGROVEROOTSFALL: SoundEnum = SoundEnum::BlockMangroveRootsFall;
    pub const BLOCKMANGROVEROOTSHIT: SoundEnum = SoundEnum::BlockMangroveRootsHit;
    pub const BLOCKMANGROVEROOTSPLACE: SoundEnum = SoundEnum::BlockMangroveRootsPlace;
    pub const BLOCKMANGROVEROOTSSTEP: SoundEnum = SoundEnum::BlockMangroveRootsStep;
    pub const BLOCKMEDIUMAMETHYSTBUDBREAK: SoundEnum = SoundEnum::BlockMediumAmethystBudBreak;
    pub const BLOCKMEDIUMAMETHYSTBUDPLACE: SoundEnum = SoundEnum::BlockMediumAmethystBudPlace;
    pub const BLOCKMETALBREAK: SoundEnum = SoundEnum::BlockMetalBreak;
    pub const BLOCKMETALFALL: SoundEnum = SoundEnum::BlockMetalFall;
    pub const BLOCKMETALHIT: SoundEnum = SoundEnum::BlockMetalHit;
    pub const BLOCKMETALPLACE: SoundEnum = SoundEnum::BlockMetalPlace;
    pub const BLOCKMETALPRESSUREPLATECLICKOFF: SoundEnum =
        SoundEnum::BlockMetalPressurePlateClickOff;
    pub const BLOCKMETALPRESSUREPLATECLICKON: SoundEnum = SoundEnum::BlockMetalPressurePlateClickOn;
    pub const BLOCKMETALSTEP: SoundEnum = SoundEnum::BlockMetalStep;
    pub const BLOCKMOSSBREAK: SoundEnum = SoundEnum::BlockMossBreak;
    pub const BLOCKMOSSCARPETBREAK: SoundEnum = SoundEnum::BlockMossCarpetBreak;
    pub const BLOCKMOSSCARPETFALL: SoundEnum = SoundEnum::BlockMossCarpetFall;
    pub const BLOCKMOSSCARPETHIT: SoundEnum = SoundEnum::BlockMossCarpetHit;
    pub const BLOCKMOSSCARPETPLACE: SoundEnum = SoundEnum::BlockMossCarpetPlace;
    pub const BLOCKMOSSCARPETSTEP: SoundEnum = SoundEnum::BlockMossCarpetStep;
    pub const BLOCKMOSSFALL: SoundEnum = SoundEnum::BlockMossFall;
    pub const BLOCKMOSSHIT: SoundEnum = SoundEnum::BlockMossHit;
    pub const BLOCKMOSSPLACE: SoundEnum = SoundEnum::BlockMossPlace;
    pub const BLOCKMOSSSTEP: SoundEnum = SoundEnum::BlockMossStep;
    pub const BLOCKMUDDYMANGROVEROOTSBREAK: SoundEnum = SoundEnum::BlockMuddyMangroveRootsBreak;
    pub const BLOCKMUDDYMANGROVEROOTSFALL: SoundEnum = SoundEnum::BlockMuddyMangroveRootsFall;
    pub const BLOCKMUDDYMANGROVEROOTSHIT: SoundEnum = SoundEnum::BlockMuddyMangroveRootsHit;
    pub const BLOCKMUDDYMANGROVEROOTSPLACE: SoundEnum = SoundEnum::BlockMuddyMangroveRootsPlace;
    pub const BLOCKMUDDYMANGROVEROOTSSTEP: SoundEnum = SoundEnum::BlockMuddyMangroveRootsStep;
    pub const BLOCKMUDBREAK: SoundEnum = SoundEnum::BlockMudBreak;
    pub const BLOCKMUDBRICKSBREAK: SoundEnum = SoundEnum::BlockMudBricksBreak;
    pub const BLOCKMUDBRICKSFALL: SoundEnum = SoundEnum::BlockMudBricksFall;
    pub const BLOCKMUDBRICKSHIT: SoundEnum = SoundEnum::BlockMudBricksHit;
    pub const BLOCKMUDBRICKSPLACE: SoundEnum = SoundEnum::BlockMudBricksPlace;
    pub const BLOCKMUDBRICKSSTEP: SoundEnum = SoundEnum::BlockMudBricksStep;
    pub const BLOCKMUDFALL: SoundEnum = SoundEnum::BlockMudFall;
    pub const BLOCKMUDHIT: SoundEnum = SoundEnum::BlockMudHit;
    pub const BLOCKMUDPLACE: SoundEnum = SoundEnum::BlockMudPlace;
    pub const BLOCKMUDSTEP: SoundEnum = SoundEnum::BlockMudStep;
    pub const BLOCKNETHERITEBLOCKBREAK: SoundEnum = SoundEnum::BlockNetheriteBlockBreak;
    pub const BLOCKNETHERITEBLOCKFALL: SoundEnum = SoundEnum::BlockNetheriteBlockFall;
    pub const BLOCKNETHERITEBLOCKHIT: SoundEnum = SoundEnum::BlockNetheriteBlockHit;
    pub const BLOCKNETHERITEBLOCKPLACE: SoundEnum = SoundEnum::BlockNetheriteBlockPlace;
    pub const BLOCKNETHERITEBLOCKSTEP: SoundEnum = SoundEnum::BlockNetheriteBlockStep;
    pub const BLOCKNETHERRACKBREAK: SoundEnum = SoundEnum::BlockNetherrackBreak;
    pub const BLOCKNETHERRACKFALL: SoundEnum = SoundEnum::BlockNetherrackFall;
    pub const BLOCKNETHERRACKHIT: SoundEnum = SoundEnum::BlockNetherrackHit;
    pub const BLOCKNETHERRACKPLACE: SoundEnum = SoundEnum::BlockNetherrackPlace;
    pub const BLOCKNETHERRACKSTEP: SoundEnum = SoundEnum::BlockNetherrackStep;
    pub const BLOCKNETHERBRICKSBREAK: SoundEnum = SoundEnum::BlockNetherBricksBreak;
    pub const BLOCKNETHERBRICKSFALL: SoundEnum = SoundEnum::BlockNetherBricksFall;
    pub const BLOCKNETHERBRICKSHIT: SoundEnum = SoundEnum::BlockNetherBricksHit;
    pub const BLOCKNETHERBRICKSPLACE: SoundEnum = SoundEnum::BlockNetherBricksPlace;
    pub const BLOCKNETHERBRICKSSTEP: SoundEnum = SoundEnum::BlockNetherBricksStep;
    pub const BLOCKNETHERGOLDOREBREAK: SoundEnum = SoundEnum::BlockNetherGoldOreBreak;
    pub const BLOCKNETHERGOLDOREFALL: SoundEnum = SoundEnum::BlockNetherGoldOreFall;
    pub const BLOCKNETHERGOLDOREHIT: SoundEnum = SoundEnum::BlockNetherGoldOreHit;
    pub const BLOCKNETHERGOLDOREPLACE: SoundEnum = SoundEnum::BlockNetherGoldOrePlace;
    pub const BLOCKNETHERGOLDORESTEP: SoundEnum = SoundEnum::BlockNetherGoldOreStep;
    pub const BLOCKNETHEROREBREAK: SoundEnum = SoundEnum::BlockNetherOreBreak;
    pub const BLOCKNETHEROREFALL: SoundEnum = SoundEnum::BlockNetherOreFall;
    pub const BLOCKNETHEROREHIT: SoundEnum = SoundEnum::BlockNetherOreHit;
    pub const BLOCKNETHEROREPLACE: SoundEnum = SoundEnum::BlockNetherOrePlace;
    pub const BLOCKNETHERORESTEP: SoundEnum = SoundEnum::BlockNetherOreStep;
    pub const BLOCKNETHERSPROUTSBREAK: SoundEnum = SoundEnum::BlockNetherSproutsBreak;
    pub const BLOCKNETHERSPROUTSFALL: SoundEnum = SoundEnum::BlockNetherSproutsFall;
    pub const BLOCKNETHERSPROUTSHIT: SoundEnum = SoundEnum::BlockNetherSproutsHit;
    pub const BLOCKNETHERSPROUTSPLACE: SoundEnum = SoundEnum::BlockNetherSproutsPlace;
    pub const BLOCKNETHERSPROUTSSTEP: SoundEnum = SoundEnum::BlockNetherSproutsStep;
    pub const BLOCKNETHERWARTBREAK: SoundEnum = SoundEnum::BlockNetherWartBreak;
    pub const BLOCKNETHERWOODBREAK: SoundEnum = SoundEnum::BlockNetherWoodBreak;
    pub const BLOCKNETHERWOODBUTTONCLICKOFF: SoundEnum = SoundEnum::BlockNetherWoodButtonClickOff;
    pub const BLOCKNETHERWOODBUTTONCLICKON: SoundEnum = SoundEnum::BlockNetherWoodButtonClickOn;
    pub const BLOCKNETHERWOODDOORCLOSE: SoundEnum = SoundEnum::BlockNetherWoodDoorClose;
    pub const BLOCKNETHERWOODDOOROPEN: SoundEnum = SoundEnum::BlockNetherWoodDoorOpen;
    pub const BLOCKNETHERWOODFALL: SoundEnum = SoundEnum::BlockNetherWoodFall;
    pub const BLOCKNETHERWOODFENCEGATECLOSE: SoundEnum = SoundEnum::BlockNetherWoodFenceGateClose;
    pub const BLOCKNETHERWOODFENCEGATEOPEN: SoundEnum = SoundEnum::BlockNetherWoodFenceGateOpen;
    pub const BLOCKNETHERWOODHANGINGSIGNBREAK: SoundEnum =
        SoundEnum::BlockNetherWoodHangingSignBreak;
    pub const BLOCKNETHERWOODHANGINGSIGNFALL: SoundEnum = SoundEnum::BlockNetherWoodHangingSignFall;
    pub const BLOCKNETHERWOODHANGINGSIGNHIT: SoundEnum = SoundEnum::BlockNetherWoodHangingSignHit;
    pub const BLOCKNETHERWOODHANGINGSIGNPLACE: SoundEnum =
        SoundEnum::BlockNetherWoodHangingSignPlace;
    pub const BLOCKNETHERWOODHANGINGSIGNSTEP: SoundEnum = SoundEnum::BlockNetherWoodHangingSignStep;
    pub const BLOCKNETHERWOODHIT: SoundEnum = SoundEnum::BlockNetherWoodHit;
    pub const BLOCKNETHERWOODPLACE: SoundEnum = SoundEnum::BlockNetherWoodPlace;
    pub const BLOCKNETHERWOODPRESSUREPLATECLICKOFF: SoundEnum =
        SoundEnum::BlockNetherWoodPressurePlateClickOff;
    pub const BLOCKNETHERWOODPRESSUREPLATECLICKON: SoundEnum =
        SoundEnum::BlockNetherWoodPressurePlateClickOn;
    pub const BLOCKNETHERWOODSTEP: SoundEnum = SoundEnum::BlockNetherWoodStep;
    pub const BLOCKNETHERWOODTRAPDOORCLOSE: SoundEnum = SoundEnum::BlockNetherWoodTrapdoorClose;
    pub const BLOCKNETHERWOODTRAPDOOROPEN: SoundEnum = SoundEnum::BlockNetherWoodTrapdoorOpen;
    pub const BLOCKNOTEBLOCKBANJO: SoundEnum = SoundEnum::BlockNoteBlockBanjo;
    pub const BLOCKNOTEBLOCKBASEDRUM: SoundEnum = SoundEnum::BlockNoteBlockBasedrum;
    pub const BLOCKNOTEBLOCKBASS: SoundEnum = SoundEnum::BlockNoteBlockBass;
    pub const BLOCKNOTEBLOCKBELL: SoundEnum = SoundEnum::BlockNoteBlockBell;
    pub const BLOCKNOTEBLOCKBIT: SoundEnum = SoundEnum::BlockNoteBlockBit;
    pub const BLOCKNOTEBLOCKCHIME: SoundEnum = SoundEnum::BlockNoteBlockChime;
    pub const BLOCKNOTEBLOCKCOWBELL: SoundEnum = SoundEnum::BlockNoteBlockCowBell;
    pub const BLOCKNOTEBLOCKDIDGERIDOO: SoundEnum = SoundEnum::BlockNoteBlockDidgeridoo;
    pub const BLOCKNOTEBLOCKFLUTE: SoundEnum = SoundEnum::BlockNoteBlockFlute;
    pub const BLOCKNOTEBLOCKGUITAR: SoundEnum = SoundEnum::BlockNoteBlockGuitar;
    pub const BLOCKNOTEBLOCKHARP: SoundEnum = SoundEnum::BlockNoteBlockHarp;
    pub const BLOCKNOTEBLOCKHAT: SoundEnum = SoundEnum::BlockNoteBlockHat;
    pub const BLOCKNOTEBLOCKIMITATECREEPER: SoundEnum = SoundEnum::BlockNoteBlockImitateCreeper;
    pub const BLOCKNOTEBLOCKIMITATEENDERDRAGON: SoundEnum =
        SoundEnum::BlockNoteBlockImitateEnderDragon;
    pub const BLOCKNOTEBLOCKIMITATEPIGLIN: SoundEnum = SoundEnum::BlockNoteBlockImitatePiglin;
    pub const BLOCKNOTEBLOCKIMITATESKELETON: SoundEnum = SoundEnum::BlockNoteBlockImitateSkeleton;
    pub const BLOCKNOTEBLOCKIMITATEWITHERSKELETON: SoundEnum =
        SoundEnum::BlockNoteBlockImitateWitherSkeleton;
    pub const BLOCKNOTEBLOCKIMITATEZOMBIE: SoundEnum = SoundEnum::BlockNoteBlockImitateZombie;
    pub const BLOCKNOTEBLOCKIRONXYLOPHONE: SoundEnum = SoundEnum::BlockNoteBlockIronXylophone;
    pub const BLOCKNOTEBLOCKPLING: SoundEnum = SoundEnum::BlockNoteBlockPling;
    pub const BLOCKNOTEBLOCKSNARE: SoundEnum = SoundEnum::BlockNoteBlockSnare;
    pub const BLOCKNOTEBLOCKXYLOPHONE: SoundEnum = SoundEnum::BlockNoteBlockXylophone;
    pub const BLOCKNYLIUMBREAK: SoundEnum = SoundEnum::BlockNyliumBreak;
    pub const BLOCKNYLIUMFALL: SoundEnum = SoundEnum::BlockNyliumFall;
    pub const BLOCKNYLIUMHIT: SoundEnum = SoundEnum::BlockNyliumHit;
    pub const BLOCKNYLIUMPLACE: SoundEnum = SoundEnum::BlockNyliumPlace;
    pub const BLOCKNYLIUMSTEP: SoundEnum = SoundEnum::BlockNyliumStep;
    pub const BLOCKPACKEDMUDBREAK: SoundEnum = SoundEnum::BlockPackedMudBreak;
    pub const BLOCKPACKEDMUDFALL: SoundEnum = SoundEnum::BlockPackedMudFall;
    pub const BLOCKPACKEDMUDHIT: SoundEnum = SoundEnum::BlockPackedMudHit;
    pub const BLOCKPACKEDMUDPLACE: SoundEnum = SoundEnum::BlockPackedMudPlace;
    pub const BLOCKPACKEDMUDSTEP: SoundEnum = SoundEnum::BlockPackedMudStep;
    pub const BLOCKPINKPETALSBREAK: SoundEnum = SoundEnum::BlockPinkPetalsBreak;
    pub const BLOCKPINKPETALSFALL: SoundEnum = SoundEnum::BlockPinkPetalsFall;
    pub const BLOCKPINKPETALSHIT: SoundEnum = SoundEnum::BlockPinkPetalsHit;
    pub const BLOCKPINKPETALSPLACE: SoundEnum = SoundEnum::BlockPinkPetalsPlace;
    pub const BLOCKPINKPETALSSTEP: SoundEnum = SoundEnum::BlockPinkPetalsStep;
    pub const BLOCKPISTONCONTRACT: SoundEnum = SoundEnum::BlockPistonContract;
    pub const BLOCKPISTONEXTEND: SoundEnum = SoundEnum::BlockPistonExtend;
    pub const BLOCKPOINTEDDRIPSTONEBREAK: SoundEnum = SoundEnum::BlockPointedDripstoneBreak;
    pub const BLOCKPOINTEDDRIPSTONEDRIPLAVA: SoundEnum = SoundEnum::BlockPointedDripstoneDripLava;
    pub const BLOCKPOINTEDDRIPSTONEDRIPLAVAINTOCAULDRON: SoundEnum =
        SoundEnum::BlockPointedDripstoneDripLavaIntoCauldron;
    pub const BLOCKPOINTEDDRIPSTONEDRIPWATER: SoundEnum = SoundEnum::BlockPointedDripstoneDripWater;
    pub const BLOCKPOINTEDDRIPSTONEDRIPWATERINTOCAULDRON: SoundEnum =
        SoundEnum::BlockPointedDripstoneDripWaterIntoCauldron;
    pub const BLOCKPOINTEDDRIPSTONEFALL: SoundEnum = SoundEnum::BlockPointedDripstoneFall;
    pub const BLOCKPOINTEDDRIPSTONEHIT: SoundEnum = SoundEnum::BlockPointedDripstoneHit;
    pub const BLOCKPOINTEDDRIPSTONELAND: SoundEnum = SoundEnum::BlockPointedDripstoneLand;
    pub const BLOCKPOINTEDDRIPSTONEPLACE: SoundEnum = SoundEnum::BlockPointedDripstonePlace;
    pub const BLOCKPOINTEDDRIPSTONESTEP: SoundEnum = SoundEnum::BlockPointedDripstoneStep;
    pub const BLOCKPOLISHEDDEEPSLATEBREAK: SoundEnum = SoundEnum::BlockPolishedDeepslateBreak;
    pub const BLOCKPOLISHEDDEEPSLATEFALL: SoundEnum = SoundEnum::BlockPolishedDeepslateFall;
    pub const BLOCKPOLISHEDDEEPSLATEHIT: SoundEnum = SoundEnum::BlockPolishedDeepslateHit;
    pub const BLOCKPOLISHEDDEEPSLATEPLACE: SoundEnum = SoundEnum::BlockPolishedDeepslatePlace;
    pub const BLOCKPOLISHEDDEEPSLATESTEP: SoundEnum = SoundEnum::BlockPolishedDeepslateStep;
    pub const BLOCKPORTALAMBIENT: SoundEnum = SoundEnum::BlockPortalAmbient;
    pub const BLOCKPORTALTRAVEL: SoundEnum = SoundEnum::BlockPortalTravel;
    pub const BLOCKPORTALTRIGGER: SoundEnum = SoundEnum::BlockPortalTrigger;
    pub const BLOCKPOWDERSNOWBREAK: SoundEnum = SoundEnum::BlockPowderSnowBreak;
    pub const BLOCKPOWDERSNOWFALL: SoundEnum = SoundEnum::BlockPowderSnowFall;
    pub const BLOCKPOWDERSNOWHIT: SoundEnum = SoundEnum::BlockPowderSnowHit;
    pub const BLOCKPOWDERSNOWPLACE: SoundEnum = SoundEnum::BlockPowderSnowPlace;
    pub const BLOCKPOWDERSNOWSTEP: SoundEnum = SoundEnum::BlockPowderSnowStep;
    pub const BLOCKPUMPKINCARVE: SoundEnum = SoundEnum::BlockPumpkinCarve;
    pub const BLOCKREDSTONETORCHBURNOUT: SoundEnum = SoundEnum::BlockRedstoneTorchBurnout;
    pub const BLOCKRESPAWNANCHORAMBIENT: SoundEnum = SoundEnum::BlockRespawnAnchorAmbient;
    pub const BLOCKRESPAWNANCHORCHARGE: SoundEnum = SoundEnum::BlockRespawnAnchorCharge;
    pub const BLOCKRESPAWNANCHORDEPLETE: SoundEnum = SoundEnum::BlockRespawnAnchorDeplete;
    pub const BLOCKRESPAWNANCHORSETSPAWN: SoundEnum = SoundEnum::BlockRespawnAnchorSetSpawn;
    pub const BLOCKROOTEDDIRTBREAK: SoundEnum = SoundEnum::BlockRootedDirtBreak;
    pub const BLOCKROOTEDDIRTFALL: SoundEnum = SoundEnum::BlockRootedDirtFall;
    pub const BLOCKROOTEDDIRTHIT: SoundEnum = SoundEnum::BlockRootedDirtHit;
    pub const BLOCKROOTEDDIRTPLACE: SoundEnum = SoundEnum::BlockRootedDirtPlace;
    pub const BLOCKROOTEDDIRTSTEP: SoundEnum = SoundEnum::BlockRootedDirtStep;
    pub const BLOCKROOTSBREAK: SoundEnum = SoundEnum::BlockRootsBreak;
    pub const BLOCKROOTSFALL: SoundEnum = SoundEnum::BlockRootsFall;
    pub const BLOCKROOTSHIT: SoundEnum = SoundEnum::BlockRootsHit;
    pub const BLOCKROOTSPLACE: SoundEnum = SoundEnum::BlockRootsPlace;
    pub const BLOCKROOTSSTEP: SoundEnum = SoundEnum::BlockRootsStep;
    pub const BLOCKSANDBREAK: SoundEnum = SoundEnum::BlockSandBreak;
    pub const BLOCKSANDFALL: SoundEnum = SoundEnum::BlockSandFall;
    pub const BLOCKSANDHIT: SoundEnum = SoundEnum::BlockSandHit;
    pub const BLOCKSANDPLACE: SoundEnum = SoundEnum::BlockSandPlace;
    pub const BLOCKSANDSTEP: SoundEnum = SoundEnum::BlockSandStep;
    pub const BLOCKSCAFFOLDINGBREAK: SoundEnum = SoundEnum::BlockScaffoldingBreak;
    pub const BLOCKSCAFFOLDINGFALL: SoundEnum = SoundEnum::BlockScaffoldingFall;
    pub const BLOCKSCAFFOLDINGHIT: SoundEnum = SoundEnum::BlockScaffoldingHit;
    pub const BLOCKSCAFFOLDINGPLACE: SoundEnum = SoundEnum::BlockScaffoldingPlace;
    pub const BLOCKSCAFFOLDINGSTEP: SoundEnum = SoundEnum::BlockScaffoldingStep;
    pub const BLOCKSCULKBREAK: SoundEnum = SoundEnum::BlockSculkBreak;
    pub const BLOCKSCULKCATALYSTBLOOM: SoundEnum = SoundEnum::BlockSculkCatalystBloom;
    pub const BLOCKSCULKCATALYSTBREAK: SoundEnum = SoundEnum::BlockSculkCatalystBreak;
    pub const BLOCKSCULKCATALYSTFALL: SoundEnum = SoundEnum::BlockSculkCatalystFall;
    pub const BLOCKSCULKCATALYSTHIT: SoundEnum = SoundEnum::BlockSculkCatalystHit;
    pub const BLOCKSCULKCATALYSTPLACE: SoundEnum = SoundEnum::BlockSculkCatalystPlace;
    pub const BLOCKSCULKCATALYSTSTEP: SoundEnum = SoundEnum::BlockSculkCatalystStep;
    pub const BLOCKSCULKCHARGE: SoundEnum = SoundEnum::BlockSculkCharge;
    pub const BLOCKSCULKFALL: SoundEnum = SoundEnum::BlockSculkFall;
    pub const BLOCKSCULKHIT: SoundEnum = SoundEnum::BlockSculkHit;
    pub const BLOCKSCULKPLACE: SoundEnum = SoundEnum::BlockSculkPlace;
    pub const BLOCKSCULKSENSORBREAK: SoundEnum = SoundEnum::BlockSculkSensorBreak;
    pub const BLOCKSCULKSENSORCLICKING: SoundEnum = SoundEnum::BlockSculkSensorClicking;
    pub const BLOCKSCULKSENSORCLICKINGSTOP: SoundEnum = SoundEnum::BlockSculkSensorClickingStop;
    pub const BLOCKSCULKSENSORFALL: SoundEnum = SoundEnum::BlockSculkSensorFall;
    pub const BLOCKSCULKSENSORHIT: SoundEnum = SoundEnum::BlockSculkSensorHit;
    pub const BLOCKSCULKSENSORPLACE: SoundEnum = SoundEnum::BlockSculkSensorPlace;
    pub const BLOCKSCULKSENSORSTEP: SoundEnum = SoundEnum::BlockSculkSensorStep;
    pub const BLOCKSCULKSHRIEKERBREAK: SoundEnum = SoundEnum::BlockSculkShriekerBreak;
    pub const BLOCKSCULKSHRIEKERFALL: SoundEnum = SoundEnum::BlockSculkShriekerFall;
    pub const BLOCKSCULKSHRIEKERHIT: SoundEnum = SoundEnum::BlockSculkShriekerHit;
    pub const BLOCKSCULKSHRIEKERPLACE: SoundEnum = SoundEnum::BlockSculkShriekerPlace;
    pub const BLOCKSCULKSHRIEKERSHRIEK: SoundEnum = SoundEnum::BlockSculkShriekerShriek;
    pub const BLOCKSCULKSHRIEKERSTEP: SoundEnum = SoundEnum::BlockSculkShriekerStep;
    pub const BLOCKSCULKSPREAD: SoundEnum = SoundEnum::BlockSculkSpread;
    pub const BLOCKSCULKSTEP: SoundEnum = SoundEnum::BlockSculkStep;
    pub const BLOCKSCULKVEINBREAK: SoundEnum = SoundEnum::BlockSculkVeinBreak;
    pub const BLOCKSCULKVEINFALL: SoundEnum = SoundEnum::BlockSculkVeinFall;
    pub const BLOCKSCULKVEINHIT: SoundEnum = SoundEnum::BlockSculkVeinHit;
    pub const BLOCKSCULKVEINPLACE: SoundEnum = SoundEnum::BlockSculkVeinPlace;
    pub const BLOCKSCULKVEINSTEP: SoundEnum = SoundEnum::BlockSculkVeinStep;
    pub const BLOCKSHROOMLIGHTBREAK: SoundEnum = SoundEnum::BlockShroomlightBreak;
    pub const BLOCKSHROOMLIGHTFALL: SoundEnum = SoundEnum::BlockShroomlightFall;
    pub const BLOCKSHROOMLIGHTHIT: SoundEnum = SoundEnum::BlockShroomlightHit;
    pub const BLOCKSHROOMLIGHTPLACE: SoundEnum = SoundEnum::BlockShroomlightPlace;
    pub const BLOCKSHROOMLIGHTSTEP: SoundEnum = SoundEnum::BlockShroomlightStep;
    pub const BLOCKSHULKERBOXCLOSE: SoundEnum = SoundEnum::BlockShulkerBoxClose;
    pub const BLOCKSHULKERBOXOPEN: SoundEnum = SoundEnum::BlockShulkerBoxOpen;
    pub const BLOCKSIGNWAXEDINTERACTFAIL: SoundEnum = SoundEnum::BlockSignWaxedInteractFail;
    pub const BLOCKSLIMEBLOCKBREAK: SoundEnum = SoundEnum::BlockSlimeBlockBreak;
    pub const BLOCKSLIMEBLOCKFALL: SoundEnum = SoundEnum::BlockSlimeBlockFall;
    pub const BLOCKSLIMEBLOCKHIT: SoundEnum = SoundEnum::BlockSlimeBlockHit;
    pub const BLOCKSLIMEBLOCKPLACE: SoundEnum = SoundEnum::BlockSlimeBlockPlace;
    pub const BLOCKSLIMEBLOCKSTEP: SoundEnum = SoundEnum::BlockSlimeBlockStep;
    pub const BLOCKSMALLAMETHYSTBUDBREAK: SoundEnum = SoundEnum::BlockSmallAmethystBudBreak;
    pub const BLOCKSMALLAMETHYSTBUDPLACE: SoundEnum = SoundEnum::BlockSmallAmethystBudPlace;
    pub const BLOCKSMALLDRIPLEAFBREAK: SoundEnum = SoundEnum::BlockSmallDripleafBreak;
    pub const BLOCKSMALLDRIPLEAFFALL: SoundEnum = SoundEnum::BlockSmallDripleafFall;
    pub const BLOCKSMALLDRIPLEAFHIT: SoundEnum = SoundEnum::BlockSmallDripleafHit;
    pub const BLOCKSMALLDRIPLEAFPLACE: SoundEnum = SoundEnum::BlockSmallDripleafPlace;
    pub const BLOCKSMALLDRIPLEAFSTEP: SoundEnum = SoundEnum::BlockSmallDripleafStep;
    pub const BLOCKSMITHINGTABLEUSE: SoundEnum = SoundEnum::BlockSmithingTableUse;
    pub const BLOCKSMOKERSMOKE: SoundEnum = SoundEnum::BlockSmokerSmoke;
    pub const BLOCKSNIFFEREGGCRACK: SoundEnum = SoundEnum::BlockSnifferEggCrack;
    pub const BLOCKSNIFFEREGGHATCH: SoundEnum = SoundEnum::BlockSnifferEggHatch;
    pub const BLOCKSNIFFEREGGPLOP: SoundEnum = SoundEnum::BlockSnifferEggPlop;
    pub const BLOCKSNOWBREAK: SoundEnum = SoundEnum::BlockSnowBreak;
    pub const BLOCKSNOWFALL: SoundEnum = SoundEnum::BlockSnowFall;
    pub const BLOCKSNOWHIT: SoundEnum = SoundEnum::BlockSnowHit;
    pub const BLOCKSNOWPLACE: SoundEnum = SoundEnum::BlockSnowPlace;
    pub const BLOCKSNOWSTEP: SoundEnum = SoundEnum::BlockSnowStep;
    pub const BLOCKSOULSANDBREAK: SoundEnum = SoundEnum::BlockSoulSandBreak;
    pub const BLOCKSOULSANDFALL: SoundEnum = SoundEnum::BlockSoulSandFall;
    pub const BLOCKSOULSANDHIT: SoundEnum = SoundEnum::BlockSoulSandHit;
    pub const BLOCKSOULSANDPLACE: SoundEnum = SoundEnum::BlockSoulSandPlace;
    pub const BLOCKSOULSANDSTEP: SoundEnum = SoundEnum::BlockSoulSandStep;
    pub const BLOCKSOULSOILBREAK: SoundEnum = SoundEnum::BlockSoulSoilBreak;
    pub const BLOCKSOULSOILFALL: SoundEnum = SoundEnum::BlockSoulSoilFall;
    pub const BLOCKSOULSOILHIT: SoundEnum = SoundEnum::BlockSoulSoilHit;
    pub const BLOCKSOULSOILPLACE: SoundEnum = SoundEnum::BlockSoulSoilPlace;
    pub const BLOCKSOULSOILSTEP: SoundEnum = SoundEnum::BlockSoulSoilStep;
    pub const BLOCKSPOREBLOSSOMBREAK: SoundEnum = SoundEnum::BlockSporeBlossomBreak;
    pub const BLOCKSPOREBLOSSOMFALL: SoundEnum = SoundEnum::BlockSporeBlossomFall;
    pub const BLOCKSPOREBLOSSOMHIT: SoundEnum = SoundEnum::BlockSporeBlossomHit;
    pub const BLOCKSPOREBLOSSOMPLACE: SoundEnum = SoundEnum::BlockSporeBlossomPlace;
    pub const BLOCKSPOREBLOSSOMSTEP: SoundEnum = SoundEnum::BlockSporeBlossomStep;
    pub const BLOCKSTEMBREAK: SoundEnum = SoundEnum::BlockStemBreak;
    pub const BLOCKSTEMFALL: SoundEnum = SoundEnum::BlockStemFall;
    pub const BLOCKSTEMHIT: SoundEnum = SoundEnum::BlockStemHit;
    pub const BLOCKSTEMPLACE: SoundEnum = SoundEnum::BlockStemPlace;
    pub const BLOCKSTEMSTEP: SoundEnum = SoundEnum::BlockStemStep;
    pub const BLOCKSTONEBREAK: SoundEnum = SoundEnum::BlockStoneBreak;
    pub const BLOCKSTONEBUTTONCLICKOFF: SoundEnum = SoundEnum::BlockStoneButtonClickOff;
    pub const BLOCKSTONEBUTTONCLICKON: SoundEnum = SoundEnum::BlockStoneButtonClickOn;
    pub const BLOCKSTONEFALL: SoundEnum = SoundEnum::BlockStoneFall;
    pub const BLOCKSTONEHIT: SoundEnum = SoundEnum::BlockStoneHit;
    pub const BLOCKSTONEPLACE: SoundEnum = SoundEnum::BlockStonePlace;
    pub const BLOCKSTONEPRESSUREPLATECLICKOFF: SoundEnum =
        SoundEnum::BlockStonePressurePlateClickOff;
    pub const BLOCKSTONEPRESSUREPLATECLICKON: SoundEnum = SoundEnum::BlockStonePressurePlateClickOn;
    pub const BLOCKSTONESTEP: SoundEnum = SoundEnum::BlockStoneStep;
    pub const BLOCKSUSPICIOUSGRAVELBREAK: SoundEnum = SoundEnum::BlockSuspiciousGravelBreak;
    pub const BLOCKSUSPICIOUSGRAVELFALL: SoundEnum = SoundEnum::BlockSuspiciousGravelFall;
    pub const BLOCKSUSPICIOUSGRAVELHIT: SoundEnum = SoundEnum::BlockSuspiciousGravelHit;
    pub const BLOCKSUSPICIOUSGRAVELPLACE: SoundEnum = SoundEnum::BlockSuspiciousGravelPlace;
    pub const BLOCKSUSPICIOUSGRAVELSTEP: SoundEnum = SoundEnum::BlockSuspiciousGravelStep;
    pub const BLOCKSUSPICIOUSSANDBREAK: SoundEnum = SoundEnum::BlockSuspiciousSandBreak;
    pub const BLOCKSUSPICIOUSSANDFALL: SoundEnum = SoundEnum::BlockSuspiciousSandFall;
    pub const BLOCKSUSPICIOUSSANDHIT: SoundEnum = SoundEnum::BlockSuspiciousSandHit;
    pub const BLOCKSUSPICIOUSSANDPLACE: SoundEnum = SoundEnum::BlockSuspiciousSandPlace;
    pub const BLOCKSUSPICIOUSSANDSTEP: SoundEnum = SoundEnum::BlockSuspiciousSandStep;
    pub const BLOCKSWEETBERRYBUSHBREAK: SoundEnum = SoundEnum::BlockSweetBerryBushBreak;
    pub const BLOCKSWEETBERRYBUSHPICKBERRIES: SoundEnum = SoundEnum::BlockSweetBerryBushPickBerries;
    pub const BLOCKSWEETBERRYBUSHPLACE: SoundEnum = SoundEnum::BlockSweetBerryBushPlace;
    pub const BLOCKTRIPWIREATTACH: SoundEnum = SoundEnum::BlockTripwireAttach;
    pub const BLOCKTRIPWIRECLICKOFF: SoundEnum = SoundEnum::BlockTripwireClickOff;
    pub const BLOCKTRIPWIRECLICKON: SoundEnum = SoundEnum::BlockTripwireClickOn;
    pub const BLOCKTRIPWIREDETACH: SoundEnum = SoundEnum::BlockTripwireDetach;
    pub const BLOCKTUFFBREAK: SoundEnum = SoundEnum::BlockTuffBreak;
    pub const BLOCKTUFFFALL: SoundEnum = SoundEnum::BlockTuffFall;
    pub const BLOCKTUFFHIT: SoundEnum = SoundEnum::BlockTuffHit;
    pub const BLOCKTUFFPLACE: SoundEnum = SoundEnum::BlockTuffPlace;
    pub const BLOCKTUFFSTEP: SoundEnum = SoundEnum::BlockTuffStep;
    pub const BLOCKVINEBREAK: SoundEnum = SoundEnum::BlockVineBreak;
    pub const BLOCKVINEFALL: SoundEnum = SoundEnum::BlockVineFall;
    pub const BLOCKVINEHIT: SoundEnum = SoundEnum::BlockVineHit;
    pub const BLOCKVINEPLACE: SoundEnum = SoundEnum::BlockVinePlace;
    pub const BLOCKVINESTEP: SoundEnum = SoundEnum::BlockVineStep;
    pub const BLOCKWARTBLOCKBREAK: SoundEnum = SoundEnum::BlockWartBlockBreak;
    pub const BLOCKWARTBLOCKFALL: SoundEnum = SoundEnum::BlockWartBlockFall;
    pub const BLOCKWARTBLOCKHIT: SoundEnum = SoundEnum::BlockWartBlockHit;
    pub const BLOCKWARTBLOCKPLACE: SoundEnum = SoundEnum::BlockWartBlockPlace;
    pub const BLOCKWARTBLOCKSTEP: SoundEnum = SoundEnum::BlockWartBlockStep;
    pub const BLOCKWATERAMBIENT: SoundEnum = SoundEnum::BlockWaterAmbient;
    pub const BLOCKWEEPINGVINESBREAK: SoundEnum = SoundEnum::BlockWeepingVinesBreak;
    pub const BLOCKWEEPINGVINESFALL: SoundEnum = SoundEnum::BlockWeepingVinesFall;
    pub const BLOCKWEEPINGVINESHIT: SoundEnum = SoundEnum::BlockWeepingVinesHit;
    pub const BLOCKWEEPINGVINESPLACE: SoundEnum = SoundEnum::BlockWeepingVinesPlace;
    pub const BLOCKWEEPINGVINESSTEP: SoundEnum = SoundEnum::BlockWeepingVinesStep;
    pub const BLOCKWETGRASSBREAK: SoundEnum = SoundEnum::BlockWetGrassBreak;
    pub const BLOCKWETGRASSFALL: SoundEnum = SoundEnum::BlockWetGrassFall;
    pub const BLOCKWETGRASSHIT: SoundEnum = SoundEnum::BlockWetGrassHit;
    pub const BLOCKWETGRASSPLACE: SoundEnum = SoundEnum::BlockWetGrassPlace;
    pub const BLOCKWETGRASSSTEP: SoundEnum = SoundEnum::BlockWetGrassStep;
    pub const BLOCKWOODENBUTTONCLICKOFF: SoundEnum = SoundEnum::BlockWoodenButtonClickOff;
    pub const BLOCKWOODENBUTTONCLICKON: SoundEnum = SoundEnum::BlockWoodenButtonClickOn;
    pub const BLOCKWOODENDOORCLOSE: SoundEnum = SoundEnum::BlockWoodenDoorClose;
    pub const BLOCKWOODENDOOROPEN: SoundEnum = SoundEnum::BlockWoodenDoorOpen;
    pub const BLOCKWOODENPRESSUREPLATECLICKOFF: SoundEnum =
        SoundEnum::BlockWoodenPressurePlateClickOff;
    pub const BLOCKWOODENPRESSUREPLATECLICKON: SoundEnum =
        SoundEnum::BlockWoodenPressurePlateClickOn;
    pub const BLOCKWOODENTRAPDOORCLOSE: SoundEnum = SoundEnum::BlockWoodenTrapdoorClose;
    pub const BLOCKWOODENTRAPDOOROPEN: SoundEnum = SoundEnum::BlockWoodenTrapdoorOpen;
    pub const BLOCKWOODBREAK: SoundEnum = SoundEnum::BlockWoodBreak;
    pub const BLOCKWOODFALL: SoundEnum = SoundEnum::BlockWoodFall;
    pub const BLOCKWOODHIT: SoundEnum = SoundEnum::BlockWoodHit;
    pub const BLOCKWOODPLACE: SoundEnum = SoundEnum::BlockWoodPlace;
    pub const BLOCKWOODSTEP: SoundEnum = SoundEnum::BlockWoodStep;
    pub const BLOCKWOOLBREAK: SoundEnum = SoundEnum::BlockWoolBreak;
    pub const BLOCKWOOLFALL: SoundEnum = SoundEnum::BlockWoolFall;
    pub const BLOCKWOOLHIT: SoundEnum = SoundEnum::BlockWoolHit;
    pub const BLOCKWOOLPLACE: SoundEnum = SoundEnum::BlockWoolPlace;
    pub const BLOCKWOOLSTEP: SoundEnum = SoundEnum::BlockWoolStep;
    pub const ENCHANTTHORNSHIT: SoundEnum = SoundEnum::EnchantThornsHit;
    pub const ENTITYALLAYAMBIENTWITHOUTITEM: SoundEnum = SoundEnum::EntityAllayAmbientWithoutItem;
    pub const ENTITYALLAYAMBIENTWITHITEM: SoundEnum = SoundEnum::EntityAllayAmbientWithItem;
    pub const ENTITYALLAYDEATH: SoundEnum = SoundEnum::EntityAllayDeath;
    pub const ENTITYALLAYHURT: SoundEnum = SoundEnum::EntityAllayHurt;
    pub const ENTITYALLAYITEMGIVEN: SoundEnum = SoundEnum::EntityAllayItemGiven;
    pub const ENTITYALLAYITEMTAKEN: SoundEnum = SoundEnum::EntityAllayItemTaken;
    pub const ENTITYALLAYITEMTHROWN: SoundEnum = SoundEnum::EntityAllayItemThrown;
    pub const ENTITYARMORSTANDBREAK: SoundEnum = SoundEnum::EntityArmorStandBreak;
    pub const ENTITYARMORSTANDFALL: SoundEnum = SoundEnum::EntityArmorStandFall;
    pub const ENTITYARMORSTANDHIT: SoundEnum = SoundEnum::EntityArmorStandHit;
    pub const ENTITYARMORSTANDPLACE: SoundEnum = SoundEnum::EntityArmorStandPlace;
    pub const ENTITYARROWHIT: SoundEnum = SoundEnum::EntityArrowHit;
    pub const ENTITYARROWHITPLAYER: SoundEnum = SoundEnum::EntityArrowHitPlayer;
    pub const ENTITYARROWSHOOT: SoundEnum = SoundEnum::EntityArrowShoot;
    pub const ENTITYAXOLOTLATTACK: SoundEnum = SoundEnum::EntityAxolotlAttack;
    pub const ENTITYAXOLOTLDEATH: SoundEnum = SoundEnum::EntityAxolotlDeath;
    pub const ENTITYAXOLOTLHURT: SoundEnum = SoundEnum::EntityAxolotlHurt;
    pub const ENTITYAXOLOTLIDLEAIR: SoundEnum = SoundEnum::EntityAxolotlIdleAir;
    pub const ENTITYAXOLOTLIDLEWATER: SoundEnum = SoundEnum::EntityAxolotlIdleWater;
    pub const ENTITYAXOLOTLSPLASH: SoundEnum = SoundEnum::EntityAxolotlSplash;
    pub const ENTITYAXOLOTLSWIM: SoundEnum = SoundEnum::EntityAxolotlSwim;
    pub const ENTITYBATAMBIENT: SoundEnum = SoundEnum::EntityBatAmbient;
    pub const ENTITYBATDEATH: SoundEnum = SoundEnum::EntityBatDeath;
    pub const ENTITYBATHURT: SoundEnum = SoundEnum::EntityBatHurt;
    pub const ENTITYBATLOOP: SoundEnum = SoundEnum::EntityBatLoop;
    pub const ENTITYBATTAKEOFF: SoundEnum = SoundEnum::EntityBatTakeoff;
    pub const ENTITYBEEDEATH: SoundEnum = SoundEnum::EntityBeeDeath;
    pub const ENTITYBEEHURT: SoundEnum = SoundEnum::EntityBeeHurt;
    pub const ENTITYBEELOOP: SoundEnum = SoundEnum::EntityBeeLoop;
    pub const ENTITYBEELOOPAGGRESSIVE: SoundEnum = SoundEnum::EntityBeeLoopAggressive;
    pub const ENTITYBEEPOLLINATE: SoundEnum = SoundEnum::EntityBeePollinate;
    pub const ENTITYBEESTING: SoundEnum = SoundEnum::EntityBeeSting;
    pub const ENTITYBLAZEAMBIENT: SoundEnum = SoundEnum::EntityBlazeAmbient;
    pub const ENTITYBLAZEBURN: SoundEnum = SoundEnum::EntityBlazeBurn;
    pub const ENTITYBLAZEDEATH: SoundEnum = SoundEnum::EntityBlazeDeath;
    pub const ENTITYBLAZEHURT: SoundEnum = SoundEnum::EntityBlazeHurt;
    pub const ENTITYBLAZESHOOT: SoundEnum = SoundEnum::EntityBlazeShoot;
    pub const ENTITYBOATPADDLELAND: SoundEnum = SoundEnum::EntityBoatPaddleLand;
    pub const ENTITYBOATPADDLEWATER: SoundEnum = SoundEnum::EntityBoatPaddleWater;
    pub const ENTITYCAMELAMBIENT: SoundEnum = SoundEnum::EntityCamelAmbient;
    pub const ENTITYCAMELDASH: SoundEnum = SoundEnum::EntityCamelDash;
    pub const ENTITYCAMELDASHREADY: SoundEnum = SoundEnum::EntityCamelDashReady;
    pub const ENTITYCAMELDEATH: SoundEnum = SoundEnum::EntityCamelDeath;
    pub const ENTITYCAMELEAT: SoundEnum = SoundEnum::EntityCamelEat;
    pub const ENTITYCAMELHURT: SoundEnum = SoundEnum::EntityCamelHurt;
    pub const ENTITYCAMELSADDLE: SoundEnum = SoundEnum::EntityCamelSaddle;
    pub const ENTITYCAMELSIT: SoundEnum = SoundEnum::EntityCamelSit;
    pub const ENTITYCAMELSTAND: SoundEnum = SoundEnum::EntityCamelStand;
    pub const ENTITYCAMELSTEP: SoundEnum = SoundEnum::EntityCamelStep;
    pub const ENTITYCAMELSTEPSAND: SoundEnum = SoundEnum::EntityCamelStepSand;
    pub const ENTITYCATAMBIENT: SoundEnum = SoundEnum::EntityCatAmbient;
    pub const ENTITYCATBEGFORFOOD: SoundEnum = SoundEnum::EntityCatBegForFood;
    pub const ENTITYCATDEATH: SoundEnum = SoundEnum::EntityCatDeath;
    pub const ENTITYCATEAT: SoundEnum = SoundEnum::EntityCatEat;
    pub const ENTITYCATHISS: SoundEnum = SoundEnum::EntityCatHiss;
    pub const ENTITYCATHURT: SoundEnum = SoundEnum::EntityCatHurt;
    pub const ENTITYCATPURR: SoundEnum = SoundEnum::EntityCatPurr;
    pub const ENTITYCATPURREOW: SoundEnum = SoundEnum::EntityCatPurreow;
    pub const ENTITYCATSTRAYAMBIENT: SoundEnum = SoundEnum::EntityCatStrayAmbient;
    pub const ENTITYCHICKENAMBIENT: SoundEnum = SoundEnum::EntityChickenAmbient;
    pub const ENTITYCHICKENDEATH: SoundEnum = SoundEnum::EntityChickenDeath;
    pub const ENTITYCHICKENEGG: SoundEnum = SoundEnum::EntityChickenEgg;
    pub const ENTITYCHICKENHURT: SoundEnum = SoundEnum::EntityChickenHurt;
    pub const ENTITYCHICKENSTEP: SoundEnum = SoundEnum::EntityChickenStep;
    pub const ENTITYCODAMBIENT: SoundEnum = SoundEnum::EntityCodAmbient;
    pub const ENTITYCODDEATH: SoundEnum = SoundEnum::EntityCodDeath;
    pub const ENTITYCODFLOP: SoundEnum = SoundEnum::EntityCodFlop;
    pub const ENTITYCODHURT: SoundEnum = SoundEnum::EntityCodHurt;
    pub const ENTITYCOWAMBIENT: SoundEnum = SoundEnum::EntityCowAmbient;
    pub const ENTITYCOWDEATH: SoundEnum = SoundEnum::EntityCowDeath;
    pub const ENTITYCOWHURT: SoundEnum = SoundEnum::EntityCowHurt;
    pub const ENTITYCOWMILK: SoundEnum = SoundEnum::EntityCowMilk;
    pub const ENTITYCOWSTEP: SoundEnum = SoundEnum::EntityCowStep;
    pub const ENTITYCREEPERDEATH: SoundEnum = SoundEnum::EntityCreeperDeath;
    pub const ENTITYCREEPERHURT: SoundEnum = SoundEnum::EntityCreeperHurt;
    pub const ENTITYCREEPERPRIMED: SoundEnum = SoundEnum::EntityCreeperPrimed;
    pub const ENTITYDOLPHINAMBIENT: SoundEnum = SoundEnum::EntityDolphinAmbient;
    pub const ENTITYDOLPHINAMBIENTWATER: SoundEnum = SoundEnum::EntityDolphinAmbientWater;
    pub const ENTITYDOLPHINATTACK: SoundEnum = SoundEnum::EntityDolphinAttack;
    pub const ENTITYDOLPHINDEATH: SoundEnum = SoundEnum::EntityDolphinDeath;
    pub const ENTITYDOLPHINEAT: SoundEnum = SoundEnum::EntityDolphinEat;
    pub const ENTITYDOLPHINHURT: SoundEnum = SoundEnum::EntityDolphinHurt;
    pub const ENTITYDOLPHINJUMP: SoundEnum = SoundEnum::EntityDolphinJump;
    pub const ENTITYDOLPHINPLAY: SoundEnum = SoundEnum::EntityDolphinPlay;
    pub const ENTITYDOLPHINSPLASH: SoundEnum = SoundEnum::EntityDolphinSplash;
    pub const ENTITYDOLPHINSWIM: SoundEnum = SoundEnum::EntityDolphinSwim;
    pub const ENTITYDONKEYAMBIENT: SoundEnum = SoundEnum::EntityDonkeyAmbient;
    pub const ENTITYDONKEYANGRY: SoundEnum = SoundEnum::EntityDonkeyAngry;
    pub const ENTITYDONKEYCHEST: SoundEnum = SoundEnum::EntityDonkeyChest;
    pub const ENTITYDONKEYDEATH: SoundEnum = SoundEnum::EntityDonkeyDeath;
    pub const ENTITYDONKEYEAT: SoundEnum = SoundEnum::EntityDonkeyEat;
    pub const ENTITYDONKEYHURT: SoundEnum = SoundEnum::EntityDonkeyHurt;
    pub const ENTITYDRAGONFIREBALLEXPLODE: SoundEnum = SoundEnum::EntityDragonFireballExplode;
    pub const ENTITYDROWNEDAMBIENT: SoundEnum = SoundEnum::EntityDrownedAmbient;
    pub const ENTITYDROWNEDAMBIENTWATER: SoundEnum = SoundEnum::EntityDrownedAmbientWater;
    pub const ENTITYDROWNEDDEATH: SoundEnum = SoundEnum::EntityDrownedDeath;
    pub const ENTITYDROWNEDDEATHWATER: SoundEnum = SoundEnum::EntityDrownedDeathWater;
    pub const ENTITYDROWNEDHURT: SoundEnum = SoundEnum::EntityDrownedHurt;
    pub const ENTITYDROWNEDHURTWATER: SoundEnum = SoundEnum::EntityDrownedHurtWater;
    pub const ENTITYDROWNEDSHOOT: SoundEnum = SoundEnum::EntityDrownedShoot;
    pub const ENTITYDROWNEDSTEP: SoundEnum = SoundEnum::EntityDrownedStep;
    pub const ENTITYDROWNEDSWIM: SoundEnum = SoundEnum::EntityDrownedSwim;
    pub const ENTITYEGGTHROW: SoundEnum = SoundEnum::EntityEggThrow;
    pub const ENTITYELDERGUARDIANAMBIENT: SoundEnum = SoundEnum::EntityElderGuardianAmbient;
    pub const ENTITYELDERGUARDIANAMBIENTLAND: SoundEnum = SoundEnum::EntityElderGuardianAmbientLand;
    pub const ENTITYELDERGUARDIANCURSE: SoundEnum = SoundEnum::EntityElderGuardianCurse;
    pub const ENTITYELDERGUARDIANDEATH: SoundEnum = SoundEnum::EntityElderGuardianDeath;
    pub const ENTITYELDERGUARDIANDEATHLAND: SoundEnum = SoundEnum::EntityElderGuardianDeathLand;
    pub const ENTITYELDERGUARDIANFLOP: SoundEnum = SoundEnum::EntityElderGuardianFlop;
    pub const ENTITYELDERGUARDIANHURT: SoundEnum = SoundEnum::EntityElderGuardianHurt;
    pub const ENTITYELDERGUARDIANHURTLAND: SoundEnum = SoundEnum::EntityElderGuardianHurtLand;
    pub const ENTITYENDERMANAMBIENT: SoundEnum = SoundEnum::EntityEndermanAmbient;
    pub const ENTITYENDERMANDEATH: SoundEnum = SoundEnum::EntityEndermanDeath;
    pub const ENTITYENDERMANHURT: SoundEnum = SoundEnum::EntityEndermanHurt;
    pub const ENTITYENDERMANSCREAM: SoundEnum = SoundEnum::EntityEndermanScream;
    pub const ENTITYENDERMANSTARE: SoundEnum = SoundEnum::EntityEndermanStare;
    pub const ENTITYENDERMANTELEPORT: SoundEnum = SoundEnum::EntityEndermanTeleport;
    pub const ENTITYENDERMITEAMBIENT: SoundEnum = SoundEnum::EntityEndermiteAmbient;
    pub const ENTITYENDERMITEDEATH: SoundEnum = SoundEnum::EntityEndermiteDeath;
    pub const ENTITYENDERMITEHURT: SoundEnum = SoundEnum::EntityEndermiteHurt;
    pub const ENTITYENDERMITESTEP: SoundEnum = SoundEnum::EntityEndermiteStep;
    pub const ENTITYENDERDRAGONAMBIENT: SoundEnum = SoundEnum::EntityEnderDragonAmbient;
    pub const ENTITYENDERDRAGONDEATH: SoundEnum = SoundEnum::EntityEnderDragonDeath;
    pub const ENTITYENDERDRAGONFLAP: SoundEnum = SoundEnum::EntityEnderDragonFlap;
    pub const ENTITYENDERDRAGONGROWL: SoundEnum = SoundEnum::EntityEnderDragonGrowl;
    pub const ENTITYENDERDRAGONHURT: SoundEnum = SoundEnum::EntityEnderDragonHurt;
    pub const ENTITYENDERDRAGONSHOOT: SoundEnum = SoundEnum::EntityEnderDragonShoot;
    pub const ENTITYENDEREYEDEATH: SoundEnum = SoundEnum::EntityEnderEyeDeath;
    pub const ENTITYENDEREYELAUNCH: SoundEnum = SoundEnum::EntityEnderEyeLaunch;
    pub const ENTITYENDERPEARLTHROW: SoundEnum = SoundEnum::EntityEnderPearlThrow;
    pub const ENTITYEVOKERAMBIENT: SoundEnum = SoundEnum::EntityEvokerAmbient;
    pub const ENTITYEVOKERCASTSPELL: SoundEnum = SoundEnum::EntityEvokerCastSpell;
    pub const ENTITYEVOKERCELEBRATE: SoundEnum = SoundEnum::EntityEvokerCelebrate;
    pub const ENTITYEVOKERDEATH: SoundEnum = SoundEnum::EntityEvokerDeath;
    pub const ENTITYEVOKERFANGSATTACK: SoundEnum = SoundEnum::EntityEvokerFangsAttack;
    pub const ENTITYEVOKERHURT: SoundEnum = SoundEnum::EntityEvokerHurt;
    pub const ENTITYEVOKERPREPAREATTACK: SoundEnum = SoundEnum::EntityEvokerPrepareAttack;
    pub const ENTITYEVOKERPREPARESUMMON: SoundEnum = SoundEnum::EntityEvokerPrepareSummon;
    pub const ENTITYEVOKERPREPAREWOLOLO: SoundEnum = SoundEnum::EntityEvokerPrepareWololo;
    pub const ENTITYEXPERIENCEBOTTLETHROW: SoundEnum = SoundEnum::EntityExperienceBottleThrow;
    pub const ENTITYEXPERIENCEORBPICKUP: SoundEnum = SoundEnum::EntityExperienceOrbPickup;
    pub const ENTITYFIREWORKROCKETBLAST: SoundEnum = SoundEnum::EntityFireworkRocketBlast;
    pub const ENTITYFIREWORKROCKETBLASTFAR: SoundEnum = SoundEnum::EntityFireworkRocketBlastFar;
    pub const ENTITYFIREWORKROCKETLARGEBLAST: SoundEnum = SoundEnum::EntityFireworkRocketLargeBlast;
    pub const ENTITYFIREWORKROCKETLARGEBLASTFAR: SoundEnum =
        SoundEnum::EntityFireworkRocketLargeBlastFar;
    pub const ENTITYFIREWORKROCKETLAUNCH: SoundEnum = SoundEnum::EntityFireworkRocketLaunch;
    pub const ENTITYFIREWORKROCKETSHOOT: SoundEnum = SoundEnum::EntityFireworkRocketShoot;
    pub const ENTITYFIREWORKROCKETTWINKLE: SoundEnum = SoundEnum::EntityFireworkRocketTwinkle;
    pub const ENTITYFIREWORKROCKETTWINKLEFAR: SoundEnum = SoundEnum::EntityFireworkRocketTwinkleFar;
    pub const ENTITYFISHINGBOBBERRETRIEVE: SoundEnum = SoundEnum::EntityFishingBobberRetrieve;
    pub const ENTITYFISHINGBOBBERSPLASH: SoundEnum = SoundEnum::EntityFishingBobberSplash;
    pub const ENTITYFISHINGBOBBERTHROW: SoundEnum = SoundEnum::EntityFishingBobberThrow;
    pub const ENTITYFISHSWIM: SoundEnum = SoundEnum::EntityFishSwim;
    pub const ENTITYFOXAGGRO: SoundEnum = SoundEnum::EntityFoxAggro;
    pub const ENTITYFOXAMBIENT: SoundEnum = SoundEnum::EntityFoxAmbient;
    pub const ENTITYFOXBITE: SoundEnum = SoundEnum::EntityFoxBite;
    pub const ENTITYFOXDEATH: SoundEnum = SoundEnum::EntityFoxDeath;
    pub const ENTITYFOXEAT: SoundEnum = SoundEnum::EntityFoxEat;
    pub const ENTITYFOXHURT: SoundEnum = SoundEnum::EntityFoxHurt;
    pub const ENTITYFOXSCREECH: SoundEnum = SoundEnum::EntityFoxScreech;
    pub const ENTITYFOXSLEEP: SoundEnum = SoundEnum::EntityFoxSleep;
    pub const ENTITYFOXSNIFF: SoundEnum = SoundEnum::EntityFoxSniff;
    pub const ENTITYFOXSPIT: SoundEnum = SoundEnum::EntityFoxSpit;
    pub const ENTITYFOXTELEPORT: SoundEnum = SoundEnum::EntityFoxTeleport;
    pub const ENTITYFROGAMBIENT: SoundEnum = SoundEnum::EntityFrogAmbient;
    pub const ENTITYFROGDEATH: SoundEnum = SoundEnum::EntityFrogDeath;
    pub const ENTITYFROGEAT: SoundEnum = SoundEnum::EntityFrogEat;
    pub const ENTITYFROGHURT: SoundEnum = SoundEnum::EntityFrogHurt;
    pub const ENTITYFROGLAYSPAWN: SoundEnum = SoundEnum::EntityFrogLaySpawn;
    pub const ENTITYFROGLONGJUMP: SoundEnum = SoundEnum::EntityFrogLongJump;
    pub const ENTITYFROGSTEP: SoundEnum = SoundEnum::EntityFrogStep;
    pub const ENTITYFROGTONGUE: SoundEnum = SoundEnum::EntityFrogTongue;
    pub const ENTITYGENERICBIGFALL: SoundEnum = SoundEnum::EntityGenericBigFall;
    pub const ENTITYGENERICBURN: SoundEnum = SoundEnum::EntityGenericBurn;
    pub const ENTITYGENERICDEATH: SoundEnum = SoundEnum::EntityGenericDeath;
    pub const ENTITYGENERICDRINK: SoundEnum = SoundEnum::EntityGenericDrink;
    pub const ENTITYGENERICEAT: SoundEnum = SoundEnum::EntityGenericEat;
    pub const ENTITYGENERICEXPLODE: SoundEnum = SoundEnum::EntityGenericExplode;
    pub const ENTITYGENERICEXTINGUISHFIRE: SoundEnum = SoundEnum::EntityGenericExtinguishFire;
    pub const ENTITYGENERICHURT: SoundEnum = SoundEnum::EntityGenericHurt;
    pub const ENTITYGENERICSMALLFALL: SoundEnum = SoundEnum::EntityGenericSmallFall;
    pub const ENTITYGENERICSPLASH: SoundEnum = SoundEnum::EntityGenericSplash;
    pub const ENTITYGENERICSWIM: SoundEnum = SoundEnum::EntityGenericSwim;
    pub const ENTITYGHASTAMBIENT: SoundEnum = SoundEnum::EntityGhastAmbient;
    pub const ENTITYGHASTDEATH: SoundEnum = SoundEnum::EntityGhastDeath;
    pub const ENTITYGHASTHURT: SoundEnum = SoundEnum::EntityGhastHurt;
    pub const ENTITYGHASTSCREAM: SoundEnum = SoundEnum::EntityGhastScream;
    pub const ENTITYGHASTSHOOT: SoundEnum = SoundEnum::EntityGhastShoot;
    pub const ENTITYGHASTWARN: SoundEnum = SoundEnum::EntityGhastWarn;
    pub const ENTITYGLOWITEMFRAMEADDITEM: SoundEnum = SoundEnum::EntityGlowItemFrameAddItem;
    pub const ENTITYGLOWITEMFRAMEBREAK: SoundEnum = SoundEnum::EntityGlowItemFrameBreak;
    pub const ENTITYGLOWITEMFRAMEPLACE: SoundEnum = SoundEnum::EntityGlowItemFramePlace;
    pub const ENTITYGLOWITEMFRAMEREMOVEITEM: SoundEnum = SoundEnum::EntityGlowItemFrameRemoveItem;
    pub const ENTITYGLOWITEMFRAMEROTATEITEM: SoundEnum = SoundEnum::EntityGlowItemFrameRotateItem;
    pub const ENTITYGLOWSQUIDAMBIENT: SoundEnum = SoundEnum::EntityGlowSquidAmbient;
    pub const ENTITYGLOWSQUIDDEATH: SoundEnum = SoundEnum::EntityGlowSquidDeath;
    pub const ENTITYGLOWSQUIDHURT: SoundEnum = SoundEnum::EntityGlowSquidHurt;
    pub const ENTITYGLOWSQUIDSQUIRT: SoundEnum = SoundEnum::EntityGlowSquidSquirt;
    pub const ENTITYGOATAMBIENT: SoundEnum = SoundEnum::EntityGoatAmbient;
    pub const ENTITYGOATDEATH: SoundEnum = SoundEnum::EntityGoatDeath;
    pub const ENTITYGOATEAT: SoundEnum = SoundEnum::EntityGoatEat;
    pub const ENTITYGOATHORNBREAK: SoundEnum = SoundEnum::EntityGoatHornBreak;
    pub const ENTITYGOATHURT: SoundEnum = SoundEnum::EntityGoatHurt;
    pub const ENTITYGOATLONGJUMP: SoundEnum = SoundEnum::EntityGoatLongJump;
    pub const ENTITYGOATMILK: SoundEnum = SoundEnum::EntityGoatMilk;
    pub const ENTITYGOATPREPARERAM: SoundEnum = SoundEnum::EntityGoatPrepareRam;
    pub const ENTITYGOATRAMIMPACT: SoundEnum = SoundEnum::EntityGoatRamImpact;
    pub const ENTITYGOATSCREAMINGAMBIENT: SoundEnum = SoundEnum::EntityGoatScreamingAmbient;
    pub const ENTITYGOATSCREAMINGDEATH: SoundEnum = SoundEnum::EntityGoatScreamingDeath;
    pub const ENTITYGOATSCREAMINGEAT: SoundEnum = SoundEnum::EntityGoatScreamingEat;
    pub const ENTITYGOATSCREAMINGHORNBREAK: SoundEnum = SoundEnum::EntityGoatScreamingHornBreak;
    pub const ENTITYGOATSCREAMINGHURT: SoundEnum = SoundEnum::EntityGoatScreamingHurt;
    pub const ENTITYGOATSCREAMINGLONGJUMP: SoundEnum = SoundEnum::EntityGoatScreamingLongJump;
    pub const ENTITYGOATSCREAMINGMILK: SoundEnum = SoundEnum::EntityGoatScreamingMilk;
    pub const ENTITYGOATSCREAMINGPREPARERAM: SoundEnum = SoundEnum::EntityGoatScreamingPrepareRam;
    pub const ENTITYGOATSCREAMINGRAMIMPACT: SoundEnum = SoundEnum::EntityGoatScreamingRamImpact;
    pub const ENTITYGOATSTEP: SoundEnum = SoundEnum::EntityGoatStep;
    pub const ENTITYGUARDIANAMBIENT: SoundEnum = SoundEnum::EntityGuardianAmbient;
    pub const ENTITYGUARDIANAMBIENTLAND: SoundEnum = SoundEnum::EntityGuardianAmbientLand;
    pub const ENTITYGUARDIANATTACK: SoundEnum = SoundEnum::EntityGuardianAttack;
    pub const ENTITYGUARDIANDEATH: SoundEnum = SoundEnum::EntityGuardianDeath;
    pub const ENTITYGUARDIANDEATHLAND: SoundEnum = SoundEnum::EntityGuardianDeathLand;
    pub const ENTITYGUARDIANFLOP: SoundEnum = SoundEnum::EntityGuardianFlop;
    pub const ENTITYGUARDIANHURT: SoundEnum = SoundEnum::EntityGuardianHurt;
    pub const ENTITYGUARDIANHURTLAND: SoundEnum = SoundEnum::EntityGuardianHurtLand;
    pub const ENTITYHOGLINAMBIENT: SoundEnum = SoundEnum::EntityHoglinAmbient;
    pub const ENTITYHOGLINANGRY: SoundEnum = SoundEnum::EntityHoglinAngry;
    pub const ENTITYHOGLINATTACK: SoundEnum = SoundEnum::EntityHoglinAttack;
    pub const ENTITYHOGLINCONVERTEDTOZOMBIFIED: SoundEnum =
        SoundEnum::EntityHoglinConvertedToZombified;
    pub const ENTITYHOGLINDEATH: SoundEnum = SoundEnum::EntityHoglinDeath;
    pub const ENTITYHOGLINHURT: SoundEnum = SoundEnum::EntityHoglinHurt;
    pub const ENTITYHOGLINRETREAT: SoundEnum = SoundEnum::EntityHoglinRetreat;
    pub const ENTITYHOGLINSTEP: SoundEnum = SoundEnum::EntityHoglinStep;
    pub const ENTITYHORSEAMBIENT: SoundEnum = SoundEnum::EntityHorseAmbient;
    pub const ENTITYHORSEANGRY: SoundEnum = SoundEnum::EntityHorseAngry;
    pub const ENTITYHORSEARMOR: SoundEnum = SoundEnum::EntityHorseArmor;
    pub const ENTITYHORSEBREATHE: SoundEnum = SoundEnum::EntityHorseBreathe;
    pub const ENTITYHORSEDEATH: SoundEnum = SoundEnum::EntityHorseDeath;
    pub const ENTITYHORSEEAT: SoundEnum = SoundEnum::EntityHorseEat;
    pub const ENTITYHORSEGALLOP: SoundEnum = SoundEnum::EntityHorseGallop;
    pub const ENTITYHORSEHURT: SoundEnum = SoundEnum::EntityHorseHurt;
    pub const ENTITYHORSEJUMP: SoundEnum = SoundEnum::EntityHorseJump;
    pub const ENTITYHORSELAND: SoundEnum = SoundEnum::EntityHorseLand;
    pub const ENTITYHORSESADDLE: SoundEnum = SoundEnum::EntityHorseSaddle;
    pub const ENTITYHORSESTEP: SoundEnum = SoundEnum::EntityHorseStep;
    pub const ENTITYHORSESTEPWOOD: SoundEnum = SoundEnum::EntityHorseStepWood;
    pub const ENTITYHOSTILEBIGFALL: SoundEnum = SoundEnum::EntityHostileBigFall;
    pub const ENTITYHOSTILEDEATH: SoundEnum = SoundEnum::EntityHostileDeath;
    pub const ENTITYHOSTILEHURT: SoundEnum = SoundEnum::EntityHostileHurt;
    pub const ENTITYHOSTILESMALLFALL: SoundEnum = SoundEnum::EntityHostileSmallFall;
    pub const ENTITYHOSTILESPLASH: SoundEnum = SoundEnum::EntityHostileSplash;
    pub const ENTITYHOSTILESWIM: SoundEnum = SoundEnum::EntityHostileSwim;
    pub const ENTITYHUSKAMBIENT: SoundEnum = SoundEnum::EntityHuskAmbient;
    pub const ENTITYHUSKCONVERTEDTOZOMBIE: SoundEnum = SoundEnum::EntityHuskConvertedToZombie;
    pub const ENTITYHUSKDEATH: SoundEnum = SoundEnum::EntityHuskDeath;
    pub const ENTITYHUSKHURT: SoundEnum = SoundEnum::EntityHuskHurt;
    pub const ENTITYHUSKSTEP: SoundEnum = SoundEnum::EntityHuskStep;
    pub const ENTITYILLUSIONERAMBIENT: SoundEnum = SoundEnum::EntityIllusionerAmbient;
    pub const ENTITYILLUSIONERCASTSPELL: SoundEnum = SoundEnum::EntityIllusionerCastSpell;
    pub const ENTITYILLUSIONERDEATH: SoundEnum = SoundEnum::EntityIllusionerDeath;
    pub const ENTITYILLUSIONERHURT: SoundEnum = SoundEnum::EntityIllusionerHurt;
    pub const ENTITYILLUSIONERMIRRORMOVE: SoundEnum = SoundEnum::EntityIllusionerMirrorMove;
    pub const ENTITYILLUSIONERPREPAREBLINDNESS: SoundEnum =
        SoundEnum::EntityIllusionerPrepareBlindness;
    pub const ENTITYILLUSIONERPREPAREMIRROR: SoundEnum = SoundEnum::EntityIllusionerPrepareMirror;
    pub const ENTITYIRONGOLEMATTACK: SoundEnum = SoundEnum::EntityIronGolemAttack;
    pub const ENTITYIRONGOLEMDAMAGE: SoundEnum = SoundEnum::EntityIronGolemDamage;
    pub const ENTITYIRONGOLEMDEATH: SoundEnum = SoundEnum::EntityIronGolemDeath;
    pub const ENTITYIRONGOLEMHURT: SoundEnum = SoundEnum::EntityIronGolemHurt;
    pub const ENTITYIRONGOLEMREPAIR: SoundEnum = SoundEnum::EntityIronGolemRepair;
    pub const ENTITYIRONGOLEMSTEP: SoundEnum = SoundEnum::EntityIronGolemStep;
    pub const ENTITYITEMBREAK: SoundEnum = SoundEnum::EntityItemBreak;
    pub const ENTITYITEMFRAMEADDITEM: SoundEnum = SoundEnum::EntityItemFrameAddItem;
    pub const ENTITYITEMFRAMEBREAK: SoundEnum = SoundEnum::EntityItemFrameBreak;
    pub const ENTITYITEMFRAMEPLACE: SoundEnum = SoundEnum::EntityItemFramePlace;
    pub const ENTITYITEMFRAMEREMOVEITEM: SoundEnum = SoundEnum::EntityItemFrameRemoveItem;
    pub const ENTITYITEMFRAMEROTATEITEM: SoundEnum = SoundEnum::EntityItemFrameRotateItem;
    pub const ENTITYITEMPICKUP: SoundEnum = SoundEnum::EntityItemPickup;
    pub const ENTITYLEASHKNOTBREAK: SoundEnum = SoundEnum::EntityLeashKnotBreak;
    pub const ENTITYLEASHKNOTPLACE: SoundEnum = SoundEnum::EntityLeashKnotPlace;
    pub const ENTITYLIGHTNINGBOLTIMPACT: SoundEnum = SoundEnum::EntityLightningBoltImpact;
    pub const ENTITYLIGHTNINGBOLTTHUNDER: SoundEnum = SoundEnum::EntityLightningBoltThunder;
    pub const ENTITYLINGERINGPOTIONTHROW: SoundEnum = SoundEnum::EntityLingeringPotionThrow;
    pub const ENTITYLLAMAAMBIENT: SoundEnum = SoundEnum::EntityLlamaAmbient;
    pub const ENTITYLLAMAANGRY: SoundEnum = SoundEnum::EntityLlamaAngry;
    pub const ENTITYLLAMACHEST: SoundEnum = SoundEnum::EntityLlamaChest;
    pub const ENTITYLLAMADEATH: SoundEnum = SoundEnum::EntityLlamaDeath;
    pub const ENTITYLLAMAEAT: SoundEnum = SoundEnum::EntityLlamaEat;
    pub const ENTITYLLAMAHURT: SoundEnum = SoundEnum::EntityLlamaHurt;
    pub const ENTITYLLAMASPIT: SoundEnum = SoundEnum::EntityLlamaSpit;
    pub const ENTITYLLAMASTEP: SoundEnum = SoundEnum::EntityLlamaStep;
    pub const ENTITYLLAMASWAG: SoundEnum = SoundEnum::EntityLlamaSwag;
    pub const ENTITYMAGMACUBEDEATH: SoundEnum = SoundEnum::EntityMagmaCubeDeath;
    pub const ENTITYMAGMACUBEDEATHSMALL: SoundEnum = SoundEnum::EntityMagmaCubeDeathSmall;
    pub const ENTITYMAGMACUBEHURT: SoundEnum = SoundEnum::EntityMagmaCubeHurt;
    pub const ENTITYMAGMACUBEHURTSMALL: SoundEnum = SoundEnum::EntityMagmaCubeHurtSmall;
    pub const ENTITYMAGMACUBEJUMP: SoundEnum = SoundEnum::EntityMagmaCubeJump;
    pub const ENTITYMAGMACUBESQUISH: SoundEnum = SoundEnum::EntityMagmaCubeSquish;
    pub const ENTITYMAGMACUBESQUISHSMALL: SoundEnum = SoundEnum::EntityMagmaCubeSquishSmall;
    pub const ENTITYMINECARTINSIDE: SoundEnum = SoundEnum::EntityMinecartInside;
    pub const ENTITYMINECARTINSIDEUNDERWATER: SoundEnum = SoundEnum::EntityMinecartInsideUnderwater;
    pub const ENTITYMINECARTRIDING: SoundEnum = SoundEnum::EntityMinecartRiding;
    pub const ENTITYMOOSHROOMCONVERT: SoundEnum = SoundEnum::EntityMooshroomConvert;
    pub const ENTITYMOOSHROOMEAT: SoundEnum = SoundEnum::EntityMooshroomEat;
    pub const ENTITYMOOSHROOMMILK: SoundEnum = SoundEnum::EntityMooshroomMilk;
    pub const ENTITYMOOSHROOMSHEAR: SoundEnum = SoundEnum::EntityMooshroomShear;
    pub const ENTITYMOOSHROOMSUSPICIOUSMILK: SoundEnum = SoundEnum::EntityMooshroomSuspiciousMilk;
    pub const ENTITYMULEAMBIENT: SoundEnum = SoundEnum::EntityMuleAmbient;
    pub const ENTITYMULEANGRY: SoundEnum = SoundEnum::EntityMuleAngry;
    pub const ENTITYMULECHEST: SoundEnum = SoundEnum::EntityMuleChest;
    pub const ENTITYMULEDEATH: SoundEnum = SoundEnum::EntityMuleDeath;
    pub const ENTITYMULEEAT: SoundEnum = SoundEnum::EntityMuleEat;
    pub const ENTITYMULEHURT: SoundEnum = SoundEnum::EntityMuleHurt;
    pub const ENTITYOCELOTAMBIENT: SoundEnum = SoundEnum::EntityOcelotAmbient;
    pub const ENTITYOCELOTDEATH: SoundEnum = SoundEnum::EntityOcelotDeath;
    pub const ENTITYOCELOTHURT: SoundEnum = SoundEnum::EntityOcelotHurt;
    pub const ENTITYPAINTINGBREAK: SoundEnum = SoundEnum::EntityPaintingBreak;
    pub const ENTITYPAINTINGPLACE: SoundEnum = SoundEnum::EntityPaintingPlace;
    pub const ENTITYPANDAAGGRESSIVEAMBIENT: SoundEnum = SoundEnum::EntityPandaAggressiveAmbient;
    pub const ENTITYPANDAAMBIENT: SoundEnum = SoundEnum::EntityPandaAmbient;
    pub const ENTITYPANDABITE: SoundEnum = SoundEnum::EntityPandaBite;
    pub const ENTITYPANDACANTBREED: SoundEnum = SoundEnum::EntityPandaCantBreed;
    pub const ENTITYPANDADEATH: SoundEnum = SoundEnum::EntityPandaDeath;
    pub const ENTITYPANDAEAT: SoundEnum = SoundEnum::EntityPandaEat;
    pub const ENTITYPANDAHURT: SoundEnum = SoundEnum::EntityPandaHurt;
    pub const ENTITYPANDAPRESNEEZE: SoundEnum = SoundEnum::EntityPandaPreSneeze;
    pub const ENTITYPANDASNEEZE: SoundEnum = SoundEnum::EntityPandaSneeze;
    pub const ENTITYPANDASTEP: SoundEnum = SoundEnum::EntityPandaStep;
    pub const ENTITYPANDAWORRIEDAMBIENT: SoundEnum = SoundEnum::EntityPandaWorriedAmbient;
    pub const ENTITYPARROTAMBIENT: SoundEnum = SoundEnum::EntityParrotAmbient;
    pub const ENTITYPARROTDEATH: SoundEnum = SoundEnum::EntityParrotDeath;
    pub const ENTITYPARROTEAT: SoundEnum = SoundEnum::EntityParrotEat;
    pub const ENTITYPARROTFLY: SoundEnum = SoundEnum::EntityParrotFly;
    pub const ENTITYPARROTHURT: SoundEnum = SoundEnum::EntityParrotHurt;
    pub const ENTITYPARROTIMITATEBLAZE: SoundEnum = SoundEnum::EntityParrotImitateBlaze;
    pub const ENTITYPARROTIMITATECREEPER: SoundEnum = SoundEnum::EntityParrotImitateCreeper;
    pub const ENTITYPARROTIMITATEDROWNED: SoundEnum = SoundEnum::EntityParrotImitateDrowned;
    pub const ENTITYPARROTIMITATEELDERGUARDIAN: SoundEnum =
        SoundEnum::EntityParrotImitateElderGuardian;
    pub const ENTITYPARROTIMITATEENDERMITE: SoundEnum = SoundEnum::EntityParrotImitateEndermite;
    pub const ENTITYPARROTIMITATEENDERDRAGON: SoundEnum = SoundEnum::EntityParrotImitateEnderDragon;
    pub const ENTITYPARROTIMITATEEVOKER: SoundEnum = SoundEnum::EntityParrotImitateEvoker;
    pub const ENTITYPARROTIMITATEGHAST: SoundEnum = SoundEnum::EntityParrotImitateGhast;
    pub const ENTITYPARROTIMITATEGUARDIAN: SoundEnum = SoundEnum::EntityParrotImitateGuardian;
    pub const ENTITYPARROTIMITATEHOGLIN: SoundEnum = SoundEnum::EntityParrotImitateHoglin;
    pub const ENTITYPARROTIMITATEHUSK: SoundEnum = SoundEnum::EntityParrotImitateHusk;
    pub const ENTITYPARROTIMITATEILLUSIONER: SoundEnum = SoundEnum::EntityParrotImitateIllusioner;
    pub const ENTITYPARROTIMITATEMAGMACUBE: SoundEnum = SoundEnum::EntityParrotImitateMagmaCube;
    pub const ENTITYPARROTIMITATEPHANTOM: SoundEnum = SoundEnum::EntityParrotImitatePhantom;
    pub const ENTITYPARROTIMITATEPIGLIN: SoundEnum = SoundEnum::EntityParrotImitatePiglin;
    pub const ENTITYPARROTIMITATEPIGLINBRUTE: SoundEnum = SoundEnum::EntityParrotImitatePiglinBrute;
    pub const ENTITYPARROTIMITATEPILLAGER: SoundEnum = SoundEnum::EntityParrotImitatePillager;
    pub const ENTITYPARROTIMITATERAVAGER: SoundEnum = SoundEnum::EntityParrotImitateRavager;
    pub const ENTITYPARROTIMITATESHULKER: SoundEnum = SoundEnum::EntityParrotImitateShulker;
    pub const ENTITYPARROTIMITATESILVERFISH: SoundEnum = SoundEnum::EntityParrotImitateSilverfish;
    pub const ENTITYPARROTIMITATESKELETON: SoundEnum = SoundEnum::EntityParrotImitateSkeleton;
    pub const ENTITYPARROTIMITATESLIME: SoundEnum = SoundEnum::EntityParrotImitateSlime;
    pub const ENTITYPARROTIMITATESPIDER: SoundEnum = SoundEnum::EntityParrotImitateSpider;
    pub const ENTITYPARROTIMITATESTRAY: SoundEnum = SoundEnum::EntityParrotImitateStray;
    pub const ENTITYPARROTIMITATEVEX: SoundEnum = SoundEnum::EntityParrotImitateVex;
    pub const ENTITYPARROTIMITATEVINDICATOR: SoundEnum = SoundEnum::EntityParrotImitateVindicator;
    pub const ENTITYPARROTIMITATEWARDEN: SoundEnum = SoundEnum::EntityParrotImitateWarden;
    pub const ENTITYPARROTIMITATEWITCH: SoundEnum = SoundEnum::EntityParrotImitateWitch;
    pub const ENTITYPARROTIMITATEWITHER: SoundEnum = SoundEnum::EntityParrotImitateWither;
    pub const ENTITYPARROTIMITATEWITHERSKELETON: SoundEnum =
        SoundEnum::EntityParrotImitateWitherSkeleton;
    pub const ENTITYPARROTIMITATEZOGLIN: SoundEnum = SoundEnum::EntityParrotImitateZoglin;
    pub const ENTITYPARROTIMITATEZOMBIE: SoundEnum = SoundEnum::EntityParrotImitateZombie;
    pub const ENTITYPARROTIMITATEZOMBIEVILLAGER: SoundEnum =
        SoundEnum::EntityParrotImitateZombieVillager;
    pub const ENTITYPARROTSTEP: SoundEnum = SoundEnum::EntityParrotStep;
    pub const ENTITYPHANTOMAMBIENT: SoundEnum = SoundEnum::EntityPhantomAmbient;
    pub const ENTITYPHANTOMBITE: SoundEnum = SoundEnum::EntityPhantomBite;
    pub const ENTITYPHANTOMDEATH: SoundEnum = SoundEnum::EntityPhantomDeath;
    pub const ENTITYPHANTOMFLAP: SoundEnum = SoundEnum::EntityPhantomFlap;
    pub const ENTITYPHANTOMHURT: SoundEnum = SoundEnum::EntityPhantomHurt;
    pub const ENTITYPHANTOMSWOOP: SoundEnum = SoundEnum::EntityPhantomSwoop;
    pub const ENTITYPIGLINADMIRINGITEM: SoundEnum = SoundEnum::EntityPiglinAdmiringItem;
    pub const ENTITYPIGLINAMBIENT: SoundEnum = SoundEnum::EntityPiglinAmbient;
    pub const ENTITYPIGLINANGRY: SoundEnum = SoundEnum::EntityPiglinAngry;
    pub const ENTITYPIGLINBRUTEAMBIENT: SoundEnum = SoundEnum::EntityPiglinBruteAmbient;
    pub const ENTITYPIGLINBRUTEANGRY: SoundEnum = SoundEnum::EntityPiglinBruteAngry;
    pub const ENTITYPIGLINBRUTECONVERTEDTOZOMBIFIED: SoundEnum =
        SoundEnum::EntityPiglinBruteConvertedToZombified;
    pub const ENTITYPIGLINBRUTEDEATH: SoundEnum = SoundEnum::EntityPiglinBruteDeath;
    pub const ENTITYPIGLINBRUTEHURT: SoundEnum = SoundEnum::EntityPiglinBruteHurt;
    pub const ENTITYPIGLINBRUTESTEP: SoundEnum = SoundEnum::EntityPiglinBruteStep;
    pub const ENTITYPIGLINCELEBRATE: SoundEnum = SoundEnum::EntityPiglinCelebrate;
    pub const ENTITYPIGLINCONVERTEDTOZOMBIFIED: SoundEnum =
        SoundEnum::EntityPiglinConvertedToZombified;
    pub const ENTITYPIGLINDEATH: SoundEnum = SoundEnum::EntityPiglinDeath;
    pub const ENTITYPIGLINHURT: SoundEnum = SoundEnum::EntityPiglinHurt;
    pub const ENTITYPIGLINJEALOUS: SoundEnum = SoundEnum::EntityPiglinJealous;
    pub const ENTITYPIGLINRETREAT: SoundEnum = SoundEnum::EntityPiglinRetreat;
    pub const ENTITYPIGLINSTEP: SoundEnum = SoundEnum::EntityPiglinStep;
    pub const ENTITYPIGAMBIENT: SoundEnum = SoundEnum::EntityPigAmbient;
    pub const ENTITYPIGDEATH: SoundEnum = SoundEnum::EntityPigDeath;
    pub const ENTITYPIGHURT: SoundEnum = SoundEnum::EntityPigHurt;
    pub const ENTITYPIGSADDLE: SoundEnum = SoundEnum::EntityPigSaddle;
    pub const ENTITYPIGSTEP: SoundEnum = SoundEnum::EntityPigStep;
    pub const ENTITYPILLAGERAMBIENT: SoundEnum = SoundEnum::EntityPillagerAmbient;
    pub const ENTITYPILLAGERCELEBRATE: SoundEnum = SoundEnum::EntityPillagerCelebrate;
    pub const ENTITYPILLAGERDEATH: SoundEnum = SoundEnum::EntityPillagerDeath;
    pub const ENTITYPILLAGERHURT: SoundEnum = SoundEnum::EntityPillagerHurt;
    pub const ENTITYPLAYERATTACKCRIT: SoundEnum = SoundEnum::EntityPlayerAttackCrit;
    pub const ENTITYPLAYERATTACKKNOCKBACK: SoundEnum = SoundEnum::EntityPlayerAttackKnockback;
    pub const ENTITYPLAYERATTACKNODAMAGE: SoundEnum = SoundEnum::EntityPlayerAttackNodamage;
    pub const ENTITYPLAYERATTACKSTRONG: SoundEnum = SoundEnum::EntityPlayerAttackStrong;
    pub const ENTITYPLAYERATTACKSWEEP: SoundEnum = SoundEnum::EntityPlayerAttackSweep;
    pub const ENTITYPLAYERATTACKWEAK: SoundEnum = SoundEnum::EntityPlayerAttackWeak;
    pub const ENTITYPLAYERBIGFALL: SoundEnum = SoundEnum::EntityPlayerBigFall;
    pub const ENTITYPLAYERBREATH: SoundEnum = SoundEnum::EntityPlayerBreath;
    pub const ENTITYPLAYERBURP: SoundEnum = SoundEnum::EntityPlayerBurp;
    pub const ENTITYPLAYERDEATH: SoundEnum = SoundEnum::EntityPlayerDeath;
    pub const ENTITYPLAYERHURT: SoundEnum = SoundEnum::EntityPlayerHurt;
    pub const ENTITYPLAYERHURTDROWN: SoundEnum = SoundEnum::EntityPlayerHurtDrown;
    pub const ENTITYPLAYERHURTFREEZE: SoundEnum = SoundEnum::EntityPlayerHurtFreeze;
    pub const ENTITYPLAYERHURTONFIRE: SoundEnum = SoundEnum::EntityPlayerHurtOnFire;
    pub const ENTITYPLAYERHURTSWEETBERRYBUSH: SoundEnum = SoundEnum::EntityPlayerHurtSweetBerryBush;
    pub const ENTITYPLAYERLEVELUP: SoundEnum = SoundEnum::EntityPlayerLevelup;
    pub const ENTITYPLAYERSMALLFALL: SoundEnum = SoundEnum::EntityPlayerSmallFall;
    pub const ENTITYPLAYERSPLASH: SoundEnum = SoundEnum::EntityPlayerSplash;
    pub const ENTITYPLAYERSPLASHHIGHSPEED: SoundEnum = SoundEnum::EntityPlayerSplashHighSpeed;
    pub const ENTITYPLAYERSWIM: SoundEnum = SoundEnum::EntityPlayerSwim;
    pub const ENTITYPOLARBEARAMBIENT: SoundEnum = SoundEnum::EntityPolarBearAmbient;
    pub const ENTITYPOLARBEARAMBIENTBABY: SoundEnum = SoundEnum::EntityPolarBearAmbientBaby;
    pub const ENTITYPOLARBEARDEATH: SoundEnum = SoundEnum::EntityPolarBearDeath;
    pub const ENTITYPOLARBEARHURT: SoundEnum = SoundEnum::EntityPolarBearHurt;
    pub const ENTITYPOLARBEARSTEP: SoundEnum = SoundEnum::EntityPolarBearStep;
    pub const ENTITYPOLARBEARWARNING: SoundEnum = SoundEnum::EntityPolarBearWarning;
    pub const ENTITYPUFFERFISHAMBIENT: SoundEnum = SoundEnum::EntityPufferFishAmbient;
    pub const ENTITYPUFFERFISHBLOWOUT: SoundEnum = SoundEnum::EntityPufferFishBlowOut;
    pub const ENTITYPUFFERFISHBLOWUP: SoundEnum = SoundEnum::EntityPufferFishBlowUp;
    pub const ENTITYPUFFERFISHDEATH: SoundEnum = SoundEnum::EntityPufferFishDeath;
    pub const ENTITYPUFFERFISHFLOP: SoundEnum = SoundEnum::EntityPufferFishFlop;
    pub const ENTITYPUFFERFISHHURT: SoundEnum = SoundEnum::EntityPufferFishHurt;
    pub const ENTITYPUFFERFISHSTING: SoundEnum = SoundEnum::EntityPufferFishSting;
    pub const ENTITYRABBITAMBIENT: SoundEnum = SoundEnum::EntityRabbitAmbient;
    pub const ENTITYRABBITATTACK: SoundEnum = SoundEnum::EntityRabbitAttack;
    pub const ENTITYRABBITDEATH: SoundEnum = SoundEnum::EntityRabbitDeath;
    pub const ENTITYRABBITHURT: SoundEnum = SoundEnum::EntityRabbitHurt;
    pub const ENTITYRABBITJUMP: SoundEnum = SoundEnum::EntityRabbitJump;
    pub const ENTITYRAVAGERAMBIENT: SoundEnum = SoundEnum::EntityRavagerAmbient;
    pub const ENTITYRAVAGERATTACK: SoundEnum = SoundEnum::EntityRavagerAttack;
    pub const ENTITYRAVAGERCELEBRATE: SoundEnum = SoundEnum::EntityRavagerCelebrate;
    pub const ENTITYRAVAGERDEATH: SoundEnum = SoundEnum::EntityRavagerDeath;
    pub const ENTITYRAVAGERHURT: SoundEnum = SoundEnum::EntityRavagerHurt;
    pub const ENTITYRAVAGERROAR: SoundEnum = SoundEnum::EntityRavagerRoar;
    pub const ENTITYRAVAGERSTEP: SoundEnum = SoundEnum::EntityRavagerStep;
    pub const ENTITYRAVAGERSTUNNED: SoundEnum = SoundEnum::EntityRavagerStunned;
    pub const ENTITYSALMONAMBIENT: SoundEnum = SoundEnum::EntitySalmonAmbient;
    pub const ENTITYSALMONDEATH: SoundEnum = SoundEnum::EntitySalmonDeath;
    pub const ENTITYSALMONFLOP: SoundEnum = SoundEnum::EntitySalmonFlop;
    pub const ENTITYSALMONHURT: SoundEnum = SoundEnum::EntitySalmonHurt;
    pub const ENTITYSHEEPAMBIENT: SoundEnum = SoundEnum::EntitySheepAmbient;
    pub const ENTITYSHEEPDEATH: SoundEnum = SoundEnum::EntitySheepDeath;
    pub const ENTITYSHEEPHURT: SoundEnum = SoundEnum::EntitySheepHurt;
    pub const ENTITYSHEEPSHEAR: SoundEnum = SoundEnum::EntitySheepShear;
    pub const ENTITYSHEEPSTEP: SoundEnum = SoundEnum::EntitySheepStep;
    pub const ENTITYSHULKERAMBIENT: SoundEnum = SoundEnum::EntityShulkerAmbient;
    pub const ENTITYSHULKERBULLETHIT: SoundEnum = SoundEnum::EntityShulkerBulletHit;
    pub const ENTITYSHULKERBULLETHURT: SoundEnum = SoundEnum::EntityShulkerBulletHurt;
    pub const ENTITYSHULKERCLOSE: SoundEnum = SoundEnum::EntityShulkerClose;
    pub const ENTITYSHULKERDEATH: SoundEnum = SoundEnum::EntityShulkerDeath;
    pub const ENTITYSHULKERHURT: SoundEnum = SoundEnum::EntityShulkerHurt;
    pub const ENTITYSHULKERHURTCLOSED: SoundEnum = SoundEnum::EntityShulkerHurtClosed;
    pub const ENTITYSHULKEROPEN: SoundEnum = SoundEnum::EntityShulkerOpen;
    pub const ENTITYSHULKERSHOOT: SoundEnum = SoundEnum::EntityShulkerShoot;
    pub const ENTITYSHULKERTELEPORT: SoundEnum = SoundEnum::EntityShulkerTeleport;
    pub const ENTITYSILVERFISHAMBIENT: SoundEnum = SoundEnum::EntitySilverfishAmbient;
    pub const ENTITYSILVERFISHDEATH: SoundEnum = SoundEnum::EntitySilverfishDeath;
    pub const ENTITYSILVERFISHHURT: SoundEnum = SoundEnum::EntitySilverfishHurt;
    pub const ENTITYSILVERFISHSTEP: SoundEnum = SoundEnum::EntitySilverfishStep;
    pub const ENTITYSKELETONAMBIENT: SoundEnum = SoundEnum::EntitySkeletonAmbient;
    pub const ENTITYSKELETONCONVERTEDTOSTRAY: SoundEnum = SoundEnum::EntitySkeletonConvertedToStray;
    pub const ENTITYSKELETONDEATH: SoundEnum = SoundEnum::EntitySkeletonDeath;
    pub const ENTITYSKELETONHORSEAMBIENT: SoundEnum = SoundEnum::EntitySkeletonHorseAmbient;
    pub const ENTITYSKELETONHORSEAMBIENTWATER: SoundEnum =
        SoundEnum::EntitySkeletonHorseAmbientWater;
    pub const ENTITYSKELETONHORSEDEATH: SoundEnum = SoundEnum::EntitySkeletonHorseDeath;
    pub const ENTITYSKELETONHORSEGALLOPWATER: SoundEnum = SoundEnum::EntitySkeletonHorseGallopWater;
    pub const ENTITYSKELETONHORSEHURT: SoundEnum = SoundEnum::EntitySkeletonHorseHurt;
    pub const ENTITYSKELETONHORSEJUMPWATER: SoundEnum = SoundEnum::EntitySkeletonHorseJumpWater;
    pub const ENTITYSKELETONHORSESTEPWATER: SoundEnum = SoundEnum::EntitySkeletonHorseStepWater;
    pub const ENTITYSKELETONHORSESWIM: SoundEnum = SoundEnum::EntitySkeletonHorseSwim;
    pub const ENTITYSKELETONHURT: SoundEnum = SoundEnum::EntitySkeletonHurt;
    pub const ENTITYSKELETONSHOOT: SoundEnum = SoundEnum::EntitySkeletonShoot;
    pub const ENTITYSKELETONSTEP: SoundEnum = SoundEnum::EntitySkeletonStep;
    pub const ENTITYSLIMEATTACK: SoundEnum = SoundEnum::EntitySlimeAttack;
    pub const ENTITYSLIMEDEATH: SoundEnum = SoundEnum::EntitySlimeDeath;
    pub const ENTITYSLIMEDEATHSMALL: SoundEnum = SoundEnum::EntitySlimeDeathSmall;
    pub const ENTITYSLIMEHURT: SoundEnum = SoundEnum::EntitySlimeHurt;
    pub const ENTITYSLIMEHURTSMALL: SoundEnum = SoundEnum::EntitySlimeHurtSmall;
    pub const ENTITYSLIMEJUMP: SoundEnum = SoundEnum::EntitySlimeJump;
    pub const ENTITYSLIMEJUMPSMALL: SoundEnum = SoundEnum::EntitySlimeJumpSmall;
    pub const ENTITYSLIMESQUISH: SoundEnum = SoundEnum::EntitySlimeSquish;
    pub const ENTITYSLIMESQUISHSMALL: SoundEnum = SoundEnum::EntitySlimeSquishSmall;
    pub const ENTITYSNIFFERDEATH: SoundEnum = SoundEnum::EntitySnifferDeath;
    pub const ENTITYSNIFFERDIGGING: SoundEnum = SoundEnum::EntitySnifferDigging;
    pub const ENTITYSNIFFERDIGGINGSTOP: SoundEnum = SoundEnum::EntitySnifferDiggingStop;
    pub const ENTITYSNIFFERDROPSEED: SoundEnum = SoundEnum::EntitySnifferDropSeed;
    pub const ENTITYSNIFFEREAT: SoundEnum = SoundEnum::EntitySnifferEat;
    pub const ENTITYSNIFFERHAPPY: SoundEnum = SoundEnum::EntitySnifferHappy;
    pub const ENTITYSNIFFERHURT: SoundEnum = SoundEnum::EntitySnifferHurt;
    pub const ENTITYSNIFFERIDLE: SoundEnum = SoundEnum::EntitySnifferIdle;
    pub const ENTITYSNIFFERSCENTING: SoundEnum = SoundEnum::EntitySnifferScenting;
    pub const ENTITYSNIFFERSEARCHING: SoundEnum = SoundEnum::EntitySnifferSearching;
    pub const ENTITYSNIFFERSNIFFING: SoundEnum = SoundEnum::EntitySnifferSniffing;
    pub const ENTITYSNIFFERSTEP: SoundEnum = SoundEnum::EntitySnifferStep;
    pub const ENTITYSNOWBALLTHROW: SoundEnum = SoundEnum::EntitySnowballThrow;
    pub const ENTITYSNOWGOLEMAMBIENT: SoundEnum = SoundEnum::EntitySnowGolemAmbient;
    pub const ENTITYSNOWGOLEMDEATH: SoundEnum = SoundEnum::EntitySnowGolemDeath;
    pub const ENTITYSNOWGOLEMHURT: SoundEnum = SoundEnum::EntitySnowGolemHurt;
    pub const ENTITYSNOWGOLEMSHEAR: SoundEnum = SoundEnum::EntitySnowGolemShear;
    pub const ENTITYSNOWGOLEMSHOOT: SoundEnum = SoundEnum::EntitySnowGolemShoot;
    pub const ENTITYSPIDERAMBIENT: SoundEnum = SoundEnum::EntitySpiderAmbient;
    pub const ENTITYSPIDERDEATH: SoundEnum = SoundEnum::EntitySpiderDeath;
    pub const ENTITYSPIDERHURT: SoundEnum = SoundEnum::EntitySpiderHurt;
    pub const ENTITYSPIDERSTEP: SoundEnum = SoundEnum::EntitySpiderStep;
    pub const ENTITYSPLASHPOTIONBREAK: SoundEnum = SoundEnum::EntitySplashPotionBreak;
    pub const ENTITYSPLASHPOTIONTHROW: SoundEnum = SoundEnum::EntitySplashPotionThrow;
    pub const ENTITYSQUIDAMBIENT: SoundEnum = SoundEnum::EntitySquidAmbient;
    pub const ENTITYSQUIDDEATH: SoundEnum = SoundEnum::EntitySquidDeath;
    pub const ENTITYSQUIDHURT: SoundEnum = SoundEnum::EntitySquidHurt;
    pub const ENTITYSQUIDSQUIRT: SoundEnum = SoundEnum::EntitySquidSquirt;
    pub const ENTITYSTRAYAMBIENT: SoundEnum = SoundEnum::EntityStrayAmbient;
    pub const ENTITYSTRAYDEATH: SoundEnum = SoundEnum::EntityStrayDeath;
    pub const ENTITYSTRAYHURT: SoundEnum = SoundEnum::EntityStrayHurt;
    pub const ENTITYSTRAYSTEP: SoundEnum = SoundEnum::EntityStrayStep;
    pub const ENTITYSTRIDERAMBIENT: SoundEnum = SoundEnum::EntityStriderAmbient;
    pub const ENTITYSTRIDERDEATH: SoundEnum = SoundEnum::EntityStriderDeath;
    pub const ENTITYSTRIDEREAT: SoundEnum = SoundEnum::EntityStriderEat;
    pub const ENTITYSTRIDERHAPPY: SoundEnum = SoundEnum::EntityStriderHappy;
    pub const ENTITYSTRIDERHURT: SoundEnum = SoundEnum::EntityStriderHurt;
    pub const ENTITYSTRIDERRETREAT: SoundEnum = SoundEnum::EntityStriderRetreat;
    pub const ENTITYSTRIDERSADDLE: SoundEnum = SoundEnum::EntityStriderSaddle;
    pub const ENTITYSTRIDERSTEP: SoundEnum = SoundEnum::EntityStriderStep;
    pub const ENTITYSTRIDERSTEPLAVA: SoundEnum = SoundEnum::EntityStriderStepLava;
    pub const ENTITYTADPOLEDEATH: SoundEnum = SoundEnum::EntityTadpoleDeath;
    pub const ENTITYTADPOLEFLOP: SoundEnum = SoundEnum::EntityTadpoleFlop;
    pub const ENTITYTADPOLEGROWUP: SoundEnum = SoundEnum::EntityTadpoleGrowUp;
    pub const ENTITYTADPOLEHURT: SoundEnum = SoundEnum::EntityTadpoleHurt;
    pub const ENTITYTNTPRIMED: SoundEnum = SoundEnum::EntityTntPrimed;
    pub const ENTITYTROPICALFISHAMBIENT: SoundEnum = SoundEnum::EntityTropicalFishAmbient;
    pub const ENTITYTROPICALFISHDEATH: SoundEnum = SoundEnum::EntityTropicalFishDeath;
    pub const ENTITYTROPICALFISHFLOP: SoundEnum = SoundEnum::EntityTropicalFishFlop;
    pub const ENTITYTROPICALFISHHURT: SoundEnum = SoundEnum::EntityTropicalFishHurt;
    pub const ENTITYTURTLEAMBIENTLAND: SoundEnum = SoundEnum::EntityTurtleAmbientLand;
    pub const ENTITYTURTLEDEATH: SoundEnum = SoundEnum::EntityTurtleDeath;
    pub const ENTITYTURTLEDEATHBABY: SoundEnum = SoundEnum::EntityTurtleDeathBaby;
    pub const ENTITYTURTLEEGGBREAK: SoundEnum = SoundEnum::EntityTurtleEggBreak;
    pub const ENTITYTURTLEEGGCRACK: SoundEnum = SoundEnum::EntityTurtleEggCrack;
    pub const ENTITYTURTLEEGGHATCH: SoundEnum = SoundEnum::EntityTurtleEggHatch;
    pub const ENTITYTURTLEHURT: SoundEnum = SoundEnum::EntityTurtleHurt;
    pub const ENTITYTURTLEHURTBABY: SoundEnum = SoundEnum::EntityTurtleHurtBaby;
    pub const ENTITYTURTLELAYEGG: SoundEnum = SoundEnum::EntityTurtleLayEgg;
    pub const ENTITYTURTLESHAMBLE: SoundEnum = SoundEnum::EntityTurtleShamble;
    pub const ENTITYTURTLESHAMBLEBABY: SoundEnum = SoundEnum::EntityTurtleShambleBaby;
    pub const ENTITYTURTLESWIM: SoundEnum = SoundEnum::EntityTurtleSwim;
    pub const ENTITYVEXAMBIENT: SoundEnum = SoundEnum::EntityVexAmbient;
    pub const ENTITYVEXCHARGE: SoundEnum = SoundEnum::EntityVexCharge;
    pub const ENTITYVEXDEATH: SoundEnum = SoundEnum::EntityVexDeath;
    pub const ENTITYVEXHURT: SoundEnum = SoundEnum::EntityVexHurt;
    pub const ENTITYVILLAGERAMBIENT: SoundEnum = SoundEnum::EntityVillagerAmbient;
    pub const ENTITYVILLAGERCELEBRATE: SoundEnum = SoundEnum::EntityVillagerCelebrate;
    pub const ENTITYVILLAGERDEATH: SoundEnum = SoundEnum::EntityVillagerDeath;
    pub const ENTITYVILLAGERHURT: SoundEnum = SoundEnum::EntityVillagerHurt;
    pub const ENTITYVILLAGERNO: SoundEnum = SoundEnum::EntityVillagerNo;
    pub const ENTITYVILLAGERTRADE: SoundEnum = SoundEnum::EntityVillagerTrade;
    pub const ENTITYVILLAGERWORKARMORER: SoundEnum = SoundEnum::EntityVillagerWorkArmorer;
    pub const ENTITYVILLAGERWORKBUTCHER: SoundEnum = SoundEnum::EntityVillagerWorkButcher;
    pub const ENTITYVILLAGERWORKCARTOGRAPHER: SoundEnum = SoundEnum::EntityVillagerWorkCartographer;
    pub const ENTITYVILLAGERWORKCLERIC: SoundEnum = SoundEnum::EntityVillagerWorkCleric;
    pub const ENTITYVILLAGERWORKFARMER: SoundEnum = SoundEnum::EntityVillagerWorkFarmer;
    pub const ENTITYVILLAGERWORKFISHERMAN: SoundEnum = SoundEnum::EntityVillagerWorkFisherman;
    pub const ENTITYVILLAGERWORKFLETCHER: SoundEnum = SoundEnum::EntityVillagerWorkFletcher;
    pub const ENTITYVILLAGERWORKLEATHERWORKER: SoundEnum =
        SoundEnum::EntityVillagerWorkLeatherworker;
    pub const ENTITYVILLAGERWORKLIBRARIAN: SoundEnum = SoundEnum::EntityVillagerWorkLibrarian;
    pub const ENTITYVILLAGERWORKMASON: SoundEnum = SoundEnum::EntityVillagerWorkMason;
    pub const ENTITYVILLAGERWORKSHEPHERD: SoundEnum = SoundEnum::EntityVillagerWorkShepherd;
    pub const ENTITYVILLAGERWORKTOOLSMITH: SoundEnum = SoundEnum::EntityVillagerWorkToolsmith;
    pub const ENTITYVILLAGERWORKWEAPONSMITH: SoundEnum = SoundEnum::EntityVillagerWorkWeaponsmith;
    pub const ENTITYVILLAGERYES: SoundEnum = SoundEnum::EntityVillagerYes;
    pub const ENTITYVINDICATORAMBIENT: SoundEnum = SoundEnum::EntityVindicatorAmbient;
    pub const ENTITYVINDICATORCELEBRATE: SoundEnum = SoundEnum::EntityVindicatorCelebrate;
    pub const ENTITYVINDICATORDEATH: SoundEnum = SoundEnum::EntityVindicatorDeath;
    pub const ENTITYVINDICATORHURT: SoundEnum = SoundEnum::EntityVindicatorHurt;
    pub const ENTITYWANDERINGTRADERAMBIENT: SoundEnum = SoundEnum::EntityWanderingTraderAmbient;
    pub const ENTITYWANDERINGTRADERDEATH: SoundEnum = SoundEnum::EntityWanderingTraderDeath;
    pub const ENTITYWANDERINGTRADERDISAPPEARED: SoundEnum =
        SoundEnum::EntityWanderingTraderDisappeared;
    pub const ENTITYWANDERINGTRADERDRINKMILK: SoundEnum = SoundEnum::EntityWanderingTraderDrinkMilk;
    pub const ENTITYWANDERINGTRADERDRINKPOTION: SoundEnum =
        SoundEnum::EntityWanderingTraderDrinkPotion;
    pub const ENTITYWANDERINGTRADERHURT: SoundEnum = SoundEnum::EntityWanderingTraderHurt;
    pub const ENTITYWANDERINGTRADERNO: SoundEnum = SoundEnum::EntityWanderingTraderNo;
    pub const ENTITYWANDERINGTRADERREAPPEARED: SoundEnum =
        SoundEnum::EntityWanderingTraderReappeared;
    pub const ENTITYWANDERINGTRADERTRADE: SoundEnum = SoundEnum::EntityWanderingTraderTrade;
    pub const ENTITYWANDERINGTRADERYES: SoundEnum = SoundEnum::EntityWanderingTraderYes;
    pub const ENTITYWARDENAGITATED: SoundEnum = SoundEnum::EntityWardenAgitated;
    pub const ENTITYWARDENAMBIENT: SoundEnum = SoundEnum::EntityWardenAmbient;
    pub const ENTITYWARDENANGRY: SoundEnum = SoundEnum::EntityWardenAngry;
    pub const ENTITYWARDENATTACKIMPACT: SoundEnum = SoundEnum::EntityWardenAttackImpact;
    pub const ENTITYWARDENDEATH: SoundEnum = SoundEnum::EntityWardenDeath;
    pub const ENTITYWARDENDIG: SoundEnum = SoundEnum::EntityWardenDig;
    pub const ENTITYWARDENEMERGE: SoundEnum = SoundEnum::EntityWardenEmerge;
    pub const ENTITYWARDENHEARTBEAT: SoundEnum = SoundEnum::EntityWardenHeartbeat;
    pub const ENTITYWARDENHURT: SoundEnum = SoundEnum::EntityWardenHurt;
    pub const ENTITYWARDENLISTENING: SoundEnum = SoundEnum::EntityWardenListening;
    pub const ENTITYWARDENLISTENINGANGRY: SoundEnum = SoundEnum::EntityWardenListeningAngry;
    pub const ENTITYWARDENNEARBYCLOSE: SoundEnum = SoundEnum::EntityWardenNearbyClose;
    pub const ENTITYWARDENNEARBYCLOSER: SoundEnum = SoundEnum::EntityWardenNearbyCloser;
    pub const ENTITYWARDENNEARBYCLOSEST: SoundEnum = SoundEnum::EntityWardenNearbyClosest;
    pub const ENTITYWARDENROAR: SoundEnum = SoundEnum::EntityWardenRoar;
    pub const ENTITYWARDENSNIFF: SoundEnum = SoundEnum::EntityWardenSniff;
    pub const ENTITYWARDENSONICBOOM: SoundEnum = SoundEnum::EntityWardenSonicBoom;
    pub const ENTITYWARDENSONICCHARGE: SoundEnum = SoundEnum::EntityWardenSonicCharge;
    pub const ENTITYWARDENSTEP: SoundEnum = SoundEnum::EntityWardenStep;
    pub const ENTITYWARDENTENDRILCLICKS: SoundEnum = SoundEnum::EntityWardenTendrilClicks;
    pub const ENTITYWITCHAMBIENT: SoundEnum = SoundEnum::EntityWitchAmbient;
    pub const ENTITYWITCHCELEBRATE: SoundEnum = SoundEnum::EntityWitchCelebrate;
    pub const ENTITYWITCHDEATH: SoundEnum = SoundEnum::EntityWitchDeath;
    pub const ENTITYWITCHDRINK: SoundEnum = SoundEnum::EntityWitchDrink;
    pub const ENTITYWITCHHURT: SoundEnum = SoundEnum::EntityWitchHurt;
    pub const ENTITYWITCHTHROW: SoundEnum = SoundEnum::EntityWitchThrow;
    pub const ENTITYWITHERAMBIENT: SoundEnum = SoundEnum::EntityWitherAmbient;
    pub const ENTITYWITHERBREAKBLOCK: SoundEnum = SoundEnum::EntityWitherBreakBlock;
    pub const ENTITYWITHERDEATH: SoundEnum = SoundEnum::EntityWitherDeath;
    pub const ENTITYWITHERHURT: SoundEnum = SoundEnum::EntityWitherHurt;
    pub const ENTITYWITHERSHOOT: SoundEnum = SoundEnum::EntityWitherShoot;
    pub const ENTITYWITHERSKELETONAMBIENT: SoundEnum = SoundEnum::EntityWitherSkeletonAmbient;
    pub const ENTITYWITHERSKELETONDEATH: SoundEnum = SoundEnum::EntityWitherSkeletonDeath;
    pub const ENTITYWITHERSKELETONHURT: SoundEnum = SoundEnum::EntityWitherSkeletonHurt;
    pub const ENTITYWITHERSKELETONSTEP: SoundEnum = SoundEnum::EntityWitherSkeletonStep;
    pub const ENTITYWITHERSPAWN: SoundEnum = SoundEnum::EntityWitherSpawn;
    pub const ENTITYWOLFAMBIENT: SoundEnum = SoundEnum::EntityWolfAmbient;
    pub const ENTITYWOLFDEATH: SoundEnum = SoundEnum::EntityWolfDeath;
    pub const ENTITYWOLFGROWL: SoundEnum = SoundEnum::EntityWolfGrowl;
    pub const ENTITYWOLFHOWL: SoundEnum = SoundEnum::EntityWolfHowl;
    pub const ENTITYWOLFHURT: SoundEnum = SoundEnum::EntityWolfHurt;
    pub const ENTITYWOLFPANT: SoundEnum = SoundEnum::EntityWolfPant;
    pub const ENTITYWOLFSHAKE: SoundEnum = SoundEnum::EntityWolfShake;
    pub const ENTITYWOLFSTEP: SoundEnum = SoundEnum::EntityWolfStep;
    pub const ENTITYWOLFWHINE: SoundEnum = SoundEnum::EntityWolfWhine;
    pub const ENTITYZOGLINAMBIENT: SoundEnum = SoundEnum::EntityZoglinAmbient;
    pub const ENTITYZOGLINANGRY: SoundEnum = SoundEnum::EntityZoglinAngry;
    pub const ENTITYZOGLINATTACK: SoundEnum = SoundEnum::EntityZoglinAttack;
    pub const ENTITYZOGLINDEATH: SoundEnum = SoundEnum::EntityZoglinDeath;
    pub const ENTITYZOGLINHURT: SoundEnum = SoundEnum::EntityZoglinHurt;
    pub const ENTITYZOGLINSTEP: SoundEnum = SoundEnum::EntityZoglinStep;
    pub const ENTITYZOMBIEAMBIENT: SoundEnum = SoundEnum::EntityZombieAmbient;
    pub const ENTITYZOMBIEATTACKIRONDOOR: SoundEnum = SoundEnum::EntityZombieAttackIronDoor;
    pub const ENTITYZOMBIEATTACKWOODENDOOR: SoundEnum = SoundEnum::EntityZombieAttackWoodenDoor;
    pub const ENTITYZOMBIEBREAKWOODENDOOR: SoundEnum = SoundEnum::EntityZombieBreakWoodenDoor;
    pub const ENTITYZOMBIECONVERTEDTODROWNED: SoundEnum = SoundEnum::EntityZombieConvertedToDrowned;
    pub const ENTITYZOMBIEDEATH: SoundEnum = SoundEnum::EntityZombieDeath;
    pub const ENTITYZOMBIEDESTROYEGG: SoundEnum = SoundEnum::EntityZombieDestroyEgg;
    pub const ENTITYZOMBIEHORSEAMBIENT: SoundEnum = SoundEnum::EntityZombieHorseAmbient;
    pub const ENTITYZOMBIEHORSEDEATH: SoundEnum = SoundEnum::EntityZombieHorseDeath;
    pub const ENTITYZOMBIEHORSEHURT: SoundEnum = SoundEnum::EntityZombieHorseHurt;
    pub const ENTITYZOMBIEHURT: SoundEnum = SoundEnum::EntityZombieHurt;
    pub const ENTITYZOMBIEINFECT: SoundEnum = SoundEnum::EntityZombieInfect;
    pub const ENTITYZOMBIESTEP: SoundEnum = SoundEnum::EntityZombieStep;
    pub const ENTITYZOMBIEVILLAGERAMBIENT: SoundEnum = SoundEnum::EntityZombieVillagerAmbient;
    pub const ENTITYZOMBIEVILLAGERCONVERTED: SoundEnum = SoundEnum::EntityZombieVillagerConverted;
    pub const ENTITYZOMBIEVILLAGERCURE: SoundEnum = SoundEnum::EntityZombieVillagerCure;
    pub const ENTITYZOMBIEVILLAGERDEATH: SoundEnum = SoundEnum::EntityZombieVillagerDeath;
    pub const ENTITYZOMBIEVILLAGERHURT: SoundEnum = SoundEnum::EntityZombieVillagerHurt;
    pub const ENTITYZOMBIEVILLAGERSTEP: SoundEnum = SoundEnum::EntityZombieVillagerStep;
    pub const ENTITYZOMBIFIEDPIGLINAMBIENT: SoundEnum = SoundEnum::EntityZombifiedPiglinAmbient;
    pub const ENTITYZOMBIFIEDPIGLINANGRY: SoundEnum = SoundEnum::EntityZombifiedPiglinAngry;
    pub const ENTITYZOMBIFIEDPIGLINDEATH: SoundEnum = SoundEnum::EntityZombifiedPiglinDeath;
    pub const ENTITYZOMBIFIEDPIGLINHURT: SoundEnum = SoundEnum::EntityZombifiedPiglinHurt;
    pub const EVENTRAIDHORN: SoundEnum = SoundEnum::EventRaidHorn;
    pub const INTENTIONALLYEMPTY: SoundEnum = SoundEnum::IntentionallyEmpty;
    pub const ITEMARMOREQUIPCHAIN: SoundEnum = SoundEnum::ItemArmorEquipChain;
    pub const ITEMARMOREQUIPDIAMOND: SoundEnum = SoundEnum::ItemArmorEquipDiamond;
    pub const ITEMARMOREQUIPELYTRA: SoundEnum = SoundEnum::ItemArmorEquipElytra;
    pub const ITEMARMOREQUIPGENERIC: SoundEnum = SoundEnum::ItemArmorEquipGeneric;
    pub const ITEMARMOREQUIPGOLD: SoundEnum = SoundEnum::ItemArmorEquipGold;
    pub const ITEMARMOREQUIPIRON: SoundEnum = SoundEnum::ItemArmorEquipIron;
    pub const ITEMARMOREQUIPLEATHER: SoundEnum = SoundEnum::ItemArmorEquipLeather;
    pub const ITEMARMOREQUIPNETHERITE: SoundEnum = SoundEnum::ItemArmorEquipNetherite;
    pub const ITEMARMOREQUIPTURTLE: SoundEnum = SoundEnum::ItemArmorEquipTurtle;
    pub const ITEMAXESCRAPE: SoundEnum = SoundEnum::ItemAxeScrape;
    pub const ITEMAXESTRIP: SoundEnum = SoundEnum::ItemAxeStrip;
    pub const ITEMAXEWAXOFF: SoundEnum = SoundEnum::ItemAxeWaxOff;
    pub const ITEMBONEMEALUSE: SoundEnum = SoundEnum::ItemBoneMealUse;
    pub const ITEMBOOKPAGETURN: SoundEnum = SoundEnum::ItemBookPageTurn;
    pub const ITEMBOOKPUT: SoundEnum = SoundEnum::ItemBookPut;
    pub const ITEMBOTTLEEMPTY: SoundEnum = SoundEnum::ItemBottleEmpty;
    pub const ITEMBOTTLEFILL: SoundEnum = SoundEnum::ItemBottleFill;
    pub const ITEMBOTTLEFILLDRAGONBREATH: SoundEnum = SoundEnum::ItemBottleFillDragonbreath;
    pub const ITEMBRUSHBRUSHINGGENERIC: SoundEnum = SoundEnum::ItemBrushBrushingGeneric;
    pub const ITEMBRUSHBRUSHINGGRAVEL: SoundEnum = SoundEnum::ItemBrushBrushingGravel;
    pub const ITEMBRUSHBRUSHINGGRAVELCOMPLETE: SoundEnum =
        SoundEnum::ItemBrushBrushingGravelComplete;
    pub const ITEMBRUSHBRUSHINGSAND: SoundEnum = SoundEnum::ItemBrushBrushingSand;
    pub const ITEMBRUSHBRUSHINGSANDCOMPLETE: SoundEnum = SoundEnum::ItemBrushBrushingSandComplete;
    pub const ITEMBUCKETEMPTY: SoundEnum = SoundEnum::ItemBucketEmpty;
    pub const ITEMBUCKETEMPTYAXOLOTL: SoundEnum = SoundEnum::ItemBucketEmptyAxolotl;
    pub const ITEMBUCKETEMPTYFISH: SoundEnum = SoundEnum::ItemBucketEmptyFish;
    pub const ITEMBUCKETEMPTYLAVA: SoundEnum = SoundEnum::ItemBucketEmptyLava;
    pub const ITEMBUCKETEMPTYPOWDERSNOW: SoundEnum = SoundEnum::ItemBucketEmptyPowderSnow;
    pub const ITEMBUCKETEMPTYTADPOLE: SoundEnum = SoundEnum::ItemBucketEmptyTadpole;
    pub const ITEMBUCKETFILL: SoundEnum = SoundEnum::ItemBucketFill;
    pub const ITEMBUCKETFILLAXOLOTL: SoundEnum = SoundEnum::ItemBucketFillAxolotl;
    pub const ITEMBUCKETFILLFISH: SoundEnum = SoundEnum::ItemBucketFillFish;
    pub const ITEMBUCKETFILLLAVA: SoundEnum = SoundEnum::ItemBucketFillLava;
    pub const ITEMBUCKETFILLPOWDERSNOW: SoundEnum = SoundEnum::ItemBucketFillPowderSnow;
    pub const ITEMBUCKETFILLTADPOLE: SoundEnum = SoundEnum::ItemBucketFillTadpole;
    pub const ITEMBUNDLEDROPCONTENTS: SoundEnum = SoundEnum::ItemBundleDropContents;
    pub const ITEMBUNDLEINSERT: SoundEnum = SoundEnum::ItemBundleInsert;
    pub const ITEMBUNDLEREMOVEONE: SoundEnum = SoundEnum::ItemBundleRemoveOne;
    pub const ITEMCHORUSFRUITTELEPORT: SoundEnum = SoundEnum::ItemChorusFruitTeleport;
    pub const ITEMCROPPLANT: SoundEnum = SoundEnum::ItemCropPlant;
    pub const ITEMCROSSBOWHIT: SoundEnum = SoundEnum::ItemCrossbowHit;
    pub const ITEMCROSSBOWLOADINGEND: SoundEnum = SoundEnum::ItemCrossbowLoadingEnd;
    pub const ITEMCROSSBOWLOADINGMIDDLE: SoundEnum = SoundEnum::ItemCrossbowLoadingMiddle;
    pub const ITEMCROSSBOWLOADINGSTART: SoundEnum = SoundEnum::ItemCrossbowLoadingStart;
    pub const ITEMCROSSBOWQUICKCHARGE1: SoundEnum = SoundEnum::ItemCrossbowQuickCharge1;
    pub const ITEMCROSSBOWQUICKCHARGE2: SoundEnum = SoundEnum::ItemCrossbowQuickCharge2;
    pub const ITEMCROSSBOWQUICKCHARGE3: SoundEnum = SoundEnum::ItemCrossbowQuickCharge3;
    pub const ITEMCROSSBOWSHOOT: SoundEnum = SoundEnum::ItemCrossbowShoot;
    pub const ITEMDYEUSE: SoundEnum = SoundEnum::ItemDyeUse;
    pub const ITEMELYTRAFLYING: SoundEnum = SoundEnum::ItemElytraFlying;
    pub const ITEMFIRECHARGEUSE: SoundEnum = SoundEnum::ItemFirechargeUse;
    pub const ITEMFLINTANDSTEELUSE: SoundEnum = SoundEnum::ItemFlintandsteelUse;
    pub const ITEMGLOWINKSACUSE: SoundEnum = SoundEnum::ItemGlowInkSacUse;
    pub const ITEMGOATHORNPLAY: SoundEnum = SoundEnum::ItemGoatHornPlay;
    pub const ITEMGOATHORNSOUND0: SoundEnum = SoundEnum::ItemGoatHornSound0;
    pub const ITEMGOATHORNSOUND1: SoundEnum = SoundEnum::ItemGoatHornSound1;
    pub const ITEMGOATHORNSOUND2: SoundEnum = SoundEnum::ItemGoatHornSound2;
    pub const ITEMGOATHORNSOUND3: SoundEnum = SoundEnum::ItemGoatHornSound3;
    pub const ITEMGOATHORNSOUND4: SoundEnum = SoundEnum::ItemGoatHornSound4;
    pub const ITEMGOATHORNSOUND5: SoundEnum = SoundEnum::ItemGoatHornSound5;
    pub const ITEMGOATHORNSOUND6: SoundEnum = SoundEnum::ItemGoatHornSound6;
    pub const ITEMGOATHORNSOUND7: SoundEnum = SoundEnum::ItemGoatHornSound7;
    pub const ITEMHOETILL: SoundEnum = SoundEnum::ItemHoeTill;
    pub const ITEMHONEYCOMBWAXON: SoundEnum = SoundEnum::ItemHoneycombWaxOn;
    pub const ITEMHONEYBOTTLEDRINK: SoundEnum = SoundEnum::ItemHoneyBottleDrink;
    pub const ITEMINKSACUSE: SoundEnum = SoundEnum::ItemInkSacUse;
    pub const ITEMLODESTONECOMPASSLOCK: SoundEnum = SoundEnum::ItemLodestoneCompassLock;
    pub const ITEMNETHERWARTPLANT: SoundEnum = SoundEnum::ItemNetherWartPlant;
    pub const ITEMSHIELDBLOCK: SoundEnum = SoundEnum::ItemShieldBlock;
    pub const ITEMSHIELDBREAK: SoundEnum = SoundEnum::ItemShieldBreak;
    pub const ITEMSHOVELFLATTEN: SoundEnum = SoundEnum::ItemShovelFlatten;
    pub const ITEMSPYGLASSSTOPUSING: SoundEnum = SoundEnum::ItemSpyglassStopUsing;
    pub const ITEMSPYGLASSUSE: SoundEnum = SoundEnum::ItemSpyglassUse;
    pub const ITEMTOTEMUSE: SoundEnum = SoundEnum::ItemTotemUse;
    pub const ITEMTRIDENTHIT: SoundEnum = SoundEnum::ItemTridentHit;
    pub const ITEMTRIDENTHITGROUND: SoundEnum = SoundEnum::ItemTridentHitGround;
    pub const ITEMTRIDENTRETURN: SoundEnum = SoundEnum::ItemTridentReturn;
    pub const ITEMTRIDENTRIPTIDE1: SoundEnum = SoundEnum::ItemTridentRiptide1;
    pub const ITEMTRIDENTRIPTIDE2: SoundEnum = SoundEnum::ItemTridentRiptide2;
    pub const ITEMTRIDENTRIPTIDE3: SoundEnum = SoundEnum::ItemTridentRiptide3;
    pub const ITEMTRIDENTTHROW: SoundEnum = SoundEnum::ItemTridentThrow;
    pub const ITEMTRIDENTTHUNDER: SoundEnum = SoundEnum::ItemTridentThunder;
    pub const MUSICCREATIVE: SoundEnum = SoundEnum::MusicCreative;
    pub const MUSICCREDITS: SoundEnum = SoundEnum::MusicCredits;
    pub const MUSICDISC11: SoundEnum = SoundEnum::MusicDisc11;
    pub const MUSICDISC13: SoundEnum = SoundEnum::MusicDisc13;
    pub const MUSICDISC5: SoundEnum = SoundEnum::MusicDisc5;
    pub const MUSICDISCBLOCKS: SoundEnum = SoundEnum::MusicDiscBlocks;
    pub const MUSICDISCCAT: SoundEnum = SoundEnum::MusicDiscCat;
    pub const MUSICDISCCHIRP: SoundEnum = SoundEnum::MusicDiscChirp;
    pub const MUSICDISCFAR: SoundEnum = SoundEnum::MusicDiscFar;
    pub const MUSICDISCMALL: SoundEnum = SoundEnum::MusicDiscMall;
    pub const MUSICDISCMELLOHI: SoundEnum = SoundEnum::MusicDiscMellohi;
    pub const MUSICDISCOTHERSIDE: SoundEnum = SoundEnum::MusicDiscOtherside;
    pub const MUSICDISCPIGSTEP: SoundEnum = SoundEnum::MusicDiscPigstep;
    pub const MUSICDISCRELIC: SoundEnum = SoundEnum::MusicDiscRelic;
    pub const MUSICDISCSTAL: SoundEnum = SoundEnum::MusicDiscStal;
    pub const MUSICDISCSTRAD: SoundEnum = SoundEnum::MusicDiscStrad;
    pub const MUSICDISCWAIT: SoundEnum = SoundEnum::MusicDiscWait;
    pub const MUSICDISCWARD: SoundEnum = SoundEnum::MusicDiscWard;
    pub const MUSICDRAGON: SoundEnum = SoundEnum::MusicDragon;
    pub const MUSICEND: SoundEnum = SoundEnum::MusicEnd;
    pub const MUSICGAME: SoundEnum = SoundEnum::MusicGame;
    pub const MUSICMENU: SoundEnum = SoundEnum::MusicMenu;
    pub const MUSICNETHERBASALTDELTAS: SoundEnum = SoundEnum::MusicNetherBasaltDeltas;
    pub const MUSICNETHERCRIMSONFOREST: SoundEnum = SoundEnum::MusicNetherCrimsonForest;
    pub const MUSICNETHERNETHERWASTES: SoundEnum = SoundEnum::MusicNetherNetherWastes;
    pub const MUSICNETHERSOULSANDVALLEY: SoundEnum = SoundEnum::MusicNetherSoulSandValley;
    pub const MUSICNETHERWARPEDFOREST: SoundEnum = SoundEnum::MusicNetherWarpedForest;
    pub const MUSICOVERWORLDBADLANDS: SoundEnum = SoundEnum::MusicOverworldBadlands;
    pub const MUSICOVERWORLDBAMBOOJUNGLE: SoundEnum = SoundEnum::MusicOverworldBambooJungle;
    pub const MUSICOVERWORLDCHERRYGROVE: SoundEnum = SoundEnum::MusicOverworldCherryGrove;
    pub const MUSICOVERWORLDDEEPDARK: SoundEnum = SoundEnum::MusicOverworldDeepDark;
    pub const MUSICOVERWORLDDESERT: SoundEnum = SoundEnum::MusicOverworldDesert;
    pub const MUSICOVERWORLDDRIPSTONECAVES: SoundEnum = SoundEnum::MusicOverworldDripstoneCaves;
    pub const MUSICOVERWORLDFLOWERFOREST: SoundEnum = SoundEnum::MusicOverworldFlowerForest;
    pub const MUSICOVERWORLDFOREST: SoundEnum = SoundEnum::MusicOverworldForest;
    pub const MUSICOVERWORLDFROZENPEAKS: SoundEnum = SoundEnum::MusicOverworldFrozenPeaks;
    pub const MUSICOVERWORLDGROVE: SoundEnum = SoundEnum::MusicOverworldGrove;
    pub const MUSICOVERWORLDJAGGEDPEAKS: SoundEnum = SoundEnum::MusicOverworldJaggedPeaks;
    pub const MUSICOVERWORLDJUNGLE: SoundEnum = SoundEnum::MusicOverworldJungle;
    pub const MUSICOVERWORLDLUSHCAVES: SoundEnum = SoundEnum::MusicOverworldLushCaves;
    pub const MUSICOVERWORLDMEADOW: SoundEnum = SoundEnum::MusicOverworldMeadow;
    pub const MUSICOVERWORLDOLDGROWTHTAIGA: SoundEnum = SoundEnum::MusicOverworldOldGrowthTaiga;
    pub const MUSICOVERWORLDSNOWYSLOPES: SoundEnum = SoundEnum::MusicOverworldSnowySlopes;
    pub const MUSICOVERWORLDSPARSEJUNGLE: SoundEnum = SoundEnum::MusicOverworldSparseJungle;
    pub const MUSICOVERWORLDSTONYPEAKS: SoundEnum = SoundEnum::MusicOverworldStonyPeaks;
    pub const MUSICOVERWORLDSWAMP: SoundEnum = SoundEnum::MusicOverworldSwamp;
    pub const MUSICUNDERWATER: SoundEnum = SoundEnum::MusicUnderWater;
    pub const PARTICLESOULESCAPE: SoundEnum = SoundEnum::ParticleSoulEscape;
    pub const UIBUTTONCLICK: SoundEnum = SoundEnum::UiButtonClick;
    pub const UICARTOGRAPHYTABLETAKERESULT: SoundEnum = SoundEnum::UiCartographyTableTakeResult;
    pub const UILOOMSELECTPATTERN: SoundEnum = SoundEnum::UiLoomSelectPattern;
    pub const UILOOMTAKERESULT: SoundEnum = SoundEnum::UiLoomTakeResult;
    pub const UISTONECUTTERSELECTRECIPE: SoundEnum = SoundEnum::UiStonecutterSelectRecipe;
    pub const UISTONECUTTERTAKERESULT: SoundEnum = SoundEnum::UiStonecutterTakeResult;
    pub const UITOASTCHALLENGECOMPLETE: SoundEnum = SoundEnum::UiToastChallengeComplete;
    pub const UITOASTIN: SoundEnum = SoundEnum::UiToastIn;
    pub const UITOASTOUT: SoundEnum = SoundEnum::UiToastOut;
    pub const WEATHERRAIN: SoundEnum = SoundEnum::WeatherRain;
    pub const WEATHERRAINABOVE: SoundEnum = SoundEnum::WeatherRainAbove;
    pub fn from_string(str: String) -> std::option::Option<SoundEnum> {
        match str.as_str() {
            "AMBIENT_BASALT_DELTAS_ADDITIONS" => Some(SoundEnum::AmbientBasaltDeltasAdditions),
            "AMBIENT_BASALT_DELTAS_LOOP" => Some(SoundEnum::AmbientBasaltDeltasLoop),
            "AMBIENT_BASALT_DELTAS_MOOD" => Some(SoundEnum::AmbientBasaltDeltasMood),
            "AMBIENT_CAVE" => Some(SoundEnum::AmbientCave),
            "AMBIENT_CRIMSON_FOREST_ADDITIONS" => Some(SoundEnum::AmbientCrimsonForestAdditions),
            "AMBIENT_CRIMSON_FOREST_LOOP" => Some(SoundEnum::AmbientCrimsonForestLoop),
            "AMBIENT_CRIMSON_FOREST_MOOD" => Some(SoundEnum::AmbientCrimsonForestMood),
            "AMBIENT_NETHER_WASTES_ADDITIONS" => Some(SoundEnum::AmbientNetherWastesAdditions),
            "AMBIENT_NETHER_WASTES_LOOP" => Some(SoundEnum::AmbientNetherWastesLoop),
            "AMBIENT_NETHER_WASTES_MOOD" => Some(SoundEnum::AmbientNetherWastesMood),
            "AMBIENT_SOUL_SAND_VALLEY_ADDITIONS" => Some(SoundEnum::AmbientSoulSandValleyAdditions),
            "AMBIENT_SOUL_SAND_VALLEY_LOOP" => Some(SoundEnum::AmbientSoulSandValleyLoop),
            "AMBIENT_SOUL_SAND_VALLEY_MOOD" => Some(SoundEnum::AmbientSoulSandValleyMood),
            "AMBIENT_UNDERWATER_ENTER" => Some(SoundEnum::AmbientUnderwaterEnter),
            "AMBIENT_UNDERWATER_EXIT" => Some(SoundEnum::AmbientUnderwaterExit),
            "AMBIENT_UNDERWATER_LOOP" => Some(SoundEnum::AmbientUnderwaterLoop),
            "AMBIENT_UNDERWATER_LOOP_ADDITIONS" => Some(SoundEnum::AmbientUnderwaterLoopAdditions),
            "AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE" => {
                Some(SoundEnum::AmbientUnderwaterLoopAdditionsRare)
            }
            "AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE" => {
                Some(SoundEnum::AmbientUnderwaterLoopAdditionsUltraRare)
            }
            "AMBIENT_WARPED_FOREST_ADDITIONS" => Some(SoundEnum::AmbientWarpedForestAdditions),
            "AMBIENT_WARPED_FOREST_LOOP" => Some(SoundEnum::AmbientWarpedForestLoop),
            "AMBIENT_WARPED_FOREST_MOOD" => Some(SoundEnum::AmbientWarpedForestMood),
            "BLOCK_AMETHYST_BLOCK_BREAK" => Some(SoundEnum::BlockAmethystBlockBreak),
            "BLOCK_AMETHYST_BLOCK_CHIME" => Some(SoundEnum::BlockAmethystBlockChime),
            "BLOCK_AMETHYST_BLOCK_FALL" => Some(SoundEnum::BlockAmethystBlockFall),
            "BLOCK_AMETHYST_BLOCK_HIT" => Some(SoundEnum::BlockAmethystBlockHit),
            "BLOCK_AMETHYST_BLOCK_PLACE" => Some(SoundEnum::BlockAmethystBlockPlace),
            "BLOCK_AMETHYST_BLOCK_RESONATE" => Some(SoundEnum::BlockAmethystBlockResonate),
            "BLOCK_AMETHYST_BLOCK_STEP" => Some(SoundEnum::BlockAmethystBlockStep),
            "BLOCK_AMETHYST_CLUSTER_BREAK" => Some(SoundEnum::BlockAmethystClusterBreak),
            "BLOCK_AMETHYST_CLUSTER_FALL" => Some(SoundEnum::BlockAmethystClusterFall),
            "BLOCK_AMETHYST_CLUSTER_HIT" => Some(SoundEnum::BlockAmethystClusterHit),
            "BLOCK_AMETHYST_CLUSTER_PLACE" => Some(SoundEnum::BlockAmethystClusterPlace),
            "BLOCK_AMETHYST_CLUSTER_STEP" => Some(SoundEnum::BlockAmethystClusterStep),
            "BLOCK_ANCIENT_DEBRIS_BREAK" => Some(SoundEnum::BlockAncientDebrisBreak),
            "BLOCK_ANCIENT_DEBRIS_FALL" => Some(SoundEnum::BlockAncientDebrisFall),
            "BLOCK_ANCIENT_DEBRIS_HIT" => Some(SoundEnum::BlockAncientDebrisHit),
            "BLOCK_ANCIENT_DEBRIS_PLACE" => Some(SoundEnum::BlockAncientDebrisPlace),
            "BLOCK_ANCIENT_DEBRIS_STEP" => Some(SoundEnum::BlockAncientDebrisStep),
            "BLOCK_ANVIL_BREAK" => Some(SoundEnum::BlockAnvilBreak),
            "BLOCK_ANVIL_DESTROY" => Some(SoundEnum::BlockAnvilDestroy),
            "BLOCK_ANVIL_FALL" => Some(SoundEnum::BlockAnvilFall),
            "BLOCK_ANVIL_HIT" => Some(SoundEnum::BlockAnvilHit),
            "BLOCK_ANVIL_LAND" => Some(SoundEnum::BlockAnvilLand),
            "BLOCK_ANVIL_PLACE" => Some(SoundEnum::BlockAnvilPlace),
            "BLOCK_ANVIL_STEP" => Some(SoundEnum::BlockAnvilStep),
            "BLOCK_ANVIL_USE" => Some(SoundEnum::BlockAnvilUse),
            "BLOCK_AZALEA_BREAK" => Some(SoundEnum::BlockAzaleaBreak),
            "BLOCK_AZALEA_FALL" => Some(SoundEnum::BlockAzaleaFall),
            "BLOCK_AZALEA_HIT" => Some(SoundEnum::BlockAzaleaHit),
            "BLOCK_AZALEA_LEAVES_BREAK" => Some(SoundEnum::BlockAzaleaLeavesBreak),
            "BLOCK_AZALEA_LEAVES_FALL" => Some(SoundEnum::BlockAzaleaLeavesFall),
            "BLOCK_AZALEA_LEAVES_HIT" => Some(SoundEnum::BlockAzaleaLeavesHit),
            "BLOCK_AZALEA_LEAVES_PLACE" => Some(SoundEnum::BlockAzaleaLeavesPlace),
            "BLOCK_AZALEA_LEAVES_STEP" => Some(SoundEnum::BlockAzaleaLeavesStep),
            "BLOCK_AZALEA_PLACE" => Some(SoundEnum::BlockAzaleaPlace),
            "BLOCK_AZALEA_STEP" => Some(SoundEnum::BlockAzaleaStep),
            "BLOCK_BAMBOO_BREAK" => Some(SoundEnum::BlockBambooBreak),
            "BLOCK_BAMBOO_FALL" => Some(SoundEnum::BlockBambooFall),
            "BLOCK_BAMBOO_HIT" => Some(SoundEnum::BlockBambooHit),
            "BLOCK_BAMBOO_PLACE" => Some(SoundEnum::BlockBambooPlace),
            "BLOCK_BAMBOO_SAPLING_BREAK" => Some(SoundEnum::BlockBambooSaplingBreak),
            "BLOCK_BAMBOO_SAPLING_HIT" => Some(SoundEnum::BlockBambooSaplingHit),
            "BLOCK_BAMBOO_SAPLING_PLACE" => Some(SoundEnum::BlockBambooSaplingPlace),
            "BLOCK_BAMBOO_STEP" => Some(SoundEnum::BlockBambooStep),
            "BLOCK_BAMBOO_WOOD_BREAK" => Some(SoundEnum::BlockBambooWoodBreak),
            "BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF" => Some(SoundEnum::BlockBambooWoodButtonClickOff),
            "BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON" => Some(SoundEnum::BlockBambooWoodButtonClickOn),
            "BLOCK_BAMBOO_WOOD_DOOR_CLOSE" => Some(SoundEnum::BlockBambooWoodDoorClose),
            "BLOCK_BAMBOO_WOOD_DOOR_OPEN" => Some(SoundEnum::BlockBambooWoodDoorOpen),
            "BLOCK_BAMBOO_WOOD_FALL" => Some(SoundEnum::BlockBambooWoodFall),
            "BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE" => Some(SoundEnum::BlockBambooWoodFenceGateClose),
            "BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN" => Some(SoundEnum::BlockBambooWoodFenceGateOpen),
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK" => {
                Some(SoundEnum::BlockBambooWoodHangingSignBreak)
            }
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL" => {
                Some(SoundEnum::BlockBambooWoodHangingSignFall)
            }
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT" => Some(SoundEnum::BlockBambooWoodHangingSignHit),
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE" => {
                Some(SoundEnum::BlockBambooWoodHangingSignPlace)
            }
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP" => {
                Some(SoundEnum::BlockBambooWoodHangingSignStep)
            }
            "BLOCK_BAMBOO_WOOD_HIT" => Some(SoundEnum::BlockBambooWoodHit),
            "BLOCK_BAMBOO_WOOD_PLACE" => Some(SoundEnum::BlockBambooWoodPlace),
            "BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockBambooWoodPressurePlateClickOff)
            }
            "BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockBambooWoodPressurePlateClickOn)
            }
            "BLOCK_BAMBOO_WOOD_STEP" => Some(SoundEnum::BlockBambooWoodStep),
            "BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE" => Some(SoundEnum::BlockBambooWoodTrapdoorClose),
            "BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN" => Some(SoundEnum::BlockBambooWoodTrapdoorOpen),
            "BLOCK_BARREL_CLOSE" => Some(SoundEnum::BlockBarrelClose),
            "BLOCK_BARREL_OPEN" => Some(SoundEnum::BlockBarrelOpen),
            "BLOCK_BASALT_BREAK" => Some(SoundEnum::BlockBasaltBreak),
            "BLOCK_BASALT_FALL" => Some(SoundEnum::BlockBasaltFall),
            "BLOCK_BASALT_HIT" => Some(SoundEnum::BlockBasaltHit),
            "BLOCK_BASALT_PLACE" => Some(SoundEnum::BlockBasaltPlace),
            "BLOCK_BASALT_STEP" => Some(SoundEnum::BlockBasaltStep),
            "BLOCK_BEACON_ACTIVATE" => Some(SoundEnum::BlockBeaconActivate),
            "BLOCK_BEACON_AMBIENT" => Some(SoundEnum::BlockBeaconAmbient),
            "BLOCK_BEACON_DEACTIVATE" => Some(SoundEnum::BlockBeaconDeactivate),
            "BLOCK_BEACON_POWER_SELECT" => Some(SoundEnum::BlockBeaconPowerSelect),
            "BLOCK_BEEHIVE_DRIP" => Some(SoundEnum::BlockBeehiveDrip),
            "BLOCK_BEEHIVE_ENTER" => Some(SoundEnum::BlockBeehiveEnter),
            "BLOCK_BEEHIVE_EXIT" => Some(SoundEnum::BlockBeehiveExit),
            "BLOCK_BEEHIVE_SHEAR" => Some(SoundEnum::BlockBeehiveShear),
            "BLOCK_BEEHIVE_WORK" => Some(SoundEnum::BlockBeehiveWork),
            "BLOCK_BELL_RESONATE" => Some(SoundEnum::BlockBellResonate),
            "BLOCK_BELL_USE" => Some(SoundEnum::BlockBellUse),
            "BLOCK_BIG_DRIPLEAF_BREAK" => Some(SoundEnum::BlockBigDripleafBreak),
            "BLOCK_BIG_DRIPLEAF_FALL" => Some(SoundEnum::BlockBigDripleafFall),
            "BLOCK_BIG_DRIPLEAF_HIT" => Some(SoundEnum::BlockBigDripleafHit),
            "BLOCK_BIG_DRIPLEAF_PLACE" => Some(SoundEnum::BlockBigDripleafPlace),
            "BLOCK_BIG_DRIPLEAF_STEP" => Some(SoundEnum::BlockBigDripleafStep),
            "BLOCK_BIG_DRIPLEAF_TILT_DOWN" => Some(SoundEnum::BlockBigDripleafTiltDown),
            "BLOCK_BIG_DRIPLEAF_TILT_UP" => Some(SoundEnum::BlockBigDripleafTiltUp),
            "BLOCK_BLASTFURNACE_FIRE_CRACKLE" => Some(SoundEnum::BlockBlastfurnaceFireCrackle),
            "BLOCK_BONE_BLOCK_BREAK" => Some(SoundEnum::BlockBoneBlockBreak),
            "BLOCK_BONE_BLOCK_FALL" => Some(SoundEnum::BlockBoneBlockFall),
            "BLOCK_BONE_BLOCK_HIT" => Some(SoundEnum::BlockBoneBlockHit),
            "BLOCK_BONE_BLOCK_PLACE" => Some(SoundEnum::BlockBoneBlockPlace),
            "BLOCK_BONE_BLOCK_STEP" => Some(SoundEnum::BlockBoneBlockStep),
            "BLOCK_BREWING_STAND_BREW" => Some(SoundEnum::BlockBrewingStandBrew),
            "BLOCK_BUBBLE_COLUMN_BUBBLE_POP" => Some(SoundEnum::BlockBubbleColumnBubblePop),
            "BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT" => {
                Some(SoundEnum::BlockBubbleColumnUpwardsAmbient)
            }
            "BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE" => Some(SoundEnum::BlockBubbleColumnUpwardsInside),
            "BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT" => {
                Some(SoundEnum::BlockBubbleColumnWhirlpoolAmbient)
            }
            "BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE" => {
                Some(SoundEnum::BlockBubbleColumnWhirlpoolInside)
            }
            "BLOCK_CAKE_ADD_CANDLE" => Some(SoundEnum::BlockCakeAddCandle),
            "BLOCK_CALCITE_BREAK" => Some(SoundEnum::BlockCalciteBreak),
            "BLOCK_CALCITE_FALL" => Some(SoundEnum::BlockCalciteFall),
            "BLOCK_CALCITE_HIT" => Some(SoundEnum::BlockCalciteHit),
            "BLOCK_CALCITE_PLACE" => Some(SoundEnum::BlockCalcitePlace),
            "BLOCK_CALCITE_STEP" => Some(SoundEnum::BlockCalciteStep),
            "BLOCK_CAMPFIRE_CRACKLE" => Some(SoundEnum::BlockCampfireCrackle),
            "BLOCK_CANDLE_AMBIENT" => Some(SoundEnum::BlockCandleAmbient),
            "BLOCK_CANDLE_BREAK" => Some(SoundEnum::BlockCandleBreak),
            "BLOCK_CANDLE_EXTINGUISH" => Some(SoundEnum::BlockCandleExtinguish),
            "BLOCK_CANDLE_FALL" => Some(SoundEnum::BlockCandleFall),
            "BLOCK_CANDLE_HIT" => Some(SoundEnum::BlockCandleHit),
            "BLOCK_CANDLE_PLACE" => Some(SoundEnum::BlockCandlePlace),
            "BLOCK_CANDLE_STEP" => Some(SoundEnum::BlockCandleStep),
            "BLOCK_CAVE_VINES_BREAK" => Some(SoundEnum::BlockCaveVinesBreak),
            "BLOCK_CAVE_VINES_FALL" => Some(SoundEnum::BlockCaveVinesFall),
            "BLOCK_CAVE_VINES_HIT" => Some(SoundEnum::BlockCaveVinesHit),
            "BLOCK_CAVE_VINES_PICK_BERRIES" => Some(SoundEnum::BlockCaveVinesPickBerries),
            "BLOCK_CAVE_VINES_PLACE" => Some(SoundEnum::BlockCaveVinesPlace),
            "BLOCK_CAVE_VINES_STEP" => Some(SoundEnum::BlockCaveVinesStep),
            "BLOCK_CHAIN_BREAK" => Some(SoundEnum::BlockChainBreak),
            "BLOCK_CHAIN_FALL" => Some(SoundEnum::BlockChainFall),
            "BLOCK_CHAIN_HIT" => Some(SoundEnum::BlockChainHit),
            "BLOCK_CHAIN_PLACE" => Some(SoundEnum::BlockChainPlace),
            "BLOCK_CHAIN_STEP" => Some(SoundEnum::BlockChainStep),
            "BLOCK_CHERRY_LEAVES_BREAK" => Some(SoundEnum::BlockCherryLeavesBreak),
            "BLOCK_CHERRY_LEAVES_FALL" => Some(SoundEnum::BlockCherryLeavesFall),
            "BLOCK_CHERRY_LEAVES_HIT" => Some(SoundEnum::BlockCherryLeavesHit),
            "BLOCK_CHERRY_LEAVES_PLACE" => Some(SoundEnum::BlockCherryLeavesPlace),
            "BLOCK_CHERRY_LEAVES_STEP" => Some(SoundEnum::BlockCherryLeavesStep),
            "BLOCK_CHERRY_SAPLING_BREAK" => Some(SoundEnum::BlockCherrySaplingBreak),
            "BLOCK_CHERRY_SAPLING_FALL" => Some(SoundEnum::BlockCherrySaplingFall),
            "BLOCK_CHERRY_SAPLING_HIT" => Some(SoundEnum::BlockCherrySaplingHit),
            "BLOCK_CHERRY_SAPLING_PLACE" => Some(SoundEnum::BlockCherrySaplingPlace),
            "BLOCK_CHERRY_SAPLING_STEP" => Some(SoundEnum::BlockCherrySaplingStep),
            "BLOCK_CHERRY_WOOD_BREAK" => Some(SoundEnum::BlockCherryWoodBreak),
            "BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF" => Some(SoundEnum::BlockCherryWoodButtonClickOff),
            "BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON" => Some(SoundEnum::BlockCherryWoodButtonClickOn),
            "BLOCK_CHERRY_WOOD_DOOR_CLOSE" => Some(SoundEnum::BlockCherryWoodDoorClose),
            "BLOCK_CHERRY_WOOD_DOOR_OPEN" => Some(SoundEnum::BlockCherryWoodDoorOpen),
            "BLOCK_CHERRY_WOOD_FALL" => Some(SoundEnum::BlockCherryWoodFall),
            "BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE" => Some(SoundEnum::BlockCherryWoodFenceGateClose),
            "BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN" => Some(SoundEnum::BlockCherryWoodFenceGateOpen),
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK" => {
                Some(SoundEnum::BlockCherryWoodHangingSignBreak)
            }
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL" => {
                Some(SoundEnum::BlockCherryWoodHangingSignFall)
            }
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT" => Some(SoundEnum::BlockCherryWoodHangingSignHit),
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE" => {
                Some(SoundEnum::BlockCherryWoodHangingSignPlace)
            }
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP" => {
                Some(SoundEnum::BlockCherryWoodHangingSignStep)
            }
            "BLOCK_CHERRY_WOOD_HIT" => Some(SoundEnum::BlockCherryWoodHit),
            "BLOCK_CHERRY_WOOD_PLACE" => Some(SoundEnum::BlockCherryWoodPlace),
            "BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockCherryWoodPressurePlateClickOff)
            }
            "BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockCherryWoodPressurePlateClickOn)
            }
            "BLOCK_CHERRY_WOOD_STEP" => Some(SoundEnum::BlockCherryWoodStep),
            "BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE" => Some(SoundEnum::BlockCherryWoodTrapdoorClose),
            "BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN" => Some(SoundEnum::BlockCherryWoodTrapdoorOpen),
            "BLOCK_CHEST_CLOSE" => Some(SoundEnum::BlockChestClose),
            "BLOCK_CHEST_LOCKED" => Some(SoundEnum::BlockChestLocked),
            "BLOCK_CHEST_OPEN" => Some(SoundEnum::BlockChestOpen),
            "BLOCK_CHISELED_BOOKSHELF_BREAK" => Some(SoundEnum::BlockChiseledBookshelfBreak),
            "BLOCK_CHISELED_BOOKSHELF_FALL" => Some(SoundEnum::BlockChiseledBookshelfFall),
            "BLOCK_CHISELED_BOOKSHELF_HIT" => Some(SoundEnum::BlockChiseledBookshelfHit),
            "BLOCK_CHISELED_BOOKSHELF_INSERT" => Some(SoundEnum::BlockChiseledBookshelfInsert),
            "BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED" => {
                Some(SoundEnum::BlockChiseledBookshelfInsertEnchanted)
            }
            "BLOCK_CHISELED_BOOKSHELF_PICKUP" => Some(SoundEnum::BlockChiseledBookshelfPickup),
            "BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED" => {
                Some(SoundEnum::BlockChiseledBookshelfPickupEnchanted)
            }
            "BLOCK_CHISELED_BOOKSHELF_PLACE" => Some(SoundEnum::BlockChiseledBookshelfPlace),
            "BLOCK_CHISELED_BOOKSHELF_STEP" => Some(SoundEnum::BlockChiseledBookshelfStep),
            "BLOCK_CHORUS_FLOWER_DEATH" => Some(SoundEnum::BlockChorusFlowerDeath),
            "BLOCK_CHORUS_FLOWER_GROW" => Some(SoundEnum::BlockChorusFlowerGrow),
            "BLOCK_COMPARATOR_CLICK" => Some(SoundEnum::BlockComparatorClick),
            "BLOCK_COMPOSTER_EMPTY" => Some(SoundEnum::BlockComposterEmpty),
            "BLOCK_COMPOSTER_FILL" => Some(SoundEnum::BlockComposterFill),
            "BLOCK_COMPOSTER_FILL_SUCCESS" => Some(SoundEnum::BlockComposterFillSuccess),
            "BLOCK_COMPOSTER_READY" => Some(SoundEnum::BlockComposterReady),
            "BLOCK_CONDUIT_ACTIVATE" => Some(SoundEnum::BlockConduitActivate),
            "BLOCK_CONDUIT_AMBIENT" => Some(SoundEnum::BlockConduitAmbient),
            "BLOCK_CONDUIT_AMBIENT_SHORT" => Some(SoundEnum::BlockConduitAmbientShort),
            "BLOCK_CONDUIT_ATTACK_TARGET" => Some(SoundEnum::BlockConduitAttackTarget),
            "BLOCK_CONDUIT_DEACTIVATE" => Some(SoundEnum::BlockConduitDeactivate),
            "BLOCK_COPPER_BREAK" => Some(SoundEnum::BlockCopperBreak),
            "BLOCK_COPPER_FALL" => Some(SoundEnum::BlockCopperFall),
            "BLOCK_COPPER_HIT" => Some(SoundEnum::BlockCopperHit),
            "BLOCK_COPPER_PLACE" => Some(SoundEnum::BlockCopperPlace),
            "BLOCK_COPPER_STEP" => Some(SoundEnum::BlockCopperStep),
            "BLOCK_CORAL_BLOCK_BREAK" => Some(SoundEnum::BlockCoralBlockBreak),
            "BLOCK_CORAL_BLOCK_FALL" => Some(SoundEnum::BlockCoralBlockFall),
            "BLOCK_CORAL_BLOCK_HIT" => Some(SoundEnum::BlockCoralBlockHit),
            "BLOCK_CORAL_BLOCK_PLACE" => Some(SoundEnum::BlockCoralBlockPlace),
            "BLOCK_CORAL_BLOCK_STEP" => Some(SoundEnum::BlockCoralBlockStep),
            "BLOCK_CROP_BREAK" => Some(SoundEnum::BlockCropBreak),
            "BLOCK_DECORATED_POT_BREAK" => Some(SoundEnum::BlockDecoratedPotBreak),
            "BLOCK_DECORATED_POT_FALL" => Some(SoundEnum::BlockDecoratedPotFall),
            "BLOCK_DECORATED_POT_HIT" => Some(SoundEnum::BlockDecoratedPotHit),
            "BLOCK_DECORATED_POT_PLACE" => Some(SoundEnum::BlockDecoratedPotPlace),
            "BLOCK_DECORATED_POT_SHATTER" => Some(SoundEnum::BlockDecoratedPotShatter),
            "BLOCK_DECORATED_POT_STEP" => Some(SoundEnum::BlockDecoratedPotStep),
            "BLOCK_DEEPSLATE_BREAK" => Some(SoundEnum::BlockDeepslateBreak),
            "BLOCK_DEEPSLATE_BRICKS_BREAK" => Some(SoundEnum::BlockDeepslateBricksBreak),
            "BLOCK_DEEPSLATE_BRICKS_FALL" => Some(SoundEnum::BlockDeepslateBricksFall),
            "BLOCK_DEEPSLATE_BRICKS_HIT" => Some(SoundEnum::BlockDeepslateBricksHit),
            "BLOCK_DEEPSLATE_BRICKS_PLACE" => Some(SoundEnum::BlockDeepslateBricksPlace),
            "BLOCK_DEEPSLATE_BRICKS_STEP" => Some(SoundEnum::BlockDeepslateBricksStep),
            "BLOCK_DEEPSLATE_FALL" => Some(SoundEnum::BlockDeepslateFall),
            "BLOCK_DEEPSLATE_HIT" => Some(SoundEnum::BlockDeepslateHit),
            "BLOCK_DEEPSLATE_PLACE" => Some(SoundEnum::BlockDeepslatePlace),
            "BLOCK_DEEPSLATE_STEP" => Some(SoundEnum::BlockDeepslateStep),
            "BLOCK_DEEPSLATE_TILES_BREAK" => Some(SoundEnum::BlockDeepslateTilesBreak),
            "BLOCK_DEEPSLATE_TILES_FALL" => Some(SoundEnum::BlockDeepslateTilesFall),
            "BLOCK_DEEPSLATE_TILES_HIT" => Some(SoundEnum::BlockDeepslateTilesHit),
            "BLOCK_DEEPSLATE_TILES_PLACE" => Some(SoundEnum::BlockDeepslateTilesPlace),
            "BLOCK_DEEPSLATE_TILES_STEP" => Some(SoundEnum::BlockDeepslateTilesStep),
            "BLOCK_DISPENSER_DISPENSE" => Some(SoundEnum::BlockDispenserDispense),
            "BLOCK_DISPENSER_FAIL" => Some(SoundEnum::BlockDispenserFail),
            "BLOCK_DISPENSER_LAUNCH" => Some(SoundEnum::BlockDispenserLaunch),
            "BLOCK_DRIPSTONE_BLOCK_BREAK" => Some(SoundEnum::BlockDripstoneBlockBreak),
            "BLOCK_DRIPSTONE_BLOCK_FALL" => Some(SoundEnum::BlockDripstoneBlockFall),
            "BLOCK_DRIPSTONE_BLOCK_HIT" => Some(SoundEnum::BlockDripstoneBlockHit),
            "BLOCK_DRIPSTONE_BLOCK_PLACE" => Some(SoundEnum::BlockDripstoneBlockPlace),
            "BLOCK_DRIPSTONE_BLOCK_STEP" => Some(SoundEnum::BlockDripstoneBlockStep),
            "BLOCK_ENCHANTMENT_TABLE_USE" => Some(SoundEnum::BlockEnchantmentTableUse),
            "BLOCK_ENDER_CHEST_CLOSE" => Some(SoundEnum::BlockEnderChestClose),
            "BLOCK_ENDER_CHEST_OPEN" => Some(SoundEnum::BlockEnderChestOpen),
            "BLOCK_END_GATEWAY_SPAWN" => Some(SoundEnum::BlockEndGatewaySpawn),
            "BLOCK_END_PORTAL_FRAME_FILL" => Some(SoundEnum::BlockEndPortalFrameFill),
            "BLOCK_END_PORTAL_SPAWN" => Some(SoundEnum::BlockEndPortalSpawn),
            "BLOCK_FENCE_GATE_CLOSE" => Some(SoundEnum::BlockFenceGateClose),
            "BLOCK_FENCE_GATE_OPEN" => Some(SoundEnum::BlockFenceGateOpen),
            "BLOCK_FIRE_AMBIENT" => Some(SoundEnum::BlockFireAmbient),
            "BLOCK_FIRE_EXTINGUISH" => Some(SoundEnum::BlockFireExtinguish),
            "BLOCK_FLOWERING_AZALEA_BREAK" => Some(SoundEnum::BlockFloweringAzaleaBreak),
            "BLOCK_FLOWERING_AZALEA_FALL" => Some(SoundEnum::BlockFloweringAzaleaFall),
            "BLOCK_FLOWERING_AZALEA_HIT" => Some(SoundEnum::BlockFloweringAzaleaHit),
            "BLOCK_FLOWERING_AZALEA_PLACE" => Some(SoundEnum::BlockFloweringAzaleaPlace),
            "BLOCK_FLOWERING_AZALEA_STEP" => Some(SoundEnum::BlockFloweringAzaleaStep),
            "BLOCK_FROGLIGHT_BREAK" => Some(SoundEnum::BlockFroglightBreak),
            "BLOCK_FROGLIGHT_FALL" => Some(SoundEnum::BlockFroglightFall),
            "BLOCK_FROGLIGHT_HIT" => Some(SoundEnum::BlockFroglightHit),
            "BLOCK_FROGLIGHT_PLACE" => Some(SoundEnum::BlockFroglightPlace),
            "BLOCK_FROGLIGHT_STEP" => Some(SoundEnum::BlockFroglightStep),
            "BLOCK_FROGSPAWN_BREAK" => Some(SoundEnum::BlockFrogspawnBreak),
            "BLOCK_FROGSPAWN_FALL" => Some(SoundEnum::BlockFrogspawnFall),
            "BLOCK_FROGSPAWN_HATCH" => Some(SoundEnum::BlockFrogspawnHatch),
            "BLOCK_FROGSPAWN_HIT" => Some(SoundEnum::BlockFrogspawnHit),
            "BLOCK_FROGSPAWN_PLACE" => Some(SoundEnum::BlockFrogspawnPlace),
            "BLOCK_FROGSPAWN_STEP" => Some(SoundEnum::BlockFrogspawnStep),
            "BLOCK_FUNGUS_BREAK" => Some(SoundEnum::BlockFungusBreak),
            "BLOCK_FUNGUS_FALL" => Some(SoundEnum::BlockFungusFall),
            "BLOCK_FUNGUS_HIT" => Some(SoundEnum::BlockFungusHit),
            "BLOCK_FUNGUS_PLACE" => Some(SoundEnum::BlockFungusPlace),
            "BLOCK_FUNGUS_STEP" => Some(SoundEnum::BlockFungusStep),
            "BLOCK_FURNACE_FIRE_CRACKLE" => Some(SoundEnum::BlockFurnaceFireCrackle),
            "BLOCK_GILDED_BLACKSTONE_BREAK" => Some(SoundEnum::BlockGildedBlackstoneBreak),
            "BLOCK_GILDED_BLACKSTONE_FALL" => Some(SoundEnum::BlockGildedBlackstoneFall),
            "BLOCK_GILDED_BLACKSTONE_HIT" => Some(SoundEnum::BlockGildedBlackstoneHit),
            "BLOCK_GILDED_BLACKSTONE_PLACE" => Some(SoundEnum::BlockGildedBlackstonePlace),
            "BLOCK_GILDED_BLACKSTONE_STEP" => Some(SoundEnum::BlockGildedBlackstoneStep),
            "BLOCK_GLASS_BREAK" => Some(SoundEnum::BlockGlassBreak),
            "BLOCK_GLASS_FALL" => Some(SoundEnum::BlockGlassFall),
            "BLOCK_GLASS_HIT" => Some(SoundEnum::BlockGlassHit),
            "BLOCK_GLASS_PLACE" => Some(SoundEnum::BlockGlassPlace),
            "BLOCK_GLASS_STEP" => Some(SoundEnum::BlockGlassStep),
            "BLOCK_GRASS_BREAK" => Some(SoundEnum::BlockGrassBreak),
            "BLOCK_GRASS_FALL" => Some(SoundEnum::BlockGrassFall),
            "BLOCK_GRASS_HIT" => Some(SoundEnum::BlockGrassHit),
            "BLOCK_GRASS_PLACE" => Some(SoundEnum::BlockGrassPlace),
            "BLOCK_GRASS_STEP" => Some(SoundEnum::BlockGrassStep),
            "BLOCK_GRAVEL_BREAK" => Some(SoundEnum::BlockGravelBreak),
            "BLOCK_GRAVEL_FALL" => Some(SoundEnum::BlockGravelFall),
            "BLOCK_GRAVEL_HIT" => Some(SoundEnum::BlockGravelHit),
            "BLOCK_GRAVEL_PLACE" => Some(SoundEnum::BlockGravelPlace),
            "BLOCK_GRAVEL_STEP" => Some(SoundEnum::BlockGravelStep),
            "BLOCK_GRINDSTONE_USE" => Some(SoundEnum::BlockGrindstoneUse),
            "BLOCK_GROWING_PLANT_CROP" => Some(SoundEnum::BlockGrowingPlantCrop),
            "BLOCK_HANGING_ROOTS_BREAK" => Some(SoundEnum::BlockHangingRootsBreak),
            "BLOCK_HANGING_ROOTS_FALL" => Some(SoundEnum::BlockHangingRootsFall),
            "BLOCK_HANGING_ROOTS_HIT" => Some(SoundEnum::BlockHangingRootsHit),
            "BLOCK_HANGING_ROOTS_PLACE" => Some(SoundEnum::BlockHangingRootsPlace),
            "BLOCK_HANGING_ROOTS_STEP" => Some(SoundEnum::BlockHangingRootsStep),
            "BLOCK_HANGING_SIGN_BREAK" => Some(SoundEnum::BlockHangingSignBreak),
            "BLOCK_HANGING_SIGN_FALL" => Some(SoundEnum::BlockHangingSignFall),
            "BLOCK_HANGING_SIGN_HIT" => Some(SoundEnum::BlockHangingSignHit),
            "BLOCK_HANGING_SIGN_PLACE" => Some(SoundEnum::BlockHangingSignPlace),
            "BLOCK_HANGING_SIGN_STEP" => Some(SoundEnum::BlockHangingSignStep),
            "BLOCK_HONEY_BLOCK_BREAK" => Some(SoundEnum::BlockHoneyBlockBreak),
            "BLOCK_HONEY_BLOCK_FALL" => Some(SoundEnum::BlockHoneyBlockFall),
            "BLOCK_HONEY_BLOCK_HIT" => Some(SoundEnum::BlockHoneyBlockHit),
            "BLOCK_HONEY_BLOCK_PLACE" => Some(SoundEnum::BlockHoneyBlockPlace),
            "BLOCK_HONEY_BLOCK_SLIDE" => Some(SoundEnum::BlockHoneyBlockSlide),
            "BLOCK_HONEY_BLOCK_STEP" => Some(SoundEnum::BlockHoneyBlockStep),
            "BLOCK_IRON_DOOR_CLOSE" => Some(SoundEnum::BlockIronDoorClose),
            "BLOCK_IRON_DOOR_OPEN" => Some(SoundEnum::BlockIronDoorOpen),
            "BLOCK_IRON_TRAPDOOR_CLOSE" => Some(SoundEnum::BlockIronTrapdoorClose),
            "BLOCK_IRON_TRAPDOOR_OPEN" => Some(SoundEnum::BlockIronTrapdoorOpen),
            "BLOCK_LADDER_BREAK" => Some(SoundEnum::BlockLadderBreak),
            "BLOCK_LADDER_FALL" => Some(SoundEnum::BlockLadderFall),
            "BLOCK_LADDER_HIT" => Some(SoundEnum::BlockLadderHit),
            "BLOCK_LADDER_PLACE" => Some(SoundEnum::BlockLadderPlace),
            "BLOCK_LADDER_STEP" => Some(SoundEnum::BlockLadderStep),
            "BLOCK_LANTERN_BREAK" => Some(SoundEnum::BlockLanternBreak),
            "BLOCK_LANTERN_FALL" => Some(SoundEnum::BlockLanternFall),
            "BLOCK_LANTERN_HIT" => Some(SoundEnum::BlockLanternHit),
            "BLOCK_LANTERN_PLACE" => Some(SoundEnum::BlockLanternPlace),
            "BLOCK_LANTERN_STEP" => Some(SoundEnum::BlockLanternStep),
            "BLOCK_LARGE_AMETHYST_BUD_BREAK" => Some(SoundEnum::BlockLargeAmethystBudBreak),
            "BLOCK_LARGE_AMETHYST_BUD_PLACE" => Some(SoundEnum::BlockLargeAmethystBudPlace),
            "BLOCK_LAVA_AMBIENT" => Some(SoundEnum::BlockLavaAmbient),
            "BLOCK_LAVA_EXTINGUISH" => Some(SoundEnum::BlockLavaExtinguish),
            "BLOCK_LAVA_POP" => Some(SoundEnum::BlockLavaPop),
            "BLOCK_LEVER_CLICK" => Some(SoundEnum::BlockLeverClick),
            "BLOCK_LILY_PAD_PLACE" => Some(SoundEnum::BlockLilyPadPlace),
            "BLOCK_LODESTONE_BREAK" => Some(SoundEnum::BlockLodestoneBreak),
            "BLOCK_LODESTONE_FALL" => Some(SoundEnum::BlockLodestoneFall),
            "BLOCK_LODESTONE_HIT" => Some(SoundEnum::BlockLodestoneHit),
            "BLOCK_LODESTONE_PLACE" => Some(SoundEnum::BlockLodestonePlace),
            "BLOCK_LODESTONE_STEP" => Some(SoundEnum::BlockLodestoneStep),
            "BLOCK_MANGROVE_ROOTS_BREAK" => Some(SoundEnum::BlockMangroveRootsBreak),
            "BLOCK_MANGROVE_ROOTS_FALL" => Some(SoundEnum::BlockMangroveRootsFall),
            "BLOCK_MANGROVE_ROOTS_HIT" => Some(SoundEnum::BlockMangroveRootsHit),
            "BLOCK_MANGROVE_ROOTS_PLACE" => Some(SoundEnum::BlockMangroveRootsPlace),
            "BLOCK_MANGROVE_ROOTS_STEP" => Some(SoundEnum::BlockMangroveRootsStep),
            "BLOCK_MEDIUM_AMETHYST_BUD_BREAK" => Some(SoundEnum::BlockMediumAmethystBudBreak),
            "BLOCK_MEDIUM_AMETHYST_BUD_PLACE" => Some(SoundEnum::BlockMediumAmethystBudPlace),
            "BLOCK_METAL_BREAK" => Some(SoundEnum::BlockMetalBreak),
            "BLOCK_METAL_FALL" => Some(SoundEnum::BlockMetalFall),
            "BLOCK_METAL_HIT" => Some(SoundEnum::BlockMetalHit),
            "BLOCK_METAL_PLACE" => Some(SoundEnum::BlockMetalPlace),
            "BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockMetalPressurePlateClickOff)
            }
            "BLOCK_METAL_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockMetalPressurePlateClickOn)
            }
            "BLOCK_METAL_STEP" => Some(SoundEnum::BlockMetalStep),
            "BLOCK_MOSS_BREAK" => Some(SoundEnum::BlockMossBreak),
            "BLOCK_MOSS_CARPET_BREAK" => Some(SoundEnum::BlockMossCarpetBreak),
            "BLOCK_MOSS_CARPET_FALL" => Some(SoundEnum::BlockMossCarpetFall),
            "BLOCK_MOSS_CARPET_HIT" => Some(SoundEnum::BlockMossCarpetHit),
            "BLOCK_MOSS_CARPET_PLACE" => Some(SoundEnum::BlockMossCarpetPlace),
            "BLOCK_MOSS_CARPET_STEP" => Some(SoundEnum::BlockMossCarpetStep),
            "BLOCK_MOSS_FALL" => Some(SoundEnum::BlockMossFall),
            "BLOCK_MOSS_HIT" => Some(SoundEnum::BlockMossHit),
            "BLOCK_MOSS_PLACE" => Some(SoundEnum::BlockMossPlace),
            "BLOCK_MOSS_STEP" => Some(SoundEnum::BlockMossStep),
            "BLOCK_MUDDY_MANGROVE_ROOTS_BREAK" => Some(SoundEnum::BlockMuddyMangroveRootsBreak),
            "BLOCK_MUDDY_MANGROVE_ROOTS_FALL" => Some(SoundEnum::BlockMuddyMangroveRootsFall),
            "BLOCK_MUDDY_MANGROVE_ROOTS_HIT" => Some(SoundEnum::BlockMuddyMangroveRootsHit),
            "BLOCK_MUDDY_MANGROVE_ROOTS_PLACE" => Some(SoundEnum::BlockMuddyMangroveRootsPlace),
            "BLOCK_MUDDY_MANGROVE_ROOTS_STEP" => Some(SoundEnum::BlockMuddyMangroveRootsStep),
            "BLOCK_MUD_BREAK" => Some(SoundEnum::BlockMudBreak),
            "BLOCK_MUD_BRICKS_BREAK" => Some(SoundEnum::BlockMudBricksBreak),
            "BLOCK_MUD_BRICKS_FALL" => Some(SoundEnum::BlockMudBricksFall),
            "BLOCK_MUD_BRICKS_HIT" => Some(SoundEnum::BlockMudBricksHit),
            "BLOCK_MUD_BRICKS_PLACE" => Some(SoundEnum::BlockMudBricksPlace),
            "BLOCK_MUD_BRICKS_STEP" => Some(SoundEnum::BlockMudBricksStep),
            "BLOCK_MUD_FALL" => Some(SoundEnum::BlockMudFall),
            "BLOCK_MUD_HIT" => Some(SoundEnum::BlockMudHit),
            "BLOCK_MUD_PLACE" => Some(SoundEnum::BlockMudPlace),
            "BLOCK_MUD_STEP" => Some(SoundEnum::BlockMudStep),
            "BLOCK_NETHERITE_BLOCK_BREAK" => Some(SoundEnum::BlockNetheriteBlockBreak),
            "BLOCK_NETHERITE_BLOCK_FALL" => Some(SoundEnum::BlockNetheriteBlockFall),
            "BLOCK_NETHERITE_BLOCK_HIT" => Some(SoundEnum::BlockNetheriteBlockHit),
            "BLOCK_NETHERITE_BLOCK_PLACE" => Some(SoundEnum::BlockNetheriteBlockPlace),
            "BLOCK_NETHERITE_BLOCK_STEP" => Some(SoundEnum::BlockNetheriteBlockStep),
            "BLOCK_NETHERRACK_BREAK" => Some(SoundEnum::BlockNetherrackBreak),
            "BLOCK_NETHERRACK_FALL" => Some(SoundEnum::BlockNetherrackFall),
            "BLOCK_NETHERRACK_HIT" => Some(SoundEnum::BlockNetherrackHit),
            "BLOCK_NETHERRACK_PLACE" => Some(SoundEnum::BlockNetherrackPlace),
            "BLOCK_NETHERRACK_STEP" => Some(SoundEnum::BlockNetherrackStep),
            "BLOCK_NETHER_BRICKS_BREAK" => Some(SoundEnum::BlockNetherBricksBreak),
            "BLOCK_NETHER_BRICKS_FALL" => Some(SoundEnum::BlockNetherBricksFall),
            "BLOCK_NETHER_BRICKS_HIT" => Some(SoundEnum::BlockNetherBricksHit),
            "BLOCK_NETHER_BRICKS_PLACE" => Some(SoundEnum::BlockNetherBricksPlace),
            "BLOCK_NETHER_BRICKS_STEP" => Some(SoundEnum::BlockNetherBricksStep),
            "BLOCK_NETHER_GOLD_ORE_BREAK" => Some(SoundEnum::BlockNetherGoldOreBreak),
            "BLOCK_NETHER_GOLD_ORE_FALL" => Some(SoundEnum::BlockNetherGoldOreFall),
            "BLOCK_NETHER_GOLD_ORE_HIT" => Some(SoundEnum::BlockNetherGoldOreHit),
            "BLOCK_NETHER_GOLD_ORE_PLACE" => Some(SoundEnum::BlockNetherGoldOrePlace),
            "BLOCK_NETHER_GOLD_ORE_STEP" => Some(SoundEnum::BlockNetherGoldOreStep),
            "BLOCK_NETHER_ORE_BREAK" => Some(SoundEnum::BlockNetherOreBreak),
            "BLOCK_NETHER_ORE_FALL" => Some(SoundEnum::BlockNetherOreFall),
            "BLOCK_NETHER_ORE_HIT" => Some(SoundEnum::BlockNetherOreHit),
            "BLOCK_NETHER_ORE_PLACE" => Some(SoundEnum::BlockNetherOrePlace),
            "BLOCK_NETHER_ORE_STEP" => Some(SoundEnum::BlockNetherOreStep),
            "BLOCK_NETHER_SPROUTS_BREAK" => Some(SoundEnum::BlockNetherSproutsBreak),
            "BLOCK_NETHER_SPROUTS_FALL" => Some(SoundEnum::BlockNetherSproutsFall),
            "BLOCK_NETHER_SPROUTS_HIT" => Some(SoundEnum::BlockNetherSproutsHit),
            "BLOCK_NETHER_SPROUTS_PLACE" => Some(SoundEnum::BlockNetherSproutsPlace),
            "BLOCK_NETHER_SPROUTS_STEP" => Some(SoundEnum::BlockNetherSproutsStep),
            "BLOCK_NETHER_WART_BREAK" => Some(SoundEnum::BlockNetherWartBreak),
            "BLOCK_NETHER_WOOD_BREAK" => Some(SoundEnum::BlockNetherWoodBreak),
            "BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF" => Some(SoundEnum::BlockNetherWoodButtonClickOff),
            "BLOCK_NETHER_WOOD_BUTTON_CLICK_ON" => Some(SoundEnum::BlockNetherWoodButtonClickOn),
            "BLOCK_NETHER_WOOD_DOOR_CLOSE" => Some(SoundEnum::BlockNetherWoodDoorClose),
            "BLOCK_NETHER_WOOD_DOOR_OPEN" => Some(SoundEnum::BlockNetherWoodDoorOpen),
            "BLOCK_NETHER_WOOD_FALL" => Some(SoundEnum::BlockNetherWoodFall),
            "BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE" => Some(SoundEnum::BlockNetherWoodFenceGateClose),
            "BLOCK_NETHER_WOOD_FENCE_GATE_OPEN" => Some(SoundEnum::BlockNetherWoodFenceGateOpen),
            "BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK" => {
                Some(SoundEnum::BlockNetherWoodHangingSignBreak)
            }
            "BLOCK_NETHER_WOOD_HANGING_SIGN_FALL" => {
                Some(SoundEnum::BlockNetherWoodHangingSignFall)
            }
            "BLOCK_NETHER_WOOD_HANGING_SIGN_HIT" => Some(SoundEnum::BlockNetherWoodHangingSignHit),
            "BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE" => {
                Some(SoundEnum::BlockNetherWoodHangingSignPlace)
            }
            "BLOCK_NETHER_WOOD_HANGING_SIGN_STEP" => {
                Some(SoundEnum::BlockNetherWoodHangingSignStep)
            }
            "BLOCK_NETHER_WOOD_HIT" => Some(SoundEnum::BlockNetherWoodHit),
            "BLOCK_NETHER_WOOD_PLACE" => Some(SoundEnum::BlockNetherWoodPlace),
            "BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockNetherWoodPressurePlateClickOff)
            }
            "BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockNetherWoodPressurePlateClickOn)
            }
            "BLOCK_NETHER_WOOD_STEP" => Some(SoundEnum::BlockNetherWoodStep),
            "BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE" => Some(SoundEnum::BlockNetherWoodTrapdoorClose),
            "BLOCK_NETHER_WOOD_TRAPDOOR_OPEN" => Some(SoundEnum::BlockNetherWoodTrapdoorOpen),
            "BLOCK_NOTE_BLOCK_BANJO" => Some(SoundEnum::BlockNoteBlockBanjo),
            "BLOCK_NOTE_BLOCK_BASEDRUM" => Some(SoundEnum::BlockNoteBlockBasedrum),
            "BLOCK_NOTE_BLOCK_BASS" => Some(SoundEnum::BlockNoteBlockBass),
            "BLOCK_NOTE_BLOCK_BELL" => Some(SoundEnum::BlockNoteBlockBell),
            "BLOCK_NOTE_BLOCK_BIT" => Some(SoundEnum::BlockNoteBlockBit),
            "BLOCK_NOTE_BLOCK_CHIME" => Some(SoundEnum::BlockNoteBlockChime),
            "BLOCK_NOTE_BLOCK_COW_BELL" => Some(SoundEnum::BlockNoteBlockCowBell),
            "BLOCK_NOTE_BLOCK_DIDGERIDOO" => Some(SoundEnum::BlockNoteBlockDidgeridoo),
            "BLOCK_NOTE_BLOCK_FLUTE" => Some(SoundEnum::BlockNoteBlockFlute),
            "BLOCK_NOTE_BLOCK_GUITAR" => Some(SoundEnum::BlockNoteBlockGuitar),
            "BLOCK_NOTE_BLOCK_HARP" => Some(SoundEnum::BlockNoteBlockHarp),
            "BLOCK_NOTE_BLOCK_HAT" => Some(SoundEnum::BlockNoteBlockHat),
            "BLOCK_NOTE_BLOCK_IMITATE_CREEPER" => Some(SoundEnum::BlockNoteBlockImitateCreeper),
            "BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON" => {
                Some(SoundEnum::BlockNoteBlockImitateEnderDragon)
            }
            "BLOCK_NOTE_BLOCK_IMITATE_PIGLIN" => Some(SoundEnum::BlockNoteBlockImitatePiglin),
            "BLOCK_NOTE_BLOCK_IMITATE_SKELETON" => Some(SoundEnum::BlockNoteBlockImitateSkeleton),
            "BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON" => {
                Some(SoundEnum::BlockNoteBlockImitateWitherSkeleton)
            }
            "BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE" => Some(SoundEnum::BlockNoteBlockImitateZombie),
            "BLOCK_NOTE_BLOCK_IRON_XYLOPHONE" => Some(SoundEnum::BlockNoteBlockIronXylophone),
            "BLOCK_NOTE_BLOCK_PLING" => Some(SoundEnum::BlockNoteBlockPling),
            "BLOCK_NOTE_BLOCK_SNARE" => Some(SoundEnum::BlockNoteBlockSnare),
            "BLOCK_NOTE_BLOCK_XYLOPHONE" => Some(SoundEnum::BlockNoteBlockXylophone),
            "BLOCK_NYLIUM_BREAK" => Some(SoundEnum::BlockNyliumBreak),
            "BLOCK_NYLIUM_FALL" => Some(SoundEnum::BlockNyliumFall),
            "BLOCK_NYLIUM_HIT" => Some(SoundEnum::BlockNyliumHit),
            "BLOCK_NYLIUM_PLACE" => Some(SoundEnum::BlockNyliumPlace),
            "BLOCK_NYLIUM_STEP" => Some(SoundEnum::BlockNyliumStep),
            "BLOCK_PACKED_MUD_BREAK" => Some(SoundEnum::BlockPackedMudBreak),
            "BLOCK_PACKED_MUD_FALL" => Some(SoundEnum::BlockPackedMudFall),
            "BLOCK_PACKED_MUD_HIT" => Some(SoundEnum::BlockPackedMudHit),
            "BLOCK_PACKED_MUD_PLACE" => Some(SoundEnum::BlockPackedMudPlace),
            "BLOCK_PACKED_MUD_STEP" => Some(SoundEnum::BlockPackedMudStep),
            "BLOCK_PINK_PETALS_BREAK" => Some(SoundEnum::BlockPinkPetalsBreak),
            "BLOCK_PINK_PETALS_FALL" => Some(SoundEnum::BlockPinkPetalsFall),
            "BLOCK_PINK_PETALS_HIT" => Some(SoundEnum::BlockPinkPetalsHit),
            "BLOCK_PINK_PETALS_PLACE" => Some(SoundEnum::BlockPinkPetalsPlace),
            "BLOCK_PINK_PETALS_STEP" => Some(SoundEnum::BlockPinkPetalsStep),
            "BLOCK_PISTON_CONTRACT" => Some(SoundEnum::BlockPistonContract),
            "BLOCK_PISTON_EXTEND" => Some(SoundEnum::BlockPistonExtend),
            "BLOCK_POINTED_DRIPSTONE_BREAK" => Some(SoundEnum::BlockPointedDripstoneBreak),
            "BLOCK_POINTED_DRIPSTONE_DRIP_LAVA" => Some(SoundEnum::BlockPointedDripstoneDripLava),
            "BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON" => {
                Some(SoundEnum::BlockPointedDripstoneDripLavaIntoCauldron)
            }
            "BLOCK_POINTED_DRIPSTONE_DRIP_WATER" => Some(SoundEnum::BlockPointedDripstoneDripWater),
            "BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON" => {
                Some(SoundEnum::BlockPointedDripstoneDripWaterIntoCauldron)
            }
            "BLOCK_POINTED_DRIPSTONE_FALL" => Some(SoundEnum::BlockPointedDripstoneFall),
            "BLOCK_POINTED_DRIPSTONE_HIT" => Some(SoundEnum::BlockPointedDripstoneHit),
            "BLOCK_POINTED_DRIPSTONE_LAND" => Some(SoundEnum::BlockPointedDripstoneLand),
            "BLOCK_POINTED_DRIPSTONE_PLACE" => Some(SoundEnum::BlockPointedDripstonePlace),
            "BLOCK_POINTED_DRIPSTONE_STEP" => Some(SoundEnum::BlockPointedDripstoneStep),
            "BLOCK_POLISHED_DEEPSLATE_BREAK" => Some(SoundEnum::BlockPolishedDeepslateBreak),
            "BLOCK_POLISHED_DEEPSLATE_FALL" => Some(SoundEnum::BlockPolishedDeepslateFall),
            "BLOCK_POLISHED_DEEPSLATE_HIT" => Some(SoundEnum::BlockPolishedDeepslateHit),
            "BLOCK_POLISHED_DEEPSLATE_PLACE" => Some(SoundEnum::BlockPolishedDeepslatePlace),
            "BLOCK_POLISHED_DEEPSLATE_STEP" => Some(SoundEnum::BlockPolishedDeepslateStep),
            "BLOCK_PORTAL_AMBIENT" => Some(SoundEnum::BlockPortalAmbient),
            "BLOCK_PORTAL_TRAVEL" => Some(SoundEnum::BlockPortalTravel),
            "BLOCK_PORTAL_TRIGGER" => Some(SoundEnum::BlockPortalTrigger),
            "BLOCK_POWDER_SNOW_BREAK" => Some(SoundEnum::BlockPowderSnowBreak),
            "BLOCK_POWDER_SNOW_FALL" => Some(SoundEnum::BlockPowderSnowFall),
            "BLOCK_POWDER_SNOW_HIT" => Some(SoundEnum::BlockPowderSnowHit),
            "BLOCK_POWDER_SNOW_PLACE" => Some(SoundEnum::BlockPowderSnowPlace),
            "BLOCK_POWDER_SNOW_STEP" => Some(SoundEnum::BlockPowderSnowStep),
            "BLOCK_PUMPKIN_CARVE" => Some(SoundEnum::BlockPumpkinCarve),
            "BLOCK_REDSTONE_TORCH_BURNOUT" => Some(SoundEnum::BlockRedstoneTorchBurnout),
            "BLOCK_RESPAWN_ANCHOR_AMBIENT" => Some(SoundEnum::BlockRespawnAnchorAmbient),
            "BLOCK_RESPAWN_ANCHOR_CHARGE" => Some(SoundEnum::BlockRespawnAnchorCharge),
            "BLOCK_RESPAWN_ANCHOR_DEPLETE" => Some(SoundEnum::BlockRespawnAnchorDeplete),
            "BLOCK_RESPAWN_ANCHOR_SET_SPAWN" => Some(SoundEnum::BlockRespawnAnchorSetSpawn),
            "BLOCK_ROOTED_DIRT_BREAK" => Some(SoundEnum::BlockRootedDirtBreak),
            "BLOCK_ROOTED_DIRT_FALL" => Some(SoundEnum::BlockRootedDirtFall),
            "BLOCK_ROOTED_DIRT_HIT" => Some(SoundEnum::BlockRootedDirtHit),
            "BLOCK_ROOTED_DIRT_PLACE" => Some(SoundEnum::BlockRootedDirtPlace),
            "BLOCK_ROOTED_DIRT_STEP" => Some(SoundEnum::BlockRootedDirtStep),
            "BLOCK_ROOTS_BREAK" => Some(SoundEnum::BlockRootsBreak),
            "BLOCK_ROOTS_FALL" => Some(SoundEnum::BlockRootsFall),
            "BLOCK_ROOTS_HIT" => Some(SoundEnum::BlockRootsHit),
            "BLOCK_ROOTS_PLACE" => Some(SoundEnum::BlockRootsPlace),
            "BLOCK_ROOTS_STEP" => Some(SoundEnum::BlockRootsStep),
            "BLOCK_SAND_BREAK" => Some(SoundEnum::BlockSandBreak),
            "BLOCK_SAND_FALL" => Some(SoundEnum::BlockSandFall),
            "BLOCK_SAND_HIT" => Some(SoundEnum::BlockSandHit),
            "BLOCK_SAND_PLACE" => Some(SoundEnum::BlockSandPlace),
            "BLOCK_SAND_STEP" => Some(SoundEnum::BlockSandStep),
            "BLOCK_SCAFFOLDING_BREAK" => Some(SoundEnum::BlockScaffoldingBreak),
            "BLOCK_SCAFFOLDING_FALL" => Some(SoundEnum::BlockScaffoldingFall),
            "BLOCK_SCAFFOLDING_HIT" => Some(SoundEnum::BlockScaffoldingHit),
            "BLOCK_SCAFFOLDING_PLACE" => Some(SoundEnum::BlockScaffoldingPlace),
            "BLOCK_SCAFFOLDING_STEP" => Some(SoundEnum::BlockScaffoldingStep),
            "BLOCK_SCULK_BREAK" => Some(SoundEnum::BlockSculkBreak),
            "BLOCK_SCULK_CATALYST_BLOOM" => Some(SoundEnum::BlockSculkCatalystBloom),
            "BLOCK_SCULK_CATALYST_BREAK" => Some(SoundEnum::BlockSculkCatalystBreak),
            "BLOCK_SCULK_CATALYST_FALL" => Some(SoundEnum::BlockSculkCatalystFall),
            "BLOCK_SCULK_CATALYST_HIT" => Some(SoundEnum::BlockSculkCatalystHit),
            "BLOCK_SCULK_CATALYST_PLACE" => Some(SoundEnum::BlockSculkCatalystPlace),
            "BLOCK_SCULK_CATALYST_STEP" => Some(SoundEnum::BlockSculkCatalystStep),
            "BLOCK_SCULK_CHARGE" => Some(SoundEnum::BlockSculkCharge),
            "BLOCK_SCULK_FALL" => Some(SoundEnum::BlockSculkFall),
            "BLOCK_SCULK_HIT" => Some(SoundEnum::BlockSculkHit),
            "BLOCK_SCULK_PLACE" => Some(SoundEnum::BlockSculkPlace),
            "BLOCK_SCULK_SENSOR_BREAK" => Some(SoundEnum::BlockSculkSensorBreak),
            "BLOCK_SCULK_SENSOR_CLICKING" => Some(SoundEnum::BlockSculkSensorClicking),
            "BLOCK_SCULK_SENSOR_CLICKING_STOP" => Some(SoundEnum::BlockSculkSensorClickingStop),
            "BLOCK_SCULK_SENSOR_FALL" => Some(SoundEnum::BlockSculkSensorFall),
            "BLOCK_SCULK_SENSOR_HIT" => Some(SoundEnum::BlockSculkSensorHit),
            "BLOCK_SCULK_SENSOR_PLACE" => Some(SoundEnum::BlockSculkSensorPlace),
            "BLOCK_SCULK_SENSOR_STEP" => Some(SoundEnum::BlockSculkSensorStep),
            "BLOCK_SCULK_SHRIEKER_BREAK" => Some(SoundEnum::BlockSculkShriekerBreak),
            "BLOCK_SCULK_SHRIEKER_FALL" => Some(SoundEnum::BlockSculkShriekerFall),
            "BLOCK_SCULK_SHRIEKER_HIT" => Some(SoundEnum::BlockSculkShriekerHit),
            "BLOCK_SCULK_SHRIEKER_PLACE" => Some(SoundEnum::BlockSculkShriekerPlace),
            "BLOCK_SCULK_SHRIEKER_SHRIEK" => Some(SoundEnum::BlockSculkShriekerShriek),
            "BLOCK_SCULK_SHRIEKER_STEP" => Some(SoundEnum::BlockSculkShriekerStep),
            "BLOCK_SCULK_SPREAD" => Some(SoundEnum::BlockSculkSpread),
            "BLOCK_SCULK_STEP" => Some(SoundEnum::BlockSculkStep),
            "BLOCK_SCULK_VEIN_BREAK" => Some(SoundEnum::BlockSculkVeinBreak),
            "BLOCK_SCULK_VEIN_FALL" => Some(SoundEnum::BlockSculkVeinFall),
            "BLOCK_SCULK_VEIN_HIT" => Some(SoundEnum::BlockSculkVeinHit),
            "BLOCK_SCULK_VEIN_PLACE" => Some(SoundEnum::BlockSculkVeinPlace),
            "BLOCK_SCULK_VEIN_STEP" => Some(SoundEnum::BlockSculkVeinStep),
            "BLOCK_SHROOMLIGHT_BREAK" => Some(SoundEnum::BlockShroomlightBreak),
            "BLOCK_SHROOMLIGHT_FALL" => Some(SoundEnum::BlockShroomlightFall),
            "BLOCK_SHROOMLIGHT_HIT" => Some(SoundEnum::BlockShroomlightHit),
            "BLOCK_SHROOMLIGHT_PLACE" => Some(SoundEnum::BlockShroomlightPlace),
            "BLOCK_SHROOMLIGHT_STEP" => Some(SoundEnum::BlockShroomlightStep),
            "BLOCK_SHULKER_BOX_CLOSE" => Some(SoundEnum::BlockShulkerBoxClose),
            "BLOCK_SHULKER_BOX_OPEN" => Some(SoundEnum::BlockShulkerBoxOpen),
            "BLOCK_SIGN_WAXED_INTERACT_FAIL" => Some(SoundEnum::BlockSignWaxedInteractFail),
            "BLOCK_SLIME_BLOCK_BREAK" => Some(SoundEnum::BlockSlimeBlockBreak),
            "BLOCK_SLIME_BLOCK_FALL" => Some(SoundEnum::BlockSlimeBlockFall),
            "BLOCK_SLIME_BLOCK_HIT" => Some(SoundEnum::BlockSlimeBlockHit),
            "BLOCK_SLIME_BLOCK_PLACE" => Some(SoundEnum::BlockSlimeBlockPlace),
            "BLOCK_SLIME_BLOCK_STEP" => Some(SoundEnum::BlockSlimeBlockStep),
            "BLOCK_SMALL_AMETHYST_BUD_BREAK" => Some(SoundEnum::BlockSmallAmethystBudBreak),
            "BLOCK_SMALL_AMETHYST_BUD_PLACE" => Some(SoundEnum::BlockSmallAmethystBudPlace),
            "BLOCK_SMALL_DRIPLEAF_BREAK" => Some(SoundEnum::BlockSmallDripleafBreak),
            "BLOCK_SMALL_DRIPLEAF_FALL" => Some(SoundEnum::BlockSmallDripleafFall),
            "BLOCK_SMALL_DRIPLEAF_HIT" => Some(SoundEnum::BlockSmallDripleafHit),
            "BLOCK_SMALL_DRIPLEAF_PLACE" => Some(SoundEnum::BlockSmallDripleafPlace),
            "BLOCK_SMALL_DRIPLEAF_STEP" => Some(SoundEnum::BlockSmallDripleafStep),
            "BLOCK_SMITHING_TABLE_USE" => Some(SoundEnum::BlockSmithingTableUse),
            "BLOCK_SMOKER_SMOKE" => Some(SoundEnum::BlockSmokerSmoke),
            "BLOCK_SNIFFER_EGG_CRACK" => Some(SoundEnum::BlockSnifferEggCrack),
            "BLOCK_SNIFFER_EGG_HATCH" => Some(SoundEnum::BlockSnifferEggHatch),
            "BLOCK_SNIFFER_EGG_PLOP" => Some(SoundEnum::BlockSnifferEggPlop),
            "BLOCK_SNOW_BREAK" => Some(SoundEnum::BlockSnowBreak),
            "BLOCK_SNOW_FALL" => Some(SoundEnum::BlockSnowFall),
            "BLOCK_SNOW_HIT" => Some(SoundEnum::BlockSnowHit),
            "BLOCK_SNOW_PLACE" => Some(SoundEnum::BlockSnowPlace),
            "BLOCK_SNOW_STEP" => Some(SoundEnum::BlockSnowStep),
            "BLOCK_SOUL_SAND_BREAK" => Some(SoundEnum::BlockSoulSandBreak),
            "BLOCK_SOUL_SAND_FALL" => Some(SoundEnum::BlockSoulSandFall),
            "BLOCK_SOUL_SAND_HIT" => Some(SoundEnum::BlockSoulSandHit),
            "BLOCK_SOUL_SAND_PLACE" => Some(SoundEnum::BlockSoulSandPlace),
            "BLOCK_SOUL_SAND_STEP" => Some(SoundEnum::BlockSoulSandStep),
            "BLOCK_SOUL_SOIL_BREAK" => Some(SoundEnum::BlockSoulSoilBreak),
            "BLOCK_SOUL_SOIL_FALL" => Some(SoundEnum::BlockSoulSoilFall),
            "BLOCK_SOUL_SOIL_HIT" => Some(SoundEnum::BlockSoulSoilHit),
            "BLOCK_SOUL_SOIL_PLACE" => Some(SoundEnum::BlockSoulSoilPlace),
            "BLOCK_SOUL_SOIL_STEP" => Some(SoundEnum::BlockSoulSoilStep),
            "BLOCK_SPORE_BLOSSOM_BREAK" => Some(SoundEnum::BlockSporeBlossomBreak),
            "BLOCK_SPORE_BLOSSOM_FALL" => Some(SoundEnum::BlockSporeBlossomFall),
            "BLOCK_SPORE_BLOSSOM_HIT" => Some(SoundEnum::BlockSporeBlossomHit),
            "BLOCK_SPORE_BLOSSOM_PLACE" => Some(SoundEnum::BlockSporeBlossomPlace),
            "BLOCK_SPORE_BLOSSOM_STEP" => Some(SoundEnum::BlockSporeBlossomStep),
            "BLOCK_STEM_BREAK" => Some(SoundEnum::BlockStemBreak),
            "BLOCK_STEM_FALL" => Some(SoundEnum::BlockStemFall),
            "BLOCK_STEM_HIT" => Some(SoundEnum::BlockStemHit),
            "BLOCK_STEM_PLACE" => Some(SoundEnum::BlockStemPlace),
            "BLOCK_STEM_STEP" => Some(SoundEnum::BlockStemStep),
            "BLOCK_STONE_BREAK" => Some(SoundEnum::BlockStoneBreak),
            "BLOCK_STONE_BUTTON_CLICK_OFF" => Some(SoundEnum::BlockStoneButtonClickOff),
            "BLOCK_STONE_BUTTON_CLICK_ON" => Some(SoundEnum::BlockStoneButtonClickOn),
            "BLOCK_STONE_FALL" => Some(SoundEnum::BlockStoneFall),
            "BLOCK_STONE_HIT" => Some(SoundEnum::BlockStoneHit),
            "BLOCK_STONE_PLACE" => Some(SoundEnum::BlockStonePlace),
            "BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockStonePressurePlateClickOff)
            }
            "BLOCK_STONE_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockStonePressurePlateClickOn)
            }
            "BLOCK_STONE_STEP" => Some(SoundEnum::BlockStoneStep),
            "BLOCK_SUSPICIOUS_GRAVEL_BREAK" => Some(SoundEnum::BlockSuspiciousGravelBreak),
            "BLOCK_SUSPICIOUS_GRAVEL_FALL" => Some(SoundEnum::BlockSuspiciousGravelFall),
            "BLOCK_SUSPICIOUS_GRAVEL_HIT" => Some(SoundEnum::BlockSuspiciousGravelHit),
            "BLOCK_SUSPICIOUS_GRAVEL_PLACE" => Some(SoundEnum::BlockSuspiciousGravelPlace),
            "BLOCK_SUSPICIOUS_GRAVEL_STEP" => Some(SoundEnum::BlockSuspiciousGravelStep),
            "BLOCK_SUSPICIOUS_SAND_BREAK" => Some(SoundEnum::BlockSuspiciousSandBreak),
            "BLOCK_SUSPICIOUS_SAND_FALL" => Some(SoundEnum::BlockSuspiciousSandFall),
            "BLOCK_SUSPICIOUS_SAND_HIT" => Some(SoundEnum::BlockSuspiciousSandHit),
            "BLOCK_SUSPICIOUS_SAND_PLACE" => Some(SoundEnum::BlockSuspiciousSandPlace),
            "BLOCK_SUSPICIOUS_SAND_STEP" => Some(SoundEnum::BlockSuspiciousSandStep),
            "BLOCK_SWEET_BERRY_BUSH_BREAK" => Some(SoundEnum::BlockSweetBerryBushBreak),
            "BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES" => {
                Some(SoundEnum::BlockSweetBerryBushPickBerries)
            }
            "BLOCK_SWEET_BERRY_BUSH_PLACE" => Some(SoundEnum::BlockSweetBerryBushPlace),
            "BLOCK_TRIPWIRE_ATTACH" => Some(SoundEnum::BlockTripwireAttach),
            "BLOCK_TRIPWIRE_CLICK_OFF" => Some(SoundEnum::BlockTripwireClickOff),
            "BLOCK_TRIPWIRE_CLICK_ON" => Some(SoundEnum::BlockTripwireClickOn),
            "BLOCK_TRIPWIRE_DETACH" => Some(SoundEnum::BlockTripwireDetach),
            "BLOCK_TUFF_BREAK" => Some(SoundEnum::BlockTuffBreak),
            "BLOCK_TUFF_FALL" => Some(SoundEnum::BlockTuffFall),
            "BLOCK_TUFF_HIT" => Some(SoundEnum::BlockTuffHit),
            "BLOCK_TUFF_PLACE" => Some(SoundEnum::BlockTuffPlace),
            "BLOCK_TUFF_STEP" => Some(SoundEnum::BlockTuffStep),
            "BLOCK_VINE_BREAK" => Some(SoundEnum::BlockVineBreak),
            "BLOCK_VINE_FALL" => Some(SoundEnum::BlockVineFall),
            "BLOCK_VINE_HIT" => Some(SoundEnum::BlockVineHit),
            "BLOCK_VINE_PLACE" => Some(SoundEnum::BlockVinePlace),
            "BLOCK_VINE_STEP" => Some(SoundEnum::BlockVineStep),
            "BLOCK_WART_BLOCK_BREAK" => Some(SoundEnum::BlockWartBlockBreak),
            "BLOCK_WART_BLOCK_FALL" => Some(SoundEnum::BlockWartBlockFall),
            "BLOCK_WART_BLOCK_HIT" => Some(SoundEnum::BlockWartBlockHit),
            "BLOCK_WART_BLOCK_PLACE" => Some(SoundEnum::BlockWartBlockPlace),
            "BLOCK_WART_BLOCK_STEP" => Some(SoundEnum::BlockWartBlockStep),
            "BLOCK_WATER_AMBIENT" => Some(SoundEnum::BlockWaterAmbient),
            "BLOCK_WEEPING_VINES_BREAK" => Some(SoundEnum::BlockWeepingVinesBreak),
            "BLOCK_WEEPING_VINES_FALL" => Some(SoundEnum::BlockWeepingVinesFall),
            "BLOCK_WEEPING_VINES_HIT" => Some(SoundEnum::BlockWeepingVinesHit),
            "BLOCK_WEEPING_VINES_PLACE" => Some(SoundEnum::BlockWeepingVinesPlace),
            "BLOCK_WEEPING_VINES_STEP" => Some(SoundEnum::BlockWeepingVinesStep),
            "BLOCK_WET_GRASS_BREAK" => Some(SoundEnum::BlockWetGrassBreak),
            "BLOCK_WET_GRASS_FALL" => Some(SoundEnum::BlockWetGrassFall),
            "BLOCK_WET_GRASS_HIT" => Some(SoundEnum::BlockWetGrassHit),
            "BLOCK_WET_GRASS_PLACE" => Some(SoundEnum::BlockWetGrassPlace),
            "BLOCK_WET_GRASS_STEP" => Some(SoundEnum::BlockWetGrassStep),
            "BLOCK_WOODEN_BUTTON_CLICK_OFF" => Some(SoundEnum::BlockWoodenButtonClickOff),
            "BLOCK_WOODEN_BUTTON_CLICK_ON" => Some(SoundEnum::BlockWoodenButtonClickOn),
            "BLOCK_WOODEN_DOOR_CLOSE" => Some(SoundEnum::BlockWoodenDoorClose),
            "BLOCK_WOODEN_DOOR_OPEN" => Some(SoundEnum::BlockWoodenDoorOpen),
            "BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockWoodenPressurePlateClickOff)
            }
            "BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockWoodenPressurePlateClickOn)
            }
            "BLOCK_WOODEN_TRAPDOOR_CLOSE" => Some(SoundEnum::BlockWoodenTrapdoorClose),
            "BLOCK_WOODEN_TRAPDOOR_OPEN" => Some(SoundEnum::BlockWoodenTrapdoorOpen),
            "BLOCK_WOOD_BREAK" => Some(SoundEnum::BlockWoodBreak),
            "BLOCK_WOOD_FALL" => Some(SoundEnum::BlockWoodFall),
            "BLOCK_WOOD_HIT" => Some(SoundEnum::BlockWoodHit),
            "BLOCK_WOOD_PLACE" => Some(SoundEnum::BlockWoodPlace),
            "BLOCK_WOOD_STEP" => Some(SoundEnum::BlockWoodStep),
            "BLOCK_WOOL_BREAK" => Some(SoundEnum::BlockWoolBreak),
            "BLOCK_WOOL_FALL" => Some(SoundEnum::BlockWoolFall),
            "BLOCK_WOOL_HIT" => Some(SoundEnum::BlockWoolHit),
            "BLOCK_WOOL_PLACE" => Some(SoundEnum::BlockWoolPlace),
            "BLOCK_WOOL_STEP" => Some(SoundEnum::BlockWoolStep),
            "ENCHANT_THORNS_HIT" => Some(SoundEnum::EnchantThornsHit),
            "ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM" => Some(SoundEnum::EntityAllayAmbientWithoutItem),
            "ENTITY_ALLAY_AMBIENT_WITH_ITEM" => Some(SoundEnum::EntityAllayAmbientWithItem),
            "ENTITY_ALLAY_DEATH" => Some(SoundEnum::EntityAllayDeath),
            "ENTITY_ALLAY_HURT" => Some(SoundEnum::EntityAllayHurt),
            "ENTITY_ALLAY_ITEM_GIVEN" => Some(SoundEnum::EntityAllayItemGiven),
            "ENTITY_ALLAY_ITEM_TAKEN" => Some(SoundEnum::EntityAllayItemTaken),
            "ENTITY_ALLAY_ITEM_THROWN" => Some(SoundEnum::EntityAllayItemThrown),
            "ENTITY_ARMOR_STAND_BREAK" => Some(SoundEnum::EntityArmorStandBreak),
            "ENTITY_ARMOR_STAND_FALL" => Some(SoundEnum::EntityArmorStandFall),
            "ENTITY_ARMOR_STAND_HIT" => Some(SoundEnum::EntityArmorStandHit),
            "ENTITY_ARMOR_STAND_PLACE" => Some(SoundEnum::EntityArmorStandPlace),
            "ENTITY_ARROW_HIT" => Some(SoundEnum::EntityArrowHit),
            "ENTITY_ARROW_HIT_PLAYER" => Some(SoundEnum::EntityArrowHitPlayer),
            "ENTITY_ARROW_SHOOT" => Some(SoundEnum::EntityArrowShoot),
            "ENTITY_AXOLOTL_ATTACK" => Some(SoundEnum::EntityAxolotlAttack),
            "ENTITY_AXOLOTL_DEATH" => Some(SoundEnum::EntityAxolotlDeath),
            "ENTITY_AXOLOTL_HURT" => Some(SoundEnum::EntityAxolotlHurt),
            "ENTITY_AXOLOTL_IDLE_AIR" => Some(SoundEnum::EntityAxolotlIdleAir),
            "ENTITY_AXOLOTL_IDLE_WATER" => Some(SoundEnum::EntityAxolotlIdleWater),
            "ENTITY_AXOLOTL_SPLASH" => Some(SoundEnum::EntityAxolotlSplash),
            "ENTITY_AXOLOTL_SWIM" => Some(SoundEnum::EntityAxolotlSwim),
            "ENTITY_BAT_AMBIENT" => Some(SoundEnum::EntityBatAmbient),
            "ENTITY_BAT_DEATH" => Some(SoundEnum::EntityBatDeath),
            "ENTITY_BAT_HURT" => Some(SoundEnum::EntityBatHurt),
            "ENTITY_BAT_LOOP" => Some(SoundEnum::EntityBatLoop),
            "ENTITY_BAT_TAKEOFF" => Some(SoundEnum::EntityBatTakeoff),
            "ENTITY_BEE_DEATH" => Some(SoundEnum::EntityBeeDeath),
            "ENTITY_BEE_HURT" => Some(SoundEnum::EntityBeeHurt),
            "ENTITY_BEE_LOOP" => Some(SoundEnum::EntityBeeLoop),
            "ENTITY_BEE_LOOP_AGGRESSIVE" => Some(SoundEnum::EntityBeeLoopAggressive),
            "ENTITY_BEE_POLLINATE" => Some(SoundEnum::EntityBeePollinate),
            "ENTITY_BEE_STING" => Some(SoundEnum::EntityBeeSting),
            "ENTITY_BLAZE_AMBIENT" => Some(SoundEnum::EntityBlazeAmbient),
            "ENTITY_BLAZE_BURN" => Some(SoundEnum::EntityBlazeBurn),
            "ENTITY_BLAZE_DEATH" => Some(SoundEnum::EntityBlazeDeath),
            "ENTITY_BLAZE_HURT" => Some(SoundEnum::EntityBlazeHurt),
            "ENTITY_BLAZE_SHOOT" => Some(SoundEnum::EntityBlazeShoot),
            "ENTITY_BOAT_PADDLE_LAND" => Some(SoundEnum::EntityBoatPaddleLand),
            "ENTITY_BOAT_PADDLE_WATER" => Some(SoundEnum::EntityBoatPaddleWater),
            "ENTITY_CAMEL_AMBIENT" => Some(SoundEnum::EntityCamelAmbient),
            "ENTITY_CAMEL_DASH" => Some(SoundEnum::EntityCamelDash),
            "ENTITY_CAMEL_DASH_READY" => Some(SoundEnum::EntityCamelDashReady),
            "ENTITY_CAMEL_DEATH" => Some(SoundEnum::EntityCamelDeath),
            "ENTITY_CAMEL_EAT" => Some(SoundEnum::EntityCamelEat),
            "ENTITY_CAMEL_HURT" => Some(SoundEnum::EntityCamelHurt),
            "ENTITY_CAMEL_SADDLE" => Some(SoundEnum::EntityCamelSaddle),
            "ENTITY_CAMEL_SIT" => Some(SoundEnum::EntityCamelSit),
            "ENTITY_CAMEL_STAND" => Some(SoundEnum::EntityCamelStand),
            "ENTITY_CAMEL_STEP" => Some(SoundEnum::EntityCamelStep),
            "ENTITY_CAMEL_STEP_SAND" => Some(SoundEnum::EntityCamelStepSand),
            "ENTITY_CAT_AMBIENT" => Some(SoundEnum::EntityCatAmbient),
            "ENTITY_CAT_BEG_FOR_FOOD" => Some(SoundEnum::EntityCatBegForFood),
            "ENTITY_CAT_DEATH" => Some(SoundEnum::EntityCatDeath),
            "ENTITY_CAT_EAT" => Some(SoundEnum::EntityCatEat),
            "ENTITY_CAT_HISS" => Some(SoundEnum::EntityCatHiss),
            "ENTITY_CAT_HURT" => Some(SoundEnum::EntityCatHurt),
            "ENTITY_CAT_PURR" => Some(SoundEnum::EntityCatPurr),
            "ENTITY_CAT_PURREOW" => Some(SoundEnum::EntityCatPurreow),
            "ENTITY_CAT_STRAY_AMBIENT" => Some(SoundEnum::EntityCatStrayAmbient),
            "ENTITY_CHICKEN_AMBIENT" => Some(SoundEnum::EntityChickenAmbient),
            "ENTITY_CHICKEN_DEATH" => Some(SoundEnum::EntityChickenDeath),
            "ENTITY_CHICKEN_EGG" => Some(SoundEnum::EntityChickenEgg),
            "ENTITY_CHICKEN_HURT" => Some(SoundEnum::EntityChickenHurt),
            "ENTITY_CHICKEN_STEP" => Some(SoundEnum::EntityChickenStep),
            "ENTITY_COD_AMBIENT" => Some(SoundEnum::EntityCodAmbient),
            "ENTITY_COD_DEATH" => Some(SoundEnum::EntityCodDeath),
            "ENTITY_COD_FLOP" => Some(SoundEnum::EntityCodFlop),
            "ENTITY_COD_HURT" => Some(SoundEnum::EntityCodHurt),
            "ENTITY_COW_AMBIENT" => Some(SoundEnum::EntityCowAmbient),
            "ENTITY_COW_DEATH" => Some(SoundEnum::EntityCowDeath),
            "ENTITY_COW_HURT" => Some(SoundEnum::EntityCowHurt),
            "ENTITY_COW_MILK" => Some(SoundEnum::EntityCowMilk),
            "ENTITY_COW_STEP" => Some(SoundEnum::EntityCowStep),
            "ENTITY_CREEPER_DEATH" => Some(SoundEnum::EntityCreeperDeath),
            "ENTITY_CREEPER_HURT" => Some(SoundEnum::EntityCreeperHurt),
            "ENTITY_CREEPER_PRIMED" => Some(SoundEnum::EntityCreeperPrimed),
            "ENTITY_DOLPHIN_AMBIENT" => Some(SoundEnum::EntityDolphinAmbient),
            "ENTITY_DOLPHIN_AMBIENT_WATER" => Some(SoundEnum::EntityDolphinAmbientWater),
            "ENTITY_DOLPHIN_ATTACK" => Some(SoundEnum::EntityDolphinAttack),
            "ENTITY_DOLPHIN_DEATH" => Some(SoundEnum::EntityDolphinDeath),
            "ENTITY_DOLPHIN_EAT" => Some(SoundEnum::EntityDolphinEat),
            "ENTITY_DOLPHIN_HURT" => Some(SoundEnum::EntityDolphinHurt),
            "ENTITY_DOLPHIN_JUMP" => Some(SoundEnum::EntityDolphinJump),
            "ENTITY_DOLPHIN_PLAY" => Some(SoundEnum::EntityDolphinPlay),
            "ENTITY_DOLPHIN_SPLASH" => Some(SoundEnum::EntityDolphinSplash),
            "ENTITY_DOLPHIN_SWIM" => Some(SoundEnum::EntityDolphinSwim),
            "ENTITY_DONKEY_AMBIENT" => Some(SoundEnum::EntityDonkeyAmbient),
            "ENTITY_DONKEY_ANGRY" => Some(SoundEnum::EntityDonkeyAngry),
            "ENTITY_DONKEY_CHEST" => Some(SoundEnum::EntityDonkeyChest),
            "ENTITY_DONKEY_DEATH" => Some(SoundEnum::EntityDonkeyDeath),
            "ENTITY_DONKEY_EAT" => Some(SoundEnum::EntityDonkeyEat),
            "ENTITY_DONKEY_HURT" => Some(SoundEnum::EntityDonkeyHurt),
            "ENTITY_DRAGON_FIREBALL_EXPLODE" => Some(SoundEnum::EntityDragonFireballExplode),
            "ENTITY_DROWNED_AMBIENT" => Some(SoundEnum::EntityDrownedAmbient),
            "ENTITY_DROWNED_AMBIENT_WATER" => Some(SoundEnum::EntityDrownedAmbientWater),
            "ENTITY_DROWNED_DEATH" => Some(SoundEnum::EntityDrownedDeath),
            "ENTITY_DROWNED_DEATH_WATER" => Some(SoundEnum::EntityDrownedDeathWater),
            "ENTITY_DROWNED_HURT" => Some(SoundEnum::EntityDrownedHurt),
            "ENTITY_DROWNED_HURT_WATER" => Some(SoundEnum::EntityDrownedHurtWater),
            "ENTITY_DROWNED_SHOOT" => Some(SoundEnum::EntityDrownedShoot),
            "ENTITY_DROWNED_STEP" => Some(SoundEnum::EntityDrownedStep),
            "ENTITY_DROWNED_SWIM" => Some(SoundEnum::EntityDrownedSwim),
            "ENTITY_EGG_THROW" => Some(SoundEnum::EntityEggThrow),
            "ENTITY_ELDER_GUARDIAN_AMBIENT" => Some(SoundEnum::EntityElderGuardianAmbient),
            "ENTITY_ELDER_GUARDIAN_AMBIENT_LAND" => Some(SoundEnum::EntityElderGuardianAmbientLand),
            "ENTITY_ELDER_GUARDIAN_CURSE" => Some(SoundEnum::EntityElderGuardianCurse),
            "ENTITY_ELDER_GUARDIAN_DEATH" => Some(SoundEnum::EntityElderGuardianDeath),
            "ENTITY_ELDER_GUARDIAN_DEATH_LAND" => Some(SoundEnum::EntityElderGuardianDeathLand),
            "ENTITY_ELDER_GUARDIAN_FLOP" => Some(SoundEnum::EntityElderGuardianFlop),
            "ENTITY_ELDER_GUARDIAN_HURT" => Some(SoundEnum::EntityElderGuardianHurt),
            "ENTITY_ELDER_GUARDIAN_HURT_LAND" => Some(SoundEnum::EntityElderGuardianHurtLand),
            "ENTITY_ENDERMAN_AMBIENT" => Some(SoundEnum::EntityEndermanAmbient),
            "ENTITY_ENDERMAN_DEATH" => Some(SoundEnum::EntityEndermanDeath),
            "ENTITY_ENDERMAN_HURT" => Some(SoundEnum::EntityEndermanHurt),
            "ENTITY_ENDERMAN_SCREAM" => Some(SoundEnum::EntityEndermanScream),
            "ENTITY_ENDERMAN_STARE" => Some(SoundEnum::EntityEndermanStare),
            "ENTITY_ENDERMAN_TELEPORT" => Some(SoundEnum::EntityEndermanTeleport),
            "ENTITY_ENDERMITE_AMBIENT" => Some(SoundEnum::EntityEndermiteAmbient),
            "ENTITY_ENDERMITE_DEATH" => Some(SoundEnum::EntityEndermiteDeath),
            "ENTITY_ENDERMITE_HURT" => Some(SoundEnum::EntityEndermiteHurt),
            "ENTITY_ENDERMITE_STEP" => Some(SoundEnum::EntityEndermiteStep),
            "ENTITY_ENDER_DRAGON_AMBIENT" => Some(SoundEnum::EntityEnderDragonAmbient),
            "ENTITY_ENDER_DRAGON_DEATH" => Some(SoundEnum::EntityEnderDragonDeath),
            "ENTITY_ENDER_DRAGON_FLAP" => Some(SoundEnum::EntityEnderDragonFlap),
            "ENTITY_ENDER_DRAGON_GROWL" => Some(SoundEnum::EntityEnderDragonGrowl),
            "ENTITY_ENDER_DRAGON_HURT" => Some(SoundEnum::EntityEnderDragonHurt),
            "ENTITY_ENDER_DRAGON_SHOOT" => Some(SoundEnum::EntityEnderDragonShoot),
            "ENTITY_ENDER_EYE_DEATH" => Some(SoundEnum::EntityEnderEyeDeath),
            "ENTITY_ENDER_EYE_LAUNCH" => Some(SoundEnum::EntityEnderEyeLaunch),
            "ENTITY_ENDER_PEARL_THROW" => Some(SoundEnum::EntityEnderPearlThrow),
            "ENTITY_EVOKER_AMBIENT" => Some(SoundEnum::EntityEvokerAmbient),
            "ENTITY_EVOKER_CAST_SPELL" => Some(SoundEnum::EntityEvokerCastSpell),
            "ENTITY_EVOKER_CELEBRATE" => Some(SoundEnum::EntityEvokerCelebrate),
            "ENTITY_EVOKER_DEATH" => Some(SoundEnum::EntityEvokerDeath),
            "ENTITY_EVOKER_FANGS_ATTACK" => Some(SoundEnum::EntityEvokerFangsAttack),
            "ENTITY_EVOKER_HURT" => Some(SoundEnum::EntityEvokerHurt),
            "ENTITY_EVOKER_PREPARE_ATTACK" => Some(SoundEnum::EntityEvokerPrepareAttack),
            "ENTITY_EVOKER_PREPARE_SUMMON" => Some(SoundEnum::EntityEvokerPrepareSummon),
            "ENTITY_EVOKER_PREPARE_WOLOLO" => Some(SoundEnum::EntityEvokerPrepareWololo),
            "ENTITY_EXPERIENCE_BOTTLE_THROW" => Some(SoundEnum::EntityExperienceBottleThrow),
            "ENTITY_EXPERIENCE_ORB_PICKUP" => Some(SoundEnum::EntityExperienceOrbPickup),
            "ENTITY_FIREWORK_ROCKET_BLAST" => Some(SoundEnum::EntityFireworkRocketBlast),
            "ENTITY_FIREWORK_ROCKET_BLAST_FAR" => Some(SoundEnum::EntityFireworkRocketBlastFar),
            "ENTITY_FIREWORK_ROCKET_LARGE_BLAST" => Some(SoundEnum::EntityFireworkRocketLargeBlast),
            "ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR" => {
                Some(SoundEnum::EntityFireworkRocketLargeBlastFar)
            }
            "ENTITY_FIREWORK_ROCKET_LAUNCH" => Some(SoundEnum::EntityFireworkRocketLaunch),
            "ENTITY_FIREWORK_ROCKET_SHOOT" => Some(SoundEnum::EntityFireworkRocketShoot),
            "ENTITY_FIREWORK_ROCKET_TWINKLE" => Some(SoundEnum::EntityFireworkRocketTwinkle),
            "ENTITY_FIREWORK_ROCKET_TWINKLE_FAR" => Some(SoundEnum::EntityFireworkRocketTwinkleFar),
            "ENTITY_FISHING_BOBBER_RETRIEVE" => Some(SoundEnum::EntityFishingBobberRetrieve),
            "ENTITY_FISHING_BOBBER_SPLASH" => Some(SoundEnum::EntityFishingBobberSplash),
            "ENTITY_FISHING_BOBBER_THROW" => Some(SoundEnum::EntityFishingBobberThrow),
            "ENTITY_FISH_SWIM" => Some(SoundEnum::EntityFishSwim),
            "ENTITY_FOX_AGGRO" => Some(SoundEnum::EntityFoxAggro),
            "ENTITY_FOX_AMBIENT" => Some(SoundEnum::EntityFoxAmbient),
            "ENTITY_FOX_BITE" => Some(SoundEnum::EntityFoxBite),
            "ENTITY_FOX_DEATH" => Some(SoundEnum::EntityFoxDeath),
            "ENTITY_FOX_EAT" => Some(SoundEnum::EntityFoxEat),
            "ENTITY_FOX_HURT" => Some(SoundEnum::EntityFoxHurt),
            "ENTITY_FOX_SCREECH" => Some(SoundEnum::EntityFoxScreech),
            "ENTITY_FOX_SLEEP" => Some(SoundEnum::EntityFoxSleep),
            "ENTITY_FOX_SNIFF" => Some(SoundEnum::EntityFoxSniff),
            "ENTITY_FOX_SPIT" => Some(SoundEnum::EntityFoxSpit),
            "ENTITY_FOX_TELEPORT" => Some(SoundEnum::EntityFoxTeleport),
            "ENTITY_FROG_AMBIENT" => Some(SoundEnum::EntityFrogAmbient),
            "ENTITY_FROG_DEATH" => Some(SoundEnum::EntityFrogDeath),
            "ENTITY_FROG_EAT" => Some(SoundEnum::EntityFrogEat),
            "ENTITY_FROG_HURT" => Some(SoundEnum::EntityFrogHurt),
            "ENTITY_FROG_LAY_SPAWN" => Some(SoundEnum::EntityFrogLaySpawn),
            "ENTITY_FROG_LONG_JUMP" => Some(SoundEnum::EntityFrogLongJump),
            "ENTITY_FROG_STEP" => Some(SoundEnum::EntityFrogStep),
            "ENTITY_FROG_TONGUE" => Some(SoundEnum::EntityFrogTongue),
            "ENTITY_GENERIC_BIG_FALL" => Some(SoundEnum::EntityGenericBigFall),
            "ENTITY_GENERIC_BURN" => Some(SoundEnum::EntityGenericBurn),
            "ENTITY_GENERIC_DEATH" => Some(SoundEnum::EntityGenericDeath),
            "ENTITY_GENERIC_DRINK" => Some(SoundEnum::EntityGenericDrink),
            "ENTITY_GENERIC_EAT" => Some(SoundEnum::EntityGenericEat),
            "ENTITY_GENERIC_EXPLODE" => Some(SoundEnum::EntityGenericExplode),
            "ENTITY_GENERIC_EXTINGUISH_FIRE" => Some(SoundEnum::EntityGenericExtinguishFire),
            "ENTITY_GENERIC_HURT" => Some(SoundEnum::EntityGenericHurt),
            "ENTITY_GENERIC_SMALL_FALL" => Some(SoundEnum::EntityGenericSmallFall),
            "ENTITY_GENERIC_SPLASH" => Some(SoundEnum::EntityGenericSplash),
            "ENTITY_GENERIC_SWIM" => Some(SoundEnum::EntityGenericSwim),
            "ENTITY_GHAST_AMBIENT" => Some(SoundEnum::EntityGhastAmbient),
            "ENTITY_GHAST_DEATH" => Some(SoundEnum::EntityGhastDeath),
            "ENTITY_GHAST_HURT" => Some(SoundEnum::EntityGhastHurt),
            "ENTITY_GHAST_SCREAM" => Some(SoundEnum::EntityGhastScream),
            "ENTITY_GHAST_SHOOT" => Some(SoundEnum::EntityGhastShoot),
            "ENTITY_GHAST_WARN" => Some(SoundEnum::EntityGhastWarn),
            "ENTITY_GLOW_ITEM_FRAME_ADD_ITEM" => Some(SoundEnum::EntityGlowItemFrameAddItem),
            "ENTITY_GLOW_ITEM_FRAME_BREAK" => Some(SoundEnum::EntityGlowItemFrameBreak),
            "ENTITY_GLOW_ITEM_FRAME_PLACE" => Some(SoundEnum::EntityGlowItemFramePlace),
            "ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM" => Some(SoundEnum::EntityGlowItemFrameRemoveItem),
            "ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM" => Some(SoundEnum::EntityGlowItemFrameRotateItem),
            "ENTITY_GLOW_SQUID_AMBIENT" => Some(SoundEnum::EntityGlowSquidAmbient),
            "ENTITY_GLOW_SQUID_DEATH" => Some(SoundEnum::EntityGlowSquidDeath),
            "ENTITY_GLOW_SQUID_HURT" => Some(SoundEnum::EntityGlowSquidHurt),
            "ENTITY_GLOW_SQUID_SQUIRT" => Some(SoundEnum::EntityGlowSquidSquirt),
            "ENTITY_GOAT_AMBIENT" => Some(SoundEnum::EntityGoatAmbient),
            "ENTITY_GOAT_DEATH" => Some(SoundEnum::EntityGoatDeath),
            "ENTITY_GOAT_EAT" => Some(SoundEnum::EntityGoatEat),
            "ENTITY_GOAT_HORN_BREAK" => Some(SoundEnum::EntityGoatHornBreak),
            "ENTITY_GOAT_HURT" => Some(SoundEnum::EntityGoatHurt),
            "ENTITY_GOAT_LONG_JUMP" => Some(SoundEnum::EntityGoatLongJump),
            "ENTITY_GOAT_MILK" => Some(SoundEnum::EntityGoatMilk),
            "ENTITY_GOAT_PREPARE_RAM" => Some(SoundEnum::EntityGoatPrepareRam),
            "ENTITY_GOAT_RAM_IMPACT" => Some(SoundEnum::EntityGoatRamImpact),
            "ENTITY_GOAT_SCREAMING_AMBIENT" => Some(SoundEnum::EntityGoatScreamingAmbient),
            "ENTITY_GOAT_SCREAMING_DEATH" => Some(SoundEnum::EntityGoatScreamingDeath),
            "ENTITY_GOAT_SCREAMING_EAT" => Some(SoundEnum::EntityGoatScreamingEat),
            "ENTITY_GOAT_SCREAMING_HORN_BREAK" => Some(SoundEnum::EntityGoatScreamingHornBreak),
            "ENTITY_GOAT_SCREAMING_HURT" => Some(SoundEnum::EntityGoatScreamingHurt),
            "ENTITY_GOAT_SCREAMING_LONG_JUMP" => Some(SoundEnum::EntityGoatScreamingLongJump),
            "ENTITY_GOAT_SCREAMING_MILK" => Some(SoundEnum::EntityGoatScreamingMilk),
            "ENTITY_GOAT_SCREAMING_PREPARE_RAM" => Some(SoundEnum::EntityGoatScreamingPrepareRam),
            "ENTITY_GOAT_SCREAMING_RAM_IMPACT" => Some(SoundEnum::EntityGoatScreamingRamImpact),
            "ENTITY_GOAT_STEP" => Some(SoundEnum::EntityGoatStep),
            "ENTITY_GUARDIAN_AMBIENT" => Some(SoundEnum::EntityGuardianAmbient),
            "ENTITY_GUARDIAN_AMBIENT_LAND" => Some(SoundEnum::EntityGuardianAmbientLand),
            "ENTITY_GUARDIAN_ATTACK" => Some(SoundEnum::EntityGuardianAttack),
            "ENTITY_GUARDIAN_DEATH" => Some(SoundEnum::EntityGuardianDeath),
            "ENTITY_GUARDIAN_DEATH_LAND" => Some(SoundEnum::EntityGuardianDeathLand),
            "ENTITY_GUARDIAN_FLOP" => Some(SoundEnum::EntityGuardianFlop),
            "ENTITY_GUARDIAN_HURT" => Some(SoundEnum::EntityGuardianHurt),
            "ENTITY_GUARDIAN_HURT_LAND" => Some(SoundEnum::EntityGuardianHurtLand),
            "ENTITY_HOGLIN_AMBIENT" => Some(SoundEnum::EntityHoglinAmbient),
            "ENTITY_HOGLIN_ANGRY" => Some(SoundEnum::EntityHoglinAngry),
            "ENTITY_HOGLIN_ATTACK" => Some(SoundEnum::EntityHoglinAttack),
            "ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED" => {
                Some(SoundEnum::EntityHoglinConvertedToZombified)
            }
            "ENTITY_HOGLIN_DEATH" => Some(SoundEnum::EntityHoglinDeath),
            "ENTITY_HOGLIN_HURT" => Some(SoundEnum::EntityHoglinHurt),
            "ENTITY_HOGLIN_RETREAT" => Some(SoundEnum::EntityHoglinRetreat),
            "ENTITY_HOGLIN_STEP" => Some(SoundEnum::EntityHoglinStep),
            "ENTITY_HORSE_AMBIENT" => Some(SoundEnum::EntityHorseAmbient),
            "ENTITY_HORSE_ANGRY" => Some(SoundEnum::EntityHorseAngry),
            "ENTITY_HORSE_ARMOR" => Some(SoundEnum::EntityHorseArmor),
            "ENTITY_HORSE_BREATHE" => Some(SoundEnum::EntityHorseBreathe),
            "ENTITY_HORSE_DEATH" => Some(SoundEnum::EntityHorseDeath),
            "ENTITY_HORSE_EAT" => Some(SoundEnum::EntityHorseEat),
            "ENTITY_HORSE_GALLOP" => Some(SoundEnum::EntityHorseGallop),
            "ENTITY_HORSE_HURT" => Some(SoundEnum::EntityHorseHurt),
            "ENTITY_HORSE_JUMP" => Some(SoundEnum::EntityHorseJump),
            "ENTITY_HORSE_LAND" => Some(SoundEnum::EntityHorseLand),
            "ENTITY_HORSE_SADDLE" => Some(SoundEnum::EntityHorseSaddle),
            "ENTITY_HORSE_STEP" => Some(SoundEnum::EntityHorseStep),
            "ENTITY_HORSE_STEP_WOOD" => Some(SoundEnum::EntityHorseStepWood),
            "ENTITY_HOSTILE_BIG_FALL" => Some(SoundEnum::EntityHostileBigFall),
            "ENTITY_HOSTILE_DEATH" => Some(SoundEnum::EntityHostileDeath),
            "ENTITY_HOSTILE_HURT" => Some(SoundEnum::EntityHostileHurt),
            "ENTITY_HOSTILE_SMALL_FALL" => Some(SoundEnum::EntityHostileSmallFall),
            "ENTITY_HOSTILE_SPLASH" => Some(SoundEnum::EntityHostileSplash),
            "ENTITY_HOSTILE_SWIM" => Some(SoundEnum::EntityHostileSwim),
            "ENTITY_HUSK_AMBIENT" => Some(SoundEnum::EntityHuskAmbient),
            "ENTITY_HUSK_CONVERTED_TO_ZOMBIE" => Some(SoundEnum::EntityHuskConvertedToZombie),
            "ENTITY_HUSK_DEATH" => Some(SoundEnum::EntityHuskDeath),
            "ENTITY_HUSK_HURT" => Some(SoundEnum::EntityHuskHurt),
            "ENTITY_HUSK_STEP" => Some(SoundEnum::EntityHuskStep),
            "ENTITY_ILLUSIONER_AMBIENT" => Some(SoundEnum::EntityIllusionerAmbient),
            "ENTITY_ILLUSIONER_CAST_SPELL" => Some(SoundEnum::EntityIllusionerCastSpell),
            "ENTITY_ILLUSIONER_DEATH" => Some(SoundEnum::EntityIllusionerDeath),
            "ENTITY_ILLUSIONER_HURT" => Some(SoundEnum::EntityIllusionerHurt),
            "ENTITY_ILLUSIONER_MIRROR_MOVE" => Some(SoundEnum::EntityIllusionerMirrorMove),
            "ENTITY_ILLUSIONER_PREPARE_BLINDNESS" => {
                Some(SoundEnum::EntityIllusionerPrepareBlindness)
            }
            "ENTITY_ILLUSIONER_PREPARE_MIRROR" => Some(SoundEnum::EntityIllusionerPrepareMirror),
            "ENTITY_IRON_GOLEM_ATTACK" => Some(SoundEnum::EntityIronGolemAttack),
            "ENTITY_IRON_GOLEM_DAMAGE" => Some(SoundEnum::EntityIronGolemDamage),
            "ENTITY_IRON_GOLEM_DEATH" => Some(SoundEnum::EntityIronGolemDeath),
            "ENTITY_IRON_GOLEM_HURT" => Some(SoundEnum::EntityIronGolemHurt),
            "ENTITY_IRON_GOLEM_REPAIR" => Some(SoundEnum::EntityIronGolemRepair),
            "ENTITY_IRON_GOLEM_STEP" => Some(SoundEnum::EntityIronGolemStep),
            "ENTITY_ITEM_BREAK" => Some(SoundEnum::EntityItemBreak),
            "ENTITY_ITEM_FRAME_ADD_ITEM" => Some(SoundEnum::EntityItemFrameAddItem),
            "ENTITY_ITEM_FRAME_BREAK" => Some(SoundEnum::EntityItemFrameBreak),
            "ENTITY_ITEM_FRAME_PLACE" => Some(SoundEnum::EntityItemFramePlace),
            "ENTITY_ITEM_FRAME_REMOVE_ITEM" => Some(SoundEnum::EntityItemFrameRemoveItem),
            "ENTITY_ITEM_FRAME_ROTATE_ITEM" => Some(SoundEnum::EntityItemFrameRotateItem),
            "ENTITY_ITEM_PICKUP" => Some(SoundEnum::EntityItemPickup),
            "ENTITY_LEASH_KNOT_BREAK" => Some(SoundEnum::EntityLeashKnotBreak),
            "ENTITY_LEASH_KNOT_PLACE" => Some(SoundEnum::EntityLeashKnotPlace),
            "ENTITY_LIGHTNING_BOLT_IMPACT" => Some(SoundEnum::EntityLightningBoltImpact),
            "ENTITY_LIGHTNING_BOLT_THUNDER" => Some(SoundEnum::EntityLightningBoltThunder),
            "ENTITY_LINGERING_POTION_THROW" => Some(SoundEnum::EntityLingeringPotionThrow),
            "ENTITY_LLAMA_AMBIENT" => Some(SoundEnum::EntityLlamaAmbient),
            "ENTITY_LLAMA_ANGRY" => Some(SoundEnum::EntityLlamaAngry),
            "ENTITY_LLAMA_CHEST" => Some(SoundEnum::EntityLlamaChest),
            "ENTITY_LLAMA_DEATH" => Some(SoundEnum::EntityLlamaDeath),
            "ENTITY_LLAMA_EAT" => Some(SoundEnum::EntityLlamaEat),
            "ENTITY_LLAMA_HURT" => Some(SoundEnum::EntityLlamaHurt),
            "ENTITY_LLAMA_SPIT" => Some(SoundEnum::EntityLlamaSpit),
            "ENTITY_LLAMA_STEP" => Some(SoundEnum::EntityLlamaStep),
            "ENTITY_LLAMA_SWAG" => Some(SoundEnum::EntityLlamaSwag),
            "ENTITY_MAGMA_CUBE_DEATH" => Some(SoundEnum::EntityMagmaCubeDeath),
            "ENTITY_MAGMA_CUBE_DEATH_SMALL" => Some(SoundEnum::EntityMagmaCubeDeathSmall),
            "ENTITY_MAGMA_CUBE_HURT" => Some(SoundEnum::EntityMagmaCubeHurt),
            "ENTITY_MAGMA_CUBE_HURT_SMALL" => Some(SoundEnum::EntityMagmaCubeHurtSmall),
            "ENTITY_MAGMA_CUBE_JUMP" => Some(SoundEnum::EntityMagmaCubeJump),
            "ENTITY_MAGMA_CUBE_SQUISH" => Some(SoundEnum::EntityMagmaCubeSquish),
            "ENTITY_MAGMA_CUBE_SQUISH_SMALL" => Some(SoundEnum::EntityMagmaCubeSquishSmall),
            "ENTITY_MINECART_INSIDE" => Some(SoundEnum::EntityMinecartInside),
            "ENTITY_MINECART_INSIDE_UNDERWATER" => Some(SoundEnum::EntityMinecartInsideUnderwater),
            "ENTITY_MINECART_RIDING" => Some(SoundEnum::EntityMinecartRiding),
            "ENTITY_MOOSHROOM_CONVERT" => Some(SoundEnum::EntityMooshroomConvert),
            "ENTITY_MOOSHROOM_EAT" => Some(SoundEnum::EntityMooshroomEat),
            "ENTITY_MOOSHROOM_MILK" => Some(SoundEnum::EntityMooshroomMilk),
            "ENTITY_MOOSHROOM_SHEAR" => Some(SoundEnum::EntityMooshroomShear),
            "ENTITY_MOOSHROOM_SUSPICIOUS_MILK" => Some(SoundEnum::EntityMooshroomSuspiciousMilk),
            "ENTITY_MULE_AMBIENT" => Some(SoundEnum::EntityMuleAmbient),
            "ENTITY_MULE_ANGRY" => Some(SoundEnum::EntityMuleAngry),
            "ENTITY_MULE_CHEST" => Some(SoundEnum::EntityMuleChest),
            "ENTITY_MULE_DEATH" => Some(SoundEnum::EntityMuleDeath),
            "ENTITY_MULE_EAT" => Some(SoundEnum::EntityMuleEat),
            "ENTITY_MULE_HURT" => Some(SoundEnum::EntityMuleHurt),
            "ENTITY_OCELOT_AMBIENT" => Some(SoundEnum::EntityOcelotAmbient),
            "ENTITY_OCELOT_DEATH" => Some(SoundEnum::EntityOcelotDeath),
            "ENTITY_OCELOT_HURT" => Some(SoundEnum::EntityOcelotHurt),
            "ENTITY_PAINTING_BREAK" => Some(SoundEnum::EntityPaintingBreak),
            "ENTITY_PAINTING_PLACE" => Some(SoundEnum::EntityPaintingPlace),
            "ENTITY_PANDA_AGGRESSIVE_AMBIENT" => Some(SoundEnum::EntityPandaAggressiveAmbient),
            "ENTITY_PANDA_AMBIENT" => Some(SoundEnum::EntityPandaAmbient),
            "ENTITY_PANDA_BITE" => Some(SoundEnum::EntityPandaBite),
            "ENTITY_PANDA_CANT_BREED" => Some(SoundEnum::EntityPandaCantBreed),
            "ENTITY_PANDA_DEATH" => Some(SoundEnum::EntityPandaDeath),
            "ENTITY_PANDA_EAT" => Some(SoundEnum::EntityPandaEat),
            "ENTITY_PANDA_HURT" => Some(SoundEnum::EntityPandaHurt),
            "ENTITY_PANDA_PRE_SNEEZE" => Some(SoundEnum::EntityPandaPreSneeze),
            "ENTITY_PANDA_SNEEZE" => Some(SoundEnum::EntityPandaSneeze),
            "ENTITY_PANDA_STEP" => Some(SoundEnum::EntityPandaStep),
            "ENTITY_PANDA_WORRIED_AMBIENT" => Some(SoundEnum::EntityPandaWorriedAmbient),
            "ENTITY_PARROT_AMBIENT" => Some(SoundEnum::EntityParrotAmbient),
            "ENTITY_PARROT_DEATH" => Some(SoundEnum::EntityParrotDeath),
            "ENTITY_PARROT_EAT" => Some(SoundEnum::EntityParrotEat),
            "ENTITY_PARROT_FLY" => Some(SoundEnum::EntityParrotFly),
            "ENTITY_PARROT_HURT" => Some(SoundEnum::EntityParrotHurt),
            "ENTITY_PARROT_IMITATE_BLAZE" => Some(SoundEnum::EntityParrotImitateBlaze),
            "ENTITY_PARROT_IMITATE_CREEPER" => Some(SoundEnum::EntityParrotImitateCreeper),
            "ENTITY_PARROT_IMITATE_DROWNED" => Some(SoundEnum::EntityParrotImitateDrowned),
            "ENTITY_PARROT_IMITATE_ELDER_GUARDIAN" => {
                Some(SoundEnum::EntityParrotImitateElderGuardian)
            }
            "ENTITY_PARROT_IMITATE_ENDERMITE" => Some(SoundEnum::EntityParrotImitateEndermite),
            "ENTITY_PARROT_IMITATE_ENDER_DRAGON" => Some(SoundEnum::EntityParrotImitateEnderDragon),
            "ENTITY_PARROT_IMITATE_EVOKER" => Some(SoundEnum::EntityParrotImitateEvoker),
            "ENTITY_PARROT_IMITATE_GHAST" => Some(SoundEnum::EntityParrotImitateGhast),
            "ENTITY_PARROT_IMITATE_GUARDIAN" => Some(SoundEnum::EntityParrotImitateGuardian),
            "ENTITY_PARROT_IMITATE_HOGLIN" => Some(SoundEnum::EntityParrotImitateHoglin),
            "ENTITY_PARROT_IMITATE_HUSK" => Some(SoundEnum::EntityParrotImitateHusk),
            "ENTITY_PARROT_IMITATE_ILLUSIONER" => Some(SoundEnum::EntityParrotImitateIllusioner),
            "ENTITY_PARROT_IMITATE_MAGMA_CUBE" => Some(SoundEnum::EntityParrotImitateMagmaCube),
            "ENTITY_PARROT_IMITATE_PHANTOM" => Some(SoundEnum::EntityParrotImitatePhantom),
            "ENTITY_PARROT_IMITATE_PIGLIN" => Some(SoundEnum::EntityParrotImitatePiglin),
            "ENTITY_PARROT_IMITATE_PIGLIN_BRUTE" => Some(SoundEnum::EntityParrotImitatePiglinBrute),
            "ENTITY_PARROT_IMITATE_PILLAGER" => Some(SoundEnum::EntityParrotImitatePillager),
            "ENTITY_PARROT_IMITATE_RAVAGER" => Some(SoundEnum::EntityParrotImitateRavager),
            "ENTITY_PARROT_IMITATE_SHULKER" => Some(SoundEnum::EntityParrotImitateShulker),
            "ENTITY_PARROT_IMITATE_SILVERFISH" => Some(SoundEnum::EntityParrotImitateSilverfish),
            "ENTITY_PARROT_IMITATE_SKELETON" => Some(SoundEnum::EntityParrotImitateSkeleton),
            "ENTITY_PARROT_IMITATE_SLIME" => Some(SoundEnum::EntityParrotImitateSlime),
            "ENTITY_PARROT_IMITATE_SPIDER" => Some(SoundEnum::EntityParrotImitateSpider),
            "ENTITY_PARROT_IMITATE_STRAY" => Some(SoundEnum::EntityParrotImitateStray),
            "ENTITY_PARROT_IMITATE_VEX" => Some(SoundEnum::EntityParrotImitateVex),
            "ENTITY_PARROT_IMITATE_VINDICATOR" => Some(SoundEnum::EntityParrotImitateVindicator),
            "ENTITY_PARROT_IMITATE_WARDEN" => Some(SoundEnum::EntityParrotImitateWarden),
            "ENTITY_PARROT_IMITATE_WITCH" => Some(SoundEnum::EntityParrotImitateWitch),
            "ENTITY_PARROT_IMITATE_WITHER" => Some(SoundEnum::EntityParrotImitateWither),
            "ENTITY_PARROT_IMITATE_WITHER_SKELETON" => {
                Some(SoundEnum::EntityParrotImitateWitherSkeleton)
            }
            "ENTITY_PARROT_IMITATE_ZOGLIN" => Some(SoundEnum::EntityParrotImitateZoglin),
            "ENTITY_PARROT_IMITATE_ZOMBIE" => Some(SoundEnum::EntityParrotImitateZombie),
            "ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER" => {
                Some(SoundEnum::EntityParrotImitateZombieVillager)
            }
            "ENTITY_PARROT_STEP" => Some(SoundEnum::EntityParrotStep),
            "ENTITY_PHANTOM_AMBIENT" => Some(SoundEnum::EntityPhantomAmbient),
            "ENTITY_PHANTOM_BITE" => Some(SoundEnum::EntityPhantomBite),
            "ENTITY_PHANTOM_DEATH" => Some(SoundEnum::EntityPhantomDeath),
            "ENTITY_PHANTOM_FLAP" => Some(SoundEnum::EntityPhantomFlap),
            "ENTITY_PHANTOM_HURT" => Some(SoundEnum::EntityPhantomHurt),
            "ENTITY_PHANTOM_SWOOP" => Some(SoundEnum::EntityPhantomSwoop),
            "ENTITY_PIGLIN_ADMIRING_ITEM" => Some(SoundEnum::EntityPiglinAdmiringItem),
            "ENTITY_PIGLIN_AMBIENT" => Some(SoundEnum::EntityPiglinAmbient),
            "ENTITY_PIGLIN_ANGRY" => Some(SoundEnum::EntityPiglinAngry),
            "ENTITY_PIGLIN_BRUTE_AMBIENT" => Some(SoundEnum::EntityPiglinBruteAmbient),
            "ENTITY_PIGLIN_BRUTE_ANGRY" => Some(SoundEnum::EntityPiglinBruteAngry),
            "ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED" => {
                Some(SoundEnum::EntityPiglinBruteConvertedToZombified)
            }
            "ENTITY_PIGLIN_BRUTE_DEATH" => Some(SoundEnum::EntityPiglinBruteDeath),
            "ENTITY_PIGLIN_BRUTE_HURT" => Some(SoundEnum::EntityPiglinBruteHurt),
            "ENTITY_PIGLIN_BRUTE_STEP" => Some(SoundEnum::EntityPiglinBruteStep),
            "ENTITY_PIGLIN_CELEBRATE" => Some(SoundEnum::EntityPiglinCelebrate),
            "ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED" => {
                Some(SoundEnum::EntityPiglinConvertedToZombified)
            }
            "ENTITY_PIGLIN_DEATH" => Some(SoundEnum::EntityPiglinDeath),
            "ENTITY_PIGLIN_HURT" => Some(SoundEnum::EntityPiglinHurt),
            "ENTITY_PIGLIN_JEALOUS" => Some(SoundEnum::EntityPiglinJealous),
            "ENTITY_PIGLIN_RETREAT" => Some(SoundEnum::EntityPiglinRetreat),
            "ENTITY_PIGLIN_STEP" => Some(SoundEnum::EntityPiglinStep),
            "ENTITY_PIG_AMBIENT" => Some(SoundEnum::EntityPigAmbient),
            "ENTITY_PIG_DEATH" => Some(SoundEnum::EntityPigDeath),
            "ENTITY_PIG_HURT" => Some(SoundEnum::EntityPigHurt),
            "ENTITY_PIG_SADDLE" => Some(SoundEnum::EntityPigSaddle),
            "ENTITY_PIG_STEP" => Some(SoundEnum::EntityPigStep),
            "ENTITY_PILLAGER_AMBIENT" => Some(SoundEnum::EntityPillagerAmbient),
            "ENTITY_PILLAGER_CELEBRATE" => Some(SoundEnum::EntityPillagerCelebrate),
            "ENTITY_PILLAGER_DEATH" => Some(SoundEnum::EntityPillagerDeath),
            "ENTITY_PILLAGER_HURT" => Some(SoundEnum::EntityPillagerHurt),
            "ENTITY_PLAYER_ATTACK_CRIT" => Some(SoundEnum::EntityPlayerAttackCrit),
            "ENTITY_PLAYER_ATTACK_KNOCKBACK" => Some(SoundEnum::EntityPlayerAttackKnockback),
            "ENTITY_PLAYER_ATTACK_NODAMAGE" => Some(SoundEnum::EntityPlayerAttackNodamage),
            "ENTITY_PLAYER_ATTACK_STRONG" => Some(SoundEnum::EntityPlayerAttackStrong),
            "ENTITY_PLAYER_ATTACK_SWEEP" => Some(SoundEnum::EntityPlayerAttackSweep),
            "ENTITY_PLAYER_ATTACK_WEAK" => Some(SoundEnum::EntityPlayerAttackWeak),
            "ENTITY_PLAYER_BIG_FALL" => Some(SoundEnum::EntityPlayerBigFall),
            "ENTITY_PLAYER_BREATH" => Some(SoundEnum::EntityPlayerBreath),
            "ENTITY_PLAYER_BURP" => Some(SoundEnum::EntityPlayerBurp),
            "ENTITY_PLAYER_DEATH" => Some(SoundEnum::EntityPlayerDeath),
            "ENTITY_PLAYER_HURT" => Some(SoundEnum::EntityPlayerHurt),
            "ENTITY_PLAYER_HURT_DROWN" => Some(SoundEnum::EntityPlayerHurtDrown),
            "ENTITY_PLAYER_HURT_FREEZE" => Some(SoundEnum::EntityPlayerHurtFreeze),
            "ENTITY_PLAYER_HURT_ON_FIRE" => Some(SoundEnum::EntityPlayerHurtOnFire),
            "ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH" => {
                Some(SoundEnum::EntityPlayerHurtSweetBerryBush)
            }
            "ENTITY_PLAYER_LEVELUP" => Some(SoundEnum::EntityPlayerLevelup),
            "ENTITY_PLAYER_SMALL_FALL" => Some(SoundEnum::EntityPlayerSmallFall),
            "ENTITY_PLAYER_SPLASH" => Some(SoundEnum::EntityPlayerSplash),
            "ENTITY_PLAYER_SPLASH_HIGH_SPEED" => Some(SoundEnum::EntityPlayerSplashHighSpeed),
            "ENTITY_PLAYER_SWIM" => Some(SoundEnum::EntityPlayerSwim),
            "ENTITY_POLAR_BEAR_AMBIENT" => Some(SoundEnum::EntityPolarBearAmbient),
            "ENTITY_POLAR_BEAR_AMBIENT_BABY" => Some(SoundEnum::EntityPolarBearAmbientBaby),
            "ENTITY_POLAR_BEAR_DEATH" => Some(SoundEnum::EntityPolarBearDeath),
            "ENTITY_POLAR_BEAR_HURT" => Some(SoundEnum::EntityPolarBearHurt),
            "ENTITY_POLAR_BEAR_STEP" => Some(SoundEnum::EntityPolarBearStep),
            "ENTITY_POLAR_BEAR_WARNING" => Some(SoundEnum::EntityPolarBearWarning),
            "ENTITY_PUFFER_FISH_AMBIENT" => Some(SoundEnum::EntityPufferFishAmbient),
            "ENTITY_PUFFER_FISH_BLOW_OUT" => Some(SoundEnum::EntityPufferFishBlowOut),
            "ENTITY_PUFFER_FISH_BLOW_UP" => Some(SoundEnum::EntityPufferFishBlowUp),
            "ENTITY_PUFFER_FISH_DEATH" => Some(SoundEnum::EntityPufferFishDeath),
            "ENTITY_PUFFER_FISH_FLOP" => Some(SoundEnum::EntityPufferFishFlop),
            "ENTITY_PUFFER_FISH_HURT" => Some(SoundEnum::EntityPufferFishHurt),
            "ENTITY_PUFFER_FISH_STING" => Some(SoundEnum::EntityPufferFishSting),
            "ENTITY_RABBIT_AMBIENT" => Some(SoundEnum::EntityRabbitAmbient),
            "ENTITY_RABBIT_ATTACK" => Some(SoundEnum::EntityRabbitAttack),
            "ENTITY_RABBIT_DEATH" => Some(SoundEnum::EntityRabbitDeath),
            "ENTITY_RABBIT_HURT" => Some(SoundEnum::EntityRabbitHurt),
            "ENTITY_RABBIT_JUMP" => Some(SoundEnum::EntityRabbitJump),
            "ENTITY_RAVAGER_AMBIENT" => Some(SoundEnum::EntityRavagerAmbient),
            "ENTITY_RAVAGER_ATTACK" => Some(SoundEnum::EntityRavagerAttack),
            "ENTITY_RAVAGER_CELEBRATE" => Some(SoundEnum::EntityRavagerCelebrate),
            "ENTITY_RAVAGER_DEATH" => Some(SoundEnum::EntityRavagerDeath),
            "ENTITY_RAVAGER_HURT" => Some(SoundEnum::EntityRavagerHurt),
            "ENTITY_RAVAGER_ROAR" => Some(SoundEnum::EntityRavagerRoar),
            "ENTITY_RAVAGER_STEP" => Some(SoundEnum::EntityRavagerStep),
            "ENTITY_RAVAGER_STUNNED" => Some(SoundEnum::EntityRavagerStunned),
            "ENTITY_SALMON_AMBIENT" => Some(SoundEnum::EntitySalmonAmbient),
            "ENTITY_SALMON_DEATH" => Some(SoundEnum::EntitySalmonDeath),
            "ENTITY_SALMON_FLOP" => Some(SoundEnum::EntitySalmonFlop),
            "ENTITY_SALMON_HURT" => Some(SoundEnum::EntitySalmonHurt),
            "ENTITY_SHEEP_AMBIENT" => Some(SoundEnum::EntitySheepAmbient),
            "ENTITY_SHEEP_DEATH" => Some(SoundEnum::EntitySheepDeath),
            "ENTITY_SHEEP_HURT" => Some(SoundEnum::EntitySheepHurt),
            "ENTITY_SHEEP_SHEAR" => Some(SoundEnum::EntitySheepShear),
            "ENTITY_SHEEP_STEP" => Some(SoundEnum::EntitySheepStep),
            "ENTITY_SHULKER_AMBIENT" => Some(SoundEnum::EntityShulkerAmbient),
            "ENTITY_SHULKER_BULLET_HIT" => Some(SoundEnum::EntityShulkerBulletHit),
            "ENTITY_SHULKER_BULLET_HURT" => Some(SoundEnum::EntityShulkerBulletHurt),
            "ENTITY_SHULKER_CLOSE" => Some(SoundEnum::EntityShulkerClose),
            "ENTITY_SHULKER_DEATH" => Some(SoundEnum::EntityShulkerDeath),
            "ENTITY_SHULKER_HURT" => Some(SoundEnum::EntityShulkerHurt),
            "ENTITY_SHULKER_HURT_CLOSED" => Some(SoundEnum::EntityShulkerHurtClosed),
            "ENTITY_SHULKER_OPEN" => Some(SoundEnum::EntityShulkerOpen),
            "ENTITY_SHULKER_SHOOT" => Some(SoundEnum::EntityShulkerShoot),
            "ENTITY_SHULKER_TELEPORT" => Some(SoundEnum::EntityShulkerTeleport),
            "ENTITY_SILVERFISH_AMBIENT" => Some(SoundEnum::EntitySilverfishAmbient),
            "ENTITY_SILVERFISH_DEATH" => Some(SoundEnum::EntitySilverfishDeath),
            "ENTITY_SILVERFISH_HURT" => Some(SoundEnum::EntitySilverfishHurt),
            "ENTITY_SILVERFISH_STEP" => Some(SoundEnum::EntitySilverfishStep),
            "ENTITY_SKELETON_AMBIENT" => Some(SoundEnum::EntitySkeletonAmbient),
            "ENTITY_SKELETON_CONVERTED_TO_STRAY" => Some(SoundEnum::EntitySkeletonConvertedToStray),
            "ENTITY_SKELETON_DEATH" => Some(SoundEnum::EntitySkeletonDeath),
            "ENTITY_SKELETON_HORSE_AMBIENT" => Some(SoundEnum::EntitySkeletonHorseAmbient),
            "ENTITY_SKELETON_HORSE_AMBIENT_WATER" => {
                Some(SoundEnum::EntitySkeletonHorseAmbientWater)
            }
            "ENTITY_SKELETON_HORSE_DEATH" => Some(SoundEnum::EntitySkeletonHorseDeath),
            "ENTITY_SKELETON_HORSE_GALLOP_WATER" => Some(SoundEnum::EntitySkeletonHorseGallopWater),
            "ENTITY_SKELETON_HORSE_HURT" => Some(SoundEnum::EntitySkeletonHorseHurt),
            "ENTITY_SKELETON_HORSE_JUMP_WATER" => Some(SoundEnum::EntitySkeletonHorseJumpWater),
            "ENTITY_SKELETON_HORSE_STEP_WATER" => Some(SoundEnum::EntitySkeletonHorseStepWater),
            "ENTITY_SKELETON_HORSE_SWIM" => Some(SoundEnum::EntitySkeletonHorseSwim),
            "ENTITY_SKELETON_HURT" => Some(SoundEnum::EntitySkeletonHurt),
            "ENTITY_SKELETON_SHOOT" => Some(SoundEnum::EntitySkeletonShoot),
            "ENTITY_SKELETON_STEP" => Some(SoundEnum::EntitySkeletonStep),
            "ENTITY_SLIME_ATTACK" => Some(SoundEnum::EntitySlimeAttack),
            "ENTITY_SLIME_DEATH" => Some(SoundEnum::EntitySlimeDeath),
            "ENTITY_SLIME_DEATH_SMALL" => Some(SoundEnum::EntitySlimeDeathSmall),
            "ENTITY_SLIME_HURT" => Some(SoundEnum::EntitySlimeHurt),
            "ENTITY_SLIME_HURT_SMALL" => Some(SoundEnum::EntitySlimeHurtSmall),
            "ENTITY_SLIME_JUMP" => Some(SoundEnum::EntitySlimeJump),
            "ENTITY_SLIME_JUMP_SMALL" => Some(SoundEnum::EntitySlimeJumpSmall),
            "ENTITY_SLIME_SQUISH" => Some(SoundEnum::EntitySlimeSquish),
            "ENTITY_SLIME_SQUISH_SMALL" => Some(SoundEnum::EntitySlimeSquishSmall),
            "ENTITY_SNIFFER_DEATH" => Some(SoundEnum::EntitySnifferDeath),
            "ENTITY_SNIFFER_DIGGING" => Some(SoundEnum::EntitySnifferDigging),
            "ENTITY_SNIFFER_DIGGING_STOP" => Some(SoundEnum::EntitySnifferDiggingStop),
            "ENTITY_SNIFFER_DROP_SEED" => Some(SoundEnum::EntitySnifferDropSeed),
            "ENTITY_SNIFFER_EAT" => Some(SoundEnum::EntitySnifferEat),
            "ENTITY_SNIFFER_HAPPY" => Some(SoundEnum::EntitySnifferHappy),
            "ENTITY_SNIFFER_HURT" => Some(SoundEnum::EntitySnifferHurt),
            "ENTITY_SNIFFER_IDLE" => Some(SoundEnum::EntitySnifferIdle),
            "ENTITY_SNIFFER_SCENTING" => Some(SoundEnum::EntitySnifferScenting),
            "ENTITY_SNIFFER_SEARCHING" => Some(SoundEnum::EntitySnifferSearching),
            "ENTITY_SNIFFER_SNIFFING" => Some(SoundEnum::EntitySnifferSniffing),
            "ENTITY_SNIFFER_STEP" => Some(SoundEnum::EntitySnifferStep),
            "ENTITY_SNOWBALL_THROW" => Some(SoundEnum::EntitySnowballThrow),
            "ENTITY_SNOW_GOLEM_AMBIENT" => Some(SoundEnum::EntitySnowGolemAmbient),
            "ENTITY_SNOW_GOLEM_DEATH" => Some(SoundEnum::EntitySnowGolemDeath),
            "ENTITY_SNOW_GOLEM_HURT" => Some(SoundEnum::EntitySnowGolemHurt),
            "ENTITY_SNOW_GOLEM_SHEAR" => Some(SoundEnum::EntitySnowGolemShear),
            "ENTITY_SNOW_GOLEM_SHOOT" => Some(SoundEnum::EntitySnowGolemShoot),
            "ENTITY_SPIDER_AMBIENT" => Some(SoundEnum::EntitySpiderAmbient),
            "ENTITY_SPIDER_DEATH" => Some(SoundEnum::EntitySpiderDeath),
            "ENTITY_SPIDER_HURT" => Some(SoundEnum::EntitySpiderHurt),
            "ENTITY_SPIDER_STEP" => Some(SoundEnum::EntitySpiderStep),
            "ENTITY_SPLASH_POTION_BREAK" => Some(SoundEnum::EntitySplashPotionBreak),
            "ENTITY_SPLASH_POTION_THROW" => Some(SoundEnum::EntitySplashPotionThrow),
            "ENTITY_SQUID_AMBIENT" => Some(SoundEnum::EntitySquidAmbient),
            "ENTITY_SQUID_DEATH" => Some(SoundEnum::EntitySquidDeath),
            "ENTITY_SQUID_HURT" => Some(SoundEnum::EntitySquidHurt),
            "ENTITY_SQUID_SQUIRT" => Some(SoundEnum::EntitySquidSquirt),
            "ENTITY_STRAY_AMBIENT" => Some(SoundEnum::EntityStrayAmbient),
            "ENTITY_STRAY_DEATH" => Some(SoundEnum::EntityStrayDeath),
            "ENTITY_STRAY_HURT" => Some(SoundEnum::EntityStrayHurt),
            "ENTITY_STRAY_STEP" => Some(SoundEnum::EntityStrayStep),
            "ENTITY_STRIDER_AMBIENT" => Some(SoundEnum::EntityStriderAmbient),
            "ENTITY_STRIDER_DEATH" => Some(SoundEnum::EntityStriderDeath),
            "ENTITY_STRIDER_EAT" => Some(SoundEnum::EntityStriderEat),
            "ENTITY_STRIDER_HAPPY" => Some(SoundEnum::EntityStriderHappy),
            "ENTITY_STRIDER_HURT" => Some(SoundEnum::EntityStriderHurt),
            "ENTITY_STRIDER_RETREAT" => Some(SoundEnum::EntityStriderRetreat),
            "ENTITY_STRIDER_SADDLE" => Some(SoundEnum::EntityStriderSaddle),
            "ENTITY_STRIDER_STEP" => Some(SoundEnum::EntityStriderStep),
            "ENTITY_STRIDER_STEP_LAVA" => Some(SoundEnum::EntityStriderStepLava),
            "ENTITY_TADPOLE_DEATH" => Some(SoundEnum::EntityTadpoleDeath),
            "ENTITY_TADPOLE_FLOP" => Some(SoundEnum::EntityTadpoleFlop),
            "ENTITY_TADPOLE_GROW_UP" => Some(SoundEnum::EntityTadpoleGrowUp),
            "ENTITY_TADPOLE_HURT" => Some(SoundEnum::EntityTadpoleHurt),
            "ENTITY_TNT_PRIMED" => Some(SoundEnum::EntityTntPrimed),
            "ENTITY_TROPICAL_FISH_AMBIENT" => Some(SoundEnum::EntityTropicalFishAmbient),
            "ENTITY_TROPICAL_FISH_DEATH" => Some(SoundEnum::EntityTropicalFishDeath),
            "ENTITY_TROPICAL_FISH_FLOP" => Some(SoundEnum::EntityTropicalFishFlop),
            "ENTITY_TROPICAL_FISH_HURT" => Some(SoundEnum::EntityTropicalFishHurt),
            "ENTITY_TURTLE_AMBIENT_LAND" => Some(SoundEnum::EntityTurtleAmbientLand),
            "ENTITY_TURTLE_DEATH" => Some(SoundEnum::EntityTurtleDeath),
            "ENTITY_TURTLE_DEATH_BABY" => Some(SoundEnum::EntityTurtleDeathBaby),
            "ENTITY_TURTLE_EGG_BREAK" => Some(SoundEnum::EntityTurtleEggBreak),
            "ENTITY_TURTLE_EGG_CRACK" => Some(SoundEnum::EntityTurtleEggCrack),
            "ENTITY_TURTLE_EGG_HATCH" => Some(SoundEnum::EntityTurtleEggHatch),
            "ENTITY_TURTLE_HURT" => Some(SoundEnum::EntityTurtleHurt),
            "ENTITY_TURTLE_HURT_BABY" => Some(SoundEnum::EntityTurtleHurtBaby),
            "ENTITY_TURTLE_LAY_EGG" => Some(SoundEnum::EntityTurtleLayEgg),
            "ENTITY_TURTLE_SHAMBLE" => Some(SoundEnum::EntityTurtleShamble),
            "ENTITY_TURTLE_SHAMBLE_BABY" => Some(SoundEnum::EntityTurtleShambleBaby),
            "ENTITY_TURTLE_SWIM" => Some(SoundEnum::EntityTurtleSwim),
            "ENTITY_VEX_AMBIENT" => Some(SoundEnum::EntityVexAmbient),
            "ENTITY_VEX_CHARGE" => Some(SoundEnum::EntityVexCharge),
            "ENTITY_VEX_DEATH" => Some(SoundEnum::EntityVexDeath),
            "ENTITY_VEX_HURT" => Some(SoundEnum::EntityVexHurt),
            "ENTITY_VILLAGER_AMBIENT" => Some(SoundEnum::EntityVillagerAmbient),
            "ENTITY_VILLAGER_CELEBRATE" => Some(SoundEnum::EntityVillagerCelebrate),
            "ENTITY_VILLAGER_DEATH" => Some(SoundEnum::EntityVillagerDeath),
            "ENTITY_VILLAGER_HURT" => Some(SoundEnum::EntityVillagerHurt),
            "ENTITY_VILLAGER_NO" => Some(SoundEnum::EntityVillagerNo),
            "ENTITY_VILLAGER_TRADE" => Some(SoundEnum::EntityVillagerTrade),
            "ENTITY_VILLAGER_WORK_ARMORER" => Some(SoundEnum::EntityVillagerWorkArmorer),
            "ENTITY_VILLAGER_WORK_BUTCHER" => Some(SoundEnum::EntityVillagerWorkButcher),
            "ENTITY_VILLAGER_WORK_CARTOGRAPHER" => Some(SoundEnum::EntityVillagerWorkCartographer),
            "ENTITY_VILLAGER_WORK_CLERIC" => Some(SoundEnum::EntityVillagerWorkCleric),
            "ENTITY_VILLAGER_WORK_FARMER" => Some(SoundEnum::EntityVillagerWorkFarmer),
            "ENTITY_VILLAGER_WORK_FISHERMAN" => Some(SoundEnum::EntityVillagerWorkFisherman),
            "ENTITY_VILLAGER_WORK_FLETCHER" => Some(SoundEnum::EntityVillagerWorkFletcher),
            "ENTITY_VILLAGER_WORK_LEATHERWORKER" => {
                Some(SoundEnum::EntityVillagerWorkLeatherworker)
            }
            "ENTITY_VILLAGER_WORK_LIBRARIAN" => Some(SoundEnum::EntityVillagerWorkLibrarian),
            "ENTITY_VILLAGER_WORK_MASON" => Some(SoundEnum::EntityVillagerWorkMason),
            "ENTITY_VILLAGER_WORK_SHEPHERD" => Some(SoundEnum::EntityVillagerWorkShepherd),
            "ENTITY_VILLAGER_WORK_TOOLSMITH" => Some(SoundEnum::EntityVillagerWorkToolsmith),
            "ENTITY_VILLAGER_WORK_WEAPONSMITH" => Some(SoundEnum::EntityVillagerWorkWeaponsmith),
            "ENTITY_VILLAGER_YES" => Some(SoundEnum::EntityVillagerYes),
            "ENTITY_VINDICATOR_AMBIENT" => Some(SoundEnum::EntityVindicatorAmbient),
            "ENTITY_VINDICATOR_CELEBRATE" => Some(SoundEnum::EntityVindicatorCelebrate),
            "ENTITY_VINDICATOR_DEATH" => Some(SoundEnum::EntityVindicatorDeath),
            "ENTITY_VINDICATOR_HURT" => Some(SoundEnum::EntityVindicatorHurt),
            "ENTITY_WANDERING_TRADER_AMBIENT" => Some(SoundEnum::EntityWanderingTraderAmbient),
            "ENTITY_WANDERING_TRADER_DEATH" => Some(SoundEnum::EntityWanderingTraderDeath),
            "ENTITY_WANDERING_TRADER_DISAPPEARED" => {
                Some(SoundEnum::EntityWanderingTraderDisappeared)
            }
            "ENTITY_WANDERING_TRADER_DRINK_MILK" => Some(SoundEnum::EntityWanderingTraderDrinkMilk),
            "ENTITY_WANDERING_TRADER_DRINK_POTION" => {
                Some(SoundEnum::EntityWanderingTraderDrinkPotion)
            }
            "ENTITY_WANDERING_TRADER_HURT" => Some(SoundEnum::EntityWanderingTraderHurt),
            "ENTITY_WANDERING_TRADER_NO" => Some(SoundEnum::EntityWanderingTraderNo),
            "ENTITY_WANDERING_TRADER_REAPPEARED" => {
                Some(SoundEnum::EntityWanderingTraderReappeared)
            }
            "ENTITY_WANDERING_TRADER_TRADE" => Some(SoundEnum::EntityWanderingTraderTrade),
            "ENTITY_WANDERING_TRADER_YES" => Some(SoundEnum::EntityWanderingTraderYes),
            "ENTITY_WARDEN_AGITATED" => Some(SoundEnum::EntityWardenAgitated),
            "ENTITY_WARDEN_AMBIENT" => Some(SoundEnum::EntityWardenAmbient),
            "ENTITY_WARDEN_ANGRY" => Some(SoundEnum::EntityWardenAngry),
            "ENTITY_WARDEN_ATTACK_IMPACT" => Some(SoundEnum::EntityWardenAttackImpact),
            "ENTITY_WARDEN_DEATH" => Some(SoundEnum::EntityWardenDeath),
            "ENTITY_WARDEN_DIG" => Some(SoundEnum::EntityWardenDig),
            "ENTITY_WARDEN_EMERGE" => Some(SoundEnum::EntityWardenEmerge),
            "ENTITY_WARDEN_HEARTBEAT" => Some(SoundEnum::EntityWardenHeartbeat),
            "ENTITY_WARDEN_HURT" => Some(SoundEnum::EntityWardenHurt),
            "ENTITY_WARDEN_LISTENING" => Some(SoundEnum::EntityWardenListening),
            "ENTITY_WARDEN_LISTENING_ANGRY" => Some(SoundEnum::EntityWardenListeningAngry),
            "ENTITY_WARDEN_NEARBY_CLOSE" => Some(SoundEnum::EntityWardenNearbyClose),
            "ENTITY_WARDEN_NEARBY_CLOSER" => Some(SoundEnum::EntityWardenNearbyCloser),
            "ENTITY_WARDEN_NEARBY_CLOSEST" => Some(SoundEnum::EntityWardenNearbyClosest),
            "ENTITY_WARDEN_ROAR" => Some(SoundEnum::EntityWardenRoar),
            "ENTITY_WARDEN_SNIFF" => Some(SoundEnum::EntityWardenSniff),
            "ENTITY_WARDEN_SONIC_BOOM" => Some(SoundEnum::EntityWardenSonicBoom),
            "ENTITY_WARDEN_SONIC_CHARGE" => Some(SoundEnum::EntityWardenSonicCharge),
            "ENTITY_WARDEN_STEP" => Some(SoundEnum::EntityWardenStep),
            "ENTITY_WARDEN_TENDRIL_CLICKS" => Some(SoundEnum::EntityWardenTendrilClicks),
            "ENTITY_WITCH_AMBIENT" => Some(SoundEnum::EntityWitchAmbient),
            "ENTITY_WITCH_CELEBRATE" => Some(SoundEnum::EntityWitchCelebrate),
            "ENTITY_WITCH_DEATH" => Some(SoundEnum::EntityWitchDeath),
            "ENTITY_WITCH_DRINK" => Some(SoundEnum::EntityWitchDrink),
            "ENTITY_WITCH_HURT" => Some(SoundEnum::EntityWitchHurt),
            "ENTITY_WITCH_THROW" => Some(SoundEnum::EntityWitchThrow),
            "ENTITY_WITHER_AMBIENT" => Some(SoundEnum::EntityWitherAmbient),
            "ENTITY_WITHER_BREAK_BLOCK" => Some(SoundEnum::EntityWitherBreakBlock),
            "ENTITY_WITHER_DEATH" => Some(SoundEnum::EntityWitherDeath),
            "ENTITY_WITHER_HURT" => Some(SoundEnum::EntityWitherHurt),
            "ENTITY_WITHER_SHOOT" => Some(SoundEnum::EntityWitherShoot),
            "ENTITY_WITHER_SKELETON_AMBIENT" => Some(SoundEnum::EntityWitherSkeletonAmbient),
            "ENTITY_WITHER_SKELETON_DEATH" => Some(SoundEnum::EntityWitherSkeletonDeath),
            "ENTITY_WITHER_SKELETON_HURT" => Some(SoundEnum::EntityWitherSkeletonHurt),
            "ENTITY_WITHER_SKELETON_STEP" => Some(SoundEnum::EntityWitherSkeletonStep),
            "ENTITY_WITHER_SPAWN" => Some(SoundEnum::EntityWitherSpawn),
            "ENTITY_WOLF_AMBIENT" => Some(SoundEnum::EntityWolfAmbient),
            "ENTITY_WOLF_DEATH" => Some(SoundEnum::EntityWolfDeath),
            "ENTITY_WOLF_GROWL" => Some(SoundEnum::EntityWolfGrowl),
            "ENTITY_WOLF_HOWL" => Some(SoundEnum::EntityWolfHowl),
            "ENTITY_WOLF_HURT" => Some(SoundEnum::EntityWolfHurt),
            "ENTITY_WOLF_PANT" => Some(SoundEnum::EntityWolfPant),
            "ENTITY_WOLF_SHAKE" => Some(SoundEnum::EntityWolfShake),
            "ENTITY_WOLF_STEP" => Some(SoundEnum::EntityWolfStep),
            "ENTITY_WOLF_WHINE" => Some(SoundEnum::EntityWolfWhine),
            "ENTITY_ZOGLIN_AMBIENT" => Some(SoundEnum::EntityZoglinAmbient),
            "ENTITY_ZOGLIN_ANGRY" => Some(SoundEnum::EntityZoglinAngry),
            "ENTITY_ZOGLIN_ATTACK" => Some(SoundEnum::EntityZoglinAttack),
            "ENTITY_ZOGLIN_DEATH" => Some(SoundEnum::EntityZoglinDeath),
            "ENTITY_ZOGLIN_HURT" => Some(SoundEnum::EntityZoglinHurt),
            "ENTITY_ZOGLIN_STEP" => Some(SoundEnum::EntityZoglinStep),
            "ENTITY_ZOMBIE_AMBIENT" => Some(SoundEnum::EntityZombieAmbient),
            "ENTITY_ZOMBIE_ATTACK_IRON_DOOR" => Some(SoundEnum::EntityZombieAttackIronDoor),
            "ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR" => Some(SoundEnum::EntityZombieAttackWoodenDoor),
            "ENTITY_ZOMBIE_BREAK_WOODEN_DOOR" => Some(SoundEnum::EntityZombieBreakWoodenDoor),
            "ENTITY_ZOMBIE_CONVERTED_TO_DROWNED" => Some(SoundEnum::EntityZombieConvertedToDrowned),
            "ENTITY_ZOMBIE_DEATH" => Some(SoundEnum::EntityZombieDeath),
            "ENTITY_ZOMBIE_DESTROY_EGG" => Some(SoundEnum::EntityZombieDestroyEgg),
            "ENTITY_ZOMBIE_HORSE_AMBIENT" => Some(SoundEnum::EntityZombieHorseAmbient),
            "ENTITY_ZOMBIE_HORSE_DEATH" => Some(SoundEnum::EntityZombieHorseDeath),
            "ENTITY_ZOMBIE_HORSE_HURT" => Some(SoundEnum::EntityZombieHorseHurt),
            "ENTITY_ZOMBIE_HURT" => Some(SoundEnum::EntityZombieHurt),
            "ENTITY_ZOMBIE_INFECT" => Some(SoundEnum::EntityZombieInfect),
            "ENTITY_ZOMBIE_STEP" => Some(SoundEnum::EntityZombieStep),
            "ENTITY_ZOMBIE_VILLAGER_AMBIENT" => Some(SoundEnum::EntityZombieVillagerAmbient),
            "ENTITY_ZOMBIE_VILLAGER_CONVERTED" => Some(SoundEnum::EntityZombieVillagerConverted),
            "ENTITY_ZOMBIE_VILLAGER_CURE" => Some(SoundEnum::EntityZombieVillagerCure),
            "ENTITY_ZOMBIE_VILLAGER_DEATH" => Some(SoundEnum::EntityZombieVillagerDeath),
            "ENTITY_ZOMBIE_VILLAGER_HURT" => Some(SoundEnum::EntityZombieVillagerHurt),
            "ENTITY_ZOMBIE_VILLAGER_STEP" => Some(SoundEnum::EntityZombieVillagerStep),
            "ENTITY_ZOMBIFIED_PIGLIN_AMBIENT" => Some(SoundEnum::EntityZombifiedPiglinAmbient),
            "ENTITY_ZOMBIFIED_PIGLIN_ANGRY" => Some(SoundEnum::EntityZombifiedPiglinAngry),
            "ENTITY_ZOMBIFIED_PIGLIN_DEATH" => Some(SoundEnum::EntityZombifiedPiglinDeath),
            "ENTITY_ZOMBIFIED_PIGLIN_HURT" => Some(SoundEnum::EntityZombifiedPiglinHurt),
            "EVENT_RAID_HORN" => Some(SoundEnum::EventRaidHorn),
            "INTENTIONALLY_EMPTY" => Some(SoundEnum::IntentionallyEmpty),
            "ITEM_ARMOR_EQUIP_CHAIN" => Some(SoundEnum::ItemArmorEquipChain),
            "ITEM_ARMOR_EQUIP_DIAMOND" => Some(SoundEnum::ItemArmorEquipDiamond),
            "ITEM_ARMOR_EQUIP_ELYTRA" => Some(SoundEnum::ItemArmorEquipElytra),
            "ITEM_ARMOR_EQUIP_GENERIC" => Some(SoundEnum::ItemArmorEquipGeneric),
            "ITEM_ARMOR_EQUIP_GOLD" => Some(SoundEnum::ItemArmorEquipGold),
            "ITEM_ARMOR_EQUIP_IRON" => Some(SoundEnum::ItemArmorEquipIron),
            "ITEM_ARMOR_EQUIP_LEATHER" => Some(SoundEnum::ItemArmorEquipLeather),
            "ITEM_ARMOR_EQUIP_NETHERITE" => Some(SoundEnum::ItemArmorEquipNetherite),
            "ITEM_ARMOR_EQUIP_TURTLE" => Some(SoundEnum::ItemArmorEquipTurtle),
            "ITEM_AXE_SCRAPE" => Some(SoundEnum::ItemAxeScrape),
            "ITEM_AXE_STRIP" => Some(SoundEnum::ItemAxeStrip),
            "ITEM_AXE_WAX_OFF" => Some(SoundEnum::ItemAxeWaxOff),
            "ITEM_BONE_MEAL_USE" => Some(SoundEnum::ItemBoneMealUse),
            "ITEM_BOOK_PAGE_TURN" => Some(SoundEnum::ItemBookPageTurn),
            "ITEM_BOOK_PUT" => Some(SoundEnum::ItemBookPut),
            "ITEM_BOTTLE_EMPTY" => Some(SoundEnum::ItemBottleEmpty),
            "ITEM_BOTTLE_FILL" => Some(SoundEnum::ItemBottleFill),
            "ITEM_BOTTLE_FILL_DRAGONBREATH" => Some(SoundEnum::ItemBottleFillDragonbreath),
            "ITEM_BRUSH_BRUSHING_GENERIC" => Some(SoundEnum::ItemBrushBrushingGeneric),
            "ITEM_BRUSH_BRUSHING_GRAVEL" => Some(SoundEnum::ItemBrushBrushingGravel),
            "ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE" => {
                Some(SoundEnum::ItemBrushBrushingGravelComplete)
            }
            "ITEM_BRUSH_BRUSHING_SAND" => Some(SoundEnum::ItemBrushBrushingSand),
            "ITEM_BRUSH_BRUSHING_SAND_COMPLETE" => Some(SoundEnum::ItemBrushBrushingSandComplete),
            "ITEM_BUCKET_EMPTY" => Some(SoundEnum::ItemBucketEmpty),
            "ITEM_BUCKET_EMPTY_AXOLOTL" => Some(SoundEnum::ItemBucketEmptyAxolotl),
            "ITEM_BUCKET_EMPTY_FISH" => Some(SoundEnum::ItemBucketEmptyFish),
            "ITEM_BUCKET_EMPTY_LAVA" => Some(SoundEnum::ItemBucketEmptyLava),
            "ITEM_BUCKET_EMPTY_POWDER_SNOW" => Some(SoundEnum::ItemBucketEmptyPowderSnow),
            "ITEM_BUCKET_EMPTY_TADPOLE" => Some(SoundEnum::ItemBucketEmptyTadpole),
            "ITEM_BUCKET_FILL" => Some(SoundEnum::ItemBucketFill),
            "ITEM_BUCKET_FILL_AXOLOTL" => Some(SoundEnum::ItemBucketFillAxolotl),
            "ITEM_BUCKET_FILL_FISH" => Some(SoundEnum::ItemBucketFillFish),
            "ITEM_BUCKET_FILL_LAVA" => Some(SoundEnum::ItemBucketFillLava),
            "ITEM_BUCKET_FILL_POWDER_SNOW" => Some(SoundEnum::ItemBucketFillPowderSnow),
            "ITEM_BUCKET_FILL_TADPOLE" => Some(SoundEnum::ItemBucketFillTadpole),
            "ITEM_BUNDLE_DROP_CONTENTS" => Some(SoundEnum::ItemBundleDropContents),
            "ITEM_BUNDLE_INSERT" => Some(SoundEnum::ItemBundleInsert),
            "ITEM_BUNDLE_REMOVE_ONE" => Some(SoundEnum::ItemBundleRemoveOne),
            "ITEM_CHORUS_FRUIT_TELEPORT" => Some(SoundEnum::ItemChorusFruitTeleport),
            "ITEM_CROP_PLANT" => Some(SoundEnum::ItemCropPlant),
            "ITEM_CROSSBOW_HIT" => Some(SoundEnum::ItemCrossbowHit),
            "ITEM_CROSSBOW_LOADING_END" => Some(SoundEnum::ItemCrossbowLoadingEnd),
            "ITEM_CROSSBOW_LOADING_MIDDLE" => Some(SoundEnum::ItemCrossbowLoadingMiddle),
            "ITEM_CROSSBOW_LOADING_START" => Some(SoundEnum::ItemCrossbowLoadingStart),
            "ITEM_CROSSBOW_QUICK_CHARGE_1" => Some(SoundEnum::ItemCrossbowQuickCharge1),
            "ITEM_CROSSBOW_QUICK_CHARGE_2" => Some(SoundEnum::ItemCrossbowQuickCharge2),
            "ITEM_CROSSBOW_QUICK_CHARGE_3" => Some(SoundEnum::ItemCrossbowQuickCharge3),
            "ITEM_CROSSBOW_SHOOT" => Some(SoundEnum::ItemCrossbowShoot),
            "ITEM_DYE_USE" => Some(SoundEnum::ItemDyeUse),
            "ITEM_ELYTRA_FLYING" => Some(SoundEnum::ItemElytraFlying),
            "ITEM_FIRECHARGE_USE" => Some(SoundEnum::ItemFirechargeUse),
            "ITEM_FLINTANDSTEEL_USE" => Some(SoundEnum::ItemFlintandsteelUse),
            "ITEM_GLOW_INK_SAC_USE" => Some(SoundEnum::ItemGlowInkSacUse),
            "ITEM_GOAT_HORN_PLAY" => Some(SoundEnum::ItemGoatHornPlay),
            "ITEM_GOAT_HORN_SOUND_0" => Some(SoundEnum::ItemGoatHornSound0),
            "ITEM_GOAT_HORN_SOUND_1" => Some(SoundEnum::ItemGoatHornSound1),
            "ITEM_GOAT_HORN_SOUND_2" => Some(SoundEnum::ItemGoatHornSound2),
            "ITEM_GOAT_HORN_SOUND_3" => Some(SoundEnum::ItemGoatHornSound3),
            "ITEM_GOAT_HORN_SOUND_4" => Some(SoundEnum::ItemGoatHornSound4),
            "ITEM_GOAT_HORN_SOUND_5" => Some(SoundEnum::ItemGoatHornSound5),
            "ITEM_GOAT_HORN_SOUND_6" => Some(SoundEnum::ItemGoatHornSound6),
            "ITEM_GOAT_HORN_SOUND_7" => Some(SoundEnum::ItemGoatHornSound7),
            "ITEM_HOE_TILL" => Some(SoundEnum::ItemHoeTill),
            "ITEM_HONEYCOMB_WAX_ON" => Some(SoundEnum::ItemHoneycombWaxOn),
            "ITEM_HONEY_BOTTLE_DRINK" => Some(SoundEnum::ItemHoneyBottleDrink),
            "ITEM_INK_SAC_USE" => Some(SoundEnum::ItemInkSacUse),
            "ITEM_LODESTONE_COMPASS_LOCK" => Some(SoundEnum::ItemLodestoneCompassLock),
            "ITEM_NETHER_WART_PLANT" => Some(SoundEnum::ItemNetherWartPlant),
            "ITEM_SHIELD_BLOCK" => Some(SoundEnum::ItemShieldBlock),
            "ITEM_SHIELD_BREAK" => Some(SoundEnum::ItemShieldBreak),
            "ITEM_SHOVEL_FLATTEN" => Some(SoundEnum::ItemShovelFlatten),
            "ITEM_SPYGLASS_STOP_USING" => Some(SoundEnum::ItemSpyglassStopUsing),
            "ITEM_SPYGLASS_USE" => Some(SoundEnum::ItemSpyglassUse),
            "ITEM_TOTEM_USE" => Some(SoundEnum::ItemTotemUse),
            "ITEM_TRIDENT_HIT" => Some(SoundEnum::ItemTridentHit),
            "ITEM_TRIDENT_HIT_GROUND" => Some(SoundEnum::ItemTridentHitGround),
            "ITEM_TRIDENT_RETURN" => Some(SoundEnum::ItemTridentReturn),
            "ITEM_TRIDENT_RIPTIDE_1" => Some(SoundEnum::ItemTridentRiptide1),
            "ITEM_TRIDENT_RIPTIDE_2" => Some(SoundEnum::ItemTridentRiptide2),
            "ITEM_TRIDENT_RIPTIDE_3" => Some(SoundEnum::ItemTridentRiptide3),
            "ITEM_TRIDENT_THROW" => Some(SoundEnum::ItemTridentThrow),
            "ITEM_TRIDENT_THUNDER" => Some(SoundEnum::ItemTridentThunder),
            "MUSIC_CREATIVE" => Some(SoundEnum::MusicCreative),
            "MUSIC_CREDITS" => Some(SoundEnum::MusicCredits),
            "MUSIC_DISC_11" => Some(SoundEnum::MusicDisc11),
            "MUSIC_DISC_13" => Some(SoundEnum::MusicDisc13),
            "MUSIC_DISC_5" => Some(SoundEnum::MusicDisc5),
            "MUSIC_DISC_BLOCKS" => Some(SoundEnum::MusicDiscBlocks),
            "MUSIC_DISC_CAT" => Some(SoundEnum::MusicDiscCat),
            "MUSIC_DISC_CHIRP" => Some(SoundEnum::MusicDiscChirp),
            "MUSIC_DISC_FAR" => Some(SoundEnum::MusicDiscFar),
            "MUSIC_DISC_MALL" => Some(SoundEnum::MusicDiscMall),
            "MUSIC_DISC_MELLOHI" => Some(SoundEnum::MusicDiscMellohi),
            "MUSIC_DISC_OTHERSIDE" => Some(SoundEnum::MusicDiscOtherside),
            "MUSIC_DISC_PIGSTEP" => Some(SoundEnum::MusicDiscPigstep),
            "MUSIC_DISC_RELIC" => Some(SoundEnum::MusicDiscRelic),
            "MUSIC_DISC_STAL" => Some(SoundEnum::MusicDiscStal),
            "MUSIC_DISC_STRAD" => Some(SoundEnum::MusicDiscStrad),
            "MUSIC_DISC_WAIT" => Some(SoundEnum::MusicDiscWait),
            "MUSIC_DISC_WARD" => Some(SoundEnum::MusicDiscWard),
            "MUSIC_DRAGON" => Some(SoundEnum::MusicDragon),
            "MUSIC_END" => Some(SoundEnum::MusicEnd),
            "MUSIC_GAME" => Some(SoundEnum::MusicGame),
            "MUSIC_MENU" => Some(SoundEnum::MusicMenu),
            "MUSIC_NETHER_BASALT_DELTAS" => Some(SoundEnum::MusicNetherBasaltDeltas),
            "MUSIC_NETHER_CRIMSON_FOREST" => Some(SoundEnum::MusicNetherCrimsonForest),
            "MUSIC_NETHER_NETHER_WASTES" => Some(SoundEnum::MusicNetherNetherWastes),
            "MUSIC_NETHER_SOUL_SAND_VALLEY" => Some(SoundEnum::MusicNetherSoulSandValley),
            "MUSIC_NETHER_WARPED_FOREST" => Some(SoundEnum::MusicNetherWarpedForest),
            "MUSIC_OVERWORLD_BADLANDS" => Some(SoundEnum::MusicOverworldBadlands),
            "MUSIC_OVERWORLD_BAMBOO_JUNGLE" => Some(SoundEnum::MusicOverworldBambooJungle),
            "MUSIC_OVERWORLD_CHERRY_GROVE" => Some(SoundEnum::MusicOverworldCherryGrove),
            "MUSIC_OVERWORLD_DEEP_DARK" => Some(SoundEnum::MusicOverworldDeepDark),
            "MUSIC_OVERWORLD_DESERT" => Some(SoundEnum::MusicOverworldDesert),
            "MUSIC_OVERWORLD_DRIPSTONE_CAVES" => Some(SoundEnum::MusicOverworldDripstoneCaves),
            "MUSIC_OVERWORLD_FLOWER_FOREST" => Some(SoundEnum::MusicOverworldFlowerForest),
            "MUSIC_OVERWORLD_FOREST" => Some(SoundEnum::MusicOverworldForest),
            "MUSIC_OVERWORLD_FROZEN_PEAKS" => Some(SoundEnum::MusicOverworldFrozenPeaks),
            "MUSIC_OVERWORLD_GROVE" => Some(SoundEnum::MusicOverworldGrove),
            "MUSIC_OVERWORLD_JAGGED_PEAKS" => Some(SoundEnum::MusicOverworldJaggedPeaks),
            "MUSIC_OVERWORLD_JUNGLE" => Some(SoundEnum::MusicOverworldJungle),
            "MUSIC_OVERWORLD_LUSH_CAVES" => Some(SoundEnum::MusicOverworldLushCaves),
            "MUSIC_OVERWORLD_MEADOW" => Some(SoundEnum::MusicOverworldMeadow),
            "MUSIC_OVERWORLD_OLD_GROWTH_TAIGA" => Some(SoundEnum::MusicOverworldOldGrowthTaiga),
            "MUSIC_OVERWORLD_SNOWY_SLOPES" => Some(SoundEnum::MusicOverworldSnowySlopes),
            "MUSIC_OVERWORLD_SPARSE_JUNGLE" => Some(SoundEnum::MusicOverworldSparseJungle),
            "MUSIC_OVERWORLD_STONY_PEAKS" => Some(SoundEnum::MusicOverworldStonyPeaks),
            "MUSIC_OVERWORLD_SWAMP" => Some(SoundEnum::MusicOverworldSwamp),
            "MUSIC_UNDER_WATER" => Some(SoundEnum::MusicUnderWater),
            "PARTICLE_SOUL_ESCAPE" => Some(SoundEnum::ParticleSoulEscape),
            "UI_BUTTON_CLICK" => Some(SoundEnum::UiButtonClick),
            "UI_CARTOGRAPHY_TABLE_TAKE_RESULT" => Some(SoundEnum::UiCartographyTableTakeResult),
            "UI_LOOM_SELECT_PATTERN" => Some(SoundEnum::UiLoomSelectPattern),
            "UI_LOOM_TAKE_RESULT" => Some(SoundEnum::UiLoomTakeResult),
            "UI_STONECUTTER_SELECT_RECIPE" => Some(SoundEnum::UiStonecutterSelectRecipe),
            "UI_STONECUTTER_TAKE_RESULT" => Some(SoundEnum::UiStonecutterTakeResult),
            "UI_TOAST_CHALLENGE_COMPLETE" => Some(SoundEnum::UiToastChallengeComplete),
            "UI_TOAST_IN" => Some(SoundEnum::UiToastIn),
            "UI_TOAST_OUT" => Some(SoundEnum::UiToastOut),
            "WEATHER_RAIN" => Some(SoundEnum::WeatherRain),
            "WEATHER_RAIN_ABOVE" => Some(SoundEnum::WeatherRainAbove),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Sound<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Sound")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Sound;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Sound(
                jni,
                raw_obj,
                crate::bukkit::Sound::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
}
/// An instantiatable struct that implements Chunk. Needed for returning it from Java.
pub struct Chunk<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> Chunk<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Chunk from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Chunk") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Chunk object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn is_loaded(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isLoaded", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn unload(
        &mut self,
        arg0: std::option::Option<bool>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.unwrap().into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "unload",
            "(Z)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn load(
        &mut self,
        arg0: std::option::Option<bool>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.unwrap().into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "load",
            "(Z)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn world(&mut self) -> Result<crate::bukkit::World<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWorld",
            "()Lorg/bukkit/World;",
            &[],
        )?;
        let ret = {
            crate::bukkit::World(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_block(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<crate::bukkit::block::Block<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlock",
            "(III)Lorg/bukkit/block/Block;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            crate::bukkit::block::Block(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn x(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getX", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn z(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getZ", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn chunk_snapshot(
        &mut self,
    ) -> Result<crate::bukkit::ChunkSnapshot<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getChunkSnapshot",
            "()Lorg/bukkit/ChunkSnapshot;",
            &[],
        )?;
        let ret = {
            crate::bukkit::ChunkSnapshot(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn is_entities_loaded(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isEntitiesLoaded", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_generated(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isGenerated", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_slime_chunk(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isSlimeChunk", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_force_loaded(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isForceLoaded", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_force_loaded(&mut self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setForceLoaded",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn add_plugin_chunk_ticket(
        &mut self,
        arg0: crate::bukkit::plugin::Plugin<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "addPluginChunkTicket",
            "(Lorg/bukkit/plugin/Plugin;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn remove_plugin_chunk_ticket(
        &mut self,
        arg0: crate::bukkit::plugin::Plugin<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removePluginChunkTicket",
            "(Lorg/bukkit/plugin/Plugin;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn inhabited_time(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getInhabitedTime", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn set_inhabited_time(&mut self, arg0: i64) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setInhabitedTime",
            "(J)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn load_level(
        &mut self,
    ) -> Result<crate::bukkit::ChunkLoadLevel<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getLoadLevel",
            "()Lorg/bukkit/Chunk$LoadLevel;",
            &[],
        )?;
        let ret = {
            crate::bukkit::ChunkLoadLevel(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn persistent_data_container(
        &mut self,
    ) -> Result<crate::bukkit::persistence::PersistentDataContainer<'mc>, Box<dyn std::error::Error>>
    {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPersistentDataContainer",
            "()Lorg/bukkit/persistence/PersistentDataContainer;",
            &[],
        )?;
        let ret = {
            crate::bukkit::persistence::PersistentDataContainer(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
}
impl<'mc> crate::JNIRaw<'mc> for Chunk<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub enum DyeColorEnum {
    White,
    Orange,
    Magenta,
    LightBlue,
    Yellow,
    Lime,
    Pink,
    Gray,
    LightGray,
    Cyan,
    Purple,
    Blue,
    Brown,
    Green,
    Red,
    Black,
}
impl std::fmt::Display for DyeColorEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            DyeColorEnum::White => f.write_str("WHITE"),
            DyeColorEnum::Orange => f.write_str("ORANGE"),
            DyeColorEnum::Magenta => f.write_str("MAGENTA"),
            DyeColorEnum::LightBlue => f.write_str("LIGHT_BLUE"),
            DyeColorEnum::Yellow => f.write_str("YELLOW"),
            DyeColorEnum::Lime => f.write_str("LIME"),
            DyeColorEnum::Pink => f.write_str("PINK"),
            DyeColorEnum::Gray => f.write_str("GRAY"),
            DyeColorEnum::LightGray => f.write_str("LIGHT_GRAY"),
            DyeColorEnum::Cyan => f.write_str("CYAN"),
            DyeColorEnum::Purple => f.write_str("PURPLE"),
            DyeColorEnum::Blue => f.write_str("BLUE"),
            DyeColorEnum::Brown => f.write_str("BROWN"),
            DyeColorEnum::Green => f.write_str("GREEN"),
            DyeColorEnum::Red => f.write_str("RED"),
            DyeColorEnum::Black => f.write_str("BLACK"),
        }
    }
}
pub struct DyeColor<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub DyeColorEnum,
);
impl<'mc> std::ops::Deref for DyeColor<'mc> {
    type Target = DyeColorEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for DyeColor<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> DyeColor<'mc> {
    pub const WHITE: DyeColorEnum = DyeColorEnum::White;
    pub const ORANGE: DyeColorEnum = DyeColorEnum::Orange;
    pub const MAGENTA: DyeColorEnum = DyeColorEnum::Magenta;
    pub const LIGHTBLUE: DyeColorEnum = DyeColorEnum::LightBlue;
    pub const YELLOW: DyeColorEnum = DyeColorEnum::Yellow;
    pub const LIME: DyeColorEnum = DyeColorEnum::Lime;
    pub const PINK: DyeColorEnum = DyeColorEnum::Pink;
    pub const GRAY: DyeColorEnum = DyeColorEnum::Gray;
    pub const LIGHTGRAY: DyeColorEnum = DyeColorEnum::LightGray;
    pub const CYAN: DyeColorEnum = DyeColorEnum::Cyan;
    pub const PURPLE: DyeColorEnum = DyeColorEnum::Purple;
    pub const BLUE: DyeColorEnum = DyeColorEnum::Blue;
    pub const BROWN: DyeColorEnum = DyeColorEnum::Brown;
    pub const GREEN: DyeColorEnum = DyeColorEnum::Green;
    pub const RED: DyeColorEnum = DyeColorEnum::Red;
    pub const BLACK: DyeColorEnum = DyeColorEnum::Black;
    pub fn from_string(str: String) -> std::option::Option<DyeColorEnum> {
        match str.as_str() {
            "WHITE" => Some(DyeColorEnum::White),
            "ORANGE" => Some(DyeColorEnum::Orange),
            "MAGENTA" => Some(DyeColorEnum::Magenta),
            "LIGHT_BLUE" => Some(DyeColorEnum::LightBlue),
            "YELLOW" => Some(DyeColorEnum::Yellow),
            "LIME" => Some(DyeColorEnum::Lime),
            "PINK" => Some(DyeColorEnum::Pink),
            "GRAY" => Some(DyeColorEnum::Gray),
            "LIGHT_GRAY" => Some(DyeColorEnum::LightGray),
            "CYAN" => Some(DyeColorEnum::Cyan),
            "PURPLE" => Some(DyeColorEnum::Purple),
            "BLUE" => Some(DyeColorEnum::Blue),
            "BROWN" => Some(DyeColorEnum::Brown),
            "GREEN" => Some(DyeColorEnum::Green),
            "RED" => Some(DyeColorEnum::Red),
            "BLACK" => Some(DyeColorEnum::Black),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::DyeColor<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/DyeColor")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/DyeColor;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::DyeColor(
                jni,
                raw_obj,
                crate::bukkit::DyeColor::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn color(&mut self) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getColor",
            "()Lorg/bukkit/Color;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Color(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn legacy_value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::DyeColor<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/DyeColor")?;
        let res = jni.call_static_method(
            cls,
            "legacyValueOf",
            "(Ljava/lang/String;)Lorg/bukkit/DyeColor;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::DyeColor(
                jni,
                raw_obj,
                crate::bukkit::DyeColor::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn get_by_wool_data(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i8,
    ) -> Result<crate::bukkit::DyeColor<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Byte(arg0.into());
        let cls = &jni.find_class("org/bukkit/DyeColor")?;
        let res = jni.call_static_method(
            cls,
            "getByWoolData",
            "(B)Lorg/bukkit/DyeColor;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::DyeColor(
                jni,
                raw_obj,
                crate::bukkit::DyeColor::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn wool_data(&mut self) -> Result<i8, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getWoolData", "()B", &[])?;
        Ok(res.b().unwrap())
    }
    pub fn dye_data(&mut self) -> Result<i8, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getDyeData", "()B", &[])?;
        Ok(res.b().unwrap())
    }
    pub fn get_by_dye_data(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i8,
    ) -> Result<crate::bukkit::DyeColor<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Byte(arg0.into());
        let cls = &jni.find_class("org/bukkit/DyeColor")?;
        let res = jni.call_static_method(
            cls,
            "getByDyeData",
            "(B)Lorg/bukkit/DyeColor;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::DyeColor(
                jni,
                raw_obj,
                crate::bukkit::DyeColor::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn firework_color(
        &mut self,
    ) -> Result<crate::bukkit::Color<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getFireworkColor",
            "()Lorg/bukkit/Color;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Color(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_by_color(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::Color<'mc>,
    ) -> Result<crate::bukkit::DyeColor<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/DyeColor")?;
        let res = jni.call_static_method(
            cls,
            "getByColor",
            "(Lorg/bukkit/Color;)Lorg/bukkit/DyeColor;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::DyeColor(
                jni,
                raw_obj,
                crate::bukkit::DyeColor::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn get_by_firework_color(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::Color<'mc>,
    ) -> Result<crate::bukkit::DyeColor<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/DyeColor")?;
        let res = jni.call_static_method(
            cls,
            "getByFireworkColor",
            "(Lorg/bukkit/Color;)Lorg/bukkit/DyeColor;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::DyeColor(
                jni,
                raw_obj,
                crate::bukkit::DyeColor::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub struct VibrationDestinationBlockDestination<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for VibrationDestinationBlockDestination<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> VibrationDestinationBlockDestination<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate VibrationDestinationBlockDestination from null object."
            )
            .into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("VibrationDestinationBlockDestination") {
            Err(eyre::eyre!(
        "Invalid argument passed. Expected a VibrationDestinationBlockDestination object, got {}",
        name
    )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn location(&mut self) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getLocation",
            "()Lorg/bukkit/Location;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Location(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn block(
        &mut self,
    ) -> Result<crate::bukkit::block::Block<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlock",
            "()Lorg/bukkit/block/Block;",
            &[],
        )?;
        let ret = {
            crate::bukkit::block::Block(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub enum GameModeEnum {
    Creative,
    Survival,
    Adventure,
    Spectator,
}
impl std::fmt::Display for GameModeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            GameModeEnum::Creative => f.write_str("CREATIVE"),
            GameModeEnum::Survival => f.write_str("SURVIVAL"),
            GameModeEnum::Adventure => f.write_str("ADVENTURE"),
            GameModeEnum::Spectator => f.write_str("SPECTATOR"),
        }
    }
}
pub struct GameMode<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub GameModeEnum,
);
impl<'mc> std::ops::Deref for GameMode<'mc> {
    type Target = GameModeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for GameMode<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> GameMode<'mc> {
    pub const CREATIVE: GameModeEnum = GameModeEnum::Creative;
    pub const SURVIVAL: GameModeEnum = GameModeEnum::Survival;
    pub const ADVENTURE: GameModeEnum = GameModeEnum::Adventure;
    pub const SPECTATOR: GameModeEnum = GameModeEnum::Spectator;
    pub fn from_string(str: String) -> std::option::Option<GameModeEnum> {
        match str.as_str() {
            "CREATIVE" => Some(GameModeEnum::Creative),
            "SURVIVAL" => Some(GameModeEnum::Survival),
            "ADVENTURE" => Some(GameModeEnum::Adventure),
            "SPECTATOR" => Some(GameModeEnum::Spectator),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::GameMode<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/GameMode")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/GameMode;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::GameMode(
                jni,
                raw_obj,
                crate::bukkit::GameMode::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn value(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getValue", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn get_by_value(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<crate::bukkit::GameMode<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let cls = &jni.find_class("org/bukkit/GameMode")?;
        let res = jni.call_static_method(
            cls,
            "getByValue",
            "(I)Lorg/bukkit/GameMode;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::GameMode(
                jni,
                raw_obj,
                crate::bukkit::GameMode::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
/// An instantiatable struct that implements VibrationDestination. Needed for returning it from Java.
pub struct VibrationDestination<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> VibrationDestination<'mc> {}
impl<'mc> crate::JNIRaw<'mc> for VibrationDestination<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct Note<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
pub struct NoteTone<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for NoteTone<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> NoteTone<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate NoteTone from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("NoteTone") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a NoteTone object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn id(&mut self) -> Result<i8, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getId", "()B", &[])?;
        Ok(res.b().unwrap())
    }
    pub fn is_sharped(&mut self, arg0: i8) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Byte(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isSharped",
            "(B)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn get_by_id(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i8,
    ) -> Result<crate::bukkit::NoteTone<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Byte(arg0.into());
        let cls = &jni.find_class("org/bukkit/Note$Tone")?;
        let res = jni.call_static_method(
            cls,
            "getById",
            "(B)Lorg/bukkit/Note$Tone;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::NoteTone(jni, obj)
        };
        Ok(ret)
    }
    pub fn is_sharpable(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isSharpable", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "name", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn describe_constable(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "describeConstable",
            "()Ljava/util/Optional;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn declaring_class(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDeclaringClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn ordinal(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "ordinal", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
impl<'mc> crate::JNIRaw<'mc> for Note<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Note<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Note from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Note") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Note object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn id(&mut self) -> Result<i8, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getId", "()B", &[])?;
        Ok(res.b().unwrap())
    }
    pub fn is_sharped(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isSharped", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn sharped(&mut self) -> Result<crate::bukkit::Note<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "sharped",
            "()Lorg/bukkit/Note;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Note(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn flat(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
        arg1: crate::bukkit::NoteTone<'mc>,
    ) -> Result<crate::bukkit::Note<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let cls = &jni.find_class("org/bukkit/Note")?;
        let res = jni.call_static_method(
            cls,
            "flat",
            "(ILorg/bukkit/Note$Tone;)Lorg/bukkit/Note;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::Note(jni, obj)
        };
        Ok(ret)
    }
    pub fn sharp(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
        arg1: crate::bukkit::NoteTone<'mc>,
    ) -> Result<crate::bukkit::Note<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let cls = &jni.find_class("org/bukkit/Note")?;
        let res = jni.call_static_method(
            cls,
            "sharp",
            "(ILorg/bukkit/Note$Tone;)Lorg/bukkit/Note;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::Note(jni, obj)
        };
        Ok(ret)
    }
    pub fn natural(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
        arg1: crate::bukkit::NoteTone<'mc>,
    ) -> Result<crate::bukkit::Note<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let cls = &jni.find_class("org/bukkit/Note")?;
        let res = jni.call_static_method(
            cls,
            "natural",
            "(ILorg/bukkit/Note$Tone;)Lorg/bukkit/Note;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::Note(jni, obj)
        };
        Ok(ret)
    }
    pub fn flattened(&mut self) -> Result<crate::bukkit::Note<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "flattened",
            "()Lorg/bukkit/Note;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Note(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn octave(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getOctave", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn tone(&mut self) -> Result<crate::bukkit::NoteTone<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTone",
            "()Lorg/bukkit/Note$Tone;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NoteTone(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub enum EffectEnum {
    Click2,
    Click1,
    BowFire,
    DoorToggle,
    IronDoorToggle,
    TrapdoorToggle,
    IronTrapdoorToggle,
    FenceGateToggle,
    DoorClose,
    IronDoorClose,
    TrapdoorClose,
    IronTrapdoorClose,
    FenceGateClose,
    Extinguish,
    RecordPlay,
    GhastShriek,
    GhastShoot,
    BlazeShoot,
    ZombieChewWoodenDoor,
    ZombieChewIronDoor,
    ZombieDestroyDoor,
    Smoke,
    StepSound,
    PotionBreak,
    InstantPotionBreak,
    EnderSignal,
    MobspawnerFlames,
    BrewingStandBrew,
    ChorusFlowerGrow,
    ChorusFlowerDeath,
    PortalTravel,
    EndereyeLaunch,
    FireworkShoot,
    VillagerPlantGrow,
    DragonBreath,
    AnvilBreak,
    AnvilUse,
    AnvilLand,
    EnderdragonShoot,
    WitherBreakBlock,
    WitherShoot,
    ZombieInfect,
    ZombieConvertedVillager,
    BatTakeoff,
    EndGatewaySpawn,
    EnderdragonGrowl,
    PhantomBite,
    ZombieConvertedToDrowned,
    HuskConvertedToZombie,
    GrindstoneUse,
    BookPageTurn,
    SmithingTableUse,
    PointedDripstoneLand,
    PointedDripstoneDripLavaIntoCauldron,
    PointedDripstoneDripWaterIntoCauldron,
    SkeletonConvertedToStray,
    ComposterFillAttempt,
    LavaInteract,
    RedstoneTorchBurnout,
    EndPortalFrameFill,
    DrippingDripstone,
    BoneMealUse,
    EnderDragonDestroyBlock,
    SpongeDry,
    ElectricSpark,
    CopperWaxOn,
    CopperWaxOff,
    OxidisedCopperScrape,
}
impl std::fmt::Display for EffectEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            EffectEnum::Click2 => f.write_str("CLICK2"),
            EffectEnum::Click1 => f.write_str("CLICK1"),
            EffectEnum::BowFire => f.write_str("BOW_FIRE"),
            EffectEnum::DoorToggle => f.write_str("DOOR_TOGGLE"),
            EffectEnum::IronDoorToggle => f.write_str("IRON_DOOR_TOGGLE"),
            EffectEnum::TrapdoorToggle => f.write_str("TRAPDOOR_TOGGLE"),
            EffectEnum::IronTrapdoorToggle => f.write_str("IRON_TRAPDOOR_TOGGLE"),
            EffectEnum::FenceGateToggle => f.write_str("FENCE_GATE_TOGGLE"),
            EffectEnum::DoorClose => f.write_str("DOOR_CLOSE"),
            EffectEnum::IronDoorClose => f.write_str("IRON_DOOR_CLOSE"),
            EffectEnum::TrapdoorClose => f.write_str("TRAPDOOR_CLOSE"),
            EffectEnum::IronTrapdoorClose => f.write_str("IRON_TRAPDOOR_CLOSE"),
            EffectEnum::FenceGateClose => f.write_str("FENCE_GATE_CLOSE"),
            EffectEnum::Extinguish => f.write_str("EXTINGUISH"),
            EffectEnum::RecordPlay => f.write_str("RECORD_PLAY"),
            EffectEnum::GhastShriek => f.write_str("GHAST_SHRIEK"),
            EffectEnum::GhastShoot => f.write_str("GHAST_SHOOT"),
            EffectEnum::BlazeShoot => f.write_str("BLAZE_SHOOT"),
            EffectEnum::ZombieChewWoodenDoor => f.write_str("ZOMBIE_CHEW_WOODEN_DOOR"),
            EffectEnum::ZombieChewIronDoor => f.write_str("ZOMBIE_CHEW_IRON_DOOR"),
            EffectEnum::ZombieDestroyDoor => f.write_str("ZOMBIE_DESTROY_DOOR"),
            EffectEnum::Smoke => f.write_str("SMOKE"),
            EffectEnum::StepSound => f.write_str("STEP_SOUND"),
            EffectEnum::PotionBreak => f.write_str("POTION_BREAK"),
            EffectEnum::InstantPotionBreak => f.write_str("INSTANT_POTION_BREAK"),
            EffectEnum::EnderSignal => f.write_str("ENDER_SIGNAL"),
            EffectEnum::MobspawnerFlames => f.write_str("MOBSPAWNER_FLAMES"),
            EffectEnum::BrewingStandBrew => f.write_str("BREWING_STAND_BREW"),
            EffectEnum::ChorusFlowerGrow => f.write_str("CHORUS_FLOWER_GROW"),
            EffectEnum::ChorusFlowerDeath => f.write_str("CHORUS_FLOWER_DEATH"),
            EffectEnum::PortalTravel => f.write_str("PORTAL_TRAVEL"),
            EffectEnum::EndereyeLaunch => f.write_str("ENDEREYE_LAUNCH"),
            EffectEnum::FireworkShoot => f.write_str("FIREWORK_SHOOT"),
            EffectEnum::VillagerPlantGrow => f.write_str("VILLAGER_PLANT_GROW"),
            EffectEnum::DragonBreath => f.write_str("DRAGON_BREATH"),
            EffectEnum::AnvilBreak => f.write_str("ANVIL_BREAK"),
            EffectEnum::AnvilUse => f.write_str("ANVIL_USE"),
            EffectEnum::AnvilLand => f.write_str("ANVIL_LAND"),
            EffectEnum::EnderdragonShoot => f.write_str("ENDERDRAGON_SHOOT"),
            EffectEnum::WitherBreakBlock => f.write_str("WITHER_BREAK_BLOCK"),
            EffectEnum::WitherShoot => f.write_str("WITHER_SHOOT"),
            EffectEnum::ZombieInfect => f.write_str("ZOMBIE_INFECT"),
            EffectEnum::ZombieConvertedVillager => f.write_str("ZOMBIE_CONVERTED_VILLAGER"),
            EffectEnum::BatTakeoff => f.write_str("BAT_TAKEOFF"),
            EffectEnum::EndGatewaySpawn => f.write_str("END_GATEWAY_SPAWN"),
            EffectEnum::EnderdragonGrowl => f.write_str("ENDERDRAGON_GROWL"),
            EffectEnum::PhantomBite => f.write_str("PHANTOM_BITE"),
            EffectEnum::ZombieConvertedToDrowned => f.write_str("ZOMBIE_CONVERTED_TO_DROWNED"),
            EffectEnum::HuskConvertedToZombie => f.write_str("HUSK_CONVERTED_TO_ZOMBIE"),
            EffectEnum::GrindstoneUse => f.write_str("GRINDSTONE_USE"),
            EffectEnum::BookPageTurn => f.write_str("BOOK_PAGE_TURN"),
            EffectEnum::SmithingTableUse => f.write_str("SMITHING_TABLE_USE"),
            EffectEnum::PointedDripstoneLand => f.write_str("POINTED_DRIPSTONE_LAND"),
            EffectEnum::PointedDripstoneDripLavaIntoCauldron => {
                f.write_str("POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON")
            }
            EffectEnum::PointedDripstoneDripWaterIntoCauldron => {
                f.write_str("POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON")
            }
            EffectEnum::SkeletonConvertedToStray => f.write_str("SKELETON_CONVERTED_TO_STRAY"),
            EffectEnum::ComposterFillAttempt => f.write_str("COMPOSTER_FILL_ATTEMPT"),
            EffectEnum::LavaInteract => f.write_str("LAVA_INTERACT"),
            EffectEnum::RedstoneTorchBurnout => f.write_str("REDSTONE_TORCH_BURNOUT"),
            EffectEnum::EndPortalFrameFill => f.write_str("END_PORTAL_FRAME_FILL"),
            EffectEnum::DrippingDripstone => f.write_str("DRIPPING_DRIPSTONE"),
            EffectEnum::BoneMealUse => f.write_str("BONE_MEAL_USE"),
            EffectEnum::EnderDragonDestroyBlock => f.write_str("ENDER_DRAGON_DESTROY_BLOCK"),
            EffectEnum::SpongeDry => f.write_str("SPONGE_DRY"),
            EffectEnum::ElectricSpark => f.write_str("ELECTRIC_SPARK"),
            EffectEnum::CopperWaxOn => f.write_str("COPPER_WAX_ON"),
            EffectEnum::CopperWaxOff => f.write_str("COPPER_WAX_OFF"),
            EffectEnum::OxidisedCopperScrape => f.write_str("OXIDISED_COPPER_SCRAPE"),
        }
    }
}
pub struct Effect<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub EffectEnum,
);
impl<'mc> std::ops::Deref for Effect<'mc> {
    type Target = EffectEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for Effect<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct EffectType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for EffectType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> EffectType<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate EffectType from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("EffectType") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a EffectType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "name", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn describe_constable(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "describeConstable",
            "()Ljava/util/Optional;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn declaring_class(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDeclaringClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn ordinal(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "ordinal", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
impl<'mc> Effect<'mc> {
    pub const CLICK2: EffectEnum = EffectEnum::Click2;
    pub const CLICK1: EffectEnum = EffectEnum::Click1;
    pub const BOWFIRE: EffectEnum = EffectEnum::BowFire;
    pub const DOORTOGGLE: EffectEnum = EffectEnum::DoorToggle;
    pub const IRONDOORTOGGLE: EffectEnum = EffectEnum::IronDoorToggle;
    pub const TRAPDOORTOGGLE: EffectEnum = EffectEnum::TrapdoorToggle;
    pub const IRONTRAPDOORTOGGLE: EffectEnum = EffectEnum::IronTrapdoorToggle;
    pub const FENCEGATETOGGLE: EffectEnum = EffectEnum::FenceGateToggle;
    pub const DOORCLOSE: EffectEnum = EffectEnum::DoorClose;
    pub const IRONDOORCLOSE: EffectEnum = EffectEnum::IronDoorClose;
    pub const TRAPDOORCLOSE: EffectEnum = EffectEnum::TrapdoorClose;
    pub const IRONTRAPDOORCLOSE: EffectEnum = EffectEnum::IronTrapdoorClose;
    pub const FENCEGATECLOSE: EffectEnum = EffectEnum::FenceGateClose;
    pub const EXTINGUISH: EffectEnum = EffectEnum::Extinguish;
    pub const RECORDPLAY: EffectEnum = EffectEnum::RecordPlay;
    pub const GHASTSHRIEK: EffectEnum = EffectEnum::GhastShriek;
    pub const GHASTSHOOT: EffectEnum = EffectEnum::GhastShoot;
    pub const BLAZESHOOT: EffectEnum = EffectEnum::BlazeShoot;
    pub const ZOMBIECHEWWOODENDOOR: EffectEnum = EffectEnum::ZombieChewWoodenDoor;
    pub const ZOMBIECHEWIRONDOOR: EffectEnum = EffectEnum::ZombieChewIronDoor;
    pub const ZOMBIEDESTROYDOOR: EffectEnum = EffectEnum::ZombieDestroyDoor;
    pub const SMOKE: EffectEnum = EffectEnum::Smoke;
    pub const STEPSOUND: EffectEnum = EffectEnum::StepSound;
    pub const POTIONBREAK: EffectEnum = EffectEnum::PotionBreak;
    pub const INSTANTPOTIONBREAK: EffectEnum = EffectEnum::InstantPotionBreak;
    pub const ENDERSIGNAL: EffectEnum = EffectEnum::EnderSignal;
    pub const MOBSPAWNERFLAMES: EffectEnum = EffectEnum::MobspawnerFlames;
    pub const BREWINGSTANDBREW: EffectEnum = EffectEnum::BrewingStandBrew;
    pub const CHORUSFLOWERGROW: EffectEnum = EffectEnum::ChorusFlowerGrow;
    pub const CHORUSFLOWERDEATH: EffectEnum = EffectEnum::ChorusFlowerDeath;
    pub const PORTALTRAVEL: EffectEnum = EffectEnum::PortalTravel;
    pub const ENDEREYELAUNCH: EffectEnum = EffectEnum::EndereyeLaunch;
    pub const FIREWORKSHOOT: EffectEnum = EffectEnum::FireworkShoot;
    pub const VILLAGERPLANTGROW: EffectEnum = EffectEnum::VillagerPlantGrow;
    pub const DRAGONBREATH: EffectEnum = EffectEnum::DragonBreath;
    pub const ANVILBREAK: EffectEnum = EffectEnum::AnvilBreak;
    pub const ANVILUSE: EffectEnum = EffectEnum::AnvilUse;
    pub const ANVILLAND: EffectEnum = EffectEnum::AnvilLand;
    pub const ENDERDRAGONSHOOT: EffectEnum = EffectEnum::EnderdragonShoot;
    pub const WITHERBREAKBLOCK: EffectEnum = EffectEnum::WitherBreakBlock;
    pub const WITHERSHOOT: EffectEnum = EffectEnum::WitherShoot;
    pub const ZOMBIEINFECT: EffectEnum = EffectEnum::ZombieInfect;
    pub const ZOMBIECONVERTEDVILLAGER: EffectEnum = EffectEnum::ZombieConvertedVillager;
    pub const BATTAKEOFF: EffectEnum = EffectEnum::BatTakeoff;
    pub const ENDGATEWAYSPAWN: EffectEnum = EffectEnum::EndGatewaySpawn;
    pub const ENDERDRAGONGROWL: EffectEnum = EffectEnum::EnderdragonGrowl;
    pub const PHANTOMBITE: EffectEnum = EffectEnum::PhantomBite;
    pub const ZOMBIECONVERTEDTODROWNED: EffectEnum = EffectEnum::ZombieConvertedToDrowned;
    pub const HUSKCONVERTEDTOZOMBIE: EffectEnum = EffectEnum::HuskConvertedToZombie;
    pub const GRINDSTONEUSE: EffectEnum = EffectEnum::GrindstoneUse;
    pub const BOOKPAGETURN: EffectEnum = EffectEnum::BookPageTurn;
    pub const SMITHINGTABLEUSE: EffectEnum = EffectEnum::SmithingTableUse;
    pub const POINTEDDRIPSTONELAND: EffectEnum = EffectEnum::PointedDripstoneLand;
    pub const POINTEDDRIPSTONEDRIPLAVAINTOCAULDRON: EffectEnum =
        EffectEnum::PointedDripstoneDripLavaIntoCauldron;
    pub const POINTEDDRIPSTONEDRIPWATERINTOCAULDRON: EffectEnum =
        EffectEnum::PointedDripstoneDripWaterIntoCauldron;
    pub const SKELETONCONVERTEDTOSTRAY: EffectEnum = EffectEnum::SkeletonConvertedToStray;
    pub const COMPOSTERFILLATTEMPT: EffectEnum = EffectEnum::ComposterFillAttempt;
    pub const LAVAINTERACT: EffectEnum = EffectEnum::LavaInteract;
    pub const REDSTONETORCHBURNOUT: EffectEnum = EffectEnum::RedstoneTorchBurnout;
    pub const ENDPORTALFRAMEFILL: EffectEnum = EffectEnum::EndPortalFrameFill;
    pub const DRIPPINGDRIPSTONE: EffectEnum = EffectEnum::DrippingDripstone;
    pub const BONEMEALUSE: EffectEnum = EffectEnum::BoneMealUse;
    pub const ENDERDRAGONDESTROYBLOCK: EffectEnum = EffectEnum::EnderDragonDestroyBlock;
    pub const SPONGEDRY: EffectEnum = EffectEnum::SpongeDry;
    pub const ELECTRICSPARK: EffectEnum = EffectEnum::ElectricSpark;
    pub const COPPERWAXON: EffectEnum = EffectEnum::CopperWaxOn;
    pub const COPPERWAXOFF: EffectEnum = EffectEnum::CopperWaxOff;
    pub const OXIDISEDCOPPERSCRAPE: EffectEnum = EffectEnum::OxidisedCopperScrape;
    pub fn from_string(str: String) -> std::option::Option<EffectEnum> {
        match str.as_str() {
            "CLICK2" => Some(EffectEnum::Click2),
            "CLICK1" => Some(EffectEnum::Click1),
            "BOW_FIRE" => Some(EffectEnum::BowFire),
            "DOOR_TOGGLE" => Some(EffectEnum::DoorToggle),
            "IRON_DOOR_TOGGLE" => Some(EffectEnum::IronDoorToggle),
            "TRAPDOOR_TOGGLE" => Some(EffectEnum::TrapdoorToggle),
            "IRON_TRAPDOOR_TOGGLE" => Some(EffectEnum::IronTrapdoorToggle),
            "FENCE_GATE_TOGGLE" => Some(EffectEnum::FenceGateToggle),
            "DOOR_CLOSE" => Some(EffectEnum::DoorClose),
            "IRON_DOOR_CLOSE" => Some(EffectEnum::IronDoorClose),
            "TRAPDOOR_CLOSE" => Some(EffectEnum::TrapdoorClose),
            "IRON_TRAPDOOR_CLOSE" => Some(EffectEnum::IronTrapdoorClose),
            "FENCE_GATE_CLOSE" => Some(EffectEnum::FenceGateClose),
            "EXTINGUISH" => Some(EffectEnum::Extinguish),
            "RECORD_PLAY" => Some(EffectEnum::RecordPlay),
            "GHAST_SHRIEK" => Some(EffectEnum::GhastShriek),
            "GHAST_SHOOT" => Some(EffectEnum::GhastShoot),
            "BLAZE_SHOOT" => Some(EffectEnum::BlazeShoot),
            "ZOMBIE_CHEW_WOODEN_DOOR" => Some(EffectEnum::ZombieChewWoodenDoor),
            "ZOMBIE_CHEW_IRON_DOOR" => Some(EffectEnum::ZombieChewIronDoor),
            "ZOMBIE_DESTROY_DOOR" => Some(EffectEnum::ZombieDestroyDoor),
            "SMOKE" => Some(EffectEnum::Smoke),
            "STEP_SOUND" => Some(EffectEnum::StepSound),
            "POTION_BREAK" => Some(EffectEnum::PotionBreak),
            "INSTANT_POTION_BREAK" => Some(EffectEnum::InstantPotionBreak),
            "ENDER_SIGNAL" => Some(EffectEnum::EnderSignal),
            "MOBSPAWNER_FLAMES" => Some(EffectEnum::MobspawnerFlames),
            "BREWING_STAND_BREW" => Some(EffectEnum::BrewingStandBrew),
            "CHORUS_FLOWER_GROW" => Some(EffectEnum::ChorusFlowerGrow),
            "CHORUS_FLOWER_DEATH" => Some(EffectEnum::ChorusFlowerDeath),
            "PORTAL_TRAVEL" => Some(EffectEnum::PortalTravel),
            "ENDEREYE_LAUNCH" => Some(EffectEnum::EndereyeLaunch),
            "FIREWORK_SHOOT" => Some(EffectEnum::FireworkShoot),
            "VILLAGER_PLANT_GROW" => Some(EffectEnum::VillagerPlantGrow),
            "DRAGON_BREATH" => Some(EffectEnum::DragonBreath),
            "ANVIL_BREAK" => Some(EffectEnum::AnvilBreak),
            "ANVIL_USE" => Some(EffectEnum::AnvilUse),
            "ANVIL_LAND" => Some(EffectEnum::AnvilLand),
            "ENDERDRAGON_SHOOT" => Some(EffectEnum::EnderdragonShoot),
            "WITHER_BREAK_BLOCK" => Some(EffectEnum::WitherBreakBlock),
            "WITHER_SHOOT" => Some(EffectEnum::WitherShoot),
            "ZOMBIE_INFECT" => Some(EffectEnum::ZombieInfect),
            "ZOMBIE_CONVERTED_VILLAGER" => Some(EffectEnum::ZombieConvertedVillager),
            "BAT_TAKEOFF" => Some(EffectEnum::BatTakeoff),
            "END_GATEWAY_SPAWN" => Some(EffectEnum::EndGatewaySpawn),
            "ENDERDRAGON_GROWL" => Some(EffectEnum::EnderdragonGrowl),
            "PHANTOM_BITE" => Some(EffectEnum::PhantomBite),
            "ZOMBIE_CONVERTED_TO_DROWNED" => Some(EffectEnum::ZombieConvertedToDrowned),
            "HUSK_CONVERTED_TO_ZOMBIE" => Some(EffectEnum::HuskConvertedToZombie),
            "GRINDSTONE_USE" => Some(EffectEnum::GrindstoneUse),
            "BOOK_PAGE_TURN" => Some(EffectEnum::BookPageTurn),
            "SMITHING_TABLE_USE" => Some(EffectEnum::SmithingTableUse),
            "POINTED_DRIPSTONE_LAND" => Some(EffectEnum::PointedDripstoneLand),
            "POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON" => {
                Some(EffectEnum::PointedDripstoneDripLavaIntoCauldron)
            }
            "POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON" => {
                Some(EffectEnum::PointedDripstoneDripWaterIntoCauldron)
            }
            "SKELETON_CONVERTED_TO_STRAY" => Some(EffectEnum::SkeletonConvertedToStray),
            "COMPOSTER_FILL_ATTEMPT" => Some(EffectEnum::ComposterFillAttempt),
            "LAVA_INTERACT" => Some(EffectEnum::LavaInteract),
            "REDSTONE_TORCH_BURNOUT" => Some(EffectEnum::RedstoneTorchBurnout),
            "END_PORTAL_FRAME_FILL" => Some(EffectEnum::EndPortalFrameFill),
            "DRIPPING_DRIPSTONE" => Some(EffectEnum::DrippingDripstone),
            "BONE_MEAL_USE" => Some(EffectEnum::BoneMealUse),
            "ENDER_DRAGON_DESTROY_BLOCK" => Some(EffectEnum::EnderDragonDestroyBlock),
            "SPONGE_DRY" => Some(EffectEnum::SpongeDry),
            "ELECTRIC_SPARK" => Some(EffectEnum::ElectricSpark),
            "COPPER_WAX_ON" => Some(EffectEnum::CopperWaxOn),
            "COPPER_WAX_OFF" => Some(EffectEnum::CopperWaxOff),
            "OXIDISED_COPPER_SCRAPE" => Some(EffectEnum::OxidisedCopperScrape),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Effect<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Effect")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Effect;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Effect(
                jni,
                raw_obj,
                crate::bukkit::Effect::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn id(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getId", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn get_type(
        &mut self,
    ) -> Result<crate::bukkit::EffectType<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getType",
            "()Lorg/bukkit/Effect$Type;",
            &[],
        )?;
        let ret = {
            crate::bukkit::EffectType(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn data(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getData",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn get_by_id(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<crate::bukkit::Effect<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let cls = &jni.find_class("org/bukkit/Effect")?;
        let res = jni.call_static_method(
            cls,
            "getById",
            "(I)Lorg/bukkit/Effect;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Effect(
                jni,
                raw_obj,
                crate::bukkit::Effect::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
/// An instantiatable struct that implements BanEntry. Needed for returning it from Java.
pub struct BanEntry<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> BanEntry<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate BanEntry from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("BanEntry") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a BanEntry object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn reason(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getReason",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn expiration(&mut self) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getExpiration",
            "()Ljava/util/Date;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn remove(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "remove", "()V", &[])?;
        Ok(())
    }
    pub fn save(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "save", "()V", &[])?;
        Ok(())
    }
    pub fn target(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTarget",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn source(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getSource",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn ban_target(&mut self) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBanTarget",
            "()Ljava/lang/Object;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn created(&mut self) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getCreated",
            "()Ljava/util/Date;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn set_created(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = arg0;
        self.jni_ref().call_method(
            &self.jni_object(),
            "setCreated",
            "(Ljava/util/Date;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_source(&mut self, arg0: String) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setSource",
            "(Ljava/lang/String;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_expiration(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = arg0;
        self.jni_ref().call_method(
            &self.jni_object(),
            "setExpiration",
            "(Ljava/util/Date;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn set_reason(&mut self, arg0: String) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setReason",
            "(Ljava/lang/String;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
}
impl<'mc> crate::JNIRaw<'mc> for BanEntry<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct Bukkit<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for Bukkit<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Bukkit<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Bukkit from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Bukkit") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Bukkit object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn reload(mut jni: crate::SharedJNIEnv<'mc>) -> Result<(), Box<dyn std::error::Error>> {
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(cls, "reload", "()V", &[])?;
        Ok(())
    }
    pub fn version(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(cls, "getVersion", "()Ljava/lang/String;", &[])?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn get_map(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<crate::bukkit::map::MapView<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let cls = &jni.find_class("org/bukkit/map/MapView")?;
        let res = jni.call_static_method(
            cls,
            "getMap",
            "(I)Lorg/bukkit/map/MapView;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::map::MapView(jni, obj)
        };
        Ok(ret)
    }
    pub fn create_map(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::World<'mc>,
    ) -> Result<crate::bukkit::map::MapView<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/map/MapView")?;
        let res = jni.call_static_method(
            cls,
            "createMap",
            "(Lorg/bukkit/World;)Lorg/bukkit/map/MapView;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::map::MapView(jni, obj)
        };
        Ok(ret)
    }
    pub fn name(mut jni: crate::SharedJNIEnv<'mc>) -> Result<String, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn shutdown(mut jni: crate::SharedJNIEnv<'mc>) -> Result<(), Box<dyn std::error::Error>> {
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(cls, "shutdown", "()V", &[])?;
        Ok(())
    }
    pub fn get_unsafe(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::UnsafeValues<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/UnsafeValues")?;
        let res = jni.call_static_method(cls, "getUnsafe", "()Lorg/bukkit/UnsafeValues;", &[])?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::UnsafeValues(jni, obj)
        };
        Ok(ret)
    }
    pub fn logger(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/util/logging/Logger")?;
        let res = jni.call_static_method(cls, "getLogger", "()Ljava/util/logging/Logger;", &[])?;
        Ok(res.l().unwrap())
    }
    pub fn port(mut jni: crate::SharedJNIEnv<'mc>) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getPort", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn broadcast(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
        arg1: String,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let val_1 = jni::objects::JObject::from(jni.new_string(arg1).unwrap());
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(
            cls,
            "broadcast",
            "(Ljava/lang/String;Ljava/lang/String;)I",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn get_tag(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
        arg1: crate::bukkit::NamespacedKey<'mc>,
        arg2: jni::objects::JClass<'mc>,
    ) -> Result<crate::bukkit::Tag<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let val_2 = arg2;
        let cls = &jni.find_class("org/bukkit/Tag")?;
        let res = jni.call_static_method(
            cls,
            "getTag",
            "(Ljava/lang/String;Lorg/bukkit/NamespacedKey;Ljava/lang/Class;)Lorg/bukkit/Tag;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::Tag(jni, obj)
        };
        Ok(ret)
    }
    pub fn server(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::Server<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/Server")?;
        let res = jni.call_static_method(cls, "getServer", "()Lorg/bukkit/Server;", &[])?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::Server(jni, obj)
        };
        Ok(ret)
    }
    pub fn spigot(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::ServerSpigot<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/Server$Spigot")?;
        let res = jni.call_static_method(cls, "spigot", "()Lorg/bukkit/Server$Spigot;", &[])?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::ServerSpigot(jni, obj)
        };
        Ok(ret)
    }
    pub fn get_loot_table(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::loot::LootTable<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/loot/LootTable")?;
        let res = jni.call_static_method(
            cls,
            "getLootTable",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/loot/LootTable;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::loot::LootTable(jni, obj)
        };
        Ok(ret)
    }
    pub fn get_recipe(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::inventory::Recipe<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/inventory/Recipe")?;
        let res = jni.call_static_method(
            cls,
            "getRecipe",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/inventory/Recipe;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::inventory::Recipe(jni, obj)
        };
        Ok(ret)
    }
    pub fn get_boss_bar(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::boss::KeyedBossBar<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/boss/KeyedBossBar")?;
        let res = jni.call_static_method(
            cls,
            "getBossBar",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/boss/KeyedBossBar;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::boss::KeyedBossBar(jni, obj)
        };
        Ok(ret)
    }
    pub fn create_chunk_data(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::World<'mc>,
    ) -> Result<crate::bukkit::generator::ChunkGeneratorChunkData<'mc>, Box<dyn std::error::Error>>
    {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/generator/ChunkGenerator$ChunkData")?;
        let res = jni.call_static_method(
            cls,
            "createChunkData",
            "(Lorg/bukkit/World;)Lorg/bukkit/generator/ChunkGenerator$ChunkData;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::generator::ChunkGeneratorChunkData(jni, obj)
        };
        Ok(ret)
    }
    pub fn plugin_manager(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::plugin::PluginManager<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/plugin/PluginManager")?;
        let res = jni.call_static_method(
            cls,
            "getPluginManager",
            "()Lorg/bukkit/plugin/PluginManager;",
            &[],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::plugin::PluginManager(jni, obj)
        };
        Ok(ret)
    }
    pub fn item_factory(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::inventory::ItemFactory<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/inventory/ItemFactory")?;
        let res = jni.call_static_method(
            cls,
            "getItemFactory",
            "()Lorg/bukkit/inventory/ItemFactory;",
            &[],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::inventory::ItemFactory(jni, obj)
        };
        Ok(ret)
    }
    pub fn bukkit_version(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(cls, "getBukkitVersion", "()Ljava/lang/String;", &[])?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn max_players(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getMaxPlayers", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_max_players(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(
            cls,
            "setMaxPlayers",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn view_distance(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getViewDistance", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn simulation_distance(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getSimulationDistance", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn ip(mut jni: crate::SharedJNIEnv<'mc>) -> Result<String, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(cls, "getIp", "()Ljava/lang/String;", &[])?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn world_type(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(cls, "getWorldType", "()Ljava/lang/String;", &[])?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn generate_structures(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "getGenerateStructures", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn max_world_size(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getMaxWorldSize", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn allow_end(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "getAllowEnd", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn allow_nether(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "getAllowNether", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn data_pack_manager(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::packs::DataPackManager<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/packs/DataPackManager")?;
        let res = jni.call_static_method(
            cls,
            "getDataPackManager",
            "()Lorg/bukkit/packs/DataPackManager;",
            &[],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::packs::DataPackManager(jni, obj)
        };
        Ok(ret)
    }
    pub fn resource_pack(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(cls, "getResourcePack", "()Ljava/lang/String;", &[])?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn resource_pack_hash(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/lang/String")?;
        let res =
            jni.call_static_method(cls, "getResourcePackHash", "()Ljava/lang/String;", &[])?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn resource_pack_prompt(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/lang/String")?;
        let res =
            jni.call_static_method(cls, "getResourcePackPrompt", "()Ljava/lang/String;", &[])?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn is_resource_pack_required(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "isResourcePackRequired", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn has_whitelist(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "hasWhitelist", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_whitelist(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: bool,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(
            cls,
            "setWhitelist",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn is_whitelist_enforced(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "isWhitelistEnforced", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_whitelist_enforced(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: bool,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(
            cls,
            "setWhitelistEnforced",
            "(Z)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn reload_whitelist(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(cls, "reloadWhitelist", "()V", &[])?;
        Ok(())
    }
    pub fn broadcast_message(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(
            cls,
            "broadcastMessage",
            "(Ljava/lang/String;)I",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn update_folder(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(cls, "getUpdateFolder", "()Ljava/lang/String;", &[])?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn connection_throttle(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i64, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("long")?;
        let res = jni.call_static_method(cls, "getConnectionThrottle", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn ticks_per_animal_spawns(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getTicksPerAnimalSpawns", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn ticks_per_monster_spawns(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getTicksPerMonsterSpawns", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn ticks_per_water_spawns(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getTicksPerWaterSpawns", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn ticks_per_water_ambient_spawns(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getTicksPerWaterAmbientSpawns", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn ticks_per_water_underground_creature_spawns(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res =
            jni.call_static_method(cls, "getTicksPerWaterUndergroundCreatureSpawns", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn ticks_per_ambient_spawns(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getTicksPerAmbientSpawns", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn get_ticks_per_spawns(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::entity::SpawnCategory<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(
            cls,
            "getTicksPerSpawns",
            "(Lorg/bukkit/entity/SpawnCategory;)I",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn get_player_exact(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::entity::Player<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/entity/Player")?;
        let res = jni.call_static_method(
            cls,
            "getPlayerExact",
            "(Ljava/lang/String;)Lorg/bukkit/entity/Player;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::entity::Player(jni, obj)
        };
        Ok(ret)
    }
    pub fn scheduler(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::scheduler::BukkitScheduler<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/scheduler/BukkitScheduler")?;
        let res = jni.call_static_method(
            cls,
            "getScheduler",
            "()Lorg/bukkit/scheduler/BukkitScheduler;",
            &[],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::scheduler::BukkitScheduler(jni, obj)
        };
        Ok(ret)
    }
    pub fn services_manager(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::plugin::ServicesManager<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/plugin/ServicesManager")?;
        let res = jni.call_static_method(
            cls,
            "getServicesManager",
            "()Lorg/bukkit/plugin/ServicesManager;",
            &[],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::plugin::ServicesManager(jni, obj)
        };
        Ok(ret)
    }
    pub fn create_world(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::WorldCreator<'mc>,
    ) -> Result<crate::bukkit::World<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/World")?;
        let res = jni.call_static_method(
            cls,
            "createWorld",
            "(Lorg/bukkit/WorldCreator;)Lorg/bukkit/World;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::World(jni, obj)
        };
        Ok(ret)
    }
    pub fn create_world_border(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::WorldBorder<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/WorldBorder")?;
        let res =
            jni.call_static_method(cls, "createWorldBorder", "()Lorg/bukkit/WorldBorder;", &[])?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::WorldBorder(jni, obj)
        };
        Ok(ret)
    }
    pub fn create_explorer_map_with_world(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::World<'mc>,
        arg1: crate::bukkit::Location<'mc>,
        arg2: std::option::Option<crate::bukkit::StructureType<'mc>>,
        arg3: std::option::Option<i32>,
        arg4: std::option::Option<bool>,
    ) -> Result<crate::bukkit::inventory::ItemStack<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let val_2 = unsafe { jni::objects::JObject::from_raw(arg2.unwrap().1.clone()) };
        let val_3 = jni::objects::JValueGen::Int(arg3.unwrap().into());
        let val_4 = jni::objects::JValueGen::Bool(arg4.unwrap().into());
        let cls = &jni.find_class("org/bukkit/inventory/ItemStack")?;
        let res =jni.call_static_method(cls,"createExplorerMap","(Lorg/bukkit/World;Lorg/bukkit/Location;Lorg/bukkit/StructureType;IZ)Lorg/bukkit/inventory/ItemStack;",&[jni::objects::JValueGen::from(&val_0),jni::objects::JValueGen::from(&val_1),jni::objects::JValueGen::from(&val_2),jni::objects::JValueGen::from(&val_3),jni::objects::JValueGen::from(&val_4)])?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::inventory::ItemStack(jni, obj)
        };
        Ok(ret)
    }
    pub fn reload_data(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(cls, "reloadData", "()V", &[])?;
        Ok(())
    }
    pub fn get_plugin_command(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::command::PluginCommand<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/command/PluginCommand")?;
        let res = jni.call_static_method(
            cls,
            "getPluginCommand",
            "(Ljava/lang/String;)Lorg/bukkit/command/PluginCommand;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::command::PluginCommand(jni, obj)
        };
        Ok(ret)
    }
    pub fn save_players(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(cls, "savePlayers", "()V", &[])?;
        Ok(())
    }
    pub fn dispatch_command(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::command::CommandSender<'mc>,
        arg1: String,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = jni::objects::JObject::from(jni.new_string(arg1).unwrap());
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(
            cls,
            "dispatchCommand",
            "(Lorg/bukkit/command/CommandSender;Ljava/lang/String;)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn add_recipe(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::inventory::Recipe<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(
            cls,
            "addRecipe",
            "(Lorg/bukkit/inventory/Recipe;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn get_crafting_recipe(
        mut jni: crate::SharedJNIEnv<'mc>,
        _arg0: Vec<crate::bukkit::inventory::ItemStack<'mc>>,
        arg1: crate::bukkit::World<'mc>,
    ) -> Result<crate::bukkit::inventory::Recipe<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let cls = &jni.find_class("org/bukkit/inventory/Recipe")?;
        let res = jni.call_static_method(
            cls,
            "getCraftingRecipe",
            "(Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/World;)Lorg/bukkit/inventory/Recipe;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::inventory::Recipe(jni, obj)
        };
        Ok(ret)
    }
    pub fn craft_item(
        mut jni: crate::SharedJNIEnv<'mc>,
        _arg0: Vec<crate::bukkit::inventory::ItemStack<'mc>>,
        arg1: crate::bukkit::World<'mc>,
        arg2: crate::bukkit::entity::Player<'mc>,
    ) -> Result<crate::bukkit::inventory::ItemStack<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg1.1.clone()) };
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg2.1.clone()) };
        let cls = &jni.find_class("org/bukkit/inventory/ItemStack")?;
        let res =jni.call_static_method(cls,"craftItem","(Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Lorg/bukkit/inventory/ItemStack;",&[jni::objects::JValueGen::from(&val_0),jni::objects::JValueGen::from(&val_1)])?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::inventory::ItemStack(jni, obj)
        };
        Ok(ret)
    }
    pub fn clear_recipes(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(cls, "clearRecipes", "()V", &[])?;
        Ok(())
    }
    pub fn reset_recipes(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(cls, "resetRecipes", "()V", &[])?;
        Ok(())
    }
    pub fn remove_recipe(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(
            cls,
            "removeRecipe",
            "(Lorg/bukkit/NamespacedKey;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn spawn_radius(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getSpawnRadius", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_spawn_radius(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(
            cls,
            "setSpawnRadius",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn should_send_chat_previews(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "shouldSendChatPreviews", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_enforcing_secure_profiles(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "isEnforcingSecureProfiles", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn hide_online_players(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "getHideOnlinePlayers", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn online_mode(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "getOnlineMode", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn allow_flight(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "getAllowFlight", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_hardcore(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "isHardcore", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn get_ban_list(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::BanListType<'mc>,
    ) -> Result<crate::bukkit::BanList<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/BanList")?;
        let res = jni.call_static_method(
            cls,
            "getBanList",
            "(Lorg/bukkit/BanList$Type;)Lorg/bukkit/BanList;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::BanList(jni, obj)
        };
        Ok(ret)
    }
    pub fn default_game_mode(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::GameMode<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/GameMode")?;
        let res =
            jni.call_static_method(cls, "getDefaultGameMode", "()Lorg/bukkit/GameMode;", &[])?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::GameMode(
                jni,
                raw_obj,
                crate::bukkit::GameMode::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn set_default_game_mode(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::GameMode<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(
            cls,
            "setDefaultGameMode",
            "(Lorg/bukkit/GameMode;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn console_sender(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::command::ConsoleCommandSender<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/command/ConsoleCommandSender")?;
        let res = jni.call_static_method(
            cls,
            "getConsoleSender",
            "()Lorg/bukkit/command/ConsoleCommandSender;",
            &[],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::command::ConsoleCommandSender(jni, obj)
        };
        Ok(ret)
    }
    pub fn messenger(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::plugin::messaging::Messenger<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/plugin/messaging/Messenger")?;
        let res = jni.call_static_method(
            cls,
            "getMessenger",
            "()Lorg/bukkit/plugin/messaging/Messenger;",
            &[],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::plugin::messaging::Messenger(jni, obj)
        };
        Ok(ret)
    }
    pub fn help_map(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::help::HelpMap<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/help/HelpMap")?;
        let res = jni.call_static_method(cls, "getHelpMap", "()Lorg/bukkit/help/HelpMap;", &[])?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::help::HelpMap(jni, obj)
        };
        Ok(ret)
    }
    pub fn create_merchant(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::inventory::Merchant<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/inventory/Merchant")?;
        let res = jni.call_static_method(
            cls,
            "createMerchant",
            "(Ljava/lang/String;)Lorg/bukkit/inventory/Merchant;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::inventory::Merchant(jni, obj)
        };
        Ok(ret)
    }
    pub fn max_chained_neighbor_updates(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getMaxChainedNeighborUpdates", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn monster_spawn_limit(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getMonsterSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn animal_spawn_limit(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getAnimalSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn water_animal_spawn_limit(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getWaterAnimalSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn water_ambient_spawn_limit(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getWaterAmbientSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn water_underground_creature_spawn_limit(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res =
            jni.call_static_method(cls, "getWaterUndergroundCreatureSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn ambient_spawn_limit(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getAmbientSpawnLimit", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn get_spawn_limit(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::entity::SpawnCategory<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(
            cls,
            "getSpawnLimit",
            "(Lorg/bukkit/entity/SpawnCategory;)I",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn is_primary_thread(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(cls, "isPrimaryThread", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn motd(mut jni: crate::SharedJNIEnv<'mc>) -> Result<String, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(cls, "getMotd", "()Ljava/lang/String;", &[])?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn set_motd(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(
            cls,
            "setMotd",
            "(Ljava/lang/String;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn shutdown_message(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(cls, "getShutdownMessage", "()Ljava/lang/String;", &[])?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn warning_state(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::WarningWarningState<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/Warning$WarningState")?;
        let res = jni.call_static_method(
            cls,
            "getWarningState",
            "()Lorg/bukkit/Warning$WarningState;",
            &[],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::WarningWarningState(jni, obj)
        };
        Ok(ret)
    }
    pub fn scoreboard_manager(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::scoreboard::ScoreboardManager<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/scoreboard/ScoreboardManager")?;
        let res = jni.call_static_method(
            cls,
            "getScoreboardManager",
            "()Lorg/bukkit/scoreboard/ScoreboardManager;",
            &[],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::scoreboard::ScoreboardManager(jni, obj)
        };
        Ok(ret)
    }
    pub fn get_scoreboard_criteria(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::scoreboard::Criteria<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/scoreboard/Criteria")?;
        let res = jni.call_static_method(
            cls,
            "getScoreboardCriteria",
            "(Ljava/lang/String;)Lorg/bukkit/scoreboard/Criteria;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::scoreboard::Criteria(jni, obj)
        };
        Ok(ret)
    }
    pub fn server_icon(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::util::CachedServerIcon<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/util/CachedServerIcon")?;
        let res = jni.call_static_method(
            cls,
            "getServerIcon",
            "()Lorg/bukkit/util/CachedServerIcon;",
            &[],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::util::CachedServerIcon(jni, obj)
        };
        Ok(ret)
    }
    pub fn set_idle_timeout(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(
            cls,
            "setIdleTimeout",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn idle_timeout(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(cls, "getIdleTimeout", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn remove_boss_bar(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("boolean")?;
        let res = jni.call_static_method(
            cls,
            "removeBossBar",
            "(Lorg/bukkit/NamespacedKey;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn get_entity(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: u128,
    ) -> Result<crate::bukkit::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let upper = (arg0 >> 64) as u64 as i64;
        let lower = arg0 as u64 as i64;
        let val_0 = jni::objects::JValueGen::Object(
            jni.new_object("java/util/UUID", "(JJ)V", &[upper.into(), lower.into()])
                .unwrap(),
        );
        let cls = &jni.find_class("org/bukkit/entity/Entity")?;
        let res = jni.call_static_method(
            cls,
            "getEntity",
            "(Ljava/util/UUID;)Lorg/bukkit/entity/Entity;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::entity::Entity(jni, obj)
        };
        Ok(ret)
    }
    pub fn get_advancement(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::advancement::Advancement<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/advancement/Advancement")?;
        let res = jni.call_static_method(
            cls,
            "getAdvancement",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/advancement/Advancement;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::advancement::Advancement(jni, obj)
        };
        Ok(ret)
    }
    pub fn structure_manager(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::structure::StructureManager<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/structure/StructureManager")?;
        let res = jni.call_static_method(
            cls,
            "getStructureManager",
            "()Lorg/bukkit/structure/StructureManager;",
            &[],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::structure::StructureManager(jni, obj)
        };
        Ok(ret)
    }
    pub fn get_registry(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: jni::objects::JClass<'mc>,
    ) -> Result<crate::bukkit::Registry<'mc>, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let cls = &jni.find_class("org/bukkit/Registry")?;
        let res = jni.call_static_method(
            cls,
            "getRegistry",
            "(Ljava/lang/Class;)Lorg/bukkit/Registry;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::Registry(jni, obj)
        };
        Ok(ret)
    }
    pub fn set_server(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::Server<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("void")?;
        let _res = jni.call_static_method(
            cls,
            "setServer",
            "(Lorg/bukkit/Server;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub struct ChatColor<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for ChatColor<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> ChatColor<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate ChatColor from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("ChatColor") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ChatColor object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn char(&mut self) -> Result<u16, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getChar", "()C", &[])?;
        Ok(res.c().unwrap())
    }
    pub fn get_last_colors(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(
            cls,
            "getLastColors",
            "(Ljava/lang/String;)Ljava/lang/String;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn is_color(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isColor", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_format(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isFormat", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn as_bungee(
        &mut self,
    ) -> Result<crate::bungee::bungee::api::ChatColor<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "asBungee",
            "()Lnet/md_5/bungee/api/ChatColor;",
            &[],
        )?;
        let ret = {
            crate::bungee::bungee::api::ChatColor(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn strip_color(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(
            cls,
            "stripColor",
            "(Ljava/lang/String;)Ljava/lang/String;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn translate_alternate_color_codes(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: u16,
        arg1: String,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Char(arg0.into());
        let val_1 = jni::objects::JObject::from(jni.new_string(arg1).unwrap());
        let cls = &jni.find_class("java/lang/String")?;
        let res = jni.call_static_method(
            cls,
            "translateAlternateColorCodes",
            "(CLjava/lang/String;)Ljava/lang/String;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "name", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn describe_constable(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "describeConstable",
            "()Ljava/util/Optional;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn declaring_class(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDeclaringClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn ordinal(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "ordinal", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
/// An instantiatable struct that implements BanList. Needed for returning it from Java.
pub struct BanList<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> BanList<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate BanList from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("BanList") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a BanList object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}
impl<'mc> crate::JNIRaw<'mc> for BanList<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub enum PortalTypeEnum {
    Nether,
    Ender,
    Custom,
}
impl std::fmt::Display for PortalTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            PortalTypeEnum::Nether => f.write_str("NETHER"),
            PortalTypeEnum::Ender => f.write_str("ENDER"),
            PortalTypeEnum::Custom => f.write_str("CUSTOM"),
        }
    }
}
pub struct PortalType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub PortalTypeEnum,
);
impl<'mc> std::ops::Deref for PortalType<'mc> {
    type Target = PortalTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for PortalType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> PortalType<'mc> {
    pub const NETHER: PortalTypeEnum = PortalTypeEnum::Nether;
    pub const ENDER: PortalTypeEnum = PortalTypeEnum::Ender;
    pub const CUSTOM: PortalTypeEnum = PortalTypeEnum::Custom;
    pub fn from_string(str: String) -> std::option::Option<PortalTypeEnum> {
        match str.as_str() {
            "NETHER" => Some(PortalTypeEnum::Nether),
            "ENDER" => Some(PortalTypeEnum::Ender),
            "CUSTOM" => Some(PortalTypeEnum::Custom),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::PortalType<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/PortalType")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/PortalType;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::PortalType(
                jni,
                raw_obj,
                crate::bukkit::PortalType::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub struct BanListType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for BanListType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> BanListType<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate BanListType from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("BanListType") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a BanListType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "name", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn describe_constable(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "describeConstable",
            "()Ljava/util/Optional;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn declaring_class(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDeclaringClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn ordinal(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "ordinal", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
/// An instantiatable struct that implements Warning. Needed for returning it from Java.
pub struct Warning<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> Warning<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Warning from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Warning") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Warning object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn value(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "value", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn reason(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "reason",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn annotation_type(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "annotationType",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
}
impl<'mc> crate::JNIRaw<'mc> for Warning<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct WorldCreator<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for WorldCreator<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> WorldCreator<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate WorldCreator from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("WorldCreator") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WorldCreator object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn name(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: std::option::Option<String>,
    ) -> Result<crate::bukkit::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0.unwrap()).unwrap());
        let cls = &jni.find_class("org/bukkit/WorldCreator")?;
        let res = jni.call_static_method(
            cls,
            "name",
            "(Ljava/lang/String;)Lorg/bukkit/WorldCreator;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::WorldCreator(jni, obj)
        };
        Ok(ret)
    }
    pub fn get_type(
        &mut self,
        arg0: std::option::Option<crate::bukkit::WorldType<'mc>>,
    ) -> Result<crate::bukkit::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.unwrap().1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "type",
            "(Lorg/bukkit/WorldType;)Lorg/bukkit/WorldCreator;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::WorldCreator(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn seed(
        &mut self,
        arg0: std::option::Option<i64>,
    ) -> Result<crate::bukkit::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "seed",
            "(J)Lorg/bukkit/WorldCreator;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::WorldCreator(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn environment(
        &mut self,
        arg0: std::option::Option<crate::bukkit::WorldEnvironment<'mc>>,
    ) -> Result<crate::bukkit::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.unwrap().1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "environment",
            "(Lorg/bukkit/World$Environment;)Lorg/bukkit/WorldCreator;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::WorldCreator(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn create_world(
        &mut self,
    ) -> Result<crate::bukkit::World<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createWorld",
            "()Lorg/bukkit/World;",
            &[],
        )?;
        let ret = {
            crate::bukkit::World(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn generate_structures(
        &mut self,
        arg0: std::option::Option<bool>,
    ) -> Result<crate::bukkit::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.unwrap().into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "generateStructures",
            "(Z)Lorg/bukkit/WorldCreator;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::WorldCreator(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn generator_settings(
        &mut self,
        arg0: std::option::Option<String>,
    ) -> Result<crate::bukkit::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0.unwrap()).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "generatorSettings",
            "(Ljava/lang/String;)Lorg/bukkit/WorldCreator;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::WorldCreator(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn hardcore(
        &mut self,
        arg0: std::option::Option<bool>,
    ) -> Result<crate::bukkit::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.unwrap().into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "hardcore",
            "(Z)Lorg/bukkit/WorldCreator;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::WorldCreator(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_generator_for_name(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
        arg1: String,
        arg2: crate::bukkit::command::CommandSender<'mc>,
    ) -> Result<crate::bukkit::generator::ChunkGenerator<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let val_1 = jni::objects::JObject::from(jni.new_string(arg1).unwrap());
        let val_2 = unsafe { jni::objects::JObject::from_raw(arg2.1.clone()) };
        let cls = &jni.find_class("org/bukkit/generator/ChunkGenerator")?;
        let res =jni.call_static_method(cls,"getGeneratorForName","(Ljava/lang/String;Ljava/lang/String;Lorg/bukkit/command/CommandSender;)Lorg/bukkit/generator/ChunkGenerator;",&[jni::objects::JValueGen::from(&val_0),jni::objects::JValueGen::from(&val_1),jni::objects::JValueGen::from(&val_2)])?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::generator::ChunkGenerator(jni, obj)
        };
        Ok(ret)
    }
    pub fn get_biome_provider_for_name(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
        arg1: String,
        arg2: crate::bukkit::command::CommandSender<'mc>,
    ) -> Result<crate::bukkit::generator::BiomeProvider<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let val_1 = jni::objects::JObject::from(jni.new_string(arg1).unwrap());
        let val_2 = unsafe { jni::objects::JObject::from_raw(arg2.1.clone()) };
        let cls = &jni.find_class("org/bukkit/generator/BiomeProvider")?;
        let res =jni.call_static_method(cls,"getBiomeProviderForName","(Ljava/lang/String;Ljava/lang/String;Lorg/bukkit/command/CommandSender;)Lorg/bukkit/generator/BiomeProvider;",&[jni::objects::JValueGen::from(&val_0),jni::objects::JValueGen::from(&val_1),jni::objects::JValueGen::from(&val_2)])?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::generator::BiomeProvider(jni, obj)
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub enum ArtEnum {
    Kebab,
    Aztec,
    Alban,
    Aztec2,
    Bomb,
    Plant,
    Wasteland,
    Pool,
    Courbet,
    Sea,
    Sunset,
    Creebet,
    Wanderer,
    Graham,
    VariantMatch,
    Bust,
    Stage,
    Void,
    SkullAndRoses,
    Wither,
    Fighters,
    Pointer,
    Pigscene,
    BurningSkull,
    Skeleton,
    DonkeyKong,
    Earth,
    Wind,
    Water,
    Fire,
}
impl std::fmt::Display for ArtEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            ArtEnum::Kebab => f.write_str("KEBAB"),
            ArtEnum::Aztec => f.write_str("AZTEC"),
            ArtEnum::Alban => f.write_str("ALBAN"),
            ArtEnum::Aztec2 => f.write_str("AZTEC2"),
            ArtEnum::Bomb => f.write_str("BOMB"),
            ArtEnum::Plant => f.write_str("PLANT"),
            ArtEnum::Wasteland => f.write_str("WASTELAND"),
            ArtEnum::Pool => f.write_str("POOL"),
            ArtEnum::Courbet => f.write_str("COURBET"),
            ArtEnum::Sea => f.write_str("SEA"),
            ArtEnum::Sunset => f.write_str("SUNSET"),
            ArtEnum::Creebet => f.write_str("CREEBET"),
            ArtEnum::Wanderer => f.write_str("WANDERER"),
            ArtEnum::Graham => f.write_str("GRAHAM"),
            ArtEnum::VariantMatch => f.write_str("MATCH"),
            ArtEnum::Bust => f.write_str("BUST"),
            ArtEnum::Stage => f.write_str("STAGE"),
            ArtEnum::Void => f.write_str("VOID"),
            ArtEnum::SkullAndRoses => f.write_str("SKULL_AND_ROSES"),
            ArtEnum::Wither => f.write_str("WITHER"),
            ArtEnum::Fighters => f.write_str("FIGHTERS"),
            ArtEnum::Pointer => f.write_str("POINTER"),
            ArtEnum::Pigscene => f.write_str("PIGSCENE"),
            ArtEnum::BurningSkull => f.write_str("BURNING_SKULL"),
            ArtEnum::Skeleton => f.write_str("SKELETON"),
            ArtEnum::DonkeyKong => f.write_str("DONKEY_KONG"),
            ArtEnum::Earth => f.write_str("EARTH"),
            ArtEnum::Wind => f.write_str("WIND"),
            ArtEnum::Water => f.write_str("WATER"),
            ArtEnum::Fire => f.write_str("FIRE"),
        }
    }
}
pub struct Art<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub ArtEnum,
);
impl<'mc> std::ops::Deref for Art<'mc> {
    type Target = ArtEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for Art<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Art<'mc> {
    pub const KEBAB: ArtEnum = ArtEnum::Kebab;
    pub const AZTEC: ArtEnum = ArtEnum::Aztec;
    pub const ALBAN: ArtEnum = ArtEnum::Alban;
    pub const AZTEC2: ArtEnum = ArtEnum::Aztec2;
    pub const BOMB: ArtEnum = ArtEnum::Bomb;
    pub const PLANT: ArtEnum = ArtEnum::Plant;
    pub const WASTELAND: ArtEnum = ArtEnum::Wasteland;
    pub const POOL: ArtEnum = ArtEnum::Pool;
    pub const COURBET: ArtEnum = ArtEnum::Courbet;
    pub const SEA: ArtEnum = ArtEnum::Sea;
    pub const SUNSET: ArtEnum = ArtEnum::Sunset;
    pub const CREEBET: ArtEnum = ArtEnum::Creebet;
    pub const WANDERER: ArtEnum = ArtEnum::Wanderer;
    pub const GRAHAM: ArtEnum = ArtEnum::Graham;
    pub const VARIANTMATCH: ArtEnum = ArtEnum::VariantMatch;
    pub const BUST: ArtEnum = ArtEnum::Bust;
    pub const STAGE: ArtEnum = ArtEnum::Stage;
    pub const VOID: ArtEnum = ArtEnum::Void;
    pub const SKULLANDROSES: ArtEnum = ArtEnum::SkullAndRoses;
    pub const WITHER: ArtEnum = ArtEnum::Wither;
    pub const FIGHTERS: ArtEnum = ArtEnum::Fighters;
    pub const POINTER: ArtEnum = ArtEnum::Pointer;
    pub const PIGSCENE: ArtEnum = ArtEnum::Pigscene;
    pub const BURNINGSKULL: ArtEnum = ArtEnum::BurningSkull;
    pub const SKELETON: ArtEnum = ArtEnum::Skeleton;
    pub const DONKEYKONG: ArtEnum = ArtEnum::DonkeyKong;
    pub const EARTH: ArtEnum = ArtEnum::Earth;
    pub const WIND: ArtEnum = ArtEnum::Wind;
    pub const WATER: ArtEnum = ArtEnum::Water;
    pub const FIRE: ArtEnum = ArtEnum::Fire;
    pub fn from_string(str: String) -> std::option::Option<ArtEnum> {
        match str.as_str() {
            "KEBAB" => Some(ArtEnum::Kebab),
            "AZTEC" => Some(ArtEnum::Aztec),
            "ALBAN" => Some(ArtEnum::Alban),
            "AZTEC2" => Some(ArtEnum::Aztec2),
            "BOMB" => Some(ArtEnum::Bomb),
            "PLANT" => Some(ArtEnum::Plant),
            "WASTELAND" => Some(ArtEnum::Wasteland),
            "POOL" => Some(ArtEnum::Pool),
            "COURBET" => Some(ArtEnum::Courbet),
            "SEA" => Some(ArtEnum::Sea),
            "SUNSET" => Some(ArtEnum::Sunset),
            "CREEBET" => Some(ArtEnum::Creebet),
            "WANDERER" => Some(ArtEnum::Wanderer),
            "GRAHAM" => Some(ArtEnum::Graham),
            "MATCH" => Some(ArtEnum::VariantMatch),
            "BUST" => Some(ArtEnum::Bust),
            "STAGE" => Some(ArtEnum::Stage),
            "VOID" => Some(ArtEnum::Void),
            "SKULL_AND_ROSES" => Some(ArtEnum::SkullAndRoses),
            "WITHER" => Some(ArtEnum::Wither),
            "FIGHTERS" => Some(ArtEnum::Fighters),
            "POINTER" => Some(ArtEnum::Pointer),
            "PIGSCENE" => Some(ArtEnum::Pigscene),
            "BURNING_SKULL" => Some(ArtEnum::BurningSkull),
            "SKELETON" => Some(ArtEnum::Skeleton),
            "DONKEY_KONG" => Some(ArtEnum::DonkeyKong),
            "EARTH" => Some(ArtEnum::Earth),
            "WIND" => Some(ArtEnum::Wind),
            "WATER" => Some(ArtEnum::Water),
            "FIRE" => Some(ArtEnum::Fire),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Art<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Art")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Art;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Art(
                jni,
                raw_obj,
                crate::bukkit::Art::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn id(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getId", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn get_by_name(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Art<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Art")?;
        let res = jni.call_static_method(
            cls,
            "getByName",
            "(Ljava/lang/String;)Lorg/bukkit/Art;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Art(
                jni,
                raw_obj,
                crate::bukkit::Art::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn get_by_id(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<crate::bukkit::Art<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let cls = &jni.find_class("org/bukkit/Art")?;
        let res = jni.call_static_method(
            cls,
            "getById",
            "(I)Lorg/bukkit/Art;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Art(
                jni,
                raw_obj,
                crate::bukkit::Art::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn block_width(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlockWidth", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn block_height(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlockHeight", "()I", &[])?;
        Ok(res.i().unwrap())
    }
}
/// An instantiatable struct that implements SoundGroup. Needed for returning it from Java.
pub struct SoundGroup<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> SoundGroup<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate SoundGroup from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("SoundGroup") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a SoundGroup object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn pitch(&mut self) -> Result<f32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getPitch", "()F", &[])?;
        Ok(res.f().unwrap())
    }
    pub fn volume(&mut self) -> Result<f32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getVolume", "()F", &[])?;
        Ok(res.f().unwrap())
    }
    pub fn break_sound(&mut self) -> Result<crate::bukkit::Sound<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBreakSound",
            "()Lorg/bukkit/Sound;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Sound(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Sound::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn step_sound(&mut self) -> Result<crate::bukkit::Sound<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getStepSound",
            "()Lorg/bukkit/Sound;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Sound(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Sound::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn place_sound(&mut self) -> Result<crate::bukkit::Sound<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPlaceSound",
            "()Lorg/bukkit/Sound;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Sound(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Sound::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn hit_sound(&mut self) -> Result<crate::bukkit::Sound<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getHitSound",
            "()Lorg/bukkit/Sound;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Sound(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Sound::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn fall_sound(&mut self) -> Result<crate::bukkit::Sound<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getFallSound",
            "()Lorg/bukkit/Sound;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Sound(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Sound::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
impl<'mc> crate::JNIRaw<'mc> for SoundGroup<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct GameRule<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for GameRule<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> GameRule<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate GameRule from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("GameRule") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a GameRule object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getName",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn get_type(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getType",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn get_by_name(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::GameRule<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/GameRule")?;
        let res = jni.call_static_method(
            cls,
            "getByName",
            "(Ljava/lang/String;)Lorg/bukkit/GameRule;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::GameRule(jni, obj)
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
/// An instantiatable struct that implements ChunkSnapshot. Needed for returning it from Java.
pub struct ChunkSnapshot<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> ChunkSnapshot<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate ChunkSnapshot from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("ChunkSnapshot") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ChunkSnapshot object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn capture_full_time(&mut self) -> Result<i64, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getCaptureFullTime", "()J", &[])?;
        Ok(res.j().unwrap())
    }
    pub fn get_data(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getData",
            "(III)I",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn get_block_data(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<crate::bukkit::block::data::BlockData<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockData",
            "(III)Lorg/bukkit/block/data/BlockData;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            crate::bukkit::block::data::BlockData(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn x(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getX", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn z(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getZ", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn get_highest_block_yat(
        &mut self,
        arg0: i32,
        arg1: i32,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getHighestBlockYAt",
            "(II)I",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn get_biome_with_int(
        &mut self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::bukkit::block::Biome<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        let val_2 = jni::objects::JValueGen::Int(arg2.unwrap().into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBiome",
            "(III)Lorg/bukkit/block/Biome;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::block::Biome(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::block::Biome::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn get_block_emitted_light(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockEmittedLight",
            "(III)I",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn world_name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWorldName",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn get_block_type(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<crate::bukkit::Material<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockType",
            "(III)Lorg/bukkit/Material;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant =
                self.jni_ref()
                    .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .jni_ref()
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Material(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Material::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn get_block_sky_light(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockSkyLight",
            "(III)I",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn get_raw_biome_temperature_with_int(
        &mut self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<f64, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        let val_2 = jni::objects::JValueGen::Int(arg2.unwrap().into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getRawBiomeTemperature",
            "(III)D",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        Ok(res.d().unwrap())
    }
    pub fn is_section_empty(&mut self, arg0: i32) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isSectionEmpty",
            "(I)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
}
impl<'mc> crate::JNIRaw<'mc> for ChunkSnapshot<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct MusicInstrument<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for MusicInstrument<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> MusicInstrument<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate MusicInstrument from null object.").into(),
            );
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("MusicInstrument") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a MusicInstrument object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_by_key(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::MusicInstrument<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let cls = &jni.find_class("org/bukkit/MusicInstrument")?;
        let res = jni.call_static_method(
            cls,
            "getByKey",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/MusicInstrument;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::MusicInstrument(jni, obj)
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
/// An instantiatable struct that implements Translatable. Needed for returning it from Java.
pub struct Translatable<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> Translatable<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Translatable from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Translatable") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Translatable object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn translation_key(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTranslationKey",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
}
impl<'mc> crate::JNIRaw<'mc> for Translatable<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct FireworkEffect<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
pub struct FireworkEffectBuilder<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for FireworkEffectBuilder<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> FireworkEffectBuilder<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate FireworkEffectBuilder from null object."
            )
            .into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("FireworkEffectBuilder") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a FireworkEffectBuilder object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn trail(
        &mut self,
        arg0: bool,
    ) -> Result<crate::bukkit::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "trail",
            "(Z)Lorg/bukkit/FireworkEffect$Builder;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::FireworkEffectBuilder(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn build(
        &mut self,
    ) -> Result<crate::bukkit::FireworkEffect<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "build",
            "()Lorg/bukkit/FireworkEffect;",
            &[],
        )?;
        let ret = {
            crate::bukkit::FireworkEffect(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn with_trail(
        &mut self,
    ) -> Result<crate::bukkit::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "withTrail",
            "()Lorg/bukkit/FireworkEffect$Builder;",
            &[],
        )?;
        let ret = {
            crate::bukkit::FireworkEffectBuilder(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn with(
        &mut self,
        arg0: crate::bukkit::FireworkEffectType<'mc>,
    ) -> Result<crate::bukkit::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "with",
            "(Lorg/bukkit/FireworkEffect$Type;)Lorg/bukkit/FireworkEffect$Builder;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::FireworkEffectBuilder(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn flicker(
        &mut self,
        arg0: bool,
    ) -> Result<crate::bukkit::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "flicker",
            "(Z)Lorg/bukkit/FireworkEffect$Builder;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::FireworkEffectBuilder(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn with_flicker(
        &mut self,
    ) -> Result<crate::bukkit::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "withFlicker",
            "()Lorg/bukkit/FireworkEffect$Builder;",
            &[],
        )?;
        let ret = {
            crate::bukkit::FireworkEffectBuilder(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub struct FireworkEffectType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for FireworkEffectType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> FireworkEffectType<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate FireworkEffectType from null object.").into(),
            );
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("FireworkEffectType") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a FireworkEffectType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "name", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn describe_constable(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "describeConstable",
            "()Ljava/util/Optional;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn declaring_class(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDeclaringClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn ordinal(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "ordinal", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
impl<'mc> crate::JNIRaw<'mc> for FireworkEffect<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> FireworkEffect<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate FireworkEffect from null object.").into(),
            );
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("FireworkEffect") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a FireworkEffect object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn builder(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/FireworkEffect$Builder")?;
        let res =
            jni.call_static_method(cls, "builder", "()Lorg/bukkit/FireworkEffect$Builder;", &[])?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::FireworkEffectBuilder(jni, obj)
        };
        Ok(ret)
    }
    pub fn get_type(
        &mut self,
    ) -> Result<crate::bukkit::FireworkEffectType<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getType",
            "()Lorg/bukkit/FireworkEffect$Type;",
            &[],
        )?;
        let ret = {
            crate::bukkit::FireworkEffectType(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn deserialize(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: std::collections::HashMap<String, jni::objects::JObject<'mc>>,
    ) -> Result<
        crate::bukkit::configuration::serialization::ConfigurationSerializable<'mc>,
        Box<dyn std::error::Error>,
    > {
        let raw_val_0 = jni.new_object("java/util/HashMap", "()V", &[]).unwrap();
        for (k, v) in arg0 {
            let map_val_0 = jni::objects::JObject::from(jni.new_string(k).unwrap());
            let map_val_1 = v;
            jni.call_method(
                &raw_val_0,
                "put",
                "(Ljava/Lang/ObjectLjava/Lang/Object)V",
                &[
                    jni::objects::JValueGen::from(&map_val_0),
                    jni::objects::JValueGen::from(&map_val_1),
                ],
            )?;
        }
        let val_0 = jni::objects::JValueGen::Object(raw_val_0);
        let cls =
            &jni.find_class("org/bukkit/configuration/serialization/ConfigurationSerializable")?;
        let res = jni.call_static_method(
            cls,
            "deserialize",
            "(Ljava/util/Map;)Lorg/bukkit/configuration/serialization/ConfigurationSerializable;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::configuration::serialization::ConfigurationSerializable(jni, obj)
        };
        Ok(ret)
    }
    pub fn has_flicker(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasFlicker", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn has_trail(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasTrail", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
/// An instantiatable struct that implements MinecraftExperimental. Needed for returning it from Java.
pub struct MinecraftExperimental<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> MinecraftExperimental<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate MinecraftExperimental from null object."
            )
            .into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("MinecraftExperimental") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a MinecraftExperimental object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn annotation_type(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "annotationType",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
}
impl<'mc> crate::JNIRaw<'mc> for MinecraftExperimental<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
/// An instantiatable struct that implements Keyed. Needed for returning it from Java.
pub struct Keyed<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> Keyed<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Keyed from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Keyed") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Keyed object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
}
impl<'mc> crate::JNIRaw<'mc> for Keyed<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub enum StatisticEnum {
    DamageDealt,
    DamageTaken,
    Deaths,
    MobKills,
    PlayerKills,
    FishCaught,
    AnimalsBred,
    LeaveGame,
    Jump,
    DropCount,
    Drop,
    Pickup,
    PlayOneMinute,
    TotalWorldTime,
    WalkOneCm,
    WalkOnWaterOneCm,
    FallOneCm,
    SneakTime,
    ClimbOneCm,
    FlyOneCm,
    WalkUnderWaterOneCm,
    MinecartOneCm,
    BoatOneCm,
    PigOneCm,
    HorseOneCm,
    SprintOneCm,
    CrouchOneCm,
    AviateOneCm,
    MineBlock,
    UseItem,
    BreakItem,
    CraftItem,
    KillEntity,
    EntityKilledBy,
    TimeSinceDeath,
    TalkedToVillager,
    TradedWithVillager,
    CakeSlicesEaten,
    CauldronFilled,
    CauldronUsed,
    ArmorCleaned,
    BannerCleaned,
    BrewingstandInteraction,
    BeaconInteraction,
    DropperInspected,
    HopperInspected,
    DispenserInspected,
    NoteblockPlayed,
    NoteblockTuned,
    FlowerPotted,
    TrappedChestTriggered,
    EnderchestOpened,
    ItemEnchanted,
    RecordPlayed,
    FurnaceInteraction,
    CraftingTableInteraction,
    ChestOpened,
    SleepInBed,
    ShulkerBoxOpened,
    TimeSinceRest,
    SwimOneCm,
    DamageDealtAbsorbed,
    DamageDealtResisted,
    DamageBlockedByShield,
    DamageAbsorbed,
    DamageResisted,
    CleanShulkerBox,
    OpenBarrel,
    InteractWithBlastFurnace,
    InteractWithSmoker,
    InteractWithLectern,
    InteractWithCampfire,
    InteractWithCartographyTable,
    InteractWithLoom,
    InteractWithStonecutter,
    BellRing,
    RaidTrigger,
    RaidWin,
    InteractWithAnvil,
    InteractWithGrindstone,
    TargetHit,
    InteractWithSmithingTable,
    StriderOneCm,
}
impl std::fmt::Display for StatisticEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            StatisticEnum::DamageDealt => f.write_str("DAMAGE_DEALT"),
            StatisticEnum::DamageTaken => f.write_str("DAMAGE_TAKEN"),
            StatisticEnum::Deaths => f.write_str("DEATHS"),
            StatisticEnum::MobKills => f.write_str("MOB_KILLS"),
            StatisticEnum::PlayerKills => f.write_str("PLAYER_KILLS"),
            StatisticEnum::FishCaught => f.write_str("FISH_CAUGHT"),
            StatisticEnum::AnimalsBred => f.write_str("ANIMALS_BRED"),
            StatisticEnum::LeaveGame => f.write_str("LEAVE_GAME"),
            StatisticEnum::Jump => f.write_str("JUMP"),
            StatisticEnum::DropCount => f.write_str("DROP_COUNT"),
            StatisticEnum::Drop => f.write_str("DROP"),
            StatisticEnum::Pickup => f.write_str("PICKUP"),
            StatisticEnum::PlayOneMinute => f.write_str("PLAY_ONE_MINUTE"),
            StatisticEnum::TotalWorldTime => f.write_str("TOTAL_WORLD_TIME"),
            StatisticEnum::WalkOneCm => f.write_str("WALK_ONE_CM"),
            StatisticEnum::WalkOnWaterOneCm => f.write_str("WALK_ON_WATER_ONE_CM"),
            StatisticEnum::FallOneCm => f.write_str("FALL_ONE_CM"),
            StatisticEnum::SneakTime => f.write_str("SNEAK_TIME"),
            StatisticEnum::ClimbOneCm => f.write_str("CLIMB_ONE_CM"),
            StatisticEnum::FlyOneCm => f.write_str("FLY_ONE_CM"),
            StatisticEnum::WalkUnderWaterOneCm => f.write_str("WALK_UNDER_WATER_ONE_CM"),
            StatisticEnum::MinecartOneCm => f.write_str("MINECART_ONE_CM"),
            StatisticEnum::BoatOneCm => f.write_str("BOAT_ONE_CM"),
            StatisticEnum::PigOneCm => f.write_str("PIG_ONE_CM"),
            StatisticEnum::HorseOneCm => f.write_str("HORSE_ONE_CM"),
            StatisticEnum::SprintOneCm => f.write_str("SPRINT_ONE_CM"),
            StatisticEnum::CrouchOneCm => f.write_str("CROUCH_ONE_CM"),
            StatisticEnum::AviateOneCm => f.write_str("AVIATE_ONE_CM"),
            StatisticEnum::MineBlock => f.write_str("MINE_BLOCK"),
            StatisticEnum::UseItem => f.write_str("USE_ITEM"),
            StatisticEnum::BreakItem => f.write_str("BREAK_ITEM"),
            StatisticEnum::CraftItem => f.write_str("CRAFT_ITEM"),
            StatisticEnum::KillEntity => f.write_str("KILL_ENTITY"),
            StatisticEnum::EntityKilledBy => f.write_str("ENTITY_KILLED_BY"),
            StatisticEnum::TimeSinceDeath => f.write_str("TIME_SINCE_DEATH"),
            StatisticEnum::TalkedToVillager => f.write_str("TALKED_TO_VILLAGER"),
            StatisticEnum::TradedWithVillager => f.write_str("TRADED_WITH_VILLAGER"),
            StatisticEnum::CakeSlicesEaten => f.write_str("CAKE_SLICES_EATEN"),
            StatisticEnum::CauldronFilled => f.write_str("CAULDRON_FILLED"),
            StatisticEnum::CauldronUsed => f.write_str("CAULDRON_USED"),
            StatisticEnum::ArmorCleaned => f.write_str("ARMOR_CLEANED"),
            StatisticEnum::BannerCleaned => f.write_str("BANNER_CLEANED"),
            StatisticEnum::BrewingstandInteraction => f.write_str("BREWINGSTAND_INTERACTION"),
            StatisticEnum::BeaconInteraction => f.write_str("BEACON_INTERACTION"),
            StatisticEnum::DropperInspected => f.write_str("DROPPER_INSPECTED"),
            StatisticEnum::HopperInspected => f.write_str("HOPPER_INSPECTED"),
            StatisticEnum::DispenserInspected => f.write_str("DISPENSER_INSPECTED"),
            StatisticEnum::NoteblockPlayed => f.write_str("NOTEBLOCK_PLAYED"),
            StatisticEnum::NoteblockTuned => f.write_str("NOTEBLOCK_TUNED"),
            StatisticEnum::FlowerPotted => f.write_str("FLOWER_POTTED"),
            StatisticEnum::TrappedChestTriggered => f.write_str("TRAPPED_CHEST_TRIGGERED"),
            StatisticEnum::EnderchestOpened => f.write_str("ENDERCHEST_OPENED"),
            StatisticEnum::ItemEnchanted => f.write_str("ITEM_ENCHANTED"),
            StatisticEnum::RecordPlayed => f.write_str("RECORD_PLAYED"),
            StatisticEnum::FurnaceInteraction => f.write_str("FURNACE_INTERACTION"),
            StatisticEnum::CraftingTableInteraction => f.write_str("CRAFTING_TABLE_INTERACTION"),
            StatisticEnum::ChestOpened => f.write_str("CHEST_OPENED"),
            StatisticEnum::SleepInBed => f.write_str("SLEEP_IN_BED"),
            StatisticEnum::ShulkerBoxOpened => f.write_str("SHULKER_BOX_OPENED"),
            StatisticEnum::TimeSinceRest => f.write_str("TIME_SINCE_REST"),
            StatisticEnum::SwimOneCm => f.write_str("SWIM_ONE_CM"),
            StatisticEnum::DamageDealtAbsorbed => f.write_str("DAMAGE_DEALT_ABSORBED"),
            StatisticEnum::DamageDealtResisted => f.write_str("DAMAGE_DEALT_RESISTED"),
            StatisticEnum::DamageBlockedByShield => f.write_str("DAMAGE_BLOCKED_BY_SHIELD"),
            StatisticEnum::DamageAbsorbed => f.write_str("DAMAGE_ABSORBED"),
            StatisticEnum::DamageResisted => f.write_str("DAMAGE_RESISTED"),
            StatisticEnum::CleanShulkerBox => f.write_str("CLEAN_SHULKER_BOX"),
            StatisticEnum::OpenBarrel => f.write_str("OPEN_BARREL"),
            StatisticEnum::InteractWithBlastFurnace => f.write_str("INTERACT_WITH_BLAST_FURNACE"),
            StatisticEnum::InteractWithSmoker => f.write_str("INTERACT_WITH_SMOKER"),
            StatisticEnum::InteractWithLectern => f.write_str("INTERACT_WITH_LECTERN"),
            StatisticEnum::InteractWithCampfire => f.write_str("INTERACT_WITH_CAMPFIRE"),
            StatisticEnum::InteractWithCartographyTable => {
                f.write_str("INTERACT_WITH_CARTOGRAPHY_TABLE")
            }
            StatisticEnum::InteractWithLoom => f.write_str("INTERACT_WITH_LOOM"),
            StatisticEnum::InteractWithStonecutter => f.write_str("INTERACT_WITH_STONECUTTER"),
            StatisticEnum::BellRing => f.write_str("BELL_RING"),
            StatisticEnum::RaidTrigger => f.write_str("RAID_TRIGGER"),
            StatisticEnum::RaidWin => f.write_str("RAID_WIN"),
            StatisticEnum::InteractWithAnvil => f.write_str("INTERACT_WITH_ANVIL"),
            StatisticEnum::InteractWithGrindstone => f.write_str("INTERACT_WITH_GRINDSTONE"),
            StatisticEnum::TargetHit => f.write_str("TARGET_HIT"),
            StatisticEnum::InteractWithSmithingTable => f.write_str("INTERACT_WITH_SMITHING_TABLE"),
            StatisticEnum::StriderOneCm => f.write_str("STRIDER_ONE_CM"),
        }
    }
}
pub struct Statistic<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub StatisticEnum,
);
impl<'mc> std::ops::Deref for Statistic<'mc> {
    type Target = StatisticEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for Statistic<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct StatisticType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for StatisticType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> StatisticType<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate StatisticType from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("StatisticType") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a StatisticType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "name", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn describe_constable(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "describeConstable",
            "()Ljava/util/Optional;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn declaring_class(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDeclaringClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn ordinal(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "ordinal", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
impl<'mc> Statistic<'mc> {
    pub const DAMAGEDEALT: StatisticEnum = StatisticEnum::DamageDealt;
    pub const DAMAGETAKEN: StatisticEnum = StatisticEnum::DamageTaken;
    pub const DEATHS: StatisticEnum = StatisticEnum::Deaths;
    pub const MOBKILLS: StatisticEnum = StatisticEnum::MobKills;
    pub const PLAYERKILLS: StatisticEnum = StatisticEnum::PlayerKills;
    pub const FISHCAUGHT: StatisticEnum = StatisticEnum::FishCaught;
    pub const ANIMALSBRED: StatisticEnum = StatisticEnum::AnimalsBred;
    pub const LEAVEGAME: StatisticEnum = StatisticEnum::LeaveGame;
    pub const JUMP: StatisticEnum = StatisticEnum::Jump;
    pub const DROPCOUNT: StatisticEnum = StatisticEnum::DropCount;
    pub const DROP: StatisticEnum = StatisticEnum::Drop;
    pub const PICKUP: StatisticEnum = StatisticEnum::Pickup;
    pub const PLAYONEMINUTE: StatisticEnum = StatisticEnum::PlayOneMinute;
    pub const TOTALWORLDTIME: StatisticEnum = StatisticEnum::TotalWorldTime;
    pub const WALKONECM: StatisticEnum = StatisticEnum::WalkOneCm;
    pub const WALKONWATERONECM: StatisticEnum = StatisticEnum::WalkOnWaterOneCm;
    pub const FALLONECM: StatisticEnum = StatisticEnum::FallOneCm;
    pub const SNEAKTIME: StatisticEnum = StatisticEnum::SneakTime;
    pub const CLIMBONECM: StatisticEnum = StatisticEnum::ClimbOneCm;
    pub const FLYONECM: StatisticEnum = StatisticEnum::FlyOneCm;
    pub const WALKUNDERWATERONECM: StatisticEnum = StatisticEnum::WalkUnderWaterOneCm;
    pub const MINECARTONECM: StatisticEnum = StatisticEnum::MinecartOneCm;
    pub const BOATONECM: StatisticEnum = StatisticEnum::BoatOneCm;
    pub const PIGONECM: StatisticEnum = StatisticEnum::PigOneCm;
    pub const HORSEONECM: StatisticEnum = StatisticEnum::HorseOneCm;
    pub const SPRINTONECM: StatisticEnum = StatisticEnum::SprintOneCm;
    pub const CROUCHONECM: StatisticEnum = StatisticEnum::CrouchOneCm;
    pub const AVIATEONECM: StatisticEnum = StatisticEnum::AviateOneCm;
    pub const MINEBLOCK: StatisticEnum = StatisticEnum::MineBlock;
    pub const USEITEM: StatisticEnum = StatisticEnum::UseItem;
    pub const BREAKITEM: StatisticEnum = StatisticEnum::BreakItem;
    pub const CRAFTITEM: StatisticEnum = StatisticEnum::CraftItem;
    pub const KILLENTITY: StatisticEnum = StatisticEnum::KillEntity;
    pub const ENTITYKILLEDBY: StatisticEnum = StatisticEnum::EntityKilledBy;
    pub const TIMESINCEDEATH: StatisticEnum = StatisticEnum::TimeSinceDeath;
    pub const TALKEDTOVILLAGER: StatisticEnum = StatisticEnum::TalkedToVillager;
    pub const TRADEDWITHVILLAGER: StatisticEnum = StatisticEnum::TradedWithVillager;
    pub const CAKESLICESEATEN: StatisticEnum = StatisticEnum::CakeSlicesEaten;
    pub const CAULDRONFILLED: StatisticEnum = StatisticEnum::CauldronFilled;
    pub const CAULDRONUSED: StatisticEnum = StatisticEnum::CauldronUsed;
    pub const ARMORCLEANED: StatisticEnum = StatisticEnum::ArmorCleaned;
    pub const BANNERCLEANED: StatisticEnum = StatisticEnum::BannerCleaned;
    pub const BREWINGSTANDINTERACTION: StatisticEnum = StatisticEnum::BrewingstandInteraction;
    pub const BEACONINTERACTION: StatisticEnum = StatisticEnum::BeaconInteraction;
    pub const DROPPERINSPECTED: StatisticEnum = StatisticEnum::DropperInspected;
    pub const HOPPERINSPECTED: StatisticEnum = StatisticEnum::HopperInspected;
    pub const DISPENSERINSPECTED: StatisticEnum = StatisticEnum::DispenserInspected;
    pub const NOTEBLOCKPLAYED: StatisticEnum = StatisticEnum::NoteblockPlayed;
    pub const NOTEBLOCKTUNED: StatisticEnum = StatisticEnum::NoteblockTuned;
    pub const FLOWERPOTTED: StatisticEnum = StatisticEnum::FlowerPotted;
    pub const TRAPPEDCHESTTRIGGERED: StatisticEnum = StatisticEnum::TrappedChestTriggered;
    pub const ENDERCHESTOPENED: StatisticEnum = StatisticEnum::EnderchestOpened;
    pub const ITEMENCHANTED: StatisticEnum = StatisticEnum::ItemEnchanted;
    pub const RECORDPLAYED: StatisticEnum = StatisticEnum::RecordPlayed;
    pub const FURNACEINTERACTION: StatisticEnum = StatisticEnum::FurnaceInteraction;
    pub const CRAFTINGTABLEINTERACTION: StatisticEnum = StatisticEnum::CraftingTableInteraction;
    pub const CHESTOPENED: StatisticEnum = StatisticEnum::ChestOpened;
    pub const SLEEPINBED: StatisticEnum = StatisticEnum::SleepInBed;
    pub const SHULKERBOXOPENED: StatisticEnum = StatisticEnum::ShulkerBoxOpened;
    pub const TIMESINCEREST: StatisticEnum = StatisticEnum::TimeSinceRest;
    pub const SWIMONECM: StatisticEnum = StatisticEnum::SwimOneCm;
    pub const DAMAGEDEALTABSORBED: StatisticEnum = StatisticEnum::DamageDealtAbsorbed;
    pub const DAMAGEDEALTRESISTED: StatisticEnum = StatisticEnum::DamageDealtResisted;
    pub const DAMAGEBLOCKEDBYSHIELD: StatisticEnum = StatisticEnum::DamageBlockedByShield;
    pub const DAMAGEABSORBED: StatisticEnum = StatisticEnum::DamageAbsorbed;
    pub const DAMAGERESISTED: StatisticEnum = StatisticEnum::DamageResisted;
    pub const CLEANSHULKERBOX: StatisticEnum = StatisticEnum::CleanShulkerBox;
    pub const OPENBARREL: StatisticEnum = StatisticEnum::OpenBarrel;
    pub const INTERACTWITHBLASTFURNACE: StatisticEnum = StatisticEnum::InteractWithBlastFurnace;
    pub const INTERACTWITHSMOKER: StatisticEnum = StatisticEnum::InteractWithSmoker;
    pub const INTERACTWITHLECTERN: StatisticEnum = StatisticEnum::InteractWithLectern;
    pub const INTERACTWITHCAMPFIRE: StatisticEnum = StatisticEnum::InteractWithCampfire;
    pub const INTERACTWITHCARTOGRAPHYTABLE: StatisticEnum =
        StatisticEnum::InteractWithCartographyTable;
    pub const INTERACTWITHLOOM: StatisticEnum = StatisticEnum::InteractWithLoom;
    pub const INTERACTWITHSTONECUTTER: StatisticEnum = StatisticEnum::InteractWithStonecutter;
    pub const BELLRING: StatisticEnum = StatisticEnum::BellRing;
    pub const RAIDTRIGGER: StatisticEnum = StatisticEnum::RaidTrigger;
    pub const RAIDWIN: StatisticEnum = StatisticEnum::RaidWin;
    pub const INTERACTWITHANVIL: StatisticEnum = StatisticEnum::InteractWithAnvil;
    pub const INTERACTWITHGRINDSTONE: StatisticEnum = StatisticEnum::InteractWithGrindstone;
    pub const TARGETHIT: StatisticEnum = StatisticEnum::TargetHit;
    pub const INTERACTWITHSMITHINGTABLE: StatisticEnum = StatisticEnum::InteractWithSmithingTable;
    pub const STRIDERONECM: StatisticEnum = StatisticEnum::StriderOneCm;
    pub fn from_string(str: String) -> std::option::Option<StatisticEnum> {
        match str.as_str() {
            "DAMAGE_DEALT" => Some(StatisticEnum::DamageDealt),
            "DAMAGE_TAKEN" => Some(StatisticEnum::DamageTaken),
            "DEATHS" => Some(StatisticEnum::Deaths),
            "MOB_KILLS" => Some(StatisticEnum::MobKills),
            "PLAYER_KILLS" => Some(StatisticEnum::PlayerKills),
            "FISH_CAUGHT" => Some(StatisticEnum::FishCaught),
            "ANIMALS_BRED" => Some(StatisticEnum::AnimalsBred),
            "LEAVE_GAME" => Some(StatisticEnum::LeaveGame),
            "JUMP" => Some(StatisticEnum::Jump),
            "DROP_COUNT" => Some(StatisticEnum::DropCount),
            "DROP" => Some(StatisticEnum::Drop),
            "PICKUP" => Some(StatisticEnum::Pickup),
            "PLAY_ONE_MINUTE" => Some(StatisticEnum::PlayOneMinute),
            "TOTAL_WORLD_TIME" => Some(StatisticEnum::TotalWorldTime),
            "WALK_ONE_CM" => Some(StatisticEnum::WalkOneCm),
            "WALK_ON_WATER_ONE_CM" => Some(StatisticEnum::WalkOnWaterOneCm),
            "FALL_ONE_CM" => Some(StatisticEnum::FallOneCm),
            "SNEAK_TIME" => Some(StatisticEnum::SneakTime),
            "CLIMB_ONE_CM" => Some(StatisticEnum::ClimbOneCm),
            "FLY_ONE_CM" => Some(StatisticEnum::FlyOneCm),
            "WALK_UNDER_WATER_ONE_CM" => Some(StatisticEnum::WalkUnderWaterOneCm),
            "MINECART_ONE_CM" => Some(StatisticEnum::MinecartOneCm),
            "BOAT_ONE_CM" => Some(StatisticEnum::BoatOneCm),
            "PIG_ONE_CM" => Some(StatisticEnum::PigOneCm),
            "HORSE_ONE_CM" => Some(StatisticEnum::HorseOneCm),
            "SPRINT_ONE_CM" => Some(StatisticEnum::SprintOneCm),
            "CROUCH_ONE_CM" => Some(StatisticEnum::CrouchOneCm),
            "AVIATE_ONE_CM" => Some(StatisticEnum::AviateOneCm),
            "MINE_BLOCK" => Some(StatisticEnum::MineBlock),
            "USE_ITEM" => Some(StatisticEnum::UseItem),
            "BREAK_ITEM" => Some(StatisticEnum::BreakItem),
            "CRAFT_ITEM" => Some(StatisticEnum::CraftItem),
            "KILL_ENTITY" => Some(StatisticEnum::KillEntity),
            "ENTITY_KILLED_BY" => Some(StatisticEnum::EntityKilledBy),
            "TIME_SINCE_DEATH" => Some(StatisticEnum::TimeSinceDeath),
            "TALKED_TO_VILLAGER" => Some(StatisticEnum::TalkedToVillager),
            "TRADED_WITH_VILLAGER" => Some(StatisticEnum::TradedWithVillager),
            "CAKE_SLICES_EATEN" => Some(StatisticEnum::CakeSlicesEaten),
            "CAULDRON_FILLED" => Some(StatisticEnum::CauldronFilled),
            "CAULDRON_USED" => Some(StatisticEnum::CauldronUsed),
            "ARMOR_CLEANED" => Some(StatisticEnum::ArmorCleaned),
            "BANNER_CLEANED" => Some(StatisticEnum::BannerCleaned),
            "BREWINGSTAND_INTERACTION" => Some(StatisticEnum::BrewingstandInteraction),
            "BEACON_INTERACTION" => Some(StatisticEnum::BeaconInteraction),
            "DROPPER_INSPECTED" => Some(StatisticEnum::DropperInspected),
            "HOPPER_INSPECTED" => Some(StatisticEnum::HopperInspected),
            "DISPENSER_INSPECTED" => Some(StatisticEnum::DispenserInspected),
            "NOTEBLOCK_PLAYED" => Some(StatisticEnum::NoteblockPlayed),
            "NOTEBLOCK_TUNED" => Some(StatisticEnum::NoteblockTuned),
            "FLOWER_POTTED" => Some(StatisticEnum::FlowerPotted),
            "TRAPPED_CHEST_TRIGGERED" => Some(StatisticEnum::TrappedChestTriggered),
            "ENDERCHEST_OPENED" => Some(StatisticEnum::EnderchestOpened),
            "ITEM_ENCHANTED" => Some(StatisticEnum::ItemEnchanted),
            "RECORD_PLAYED" => Some(StatisticEnum::RecordPlayed),
            "FURNACE_INTERACTION" => Some(StatisticEnum::FurnaceInteraction),
            "CRAFTING_TABLE_INTERACTION" => Some(StatisticEnum::CraftingTableInteraction),
            "CHEST_OPENED" => Some(StatisticEnum::ChestOpened),
            "SLEEP_IN_BED" => Some(StatisticEnum::SleepInBed),
            "SHULKER_BOX_OPENED" => Some(StatisticEnum::ShulkerBoxOpened),
            "TIME_SINCE_REST" => Some(StatisticEnum::TimeSinceRest),
            "SWIM_ONE_CM" => Some(StatisticEnum::SwimOneCm),
            "DAMAGE_DEALT_ABSORBED" => Some(StatisticEnum::DamageDealtAbsorbed),
            "DAMAGE_DEALT_RESISTED" => Some(StatisticEnum::DamageDealtResisted),
            "DAMAGE_BLOCKED_BY_SHIELD" => Some(StatisticEnum::DamageBlockedByShield),
            "DAMAGE_ABSORBED" => Some(StatisticEnum::DamageAbsorbed),
            "DAMAGE_RESISTED" => Some(StatisticEnum::DamageResisted),
            "CLEAN_SHULKER_BOX" => Some(StatisticEnum::CleanShulkerBox),
            "OPEN_BARREL" => Some(StatisticEnum::OpenBarrel),
            "INTERACT_WITH_BLAST_FURNACE" => Some(StatisticEnum::InteractWithBlastFurnace),
            "INTERACT_WITH_SMOKER" => Some(StatisticEnum::InteractWithSmoker),
            "INTERACT_WITH_LECTERN" => Some(StatisticEnum::InteractWithLectern),
            "INTERACT_WITH_CAMPFIRE" => Some(StatisticEnum::InteractWithCampfire),
            "INTERACT_WITH_CARTOGRAPHY_TABLE" => Some(StatisticEnum::InteractWithCartographyTable),
            "INTERACT_WITH_LOOM" => Some(StatisticEnum::InteractWithLoom),
            "INTERACT_WITH_STONECUTTER" => Some(StatisticEnum::InteractWithStonecutter),
            "BELL_RING" => Some(StatisticEnum::BellRing),
            "RAID_TRIGGER" => Some(StatisticEnum::RaidTrigger),
            "RAID_WIN" => Some(StatisticEnum::RaidWin),
            "INTERACT_WITH_ANVIL" => Some(StatisticEnum::InteractWithAnvil),
            "INTERACT_WITH_GRINDSTONE" => Some(StatisticEnum::InteractWithGrindstone),
            "TARGET_HIT" => Some(StatisticEnum::TargetHit),
            "INTERACT_WITH_SMITHING_TABLE" => Some(StatisticEnum::InteractWithSmithingTable),
            "STRIDER_ONE_CM" => Some(StatisticEnum::StriderOneCm),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Statistic<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Statistic")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Statistic;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Statistic(
                jni,
                raw_obj,
                crate::bukkit::Statistic::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_type(
        &mut self,
    ) -> Result<crate::bukkit::StatisticType<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getType",
            "()Lorg/bukkit/Statistic$Type;",
            &[],
        )?;
        let ret = {
            crate::bukkit::StatisticType(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn is_block(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isBlock", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_substatistic(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isSubstatistic", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
}
pub struct NamespacedKey<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for NamespacedKey<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> NamespacedKey<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate NamespacedKey from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("NamespacedKey") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a NamespacedKey object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn key(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn minecraft(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/NamespacedKey")?;
        let res = jni.call_static_method(
            cls,
            "minecraft",
            "(Ljava/lang/String;)Lorg/bukkit/NamespacedKey;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::NamespacedKey(jni, obj)
        };
        Ok(ret)
    }
    pub fn namespace(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getNamespace",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn random_key(
        mut jni: crate::SharedJNIEnv<'mc>,
    ) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let cls = &jni.find_class("org/bukkit/NamespacedKey")?;
        let res = jni.call_static_method(cls, "randomKey", "()Lorg/bukkit/NamespacedKey;", &[])?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::NamespacedKey(jni, obj)
        };
        Ok(ret)
    }
    pub fn from_string_with_string(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: std::option::Option<String>,
        arg1: std::option::Option<crate::bukkit::plugin::Plugin<'mc>>,
    ) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0.unwrap()).unwrap());
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.unwrap().1.clone()) };
        let cls = &jni.find_class("org/bukkit/NamespacedKey")?;
        let res = jni.call_static_method(
            cls,
            "fromString",
            "(Ljava/lang/String;Lorg/bukkit/plugin/Plugin;)Lorg/bukkit/NamespacedKey;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::NamespacedKey(jni, obj)
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
/// An instantiatable struct that implements RegionAccessor. Needed for returning it from Java.
pub struct RegionAccessor<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> RegionAccessor<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate RegionAccessor from null object.").into(),
            );
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("RegionAccessor") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a RegionAccessor object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn spawn_entity_with_location(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
        arg1: std::option::Option<crate::bukkit::entity::EntityType<'mc>>,
        arg2: std::option::Option<bool>,
    ) -> Result<crate::bukkit::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let val_1 = unsafe { jni::objects::JObject::from_raw(arg1.unwrap().1.clone()) };
        let val_2 = jni::objects::JValueGen::Bool(arg2.unwrap().into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "spawnEntity",
            "(Lorg/bukkit/Location;Lorg/bukkit/entity/EntityType;Z)Lorg/bukkit/entity/Entity;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            crate::bukkit::entity::Entity(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
}
impl<'mc> crate::JNIRaw<'mc> for RegionAccessor<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub enum WeatherTypeEnum {
    Downfall,
    Clear,
}
impl std::fmt::Display for WeatherTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            WeatherTypeEnum::Downfall => f.write_str("DOWNFALL"),
            WeatherTypeEnum::Clear => f.write_str("CLEAR"),
        }
    }
}
pub struct WeatherType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub WeatherTypeEnum,
);
impl<'mc> std::ops::Deref for WeatherType<'mc> {
    type Target = WeatherTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for WeatherType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> WeatherType<'mc> {
    pub const DOWNFALL: WeatherTypeEnum = WeatherTypeEnum::Downfall;
    pub const CLEAR: WeatherTypeEnum = WeatherTypeEnum::Clear;
    pub fn from_string(str: String) -> std::option::Option<WeatherTypeEnum> {
        match str.as_str() {
            "DOWNFALL" => Some(WeatherTypeEnum::Downfall),
            "CLEAR" => Some(WeatherTypeEnum::Clear),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::WeatherType<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/WeatherType")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/WeatherType;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::WeatherType(
                jni,
                raw_obj,
                crate::bukkit::WeatherType::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
/// An instantiatable struct that implements WorldBorder. Needed for returning it from Java.
pub struct WorldBorder<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> WorldBorder<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate WorldBorder from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("WorldBorder") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WorldBorder object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn size(&mut self) -> Result<f64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSize", "()D", &[])?;
        Ok(res.d().unwrap())
    }
    pub fn reset(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "reset", "()V", &[])?;
        Ok(())
    }
    pub fn world(&mut self) -> Result<crate::bukkit::World<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWorld",
            "()Lorg/bukkit/World;",
            &[],
        )?;
        let ret = {
            crate::bukkit::World(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn center(&mut self) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getCenter",
            "()Lorg/bukkit/Location;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Location(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn max_center_coordinate(&mut self) -> Result<f64, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getMaxCenterCoordinate", "()D", &[])?;
        Ok(res.d().unwrap())
    }
    pub fn damage_buffer(&mut self) -> Result<f64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getDamageBuffer", "()D", &[])?;
        Ok(res.d().unwrap())
    }
    pub fn set_damage_buffer(&mut self, arg0: f64) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Double(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setDamageBuffer",
            "(D)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn damage_amount(&mut self) -> Result<f64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getDamageAmount", "()D", &[])?;
        Ok(res.d().unwrap())
    }
    pub fn set_damage_amount(&mut self, arg0: f64) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Double(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setDamageAmount",
            "(D)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn warning_time(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getWarningTime", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_warning_time(&mut self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setWarningTime",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn warning_distance(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getWarningDistance", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_warning_distance(&mut self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setWarningDistance",
            "(I)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn is_inside(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isInside",
            "(Lorg/bukkit/Location;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn max_size(&mut self) -> Result<f64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getMaxSize", "()D", &[])?;
        Ok(res.d().unwrap())
    }
}
impl<'mc> crate::JNIRaw<'mc> for WorldBorder<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct ChunkLoadLevel<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for ChunkLoadLevel<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> ChunkLoadLevel<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate ChunkLoadLevel from null object.").into(),
            );
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("ChunkLoadLevel") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ChunkLoadLevel object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "name", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn describe_constable(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "describeConstable",
            "()Ljava/util/Optional;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn declaring_class(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDeclaringClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn ordinal(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "ordinal", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub enum SandstoneTypeEnum {
    Cracked,
    Glyphed,
    Smooth,
}
impl std::fmt::Display for SandstoneTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            SandstoneTypeEnum::Cracked => f.write_str("CRACKED"),
            SandstoneTypeEnum::Glyphed => f.write_str("GLYPHED"),
            SandstoneTypeEnum::Smooth => f.write_str("SMOOTH"),
        }
    }
}
pub struct SandstoneType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub SandstoneTypeEnum,
);
impl<'mc> std::ops::Deref for SandstoneType<'mc> {
    type Target = SandstoneTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for SandstoneType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> SandstoneType<'mc> {
    pub const CRACKED: SandstoneTypeEnum = SandstoneTypeEnum::Cracked;
    pub const GLYPHED: SandstoneTypeEnum = SandstoneTypeEnum::Glyphed;
    pub const SMOOTH: SandstoneTypeEnum = SandstoneTypeEnum::Smooth;
    pub fn from_string(str: String) -> std::option::Option<SandstoneTypeEnum> {
        match str.as_str() {
            "CRACKED" => Some(SandstoneTypeEnum::Cracked),
            "GLYPHED" => Some(SandstoneTypeEnum::Glyphed),
            "SMOOTH" => Some(SandstoneTypeEnum::Smooth),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::SandstoneType<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/SandstoneType")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/SandstoneType;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::SandstoneType(
                jni,
                raw_obj,
                crate::bukkit::SandstoneType::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn data(&mut self) -> Result<i8, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getData", "()B", &[])?;
        Ok(res.b().unwrap())
    }
    pub fn get_by_data(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i8,
    ) -> Result<crate::bukkit::SandstoneType<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Byte(arg0.into());
        let cls = &jni.find_class("org/bukkit/SandstoneType")?;
        let res = jni.call_static_method(
            cls,
            "getByData",
            "(B)Lorg/bukkit/SandstoneType;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::SandstoneType(
                jni,
                raw_obj,
                crate::bukkit::SandstoneType::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub enum AxisEnum {
    X,
    Y,
    Z,
}
impl std::fmt::Display for AxisEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            AxisEnum::X => f.write_str("X"),
            AxisEnum::Y => f.write_str("Y"),
            AxisEnum::Z => f.write_str("Z"),
        }
    }
}
pub struct Axis<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub AxisEnum,
);
impl<'mc> std::ops::Deref for Axis<'mc> {
    type Target = AxisEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for Axis<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Axis<'mc> {
    pub const X: AxisEnum = AxisEnum::X;
    pub const Y: AxisEnum = AxisEnum::Y;
    pub const Z: AxisEnum = AxisEnum::Z;
    pub fn from_string(str: String) -> std::option::Option<AxisEnum> {
        match str.as_str() {
            "X" => Some(AxisEnum::X),
            "Y" => Some(AxisEnum::Y),
            "Z" => Some(AxisEnum::Z),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Axis<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Axis")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Axis;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Axis(
                jni,
                raw_obj,
                crate::bukkit::Axis::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub enum TreeTypeEnum {
    Tree,
    BigTree,
    Redwood,
    TallRedwood,
    Birch,
    Jungle,
    SmallJungle,
    CocoaTree,
    JungleBush,
    RedMushroom,
    BrownMushroom,
    Swamp,
    Acacia,
    DarkOak,
    MegaRedwood,
    TallBirch,
    ChorusPlant,
    CrimsonFungus,
    WarpedFungus,
    Azalea,
    Mangrove,
    TallMangrove,
    Cherry,
}
impl std::fmt::Display for TreeTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            TreeTypeEnum::Tree => f.write_str("TREE"),
            TreeTypeEnum::BigTree => f.write_str("BIG_TREE"),
            TreeTypeEnum::Redwood => f.write_str("REDWOOD"),
            TreeTypeEnum::TallRedwood => f.write_str("TALL_REDWOOD"),
            TreeTypeEnum::Birch => f.write_str("BIRCH"),
            TreeTypeEnum::Jungle => f.write_str("JUNGLE"),
            TreeTypeEnum::SmallJungle => f.write_str("SMALL_JUNGLE"),
            TreeTypeEnum::CocoaTree => f.write_str("COCOA_TREE"),
            TreeTypeEnum::JungleBush => f.write_str("JUNGLE_BUSH"),
            TreeTypeEnum::RedMushroom => f.write_str("RED_MUSHROOM"),
            TreeTypeEnum::BrownMushroom => f.write_str("BROWN_MUSHROOM"),
            TreeTypeEnum::Swamp => f.write_str("SWAMP"),
            TreeTypeEnum::Acacia => f.write_str("ACACIA"),
            TreeTypeEnum::DarkOak => f.write_str("DARK_OAK"),
            TreeTypeEnum::MegaRedwood => f.write_str("MEGA_REDWOOD"),
            TreeTypeEnum::TallBirch => f.write_str("TALL_BIRCH"),
            TreeTypeEnum::ChorusPlant => f.write_str("CHORUS_PLANT"),
            TreeTypeEnum::CrimsonFungus => f.write_str("CRIMSON_FUNGUS"),
            TreeTypeEnum::WarpedFungus => f.write_str("WARPED_FUNGUS"),
            TreeTypeEnum::Azalea => f.write_str("AZALEA"),
            TreeTypeEnum::Mangrove => f.write_str("MANGROVE"),
            TreeTypeEnum::TallMangrove => f.write_str("TALL_MANGROVE"),
            TreeTypeEnum::Cherry => f.write_str("CHERRY"),
        }
    }
}
pub struct TreeType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub TreeTypeEnum,
);
impl<'mc> std::ops::Deref for TreeType<'mc> {
    type Target = TreeTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for TreeType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> TreeType<'mc> {
    pub const TREE: TreeTypeEnum = TreeTypeEnum::Tree;
    pub const BIGTREE: TreeTypeEnum = TreeTypeEnum::BigTree;
    pub const REDWOOD: TreeTypeEnum = TreeTypeEnum::Redwood;
    pub const TALLREDWOOD: TreeTypeEnum = TreeTypeEnum::TallRedwood;
    pub const BIRCH: TreeTypeEnum = TreeTypeEnum::Birch;
    pub const JUNGLE: TreeTypeEnum = TreeTypeEnum::Jungle;
    pub const SMALLJUNGLE: TreeTypeEnum = TreeTypeEnum::SmallJungle;
    pub const COCOATREE: TreeTypeEnum = TreeTypeEnum::CocoaTree;
    pub const JUNGLEBUSH: TreeTypeEnum = TreeTypeEnum::JungleBush;
    pub const REDMUSHROOM: TreeTypeEnum = TreeTypeEnum::RedMushroom;
    pub const BROWNMUSHROOM: TreeTypeEnum = TreeTypeEnum::BrownMushroom;
    pub const SWAMP: TreeTypeEnum = TreeTypeEnum::Swamp;
    pub const ACACIA: TreeTypeEnum = TreeTypeEnum::Acacia;
    pub const DARKOAK: TreeTypeEnum = TreeTypeEnum::DarkOak;
    pub const MEGAREDWOOD: TreeTypeEnum = TreeTypeEnum::MegaRedwood;
    pub const TALLBIRCH: TreeTypeEnum = TreeTypeEnum::TallBirch;
    pub const CHORUSPLANT: TreeTypeEnum = TreeTypeEnum::ChorusPlant;
    pub const CRIMSONFUNGUS: TreeTypeEnum = TreeTypeEnum::CrimsonFungus;
    pub const WARPEDFUNGUS: TreeTypeEnum = TreeTypeEnum::WarpedFungus;
    pub const AZALEA: TreeTypeEnum = TreeTypeEnum::Azalea;
    pub const MANGROVE: TreeTypeEnum = TreeTypeEnum::Mangrove;
    pub const TALLMANGROVE: TreeTypeEnum = TreeTypeEnum::TallMangrove;
    pub const CHERRY: TreeTypeEnum = TreeTypeEnum::Cherry;
    pub fn from_string(str: String) -> std::option::Option<TreeTypeEnum> {
        match str.as_str() {
            "TREE" => Some(TreeTypeEnum::Tree),
            "BIG_TREE" => Some(TreeTypeEnum::BigTree),
            "REDWOOD" => Some(TreeTypeEnum::Redwood),
            "TALL_REDWOOD" => Some(TreeTypeEnum::TallRedwood),
            "BIRCH" => Some(TreeTypeEnum::Birch),
            "JUNGLE" => Some(TreeTypeEnum::Jungle),
            "SMALL_JUNGLE" => Some(TreeTypeEnum::SmallJungle),
            "COCOA_TREE" => Some(TreeTypeEnum::CocoaTree),
            "JUNGLE_BUSH" => Some(TreeTypeEnum::JungleBush),
            "RED_MUSHROOM" => Some(TreeTypeEnum::RedMushroom),
            "BROWN_MUSHROOM" => Some(TreeTypeEnum::BrownMushroom),
            "SWAMP" => Some(TreeTypeEnum::Swamp),
            "ACACIA" => Some(TreeTypeEnum::Acacia),
            "DARK_OAK" => Some(TreeTypeEnum::DarkOak),
            "MEGA_REDWOOD" => Some(TreeTypeEnum::MegaRedwood),
            "TALL_BIRCH" => Some(TreeTypeEnum::TallBirch),
            "CHORUS_PLANT" => Some(TreeTypeEnum::ChorusPlant),
            "CRIMSON_FUNGUS" => Some(TreeTypeEnum::CrimsonFungus),
            "WARPED_FUNGUS" => Some(TreeTypeEnum::WarpedFungus),
            "AZALEA" => Some(TreeTypeEnum::Azalea),
            "MANGROVE" => Some(TreeTypeEnum::Mangrove),
            "TALL_MANGROVE" => Some(TreeTypeEnum::TallMangrove),
            "CHERRY" => Some(TreeTypeEnum::Cherry),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::TreeType<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/TreeType")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/TreeType;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::TreeType(
                jni,
                raw_obj,
                crate::bukkit::TreeType::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub struct Vibration<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for Vibration<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Vibration<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Vibration from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Vibration") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Vibration object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn origin(&mut self) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getOrigin",
            "()Lorg/bukkit/Location;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Location(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn destination(
        &mut self,
    ) -> Result<crate::bukkit::VibrationDestination<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDestination",
            "()Lorg/bukkit/Vibration$Destination;",
            &[],
        )?;
        let ret = {
            crate::bukkit::VibrationDestination(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn arrival_time(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getArrivalTime", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub struct RegistrySimpleRegistry<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for RegistrySimpleRegistry<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> RegistrySimpleRegistry<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate RegistrySimpleRegistry from null object."
            )
            .into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("RegistrySimpleRegistry") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a RegistrySimpleRegistry object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn get_with_namespaced_key(
        &mut self,
        arg0: std::option::Option<crate::bukkit::NamespacedKey<'mc>>,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.unwrap().1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "get",
            "(Lorg/bukkit/NamespacedKey;)Ljava/lang/Enum;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
    pub fn get_match(
        &mut self,
        arg0: String,
    ) -> Result<crate::bukkit::Keyed<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "match",
            "(Ljava/lang/String;)Lorg/bukkit/Keyed;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::Keyed(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn spliterator(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "spliterator",
            "()Ljava/util/Spliterator;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
}
pub enum MaterialEnum {
    Air,
    Stone,
    Granite,
    PolishedGranite,
    Diorite,
    PolishedDiorite,
    Andesite,
    PolishedAndesite,
    Deepslate,
    CobbledDeepslate,
    PolishedDeepslate,
    Calcite,
    Tuff,
    DripstoneBlock,
    GrassBlock,
    Dirt,
    CoarseDirt,
    Podzol,
    RootedDirt,
    Mud,
    CrimsonNylium,
    WarpedNylium,
    Cobblestone,
    OakPlanks,
    SprucePlanks,
    BirchPlanks,
    JunglePlanks,
    AcaciaPlanks,
    CherryPlanks,
    DarkOakPlanks,
    MangrovePlanks,
    BambooPlanks,
    CrimsonPlanks,
    WarpedPlanks,
    BambooMosaic,
    OakSapling,
    SpruceSapling,
    BirchSapling,
    JungleSapling,
    AcaciaSapling,
    CherrySapling,
    DarkOakSapling,
    MangrovePropagule,
    Bedrock,
    Sand,
    SuspiciousSand,
    SuspiciousGravel,
    RedSand,
    Gravel,
    CoalOre,
    DeepslateCoalOre,
    IronOre,
    DeepslateIronOre,
    CopperOre,
    DeepslateCopperOre,
    GoldOre,
    DeepslateGoldOre,
    RedstoneOre,
    DeepslateRedstoneOre,
    EmeraldOre,
    DeepslateEmeraldOre,
    LapisOre,
    DeepslateLapisOre,
    DiamondOre,
    DeepslateDiamondOre,
    NetherGoldOre,
    NetherQuartzOre,
    AncientDebris,
    CoalBlock,
    RawIronBlock,
    RawCopperBlock,
    RawGoldBlock,
    AmethystBlock,
    BuddingAmethyst,
    IronBlock,
    CopperBlock,
    GoldBlock,
    DiamondBlock,
    NetheriteBlock,
    ExposedCopper,
    WeatheredCopper,
    OxidizedCopper,
    CutCopper,
    ExposedCutCopper,
    WeatheredCutCopper,
    OxidizedCutCopper,
    CutCopperStairs,
    ExposedCutCopperStairs,
    WeatheredCutCopperStairs,
    OxidizedCutCopperStairs,
    CutCopperSlab,
    ExposedCutCopperSlab,
    WeatheredCutCopperSlab,
    OxidizedCutCopperSlab,
    WaxedCopperBlock,
    WaxedExposedCopper,
    WaxedWeatheredCopper,
    WaxedOxidizedCopper,
    WaxedCutCopper,
    WaxedExposedCutCopper,
    WaxedWeatheredCutCopper,
    WaxedOxidizedCutCopper,
    WaxedCutCopperStairs,
    WaxedExposedCutCopperStairs,
    WaxedWeatheredCutCopperStairs,
    WaxedOxidizedCutCopperStairs,
    WaxedCutCopperSlab,
    WaxedExposedCutCopperSlab,
    WaxedWeatheredCutCopperSlab,
    WaxedOxidizedCutCopperSlab,
    OakLog,
    SpruceLog,
    BirchLog,
    JungleLog,
    AcaciaLog,
    CherryLog,
    DarkOakLog,
    MangroveLog,
    MangroveRoots,
    MuddyMangroveRoots,
    CrimsonStem,
    WarpedStem,
    BambooBlock,
    StrippedOakLog,
    StrippedSpruceLog,
    StrippedBirchLog,
    StrippedJungleLog,
    StrippedAcaciaLog,
    StrippedCherryLog,
    StrippedDarkOakLog,
    StrippedMangroveLog,
    StrippedCrimsonStem,
    StrippedWarpedStem,
    StrippedOakWood,
    StrippedSpruceWood,
    StrippedBirchWood,
    StrippedJungleWood,
    StrippedAcaciaWood,
    StrippedCherryWood,
    StrippedDarkOakWood,
    StrippedMangroveWood,
    StrippedCrimsonHyphae,
    StrippedWarpedHyphae,
    StrippedBambooBlock,
    OakWood,
    SpruceWood,
    BirchWood,
    JungleWood,
    AcaciaWood,
    CherryWood,
    DarkOakWood,
    MangroveWood,
    CrimsonHyphae,
    WarpedHyphae,
    OakLeaves,
    SpruceLeaves,
    BirchLeaves,
    JungleLeaves,
    AcaciaLeaves,
    CherryLeaves,
    DarkOakLeaves,
    MangroveLeaves,
    AzaleaLeaves,
    FloweringAzaleaLeaves,
    Sponge,
    WetSponge,
    Glass,
    TintedGlass,
    LapisBlock,
    Sandstone,
    ChiseledSandstone,
    CutSandstone,
    Cobweb,
    Grass,
    Fern,
    Azalea,
    FloweringAzalea,
    DeadBush,
    Seagrass,
    SeaPickle,
    WhiteWool,
    OrangeWool,
    MagentaWool,
    LightBlueWool,
    YellowWool,
    LimeWool,
    PinkWool,
    GrayWool,
    LightGrayWool,
    CyanWool,
    PurpleWool,
    BlueWool,
    BrownWool,
    GreenWool,
    RedWool,
    BlackWool,
    Dandelion,
    Poppy,
    BlueOrchid,
    Allium,
    AzureBluet,
    RedTulip,
    OrangeTulip,
    WhiteTulip,
    PinkTulip,
    OxeyeDaisy,
    Cornflower,
    LilyOfTheValley,
    WitherRose,
    Torchflower,
    PitcherPlant,
    SporeBlossom,
    BrownMushroom,
    RedMushroom,
    CrimsonFungus,
    WarpedFungus,
    CrimsonRoots,
    WarpedRoots,
    NetherSprouts,
    WeepingVines,
    TwistingVines,
    SugarCane,
    Kelp,
    MossCarpet,
    PinkPetals,
    MossBlock,
    HangingRoots,
    BigDripleaf,
    SmallDripleaf,
    Bamboo,
    OakSlab,
    SpruceSlab,
    BirchSlab,
    JungleSlab,
    AcaciaSlab,
    CherrySlab,
    DarkOakSlab,
    MangroveSlab,
    BambooSlab,
    BambooMosaicSlab,
    CrimsonSlab,
    WarpedSlab,
    StoneSlab,
    SmoothStoneSlab,
    SandstoneSlab,
    CutSandstoneSlab,
    PetrifiedOakSlab,
    CobblestoneSlab,
    BrickSlab,
    StoneBrickSlab,
    MudBrickSlab,
    NetherBrickSlab,
    QuartzSlab,
    RedSandstoneSlab,
    CutRedSandstoneSlab,
    PurpurSlab,
    PrismarineSlab,
    PrismarineBrickSlab,
    DarkPrismarineSlab,
    SmoothQuartz,
    SmoothRedSandstone,
    SmoothSandstone,
    SmoothStone,
    Bricks,
    Bookshelf,
    ChiseledBookshelf,
    DecoratedPot,
    MossyCobblestone,
    Obsidian,
    Torch,
    EndRod,
    ChorusPlant,
    ChorusFlower,
    PurpurBlock,
    PurpurPillar,
    PurpurStairs,
    Spawner,
    Chest,
    CraftingTable,
    Farmland,
    Furnace,
    Ladder,
    CobblestoneStairs,
    Snow,
    Ice,
    SnowBlock,
    Cactus,
    Clay,
    Jukebox,
    OakFence,
    SpruceFence,
    BirchFence,
    JungleFence,
    AcaciaFence,
    CherryFence,
    DarkOakFence,
    MangroveFence,
    BambooFence,
    CrimsonFence,
    WarpedFence,
    Pumpkin,
    CarvedPumpkin,
    JackOLantern,
    Netherrack,
    SoulSand,
    SoulSoil,
    Basalt,
    PolishedBasalt,
    SmoothBasalt,
    SoulTorch,
    Glowstone,
    InfestedStone,
    InfestedCobblestone,
    InfestedStoneBricks,
    InfestedMossyStoneBricks,
    InfestedCrackedStoneBricks,
    InfestedChiseledStoneBricks,
    InfestedDeepslate,
    StoneBricks,
    MossyStoneBricks,
    CrackedStoneBricks,
    ChiseledStoneBricks,
    PackedMud,
    MudBricks,
    DeepslateBricks,
    CrackedDeepslateBricks,
    DeepslateTiles,
    CrackedDeepslateTiles,
    ChiseledDeepslate,
    ReinforcedDeepslate,
    BrownMushroomBlock,
    RedMushroomBlock,
    MushroomStem,
    IronBars,
    Chain,
    GlassPane,
    Melon,
    Vine,
    GlowLichen,
    BrickStairs,
    StoneBrickStairs,
    MudBrickStairs,
    Mycelium,
    LilyPad,
    NetherBricks,
    CrackedNetherBricks,
    ChiseledNetherBricks,
    NetherBrickFence,
    NetherBrickStairs,
    Sculk,
    SculkVein,
    SculkCatalyst,
    SculkShrieker,
    EnchantingTable,
    EndPortalFrame,
    EndStone,
    EndStoneBricks,
    DragonEgg,
    SandstoneStairs,
    EnderChest,
    EmeraldBlock,
    OakStairs,
    SpruceStairs,
    BirchStairs,
    JungleStairs,
    AcaciaStairs,
    CherryStairs,
    DarkOakStairs,
    MangroveStairs,
    BambooStairs,
    BambooMosaicStairs,
    CrimsonStairs,
    WarpedStairs,
    CommandBlock,
    Beacon,
    CobblestoneWall,
    MossyCobblestoneWall,
    BrickWall,
    PrismarineWall,
    RedSandstoneWall,
    MossyStoneBrickWall,
    GraniteWall,
    StoneBrickWall,
    MudBrickWall,
    NetherBrickWall,
    AndesiteWall,
    RedNetherBrickWall,
    SandstoneWall,
    EndStoneBrickWall,
    DioriteWall,
    BlackstoneWall,
    PolishedBlackstoneWall,
    PolishedBlackstoneBrickWall,
    CobbledDeepslateWall,
    PolishedDeepslateWall,
    DeepslateBrickWall,
    DeepslateTileWall,
    Anvil,
    ChippedAnvil,
    DamagedAnvil,
    ChiseledQuartzBlock,
    QuartzBlock,
    QuartzBricks,
    QuartzPillar,
    QuartzStairs,
    WhiteTerracotta,
    OrangeTerracotta,
    MagentaTerracotta,
    LightBlueTerracotta,
    YellowTerracotta,
    LimeTerracotta,
    PinkTerracotta,
    GrayTerracotta,
    LightGrayTerracotta,
    CyanTerracotta,
    PurpleTerracotta,
    BlueTerracotta,
    BrownTerracotta,
    GreenTerracotta,
    RedTerracotta,
    BlackTerracotta,
    Barrier,
    Light,
    HayBlock,
    WhiteCarpet,
    OrangeCarpet,
    MagentaCarpet,
    LightBlueCarpet,
    YellowCarpet,
    LimeCarpet,
    PinkCarpet,
    GrayCarpet,
    LightGrayCarpet,
    CyanCarpet,
    PurpleCarpet,
    BlueCarpet,
    BrownCarpet,
    GreenCarpet,
    RedCarpet,
    BlackCarpet,
    Terracotta,
    PackedIce,
    DirtPath,
    Sunflower,
    Lilac,
    RoseBush,
    Peony,
    TallGrass,
    LargeFern,
    WhiteStainedGlass,
    OrangeStainedGlass,
    MagentaStainedGlass,
    LightBlueStainedGlass,
    YellowStainedGlass,
    LimeStainedGlass,
    PinkStainedGlass,
    GrayStainedGlass,
    LightGrayStainedGlass,
    CyanStainedGlass,
    PurpleStainedGlass,
    BlueStainedGlass,
    BrownStainedGlass,
    GreenStainedGlass,
    RedStainedGlass,
    BlackStainedGlass,
    WhiteStainedGlassPane,
    OrangeStainedGlassPane,
    MagentaStainedGlassPane,
    LightBlueStainedGlassPane,
    YellowStainedGlassPane,
    LimeStainedGlassPane,
    PinkStainedGlassPane,
    GrayStainedGlassPane,
    LightGrayStainedGlassPane,
    CyanStainedGlassPane,
    PurpleStainedGlassPane,
    BlueStainedGlassPane,
    BrownStainedGlassPane,
    GreenStainedGlassPane,
    RedStainedGlassPane,
    BlackStainedGlassPane,
    Prismarine,
    PrismarineBricks,
    DarkPrismarine,
    PrismarineStairs,
    PrismarineBrickStairs,
    DarkPrismarineStairs,
    SeaLantern,
    RedSandstone,
    ChiseledRedSandstone,
    CutRedSandstone,
    RedSandstoneStairs,
    RepeatingCommandBlock,
    ChainCommandBlock,
    MagmaBlock,
    NetherWartBlock,
    WarpedWartBlock,
    RedNetherBricks,
    BoneBlock,
    StructureVoid,
    ShulkerBox,
    WhiteShulkerBox,
    OrangeShulkerBox,
    MagentaShulkerBox,
    LightBlueShulkerBox,
    YellowShulkerBox,
    LimeShulkerBox,
    PinkShulkerBox,
    GrayShulkerBox,
    LightGrayShulkerBox,
    CyanShulkerBox,
    PurpleShulkerBox,
    BlueShulkerBox,
    BrownShulkerBox,
    GreenShulkerBox,
    RedShulkerBox,
    BlackShulkerBox,
    WhiteGlazedTerracotta,
    OrangeGlazedTerracotta,
    MagentaGlazedTerracotta,
    LightBlueGlazedTerracotta,
    YellowGlazedTerracotta,
    LimeGlazedTerracotta,
    PinkGlazedTerracotta,
    GrayGlazedTerracotta,
    LightGrayGlazedTerracotta,
    CyanGlazedTerracotta,
    PurpleGlazedTerracotta,
    BlueGlazedTerracotta,
    BrownGlazedTerracotta,
    GreenGlazedTerracotta,
    RedGlazedTerracotta,
    BlackGlazedTerracotta,
    WhiteConcrete,
    OrangeConcrete,
    MagentaConcrete,
    LightBlueConcrete,
    YellowConcrete,
    LimeConcrete,
    PinkConcrete,
    GrayConcrete,
    LightGrayConcrete,
    CyanConcrete,
    PurpleConcrete,
    BlueConcrete,
    BrownConcrete,
    GreenConcrete,
    RedConcrete,
    BlackConcrete,
    WhiteConcretePowder,
    OrangeConcretePowder,
    MagentaConcretePowder,
    LightBlueConcretePowder,
    YellowConcretePowder,
    LimeConcretePowder,
    PinkConcretePowder,
    GrayConcretePowder,
    LightGrayConcretePowder,
    CyanConcretePowder,
    PurpleConcretePowder,
    BlueConcretePowder,
    BrownConcretePowder,
    GreenConcretePowder,
    RedConcretePowder,
    BlackConcretePowder,
    TurtleEgg,
    SnifferEgg,
    DeadTubeCoralBlock,
    DeadBrainCoralBlock,
    DeadBubbleCoralBlock,
    DeadFireCoralBlock,
    DeadHornCoralBlock,
    TubeCoralBlock,
    BrainCoralBlock,
    BubbleCoralBlock,
    FireCoralBlock,
    HornCoralBlock,
    TubeCoral,
    BrainCoral,
    BubbleCoral,
    FireCoral,
    HornCoral,
    DeadBrainCoral,
    DeadBubbleCoral,
    DeadFireCoral,
    DeadHornCoral,
    DeadTubeCoral,
    TubeCoralFan,
    BrainCoralFan,
    BubbleCoralFan,
    FireCoralFan,
    HornCoralFan,
    DeadTubeCoralFan,
    DeadBrainCoralFan,
    DeadBubbleCoralFan,
    DeadFireCoralFan,
    DeadHornCoralFan,
    BlueIce,
    Conduit,
    PolishedGraniteStairs,
    SmoothRedSandstoneStairs,
    MossyStoneBrickStairs,
    PolishedDioriteStairs,
    MossyCobblestoneStairs,
    EndStoneBrickStairs,
    StoneStairs,
    SmoothSandstoneStairs,
    SmoothQuartzStairs,
    GraniteStairs,
    AndesiteStairs,
    RedNetherBrickStairs,
    PolishedAndesiteStairs,
    DioriteStairs,
    CobbledDeepslateStairs,
    PolishedDeepslateStairs,
    DeepslateBrickStairs,
    DeepslateTileStairs,
    PolishedGraniteSlab,
    SmoothRedSandstoneSlab,
    MossyStoneBrickSlab,
    PolishedDioriteSlab,
    MossyCobblestoneSlab,
    EndStoneBrickSlab,
    SmoothSandstoneSlab,
    SmoothQuartzSlab,
    GraniteSlab,
    AndesiteSlab,
    RedNetherBrickSlab,
    PolishedAndesiteSlab,
    DioriteSlab,
    CobbledDeepslateSlab,
    PolishedDeepslateSlab,
    DeepslateBrickSlab,
    DeepslateTileSlab,
    Scaffolding,
    Redstone,
    RedstoneTorch,
    RedstoneBlock,
    Repeater,
    Comparator,
    Piston,
    StickyPiston,
    SlimeBlock,
    HoneyBlock,
    Observer,
    Hopper,
    Dispenser,
    Dropper,
    Lectern,
    Target,
    Lever,
    LightningRod,
    DaylightDetector,
    SculkSensor,
    CalibratedSculkSensor,
    TripwireHook,
    TrappedChest,
    Tnt,
    RedstoneLamp,
    NoteBlock,
    StoneButton,
    PolishedBlackstoneButton,
    OakButton,
    SpruceButton,
    BirchButton,
    JungleButton,
    AcaciaButton,
    CherryButton,
    DarkOakButton,
    MangroveButton,
    BambooButton,
    CrimsonButton,
    WarpedButton,
    StonePressurePlate,
    PolishedBlackstonePressurePlate,
    LightWeightedPressurePlate,
    HeavyWeightedPressurePlate,
    OakPressurePlate,
    SprucePressurePlate,
    BirchPressurePlate,
    JunglePressurePlate,
    AcaciaPressurePlate,
    CherryPressurePlate,
    DarkOakPressurePlate,
    MangrovePressurePlate,
    BambooPressurePlate,
    CrimsonPressurePlate,
    WarpedPressurePlate,
    IronDoor,
    OakDoor,
    SpruceDoor,
    BirchDoor,
    JungleDoor,
    AcaciaDoor,
    CherryDoor,
    DarkOakDoor,
    MangroveDoor,
    BambooDoor,
    CrimsonDoor,
    WarpedDoor,
    IronTrapdoor,
    OakTrapdoor,
    SpruceTrapdoor,
    BirchTrapdoor,
    JungleTrapdoor,
    AcaciaTrapdoor,
    CherryTrapdoor,
    DarkOakTrapdoor,
    MangroveTrapdoor,
    BambooTrapdoor,
    CrimsonTrapdoor,
    WarpedTrapdoor,
    OakFenceGate,
    SpruceFenceGate,
    BirchFenceGate,
    JungleFenceGate,
    AcaciaFenceGate,
    CherryFenceGate,
    DarkOakFenceGate,
    MangroveFenceGate,
    BambooFenceGate,
    CrimsonFenceGate,
    WarpedFenceGate,
    PoweredRail,
    DetectorRail,
    Rail,
    ActivatorRail,
    Saddle,
    Minecart,
    ChestMinecart,
    FurnaceMinecart,
    TntMinecart,
    HopperMinecart,
    CarrotOnAStick,
    WarpedFungusOnAStick,
    Elytra,
    OakBoat,
    OakChestBoat,
    SpruceBoat,
    SpruceChestBoat,
    BirchBoat,
    BirchChestBoat,
    JungleBoat,
    JungleChestBoat,
    AcaciaBoat,
    AcaciaChestBoat,
    CherryBoat,
    CherryChestBoat,
    DarkOakBoat,
    DarkOakChestBoat,
    MangroveBoat,
    MangroveChestBoat,
    BambooRaft,
    BambooChestRaft,
    StructureBlock,
    Jigsaw,
    TurtleHelmet,
    Scute,
    FlintAndSteel,
    Apple,
    Bow,
    Arrow,
    Coal,
    Charcoal,
    Diamond,
    Emerald,
    LapisLazuli,
    Quartz,
    AmethystShard,
    RawIron,
    IronIngot,
    RawCopper,
    CopperIngot,
    RawGold,
    GoldIngot,
    NetheriteIngot,
    NetheriteScrap,
    WoodenSword,
    WoodenShovel,
    WoodenPickaxe,
    WoodenAxe,
    WoodenHoe,
    StoneSword,
    StoneShovel,
    StonePickaxe,
    StoneAxe,
    StoneHoe,
    GoldenSword,
    GoldenShovel,
    GoldenPickaxe,
    GoldenAxe,
    GoldenHoe,
    IronSword,
    IronShovel,
    IronPickaxe,
    IronAxe,
    IronHoe,
    DiamondSword,
    DiamondShovel,
    DiamondPickaxe,
    DiamondAxe,
    DiamondHoe,
    NetheriteSword,
    NetheriteShovel,
    NetheritePickaxe,
    NetheriteAxe,
    NetheriteHoe,
    Stick,
    Bowl,
    MushroomStew,
    String,
    Feather,
    Gunpowder,
    WheatSeeds,
    Wheat,
    Bread,
    LeatherHelmet,
    LeatherChestplate,
    LeatherLeggings,
    LeatherBoots,
    ChainmailHelmet,
    ChainmailChestplate,
    ChainmailLeggings,
    ChainmailBoots,
    IronHelmet,
    IronChestplate,
    IronLeggings,
    IronBoots,
    DiamondHelmet,
    DiamondChestplate,
    DiamondLeggings,
    DiamondBoots,
    GoldenHelmet,
    GoldenChestplate,
    GoldenLeggings,
    GoldenBoots,
    NetheriteHelmet,
    NetheriteChestplate,
    NetheriteLeggings,
    NetheriteBoots,
    Flint,
    Porkchop,
    CookedPorkchop,
    Painting,
    GoldenApple,
    EnchantedGoldenApple,
    OakSign,
    SpruceSign,
    BirchSign,
    JungleSign,
    AcaciaSign,
    CherrySign,
    DarkOakSign,
    MangroveSign,
    BambooSign,
    CrimsonSign,
    WarpedSign,
    OakHangingSign,
    SpruceHangingSign,
    BirchHangingSign,
    JungleHangingSign,
    AcaciaHangingSign,
    CherryHangingSign,
    DarkOakHangingSign,
    MangroveHangingSign,
    BambooHangingSign,
    CrimsonHangingSign,
    WarpedHangingSign,
    Bucket,
    WaterBucket,
    LavaBucket,
    PowderSnowBucket,
    Snowball,
    Leather,
    MilkBucket,
    PufferfishBucket,
    SalmonBucket,
    CodBucket,
    TropicalFishBucket,
    AxolotlBucket,
    TadpoleBucket,
    Brick,
    ClayBall,
    DriedKelpBlock,
    Paper,
    Book,
    SlimeBall,
    Egg,
    Compass,
    RecoveryCompass,
    Bundle,
    FishingRod,
    Clock,
    Spyglass,
    GlowstoneDust,
    Cod,
    Salmon,
    TropicalFish,
    Pufferfish,
    CookedCod,
    CookedSalmon,
    InkSac,
    GlowInkSac,
    CocoaBeans,
    WhiteDye,
    OrangeDye,
    MagentaDye,
    LightBlueDye,
    YellowDye,
    LimeDye,
    PinkDye,
    GrayDye,
    LightGrayDye,
    CyanDye,
    PurpleDye,
    BlueDye,
    BrownDye,
    GreenDye,
    RedDye,
    BlackDye,
    BoneMeal,
    Bone,
    Sugar,
    Cake,
    WhiteBed,
    OrangeBed,
    MagentaBed,
    LightBlueBed,
    YellowBed,
    LimeBed,
    PinkBed,
    GrayBed,
    LightGrayBed,
    CyanBed,
    PurpleBed,
    BlueBed,
    BrownBed,
    GreenBed,
    RedBed,
    BlackBed,
    Cookie,
    FilledMap,
    Shears,
    MelonSlice,
    DriedKelp,
    PumpkinSeeds,
    MelonSeeds,
    Beef,
    CookedBeef,
    Chicken,
    CookedChicken,
    RottenFlesh,
    EnderPearl,
    BlazeRod,
    GhastTear,
    GoldNugget,
    NetherWart,
    Potion,
    GlassBottle,
    SpiderEye,
    FermentedSpiderEye,
    BlazePowder,
    MagmaCream,
    BrewingStand,
    Cauldron,
    EnderEye,
    GlisteringMelonSlice,
    AllaySpawnEgg,
    AxolotlSpawnEgg,
    BatSpawnEgg,
    BeeSpawnEgg,
    BlazeSpawnEgg,
    CatSpawnEgg,
    CamelSpawnEgg,
    CaveSpiderSpawnEgg,
    ChickenSpawnEgg,
    CodSpawnEgg,
    CowSpawnEgg,
    CreeperSpawnEgg,
    DolphinSpawnEgg,
    DonkeySpawnEgg,
    DrownedSpawnEgg,
    ElderGuardianSpawnEgg,
    EnderDragonSpawnEgg,
    EndermanSpawnEgg,
    EndermiteSpawnEgg,
    EvokerSpawnEgg,
    FoxSpawnEgg,
    FrogSpawnEgg,
    GhastSpawnEgg,
    GlowSquidSpawnEgg,
    GoatSpawnEgg,
    GuardianSpawnEgg,
    HoglinSpawnEgg,
    HorseSpawnEgg,
    HuskSpawnEgg,
    IronGolemSpawnEgg,
    LlamaSpawnEgg,
    MagmaCubeSpawnEgg,
    MooshroomSpawnEgg,
    MuleSpawnEgg,
    OcelotSpawnEgg,
    PandaSpawnEgg,
    ParrotSpawnEgg,
    PhantomSpawnEgg,
    PigSpawnEgg,
    PiglinSpawnEgg,
    PiglinBruteSpawnEgg,
    PillagerSpawnEgg,
    PolarBearSpawnEgg,
    PufferfishSpawnEgg,
    RabbitSpawnEgg,
    RavagerSpawnEgg,
    SalmonSpawnEgg,
    SheepSpawnEgg,
    ShulkerSpawnEgg,
    SilverfishSpawnEgg,
    SkeletonSpawnEgg,
    SkeletonHorseSpawnEgg,
    SlimeSpawnEgg,
    SnifferSpawnEgg,
    SnowGolemSpawnEgg,
    SpiderSpawnEgg,
    SquidSpawnEgg,
    StraySpawnEgg,
    StriderSpawnEgg,
    TadpoleSpawnEgg,
    TraderLlamaSpawnEgg,
    TropicalFishSpawnEgg,
    TurtleSpawnEgg,
    VexSpawnEgg,
    VillagerSpawnEgg,
    VindicatorSpawnEgg,
    WanderingTraderSpawnEgg,
    WardenSpawnEgg,
    WitchSpawnEgg,
    WitherSpawnEgg,
    WitherSkeletonSpawnEgg,
    WolfSpawnEgg,
    ZoglinSpawnEgg,
    ZombieSpawnEgg,
    ZombieHorseSpawnEgg,
    ZombieVillagerSpawnEgg,
    ZombifiedPiglinSpawnEgg,
    ExperienceBottle,
    FireCharge,
    WritableBook,
    WrittenBook,
    ItemFrame,
    GlowItemFrame,
    FlowerPot,
    Carrot,
    Potato,
    BakedPotato,
    PoisonousPotato,
    Map,
    GoldenCarrot,
    SkeletonSkull,
    WitherSkeletonSkull,
    PlayerHead,
    ZombieHead,
    CreeperHead,
    DragonHead,
    PiglinHead,
    NetherStar,
    PumpkinPie,
    FireworkRocket,
    FireworkStar,
    EnchantedBook,
    NetherBrick,
    PrismarineShard,
    PrismarineCrystals,
    Rabbit,
    CookedRabbit,
    RabbitStew,
    RabbitFoot,
    RabbitHide,
    ArmorStand,
    IronHorseArmor,
    GoldenHorseArmor,
    DiamondHorseArmor,
    LeatherHorseArmor,
    Lead,
    NameTag,
    CommandBlockMinecart,
    Mutton,
    CookedMutton,
    WhiteBanner,
    OrangeBanner,
    MagentaBanner,
    LightBlueBanner,
    YellowBanner,
    LimeBanner,
    PinkBanner,
    GrayBanner,
    LightGrayBanner,
    CyanBanner,
    PurpleBanner,
    BlueBanner,
    BrownBanner,
    GreenBanner,
    RedBanner,
    BlackBanner,
    EndCrystal,
    ChorusFruit,
    PoppedChorusFruit,
    TorchflowerSeeds,
    PitcherPod,
    Beetroot,
    BeetrootSeeds,
    BeetrootSoup,
    DragonBreath,
    SplashPotion,
    SpectralArrow,
    TippedArrow,
    LingeringPotion,
    Shield,
    TotemOfUndying,
    ShulkerShell,
    IronNugget,
    KnowledgeBook,
    DebugStick,
    MusicDisc13,
    MusicDiscCat,
    MusicDiscBlocks,
    MusicDiscChirp,
    MusicDiscFar,
    MusicDiscMall,
    MusicDiscMellohi,
    MusicDiscStal,
    MusicDiscStrad,
    MusicDiscWard,
    MusicDisc11,
    MusicDiscWait,
    MusicDiscOtherside,
    MusicDiscRelic,
    MusicDisc5,
    MusicDiscPigstep,
    DiscFragment5,
    Trident,
    PhantomMembrane,
    NautilusShell,
    HeartOfTheSea,
    Crossbow,
    SuspiciousStew,
    Loom,
    FlowerBannerPattern,
    CreeperBannerPattern,
    SkullBannerPattern,
    MojangBannerPattern,
    GlobeBannerPattern,
    PiglinBannerPattern,
    GoatHorn,
    Composter,
    Barrel,
    Smoker,
    BlastFurnace,
    CartographyTable,
    FletchingTable,
    Grindstone,
    SmithingTable,
    Stonecutter,
    Bell,
    Lantern,
    SoulLantern,
    SweetBerries,
    GlowBerries,
    Campfire,
    SoulCampfire,
    Shroomlight,
    Honeycomb,
    BeeNest,
    Beehive,
    HoneyBottle,
    HoneycombBlock,
    Lodestone,
    CryingObsidian,
    Blackstone,
    BlackstoneSlab,
    BlackstoneStairs,
    GildedBlackstone,
    PolishedBlackstone,
    PolishedBlackstoneSlab,
    PolishedBlackstoneStairs,
    ChiseledPolishedBlackstone,
    PolishedBlackstoneBricks,
    PolishedBlackstoneBrickSlab,
    PolishedBlackstoneBrickStairs,
    CrackedPolishedBlackstoneBricks,
    RespawnAnchor,
    Candle,
    WhiteCandle,
    OrangeCandle,
    MagentaCandle,
    LightBlueCandle,
    YellowCandle,
    LimeCandle,
    PinkCandle,
    GrayCandle,
    LightGrayCandle,
    CyanCandle,
    PurpleCandle,
    BlueCandle,
    BrownCandle,
    GreenCandle,
    RedCandle,
    BlackCandle,
    SmallAmethystBud,
    MediumAmethystBud,
    LargeAmethystBud,
    AmethystCluster,
    PointedDripstone,
    OchreFroglight,
    VerdantFroglight,
    PearlescentFroglight,
    Frogspawn,
    EchoShard,
    Brush,
    NetheriteUpgradeSmithingTemplate,
    SentryArmorTrimSmithingTemplate,
    DuneArmorTrimSmithingTemplate,
    CoastArmorTrimSmithingTemplate,
    WildArmorTrimSmithingTemplate,
    WardArmorTrimSmithingTemplate,
    EyeArmorTrimSmithingTemplate,
    VexArmorTrimSmithingTemplate,
    TideArmorTrimSmithingTemplate,
    SnoutArmorTrimSmithingTemplate,
    RibArmorTrimSmithingTemplate,
    SpireArmorTrimSmithingTemplate,
    WayfinderArmorTrimSmithingTemplate,
    ShaperArmorTrimSmithingTemplate,
    SilenceArmorTrimSmithingTemplate,
    RaiserArmorTrimSmithingTemplate,
    HostArmorTrimSmithingTemplate,
    AnglerPotterySherd,
    ArcherPotterySherd,
    ArmsUpPotterySherd,
    BladePotterySherd,
    BrewerPotterySherd,
    BurnPotterySherd,
    DangerPotterySherd,
    ExplorerPotterySherd,
    FriendPotterySherd,
    HeartPotterySherd,
    HeartbreakPotterySherd,
    HowlPotterySherd,
    MinerPotterySherd,
    MournerPotterySherd,
    PlentyPotterySherd,
    PrizePotterySherd,
    SheafPotterySherd,
    ShelterPotterySherd,
    SkullPotterySherd,
    SnortPotterySherd,
    Water,
    Lava,
    TallSeagrass,
    PistonHead,
    MovingPiston,
    WallTorch,
    Fire,
    SoulFire,
    RedstoneWire,
    OakWallSign,
    SpruceWallSign,
    BirchWallSign,
    AcaciaWallSign,
    CherryWallSign,
    JungleWallSign,
    DarkOakWallSign,
    MangroveWallSign,
    BambooWallSign,
    OakWallHangingSign,
    SpruceWallHangingSign,
    BirchWallHangingSign,
    AcaciaWallHangingSign,
    CherryWallHangingSign,
    JungleWallHangingSign,
    DarkOakWallHangingSign,
    MangroveWallHangingSign,
    CrimsonWallHangingSign,
    WarpedWallHangingSign,
    BambooWallHangingSign,
    RedstoneWallTorch,
    SoulWallTorch,
    NetherPortal,
    AttachedPumpkinStem,
    AttachedMelonStem,
    PumpkinStem,
    MelonStem,
    WaterCauldron,
    LavaCauldron,
    PowderSnowCauldron,
    EndPortal,
    Cocoa,
    Tripwire,
    PottedTorchflower,
    PottedOakSapling,
    PottedSpruceSapling,
    PottedBirchSapling,
    PottedJungleSapling,
    PottedAcaciaSapling,
    PottedCherrySapling,
    PottedDarkOakSapling,
    PottedMangrovePropagule,
    PottedFern,
    PottedDandelion,
    PottedPoppy,
    PottedBlueOrchid,
    PottedAllium,
    PottedAzureBluet,
    PottedRedTulip,
    PottedOrangeTulip,
    PottedWhiteTulip,
    PottedPinkTulip,
    PottedOxeyeDaisy,
    PottedCornflower,
    PottedLilyOfTheValley,
    PottedWitherRose,
    PottedRedMushroom,
    PottedBrownMushroom,
    PottedDeadBush,
    PottedCactus,
    Carrots,
    Potatoes,
    SkeletonWallSkull,
    WitherSkeletonWallSkull,
    ZombieWallHead,
    PlayerWallHead,
    CreeperWallHead,
    DragonWallHead,
    PiglinWallHead,
    WhiteWallBanner,
    OrangeWallBanner,
    MagentaWallBanner,
    LightBlueWallBanner,
    YellowWallBanner,
    LimeWallBanner,
    PinkWallBanner,
    GrayWallBanner,
    LightGrayWallBanner,
    CyanWallBanner,
    PurpleWallBanner,
    BlueWallBanner,
    BrownWallBanner,
    GreenWallBanner,
    RedWallBanner,
    BlackWallBanner,
    TorchflowerCrop,
    PitcherCrop,
    Beetroots,
    EndGateway,
    FrostedIce,
    KelpPlant,
    DeadTubeCoralWallFan,
    DeadBrainCoralWallFan,
    DeadBubbleCoralWallFan,
    DeadFireCoralWallFan,
    DeadHornCoralWallFan,
    TubeCoralWallFan,
    BrainCoralWallFan,
    BubbleCoralWallFan,
    FireCoralWallFan,
    HornCoralWallFan,
    BambooSapling,
    PottedBamboo,
    VoidAir,
    CaveAir,
    BubbleColumn,
    SweetBerryBush,
    WeepingVinesPlant,
    TwistingVinesPlant,
    CrimsonWallSign,
    WarpedWallSign,
    PottedCrimsonFungus,
    PottedWarpedFungus,
    PottedCrimsonRoots,
    PottedWarpedRoots,
    CandleCake,
    WhiteCandleCake,
    OrangeCandleCake,
    MagentaCandleCake,
    LightBlueCandleCake,
    YellowCandleCake,
    LimeCandleCake,
    PinkCandleCake,
    GrayCandleCake,
    LightGrayCandleCake,
    CyanCandleCake,
    PurpleCandleCake,
    BlueCandleCake,
    BrownCandleCake,
    GreenCandleCake,
    RedCandleCake,
    BlackCandleCake,
    PowderSnow,
    CaveVines,
    CaveVinesPlant,
    BigDripleafStem,
    PottedAzaleaBush,
    PottedFloweringAzaleaBush,
    LegacyAir,
    LegacyStone,
    LegacyGrass,
    LegacyDirt,
    LegacyCobblestone,
    LegacyWood,
    LegacySapling,
    LegacyBedrock,
    LegacyWater,
    LegacyStationaryWater,
    LegacyLava,
    LegacyStationaryLava,
    LegacySand,
    LegacyGravel,
    LegacyGoldOre,
    LegacyIronOre,
    LegacyCoalOre,
    LegacyLog,
    LegacyLeaves,
    LegacySponge,
    LegacyGlass,
    LegacyLapisOre,
    LegacyLapisBlock,
    LegacyDispenser,
    LegacySandstone,
    LegacyNoteBlock,
    LegacyBedBlock,
    LegacyPoweredRail,
    LegacyDetectorRail,
    LegacyPistonStickyBase,
    LegacyWeb,
    LegacyLongGrass,
    LegacyDeadBush,
    LegacyPistonBase,
    LegacyPistonExtension,
    LegacyWool,
    LegacyPistonMovingPiece,
    LegacyYellowFlower,
    LegacyRedRose,
    LegacyBrownMushroom,
    LegacyRedMushroom,
    LegacyGoldBlock,
    LegacyIronBlock,
    LegacyDoubleStep,
    LegacyStep,
    LegacyBrick,
    LegacyTnt,
    LegacyBookshelf,
    LegacyMossyCobblestone,
    LegacyObsidian,
    LegacyTorch,
    LegacyFire,
    LegacyMobSpawner,
    LegacyWoodStairs,
    LegacyChest,
    LegacyRedstoneWire,
    LegacyDiamondOre,
    LegacyDiamondBlock,
    LegacyWorkbench,
    LegacyCrops,
    LegacySoil,
    LegacyFurnace,
    LegacyBurningFurnace,
    LegacySignPost,
    LegacyWoodenDoor,
    LegacyLadder,
    LegacyRails,
    LegacyCobblestoneStairs,
    LegacyWallSign,
    LegacyLever,
    LegacyStonePlate,
    LegacyIronDoorBlock,
    LegacyWoodPlate,
    LegacyRedstoneOre,
    LegacyGlowingRedstoneOre,
    LegacyRedstoneTorchOff,
    LegacyRedstoneTorchOn,
    LegacyStoneButton,
    LegacySnow,
    LegacyIce,
    LegacySnowBlock,
    LegacyCactus,
    LegacyClay,
    LegacySugarCaneBlock,
    LegacyJukebox,
    LegacyFence,
    LegacyPumpkin,
    LegacyNetherrack,
    LegacySoulSand,
    LegacyGlowstone,
    LegacyPortal,
    LegacyJackOLantern,
    LegacyCakeBlock,
    LegacyDiodeBlockOff,
    LegacyDiodeBlockOn,
    LegacyStainedGlass,
    LegacyTrapDoor,
    LegacyMonsterEggs,
    LegacySmoothBrick,
    LegacyHugeMushroom1,
    LegacyHugeMushroom2,
    LegacyIronFence,
    LegacyThinGlass,
    LegacyMelonBlock,
    LegacyPumpkinStem,
    LegacyMelonStem,
    LegacyVine,
    LegacyFenceGate,
    LegacyBrickStairs,
    LegacySmoothStairs,
    LegacyMycel,
    LegacyWaterLily,
    LegacyNetherBrick,
    LegacyNetherFence,
    LegacyNetherBrickStairs,
    LegacyNetherWarts,
    LegacyEnchantmentTable,
    LegacyBrewingStand,
    LegacyCauldron,
    LegacyEnderPortal,
    LegacyEnderPortalFrame,
    LegacyEnderStone,
    LegacyDragonEgg,
    LegacyRedstoneLampOff,
    LegacyRedstoneLampOn,
    LegacyWoodDoubleStep,
    LegacyWoodStep,
    LegacyCocoa,
    LegacySandstoneStairs,
    LegacyEmeraldOre,
    LegacyEnderChest,
    LegacyTripwireHook,
    LegacyTripwire,
    LegacyEmeraldBlock,
    LegacySpruceWoodStairs,
    LegacyBirchWoodStairs,
    LegacyJungleWoodStairs,
    LegacyCommand,
    LegacyBeacon,
    LegacyCobbleWall,
    LegacyFlowerPot,
    LegacyCarrot,
    LegacyPotato,
    LegacyWoodButton,
    LegacySkull,
    LegacyAnvil,
    LegacyTrappedChest,
    LegacyGoldPlate,
    LegacyIronPlate,
    LegacyRedstoneComparatorOff,
    LegacyRedstoneComparatorOn,
    LegacyDaylightDetector,
    LegacyRedstoneBlock,
    LegacyQuartzOre,
    LegacyHopper,
    LegacyQuartzBlock,
    LegacyQuartzStairs,
    LegacyActivatorRail,
    LegacyDropper,
    LegacyStainedClay,
    LegacyStainedGlassPane,
    LegacyLeaves2,
    LegacyLog2,
    LegacyAcaciaStairs,
    LegacyDarkOakStairs,
    LegacySlimeBlock,
    LegacyBarrier,
    LegacyIronTrapdoor,
    LegacyPrismarine,
    LegacySeaLantern,
    LegacyHayBlock,
    LegacyCarpet,
    LegacyHardClay,
    LegacyCoalBlock,
    LegacyPackedIce,
    LegacyDoublePlant,
    LegacyStandingBanner,
    LegacyWallBanner,
    LegacyDaylightDetectorInverted,
    LegacyRedSandstone,
    LegacyRedSandstoneStairs,
    LegacyDoubleStoneSlab2,
    LegacyStoneSlab2,
    LegacySpruceFenceGate,
    LegacyBirchFenceGate,
    LegacyJungleFenceGate,
    LegacyDarkOakFenceGate,
    LegacyAcaciaFenceGate,
    LegacySpruceFence,
    LegacyBirchFence,
    LegacyJungleFence,
    LegacyDarkOakFence,
    LegacyAcaciaFence,
    LegacySpruceDoor,
    LegacyBirchDoor,
    LegacyJungleDoor,
    LegacyAcaciaDoor,
    LegacyDarkOakDoor,
    LegacyEndRod,
    LegacyChorusPlant,
    LegacyChorusFlower,
    LegacyPurpurBlock,
    LegacyPurpurPillar,
    LegacyPurpurStairs,
    LegacyPurpurDoubleSlab,
    LegacyPurpurSlab,
    LegacyEndBricks,
    LegacyBeetrootBlock,
    LegacyGrassPath,
    LegacyEndGateway,
    LegacyCommandRepeating,
    LegacyCommandChain,
    LegacyFrostedIce,
    LegacyMagma,
    LegacyNetherWartBlock,
    LegacyRedNetherBrick,
    LegacyBoneBlock,
    LegacyStructureVoid,
    LegacyObserver,
    LegacyWhiteShulkerBox,
    LegacyOrangeShulkerBox,
    LegacyMagentaShulkerBox,
    LegacyLightBlueShulkerBox,
    LegacyYellowShulkerBox,
    LegacyLimeShulkerBox,
    LegacyPinkShulkerBox,
    LegacyGrayShulkerBox,
    LegacySilverShulkerBox,
    LegacyCyanShulkerBox,
    LegacyPurpleShulkerBox,
    LegacyBlueShulkerBox,
    LegacyBrownShulkerBox,
    LegacyGreenShulkerBox,
    LegacyRedShulkerBox,
    LegacyBlackShulkerBox,
    LegacyWhiteGlazedTerracotta,
    LegacyOrangeGlazedTerracotta,
    LegacyMagentaGlazedTerracotta,
    LegacyLightBlueGlazedTerracotta,
    LegacyYellowGlazedTerracotta,
    LegacyLimeGlazedTerracotta,
    LegacyPinkGlazedTerracotta,
    LegacyGrayGlazedTerracotta,
    LegacySilverGlazedTerracotta,
    LegacyCyanGlazedTerracotta,
    LegacyPurpleGlazedTerracotta,
    LegacyBlueGlazedTerracotta,
    LegacyBrownGlazedTerracotta,
    LegacyGreenGlazedTerracotta,
    LegacyRedGlazedTerracotta,
    LegacyBlackGlazedTerracotta,
    LegacyConcrete,
    LegacyConcretePowder,
    LegacyStructureBlock,
    LegacyIronSpade,
    LegacyIronPickaxe,
    LegacyIronAxe,
    LegacyFlintAndSteel,
    LegacyApple,
    LegacyBow,
    LegacyArrow,
    LegacyCoal,
    LegacyDiamond,
    LegacyIronIngot,
    LegacyGoldIngot,
    LegacyIronSword,
    LegacyWoodSword,
    LegacyWoodSpade,
    LegacyWoodPickaxe,
    LegacyWoodAxe,
    LegacyStoneSword,
    LegacyStoneSpade,
    LegacyStonePickaxe,
    LegacyStoneAxe,
    LegacyDiamondSword,
    LegacyDiamondSpade,
    LegacyDiamondPickaxe,
    LegacyDiamondAxe,
    LegacyStick,
    LegacyBowl,
    LegacyMushroomSoup,
    LegacyGoldSword,
    LegacyGoldSpade,
    LegacyGoldPickaxe,
    LegacyGoldAxe,
    LegacyString,
    LegacyFeather,
    LegacySulphur,
    LegacyWoodHoe,
    LegacyStoneHoe,
    LegacyIronHoe,
    LegacyDiamondHoe,
    LegacyGoldHoe,
    LegacySeeds,
    LegacyWheat,
    LegacyBread,
    LegacyLeatherHelmet,
    LegacyLeatherChestplate,
    LegacyLeatherLeggings,
    LegacyLeatherBoots,
    LegacyChainmailHelmet,
    LegacyChainmailChestplate,
    LegacyChainmailLeggings,
    LegacyChainmailBoots,
    LegacyIronHelmet,
    LegacyIronChestplate,
    LegacyIronLeggings,
    LegacyIronBoots,
    LegacyDiamondHelmet,
    LegacyDiamondChestplate,
    LegacyDiamondLeggings,
    LegacyDiamondBoots,
    LegacyGoldHelmet,
    LegacyGoldChestplate,
    LegacyGoldLeggings,
    LegacyGoldBoots,
    LegacyFlint,
    LegacyPork,
    LegacyGrilledPork,
    LegacyPainting,
    LegacyGoldenApple,
    LegacySign,
    LegacyWoodDoor,
    LegacyBucket,
    LegacyWaterBucket,
    LegacyLavaBucket,
    LegacyMinecart,
    LegacySaddle,
    LegacyIronDoor,
    LegacyRedstone,
    LegacySnowBall,
    LegacyBoat,
    LegacyLeather,
    LegacyMilkBucket,
    LegacyClayBrick,
    LegacyClayBall,
    LegacySugarCane,
    LegacyPaper,
    LegacyBook,
    LegacySlimeBall,
    LegacyStorageMinecart,
    LegacyPoweredMinecart,
    LegacyEgg,
    LegacyCompass,
    LegacyFishingRod,
    LegacyWatch,
    LegacyGlowstoneDust,
    LegacyRawFish,
    LegacyCookedFish,
    LegacyInkSack,
    LegacyBone,
    LegacySugar,
    LegacyCake,
    LegacyBed,
    LegacyDiode,
    LegacyCookie,
    LegacyMap,
    LegacyShears,
    LegacyMelon,
    LegacyPumpkinSeeds,
    LegacyMelonSeeds,
    LegacyRawBeef,
    LegacyCookedBeef,
    LegacyRawChicken,
    LegacyCookedChicken,
    LegacyRottenFlesh,
    LegacyEnderPearl,
    LegacyBlazeRod,
    LegacyGhastTear,
    LegacyGoldNugget,
    LegacyNetherStalk,
    LegacyPotion,
    LegacyGlassBottle,
    LegacySpiderEye,
    LegacyFermentedSpiderEye,
    LegacyBlazePowder,
    LegacyMagmaCream,
    LegacyBrewingStandItem,
    LegacyCauldronItem,
    LegacyEyeOfEnder,
    LegacySpeckledMelon,
    LegacyMonsterEgg,
    LegacyExpBottle,
    LegacyFireball,
    LegacyBookAndQuill,
    LegacyWrittenBook,
    LegacyEmerald,
    LegacyItemFrame,
    LegacyFlowerPotItem,
    LegacyCarrotItem,
    LegacyPotatoItem,
    LegacyBakedPotato,
    LegacyPoisonousPotato,
    LegacyEmptyMap,
    LegacyGoldenCarrot,
    LegacySkullItem,
    LegacyCarrotStick,
    LegacyNetherStar,
    LegacyPumpkinPie,
    LegacyFirework,
    LegacyFireworkCharge,
    LegacyEnchantedBook,
    LegacyRedstoneComparator,
    LegacyNetherBrickItem,
    LegacyQuartz,
    LegacyExplosiveMinecart,
    LegacyHopperMinecart,
    LegacyPrismarineShard,
    LegacyPrismarineCrystals,
    LegacyRabbit,
    LegacyCookedRabbit,
    LegacyRabbitStew,
    LegacyRabbitFoot,
    LegacyRabbitHide,
    LegacyArmorStand,
    LegacyIronBarding,
    LegacyGoldBarding,
    LegacyDiamondBarding,
    LegacyLeash,
    LegacyNameTag,
    LegacyCommandMinecart,
    LegacyMutton,
    LegacyCookedMutton,
    LegacyBanner,
    LegacyEndCrystal,
    LegacySpruceDoorItem,
    LegacyBirchDoorItem,
    LegacyJungleDoorItem,
    LegacyAcaciaDoorItem,
    LegacyDarkOakDoorItem,
    LegacyChorusFruit,
    LegacyChorusFruitPopped,
    LegacyBeetroot,
    LegacyBeetrootSeeds,
    LegacyBeetrootSoup,
    LegacyDragonsBreath,
    LegacySplashPotion,
    LegacySpectralArrow,
    LegacyTippedArrow,
    LegacyLingeringPotion,
    LegacyShield,
    LegacyElytra,
    LegacyBoatSpruce,
    LegacyBoatBirch,
    LegacyBoatJungle,
    LegacyBoatAcacia,
    LegacyBoatDarkOak,
    LegacyTotem,
    LegacyShulkerShell,
    LegacyIronNugget,
    LegacyKnowledgeBook,
    LegacyGoldRecord,
    LegacyGreenRecord,
    LegacyRecord3,
    LegacyRecord4,
    LegacyRecord5,
    LegacyRecord6,
    LegacyRecord7,
    LegacyRecord8,
    LegacyRecord9,
    LegacyRecord10,
    LegacyRecord11,
    LegacyRecord12,
}
impl std::fmt::Display for MaterialEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            MaterialEnum::Air => f.write_str("AIR"),
            MaterialEnum::Stone => f.write_str("STONE"),
            MaterialEnum::Granite => f.write_str("GRANITE"),
            MaterialEnum::PolishedGranite => f.write_str("POLISHED_GRANITE"),
            MaterialEnum::Diorite => f.write_str("DIORITE"),
            MaterialEnum::PolishedDiorite => f.write_str("POLISHED_DIORITE"),
            MaterialEnum::Andesite => f.write_str("ANDESITE"),
            MaterialEnum::PolishedAndesite => f.write_str("POLISHED_ANDESITE"),
            MaterialEnum::Deepslate => f.write_str("DEEPSLATE"),
            MaterialEnum::CobbledDeepslate => f.write_str("COBBLED_DEEPSLATE"),
            MaterialEnum::PolishedDeepslate => f.write_str("POLISHED_DEEPSLATE"),
            MaterialEnum::Calcite => f.write_str("CALCITE"),
            MaterialEnum::Tuff => f.write_str("TUFF"),
            MaterialEnum::DripstoneBlock => f.write_str("DRIPSTONE_BLOCK"),
            MaterialEnum::GrassBlock => f.write_str("GRASS_BLOCK"),
            MaterialEnum::Dirt => f.write_str("DIRT"),
            MaterialEnum::CoarseDirt => f.write_str("COARSE_DIRT"),
            MaterialEnum::Podzol => f.write_str("PODZOL"),
            MaterialEnum::RootedDirt => f.write_str("ROOTED_DIRT"),
            MaterialEnum::Mud => f.write_str("MUD"),
            MaterialEnum::CrimsonNylium => f.write_str("CRIMSON_NYLIUM"),
            MaterialEnum::WarpedNylium => f.write_str("WARPED_NYLIUM"),
            MaterialEnum::Cobblestone => f.write_str("COBBLESTONE"),
            MaterialEnum::OakPlanks => f.write_str("OAK_PLANKS"),
            MaterialEnum::SprucePlanks => f.write_str("SPRUCE_PLANKS"),
            MaterialEnum::BirchPlanks => f.write_str("BIRCH_PLANKS"),
            MaterialEnum::JunglePlanks => f.write_str("JUNGLE_PLANKS"),
            MaterialEnum::AcaciaPlanks => f.write_str("ACACIA_PLANKS"),
            MaterialEnum::CherryPlanks => f.write_str("CHERRY_PLANKS"),
            MaterialEnum::DarkOakPlanks => f.write_str("DARK_OAK_PLANKS"),
            MaterialEnum::MangrovePlanks => f.write_str("MANGROVE_PLANKS"),
            MaterialEnum::BambooPlanks => f.write_str("BAMBOO_PLANKS"),
            MaterialEnum::CrimsonPlanks => f.write_str("CRIMSON_PLANKS"),
            MaterialEnum::WarpedPlanks => f.write_str("WARPED_PLANKS"),
            MaterialEnum::BambooMosaic => f.write_str("BAMBOO_MOSAIC"),
            MaterialEnum::OakSapling => f.write_str("OAK_SAPLING"),
            MaterialEnum::SpruceSapling => f.write_str("SPRUCE_SAPLING"),
            MaterialEnum::BirchSapling => f.write_str("BIRCH_SAPLING"),
            MaterialEnum::JungleSapling => f.write_str("JUNGLE_SAPLING"),
            MaterialEnum::AcaciaSapling => f.write_str("ACACIA_SAPLING"),
            MaterialEnum::CherrySapling => f.write_str("CHERRY_SAPLING"),
            MaterialEnum::DarkOakSapling => f.write_str("DARK_OAK_SAPLING"),
            MaterialEnum::MangrovePropagule => f.write_str("MANGROVE_PROPAGULE"),
            MaterialEnum::Bedrock => f.write_str("BEDROCK"),
            MaterialEnum::Sand => f.write_str("SAND"),
            MaterialEnum::SuspiciousSand => f.write_str("SUSPICIOUS_SAND"),
            MaterialEnum::SuspiciousGravel => f.write_str("SUSPICIOUS_GRAVEL"),
            MaterialEnum::RedSand => f.write_str("RED_SAND"),
            MaterialEnum::Gravel => f.write_str("GRAVEL"),
            MaterialEnum::CoalOre => f.write_str("COAL_ORE"),
            MaterialEnum::DeepslateCoalOre => f.write_str("DEEPSLATE_COAL_ORE"),
            MaterialEnum::IronOre => f.write_str("IRON_ORE"),
            MaterialEnum::DeepslateIronOre => f.write_str("DEEPSLATE_IRON_ORE"),
            MaterialEnum::CopperOre => f.write_str("COPPER_ORE"),
            MaterialEnum::DeepslateCopperOre => f.write_str("DEEPSLATE_COPPER_ORE"),
            MaterialEnum::GoldOre => f.write_str("GOLD_ORE"),
            MaterialEnum::DeepslateGoldOre => f.write_str("DEEPSLATE_GOLD_ORE"),
            MaterialEnum::RedstoneOre => f.write_str("REDSTONE_ORE"),
            MaterialEnum::DeepslateRedstoneOre => f.write_str("DEEPSLATE_REDSTONE_ORE"),
            MaterialEnum::EmeraldOre => f.write_str("EMERALD_ORE"),
            MaterialEnum::DeepslateEmeraldOre => f.write_str("DEEPSLATE_EMERALD_ORE"),
            MaterialEnum::LapisOre => f.write_str("LAPIS_ORE"),
            MaterialEnum::DeepslateLapisOre => f.write_str("DEEPSLATE_LAPIS_ORE"),
            MaterialEnum::DiamondOre => f.write_str("DIAMOND_ORE"),
            MaterialEnum::DeepslateDiamondOre => f.write_str("DEEPSLATE_DIAMOND_ORE"),
            MaterialEnum::NetherGoldOre => f.write_str("NETHER_GOLD_ORE"),
            MaterialEnum::NetherQuartzOre => f.write_str("NETHER_QUARTZ_ORE"),
            MaterialEnum::AncientDebris => f.write_str("ANCIENT_DEBRIS"),
            MaterialEnum::CoalBlock => f.write_str("COAL_BLOCK"),
            MaterialEnum::RawIronBlock => f.write_str("RAW_IRON_BLOCK"),
            MaterialEnum::RawCopperBlock => f.write_str("RAW_COPPER_BLOCK"),
            MaterialEnum::RawGoldBlock => f.write_str("RAW_GOLD_BLOCK"),
            MaterialEnum::AmethystBlock => f.write_str("AMETHYST_BLOCK"),
            MaterialEnum::BuddingAmethyst => f.write_str("BUDDING_AMETHYST"),
            MaterialEnum::IronBlock => f.write_str("IRON_BLOCK"),
            MaterialEnum::CopperBlock => f.write_str("COPPER_BLOCK"),
            MaterialEnum::GoldBlock => f.write_str("GOLD_BLOCK"),
            MaterialEnum::DiamondBlock => f.write_str("DIAMOND_BLOCK"),
            MaterialEnum::NetheriteBlock => f.write_str("NETHERITE_BLOCK"),
            MaterialEnum::ExposedCopper => f.write_str("EXPOSED_COPPER"),
            MaterialEnum::WeatheredCopper => f.write_str("WEATHERED_COPPER"),
            MaterialEnum::OxidizedCopper => f.write_str("OXIDIZED_COPPER"),
            MaterialEnum::CutCopper => f.write_str("CUT_COPPER"),
            MaterialEnum::ExposedCutCopper => f.write_str("EXPOSED_CUT_COPPER"),
            MaterialEnum::WeatheredCutCopper => f.write_str("WEATHERED_CUT_COPPER"),
            MaterialEnum::OxidizedCutCopper => f.write_str("OXIDIZED_CUT_COPPER"),
            MaterialEnum::CutCopperStairs => f.write_str("CUT_COPPER_STAIRS"),
            MaterialEnum::ExposedCutCopperStairs => f.write_str("EXPOSED_CUT_COPPER_STAIRS"),
            MaterialEnum::WeatheredCutCopperStairs => f.write_str("WEATHERED_CUT_COPPER_STAIRS"),
            MaterialEnum::OxidizedCutCopperStairs => f.write_str("OXIDIZED_CUT_COPPER_STAIRS"),
            MaterialEnum::CutCopperSlab => f.write_str("CUT_COPPER_SLAB"),
            MaterialEnum::ExposedCutCopperSlab => f.write_str("EXPOSED_CUT_COPPER_SLAB"),
            MaterialEnum::WeatheredCutCopperSlab => f.write_str("WEATHERED_CUT_COPPER_SLAB"),
            MaterialEnum::OxidizedCutCopperSlab => f.write_str("OXIDIZED_CUT_COPPER_SLAB"),
            MaterialEnum::WaxedCopperBlock => f.write_str("WAXED_COPPER_BLOCK"),
            MaterialEnum::WaxedExposedCopper => f.write_str("WAXED_EXPOSED_COPPER"),
            MaterialEnum::WaxedWeatheredCopper => f.write_str("WAXED_WEATHERED_COPPER"),
            MaterialEnum::WaxedOxidizedCopper => f.write_str("WAXED_OXIDIZED_COPPER"),
            MaterialEnum::WaxedCutCopper => f.write_str("WAXED_CUT_COPPER"),
            MaterialEnum::WaxedExposedCutCopper => f.write_str("WAXED_EXPOSED_CUT_COPPER"),
            MaterialEnum::WaxedWeatheredCutCopper => f.write_str("WAXED_WEATHERED_CUT_COPPER"),
            MaterialEnum::WaxedOxidizedCutCopper => f.write_str("WAXED_OXIDIZED_CUT_COPPER"),
            MaterialEnum::WaxedCutCopperStairs => f.write_str("WAXED_CUT_COPPER_STAIRS"),
            MaterialEnum::WaxedExposedCutCopperStairs => {
                f.write_str("WAXED_EXPOSED_CUT_COPPER_STAIRS")
            }
            MaterialEnum::WaxedWeatheredCutCopperStairs => {
                f.write_str("WAXED_WEATHERED_CUT_COPPER_STAIRS")
            }
            MaterialEnum::WaxedOxidizedCutCopperStairs => {
                f.write_str("WAXED_OXIDIZED_CUT_COPPER_STAIRS")
            }
            MaterialEnum::WaxedCutCopperSlab => f.write_str("WAXED_CUT_COPPER_SLAB"),
            MaterialEnum::WaxedExposedCutCopperSlab => f.write_str("WAXED_EXPOSED_CUT_COPPER_SLAB"),
            MaterialEnum::WaxedWeatheredCutCopperSlab => {
                f.write_str("WAXED_WEATHERED_CUT_COPPER_SLAB")
            }
            MaterialEnum::WaxedOxidizedCutCopperSlab => {
                f.write_str("WAXED_OXIDIZED_CUT_COPPER_SLAB")
            }
            MaterialEnum::OakLog => f.write_str("OAK_LOG"),
            MaterialEnum::SpruceLog => f.write_str("SPRUCE_LOG"),
            MaterialEnum::BirchLog => f.write_str("BIRCH_LOG"),
            MaterialEnum::JungleLog => f.write_str("JUNGLE_LOG"),
            MaterialEnum::AcaciaLog => f.write_str("ACACIA_LOG"),
            MaterialEnum::CherryLog => f.write_str("CHERRY_LOG"),
            MaterialEnum::DarkOakLog => f.write_str("DARK_OAK_LOG"),
            MaterialEnum::MangroveLog => f.write_str("MANGROVE_LOG"),
            MaterialEnum::MangroveRoots => f.write_str("MANGROVE_ROOTS"),
            MaterialEnum::MuddyMangroveRoots => f.write_str("MUDDY_MANGROVE_ROOTS"),
            MaterialEnum::CrimsonStem => f.write_str("CRIMSON_STEM"),
            MaterialEnum::WarpedStem => f.write_str("WARPED_STEM"),
            MaterialEnum::BambooBlock => f.write_str("BAMBOO_BLOCK"),
            MaterialEnum::StrippedOakLog => f.write_str("STRIPPED_OAK_LOG"),
            MaterialEnum::StrippedSpruceLog => f.write_str("STRIPPED_SPRUCE_LOG"),
            MaterialEnum::StrippedBirchLog => f.write_str("STRIPPED_BIRCH_LOG"),
            MaterialEnum::StrippedJungleLog => f.write_str("STRIPPED_JUNGLE_LOG"),
            MaterialEnum::StrippedAcaciaLog => f.write_str("STRIPPED_ACACIA_LOG"),
            MaterialEnum::StrippedCherryLog => f.write_str("STRIPPED_CHERRY_LOG"),
            MaterialEnum::StrippedDarkOakLog => f.write_str("STRIPPED_DARK_OAK_LOG"),
            MaterialEnum::StrippedMangroveLog => f.write_str("STRIPPED_MANGROVE_LOG"),
            MaterialEnum::StrippedCrimsonStem => f.write_str("STRIPPED_CRIMSON_STEM"),
            MaterialEnum::StrippedWarpedStem => f.write_str("STRIPPED_WARPED_STEM"),
            MaterialEnum::StrippedOakWood => f.write_str("STRIPPED_OAK_WOOD"),
            MaterialEnum::StrippedSpruceWood => f.write_str("STRIPPED_SPRUCE_WOOD"),
            MaterialEnum::StrippedBirchWood => f.write_str("STRIPPED_BIRCH_WOOD"),
            MaterialEnum::StrippedJungleWood => f.write_str("STRIPPED_JUNGLE_WOOD"),
            MaterialEnum::StrippedAcaciaWood => f.write_str("STRIPPED_ACACIA_WOOD"),
            MaterialEnum::StrippedCherryWood => f.write_str("STRIPPED_CHERRY_WOOD"),
            MaterialEnum::StrippedDarkOakWood => f.write_str("STRIPPED_DARK_OAK_WOOD"),
            MaterialEnum::StrippedMangroveWood => f.write_str("STRIPPED_MANGROVE_WOOD"),
            MaterialEnum::StrippedCrimsonHyphae => f.write_str("STRIPPED_CRIMSON_HYPHAE"),
            MaterialEnum::StrippedWarpedHyphae => f.write_str("STRIPPED_WARPED_HYPHAE"),
            MaterialEnum::StrippedBambooBlock => f.write_str("STRIPPED_BAMBOO_BLOCK"),
            MaterialEnum::OakWood => f.write_str("OAK_WOOD"),
            MaterialEnum::SpruceWood => f.write_str("SPRUCE_WOOD"),
            MaterialEnum::BirchWood => f.write_str("BIRCH_WOOD"),
            MaterialEnum::JungleWood => f.write_str("JUNGLE_WOOD"),
            MaterialEnum::AcaciaWood => f.write_str("ACACIA_WOOD"),
            MaterialEnum::CherryWood => f.write_str("CHERRY_WOOD"),
            MaterialEnum::DarkOakWood => f.write_str("DARK_OAK_WOOD"),
            MaterialEnum::MangroveWood => f.write_str("MANGROVE_WOOD"),
            MaterialEnum::CrimsonHyphae => f.write_str("CRIMSON_HYPHAE"),
            MaterialEnum::WarpedHyphae => f.write_str("WARPED_HYPHAE"),
            MaterialEnum::OakLeaves => f.write_str("OAK_LEAVES"),
            MaterialEnum::SpruceLeaves => f.write_str("SPRUCE_LEAVES"),
            MaterialEnum::BirchLeaves => f.write_str("BIRCH_LEAVES"),
            MaterialEnum::JungleLeaves => f.write_str("JUNGLE_LEAVES"),
            MaterialEnum::AcaciaLeaves => f.write_str("ACACIA_LEAVES"),
            MaterialEnum::CherryLeaves => f.write_str("CHERRY_LEAVES"),
            MaterialEnum::DarkOakLeaves => f.write_str("DARK_OAK_LEAVES"),
            MaterialEnum::MangroveLeaves => f.write_str("MANGROVE_LEAVES"),
            MaterialEnum::AzaleaLeaves => f.write_str("AZALEA_LEAVES"),
            MaterialEnum::FloweringAzaleaLeaves => f.write_str("FLOWERING_AZALEA_LEAVES"),
            MaterialEnum::Sponge => f.write_str("SPONGE"),
            MaterialEnum::WetSponge => f.write_str("WET_SPONGE"),
            MaterialEnum::Glass => f.write_str("GLASS"),
            MaterialEnum::TintedGlass => f.write_str("TINTED_GLASS"),
            MaterialEnum::LapisBlock => f.write_str("LAPIS_BLOCK"),
            MaterialEnum::Sandstone => f.write_str("SANDSTONE"),
            MaterialEnum::ChiseledSandstone => f.write_str("CHISELED_SANDSTONE"),
            MaterialEnum::CutSandstone => f.write_str("CUT_SANDSTONE"),
            MaterialEnum::Cobweb => f.write_str("COBWEB"),
            MaterialEnum::Grass => f.write_str("GRASS"),
            MaterialEnum::Fern => f.write_str("FERN"),
            MaterialEnum::Azalea => f.write_str("AZALEA"),
            MaterialEnum::FloweringAzalea => f.write_str("FLOWERING_AZALEA"),
            MaterialEnum::DeadBush => f.write_str("DEAD_BUSH"),
            MaterialEnum::Seagrass => f.write_str("SEAGRASS"),
            MaterialEnum::SeaPickle => f.write_str("SEA_PICKLE"),
            MaterialEnum::WhiteWool => f.write_str("WHITE_WOOL"),
            MaterialEnum::OrangeWool => f.write_str("ORANGE_WOOL"),
            MaterialEnum::MagentaWool => f.write_str("MAGENTA_WOOL"),
            MaterialEnum::LightBlueWool => f.write_str("LIGHT_BLUE_WOOL"),
            MaterialEnum::YellowWool => f.write_str("YELLOW_WOOL"),
            MaterialEnum::LimeWool => f.write_str("LIME_WOOL"),
            MaterialEnum::PinkWool => f.write_str("PINK_WOOL"),
            MaterialEnum::GrayWool => f.write_str("GRAY_WOOL"),
            MaterialEnum::LightGrayWool => f.write_str("LIGHT_GRAY_WOOL"),
            MaterialEnum::CyanWool => f.write_str("CYAN_WOOL"),
            MaterialEnum::PurpleWool => f.write_str("PURPLE_WOOL"),
            MaterialEnum::BlueWool => f.write_str("BLUE_WOOL"),
            MaterialEnum::BrownWool => f.write_str("BROWN_WOOL"),
            MaterialEnum::GreenWool => f.write_str("GREEN_WOOL"),
            MaterialEnum::RedWool => f.write_str("RED_WOOL"),
            MaterialEnum::BlackWool => f.write_str("BLACK_WOOL"),
            MaterialEnum::Dandelion => f.write_str("DANDELION"),
            MaterialEnum::Poppy => f.write_str("POPPY"),
            MaterialEnum::BlueOrchid => f.write_str("BLUE_ORCHID"),
            MaterialEnum::Allium => f.write_str("ALLIUM"),
            MaterialEnum::AzureBluet => f.write_str("AZURE_BLUET"),
            MaterialEnum::RedTulip => f.write_str("RED_TULIP"),
            MaterialEnum::OrangeTulip => f.write_str("ORANGE_TULIP"),
            MaterialEnum::WhiteTulip => f.write_str("WHITE_TULIP"),
            MaterialEnum::PinkTulip => f.write_str("PINK_TULIP"),
            MaterialEnum::OxeyeDaisy => f.write_str("OXEYE_DAISY"),
            MaterialEnum::Cornflower => f.write_str("CORNFLOWER"),
            MaterialEnum::LilyOfTheValley => f.write_str("LILY_OF_THE_VALLEY"),
            MaterialEnum::WitherRose => f.write_str("WITHER_ROSE"),
            MaterialEnum::Torchflower => f.write_str("TORCHFLOWER"),
            MaterialEnum::PitcherPlant => f.write_str("PITCHER_PLANT"),
            MaterialEnum::SporeBlossom => f.write_str("SPORE_BLOSSOM"),
            MaterialEnum::BrownMushroom => f.write_str("BROWN_MUSHROOM"),
            MaterialEnum::RedMushroom => f.write_str("RED_MUSHROOM"),
            MaterialEnum::CrimsonFungus => f.write_str("CRIMSON_FUNGUS"),
            MaterialEnum::WarpedFungus => f.write_str("WARPED_FUNGUS"),
            MaterialEnum::CrimsonRoots => f.write_str("CRIMSON_ROOTS"),
            MaterialEnum::WarpedRoots => f.write_str("WARPED_ROOTS"),
            MaterialEnum::NetherSprouts => f.write_str("NETHER_SPROUTS"),
            MaterialEnum::WeepingVines => f.write_str("WEEPING_VINES"),
            MaterialEnum::TwistingVines => f.write_str("TWISTING_VINES"),
            MaterialEnum::SugarCane => f.write_str("SUGAR_CANE"),
            MaterialEnum::Kelp => f.write_str("KELP"),
            MaterialEnum::MossCarpet => f.write_str("MOSS_CARPET"),
            MaterialEnum::PinkPetals => f.write_str("PINK_PETALS"),
            MaterialEnum::MossBlock => f.write_str("MOSS_BLOCK"),
            MaterialEnum::HangingRoots => f.write_str("HANGING_ROOTS"),
            MaterialEnum::BigDripleaf => f.write_str("BIG_DRIPLEAF"),
            MaterialEnum::SmallDripleaf => f.write_str("SMALL_DRIPLEAF"),
            MaterialEnum::Bamboo => f.write_str("BAMBOO"),
            MaterialEnum::OakSlab => f.write_str("OAK_SLAB"),
            MaterialEnum::SpruceSlab => f.write_str("SPRUCE_SLAB"),
            MaterialEnum::BirchSlab => f.write_str("BIRCH_SLAB"),
            MaterialEnum::JungleSlab => f.write_str("JUNGLE_SLAB"),
            MaterialEnum::AcaciaSlab => f.write_str("ACACIA_SLAB"),
            MaterialEnum::CherrySlab => f.write_str("CHERRY_SLAB"),
            MaterialEnum::DarkOakSlab => f.write_str("DARK_OAK_SLAB"),
            MaterialEnum::MangroveSlab => f.write_str("MANGROVE_SLAB"),
            MaterialEnum::BambooSlab => f.write_str("BAMBOO_SLAB"),
            MaterialEnum::BambooMosaicSlab => f.write_str("BAMBOO_MOSAIC_SLAB"),
            MaterialEnum::CrimsonSlab => f.write_str("CRIMSON_SLAB"),
            MaterialEnum::WarpedSlab => f.write_str("WARPED_SLAB"),
            MaterialEnum::StoneSlab => f.write_str("STONE_SLAB"),
            MaterialEnum::SmoothStoneSlab => f.write_str("SMOOTH_STONE_SLAB"),
            MaterialEnum::SandstoneSlab => f.write_str("SANDSTONE_SLAB"),
            MaterialEnum::CutSandstoneSlab => f.write_str("CUT_SANDSTONE_SLAB"),
            MaterialEnum::PetrifiedOakSlab => f.write_str("PETRIFIED_OAK_SLAB"),
            MaterialEnum::CobblestoneSlab => f.write_str("COBBLESTONE_SLAB"),
            MaterialEnum::BrickSlab => f.write_str("BRICK_SLAB"),
            MaterialEnum::StoneBrickSlab => f.write_str("STONE_BRICK_SLAB"),
            MaterialEnum::MudBrickSlab => f.write_str("MUD_BRICK_SLAB"),
            MaterialEnum::NetherBrickSlab => f.write_str("NETHER_BRICK_SLAB"),
            MaterialEnum::QuartzSlab => f.write_str("QUARTZ_SLAB"),
            MaterialEnum::RedSandstoneSlab => f.write_str("RED_SANDSTONE_SLAB"),
            MaterialEnum::CutRedSandstoneSlab => f.write_str("CUT_RED_SANDSTONE_SLAB"),
            MaterialEnum::PurpurSlab => f.write_str("PURPUR_SLAB"),
            MaterialEnum::PrismarineSlab => f.write_str("PRISMARINE_SLAB"),
            MaterialEnum::PrismarineBrickSlab => f.write_str("PRISMARINE_BRICK_SLAB"),
            MaterialEnum::DarkPrismarineSlab => f.write_str("DARK_PRISMARINE_SLAB"),
            MaterialEnum::SmoothQuartz => f.write_str("SMOOTH_QUARTZ"),
            MaterialEnum::SmoothRedSandstone => f.write_str("SMOOTH_RED_SANDSTONE"),
            MaterialEnum::SmoothSandstone => f.write_str("SMOOTH_SANDSTONE"),
            MaterialEnum::SmoothStone => f.write_str("SMOOTH_STONE"),
            MaterialEnum::Bricks => f.write_str("BRICKS"),
            MaterialEnum::Bookshelf => f.write_str("BOOKSHELF"),
            MaterialEnum::ChiseledBookshelf => f.write_str("CHISELED_BOOKSHELF"),
            MaterialEnum::DecoratedPot => f.write_str("DECORATED_POT"),
            MaterialEnum::MossyCobblestone => f.write_str("MOSSY_COBBLESTONE"),
            MaterialEnum::Obsidian => f.write_str("OBSIDIAN"),
            MaterialEnum::Torch => f.write_str("TORCH"),
            MaterialEnum::EndRod => f.write_str("END_ROD"),
            MaterialEnum::ChorusPlant => f.write_str("CHORUS_PLANT"),
            MaterialEnum::ChorusFlower => f.write_str("CHORUS_FLOWER"),
            MaterialEnum::PurpurBlock => f.write_str("PURPUR_BLOCK"),
            MaterialEnum::PurpurPillar => f.write_str("PURPUR_PILLAR"),
            MaterialEnum::PurpurStairs => f.write_str("PURPUR_STAIRS"),
            MaterialEnum::Spawner => f.write_str("SPAWNER"),
            MaterialEnum::Chest => f.write_str("CHEST"),
            MaterialEnum::CraftingTable => f.write_str("CRAFTING_TABLE"),
            MaterialEnum::Farmland => f.write_str("FARMLAND"),
            MaterialEnum::Furnace => f.write_str("FURNACE"),
            MaterialEnum::Ladder => f.write_str("LADDER"),
            MaterialEnum::CobblestoneStairs => f.write_str("COBBLESTONE_STAIRS"),
            MaterialEnum::Snow => f.write_str("SNOW"),
            MaterialEnum::Ice => f.write_str("ICE"),
            MaterialEnum::SnowBlock => f.write_str("SNOW_BLOCK"),
            MaterialEnum::Cactus => f.write_str("CACTUS"),
            MaterialEnum::Clay => f.write_str("CLAY"),
            MaterialEnum::Jukebox => f.write_str("JUKEBOX"),
            MaterialEnum::OakFence => f.write_str("OAK_FENCE"),
            MaterialEnum::SpruceFence => f.write_str("SPRUCE_FENCE"),
            MaterialEnum::BirchFence => f.write_str("BIRCH_FENCE"),
            MaterialEnum::JungleFence => f.write_str("JUNGLE_FENCE"),
            MaterialEnum::AcaciaFence => f.write_str("ACACIA_FENCE"),
            MaterialEnum::CherryFence => f.write_str("CHERRY_FENCE"),
            MaterialEnum::DarkOakFence => f.write_str("DARK_OAK_FENCE"),
            MaterialEnum::MangroveFence => f.write_str("MANGROVE_FENCE"),
            MaterialEnum::BambooFence => f.write_str("BAMBOO_FENCE"),
            MaterialEnum::CrimsonFence => f.write_str("CRIMSON_FENCE"),
            MaterialEnum::WarpedFence => f.write_str("WARPED_FENCE"),
            MaterialEnum::Pumpkin => f.write_str("PUMPKIN"),
            MaterialEnum::CarvedPumpkin => f.write_str("CARVED_PUMPKIN"),
            MaterialEnum::JackOLantern => f.write_str("JACK_O_LANTERN"),
            MaterialEnum::Netherrack => f.write_str("NETHERRACK"),
            MaterialEnum::SoulSand => f.write_str("SOUL_SAND"),
            MaterialEnum::SoulSoil => f.write_str("SOUL_SOIL"),
            MaterialEnum::Basalt => f.write_str("BASALT"),
            MaterialEnum::PolishedBasalt => f.write_str("POLISHED_BASALT"),
            MaterialEnum::SmoothBasalt => f.write_str("SMOOTH_BASALT"),
            MaterialEnum::SoulTorch => f.write_str("SOUL_TORCH"),
            MaterialEnum::Glowstone => f.write_str("GLOWSTONE"),
            MaterialEnum::InfestedStone => f.write_str("INFESTED_STONE"),
            MaterialEnum::InfestedCobblestone => f.write_str("INFESTED_COBBLESTONE"),
            MaterialEnum::InfestedStoneBricks => f.write_str("INFESTED_STONE_BRICKS"),
            MaterialEnum::InfestedMossyStoneBricks => f.write_str("INFESTED_MOSSY_STONE_BRICKS"),
            MaterialEnum::InfestedCrackedStoneBricks => {
                f.write_str("INFESTED_CRACKED_STONE_BRICKS")
            }
            MaterialEnum::InfestedChiseledStoneBricks => {
                f.write_str("INFESTED_CHISELED_STONE_BRICKS")
            }
            MaterialEnum::InfestedDeepslate => f.write_str("INFESTED_DEEPSLATE"),
            MaterialEnum::StoneBricks => f.write_str("STONE_BRICKS"),
            MaterialEnum::MossyStoneBricks => f.write_str("MOSSY_STONE_BRICKS"),
            MaterialEnum::CrackedStoneBricks => f.write_str("CRACKED_STONE_BRICKS"),
            MaterialEnum::ChiseledStoneBricks => f.write_str("CHISELED_STONE_BRICKS"),
            MaterialEnum::PackedMud => f.write_str("PACKED_MUD"),
            MaterialEnum::MudBricks => f.write_str("MUD_BRICKS"),
            MaterialEnum::DeepslateBricks => f.write_str("DEEPSLATE_BRICKS"),
            MaterialEnum::CrackedDeepslateBricks => f.write_str("CRACKED_DEEPSLATE_BRICKS"),
            MaterialEnum::DeepslateTiles => f.write_str("DEEPSLATE_TILES"),
            MaterialEnum::CrackedDeepslateTiles => f.write_str("CRACKED_DEEPSLATE_TILES"),
            MaterialEnum::ChiseledDeepslate => f.write_str("CHISELED_DEEPSLATE"),
            MaterialEnum::ReinforcedDeepslate => f.write_str("REINFORCED_DEEPSLATE"),
            MaterialEnum::BrownMushroomBlock => f.write_str("BROWN_MUSHROOM_BLOCK"),
            MaterialEnum::RedMushroomBlock => f.write_str("RED_MUSHROOM_BLOCK"),
            MaterialEnum::MushroomStem => f.write_str("MUSHROOM_STEM"),
            MaterialEnum::IronBars => f.write_str("IRON_BARS"),
            MaterialEnum::Chain => f.write_str("CHAIN"),
            MaterialEnum::GlassPane => f.write_str("GLASS_PANE"),
            MaterialEnum::Melon => f.write_str("MELON"),
            MaterialEnum::Vine => f.write_str("VINE"),
            MaterialEnum::GlowLichen => f.write_str("GLOW_LICHEN"),
            MaterialEnum::BrickStairs => f.write_str("BRICK_STAIRS"),
            MaterialEnum::StoneBrickStairs => f.write_str("STONE_BRICK_STAIRS"),
            MaterialEnum::MudBrickStairs => f.write_str("MUD_BRICK_STAIRS"),
            MaterialEnum::Mycelium => f.write_str("MYCELIUM"),
            MaterialEnum::LilyPad => f.write_str("LILY_PAD"),
            MaterialEnum::NetherBricks => f.write_str("NETHER_BRICKS"),
            MaterialEnum::CrackedNetherBricks => f.write_str("CRACKED_NETHER_BRICKS"),
            MaterialEnum::ChiseledNetherBricks => f.write_str("CHISELED_NETHER_BRICKS"),
            MaterialEnum::NetherBrickFence => f.write_str("NETHER_BRICK_FENCE"),
            MaterialEnum::NetherBrickStairs => f.write_str("NETHER_BRICK_STAIRS"),
            MaterialEnum::Sculk => f.write_str("SCULK"),
            MaterialEnum::SculkVein => f.write_str("SCULK_VEIN"),
            MaterialEnum::SculkCatalyst => f.write_str("SCULK_CATALYST"),
            MaterialEnum::SculkShrieker => f.write_str("SCULK_SHRIEKER"),
            MaterialEnum::EnchantingTable => f.write_str("ENCHANTING_TABLE"),
            MaterialEnum::EndPortalFrame => f.write_str("END_PORTAL_FRAME"),
            MaterialEnum::EndStone => f.write_str("END_STONE"),
            MaterialEnum::EndStoneBricks => f.write_str("END_STONE_BRICKS"),
            MaterialEnum::DragonEgg => f.write_str("DRAGON_EGG"),
            MaterialEnum::SandstoneStairs => f.write_str("SANDSTONE_STAIRS"),
            MaterialEnum::EnderChest => f.write_str("ENDER_CHEST"),
            MaterialEnum::EmeraldBlock => f.write_str("EMERALD_BLOCK"),
            MaterialEnum::OakStairs => f.write_str("OAK_STAIRS"),
            MaterialEnum::SpruceStairs => f.write_str("SPRUCE_STAIRS"),
            MaterialEnum::BirchStairs => f.write_str("BIRCH_STAIRS"),
            MaterialEnum::JungleStairs => f.write_str("JUNGLE_STAIRS"),
            MaterialEnum::AcaciaStairs => f.write_str("ACACIA_STAIRS"),
            MaterialEnum::CherryStairs => f.write_str("CHERRY_STAIRS"),
            MaterialEnum::DarkOakStairs => f.write_str("DARK_OAK_STAIRS"),
            MaterialEnum::MangroveStairs => f.write_str("MANGROVE_STAIRS"),
            MaterialEnum::BambooStairs => f.write_str("BAMBOO_STAIRS"),
            MaterialEnum::BambooMosaicStairs => f.write_str("BAMBOO_MOSAIC_STAIRS"),
            MaterialEnum::CrimsonStairs => f.write_str("CRIMSON_STAIRS"),
            MaterialEnum::WarpedStairs => f.write_str("WARPED_STAIRS"),
            MaterialEnum::CommandBlock => f.write_str("COMMAND_BLOCK"),
            MaterialEnum::Beacon => f.write_str("BEACON"),
            MaterialEnum::CobblestoneWall => f.write_str("COBBLESTONE_WALL"),
            MaterialEnum::MossyCobblestoneWall => f.write_str("MOSSY_COBBLESTONE_WALL"),
            MaterialEnum::BrickWall => f.write_str("BRICK_WALL"),
            MaterialEnum::PrismarineWall => f.write_str("PRISMARINE_WALL"),
            MaterialEnum::RedSandstoneWall => f.write_str("RED_SANDSTONE_WALL"),
            MaterialEnum::MossyStoneBrickWall => f.write_str("MOSSY_STONE_BRICK_WALL"),
            MaterialEnum::GraniteWall => f.write_str("GRANITE_WALL"),
            MaterialEnum::StoneBrickWall => f.write_str("STONE_BRICK_WALL"),
            MaterialEnum::MudBrickWall => f.write_str("MUD_BRICK_WALL"),
            MaterialEnum::NetherBrickWall => f.write_str("NETHER_BRICK_WALL"),
            MaterialEnum::AndesiteWall => f.write_str("ANDESITE_WALL"),
            MaterialEnum::RedNetherBrickWall => f.write_str("RED_NETHER_BRICK_WALL"),
            MaterialEnum::SandstoneWall => f.write_str("SANDSTONE_WALL"),
            MaterialEnum::EndStoneBrickWall => f.write_str("END_STONE_BRICK_WALL"),
            MaterialEnum::DioriteWall => f.write_str("DIORITE_WALL"),
            MaterialEnum::BlackstoneWall => f.write_str("BLACKSTONE_WALL"),
            MaterialEnum::PolishedBlackstoneWall => f.write_str("POLISHED_BLACKSTONE_WALL"),
            MaterialEnum::PolishedBlackstoneBrickWall => {
                f.write_str("POLISHED_BLACKSTONE_BRICK_WALL")
            }
            MaterialEnum::CobbledDeepslateWall => f.write_str("COBBLED_DEEPSLATE_WALL"),
            MaterialEnum::PolishedDeepslateWall => f.write_str("POLISHED_DEEPSLATE_WALL"),
            MaterialEnum::DeepslateBrickWall => f.write_str("DEEPSLATE_BRICK_WALL"),
            MaterialEnum::DeepslateTileWall => f.write_str("DEEPSLATE_TILE_WALL"),
            MaterialEnum::Anvil => f.write_str("ANVIL"),
            MaterialEnum::ChippedAnvil => f.write_str("CHIPPED_ANVIL"),
            MaterialEnum::DamagedAnvil => f.write_str("DAMAGED_ANVIL"),
            MaterialEnum::ChiseledQuartzBlock => f.write_str("CHISELED_QUARTZ_BLOCK"),
            MaterialEnum::QuartzBlock => f.write_str("QUARTZ_BLOCK"),
            MaterialEnum::QuartzBricks => f.write_str("QUARTZ_BRICKS"),
            MaterialEnum::QuartzPillar => f.write_str("QUARTZ_PILLAR"),
            MaterialEnum::QuartzStairs => f.write_str("QUARTZ_STAIRS"),
            MaterialEnum::WhiteTerracotta => f.write_str("WHITE_TERRACOTTA"),
            MaterialEnum::OrangeTerracotta => f.write_str("ORANGE_TERRACOTTA"),
            MaterialEnum::MagentaTerracotta => f.write_str("MAGENTA_TERRACOTTA"),
            MaterialEnum::LightBlueTerracotta => f.write_str("LIGHT_BLUE_TERRACOTTA"),
            MaterialEnum::YellowTerracotta => f.write_str("YELLOW_TERRACOTTA"),
            MaterialEnum::LimeTerracotta => f.write_str("LIME_TERRACOTTA"),
            MaterialEnum::PinkTerracotta => f.write_str("PINK_TERRACOTTA"),
            MaterialEnum::GrayTerracotta => f.write_str("GRAY_TERRACOTTA"),
            MaterialEnum::LightGrayTerracotta => f.write_str("LIGHT_GRAY_TERRACOTTA"),
            MaterialEnum::CyanTerracotta => f.write_str("CYAN_TERRACOTTA"),
            MaterialEnum::PurpleTerracotta => f.write_str("PURPLE_TERRACOTTA"),
            MaterialEnum::BlueTerracotta => f.write_str("BLUE_TERRACOTTA"),
            MaterialEnum::BrownTerracotta => f.write_str("BROWN_TERRACOTTA"),
            MaterialEnum::GreenTerracotta => f.write_str("GREEN_TERRACOTTA"),
            MaterialEnum::RedTerracotta => f.write_str("RED_TERRACOTTA"),
            MaterialEnum::BlackTerracotta => f.write_str("BLACK_TERRACOTTA"),
            MaterialEnum::Barrier => f.write_str("BARRIER"),
            MaterialEnum::Light => f.write_str("LIGHT"),
            MaterialEnum::HayBlock => f.write_str("HAY_BLOCK"),
            MaterialEnum::WhiteCarpet => f.write_str("WHITE_CARPET"),
            MaterialEnum::OrangeCarpet => f.write_str("ORANGE_CARPET"),
            MaterialEnum::MagentaCarpet => f.write_str("MAGENTA_CARPET"),
            MaterialEnum::LightBlueCarpet => f.write_str("LIGHT_BLUE_CARPET"),
            MaterialEnum::YellowCarpet => f.write_str("YELLOW_CARPET"),
            MaterialEnum::LimeCarpet => f.write_str("LIME_CARPET"),
            MaterialEnum::PinkCarpet => f.write_str("PINK_CARPET"),
            MaterialEnum::GrayCarpet => f.write_str("GRAY_CARPET"),
            MaterialEnum::LightGrayCarpet => f.write_str("LIGHT_GRAY_CARPET"),
            MaterialEnum::CyanCarpet => f.write_str("CYAN_CARPET"),
            MaterialEnum::PurpleCarpet => f.write_str("PURPLE_CARPET"),
            MaterialEnum::BlueCarpet => f.write_str("BLUE_CARPET"),
            MaterialEnum::BrownCarpet => f.write_str("BROWN_CARPET"),
            MaterialEnum::GreenCarpet => f.write_str("GREEN_CARPET"),
            MaterialEnum::RedCarpet => f.write_str("RED_CARPET"),
            MaterialEnum::BlackCarpet => f.write_str("BLACK_CARPET"),
            MaterialEnum::Terracotta => f.write_str("TERRACOTTA"),
            MaterialEnum::PackedIce => f.write_str("PACKED_ICE"),
            MaterialEnum::DirtPath => f.write_str("DIRT_PATH"),
            MaterialEnum::Sunflower => f.write_str("SUNFLOWER"),
            MaterialEnum::Lilac => f.write_str("LILAC"),
            MaterialEnum::RoseBush => f.write_str("ROSE_BUSH"),
            MaterialEnum::Peony => f.write_str("PEONY"),
            MaterialEnum::TallGrass => f.write_str("TALL_GRASS"),
            MaterialEnum::LargeFern => f.write_str("LARGE_FERN"),
            MaterialEnum::WhiteStainedGlass => f.write_str("WHITE_STAINED_GLASS"),
            MaterialEnum::OrangeStainedGlass => f.write_str("ORANGE_STAINED_GLASS"),
            MaterialEnum::MagentaStainedGlass => f.write_str("MAGENTA_STAINED_GLASS"),
            MaterialEnum::LightBlueStainedGlass => f.write_str("LIGHT_BLUE_STAINED_GLASS"),
            MaterialEnum::YellowStainedGlass => f.write_str("YELLOW_STAINED_GLASS"),
            MaterialEnum::LimeStainedGlass => f.write_str("LIME_STAINED_GLASS"),
            MaterialEnum::PinkStainedGlass => f.write_str("PINK_STAINED_GLASS"),
            MaterialEnum::GrayStainedGlass => f.write_str("GRAY_STAINED_GLASS"),
            MaterialEnum::LightGrayStainedGlass => f.write_str("LIGHT_GRAY_STAINED_GLASS"),
            MaterialEnum::CyanStainedGlass => f.write_str("CYAN_STAINED_GLASS"),
            MaterialEnum::PurpleStainedGlass => f.write_str("PURPLE_STAINED_GLASS"),
            MaterialEnum::BlueStainedGlass => f.write_str("BLUE_STAINED_GLASS"),
            MaterialEnum::BrownStainedGlass => f.write_str("BROWN_STAINED_GLASS"),
            MaterialEnum::GreenStainedGlass => f.write_str("GREEN_STAINED_GLASS"),
            MaterialEnum::RedStainedGlass => f.write_str("RED_STAINED_GLASS"),
            MaterialEnum::BlackStainedGlass => f.write_str("BLACK_STAINED_GLASS"),
            MaterialEnum::WhiteStainedGlassPane => f.write_str("WHITE_STAINED_GLASS_PANE"),
            MaterialEnum::OrangeStainedGlassPane => f.write_str("ORANGE_STAINED_GLASS_PANE"),
            MaterialEnum::MagentaStainedGlassPane => f.write_str("MAGENTA_STAINED_GLASS_PANE"),
            MaterialEnum::LightBlueStainedGlassPane => f.write_str("LIGHT_BLUE_STAINED_GLASS_PANE"),
            MaterialEnum::YellowStainedGlassPane => f.write_str("YELLOW_STAINED_GLASS_PANE"),
            MaterialEnum::LimeStainedGlassPane => f.write_str("LIME_STAINED_GLASS_PANE"),
            MaterialEnum::PinkStainedGlassPane => f.write_str("PINK_STAINED_GLASS_PANE"),
            MaterialEnum::GrayStainedGlassPane => f.write_str("GRAY_STAINED_GLASS_PANE"),
            MaterialEnum::LightGrayStainedGlassPane => f.write_str("LIGHT_GRAY_STAINED_GLASS_PANE"),
            MaterialEnum::CyanStainedGlassPane => f.write_str("CYAN_STAINED_GLASS_PANE"),
            MaterialEnum::PurpleStainedGlassPane => f.write_str("PURPLE_STAINED_GLASS_PANE"),
            MaterialEnum::BlueStainedGlassPane => f.write_str("BLUE_STAINED_GLASS_PANE"),
            MaterialEnum::BrownStainedGlassPane => f.write_str("BROWN_STAINED_GLASS_PANE"),
            MaterialEnum::GreenStainedGlassPane => f.write_str("GREEN_STAINED_GLASS_PANE"),
            MaterialEnum::RedStainedGlassPane => f.write_str("RED_STAINED_GLASS_PANE"),
            MaterialEnum::BlackStainedGlassPane => f.write_str("BLACK_STAINED_GLASS_PANE"),
            MaterialEnum::Prismarine => f.write_str("PRISMARINE"),
            MaterialEnum::PrismarineBricks => f.write_str("PRISMARINE_BRICKS"),
            MaterialEnum::DarkPrismarine => f.write_str("DARK_PRISMARINE"),
            MaterialEnum::PrismarineStairs => f.write_str("PRISMARINE_STAIRS"),
            MaterialEnum::PrismarineBrickStairs => f.write_str("PRISMARINE_BRICK_STAIRS"),
            MaterialEnum::DarkPrismarineStairs => f.write_str("DARK_PRISMARINE_STAIRS"),
            MaterialEnum::SeaLantern => f.write_str("SEA_LANTERN"),
            MaterialEnum::RedSandstone => f.write_str("RED_SANDSTONE"),
            MaterialEnum::ChiseledRedSandstone => f.write_str("CHISELED_RED_SANDSTONE"),
            MaterialEnum::CutRedSandstone => f.write_str("CUT_RED_SANDSTONE"),
            MaterialEnum::RedSandstoneStairs => f.write_str("RED_SANDSTONE_STAIRS"),
            MaterialEnum::RepeatingCommandBlock => f.write_str("REPEATING_COMMAND_BLOCK"),
            MaterialEnum::ChainCommandBlock => f.write_str("CHAIN_COMMAND_BLOCK"),
            MaterialEnum::MagmaBlock => f.write_str("MAGMA_BLOCK"),
            MaterialEnum::NetherWartBlock => f.write_str("NETHER_WART_BLOCK"),
            MaterialEnum::WarpedWartBlock => f.write_str("WARPED_WART_BLOCK"),
            MaterialEnum::RedNetherBricks => f.write_str("RED_NETHER_BRICKS"),
            MaterialEnum::BoneBlock => f.write_str("BONE_BLOCK"),
            MaterialEnum::StructureVoid => f.write_str("STRUCTURE_VOID"),
            MaterialEnum::ShulkerBox => f.write_str("SHULKER_BOX"),
            MaterialEnum::WhiteShulkerBox => f.write_str("WHITE_SHULKER_BOX"),
            MaterialEnum::OrangeShulkerBox => f.write_str("ORANGE_SHULKER_BOX"),
            MaterialEnum::MagentaShulkerBox => f.write_str("MAGENTA_SHULKER_BOX"),
            MaterialEnum::LightBlueShulkerBox => f.write_str("LIGHT_BLUE_SHULKER_BOX"),
            MaterialEnum::YellowShulkerBox => f.write_str("YELLOW_SHULKER_BOX"),
            MaterialEnum::LimeShulkerBox => f.write_str("LIME_SHULKER_BOX"),
            MaterialEnum::PinkShulkerBox => f.write_str("PINK_SHULKER_BOX"),
            MaterialEnum::GrayShulkerBox => f.write_str("GRAY_SHULKER_BOX"),
            MaterialEnum::LightGrayShulkerBox => f.write_str("LIGHT_GRAY_SHULKER_BOX"),
            MaterialEnum::CyanShulkerBox => f.write_str("CYAN_SHULKER_BOX"),
            MaterialEnum::PurpleShulkerBox => f.write_str("PURPLE_SHULKER_BOX"),
            MaterialEnum::BlueShulkerBox => f.write_str("BLUE_SHULKER_BOX"),
            MaterialEnum::BrownShulkerBox => f.write_str("BROWN_SHULKER_BOX"),
            MaterialEnum::GreenShulkerBox => f.write_str("GREEN_SHULKER_BOX"),
            MaterialEnum::RedShulkerBox => f.write_str("RED_SHULKER_BOX"),
            MaterialEnum::BlackShulkerBox => f.write_str("BLACK_SHULKER_BOX"),
            MaterialEnum::WhiteGlazedTerracotta => f.write_str("WHITE_GLAZED_TERRACOTTA"),
            MaterialEnum::OrangeGlazedTerracotta => f.write_str("ORANGE_GLAZED_TERRACOTTA"),
            MaterialEnum::MagentaGlazedTerracotta => f.write_str("MAGENTA_GLAZED_TERRACOTTA"),
            MaterialEnum::LightBlueGlazedTerracotta => f.write_str("LIGHT_BLUE_GLAZED_TERRACOTTA"),
            MaterialEnum::YellowGlazedTerracotta => f.write_str("YELLOW_GLAZED_TERRACOTTA"),
            MaterialEnum::LimeGlazedTerracotta => f.write_str("LIME_GLAZED_TERRACOTTA"),
            MaterialEnum::PinkGlazedTerracotta => f.write_str("PINK_GLAZED_TERRACOTTA"),
            MaterialEnum::GrayGlazedTerracotta => f.write_str("GRAY_GLAZED_TERRACOTTA"),
            MaterialEnum::LightGrayGlazedTerracotta => f.write_str("LIGHT_GRAY_GLAZED_TERRACOTTA"),
            MaterialEnum::CyanGlazedTerracotta => f.write_str("CYAN_GLAZED_TERRACOTTA"),
            MaterialEnum::PurpleGlazedTerracotta => f.write_str("PURPLE_GLAZED_TERRACOTTA"),
            MaterialEnum::BlueGlazedTerracotta => f.write_str("BLUE_GLAZED_TERRACOTTA"),
            MaterialEnum::BrownGlazedTerracotta => f.write_str("BROWN_GLAZED_TERRACOTTA"),
            MaterialEnum::GreenGlazedTerracotta => f.write_str("GREEN_GLAZED_TERRACOTTA"),
            MaterialEnum::RedGlazedTerracotta => f.write_str("RED_GLAZED_TERRACOTTA"),
            MaterialEnum::BlackGlazedTerracotta => f.write_str("BLACK_GLAZED_TERRACOTTA"),
            MaterialEnum::WhiteConcrete => f.write_str("WHITE_CONCRETE"),
            MaterialEnum::OrangeConcrete => f.write_str("ORANGE_CONCRETE"),
            MaterialEnum::MagentaConcrete => f.write_str("MAGENTA_CONCRETE"),
            MaterialEnum::LightBlueConcrete => f.write_str("LIGHT_BLUE_CONCRETE"),
            MaterialEnum::YellowConcrete => f.write_str("YELLOW_CONCRETE"),
            MaterialEnum::LimeConcrete => f.write_str("LIME_CONCRETE"),
            MaterialEnum::PinkConcrete => f.write_str("PINK_CONCRETE"),
            MaterialEnum::GrayConcrete => f.write_str("GRAY_CONCRETE"),
            MaterialEnum::LightGrayConcrete => f.write_str("LIGHT_GRAY_CONCRETE"),
            MaterialEnum::CyanConcrete => f.write_str("CYAN_CONCRETE"),
            MaterialEnum::PurpleConcrete => f.write_str("PURPLE_CONCRETE"),
            MaterialEnum::BlueConcrete => f.write_str("BLUE_CONCRETE"),
            MaterialEnum::BrownConcrete => f.write_str("BROWN_CONCRETE"),
            MaterialEnum::GreenConcrete => f.write_str("GREEN_CONCRETE"),
            MaterialEnum::RedConcrete => f.write_str("RED_CONCRETE"),
            MaterialEnum::BlackConcrete => f.write_str("BLACK_CONCRETE"),
            MaterialEnum::WhiteConcretePowder => f.write_str("WHITE_CONCRETE_POWDER"),
            MaterialEnum::OrangeConcretePowder => f.write_str("ORANGE_CONCRETE_POWDER"),
            MaterialEnum::MagentaConcretePowder => f.write_str("MAGENTA_CONCRETE_POWDER"),
            MaterialEnum::LightBlueConcretePowder => f.write_str("LIGHT_BLUE_CONCRETE_POWDER"),
            MaterialEnum::YellowConcretePowder => f.write_str("YELLOW_CONCRETE_POWDER"),
            MaterialEnum::LimeConcretePowder => f.write_str("LIME_CONCRETE_POWDER"),
            MaterialEnum::PinkConcretePowder => f.write_str("PINK_CONCRETE_POWDER"),
            MaterialEnum::GrayConcretePowder => f.write_str("GRAY_CONCRETE_POWDER"),
            MaterialEnum::LightGrayConcretePowder => f.write_str("LIGHT_GRAY_CONCRETE_POWDER"),
            MaterialEnum::CyanConcretePowder => f.write_str("CYAN_CONCRETE_POWDER"),
            MaterialEnum::PurpleConcretePowder => f.write_str("PURPLE_CONCRETE_POWDER"),
            MaterialEnum::BlueConcretePowder => f.write_str("BLUE_CONCRETE_POWDER"),
            MaterialEnum::BrownConcretePowder => f.write_str("BROWN_CONCRETE_POWDER"),
            MaterialEnum::GreenConcretePowder => f.write_str("GREEN_CONCRETE_POWDER"),
            MaterialEnum::RedConcretePowder => f.write_str("RED_CONCRETE_POWDER"),
            MaterialEnum::BlackConcretePowder => f.write_str("BLACK_CONCRETE_POWDER"),
            MaterialEnum::TurtleEgg => f.write_str("TURTLE_EGG"),
            MaterialEnum::SnifferEgg => f.write_str("SNIFFER_EGG"),
            MaterialEnum::DeadTubeCoralBlock => f.write_str("DEAD_TUBE_CORAL_BLOCK"),
            MaterialEnum::DeadBrainCoralBlock => f.write_str("DEAD_BRAIN_CORAL_BLOCK"),
            MaterialEnum::DeadBubbleCoralBlock => f.write_str("DEAD_BUBBLE_CORAL_BLOCK"),
            MaterialEnum::DeadFireCoralBlock => f.write_str("DEAD_FIRE_CORAL_BLOCK"),
            MaterialEnum::DeadHornCoralBlock => f.write_str("DEAD_HORN_CORAL_BLOCK"),
            MaterialEnum::TubeCoralBlock => f.write_str("TUBE_CORAL_BLOCK"),
            MaterialEnum::BrainCoralBlock => f.write_str("BRAIN_CORAL_BLOCK"),
            MaterialEnum::BubbleCoralBlock => f.write_str("BUBBLE_CORAL_BLOCK"),
            MaterialEnum::FireCoralBlock => f.write_str("FIRE_CORAL_BLOCK"),
            MaterialEnum::HornCoralBlock => f.write_str("HORN_CORAL_BLOCK"),
            MaterialEnum::TubeCoral => f.write_str("TUBE_CORAL"),
            MaterialEnum::BrainCoral => f.write_str("BRAIN_CORAL"),
            MaterialEnum::BubbleCoral => f.write_str("BUBBLE_CORAL"),
            MaterialEnum::FireCoral => f.write_str("FIRE_CORAL"),
            MaterialEnum::HornCoral => f.write_str("HORN_CORAL"),
            MaterialEnum::DeadBrainCoral => f.write_str("DEAD_BRAIN_CORAL"),
            MaterialEnum::DeadBubbleCoral => f.write_str("DEAD_BUBBLE_CORAL"),
            MaterialEnum::DeadFireCoral => f.write_str("DEAD_FIRE_CORAL"),
            MaterialEnum::DeadHornCoral => f.write_str("DEAD_HORN_CORAL"),
            MaterialEnum::DeadTubeCoral => f.write_str("DEAD_TUBE_CORAL"),
            MaterialEnum::TubeCoralFan => f.write_str("TUBE_CORAL_FAN"),
            MaterialEnum::BrainCoralFan => f.write_str("BRAIN_CORAL_FAN"),
            MaterialEnum::BubbleCoralFan => f.write_str("BUBBLE_CORAL_FAN"),
            MaterialEnum::FireCoralFan => f.write_str("FIRE_CORAL_FAN"),
            MaterialEnum::HornCoralFan => f.write_str("HORN_CORAL_FAN"),
            MaterialEnum::DeadTubeCoralFan => f.write_str("DEAD_TUBE_CORAL_FAN"),
            MaterialEnum::DeadBrainCoralFan => f.write_str("DEAD_BRAIN_CORAL_FAN"),
            MaterialEnum::DeadBubbleCoralFan => f.write_str("DEAD_BUBBLE_CORAL_FAN"),
            MaterialEnum::DeadFireCoralFan => f.write_str("DEAD_FIRE_CORAL_FAN"),
            MaterialEnum::DeadHornCoralFan => f.write_str("DEAD_HORN_CORAL_FAN"),
            MaterialEnum::BlueIce => f.write_str("BLUE_ICE"),
            MaterialEnum::Conduit => f.write_str("CONDUIT"),
            MaterialEnum::PolishedGraniteStairs => f.write_str("POLISHED_GRANITE_STAIRS"),
            MaterialEnum::SmoothRedSandstoneStairs => f.write_str("SMOOTH_RED_SANDSTONE_STAIRS"),
            MaterialEnum::MossyStoneBrickStairs => f.write_str("MOSSY_STONE_BRICK_STAIRS"),
            MaterialEnum::PolishedDioriteStairs => f.write_str("POLISHED_DIORITE_STAIRS"),
            MaterialEnum::MossyCobblestoneStairs => f.write_str("MOSSY_COBBLESTONE_STAIRS"),
            MaterialEnum::EndStoneBrickStairs => f.write_str("END_STONE_BRICK_STAIRS"),
            MaterialEnum::StoneStairs => f.write_str("STONE_STAIRS"),
            MaterialEnum::SmoothSandstoneStairs => f.write_str("SMOOTH_SANDSTONE_STAIRS"),
            MaterialEnum::SmoothQuartzStairs => f.write_str("SMOOTH_QUARTZ_STAIRS"),
            MaterialEnum::GraniteStairs => f.write_str("GRANITE_STAIRS"),
            MaterialEnum::AndesiteStairs => f.write_str("ANDESITE_STAIRS"),
            MaterialEnum::RedNetherBrickStairs => f.write_str("RED_NETHER_BRICK_STAIRS"),
            MaterialEnum::PolishedAndesiteStairs => f.write_str("POLISHED_ANDESITE_STAIRS"),
            MaterialEnum::DioriteStairs => f.write_str("DIORITE_STAIRS"),
            MaterialEnum::CobbledDeepslateStairs => f.write_str("COBBLED_DEEPSLATE_STAIRS"),
            MaterialEnum::PolishedDeepslateStairs => f.write_str("POLISHED_DEEPSLATE_STAIRS"),
            MaterialEnum::DeepslateBrickStairs => f.write_str("DEEPSLATE_BRICK_STAIRS"),
            MaterialEnum::DeepslateTileStairs => f.write_str("DEEPSLATE_TILE_STAIRS"),
            MaterialEnum::PolishedGraniteSlab => f.write_str("POLISHED_GRANITE_SLAB"),
            MaterialEnum::SmoothRedSandstoneSlab => f.write_str("SMOOTH_RED_SANDSTONE_SLAB"),
            MaterialEnum::MossyStoneBrickSlab => f.write_str("MOSSY_STONE_BRICK_SLAB"),
            MaterialEnum::PolishedDioriteSlab => f.write_str("POLISHED_DIORITE_SLAB"),
            MaterialEnum::MossyCobblestoneSlab => f.write_str("MOSSY_COBBLESTONE_SLAB"),
            MaterialEnum::EndStoneBrickSlab => f.write_str("END_STONE_BRICK_SLAB"),
            MaterialEnum::SmoothSandstoneSlab => f.write_str("SMOOTH_SANDSTONE_SLAB"),
            MaterialEnum::SmoothQuartzSlab => f.write_str("SMOOTH_QUARTZ_SLAB"),
            MaterialEnum::GraniteSlab => f.write_str("GRANITE_SLAB"),
            MaterialEnum::AndesiteSlab => f.write_str("ANDESITE_SLAB"),
            MaterialEnum::RedNetherBrickSlab => f.write_str("RED_NETHER_BRICK_SLAB"),
            MaterialEnum::PolishedAndesiteSlab => f.write_str("POLISHED_ANDESITE_SLAB"),
            MaterialEnum::DioriteSlab => f.write_str("DIORITE_SLAB"),
            MaterialEnum::CobbledDeepslateSlab => f.write_str("COBBLED_DEEPSLATE_SLAB"),
            MaterialEnum::PolishedDeepslateSlab => f.write_str("POLISHED_DEEPSLATE_SLAB"),
            MaterialEnum::DeepslateBrickSlab => f.write_str("DEEPSLATE_BRICK_SLAB"),
            MaterialEnum::DeepslateTileSlab => f.write_str("DEEPSLATE_TILE_SLAB"),
            MaterialEnum::Scaffolding => f.write_str("SCAFFOLDING"),
            MaterialEnum::Redstone => f.write_str("REDSTONE"),
            MaterialEnum::RedstoneTorch => f.write_str("REDSTONE_TORCH"),
            MaterialEnum::RedstoneBlock => f.write_str("REDSTONE_BLOCK"),
            MaterialEnum::Repeater => f.write_str("REPEATER"),
            MaterialEnum::Comparator => f.write_str("COMPARATOR"),
            MaterialEnum::Piston => f.write_str("PISTON"),
            MaterialEnum::StickyPiston => f.write_str("STICKY_PISTON"),
            MaterialEnum::SlimeBlock => f.write_str("SLIME_BLOCK"),
            MaterialEnum::HoneyBlock => f.write_str("HONEY_BLOCK"),
            MaterialEnum::Observer => f.write_str("OBSERVER"),
            MaterialEnum::Hopper => f.write_str("HOPPER"),
            MaterialEnum::Dispenser => f.write_str("DISPENSER"),
            MaterialEnum::Dropper => f.write_str("DROPPER"),
            MaterialEnum::Lectern => f.write_str("LECTERN"),
            MaterialEnum::Target => f.write_str("TARGET"),
            MaterialEnum::Lever => f.write_str("LEVER"),
            MaterialEnum::LightningRod => f.write_str("LIGHTNING_ROD"),
            MaterialEnum::DaylightDetector => f.write_str("DAYLIGHT_DETECTOR"),
            MaterialEnum::SculkSensor => f.write_str("SCULK_SENSOR"),
            MaterialEnum::CalibratedSculkSensor => f.write_str("CALIBRATED_SCULK_SENSOR"),
            MaterialEnum::TripwireHook => f.write_str("TRIPWIRE_HOOK"),
            MaterialEnum::TrappedChest => f.write_str("TRAPPED_CHEST"),
            MaterialEnum::Tnt => f.write_str("TNT"),
            MaterialEnum::RedstoneLamp => f.write_str("REDSTONE_LAMP"),
            MaterialEnum::NoteBlock => f.write_str("NOTE_BLOCK"),
            MaterialEnum::StoneButton => f.write_str("STONE_BUTTON"),
            MaterialEnum::PolishedBlackstoneButton => f.write_str("POLISHED_BLACKSTONE_BUTTON"),
            MaterialEnum::OakButton => f.write_str("OAK_BUTTON"),
            MaterialEnum::SpruceButton => f.write_str("SPRUCE_BUTTON"),
            MaterialEnum::BirchButton => f.write_str("BIRCH_BUTTON"),
            MaterialEnum::JungleButton => f.write_str("JUNGLE_BUTTON"),
            MaterialEnum::AcaciaButton => f.write_str("ACACIA_BUTTON"),
            MaterialEnum::CherryButton => f.write_str("CHERRY_BUTTON"),
            MaterialEnum::DarkOakButton => f.write_str("DARK_OAK_BUTTON"),
            MaterialEnum::MangroveButton => f.write_str("MANGROVE_BUTTON"),
            MaterialEnum::BambooButton => f.write_str("BAMBOO_BUTTON"),
            MaterialEnum::CrimsonButton => f.write_str("CRIMSON_BUTTON"),
            MaterialEnum::WarpedButton => f.write_str("WARPED_BUTTON"),
            MaterialEnum::StonePressurePlate => f.write_str("STONE_PRESSURE_PLATE"),
            MaterialEnum::PolishedBlackstonePressurePlate => {
                f.write_str("POLISHED_BLACKSTONE_PRESSURE_PLATE")
            }
            MaterialEnum::LightWeightedPressurePlate => {
                f.write_str("LIGHT_WEIGHTED_PRESSURE_PLATE")
            }
            MaterialEnum::HeavyWeightedPressurePlate => {
                f.write_str("HEAVY_WEIGHTED_PRESSURE_PLATE")
            }
            MaterialEnum::OakPressurePlate => f.write_str("OAK_PRESSURE_PLATE"),
            MaterialEnum::SprucePressurePlate => f.write_str("SPRUCE_PRESSURE_PLATE"),
            MaterialEnum::BirchPressurePlate => f.write_str("BIRCH_PRESSURE_PLATE"),
            MaterialEnum::JunglePressurePlate => f.write_str("JUNGLE_PRESSURE_PLATE"),
            MaterialEnum::AcaciaPressurePlate => f.write_str("ACACIA_PRESSURE_PLATE"),
            MaterialEnum::CherryPressurePlate => f.write_str("CHERRY_PRESSURE_PLATE"),
            MaterialEnum::DarkOakPressurePlate => f.write_str("DARK_OAK_PRESSURE_PLATE"),
            MaterialEnum::MangrovePressurePlate => f.write_str("MANGROVE_PRESSURE_PLATE"),
            MaterialEnum::BambooPressurePlate => f.write_str("BAMBOO_PRESSURE_PLATE"),
            MaterialEnum::CrimsonPressurePlate => f.write_str("CRIMSON_PRESSURE_PLATE"),
            MaterialEnum::WarpedPressurePlate => f.write_str("WARPED_PRESSURE_PLATE"),
            MaterialEnum::IronDoor => f.write_str("IRON_DOOR"),
            MaterialEnum::OakDoor => f.write_str("OAK_DOOR"),
            MaterialEnum::SpruceDoor => f.write_str("SPRUCE_DOOR"),
            MaterialEnum::BirchDoor => f.write_str("BIRCH_DOOR"),
            MaterialEnum::JungleDoor => f.write_str("JUNGLE_DOOR"),
            MaterialEnum::AcaciaDoor => f.write_str("ACACIA_DOOR"),
            MaterialEnum::CherryDoor => f.write_str("CHERRY_DOOR"),
            MaterialEnum::DarkOakDoor => f.write_str("DARK_OAK_DOOR"),
            MaterialEnum::MangroveDoor => f.write_str("MANGROVE_DOOR"),
            MaterialEnum::BambooDoor => f.write_str("BAMBOO_DOOR"),
            MaterialEnum::CrimsonDoor => f.write_str("CRIMSON_DOOR"),
            MaterialEnum::WarpedDoor => f.write_str("WARPED_DOOR"),
            MaterialEnum::IronTrapdoor => f.write_str("IRON_TRAPDOOR"),
            MaterialEnum::OakTrapdoor => f.write_str("OAK_TRAPDOOR"),
            MaterialEnum::SpruceTrapdoor => f.write_str("SPRUCE_TRAPDOOR"),
            MaterialEnum::BirchTrapdoor => f.write_str("BIRCH_TRAPDOOR"),
            MaterialEnum::JungleTrapdoor => f.write_str("JUNGLE_TRAPDOOR"),
            MaterialEnum::AcaciaTrapdoor => f.write_str("ACACIA_TRAPDOOR"),
            MaterialEnum::CherryTrapdoor => f.write_str("CHERRY_TRAPDOOR"),
            MaterialEnum::DarkOakTrapdoor => f.write_str("DARK_OAK_TRAPDOOR"),
            MaterialEnum::MangroveTrapdoor => f.write_str("MANGROVE_TRAPDOOR"),
            MaterialEnum::BambooTrapdoor => f.write_str("BAMBOO_TRAPDOOR"),
            MaterialEnum::CrimsonTrapdoor => f.write_str("CRIMSON_TRAPDOOR"),
            MaterialEnum::WarpedTrapdoor => f.write_str("WARPED_TRAPDOOR"),
            MaterialEnum::OakFenceGate => f.write_str("OAK_FENCE_GATE"),
            MaterialEnum::SpruceFenceGate => f.write_str("SPRUCE_FENCE_GATE"),
            MaterialEnum::BirchFenceGate => f.write_str("BIRCH_FENCE_GATE"),
            MaterialEnum::JungleFenceGate => f.write_str("JUNGLE_FENCE_GATE"),
            MaterialEnum::AcaciaFenceGate => f.write_str("ACACIA_FENCE_GATE"),
            MaterialEnum::CherryFenceGate => f.write_str("CHERRY_FENCE_GATE"),
            MaterialEnum::DarkOakFenceGate => f.write_str("DARK_OAK_FENCE_GATE"),
            MaterialEnum::MangroveFenceGate => f.write_str("MANGROVE_FENCE_GATE"),
            MaterialEnum::BambooFenceGate => f.write_str("BAMBOO_FENCE_GATE"),
            MaterialEnum::CrimsonFenceGate => f.write_str("CRIMSON_FENCE_GATE"),
            MaterialEnum::WarpedFenceGate => f.write_str("WARPED_FENCE_GATE"),
            MaterialEnum::PoweredRail => f.write_str("POWERED_RAIL"),
            MaterialEnum::DetectorRail => f.write_str("DETECTOR_RAIL"),
            MaterialEnum::Rail => f.write_str("RAIL"),
            MaterialEnum::ActivatorRail => f.write_str("ACTIVATOR_RAIL"),
            MaterialEnum::Saddle => f.write_str("SADDLE"),
            MaterialEnum::Minecart => f.write_str("MINECART"),
            MaterialEnum::ChestMinecart => f.write_str("CHEST_MINECART"),
            MaterialEnum::FurnaceMinecart => f.write_str("FURNACE_MINECART"),
            MaterialEnum::TntMinecart => f.write_str("TNT_MINECART"),
            MaterialEnum::HopperMinecart => f.write_str("HOPPER_MINECART"),
            MaterialEnum::CarrotOnAStick => f.write_str("CARROT_ON_A_STICK"),
            MaterialEnum::WarpedFungusOnAStick => f.write_str("WARPED_FUNGUS_ON_A_STICK"),
            MaterialEnum::Elytra => f.write_str("ELYTRA"),
            MaterialEnum::OakBoat => f.write_str("OAK_BOAT"),
            MaterialEnum::OakChestBoat => f.write_str("OAK_CHEST_BOAT"),
            MaterialEnum::SpruceBoat => f.write_str("SPRUCE_BOAT"),
            MaterialEnum::SpruceChestBoat => f.write_str("SPRUCE_CHEST_BOAT"),
            MaterialEnum::BirchBoat => f.write_str("BIRCH_BOAT"),
            MaterialEnum::BirchChestBoat => f.write_str("BIRCH_CHEST_BOAT"),
            MaterialEnum::JungleBoat => f.write_str("JUNGLE_BOAT"),
            MaterialEnum::JungleChestBoat => f.write_str("JUNGLE_CHEST_BOAT"),
            MaterialEnum::AcaciaBoat => f.write_str("ACACIA_BOAT"),
            MaterialEnum::AcaciaChestBoat => f.write_str("ACACIA_CHEST_BOAT"),
            MaterialEnum::CherryBoat => f.write_str("CHERRY_BOAT"),
            MaterialEnum::CherryChestBoat => f.write_str("CHERRY_CHEST_BOAT"),
            MaterialEnum::DarkOakBoat => f.write_str("DARK_OAK_BOAT"),
            MaterialEnum::DarkOakChestBoat => f.write_str("DARK_OAK_CHEST_BOAT"),
            MaterialEnum::MangroveBoat => f.write_str("MANGROVE_BOAT"),
            MaterialEnum::MangroveChestBoat => f.write_str("MANGROVE_CHEST_BOAT"),
            MaterialEnum::BambooRaft => f.write_str("BAMBOO_RAFT"),
            MaterialEnum::BambooChestRaft => f.write_str("BAMBOO_CHEST_RAFT"),
            MaterialEnum::StructureBlock => f.write_str("STRUCTURE_BLOCK"),
            MaterialEnum::Jigsaw => f.write_str("JIGSAW"),
            MaterialEnum::TurtleHelmet => f.write_str("TURTLE_HELMET"),
            MaterialEnum::Scute => f.write_str("SCUTE"),
            MaterialEnum::FlintAndSteel => f.write_str("FLINT_AND_STEEL"),
            MaterialEnum::Apple => f.write_str("APPLE"),
            MaterialEnum::Bow => f.write_str("BOW"),
            MaterialEnum::Arrow => f.write_str("ARROW"),
            MaterialEnum::Coal => f.write_str("COAL"),
            MaterialEnum::Charcoal => f.write_str("CHARCOAL"),
            MaterialEnum::Diamond => f.write_str("DIAMOND"),
            MaterialEnum::Emerald => f.write_str("EMERALD"),
            MaterialEnum::LapisLazuli => f.write_str("LAPIS_LAZULI"),
            MaterialEnum::Quartz => f.write_str("QUARTZ"),
            MaterialEnum::AmethystShard => f.write_str("AMETHYST_SHARD"),
            MaterialEnum::RawIron => f.write_str("RAW_IRON"),
            MaterialEnum::IronIngot => f.write_str("IRON_INGOT"),
            MaterialEnum::RawCopper => f.write_str("RAW_COPPER"),
            MaterialEnum::CopperIngot => f.write_str("COPPER_INGOT"),
            MaterialEnum::RawGold => f.write_str("RAW_GOLD"),
            MaterialEnum::GoldIngot => f.write_str("GOLD_INGOT"),
            MaterialEnum::NetheriteIngot => f.write_str("NETHERITE_INGOT"),
            MaterialEnum::NetheriteScrap => f.write_str("NETHERITE_SCRAP"),
            MaterialEnum::WoodenSword => f.write_str("WOODEN_SWORD"),
            MaterialEnum::WoodenShovel => f.write_str("WOODEN_SHOVEL"),
            MaterialEnum::WoodenPickaxe => f.write_str("WOODEN_PICKAXE"),
            MaterialEnum::WoodenAxe => f.write_str("WOODEN_AXE"),
            MaterialEnum::WoodenHoe => f.write_str("WOODEN_HOE"),
            MaterialEnum::StoneSword => f.write_str("STONE_SWORD"),
            MaterialEnum::StoneShovel => f.write_str("STONE_SHOVEL"),
            MaterialEnum::StonePickaxe => f.write_str("STONE_PICKAXE"),
            MaterialEnum::StoneAxe => f.write_str("STONE_AXE"),
            MaterialEnum::StoneHoe => f.write_str("STONE_HOE"),
            MaterialEnum::GoldenSword => f.write_str("GOLDEN_SWORD"),
            MaterialEnum::GoldenShovel => f.write_str("GOLDEN_SHOVEL"),
            MaterialEnum::GoldenPickaxe => f.write_str("GOLDEN_PICKAXE"),
            MaterialEnum::GoldenAxe => f.write_str("GOLDEN_AXE"),
            MaterialEnum::GoldenHoe => f.write_str("GOLDEN_HOE"),
            MaterialEnum::IronSword => f.write_str("IRON_SWORD"),
            MaterialEnum::IronShovel => f.write_str("IRON_SHOVEL"),
            MaterialEnum::IronPickaxe => f.write_str("IRON_PICKAXE"),
            MaterialEnum::IronAxe => f.write_str("IRON_AXE"),
            MaterialEnum::IronHoe => f.write_str("IRON_HOE"),
            MaterialEnum::DiamondSword => f.write_str("DIAMOND_SWORD"),
            MaterialEnum::DiamondShovel => f.write_str("DIAMOND_SHOVEL"),
            MaterialEnum::DiamondPickaxe => f.write_str("DIAMOND_PICKAXE"),
            MaterialEnum::DiamondAxe => f.write_str("DIAMOND_AXE"),
            MaterialEnum::DiamondHoe => f.write_str("DIAMOND_HOE"),
            MaterialEnum::NetheriteSword => f.write_str("NETHERITE_SWORD"),
            MaterialEnum::NetheriteShovel => f.write_str("NETHERITE_SHOVEL"),
            MaterialEnum::NetheritePickaxe => f.write_str("NETHERITE_PICKAXE"),
            MaterialEnum::NetheriteAxe => f.write_str("NETHERITE_AXE"),
            MaterialEnum::NetheriteHoe => f.write_str("NETHERITE_HOE"),
            MaterialEnum::Stick => f.write_str("STICK"),
            MaterialEnum::Bowl => f.write_str("BOWL"),
            MaterialEnum::MushroomStew => f.write_str("MUSHROOM_STEW"),
            MaterialEnum::String => f.write_str("STRING"),
            MaterialEnum::Feather => f.write_str("FEATHER"),
            MaterialEnum::Gunpowder => f.write_str("GUNPOWDER"),
            MaterialEnum::WheatSeeds => f.write_str("WHEAT_SEEDS"),
            MaterialEnum::Wheat => f.write_str("WHEAT"),
            MaterialEnum::Bread => f.write_str("BREAD"),
            MaterialEnum::LeatherHelmet => f.write_str("LEATHER_HELMET"),
            MaterialEnum::LeatherChestplate => f.write_str("LEATHER_CHESTPLATE"),
            MaterialEnum::LeatherLeggings => f.write_str("LEATHER_LEGGINGS"),
            MaterialEnum::LeatherBoots => f.write_str("LEATHER_BOOTS"),
            MaterialEnum::ChainmailHelmet => f.write_str("CHAINMAIL_HELMET"),
            MaterialEnum::ChainmailChestplate => f.write_str("CHAINMAIL_CHESTPLATE"),
            MaterialEnum::ChainmailLeggings => f.write_str("CHAINMAIL_LEGGINGS"),
            MaterialEnum::ChainmailBoots => f.write_str("CHAINMAIL_BOOTS"),
            MaterialEnum::IronHelmet => f.write_str("IRON_HELMET"),
            MaterialEnum::IronChestplate => f.write_str("IRON_CHESTPLATE"),
            MaterialEnum::IronLeggings => f.write_str("IRON_LEGGINGS"),
            MaterialEnum::IronBoots => f.write_str("IRON_BOOTS"),
            MaterialEnum::DiamondHelmet => f.write_str("DIAMOND_HELMET"),
            MaterialEnum::DiamondChestplate => f.write_str("DIAMOND_CHESTPLATE"),
            MaterialEnum::DiamondLeggings => f.write_str("DIAMOND_LEGGINGS"),
            MaterialEnum::DiamondBoots => f.write_str("DIAMOND_BOOTS"),
            MaterialEnum::GoldenHelmet => f.write_str("GOLDEN_HELMET"),
            MaterialEnum::GoldenChestplate => f.write_str("GOLDEN_CHESTPLATE"),
            MaterialEnum::GoldenLeggings => f.write_str("GOLDEN_LEGGINGS"),
            MaterialEnum::GoldenBoots => f.write_str("GOLDEN_BOOTS"),
            MaterialEnum::NetheriteHelmet => f.write_str("NETHERITE_HELMET"),
            MaterialEnum::NetheriteChestplate => f.write_str("NETHERITE_CHESTPLATE"),
            MaterialEnum::NetheriteLeggings => f.write_str("NETHERITE_LEGGINGS"),
            MaterialEnum::NetheriteBoots => f.write_str("NETHERITE_BOOTS"),
            MaterialEnum::Flint => f.write_str("FLINT"),
            MaterialEnum::Porkchop => f.write_str("PORKCHOP"),
            MaterialEnum::CookedPorkchop => f.write_str("COOKED_PORKCHOP"),
            MaterialEnum::Painting => f.write_str("PAINTING"),
            MaterialEnum::GoldenApple => f.write_str("GOLDEN_APPLE"),
            MaterialEnum::EnchantedGoldenApple => f.write_str("ENCHANTED_GOLDEN_APPLE"),
            MaterialEnum::OakSign => f.write_str("OAK_SIGN"),
            MaterialEnum::SpruceSign => f.write_str("SPRUCE_SIGN"),
            MaterialEnum::BirchSign => f.write_str("BIRCH_SIGN"),
            MaterialEnum::JungleSign => f.write_str("JUNGLE_SIGN"),
            MaterialEnum::AcaciaSign => f.write_str("ACACIA_SIGN"),
            MaterialEnum::CherrySign => f.write_str("CHERRY_SIGN"),
            MaterialEnum::DarkOakSign => f.write_str("DARK_OAK_SIGN"),
            MaterialEnum::MangroveSign => f.write_str("MANGROVE_SIGN"),
            MaterialEnum::BambooSign => f.write_str("BAMBOO_SIGN"),
            MaterialEnum::CrimsonSign => f.write_str("CRIMSON_SIGN"),
            MaterialEnum::WarpedSign => f.write_str("WARPED_SIGN"),
            MaterialEnum::OakHangingSign => f.write_str("OAK_HANGING_SIGN"),
            MaterialEnum::SpruceHangingSign => f.write_str("SPRUCE_HANGING_SIGN"),
            MaterialEnum::BirchHangingSign => f.write_str("BIRCH_HANGING_SIGN"),
            MaterialEnum::JungleHangingSign => f.write_str("JUNGLE_HANGING_SIGN"),
            MaterialEnum::AcaciaHangingSign => f.write_str("ACACIA_HANGING_SIGN"),
            MaterialEnum::CherryHangingSign => f.write_str("CHERRY_HANGING_SIGN"),
            MaterialEnum::DarkOakHangingSign => f.write_str("DARK_OAK_HANGING_SIGN"),
            MaterialEnum::MangroveHangingSign => f.write_str("MANGROVE_HANGING_SIGN"),
            MaterialEnum::BambooHangingSign => f.write_str("BAMBOO_HANGING_SIGN"),
            MaterialEnum::CrimsonHangingSign => f.write_str("CRIMSON_HANGING_SIGN"),
            MaterialEnum::WarpedHangingSign => f.write_str("WARPED_HANGING_SIGN"),
            MaterialEnum::Bucket => f.write_str("BUCKET"),
            MaterialEnum::WaterBucket => f.write_str("WATER_BUCKET"),
            MaterialEnum::LavaBucket => f.write_str("LAVA_BUCKET"),
            MaterialEnum::PowderSnowBucket => f.write_str("POWDER_SNOW_BUCKET"),
            MaterialEnum::Snowball => f.write_str("SNOWBALL"),
            MaterialEnum::Leather => f.write_str("LEATHER"),
            MaterialEnum::MilkBucket => f.write_str("MILK_BUCKET"),
            MaterialEnum::PufferfishBucket => f.write_str("PUFFERFISH_BUCKET"),
            MaterialEnum::SalmonBucket => f.write_str("SALMON_BUCKET"),
            MaterialEnum::CodBucket => f.write_str("COD_BUCKET"),
            MaterialEnum::TropicalFishBucket => f.write_str("TROPICAL_FISH_BUCKET"),
            MaterialEnum::AxolotlBucket => f.write_str("AXOLOTL_BUCKET"),
            MaterialEnum::TadpoleBucket => f.write_str("TADPOLE_BUCKET"),
            MaterialEnum::Brick => f.write_str("BRICK"),
            MaterialEnum::ClayBall => f.write_str("CLAY_BALL"),
            MaterialEnum::DriedKelpBlock => f.write_str("DRIED_KELP_BLOCK"),
            MaterialEnum::Paper => f.write_str("PAPER"),
            MaterialEnum::Book => f.write_str("BOOK"),
            MaterialEnum::SlimeBall => f.write_str("SLIME_BALL"),
            MaterialEnum::Egg => f.write_str("EGG"),
            MaterialEnum::Compass => f.write_str("COMPASS"),
            MaterialEnum::RecoveryCompass => f.write_str("RECOVERY_COMPASS"),
            MaterialEnum::Bundle => f.write_str("BUNDLE"),
            MaterialEnum::FishingRod => f.write_str("FISHING_ROD"),
            MaterialEnum::Clock => f.write_str("CLOCK"),
            MaterialEnum::Spyglass => f.write_str("SPYGLASS"),
            MaterialEnum::GlowstoneDust => f.write_str("GLOWSTONE_DUST"),
            MaterialEnum::Cod => f.write_str("COD"),
            MaterialEnum::Salmon => f.write_str("SALMON"),
            MaterialEnum::TropicalFish => f.write_str("TROPICAL_FISH"),
            MaterialEnum::Pufferfish => f.write_str("PUFFERFISH"),
            MaterialEnum::CookedCod => f.write_str("COOKED_COD"),
            MaterialEnum::CookedSalmon => f.write_str("COOKED_SALMON"),
            MaterialEnum::InkSac => f.write_str("INK_SAC"),
            MaterialEnum::GlowInkSac => f.write_str("GLOW_INK_SAC"),
            MaterialEnum::CocoaBeans => f.write_str("COCOA_BEANS"),
            MaterialEnum::WhiteDye => f.write_str("WHITE_DYE"),
            MaterialEnum::OrangeDye => f.write_str("ORANGE_DYE"),
            MaterialEnum::MagentaDye => f.write_str("MAGENTA_DYE"),
            MaterialEnum::LightBlueDye => f.write_str("LIGHT_BLUE_DYE"),
            MaterialEnum::YellowDye => f.write_str("YELLOW_DYE"),
            MaterialEnum::LimeDye => f.write_str("LIME_DYE"),
            MaterialEnum::PinkDye => f.write_str("PINK_DYE"),
            MaterialEnum::GrayDye => f.write_str("GRAY_DYE"),
            MaterialEnum::LightGrayDye => f.write_str("LIGHT_GRAY_DYE"),
            MaterialEnum::CyanDye => f.write_str("CYAN_DYE"),
            MaterialEnum::PurpleDye => f.write_str("PURPLE_DYE"),
            MaterialEnum::BlueDye => f.write_str("BLUE_DYE"),
            MaterialEnum::BrownDye => f.write_str("BROWN_DYE"),
            MaterialEnum::GreenDye => f.write_str("GREEN_DYE"),
            MaterialEnum::RedDye => f.write_str("RED_DYE"),
            MaterialEnum::BlackDye => f.write_str("BLACK_DYE"),
            MaterialEnum::BoneMeal => f.write_str("BONE_MEAL"),
            MaterialEnum::Bone => f.write_str("BONE"),
            MaterialEnum::Sugar => f.write_str("SUGAR"),
            MaterialEnum::Cake => f.write_str("CAKE"),
            MaterialEnum::WhiteBed => f.write_str("WHITE_BED"),
            MaterialEnum::OrangeBed => f.write_str("ORANGE_BED"),
            MaterialEnum::MagentaBed => f.write_str("MAGENTA_BED"),
            MaterialEnum::LightBlueBed => f.write_str("LIGHT_BLUE_BED"),
            MaterialEnum::YellowBed => f.write_str("YELLOW_BED"),
            MaterialEnum::LimeBed => f.write_str("LIME_BED"),
            MaterialEnum::PinkBed => f.write_str("PINK_BED"),
            MaterialEnum::GrayBed => f.write_str("GRAY_BED"),
            MaterialEnum::LightGrayBed => f.write_str("LIGHT_GRAY_BED"),
            MaterialEnum::CyanBed => f.write_str("CYAN_BED"),
            MaterialEnum::PurpleBed => f.write_str("PURPLE_BED"),
            MaterialEnum::BlueBed => f.write_str("BLUE_BED"),
            MaterialEnum::BrownBed => f.write_str("BROWN_BED"),
            MaterialEnum::GreenBed => f.write_str("GREEN_BED"),
            MaterialEnum::RedBed => f.write_str("RED_BED"),
            MaterialEnum::BlackBed => f.write_str("BLACK_BED"),
            MaterialEnum::Cookie => f.write_str("COOKIE"),
            MaterialEnum::FilledMap => f.write_str("FILLED_MAP"),
            MaterialEnum::Shears => f.write_str("SHEARS"),
            MaterialEnum::MelonSlice => f.write_str("MELON_SLICE"),
            MaterialEnum::DriedKelp => f.write_str("DRIED_KELP"),
            MaterialEnum::PumpkinSeeds => f.write_str("PUMPKIN_SEEDS"),
            MaterialEnum::MelonSeeds => f.write_str("MELON_SEEDS"),
            MaterialEnum::Beef => f.write_str("BEEF"),
            MaterialEnum::CookedBeef => f.write_str("COOKED_BEEF"),
            MaterialEnum::Chicken => f.write_str("CHICKEN"),
            MaterialEnum::CookedChicken => f.write_str("COOKED_CHICKEN"),
            MaterialEnum::RottenFlesh => f.write_str("ROTTEN_FLESH"),
            MaterialEnum::EnderPearl => f.write_str("ENDER_PEARL"),
            MaterialEnum::BlazeRod => f.write_str("BLAZE_ROD"),
            MaterialEnum::GhastTear => f.write_str("GHAST_TEAR"),
            MaterialEnum::GoldNugget => f.write_str("GOLD_NUGGET"),
            MaterialEnum::NetherWart => f.write_str("NETHER_WART"),
            MaterialEnum::Potion => f.write_str("POTION"),
            MaterialEnum::GlassBottle => f.write_str("GLASS_BOTTLE"),
            MaterialEnum::SpiderEye => f.write_str("SPIDER_EYE"),
            MaterialEnum::FermentedSpiderEye => f.write_str("FERMENTED_SPIDER_EYE"),
            MaterialEnum::BlazePowder => f.write_str("BLAZE_POWDER"),
            MaterialEnum::MagmaCream => f.write_str("MAGMA_CREAM"),
            MaterialEnum::BrewingStand => f.write_str("BREWING_STAND"),
            MaterialEnum::Cauldron => f.write_str("CAULDRON"),
            MaterialEnum::EnderEye => f.write_str("ENDER_EYE"),
            MaterialEnum::GlisteringMelonSlice => f.write_str("GLISTERING_MELON_SLICE"),
            MaterialEnum::AllaySpawnEgg => f.write_str("ALLAY_SPAWN_EGG"),
            MaterialEnum::AxolotlSpawnEgg => f.write_str("AXOLOTL_SPAWN_EGG"),
            MaterialEnum::BatSpawnEgg => f.write_str("BAT_SPAWN_EGG"),
            MaterialEnum::BeeSpawnEgg => f.write_str("BEE_SPAWN_EGG"),
            MaterialEnum::BlazeSpawnEgg => f.write_str("BLAZE_SPAWN_EGG"),
            MaterialEnum::CatSpawnEgg => f.write_str("CAT_SPAWN_EGG"),
            MaterialEnum::CamelSpawnEgg => f.write_str("CAMEL_SPAWN_EGG"),
            MaterialEnum::CaveSpiderSpawnEgg => f.write_str("CAVE_SPIDER_SPAWN_EGG"),
            MaterialEnum::ChickenSpawnEgg => f.write_str("CHICKEN_SPAWN_EGG"),
            MaterialEnum::CodSpawnEgg => f.write_str("COD_SPAWN_EGG"),
            MaterialEnum::CowSpawnEgg => f.write_str("COW_SPAWN_EGG"),
            MaterialEnum::CreeperSpawnEgg => f.write_str("CREEPER_SPAWN_EGG"),
            MaterialEnum::DolphinSpawnEgg => f.write_str("DOLPHIN_SPAWN_EGG"),
            MaterialEnum::DonkeySpawnEgg => f.write_str("DONKEY_SPAWN_EGG"),
            MaterialEnum::DrownedSpawnEgg => f.write_str("DROWNED_SPAWN_EGG"),
            MaterialEnum::ElderGuardianSpawnEgg => f.write_str("ELDER_GUARDIAN_SPAWN_EGG"),
            MaterialEnum::EnderDragonSpawnEgg => f.write_str("ENDER_DRAGON_SPAWN_EGG"),
            MaterialEnum::EndermanSpawnEgg => f.write_str("ENDERMAN_SPAWN_EGG"),
            MaterialEnum::EndermiteSpawnEgg => f.write_str("ENDERMITE_SPAWN_EGG"),
            MaterialEnum::EvokerSpawnEgg => f.write_str("EVOKER_SPAWN_EGG"),
            MaterialEnum::FoxSpawnEgg => f.write_str("FOX_SPAWN_EGG"),
            MaterialEnum::FrogSpawnEgg => f.write_str("FROG_SPAWN_EGG"),
            MaterialEnum::GhastSpawnEgg => f.write_str("GHAST_SPAWN_EGG"),
            MaterialEnum::GlowSquidSpawnEgg => f.write_str("GLOW_SQUID_SPAWN_EGG"),
            MaterialEnum::GoatSpawnEgg => f.write_str("GOAT_SPAWN_EGG"),
            MaterialEnum::GuardianSpawnEgg => f.write_str("GUARDIAN_SPAWN_EGG"),
            MaterialEnum::HoglinSpawnEgg => f.write_str("HOGLIN_SPAWN_EGG"),
            MaterialEnum::HorseSpawnEgg => f.write_str("HORSE_SPAWN_EGG"),
            MaterialEnum::HuskSpawnEgg => f.write_str("HUSK_SPAWN_EGG"),
            MaterialEnum::IronGolemSpawnEgg => f.write_str("IRON_GOLEM_SPAWN_EGG"),
            MaterialEnum::LlamaSpawnEgg => f.write_str("LLAMA_SPAWN_EGG"),
            MaterialEnum::MagmaCubeSpawnEgg => f.write_str("MAGMA_CUBE_SPAWN_EGG"),
            MaterialEnum::MooshroomSpawnEgg => f.write_str("MOOSHROOM_SPAWN_EGG"),
            MaterialEnum::MuleSpawnEgg => f.write_str("MULE_SPAWN_EGG"),
            MaterialEnum::OcelotSpawnEgg => f.write_str("OCELOT_SPAWN_EGG"),
            MaterialEnum::PandaSpawnEgg => f.write_str("PANDA_SPAWN_EGG"),
            MaterialEnum::ParrotSpawnEgg => f.write_str("PARROT_SPAWN_EGG"),
            MaterialEnum::PhantomSpawnEgg => f.write_str("PHANTOM_SPAWN_EGG"),
            MaterialEnum::PigSpawnEgg => f.write_str("PIG_SPAWN_EGG"),
            MaterialEnum::PiglinSpawnEgg => f.write_str("PIGLIN_SPAWN_EGG"),
            MaterialEnum::PiglinBruteSpawnEgg => f.write_str("PIGLIN_BRUTE_SPAWN_EGG"),
            MaterialEnum::PillagerSpawnEgg => f.write_str("PILLAGER_SPAWN_EGG"),
            MaterialEnum::PolarBearSpawnEgg => f.write_str("POLAR_BEAR_SPAWN_EGG"),
            MaterialEnum::PufferfishSpawnEgg => f.write_str("PUFFERFISH_SPAWN_EGG"),
            MaterialEnum::RabbitSpawnEgg => f.write_str("RABBIT_SPAWN_EGG"),
            MaterialEnum::RavagerSpawnEgg => f.write_str("RAVAGER_SPAWN_EGG"),
            MaterialEnum::SalmonSpawnEgg => f.write_str("SALMON_SPAWN_EGG"),
            MaterialEnum::SheepSpawnEgg => f.write_str("SHEEP_SPAWN_EGG"),
            MaterialEnum::ShulkerSpawnEgg => f.write_str("SHULKER_SPAWN_EGG"),
            MaterialEnum::SilverfishSpawnEgg => f.write_str("SILVERFISH_SPAWN_EGG"),
            MaterialEnum::SkeletonSpawnEgg => f.write_str("SKELETON_SPAWN_EGG"),
            MaterialEnum::SkeletonHorseSpawnEgg => f.write_str("SKELETON_HORSE_SPAWN_EGG"),
            MaterialEnum::SlimeSpawnEgg => f.write_str("SLIME_SPAWN_EGG"),
            MaterialEnum::SnifferSpawnEgg => f.write_str("SNIFFER_SPAWN_EGG"),
            MaterialEnum::SnowGolemSpawnEgg => f.write_str("SNOW_GOLEM_SPAWN_EGG"),
            MaterialEnum::SpiderSpawnEgg => f.write_str("SPIDER_SPAWN_EGG"),
            MaterialEnum::SquidSpawnEgg => f.write_str("SQUID_SPAWN_EGG"),
            MaterialEnum::StraySpawnEgg => f.write_str("STRAY_SPAWN_EGG"),
            MaterialEnum::StriderSpawnEgg => f.write_str("STRIDER_SPAWN_EGG"),
            MaterialEnum::TadpoleSpawnEgg => f.write_str("TADPOLE_SPAWN_EGG"),
            MaterialEnum::TraderLlamaSpawnEgg => f.write_str("TRADER_LLAMA_SPAWN_EGG"),
            MaterialEnum::TropicalFishSpawnEgg => f.write_str("TROPICAL_FISH_SPAWN_EGG"),
            MaterialEnum::TurtleSpawnEgg => f.write_str("TURTLE_SPAWN_EGG"),
            MaterialEnum::VexSpawnEgg => f.write_str("VEX_SPAWN_EGG"),
            MaterialEnum::VillagerSpawnEgg => f.write_str("VILLAGER_SPAWN_EGG"),
            MaterialEnum::VindicatorSpawnEgg => f.write_str("VINDICATOR_SPAWN_EGG"),
            MaterialEnum::WanderingTraderSpawnEgg => f.write_str("WANDERING_TRADER_SPAWN_EGG"),
            MaterialEnum::WardenSpawnEgg => f.write_str("WARDEN_SPAWN_EGG"),
            MaterialEnum::WitchSpawnEgg => f.write_str("WITCH_SPAWN_EGG"),
            MaterialEnum::WitherSpawnEgg => f.write_str("WITHER_SPAWN_EGG"),
            MaterialEnum::WitherSkeletonSpawnEgg => f.write_str("WITHER_SKELETON_SPAWN_EGG"),
            MaterialEnum::WolfSpawnEgg => f.write_str("WOLF_SPAWN_EGG"),
            MaterialEnum::ZoglinSpawnEgg => f.write_str("ZOGLIN_SPAWN_EGG"),
            MaterialEnum::ZombieSpawnEgg => f.write_str("ZOMBIE_SPAWN_EGG"),
            MaterialEnum::ZombieHorseSpawnEgg => f.write_str("ZOMBIE_HORSE_SPAWN_EGG"),
            MaterialEnum::ZombieVillagerSpawnEgg => f.write_str("ZOMBIE_VILLAGER_SPAWN_EGG"),
            MaterialEnum::ZombifiedPiglinSpawnEgg => f.write_str("ZOMBIFIED_PIGLIN_SPAWN_EGG"),
            MaterialEnum::ExperienceBottle => f.write_str("EXPERIENCE_BOTTLE"),
            MaterialEnum::FireCharge => f.write_str("FIRE_CHARGE"),
            MaterialEnum::WritableBook => f.write_str("WRITABLE_BOOK"),
            MaterialEnum::WrittenBook => f.write_str("WRITTEN_BOOK"),
            MaterialEnum::ItemFrame => f.write_str("ITEM_FRAME"),
            MaterialEnum::GlowItemFrame => f.write_str("GLOW_ITEM_FRAME"),
            MaterialEnum::FlowerPot => f.write_str("FLOWER_POT"),
            MaterialEnum::Carrot => f.write_str("CARROT"),
            MaterialEnum::Potato => f.write_str("POTATO"),
            MaterialEnum::BakedPotato => f.write_str("BAKED_POTATO"),
            MaterialEnum::PoisonousPotato => f.write_str("POISONOUS_POTATO"),
            MaterialEnum::Map => f.write_str("MAP"),
            MaterialEnum::GoldenCarrot => f.write_str("GOLDEN_CARROT"),
            MaterialEnum::SkeletonSkull => f.write_str("SKELETON_SKULL"),
            MaterialEnum::WitherSkeletonSkull => f.write_str("WITHER_SKELETON_SKULL"),
            MaterialEnum::PlayerHead => f.write_str("PLAYER_HEAD"),
            MaterialEnum::ZombieHead => f.write_str("ZOMBIE_HEAD"),
            MaterialEnum::CreeperHead => f.write_str("CREEPER_HEAD"),
            MaterialEnum::DragonHead => f.write_str("DRAGON_HEAD"),
            MaterialEnum::PiglinHead => f.write_str("PIGLIN_HEAD"),
            MaterialEnum::NetherStar => f.write_str("NETHER_STAR"),
            MaterialEnum::PumpkinPie => f.write_str("PUMPKIN_PIE"),
            MaterialEnum::FireworkRocket => f.write_str("FIREWORK_ROCKET"),
            MaterialEnum::FireworkStar => f.write_str("FIREWORK_STAR"),
            MaterialEnum::EnchantedBook => f.write_str("ENCHANTED_BOOK"),
            MaterialEnum::NetherBrick => f.write_str("NETHER_BRICK"),
            MaterialEnum::PrismarineShard => f.write_str("PRISMARINE_SHARD"),
            MaterialEnum::PrismarineCrystals => f.write_str("PRISMARINE_CRYSTALS"),
            MaterialEnum::Rabbit => f.write_str("RABBIT"),
            MaterialEnum::CookedRabbit => f.write_str("COOKED_RABBIT"),
            MaterialEnum::RabbitStew => f.write_str("RABBIT_STEW"),
            MaterialEnum::RabbitFoot => f.write_str("RABBIT_FOOT"),
            MaterialEnum::RabbitHide => f.write_str("RABBIT_HIDE"),
            MaterialEnum::ArmorStand => f.write_str("ARMOR_STAND"),
            MaterialEnum::IronHorseArmor => f.write_str("IRON_HORSE_ARMOR"),
            MaterialEnum::GoldenHorseArmor => f.write_str("GOLDEN_HORSE_ARMOR"),
            MaterialEnum::DiamondHorseArmor => f.write_str("DIAMOND_HORSE_ARMOR"),
            MaterialEnum::LeatherHorseArmor => f.write_str("LEATHER_HORSE_ARMOR"),
            MaterialEnum::Lead => f.write_str("LEAD"),
            MaterialEnum::NameTag => f.write_str("NAME_TAG"),
            MaterialEnum::CommandBlockMinecart => f.write_str("COMMAND_BLOCK_MINECART"),
            MaterialEnum::Mutton => f.write_str("MUTTON"),
            MaterialEnum::CookedMutton => f.write_str("COOKED_MUTTON"),
            MaterialEnum::WhiteBanner => f.write_str("WHITE_BANNER"),
            MaterialEnum::OrangeBanner => f.write_str("ORANGE_BANNER"),
            MaterialEnum::MagentaBanner => f.write_str("MAGENTA_BANNER"),
            MaterialEnum::LightBlueBanner => f.write_str("LIGHT_BLUE_BANNER"),
            MaterialEnum::YellowBanner => f.write_str("YELLOW_BANNER"),
            MaterialEnum::LimeBanner => f.write_str("LIME_BANNER"),
            MaterialEnum::PinkBanner => f.write_str("PINK_BANNER"),
            MaterialEnum::GrayBanner => f.write_str("GRAY_BANNER"),
            MaterialEnum::LightGrayBanner => f.write_str("LIGHT_GRAY_BANNER"),
            MaterialEnum::CyanBanner => f.write_str("CYAN_BANNER"),
            MaterialEnum::PurpleBanner => f.write_str("PURPLE_BANNER"),
            MaterialEnum::BlueBanner => f.write_str("BLUE_BANNER"),
            MaterialEnum::BrownBanner => f.write_str("BROWN_BANNER"),
            MaterialEnum::GreenBanner => f.write_str("GREEN_BANNER"),
            MaterialEnum::RedBanner => f.write_str("RED_BANNER"),
            MaterialEnum::BlackBanner => f.write_str("BLACK_BANNER"),
            MaterialEnum::EndCrystal => f.write_str("END_CRYSTAL"),
            MaterialEnum::ChorusFruit => f.write_str("CHORUS_FRUIT"),
            MaterialEnum::PoppedChorusFruit => f.write_str("POPPED_CHORUS_FRUIT"),
            MaterialEnum::TorchflowerSeeds => f.write_str("TORCHFLOWER_SEEDS"),
            MaterialEnum::PitcherPod => f.write_str("PITCHER_POD"),
            MaterialEnum::Beetroot => f.write_str("BEETROOT"),
            MaterialEnum::BeetrootSeeds => f.write_str("BEETROOT_SEEDS"),
            MaterialEnum::BeetrootSoup => f.write_str("BEETROOT_SOUP"),
            MaterialEnum::DragonBreath => f.write_str("DRAGON_BREATH"),
            MaterialEnum::SplashPotion => f.write_str("SPLASH_POTION"),
            MaterialEnum::SpectralArrow => f.write_str("SPECTRAL_ARROW"),
            MaterialEnum::TippedArrow => f.write_str("TIPPED_ARROW"),
            MaterialEnum::LingeringPotion => f.write_str("LINGERING_POTION"),
            MaterialEnum::Shield => f.write_str("SHIELD"),
            MaterialEnum::TotemOfUndying => f.write_str("TOTEM_OF_UNDYING"),
            MaterialEnum::ShulkerShell => f.write_str("SHULKER_SHELL"),
            MaterialEnum::IronNugget => f.write_str("IRON_NUGGET"),
            MaterialEnum::KnowledgeBook => f.write_str("KNOWLEDGE_BOOK"),
            MaterialEnum::DebugStick => f.write_str("DEBUG_STICK"),
            MaterialEnum::MusicDisc13 => f.write_str("MUSIC_DISC_13"),
            MaterialEnum::MusicDiscCat => f.write_str("MUSIC_DISC_CAT"),
            MaterialEnum::MusicDiscBlocks => f.write_str("MUSIC_DISC_BLOCKS"),
            MaterialEnum::MusicDiscChirp => f.write_str("MUSIC_DISC_CHIRP"),
            MaterialEnum::MusicDiscFar => f.write_str("MUSIC_DISC_FAR"),
            MaterialEnum::MusicDiscMall => f.write_str("MUSIC_DISC_MALL"),
            MaterialEnum::MusicDiscMellohi => f.write_str("MUSIC_DISC_MELLOHI"),
            MaterialEnum::MusicDiscStal => f.write_str("MUSIC_DISC_STAL"),
            MaterialEnum::MusicDiscStrad => f.write_str("MUSIC_DISC_STRAD"),
            MaterialEnum::MusicDiscWard => f.write_str("MUSIC_DISC_WARD"),
            MaterialEnum::MusicDisc11 => f.write_str("MUSIC_DISC_11"),
            MaterialEnum::MusicDiscWait => f.write_str("MUSIC_DISC_WAIT"),
            MaterialEnum::MusicDiscOtherside => f.write_str("MUSIC_DISC_OTHERSIDE"),
            MaterialEnum::MusicDiscRelic => f.write_str("MUSIC_DISC_RELIC"),
            MaterialEnum::MusicDisc5 => f.write_str("MUSIC_DISC_5"),
            MaterialEnum::MusicDiscPigstep => f.write_str("MUSIC_DISC_PIGSTEP"),
            MaterialEnum::DiscFragment5 => f.write_str("DISC_FRAGMENT_5"),
            MaterialEnum::Trident => f.write_str("TRIDENT"),
            MaterialEnum::PhantomMembrane => f.write_str("PHANTOM_MEMBRANE"),
            MaterialEnum::NautilusShell => f.write_str("NAUTILUS_SHELL"),
            MaterialEnum::HeartOfTheSea => f.write_str("HEART_OF_THE_SEA"),
            MaterialEnum::Crossbow => f.write_str("CROSSBOW"),
            MaterialEnum::SuspiciousStew => f.write_str("SUSPICIOUS_STEW"),
            MaterialEnum::Loom => f.write_str("LOOM"),
            MaterialEnum::FlowerBannerPattern => f.write_str("FLOWER_BANNER_PATTERN"),
            MaterialEnum::CreeperBannerPattern => f.write_str("CREEPER_BANNER_PATTERN"),
            MaterialEnum::SkullBannerPattern => f.write_str("SKULL_BANNER_PATTERN"),
            MaterialEnum::MojangBannerPattern => f.write_str("MOJANG_BANNER_PATTERN"),
            MaterialEnum::GlobeBannerPattern => f.write_str("GLOBE_BANNER_PATTERN"),
            MaterialEnum::PiglinBannerPattern => f.write_str("PIGLIN_BANNER_PATTERN"),
            MaterialEnum::GoatHorn => f.write_str("GOAT_HORN"),
            MaterialEnum::Composter => f.write_str("COMPOSTER"),
            MaterialEnum::Barrel => f.write_str("BARREL"),
            MaterialEnum::Smoker => f.write_str("SMOKER"),
            MaterialEnum::BlastFurnace => f.write_str("BLAST_FURNACE"),
            MaterialEnum::CartographyTable => f.write_str("CARTOGRAPHY_TABLE"),
            MaterialEnum::FletchingTable => f.write_str("FLETCHING_TABLE"),
            MaterialEnum::Grindstone => f.write_str("GRINDSTONE"),
            MaterialEnum::SmithingTable => f.write_str("SMITHING_TABLE"),
            MaterialEnum::Stonecutter => f.write_str("STONECUTTER"),
            MaterialEnum::Bell => f.write_str("BELL"),
            MaterialEnum::Lantern => f.write_str("LANTERN"),
            MaterialEnum::SoulLantern => f.write_str("SOUL_LANTERN"),
            MaterialEnum::SweetBerries => f.write_str("SWEET_BERRIES"),
            MaterialEnum::GlowBerries => f.write_str("GLOW_BERRIES"),
            MaterialEnum::Campfire => f.write_str("CAMPFIRE"),
            MaterialEnum::SoulCampfire => f.write_str("SOUL_CAMPFIRE"),
            MaterialEnum::Shroomlight => f.write_str("SHROOMLIGHT"),
            MaterialEnum::Honeycomb => f.write_str("HONEYCOMB"),
            MaterialEnum::BeeNest => f.write_str("BEE_NEST"),
            MaterialEnum::Beehive => f.write_str("BEEHIVE"),
            MaterialEnum::HoneyBottle => f.write_str("HONEY_BOTTLE"),
            MaterialEnum::HoneycombBlock => f.write_str("HONEYCOMB_BLOCK"),
            MaterialEnum::Lodestone => f.write_str("LODESTONE"),
            MaterialEnum::CryingObsidian => f.write_str("CRYING_OBSIDIAN"),
            MaterialEnum::Blackstone => f.write_str("BLACKSTONE"),
            MaterialEnum::BlackstoneSlab => f.write_str("BLACKSTONE_SLAB"),
            MaterialEnum::BlackstoneStairs => f.write_str("BLACKSTONE_STAIRS"),
            MaterialEnum::GildedBlackstone => f.write_str("GILDED_BLACKSTONE"),
            MaterialEnum::PolishedBlackstone => f.write_str("POLISHED_BLACKSTONE"),
            MaterialEnum::PolishedBlackstoneSlab => f.write_str("POLISHED_BLACKSTONE_SLAB"),
            MaterialEnum::PolishedBlackstoneStairs => f.write_str("POLISHED_BLACKSTONE_STAIRS"),
            MaterialEnum::ChiseledPolishedBlackstone => f.write_str("CHISELED_POLISHED_BLACKSTONE"),
            MaterialEnum::PolishedBlackstoneBricks => f.write_str("POLISHED_BLACKSTONE_BRICKS"),
            MaterialEnum::PolishedBlackstoneBrickSlab => {
                f.write_str("POLISHED_BLACKSTONE_BRICK_SLAB")
            }
            MaterialEnum::PolishedBlackstoneBrickStairs => {
                f.write_str("POLISHED_BLACKSTONE_BRICK_STAIRS")
            }
            MaterialEnum::CrackedPolishedBlackstoneBricks => {
                f.write_str("CRACKED_POLISHED_BLACKSTONE_BRICKS")
            }
            MaterialEnum::RespawnAnchor => f.write_str("RESPAWN_ANCHOR"),
            MaterialEnum::Candle => f.write_str("CANDLE"),
            MaterialEnum::WhiteCandle => f.write_str("WHITE_CANDLE"),
            MaterialEnum::OrangeCandle => f.write_str("ORANGE_CANDLE"),
            MaterialEnum::MagentaCandle => f.write_str("MAGENTA_CANDLE"),
            MaterialEnum::LightBlueCandle => f.write_str("LIGHT_BLUE_CANDLE"),
            MaterialEnum::YellowCandle => f.write_str("YELLOW_CANDLE"),
            MaterialEnum::LimeCandle => f.write_str("LIME_CANDLE"),
            MaterialEnum::PinkCandle => f.write_str("PINK_CANDLE"),
            MaterialEnum::GrayCandle => f.write_str("GRAY_CANDLE"),
            MaterialEnum::LightGrayCandle => f.write_str("LIGHT_GRAY_CANDLE"),
            MaterialEnum::CyanCandle => f.write_str("CYAN_CANDLE"),
            MaterialEnum::PurpleCandle => f.write_str("PURPLE_CANDLE"),
            MaterialEnum::BlueCandle => f.write_str("BLUE_CANDLE"),
            MaterialEnum::BrownCandle => f.write_str("BROWN_CANDLE"),
            MaterialEnum::GreenCandle => f.write_str("GREEN_CANDLE"),
            MaterialEnum::RedCandle => f.write_str("RED_CANDLE"),
            MaterialEnum::BlackCandle => f.write_str("BLACK_CANDLE"),
            MaterialEnum::SmallAmethystBud => f.write_str("SMALL_AMETHYST_BUD"),
            MaterialEnum::MediumAmethystBud => f.write_str("MEDIUM_AMETHYST_BUD"),
            MaterialEnum::LargeAmethystBud => f.write_str("LARGE_AMETHYST_BUD"),
            MaterialEnum::AmethystCluster => f.write_str("AMETHYST_CLUSTER"),
            MaterialEnum::PointedDripstone => f.write_str("POINTED_DRIPSTONE"),
            MaterialEnum::OchreFroglight => f.write_str("OCHRE_FROGLIGHT"),
            MaterialEnum::VerdantFroglight => f.write_str("VERDANT_FROGLIGHT"),
            MaterialEnum::PearlescentFroglight => f.write_str("PEARLESCENT_FROGLIGHT"),
            MaterialEnum::Frogspawn => f.write_str("FROGSPAWN"),
            MaterialEnum::EchoShard => f.write_str("ECHO_SHARD"),
            MaterialEnum::Brush => f.write_str("BRUSH"),
            MaterialEnum::NetheriteUpgradeSmithingTemplate => {
                f.write_str("NETHERITE_UPGRADE_SMITHING_TEMPLATE")
            }
            MaterialEnum::SentryArmorTrimSmithingTemplate => {
                f.write_str("SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::DuneArmorTrimSmithingTemplate => {
                f.write_str("DUNE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::CoastArmorTrimSmithingTemplate => {
                f.write_str("COAST_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::WildArmorTrimSmithingTemplate => {
                f.write_str("WILD_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::WardArmorTrimSmithingTemplate => {
                f.write_str("WARD_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::EyeArmorTrimSmithingTemplate => {
                f.write_str("EYE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::VexArmorTrimSmithingTemplate => {
                f.write_str("VEX_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::TideArmorTrimSmithingTemplate => {
                f.write_str("TIDE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::SnoutArmorTrimSmithingTemplate => {
                f.write_str("SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::RibArmorTrimSmithingTemplate => {
                f.write_str("RIB_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::SpireArmorTrimSmithingTemplate => {
                f.write_str("SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::WayfinderArmorTrimSmithingTemplate => {
                f.write_str("WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::ShaperArmorTrimSmithingTemplate => {
                f.write_str("SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::SilenceArmorTrimSmithingTemplate => {
                f.write_str("SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::RaiserArmorTrimSmithingTemplate => {
                f.write_str("RAISER_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::HostArmorTrimSmithingTemplate => {
                f.write_str("HOST_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::AnglerPotterySherd => f.write_str("ANGLER_POTTERY_SHERD"),
            MaterialEnum::ArcherPotterySherd => f.write_str("ARCHER_POTTERY_SHERD"),
            MaterialEnum::ArmsUpPotterySherd => f.write_str("ARMS_UP_POTTERY_SHERD"),
            MaterialEnum::BladePotterySherd => f.write_str("BLADE_POTTERY_SHERD"),
            MaterialEnum::BrewerPotterySherd => f.write_str("BREWER_POTTERY_SHERD"),
            MaterialEnum::BurnPotterySherd => f.write_str("BURN_POTTERY_SHERD"),
            MaterialEnum::DangerPotterySherd => f.write_str("DANGER_POTTERY_SHERD"),
            MaterialEnum::ExplorerPotterySherd => f.write_str("EXPLORER_POTTERY_SHERD"),
            MaterialEnum::FriendPotterySherd => f.write_str("FRIEND_POTTERY_SHERD"),
            MaterialEnum::HeartPotterySherd => f.write_str("HEART_POTTERY_SHERD"),
            MaterialEnum::HeartbreakPotterySherd => f.write_str("HEARTBREAK_POTTERY_SHERD"),
            MaterialEnum::HowlPotterySherd => f.write_str("HOWL_POTTERY_SHERD"),
            MaterialEnum::MinerPotterySherd => f.write_str("MINER_POTTERY_SHERD"),
            MaterialEnum::MournerPotterySherd => f.write_str("MOURNER_POTTERY_SHERD"),
            MaterialEnum::PlentyPotterySherd => f.write_str("PLENTY_POTTERY_SHERD"),
            MaterialEnum::PrizePotterySherd => f.write_str("PRIZE_POTTERY_SHERD"),
            MaterialEnum::SheafPotterySherd => f.write_str("SHEAF_POTTERY_SHERD"),
            MaterialEnum::ShelterPotterySherd => f.write_str("SHELTER_POTTERY_SHERD"),
            MaterialEnum::SkullPotterySherd => f.write_str("SKULL_POTTERY_SHERD"),
            MaterialEnum::SnortPotterySherd => f.write_str("SNORT_POTTERY_SHERD"),
            MaterialEnum::Water => f.write_str("WATER"),
            MaterialEnum::Lava => f.write_str("LAVA"),
            MaterialEnum::TallSeagrass => f.write_str("TALL_SEAGRASS"),
            MaterialEnum::PistonHead => f.write_str("PISTON_HEAD"),
            MaterialEnum::MovingPiston => f.write_str("MOVING_PISTON"),
            MaterialEnum::WallTorch => f.write_str("WALL_TORCH"),
            MaterialEnum::Fire => f.write_str("FIRE"),
            MaterialEnum::SoulFire => f.write_str("SOUL_FIRE"),
            MaterialEnum::RedstoneWire => f.write_str("REDSTONE_WIRE"),
            MaterialEnum::OakWallSign => f.write_str("OAK_WALL_SIGN"),
            MaterialEnum::SpruceWallSign => f.write_str("SPRUCE_WALL_SIGN"),
            MaterialEnum::BirchWallSign => f.write_str("BIRCH_WALL_SIGN"),
            MaterialEnum::AcaciaWallSign => f.write_str("ACACIA_WALL_SIGN"),
            MaterialEnum::CherryWallSign => f.write_str("CHERRY_WALL_SIGN"),
            MaterialEnum::JungleWallSign => f.write_str("JUNGLE_WALL_SIGN"),
            MaterialEnum::DarkOakWallSign => f.write_str("DARK_OAK_WALL_SIGN"),
            MaterialEnum::MangroveWallSign => f.write_str("MANGROVE_WALL_SIGN"),
            MaterialEnum::BambooWallSign => f.write_str("BAMBOO_WALL_SIGN"),
            MaterialEnum::OakWallHangingSign => f.write_str("OAK_WALL_HANGING_SIGN"),
            MaterialEnum::SpruceWallHangingSign => f.write_str("SPRUCE_WALL_HANGING_SIGN"),
            MaterialEnum::BirchWallHangingSign => f.write_str("BIRCH_WALL_HANGING_SIGN"),
            MaterialEnum::AcaciaWallHangingSign => f.write_str("ACACIA_WALL_HANGING_SIGN"),
            MaterialEnum::CherryWallHangingSign => f.write_str("CHERRY_WALL_HANGING_SIGN"),
            MaterialEnum::JungleWallHangingSign => f.write_str("JUNGLE_WALL_HANGING_SIGN"),
            MaterialEnum::DarkOakWallHangingSign => f.write_str("DARK_OAK_WALL_HANGING_SIGN"),
            MaterialEnum::MangroveWallHangingSign => f.write_str("MANGROVE_WALL_HANGING_SIGN"),
            MaterialEnum::CrimsonWallHangingSign => f.write_str("CRIMSON_WALL_HANGING_SIGN"),
            MaterialEnum::WarpedWallHangingSign => f.write_str("WARPED_WALL_HANGING_SIGN"),
            MaterialEnum::BambooWallHangingSign => f.write_str("BAMBOO_WALL_HANGING_SIGN"),
            MaterialEnum::RedstoneWallTorch => f.write_str("REDSTONE_WALL_TORCH"),
            MaterialEnum::SoulWallTorch => f.write_str("SOUL_WALL_TORCH"),
            MaterialEnum::NetherPortal => f.write_str("NETHER_PORTAL"),
            MaterialEnum::AttachedPumpkinStem => f.write_str("ATTACHED_PUMPKIN_STEM"),
            MaterialEnum::AttachedMelonStem => f.write_str("ATTACHED_MELON_STEM"),
            MaterialEnum::PumpkinStem => f.write_str("PUMPKIN_STEM"),
            MaterialEnum::MelonStem => f.write_str("MELON_STEM"),
            MaterialEnum::WaterCauldron => f.write_str("WATER_CAULDRON"),
            MaterialEnum::LavaCauldron => f.write_str("LAVA_CAULDRON"),
            MaterialEnum::PowderSnowCauldron => f.write_str("POWDER_SNOW_CAULDRON"),
            MaterialEnum::EndPortal => f.write_str("END_PORTAL"),
            MaterialEnum::Cocoa => f.write_str("COCOA"),
            MaterialEnum::Tripwire => f.write_str("TRIPWIRE"),
            MaterialEnum::PottedTorchflower => f.write_str("POTTED_TORCHFLOWER"),
            MaterialEnum::PottedOakSapling => f.write_str("POTTED_OAK_SAPLING"),
            MaterialEnum::PottedSpruceSapling => f.write_str("POTTED_SPRUCE_SAPLING"),
            MaterialEnum::PottedBirchSapling => f.write_str("POTTED_BIRCH_SAPLING"),
            MaterialEnum::PottedJungleSapling => f.write_str("POTTED_JUNGLE_SAPLING"),
            MaterialEnum::PottedAcaciaSapling => f.write_str("POTTED_ACACIA_SAPLING"),
            MaterialEnum::PottedCherrySapling => f.write_str("POTTED_CHERRY_SAPLING"),
            MaterialEnum::PottedDarkOakSapling => f.write_str("POTTED_DARK_OAK_SAPLING"),
            MaterialEnum::PottedMangrovePropagule => f.write_str("POTTED_MANGROVE_PROPAGULE"),
            MaterialEnum::PottedFern => f.write_str("POTTED_FERN"),
            MaterialEnum::PottedDandelion => f.write_str("POTTED_DANDELION"),
            MaterialEnum::PottedPoppy => f.write_str("POTTED_POPPY"),
            MaterialEnum::PottedBlueOrchid => f.write_str("POTTED_BLUE_ORCHID"),
            MaterialEnum::PottedAllium => f.write_str("POTTED_ALLIUM"),
            MaterialEnum::PottedAzureBluet => f.write_str("POTTED_AZURE_BLUET"),
            MaterialEnum::PottedRedTulip => f.write_str("POTTED_RED_TULIP"),
            MaterialEnum::PottedOrangeTulip => f.write_str("POTTED_ORANGE_TULIP"),
            MaterialEnum::PottedWhiteTulip => f.write_str("POTTED_WHITE_TULIP"),
            MaterialEnum::PottedPinkTulip => f.write_str("POTTED_PINK_TULIP"),
            MaterialEnum::PottedOxeyeDaisy => f.write_str("POTTED_OXEYE_DAISY"),
            MaterialEnum::PottedCornflower => f.write_str("POTTED_CORNFLOWER"),
            MaterialEnum::PottedLilyOfTheValley => f.write_str("POTTED_LILY_OF_THE_VALLEY"),
            MaterialEnum::PottedWitherRose => f.write_str("POTTED_WITHER_ROSE"),
            MaterialEnum::PottedRedMushroom => f.write_str("POTTED_RED_MUSHROOM"),
            MaterialEnum::PottedBrownMushroom => f.write_str("POTTED_BROWN_MUSHROOM"),
            MaterialEnum::PottedDeadBush => f.write_str("POTTED_DEAD_BUSH"),
            MaterialEnum::PottedCactus => f.write_str("POTTED_CACTUS"),
            MaterialEnum::Carrots => f.write_str("CARROTS"),
            MaterialEnum::Potatoes => f.write_str("POTATOES"),
            MaterialEnum::SkeletonWallSkull => f.write_str("SKELETON_WALL_SKULL"),
            MaterialEnum::WitherSkeletonWallSkull => f.write_str("WITHER_SKELETON_WALL_SKULL"),
            MaterialEnum::ZombieWallHead => f.write_str("ZOMBIE_WALL_HEAD"),
            MaterialEnum::PlayerWallHead => f.write_str("PLAYER_WALL_HEAD"),
            MaterialEnum::CreeperWallHead => f.write_str("CREEPER_WALL_HEAD"),
            MaterialEnum::DragonWallHead => f.write_str("DRAGON_WALL_HEAD"),
            MaterialEnum::PiglinWallHead => f.write_str("PIGLIN_WALL_HEAD"),
            MaterialEnum::WhiteWallBanner => f.write_str("WHITE_WALL_BANNER"),
            MaterialEnum::OrangeWallBanner => f.write_str("ORANGE_WALL_BANNER"),
            MaterialEnum::MagentaWallBanner => f.write_str("MAGENTA_WALL_BANNER"),
            MaterialEnum::LightBlueWallBanner => f.write_str("LIGHT_BLUE_WALL_BANNER"),
            MaterialEnum::YellowWallBanner => f.write_str("YELLOW_WALL_BANNER"),
            MaterialEnum::LimeWallBanner => f.write_str("LIME_WALL_BANNER"),
            MaterialEnum::PinkWallBanner => f.write_str("PINK_WALL_BANNER"),
            MaterialEnum::GrayWallBanner => f.write_str("GRAY_WALL_BANNER"),
            MaterialEnum::LightGrayWallBanner => f.write_str("LIGHT_GRAY_WALL_BANNER"),
            MaterialEnum::CyanWallBanner => f.write_str("CYAN_WALL_BANNER"),
            MaterialEnum::PurpleWallBanner => f.write_str("PURPLE_WALL_BANNER"),
            MaterialEnum::BlueWallBanner => f.write_str("BLUE_WALL_BANNER"),
            MaterialEnum::BrownWallBanner => f.write_str("BROWN_WALL_BANNER"),
            MaterialEnum::GreenWallBanner => f.write_str("GREEN_WALL_BANNER"),
            MaterialEnum::RedWallBanner => f.write_str("RED_WALL_BANNER"),
            MaterialEnum::BlackWallBanner => f.write_str("BLACK_WALL_BANNER"),
            MaterialEnum::TorchflowerCrop => f.write_str("TORCHFLOWER_CROP"),
            MaterialEnum::PitcherCrop => f.write_str("PITCHER_CROP"),
            MaterialEnum::Beetroots => f.write_str("BEETROOTS"),
            MaterialEnum::EndGateway => f.write_str("END_GATEWAY"),
            MaterialEnum::FrostedIce => f.write_str("FROSTED_ICE"),
            MaterialEnum::KelpPlant => f.write_str("KELP_PLANT"),
            MaterialEnum::DeadTubeCoralWallFan => f.write_str("DEAD_TUBE_CORAL_WALL_FAN"),
            MaterialEnum::DeadBrainCoralWallFan => f.write_str("DEAD_BRAIN_CORAL_WALL_FAN"),
            MaterialEnum::DeadBubbleCoralWallFan => f.write_str("DEAD_BUBBLE_CORAL_WALL_FAN"),
            MaterialEnum::DeadFireCoralWallFan => f.write_str("DEAD_FIRE_CORAL_WALL_FAN"),
            MaterialEnum::DeadHornCoralWallFan => f.write_str("DEAD_HORN_CORAL_WALL_FAN"),
            MaterialEnum::TubeCoralWallFan => f.write_str("TUBE_CORAL_WALL_FAN"),
            MaterialEnum::BrainCoralWallFan => f.write_str("BRAIN_CORAL_WALL_FAN"),
            MaterialEnum::BubbleCoralWallFan => f.write_str("BUBBLE_CORAL_WALL_FAN"),
            MaterialEnum::FireCoralWallFan => f.write_str("FIRE_CORAL_WALL_FAN"),
            MaterialEnum::HornCoralWallFan => f.write_str("HORN_CORAL_WALL_FAN"),
            MaterialEnum::BambooSapling => f.write_str("BAMBOO_SAPLING"),
            MaterialEnum::PottedBamboo => f.write_str("POTTED_BAMBOO"),
            MaterialEnum::VoidAir => f.write_str("VOID_AIR"),
            MaterialEnum::CaveAir => f.write_str("CAVE_AIR"),
            MaterialEnum::BubbleColumn => f.write_str("BUBBLE_COLUMN"),
            MaterialEnum::SweetBerryBush => f.write_str("SWEET_BERRY_BUSH"),
            MaterialEnum::WeepingVinesPlant => f.write_str("WEEPING_VINES_PLANT"),
            MaterialEnum::TwistingVinesPlant => f.write_str("TWISTING_VINES_PLANT"),
            MaterialEnum::CrimsonWallSign => f.write_str("CRIMSON_WALL_SIGN"),
            MaterialEnum::WarpedWallSign => f.write_str("WARPED_WALL_SIGN"),
            MaterialEnum::PottedCrimsonFungus => f.write_str("POTTED_CRIMSON_FUNGUS"),
            MaterialEnum::PottedWarpedFungus => f.write_str("POTTED_WARPED_FUNGUS"),
            MaterialEnum::PottedCrimsonRoots => f.write_str("POTTED_CRIMSON_ROOTS"),
            MaterialEnum::PottedWarpedRoots => f.write_str("POTTED_WARPED_ROOTS"),
            MaterialEnum::CandleCake => f.write_str("CANDLE_CAKE"),
            MaterialEnum::WhiteCandleCake => f.write_str("WHITE_CANDLE_CAKE"),
            MaterialEnum::OrangeCandleCake => f.write_str("ORANGE_CANDLE_CAKE"),
            MaterialEnum::MagentaCandleCake => f.write_str("MAGENTA_CANDLE_CAKE"),
            MaterialEnum::LightBlueCandleCake => f.write_str("LIGHT_BLUE_CANDLE_CAKE"),
            MaterialEnum::YellowCandleCake => f.write_str("YELLOW_CANDLE_CAKE"),
            MaterialEnum::LimeCandleCake => f.write_str("LIME_CANDLE_CAKE"),
            MaterialEnum::PinkCandleCake => f.write_str("PINK_CANDLE_CAKE"),
            MaterialEnum::GrayCandleCake => f.write_str("GRAY_CANDLE_CAKE"),
            MaterialEnum::LightGrayCandleCake => f.write_str("LIGHT_GRAY_CANDLE_CAKE"),
            MaterialEnum::CyanCandleCake => f.write_str("CYAN_CANDLE_CAKE"),
            MaterialEnum::PurpleCandleCake => f.write_str("PURPLE_CANDLE_CAKE"),
            MaterialEnum::BlueCandleCake => f.write_str("BLUE_CANDLE_CAKE"),
            MaterialEnum::BrownCandleCake => f.write_str("BROWN_CANDLE_CAKE"),
            MaterialEnum::GreenCandleCake => f.write_str("GREEN_CANDLE_CAKE"),
            MaterialEnum::RedCandleCake => f.write_str("RED_CANDLE_CAKE"),
            MaterialEnum::BlackCandleCake => f.write_str("BLACK_CANDLE_CAKE"),
            MaterialEnum::PowderSnow => f.write_str("POWDER_SNOW"),
            MaterialEnum::CaveVines => f.write_str("CAVE_VINES"),
            MaterialEnum::CaveVinesPlant => f.write_str("CAVE_VINES_PLANT"),
            MaterialEnum::BigDripleafStem => f.write_str("BIG_DRIPLEAF_STEM"),
            MaterialEnum::PottedAzaleaBush => f.write_str("POTTED_AZALEA_BUSH"),
            MaterialEnum::PottedFloweringAzaleaBush => f.write_str("POTTED_FLOWERING_AZALEA_BUSH"),
            MaterialEnum::LegacyAir => f.write_str("LEGACY_AIR"),
            MaterialEnum::LegacyStone => f.write_str("LEGACY_STONE"),
            MaterialEnum::LegacyGrass => f.write_str("LEGACY_GRASS"),
            MaterialEnum::LegacyDirt => f.write_str("LEGACY_DIRT"),
            MaterialEnum::LegacyCobblestone => f.write_str("LEGACY_COBBLESTONE"),
            MaterialEnum::LegacyWood => f.write_str("LEGACY_WOOD"),
            MaterialEnum::LegacySapling => f.write_str("LEGACY_SAPLING"),
            MaterialEnum::LegacyBedrock => f.write_str("LEGACY_BEDROCK"),
            MaterialEnum::LegacyWater => f.write_str("LEGACY_WATER"),
            MaterialEnum::LegacyStationaryWater => f.write_str("LEGACY_STATIONARY_WATER"),
            MaterialEnum::LegacyLava => f.write_str("LEGACY_LAVA"),
            MaterialEnum::LegacyStationaryLava => f.write_str("LEGACY_STATIONARY_LAVA"),
            MaterialEnum::LegacySand => f.write_str("LEGACY_SAND"),
            MaterialEnum::LegacyGravel => f.write_str("LEGACY_GRAVEL"),
            MaterialEnum::LegacyGoldOre => f.write_str("LEGACY_GOLD_ORE"),
            MaterialEnum::LegacyIronOre => f.write_str("LEGACY_IRON_ORE"),
            MaterialEnum::LegacyCoalOre => f.write_str("LEGACY_COAL_ORE"),
            MaterialEnum::LegacyLog => f.write_str("LEGACY_LOG"),
            MaterialEnum::LegacyLeaves => f.write_str("LEGACY_LEAVES"),
            MaterialEnum::LegacySponge => f.write_str("LEGACY_SPONGE"),
            MaterialEnum::LegacyGlass => f.write_str("LEGACY_GLASS"),
            MaterialEnum::LegacyLapisOre => f.write_str("LEGACY_LAPIS_ORE"),
            MaterialEnum::LegacyLapisBlock => f.write_str("LEGACY_LAPIS_BLOCK"),
            MaterialEnum::LegacyDispenser => f.write_str("LEGACY_DISPENSER"),
            MaterialEnum::LegacySandstone => f.write_str("LEGACY_SANDSTONE"),
            MaterialEnum::LegacyNoteBlock => f.write_str("LEGACY_NOTE_BLOCK"),
            MaterialEnum::LegacyBedBlock => f.write_str("LEGACY_BED_BLOCK"),
            MaterialEnum::LegacyPoweredRail => f.write_str("LEGACY_POWERED_RAIL"),
            MaterialEnum::LegacyDetectorRail => f.write_str("LEGACY_DETECTOR_RAIL"),
            MaterialEnum::LegacyPistonStickyBase => f.write_str("LEGACY_PISTON_STICKY_BASE"),
            MaterialEnum::LegacyWeb => f.write_str("LEGACY_WEB"),
            MaterialEnum::LegacyLongGrass => f.write_str("LEGACY_LONG_GRASS"),
            MaterialEnum::LegacyDeadBush => f.write_str("LEGACY_DEAD_BUSH"),
            MaterialEnum::LegacyPistonBase => f.write_str("LEGACY_PISTON_BASE"),
            MaterialEnum::LegacyPistonExtension => f.write_str("LEGACY_PISTON_EXTENSION"),
            MaterialEnum::LegacyWool => f.write_str("LEGACY_WOOL"),
            MaterialEnum::LegacyPistonMovingPiece => f.write_str("LEGACY_PISTON_MOVING_PIECE"),
            MaterialEnum::LegacyYellowFlower => f.write_str("LEGACY_YELLOW_FLOWER"),
            MaterialEnum::LegacyRedRose => f.write_str("LEGACY_RED_ROSE"),
            MaterialEnum::LegacyBrownMushroom => f.write_str("LEGACY_BROWN_MUSHROOM"),
            MaterialEnum::LegacyRedMushroom => f.write_str("LEGACY_RED_MUSHROOM"),
            MaterialEnum::LegacyGoldBlock => f.write_str("LEGACY_GOLD_BLOCK"),
            MaterialEnum::LegacyIronBlock => f.write_str("LEGACY_IRON_BLOCK"),
            MaterialEnum::LegacyDoubleStep => f.write_str("LEGACY_DOUBLE_STEP"),
            MaterialEnum::LegacyStep => f.write_str("LEGACY_STEP"),
            MaterialEnum::LegacyBrick => f.write_str("LEGACY_BRICK"),
            MaterialEnum::LegacyTnt => f.write_str("LEGACY_TNT"),
            MaterialEnum::LegacyBookshelf => f.write_str("LEGACY_BOOKSHELF"),
            MaterialEnum::LegacyMossyCobblestone => f.write_str("LEGACY_MOSSY_COBBLESTONE"),
            MaterialEnum::LegacyObsidian => f.write_str("LEGACY_OBSIDIAN"),
            MaterialEnum::LegacyTorch => f.write_str("LEGACY_TORCH"),
            MaterialEnum::LegacyFire => f.write_str("LEGACY_FIRE"),
            MaterialEnum::LegacyMobSpawner => f.write_str("LEGACY_MOB_SPAWNER"),
            MaterialEnum::LegacyWoodStairs => f.write_str("LEGACY_WOOD_STAIRS"),
            MaterialEnum::LegacyChest => f.write_str("LEGACY_CHEST"),
            MaterialEnum::LegacyRedstoneWire => f.write_str("LEGACY_REDSTONE_WIRE"),
            MaterialEnum::LegacyDiamondOre => f.write_str("LEGACY_DIAMOND_ORE"),
            MaterialEnum::LegacyDiamondBlock => f.write_str("LEGACY_DIAMOND_BLOCK"),
            MaterialEnum::LegacyWorkbench => f.write_str("LEGACY_WORKBENCH"),
            MaterialEnum::LegacyCrops => f.write_str("LEGACY_CROPS"),
            MaterialEnum::LegacySoil => f.write_str("LEGACY_SOIL"),
            MaterialEnum::LegacyFurnace => f.write_str("LEGACY_FURNACE"),
            MaterialEnum::LegacyBurningFurnace => f.write_str("LEGACY_BURNING_FURNACE"),
            MaterialEnum::LegacySignPost => f.write_str("LEGACY_SIGN_POST"),
            MaterialEnum::LegacyWoodenDoor => f.write_str("LEGACY_WOODEN_DOOR"),
            MaterialEnum::LegacyLadder => f.write_str("LEGACY_LADDER"),
            MaterialEnum::LegacyRails => f.write_str("LEGACY_RAILS"),
            MaterialEnum::LegacyCobblestoneStairs => f.write_str("LEGACY_COBBLESTONE_STAIRS"),
            MaterialEnum::LegacyWallSign => f.write_str("LEGACY_WALL_SIGN"),
            MaterialEnum::LegacyLever => f.write_str("LEGACY_LEVER"),
            MaterialEnum::LegacyStonePlate => f.write_str("LEGACY_STONE_PLATE"),
            MaterialEnum::LegacyIronDoorBlock => f.write_str("LEGACY_IRON_DOOR_BLOCK"),
            MaterialEnum::LegacyWoodPlate => f.write_str("LEGACY_WOOD_PLATE"),
            MaterialEnum::LegacyRedstoneOre => f.write_str("LEGACY_REDSTONE_ORE"),
            MaterialEnum::LegacyGlowingRedstoneOre => f.write_str("LEGACY_GLOWING_REDSTONE_ORE"),
            MaterialEnum::LegacyRedstoneTorchOff => f.write_str("LEGACY_REDSTONE_TORCH_OFF"),
            MaterialEnum::LegacyRedstoneTorchOn => f.write_str("LEGACY_REDSTONE_TORCH_ON"),
            MaterialEnum::LegacyStoneButton => f.write_str("LEGACY_STONE_BUTTON"),
            MaterialEnum::LegacySnow => f.write_str("LEGACY_SNOW"),
            MaterialEnum::LegacyIce => f.write_str("LEGACY_ICE"),
            MaterialEnum::LegacySnowBlock => f.write_str("LEGACY_SNOW_BLOCK"),
            MaterialEnum::LegacyCactus => f.write_str("LEGACY_CACTUS"),
            MaterialEnum::LegacyClay => f.write_str("LEGACY_CLAY"),
            MaterialEnum::LegacySugarCaneBlock => f.write_str("LEGACY_SUGAR_CANE_BLOCK"),
            MaterialEnum::LegacyJukebox => f.write_str("LEGACY_JUKEBOX"),
            MaterialEnum::LegacyFence => f.write_str("LEGACY_FENCE"),
            MaterialEnum::LegacyPumpkin => f.write_str("LEGACY_PUMPKIN"),
            MaterialEnum::LegacyNetherrack => f.write_str("LEGACY_NETHERRACK"),
            MaterialEnum::LegacySoulSand => f.write_str("LEGACY_SOUL_SAND"),
            MaterialEnum::LegacyGlowstone => f.write_str("LEGACY_GLOWSTONE"),
            MaterialEnum::LegacyPortal => f.write_str("LEGACY_PORTAL"),
            MaterialEnum::LegacyJackOLantern => f.write_str("LEGACY_JACK_O_LANTERN"),
            MaterialEnum::LegacyCakeBlock => f.write_str("LEGACY_CAKE_BLOCK"),
            MaterialEnum::LegacyDiodeBlockOff => f.write_str("LEGACY_DIODE_BLOCK_OFF"),
            MaterialEnum::LegacyDiodeBlockOn => f.write_str("LEGACY_DIODE_BLOCK_ON"),
            MaterialEnum::LegacyStainedGlass => f.write_str("LEGACY_STAINED_GLASS"),
            MaterialEnum::LegacyTrapDoor => f.write_str("LEGACY_TRAP_DOOR"),
            MaterialEnum::LegacyMonsterEggs => f.write_str("LEGACY_MONSTER_EGGS"),
            MaterialEnum::LegacySmoothBrick => f.write_str("LEGACY_SMOOTH_BRICK"),
            MaterialEnum::LegacyHugeMushroom1 => f.write_str("LEGACY_HUGE_MUSHROOM_1"),
            MaterialEnum::LegacyHugeMushroom2 => f.write_str("LEGACY_HUGE_MUSHROOM_2"),
            MaterialEnum::LegacyIronFence => f.write_str("LEGACY_IRON_FENCE"),
            MaterialEnum::LegacyThinGlass => f.write_str("LEGACY_THIN_GLASS"),
            MaterialEnum::LegacyMelonBlock => f.write_str("LEGACY_MELON_BLOCK"),
            MaterialEnum::LegacyPumpkinStem => f.write_str("LEGACY_PUMPKIN_STEM"),
            MaterialEnum::LegacyMelonStem => f.write_str("LEGACY_MELON_STEM"),
            MaterialEnum::LegacyVine => f.write_str("LEGACY_VINE"),
            MaterialEnum::LegacyFenceGate => f.write_str("LEGACY_FENCE_GATE"),
            MaterialEnum::LegacyBrickStairs => f.write_str("LEGACY_BRICK_STAIRS"),
            MaterialEnum::LegacySmoothStairs => f.write_str("LEGACY_SMOOTH_STAIRS"),
            MaterialEnum::LegacyMycel => f.write_str("LEGACY_MYCEL"),
            MaterialEnum::LegacyWaterLily => f.write_str("LEGACY_WATER_LILY"),
            MaterialEnum::LegacyNetherBrick => f.write_str("LEGACY_NETHER_BRICK"),
            MaterialEnum::LegacyNetherFence => f.write_str("LEGACY_NETHER_FENCE"),
            MaterialEnum::LegacyNetherBrickStairs => f.write_str("LEGACY_NETHER_BRICK_STAIRS"),
            MaterialEnum::LegacyNetherWarts => f.write_str("LEGACY_NETHER_WARTS"),
            MaterialEnum::LegacyEnchantmentTable => f.write_str("LEGACY_ENCHANTMENT_TABLE"),
            MaterialEnum::LegacyBrewingStand => f.write_str("LEGACY_BREWING_STAND"),
            MaterialEnum::LegacyCauldron => f.write_str("LEGACY_CAULDRON"),
            MaterialEnum::LegacyEnderPortal => f.write_str("LEGACY_ENDER_PORTAL"),
            MaterialEnum::LegacyEnderPortalFrame => f.write_str("LEGACY_ENDER_PORTAL_FRAME"),
            MaterialEnum::LegacyEnderStone => f.write_str("LEGACY_ENDER_STONE"),
            MaterialEnum::LegacyDragonEgg => f.write_str("LEGACY_DRAGON_EGG"),
            MaterialEnum::LegacyRedstoneLampOff => f.write_str("LEGACY_REDSTONE_LAMP_OFF"),
            MaterialEnum::LegacyRedstoneLampOn => f.write_str("LEGACY_REDSTONE_LAMP_ON"),
            MaterialEnum::LegacyWoodDoubleStep => f.write_str("LEGACY_WOOD_DOUBLE_STEP"),
            MaterialEnum::LegacyWoodStep => f.write_str("LEGACY_WOOD_STEP"),
            MaterialEnum::LegacyCocoa => f.write_str("LEGACY_COCOA"),
            MaterialEnum::LegacySandstoneStairs => f.write_str("LEGACY_SANDSTONE_STAIRS"),
            MaterialEnum::LegacyEmeraldOre => f.write_str("LEGACY_EMERALD_ORE"),
            MaterialEnum::LegacyEnderChest => f.write_str("LEGACY_ENDER_CHEST"),
            MaterialEnum::LegacyTripwireHook => f.write_str("LEGACY_TRIPWIRE_HOOK"),
            MaterialEnum::LegacyTripwire => f.write_str("LEGACY_TRIPWIRE"),
            MaterialEnum::LegacyEmeraldBlock => f.write_str("LEGACY_EMERALD_BLOCK"),
            MaterialEnum::LegacySpruceWoodStairs => f.write_str("LEGACY_SPRUCE_WOOD_STAIRS"),
            MaterialEnum::LegacyBirchWoodStairs => f.write_str("LEGACY_BIRCH_WOOD_STAIRS"),
            MaterialEnum::LegacyJungleWoodStairs => f.write_str("LEGACY_JUNGLE_WOOD_STAIRS"),
            MaterialEnum::LegacyCommand => f.write_str("LEGACY_COMMAND"),
            MaterialEnum::LegacyBeacon => f.write_str("LEGACY_BEACON"),
            MaterialEnum::LegacyCobbleWall => f.write_str("LEGACY_COBBLE_WALL"),
            MaterialEnum::LegacyFlowerPot => f.write_str("LEGACY_FLOWER_POT"),
            MaterialEnum::LegacyCarrot => f.write_str("LEGACY_CARROT"),
            MaterialEnum::LegacyPotato => f.write_str("LEGACY_POTATO"),
            MaterialEnum::LegacyWoodButton => f.write_str("LEGACY_WOOD_BUTTON"),
            MaterialEnum::LegacySkull => f.write_str("LEGACY_SKULL"),
            MaterialEnum::LegacyAnvil => f.write_str("LEGACY_ANVIL"),
            MaterialEnum::LegacyTrappedChest => f.write_str("LEGACY_TRAPPED_CHEST"),
            MaterialEnum::LegacyGoldPlate => f.write_str("LEGACY_GOLD_PLATE"),
            MaterialEnum::LegacyIronPlate => f.write_str("LEGACY_IRON_PLATE"),
            MaterialEnum::LegacyRedstoneComparatorOff => {
                f.write_str("LEGACY_REDSTONE_COMPARATOR_OFF")
            }
            MaterialEnum::LegacyRedstoneComparatorOn => {
                f.write_str("LEGACY_REDSTONE_COMPARATOR_ON")
            }
            MaterialEnum::LegacyDaylightDetector => f.write_str("LEGACY_DAYLIGHT_DETECTOR"),
            MaterialEnum::LegacyRedstoneBlock => f.write_str("LEGACY_REDSTONE_BLOCK"),
            MaterialEnum::LegacyQuartzOre => f.write_str("LEGACY_QUARTZ_ORE"),
            MaterialEnum::LegacyHopper => f.write_str("LEGACY_HOPPER"),
            MaterialEnum::LegacyQuartzBlock => f.write_str("LEGACY_QUARTZ_BLOCK"),
            MaterialEnum::LegacyQuartzStairs => f.write_str("LEGACY_QUARTZ_STAIRS"),
            MaterialEnum::LegacyActivatorRail => f.write_str("LEGACY_ACTIVATOR_RAIL"),
            MaterialEnum::LegacyDropper => f.write_str("LEGACY_DROPPER"),
            MaterialEnum::LegacyStainedClay => f.write_str("LEGACY_STAINED_CLAY"),
            MaterialEnum::LegacyStainedGlassPane => f.write_str("LEGACY_STAINED_GLASS_PANE"),
            MaterialEnum::LegacyLeaves2 => f.write_str("LEGACY_LEAVES_2"),
            MaterialEnum::LegacyLog2 => f.write_str("LEGACY_LOG_2"),
            MaterialEnum::LegacyAcaciaStairs => f.write_str("LEGACY_ACACIA_STAIRS"),
            MaterialEnum::LegacyDarkOakStairs => f.write_str("LEGACY_DARK_OAK_STAIRS"),
            MaterialEnum::LegacySlimeBlock => f.write_str("LEGACY_SLIME_BLOCK"),
            MaterialEnum::LegacyBarrier => f.write_str("LEGACY_BARRIER"),
            MaterialEnum::LegacyIronTrapdoor => f.write_str("LEGACY_IRON_TRAPDOOR"),
            MaterialEnum::LegacyPrismarine => f.write_str("LEGACY_PRISMARINE"),
            MaterialEnum::LegacySeaLantern => f.write_str("LEGACY_SEA_LANTERN"),
            MaterialEnum::LegacyHayBlock => f.write_str("LEGACY_HAY_BLOCK"),
            MaterialEnum::LegacyCarpet => f.write_str("LEGACY_CARPET"),
            MaterialEnum::LegacyHardClay => f.write_str("LEGACY_HARD_CLAY"),
            MaterialEnum::LegacyCoalBlock => f.write_str("LEGACY_COAL_BLOCK"),
            MaterialEnum::LegacyPackedIce => f.write_str("LEGACY_PACKED_ICE"),
            MaterialEnum::LegacyDoublePlant => f.write_str("LEGACY_DOUBLE_PLANT"),
            MaterialEnum::LegacyStandingBanner => f.write_str("LEGACY_STANDING_BANNER"),
            MaterialEnum::LegacyWallBanner => f.write_str("LEGACY_WALL_BANNER"),
            MaterialEnum::LegacyDaylightDetectorInverted => {
                f.write_str("LEGACY_DAYLIGHT_DETECTOR_INVERTED")
            }
            MaterialEnum::LegacyRedSandstone => f.write_str("LEGACY_RED_SANDSTONE"),
            MaterialEnum::LegacyRedSandstoneStairs => f.write_str("LEGACY_RED_SANDSTONE_STAIRS"),
            MaterialEnum::LegacyDoubleStoneSlab2 => f.write_str("LEGACY_DOUBLE_STONE_SLAB2"),
            MaterialEnum::LegacyStoneSlab2 => f.write_str("LEGACY_STONE_SLAB2"),
            MaterialEnum::LegacySpruceFenceGate => f.write_str("LEGACY_SPRUCE_FENCE_GATE"),
            MaterialEnum::LegacyBirchFenceGate => f.write_str("LEGACY_BIRCH_FENCE_GATE"),
            MaterialEnum::LegacyJungleFenceGate => f.write_str("LEGACY_JUNGLE_FENCE_GATE"),
            MaterialEnum::LegacyDarkOakFenceGate => f.write_str("LEGACY_DARK_OAK_FENCE_GATE"),
            MaterialEnum::LegacyAcaciaFenceGate => f.write_str("LEGACY_ACACIA_FENCE_GATE"),
            MaterialEnum::LegacySpruceFence => f.write_str("LEGACY_SPRUCE_FENCE"),
            MaterialEnum::LegacyBirchFence => f.write_str("LEGACY_BIRCH_FENCE"),
            MaterialEnum::LegacyJungleFence => f.write_str("LEGACY_JUNGLE_FENCE"),
            MaterialEnum::LegacyDarkOakFence => f.write_str("LEGACY_DARK_OAK_FENCE"),
            MaterialEnum::LegacyAcaciaFence => f.write_str("LEGACY_ACACIA_FENCE"),
            MaterialEnum::LegacySpruceDoor => f.write_str("LEGACY_SPRUCE_DOOR"),
            MaterialEnum::LegacyBirchDoor => f.write_str("LEGACY_BIRCH_DOOR"),
            MaterialEnum::LegacyJungleDoor => f.write_str("LEGACY_JUNGLE_DOOR"),
            MaterialEnum::LegacyAcaciaDoor => f.write_str("LEGACY_ACACIA_DOOR"),
            MaterialEnum::LegacyDarkOakDoor => f.write_str("LEGACY_DARK_OAK_DOOR"),
            MaterialEnum::LegacyEndRod => f.write_str("LEGACY_END_ROD"),
            MaterialEnum::LegacyChorusPlant => f.write_str("LEGACY_CHORUS_PLANT"),
            MaterialEnum::LegacyChorusFlower => f.write_str("LEGACY_CHORUS_FLOWER"),
            MaterialEnum::LegacyPurpurBlock => f.write_str("LEGACY_PURPUR_BLOCK"),
            MaterialEnum::LegacyPurpurPillar => f.write_str("LEGACY_PURPUR_PILLAR"),
            MaterialEnum::LegacyPurpurStairs => f.write_str("LEGACY_PURPUR_STAIRS"),
            MaterialEnum::LegacyPurpurDoubleSlab => f.write_str("LEGACY_PURPUR_DOUBLE_SLAB"),
            MaterialEnum::LegacyPurpurSlab => f.write_str("LEGACY_PURPUR_SLAB"),
            MaterialEnum::LegacyEndBricks => f.write_str("LEGACY_END_BRICKS"),
            MaterialEnum::LegacyBeetrootBlock => f.write_str("LEGACY_BEETROOT_BLOCK"),
            MaterialEnum::LegacyGrassPath => f.write_str("LEGACY_GRASS_PATH"),
            MaterialEnum::LegacyEndGateway => f.write_str("LEGACY_END_GATEWAY"),
            MaterialEnum::LegacyCommandRepeating => f.write_str("LEGACY_COMMAND_REPEATING"),
            MaterialEnum::LegacyCommandChain => f.write_str("LEGACY_COMMAND_CHAIN"),
            MaterialEnum::LegacyFrostedIce => f.write_str("LEGACY_FROSTED_ICE"),
            MaterialEnum::LegacyMagma => f.write_str("LEGACY_MAGMA"),
            MaterialEnum::LegacyNetherWartBlock => f.write_str("LEGACY_NETHER_WART_BLOCK"),
            MaterialEnum::LegacyRedNetherBrick => f.write_str("LEGACY_RED_NETHER_BRICK"),
            MaterialEnum::LegacyBoneBlock => f.write_str("LEGACY_BONE_BLOCK"),
            MaterialEnum::LegacyStructureVoid => f.write_str("LEGACY_STRUCTURE_VOID"),
            MaterialEnum::LegacyObserver => f.write_str("LEGACY_OBSERVER"),
            MaterialEnum::LegacyWhiteShulkerBox => f.write_str("LEGACY_WHITE_SHULKER_BOX"),
            MaterialEnum::LegacyOrangeShulkerBox => f.write_str("LEGACY_ORANGE_SHULKER_BOX"),
            MaterialEnum::LegacyMagentaShulkerBox => f.write_str("LEGACY_MAGENTA_SHULKER_BOX"),
            MaterialEnum::LegacyLightBlueShulkerBox => f.write_str("LEGACY_LIGHT_BLUE_SHULKER_BOX"),
            MaterialEnum::LegacyYellowShulkerBox => f.write_str("LEGACY_YELLOW_SHULKER_BOX"),
            MaterialEnum::LegacyLimeShulkerBox => f.write_str("LEGACY_LIME_SHULKER_BOX"),
            MaterialEnum::LegacyPinkShulkerBox => f.write_str("LEGACY_PINK_SHULKER_BOX"),
            MaterialEnum::LegacyGrayShulkerBox => f.write_str("LEGACY_GRAY_SHULKER_BOX"),
            MaterialEnum::LegacySilverShulkerBox => f.write_str("LEGACY_SILVER_SHULKER_BOX"),
            MaterialEnum::LegacyCyanShulkerBox => f.write_str("LEGACY_CYAN_SHULKER_BOX"),
            MaterialEnum::LegacyPurpleShulkerBox => f.write_str("LEGACY_PURPLE_SHULKER_BOX"),
            MaterialEnum::LegacyBlueShulkerBox => f.write_str("LEGACY_BLUE_SHULKER_BOX"),
            MaterialEnum::LegacyBrownShulkerBox => f.write_str("LEGACY_BROWN_SHULKER_BOX"),
            MaterialEnum::LegacyGreenShulkerBox => f.write_str("LEGACY_GREEN_SHULKER_BOX"),
            MaterialEnum::LegacyRedShulkerBox => f.write_str("LEGACY_RED_SHULKER_BOX"),
            MaterialEnum::LegacyBlackShulkerBox => f.write_str("LEGACY_BLACK_SHULKER_BOX"),
            MaterialEnum::LegacyWhiteGlazedTerracotta => {
                f.write_str("LEGACY_WHITE_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyOrangeGlazedTerracotta => {
                f.write_str("LEGACY_ORANGE_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyMagentaGlazedTerracotta => {
                f.write_str("LEGACY_MAGENTA_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyLightBlueGlazedTerracotta => {
                f.write_str("LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyYellowGlazedTerracotta => {
                f.write_str("LEGACY_YELLOW_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyLimeGlazedTerracotta => {
                f.write_str("LEGACY_LIME_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyPinkGlazedTerracotta => {
                f.write_str("LEGACY_PINK_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyGrayGlazedTerracotta => {
                f.write_str("LEGACY_GRAY_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacySilverGlazedTerracotta => {
                f.write_str("LEGACY_SILVER_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyCyanGlazedTerracotta => {
                f.write_str("LEGACY_CYAN_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyPurpleGlazedTerracotta => {
                f.write_str("LEGACY_PURPLE_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyBlueGlazedTerracotta => {
                f.write_str("LEGACY_BLUE_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyBrownGlazedTerracotta => {
                f.write_str("LEGACY_BROWN_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyGreenGlazedTerracotta => {
                f.write_str("LEGACY_GREEN_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyRedGlazedTerracotta => f.write_str("LEGACY_RED_GLAZED_TERRACOTTA"),
            MaterialEnum::LegacyBlackGlazedTerracotta => {
                f.write_str("LEGACY_BLACK_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyConcrete => f.write_str("LEGACY_CONCRETE"),
            MaterialEnum::LegacyConcretePowder => f.write_str("LEGACY_CONCRETE_POWDER"),
            MaterialEnum::LegacyStructureBlock => f.write_str("LEGACY_STRUCTURE_BLOCK"),
            MaterialEnum::LegacyIronSpade => f.write_str("LEGACY_IRON_SPADE"),
            MaterialEnum::LegacyIronPickaxe => f.write_str("LEGACY_IRON_PICKAXE"),
            MaterialEnum::LegacyIronAxe => f.write_str("LEGACY_IRON_AXE"),
            MaterialEnum::LegacyFlintAndSteel => f.write_str("LEGACY_FLINT_AND_STEEL"),
            MaterialEnum::LegacyApple => f.write_str("LEGACY_APPLE"),
            MaterialEnum::LegacyBow => f.write_str("LEGACY_BOW"),
            MaterialEnum::LegacyArrow => f.write_str("LEGACY_ARROW"),
            MaterialEnum::LegacyCoal => f.write_str("LEGACY_COAL"),
            MaterialEnum::LegacyDiamond => f.write_str("LEGACY_DIAMOND"),
            MaterialEnum::LegacyIronIngot => f.write_str("LEGACY_IRON_INGOT"),
            MaterialEnum::LegacyGoldIngot => f.write_str("LEGACY_GOLD_INGOT"),
            MaterialEnum::LegacyIronSword => f.write_str("LEGACY_IRON_SWORD"),
            MaterialEnum::LegacyWoodSword => f.write_str("LEGACY_WOOD_SWORD"),
            MaterialEnum::LegacyWoodSpade => f.write_str("LEGACY_WOOD_SPADE"),
            MaterialEnum::LegacyWoodPickaxe => f.write_str("LEGACY_WOOD_PICKAXE"),
            MaterialEnum::LegacyWoodAxe => f.write_str("LEGACY_WOOD_AXE"),
            MaterialEnum::LegacyStoneSword => f.write_str("LEGACY_STONE_SWORD"),
            MaterialEnum::LegacyStoneSpade => f.write_str("LEGACY_STONE_SPADE"),
            MaterialEnum::LegacyStonePickaxe => f.write_str("LEGACY_STONE_PICKAXE"),
            MaterialEnum::LegacyStoneAxe => f.write_str("LEGACY_STONE_AXE"),
            MaterialEnum::LegacyDiamondSword => f.write_str("LEGACY_DIAMOND_SWORD"),
            MaterialEnum::LegacyDiamondSpade => f.write_str("LEGACY_DIAMOND_SPADE"),
            MaterialEnum::LegacyDiamondPickaxe => f.write_str("LEGACY_DIAMOND_PICKAXE"),
            MaterialEnum::LegacyDiamondAxe => f.write_str("LEGACY_DIAMOND_AXE"),
            MaterialEnum::LegacyStick => f.write_str("LEGACY_STICK"),
            MaterialEnum::LegacyBowl => f.write_str("LEGACY_BOWL"),
            MaterialEnum::LegacyMushroomSoup => f.write_str("LEGACY_MUSHROOM_SOUP"),
            MaterialEnum::LegacyGoldSword => f.write_str("LEGACY_GOLD_SWORD"),
            MaterialEnum::LegacyGoldSpade => f.write_str("LEGACY_GOLD_SPADE"),
            MaterialEnum::LegacyGoldPickaxe => f.write_str("LEGACY_GOLD_PICKAXE"),
            MaterialEnum::LegacyGoldAxe => f.write_str("LEGACY_GOLD_AXE"),
            MaterialEnum::LegacyString => f.write_str("LEGACY_STRING"),
            MaterialEnum::LegacyFeather => f.write_str("LEGACY_FEATHER"),
            MaterialEnum::LegacySulphur => f.write_str("LEGACY_SULPHUR"),
            MaterialEnum::LegacyWoodHoe => f.write_str("LEGACY_WOOD_HOE"),
            MaterialEnum::LegacyStoneHoe => f.write_str("LEGACY_STONE_HOE"),
            MaterialEnum::LegacyIronHoe => f.write_str("LEGACY_IRON_HOE"),
            MaterialEnum::LegacyDiamondHoe => f.write_str("LEGACY_DIAMOND_HOE"),
            MaterialEnum::LegacyGoldHoe => f.write_str("LEGACY_GOLD_HOE"),
            MaterialEnum::LegacySeeds => f.write_str("LEGACY_SEEDS"),
            MaterialEnum::LegacyWheat => f.write_str("LEGACY_WHEAT"),
            MaterialEnum::LegacyBread => f.write_str("LEGACY_BREAD"),
            MaterialEnum::LegacyLeatherHelmet => f.write_str("LEGACY_LEATHER_HELMET"),
            MaterialEnum::LegacyLeatherChestplate => f.write_str("LEGACY_LEATHER_CHESTPLATE"),
            MaterialEnum::LegacyLeatherLeggings => f.write_str("LEGACY_LEATHER_LEGGINGS"),
            MaterialEnum::LegacyLeatherBoots => f.write_str("LEGACY_LEATHER_BOOTS"),
            MaterialEnum::LegacyChainmailHelmet => f.write_str("LEGACY_CHAINMAIL_HELMET"),
            MaterialEnum::LegacyChainmailChestplate => f.write_str("LEGACY_CHAINMAIL_CHESTPLATE"),
            MaterialEnum::LegacyChainmailLeggings => f.write_str("LEGACY_CHAINMAIL_LEGGINGS"),
            MaterialEnum::LegacyChainmailBoots => f.write_str("LEGACY_CHAINMAIL_BOOTS"),
            MaterialEnum::LegacyIronHelmet => f.write_str("LEGACY_IRON_HELMET"),
            MaterialEnum::LegacyIronChestplate => f.write_str("LEGACY_IRON_CHESTPLATE"),
            MaterialEnum::LegacyIronLeggings => f.write_str("LEGACY_IRON_LEGGINGS"),
            MaterialEnum::LegacyIronBoots => f.write_str("LEGACY_IRON_BOOTS"),
            MaterialEnum::LegacyDiamondHelmet => f.write_str("LEGACY_DIAMOND_HELMET"),
            MaterialEnum::LegacyDiamondChestplate => f.write_str("LEGACY_DIAMOND_CHESTPLATE"),
            MaterialEnum::LegacyDiamondLeggings => f.write_str("LEGACY_DIAMOND_LEGGINGS"),
            MaterialEnum::LegacyDiamondBoots => f.write_str("LEGACY_DIAMOND_BOOTS"),
            MaterialEnum::LegacyGoldHelmet => f.write_str("LEGACY_GOLD_HELMET"),
            MaterialEnum::LegacyGoldChestplate => f.write_str("LEGACY_GOLD_CHESTPLATE"),
            MaterialEnum::LegacyGoldLeggings => f.write_str("LEGACY_GOLD_LEGGINGS"),
            MaterialEnum::LegacyGoldBoots => f.write_str("LEGACY_GOLD_BOOTS"),
            MaterialEnum::LegacyFlint => f.write_str("LEGACY_FLINT"),
            MaterialEnum::LegacyPork => f.write_str("LEGACY_PORK"),
            MaterialEnum::LegacyGrilledPork => f.write_str("LEGACY_GRILLED_PORK"),
            MaterialEnum::LegacyPainting => f.write_str("LEGACY_PAINTING"),
            MaterialEnum::LegacyGoldenApple => f.write_str("LEGACY_GOLDEN_APPLE"),
            MaterialEnum::LegacySign => f.write_str("LEGACY_SIGN"),
            MaterialEnum::LegacyWoodDoor => f.write_str("LEGACY_WOOD_DOOR"),
            MaterialEnum::LegacyBucket => f.write_str("LEGACY_BUCKET"),
            MaterialEnum::LegacyWaterBucket => f.write_str("LEGACY_WATER_BUCKET"),
            MaterialEnum::LegacyLavaBucket => f.write_str("LEGACY_LAVA_BUCKET"),
            MaterialEnum::LegacyMinecart => f.write_str("LEGACY_MINECART"),
            MaterialEnum::LegacySaddle => f.write_str("LEGACY_SADDLE"),
            MaterialEnum::LegacyIronDoor => f.write_str("LEGACY_IRON_DOOR"),
            MaterialEnum::LegacyRedstone => f.write_str("LEGACY_REDSTONE"),
            MaterialEnum::LegacySnowBall => f.write_str("LEGACY_SNOW_BALL"),
            MaterialEnum::LegacyBoat => f.write_str("LEGACY_BOAT"),
            MaterialEnum::LegacyLeather => f.write_str("LEGACY_LEATHER"),
            MaterialEnum::LegacyMilkBucket => f.write_str("LEGACY_MILK_BUCKET"),
            MaterialEnum::LegacyClayBrick => f.write_str("LEGACY_CLAY_BRICK"),
            MaterialEnum::LegacyClayBall => f.write_str("LEGACY_CLAY_BALL"),
            MaterialEnum::LegacySugarCane => f.write_str("LEGACY_SUGAR_CANE"),
            MaterialEnum::LegacyPaper => f.write_str("LEGACY_PAPER"),
            MaterialEnum::LegacyBook => f.write_str("LEGACY_BOOK"),
            MaterialEnum::LegacySlimeBall => f.write_str("LEGACY_SLIME_BALL"),
            MaterialEnum::LegacyStorageMinecart => f.write_str("LEGACY_STORAGE_MINECART"),
            MaterialEnum::LegacyPoweredMinecart => f.write_str("LEGACY_POWERED_MINECART"),
            MaterialEnum::LegacyEgg => f.write_str("LEGACY_EGG"),
            MaterialEnum::LegacyCompass => f.write_str("LEGACY_COMPASS"),
            MaterialEnum::LegacyFishingRod => f.write_str("LEGACY_FISHING_ROD"),
            MaterialEnum::LegacyWatch => f.write_str("LEGACY_WATCH"),
            MaterialEnum::LegacyGlowstoneDust => f.write_str("LEGACY_GLOWSTONE_DUST"),
            MaterialEnum::LegacyRawFish => f.write_str("LEGACY_RAW_FISH"),
            MaterialEnum::LegacyCookedFish => f.write_str("LEGACY_COOKED_FISH"),
            MaterialEnum::LegacyInkSack => f.write_str("LEGACY_INK_SACK"),
            MaterialEnum::LegacyBone => f.write_str("LEGACY_BONE"),
            MaterialEnum::LegacySugar => f.write_str("LEGACY_SUGAR"),
            MaterialEnum::LegacyCake => f.write_str("LEGACY_CAKE"),
            MaterialEnum::LegacyBed => f.write_str("LEGACY_BED"),
            MaterialEnum::LegacyDiode => f.write_str("LEGACY_DIODE"),
            MaterialEnum::LegacyCookie => f.write_str("LEGACY_COOKIE"),
            MaterialEnum::LegacyMap => f.write_str("LEGACY_MAP"),
            MaterialEnum::LegacyShears => f.write_str("LEGACY_SHEARS"),
            MaterialEnum::LegacyMelon => f.write_str("LEGACY_MELON"),
            MaterialEnum::LegacyPumpkinSeeds => f.write_str("LEGACY_PUMPKIN_SEEDS"),
            MaterialEnum::LegacyMelonSeeds => f.write_str("LEGACY_MELON_SEEDS"),
            MaterialEnum::LegacyRawBeef => f.write_str("LEGACY_RAW_BEEF"),
            MaterialEnum::LegacyCookedBeef => f.write_str("LEGACY_COOKED_BEEF"),
            MaterialEnum::LegacyRawChicken => f.write_str("LEGACY_RAW_CHICKEN"),
            MaterialEnum::LegacyCookedChicken => f.write_str("LEGACY_COOKED_CHICKEN"),
            MaterialEnum::LegacyRottenFlesh => f.write_str("LEGACY_ROTTEN_FLESH"),
            MaterialEnum::LegacyEnderPearl => f.write_str("LEGACY_ENDER_PEARL"),
            MaterialEnum::LegacyBlazeRod => f.write_str("LEGACY_BLAZE_ROD"),
            MaterialEnum::LegacyGhastTear => f.write_str("LEGACY_GHAST_TEAR"),
            MaterialEnum::LegacyGoldNugget => f.write_str("LEGACY_GOLD_NUGGET"),
            MaterialEnum::LegacyNetherStalk => f.write_str("LEGACY_NETHER_STALK"),
            MaterialEnum::LegacyPotion => f.write_str("LEGACY_POTION"),
            MaterialEnum::LegacyGlassBottle => f.write_str("LEGACY_GLASS_BOTTLE"),
            MaterialEnum::LegacySpiderEye => f.write_str("LEGACY_SPIDER_EYE"),
            MaterialEnum::LegacyFermentedSpiderEye => f.write_str("LEGACY_FERMENTED_SPIDER_EYE"),
            MaterialEnum::LegacyBlazePowder => f.write_str("LEGACY_BLAZE_POWDER"),
            MaterialEnum::LegacyMagmaCream => f.write_str("LEGACY_MAGMA_CREAM"),
            MaterialEnum::LegacyBrewingStandItem => f.write_str("LEGACY_BREWING_STAND_ITEM"),
            MaterialEnum::LegacyCauldronItem => f.write_str("LEGACY_CAULDRON_ITEM"),
            MaterialEnum::LegacyEyeOfEnder => f.write_str("LEGACY_EYE_OF_ENDER"),
            MaterialEnum::LegacySpeckledMelon => f.write_str("LEGACY_SPECKLED_MELON"),
            MaterialEnum::LegacyMonsterEgg => f.write_str("LEGACY_MONSTER_EGG"),
            MaterialEnum::LegacyExpBottle => f.write_str("LEGACY_EXP_BOTTLE"),
            MaterialEnum::LegacyFireball => f.write_str("LEGACY_FIREBALL"),
            MaterialEnum::LegacyBookAndQuill => f.write_str("LEGACY_BOOK_AND_QUILL"),
            MaterialEnum::LegacyWrittenBook => f.write_str("LEGACY_WRITTEN_BOOK"),
            MaterialEnum::LegacyEmerald => f.write_str("LEGACY_EMERALD"),
            MaterialEnum::LegacyItemFrame => f.write_str("LEGACY_ITEM_FRAME"),
            MaterialEnum::LegacyFlowerPotItem => f.write_str("LEGACY_FLOWER_POT_ITEM"),
            MaterialEnum::LegacyCarrotItem => f.write_str("LEGACY_CARROT_ITEM"),
            MaterialEnum::LegacyPotatoItem => f.write_str("LEGACY_POTATO_ITEM"),
            MaterialEnum::LegacyBakedPotato => f.write_str("LEGACY_BAKED_POTATO"),
            MaterialEnum::LegacyPoisonousPotato => f.write_str("LEGACY_POISONOUS_POTATO"),
            MaterialEnum::LegacyEmptyMap => f.write_str("LEGACY_EMPTY_MAP"),
            MaterialEnum::LegacyGoldenCarrot => f.write_str("LEGACY_GOLDEN_CARROT"),
            MaterialEnum::LegacySkullItem => f.write_str("LEGACY_SKULL_ITEM"),
            MaterialEnum::LegacyCarrotStick => f.write_str("LEGACY_CARROT_STICK"),
            MaterialEnum::LegacyNetherStar => f.write_str("LEGACY_NETHER_STAR"),
            MaterialEnum::LegacyPumpkinPie => f.write_str("LEGACY_PUMPKIN_PIE"),
            MaterialEnum::LegacyFirework => f.write_str("LEGACY_FIREWORK"),
            MaterialEnum::LegacyFireworkCharge => f.write_str("LEGACY_FIREWORK_CHARGE"),
            MaterialEnum::LegacyEnchantedBook => f.write_str("LEGACY_ENCHANTED_BOOK"),
            MaterialEnum::LegacyRedstoneComparator => f.write_str("LEGACY_REDSTONE_COMPARATOR"),
            MaterialEnum::LegacyNetherBrickItem => f.write_str("LEGACY_NETHER_BRICK_ITEM"),
            MaterialEnum::LegacyQuartz => f.write_str("LEGACY_QUARTZ"),
            MaterialEnum::LegacyExplosiveMinecart => f.write_str("LEGACY_EXPLOSIVE_MINECART"),
            MaterialEnum::LegacyHopperMinecart => f.write_str("LEGACY_HOPPER_MINECART"),
            MaterialEnum::LegacyPrismarineShard => f.write_str("LEGACY_PRISMARINE_SHARD"),
            MaterialEnum::LegacyPrismarineCrystals => f.write_str("LEGACY_PRISMARINE_CRYSTALS"),
            MaterialEnum::LegacyRabbit => f.write_str("LEGACY_RABBIT"),
            MaterialEnum::LegacyCookedRabbit => f.write_str("LEGACY_COOKED_RABBIT"),
            MaterialEnum::LegacyRabbitStew => f.write_str("LEGACY_RABBIT_STEW"),
            MaterialEnum::LegacyRabbitFoot => f.write_str("LEGACY_RABBIT_FOOT"),
            MaterialEnum::LegacyRabbitHide => f.write_str("LEGACY_RABBIT_HIDE"),
            MaterialEnum::LegacyArmorStand => f.write_str("LEGACY_ARMOR_STAND"),
            MaterialEnum::LegacyIronBarding => f.write_str("LEGACY_IRON_BARDING"),
            MaterialEnum::LegacyGoldBarding => f.write_str("LEGACY_GOLD_BARDING"),
            MaterialEnum::LegacyDiamondBarding => f.write_str("LEGACY_DIAMOND_BARDING"),
            MaterialEnum::LegacyLeash => f.write_str("LEGACY_LEASH"),
            MaterialEnum::LegacyNameTag => f.write_str("LEGACY_NAME_TAG"),
            MaterialEnum::LegacyCommandMinecart => f.write_str("LEGACY_COMMAND_MINECART"),
            MaterialEnum::LegacyMutton => f.write_str("LEGACY_MUTTON"),
            MaterialEnum::LegacyCookedMutton => f.write_str("LEGACY_COOKED_MUTTON"),
            MaterialEnum::LegacyBanner => f.write_str("LEGACY_BANNER"),
            MaterialEnum::LegacyEndCrystal => f.write_str("LEGACY_END_CRYSTAL"),
            MaterialEnum::LegacySpruceDoorItem => f.write_str("LEGACY_SPRUCE_DOOR_ITEM"),
            MaterialEnum::LegacyBirchDoorItem => f.write_str("LEGACY_BIRCH_DOOR_ITEM"),
            MaterialEnum::LegacyJungleDoorItem => f.write_str("LEGACY_JUNGLE_DOOR_ITEM"),
            MaterialEnum::LegacyAcaciaDoorItem => f.write_str("LEGACY_ACACIA_DOOR_ITEM"),
            MaterialEnum::LegacyDarkOakDoorItem => f.write_str("LEGACY_DARK_OAK_DOOR_ITEM"),
            MaterialEnum::LegacyChorusFruit => f.write_str("LEGACY_CHORUS_FRUIT"),
            MaterialEnum::LegacyChorusFruitPopped => f.write_str("LEGACY_CHORUS_FRUIT_POPPED"),
            MaterialEnum::LegacyBeetroot => f.write_str("LEGACY_BEETROOT"),
            MaterialEnum::LegacyBeetrootSeeds => f.write_str("LEGACY_BEETROOT_SEEDS"),
            MaterialEnum::LegacyBeetrootSoup => f.write_str("LEGACY_BEETROOT_SOUP"),
            MaterialEnum::LegacyDragonsBreath => f.write_str("LEGACY_DRAGONS_BREATH"),
            MaterialEnum::LegacySplashPotion => f.write_str("LEGACY_SPLASH_POTION"),
            MaterialEnum::LegacySpectralArrow => f.write_str("LEGACY_SPECTRAL_ARROW"),
            MaterialEnum::LegacyTippedArrow => f.write_str("LEGACY_TIPPED_ARROW"),
            MaterialEnum::LegacyLingeringPotion => f.write_str("LEGACY_LINGERING_POTION"),
            MaterialEnum::LegacyShield => f.write_str("LEGACY_SHIELD"),
            MaterialEnum::LegacyElytra => f.write_str("LEGACY_ELYTRA"),
            MaterialEnum::LegacyBoatSpruce => f.write_str("LEGACY_BOAT_SPRUCE"),
            MaterialEnum::LegacyBoatBirch => f.write_str("LEGACY_BOAT_BIRCH"),
            MaterialEnum::LegacyBoatJungle => f.write_str("LEGACY_BOAT_JUNGLE"),
            MaterialEnum::LegacyBoatAcacia => f.write_str("LEGACY_BOAT_ACACIA"),
            MaterialEnum::LegacyBoatDarkOak => f.write_str("LEGACY_BOAT_DARK_OAK"),
            MaterialEnum::LegacyTotem => f.write_str("LEGACY_TOTEM"),
            MaterialEnum::LegacyShulkerShell => f.write_str("LEGACY_SHULKER_SHELL"),
            MaterialEnum::LegacyIronNugget => f.write_str("LEGACY_IRON_NUGGET"),
            MaterialEnum::LegacyKnowledgeBook => f.write_str("LEGACY_KNOWLEDGE_BOOK"),
            MaterialEnum::LegacyGoldRecord => f.write_str("LEGACY_GOLD_RECORD"),
            MaterialEnum::LegacyGreenRecord => f.write_str("LEGACY_GREEN_RECORD"),
            MaterialEnum::LegacyRecord3 => f.write_str("LEGACY_RECORD_3"),
            MaterialEnum::LegacyRecord4 => f.write_str("LEGACY_RECORD_4"),
            MaterialEnum::LegacyRecord5 => f.write_str("LEGACY_RECORD_5"),
            MaterialEnum::LegacyRecord6 => f.write_str("LEGACY_RECORD_6"),
            MaterialEnum::LegacyRecord7 => f.write_str("LEGACY_RECORD_7"),
            MaterialEnum::LegacyRecord8 => f.write_str("LEGACY_RECORD_8"),
            MaterialEnum::LegacyRecord9 => f.write_str("LEGACY_RECORD_9"),
            MaterialEnum::LegacyRecord10 => f.write_str("LEGACY_RECORD_10"),
            MaterialEnum::LegacyRecord11 => f.write_str("LEGACY_RECORD_11"),
            MaterialEnum::LegacyRecord12 => f.write_str("LEGACY_RECORD_12"),
        }
    }
}
pub struct Material<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub MaterialEnum,
);
impl<'mc> std::ops::Deref for Material<'mc> {
    type Target = MaterialEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for Material<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Material<'mc> {
    pub const AIR: MaterialEnum = MaterialEnum::Air;
    pub const STONE: MaterialEnum = MaterialEnum::Stone;
    pub const GRANITE: MaterialEnum = MaterialEnum::Granite;
    pub const POLISHEDGRANITE: MaterialEnum = MaterialEnum::PolishedGranite;
    pub const DIORITE: MaterialEnum = MaterialEnum::Diorite;
    pub const POLISHEDDIORITE: MaterialEnum = MaterialEnum::PolishedDiorite;
    pub const ANDESITE: MaterialEnum = MaterialEnum::Andesite;
    pub const POLISHEDANDESITE: MaterialEnum = MaterialEnum::PolishedAndesite;
    pub const DEEPSLATE: MaterialEnum = MaterialEnum::Deepslate;
    pub const COBBLEDDEEPSLATE: MaterialEnum = MaterialEnum::CobbledDeepslate;
    pub const POLISHEDDEEPSLATE: MaterialEnum = MaterialEnum::PolishedDeepslate;
    pub const CALCITE: MaterialEnum = MaterialEnum::Calcite;
    pub const TUFF: MaterialEnum = MaterialEnum::Tuff;
    pub const DRIPSTONEBLOCK: MaterialEnum = MaterialEnum::DripstoneBlock;
    pub const GRASSBLOCK: MaterialEnum = MaterialEnum::GrassBlock;
    pub const DIRT: MaterialEnum = MaterialEnum::Dirt;
    pub const COARSEDIRT: MaterialEnum = MaterialEnum::CoarseDirt;
    pub const PODZOL: MaterialEnum = MaterialEnum::Podzol;
    pub const ROOTEDDIRT: MaterialEnum = MaterialEnum::RootedDirt;
    pub const MUD: MaterialEnum = MaterialEnum::Mud;
    pub const CRIMSONNYLIUM: MaterialEnum = MaterialEnum::CrimsonNylium;
    pub const WARPEDNYLIUM: MaterialEnum = MaterialEnum::WarpedNylium;
    pub const COBBLESTONE: MaterialEnum = MaterialEnum::Cobblestone;
    pub const OAKPLANKS: MaterialEnum = MaterialEnum::OakPlanks;
    pub const SPRUCEPLANKS: MaterialEnum = MaterialEnum::SprucePlanks;
    pub const BIRCHPLANKS: MaterialEnum = MaterialEnum::BirchPlanks;
    pub const JUNGLEPLANKS: MaterialEnum = MaterialEnum::JunglePlanks;
    pub const ACACIAPLANKS: MaterialEnum = MaterialEnum::AcaciaPlanks;
    pub const CHERRYPLANKS: MaterialEnum = MaterialEnum::CherryPlanks;
    pub const DARKOAKPLANKS: MaterialEnum = MaterialEnum::DarkOakPlanks;
    pub const MANGROVEPLANKS: MaterialEnum = MaterialEnum::MangrovePlanks;
    pub const BAMBOOPLANKS: MaterialEnum = MaterialEnum::BambooPlanks;
    pub const CRIMSONPLANKS: MaterialEnum = MaterialEnum::CrimsonPlanks;
    pub const WARPEDPLANKS: MaterialEnum = MaterialEnum::WarpedPlanks;
    pub const BAMBOOMOSAIC: MaterialEnum = MaterialEnum::BambooMosaic;
    pub const OAKSAPLING: MaterialEnum = MaterialEnum::OakSapling;
    pub const SPRUCESAPLING: MaterialEnum = MaterialEnum::SpruceSapling;
    pub const BIRCHSAPLING: MaterialEnum = MaterialEnum::BirchSapling;
    pub const JUNGLESAPLING: MaterialEnum = MaterialEnum::JungleSapling;
    pub const ACACIASAPLING: MaterialEnum = MaterialEnum::AcaciaSapling;
    pub const CHERRYSAPLING: MaterialEnum = MaterialEnum::CherrySapling;
    pub const DARKOAKSAPLING: MaterialEnum = MaterialEnum::DarkOakSapling;
    pub const MANGROVEPROPAGULE: MaterialEnum = MaterialEnum::MangrovePropagule;
    pub const BEDROCK: MaterialEnum = MaterialEnum::Bedrock;
    pub const SAND: MaterialEnum = MaterialEnum::Sand;
    pub const SUSPICIOUSSAND: MaterialEnum = MaterialEnum::SuspiciousSand;
    pub const SUSPICIOUSGRAVEL: MaterialEnum = MaterialEnum::SuspiciousGravel;
    pub const REDSAND: MaterialEnum = MaterialEnum::RedSand;
    pub const GRAVEL: MaterialEnum = MaterialEnum::Gravel;
    pub const COALORE: MaterialEnum = MaterialEnum::CoalOre;
    pub const DEEPSLATECOALORE: MaterialEnum = MaterialEnum::DeepslateCoalOre;
    pub const IRONORE: MaterialEnum = MaterialEnum::IronOre;
    pub const DEEPSLATEIRONORE: MaterialEnum = MaterialEnum::DeepslateIronOre;
    pub const COPPERORE: MaterialEnum = MaterialEnum::CopperOre;
    pub const DEEPSLATECOPPERORE: MaterialEnum = MaterialEnum::DeepslateCopperOre;
    pub const GOLDORE: MaterialEnum = MaterialEnum::GoldOre;
    pub const DEEPSLATEGOLDORE: MaterialEnum = MaterialEnum::DeepslateGoldOre;
    pub const REDSTONEORE: MaterialEnum = MaterialEnum::RedstoneOre;
    pub const DEEPSLATEREDSTONEORE: MaterialEnum = MaterialEnum::DeepslateRedstoneOre;
    pub const EMERALDORE: MaterialEnum = MaterialEnum::EmeraldOre;
    pub const DEEPSLATEEMERALDORE: MaterialEnum = MaterialEnum::DeepslateEmeraldOre;
    pub const LAPISORE: MaterialEnum = MaterialEnum::LapisOre;
    pub const DEEPSLATELAPISORE: MaterialEnum = MaterialEnum::DeepslateLapisOre;
    pub const DIAMONDORE: MaterialEnum = MaterialEnum::DiamondOre;
    pub const DEEPSLATEDIAMONDORE: MaterialEnum = MaterialEnum::DeepslateDiamondOre;
    pub const NETHERGOLDORE: MaterialEnum = MaterialEnum::NetherGoldOre;
    pub const NETHERQUARTZORE: MaterialEnum = MaterialEnum::NetherQuartzOre;
    pub const ANCIENTDEBRIS: MaterialEnum = MaterialEnum::AncientDebris;
    pub const COALBLOCK: MaterialEnum = MaterialEnum::CoalBlock;
    pub const RAWIRONBLOCK: MaterialEnum = MaterialEnum::RawIronBlock;
    pub const RAWCOPPERBLOCK: MaterialEnum = MaterialEnum::RawCopperBlock;
    pub const RAWGOLDBLOCK: MaterialEnum = MaterialEnum::RawGoldBlock;
    pub const AMETHYSTBLOCK: MaterialEnum = MaterialEnum::AmethystBlock;
    pub const BUDDINGAMETHYST: MaterialEnum = MaterialEnum::BuddingAmethyst;
    pub const IRONBLOCK: MaterialEnum = MaterialEnum::IronBlock;
    pub const COPPERBLOCK: MaterialEnum = MaterialEnum::CopperBlock;
    pub const GOLDBLOCK: MaterialEnum = MaterialEnum::GoldBlock;
    pub const DIAMONDBLOCK: MaterialEnum = MaterialEnum::DiamondBlock;
    pub const NETHERITEBLOCK: MaterialEnum = MaterialEnum::NetheriteBlock;
    pub const EXPOSEDCOPPER: MaterialEnum = MaterialEnum::ExposedCopper;
    pub const WEATHEREDCOPPER: MaterialEnum = MaterialEnum::WeatheredCopper;
    pub const OXIDIZEDCOPPER: MaterialEnum = MaterialEnum::OxidizedCopper;
    pub const CUTCOPPER: MaterialEnum = MaterialEnum::CutCopper;
    pub const EXPOSEDCUTCOPPER: MaterialEnum = MaterialEnum::ExposedCutCopper;
    pub const WEATHEREDCUTCOPPER: MaterialEnum = MaterialEnum::WeatheredCutCopper;
    pub const OXIDIZEDCUTCOPPER: MaterialEnum = MaterialEnum::OxidizedCutCopper;
    pub const CUTCOPPERSTAIRS: MaterialEnum = MaterialEnum::CutCopperStairs;
    pub const EXPOSEDCUTCOPPERSTAIRS: MaterialEnum = MaterialEnum::ExposedCutCopperStairs;
    pub const WEATHEREDCUTCOPPERSTAIRS: MaterialEnum = MaterialEnum::WeatheredCutCopperStairs;
    pub const OXIDIZEDCUTCOPPERSTAIRS: MaterialEnum = MaterialEnum::OxidizedCutCopperStairs;
    pub const CUTCOPPERSLAB: MaterialEnum = MaterialEnum::CutCopperSlab;
    pub const EXPOSEDCUTCOPPERSLAB: MaterialEnum = MaterialEnum::ExposedCutCopperSlab;
    pub const WEATHEREDCUTCOPPERSLAB: MaterialEnum = MaterialEnum::WeatheredCutCopperSlab;
    pub const OXIDIZEDCUTCOPPERSLAB: MaterialEnum = MaterialEnum::OxidizedCutCopperSlab;
    pub const WAXEDCOPPERBLOCK: MaterialEnum = MaterialEnum::WaxedCopperBlock;
    pub const WAXEDEXPOSEDCOPPER: MaterialEnum = MaterialEnum::WaxedExposedCopper;
    pub const WAXEDWEATHEREDCOPPER: MaterialEnum = MaterialEnum::WaxedWeatheredCopper;
    pub const WAXEDOXIDIZEDCOPPER: MaterialEnum = MaterialEnum::WaxedOxidizedCopper;
    pub const WAXEDCUTCOPPER: MaterialEnum = MaterialEnum::WaxedCutCopper;
    pub const WAXEDEXPOSEDCUTCOPPER: MaterialEnum = MaterialEnum::WaxedExposedCutCopper;
    pub const WAXEDWEATHEREDCUTCOPPER: MaterialEnum = MaterialEnum::WaxedWeatheredCutCopper;
    pub const WAXEDOXIDIZEDCUTCOPPER: MaterialEnum = MaterialEnum::WaxedOxidizedCutCopper;
    pub const WAXEDCUTCOPPERSTAIRS: MaterialEnum = MaterialEnum::WaxedCutCopperStairs;
    pub const WAXEDEXPOSEDCUTCOPPERSTAIRS: MaterialEnum = MaterialEnum::WaxedExposedCutCopperStairs;
    pub const WAXEDWEATHEREDCUTCOPPERSTAIRS: MaterialEnum =
        MaterialEnum::WaxedWeatheredCutCopperStairs;
    pub const WAXEDOXIDIZEDCUTCOPPERSTAIRS: MaterialEnum =
        MaterialEnum::WaxedOxidizedCutCopperStairs;
    pub const WAXEDCUTCOPPERSLAB: MaterialEnum = MaterialEnum::WaxedCutCopperSlab;
    pub const WAXEDEXPOSEDCUTCOPPERSLAB: MaterialEnum = MaterialEnum::WaxedExposedCutCopperSlab;
    pub const WAXEDWEATHEREDCUTCOPPERSLAB: MaterialEnum = MaterialEnum::WaxedWeatheredCutCopperSlab;
    pub const WAXEDOXIDIZEDCUTCOPPERSLAB: MaterialEnum = MaterialEnum::WaxedOxidizedCutCopperSlab;
    pub const OAKLOG: MaterialEnum = MaterialEnum::OakLog;
    pub const SPRUCELOG: MaterialEnum = MaterialEnum::SpruceLog;
    pub const BIRCHLOG: MaterialEnum = MaterialEnum::BirchLog;
    pub const JUNGLELOG: MaterialEnum = MaterialEnum::JungleLog;
    pub const ACACIALOG: MaterialEnum = MaterialEnum::AcaciaLog;
    pub const CHERRYLOG: MaterialEnum = MaterialEnum::CherryLog;
    pub const DARKOAKLOG: MaterialEnum = MaterialEnum::DarkOakLog;
    pub const MANGROVELOG: MaterialEnum = MaterialEnum::MangroveLog;
    pub const MANGROVEROOTS: MaterialEnum = MaterialEnum::MangroveRoots;
    pub const MUDDYMANGROVEROOTS: MaterialEnum = MaterialEnum::MuddyMangroveRoots;
    pub const CRIMSONSTEM: MaterialEnum = MaterialEnum::CrimsonStem;
    pub const WARPEDSTEM: MaterialEnum = MaterialEnum::WarpedStem;
    pub const BAMBOOBLOCK: MaterialEnum = MaterialEnum::BambooBlock;
    pub const STRIPPEDOAKLOG: MaterialEnum = MaterialEnum::StrippedOakLog;
    pub const STRIPPEDSPRUCELOG: MaterialEnum = MaterialEnum::StrippedSpruceLog;
    pub const STRIPPEDBIRCHLOG: MaterialEnum = MaterialEnum::StrippedBirchLog;
    pub const STRIPPEDJUNGLELOG: MaterialEnum = MaterialEnum::StrippedJungleLog;
    pub const STRIPPEDACACIALOG: MaterialEnum = MaterialEnum::StrippedAcaciaLog;
    pub const STRIPPEDCHERRYLOG: MaterialEnum = MaterialEnum::StrippedCherryLog;
    pub const STRIPPEDDARKOAKLOG: MaterialEnum = MaterialEnum::StrippedDarkOakLog;
    pub const STRIPPEDMANGROVELOG: MaterialEnum = MaterialEnum::StrippedMangroveLog;
    pub const STRIPPEDCRIMSONSTEM: MaterialEnum = MaterialEnum::StrippedCrimsonStem;
    pub const STRIPPEDWARPEDSTEM: MaterialEnum = MaterialEnum::StrippedWarpedStem;
    pub const STRIPPEDOAKWOOD: MaterialEnum = MaterialEnum::StrippedOakWood;
    pub const STRIPPEDSPRUCEWOOD: MaterialEnum = MaterialEnum::StrippedSpruceWood;
    pub const STRIPPEDBIRCHWOOD: MaterialEnum = MaterialEnum::StrippedBirchWood;
    pub const STRIPPEDJUNGLEWOOD: MaterialEnum = MaterialEnum::StrippedJungleWood;
    pub const STRIPPEDACACIAWOOD: MaterialEnum = MaterialEnum::StrippedAcaciaWood;
    pub const STRIPPEDCHERRYWOOD: MaterialEnum = MaterialEnum::StrippedCherryWood;
    pub const STRIPPEDDARKOAKWOOD: MaterialEnum = MaterialEnum::StrippedDarkOakWood;
    pub const STRIPPEDMANGROVEWOOD: MaterialEnum = MaterialEnum::StrippedMangroveWood;
    pub const STRIPPEDCRIMSONHYPHAE: MaterialEnum = MaterialEnum::StrippedCrimsonHyphae;
    pub const STRIPPEDWARPEDHYPHAE: MaterialEnum = MaterialEnum::StrippedWarpedHyphae;
    pub const STRIPPEDBAMBOOBLOCK: MaterialEnum = MaterialEnum::StrippedBambooBlock;
    pub const OAKWOOD: MaterialEnum = MaterialEnum::OakWood;
    pub const SPRUCEWOOD: MaterialEnum = MaterialEnum::SpruceWood;
    pub const BIRCHWOOD: MaterialEnum = MaterialEnum::BirchWood;
    pub const JUNGLEWOOD: MaterialEnum = MaterialEnum::JungleWood;
    pub const ACACIAWOOD: MaterialEnum = MaterialEnum::AcaciaWood;
    pub const CHERRYWOOD: MaterialEnum = MaterialEnum::CherryWood;
    pub const DARKOAKWOOD: MaterialEnum = MaterialEnum::DarkOakWood;
    pub const MANGROVEWOOD: MaterialEnum = MaterialEnum::MangroveWood;
    pub const CRIMSONHYPHAE: MaterialEnum = MaterialEnum::CrimsonHyphae;
    pub const WARPEDHYPHAE: MaterialEnum = MaterialEnum::WarpedHyphae;
    pub const OAKLEAVES: MaterialEnum = MaterialEnum::OakLeaves;
    pub const SPRUCELEAVES: MaterialEnum = MaterialEnum::SpruceLeaves;
    pub const BIRCHLEAVES: MaterialEnum = MaterialEnum::BirchLeaves;
    pub const JUNGLELEAVES: MaterialEnum = MaterialEnum::JungleLeaves;
    pub const ACACIALEAVES: MaterialEnum = MaterialEnum::AcaciaLeaves;
    pub const CHERRYLEAVES: MaterialEnum = MaterialEnum::CherryLeaves;
    pub const DARKOAKLEAVES: MaterialEnum = MaterialEnum::DarkOakLeaves;
    pub const MANGROVELEAVES: MaterialEnum = MaterialEnum::MangroveLeaves;
    pub const AZALEALEAVES: MaterialEnum = MaterialEnum::AzaleaLeaves;
    pub const FLOWERINGAZALEALEAVES: MaterialEnum = MaterialEnum::FloweringAzaleaLeaves;
    pub const SPONGE: MaterialEnum = MaterialEnum::Sponge;
    pub const WETSPONGE: MaterialEnum = MaterialEnum::WetSponge;
    pub const GLASS: MaterialEnum = MaterialEnum::Glass;
    pub const TINTEDGLASS: MaterialEnum = MaterialEnum::TintedGlass;
    pub const LAPISBLOCK: MaterialEnum = MaterialEnum::LapisBlock;
    pub const SANDSTONE: MaterialEnum = MaterialEnum::Sandstone;
    pub const CHISELEDSANDSTONE: MaterialEnum = MaterialEnum::ChiseledSandstone;
    pub const CUTSANDSTONE: MaterialEnum = MaterialEnum::CutSandstone;
    pub const COBWEB: MaterialEnum = MaterialEnum::Cobweb;
    pub const GRASS: MaterialEnum = MaterialEnum::Grass;
    pub const FERN: MaterialEnum = MaterialEnum::Fern;
    pub const AZALEA: MaterialEnum = MaterialEnum::Azalea;
    pub const FLOWERINGAZALEA: MaterialEnum = MaterialEnum::FloweringAzalea;
    pub const DEADBUSH: MaterialEnum = MaterialEnum::DeadBush;
    pub const SEAGRASS: MaterialEnum = MaterialEnum::Seagrass;
    pub const SEAPICKLE: MaterialEnum = MaterialEnum::SeaPickle;
    pub const WHITEWOOL: MaterialEnum = MaterialEnum::WhiteWool;
    pub const ORANGEWOOL: MaterialEnum = MaterialEnum::OrangeWool;
    pub const MAGENTAWOOL: MaterialEnum = MaterialEnum::MagentaWool;
    pub const LIGHTBLUEWOOL: MaterialEnum = MaterialEnum::LightBlueWool;
    pub const YELLOWWOOL: MaterialEnum = MaterialEnum::YellowWool;
    pub const LIMEWOOL: MaterialEnum = MaterialEnum::LimeWool;
    pub const PINKWOOL: MaterialEnum = MaterialEnum::PinkWool;
    pub const GRAYWOOL: MaterialEnum = MaterialEnum::GrayWool;
    pub const LIGHTGRAYWOOL: MaterialEnum = MaterialEnum::LightGrayWool;
    pub const CYANWOOL: MaterialEnum = MaterialEnum::CyanWool;
    pub const PURPLEWOOL: MaterialEnum = MaterialEnum::PurpleWool;
    pub const BLUEWOOL: MaterialEnum = MaterialEnum::BlueWool;
    pub const BROWNWOOL: MaterialEnum = MaterialEnum::BrownWool;
    pub const GREENWOOL: MaterialEnum = MaterialEnum::GreenWool;
    pub const REDWOOL: MaterialEnum = MaterialEnum::RedWool;
    pub const BLACKWOOL: MaterialEnum = MaterialEnum::BlackWool;
    pub const DANDELION: MaterialEnum = MaterialEnum::Dandelion;
    pub const POPPY: MaterialEnum = MaterialEnum::Poppy;
    pub const BLUEORCHID: MaterialEnum = MaterialEnum::BlueOrchid;
    pub const ALLIUM: MaterialEnum = MaterialEnum::Allium;
    pub const AZUREBLUET: MaterialEnum = MaterialEnum::AzureBluet;
    pub const REDTULIP: MaterialEnum = MaterialEnum::RedTulip;
    pub const ORANGETULIP: MaterialEnum = MaterialEnum::OrangeTulip;
    pub const WHITETULIP: MaterialEnum = MaterialEnum::WhiteTulip;
    pub const PINKTULIP: MaterialEnum = MaterialEnum::PinkTulip;
    pub const OXEYEDAISY: MaterialEnum = MaterialEnum::OxeyeDaisy;
    pub const CORNFLOWER: MaterialEnum = MaterialEnum::Cornflower;
    pub const LILYOFTHEVALLEY: MaterialEnum = MaterialEnum::LilyOfTheValley;
    pub const WITHERROSE: MaterialEnum = MaterialEnum::WitherRose;
    pub const TORCHFLOWER: MaterialEnum = MaterialEnum::Torchflower;
    pub const PITCHERPLANT: MaterialEnum = MaterialEnum::PitcherPlant;
    pub const SPOREBLOSSOM: MaterialEnum = MaterialEnum::SporeBlossom;
    pub const BROWNMUSHROOM: MaterialEnum = MaterialEnum::BrownMushroom;
    pub const REDMUSHROOM: MaterialEnum = MaterialEnum::RedMushroom;
    pub const CRIMSONFUNGUS: MaterialEnum = MaterialEnum::CrimsonFungus;
    pub const WARPEDFUNGUS: MaterialEnum = MaterialEnum::WarpedFungus;
    pub const CRIMSONROOTS: MaterialEnum = MaterialEnum::CrimsonRoots;
    pub const WARPEDROOTS: MaterialEnum = MaterialEnum::WarpedRoots;
    pub const NETHERSPROUTS: MaterialEnum = MaterialEnum::NetherSprouts;
    pub const WEEPINGVINES: MaterialEnum = MaterialEnum::WeepingVines;
    pub const TWISTINGVINES: MaterialEnum = MaterialEnum::TwistingVines;
    pub const SUGARCANE: MaterialEnum = MaterialEnum::SugarCane;
    pub const KELP: MaterialEnum = MaterialEnum::Kelp;
    pub const MOSSCARPET: MaterialEnum = MaterialEnum::MossCarpet;
    pub const PINKPETALS: MaterialEnum = MaterialEnum::PinkPetals;
    pub const MOSSBLOCK: MaterialEnum = MaterialEnum::MossBlock;
    pub const HANGINGROOTS: MaterialEnum = MaterialEnum::HangingRoots;
    pub const BIGDRIPLEAF: MaterialEnum = MaterialEnum::BigDripleaf;
    pub const SMALLDRIPLEAF: MaterialEnum = MaterialEnum::SmallDripleaf;
    pub const BAMBOO: MaterialEnum = MaterialEnum::Bamboo;
    pub const OAKSLAB: MaterialEnum = MaterialEnum::OakSlab;
    pub const SPRUCESLAB: MaterialEnum = MaterialEnum::SpruceSlab;
    pub const BIRCHSLAB: MaterialEnum = MaterialEnum::BirchSlab;
    pub const JUNGLESLAB: MaterialEnum = MaterialEnum::JungleSlab;
    pub const ACACIASLAB: MaterialEnum = MaterialEnum::AcaciaSlab;
    pub const CHERRYSLAB: MaterialEnum = MaterialEnum::CherrySlab;
    pub const DARKOAKSLAB: MaterialEnum = MaterialEnum::DarkOakSlab;
    pub const MANGROVESLAB: MaterialEnum = MaterialEnum::MangroveSlab;
    pub const BAMBOOSLAB: MaterialEnum = MaterialEnum::BambooSlab;
    pub const BAMBOOMOSAICSLAB: MaterialEnum = MaterialEnum::BambooMosaicSlab;
    pub const CRIMSONSLAB: MaterialEnum = MaterialEnum::CrimsonSlab;
    pub const WARPEDSLAB: MaterialEnum = MaterialEnum::WarpedSlab;
    pub const STONESLAB: MaterialEnum = MaterialEnum::StoneSlab;
    pub const SMOOTHSTONESLAB: MaterialEnum = MaterialEnum::SmoothStoneSlab;
    pub const SANDSTONESLAB: MaterialEnum = MaterialEnum::SandstoneSlab;
    pub const CUTSANDSTONESLAB: MaterialEnum = MaterialEnum::CutSandstoneSlab;
    pub const PETRIFIEDOAKSLAB: MaterialEnum = MaterialEnum::PetrifiedOakSlab;
    pub const COBBLESTONESLAB: MaterialEnum = MaterialEnum::CobblestoneSlab;
    pub const BRICKSLAB: MaterialEnum = MaterialEnum::BrickSlab;
    pub const STONEBRICKSLAB: MaterialEnum = MaterialEnum::StoneBrickSlab;
    pub const MUDBRICKSLAB: MaterialEnum = MaterialEnum::MudBrickSlab;
    pub const NETHERBRICKSLAB: MaterialEnum = MaterialEnum::NetherBrickSlab;
    pub const QUARTZSLAB: MaterialEnum = MaterialEnum::QuartzSlab;
    pub const REDSANDSTONESLAB: MaterialEnum = MaterialEnum::RedSandstoneSlab;
    pub const CUTREDSANDSTONESLAB: MaterialEnum = MaterialEnum::CutRedSandstoneSlab;
    pub const PURPURSLAB: MaterialEnum = MaterialEnum::PurpurSlab;
    pub const PRISMARINESLAB: MaterialEnum = MaterialEnum::PrismarineSlab;
    pub const PRISMARINEBRICKSLAB: MaterialEnum = MaterialEnum::PrismarineBrickSlab;
    pub const DARKPRISMARINESLAB: MaterialEnum = MaterialEnum::DarkPrismarineSlab;
    pub const SMOOTHQUARTZ: MaterialEnum = MaterialEnum::SmoothQuartz;
    pub const SMOOTHREDSANDSTONE: MaterialEnum = MaterialEnum::SmoothRedSandstone;
    pub const SMOOTHSANDSTONE: MaterialEnum = MaterialEnum::SmoothSandstone;
    pub const SMOOTHSTONE: MaterialEnum = MaterialEnum::SmoothStone;
    pub const BRICKS: MaterialEnum = MaterialEnum::Bricks;
    pub const BOOKSHELF: MaterialEnum = MaterialEnum::Bookshelf;
    pub const CHISELEDBOOKSHELF: MaterialEnum = MaterialEnum::ChiseledBookshelf;
    pub const DECORATEDPOT: MaterialEnum = MaterialEnum::DecoratedPot;
    pub const MOSSYCOBBLESTONE: MaterialEnum = MaterialEnum::MossyCobblestone;
    pub const OBSIDIAN: MaterialEnum = MaterialEnum::Obsidian;
    pub const TORCH: MaterialEnum = MaterialEnum::Torch;
    pub const ENDROD: MaterialEnum = MaterialEnum::EndRod;
    pub const CHORUSPLANT: MaterialEnum = MaterialEnum::ChorusPlant;
    pub const CHORUSFLOWER: MaterialEnum = MaterialEnum::ChorusFlower;
    pub const PURPURBLOCK: MaterialEnum = MaterialEnum::PurpurBlock;
    pub const PURPURPILLAR: MaterialEnum = MaterialEnum::PurpurPillar;
    pub const PURPURSTAIRS: MaterialEnum = MaterialEnum::PurpurStairs;
    pub const SPAWNER: MaterialEnum = MaterialEnum::Spawner;
    pub const CHEST: MaterialEnum = MaterialEnum::Chest;
    pub const CRAFTINGTABLE: MaterialEnum = MaterialEnum::CraftingTable;
    pub const FARMLAND: MaterialEnum = MaterialEnum::Farmland;
    pub const FURNACE: MaterialEnum = MaterialEnum::Furnace;
    pub const LADDER: MaterialEnum = MaterialEnum::Ladder;
    pub const COBBLESTONESTAIRS: MaterialEnum = MaterialEnum::CobblestoneStairs;
    pub const SNOW: MaterialEnum = MaterialEnum::Snow;
    pub const ICE: MaterialEnum = MaterialEnum::Ice;
    pub const SNOWBLOCK: MaterialEnum = MaterialEnum::SnowBlock;
    pub const CACTUS: MaterialEnum = MaterialEnum::Cactus;
    pub const CLAY: MaterialEnum = MaterialEnum::Clay;
    pub const JUKEBOX: MaterialEnum = MaterialEnum::Jukebox;
    pub const OAKFENCE: MaterialEnum = MaterialEnum::OakFence;
    pub const SPRUCEFENCE: MaterialEnum = MaterialEnum::SpruceFence;
    pub const BIRCHFENCE: MaterialEnum = MaterialEnum::BirchFence;
    pub const JUNGLEFENCE: MaterialEnum = MaterialEnum::JungleFence;
    pub const ACACIAFENCE: MaterialEnum = MaterialEnum::AcaciaFence;
    pub const CHERRYFENCE: MaterialEnum = MaterialEnum::CherryFence;
    pub const DARKOAKFENCE: MaterialEnum = MaterialEnum::DarkOakFence;
    pub const MANGROVEFENCE: MaterialEnum = MaterialEnum::MangroveFence;
    pub const BAMBOOFENCE: MaterialEnum = MaterialEnum::BambooFence;
    pub const CRIMSONFENCE: MaterialEnum = MaterialEnum::CrimsonFence;
    pub const WARPEDFENCE: MaterialEnum = MaterialEnum::WarpedFence;
    pub const PUMPKIN: MaterialEnum = MaterialEnum::Pumpkin;
    pub const CARVEDPUMPKIN: MaterialEnum = MaterialEnum::CarvedPumpkin;
    pub const JACKOLANTERN: MaterialEnum = MaterialEnum::JackOLantern;
    pub const NETHERRACK: MaterialEnum = MaterialEnum::Netherrack;
    pub const SOULSAND: MaterialEnum = MaterialEnum::SoulSand;
    pub const SOULSOIL: MaterialEnum = MaterialEnum::SoulSoil;
    pub const BASALT: MaterialEnum = MaterialEnum::Basalt;
    pub const POLISHEDBASALT: MaterialEnum = MaterialEnum::PolishedBasalt;
    pub const SMOOTHBASALT: MaterialEnum = MaterialEnum::SmoothBasalt;
    pub const SOULTORCH: MaterialEnum = MaterialEnum::SoulTorch;
    pub const GLOWSTONE: MaterialEnum = MaterialEnum::Glowstone;
    pub const INFESTEDSTONE: MaterialEnum = MaterialEnum::InfestedStone;
    pub const INFESTEDCOBBLESTONE: MaterialEnum = MaterialEnum::InfestedCobblestone;
    pub const INFESTEDSTONEBRICKS: MaterialEnum = MaterialEnum::InfestedStoneBricks;
    pub const INFESTEDMOSSYSTONEBRICKS: MaterialEnum = MaterialEnum::InfestedMossyStoneBricks;
    pub const INFESTEDCRACKEDSTONEBRICKS: MaterialEnum = MaterialEnum::InfestedCrackedStoneBricks;
    pub const INFESTEDCHISELEDSTONEBRICKS: MaterialEnum = MaterialEnum::InfestedChiseledStoneBricks;
    pub const INFESTEDDEEPSLATE: MaterialEnum = MaterialEnum::InfestedDeepslate;
    pub const STONEBRICKS: MaterialEnum = MaterialEnum::StoneBricks;
    pub const MOSSYSTONEBRICKS: MaterialEnum = MaterialEnum::MossyStoneBricks;
    pub const CRACKEDSTONEBRICKS: MaterialEnum = MaterialEnum::CrackedStoneBricks;
    pub const CHISELEDSTONEBRICKS: MaterialEnum = MaterialEnum::ChiseledStoneBricks;
    pub const PACKEDMUD: MaterialEnum = MaterialEnum::PackedMud;
    pub const MUDBRICKS: MaterialEnum = MaterialEnum::MudBricks;
    pub const DEEPSLATEBRICKS: MaterialEnum = MaterialEnum::DeepslateBricks;
    pub const CRACKEDDEEPSLATEBRICKS: MaterialEnum = MaterialEnum::CrackedDeepslateBricks;
    pub const DEEPSLATETILES: MaterialEnum = MaterialEnum::DeepslateTiles;
    pub const CRACKEDDEEPSLATETILES: MaterialEnum = MaterialEnum::CrackedDeepslateTiles;
    pub const CHISELEDDEEPSLATE: MaterialEnum = MaterialEnum::ChiseledDeepslate;
    pub const REINFORCEDDEEPSLATE: MaterialEnum = MaterialEnum::ReinforcedDeepslate;
    pub const BROWNMUSHROOMBLOCK: MaterialEnum = MaterialEnum::BrownMushroomBlock;
    pub const REDMUSHROOMBLOCK: MaterialEnum = MaterialEnum::RedMushroomBlock;
    pub const MUSHROOMSTEM: MaterialEnum = MaterialEnum::MushroomStem;
    pub const IRONBARS: MaterialEnum = MaterialEnum::IronBars;
    pub const CHAIN: MaterialEnum = MaterialEnum::Chain;
    pub const GLASSPANE: MaterialEnum = MaterialEnum::GlassPane;
    pub const MELON: MaterialEnum = MaterialEnum::Melon;
    pub const VINE: MaterialEnum = MaterialEnum::Vine;
    pub const GLOWLICHEN: MaterialEnum = MaterialEnum::GlowLichen;
    pub const BRICKSTAIRS: MaterialEnum = MaterialEnum::BrickStairs;
    pub const STONEBRICKSTAIRS: MaterialEnum = MaterialEnum::StoneBrickStairs;
    pub const MUDBRICKSTAIRS: MaterialEnum = MaterialEnum::MudBrickStairs;
    pub const MYCELIUM: MaterialEnum = MaterialEnum::Mycelium;
    pub const LILYPAD: MaterialEnum = MaterialEnum::LilyPad;
    pub const NETHERBRICKS: MaterialEnum = MaterialEnum::NetherBricks;
    pub const CRACKEDNETHERBRICKS: MaterialEnum = MaterialEnum::CrackedNetherBricks;
    pub const CHISELEDNETHERBRICKS: MaterialEnum = MaterialEnum::ChiseledNetherBricks;
    pub const NETHERBRICKFENCE: MaterialEnum = MaterialEnum::NetherBrickFence;
    pub const NETHERBRICKSTAIRS: MaterialEnum = MaterialEnum::NetherBrickStairs;
    pub const SCULK: MaterialEnum = MaterialEnum::Sculk;
    pub const SCULKVEIN: MaterialEnum = MaterialEnum::SculkVein;
    pub const SCULKCATALYST: MaterialEnum = MaterialEnum::SculkCatalyst;
    pub const SCULKSHRIEKER: MaterialEnum = MaterialEnum::SculkShrieker;
    pub const ENCHANTINGTABLE: MaterialEnum = MaterialEnum::EnchantingTable;
    pub const ENDPORTALFRAME: MaterialEnum = MaterialEnum::EndPortalFrame;
    pub const ENDSTONE: MaterialEnum = MaterialEnum::EndStone;
    pub const ENDSTONEBRICKS: MaterialEnum = MaterialEnum::EndStoneBricks;
    pub const DRAGONEGG: MaterialEnum = MaterialEnum::DragonEgg;
    pub const SANDSTONESTAIRS: MaterialEnum = MaterialEnum::SandstoneStairs;
    pub const ENDERCHEST: MaterialEnum = MaterialEnum::EnderChest;
    pub const EMERALDBLOCK: MaterialEnum = MaterialEnum::EmeraldBlock;
    pub const OAKSTAIRS: MaterialEnum = MaterialEnum::OakStairs;
    pub const SPRUCESTAIRS: MaterialEnum = MaterialEnum::SpruceStairs;
    pub const BIRCHSTAIRS: MaterialEnum = MaterialEnum::BirchStairs;
    pub const JUNGLESTAIRS: MaterialEnum = MaterialEnum::JungleStairs;
    pub const ACACIASTAIRS: MaterialEnum = MaterialEnum::AcaciaStairs;
    pub const CHERRYSTAIRS: MaterialEnum = MaterialEnum::CherryStairs;
    pub const DARKOAKSTAIRS: MaterialEnum = MaterialEnum::DarkOakStairs;
    pub const MANGROVESTAIRS: MaterialEnum = MaterialEnum::MangroveStairs;
    pub const BAMBOOSTAIRS: MaterialEnum = MaterialEnum::BambooStairs;
    pub const BAMBOOMOSAICSTAIRS: MaterialEnum = MaterialEnum::BambooMosaicStairs;
    pub const CRIMSONSTAIRS: MaterialEnum = MaterialEnum::CrimsonStairs;
    pub const WARPEDSTAIRS: MaterialEnum = MaterialEnum::WarpedStairs;
    pub const COMMANDBLOCK: MaterialEnum = MaterialEnum::CommandBlock;
    pub const BEACON: MaterialEnum = MaterialEnum::Beacon;
    pub const COBBLESTONEWALL: MaterialEnum = MaterialEnum::CobblestoneWall;
    pub const MOSSYCOBBLESTONEWALL: MaterialEnum = MaterialEnum::MossyCobblestoneWall;
    pub const BRICKWALL: MaterialEnum = MaterialEnum::BrickWall;
    pub const PRISMARINEWALL: MaterialEnum = MaterialEnum::PrismarineWall;
    pub const REDSANDSTONEWALL: MaterialEnum = MaterialEnum::RedSandstoneWall;
    pub const MOSSYSTONEBRICKWALL: MaterialEnum = MaterialEnum::MossyStoneBrickWall;
    pub const GRANITEWALL: MaterialEnum = MaterialEnum::GraniteWall;
    pub const STONEBRICKWALL: MaterialEnum = MaterialEnum::StoneBrickWall;
    pub const MUDBRICKWALL: MaterialEnum = MaterialEnum::MudBrickWall;
    pub const NETHERBRICKWALL: MaterialEnum = MaterialEnum::NetherBrickWall;
    pub const ANDESITEWALL: MaterialEnum = MaterialEnum::AndesiteWall;
    pub const REDNETHERBRICKWALL: MaterialEnum = MaterialEnum::RedNetherBrickWall;
    pub const SANDSTONEWALL: MaterialEnum = MaterialEnum::SandstoneWall;
    pub const ENDSTONEBRICKWALL: MaterialEnum = MaterialEnum::EndStoneBrickWall;
    pub const DIORITEWALL: MaterialEnum = MaterialEnum::DioriteWall;
    pub const BLACKSTONEWALL: MaterialEnum = MaterialEnum::BlackstoneWall;
    pub const POLISHEDBLACKSTONEWALL: MaterialEnum = MaterialEnum::PolishedBlackstoneWall;
    pub const POLISHEDBLACKSTONEBRICKWALL: MaterialEnum = MaterialEnum::PolishedBlackstoneBrickWall;
    pub const COBBLEDDEEPSLATEWALL: MaterialEnum = MaterialEnum::CobbledDeepslateWall;
    pub const POLISHEDDEEPSLATEWALL: MaterialEnum = MaterialEnum::PolishedDeepslateWall;
    pub const DEEPSLATEBRICKWALL: MaterialEnum = MaterialEnum::DeepslateBrickWall;
    pub const DEEPSLATETILEWALL: MaterialEnum = MaterialEnum::DeepslateTileWall;
    pub const ANVIL: MaterialEnum = MaterialEnum::Anvil;
    pub const CHIPPEDANVIL: MaterialEnum = MaterialEnum::ChippedAnvil;
    pub const DAMAGEDANVIL: MaterialEnum = MaterialEnum::DamagedAnvil;
    pub const CHISELEDQUARTZBLOCK: MaterialEnum = MaterialEnum::ChiseledQuartzBlock;
    pub const QUARTZBLOCK: MaterialEnum = MaterialEnum::QuartzBlock;
    pub const QUARTZBRICKS: MaterialEnum = MaterialEnum::QuartzBricks;
    pub const QUARTZPILLAR: MaterialEnum = MaterialEnum::QuartzPillar;
    pub const QUARTZSTAIRS: MaterialEnum = MaterialEnum::QuartzStairs;
    pub const WHITETERRACOTTA: MaterialEnum = MaterialEnum::WhiteTerracotta;
    pub const ORANGETERRACOTTA: MaterialEnum = MaterialEnum::OrangeTerracotta;
    pub const MAGENTATERRACOTTA: MaterialEnum = MaterialEnum::MagentaTerracotta;
    pub const LIGHTBLUETERRACOTTA: MaterialEnum = MaterialEnum::LightBlueTerracotta;
    pub const YELLOWTERRACOTTA: MaterialEnum = MaterialEnum::YellowTerracotta;
    pub const LIMETERRACOTTA: MaterialEnum = MaterialEnum::LimeTerracotta;
    pub const PINKTERRACOTTA: MaterialEnum = MaterialEnum::PinkTerracotta;
    pub const GRAYTERRACOTTA: MaterialEnum = MaterialEnum::GrayTerracotta;
    pub const LIGHTGRAYTERRACOTTA: MaterialEnum = MaterialEnum::LightGrayTerracotta;
    pub const CYANTERRACOTTA: MaterialEnum = MaterialEnum::CyanTerracotta;
    pub const PURPLETERRACOTTA: MaterialEnum = MaterialEnum::PurpleTerracotta;
    pub const BLUETERRACOTTA: MaterialEnum = MaterialEnum::BlueTerracotta;
    pub const BROWNTERRACOTTA: MaterialEnum = MaterialEnum::BrownTerracotta;
    pub const GREENTERRACOTTA: MaterialEnum = MaterialEnum::GreenTerracotta;
    pub const REDTERRACOTTA: MaterialEnum = MaterialEnum::RedTerracotta;
    pub const BLACKTERRACOTTA: MaterialEnum = MaterialEnum::BlackTerracotta;
    pub const BARRIER: MaterialEnum = MaterialEnum::Barrier;
    pub const LIGHT: MaterialEnum = MaterialEnum::Light;
    pub const HAYBLOCK: MaterialEnum = MaterialEnum::HayBlock;
    pub const WHITECARPET: MaterialEnum = MaterialEnum::WhiteCarpet;
    pub const ORANGECARPET: MaterialEnum = MaterialEnum::OrangeCarpet;
    pub const MAGENTACARPET: MaterialEnum = MaterialEnum::MagentaCarpet;
    pub const LIGHTBLUECARPET: MaterialEnum = MaterialEnum::LightBlueCarpet;
    pub const YELLOWCARPET: MaterialEnum = MaterialEnum::YellowCarpet;
    pub const LIMECARPET: MaterialEnum = MaterialEnum::LimeCarpet;
    pub const PINKCARPET: MaterialEnum = MaterialEnum::PinkCarpet;
    pub const GRAYCARPET: MaterialEnum = MaterialEnum::GrayCarpet;
    pub const LIGHTGRAYCARPET: MaterialEnum = MaterialEnum::LightGrayCarpet;
    pub const CYANCARPET: MaterialEnum = MaterialEnum::CyanCarpet;
    pub const PURPLECARPET: MaterialEnum = MaterialEnum::PurpleCarpet;
    pub const BLUECARPET: MaterialEnum = MaterialEnum::BlueCarpet;
    pub const BROWNCARPET: MaterialEnum = MaterialEnum::BrownCarpet;
    pub const GREENCARPET: MaterialEnum = MaterialEnum::GreenCarpet;
    pub const REDCARPET: MaterialEnum = MaterialEnum::RedCarpet;
    pub const BLACKCARPET: MaterialEnum = MaterialEnum::BlackCarpet;
    pub const TERRACOTTA: MaterialEnum = MaterialEnum::Terracotta;
    pub const PACKEDICE: MaterialEnum = MaterialEnum::PackedIce;
    pub const DIRTPATH: MaterialEnum = MaterialEnum::DirtPath;
    pub const SUNFLOWER: MaterialEnum = MaterialEnum::Sunflower;
    pub const LILAC: MaterialEnum = MaterialEnum::Lilac;
    pub const ROSEBUSH: MaterialEnum = MaterialEnum::RoseBush;
    pub const PEONY: MaterialEnum = MaterialEnum::Peony;
    pub const TALLGRASS: MaterialEnum = MaterialEnum::TallGrass;
    pub const LARGEFERN: MaterialEnum = MaterialEnum::LargeFern;
    pub const WHITESTAINEDGLASS: MaterialEnum = MaterialEnum::WhiteStainedGlass;
    pub const ORANGESTAINEDGLASS: MaterialEnum = MaterialEnum::OrangeStainedGlass;
    pub const MAGENTASTAINEDGLASS: MaterialEnum = MaterialEnum::MagentaStainedGlass;
    pub const LIGHTBLUESTAINEDGLASS: MaterialEnum = MaterialEnum::LightBlueStainedGlass;
    pub const YELLOWSTAINEDGLASS: MaterialEnum = MaterialEnum::YellowStainedGlass;
    pub const LIMESTAINEDGLASS: MaterialEnum = MaterialEnum::LimeStainedGlass;
    pub const PINKSTAINEDGLASS: MaterialEnum = MaterialEnum::PinkStainedGlass;
    pub const GRAYSTAINEDGLASS: MaterialEnum = MaterialEnum::GrayStainedGlass;
    pub const LIGHTGRAYSTAINEDGLASS: MaterialEnum = MaterialEnum::LightGrayStainedGlass;
    pub const CYANSTAINEDGLASS: MaterialEnum = MaterialEnum::CyanStainedGlass;
    pub const PURPLESTAINEDGLASS: MaterialEnum = MaterialEnum::PurpleStainedGlass;
    pub const BLUESTAINEDGLASS: MaterialEnum = MaterialEnum::BlueStainedGlass;
    pub const BROWNSTAINEDGLASS: MaterialEnum = MaterialEnum::BrownStainedGlass;
    pub const GREENSTAINEDGLASS: MaterialEnum = MaterialEnum::GreenStainedGlass;
    pub const REDSTAINEDGLASS: MaterialEnum = MaterialEnum::RedStainedGlass;
    pub const BLACKSTAINEDGLASS: MaterialEnum = MaterialEnum::BlackStainedGlass;
    pub const WHITESTAINEDGLASSPANE: MaterialEnum = MaterialEnum::WhiteStainedGlassPane;
    pub const ORANGESTAINEDGLASSPANE: MaterialEnum = MaterialEnum::OrangeStainedGlassPane;
    pub const MAGENTASTAINEDGLASSPANE: MaterialEnum = MaterialEnum::MagentaStainedGlassPane;
    pub const LIGHTBLUESTAINEDGLASSPANE: MaterialEnum = MaterialEnum::LightBlueStainedGlassPane;
    pub const YELLOWSTAINEDGLASSPANE: MaterialEnum = MaterialEnum::YellowStainedGlassPane;
    pub const LIMESTAINEDGLASSPANE: MaterialEnum = MaterialEnum::LimeStainedGlassPane;
    pub const PINKSTAINEDGLASSPANE: MaterialEnum = MaterialEnum::PinkStainedGlassPane;
    pub const GRAYSTAINEDGLASSPANE: MaterialEnum = MaterialEnum::GrayStainedGlassPane;
    pub const LIGHTGRAYSTAINEDGLASSPANE: MaterialEnum = MaterialEnum::LightGrayStainedGlassPane;
    pub const CYANSTAINEDGLASSPANE: MaterialEnum = MaterialEnum::CyanStainedGlassPane;
    pub const PURPLESTAINEDGLASSPANE: MaterialEnum = MaterialEnum::PurpleStainedGlassPane;
    pub const BLUESTAINEDGLASSPANE: MaterialEnum = MaterialEnum::BlueStainedGlassPane;
    pub const BROWNSTAINEDGLASSPANE: MaterialEnum = MaterialEnum::BrownStainedGlassPane;
    pub const GREENSTAINEDGLASSPANE: MaterialEnum = MaterialEnum::GreenStainedGlassPane;
    pub const REDSTAINEDGLASSPANE: MaterialEnum = MaterialEnum::RedStainedGlassPane;
    pub const BLACKSTAINEDGLASSPANE: MaterialEnum = MaterialEnum::BlackStainedGlassPane;
    pub const PRISMARINE: MaterialEnum = MaterialEnum::Prismarine;
    pub const PRISMARINEBRICKS: MaterialEnum = MaterialEnum::PrismarineBricks;
    pub const DARKPRISMARINE: MaterialEnum = MaterialEnum::DarkPrismarine;
    pub const PRISMARINESTAIRS: MaterialEnum = MaterialEnum::PrismarineStairs;
    pub const PRISMARINEBRICKSTAIRS: MaterialEnum = MaterialEnum::PrismarineBrickStairs;
    pub const DARKPRISMARINESTAIRS: MaterialEnum = MaterialEnum::DarkPrismarineStairs;
    pub const SEALANTERN: MaterialEnum = MaterialEnum::SeaLantern;
    pub const REDSANDSTONE: MaterialEnum = MaterialEnum::RedSandstone;
    pub const CHISELEDREDSANDSTONE: MaterialEnum = MaterialEnum::ChiseledRedSandstone;
    pub const CUTREDSANDSTONE: MaterialEnum = MaterialEnum::CutRedSandstone;
    pub const REDSANDSTONESTAIRS: MaterialEnum = MaterialEnum::RedSandstoneStairs;
    pub const REPEATINGCOMMANDBLOCK: MaterialEnum = MaterialEnum::RepeatingCommandBlock;
    pub const CHAINCOMMANDBLOCK: MaterialEnum = MaterialEnum::ChainCommandBlock;
    pub const MAGMABLOCK: MaterialEnum = MaterialEnum::MagmaBlock;
    pub const NETHERWARTBLOCK: MaterialEnum = MaterialEnum::NetherWartBlock;
    pub const WARPEDWARTBLOCK: MaterialEnum = MaterialEnum::WarpedWartBlock;
    pub const REDNETHERBRICKS: MaterialEnum = MaterialEnum::RedNetherBricks;
    pub const BONEBLOCK: MaterialEnum = MaterialEnum::BoneBlock;
    pub const STRUCTUREVOID: MaterialEnum = MaterialEnum::StructureVoid;
    pub const SHULKERBOX: MaterialEnum = MaterialEnum::ShulkerBox;
    pub const WHITESHULKERBOX: MaterialEnum = MaterialEnum::WhiteShulkerBox;
    pub const ORANGESHULKERBOX: MaterialEnum = MaterialEnum::OrangeShulkerBox;
    pub const MAGENTASHULKERBOX: MaterialEnum = MaterialEnum::MagentaShulkerBox;
    pub const LIGHTBLUESHULKERBOX: MaterialEnum = MaterialEnum::LightBlueShulkerBox;
    pub const YELLOWSHULKERBOX: MaterialEnum = MaterialEnum::YellowShulkerBox;
    pub const LIMESHULKERBOX: MaterialEnum = MaterialEnum::LimeShulkerBox;
    pub const PINKSHULKERBOX: MaterialEnum = MaterialEnum::PinkShulkerBox;
    pub const GRAYSHULKERBOX: MaterialEnum = MaterialEnum::GrayShulkerBox;
    pub const LIGHTGRAYSHULKERBOX: MaterialEnum = MaterialEnum::LightGrayShulkerBox;
    pub const CYANSHULKERBOX: MaterialEnum = MaterialEnum::CyanShulkerBox;
    pub const PURPLESHULKERBOX: MaterialEnum = MaterialEnum::PurpleShulkerBox;
    pub const BLUESHULKERBOX: MaterialEnum = MaterialEnum::BlueShulkerBox;
    pub const BROWNSHULKERBOX: MaterialEnum = MaterialEnum::BrownShulkerBox;
    pub const GREENSHULKERBOX: MaterialEnum = MaterialEnum::GreenShulkerBox;
    pub const REDSHULKERBOX: MaterialEnum = MaterialEnum::RedShulkerBox;
    pub const BLACKSHULKERBOX: MaterialEnum = MaterialEnum::BlackShulkerBox;
    pub const WHITEGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::WhiteGlazedTerracotta;
    pub const ORANGEGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::OrangeGlazedTerracotta;
    pub const MAGENTAGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::MagentaGlazedTerracotta;
    pub const LIGHTBLUEGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LightBlueGlazedTerracotta;
    pub const YELLOWGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::YellowGlazedTerracotta;
    pub const LIMEGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LimeGlazedTerracotta;
    pub const PINKGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::PinkGlazedTerracotta;
    pub const GRAYGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::GrayGlazedTerracotta;
    pub const LIGHTGRAYGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LightGrayGlazedTerracotta;
    pub const CYANGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::CyanGlazedTerracotta;
    pub const PURPLEGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::PurpleGlazedTerracotta;
    pub const BLUEGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::BlueGlazedTerracotta;
    pub const BROWNGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::BrownGlazedTerracotta;
    pub const GREENGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::GreenGlazedTerracotta;
    pub const REDGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::RedGlazedTerracotta;
    pub const BLACKGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::BlackGlazedTerracotta;
    pub const WHITECONCRETE: MaterialEnum = MaterialEnum::WhiteConcrete;
    pub const ORANGECONCRETE: MaterialEnum = MaterialEnum::OrangeConcrete;
    pub const MAGENTACONCRETE: MaterialEnum = MaterialEnum::MagentaConcrete;
    pub const LIGHTBLUECONCRETE: MaterialEnum = MaterialEnum::LightBlueConcrete;
    pub const YELLOWCONCRETE: MaterialEnum = MaterialEnum::YellowConcrete;
    pub const LIMECONCRETE: MaterialEnum = MaterialEnum::LimeConcrete;
    pub const PINKCONCRETE: MaterialEnum = MaterialEnum::PinkConcrete;
    pub const GRAYCONCRETE: MaterialEnum = MaterialEnum::GrayConcrete;
    pub const LIGHTGRAYCONCRETE: MaterialEnum = MaterialEnum::LightGrayConcrete;
    pub const CYANCONCRETE: MaterialEnum = MaterialEnum::CyanConcrete;
    pub const PURPLECONCRETE: MaterialEnum = MaterialEnum::PurpleConcrete;
    pub const BLUECONCRETE: MaterialEnum = MaterialEnum::BlueConcrete;
    pub const BROWNCONCRETE: MaterialEnum = MaterialEnum::BrownConcrete;
    pub const GREENCONCRETE: MaterialEnum = MaterialEnum::GreenConcrete;
    pub const REDCONCRETE: MaterialEnum = MaterialEnum::RedConcrete;
    pub const BLACKCONCRETE: MaterialEnum = MaterialEnum::BlackConcrete;
    pub const WHITECONCRETEPOWDER: MaterialEnum = MaterialEnum::WhiteConcretePowder;
    pub const ORANGECONCRETEPOWDER: MaterialEnum = MaterialEnum::OrangeConcretePowder;
    pub const MAGENTACONCRETEPOWDER: MaterialEnum = MaterialEnum::MagentaConcretePowder;
    pub const LIGHTBLUECONCRETEPOWDER: MaterialEnum = MaterialEnum::LightBlueConcretePowder;
    pub const YELLOWCONCRETEPOWDER: MaterialEnum = MaterialEnum::YellowConcretePowder;
    pub const LIMECONCRETEPOWDER: MaterialEnum = MaterialEnum::LimeConcretePowder;
    pub const PINKCONCRETEPOWDER: MaterialEnum = MaterialEnum::PinkConcretePowder;
    pub const GRAYCONCRETEPOWDER: MaterialEnum = MaterialEnum::GrayConcretePowder;
    pub const LIGHTGRAYCONCRETEPOWDER: MaterialEnum = MaterialEnum::LightGrayConcretePowder;
    pub const CYANCONCRETEPOWDER: MaterialEnum = MaterialEnum::CyanConcretePowder;
    pub const PURPLECONCRETEPOWDER: MaterialEnum = MaterialEnum::PurpleConcretePowder;
    pub const BLUECONCRETEPOWDER: MaterialEnum = MaterialEnum::BlueConcretePowder;
    pub const BROWNCONCRETEPOWDER: MaterialEnum = MaterialEnum::BrownConcretePowder;
    pub const GREENCONCRETEPOWDER: MaterialEnum = MaterialEnum::GreenConcretePowder;
    pub const REDCONCRETEPOWDER: MaterialEnum = MaterialEnum::RedConcretePowder;
    pub const BLACKCONCRETEPOWDER: MaterialEnum = MaterialEnum::BlackConcretePowder;
    pub const TURTLEEGG: MaterialEnum = MaterialEnum::TurtleEgg;
    pub const SNIFFEREGG: MaterialEnum = MaterialEnum::SnifferEgg;
    pub const DEADTUBECORALBLOCK: MaterialEnum = MaterialEnum::DeadTubeCoralBlock;
    pub const DEADBRAINCORALBLOCK: MaterialEnum = MaterialEnum::DeadBrainCoralBlock;
    pub const DEADBUBBLECORALBLOCK: MaterialEnum = MaterialEnum::DeadBubbleCoralBlock;
    pub const DEADFIRECORALBLOCK: MaterialEnum = MaterialEnum::DeadFireCoralBlock;
    pub const DEADHORNCORALBLOCK: MaterialEnum = MaterialEnum::DeadHornCoralBlock;
    pub const TUBECORALBLOCK: MaterialEnum = MaterialEnum::TubeCoralBlock;
    pub const BRAINCORALBLOCK: MaterialEnum = MaterialEnum::BrainCoralBlock;
    pub const BUBBLECORALBLOCK: MaterialEnum = MaterialEnum::BubbleCoralBlock;
    pub const FIRECORALBLOCK: MaterialEnum = MaterialEnum::FireCoralBlock;
    pub const HORNCORALBLOCK: MaterialEnum = MaterialEnum::HornCoralBlock;
    pub const TUBECORAL: MaterialEnum = MaterialEnum::TubeCoral;
    pub const BRAINCORAL: MaterialEnum = MaterialEnum::BrainCoral;
    pub const BUBBLECORAL: MaterialEnum = MaterialEnum::BubbleCoral;
    pub const FIRECORAL: MaterialEnum = MaterialEnum::FireCoral;
    pub const HORNCORAL: MaterialEnum = MaterialEnum::HornCoral;
    pub const DEADBRAINCORAL: MaterialEnum = MaterialEnum::DeadBrainCoral;
    pub const DEADBUBBLECORAL: MaterialEnum = MaterialEnum::DeadBubbleCoral;
    pub const DEADFIRECORAL: MaterialEnum = MaterialEnum::DeadFireCoral;
    pub const DEADHORNCORAL: MaterialEnum = MaterialEnum::DeadHornCoral;
    pub const DEADTUBECORAL: MaterialEnum = MaterialEnum::DeadTubeCoral;
    pub const TUBECORALFAN: MaterialEnum = MaterialEnum::TubeCoralFan;
    pub const BRAINCORALFAN: MaterialEnum = MaterialEnum::BrainCoralFan;
    pub const BUBBLECORALFAN: MaterialEnum = MaterialEnum::BubbleCoralFan;
    pub const FIRECORALFAN: MaterialEnum = MaterialEnum::FireCoralFan;
    pub const HORNCORALFAN: MaterialEnum = MaterialEnum::HornCoralFan;
    pub const DEADTUBECORALFAN: MaterialEnum = MaterialEnum::DeadTubeCoralFan;
    pub const DEADBRAINCORALFAN: MaterialEnum = MaterialEnum::DeadBrainCoralFan;
    pub const DEADBUBBLECORALFAN: MaterialEnum = MaterialEnum::DeadBubbleCoralFan;
    pub const DEADFIRECORALFAN: MaterialEnum = MaterialEnum::DeadFireCoralFan;
    pub const DEADHORNCORALFAN: MaterialEnum = MaterialEnum::DeadHornCoralFan;
    pub const BLUEICE: MaterialEnum = MaterialEnum::BlueIce;
    pub const CONDUIT: MaterialEnum = MaterialEnum::Conduit;
    pub const POLISHEDGRANITESTAIRS: MaterialEnum = MaterialEnum::PolishedGraniteStairs;
    pub const SMOOTHREDSANDSTONESTAIRS: MaterialEnum = MaterialEnum::SmoothRedSandstoneStairs;
    pub const MOSSYSTONEBRICKSTAIRS: MaterialEnum = MaterialEnum::MossyStoneBrickStairs;
    pub const POLISHEDDIORITESTAIRS: MaterialEnum = MaterialEnum::PolishedDioriteStairs;
    pub const MOSSYCOBBLESTONESTAIRS: MaterialEnum = MaterialEnum::MossyCobblestoneStairs;
    pub const ENDSTONEBRICKSTAIRS: MaterialEnum = MaterialEnum::EndStoneBrickStairs;
    pub const STONESTAIRS: MaterialEnum = MaterialEnum::StoneStairs;
    pub const SMOOTHSANDSTONESTAIRS: MaterialEnum = MaterialEnum::SmoothSandstoneStairs;
    pub const SMOOTHQUARTZSTAIRS: MaterialEnum = MaterialEnum::SmoothQuartzStairs;
    pub const GRANITESTAIRS: MaterialEnum = MaterialEnum::GraniteStairs;
    pub const ANDESITESTAIRS: MaterialEnum = MaterialEnum::AndesiteStairs;
    pub const REDNETHERBRICKSTAIRS: MaterialEnum = MaterialEnum::RedNetherBrickStairs;
    pub const POLISHEDANDESITESTAIRS: MaterialEnum = MaterialEnum::PolishedAndesiteStairs;
    pub const DIORITESTAIRS: MaterialEnum = MaterialEnum::DioriteStairs;
    pub const COBBLEDDEEPSLATESTAIRS: MaterialEnum = MaterialEnum::CobbledDeepslateStairs;
    pub const POLISHEDDEEPSLATESTAIRS: MaterialEnum = MaterialEnum::PolishedDeepslateStairs;
    pub const DEEPSLATEBRICKSTAIRS: MaterialEnum = MaterialEnum::DeepslateBrickStairs;
    pub const DEEPSLATETILESTAIRS: MaterialEnum = MaterialEnum::DeepslateTileStairs;
    pub const POLISHEDGRANITESLAB: MaterialEnum = MaterialEnum::PolishedGraniteSlab;
    pub const SMOOTHREDSANDSTONESLAB: MaterialEnum = MaterialEnum::SmoothRedSandstoneSlab;
    pub const MOSSYSTONEBRICKSLAB: MaterialEnum = MaterialEnum::MossyStoneBrickSlab;
    pub const POLISHEDDIORITESLAB: MaterialEnum = MaterialEnum::PolishedDioriteSlab;
    pub const MOSSYCOBBLESTONESLAB: MaterialEnum = MaterialEnum::MossyCobblestoneSlab;
    pub const ENDSTONEBRICKSLAB: MaterialEnum = MaterialEnum::EndStoneBrickSlab;
    pub const SMOOTHSANDSTONESLAB: MaterialEnum = MaterialEnum::SmoothSandstoneSlab;
    pub const SMOOTHQUARTZSLAB: MaterialEnum = MaterialEnum::SmoothQuartzSlab;
    pub const GRANITESLAB: MaterialEnum = MaterialEnum::GraniteSlab;
    pub const ANDESITESLAB: MaterialEnum = MaterialEnum::AndesiteSlab;
    pub const REDNETHERBRICKSLAB: MaterialEnum = MaterialEnum::RedNetherBrickSlab;
    pub const POLISHEDANDESITESLAB: MaterialEnum = MaterialEnum::PolishedAndesiteSlab;
    pub const DIORITESLAB: MaterialEnum = MaterialEnum::DioriteSlab;
    pub const COBBLEDDEEPSLATESLAB: MaterialEnum = MaterialEnum::CobbledDeepslateSlab;
    pub const POLISHEDDEEPSLATESLAB: MaterialEnum = MaterialEnum::PolishedDeepslateSlab;
    pub const DEEPSLATEBRICKSLAB: MaterialEnum = MaterialEnum::DeepslateBrickSlab;
    pub const DEEPSLATETILESLAB: MaterialEnum = MaterialEnum::DeepslateTileSlab;
    pub const SCAFFOLDING: MaterialEnum = MaterialEnum::Scaffolding;
    pub const REDSTONE: MaterialEnum = MaterialEnum::Redstone;
    pub const REDSTONETORCH: MaterialEnum = MaterialEnum::RedstoneTorch;
    pub const REDSTONEBLOCK: MaterialEnum = MaterialEnum::RedstoneBlock;
    pub const REPEATER: MaterialEnum = MaterialEnum::Repeater;
    pub const COMPARATOR: MaterialEnum = MaterialEnum::Comparator;
    pub const PISTON: MaterialEnum = MaterialEnum::Piston;
    pub const STICKYPISTON: MaterialEnum = MaterialEnum::StickyPiston;
    pub const SLIMEBLOCK: MaterialEnum = MaterialEnum::SlimeBlock;
    pub const HONEYBLOCK: MaterialEnum = MaterialEnum::HoneyBlock;
    pub const OBSERVER: MaterialEnum = MaterialEnum::Observer;
    pub const HOPPER: MaterialEnum = MaterialEnum::Hopper;
    pub const DISPENSER: MaterialEnum = MaterialEnum::Dispenser;
    pub const DROPPER: MaterialEnum = MaterialEnum::Dropper;
    pub const LECTERN: MaterialEnum = MaterialEnum::Lectern;
    pub const TARGET: MaterialEnum = MaterialEnum::Target;
    pub const LEVER: MaterialEnum = MaterialEnum::Lever;
    pub const LIGHTNINGROD: MaterialEnum = MaterialEnum::LightningRod;
    pub const DAYLIGHTDETECTOR: MaterialEnum = MaterialEnum::DaylightDetector;
    pub const SCULKSENSOR: MaterialEnum = MaterialEnum::SculkSensor;
    pub const CALIBRATEDSCULKSENSOR: MaterialEnum = MaterialEnum::CalibratedSculkSensor;
    pub const TRIPWIREHOOK: MaterialEnum = MaterialEnum::TripwireHook;
    pub const TRAPPEDCHEST: MaterialEnum = MaterialEnum::TrappedChest;
    pub const TNT: MaterialEnum = MaterialEnum::Tnt;
    pub const REDSTONELAMP: MaterialEnum = MaterialEnum::RedstoneLamp;
    pub const NOTEBLOCK: MaterialEnum = MaterialEnum::NoteBlock;
    pub const STONEBUTTON: MaterialEnum = MaterialEnum::StoneButton;
    pub const POLISHEDBLACKSTONEBUTTON: MaterialEnum = MaterialEnum::PolishedBlackstoneButton;
    pub const OAKBUTTON: MaterialEnum = MaterialEnum::OakButton;
    pub const SPRUCEBUTTON: MaterialEnum = MaterialEnum::SpruceButton;
    pub const BIRCHBUTTON: MaterialEnum = MaterialEnum::BirchButton;
    pub const JUNGLEBUTTON: MaterialEnum = MaterialEnum::JungleButton;
    pub const ACACIABUTTON: MaterialEnum = MaterialEnum::AcaciaButton;
    pub const CHERRYBUTTON: MaterialEnum = MaterialEnum::CherryButton;
    pub const DARKOAKBUTTON: MaterialEnum = MaterialEnum::DarkOakButton;
    pub const MANGROVEBUTTON: MaterialEnum = MaterialEnum::MangroveButton;
    pub const BAMBOOBUTTON: MaterialEnum = MaterialEnum::BambooButton;
    pub const CRIMSONBUTTON: MaterialEnum = MaterialEnum::CrimsonButton;
    pub const WARPEDBUTTON: MaterialEnum = MaterialEnum::WarpedButton;
    pub const STONEPRESSUREPLATE: MaterialEnum = MaterialEnum::StonePressurePlate;
    pub const POLISHEDBLACKSTONEPRESSUREPLATE: MaterialEnum =
        MaterialEnum::PolishedBlackstonePressurePlate;
    pub const LIGHTWEIGHTEDPRESSUREPLATE: MaterialEnum = MaterialEnum::LightWeightedPressurePlate;
    pub const HEAVYWEIGHTEDPRESSUREPLATE: MaterialEnum = MaterialEnum::HeavyWeightedPressurePlate;
    pub const OAKPRESSUREPLATE: MaterialEnum = MaterialEnum::OakPressurePlate;
    pub const SPRUCEPRESSUREPLATE: MaterialEnum = MaterialEnum::SprucePressurePlate;
    pub const BIRCHPRESSUREPLATE: MaterialEnum = MaterialEnum::BirchPressurePlate;
    pub const JUNGLEPRESSUREPLATE: MaterialEnum = MaterialEnum::JunglePressurePlate;
    pub const ACACIAPRESSUREPLATE: MaterialEnum = MaterialEnum::AcaciaPressurePlate;
    pub const CHERRYPRESSUREPLATE: MaterialEnum = MaterialEnum::CherryPressurePlate;
    pub const DARKOAKPRESSUREPLATE: MaterialEnum = MaterialEnum::DarkOakPressurePlate;
    pub const MANGROVEPRESSUREPLATE: MaterialEnum = MaterialEnum::MangrovePressurePlate;
    pub const BAMBOOPRESSUREPLATE: MaterialEnum = MaterialEnum::BambooPressurePlate;
    pub const CRIMSONPRESSUREPLATE: MaterialEnum = MaterialEnum::CrimsonPressurePlate;
    pub const WARPEDPRESSUREPLATE: MaterialEnum = MaterialEnum::WarpedPressurePlate;
    pub const IRONDOOR: MaterialEnum = MaterialEnum::IronDoor;
    pub const OAKDOOR: MaterialEnum = MaterialEnum::OakDoor;
    pub const SPRUCEDOOR: MaterialEnum = MaterialEnum::SpruceDoor;
    pub const BIRCHDOOR: MaterialEnum = MaterialEnum::BirchDoor;
    pub const JUNGLEDOOR: MaterialEnum = MaterialEnum::JungleDoor;
    pub const ACACIADOOR: MaterialEnum = MaterialEnum::AcaciaDoor;
    pub const CHERRYDOOR: MaterialEnum = MaterialEnum::CherryDoor;
    pub const DARKOAKDOOR: MaterialEnum = MaterialEnum::DarkOakDoor;
    pub const MANGROVEDOOR: MaterialEnum = MaterialEnum::MangroveDoor;
    pub const BAMBOODOOR: MaterialEnum = MaterialEnum::BambooDoor;
    pub const CRIMSONDOOR: MaterialEnum = MaterialEnum::CrimsonDoor;
    pub const WARPEDDOOR: MaterialEnum = MaterialEnum::WarpedDoor;
    pub const IRONTRAPDOOR: MaterialEnum = MaterialEnum::IronTrapdoor;
    pub const OAKTRAPDOOR: MaterialEnum = MaterialEnum::OakTrapdoor;
    pub const SPRUCETRAPDOOR: MaterialEnum = MaterialEnum::SpruceTrapdoor;
    pub const BIRCHTRAPDOOR: MaterialEnum = MaterialEnum::BirchTrapdoor;
    pub const JUNGLETRAPDOOR: MaterialEnum = MaterialEnum::JungleTrapdoor;
    pub const ACACIATRAPDOOR: MaterialEnum = MaterialEnum::AcaciaTrapdoor;
    pub const CHERRYTRAPDOOR: MaterialEnum = MaterialEnum::CherryTrapdoor;
    pub const DARKOAKTRAPDOOR: MaterialEnum = MaterialEnum::DarkOakTrapdoor;
    pub const MANGROVETRAPDOOR: MaterialEnum = MaterialEnum::MangroveTrapdoor;
    pub const BAMBOOTRAPDOOR: MaterialEnum = MaterialEnum::BambooTrapdoor;
    pub const CRIMSONTRAPDOOR: MaterialEnum = MaterialEnum::CrimsonTrapdoor;
    pub const WARPEDTRAPDOOR: MaterialEnum = MaterialEnum::WarpedTrapdoor;
    pub const OAKFENCEGATE: MaterialEnum = MaterialEnum::OakFenceGate;
    pub const SPRUCEFENCEGATE: MaterialEnum = MaterialEnum::SpruceFenceGate;
    pub const BIRCHFENCEGATE: MaterialEnum = MaterialEnum::BirchFenceGate;
    pub const JUNGLEFENCEGATE: MaterialEnum = MaterialEnum::JungleFenceGate;
    pub const ACACIAFENCEGATE: MaterialEnum = MaterialEnum::AcaciaFenceGate;
    pub const CHERRYFENCEGATE: MaterialEnum = MaterialEnum::CherryFenceGate;
    pub const DARKOAKFENCEGATE: MaterialEnum = MaterialEnum::DarkOakFenceGate;
    pub const MANGROVEFENCEGATE: MaterialEnum = MaterialEnum::MangroveFenceGate;
    pub const BAMBOOFENCEGATE: MaterialEnum = MaterialEnum::BambooFenceGate;
    pub const CRIMSONFENCEGATE: MaterialEnum = MaterialEnum::CrimsonFenceGate;
    pub const WARPEDFENCEGATE: MaterialEnum = MaterialEnum::WarpedFenceGate;
    pub const POWEREDRAIL: MaterialEnum = MaterialEnum::PoweredRail;
    pub const DETECTORRAIL: MaterialEnum = MaterialEnum::DetectorRail;
    pub const RAIL: MaterialEnum = MaterialEnum::Rail;
    pub const ACTIVATORRAIL: MaterialEnum = MaterialEnum::ActivatorRail;
    pub const SADDLE: MaterialEnum = MaterialEnum::Saddle;
    pub const MINECART: MaterialEnum = MaterialEnum::Minecart;
    pub const CHESTMINECART: MaterialEnum = MaterialEnum::ChestMinecart;
    pub const FURNACEMINECART: MaterialEnum = MaterialEnum::FurnaceMinecart;
    pub const TNTMINECART: MaterialEnum = MaterialEnum::TntMinecart;
    pub const HOPPERMINECART: MaterialEnum = MaterialEnum::HopperMinecart;
    pub const CARROTONASTICK: MaterialEnum = MaterialEnum::CarrotOnAStick;
    pub const WARPEDFUNGUSONASTICK: MaterialEnum = MaterialEnum::WarpedFungusOnAStick;
    pub const ELYTRA: MaterialEnum = MaterialEnum::Elytra;
    pub const OAKBOAT: MaterialEnum = MaterialEnum::OakBoat;
    pub const OAKCHESTBOAT: MaterialEnum = MaterialEnum::OakChestBoat;
    pub const SPRUCEBOAT: MaterialEnum = MaterialEnum::SpruceBoat;
    pub const SPRUCECHESTBOAT: MaterialEnum = MaterialEnum::SpruceChestBoat;
    pub const BIRCHBOAT: MaterialEnum = MaterialEnum::BirchBoat;
    pub const BIRCHCHESTBOAT: MaterialEnum = MaterialEnum::BirchChestBoat;
    pub const JUNGLEBOAT: MaterialEnum = MaterialEnum::JungleBoat;
    pub const JUNGLECHESTBOAT: MaterialEnum = MaterialEnum::JungleChestBoat;
    pub const ACACIABOAT: MaterialEnum = MaterialEnum::AcaciaBoat;
    pub const ACACIACHESTBOAT: MaterialEnum = MaterialEnum::AcaciaChestBoat;
    pub const CHERRYBOAT: MaterialEnum = MaterialEnum::CherryBoat;
    pub const CHERRYCHESTBOAT: MaterialEnum = MaterialEnum::CherryChestBoat;
    pub const DARKOAKBOAT: MaterialEnum = MaterialEnum::DarkOakBoat;
    pub const DARKOAKCHESTBOAT: MaterialEnum = MaterialEnum::DarkOakChestBoat;
    pub const MANGROVEBOAT: MaterialEnum = MaterialEnum::MangroveBoat;
    pub const MANGROVECHESTBOAT: MaterialEnum = MaterialEnum::MangroveChestBoat;
    pub const BAMBOORAFT: MaterialEnum = MaterialEnum::BambooRaft;
    pub const BAMBOOCHESTRAFT: MaterialEnum = MaterialEnum::BambooChestRaft;
    pub const STRUCTUREBLOCK: MaterialEnum = MaterialEnum::StructureBlock;
    pub const JIGSAW: MaterialEnum = MaterialEnum::Jigsaw;
    pub const TURTLEHELMET: MaterialEnum = MaterialEnum::TurtleHelmet;
    pub const SCUTE: MaterialEnum = MaterialEnum::Scute;
    pub const FLINTANDSTEEL: MaterialEnum = MaterialEnum::FlintAndSteel;
    pub const APPLE: MaterialEnum = MaterialEnum::Apple;
    pub const BOW: MaterialEnum = MaterialEnum::Bow;
    pub const ARROW: MaterialEnum = MaterialEnum::Arrow;
    pub const COAL: MaterialEnum = MaterialEnum::Coal;
    pub const CHARCOAL: MaterialEnum = MaterialEnum::Charcoal;
    pub const DIAMOND: MaterialEnum = MaterialEnum::Diamond;
    pub const EMERALD: MaterialEnum = MaterialEnum::Emerald;
    pub const LAPISLAZULI: MaterialEnum = MaterialEnum::LapisLazuli;
    pub const QUARTZ: MaterialEnum = MaterialEnum::Quartz;
    pub const AMETHYSTSHARD: MaterialEnum = MaterialEnum::AmethystShard;
    pub const RAWIRON: MaterialEnum = MaterialEnum::RawIron;
    pub const IRONINGOT: MaterialEnum = MaterialEnum::IronIngot;
    pub const RAWCOPPER: MaterialEnum = MaterialEnum::RawCopper;
    pub const COPPERINGOT: MaterialEnum = MaterialEnum::CopperIngot;
    pub const RAWGOLD: MaterialEnum = MaterialEnum::RawGold;
    pub const GOLDINGOT: MaterialEnum = MaterialEnum::GoldIngot;
    pub const NETHERITEINGOT: MaterialEnum = MaterialEnum::NetheriteIngot;
    pub const NETHERITESCRAP: MaterialEnum = MaterialEnum::NetheriteScrap;
    pub const WOODENSWORD: MaterialEnum = MaterialEnum::WoodenSword;
    pub const WOODENSHOVEL: MaterialEnum = MaterialEnum::WoodenShovel;
    pub const WOODENPICKAXE: MaterialEnum = MaterialEnum::WoodenPickaxe;
    pub const WOODENAXE: MaterialEnum = MaterialEnum::WoodenAxe;
    pub const WOODENHOE: MaterialEnum = MaterialEnum::WoodenHoe;
    pub const STONESWORD: MaterialEnum = MaterialEnum::StoneSword;
    pub const STONESHOVEL: MaterialEnum = MaterialEnum::StoneShovel;
    pub const STONEPICKAXE: MaterialEnum = MaterialEnum::StonePickaxe;
    pub const STONEAXE: MaterialEnum = MaterialEnum::StoneAxe;
    pub const STONEHOE: MaterialEnum = MaterialEnum::StoneHoe;
    pub const GOLDENSWORD: MaterialEnum = MaterialEnum::GoldenSword;
    pub const GOLDENSHOVEL: MaterialEnum = MaterialEnum::GoldenShovel;
    pub const GOLDENPICKAXE: MaterialEnum = MaterialEnum::GoldenPickaxe;
    pub const GOLDENAXE: MaterialEnum = MaterialEnum::GoldenAxe;
    pub const GOLDENHOE: MaterialEnum = MaterialEnum::GoldenHoe;
    pub const IRONSWORD: MaterialEnum = MaterialEnum::IronSword;
    pub const IRONSHOVEL: MaterialEnum = MaterialEnum::IronShovel;
    pub const IRONPICKAXE: MaterialEnum = MaterialEnum::IronPickaxe;
    pub const IRONAXE: MaterialEnum = MaterialEnum::IronAxe;
    pub const IRONHOE: MaterialEnum = MaterialEnum::IronHoe;
    pub const DIAMONDSWORD: MaterialEnum = MaterialEnum::DiamondSword;
    pub const DIAMONDSHOVEL: MaterialEnum = MaterialEnum::DiamondShovel;
    pub const DIAMONDPICKAXE: MaterialEnum = MaterialEnum::DiamondPickaxe;
    pub const DIAMONDAXE: MaterialEnum = MaterialEnum::DiamondAxe;
    pub const DIAMONDHOE: MaterialEnum = MaterialEnum::DiamondHoe;
    pub const NETHERITESWORD: MaterialEnum = MaterialEnum::NetheriteSword;
    pub const NETHERITESHOVEL: MaterialEnum = MaterialEnum::NetheriteShovel;
    pub const NETHERITEPICKAXE: MaterialEnum = MaterialEnum::NetheritePickaxe;
    pub const NETHERITEAXE: MaterialEnum = MaterialEnum::NetheriteAxe;
    pub const NETHERITEHOE: MaterialEnum = MaterialEnum::NetheriteHoe;
    pub const STICK: MaterialEnum = MaterialEnum::Stick;
    pub const BOWL: MaterialEnum = MaterialEnum::Bowl;
    pub const MUSHROOMSTEW: MaterialEnum = MaterialEnum::MushroomStew;
    pub const STRING: MaterialEnum = MaterialEnum::String;
    pub const FEATHER: MaterialEnum = MaterialEnum::Feather;
    pub const GUNPOWDER: MaterialEnum = MaterialEnum::Gunpowder;
    pub const WHEATSEEDS: MaterialEnum = MaterialEnum::WheatSeeds;
    pub const WHEAT: MaterialEnum = MaterialEnum::Wheat;
    pub const BREAD: MaterialEnum = MaterialEnum::Bread;
    pub const LEATHERHELMET: MaterialEnum = MaterialEnum::LeatherHelmet;
    pub const LEATHERCHESTPLATE: MaterialEnum = MaterialEnum::LeatherChestplate;
    pub const LEATHERLEGGINGS: MaterialEnum = MaterialEnum::LeatherLeggings;
    pub const LEATHERBOOTS: MaterialEnum = MaterialEnum::LeatherBoots;
    pub const CHAINMAILHELMET: MaterialEnum = MaterialEnum::ChainmailHelmet;
    pub const CHAINMAILCHESTPLATE: MaterialEnum = MaterialEnum::ChainmailChestplate;
    pub const CHAINMAILLEGGINGS: MaterialEnum = MaterialEnum::ChainmailLeggings;
    pub const CHAINMAILBOOTS: MaterialEnum = MaterialEnum::ChainmailBoots;
    pub const IRONHELMET: MaterialEnum = MaterialEnum::IronHelmet;
    pub const IRONCHESTPLATE: MaterialEnum = MaterialEnum::IronChestplate;
    pub const IRONLEGGINGS: MaterialEnum = MaterialEnum::IronLeggings;
    pub const IRONBOOTS: MaterialEnum = MaterialEnum::IronBoots;
    pub const DIAMONDHELMET: MaterialEnum = MaterialEnum::DiamondHelmet;
    pub const DIAMONDCHESTPLATE: MaterialEnum = MaterialEnum::DiamondChestplate;
    pub const DIAMONDLEGGINGS: MaterialEnum = MaterialEnum::DiamondLeggings;
    pub const DIAMONDBOOTS: MaterialEnum = MaterialEnum::DiamondBoots;
    pub const GOLDENHELMET: MaterialEnum = MaterialEnum::GoldenHelmet;
    pub const GOLDENCHESTPLATE: MaterialEnum = MaterialEnum::GoldenChestplate;
    pub const GOLDENLEGGINGS: MaterialEnum = MaterialEnum::GoldenLeggings;
    pub const GOLDENBOOTS: MaterialEnum = MaterialEnum::GoldenBoots;
    pub const NETHERITEHELMET: MaterialEnum = MaterialEnum::NetheriteHelmet;
    pub const NETHERITECHESTPLATE: MaterialEnum = MaterialEnum::NetheriteChestplate;
    pub const NETHERITELEGGINGS: MaterialEnum = MaterialEnum::NetheriteLeggings;
    pub const NETHERITEBOOTS: MaterialEnum = MaterialEnum::NetheriteBoots;
    pub const FLINT: MaterialEnum = MaterialEnum::Flint;
    pub const PORKCHOP: MaterialEnum = MaterialEnum::Porkchop;
    pub const COOKEDPORKCHOP: MaterialEnum = MaterialEnum::CookedPorkchop;
    pub const PAINTING: MaterialEnum = MaterialEnum::Painting;
    pub const GOLDENAPPLE: MaterialEnum = MaterialEnum::GoldenApple;
    pub const ENCHANTEDGOLDENAPPLE: MaterialEnum = MaterialEnum::EnchantedGoldenApple;
    pub const OAKSIGN: MaterialEnum = MaterialEnum::OakSign;
    pub const SPRUCESIGN: MaterialEnum = MaterialEnum::SpruceSign;
    pub const BIRCHSIGN: MaterialEnum = MaterialEnum::BirchSign;
    pub const JUNGLESIGN: MaterialEnum = MaterialEnum::JungleSign;
    pub const ACACIASIGN: MaterialEnum = MaterialEnum::AcaciaSign;
    pub const CHERRYSIGN: MaterialEnum = MaterialEnum::CherrySign;
    pub const DARKOAKSIGN: MaterialEnum = MaterialEnum::DarkOakSign;
    pub const MANGROVESIGN: MaterialEnum = MaterialEnum::MangroveSign;
    pub const BAMBOOSIGN: MaterialEnum = MaterialEnum::BambooSign;
    pub const CRIMSONSIGN: MaterialEnum = MaterialEnum::CrimsonSign;
    pub const WARPEDSIGN: MaterialEnum = MaterialEnum::WarpedSign;
    pub const OAKHANGINGSIGN: MaterialEnum = MaterialEnum::OakHangingSign;
    pub const SPRUCEHANGINGSIGN: MaterialEnum = MaterialEnum::SpruceHangingSign;
    pub const BIRCHHANGINGSIGN: MaterialEnum = MaterialEnum::BirchHangingSign;
    pub const JUNGLEHANGINGSIGN: MaterialEnum = MaterialEnum::JungleHangingSign;
    pub const ACACIAHANGINGSIGN: MaterialEnum = MaterialEnum::AcaciaHangingSign;
    pub const CHERRYHANGINGSIGN: MaterialEnum = MaterialEnum::CherryHangingSign;
    pub const DARKOAKHANGINGSIGN: MaterialEnum = MaterialEnum::DarkOakHangingSign;
    pub const MANGROVEHANGINGSIGN: MaterialEnum = MaterialEnum::MangroveHangingSign;
    pub const BAMBOOHANGINGSIGN: MaterialEnum = MaterialEnum::BambooHangingSign;
    pub const CRIMSONHANGINGSIGN: MaterialEnum = MaterialEnum::CrimsonHangingSign;
    pub const WARPEDHANGINGSIGN: MaterialEnum = MaterialEnum::WarpedHangingSign;
    pub const BUCKET: MaterialEnum = MaterialEnum::Bucket;
    pub const WATERBUCKET: MaterialEnum = MaterialEnum::WaterBucket;
    pub const LAVABUCKET: MaterialEnum = MaterialEnum::LavaBucket;
    pub const POWDERSNOWBUCKET: MaterialEnum = MaterialEnum::PowderSnowBucket;
    pub const SNOWBALL: MaterialEnum = MaterialEnum::Snowball;
    pub const LEATHER: MaterialEnum = MaterialEnum::Leather;
    pub const MILKBUCKET: MaterialEnum = MaterialEnum::MilkBucket;
    pub const PUFFERFISHBUCKET: MaterialEnum = MaterialEnum::PufferfishBucket;
    pub const SALMONBUCKET: MaterialEnum = MaterialEnum::SalmonBucket;
    pub const CODBUCKET: MaterialEnum = MaterialEnum::CodBucket;
    pub const TROPICALFISHBUCKET: MaterialEnum = MaterialEnum::TropicalFishBucket;
    pub const AXOLOTLBUCKET: MaterialEnum = MaterialEnum::AxolotlBucket;
    pub const TADPOLEBUCKET: MaterialEnum = MaterialEnum::TadpoleBucket;
    pub const BRICK: MaterialEnum = MaterialEnum::Brick;
    pub const CLAYBALL: MaterialEnum = MaterialEnum::ClayBall;
    pub const DRIEDKELPBLOCK: MaterialEnum = MaterialEnum::DriedKelpBlock;
    pub const PAPER: MaterialEnum = MaterialEnum::Paper;
    pub const BOOK: MaterialEnum = MaterialEnum::Book;
    pub const SLIMEBALL: MaterialEnum = MaterialEnum::SlimeBall;
    pub const EGG: MaterialEnum = MaterialEnum::Egg;
    pub const COMPASS: MaterialEnum = MaterialEnum::Compass;
    pub const RECOVERYCOMPASS: MaterialEnum = MaterialEnum::RecoveryCompass;
    pub const BUNDLE: MaterialEnum = MaterialEnum::Bundle;
    pub const FISHINGROD: MaterialEnum = MaterialEnum::FishingRod;
    pub const CLOCK: MaterialEnum = MaterialEnum::Clock;
    pub const SPYGLASS: MaterialEnum = MaterialEnum::Spyglass;
    pub const GLOWSTONEDUST: MaterialEnum = MaterialEnum::GlowstoneDust;
    pub const COD: MaterialEnum = MaterialEnum::Cod;
    pub const SALMON: MaterialEnum = MaterialEnum::Salmon;
    pub const TROPICALFISH: MaterialEnum = MaterialEnum::TropicalFish;
    pub const PUFFERFISH: MaterialEnum = MaterialEnum::Pufferfish;
    pub const COOKEDCOD: MaterialEnum = MaterialEnum::CookedCod;
    pub const COOKEDSALMON: MaterialEnum = MaterialEnum::CookedSalmon;
    pub const INKSAC: MaterialEnum = MaterialEnum::InkSac;
    pub const GLOWINKSAC: MaterialEnum = MaterialEnum::GlowInkSac;
    pub const COCOABEANS: MaterialEnum = MaterialEnum::CocoaBeans;
    pub const WHITEDYE: MaterialEnum = MaterialEnum::WhiteDye;
    pub const ORANGEDYE: MaterialEnum = MaterialEnum::OrangeDye;
    pub const MAGENTADYE: MaterialEnum = MaterialEnum::MagentaDye;
    pub const LIGHTBLUEDYE: MaterialEnum = MaterialEnum::LightBlueDye;
    pub const YELLOWDYE: MaterialEnum = MaterialEnum::YellowDye;
    pub const LIMEDYE: MaterialEnum = MaterialEnum::LimeDye;
    pub const PINKDYE: MaterialEnum = MaterialEnum::PinkDye;
    pub const GRAYDYE: MaterialEnum = MaterialEnum::GrayDye;
    pub const LIGHTGRAYDYE: MaterialEnum = MaterialEnum::LightGrayDye;
    pub const CYANDYE: MaterialEnum = MaterialEnum::CyanDye;
    pub const PURPLEDYE: MaterialEnum = MaterialEnum::PurpleDye;
    pub const BLUEDYE: MaterialEnum = MaterialEnum::BlueDye;
    pub const BROWNDYE: MaterialEnum = MaterialEnum::BrownDye;
    pub const GREENDYE: MaterialEnum = MaterialEnum::GreenDye;
    pub const REDDYE: MaterialEnum = MaterialEnum::RedDye;
    pub const BLACKDYE: MaterialEnum = MaterialEnum::BlackDye;
    pub const BONEMEAL: MaterialEnum = MaterialEnum::BoneMeal;
    pub const BONE: MaterialEnum = MaterialEnum::Bone;
    pub const SUGAR: MaterialEnum = MaterialEnum::Sugar;
    pub const CAKE: MaterialEnum = MaterialEnum::Cake;
    pub const WHITEBED: MaterialEnum = MaterialEnum::WhiteBed;
    pub const ORANGEBED: MaterialEnum = MaterialEnum::OrangeBed;
    pub const MAGENTABED: MaterialEnum = MaterialEnum::MagentaBed;
    pub const LIGHTBLUEBED: MaterialEnum = MaterialEnum::LightBlueBed;
    pub const YELLOWBED: MaterialEnum = MaterialEnum::YellowBed;
    pub const LIMEBED: MaterialEnum = MaterialEnum::LimeBed;
    pub const PINKBED: MaterialEnum = MaterialEnum::PinkBed;
    pub const GRAYBED: MaterialEnum = MaterialEnum::GrayBed;
    pub const LIGHTGRAYBED: MaterialEnum = MaterialEnum::LightGrayBed;
    pub const CYANBED: MaterialEnum = MaterialEnum::CyanBed;
    pub const PURPLEBED: MaterialEnum = MaterialEnum::PurpleBed;
    pub const BLUEBED: MaterialEnum = MaterialEnum::BlueBed;
    pub const BROWNBED: MaterialEnum = MaterialEnum::BrownBed;
    pub const GREENBED: MaterialEnum = MaterialEnum::GreenBed;
    pub const REDBED: MaterialEnum = MaterialEnum::RedBed;
    pub const BLACKBED: MaterialEnum = MaterialEnum::BlackBed;
    pub const COOKIE: MaterialEnum = MaterialEnum::Cookie;
    pub const FILLEDMAP: MaterialEnum = MaterialEnum::FilledMap;
    pub const SHEARS: MaterialEnum = MaterialEnum::Shears;
    pub const MELONSLICE: MaterialEnum = MaterialEnum::MelonSlice;
    pub const DRIEDKELP: MaterialEnum = MaterialEnum::DriedKelp;
    pub const PUMPKINSEEDS: MaterialEnum = MaterialEnum::PumpkinSeeds;
    pub const MELONSEEDS: MaterialEnum = MaterialEnum::MelonSeeds;
    pub const BEEF: MaterialEnum = MaterialEnum::Beef;
    pub const COOKEDBEEF: MaterialEnum = MaterialEnum::CookedBeef;
    pub const CHICKEN: MaterialEnum = MaterialEnum::Chicken;
    pub const COOKEDCHICKEN: MaterialEnum = MaterialEnum::CookedChicken;
    pub const ROTTENFLESH: MaterialEnum = MaterialEnum::RottenFlesh;
    pub const ENDERPEARL: MaterialEnum = MaterialEnum::EnderPearl;
    pub const BLAZEROD: MaterialEnum = MaterialEnum::BlazeRod;
    pub const GHASTTEAR: MaterialEnum = MaterialEnum::GhastTear;
    pub const GOLDNUGGET: MaterialEnum = MaterialEnum::GoldNugget;
    pub const NETHERWART: MaterialEnum = MaterialEnum::NetherWart;
    pub const POTION: MaterialEnum = MaterialEnum::Potion;
    pub const GLASSBOTTLE: MaterialEnum = MaterialEnum::GlassBottle;
    pub const SPIDEREYE: MaterialEnum = MaterialEnum::SpiderEye;
    pub const FERMENTEDSPIDEREYE: MaterialEnum = MaterialEnum::FermentedSpiderEye;
    pub const BLAZEPOWDER: MaterialEnum = MaterialEnum::BlazePowder;
    pub const MAGMACREAM: MaterialEnum = MaterialEnum::MagmaCream;
    pub const BREWINGSTAND: MaterialEnum = MaterialEnum::BrewingStand;
    pub const CAULDRON: MaterialEnum = MaterialEnum::Cauldron;
    pub const ENDEREYE: MaterialEnum = MaterialEnum::EnderEye;
    pub const GLISTERINGMELONSLICE: MaterialEnum = MaterialEnum::GlisteringMelonSlice;
    pub const ALLAYSPAWNEGG: MaterialEnum = MaterialEnum::AllaySpawnEgg;
    pub const AXOLOTLSPAWNEGG: MaterialEnum = MaterialEnum::AxolotlSpawnEgg;
    pub const BATSPAWNEGG: MaterialEnum = MaterialEnum::BatSpawnEgg;
    pub const BEESPAWNEGG: MaterialEnum = MaterialEnum::BeeSpawnEgg;
    pub const BLAZESPAWNEGG: MaterialEnum = MaterialEnum::BlazeSpawnEgg;
    pub const CATSPAWNEGG: MaterialEnum = MaterialEnum::CatSpawnEgg;
    pub const CAMELSPAWNEGG: MaterialEnum = MaterialEnum::CamelSpawnEgg;
    pub const CAVESPIDERSPAWNEGG: MaterialEnum = MaterialEnum::CaveSpiderSpawnEgg;
    pub const CHICKENSPAWNEGG: MaterialEnum = MaterialEnum::ChickenSpawnEgg;
    pub const CODSPAWNEGG: MaterialEnum = MaterialEnum::CodSpawnEgg;
    pub const COWSPAWNEGG: MaterialEnum = MaterialEnum::CowSpawnEgg;
    pub const CREEPERSPAWNEGG: MaterialEnum = MaterialEnum::CreeperSpawnEgg;
    pub const DOLPHINSPAWNEGG: MaterialEnum = MaterialEnum::DolphinSpawnEgg;
    pub const DONKEYSPAWNEGG: MaterialEnum = MaterialEnum::DonkeySpawnEgg;
    pub const DROWNEDSPAWNEGG: MaterialEnum = MaterialEnum::DrownedSpawnEgg;
    pub const ELDERGUARDIANSPAWNEGG: MaterialEnum = MaterialEnum::ElderGuardianSpawnEgg;
    pub const ENDERDRAGONSPAWNEGG: MaterialEnum = MaterialEnum::EnderDragonSpawnEgg;
    pub const ENDERMANSPAWNEGG: MaterialEnum = MaterialEnum::EndermanSpawnEgg;
    pub const ENDERMITESPAWNEGG: MaterialEnum = MaterialEnum::EndermiteSpawnEgg;
    pub const EVOKERSPAWNEGG: MaterialEnum = MaterialEnum::EvokerSpawnEgg;
    pub const FOXSPAWNEGG: MaterialEnum = MaterialEnum::FoxSpawnEgg;
    pub const FROGSPAWNEGG: MaterialEnum = MaterialEnum::FrogSpawnEgg;
    pub const GHASTSPAWNEGG: MaterialEnum = MaterialEnum::GhastSpawnEgg;
    pub const GLOWSQUIDSPAWNEGG: MaterialEnum = MaterialEnum::GlowSquidSpawnEgg;
    pub const GOATSPAWNEGG: MaterialEnum = MaterialEnum::GoatSpawnEgg;
    pub const GUARDIANSPAWNEGG: MaterialEnum = MaterialEnum::GuardianSpawnEgg;
    pub const HOGLINSPAWNEGG: MaterialEnum = MaterialEnum::HoglinSpawnEgg;
    pub const HORSESPAWNEGG: MaterialEnum = MaterialEnum::HorseSpawnEgg;
    pub const HUSKSPAWNEGG: MaterialEnum = MaterialEnum::HuskSpawnEgg;
    pub const IRONGOLEMSPAWNEGG: MaterialEnum = MaterialEnum::IronGolemSpawnEgg;
    pub const LLAMASPAWNEGG: MaterialEnum = MaterialEnum::LlamaSpawnEgg;
    pub const MAGMACUBESPAWNEGG: MaterialEnum = MaterialEnum::MagmaCubeSpawnEgg;
    pub const MOOSHROOMSPAWNEGG: MaterialEnum = MaterialEnum::MooshroomSpawnEgg;
    pub const MULESPAWNEGG: MaterialEnum = MaterialEnum::MuleSpawnEgg;
    pub const OCELOTSPAWNEGG: MaterialEnum = MaterialEnum::OcelotSpawnEgg;
    pub const PANDASPAWNEGG: MaterialEnum = MaterialEnum::PandaSpawnEgg;
    pub const PARROTSPAWNEGG: MaterialEnum = MaterialEnum::ParrotSpawnEgg;
    pub const PHANTOMSPAWNEGG: MaterialEnum = MaterialEnum::PhantomSpawnEgg;
    pub const PIGSPAWNEGG: MaterialEnum = MaterialEnum::PigSpawnEgg;
    pub const PIGLINSPAWNEGG: MaterialEnum = MaterialEnum::PiglinSpawnEgg;
    pub const PIGLINBRUTESPAWNEGG: MaterialEnum = MaterialEnum::PiglinBruteSpawnEgg;
    pub const PILLAGERSPAWNEGG: MaterialEnum = MaterialEnum::PillagerSpawnEgg;
    pub const POLARBEARSPAWNEGG: MaterialEnum = MaterialEnum::PolarBearSpawnEgg;
    pub const PUFFERFISHSPAWNEGG: MaterialEnum = MaterialEnum::PufferfishSpawnEgg;
    pub const RABBITSPAWNEGG: MaterialEnum = MaterialEnum::RabbitSpawnEgg;
    pub const RAVAGERSPAWNEGG: MaterialEnum = MaterialEnum::RavagerSpawnEgg;
    pub const SALMONSPAWNEGG: MaterialEnum = MaterialEnum::SalmonSpawnEgg;
    pub const SHEEPSPAWNEGG: MaterialEnum = MaterialEnum::SheepSpawnEgg;
    pub const SHULKERSPAWNEGG: MaterialEnum = MaterialEnum::ShulkerSpawnEgg;
    pub const SILVERFISHSPAWNEGG: MaterialEnum = MaterialEnum::SilverfishSpawnEgg;
    pub const SKELETONSPAWNEGG: MaterialEnum = MaterialEnum::SkeletonSpawnEgg;
    pub const SKELETONHORSESPAWNEGG: MaterialEnum = MaterialEnum::SkeletonHorseSpawnEgg;
    pub const SLIMESPAWNEGG: MaterialEnum = MaterialEnum::SlimeSpawnEgg;
    pub const SNIFFERSPAWNEGG: MaterialEnum = MaterialEnum::SnifferSpawnEgg;
    pub const SNOWGOLEMSPAWNEGG: MaterialEnum = MaterialEnum::SnowGolemSpawnEgg;
    pub const SPIDERSPAWNEGG: MaterialEnum = MaterialEnum::SpiderSpawnEgg;
    pub const SQUIDSPAWNEGG: MaterialEnum = MaterialEnum::SquidSpawnEgg;
    pub const STRAYSPAWNEGG: MaterialEnum = MaterialEnum::StraySpawnEgg;
    pub const STRIDERSPAWNEGG: MaterialEnum = MaterialEnum::StriderSpawnEgg;
    pub const TADPOLESPAWNEGG: MaterialEnum = MaterialEnum::TadpoleSpawnEgg;
    pub const TRADERLLAMASPAWNEGG: MaterialEnum = MaterialEnum::TraderLlamaSpawnEgg;
    pub const TROPICALFISHSPAWNEGG: MaterialEnum = MaterialEnum::TropicalFishSpawnEgg;
    pub const TURTLESPAWNEGG: MaterialEnum = MaterialEnum::TurtleSpawnEgg;
    pub const VEXSPAWNEGG: MaterialEnum = MaterialEnum::VexSpawnEgg;
    pub const VILLAGERSPAWNEGG: MaterialEnum = MaterialEnum::VillagerSpawnEgg;
    pub const VINDICATORSPAWNEGG: MaterialEnum = MaterialEnum::VindicatorSpawnEgg;
    pub const WANDERINGTRADERSPAWNEGG: MaterialEnum = MaterialEnum::WanderingTraderSpawnEgg;
    pub const WARDENSPAWNEGG: MaterialEnum = MaterialEnum::WardenSpawnEgg;
    pub const WITCHSPAWNEGG: MaterialEnum = MaterialEnum::WitchSpawnEgg;
    pub const WITHERSPAWNEGG: MaterialEnum = MaterialEnum::WitherSpawnEgg;
    pub const WITHERSKELETONSPAWNEGG: MaterialEnum = MaterialEnum::WitherSkeletonSpawnEgg;
    pub const WOLFSPAWNEGG: MaterialEnum = MaterialEnum::WolfSpawnEgg;
    pub const ZOGLINSPAWNEGG: MaterialEnum = MaterialEnum::ZoglinSpawnEgg;
    pub const ZOMBIESPAWNEGG: MaterialEnum = MaterialEnum::ZombieSpawnEgg;
    pub const ZOMBIEHORSESPAWNEGG: MaterialEnum = MaterialEnum::ZombieHorseSpawnEgg;
    pub const ZOMBIEVILLAGERSPAWNEGG: MaterialEnum = MaterialEnum::ZombieVillagerSpawnEgg;
    pub const ZOMBIFIEDPIGLINSPAWNEGG: MaterialEnum = MaterialEnum::ZombifiedPiglinSpawnEgg;
    pub const EXPERIENCEBOTTLE: MaterialEnum = MaterialEnum::ExperienceBottle;
    pub const FIRECHARGE: MaterialEnum = MaterialEnum::FireCharge;
    pub const WRITABLEBOOK: MaterialEnum = MaterialEnum::WritableBook;
    pub const WRITTENBOOK: MaterialEnum = MaterialEnum::WrittenBook;
    pub const ITEMFRAME: MaterialEnum = MaterialEnum::ItemFrame;
    pub const GLOWITEMFRAME: MaterialEnum = MaterialEnum::GlowItemFrame;
    pub const FLOWERPOT: MaterialEnum = MaterialEnum::FlowerPot;
    pub const CARROT: MaterialEnum = MaterialEnum::Carrot;
    pub const POTATO: MaterialEnum = MaterialEnum::Potato;
    pub const BAKEDPOTATO: MaterialEnum = MaterialEnum::BakedPotato;
    pub const POISONOUSPOTATO: MaterialEnum = MaterialEnum::PoisonousPotato;
    pub const MAP: MaterialEnum = MaterialEnum::Map;
    pub const GOLDENCARROT: MaterialEnum = MaterialEnum::GoldenCarrot;
    pub const SKELETONSKULL: MaterialEnum = MaterialEnum::SkeletonSkull;
    pub const WITHERSKELETONSKULL: MaterialEnum = MaterialEnum::WitherSkeletonSkull;
    pub const PLAYERHEAD: MaterialEnum = MaterialEnum::PlayerHead;
    pub const ZOMBIEHEAD: MaterialEnum = MaterialEnum::ZombieHead;
    pub const CREEPERHEAD: MaterialEnum = MaterialEnum::CreeperHead;
    pub const DRAGONHEAD: MaterialEnum = MaterialEnum::DragonHead;
    pub const PIGLINHEAD: MaterialEnum = MaterialEnum::PiglinHead;
    pub const NETHERSTAR: MaterialEnum = MaterialEnum::NetherStar;
    pub const PUMPKINPIE: MaterialEnum = MaterialEnum::PumpkinPie;
    pub const FIREWORKROCKET: MaterialEnum = MaterialEnum::FireworkRocket;
    pub const FIREWORKSTAR: MaterialEnum = MaterialEnum::FireworkStar;
    pub const ENCHANTEDBOOK: MaterialEnum = MaterialEnum::EnchantedBook;
    pub const NETHERBRICK: MaterialEnum = MaterialEnum::NetherBrick;
    pub const PRISMARINESHARD: MaterialEnum = MaterialEnum::PrismarineShard;
    pub const PRISMARINECRYSTALS: MaterialEnum = MaterialEnum::PrismarineCrystals;
    pub const RABBIT: MaterialEnum = MaterialEnum::Rabbit;
    pub const COOKEDRABBIT: MaterialEnum = MaterialEnum::CookedRabbit;
    pub const RABBITSTEW: MaterialEnum = MaterialEnum::RabbitStew;
    pub const RABBITFOOT: MaterialEnum = MaterialEnum::RabbitFoot;
    pub const RABBITHIDE: MaterialEnum = MaterialEnum::RabbitHide;
    pub const ARMORSTAND: MaterialEnum = MaterialEnum::ArmorStand;
    pub const IRONHORSEARMOR: MaterialEnum = MaterialEnum::IronHorseArmor;
    pub const GOLDENHORSEARMOR: MaterialEnum = MaterialEnum::GoldenHorseArmor;
    pub const DIAMONDHORSEARMOR: MaterialEnum = MaterialEnum::DiamondHorseArmor;
    pub const LEATHERHORSEARMOR: MaterialEnum = MaterialEnum::LeatherHorseArmor;
    pub const LEAD: MaterialEnum = MaterialEnum::Lead;
    pub const NAMETAG: MaterialEnum = MaterialEnum::NameTag;
    pub const COMMANDBLOCKMINECART: MaterialEnum = MaterialEnum::CommandBlockMinecart;
    pub const MUTTON: MaterialEnum = MaterialEnum::Mutton;
    pub const COOKEDMUTTON: MaterialEnum = MaterialEnum::CookedMutton;
    pub const WHITEBANNER: MaterialEnum = MaterialEnum::WhiteBanner;
    pub const ORANGEBANNER: MaterialEnum = MaterialEnum::OrangeBanner;
    pub const MAGENTABANNER: MaterialEnum = MaterialEnum::MagentaBanner;
    pub const LIGHTBLUEBANNER: MaterialEnum = MaterialEnum::LightBlueBanner;
    pub const YELLOWBANNER: MaterialEnum = MaterialEnum::YellowBanner;
    pub const LIMEBANNER: MaterialEnum = MaterialEnum::LimeBanner;
    pub const PINKBANNER: MaterialEnum = MaterialEnum::PinkBanner;
    pub const GRAYBANNER: MaterialEnum = MaterialEnum::GrayBanner;
    pub const LIGHTGRAYBANNER: MaterialEnum = MaterialEnum::LightGrayBanner;
    pub const CYANBANNER: MaterialEnum = MaterialEnum::CyanBanner;
    pub const PURPLEBANNER: MaterialEnum = MaterialEnum::PurpleBanner;
    pub const BLUEBANNER: MaterialEnum = MaterialEnum::BlueBanner;
    pub const BROWNBANNER: MaterialEnum = MaterialEnum::BrownBanner;
    pub const GREENBANNER: MaterialEnum = MaterialEnum::GreenBanner;
    pub const REDBANNER: MaterialEnum = MaterialEnum::RedBanner;
    pub const BLACKBANNER: MaterialEnum = MaterialEnum::BlackBanner;
    pub const ENDCRYSTAL: MaterialEnum = MaterialEnum::EndCrystal;
    pub const CHORUSFRUIT: MaterialEnum = MaterialEnum::ChorusFruit;
    pub const POPPEDCHORUSFRUIT: MaterialEnum = MaterialEnum::PoppedChorusFruit;
    pub const TORCHFLOWERSEEDS: MaterialEnum = MaterialEnum::TorchflowerSeeds;
    pub const PITCHERPOD: MaterialEnum = MaterialEnum::PitcherPod;
    pub const BEETROOT: MaterialEnum = MaterialEnum::Beetroot;
    pub const BEETROOTSEEDS: MaterialEnum = MaterialEnum::BeetrootSeeds;
    pub const BEETROOTSOUP: MaterialEnum = MaterialEnum::BeetrootSoup;
    pub const DRAGONBREATH: MaterialEnum = MaterialEnum::DragonBreath;
    pub const SPLASHPOTION: MaterialEnum = MaterialEnum::SplashPotion;
    pub const SPECTRALARROW: MaterialEnum = MaterialEnum::SpectralArrow;
    pub const TIPPEDARROW: MaterialEnum = MaterialEnum::TippedArrow;
    pub const LINGERINGPOTION: MaterialEnum = MaterialEnum::LingeringPotion;
    pub const SHIELD: MaterialEnum = MaterialEnum::Shield;
    pub const TOTEMOFUNDYING: MaterialEnum = MaterialEnum::TotemOfUndying;
    pub const SHULKERSHELL: MaterialEnum = MaterialEnum::ShulkerShell;
    pub const IRONNUGGET: MaterialEnum = MaterialEnum::IronNugget;
    pub const KNOWLEDGEBOOK: MaterialEnum = MaterialEnum::KnowledgeBook;
    pub const DEBUGSTICK: MaterialEnum = MaterialEnum::DebugStick;
    pub const MUSICDISC13: MaterialEnum = MaterialEnum::MusicDisc13;
    pub const MUSICDISCCAT: MaterialEnum = MaterialEnum::MusicDiscCat;
    pub const MUSICDISCBLOCKS: MaterialEnum = MaterialEnum::MusicDiscBlocks;
    pub const MUSICDISCCHIRP: MaterialEnum = MaterialEnum::MusicDiscChirp;
    pub const MUSICDISCFAR: MaterialEnum = MaterialEnum::MusicDiscFar;
    pub const MUSICDISCMALL: MaterialEnum = MaterialEnum::MusicDiscMall;
    pub const MUSICDISCMELLOHI: MaterialEnum = MaterialEnum::MusicDiscMellohi;
    pub const MUSICDISCSTAL: MaterialEnum = MaterialEnum::MusicDiscStal;
    pub const MUSICDISCSTRAD: MaterialEnum = MaterialEnum::MusicDiscStrad;
    pub const MUSICDISCWARD: MaterialEnum = MaterialEnum::MusicDiscWard;
    pub const MUSICDISC11: MaterialEnum = MaterialEnum::MusicDisc11;
    pub const MUSICDISCWAIT: MaterialEnum = MaterialEnum::MusicDiscWait;
    pub const MUSICDISCOTHERSIDE: MaterialEnum = MaterialEnum::MusicDiscOtherside;
    pub const MUSICDISCRELIC: MaterialEnum = MaterialEnum::MusicDiscRelic;
    pub const MUSICDISC5: MaterialEnum = MaterialEnum::MusicDisc5;
    pub const MUSICDISCPIGSTEP: MaterialEnum = MaterialEnum::MusicDiscPigstep;
    pub const DISCFRAGMENT5: MaterialEnum = MaterialEnum::DiscFragment5;
    pub const TRIDENT: MaterialEnum = MaterialEnum::Trident;
    pub const PHANTOMMEMBRANE: MaterialEnum = MaterialEnum::PhantomMembrane;
    pub const NAUTILUSSHELL: MaterialEnum = MaterialEnum::NautilusShell;
    pub const HEARTOFTHESEA: MaterialEnum = MaterialEnum::HeartOfTheSea;
    pub const CROSSBOW: MaterialEnum = MaterialEnum::Crossbow;
    pub const SUSPICIOUSSTEW: MaterialEnum = MaterialEnum::SuspiciousStew;
    pub const LOOM: MaterialEnum = MaterialEnum::Loom;
    pub const FLOWERBANNERPATTERN: MaterialEnum = MaterialEnum::FlowerBannerPattern;
    pub const CREEPERBANNERPATTERN: MaterialEnum = MaterialEnum::CreeperBannerPattern;
    pub const SKULLBANNERPATTERN: MaterialEnum = MaterialEnum::SkullBannerPattern;
    pub const MOJANGBANNERPATTERN: MaterialEnum = MaterialEnum::MojangBannerPattern;
    pub const GLOBEBANNERPATTERN: MaterialEnum = MaterialEnum::GlobeBannerPattern;
    pub const PIGLINBANNERPATTERN: MaterialEnum = MaterialEnum::PiglinBannerPattern;
    pub const GOATHORN: MaterialEnum = MaterialEnum::GoatHorn;
    pub const COMPOSTER: MaterialEnum = MaterialEnum::Composter;
    pub const BARREL: MaterialEnum = MaterialEnum::Barrel;
    pub const SMOKER: MaterialEnum = MaterialEnum::Smoker;
    pub const BLASTFURNACE: MaterialEnum = MaterialEnum::BlastFurnace;
    pub const CARTOGRAPHYTABLE: MaterialEnum = MaterialEnum::CartographyTable;
    pub const FLETCHINGTABLE: MaterialEnum = MaterialEnum::FletchingTable;
    pub const GRINDSTONE: MaterialEnum = MaterialEnum::Grindstone;
    pub const SMITHINGTABLE: MaterialEnum = MaterialEnum::SmithingTable;
    pub const STONECUTTER: MaterialEnum = MaterialEnum::Stonecutter;
    pub const BELL: MaterialEnum = MaterialEnum::Bell;
    pub const LANTERN: MaterialEnum = MaterialEnum::Lantern;
    pub const SOULLANTERN: MaterialEnum = MaterialEnum::SoulLantern;
    pub const SWEETBERRIES: MaterialEnum = MaterialEnum::SweetBerries;
    pub const GLOWBERRIES: MaterialEnum = MaterialEnum::GlowBerries;
    pub const CAMPFIRE: MaterialEnum = MaterialEnum::Campfire;
    pub const SOULCAMPFIRE: MaterialEnum = MaterialEnum::SoulCampfire;
    pub const SHROOMLIGHT: MaterialEnum = MaterialEnum::Shroomlight;
    pub const HONEYCOMB: MaterialEnum = MaterialEnum::Honeycomb;
    pub const BEENEST: MaterialEnum = MaterialEnum::BeeNest;
    pub const BEEHIVE: MaterialEnum = MaterialEnum::Beehive;
    pub const HONEYBOTTLE: MaterialEnum = MaterialEnum::HoneyBottle;
    pub const HONEYCOMBBLOCK: MaterialEnum = MaterialEnum::HoneycombBlock;
    pub const LODESTONE: MaterialEnum = MaterialEnum::Lodestone;
    pub const CRYINGOBSIDIAN: MaterialEnum = MaterialEnum::CryingObsidian;
    pub const BLACKSTONE: MaterialEnum = MaterialEnum::Blackstone;
    pub const BLACKSTONESLAB: MaterialEnum = MaterialEnum::BlackstoneSlab;
    pub const BLACKSTONESTAIRS: MaterialEnum = MaterialEnum::BlackstoneStairs;
    pub const GILDEDBLACKSTONE: MaterialEnum = MaterialEnum::GildedBlackstone;
    pub const POLISHEDBLACKSTONE: MaterialEnum = MaterialEnum::PolishedBlackstone;
    pub const POLISHEDBLACKSTONESLAB: MaterialEnum = MaterialEnum::PolishedBlackstoneSlab;
    pub const POLISHEDBLACKSTONESTAIRS: MaterialEnum = MaterialEnum::PolishedBlackstoneStairs;
    pub const CHISELEDPOLISHEDBLACKSTONE: MaterialEnum = MaterialEnum::ChiseledPolishedBlackstone;
    pub const POLISHEDBLACKSTONEBRICKS: MaterialEnum = MaterialEnum::PolishedBlackstoneBricks;
    pub const POLISHEDBLACKSTONEBRICKSLAB: MaterialEnum = MaterialEnum::PolishedBlackstoneBrickSlab;
    pub const POLISHEDBLACKSTONEBRICKSTAIRS: MaterialEnum =
        MaterialEnum::PolishedBlackstoneBrickStairs;
    pub const CRACKEDPOLISHEDBLACKSTONEBRICKS: MaterialEnum =
        MaterialEnum::CrackedPolishedBlackstoneBricks;
    pub const RESPAWNANCHOR: MaterialEnum = MaterialEnum::RespawnAnchor;
    pub const CANDLE: MaterialEnum = MaterialEnum::Candle;
    pub const WHITECANDLE: MaterialEnum = MaterialEnum::WhiteCandle;
    pub const ORANGECANDLE: MaterialEnum = MaterialEnum::OrangeCandle;
    pub const MAGENTACANDLE: MaterialEnum = MaterialEnum::MagentaCandle;
    pub const LIGHTBLUECANDLE: MaterialEnum = MaterialEnum::LightBlueCandle;
    pub const YELLOWCANDLE: MaterialEnum = MaterialEnum::YellowCandle;
    pub const LIMECANDLE: MaterialEnum = MaterialEnum::LimeCandle;
    pub const PINKCANDLE: MaterialEnum = MaterialEnum::PinkCandle;
    pub const GRAYCANDLE: MaterialEnum = MaterialEnum::GrayCandle;
    pub const LIGHTGRAYCANDLE: MaterialEnum = MaterialEnum::LightGrayCandle;
    pub const CYANCANDLE: MaterialEnum = MaterialEnum::CyanCandle;
    pub const PURPLECANDLE: MaterialEnum = MaterialEnum::PurpleCandle;
    pub const BLUECANDLE: MaterialEnum = MaterialEnum::BlueCandle;
    pub const BROWNCANDLE: MaterialEnum = MaterialEnum::BrownCandle;
    pub const GREENCANDLE: MaterialEnum = MaterialEnum::GreenCandle;
    pub const REDCANDLE: MaterialEnum = MaterialEnum::RedCandle;
    pub const BLACKCANDLE: MaterialEnum = MaterialEnum::BlackCandle;
    pub const SMALLAMETHYSTBUD: MaterialEnum = MaterialEnum::SmallAmethystBud;
    pub const MEDIUMAMETHYSTBUD: MaterialEnum = MaterialEnum::MediumAmethystBud;
    pub const LARGEAMETHYSTBUD: MaterialEnum = MaterialEnum::LargeAmethystBud;
    pub const AMETHYSTCLUSTER: MaterialEnum = MaterialEnum::AmethystCluster;
    pub const POINTEDDRIPSTONE: MaterialEnum = MaterialEnum::PointedDripstone;
    pub const OCHREFROGLIGHT: MaterialEnum = MaterialEnum::OchreFroglight;
    pub const VERDANTFROGLIGHT: MaterialEnum = MaterialEnum::VerdantFroglight;
    pub const PEARLESCENTFROGLIGHT: MaterialEnum = MaterialEnum::PearlescentFroglight;
    pub const FROGSPAWN: MaterialEnum = MaterialEnum::Frogspawn;
    pub const ECHOSHARD: MaterialEnum = MaterialEnum::EchoShard;
    pub const BRUSH: MaterialEnum = MaterialEnum::Brush;
    pub const NETHERITEUPGRADESMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::NetheriteUpgradeSmithingTemplate;
    pub const SENTRYARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::SentryArmorTrimSmithingTemplate;
    pub const DUNEARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::DuneArmorTrimSmithingTemplate;
    pub const COASTARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::CoastArmorTrimSmithingTemplate;
    pub const WILDARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::WildArmorTrimSmithingTemplate;
    pub const WARDARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::WardArmorTrimSmithingTemplate;
    pub const EYEARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::EyeArmorTrimSmithingTemplate;
    pub const VEXARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::VexArmorTrimSmithingTemplate;
    pub const TIDEARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::TideArmorTrimSmithingTemplate;
    pub const SNOUTARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::SnoutArmorTrimSmithingTemplate;
    pub const RIBARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::RibArmorTrimSmithingTemplate;
    pub const SPIREARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::SpireArmorTrimSmithingTemplate;
    pub const WAYFINDERARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::WayfinderArmorTrimSmithingTemplate;
    pub const SHAPERARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::ShaperArmorTrimSmithingTemplate;
    pub const SILENCEARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::SilenceArmorTrimSmithingTemplate;
    pub const RAISERARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::RaiserArmorTrimSmithingTemplate;
    pub const HOSTARMORTRIMSMITHINGTEMPLATE: MaterialEnum =
        MaterialEnum::HostArmorTrimSmithingTemplate;
    pub const ANGLERPOTTERYSHERD: MaterialEnum = MaterialEnum::AnglerPotterySherd;
    pub const ARCHERPOTTERYSHERD: MaterialEnum = MaterialEnum::ArcherPotterySherd;
    pub const ARMSUPPOTTERYSHERD: MaterialEnum = MaterialEnum::ArmsUpPotterySherd;
    pub const BLADEPOTTERYSHERD: MaterialEnum = MaterialEnum::BladePotterySherd;
    pub const BREWERPOTTERYSHERD: MaterialEnum = MaterialEnum::BrewerPotterySherd;
    pub const BURNPOTTERYSHERD: MaterialEnum = MaterialEnum::BurnPotterySherd;
    pub const DANGERPOTTERYSHERD: MaterialEnum = MaterialEnum::DangerPotterySherd;
    pub const EXPLORERPOTTERYSHERD: MaterialEnum = MaterialEnum::ExplorerPotterySherd;
    pub const FRIENDPOTTERYSHERD: MaterialEnum = MaterialEnum::FriendPotterySherd;
    pub const HEARTPOTTERYSHERD: MaterialEnum = MaterialEnum::HeartPotterySherd;
    pub const HEARTBREAKPOTTERYSHERD: MaterialEnum = MaterialEnum::HeartbreakPotterySherd;
    pub const HOWLPOTTERYSHERD: MaterialEnum = MaterialEnum::HowlPotterySherd;
    pub const MINERPOTTERYSHERD: MaterialEnum = MaterialEnum::MinerPotterySherd;
    pub const MOURNERPOTTERYSHERD: MaterialEnum = MaterialEnum::MournerPotterySherd;
    pub const PLENTYPOTTERYSHERD: MaterialEnum = MaterialEnum::PlentyPotterySherd;
    pub const PRIZEPOTTERYSHERD: MaterialEnum = MaterialEnum::PrizePotterySherd;
    pub const SHEAFPOTTERYSHERD: MaterialEnum = MaterialEnum::SheafPotterySherd;
    pub const SHELTERPOTTERYSHERD: MaterialEnum = MaterialEnum::ShelterPotterySherd;
    pub const SKULLPOTTERYSHERD: MaterialEnum = MaterialEnum::SkullPotterySherd;
    pub const SNORTPOTTERYSHERD: MaterialEnum = MaterialEnum::SnortPotterySherd;
    pub const WATER: MaterialEnum = MaterialEnum::Water;
    pub const LAVA: MaterialEnum = MaterialEnum::Lava;
    pub const TALLSEAGRASS: MaterialEnum = MaterialEnum::TallSeagrass;
    pub const PISTONHEAD: MaterialEnum = MaterialEnum::PistonHead;
    pub const MOVINGPISTON: MaterialEnum = MaterialEnum::MovingPiston;
    pub const WALLTORCH: MaterialEnum = MaterialEnum::WallTorch;
    pub const FIRE: MaterialEnum = MaterialEnum::Fire;
    pub const SOULFIRE: MaterialEnum = MaterialEnum::SoulFire;
    pub const REDSTONEWIRE: MaterialEnum = MaterialEnum::RedstoneWire;
    pub const OAKWALLSIGN: MaterialEnum = MaterialEnum::OakWallSign;
    pub const SPRUCEWALLSIGN: MaterialEnum = MaterialEnum::SpruceWallSign;
    pub const BIRCHWALLSIGN: MaterialEnum = MaterialEnum::BirchWallSign;
    pub const ACACIAWALLSIGN: MaterialEnum = MaterialEnum::AcaciaWallSign;
    pub const CHERRYWALLSIGN: MaterialEnum = MaterialEnum::CherryWallSign;
    pub const JUNGLEWALLSIGN: MaterialEnum = MaterialEnum::JungleWallSign;
    pub const DARKOAKWALLSIGN: MaterialEnum = MaterialEnum::DarkOakWallSign;
    pub const MANGROVEWALLSIGN: MaterialEnum = MaterialEnum::MangroveWallSign;
    pub const BAMBOOWALLSIGN: MaterialEnum = MaterialEnum::BambooWallSign;
    pub const OAKWALLHANGINGSIGN: MaterialEnum = MaterialEnum::OakWallHangingSign;
    pub const SPRUCEWALLHANGINGSIGN: MaterialEnum = MaterialEnum::SpruceWallHangingSign;
    pub const BIRCHWALLHANGINGSIGN: MaterialEnum = MaterialEnum::BirchWallHangingSign;
    pub const ACACIAWALLHANGINGSIGN: MaterialEnum = MaterialEnum::AcaciaWallHangingSign;
    pub const CHERRYWALLHANGINGSIGN: MaterialEnum = MaterialEnum::CherryWallHangingSign;
    pub const JUNGLEWALLHANGINGSIGN: MaterialEnum = MaterialEnum::JungleWallHangingSign;
    pub const DARKOAKWALLHANGINGSIGN: MaterialEnum = MaterialEnum::DarkOakWallHangingSign;
    pub const MANGROVEWALLHANGINGSIGN: MaterialEnum = MaterialEnum::MangroveWallHangingSign;
    pub const CRIMSONWALLHANGINGSIGN: MaterialEnum = MaterialEnum::CrimsonWallHangingSign;
    pub const WARPEDWALLHANGINGSIGN: MaterialEnum = MaterialEnum::WarpedWallHangingSign;
    pub const BAMBOOWALLHANGINGSIGN: MaterialEnum = MaterialEnum::BambooWallHangingSign;
    pub const REDSTONEWALLTORCH: MaterialEnum = MaterialEnum::RedstoneWallTorch;
    pub const SOULWALLTORCH: MaterialEnum = MaterialEnum::SoulWallTorch;
    pub const NETHERPORTAL: MaterialEnum = MaterialEnum::NetherPortal;
    pub const ATTACHEDPUMPKINSTEM: MaterialEnum = MaterialEnum::AttachedPumpkinStem;
    pub const ATTACHEDMELONSTEM: MaterialEnum = MaterialEnum::AttachedMelonStem;
    pub const PUMPKINSTEM: MaterialEnum = MaterialEnum::PumpkinStem;
    pub const MELONSTEM: MaterialEnum = MaterialEnum::MelonStem;
    pub const WATERCAULDRON: MaterialEnum = MaterialEnum::WaterCauldron;
    pub const LAVACAULDRON: MaterialEnum = MaterialEnum::LavaCauldron;
    pub const POWDERSNOWCAULDRON: MaterialEnum = MaterialEnum::PowderSnowCauldron;
    pub const ENDPORTAL: MaterialEnum = MaterialEnum::EndPortal;
    pub const COCOA: MaterialEnum = MaterialEnum::Cocoa;
    pub const TRIPWIRE: MaterialEnum = MaterialEnum::Tripwire;
    pub const POTTEDTORCHFLOWER: MaterialEnum = MaterialEnum::PottedTorchflower;
    pub const POTTEDOAKSAPLING: MaterialEnum = MaterialEnum::PottedOakSapling;
    pub const POTTEDSPRUCESAPLING: MaterialEnum = MaterialEnum::PottedSpruceSapling;
    pub const POTTEDBIRCHSAPLING: MaterialEnum = MaterialEnum::PottedBirchSapling;
    pub const POTTEDJUNGLESAPLING: MaterialEnum = MaterialEnum::PottedJungleSapling;
    pub const POTTEDACACIASAPLING: MaterialEnum = MaterialEnum::PottedAcaciaSapling;
    pub const POTTEDCHERRYSAPLING: MaterialEnum = MaterialEnum::PottedCherrySapling;
    pub const POTTEDDARKOAKSAPLING: MaterialEnum = MaterialEnum::PottedDarkOakSapling;
    pub const POTTEDMANGROVEPROPAGULE: MaterialEnum = MaterialEnum::PottedMangrovePropagule;
    pub const POTTEDFERN: MaterialEnum = MaterialEnum::PottedFern;
    pub const POTTEDDANDELION: MaterialEnum = MaterialEnum::PottedDandelion;
    pub const POTTEDPOPPY: MaterialEnum = MaterialEnum::PottedPoppy;
    pub const POTTEDBLUEORCHID: MaterialEnum = MaterialEnum::PottedBlueOrchid;
    pub const POTTEDALLIUM: MaterialEnum = MaterialEnum::PottedAllium;
    pub const POTTEDAZUREBLUET: MaterialEnum = MaterialEnum::PottedAzureBluet;
    pub const POTTEDREDTULIP: MaterialEnum = MaterialEnum::PottedRedTulip;
    pub const POTTEDORANGETULIP: MaterialEnum = MaterialEnum::PottedOrangeTulip;
    pub const POTTEDWHITETULIP: MaterialEnum = MaterialEnum::PottedWhiteTulip;
    pub const POTTEDPINKTULIP: MaterialEnum = MaterialEnum::PottedPinkTulip;
    pub const POTTEDOXEYEDAISY: MaterialEnum = MaterialEnum::PottedOxeyeDaisy;
    pub const POTTEDCORNFLOWER: MaterialEnum = MaterialEnum::PottedCornflower;
    pub const POTTEDLILYOFTHEVALLEY: MaterialEnum = MaterialEnum::PottedLilyOfTheValley;
    pub const POTTEDWITHERROSE: MaterialEnum = MaterialEnum::PottedWitherRose;
    pub const POTTEDREDMUSHROOM: MaterialEnum = MaterialEnum::PottedRedMushroom;
    pub const POTTEDBROWNMUSHROOM: MaterialEnum = MaterialEnum::PottedBrownMushroom;
    pub const POTTEDDEADBUSH: MaterialEnum = MaterialEnum::PottedDeadBush;
    pub const POTTEDCACTUS: MaterialEnum = MaterialEnum::PottedCactus;
    pub const CARROTS: MaterialEnum = MaterialEnum::Carrots;
    pub const POTATOES: MaterialEnum = MaterialEnum::Potatoes;
    pub const SKELETONWALLSKULL: MaterialEnum = MaterialEnum::SkeletonWallSkull;
    pub const WITHERSKELETONWALLSKULL: MaterialEnum = MaterialEnum::WitherSkeletonWallSkull;
    pub const ZOMBIEWALLHEAD: MaterialEnum = MaterialEnum::ZombieWallHead;
    pub const PLAYERWALLHEAD: MaterialEnum = MaterialEnum::PlayerWallHead;
    pub const CREEPERWALLHEAD: MaterialEnum = MaterialEnum::CreeperWallHead;
    pub const DRAGONWALLHEAD: MaterialEnum = MaterialEnum::DragonWallHead;
    pub const PIGLINWALLHEAD: MaterialEnum = MaterialEnum::PiglinWallHead;
    pub const WHITEWALLBANNER: MaterialEnum = MaterialEnum::WhiteWallBanner;
    pub const ORANGEWALLBANNER: MaterialEnum = MaterialEnum::OrangeWallBanner;
    pub const MAGENTAWALLBANNER: MaterialEnum = MaterialEnum::MagentaWallBanner;
    pub const LIGHTBLUEWALLBANNER: MaterialEnum = MaterialEnum::LightBlueWallBanner;
    pub const YELLOWWALLBANNER: MaterialEnum = MaterialEnum::YellowWallBanner;
    pub const LIMEWALLBANNER: MaterialEnum = MaterialEnum::LimeWallBanner;
    pub const PINKWALLBANNER: MaterialEnum = MaterialEnum::PinkWallBanner;
    pub const GRAYWALLBANNER: MaterialEnum = MaterialEnum::GrayWallBanner;
    pub const LIGHTGRAYWALLBANNER: MaterialEnum = MaterialEnum::LightGrayWallBanner;
    pub const CYANWALLBANNER: MaterialEnum = MaterialEnum::CyanWallBanner;
    pub const PURPLEWALLBANNER: MaterialEnum = MaterialEnum::PurpleWallBanner;
    pub const BLUEWALLBANNER: MaterialEnum = MaterialEnum::BlueWallBanner;
    pub const BROWNWALLBANNER: MaterialEnum = MaterialEnum::BrownWallBanner;
    pub const GREENWALLBANNER: MaterialEnum = MaterialEnum::GreenWallBanner;
    pub const REDWALLBANNER: MaterialEnum = MaterialEnum::RedWallBanner;
    pub const BLACKWALLBANNER: MaterialEnum = MaterialEnum::BlackWallBanner;
    pub const TORCHFLOWERCROP: MaterialEnum = MaterialEnum::TorchflowerCrop;
    pub const PITCHERCROP: MaterialEnum = MaterialEnum::PitcherCrop;
    pub const BEETROOTS: MaterialEnum = MaterialEnum::Beetroots;
    pub const ENDGATEWAY: MaterialEnum = MaterialEnum::EndGateway;
    pub const FROSTEDICE: MaterialEnum = MaterialEnum::FrostedIce;
    pub const KELPPLANT: MaterialEnum = MaterialEnum::KelpPlant;
    pub const DEADTUBECORALWALLFAN: MaterialEnum = MaterialEnum::DeadTubeCoralWallFan;
    pub const DEADBRAINCORALWALLFAN: MaterialEnum = MaterialEnum::DeadBrainCoralWallFan;
    pub const DEADBUBBLECORALWALLFAN: MaterialEnum = MaterialEnum::DeadBubbleCoralWallFan;
    pub const DEADFIRECORALWALLFAN: MaterialEnum = MaterialEnum::DeadFireCoralWallFan;
    pub const DEADHORNCORALWALLFAN: MaterialEnum = MaterialEnum::DeadHornCoralWallFan;
    pub const TUBECORALWALLFAN: MaterialEnum = MaterialEnum::TubeCoralWallFan;
    pub const BRAINCORALWALLFAN: MaterialEnum = MaterialEnum::BrainCoralWallFan;
    pub const BUBBLECORALWALLFAN: MaterialEnum = MaterialEnum::BubbleCoralWallFan;
    pub const FIRECORALWALLFAN: MaterialEnum = MaterialEnum::FireCoralWallFan;
    pub const HORNCORALWALLFAN: MaterialEnum = MaterialEnum::HornCoralWallFan;
    pub const BAMBOOSAPLING: MaterialEnum = MaterialEnum::BambooSapling;
    pub const POTTEDBAMBOO: MaterialEnum = MaterialEnum::PottedBamboo;
    pub const VOIDAIR: MaterialEnum = MaterialEnum::VoidAir;
    pub const CAVEAIR: MaterialEnum = MaterialEnum::CaveAir;
    pub const BUBBLECOLUMN: MaterialEnum = MaterialEnum::BubbleColumn;
    pub const SWEETBERRYBUSH: MaterialEnum = MaterialEnum::SweetBerryBush;
    pub const WEEPINGVINESPLANT: MaterialEnum = MaterialEnum::WeepingVinesPlant;
    pub const TWISTINGVINESPLANT: MaterialEnum = MaterialEnum::TwistingVinesPlant;
    pub const CRIMSONWALLSIGN: MaterialEnum = MaterialEnum::CrimsonWallSign;
    pub const WARPEDWALLSIGN: MaterialEnum = MaterialEnum::WarpedWallSign;
    pub const POTTEDCRIMSONFUNGUS: MaterialEnum = MaterialEnum::PottedCrimsonFungus;
    pub const POTTEDWARPEDFUNGUS: MaterialEnum = MaterialEnum::PottedWarpedFungus;
    pub const POTTEDCRIMSONROOTS: MaterialEnum = MaterialEnum::PottedCrimsonRoots;
    pub const POTTEDWARPEDROOTS: MaterialEnum = MaterialEnum::PottedWarpedRoots;
    pub const CANDLECAKE: MaterialEnum = MaterialEnum::CandleCake;
    pub const WHITECANDLECAKE: MaterialEnum = MaterialEnum::WhiteCandleCake;
    pub const ORANGECANDLECAKE: MaterialEnum = MaterialEnum::OrangeCandleCake;
    pub const MAGENTACANDLECAKE: MaterialEnum = MaterialEnum::MagentaCandleCake;
    pub const LIGHTBLUECANDLECAKE: MaterialEnum = MaterialEnum::LightBlueCandleCake;
    pub const YELLOWCANDLECAKE: MaterialEnum = MaterialEnum::YellowCandleCake;
    pub const LIMECANDLECAKE: MaterialEnum = MaterialEnum::LimeCandleCake;
    pub const PINKCANDLECAKE: MaterialEnum = MaterialEnum::PinkCandleCake;
    pub const GRAYCANDLECAKE: MaterialEnum = MaterialEnum::GrayCandleCake;
    pub const LIGHTGRAYCANDLECAKE: MaterialEnum = MaterialEnum::LightGrayCandleCake;
    pub const CYANCANDLECAKE: MaterialEnum = MaterialEnum::CyanCandleCake;
    pub const PURPLECANDLECAKE: MaterialEnum = MaterialEnum::PurpleCandleCake;
    pub const BLUECANDLECAKE: MaterialEnum = MaterialEnum::BlueCandleCake;
    pub const BROWNCANDLECAKE: MaterialEnum = MaterialEnum::BrownCandleCake;
    pub const GREENCANDLECAKE: MaterialEnum = MaterialEnum::GreenCandleCake;
    pub const REDCANDLECAKE: MaterialEnum = MaterialEnum::RedCandleCake;
    pub const BLACKCANDLECAKE: MaterialEnum = MaterialEnum::BlackCandleCake;
    pub const POWDERSNOW: MaterialEnum = MaterialEnum::PowderSnow;
    pub const CAVEVINES: MaterialEnum = MaterialEnum::CaveVines;
    pub const CAVEVINESPLANT: MaterialEnum = MaterialEnum::CaveVinesPlant;
    pub const BIGDRIPLEAFSTEM: MaterialEnum = MaterialEnum::BigDripleafStem;
    pub const POTTEDAZALEABUSH: MaterialEnum = MaterialEnum::PottedAzaleaBush;
    pub const POTTEDFLOWERINGAZALEABUSH: MaterialEnum = MaterialEnum::PottedFloweringAzaleaBush;
    pub const LEGACYAIR: MaterialEnum = MaterialEnum::LegacyAir;
    pub const LEGACYSTONE: MaterialEnum = MaterialEnum::LegacyStone;
    pub const LEGACYGRASS: MaterialEnum = MaterialEnum::LegacyGrass;
    pub const LEGACYDIRT: MaterialEnum = MaterialEnum::LegacyDirt;
    pub const LEGACYCOBBLESTONE: MaterialEnum = MaterialEnum::LegacyCobblestone;
    pub const LEGACYWOOD: MaterialEnum = MaterialEnum::LegacyWood;
    pub const LEGACYSAPLING: MaterialEnum = MaterialEnum::LegacySapling;
    pub const LEGACYBEDROCK: MaterialEnum = MaterialEnum::LegacyBedrock;
    pub const LEGACYWATER: MaterialEnum = MaterialEnum::LegacyWater;
    pub const LEGACYSTATIONARYWATER: MaterialEnum = MaterialEnum::LegacyStationaryWater;
    pub const LEGACYLAVA: MaterialEnum = MaterialEnum::LegacyLava;
    pub const LEGACYSTATIONARYLAVA: MaterialEnum = MaterialEnum::LegacyStationaryLava;
    pub const LEGACYSAND: MaterialEnum = MaterialEnum::LegacySand;
    pub const LEGACYGRAVEL: MaterialEnum = MaterialEnum::LegacyGravel;
    pub const LEGACYGOLDORE: MaterialEnum = MaterialEnum::LegacyGoldOre;
    pub const LEGACYIRONORE: MaterialEnum = MaterialEnum::LegacyIronOre;
    pub const LEGACYCOALORE: MaterialEnum = MaterialEnum::LegacyCoalOre;
    pub const LEGACYLOG: MaterialEnum = MaterialEnum::LegacyLog;
    pub const LEGACYLEAVES: MaterialEnum = MaterialEnum::LegacyLeaves;
    pub const LEGACYSPONGE: MaterialEnum = MaterialEnum::LegacySponge;
    pub const LEGACYGLASS: MaterialEnum = MaterialEnum::LegacyGlass;
    pub const LEGACYLAPISORE: MaterialEnum = MaterialEnum::LegacyLapisOre;
    pub const LEGACYLAPISBLOCK: MaterialEnum = MaterialEnum::LegacyLapisBlock;
    pub const LEGACYDISPENSER: MaterialEnum = MaterialEnum::LegacyDispenser;
    pub const LEGACYSANDSTONE: MaterialEnum = MaterialEnum::LegacySandstone;
    pub const LEGACYNOTEBLOCK: MaterialEnum = MaterialEnum::LegacyNoteBlock;
    pub const LEGACYBEDBLOCK: MaterialEnum = MaterialEnum::LegacyBedBlock;
    pub const LEGACYPOWEREDRAIL: MaterialEnum = MaterialEnum::LegacyPoweredRail;
    pub const LEGACYDETECTORRAIL: MaterialEnum = MaterialEnum::LegacyDetectorRail;
    pub const LEGACYPISTONSTICKYBASE: MaterialEnum = MaterialEnum::LegacyPistonStickyBase;
    pub const LEGACYWEB: MaterialEnum = MaterialEnum::LegacyWeb;
    pub const LEGACYLONGGRASS: MaterialEnum = MaterialEnum::LegacyLongGrass;
    pub const LEGACYDEADBUSH: MaterialEnum = MaterialEnum::LegacyDeadBush;
    pub const LEGACYPISTONBASE: MaterialEnum = MaterialEnum::LegacyPistonBase;
    pub const LEGACYPISTONEXTENSION: MaterialEnum = MaterialEnum::LegacyPistonExtension;
    pub const LEGACYWOOL: MaterialEnum = MaterialEnum::LegacyWool;
    pub const LEGACYPISTONMOVINGPIECE: MaterialEnum = MaterialEnum::LegacyPistonMovingPiece;
    pub const LEGACYYELLOWFLOWER: MaterialEnum = MaterialEnum::LegacyYellowFlower;
    pub const LEGACYREDROSE: MaterialEnum = MaterialEnum::LegacyRedRose;
    pub const LEGACYBROWNMUSHROOM: MaterialEnum = MaterialEnum::LegacyBrownMushroom;
    pub const LEGACYREDMUSHROOM: MaterialEnum = MaterialEnum::LegacyRedMushroom;
    pub const LEGACYGOLDBLOCK: MaterialEnum = MaterialEnum::LegacyGoldBlock;
    pub const LEGACYIRONBLOCK: MaterialEnum = MaterialEnum::LegacyIronBlock;
    pub const LEGACYDOUBLESTEP: MaterialEnum = MaterialEnum::LegacyDoubleStep;
    pub const LEGACYSTEP: MaterialEnum = MaterialEnum::LegacyStep;
    pub const LEGACYBRICK: MaterialEnum = MaterialEnum::LegacyBrick;
    pub const LEGACYTNT: MaterialEnum = MaterialEnum::LegacyTnt;
    pub const LEGACYBOOKSHELF: MaterialEnum = MaterialEnum::LegacyBookshelf;
    pub const LEGACYMOSSYCOBBLESTONE: MaterialEnum = MaterialEnum::LegacyMossyCobblestone;
    pub const LEGACYOBSIDIAN: MaterialEnum = MaterialEnum::LegacyObsidian;
    pub const LEGACYTORCH: MaterialEnum = MaterialEnum::LegacyTorch;
    pub const LEGACYFIRE: MaterialEnum = MaterialEnum::LegacyFire;
    pub const LEGACYMOBSPAWNER: MaterialEnum = MaterialEnum::LegacyMobSpawner;
    pub const LEGACYWOODSTAIRS: MaterialEnum = MaterialEnum::LegacyWoodStairs;
    pub const LEGACYCHEST: MaterialEnum = MaterialEnum::LegacyChest;
    pub const LEGACYREDSTONEWIRE: MaterialEnum = MaterialEnum::LegacyRedstoneWire;
    pub const LEGACYDIAMONDORE: MaterialEnum = MaterialEnum::LegacyDiamondOre;
    pub const LEGACYDIAMONDBLOCK: MaterialEnum = MaterialEnum::LegacyDiamondBlock;
    pub const LEGACYWORKBENCH: MaterialEnum = MaterialEnum::LegacyWorkbench;
    pub const LEGACYCROPS: MaterialEnum = MaterialEnum::LegacyCrops;
    pub const LEGACYSOIL: MaterialEnum = MaterialEnum::LegacySoil;
    pub const LEGACYFURNACE: MaterialEnum = MaterialEnum::LegacyFurnace;
    pub const LEGACYBURNINGFURNACE: MaterialEnum = MaterialEnum::LegacyBurningFurnace;
    pub const LEGACYSIGNPOST: MaterialEnum = MaterialEnum::LegacySignPost;
    pub const LEGACYWOODENDOOR: MaterialEnum = MaterialEnum::LegacyWoodenDoor;
    pub const LEGACYLADDER: MaterialEnum = MaterialEnum::LegacyLadder;
    pub const LEGACYRAILS: MaterialEnum = MaterialEnum::LegacyRails;
    pub const LEGACYCOBBLESTONESTAIRS: MaterialEnum = MaterialEnum::LegacyCobblestoneStairs;
    pub const LEGACYWALLSIGN: MaterialEnum = MaterialEnum::LegacyWallSign;
    pub const LEGACYLEVER: MaterialEnum = MaterialEnum::LegacyLever;
    pub const LEGACYSTONEPLATE: MaterialEnum = MaterialEnum::LegacyStonePlate;
    pub const LEGACYIRONDOORBLOCK: MaterialEnum = MaterialEnum::LegacyIronDoorBlock;
    pub const LEGACYWOODPLATE: MaterialEnum = MaterialEnum::LegacyWoodPlate;
    pub const LEGACYREDSTONEORE: MaterialEnum = MaterialEnum::LegacyRedstoneOre;
    pub const LEGACYGLOWINGREDSTONEORE: MaterialEnum = MaterialEnum::LegacyGlowingRedstoneOre;
    pub const LEGACYREDSTONETORCHOFF: MaterialEnum = MaterialEnum::LegacyRedstoneTorchOff;
    pub const LEGACYREDSTONETORCHON: MaterialEnum = MaterialEnum::LegacyRedstoneTorchOn;
    pub const LEGACYSTONEBUTTON: MaterialEnum = MaterialEnum::LegacyStoneButton;
    pub const LEGACYSNOW: MaterialEnum = MaterialEnum::LegacySnow;
    pub const LEGACYICE: MaterialEnum = MaterialEnum::LegacyIce;
    pub const LEGACYSNOWBLOCK: MaterialEnum = MaterialEnum::LegacySnowBlock;
    pub const LEGACYCACTUS: MaterialEnum = MaterialEnum::LegacyCactus;
    pub const LEGACYCLAY: MaterialEnum = MaterialEnum::LegacyClay;
    pub const LEGACYSUGARCANEBLOCK: MaterialEnum = MaterialEnum::LegacySugarCaneBlock;
    pub const LEGACYJUKEBOX: MaterialEnum = MaterialEnum::LegacyJukebox;
    pub const LEGACYFENCE: MaterialEnum = MaterialEnum::LegacyFence;
    pub const LEGACYPUMPKIN: MaterialEnum = MaterialEnum::LegacyPumpkin;
    pub const LEGACYNETHERRACK: MaterialEnum = MaterialEnum::LegacyNetherrack;
    pub const LEGACYSOULSAND: MaterialEnum = MaterialEnum::LegacySoulSand;
    pub const LEGACYGLOWSTONE: MaterialEnum = MaterialEnum::LegacyGlowstone;
    pub const LEGACYPORTAL: MaterialEnum = MaterialEnum::LegacyPortal;
    pub const LEGACYJACKOLANTERN: MaterialEnum = MaterialEnum::LegacyJackOLantern;
    pub const LEGACYCAKEBLOCK: MaterialEnum = MaterialEnum::LegacyCakeBlock;
    pub const LEGACYDIODEBLOCKOFF: MaterialEnum = MaterialEnum::LegacyDiodeBlockOff;
    pub const LEGACYDIODEBLOCKON: MaterialEnum = MaterialEnum::LegacyDiodeBlockOn;
    pub const LEGACYSTAINEDGLASS: MaterialEnum = MaterialEnum::LegacyStainedGlass;
    pub const LEGACYTRAPDOOR: MaterialEnum = MaterialEnum::LegacyTrapDoor;
    pub const LEGACYMONSTEREGGS: MaterialEnum = MaterialEnum::LegacyMonsterEggs;
    pub const LEGACYSMOOTHBRICK: MaterialEnum = MaterialEnum::LegacySmoothBrick;
    pub const LEGACYHUGEMUSHROOM1: MaterialEnum = MaterialEnum::LegacyHugeMushroom1;
    pub const LEGACYHUGEMUSHROOM2: MaterialEnum = MaterialEnum::LegacyHugeMushroom2;
    pub const LEGACYIRONFENCE: MaterialEnum = MaterialEnum::LegacyIronFence;
    pub const LEGACYTHINGLASS: MaterialEnum = MaterialEnum::LegacyThinGlass;
    pub const LEGACYMELONBLOCK: MaterialEnum = MaterialEnum::LegacyMelonBlock;
    pub const LEGACYPUMPKINSTEM: MaterialEnum = MaterialEnum::LegacyPumpkinStem;
    pub const LEGACYMELONSTEM: MaterialEnum = MaterialEnum::LegacyMelonStem;
    pub const LEGACYVINE: MaterialEnum = MaterialEnum::LegacyVine;
    pub const LEGACYFENCEGATE: MaterialEnum = MaterialEnum::LegacyFenceGate;
    pub const LEGACYBRICKSTAIRS: MaterialEnum = MaterialEnum::LegacyBrickStairs;
    pub const LEGACYSMOOTHSTAIRS: MaterialEnum = MaterialEnum::LegacySmoothStairs;
    pub const LEGACYMYCEL: MaterialEnum = MaterialEnum::LegacyMycel;
    pub const LEGACYWATERLILY: MaterialEnum = MaterialEnum::LegacyWaterLily;
    pub const LEGACYNETHERBRICK: MaterialEnum = MaterialEnum::LegacyNetherBrick;
    pub const LEGACYNETHERFENCE: MaterialEnum = MaterialEnum::LegacyNetherFence;
    pub const LEGACYNETHERBRICKSTAIRS: MaterialEnum = MaterialEnum::LegacyNetherBrickStairs;
    pub const LEGACYNETHERWARTS: MaterialEnum = MaterialEnum::LegacyNetherWarts;
    pub const LEGACYENCHANTMENTTABLE: MaterialEnum = MaterialEnum::LegacyEnchantmentTable;
    pub const LEGACYBREWINGSTAND: MaterialEnum = MaterialEnum::LegacyBrewingStand;
    pub const LEGACYCAULDRON: MaterialEnum = MaterialEnum::LegacyCauldron;
    pub const LEGACYENDERPORTAL: MaterialEnum = MaterialEnum::LegacyEnderPortal;
    pub const LEGACYENDERPORTALFRAME: MaterialEnum = MaterialEnum::LegacyEnderPortalFrame;
    pub const LEGACYENDERSTONE: MaterialEnum = MaterialEnum::LegacyEnderStone;
    pub const LEGACYDRAGONEGG: MaterialEnum = MaterialEnum::LegacyDragonEgg;
    pub const LEGACYREDSTONELAMPOFF: MaterialEnum = MaterialEnum::LegacyRedstoneLampOff;
    pub const LEGACYREDSTONELAMPON: MaterialEnum = MaterialEnum::LegacyRedstoneLampOn;
    pub const LEGACYWOODDOUBLESTEP: MaterialEnum = MaterialEnum::LegacyWoodDoubleStep;
    pub const LEGACYWOODSTEP: MaterialEnum = MaterialEnum::LegacyWoodStep;
    pub const LEGACYCOCOA: MaterialEnum = MaterialEnum::LegacyCocoa;
    pub const LEGACYSANDSTONESTAIRS: MaterialEnum = MaterialEnum::LegacySandstoneStairs;
    pub const LEGACYEMERALDORE: MaterialEnum = MaterialEnum::LegacyEmeraldOre;
    pub const LEGACYENDERCHEST: MaterialEnum = MaterialEnum::LegacyEnderChest;
    pub const LEGACYTRIPWIREHOOK: MaterialEnum = MaterialEnum::LegacyTripwireHook;
    pub const LEGACYTRIPWIRE: MaterialEnum = MaterialEnum::LegacyTripwire;
    pub const LEGACYEMERALDBLOCK: MaterialEnum = MaterialEnum::LegacyEmeraldBlock;
    pub const LEGACYSPRUCEWOODSTAIRS: MaterialEnum = MaterialEnum::LegacySpruceWoodStairs;
    pub const LEGACYBIRCHWOODSTAIRS: MaterialEnum = MaterialEnum::LegacyBirchWoodStairs;
    pub const LEGACYJUNGLEWOODSTAIRS: MaterialEnum = MaterialEnum::LegacyJungleWoodStairs;
    pub const LEGACYCOMMAND: MaterialEnum = MaterialEnum::LegacyCommand;
    pub const LEGACYBEACON: MaterialEnum = MaterialEnum::LegacyBeacon;
    pub const LEGACYCOBBLEWALL: MaterialEnum = MaterialEnum::LegacyCobbleWall;
    pub const LEGACYFLOWERPOT: MaterialEnum = MaterialEnum::LegacyFlowerPot;
    pub const LEGACYCARROT: MaterialEnum = MaterialEnum::LegacyCarrot;
    pub const LEGACYPOTATO: MaterialEnum = MaterialEnum::LegacyPotato;
    pub const LEGACYWOODBUTTON: MaterialEnum = MaterialEnum::LegacyWoodButton;
    pub const LEGACYSKULL: MaterialEnum = MaterialEnum::LegacySkull;
    pub const LEGACYANVIL: MaterialEnum = MaterialEnum::LegacyAnvil;
    pub const LEGACYTRAPPEDCHEST: MaterialEnum = MaterialEnum::LegacyTrappedChest;
    pub const LEGACYGOLDPLATE: MaterialEnum = MaterialEnum::LegacyGoldPlate;
    pub const LEGACYIRONPLATE: MaterialEnum = MaterialEnum::LegacyIronPlate;
    pub const LEGACYREDSTONECOMPARATOROFF: MaterialEnum = MaterialEnum::LegacyRedstoneComparatorOff;
    pub const LEGACYREDSTONECOMPARATORON: MaterialEnum = MaterialEnum::LegacyRedstoneComparatorOn;
    pub const LEGACYDAYLIGHTDETECTOR: MaterialEnum = MaterialEnum::LegacyDaylightDetector;
    pub const LEGACYREDSTONEBLOCK: MaterialEnum = MaterialEnum::LegacyRedstoneBlock;
    pub const LEGACYQUARTZORE: MaterialEnum = MaterialEnum::LegacyQuartzOre;
    pub const LEGACYHOPPER: MaterialEnum = MaterialEnum::LegacyHopper;
    pub const LEGACYQUARTZBLOCK: MaterialEnum = MaterialEnum::LegacyQuartzBlock;
    pub const LEGACYQUARTZSTAIRS: MaterialEnum = MaterialEnum::LegacyQuartzStairs;
    pub const LEGACYACTIVATORRAIL: MaterialEnum = MaterialEnum::LegacyActivatorRail;
    pub const LEGACYDROPPER: MaterialEnum = MaterialEnum::LegacyDropper;
    pub const LEGACYSTAINEDCLAY: MaterialEnum = MaterialEnum::LegacyStainedClay;
    pub const LEGACYSTAINEDGLASSPANE: MaterialEnum = MaterialEnum::LegacyStainedGlassPane;
    pub const LEGACYLEAVES2: MaterialEnum = MaterialEnum::LegacyLeaves2;
    pub const LEGACYLOG2: MaterialEnum = MaterialEnum::LegacyLog2;
    pub const LEGACYACACIASTAIRS: MaterialEnum = MaterialEnum::LegacyAcaciaStairs;
    pub const LEGACYDARKOAKSTAIRS: MaterialEnum = MaterialEnum::LegacyDarkOakStairs;
    pub const LEGACYSLIMEBLOCK: MaterialEnum = MaterialEnum::LegacySlimeBlock;
    pub const LEGACYBARRIER: MaterialEnum = MaterialEnum::LegacyBarrier;
    pub const LEGACYIRONTRAPDOOR: MaterialEnum = MaterialEnum::LegacyIronTrapdoor;
    pub const LEGACYPRISMARINE: MaterialEnum = MaterialEnum::LegacyPrismarine;
    pub const LEGACYSEALANTERN: MaterialEnum = MaterialEnum::LegacySeaLantern;
    pub const LEGACYHAYBLOCK: MaterialEnum = MaterialEnum::LegacyHayBlock;
    pub const LEGACYCARPET: MaterialEnum = MaterialEnum::LegacyCarpet;
    pub const LEGACYHARDCLAY: MaterialEnum = MaterialEnum::LegacyHardClay;
    pub const LEGACYCOALBLOCK: MaterialEnum = MaterialEnum::LegacyCoalBlock;
    pub const LEGACYPACKEDICE: MaterialEnum = MaterialEnum::LegacyPackedIce;
    pub const LEGACYDOUBLEPLANT: MaterialEnum = MaterialEnum::LegacyDoublePlant;
    pub const LEGACYSTANDINGBANNER: MaterialEnum = MaterialEnum::LegacyStandingBanner;
    pub const LEGACYWALLBANNER: MaterialEnum = MaterialEnum::LegacyWallBanner;
    pub const LEGACYDAYLIGHTDETECTORINVERTED: MaterialEnum =
        MaterialEnum::LegacyDaylightDetectorInverted;
    pub const LEGACYREDSANDSTONE: MaterialEnum = MaterialEnum::LegacyRedSandstone;
    pub const LEGACYREDSANDSTONESTAIRS: MaterialEnum = MaterialEnum::LegacyRedSandstoneStairs;
    pub const LEGACYDOUBLESTONESLAB2: MaterialEnum = MaterialEnum::LegacyDoubleStoneSlab2;
    pub const LEGACYSTONESLAB2: MaterialEnum = MaterialEnum::LegacyStoneSlab2;
    pub const LEGACYSPRUCEFENCEGATE: MaterialEnum = MaterialEnum::LegacySpruceFenceGate;
    pub const LEGACYBIRCHFENCEGATE: MaterialEnum = MaterialEnum::LegacyBirchFenceGate;
    pub const LEGACYJUNGLEFENCEGATE: MaterialEnum = MaterialEnum::LegacyJungleFenceGate;
    pub const LEGACYDARKOAKFENCEGATE: MaterialEnum = MaterialEnum::LegacyDarkOakFenceGate;
    pub const LEGACYACACIAFENCEGATE: MaterialEnum = MaterialEnum::LegacyAcaciaFenceGate;
    pub const LEGACYSPRUCEFENCE: MaterialEnum = MaterialEnum::LegacySpruceFence;
    pub const LEGACYBIRCHFENCE: MaterialEnum = MaterialEnum::LegacyBirchFence;
    pub const LEGACYJUNGLEFENCE: MaterialEnum = MaterialEnum::LegacyJungleFence;
    pub const LEGACYDARKOAKFENCE: MaterialEnum = MaterialEnum::LegacyDarkOakFence;
    pub const LEGACYACACIAFENCE: MaterialEnum = MaterialEnum::LegacyAcaciaFence;
    pub const LEGACYSPRUCEDOOR: MaterialEnum = MaterialEnum::LegacySpruceDoor;
    pub const LEGACYBIRCHDOOR: MaterialEnum = MaterialEnum::LegacyBirchDoor;
    pub const LEGACYJUNGLEDOOR: MaterialEnum = MaterialEnum::LegacyJungleDoor;
    pub const LEGACYACACIADOOR: MaterialEnum = MaterialEnum::LegacyAcaciaDoor;
    pub const LEGACYDARKOAKDOOR: MaterialEnum = MaterialEnum::LegacyDarkOakDoor;
    pub const LEGACYENDROD: MaterialEnum = MaterialEnum::LegacyEndRod;
    pub const LEGACYCHORUSPLANT: MaterialEnum = MaterialEnum::LegacyChorusPlant;
    pub const LEGACYCHORUSFLOWER: MaterialEnum = MaterialEnum::LegacyChorusFlower;
    pub const LEGACYPURPURBLOCK: MaterialEnum = MaterialEnum::LegacyPurpurBlock;
    pub const LEGACYPURPURPILLAR: MaterialEnum = MaterialEnum::LegacyPurpurPillar;
    pub const LEGACYPURPURSTAIRS: MaterialEnum = MaterialEnum::LegacyPurpurStairs;
    pub const LEGACYPURPURDOUBLESLAB: MaterialEnum = MaterialEnum::LegacyPurpurDoubleSlab;
    pub const LEGACYPURPURSLAB: MaterialEnum = MaterialEnum::LegacyPurpurSlab;
    pub const LEGACYENDBRICKS: MaterialEnum = MaterialEnum::LegacyEndBricks;
    pub const LEGACYBEETROOTBLOCK: MaterialEnum = MaterialEnum::LegacyBeetrootBlock;
    pub const LEGACYGRASSPATH: MaterialEnum = MaterialEnum::LegacyGrassPath;
    pub const LEGACYENDGATEWAY: MaterialEnum = MaterialEnum::LegacyEndGateway;
    pub const LEGACYCOMMANDREPEATING: MaterialEnum = MaterialEnum::LegacyCommandRepeating;
    pub const LEGACYCOMMANDCHAIN: MaterialEnum = MaterialEnum::LegacyCommandChain;
    pub const LEGACYFROSTEDICE: MaterialEnum = MaterialEnum::LegacyFrostedIce;
    pub const LEGACYMAGMA: MaterialEnum = MaterialEnum::LegacyMagma;
    pub const LEGACYNETHERWARTBLOCK: MaterialEnum = MaterialEnum::LegacyNetherWartBlock;
    pub const LEGACYREDNETHERBRICK: MaterialEnum = MaterialEnum::LegacyRedNetherBrick;
    pub const LEGACYBONEBLOCK: MaterialEnum = MaterialEnum::LegacyBoneBlock;
    pub const LEGACYSTRUCTUREVOID: MaterialEnum = MaterialEnum::LegacyStructureVoid;
    pub const LEGACYOBSERVER: MaterialEnum = MaterialEnum::LegacyObserver;
    pub const LEGACYWHITESHULKERBOX: MaterialEnum = MaterialEnum::LegacyWhiteShulkerBox;
    pub const LEGACYORANGESHULKERBOX: MaterialEnum = MaterialEnum::LegacyOrangeShulkerBox;
    pub const LEGACYMAGENTASHULKERBOX: MaterialEnum = MaterialEnum::LegacyMagentaShulkerBox;
    pub const LEGACYLIGHTBLUESHULKERBOX: MaterialEnum = MaterialEnum::LegacyLightBlueShulkerBox;
    pub const LEGACYYELLOWSHULKERBOX: MaterialEnum = MaterialEnum::LegacyYellowShulkerBox;
    pub const LEGACYLIMESHULKERBOX: MaterialEnum = MaterialEnum::LegacyLimeShulkerBox;
    pub const LEGACYPINKSHULKERBOX: MaterialEnum = MaterialEnum::LegacyPinkShulkerBox;
    pub const LEGACYGRAYSHULKERBOX: MaterialEnum = MaterialEnum::LegacyGrayShulkerBox;
    pub const LEGACYSILVERSHULKERBOX: MaterialEnum = MaterialEnum::LegacySilverShulkerBox;
    pub const LEGACYCYANSHULKERBOX: MaterialEnum = MaterialEnum::LegacyCyanShulkerBox;
    pub const LEGACYPURPLESHULKERBOX: MaterialEnum = MaterialEnum::LegacyPurpleShulkerBox;
    pub const LEGACYBLUESHULKERBOX: MaterialEnum = MaterialEnum::LegacyBlueShulkerBox;
    pub const LEGACYBROWNSHULKERBOX: MaterialEnum = MaterialEnum::LegacyBrownShulkerBox;
    pub const LEGACYGREENSHULKERBOX: MaterialEnum = MaterialEnum::LegacyGreenShulkerBox;
    pub const LEGACYREDSHULKERBOX: MaterialEnum = MaterialEnum::LegacyRedShulkerBox;
    pub const LEGACYBLACKSHULKERBOX: MaterialEnum = MaterialEnum::LegacyBlackShulkerBox;
    pub const LEGACYWHITEGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LegacyWhiteGlazedTerracotta;
    pub const LEGACYORANGEGLAZEDTERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyOrangeGlazedTerracotta;
    pub const LEGACYMAGENTAGLAZEDTERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyMagentaGlazedTerracotta;
    pub const LEGACYLIGHTBLUEGLAZEDTERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyLightBlueGlazedTerracotta;
    pub const LEGACYYELLOWGLAZEDTERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyYellowGlazedTerracotta;
    pub const LEGACYLIMEGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LegacyLimeGlazedTerracotta;
    pub const LEGACYPINKGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LegacyPinkGlazedTerracotta;
    pub const LEGACYGRAYGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LegacyGrayGlazedTerracotta;
    pub const LEGACYSILVERGLAZEDTERRACOTTA: MaterialEnum =
        MaterialEnum::LegacySilverGlazedTerracotta;
    pub const LEGACYCYANGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LegacyCyanGlazedTerracotta;
    pub const LEGACYPURPLEGLAZEDTERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyPurpleGlazedTerracotta;
    pub const LEGACYBLUEGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LegacyBlueGlazedTerracotta;
    pub const LEGACYBROWNGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LegacyBrownGlazedTerracotta;
    pub const LEGACYGREENGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LegacyGreenGlazedTerracotta;
    pub const LEGACYREDGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LegacyRedGlazedTerracotta;
    pub const LEGACYBLACKGLAZEDTERRACOTTA: MaterialEnum = MaterialEnum::LegacyBlackGlazedTerracotta;
    pub const LEGACYCONCRETE: MaterialEnum = MaterialEnum::LegacyConcrete;
    pub const LEGACYCONCRETEPOWDER: MaterialEnum = MaterialEnum::LegacyConcretePowder;
    pub const LEGACYSTRUCTUREBLOCK: MaterialEnum = MaterialEnum::LegacyStructureBlock;
    pub const LEGACYIRONSPADE: MaterialEnum = MaterialEnum::LegacyIronSpade;
    pub const LEGACYIRONPICKAXE: MaterialEnum = MaterialEnum::LegacyIronPickaxe;
    pub const LEGACYIRONAXE: MaterialEnum = MaterialEnum::LegacyIronAxe;
    pub const LEGACYFLINTANDSTEEL: MaterialEnum = MaterialEnum::LegacyFlintAndSteel;
    pub const LEGACYAPPLE: MaterialEnum = MaterialEnum::LegacyApple;
    pub const LEGACYBOW: MaterialEnum = MaterialEnum::LegacyBow;
    pub const LEGACYARROW: MaterialEnum = MaterialEnum::LegacyArrow;
    pub const LEGACYCOAL: MaterialEnum = MaterialEnum::LegacyCoal;
    pub const LEGACYDIAMOND: MaterialEnum = MaterialEnum::LegacyDiamond;
    pub const LEGACYIRONINGOT: MaterialEnum = MaterialEnum::LegacyIronIngot;
    pub const LEGACYGOLDINGOT: MaterialEnum = MaterialEnum::LegacyGoldIngot;
    pub const LEGACYIRONSWORD: MaterialEnum = MaterialEnum::LegacyIronSword;
    pub const LEGACYWOODSWORD: MaterialEnum = MaterialEnum::LegacyWoodSword;
    pub const LEGACYWOODSPADE: MaterialEnum = MaterialEnum::LegacyWoodSpade;
    pub const LEGACYWOODPICKAXE: MaterialEnum = MaterialEnum::LegacyWoodPickaxe;
    pub const LEGACYWOODAXE: MaterialEnum = MaterialEnum::LegacyWoodAxe;
    pub const LEGACYSTONESWORD: MaterialEnum = MaterialEnum::LegacyStoneSword;
    pub const LEGACYSTONESPADE: MaterialEnum = MaterialEnum::LegacyStoneSpade;
    pub const LEGACYSTONEPICKAXE: MaterialEnum = MaterialEnum::LegacyStonePickaxe;
    pub const LEGACYSTONEAXE: MaterialEnum = MaterialEnum::LegacyStoneAxe;
    pub const LEGACYDIAMONDSWORD: MaterialEnum = MaterialEnum::LegacyDiamondSword;
    pub const LEGACYDIAMONDSPADE: MaterialEnum = MaterialEnum::LegacyDiamondSpade;
    pub const LEGACYDIAMONDPICKAXE: MaterialEnum = MaterialEnum::LegacyDiamondPickaxe;
    pub const LEGACYDIAMONDAXE: MaterialEnum = MaterialEnum::LegacyDiamondAxe;
    pub const LEGACYSTICK: MaterialEnum = MaterialEnum::LegacyStick;
    pub const LEGACYBOWL: MaterialEnum = MaterialEnum::LegacyBowl;
    pub const LEGACYMUSHROOMSOUP: MaterialEnum = MaterialEnum::LegacyMushroomSoup;
    pub const LEGACYGOLDSWORD: MaterialEnum = MaterialEnum::LegacyGoldSword;
    pub const LEGACYGOLDSPADE: MaterialEnum = MaterialEnum::LegacyGoldSpade;
    pub const LEGACYGOLDPICKAXE: MaterialEnum = MaterialEnum::LegacyGoldPickaxe;
    pub const LEGACYGOLDAXE: MaterialEnum = MaterialEnum::LegacyGoldAxe;
    pub const LEGACYSTRING: MaterialEnum = MaterialEnum::LegacyString;
    pub const LEGACYFEATHER: MaterialEnum = MaterialEnum::LegacyFeather;
    pub const LEGACYSULPHUR: MaterialEnum = MaterialEnum::LegacySulphur;
    pub const LEGACYWOODHOE: MaterialEnum = MaterialEnum::LegacyWoodHoe;
    pub const LEGACYSTONEHOE: MaterialEnum = MaterialEnum::LegacyStoneHoe;
    pub const LEGACYIRONHOE: MaterialEnum = MaterialEnum::LegacyIronHoe;
    pub const LEGACYDIAMONDHOE: MaterialEnum = MaterialEnum::LegacyDiamondHoe;
    pub const LEGACYGOLDHOE: MaterialEnum = MaterialEnum::LegacyGoldHoe;
    pub const LEGACYSEEDS: MaterialEnum = MaterialEnum::LegacySeeds;
    pub const LEGACYWHEAT: MaterialEnum = MaterialEnum::LegacyWheat;
    pub const LEGACYBREAD: MaterialEnum = MaterialEnum::LegacyBread;
    pub const LEGACYLEATHERHELMET: MaterialEnum = MaterialEnum::LegacyLeatherHelmet;
    pub const LEGACYLEATHERCHESTPLATE: MaterialEnum = MaterialEnum::LegacyLeatherChestplate;
    pub const LEGACYLEATHERLEGGINGS: MaterialEnum = MaterialEnum::LegacyLeatherLeggings;
    pub const LEGACYLEATHERBOOTS: MaterialEnum = MaterialEnum::LegacyLeatherBoots;
    pub const LEGACYCHAINMAILHELMET: MaterialEnum = MaterialEnum::LegacyChainmailHelmet;
    pub const LEGACYCHAINMAILCHESTPLATE: MaterialEnum = MaterialEnum::LegacyChainmailChestplate;
    pub const LEGACYCHAINMAILLEGGINGS: MaterialEnum = MaterialEnum::LegacyChainmailLeggings;
    pub const LEGACYCHAINMAILBOOTS: MaterialEnum = MaterialEnum::LegacyChainmailBoots;
    pub const LEGACYIRONHELMET: MaterialEnum = MaterialEnum::LegacyIronHelmet;
    pub const LEGACYIRONCHESTPLATE: MaterialEnum = MaterialEnum::LegacyIronChestplate;
    pub const LEGACYIRONLEGGINGS: MaterialEnum = MaterialEnum::LegacyIronLeggings;
    pub const LEGACYIRONBOOTS: MaterialEnum = MaterialEnum::LegacyIronBoots;
    pub const LEGACYDIAMONDHELMET: MaterialEnum = MaterialEnum::LegacyDiamondHelmet;
    pub const LEGACYDIAMONDCHESTPLATE: MaterialEnum = MaterialEnum::LegacyDiamondChestplate;
    pub const LEGACYDIAMONDLEGGINGS: MaterialEnum = MaterialEnum::LegacyDiamondLeggings;
    pub const LEGACYDIAMONDBOOTS: MaterialEnum = MaterialEnum::LegacyDiamondBoots;
    pub const LEGACYGOLDHELMET: MaterialEnum = MaterialEnum::LegacyGoldHelmet;
    pub const LEGACYGOLDCHESTPLATE: MaterialEnum = MaterialEnum::LegacyGoldChestplate;
    pub const LEGACYGOLDLEGGINGS: MaterialEnum = MaterialEnum::LegacyGoldLeggings;
    pub const LEGACYGOLDBOOTS: MaterialEnum = MaterialEnum::LegacyGoldBoots;
    pub const LEGACYFLINT: MaterialEnum = MaterialEnum::LegacyFlint;
    pub const LEGACYPORK: MaterialEnum = MaterialEnum::LegacyPork;
    pub const LEGACYGRILLEDPORK: MaterialEnum = MaterialEnum::LegacyGrilledPork;
    pub const LEGACYPAINTING: MaterialEnum = MaterialEnum::LegacyPainting;
    pub const LEGACYGOLDENAPPLE: MaterialEnum = MaterialEnum::LegacyGoldenApple;
    pub const LEGACYSIGN: MaterialEnum = MaterialEnum::LegacySign;
    pub const LEGACYWOODDOOR: MaterialEnum = MaterialEnum::LegacyWoodDoor;
    pub const LEGACYBUCKET: MaterialEnum = MaterialEnum::LegacyBucket;
    pub const LEGACYWATERBUCKET: MaterialEnum = MaterialEnum::LegacyWaterBucket;
    pub const LEGACYLAVABUCKET: MaterialEnum = MaterialEnum::LegacyLavaBucket;
    pub const LEGACYMINECART: MaterialEnum = MaterialEnum::LegacyMinecart;
    pub const LEGACYSADDLE: MaterialEnum = MaterialEnum::LegacySaddle;
    pub const LEGACYIRONDOOR: MaterialEnum = MaterialEnum::LegacyIronDoor;
    pub const LEGACYREDSTONE: MaterialEnum = MaterialEnum::LegacyRedstone;
    pub const LEGACYSNOWBALL: MaterialEnum = MaterialEnum::LegacySnowBall;
    pub const LEGACYBOAT: MaterialEnum = MaterialEnum::LegacyBoat;
    pub const LEGACYLEATHER: MaterialEnum = MaterialEnum::LegacyLeather;
    pub const LEGACYMILKBUCKET: MaterialEnum = MaterialEnum::LegacyMilkBucket;
    pub const LEGACYCLAYBRICK: MaterialEnum = MaterialEnum::LegacyClayBrick;
    pub const LEGACYCLAYBALL: MaterialEnum = MaterialEnum::LegacyClayBall;
    pub const LEGACYSUGARCANE: MaterialEnum = MaterialEnum::LegacySugarCane;
    pub const LEGACYPAPER: MaterialEnum = MaterialEnum::LegacyPaper;
    pub const LEGACYBOOK: MaterialEnum = MaterialEnum::LegacyBook;
    pub const LEGACYSLIMEBALL: MaterialEnum = MaterialEnum::LegacySlimeBall;
    pub const LEGACYSTORAGEMINECART: MaterialEnum = MaterialEnum::LegacyStorageMinecart;
    pub const LEGACYPOWEREDMINECART: MaterialEnum = MaterialEnum::LegacyPoweredMinecart;
    pub const LEGACYEGG: MaterialEnum = MaterialEnum::LegacyEgg;
    pub const LEGACYCOMPASS: MaterialEnum = MaterialEnum::LegacyCompass;
    pub const LEGACYFISHINGROD: MaterialEnum = MaterialEnum::LegacyFishingRod;
    pub const LEGACYWATCH: MaterialEnum = MaterialEnum::LegacyWatch;
    pub const LEGACYGLOWSTONEDUST: MaterialEnum = MaterialEnum::LegacyGlowstoneDust;
    pub const LEGACYRAWFISH: MaterialEnum = MaterialEnum::LegacyRawFish;
    pub const LEGACYCOOKEDFISH: MaterialEnum = MaterialEnum::LegacyCookedFish;
    pub const LEGACYINKSACK: MaterialEnum = MaterialEnum::LegacyInkSack;
    pub const LEGACYBONE: MaterialEnum = MaterialEnum::LegacyBone;
    pub const LEGACYSUGAR: MaterialEnum = MaterialEnum::LegacySugar;
    pub const LEGACYCAKE: MaterialEnum = MaterialEnum::LegacyCake;
    pub const LEGACYBED: MaterialEnum = MaterialEnum::LegacyBed;
    pub const LEGACYDIODE: MaterialEnum = MaterialEnum::LegacyDiode;
    pub const LEGACYCOOKIE: MaterialEnum = MaterialEnum::LegacyCookie;
    pub const LEGACYMAP: MaterialEnum = MaterialEnum::LegacyMap;
    pub const LEGACYSHEARS: MaterialEnum = MaterialEnum::LegacyShears;
    pub const LEGACYMELON: MaterialEnum = MaterialEnum::LegacyMelon;
    pub const LEGACYPUMPKINSEEDS: MaterialEnum = MaterialEnum::LegacyPumpkinSeeds;
    pub const LEGACYMELONSEEDS: MaterialEnum = MaterialEnum::LegacyMelonSeeds;
    pub const LEGACYRAWBEEF: MaterialEnum = MaterialEnum::LegacyRawBeef;
    pub const LEGACYCOOKEDBEEF: MaterialEnum = MaterialEnum::LegacyCookedBeef;
    pub const LEGACYRAWCHICKEN: MaterialEnum = MaterialEnum::LegacyRawChicken;
    pub const LEGACYCOOKEDCHICKEN: MaterialEnum = MaterialEnum::LegacyCookedChicken;
    pub const LEGACYROTTENFLESH: MaterialEnum = MaterialEnum::LegacyRottenFlesh;
    pub const LEGACYENDERPEARL: MaterialEnum = MaterialEnum::LegacyEnderPearl;
    pub const LEGACYBLAZEROD: MaterialEnum = MaterialEnum::LegacyBlazeRod;
    pub const LEGACYGHASTTEAR: MaterialEnum = MaterialEnum::LegacyGhastTear;
    pub const LEGACYGOLDNUGGET: MaterialEnum = MaterialEnum::LegacyGoldNugget;
    pub const LEGACYNETHERSTALK: MaterialEnum = MaterialEnum::LegacyNetherStalk;
    pub const LEGACYPOTION: MaterialEnum = MaterialEnum::LegacyPotion;
    pub const LEGACYGLASSBOTTLE: MaterialEnum = MaterialEnum::LegacyGlassBottle;
    pub const LEGACYSPIDEREYE: MaterialEnum = MaterialEnum::LegacySpiderEye;
    pub const LEGACYFERMENTEDSPIDEREYE: MaterialEnum = MaterialEnum::LegacyFermentedSpiderEye;
    pub const LEGACYBLAZEPOWDER: MaterialEnum = MaterialEnum::LegacyBlazePowder;
    pub const LEGACYMAGMACREAM: MaterialEnum = MaterialEnum::LegacyMagmaCream;
    pub const LEGACYBREWINGSTANDITEM: MaterialEnum = MaterialEnum::LegacyBrewingStandItem;
    pub const LEGACYCAULDRONITEM: MaterialEnum = MaterialEnum::LegacyCauldronItem;
    pub const LEGACYEYEOFENDER: MaterialEnum = MaterialEnum::LegacyEyeOfEnder;
    pub const LEGACYSPECKLEDMELON: MaterialEnum = MaterialEnum::LegacySpeckledMelon;
    pub const LEGACYMONSTEREGG: MaterialEnum = MaterialEnum::LegacyMonsterEgg;
    pub const LEGACYEXPBOTTLE: MaterialEnum = MaterialEnum::LegacyExpBottle;
    pub const LEGACYFIREBALL: MaterialEnum = MaterialEnum::LegacyFireball;
    pub const LEGACYBOOKANDQUILL: MaterialEnum = MaterialEnum::LegacyBookAndQuill;
    pub const LEGACYWRITTENBOOK: MaterialEnum = MaterialEnum::LegacyWrittenBook;
    pub const LEGACYEMERALD: MaterialEnum = MaterialEnum::LegacyEmerald;
    pub const LEGACYITEMFRAME: MaterialEnum = MaterialEnum::LegacyItemFrame;
    pub const LEGACYFLOWERPOTITEM: MaterialEnum = MaterialEnum::LegacyFlowerPotItem;
    pub const LEGACYCARROTITEM: MaterialEnum = MaterialEnum::LegacyCarrotItem;
    pub const LEGACYPOTATOITEM: MaterialEnum = MaterialEnum::LegacyPotatoItem;
    pub const LEGACYBAKEDPOTATO: MaterialEnum = MaterialEnum::LegacyBakedPotato;
    pub const LEGACYPOISONOUSPOTATO: MaterialEnum = MaterialEnum::LegacyPoisonousPotato;
    pub const LEGACYEMPTYMAP: MaterialEnum = MaterialEnum::LegacyEmptyMap;
    pub const LEGACYGOLDENCARROT: MaterialEnum = MaterialEnum::LegacyGoldenCarrot;
    pub const LEGACYSKULLITEM: MaterialEnum = MaterialEnum::LegacySkullItem;
    pub const LEGACYCARROTSTICK: MaterialEnum = MaterialEnum::LegacyCarrotStick;
    pub const LEGACYNETHERSTAR: MaterialEnum = MaterialEnum::LegacyNetherStar;
    pub const LEGACYPUMPKINPIE: MaterialEnum = MaterialEnum::LegacyPumpkinPie;
    pub const LEGACYFIREWORK: MaterialEnum = MaterialEnum::LegacyFirework;
    pub const LEGACYFIREWORKCHARGE: MaterialEnum = MaterialEnum::LegacyFireworkCharge;
    pub const LEGACYENCHANTEDBOOK: MaterialEnum = MaterialEnum::LegacyEnchantedBook;
    pub const LEGACYREDSTONECOMPARATOR: MaterialEnum = MaterialEnum::LegacyRedstoneComparator;
    pub const LEGACYNETHERBRICKITEM: MaterialEnum = MaterialEnum::LegacyNetherBrickItem;
    pub const LEGACYQUARTZ: MaterialEnum = MaterialEnum::LegacyQuartz;
    pub const LEGACYEXPLOSIVEMINECART: MaterialEnum = MaterialEnum::LegacyExplosiveMinecart;
    pub const LEGACYHOPPERMINECART: MaterialEnum = MaterialEnum::LegacyHopperMinecart;
    pub const LEGACYPRISMARINESHARD: MaterialEnum = MaterialEnum::LegacyPrismarineShard;
    pub const LEGACYPRISMARINECRYSTALS: MaterialEnum = MaterialEnum::LegacyPrismarineCrystals;
    pub const LEGACYRABBIT: MaterialEnum = MaterialEnum::LegacyRabbit;
    pub const LEGACYCOOKEDRABBIT: MaterialEnum = MaterialEnum::LegacyCookedRabbit;
    pub const LEGACYRABBITSTEW: MaterialEnum = MaterialEnum::LegacyRabbitStew;
    pub const LEGACYRABBITFOOT: MaterialEnum = MaterialEnum::LegacyRabbitFoot;
    pub const LEGACYRABBITHIDE: MaterialEnum = MaterialEnum::LegacyRabbitHide;
    pub const LEGACYARMORSTAND: MaterialEnum = MaterialEnum::LegacyArmorStand;
    pub const LEGACYIRONBARDING: MaterialEnum = MaterialEnum::LegacyIronBarding;
    pub const LEGACYGOLDBARDING: MaterialEnum = MaterialEnum::LegacyGoldBarding;
    pub const LEGACYDIAMONDBARDING: MaterialEnum = MaterialEnum::LegacyDiamondBarding;
    pub const LEGACYLEASH: MaterialEnum = MaterialEnum::LegacyLeash;
    pub const LEGACYNAMETAG: MaterialEnum = MaterialEnum::LegacyNameTag;
    pub const LEGACYCOMMANDMINECART: MaterialEnum = MaterialEnum::LegacyCommandMinecart;
    pub const LEGACYMUTTON: MaterialEnum = MaterialEnum::LegacyMutton;
    pub const LEGACYCOOKEDMUTTON: MaterialEnum = MaterialEnum::LegacyCookedMutton;
    pub const LEGACYBANNER: MaterialEnum = MaterialEnum::LegacyBanner;
    pub const LEGACYENDCRYSTAL: MaterialEnum = MaterialEnum::LegacyEndCrystal;
    pub const LEGACYSPRUCEDOORITEM: MaterialEnum = MaterialEnum::LegacySpruceDoorItem;
    pub const LEGACYBIRCHDOORITEM: MaterialEnum = MaterialEnum::LegacyBirchDoorItem;
    pub const LEGACYJUNGLEDOORITEM: MaterialEnum = MaterialEnum::LegacyJungleDoorItem;
    pub const LEGACYACACIADOORITEM: MaterialEnum = MaterialEnum::LegacyAcaciaDoorItem;
    pub const LEGACYDARKOAKDOORITEM: MaterialEnum = MaterialEnum::LegacyDarkOakDoorItem;
    pub const LEGACYCHORUSFRUIT: MaterialEnum = MaterialEnum::LegacyChorusFruit;
    pub const LEGACYCHORUSFRUITPOPPED: MaterialEnum = MaterialEnum::LegacyChorusFruitPopped;
    pub const LEGACYBEETROOT: MaterialEnum = MaterialEnum::LegacyBeetroot;
    pub const LEGACYBEETROOTSEEDS: MaterialEnum = MaterialEnum::LegacyBeetrootSeeds;
    pub const LEGACYBEETROOTSOUP: MaterialEnum = MaterialEnum::LegacyBeetrootSoup;
    pub const LEGACYDRAGONSBREATH: MaterialEnum = MaterialEnum::LegacyDragonsBreath;
    pub const LEGACYSPLASHPOTION: MaterialEnum = MaterialEnum::LegacySplashPotion;
    pub const LEGACYSPECTRALARROW: MaterialEnum = MaterialEnum::LegacySpectralArrow;
    pub const LEGACYTIPPEDARROW: MaterialEnum = MaterialEnum::LegacyTippedArrow;
    pub const LEGACYLINGERINGPOTION: MaterialEnum = MaterialEnum::LegacyLingeringPotion;
    pub const LEGACYSHIELD: MaterialEnum = MaterialEnum::LegacyShield;
    pub const LEGACYELYTRA: MaterialEnum = MaterialEnum::LegacyElytra;
    pub const LEGACYBOATSPRUCE: MaterialEnum = MaterialEnum::LegacyBoatSpruce;
    pub const LEGACYBOATBIRCH: MaterialEnum = MaterialEnum::LegacyBoatBirch;
    pub const LEGACYBOATJUNGLE: MaterialEnum = MaterialEnum::LegacyBoatJungle;
    pub const LEGACYBOATACACIA: MaterialEnum = MaterialEnum::LegacyBoatAcacia;
    pub const LEGACYBOATDARKOAK: MaterialEnum = MaterialEnum::LegacyBoatDarkOak;
    pub const LEGACYTOTEM: MaterialEnum = MaterialEnum::LegacyTotem;
    pub const LEGACYSHULKERSHELL: MaterialEnum = MaterialEnum::LegacyShulkerShell;
    pub const LEGACYIRONNUGGET: MaterialEnum = MaterialEnum::LegacyIronNugget;
    pub const LEGACYKNOWLEDGEBOOK: MaterialEnum = MaterialEnum::LegacyKnowledgeBook;
    pub const LEGACYGOLDRECORD: MaterialEnum = MaterialEnum::LegacyGoldRecord;
    pub const LEGACYGREENRECORD: MaterialEnum = MaterialEnum::LegacyGreenRecord;
    pub const LEGACYRECORD3: MaterialEnum = MaterialEnum::LegacyRecord3;
    pub const LEGACYRECORD4: MaterialEnum = MaterialEnum::LegacyRecord4;
    pub const LEGACYRECORD5: MaterialEnum = MaterialEnum::LegacyRecord5;
    pub const LEGACYRECORD6: MaterialEnum = MaterialEnum::LegacyRecord6;
    pub const LEGACYRECORD7: MaterialEnum = MaterialEnum::LegacyRecord7;
    pub const LEGACYRECORD8: MaterialEnum = MaterialEnum::LegacyRecord8;
    pub const LEGACYRECORD9: MaterialEnum = MaterialEnum::LegacyRecord9;
    pub const LEGACYRECORD10: MaterialEnum = MaterialEnum::LegacyRecord10;
    pub const LEGACYRECORD11: MaterialEnum = MaterialEnum::LegacyRecord11;
    pub const LEGACYRECORD12: MaterialEnum = MaterialEnum::LegacyRecord12;
    pub fn from_string(str: String) -> std::option::Option<MaterialEnum> {
        match str.as_str() {
            "AIR" => Some(MaterialEnum::Air),
            "STONE" => Some(MaterialEnum::Stone),
            "GRANITE" => Some(MaterialEnum::Granite),
            "POLISHED_GRANITE" => Some(MaterialEnum::PolishedGranite),
            "DIORITE" => Some(MaterialEnum::Diorite),
            "POLISHED_DIORITE" => Some(MaterialEnum::PolishedDiorite),
            "ANDESITE" => Some(MaterialEnum::Andesite),
            "POLISHED_ANDESITE" => Some(MaterialEnum::PolishedAndesite),
            "DEEPSLATE" => Some(MaterialEnum::Deepslate),
            "COBBLED_DEEPSLATE" => Some(MaterialEnum::CobbledDeepslate),
            "POLISHED_DEEPSLATE" => Some(MaterialEnum::PolishedDeepslate),
            "CALCITE" => Some(MaterialEnum::Calcite),
            "TUFF" => Some(MaterialEnum::Tuff),
            "DRIPSTONE_BLOCK" => Some(MaterialEnum::DripstoneBlock),
            "GRASS_BLOCK" => Some(MaterialEnum::GrassBlock),
            "DIRT" => Some(MaterialEnum::Dirt),
            "COARSE_DIRT" => Some(MaterialEnum::CoarseDirt),
            "PODZOL" => Some(MaterialEnum::Podzol),
            "ROOTED_DIRT" => Some(MaterialEnum::RootedDirt),
            "MUD" => Some(MaterialEnum::Mud),
            "CRIMSON_NYLIUM" => Some(MaterialEnum::CrimsonNylium),
            "WARPED_NYLIUM" => Some(MaterialEnum::WarpedNylium),
            "COBBLESTONE" => Some(MaterialEnum::Cobblestone),
            "OAK_PLANKS" => Some(MaterialEnum::OakPlanks),
            "SPRUCE_PLANKS" => Some(MaterialEnum::SprucePlanks),
            "BIRCH_PLANKS" => Some(MaterialEnum::BirchPlanks),
            "JUNGLE_PLANKS" => Some(MaterialEnum::JunglePlanks),
            "ACACIA_PLANKS" => Some(MaterialEnum::AcaciaPlanks),
            "CHERRY_PLANKS" => Some(MaterialEnum::CherryPlanks),
            "DARK_OAK_PLANKS" => Some(MaterialEnum::DarkOakPlanks),
            "MANGROVE_PLANKS" => Some(MaterialEnum::MangrovePlanks),
            "BAMBOO_PLANKS" => Some(MaterialEnum::BambooPlanks),
            "CRIMSON_PLANKS" => Some(MaterialEnum::CrimsonPlanks),
            "WARPED_PLANKS" => Some(MaterialEnum::WarpedPlanks),
            "BAMBOO_MOSAIC" => Some(MaterialEnum::BambooMosaic),
            "OAK_SAPLING" => Some(MaterialEnum::OakSapling),
            "SPRUCE_SAPLING" => Some(MaterialEnum::SpruceSapling),
            "BIRCH_SAPLING" => Some(MaterialEnum::BirchSapling),
            "JUNGLE_SAPLING" => Some(MaterialEnum::JungleSapling),
            "ACACIA_SAPLING" => Some(MaterialEnum::AcaciaSapling),
            "CHERRY_SAPLING" => Some(MaterialEnum::CherrySapling),
            "DARK_OAK_SAPLING" => Some(MaterialEnum::DarkOakSapling),
            "MANGROVE_PROPAGULE" => Some(MaterialEnum::MangrovePropagule),
            "BEDROCK" => Some(MaterialEnum::Bedrock),
            "SAND" => Some(MaterialEnum::Sand),
            "SUSPICIOUS_SAND" => Some(MaterialEnum::SuspiciousSand),
            "SUSPICIOUS_GRAVEL" => Some(MaterialEnum::SuspiciousGravel),
            "RED_SAND" => Some(MaterialEnum::RedSand),
            "GRAVEL" => Some(MaterialEnum::Gravel),
            "COAL_ORE" => Some(MaterialEnum::CoalOre),
            "DEEPSLATE_COAL_ORE" => Some(MaterialEnum::DeepslateCoalOre),
            "IRON_ORE" => Some(MaterialEnum::IronOre),
            "DEEPSLATE_IRON_ORE" => Some(MaterialEnum::DeepslateIronOre),
            "COPPER_ORE" => Some(MaterialEnum::CopperOre),
            "DEEPSLATE_COPPER_ORE" => Some(MaterialEnum::DeepslateCopperOre),
            "GOLD_ORE" => Some(MaterialEnum::GoldOre),
            "DEEPSLATE_GOLD_ORE" => Some(MaterialEnum::DeepslateGoldOre),
            "REDSTONE_ORE" => Some(MaterialEnum::RedstoneOre),
            "DEEPSLATE_REDSTONE_ORE" => Some(MaterialEnum::DeepslateRedstoneOre),
            "EMERALD_ORE" => Some(MaterialEnum::EmeraldOre),
            "DEEPSLATE_EMERALD_ORE" => Some(MaterialEnum::DeepslateEmeraldOre),
            "LAPIS_ORE" => Some(MaterialEnum::LapisOre),
            "DEEPSLATE_LAPIS_ORE" => Some(MaterialEnum::DeepslateLapisOre),
            "DIAMOND_ORE" => Some(MaterialEnum::DiamondOre),
            "DEEPSLATE_DIAMOND_ORE" => Some(MaterialEnum::DeepslateDiamondOre),
            "NETHER_GOLD_ORE" => Some(MaterialEnum::NetherGoldOre),
            "NETHER_QUARTZ_ORE" => Some(MaterialEnum::NetherQuartzOre),
            "ANCIENT_DEBRIS" => Some(MaterialEnum::AncientDebris),
            "COAL_BLOCK" => Some(MaterialEnum::CoalBlock),
            "RAW_IRON_BLOCK" => Some(MaterialEnum::RawIronBlock),
            "RAW_COPPER_BLOCK" => Some(MaterialEnum::RawCopperBlock),
            "RAW_GOLD_BLOCK" => Some(MaterialEnum::RawGoldBlock),
            "AMETHYST_BLOCK" => Some(MaterialEnum::AmethystBlock),
            "BUDDING_AMETHYST" => Some(MaterialEnum::BuddingAmethyst),
            "IRON_BLOCK" => Some(MaterialEnum::IronBlock),
            "COPPER_BLOCK" => Some(MaterialEnum::CopperBlock),
            "GOLD_BLOCK" => Some(MaterialEnum::GoldBlock),
            "DIAMOND_BLOCK" => Some(MaterialEnum::DiamondBlock),
            "NETHERITE_BLOCK" => Some(MaterialEnum::NetheriteBlock),
            "EXPOSED_COPPER" => Some(MaterialEnum::ExposedCopper),
            "WEATHERED_COPPER" => Some(MaterialEnum::WeatheredCopper),
            "OXIDIZED_COPPER" => Some(MaterialEnum::OxidizedCopper),
            "CUT_COPPER" => Some(MaterialEnum::CutCopper),
            "EXPOSED_CUT_COPPER" => Some(MaterialEnum::ExposedCutCopper),
            "WEATHERED_CUT_COPPER" => Some(MaterialEnum::WeatheredCutCopper),
            "OXIDIZED_CUT_COPPER" => Some(MaterialEnum::OxidizedCutCopper),
            "CUT_COPPER_STAIRS" => Some(MaterialEnum::CutCopperStairs),
            "EXPOSED_CUT_COPPER_STAIRS" => Some(MaterialEnum::ExposedCutCopperStairs),
            "WEATHERED_CUT_COPPER_STAIRS" => Some(MaterialEnum::WeatheredCutCopperStairs),
            "OXIDIZED_CUT_COPPER_STAIRS" => Some(MaterialEnum::OxidizedCutCopperStairs),
            "CUT_COPPER_SLAB" => Some(MaterialEnum::CutCopperSlab),
            "EXPOSED_CUT_COPPER_SLAB" => Some(MaterialEnum::ExposedCutCopperSlab),
            "WEATHERED_CUT_COPPER_SLAB" => Some(MaterialEnum::WeatheredCutCopperSlab),
            "OXIDIZED_CUT_COPPER_SLAB" => Some(MaterialEnum::OxidizedCutCopperSlab),
            "WAXED_COPPER_BLOCK" => Some(MaterialEnum::WaxedCopperBlock),
            "WAXED_EXPOSED_COPPER" => Some(MaterialEnum::WaxedExposedCopper),
            "WAXED_WEATHERED_COPPER" => Some(MaterialEnum::WaxedWeatheredCopper),
            "WAXED_OXIDIZED_COPPER" => Some(MaterialEnum::WaxedOxidizedCopper),
            "WAXED_CUT_COPPER" => Some(MaterialEnum::WaxedCutCopper),
            "WAXED_EXPOSED_CUT_COPPER" => Some(MaterialEnum::WaxedExposedCutCopper),
            "WAXED_WEATHERED_CUT_COPPER" => Some(MaterialEnum::WaxedWeatheredCutCopper),
            "WAXED_OXIDIZED_CUT_COPPER" => Some(MaterialEnum::WaxedOxidizedCutCopper),
            "WAXED_CUT_COPPER_STAIRS" => Some(MaterialEnum::WaxedCutCopperStairs),
            "WAXED_EXPOSED_CUT_COPPER_STAIRS" => Some(MaterialEnum::WaxedExposedCutCopperStairs),
            "WAXED_WEATHERED_CUT_COPPER_STAIRS" => {
                Some(MaterialEnum::WaxedWeatheredCutCopperStairs)
            }
            "WAXED_OXIDIZED_CUT_COPPER_STAIRS" => Some(MaterialEnum::WaxedOxidizedCutCopperStairs),
            "WAXED_CUT_COPPER_SLAB" => Some(MaterialEnum::WaxedCutCopperSlab),
            "WAXED_EXPOSED_CUT_COPPER_SLAB" => Some(MaterialEnum::WaxedExposedCutCopperSlab),
            "WAXED_WEATHERED_CUT_COPPER_SLAB" => Some(MaterialEnum::WaxedWeatheredCutCopperSlab),
            "WAXED_OXIDIZED_CUT_COPPER_SLAB" => Some(MaterialEnum::WaxedOxidizedCutCopperSlab),
            "OAK_LOG" => Some(MaterialEnum::OakLog),
            "SPRUCE_LOG" => Some(MaterialEnum::SpruceLog),
            "BIRCH_LOG" => Some(MaterialEnum::BirchLog),
            "JUNGLE_LOG" => Some(MaterialEnum::JungleLog),
            "ACACIA_LOG" => Some(MaterialEnum::AcaciaLog),
            "CHERRY_LOG" => Some(MaterialEnum::CherryLog),
            "DARK_OAK_LOG" => Some(MaterialEnum::DarkOakLog),
            "MANGROVE_LOG" => Some(MaterialEnum::MangroveLog),
            "MANGROVE_ROOTS" => Some(MaterialEnum::MangroveRoots),
            "MUDDY_MANGROVE_ROOTS" => Some(MaterialEnum::MuddyMangroveRoots),
            "CRIMSON_STEM" => Some(MaterialEnum::CrimsonStem),
            "WARPED_STEM" => Some(MaterialEnum::WarpedStem),
            "BAMBOO_BLOCK" => Some(MaterialEnum::BambooBlock),
            "STRIPPED_OAK_LOG" => Some(MaterialEnum::StrippedOakLog),
            "STRIPPED_SPRUCE_LOG" => Some(MaterialEnum::StrippedSpruceLog),
            "STRIPPED_BIRCH_LOG" => Some(MaterialEnum::StrippedBirchLog),
            "STRIPPED_JUNGLE_LOG" => Some(MaterialEnum::StrippedJungleLog),
            "STRIPPED_ACACIA_LOG" => Some(MaterialEnum::StrippedAcaciaLog),
            "STRIPPED_CHERRY_LOG" => Some(MaterialEnum::StrippedCherryLog),
            "STRIPPED_DARK_OAK_LOG" => Some(MaterialEnum::StrippedDarkOakLog),
            "STRIPPED_MANGROVE_LOG" => Some(MaterialEnum::StrippedMangroveLog),
            "STRIPPED_CRIMSON_STEM" => Some(MaterialEnum::StrippedCrimsonStem),
            "STRIPPED_WARPED_STEM" => Some(MaterialEnum::StrippedWarpedStem),
            "STRIPPED_OAK_WOOD" => Some(MaterialEnum::StrippedOakWood),
            "STRIPPED_SPRUCE_WOOD" => Some(MaterialEnum::StrippedSpruceWood),
            "STRIPPED_BIRCH_WOOD" => Some(MaterialEnum::StrippedBirchWood),
            "STRIPPED_JUNGLE_WOOD" => Some(MaterialEnum::StrippedJungleWood),
            "STRIPPED_ACACIA_WOOD" => Some(MaterialEnum::StrippedAcaciaWood),
            "STRIPPED_CHERRY_WOOD" => Some(MaterialEnum::StrippedCherryWood),
            "STRIPPED_DARK_OAK_WOOD" => Some(MaterialEnum::StrippedDarkOakWood),
            "STRIPPED_MANGROVE_WOOD" => Some(MaterialEnum::StrippedMangroveWood),
            "STRIPPED_CRIMSON_HYPHAE" => Some(MaterialEnum::StrippedCrimsonHyphae),
            "STRIPPED_WARPED_HYPHAE" => Some(MaterialEnum::StrippedWarpedHyphae),
            "STRIPPED_BAMBOO_BLOCK" => Some(MaterialEnum::StrippedBambooBlock),
            "OAK_WOOD" => Some(MaterialEnum::OakWood),
            "SPRUCE_WOOD" => Some(MaterialEnum::SpruceWood),
            "BIRCH_WOOD" => Some(MaterialEnum::BirchWood),
            "JUNGLE_WOOD" => Some(MaterialEnum::JungleWood),
            "ACACIA_WOOD" => Some(MaterialEnum::AcaciaWood),
            "CHERRY_WOOD" => Some(MaterialEnum::CherryWood),
            "DARK_OAK_WOOD" => Some(MaterialEnum::DarkOakWood),
            "MANGROVE_WOOD" => Some(MaterialEnum::MangroveWood),
            "CRIMSON_HYPHAE" => Some(MaterialEnum::CrimsonHyphae),
            "WARPED_HYPHAE" => Some(MaterialEnum::WarpedHyphae),
            "OAK_LEAVES" => Some(MaterialEnum::OakLeaves),
            "SPRUCE_LEAVES" => Some(MaterialEnum::SpruceLeaves),
            "BIRCH_LEAVES" => Some(MaterialEnum::BirchLeaves),
            "JUNGLE_LEAVES" => Some(MaterialEnum::JungleLeaves),
            "ACACIA_LEAVES" => Some(MaterialEnum::AcaciaLeaves),
            "CHERRY_LEAVES" => Some(MaterialEnum::CherryLeaves),
            "DARK_OAK_LEAVES" => Some(MaterialEnum::DarkOakLeaves),
            "MANGROVE_LEAVES" => Some(MaterialEnum::MangroveLeaves),
            "AZALEA_LEAVES" => Some(MaterialEnum::AzaleaLeaves),
            "FLOWERING_AZALEA_LEAVES" => Some(MaterialEnum::FloweringAzaleaLeaves),
            "SPONGE" => Some(MaterialEnum::Sponge),
            "WET_SPONGE" => Some(MaterialEnum::WetSponge),
            "GLASS" => Some(MaterialEnum::Glass),
            "TINTED_GLASS" => Some(MaterialEnum::TintedGlass),
            "LAPIS_BLOCK" => Some(MaterialEnum::LapisBlock),
            "SANDSTONE" => Some(MaterialEnum::Sandstone),
            "CHISELED_SANDSTONE" => Some(MaterialEnum::ChiseledSandstone),
            "CUT_SANDSTONE" => Some(MaterialEnum::CutSandstone),
            "COBWEB" => Some(MaterialEnum::Cobweb),
            "GRASS" => Some(MaterialEnum::Grass),
            "FERN" => Some(MaterialEnum::Fern),
            "AZALEA" => Some(MaterialEnum::Azalea),
            "FLOWERING_AZALEA" => Some(MaterialEnum::FloweringAzalea),
            "DEAD_BUSH" => Some(MaterialEnum::DeadBush),
            "SEAGRASS" => Some(MaterialEnum::Seagrass),
            "SEA_PICKLE" => Some(MaterialEnum::SeaPickle),
            "WHITE_WOOL" => Some(MaterialEnum::WhiteWool),
            "ORANGE_WOOL" => Some(MaterialEnum::OrangeWool),
            "MAGENTA_WOOL" => Some(MaterialEnum::MagentaWool),
            "LIGHT_BLUE_WOOL" => Some(MaterialEnum::LightBlueWool),
            "YELLOW_WOOL" => Some(MaterialEnum::YellowWool),
            "LIME_WOOL" => Some(MaterialEnum::LimeWool),
            "PINK_WOOL" => Some(MaterialEnum::PinkWool),
            "GRAY_WOOL" => Some(MaterialEnum::GrayWool),
            "LIGHT_GRAY_WOOL" => Some(MaterialEnum::LightGrayWool),
            "CYAN_WOOL" => Some(MaterialEnum::CyanWool),
            "PURPLE_WOOL" => Some(MaterialEnum::PurpleWool),
            "BLUE_WOOL" => Some(MaterialEnum::BlueWool),
            "BROWN_WOOL" => Some(MaterialEnum::BrownWool),
            "GREEN_WOOL" => Some(MaterialEnum::GreenWool),
            "RED_WOOL" => Some(MaterialEnum::RedWool),
            "BLACK_WOOL" => Some(MaterialEnum::BlackWool),
            "DANDELION" => Some(MaterialEnum::Dandelion),
            "POPPY" => Some(MaterialEnum::Poppy),
            "BLUE_ORCHID" => Some(MaterialEnum::BlueOrchid),
            "ALLIUM" => Some(MaterialEnum::Allium),
            "AZURE_BLUET" => Some(MaterialEnum::AzureBluet),
            "RED_TULIP" => Some(MaterialEnum::RedTulip),
            "ORANGE_TULIP" => Some(MaterialEnum::OrangeTulip),
            "WHITE_TULIP" => Some(MaterialEnum::WhiteTulip),
            "PINK_TULIP" => Some(MaterialEnum::PinkTulip),
            "OXEYE_DAISY" => Some(MaterialEnum::OxeyeDaisy),
            "CORNFLOWER" => Some(MaterialEnum::Cornflower),
            "LILY_OF_THE_VALLEY" => Some(MaterialEnum::LilyOfTheValley),
            "WITHER_ROSE" => Some(MaterialEnum::WitherRose),
            "TORCHFLOWER" => Some(MaterialEnum::Torchflower),
            "PITCHER_PLANT" => Some(MaterialEnum::PitcherPlant),
            "SPORE_BLOSSOM" => Some(MaterialEnum::SporeBlossom),
            "BROWN_MUSHROOM" => Some(MaterialEnum::BrownMushroom),
            "RED_MUSHROOM" => Some(MaterialEnum::RedMushroom),
            "CRIMSON_FUNGUS" => Some(MaterialEnum::CrimsonFungus),
            "WARPED_FUNGUS" => Some(MaterialEnum::WarpedFungus),
            "CRIMSON_ROOTS" => Some(MaterialEnum::CrimsonRoots),
            "WARPED_ROOTS" => Some(MaterialEnum::WarpedRoots),
            "NETHER_SPROUTS" => Some(MaterialEnum::NetherSprouts),
            "WEEPING_VINES" => Some(MaterialEnum::WeepingVines),
            "TWISTING_VINES" => Some(MaterialEnum::TwistingVines),
            "SUGAR_CANE" => Some(MaterialEnum::SugarCane),
            "KELP" => Some(MaterialEnum::Kelp),
            "MOSS_CARPET" => Some(MaterialEnum::MossCarpet),
            "PINK_PETALS" => Some(MaterialEnum::PinkPetals),
            "MOSS_BLOCK" => Some(MaterialEnum::MossBlock),
            "HANGING_ROOTS" => Some(MaterialEnum::HangingRoots),
            "BIG_DRIPLEAF" => Some(MaterialEnum::BigDripleaf),
            "SMALL_DRIPLEAF" => Some(MaterialEnum::SmallDripleaf),
            "BAMBOO" => Some(MaterialEnum::Bamboo),
            "OAK_SLAB" => Some(MaterialEnum::OakSlab),
            "SPRUCE_SLAB" => Some(MaterialEnum::SpruceSlab),
            "BIRCH_SLAB" => Some(MaterialEnum::BirchSlab),
            "JUNGLE_SLAB" => Some(MaterialEnum::JungleSlab),
            "ACACIA_SLAB" => Some(MaterialEnum::AcaciaSlab),
            "CHERRY_SLAB" => Some(MaterialEnum::CherrySlab),
            "DARK_OAK_SLAB" => Some(MaterialEnum::DarkOakSlab),
            "MANGROVE_SLAB" => Some(MaterialEnum::MangroveSlab),
            "BAMBOO_SLAB" => Some(MaterialEnum::BambooSlab),
            "BAMBOO_MOSAIC_SLAB" => Some(MaterialEnum::BambooMosaicSlab),
            "CRIMSON_SLAB" => Some(MaterialEnum::CrimsonSlab),
            "WARPED_SLAB" => Some(MaterialEnum::WarpedSlab),
            "STONE_SLAB" => Some(MaterialEnum::StoneSlab),
            "SMOOTH_STONE_SLAB" => Some(MaterialEnum::SmoothStoneSlab),
            "SANDSTONE_SLAB" => Some(MaterialEnum::SandstoneSlab),
            "CUT_SANDSTONE_SLAB" => Some(MaterialEnum::CutSandstoneSlab),
            "PETRIFIED_OAK_SLAB" => Some(MaterialEnum::PetrifiedOakSlab),
            "COBBLESTONE_SLAB" => Some(MaterialEnum::CobblestoneSlab),
            "BRICK_SLAB" => Some(MaterialEnum::BrickSlab),
            "STONE_BRICK_SLAB" => Some(MaterialEnum::StoneBrickSlab),
            "MUD_BRICK_SLAB" => Some(MaterialEnum::MudBrickSlab),
            "NETHER_BRICK_SLAB" => Some(MaterialEnum::NetherBrickSlab),
            "QUARTZ_SLAB" => Some(MaterialEnum::QuartzSlab),
            "RED_SANDSTONE_SLAB" => Some(MaterialEnum::RedSandstoneSlab),
            "CUT_RED_SANDSTONE_SLAB" => Some(MaterialEnum::CutRedSandstoneSlab),
            "PURPUR_SLAB" => Some(MaterialEnum::PurpurSlab),
            "PRISMARINE_SLAB" => Some(MaterialEnum::PrismarineSlab),
            "PRISMARINE_BRICK_SLAB" => Some(MaterialEnum::PrismarineBrickSlab),
            "DARK_PRISMARINE_SLAB" => Some(MaterialEnum::DarkPrismarineSlab),
            "SMOOTH_QUARTZ" => Some(MaterialEnum::SmoothQuartz),
            "SMOOTH_RED_SANDSTONE" => Some(MaterialEnum::SmoothRedSandstone),
            "SMOOTH_SANDSTONE" => Some(MaterialEnum::SmoothSandstone),
            "SMOOTH_STONE" => Some(MaterialEnum::SmoothStone),
            "BRICKS" => Some(MaterialEnum::Bricks),
            "BOOKSHELF" => Some(MaterialEnum::Bookshelf),
            "CHISELED_BOOKSHELF" => Some(MaterialEnum::ChiseledBookshelf),
            "DECORATED_POT" => Some(MaterialEnum::DecoratedPot),
            "MOSSY_COBBLESTONE" => Some(MaterialEnum::MossyCobblestone),
            "OBSIDIAN" => Some(MaterialEnum::Obsidian),
            "TORCH" => Some(MaterialEnum::Torch),
            "END_ROD" => Some(MaterialEnum::EndRod),
            "CHORUS_PLANT" => Some(MaterialEnum::ChorusPlant),
            "CHORUS_FLOWER" => Some(MaterialEnum::ChorusFlower),
            "PURPUR_BLOCK" => Some(MaterialEnum::PurpurBlock),
            "PURPUR_PILLAR" => Some(MaterialEnum::PurpurPillar),
            "PURPUR_STAIRS" => Some(MaterialEnum::PurpurStairs),
            "SPAWNER" => Some(MaterialEnum::Spawner),
            "CHEST" => Some(MaterialEnum::Chest),
            "CRAFTING_TABLE" => Some(MaterialEnum::CraftingTable),
            "FARMLAND" => Some(MaterialEnum::Farmland),
            "FURNACE" => Some(MaterialEnum::Furnace),
            "LADDER" => Some(MaterialEnum::Ladder),
            "COBBLESTONE_STAIRS" => Some(MaterialEnum::CobblestoneStairs),
            "SNOW" => Some(MaterialEnum::Snow),
            "ICE" => Some(MaterialEnum::Ice),
            "SNOW_BLOCK" => Some(MaterialEnum::SnowBlock),
            "CACTUS" => Some(MaterialEnum::Cactus),
            "CLAY" => Some(MaterialEnum::Clay),
            "JUKEBOX" => Some(MaterialEnum::Jukebox),
            "OAK_FENCE" => Some(MaterialEnum::OakFence),
            "SPRUCE_FENCE" => Some(MaterialEnum::SpruceFence),
            "BIRCH_FENCE" => Some(MaterialEnum::BirchFence),
            "JUNGLE_FENCE" => Some(MaterialEnum::JungleFence),
            "ACACIA_FENCE" => Some(MaterialEnum::AcaciaFence),
            "CHERRY_FENCE" => Some(MaterialEnum::CherryFence),
            "DARK_OAK_FENCE" => Some(MaterialEnum::DarkOakFence),
            "MANGROVE_FENCE" => Some(MaterialEnum::MangroveFence),
            "BAMBOO_FENCE" => Some(MaterialEnum::BambooFence),
            "CRIMSON_FENCE" => Some(MaterialEnum::CrimsonFence),
            "WARPED_FENCE" => Some(MaterialEnum::WarpedFence),
            "PUMPKIN" => Some(MaterialEnum::Pumpkin),
            "CARVED_PUMPKIN" => Some(MaterialEnum::CarvedPumpkin),
            "JACK_O_LANTERN" => Some(MaterialEnum::JackOLantern),
            "NETHERRACK" => Some(MaterialEnum::Netherrack),
            "SOUL_SAND" => Some(MaterialEnum::SoulSand),
            "SOUL_SOIL" => Some(MaterialEnum::SoulSoil),
            "BASALT" => Some(MaterialEnum::Basalt),
            "POLISHED_BASALT" => Some(MaterialEnum::PolishedBasalt),
            "SMOOTH_BASALT" => Some(MaterialEnum::SmoothBasalt),
            "SOUL_TORCH" => Some(MaterialEnum::SoulTorch),
            "GLOWSTONE" => Some(MaterialEnum::Glowstone),
            "INFESTED_STONE" => Some(MaterialEnum::InfestedStone),
            "INFESTED_COBBLESTONE" => Some(MaterialEnum::InfestedCobblestone),
            "INFESTED_STONE_BRICKS" => Some(MaterialEnum::InfestedStoneBricks),
            "INFESTED_MOSSY_STONE_BRICKS" => Some(MaterialEnum::InfestedMossyStoneBricks),
            "INFESTED_CRACKED_STONE_BRICKS" => Some(MaterialEnum::InfestedCrackedStoneBricks),
            "INFESTED_CHISELED_STONE_BRICKS" => Some(MaterialEnum::InfestedChiseledStoneBricks),
            "INFESTED_DEEPSLATE" => Some(MaterialEnum::InfestedDeepslate),
            "STONE_BRICKS" => Some(MaterialEnum::StoneBricks),
            "MOSSY_STONE_BRICKS" => Some(MaterialEnum::MossyStoneBricks),
            "CRACKED_STONE_BRICKS" => Some(MaterialEnum::CrackedStoneBricks),
            "CHISELED_STONE_BRICKS" => Some(MaterialEnum::ChiseledStoneBricks),
            "PACKED_MUD" => Some(MaterialEnum::PackedMud),
            "MUD_BRICKS" => Some(MaterialEnum::MudBricks),
            "DEEPSLATE_BRICKS" => Some(MaterialEnum::DeepslateBricks),
            "CRACKED_DEEPSLATE_BRICKS" => Some(MaterialEnum::CrackedDeepslateBricks),
            "DEEPSLATE_TILES" => Some(MaterialEnum::DeepslateTiles),
            "CRACKED_DEEPSLATE_TILES" => Some(MaterialEnum::CrackedDeepslateTiles),
            "CHISELED_DEEPSLATE" => Some(MaterialEnum::ChiseledDeepslate),
            "REINFORCED_DEEPSLATE" => Some(MaterialEnum::ReinforcedDeepslate),
            "BROWN_MUSHROOM_BLOCK" => Some(MaterialEnum::BrownMushroomBlock),
            "RED_MUSHROOM_BLOCK" => Some(MaterialEnum::RedMushroomBlock),
            "MUSHROOM_STEM" => Some(MaterialEnum::MushroomStem),
            "IRON_BARS" => Some(MaterialEnum::IronBars),
            "CHAIN" => Some(MaterialEnum::Chain),
            "GLASS_PANE" => Some(MaterialEnum::GlassPane),
            "MELON" => Some(MaterialEnum::Melon),
            "VINE" => Some(MaterialEnum::Vine),
            "GLOW_LICHEN" => Some(MaterialEnum::GlowLichen),
            "BRICK_STAIRS" => Some(MaterialEnum::BrickStairs),
            "STONE_BRICK_STAIRS" => Some(MaterialEnum::StoneBrickStairs),
            "MUD_BRICK_STAIRS" => Some(MaterialEnum::MudBrickStairs),
            "MYCELIUM" => Some(MaterialEnum::Mycelium),
            "LILY_PAD" => Some(MaterialEnum::LilyPad),
            "NETHER_BRICKS" => Some(MaterialEnum::NetherBricks),
            "CRACKED_NETHER_BRICKS" => Some(MaterialEnum::CrackedNetherBricks),
            "CHISELED_NETHER_BRICKS" => Some(MaterialEnum::ChiseledNetherBricks),
            "NETHER_BRICK_FENCE" => Some(MaterialEnum::NetherBrickFence),
            "NETHER_BRICK_STAIRS" => Some(MaterialEnum::NetherBrickStairs),
            "SCULK" => Some(MaterialEnum::Sculk),
            "SCULK_VEIN" => Some(MaterialEnum::SculkVein),
            "SCULK_CATALYST" => Some(MaterialEnum::SculkCatalyst),
            "SCULK_SHRIEKER" => Some(MaterialEnum::SculkShrieker),
            "ENCHANTING_TABLE" => Some(MaterialEnum::EnchantingTable),
            "END_PORTAL_FRAME" => Some(MaterialEnum::EndPortalFrame),
            "END_STONE" => Some(MaterialEnum::EndStone),
            "END_STONE_BRICKS" => Some(MaterialEnum::EndStoneBricks),
            "DRAGON_EGG" => Some(MaterialEnum::DragonEgg),
            "SANDSTONE_STAIRS" => Some(MaterialEnum::SandstoneStairs),
            "ENDER_CHEST" => Some(MaterialEnum::EnderChest),
            "EMERALD_BLOCK" => Some(MaterialEnum::EmeraldBlock),
            "OAK_STAIRS" => Some(MaterialEnum::OakStairs),
            "SPRUCE_STAIRS" => Some(MaterialEnum::SpruceStairs),
            "BIRCH_STAIRS" => Some(MaterialEnum::BirchStairs),
            "JUNGLE_STAIRS" => Some(MaterialEnum::JungleStairs),
            "ACACIA_STAIRS" => Some(MaterialEnum::AcaciaStairs),
            "CHERRY_STAIRS" => Some(MaterialEnum::CherryStairs),
            "DARK_OAK_STAIRS" => Some(MaterialEnum::DarkOakStairs),
            "MANGROVE_STAIRS" => Some(MaterialEnum::MangroveStairs),
            "BAMBOO_STAIRS" => Some(MaterialEnum::BambooStairs),
            "BAMBOO_MOSAIC_STAIRS" => Some(MaterialEnum::BambooMosaicStairs),
            "CRIMSON_STAIRS" => Some(MaterialEnum::CrimsonStairs),
            "WARPED_STAIRS" => Some(MaterialEnum::WarpedStairs),
            "COMMAND_BLOCK" => Some(MaterialEnum::CommandBlock),
            "BEACON" => Some(MaterialEnum::Beacon),
            "COBBLESTONE_WALL" => Some(MaterialEnum::CobblestoneWall),
            "MOSSY_COBBLESTONE_WALL" => Some(MaterialEnum::MossyCobblestoneWall),
            "BRICK_WALL" => Some(MaterialEnum::BrickWall),
            "PRISMARINE_WALL" => Some(MaterialEnum::PrismarineWall),
            "RED_SANDSTONE_WALL" => Some(MaterialEnum::RedSandstoneWall),
            "MOSSY_STONE_BRICK_WALL" => Some(MaterialEnum::MossyStoneBrickWall),
            "GRANITE_WALL" => Some(MaterialEnum::GraniteWall),
            "STONE_BRICK_WALL" => Some(MaterialEnum::StoneBrickWall),
            "MUD_BRICK_WALL" => Some(MaterialEnum::MudBrickWall),
            "NETHER_BRICK_WALL" => Some(MaterialEnum::NetherBrickWall),
            "ANDESITE_WALL" => Some(MaterialEnum::AndesiteWall),
            "RED_NETHER_BRICK_WALL" => Some(MaterialEnum::RedNetherBrickWall),
            "SANDSTONE_WALL" => Some(MaterialEnum::SandstoneWall),
            "END_STONE_BRICK_WALL" => Some(MaterialEnum::EndStoneBrickWall),
            "DIORITE_WALL" => Some(MaterialEnum::DioriteWall),
            "BLACKSTONE_WALL" => Some(MaterialEnum::BlackstoneWall),
            "POLISHED_BLACKSTONE_WALL" => Some(MaterialEnum::PolishedBlackstoneWall),
            "POLISHED_BLACKSTONE_BRICK_WALL" => Some(MaterialEnum::PolishedBlackstoneBrickWall),
            "COBBLED_DEEPSLATE_WALL" => Some(MaterialEnum::CobbledDeepslateWall),
            "POLISHED_DEEPSLATE_WALL" => Some(MaterialEnum::PolishedDeepslateWall),
            "DEEPSLATE_BRICK_WALL" => Some(MaterialEnum::DeepslateBrickWall),
            "DEEPSLATE_TILE_WALL" => Some(MaterialEnum::DeepslateTileWall),
            "ANVIL" => Some(MaterialEnum::Anvil),
            "CHIPPED_ANVIL" => Some(MaterialEnum::ChippedAnvil),
            "DAMAGED_ANVIL" => Some(MaterialEnum::DamagedAnvil),
            "CHISELED_QUARTZ_BLOCK" => Some(MaterialEnum::ChiseledQuartzBlock),
            "QUARTZ_BLOCK" => Some(MaterialEnum::QuartzBlock),
            "QUARTZ_BRICKS" => Some(MaterialEnum::QuartzBricks),
            "QUARTZ_PILLAR" => Some(MaterialEnum::QuartzPillar),
            "QUARTZ_STAIRS" => Some(MaterialEnum::QuartzStairs),
            "WHITE_TERRACOTTA" => Some(MaterialEnum::WhiteTerracotta),
            "ORANGE_TERRACOTTA" => Some(MaterialEnum::OrangeTerracotta),
            "MAGENTA_TERRACOTTA" => Some(MaterialEnum::MagentaTerracotta),
            "LIGHT_BLUE_TERRACOTTA" => Some(MaterialEnum::LightBlueTerracotta),
            "YELLOW_TERRACOTTA" => Some(MaterialEnum::YellowTerracotta),
            "LIME_TERRACOTTA" => Some(MaterialEnum::LimeTerracotta),
            "PINK_TERRACOTTA" => Some(MaterialEnum::PinkTerracotta),
            "GRAY_TERRACOTTA" => Some(MaterialEnum::GrayTerracotta),
            "LIGHT_GRAY_TERRACOTTA" => Some(MaterialEnum::LightGrayTerracotta),
            "CYAN_TERRACOTTA" => Some(MaterialEnum::CyanTerracotta),
            "PURPLE_TERRACOTTA" => Some(MaterialEnum::PurpleTerracotta),
            "BLUE_TERRACOTTA" => Some(MaterialEnum::BlueTerracotta),
            "BROWN_TERRACOTTA" => Some(MaterialEnum::BrownTerracotta),
            "GREEN_TERRACOTTA" => Some(MaterialEnum::GreenTerracotta),
            "RED_TERRACOTTA" => Some(MaterialEnum::RedTerracotta),
            "BLACK_TERRACOTTA" => Some(MaterialEnum::BlackTerracotta),
            "BARRIER" => Some(MaterialEnum::Barrier),
            "LIGHT" => Some(MaterialEnum::Light),
            "HAY_BLOCK" => Some(MaterialEnum::HayBlock),
            "WHITE_CARPET" => Some(MaterialEnum::WhiteCarpet),
            "ORANGE_CARPET" => Some(MaterialEnum::OrangeCarpet),
            "MAGENTA_CARPET" => Some(MaterialEnum::MagentaCarpet),
            "LIGHT_BLUE_CARPET" => Some(MaterialEnum::LightBlueCarpet),
            "YELLOW_CARPET" => Some(MaterialEnum::YellowCarpet),
            "LIME_CARPET" => Some(MaterialEnum::LimeCarpet),
            "PINK_CARPET" => Some(MaterialEnum::PinkCarpet),
            "GRAY_CARPET" => Some(MaterialEnum::GrayCarpet),
            "LIGHT_GRAY_CARPET" => Some(MaterialEnum::LightGrayCarpet),
            "CYAN_CARPET" => Some(MaterialEnum::CyanCarpet),
            "PURPLE_CARPET" => Some(MaterialEnum::PurpleCarpet),
            "BLUE_CARPET" => Some(MaterialEnum::BlueCarpet),
            "BROWN_CARPET" => Some(MaterialEnum::BrownCarpet),
            "GREEN_CARPET" => Some(MaterialEnum::GreenCarpet),
            "RED_CARPET" => Some(MaterialEnum::RedCarpet),
            "BLACK_CARPET" => Some(MaterialEnum::BlackCarpet),
            "TERRACOTTA" => Some(MaterialEnum::Terracotta),
            "PACKED_ICE" => Some(MaterialEnum::PackedIce),
            "DIRT_PATH" => Some(MaterialEnum::DirtPath),
            "SUNFLOWER" => Some(MaterialEnum::Sunflower),
            "LILAC" => Some(MaterialEnum::Lilac),
            "ROSE_BUSH" => Some(MaterialEnum::RoseBush),
            "PEONY" => Some(MaterialEnum::Peony),
            "TALL_GRASS" => Some(MaterialEnum::TallGrass),
            "LARGE_FERN" => Some(MaterialEnum::LargeFern),
            "WHITE_STAINED_GLASS" => Some(MaterialEnum::WhiteStainedGlass),
            "ORANGE_STAINED_GLASS" => Some(MaterialEnum::OrangeStainedGlass),
            "MAGENTA_STAINED_GLASS" => Some(MaterialEnum::MagentaStainedGlass),
            "LIGHT_BLUE_STAINED_GLASS" => Some(MaterialEnum::LightBlueStainedGlass),
            "YELLOW_STAINED_GLASS" => Some(MaterialEnum::YellowStainedGlass),
            "LIME_STAINED_GLASS" => Some(MaterialEnum::LimeStainedGlass),
            "PINK_STAINED_GLASS" => Some(MaterialEnum::PinkStainedGlass),
            "GRAY_STAINED_GLASS" => Some(MaterialEnum::GrayStainedGlass),
            "LIGHT_GRAY_STAINED_GLASS" => Some(MaterialEnum::LightGrayStainedGlass),
            "CYAN_STAINED_GLASS" => Some(MaterialEnum::CyanStainedGlass),
            "PURPLE_STAINED_GLASS" => Some(MaterialEnum::PurpleStainedGlass),
            "BLUE_STAINED_GLASS" => Some(MaterialEnum::BlueStainedGlass),
            "BROWN_STAINED_GLASS" => Some(MaterialEnum::BrownStainedGlass),
            "GREEN_STAINED_GLASS" => Some(MaterialEnum::GreenStainedGlass),
            "RED_STAINED_GLASS" => Some(MaterialEnum::RedStainedGlass),
            "BLACK_STAINED_GLASS" => Some(MaterialEnum::BlackStainedGlass),
            "WHITE_STAINED_GLASS_PANE" => Some(MaterialEnum::WhiteStainedGlassPane),
            "ORANGE_STAINED_GLASS_PANE" => Some(MaterialEnum::OrangeStainedGlassPane),
            "MAGENTA_STAINED_GLASS_PANE" => Some(MaterialEnum::MagentaStainedGlassPane),
            "LIGHT_BLUE_STAINED_GLASS_PANE" => Some(MaterialEnum::LightBlueStainedGlassPane),
            "YELLOW_STAINED_GLASS_PANE" => Some(MaterialEnum::YellowStainedGlassPane),
            "LIME_STAINED_GLASS_PANE" => Some(MaterialEnum::LimeStainedGlassPane),
            "PINK_STAINED_GLASS_PANE" => Some(MaterialEnum::PinkStainedGlassPane),
            "GRAY_STAINED_GLASS_PANE" => Some(MaterialEnum::GrayStainedGlassPane),
            "LIGHT_GRAY_STAINED_GLASS_PANE" => Some(MaterialEnum::LightGrayStainedGlassPane),
            "CYAN_STAINED_GLASS_PANE" => Some(MaterialEnum::CyanStainedGlassPane),
            "PURPLE_STAINED_GLASS_PANE" => Some(MaterialEnum::PurpleStainedGlassPane),
            "BLUE_STAINED_GLASS_PANE" => Some(MaterialEnum::BlueStainedGlassPane),
            "BROWN_STAINED_GLASS_PANE" => Some(MaterialEnum::BrownStainedGlassPane),
            "GREEN_STAINED_GLASS_PANE" => Some(MaterialEnum::GreenStainedGlassPane),
            "RED_STAINED_GLASS_PANE" => Some(MaterialEnum::RedStainedGlassPane),
            "BLACK_STAINED_GLASS_PANE" => Some(MaterialEnum::BlackStainedGlassPane),
            "PRISMARINE" => Some(MaterialEnum::Prismarine),
            "PRISMARINE_BRICKS" => Some(MaterialEnum::PrismarineBricks),
            "DARK_PRISMARINE" => Some(MaterialEnum::DarkPrismarine),
            "PRISMARINE_STAIRS" => Some(MaterialEnum::PrismarineStairs),
            "PRISMARINE_BRICK_STAIRS" => Some(MaterialEnum::PrismarineBrickStairs),
            "DARK_PRISMARINE_STAIRS" => Some(MaterialEnum::DarkPrismarineStairs),
            "SEA_LANTERN" => Some(MaterialEnum::SeaLantern),
            "RED_SANDSTONE" => Some(MaterialEnum::RedSandstone),
            "CHISELED_RED_SANDSTONE" => Some(MaterialEnum::ChiseledRedSandstone),
            "CUT_RED_SANDSTONE" => Some(MaterialEnum::CutRedSandstone),
            "RED_SANDSTONE_STAIRS" => Some(MaterialEnum::RedSandstoneStairs),
            "REPEATING_COMMAND_BLOCK" => Some(MaterialEnum::RepeatingCommandBlock),
            "CHAIN_COMMAND_BLOCK" => Some(MaterialEnum::ChainCommandBlock),
            "MAGMA_BLOCK" => Some(MaterialEnum::MagmaBlock),
            "NETHER_WART_BLOCK" => Some(MaterialEnum::NetherWartBlock),
            "WARPED_WART_BLOCK" => Some(MaterialEnum::WarpedWartBlock),
            "RED_NETHER_BRICKS" => Some(MaterialEnum::RedNetherBricks),
            "BONE_BLOCK" => Some(MaterialEnum::BoneBlock),
            "STRUCTURE_VOID" => Some(MaterialEnum::StructureVoid),
            "SHULKER_BOX" => Some(MaterialEnum::ShulkerBox),
            "WHITE_SHULKER_BOX" => Some(MaterialEnum::WhiteShulkerBox),
            "ORANGE_SHULKER_BOX" => Some(MaterialEnum::OrangeShulkerBox),
            "MAGENTA_SHULKER_BOX" => Some(MaterialEnum::MagentaShulkerBox),
            "LIGHT_BLUE_SHULKER_BOX" => Some(MaterialEnum::LightBlueShulkerBox),
            "YELLOW_SHULKER_BOX" => Some(MaterialEnum::YellowShulkerBox),
            "LIME_SHULKER_BOX" => Some(MaterialEnum::LimeShulkerBox),
            "PINK_SHULKER_BOX" => Some(MaterialEnum::PinkShulkerBox),
            "GRAY_SHULKER_BOX" => Some(MaterialEnum::GrayShulkerBox),
            "LIGHT_GRAY_SHULKER_BOX" => Some(MaterialEnum::LightGrayShulkerBox),
            "CYAN_SHULKER_BOX" => Some(MaterialEnum::CyanShulkerBox),
            "PURPLE_SHULKER_BOX" => Some(MaterialEnum::PurpleShulkerBox),
            "BLUE_SHULKER_BOX" => Some(MaterialEnum::BlueShulkerBox),
            "BROWN_SHULKER_BOX" => Some(MaterialEnum::BrownShulkerBox),
            "GREEN_SHULKER_BOX" => Some(MaterialEnum::GreenShulkerBox),
            "RED_SHULKER_BOX" => Some(MaterialEnum::RedShulkerBox),
            "BLACK_SHULKER_BOX" => Some(MaterialEnum::BlackShulkerBox),
            "WHITE_GLAZED_TERRACOTTA" => Some(MaterialEnum::WhiteGlazedTerracotta),
            "ORANGE_GLAZED_TERRACOTTA" => Some(MaterialEnum::OrangeGlazedTerracotta),
            "MAGENTA_GLAZED_TERRACOTTA" => Some(MaterialEnum::MagentaGlazedTerracotta),
            "LIGHT_BLUE_GLAZED_TERRACOTTA" => Some(MaterialEnum::LightBlueGlazedTerracotta),
            "YELLOW_GLAZED_TERRACOTTA" => Some(MaterialEnum::YellowGlazedTerracotta),
            "LIME_GLAZED_TERRACOTTA" => Some(MaterialEnum::LimeGlazedTerracotta),
            "PINK_GLAZED_TERRACOTTA" => Some(MaterialEnum::PinkGlazedTerracotta),
            "GRAY_GLAZED_TERRACOTTA" => Some(MaterialEnum::GrayGlazedTerracotta),
            "LIGHT_GRAY_GLAZED_TERRACOTTA" => Some(MaterialEnum::LightGrayGlazedTerracotta),
            "CYAN_GLAZED_TERRACOTTA" => Some(MaterialEnum::CyanGlazedTerracotta),
            "PURPLE_GLAZED_TERRACOTTA" => Some(MaterialEnum::PurpleGlazedTerracotta),
            "BLUE_GLAZED_TERRACOTTA" => Some(MaterialEnum::BlueGlazedTerracotta),
            "BROWN_GLAZED_TERRACOTTA" => Some(MaterialEnum::BrownGlazedTerracotta),
            "GREEN_GLAZED_TERRACOTTA" => Some(MaterialEnum::GreenGlazedTerracotta),
            "RED_GLAZED_TERRACOTTA" => Some(MaterialEnum::RedGlazedTerracotta),
            "BLACK_GLAZED_TERRACOTTA" => Some(MaterialEnum::BlackGlazedTerracotta),
            "WHITE_CONCRETE" => Some(MaterialEnum::WhiteConcrete),
            "ORANGE_CONCRETE" => Some(MaterialEnum::OrangeConcrete),
            "MAGENTA_CONCRETE" => Some(MaterialEnum::MagentaConcrete),
            "LIGHT_BLUE_CONCRETE" => Some(MaterialEnum::LightBlueConcrete),
            "YELLOW_CONCRETE" => Some(MaterialEnum::YellowConcrete),
            "LIME_CONCRETE" => Some(MaterialEnum::LimeConcrete),
            "PINK_CONCRETE" => Some(MaterialEnum::PinkConcrete),
            "GRAY_CONCRETE" => Some(MaterialEnum::GrayConcrete),
            "LIGHT_GRAY_CONCRETE" => Some(MaterialEnum::LightGrayConcrete),
            "CYAN_CONCRETE" => Some(MaterialEnum::CyanConcrete),
            "PURPLE_CONCRETE" => Some(MaterialEnum::PurpleConcrete),
            "BLUE_CONCRETE" => Some(MaterialEnum::BlueConcrete),
            "BROWN_CONCRETE" => Some(MaterialEnum::BrownConcrete),
            "GREEN_CONCRETE" => Some(MaterialEnum::GreenConcrete),
            "RED_CONCRETE" => Some(MaterialEnum::RedConcrete),
            "BLACK_CONCRETE" => Some(MaterialEnum::BlackConcrete),
            "WHITE_CONCRETE_POWDER" => Some(MaterialEnum::WhiteConcretePowder),
            "ORANGE_CONCRETE_POWDER" => Some(MaterialEnum::OrangeConcretePowder),
            "MAGENTA_CONCRETE_POWDER" => Some(MaterialEnum::MagentaConcretePowder),
            "LIGHT_BLUE_CONCRETE_POWDER" => Some(MaterialEnum::LightBlueConcretePowder),
            "YELLOW_CONCRETE_POWDER" => Some(MaterialEnum::YellowConcretePowder),
            "LIME_CONCRETE_POWDER" => Some(MaterialEnum::LimeConcretePowder),
            "PINK_CONCRETE_POWDER" => Some(MaterialEnum::PinkConcretePowder),
            "GRAY_CONCRETE_POWDER" => Some(MaterialEnum::GrayConcretePowder),
            "LIGHT_GRAY_CONCRETE_POWDER" => Some(MaterialEnum::LightGrayConcretePowder),
            "CYAN_CONCRETE_POWDER" => Some(MaterialEnum::CyanConcretePowder),
            "PURPLE_CONCRETE_POWDER" => Some(MaterialEnum::PurpleConcretePowder),
            "BLUE_CONCRETE_POWDER" => Some(MaterialEnum::BlueConcretePowder),
            "BROWN_CONCRETE_POWDER" => Some(MaterialEnum::BrownConcretePowder),
            "GREEN_CONCRETE_POWDER" => Some(MaterialEnum::GreenConcretePowder),
            "RED_CONCRETE_POWDER" => Some(MaterialEnum::RedConcretePowder),
            "BLACK_CONCRETE_POWDER" => Some(MaterialEnum::BlackConcretePowder),
            "TURTLE_EGG" => Some(MaterialEnum::TurtleEgg),
            "SNIFFER_EGG" => Some(MaterialEnum::SnifferEgg),
            "DEAD_TUBE_CORAL_BLOCK" => Some(MaterialEnum::DeadTubeCoralBlock),
            "DEAD_BRAIN_CORAL_BLOCK" => Some(MaterialEnum::DeadBrainCoralBlock),
            "DEAD_BUBBLE_CORAL_BLOCK" => Some(MaterialEnum::DeadBubbleCoralBlock),
            "DEAD_FIRE_CORAL_BLOCK" => Some(MaterialEnum::DeadFireCoralBlock),
            "DEAD_HORN_CORAL_BLOCK" => Some(MaterialEnum::DeadHornCoralBlock),
            "TUBE_CORAL_BLOCK" => Some(MaterialEnum::TubeCoralBlock),
            "BRAIN_CORAL_BLOCK" => Some(MaterialEnum::BrainCoralBlock),
            "BUBBLE_CORAL_BLOCK" => Some(MaterialEnum::BubbleCoralBlock),
            "FIRE_CORAL_BLOCK" => Some(MaterialEnum::FireCoralBlock),
            "HORN_CORAL_BLOCK" => Some(MaterialEnum::HornCoralBlock),
            "TUBE_CORAL" => Some(MaterialEnum::TubeCoral),
            "BRAIN_CORAL" => Some(MaterialEnum::BrainCoral),
            "BUBBLE_CORAL" => Some(MaterialEnum::BubbleCoral),
            "FIRE_CORAL" => Some(MaterialEnum::FireCoral),
            "HORN_CORAL" => Some(MaterialEnum::HornCoral),
            "DEAD_BRAIN_CORAL" => Some(MaterialEnum::DeadBrainCoral),
            "DEAD_BUBBLE_CORAL" => Some(MaterialEnum::DeadBubbleCoral),
            "DEAD_FIRE_CORAL" => Some(MaterialEnum::DeadFireCoral),
            "DEAD_HORN_CORAL" => Some(MaterialEnum::DeadHornCoral),
            "DEAD_TUBE_CORAL" => Some(MaterialEnum::DeadTubeCoral),
            "TUBE_CORAL_FAN" => Some(MaterialEnum::TubeCoralFan),
            "BRAIN_CORAL_FAN" => Some(MaterialEnum::BrainCoralFan),
            "BUBBLE_CORAL_FAN" => Some(MaterialEnum::BubbleCoralFan),
            "FIRE_CORAL_FAN" => Some(MaterialEnum::FireCoralFan),
            "HORN_CORAL_FAN" => Some(MaterialEnum::HornCoralFan),
            "DEAD_TUBE_CORAL_FAN" => Some(MaterialEnum::DeadTubeCoralFan),
            "DEAD_BRAIN_CORAL_FAN" => Some(MaterialEnum::DeadBrainCoralFan),
            "DEAD_BUBBLE_CORAL_FAN" => Some(MaterialEnum::DeadBubbleCoralFan),
            "DEAD_FIRE_CORAL_FAN" => Some(MaterialEnum::DeadFireCoralFan),
            "DEAD_HORN_CORAL_FAN" => Some(MaterialEnum::DeadHornCoralFan),
            "BLUE_ICE" => Some(MaterialEnum::BlueIce),
            "CONDUIT" => Some(MaterialEnum::Conduit),
            "POLISHED_GRANITE_STAIRS" => Some(MaterialEnum::PolishedGraniteStairs),
            "SMOOTH_RED_SANDSTONE_STAIRS" => Some(MaterialEnum::SmoothRedSandstoneStairs),
            "MOSSY_STONE_BRICK_STAIRS" => Some(MaterialEnum::MossyStoneBrickStairs),
            "POLISHED_DIORITE_STAIRS" => Some(MaterialEnum::PolishedDioriteStairs),
            "MOSSY_COBBLESTONE_STAIRS" => Some(MaterialEnum::MossyCobblestoneStairs),
            "END_STONE_BRICK_STAIRS" => Some(MaterialEnum::EndStoneBrickStairs),
            "STONE_STAIRS" => Some(MaterialEnum::StoneStairs),
            "SMOOTH_SANDSTONE_STAIRS" => Some(MaterialEnum::SmoothSandstoneStairs),
            "SMOOTH_QUARTZ_STAIRS" => Some(MaterialEnum::SmoothQuartzStairs),
            "GRANITE_STAIRS" => Some(MaterialEnum::GraniteStairs),
            "ANDESITE_STAIRS" => Some(MaterialEnum::AndesiteStairs),
            "RED_NETHER_BRICK_STAIRS" => Some(MaterialEnum::RedNetherBrickStairs),
            "POLISHED_ANDESITE_STAIRS" => Some(MaterialEnum::PolishedAndesiteStairs),
            "DIORITE_STAIRS" => Some(MaterialEnum::DioriteStairs),
            "COBBLED_DEEPSLATE_STAIRS" => Some(MaterialEnum::CobbledDeepslateStairs),
            "POLISHED_DEEPSLATE_STAIRS" => Some(MaterialEnum::PolishedDeepslateStairs),
            "DEEPSLATE_BRICK_STAIRS" => Some(MaterialEnum::DeepslateBrickStairs),
            "DEEPSLATE_TILE_STAIRS" => Some(MaterialEnum::DeepslateTileStairs),
            "POLISHED_GRANITE_SLAB" => Some(MaterialEnum::PolishedGraniteSlab),
            "SMOOTH_RED_SANDSTONE_SLAB" => Some(MaterialEnum::SmoothRedSandstoneSlab),
            "MOSSY_STONE_BRICK_SLAB" => Some(MaterialEnum::MossyStoneBrickSlab),
            "POLISHED_DIORITE_SLAB" => Some(MaterialEnum::PolishedDioriteSlab),
            "MOSSY_COBBLESTONE_SLAB" => Some(MaterialEnum::MossyCobblestoneSlab),
            "END_STONE_BRICK_SLAB" => Some(MaterialEnum::EndStoneBrickSlab),
            "SMOOTH_SANDSTONE_SLAB" => Some(MaterialEnum::SmoothSandstoneSlab),
            "SMOOTH_QUARTZ_SLAB" => Some(MaterialEnum::SmoothQuartzSlab),
            "GRANITE_SLAB" => Some(MaterialEnum::GraniteSlab),
            "ANDESITE_SLAB" => Some(MaterialEnum::AndesiteSlab),
            "RED_NETHER_BRICK_SLAB" => Some(MaterialEnum::RedNetherBrickSlab),
            "POLISHED_ANDESITE_SLAB" => Some(MaterialEnum::PolishedAndesiteSlab),
            "DIORITE_SLAB" => Some(MaterialEnum::DioriteSlab),
            "COBBLED_DEEPSLATE_SLAB" => Some(MaterialEnum::CobbledDeepslateSlab),
            "POLISHED_DEEPSLATE_SLAB" => Some(MaterialEnum::PolishedDeepslateSlab),
            "DEEPSLATE_BRICK_SLAB" => Some(MaterialEnum::DeepslateBrickSlab),
            "DEEPSLATE_TILE_SLAB" => Some(MaterialEnum::DeepslateTileSlab),
            "SCAFFOLDING" => Some(MaterialEnum::Scaffolding),
            "REDSTONE" => Some(MaterialEnum::Redstone),
            "REDSTONE_TORCH" => Some(MaterialEnum::RedstoneTorch),
            "REDSTONE_BLOCK" => Some(MaterialEnum::RedstoneBlock),
            "REPEATER" => Some(MaterialEnum::Repeater),
            "COMPARATOR" => Some(MaterialEnum::Comparator),
            "PISTON" => Some(MaterialEnum::Piston),
            "STICKY_PISTON" => Some(MaterialEnum::StickyPiston),
            "SLIME_BLOCK" => Some(MaterialEnum::SlimeBlock),
            "HONEY_BLOCK" => Some(MaterialEnum::HoneyBlock),
            "OBSERVER" => Some(MaterialEnum::Observer),
            "HOPPER" => Some(MaterialEnum::Hopper),
            "DISPENSER" => Some(MaterialEnum::Dispenser),
            "DROPPER" => Some(MaterialEnum::Dropper),
            "LECTERN" => Some(MaterialEnum::Lectern),
            "TARGET" => Some(MaterialEnum::Target),
            "LEVER" => Some(MaterialEnum::Lever),
            "LIGHTNING_ROD" => Some(MaterialEnum::LightningRod),
            "DAYLIGHT_DETECTOR" => Some(MaterialEnum::DaylightDetector),
            "SCULK_SENSOR" => Some(MaterialEnum::SculkSensor),
            "CALIBRATED_SCULK_SENSOR" => Some(MaterialEnum::CalibratedSculkSensor),
            "TRIPWIRE_HOOK" => Some(MaterialEnum::TripwireHook),
            "TRAPPED_CHEST" => Some(MaterialEnum::TrappedChest),
            "TNT" => Some(MaterialEnum::Tnt),
            "REDSTONE_LAMP" => Some(MaterialEnum::RedstoneLamp),
            "NOTE_BLOCK" => Some(MaterialEnum::NoteBlock),
            "STONE_BUTTON" => Some(MaterialEnum::StoneButton),
            "POLISHED_BLACKSTONE_BUTTON" => Some(MaterialEnum::PolishedBlackstoneButton),
            "OAK_BUTTON" => Some(MaterialEnum::OakButton),
            "SPRUCE_BUTTON" => Some(MaterialEnum::SpruceButton),
            "BIRCH_BUTTON" => Some(MaterialEnum::BirchButton),
            "JUNGLE_BUTTON" => Some(MaterialEnum::JungleButton),
            "ACACIA_BUTTON" => Some(MaterialEnum::AcaciaButton),
            "CHERRY_BUTTON" => Some(MaterialEnum::CherryButton),
            "DARK_OAK_BUTTON" => Some(MaterialEnum::DarkOakButton),
            "MANGROVE_BUTTON" => Some(MaterialEnum::MangroveButton),
            "BAMBOO_BUTTON" => Some(MaterialEnum::BambooButton),
            "CRIMSON_BUTTON" => Some(MaterialEnum::CrimsonButton),
            "WARPED_BUTTON" => Some(MaterialEnum::WarpedButton),
            "STONE_PRESSURE_PLATE" => Some(MaterialEnum::StonePressurePlate),
            "POLISHED_BLACKSTONE_PRESSURE_PLATE" => {
                Some(MaterialEnum::PolishedBlackstonePressurePlate)
            }
            "LIGHT_WEIGHTED_PRESSURE_PLATE" => Some(MaterialEnum::LightWeightedPressurePlate),
            "HEAVY_WEIGHTED_PRESSURE_PLATE" => Some(MaterialEnum::HeavyWeightedPressurePlate),
            "OAK_PRESSURE_PLATE" => Some(MaterialEnum::OakPressurePlate),
            "SPRUCE_PRESSURE_PLATE" => Some(MaterialEnum::SprucePressurePlate),
            "BIRCH_PRESSURE_PLATE" => Some(MaterialEnum::BirchPressurePlate),
            "JUNGLE_PRESSURE_PLATE" => Some(MaterialEnum::JunglePressurePlate),
            "ACACIA_PRESSURE_PLATE" => Some(MaterialEnum::AcaciaPressurePlate),
            "CHERRY_PRESSURE_PLATE" => Some(MaterialEnum::CherryPressurePlate),
            "DARK_OAK_PRESSURE_PLATE" => Some(MaterialEnum::DarkOakPressurePlate),
            "MANGROVE_PRESSURE_PLATE" => Some(MaterialEnum::MangrovePressurePlate),
            "BAMBOO_PRESSURE_PLATE" => Some(MaterialEnum::BambooPressurePlate),
            "CRIMSON_PRESSURE_PLATE" => Some(MaterialEnum::CrimsonPressurePlate),
            "WARPED_PRESSURE_PLATE" => Some(MaterialEnum::WarpedPressurePlate),
            "IRON_DOOR" => Some(MaterialEnum::IronDoor),
            "OAK_DOOR" => Some(MaterialEnum::OakDoor),
            "SPRUCE_DOOR" => Some(MaterialEnum::SpruceDoor),
            "BIRCH_DOOR" => Some(MaterialEnum::BirchDoor),
            "JUNGLE_DOOR" => Some(MaterialEnum::JungleDoor),
            "ACACIA_DOOR" => Some(MaterialEnum::AcaciaDoor),
            "CHERRY_DOOR" => Some(MaterialEnum::CherryDoor),
            "DARK_OAK_DOOR" => Some(MaterialEnum::DarkOakDoor),
            "MANGROVE_DOOR" => Some(MaterialEnum::MangroveDoor),
            "BAMBOO_DOOR" => Some(MaterialEnum::BambooDoor),
            "CRIMSON_DOOR" => Some(MaterialEnum::CrimsonDoor),
            "WARPED_DOOR" => Some(MaterialEnum::WarpedDoor),
            "IRON_TRAPDOOR" => Some(MaterialEnum::IronTrapdoor),
            "OAK_TRAPDOOR" => Some(MaterialEnum::OakTrapdoor),
            "SPRUCE_TRAPDOOR" => Some(MaterialEnum::SpruceTrapdoor),
            "BIRCH_TRAPDOOR" => Some(MaterialEnum::BirchTrapdoor),
            "JUNGLE_TRAPDOOR" => Some(MaterialEnum::JungleTrapdoor),
            "ACACIA_TRAPDOOR" => Some(MaterialEnum::AcaciaTrapdoor),
            "CHERRY_TRAPDOOR" => Some(MaterialEnum::CherryTrapdoor),
            "DARK_OAK_TRAPDOOR" => Some(MaterialEnum::DarkOakTrapdoor),
            "MANGROVE_TRAPDOOR" => Some(MaterialEnum::MangroveTrapdoor),
            "BAMBOO_TRAPDOOR" => Some(MaterialEnum::BambooTrapdoor),
            "CRIMSON_TRAPDOOR" => Some(MaterialEnum::CrimsonTrapdoor),
            "WARPED_TRAPDOOR" => Some(MaterialEnum::WarpedTrapdoor),
            "OAK_FENCE_GATE" => Some(MaterialEnum::OakFenceGate),
            "SPRUCE_FENCE_GATE" => Some(MaterialEnum::SpruceFenceGate),
            "BIRCH_FENCE_GATE" => Some(MaterialEnum::BirchFenceGate),
            "JUNGLE_FENCE_GATE" => Some(MaterialEnum::JungleFenceGate),
            "ACACIA_FENCE_GATE" => Some(MaterialEnum::AcaciaFenceGate),
            "CHERRY_FENCE_GATE" => Some(MaterialEnum::CherryFenceGate),
            "DARK_OAK_FENCE_GATE" => Some(MaterialEnum::DarkOakFenceGate),
            "MANGROVE_FENCE_GATE" => Some(MaterialEnum::MangroveFenceGate),
            "BAMBOO_FENCE_GATE" => Some(MaterialEnum::BambooFenceGate),
            "CRIMSON_FENCE_GATE" => Some(MaterialEnum::CrimsonFenceGate),
            "WARPED_FENCE_GATE" => Some(MaterialEnum::WarpedFenceGate),
            "POWERED_RAIL" => Some(MaterialEnum::PoweredRail),
            "DETECTOR_RAIL" => Some(MaterialEnum::DetectorRail),
            "RAIL" => Some(MaterialEnum::Rail),
            "ACTIVATOR_RAIL" => Some(MaterialEnum::ActivatorRail),
            "SADDLE" => Some(MaterialEnum::Saddle),
            "MINECART" => Some(MaterialEnum::Minecart),
            "CHEST_MINECART" => Some(MaterialEnum::ChestMinecart),
            "FURNACE_MINECART" => Some(MaterialEnum::FurnaceMinecart),
            "TNT_MINECART" => Some(MaterialEnum::TntMinecart),
            "HOPPER_MINECART" => Some(MaterialEnum::HopperMinecart),
            "CARROT_ON_A_STICK" => Some(MaterialEnum::CarrotOnAStick),
            "WARPED_FUNGUS_ON_A_STICK" => Some(MaterialEnum::WarpedFungusOnAStick),
            "ELYTRA" => Some(MaterialEnum::Elytra),
            "OAK_BOAT" => Some(MaterialEnum::OakBoat),
            "OAK_CHEST_BOAT" => Some(MaterialEnum::OakChestBoat),
            "SPRUCE_BOAT" => Some(MaterialEnum::SpruceBoat),
            "SPRUCE_CHEST_BOAT" => Some(MaterialEnum::SpruceChestBoat),
            "BIRCH_BOAT" => Some(MaterialEnum::BirchBoat),
            "BIRCH_CHEST_BOAT" => Some(MaterialEnum::BirchChestBoat),
            "JUNGLE_BOAT" => Some(MaterialEnum::JungleBoat),
            "JUNGLE_CHEST_BOAT" => Some(MaterialEnum::JungleChestBoat),
            "ACACIA_BOAT" => Some(MaterialEnum::AcaciaBoat),
            "ACACIA_CHEST_BOAT" => Some(MaterialEnum::AcaciaChestBoat),
            "CHERRY_BOAT" => Some(MaterialEnum::CherryBoat),
            "CHERRY_CHEST_BOAT" => Some(MaterialEnum::CherryChestBoat),
            "DARK_OAK_BOAT" => Some(MaterialEnum::DarkOakBoat),
            "DARK_OAK_CHEST_BOAT" => Some(MaterialEnum::DarkOakChestBoat),
            "MANGROVE_BOAT" => Some(MaterialEnum::MangroveBoat),
            "MANGROVE_CHEST_BOAT" => Some(MaterialEnum::MangroveChestBoat),
            "BAMBOO_RAFT" => Some(MaterialEnum::BambooRaft),
            "BAMBOO_CHEST_RAFT" => Some(MaterialEnum::BambooChestRaft),
            "STRUCTURE_BLOCK" => Some(MaterialEnum::StructureBlock),
            "JIGSAW" => Some(MaterialEnum::Jigsaw),
            "TURTLE_HELMET" => Some(MaterialEnum::TurtleHelmet),
            "SCUTE" => Some(MaterialEnum::Scute),
            "FLINT_AND_STEEL" => Some(MaterialEnum::FlintAndSteel),
            "APPLE" => Some(MaterialEnum::Apple),
            "BOW" => Some(MaterialEnum::Bow),
            "ARROW" => Some(MaterialEnum::Arrow),
            "COAL" => Some(MaterialEnum::Coal),
            "CHARCOAL" => Some(MaterialEnum::Charcoal),
            "DIAMOND" => Some(MaterialEnum::Diamond),
            "EMERALD" => Some(MaterialEnum::Emerald),
            "LAPIS_LAZULI" => Some(MaterialEnum::LapisLazuli),
            "QUARTZ" => Some(MaterialEnum::Quartz),
            "AMETHYST_SHARD" => Some(MaterialEnum::AmethystShard),
            "RAW_IRON" => Some(MaterialEnum::RawIron),
            "IRON_INGOT" => Some(MaterialEnum::IronIngot),
            "RAW_COPPER" => Some(MaterialEnum::RawCopper),
            "COPPER_INGOT" => Some(MaterialEnum::CopperIngot),
            "RAW_GOLD" => Some(MaterialEnum::RawGold),
            "GOLD_INGOT" => Some(MaterialEnum::GoldIngot),
            "NETHERITE_INGOT" => Some(MaterialEnum::NetheriteIngot),
            "NETHERITE_SCRAP" => Some(MaterialEnum::NetheriteScrap),
            "WOODEN_SWORD" => Some(MaterialEnum::WoodenSword),
            "WOODEN_SHOVEL" => Some(MaterialEnum::WoodenShovel),
            "WOODEN_PICKAXE" => Some(MaterialEnum::WoodenPickaxe),
            "WOODEN_AXE" => Some(MaterialEnum::WoodenAxe),
            "WOODEN_HOE" => Some(MaterialEnum::WoodenHoe),
            "STONE_SWORD" => Some(MaterialEnum::StoneSword),
            "STONE_SHOVEL" => Some(MaterialEnum::StoneShovel),
            "STONE_PICKAXE" => Some(MaterialEnum::StonePickaxe),
            "STONE_AXE" => Some(MaterialEnum::StoneAxe),
            "STONE_HOE" => Some(MaterialEnum::StoneHoe),
            "GOLDEN_SWORD" => Some(MaterialEnum::GoldenSword),
            "GOLDEN_SHOVEL" => Some(MaterialEnum::GoldenShovel),
            "GOLDEN_PICKAXE" => Some(MaterialEnum::GoldenPickaxe),
            "GOLDEN_AXE" => Some(MaterialEnum::GoldenAxe),
            "GOLDEN_HOE" => Some(MaterialEnum::GoldenHoe),
            "IRON_SWORD" => Some(MaterialEnum::IronSword),
            "IRON_SHOVEL" => Some(MaterialEnum::IronShovel),
            "IRON_PICKAXE" => Some(MaterialEnum::IronPickaxe),
            "IRON_AXE" => Some(MaterialEnum::IronAxe),
            "IRON_HOE" => Some(MaterialEnum::IronHoe),
            "DIAMOND_SWORD" => Some(MaterialEnum::DiamondSword),
            "DIAMOND_SHOVEL" => Some(MaterialEnum::DiamondShovel),
            "DIAMOND_PICKAXE" => Some(MaterialEnum::DiamondPickaxe),
            "DIAMOND_AXE" => Some(MaterialEnum::DiamondAxe),
            "DIAMOND_HOE" => Some(MaterialEnum::DiamondHoe),
            "NETHERITE_SWORD" => Some(MaterialEnum::NetheriteSword),
            "NETHERITE_SHOVEL" => Some(MaterialEnum::NetheriteShovel),
            "NETHERITE_PICKAXE" => Some(MaterialEnum::NetheritePickaxe),
            "NETHERITE_AXE" => Some(MaterialEnum::NetheriteAxe),
            "NETHERITE_HOE" => Some(MaterialEnum::NetheriteHoe),
            "STICK" => Some(MaterialEnum::Stick),
            "BOWL" => Some(MaterialEnum::Bowl),
            "MUSHROOM_STEW" => Some(MaterialEnum::MushroomStew),
            "STRING" => Some(MaterialEnum::String),
            "FEATHER" => Some(MaterialEnum::Feather),
            "GUNPOWDER" => Some(MaterialEnum::Gunpowder),
            "WHEAT_SEEDS" => Some(MaterialEnum::WheatSeeds),
            "WHEAT" => Some(MaterialEnum::Wheat),
            "BREAD" => Some(MaterialEnum::Bread),
            "LEATHER_HELMET" => Some(MaterialEnum::LeatherHelmet),
            "LEATHER_CHESTPLATE" => Some(MaterialEnum::LeatherChestplate),
            "LEATHER_LEGGINGS" => Some(MaterialEnum::LeatherLeggings),
            "LEATHER_BOOTS" => Some(MaterialEnum::LeatherBoots),
            "CHAINMAIL_HELMET" => Some(MaterialEnum::ChainmailHelmet),
            "CHAINMAIL_CHESTPLATE" => Some(MaterialEnum::ChainmailChestplate),
            "CHAINMAIL_LEGGINGS" => Some(MaterialEnum::ChainmailLeggings),
            "CHAINMAIL_BOOTS" => Some(MaterialEnum::ChainmailBoots),
            "IRON_HELMET" => Some(MaterialEnum::IronHelmet),
            "IRON_CHESTPLATE" => Some(MaterialEnum::IronChestplate),
            "IRON_LEGGINGS" => Some(MaterialEnum::IronLeggings),
            "IRON_BOOTS" => Some(MaterialEnum::IronBoots),
            "DIAMOND_HELMET" => Some(MaterialEnum::DiamondHelmet),
            "DIAMOND_CHESTPLATE" => Some(MaterialEnum::DiamondChestplate),
            "DIAMOND_LEGGINGS" => Some(MaterialEnum::DiamondLeggings),
            "DIAMOND_BOOTS" => Some(MaterialEnum::DiamondBoots),
            "GOLDEN_HELMET" => Some(MaterialEnum::GoldenHelmet),
            "GOLDEN_CHESTPLATE" => Some(MaterialEnum::GoldenChestplate),
            "GOLDEN_LEGGINGS" => Some(MaterialEnum::GoldenLeggings),
            "GOLDEN_BOOTS" => Some(MaterialEnum::GoldenBoots),
            "NETHERITE_HELMET" => Some(MaterialEnum::NetheriteHelmet),
            "NETHERITE_CHESTPLATE" => Some(MaterialEnum::NetheriteChestplate),
            "NETHERITE_LEGGINGS" => Some(MaterialEnum::NetheriteLeggings),
            "NETHERITE_BOOTS" => Some(MaterialEnum::NetheriteBoots),
            "FLINT" => Some(MaterialEnum::Flint),
            "PORKCHOP" => Some(MaterialEnum::Porkchop),
            "COOKED_PORKCHOP" => Some(MaterialEnum::CookedPorkchop),
            "PAINTING" => Some(MaterialEnum::Painting),
            "GOLDEN_APPLE" => Some(MaterialEnum::GoldenApple),
            "ENCHANTED_GOLDEN_APPLE" => Some(MaterialEnum::EnchantedGoldenApple),
            "OAK_SIGN" => Some(MaterialEnum::OakSign),
            "SPRUCE_SIGN" => Some(MaterialEnum::SpruceSign),
            "BIRCH_SIGN" => Some(MaterialEnum::BirchSign),
            "JUNGLE_SIGN" => Some(MaterialEnum::JungleSign),
            "ACACIA_SIGN" => Some(MaterialEnum::AcaciaSign),
            "CHERRY_SIGN" => Some(MaterialEnum::CherrySign),
            "DARK_OAK_SIGN" => Some(MaterialEnum::DarkOakSign),
            "MANGROVE_SIGN" => Some(MaterialEnum::MangroveSign),
            "BAMBOO_SIGN" => Some(MaterialEnum::BambooSign),
            "CRIMSON_SIGN" => Some(MaterialEnum::CrimsonSign),
            "WARPED_SIGN" => Some(MaterialEnum::WarpedSign),
            "OAK_HANGING_SIGN" => Some(MaterialEnum::OakHangingSign),
            "SPRUCE_HANGING_SIGN" => Some(MaterialEnum::SpruceHangingSign),
            "BIRCH_HANGING_SIGN" => Some(MaterialEnum::BirchHangingSign),
            "JUNGLE_HANGING_SIGN" => Some(MaterialEnum::JungleHangingSign),
            "ACACIA_HANGING_SIGN" => Some(MaterialEnum::AcaciaHangingSign),
            "CHERRY_HANGING_SIGN" => Some(MaterialEnum::CherryHangingSign),
            "DARK_OAK_HANGING_SIGN" => Some(MaterialEnum::DarkOakHangingSign),
            "MANGROVE_HANGING_SIGN" => Some(MaterialEnum::MangroveHangingSign),
            "BAMBOO_HANGING_SIGN" => Some(MaterialEnum::BambooHangingSign),
            "CRIMSON_HANGING_SIGN" => Some(MaterialEnum::CrimsonHangingSign),
            "WARPED_HANGING_SIGN" => Some(MaterialEnum::WarpedHangingSign),
            "BUCKET" => Some(MaterialEnum::Bucket),
            "WATER_BUCKET" => Some(MaterialEnum::WaterBucket),
            "LAVA_BUCKET" => Some(MaterialEnum::LavaBucket),
            "POWDER_SNOW_BUCKET" => Some(MaterialEnum::PowderSnowBucket),
            "SNOWBALL" => Some(MaterialEnum::Snowball),
            "LEATHER" => Some(MaterialEnum::Leather),
            "MILK_BUCKET" => Some(MaterialEnum::MilkBucket),
            "PUFFERFISH_BUCKET" => Some(MaterialEnum::PufferfishBucket),
            "SALMON_BUCKET" => Some(MaterialEnum::SalmonBucket),
            "COD_BUCKET" => Some(MaterialEnum::CodBucket),
            "TROPICAL_FISH_BUCKET" => Some(MaterialEnum::TropicalFishBucket),
            "AXOLOTL_BUCKET" => Some(MaterialEnum::AxolotlBucket),
            "TADPOLE_BUCKET" => Some(MaterialEnum::TadpoleBucket),
            "BRICK" => Some(MaterialEnum::Brick),
            "CLAY_BALL" => Some(MaterialEnum::ClayBall),
            "DRIED_KELP_BLOCK" => Some(MaterialEnum::DriedKelpBlock),
            "PAPER" => Some(MaterialEnum::Paper),
            "BOOK" => Some(MaterialEnum::Book),
            "SLIME_BALL" => Some(MaterialEnum::SlimeBall),
            "EGG" => Some(MaterialEnum::Egg),
            "COMPASS" => Some(MaterialEnum::Compass),
            "RECOVERY_COMPASS" => Some(MaterialEnum::RecoveryCompass),
            "BUNDLE" => Some(MaterialEnum::Bundle),
            "FISHING_ROD" => Some(MaterialEnum::FishingRod),
            "CLOCK" => Some(MaterialEnum::Clock),
            "SPYGLASS" => Some(MaterialEnum::Spyglass),
            "GLOWSTONE_DUST" => Some(MaterialEnum::GlowstoneDust),
            "COD" => Some(MaterialEnum::Cod),
            "SALMON" => Some(MaterialEnum::Salmon),
            "TROPICAL_FISH" => Some(MaterialEnum::TropicalFish),
            "PUFFERFISH" => Some(MaterialEnum::Pufferfish),
            "COOKED_COD" => Some(MaterialEnum::CookedCod),
            "COOKED_SALMON" => Some(MaterialEnum::CookedSalmon),
            "INK_SAC" => Some(MaterialEnum::InkSac),
            "GLOW_INK_SAC" => Some(MaterialEnum::GlowInkSac),
            "COCOA_BEANS" => Some(MaterialEnum::CocoaBeans),
            "WHITE_DYE" => Some(MaterialEnum::WhiteDye),
            "ORANGE_DYE" => Some(MaterialEnum::OrangeDye),
            "MAGENTA_DYE" => Some(MaterialEnum::MagentaDye),
            "LIGHT_BLUE_DYE" => Some(MaterialEnum::LightBlueDye),
            "YELLOW_DYE" => Some(MaterialEnum::YellowDye),
            "LIME_DYE" => Some(MaterialEnum::LimeDye),
            "PINK_DYE" => Some(MaterialEnum::PinkDye),
            "GRAY_DYE" => Some(MaterialEnum::GrayDye),
            "LIGHT_GRAY_DYE" => Some(MaterialEnum::LightGrayDye),
            "CYAN_DYE" => Some(MaterialEnum::CyanDye),
            "PURPLE_DYE" => Some(MaterialEnum::PurpleDye),
            "BLUE_DYE" => Some(MaterialEnum::BlueDye),
            "BROWN_DYE" => Some(MaterialEnum::BrownDye),
            "GREEN_DYE" => Some(MaterialEnum::GreenDye),
            "RED_DYE" => Some(MaterialEnum::RedDye),
            "BLACK_DYE" => Some(MaterialEnum::BlackDye),
            "BONE_MEAL" => Some(MaterialEnum::BoneMeal),
            "BONE" => Some(MaterialEnum::Bone),
            "SUGAR" => Some(MaterialEnum::Sugar),
            "CAKE" => Some(MaterialEnum::Cake),
            "WHITE_BED" => Some(MaterialEnum::WhiteBed),
            "ORANGE_BED" => Some(MaterialEnum::OrangeBed),
            "MAGENTA_BED" => Some(MaterialEnum::MagentaBed),
            "LIGHT_BLUE_BED" => Some(MaterialEnum::LightBlueBed),
            "YELLOW_BED" => Some(MaterialEnum::YellowBed),
            "LIME_BED" => Some(MaterialEnum::LimeBed),
            "PINK_BED" => Some(MaterialEnum::PinkBed),
            "GRAY_BED" => Some(MaterialEnum::GrayBed),
            "LIGHT_GRAY_BED" => Some(MaterialEnum::LightGrayBed),
            "CYAN_BED" => Some(MaterialEnum::CyanBed),
            "PURPLE_BED" => Some(MaterialEnum::PurpleBed),
            "BLUE_BED" => Some(MaterialEnum::BlueBed),
            "BROWN_BED" => Some(MaterialEnum::BrownBed),
            "GREEN_BED" => Some(MaterialEnum::GreenBed),
            "RED_BED" => Some(MaterialEnum::RedBed),
            "BLACK_BED" => Some(MaterialEnum::BlackBed),
            "COOKIE" => Some(MaterialEnum::Cookie),
            "FILLED_MAP" => Some(MaterialEnum::FilledMap),
            "SHEARS" => Some(MaterialEnum::Shears),
            "MELON_SLICE" => Some(MaterialEnum::MelonSlice),
            "DRIED_KELP" => Some(MaterialEnum::DriedKelp),
            "PUMPKIN_SEEDS" => Some(MaterialEnum::PumpkinSeeds),
            "MELON_SEEDS" => Some(MaterialEnum::MelonSeeds),
            "BEEF" => Some(MaterialEnum::Beef),
            "COOKED_BEEF" => Some(MaterialEnum::CookedBeef),
            "CHICKEN" => Some(MaterialEnum::Chicken),
            "COOKED_CHICKEN" => Some(MaterialEnum::CookedChicken),
            "ROTTEN_FLESH" => Some(MaterialEnum::RottenFlesh),
            "ENDER_PEARL" => Some(MaterialEnum::EnderPearl),
            "BLAZE_ROD" => Some(MaterialEnum::BlazeRod),
            "GHAST_TEAR" => Some(MaterialEnum::GhastTear),
            "GOLD_NUGGET" => Some(MaterialEnum::GoldNugget),
            "NETHER_WART" => Some(MaterialEnum::NetherWart),
            "POTION" => Some(MaterialEnum::Potion),
            "GLASS_BOTTLE" => Some(MaterialEnum::GlassBottle),
            "SPIDER_EYE" => Some(MaterialEnum::SpiderEye),
            "FERMENTED_SPIDER_EYE" => Some(MaterialEnum::FermentedSpiderEye),
            "BLAZE_POWDER" => Some(MaterialEnum::BlazePowder),
            "MAGMA_CREAM" => Some(MaterialEnum::MagmaCream),
            "BREWING_STAND" => Some(MaterialEnum::BrewingStand),
            "CAULDRON" => Some(MaterialEnum::Cauldron),
            "ENDER_EYE" => Some(MaterialEnum::EnderEye),
            "GLISTERING_MELON_SLICE" => Some(MaterialEnum::GlisteringMelonSlice),
            "ALLAY_SPAWN_EGG" => Some(MaterialEnum::AllaySpawnEgg),
            "AXOLOTL_SPAWN_EGG" => Some(MaterialEnum::AxolotlSpawnEgg),
            "BAT_SPAWN_EGG" => Some(MaterialEnum::BatSpawnEgg),
            "BEE_SPAWN_EGG" => Some(MaterialEnum::BeeSpawnEgg),
            "BLAZE_SPAWN_EGG" => Some(MaterialEnum::BlazeSpawnEgg),
            "CAT_SPAWN_EGG" => Some(MaterialEnum::CatSpawnEgg),
            "CAMEL_SPAWN_EGG" => Some(MaterialEnum::CamelSpawnEgg),
            "CAVE_SPIDER_SPAWN_EGG" => Some(MaterialEnum::CaveSpiderSpawnEgg),
            "CHICKEN_SPAWN_EGG" => Some(MaterialEnum::ChickenSpawnEgg),
            "COD_SPAWN_EGG" => Some(MaterialEnum::CodSpawnEgg),
            "COW_SPAWN_EGG" => Some(MaterialEnum::CowSpawnEgg),
            "CREEPER_SPAWN_EGG" => Some(MaterialEnum::CreeperSpawnEgg),
            "DOLPHIN_SPAWN_EGG" => Some(MaterialEnum::DolphinSpawnEgg),
            "DONKEY_SPAWN_EGG" => Some(MaterialEnum::DonkeySpawnEgg),
            "DROWNED_SPAWN_EGG" => Some(MaterialEnum::DrownedSpawnEgg),
            "ELDER_GUARDIAN_SPAWN_EGG" => Some(MaterialEnum::ElderGuardianSpawnEgg),
            "ENDER_DRAGON_SPAWN_EGG" => Some(MaterialEnum::EnderDragonSpawnEgg),
            "ENDERMAN_SPAWN_EGG" => Some(MaterialEnum::EndermanSpawnEgg),
            "ENDERMITE_SPAWN_EGG" => Some(MaterialEnum::EndermiteSpawnEgg),
            "EVOKER_SPAWN_EGG" => Some(MaterialEnum::EvokerSpawnEgg),
            "FOX_SPAWN_EGG" => Some(MaterialEnum::FoxSpawnEgg),
            "FROG_SPAWN_EGG" => Some(MaterialEnum::FrogSpawnEgg),
            "GHAST_SPAWN_EGG" => Some(MaterialEnum::GhastSpawnEgg),
            "GLOW_SQUID_SPAWN_EGG" => Some(MaterialEnum::GlowSquidSpawnEgg),
            "GOAT_SPAWN_EGG" => Some(MaterialEnum::GoatSpawnEgg),
            "GUARDIAN_SPAWN_EGG" => Some(MaterialEnum::GuardianSpawnEgg),
            "HOGLIN_SPAWN_EGG" => Some(MaterialEnum::HoglinSpawnEgg),
            "HORSE_SPAWN_EGG" => Some(MaterialEnum::HorseSpawnEgg),
            "HUSK_SPAWN_EGG" => Some(MaterialEnum::HuskSpawnEgg),
            "IRON_GOLEM_SPAWN_EGG" => Some(MaterialEnum::IronGolemSpawnEgg),
            "LLAMA_SPAWN_EGG" => Some(MaterialEnum::LlamaSpawnEgg),
            "MAGMA_CUBE_SPAWN_EGG" => Some(MaterialEnum::MagmaCubeSpawnEgg),
            "MOOSHROOM_SPAWN_EGG" => Some(MaterialEnum::MooshroomSpawnEgg),
            "MULE_SPAWN_EGG" => Some(MaterialEnum::MuleSpawnEgg),
            "OCELOT_SPAWN_EGG" => Some(MaterialEnum::OcelotSpawnEgg),
            "PANDA_SPAWN_EGG" => Some(MaterialEnum::PandaSpawnEgg),
            "PARROT_SPAWN_EGG" => Some(MaterialEnum::ParrotSpawnEgg),
            "PHANTOM_SPAWN_EGG" => Some(MaterialEnum::PhantomSpawnEgg),
            "PIG_SPAWN_EGG" => Some(MaterialEnum::PigSpawnEgg),
            "PIGLIN_SPAWN_EGG" => Some(MaterialEnum::PiglinSpawnEgg),
            "PIGLIN_BRUTE_SPAWN_EGG" => Some(MaterialEnum::PiglinBruteSpawnEgg),
            "PILLAGER_SPAWN_EGG" => Some(MaterialEnum::PillagerSpawnEgg),
            "POLAR_BEAR_SPAWN_EGG" => Some(MaterialEnum::PolarBearSpawnEgg),
            "PUFFERFISH_SPAWN_EGG" => Some(MaterialEnum::PufferfishSpawnEgg),
            "RABBIT_SPAWN_EGG" => Some(MaterialEnum::RabbitSpawnEgg),
            "RAVAGER_SPAWN_EGG" => Some(MaterialEnum::RavagerSpawnEgg),
            "SALMON_SPAWN_EGG" => Some(MaterialEnum::SalmonSpawnEgg),
            "SHEEP_SPAWN_EGG" => Some(MaterialEnum::SheepSpawnEgg),
            "SHULKER_SPAWN_EGG" => Some(MaterialEnum::ShulkerSpawnEgg),
            "SILVERFISH_SPAWN_EGG" => Some(MaterialEnum::SilverfishSpawnEgg),
            "SKELETON_SPAWN_EGG" => Some(MaterialEnum::SkeletonSpawnEgg),
            "SKELETON_HORSE_SPAWN_EGG" => Some(MaterialEnum::SkeletonHorseSpawnEgg),
            "SLIME_SPAWN_EGG" => Some(MaterialEnum::SlimeSpawnEgg),
            "SNIFFER_SPAWN_EGG" => Some(MaterialEnum::SnifferSpawnEgg),
            "SNOW_GOLEM_SPAWN_EGG" => Some(MaterialEnum::SnowGolemSpawnEgg),
            "SPIDER_SPAWN_EGG" => Some(MaterialEnum::SpiderSpawnEgg),
            "SQUID_SPAWN_EGG" => Some(MaterialEnum::SquidSpawnEgg),
            "STRAY_SPAWN_EGG" => Some(MaterialEnum::StraySpawnEgg),
            "STRIDER_SPAWN_EGG" => Some(MaterialEnum::StriderSpawnEgg),
            "TADPOLE_SPAWN_EGG" => Some(MaterialEnum::TadpoleSpawnEgg),
            "TRADER_LLAMA_SPAWN_EGG" => Some(MaterialEnum::TraderLlamaSpawnEgg),
            "TROPICAL_FISH_SPAWN_EGG" => Some(MaterialEnum::TropicalFishSpawnEgg),
            "TURTLE_SPAWN_EGG" => Some(MaterialEnum::TurtleSpawnEgg),
            "VEX_SPAWN_EGG" => Some(MaterialEnum::VexSpawnEgg),
            "VILLAGER_SPAWN_EGG" => Some(MaterialEnum::VillagerSpawnEgg),
            "VINDICATOR_SPAWN_EGG" => Some(MaterialEnum::VindicatorSpawnEgg),
            "WANDERING_TRADER_SPAWN_EGG" => Some(MaterialEnum::WanderingTraderSpawnEgg),
            "WARDEN_SPAWN_EGG" => Some(MaterialEnum::WardenSpawnEgg),
            "WITCH_SPAWN_EGG" => Some(MaterialEnum::WitchSpawnEgg),
            "WITHER_SPAWN_EGG" => Some(MaterialEnum::WitherSpawnEgg),
            "WITHER_SKELETON_SPAWN_EGG" => Some(MaterialEnum::WitherSkeletonSpawnEgg),
            "WOLF_SPAWN_EGG" => Some(MaterialEnum::WolfSpawnEgg),
            "ZOGLIN_SPAWN_EGG" => Some(MaterialEnum::ZoglinSpawnEgg),
            "ZOMBIE_SPAWN_EGG" => Some(MaterialEnum::ZombieSpawnEgg),
            "ZOMBIE_HORSE_SPAWN_EGG" => Some(MaterialEnum::ZombieHorseSpawnEgg),
            "ZOMBIE_VILLAGER_SPAWN_EGG" => Some(MaterialEnum::ZombieVillagerSpawnEgg),
            "ZOMBIFIED_PIGLIN_SPAWN_EGG" => Some(MaterialEnum::ZombifiedPiglinSpawnEgg),
            "EXPERIENCE_BOTTLE" => Some(MaterialEnum::ExperienceBottle),
            "FIRE_CHARGE" => Some(MaterialEnum::FireCharge),
            "WRITABLE_BOOK" => Some(MaterialEnum::WritableBook),
            "WRITTEN_BOOK" => Some(MaterialEnum::WrittenBook),
            "ITEM_FRAME" => Some(MaterialEnum::ItemFrame),
            "GLOW_ITEM_FRAME" => Some(MaterialEnum::GlowItemFrame),
            "FLOWER_POT" => Some(MaterialEnum::FlowerPot),
            "CARROT" => Some(MaterialEnum::Carrot),
            "POTATO" => Some(MaterialEnum::Potato),
            "BAKED_POTATO" => Some(MaterialEnum::BakedPotato),
            "POISONOUS_POTATO" => Some(MaterialEnum::PoisonousPotato),
            "MAP" => Some(MaterialEnum::Map),
            "GOLDEN_CARROT" => Some(MaterialEnum::GoldenCarrot),
            "SKELETON_SKULL" => Some(MaterialEnum::SkeletonSkull),
            "WITHER_SKELETON_SKULL" => Some(MaterialEnum::WitherSkeletonSkull),
            "PLAYER_HEAD" => Some(MaterialEnum::PlayerHead),
            "ZOMBIE_HEAD" => Some(MaterialEnum::ZombieHead),
            "CREEPER_HEAD" => Some(MaterialEnum::CreeperHead),
            "DRAGON_HEAD" => Some(MaterialEnum::DragonHead),
            "PIGLIN_HEAD" => Some(MaterialEnum::PiglinHead),
            "NETHER_STAR" => Some(MaterialEnum::NetherStar),
            "PUMPKIN_PIE" => Some(MaterialEnum::PumpkinPie),
            "FIREWORK_ROCKET" => Some(MaterialEnum::FireworkRocket),
            "FIREWORK_STAR" => Some(MaterialEnum::FireworkStar),
            "ENCHANTED_BOOK" => Some(MaterialEnum::EnchantedBook),
            "NETHER_BRICK" => Some(MaterialEnum::NetherBrick),
            "PRISMARINE_SHARD" => Some(MaterialEnum::PrismarineShard),
            "PRISMARINE_CRYSTALS" => Some(MaterialEnum::PrismarineCrystals),
            "RABBIT" => Some(MaterialEnum::Rabbit),
            "COOKED_RABBIT" => Some(MaterialEnum::CookedRabbit),
            "RABBIT_STEW" => Some(MaterialEnum::RabbitStew),
            "RABBIT_FOOT" => Some(MaterialEnum::RabbitFoot),
            "RABBIT_HIDE" => Some(MaterialEnum::RabbitHide),
            "ARMOR_STAND" => Some(MaterialEnum::ArmorStand),
            "IRON_HORSE_ARMOR" => Some(MaterialEnum::IronHorseArmor),
            "GOLDEN_HORSE_ARMOR" => Some(MaterialEnum::GoldenHorseArmor),
            "DIAMOND_HORSE_ARMOR" => Some(MaterialEnum::DiamondHorseArmor),
            "LEATHER_HORSE_ARMOR" => Some(MaterialEnum::LeatherHorseArmor),
            "LEAD" => Some(MaterialEnum::Lead),
            "NAME_TAG" => Some(MaterialEnum::NameTag),
            "COMMAND_BLOCK_MINECART" => Some(MaterialEnum::CommandBlockMinecart),
            "MUTTON" => Some(MaterialEnum::Mutton),
            "COOKED_MUTTON" => Some(MaterialEnum::CookedMutton),
            "WHITE_BANNER" => Some(MaterialEnum::WhiteBanner),
            "ORANGE_BANNER" => Some(MaterialEnum::OrangeBanner),
            "MAGENTA_BANNER" => Some(MaterialEnum::MagentaBanner),
            "LIGHT_BLUE_BANNER" => Some(MaterialEnum::LightBlueBanner),
            "YELLOW_BANNER" => Some(MaterialEnum::YellowBanner),
            "LIME_BANNER" => Some(MaterialEnum::LimeBanner),
            "PINK_BANNER" => Some(MaterialEnum::PinkBanner),
            "GRAY_BANNER" => Some(MaterialEnum::GrayBanner),
            "LIGHT_GRAY_BANNER" => Some(MaterialEnum::LightGrayBanner),
            "CYAN_BANNER" => Some(MaterialEnum::CyanBanner),
            "PURPLE_BANNER" => Some(MaterialEnum::PurpleBanner),
            "BLUE_BANNER" => Some(MaterialEnum::BlueBanner),
            "BROWN_BANNER" => Some(MaterialEnum::BrownBanner),
            "GREEN_BANNER" => Some(MaterialEnum::GreenBanner),
            "RED_BANNER" => Some(MaterialEnum::RedBanner),
            "BLACK_BANNER" => Some(MaterialEnum::BlackBanner),
            "END_CRYSTAL" => Some(MaterialEnum::EndCrystal),
            "CHORUS_FRUIT" => Some(MaterialEnum::ChorusFruit),
            "POPPED_CHORUS_FRUIT" => Some(MaterialEnum::PoppedChorusFruit),
            "TORCHFLOWER_SEEDS" => Some(MaterialEnum::TorchflowerSeeds),
            "PITCHER_POD" => Some(MaterialEnum::PitcherPod),
            "BEETROOT" => Some(MaterialEnum::Beetroot),
            "BEETROOT_SEEDS" => Some(MaterialEnum::BeetrootSeeds),
            "BEETROOT_SOUP" => Some(MaterialEnum::BeetrootSoup),
            "DRAGON_BREATH" => Some(MaterialEnum::DragonBreath),
            "SPLASH_POTION" => Some(MaterialEnum::SplashPotion),
            "SPECTRAL_ARROW" => Some(MaterialEnum::SpectralArrow),
            "TIPPED_ARROW" => Some(MaterialEnum::TippedArrow),
            "LINGERING_POTION" => Some(MaterialEnum::LingeringPotion),
            "SHIELD" => Some(MaterialEnum::Shield),
            "TOTEM_OF_UNDYING" => Some(MaterialEnum::TotemOfUndying),
            "SHULKER_SHELL" => Some(MaterialEnum::ShulkerShell),
            "IRON_NUGGET" => Some(MaterialEnum::IronNugget),
            "KNOWLEDGE_BOOK" => Some(MaterialEnum::KnowledgeBook),
            "DEBUG_STICK" => Some(MaterialEnum::DebugStick),
            "MUSIC_DISC_13" => Some(MaterialEnum::MusicDisc13),
            "MUSIC_DISC_CAT" => Some(MaterialEnum::MusicDiscCat),
            "MUSIC_DISC_BLOCKS" => Some(MaterialEnum::MusicDiscBlocks),
            "MUSIC_DISC_CHIRP" => Some(MaterialEnum::MusicDiscChirp),
            "MUSIC_DISC_FAR" => Some(MaterialEnum::MusicDiscFar),
            "MUSIC_DISC_MALL" => Some(MaterialEnum::MusicDiscMall),
            "MUSIC_DISC_MELLOHI" => Some(MaterialEnum::MusicDiscMellohi),
            "MUSIC_DISC_STAL" => Some(MaterialEnum::MusicDiscStal),
            "MUSIC_DISC_STRAD" => Some(MaterialEnum::MusicDiscStrad),
            "MUSIC_DISC_WARD" => Some(MaterialEnum::MusicDiscWard),
            "MUSIC_DISC_11" => Some(MaterialEnum::MusicDisc11),
            "MUSIC_DISC_WAIT" => Some(MaterialEnum::MusicDiscWait),
            "MUSIC_DISC_OTHERSIDE" => Some(MaterialEnum::MusicDiscOtherside),
            "MUSIC_DISC_RELIC" => Some(MaterialEnum::MusicDiscRelic),
            "MUSIC_DISC_5" => Some(MaterialEnum::MusicDisc5),
            "MUSIC_DISC_PIGSTEP" => Some(MaterialEnum::MusicDiscPigstep),
            "DISC_FRAGMENT_5" => Some(MaterialEnum::DiscFragment5),
            "TRIDENT" => Some(MaterialEnum::Trident),
            "PHANTOM_MEMBRANE" => Some(MaterialEnum::PhantomMembrane),
            "NAUTILUS_SHELL" => Some(MaterialEnum::NautilusShell),
            "HEART_OF_THE_SEA" => Some(MaterialEnum::HeartOfTheSea),
            "CROSSBOW" => Some(MaterialEnum::Crossbow),
            "SUSPICIOUS_STEW" => Some(MaterialEnum::SuspiciousStew),
            "LOOM" => Some(MaterialEnum::Loom),
            "FLOWER_BANNER_PATTERN" => Some(MaterialEnum::FlowerBannerPattern),
            "CREEPER_BANNER_PATTERN" => Some(MaterialEnum::CreeperBannerPattern),
            "SKULL_BANNER_PATTERN" => Some(MaterialEnum::SkullBannerPattern),
            "MOJANG_BANNER_PATTERN" => Some(MaterialEnum::MojangBannerPattern),
            "GLOBE_BANNER_PATTERN" => Some(MaterialEnum::GlobeBannerPattern),
            "PIGLIN_BANNER_PATTERN" => Some(MaterialEnum::PiglinBannerPattern),
            "GOAT_HORN" => Some(MaterialEnum::GoatHorn),
            "COMPOSTER" => Some(MaterialEnum::Composter),
            "BARREL" => Some(MaterialEnum::Barrel),
            "SMOKER" => Some(MaterialEnum::Smoker),
            "BLAST_FURNACE" => Some(MaterialEnum::BlastFurnace),
            "CARTOGRAPHY_TABLE" => Some(MaterialEnum::CartographyTable),
            "FLETCHING_TABLE" => Some(MaterialEnum::FletchingTable),
            "GRINDSTONE" => Some(MaterialEnum::Grindstone),
            "SMITHING_TABLE" => Some(MaterialEnum::SmithingTable),
            "STONECUTTER" => Some(MaterialEnum::Stonecutter),
            "BELL" => Some(MaterialEnum::Bell),
            "LANTERN" => Some(MaterialEnum::Lantern),
            "SOUL_LANTERN" => Some(MaterialEnum::SoulLantern),
            "SWEET_BERRIES" => Some(MaterialEnum::SweetBerries),
            "GLOW_BERRIES" => Some(MaterialEnum::GlowBerries),
            "CAMPFIRE" => Some(MaterialEnum::Campfire),
            "SOUL_CAMPFIRE" => Some(MaterialEnum::SoulCampfire),
            "SHROOMLIGHT" => Some(MaterialEnum::Shroomlight),
            "HONEYCOMB" => Some(MaterialEnum::Honeycomb),
            "BEE_NEST" => Some(MaterialEnum::BeeNest),
            "BEEHIVE" => Some(MaterialEnum::Beehive),
            "HONEY_BOTTLE" => Some(MaterialEnum::HoneyBottle),
            "HONEYCOMB_BLOCK" => Some(MaterialEnum::HoneycombBlock),
            "LODESTONE" => Some(MaterialEnum::Lodestone),
            "CRYING_OBSIDIAN" => Some(MaterialEnum::CryingObsidian),
            "BLACKSTONE" => Some(MaterialEnum::Blackstone),
            "BLACKSTONE_SLAB" => Some(MaterialEnum::BlackstoneSlab),
            "BLACKSTONE_STAIRS" => Some(MaterialEnum::BlackstoneStairs),
            "GILDED_BLACKSTONE" => Some(MaterialEnum::GildedBlackstone),
            "POLISHED_BLACKSTONE" => Some(MaterialEnum::PolishedBlackstone),
            "POLISHED_BLACKSTONE_SLAB" => Some(MaterialEnum::PolishedBlackstoneSlab),
            "POLISHED_BLACKSTONE_STAIRS" => Some(MaterialEnum::PolishedBlackstoneStairs),
            "CHISELED_POLISHED_BLACKSTONE" => Some(MaterialEnum::ChiseledPolishedBlackstone),
            "POLISHED_BLACKSTONE_BRICKS" => Some(MaterialEnum::PolishedBlackstoneBricks),
            "POLISHED_BLACKSTONE_BRICK_SLAB" => Some(MaterialEnum::PolishedBlackstoneBrickSlab),
            "POLISHED_BLACKSTONE_BRICK_STAIRS" => Some(MaterialEnum::PolishedBlackstoneBrickStairs),
            "CRACKED_POLISHED_BLACKSTONE_BRICKS" => {
                Some(MaterialEnum::CrackedPolishedBlackstoneBricks)
            }
            "RESPAWN_ANCHOR" => Some(MaterialEnum::RespawnAnchor),
            "CANDLE" => Some(MaterialEnum::Candle),
            "WHITE_CANDLE" => Some(MaterialEnum::WhiteCandle),
            "ORANGE_CANDLE" => Some(MaterialEnum::OrangeCandle),
            "MAGENTA_CANDLE" => Some(MaterialEnum::MagentaCandle),
            "LIGHT_BLUE_CANDLE" => Some(MaterialEnum::LightBlueCandle),
            "YELLOW_CANDLE" => Some(MaterialEnum::YellowCandle),
            "LIME_CANDLE" => Some(MaterialEnum::LimeCandle),
            "PINK_CANDLE" => Some(MaterialEnum::PinkCandle),
            "GRAY_CANDLE" => Some(MaterialEnum::GrayCandle),
            "LIGHT_GRAY_CANDLE" => Some(MaterialEnum::LightGrayCandle),
            "CYAN_CANDLE" => Some(MaterialEnum::CyanCandle),
            "PURPLE_CANDLE" => Some(MaterialEnum::PurpleCandle),
            "BLUE_CANDLE" => Some(MaterialEnum::BlueCandle),
            "BROWN_CANDLE" => Some(MaterialEnum::BrownCandle),
            "GREEN_CANDLE" => Some(MaterialEnum::GreenCandle),
            "RED_CANDLE" => Some(MaterialEnum::RedCandle),
            "BLACK_CANDLE" => Some(MaterialEnum::BlackCandle),
            "SMALL_AMETHYST_BUD" => Some(MaterialEnum::SmallAmethystBud),
            "MEDIUM_AMETHYST_BUD" => Some(MaterialEnum::MediumAmethystBud),
            "LARGE_AMETHYST_BUD" => Some(MaterialEnum::LargeAmethystBud),
            "AMETHYST_CLUSTER" => Some(MaterialEnum::AmethystCluster),
            "POINTED_DRIPSTONE" => Some(MaterialEnum::PointedDripstone),
            "OCHRE_FROGLIGHT" => Some(MaterialEnum::OchreFroglight),
            "VERDANT_FROGLIGHT" => Some(MaterialEnum::VerdantFroglight),
            "PEARLESCENT_FROGLIGHT" => Some(MaterialEnum::PearlescentFroglight),
            "FROGSPAWN" => Some(MaterialEnum::Frogspawn),
            "ECHO_SHARD" => Some(MaterialEnum::EchoShard),
            "BRUSH" => Some(MaterialEnum::Brush),
            "NETHERITE_UPGRADE_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::NetheriteUpgradeSmithingTemplate)
            }
            "SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::SentryArmorTrimSmithingTemplate)
            }
            "DUNE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::DuneArmorTrimSmithingTemplate)
            }
            "COAST_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::CoastArmorTrimSmithingTemplate)
            }
            "WILD_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::WildArmorTrimSmithingTemplate)
            }
            "WARD_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::WardArmorTrimSmithingTemplate)
            }
            "EYE_ARMOR_TRIM_SMITHING_TEMPLATE" => Some(MaterialEnum::EyeArmorTrimSmithingTemplate),
            "VEX_ARMOR_TRIM_SMITHING_TEMPLATE" => Some(MaterialEnum::VexArmorTrimSmithingTemplate),
            "TIDE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::TideArmorTrimSmithingTemplate)
            }
            "SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::SnoutArmorTrimSmithingTemplate)
            }
            "RIB_ARMOR_TRIM_SMITHING_TEMPLATE" => Some(MaterialEnum::RibArmorTrimSmithingTemplate),
            "SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::SpireArmorTrimSmithingTemplate)
            }
            "WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::WayfinderArmorTrimSmithingTemplate)
            }
            "SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::ShaperArmorTrimSmithingTemplate)
            }
            "SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::SilenceArmorTrimSmithingTemplate)
            }
            "RAISER_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::RaiserArmorTrimSmithingTemplate)
            }
            "HOST_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::HostArmorTrimSmithingTemplate)
            }
            "ANGLER_POTTERY_SHERD" => Some(MaterialEnum::AnglerPotterySherd),
            "ARCHER_POTTERY_SHERD" => Some(MaterialEnum::ArcherPotterySherd),
            "ARMS_UP_POTTERY_SHERD" => Some(MaterialEnum::ArmsUpPotterySherd),
            "BLADE_POTTERY_SHERD" => Some(MaterialEnum::BladePotterySherd),
            "BREWER_POTTERY_SHERD" => Some(MaterialEnum::BrewerPotterySherd),
            "BURN_POTTERY_SHERD" => Some(MaterialEnum::BurnPotterySherd),
            "DANGER_POTTERY_SHERD" => Some(MaterialEnum::DangerPotterySherd),
            "EXPLORER_POTTERY_SHERD" => Some(MaterialEnum::ExplorerPotterySherd),
            "FRIEND_POTTERY_SHERD" => Some(MaterialEnum::FriendPotterySherd),
            "HEART_POTTERY_SHERD" => Some(MaterialEnum::HeartPotterySherd),
            "HEARTBREAK_POTTERY_SHERD" => Some(MaterialEnum::HeartbreakPotterySherd),
            "HOWL_POTTERY_SHERD" => Some(MaterialEnum::HowlPotterySherd),
            "MINER_POTTERY_SHERD" => Some(MaterialEnum::MinerPotterySherd),
            "MOURNER_POTTERY_SHERD" => Some(MaterialEnum::MournerPotterySherd),
            "PLENTY_POTTERY_SHERD" => Some(MaterialEnum::PlentyPotterySherd),
            "PRIZE_POTTERY_SHERD" => Some(MaterialEnum::PrizePotterySherd),
            "SHEAF_POTTERY_SHERD" => Some(MaterialEnum::SheafPotterySherd),
            "SHELTER_POTTERY_SHERD" => Some(MaterialEnum::ShelterPotterySherd),
            "SKULL_POTTERY_SHERD" => Some(MaterialEnum::SkullPotterySherd),
            "SNORT_POTTERY_SHERD" => Some(MaterialEnum::SnortPotterySherd),
            "WATER" => Some(MaterialEnum::Water),
            "LAVA" => Some(MaterialEnum::Lava),
            "TALL_SEAGRASS" => Some(MaterialEnum::TallSeagrass),
            "PISTON_HEAD" => Some(MaterialEnum::PistonHead),
            "MOVING_PISTON" => Some(MaterialEnum::MovingPiston),
            "WALL_TORCH" => Some(MaterialEnum::WallTorch),
            "FIRE" => Some(MaterialEnum::Fire),
            "SOUL_FIRE" => Some(MaterialEnum::SoulFire),
            "REDSTONE_WIRE" => Some(MaterialEnum::RedstoneWire),
            "OAK_WALL_SIGN" => Some(MaterialEnum::OakWallSign),
            "SPRUCE_WALL_SIGN" => Some(MaterialEnum::SpruceWallSign),
            "BIRCH_WALL_SIGN" => Some(MaterialEnum::BirchWallSign),
            "ACACIA_WALL_SIGN" => Some(MaterialEnum::AcaciaWallSign),
            "CHERRY_WALL_SIGN" => Some(MaterialEnum::CherryWallSign),
            "JUNGLE_WALL_SIGN" => Some(MaterialEnum::JungleWallSign),
            "DARK_OAK_WALL_SIGN" => Some(MaterialEnum::DarkOakWallSign),
            "MANGROVE_WALL_SIGN" => Some(MaterialEnum::MangroveWallSign),
            "BAMBOO_WALL_SIGN" => Some(MaterialEnum::BambooWallSign),
            "OAK_WALL_HANGING_SIGN" => Some(MaterialEnum::OakWallHangingSign),
            "SPRUCE_WALL_HANGING_SIGN" => Some(MaterialEnum::SpruceWallHangingSign),
            "BIRCH_WALL_HANGING_SIGN" => Some(MaterialEnum::BirchWallHangingSign),
            "ACACIA_WALL_HANGING_SIGN" => Some(MaterialEnum::AcaciaWallHangingSign),
            "CHERRY_WALL_HANGING_SIGN" => Some(MaterialEnum::CherryWallHangingSign),
            "JUNGLE_WALL_HANGING_SIGN" => Some(MaterialEnum::JungleWallHangingSign),
            "DARK_OAK_WALL_HANGING_SIGN" => Some(MaterialEnum::DarkOakWallHangingSign),
            "MANGROVE_WALL_HANGING_SIGN" => Some(MaterialEnum::MangroveWallHangingSign),
            "CRIMSON_WALL_HANGING_SIGN" => Some(MaterialEnum::CrimsonWallHangingSign),
            "WARPED_WALL_HANGING_SIGN" => Some(MaterialEnum::WarpedWallHangingSign),
            "BAMBOO_WALL_HANGING_SIGN" => Some(MaterialEnum::BambooWallHangingSign),
            "REDSTONE_WALL_TORCH" => Some(MaterialEnum::RedstoneWallTorch),
            "SOUL_WALL_TORCH" => Some(MaterialEnum::SoulWallTorch),
            "NETHER_PORTAL" => Some(MaterialEnum::NetherPortal),
            "ATTACHED_PUMPKIN_STEM" => Some(MaterialEnum::AttachedPumpkinStem),
            "ATTACHED_MELON_STEM" => Some(MaterialEnum::AttachedMelonStem),
            "PUMPKIN_STEM" => Some(MaterialEnum::PumpkinStem),
            "MELON_STEM" => Some(MaterialEnum::MelonStem),
            "WATER_CAULDRON" => Some(MaterialEnum::WaterCauldron),
            "LAVA_CAULDRON" => Some(MaterialEnum::LavaCauldron),
            "POWDER_SNOW_CAULDRON" => Some(MaterialEnum::PowderSnowCauldron),
            "END_PORTAL" => Some(MaterialEnum::EndPortal),
            "COCOA" => Some(MaterialEnum::Cocoa),
            "TRIPWIRE" => Some(MaterialEnum::Tripwire),
            "POTTED_TORCHFLOWER" => Some(MaterialEnum::PottedTorchflower),
            "POTTED_OAK_SAPLING" => Some(MaterialEnum::PottedOakSapling),
            "POTTED_SPRUCE_SAPLING" => Some(MaterialEnum::PottedSpruceSapling),
            "POTTED_BIRCH_SAPLING" => Some(MaterialEnum::PottedBirchSapling),
            "POTTED_JUNGLE_SAPLING" => Some(MaterialEnum::PottedJungleSapling),
            "POTTED_ACACIA_SAPLING" => Some(MaterialEnum::PottedAcaciaSapling),
            "POTTED_CHERRY_SAPLING" => Some(MaterialEnum::PottedCherrySapling),
            "POTTED_DARK_OAK_SAPLING" => Some(MaterialEnum::PottedDarkOakSapling),
            "POTTED_MANGROVE_PROPAGULE" => Some(MaterialEnum::PottedMangrovePropagule),
            "POTTED_FERN" => Some(MaterialEnum::PottedFern),
            "POTTED_DANDELION" => Some(MaterialEnum::PottedDandelion),
            "POTTED_POPPY" => Some(MaterialEnum::PottedPoppy),
            "POTTED_BLUE_ORCHID" => Some(MaterialEnum::PottedBlueOrchid),
            "POTTED_ALLIUM" => Some(MaterialEnum::PottedAllium),
            "POTTED_AZURE_BLUET" => Some(MaterialEnum::PottedAzureBluet),
            "POTTED_RED_TULIP" => Some(MaterialEnum::PottedRedTulip),
            "POTTED_ORANGE_TULIP" => Some(MaterialEnum::PottedOrangeTulip),
            "POTTED_WHITE_TULIP" => Some(MaterialEnum::PottedWhiteTulip),
            "POTTED_PINK_TULIP" => Some(MaterialEnum::PottedPinkTulip),
            "POTTED_OXEYE_DAISY" => Some(MaterialEnum::PottedOxeyeDaisy),
            "POTTED_CORNFLOWER" => Some(MaterialEnum::PottedCornflower),
            "POTTED_LILY_OF_THE_VALLEY" => Some(MaterialEnum::PottedLilyOfTheValley),
            "POTTED_WITHER_ROSE" => Some(MaterialEnum::PottedWitherRose),
            "POTTED_RED_MUSHROOM" => Some(MaterialEnum::PottedRedMushroom),
            "POTTED_BROWN_MUSHROOM" => Some(MaterialEnum::PottedBrownMushroom),
            "POTTED_DEAD_BUSH" => Some(MaterialEnum::PottedDeadBush),
            "POTTED_CACTUS" => Some(MaterialEnum::PottedCactus),
            "CARROTS" => Some(MaterialEnum::Carrots),
            "POTATOES" => Some(MaterialEnum::Potatoes),
            "SKELETON_WALL_SKULL" => Some(MaterialEnum::SkeletonWallSkull),
            "WITHER_SKELETON_WALL_SKULL" => Some(MaterialEnum::WitherSkeletonWallSkull),
            "ZOMBIE_WALL_HEAD" => Some(MaterialEnum::ZombieWallHead),
            "PLAYER_WALL_HEAD" => Some(MaterialEnum::PlayerWallHead),
            "CREEPER_WALL_HEAD" => Some(MaterialEnum::CreeperWallHead),
            "DRAGON_WALL_HEAD" => Some(MaterialEnum::DragonWallHead),
            "PIGLIN_WALL_HEAD" => Some(MaterialEnum::PiglinWallHead),
            "WHITE_WALL_BANNER" => Some(MaterialEnum::WhiteWallBanner),
            "ORANGE_WALL_BANNER" => Some(MaterialEnum::OrangeWallBanner),
            "MAGENTA_WALL_BANNER" => Some(MaterialEnum::MagentaWallBanner),
            "LIGHT_BLUE_WALL_BANNER" => Some(MaterialEnum::LightBlueWallBanner),
            "YELLOW_WALL_BANNER" => Some(MaterialEnum::YellowWallBanner),
            "LIME_WALL_BANNER" => Some(MaterialEnum::LimeWallBanner),
            "PINK_WALL_BANNER" => Some(MaterialEnum::PinkWallBanner),
            "GRAY_WALL_BANNER" => Some(MaterialEnum::GrayWallBanner),
            "LIGHT_GRAY_WALL_BANNER" => Some(MaterialEnum::LightGrayWallBanner),
            "CYAN_WALL_BANNER" => Some(MaterialEnum::CyanWallBanner),
            "PURPLE_WALL_BANNER" => Some(MaterialEnum::PurpleWallBanner),
            "BLUE_WALL_BANNER" => Some(MaterialEnum::BlueWallBanner),
            "BROWN_WALL_BANNER" => Some(MaterialEnum::BrownWallBanner),
            "GREEN_WALL_BANNER" => Some(MaterialEnum::GreenWallBanner),
            "RED_WALL_BANNER" => Some(MaterialEnum::RedWallBanner),
            "BLACK_WALL_BANNER" => Some(MaterialEnum::BlackWallBanner),
            "TORCHFLOWER_CROP" => Some(MaterialEnum::TorchflowerCrop),
            "PITCHER_CROP" => Some(MaterialEnum::PitcherCrop),
            "BEETROOTS" => Some(MaterialEnum::Beetroots),
            "END_GATEWAY" => Some(MaterialEnum::EndGateway),
            "FROSTED_ICE" => Some(MaterialEnum::FrostedIce),
            "KELP_PLANT" => Some(MaterialEnum::KelpPlant),
            "DEAD_TUBE_CORAL_WALL_FAN" => Some(MaterialEnum::DeadTubeCoralWallFan),
            "DEAD_BRAIN_CORAL_WALL_FAN" => Some(MaterialEnum::DeadBrainCoralWallFan),
            "DEAD_BUBBLE_CORAL_WALL_FAN" => Some(MaterialEnum::DeadBubbleCoralWallFan),
            "DEAD_FIRE_CORAL_WALL_FAN" => Some(MaterialEnum::DeadFireCoralWallFan),
            "DEAD_HORN_CORAL_WALL_FAN" => Some(MaterialEnum::DeadHornCoralWallFan),
            "TUBE_CORAL_WALL_FAN" => Some(MaterialEnum::TubeCoralWallFan),
            "BRAIN_CORAL_WALL_FAN" => Some(MaterialEnum::BrainCoralWallFan),
            "BUBBLE_CORAL_WALL_FAN" => Some(MaterialEnum::BubbleCoralWallFan),
            "FIRE_CORAL_WALL_FAN" => Some(MaterialEnum::FireCoralWallFan),
            "HORN_CORAL_WALL_FAN" => Some(MaterialEnum::HornCoralWallFan),
            "BAMBOO_SAPLING" => Some(MaterialEnum::BambooSapling),
            "POTTED_BAMBOO" => Some(MaterialEnum::PottedBamboo),
            "VOID_AIR" => Some(MaterialEnum::VoidAir),
            "CAVE_AIR" => Some(MaterialEnum::CaveAir),
            "BUBBLE_COLUMN" => Some(MaterialEnum::BubbleColumn),
            "SWEET_BERRY_BUSH" => Some(MaterialEnum::SweetBerryBush),
            "WEEPING_VINES_PLANT" => Some(MaterialEnum::WeepingVinesPlant),
            "TWISTING_VINES_PLANT" => Some(MaterialEnum::TwistingVinesPlant),
            "CRIMSON_WALL_SIGN" => Some(MaterialEnum::CrimsonWallSign),
            "WARPED_WALL_SIGN" => Some(MaterialEnum::WarpedWallSign),
            "POTTED_CRIMSON_FUNGUS" => Some(MaterialEnum::PottedCrimsonFungus),
            "POTTED_WARPED_FUNGUS" => Some(MaterialEnum::PottedWarpedFungus),
            "POTTED_CRIMSON_ROOTS" => Some(MaterialEnum::PottedCrimsonRoots),
            "POTTED_WARPED_ROOTS" => Some(MaterialEnum::PottedWarpedRoots),
            "CANDLE_CAKE" => Some(MaterialEnum::CandleCake),
            "WHITE_CANDLE_CAKE" => Some(MaterialEnum::WhiteCandleCake),
            "ORANGE_CANDLE_CAKE" => Some(MaterialEnum::OrangeCandleCake),
            "MAGENTA_CANDLE_CAKE" => Some(MaterialEnum::MagentaCandleCake),
            "LIGHT_BLUE_CANDLE_CAKE" => Some(MaterialEnum::LightBlueCandleCake),
            "YELLOW_CANDLE_CAKE" => Some(MaterialEnum::YellowCandleCake),
            "LIME_CANDLE_CAKE" => Some(MaterialEnum::LimeCandleCake),
            "PINK_CANDLE_CAKE" => Some(MaterialEnum::PinkCandleCake),
            "GRAY_CANDLE_CAKE" => Some(MaterialEnum::GrayCandleCake),
            "LIGHT_GRAY_CANDLE_CAKE" => Some(MaterialEnum::LightGrayCandleCake),
            "CYAN_CANDLE_CAKE" => Some(MaterialEnum::CyanCandleCake),
            "PURPLE_CANDLE_CAKE" => Some(MaterialEnum::PurpleCandleCake),
            "BLUE_CANDLE_CAKE" => Some(MaterialEnum::BlueCandleCake),
            "BROWN_CANDLE_CAKE" => Some(MaterialEnum::BrownCandleCake),
            "GREEN_CANDLE_CAKE" => Some(MaterialEnum::GreenCandleCake),
            "RED_CANDLE_CAKE" => Some(MaterialEnum::RedCandleCake),
            "BLACK_CANDLE_CAKE" => Some(MaterialEnum::BlackCandleCake),
            "POWDER_SNOW" => Some(MaterialEnum::PowderSnow),
            "CAVE_VINES" => Some(MaterialEnum::CaveVines),
            "CAVE_VINES_PLANT" => Some(MaterialEnum::CaveVinesPlant),
            "BIG_DRIPLEAF_STEM" => Some(MaterialEnum::BigDripleafStem),
            "POTTED_AZALEA_BUSH" => Some(MaterialEnum::PottedAzaleaBush),
            "POTTED_FLOWERING_AZALEA_BUSH" => Some(MaterialEnum::PottedFloweringAzaleaBush),
            "LEGACY_AIR" => Some(MaterialEnum::LegacyAir),
            "LEGACY_STONE" => Some(MaterialEnum::LegacyStone),
            "LEGACY_GRASS" => Some(MaterialEnum::LegacyGrass),
            "LEGACY_DIRT" => Some(MaterialEnum::LegacyDirt),
            "LEGACY_COBBLESTONE" => Some(MaterialEnum::LegacyCobblestone),
            "LEGACY_WOOD" => Some(MaterialEnum::LegacyWood),
            "LEGACY_SAPLING" => Some(MaterialEnum::LegacySapling),
            "LEGACY_BEDROCK" => Some(MaterialEnum::LegacyBedrock),
            "LEGACY_WATER" => Some(MaterialEnum::LegacyWater),
            "LEGACY_STATIONARY_WATER" => Some(MaterialEnum::LegacyStationaryWater),
            "LEGACY_LAVA" => Some(MaterialEnum::LegacyLava),
            "LEGACY_STATIONARY_LAVA" => Some(MaterialEnum::LegacyStationaryLava),
            "LEGACY_SAND" => Some(MaterialEnum::LegacySand),
            "LEGACY_GRAVEL" => Some(MaterialEnum::LegacyGravel),
            "LEGACY_GOLD_ORE" => Some(MaterialEnum::LegacyGoldOre),
            "LEGACY_IRON_ORE" => Some(MaterialEnum::LegacyIronOre),
            "LEGACY_COAL_ORE" => Some(MaterialEnum::LegacyCoalOre),
            "LEGACY_LOG" => Some(MaterialEnum::LegacyLog),
            "LEGACY_LEAVES" => Some(MaterialEnum::LegacyLeaves),
            "LEGACY_SPONGE" => Some(MaterialEnum::LegacySponge),
            "LEGACY_GLASS" => Some(MaterialEnum::LegacyGlass),
            "LEGACY_LAPIS_ORE" => Some(MaterialEnum::LegacyLapisOre),
            "LEGACY_LAPIS_BLOCK" => Some(MaterialEnum::LegacyLapisBlock),
            "LEGACY_DISPENSER" => Some(MaterialEnum::LegacyDispenser),
            "LEGACY_SANDSTONE" => Some(MaterialEnum::LegacySandstone),
            "LEGACY_NOTE_BLOCK" => Some(MaterialEnum::LegacyNoteBlock),
            "LEGACY_BED_BLOCK" => Some(MaterialEnum::LegacyBedBlock),
            "LEGACY_POWERED_RAIL" => Some(MaterialEnum::LegacyPoweredRail),
            "LEGACY_DETECTOR_RAIL" => Some(MaterialEnum::LegacyDetectorRail),
            "LEGACY_PISTON_STICKY_BASE" => Some(MaterialEnum::LegacyPistonStickyBase),
            "LEGACY_WEB" => Some(MaterialEnum::LegacyWeb),
            "LEGACY_LONG_GRASS" => Some(MaterialEnum::LegacyLongGrass),
            "LEGACY_DEAD_BUSH" => Some(MaterialEnum::LegacyDeadBush),
            "LEGACY_PISTON_BASE" => Some(MaterialEnum::LegacyPistonBase),
            "LEGACY_PISTON_EXTENSION" => Some(MaterialEnum::LegacyPistonExtension),
            "LEGACY_WOOL" => Some(MaterialEnum::LegacyWool),
            "LEGACY_PISTON_MOVING_PIECE" => Some(MaterialEnum::LegacyPistonMovingPiece),
            "LEGACY_YELLOW_FLOWER" => Some(MaterialEnum::LegacyYellowFlower),
            "LEGACY_RED_ROSE" => Some(MaterialEnum::LegacyRedRose),
            "LEGACY_BROWN_MUSHROOM" => Some(MaterialEnum::LegacyBrownMushroom),
            "LEGACY_RED_MUSHROOM" => Some(MaterialEnum::LegacyRedMushroom),
            "LEGACY_GOLD_BLOCK" => Some(MaterialEnum::LegacyGoldBlock),
            "LEGACY_IRON_BLOCK" => Some(MaterialEnum::LegacyIronBlock),
            "LEGACY_DOUBLE_STEP" => Some(MaterialEnum::LegacyDoubleStep),
            "LEGACY_STEP" => Some(MaterialEnum::LegacyStep),
            "LEGACY_BRICK" => Some(MaterialEnum::LegacyBrick),
            "LEGACY_TNT" => Some(MaterialEnum::LegacyTnt),
            "LEGACY_BOOKSHELF" => Some(MaterialEnum::LegacyBookshelf),
            "LEGACY_MOSSY_COBBLESTONE" => Some(MaterialEnum::LegacyMossyCobblestone),
            "LEGACY_OBSIDIAN" => Some(MaterialEnum::LegacyObsidian),
            "LEGACY_TORCH" => Some(MaterialEnum::LegacyTorch),
            "LEGACY_FIRE" => Some(MaterialEnum::LegacyFire),
            "LEGACY_MOB_SPAWNER" => Some(MaterialEnum::LegacyMobSpawner),
            "LEGACY_WOOD_STAIRS" => Some(MaterialEnum::LegacyWoodStairs),
            "LEGACY_CHEST" => Some(MaterialEnum::LegacyChest),
            "LEGACY_REDSTONE_WIRE" => Some(MaterialEnum::LegacyRedstoneWire),
            "LEGACY_DIAMOND_ORE" => Some(MaterialEnum::LegacyDiamondOre),
            "LEGACY_DIAMOND_BLOCK" => Some(MaterialEnum::LegacyDiamondBlock),
            "LEGACY_WORKBENCH" => Some(MaterialEnum::LegacyWorkbench),
            "LEGACY_CROPS" => Some(MaterialEnum::LegacyCrops),
            "LEGACY_SOIL" => Some(MaterialEnum::LegacySoil),
            "LEGACY_FURNACE" => Some(MaterialEnum::LegacyFurnace),
            "LEGACY_BURNING_FURNACE" => Some(MaterialEnum::LegacyBurningFurnace),
            "LEGACY_SIGN_POST" => Some(MaterialEnum::LegacySignPost),
            "LEGACY_WOODEN_DOOR" => Some(MaterialEnum::LegacyWoodenDoor),
            "LEGACY_LADDER" => Some(MaterialEnum::LegacyLadder),
            "LEGACY_RAILS" => Some(MaterialEnum::LegacyRails),
            "LEGACY_COBBLESTONE_STAIRS" => Some(MaterialEnum::LegacyCobblestoneStairs),
            "LEGACY_WALL_SIGN" => Some(MaterialEnum::LegacyWallSign),
            "LEGACY_LEVER" => Some(MaterialEnum::LegacyLever),
            "LEGACY_STONE_PLATE" => Some(MaterialEnum::LegacyStonePlate),
            "LEGACY_IRON_DOOR_BLOCK" => Some(MaterialEnum::LegacyIronDoorBlock),
            "LEGACY_WOOD_PLATE" => Some(MaterialEnum::LegacyWoodPlate),
            "LEGACY_REDSTONE_ORE" => Some(MaterialEnum::LegacyRedstoneOre),
            "LEGACY_GLOWING_REDSTONE_ORE" => Some(MaterialEnum::LegacyGlowingRedstoneOre),
            "LEGACY_REDSTONE_TORCH_OFF" => Some(MaterialEnum::LegacyRedstoneTorchOff),
            "LEGACY_REDSTONE_TORCH_ON" => Some(MaterialEnum::LegacyRedstoneTorchOn),
            "LEGACY_STONE_BUTTON" => Some(MaterialEnum::LegacyStoneButton),
            "LEGACY_SNOW" => Some(MaterialEnum::LegacySnow),
            "LEGACY_ICE" => Some(MaterialEnum::LegacyIce),
            "LEGACY_SNOW_BLOCK" => Some(MaterialEnum::LegacySnowBlock),
            "LEGACY_CACTUS" => Some(MaterialEnum::LegacyCactus),
            "LEGACY_CLAY" => Some(MaterialEnum::LegacyClay),
            "LEGACY_SUGAR_CANE_BLOCK" => Some(MaterialEnum::LegacySugarCaneBlock),
            "LEGACY_JUKEBOX" => Some(MaterialEnum::LegacyJukebox),
            "LEGACY_FENCE" => Some(MaterialEnum::LegacyFence),
            "LEGACY_PUMPKIN" => Some(MaterialEnum::LegacyPumpkin),
            "LEGACY_NETHERRACK" => Some(MaterialEnum::LegacyNetherrack),
            "LEGACY_SOUL_SAND" => Some(MaterialEnum::LegacySoulSand),
            "LEGACY_GLOWSTONE" => Some(MaterialEnum::LegacyGlowstone),
            "LEGACY_PORTAL" => Some(MaterialEnum::LegacyPortal),
            "LEGACY_JACK_O_LANTERN" => Some(MaterialEnum::LegacyJackOLantern),
            "LEGACY_CAKE_BLOCK" => Some(MaterialEnum::LegacyCakeBlock),
            "LEGACY_DIODE_BLOCK_OFF" => Some(MaterialEnum::LegacyDiodeBlockOff),
            "LEGACY_DIODE_BLOCK_ON" => Some(MaterialEnum::LegacyDiodeBlockOn),
            "LEGACY_STAINED_GLASS" => Some(MaterialEnum::LegacyStainedGlass),
            "LEGACY_TRAP_DOOR" => Some(MaterialEnum::LegacyTrapDoor),
            "LEGACY_MONSTER_EGGS" => Some(MaterialEnum::LegacyMonsterEggs),
            "LEGACY_SMOOTH_BRICK" => Some(MaterialEnum::LegacySmoothBrick),
            "LEGACY_HUGE_MUSHROOM_1" => Some(MaterialEnum::LegacyHugeMushroom1),
            "LEGACY_HUGE_MUSHROOM_2" => Some(MaterialEnum::LegacyHugeMushroom2),
            "LEGACY_IRON_FENCE" => Some(MaterialEnum::LegacyIronFence),
            "LEGACY_THIN_GLASS" => Some(MaterialEnum::LegacyThinGlass),
            "LEGACY_MELON_BLOCK" => Some(MaterialEnum::LegacyMelonBlock),
            "LEGACY_PUMPKIN_STEM" => Some(MaterialEnum::LegacyPumpkinStem),
            "LEGACY_MELON_STEM" => Some(MaterialEnum::LegacyMelonStem),
            "LEGACY_VINE" => Some(MaterialEnum::LegacyVine),
            "LEGACY_FENCE_GATE" => Some(MaterialEnum::LegacyFenceGate),
            "LEGACY_BRICK_STAIRS" => Some(MaterialEnum::LegacyBrickStairs),
            "LEGACY_SMOOTH_STAIRS" => Some(MaterialEnum::LegacySmoothStairs),
            "LEGACY_MYCEL" => Some(MaterialEnum::LegacyMycel),
            "LEGACY_WATER_LILY" => Some(MaterialEnum::LegacyWaterLily),
            "LEGACY_NETHER_BRICK" => Some(MaterialEnum::LegacyNetherBrick),
            "LEGACY_NETHER_FENCE" => Some(MaterialEnum::LegacyNetherFence),
            "LEGACY_NETHER_BRICK_STAIRS" => Some(MaterialEnum::LegacyNetherBrickStairs),
            "LEGACY_NETHER_WARTS" => Some(MaterialEnum::LegacyNetherWarts),
            "LEGACY_ENCHANTMENT_TABLE" => Some(MaterialEnum::LegacyEnchantmentTable),
            "LEGACY_BREWING_STAND" => Some(MaterialEnum::LegacyBrewingStand),
            "LEGACY_CAULDRON" => Some(MaterialEnum::LegacyCauldron),
            "LEGACY_ENDER_PORTAL" => Some(MaterialEnum::LegacyEnderPortal),
            "LEGACY_ENDER_PORTAL_FRAME" => Some(MaterialEnum::LegacyEnderPortalFrame),
            "LEGACY_ENDER_STONE" => Some(MaterialEnum::LegacyEnderStone),
            "LEGACY_DRAGON_EGG" => Some(MaterialEnum::LegacyDragonEgg),
            "LEGACY_REDSTONE_LAMP_OFF" => Some(MaterialEnum::LegacyRedstoneLampOff),
            "LEGACY_REDSTONE_LAMP_ON" => Some(MaterialEnum::LegacyRedstoneLampOn),
            "LEGACY_WOOD_DOUBLE_STEP" => Some(MaterialEnum::LegacyWoodDoubleStep),
            "LEGACY_WOOD_STEP" => Some(MaterialEnum::LegacyWoodStep),
            "LEGACY_COCOA" => Some(MaterialEnum::LegacyCocoa),
            "LEGACY_SANDSTONE_STAIRS" => Some(MaterialEnum::LegacySandstoneStairs),
            "LEGACY_EMERALD_ORE" => Some(MaterialEnum::LegacyEmeraldOre),
            "LEGACY_ENDER_CHEST" => Some(MaterialEnum::LegacyEnderChest),
            "LEGACY_TRIPWIRE_HOOK" => Some(MaterialEnum::LegacyTripwireHook),
            "LEGACY_TRIPWIRE" => Some(MaterialEnum::LegacyTripwire),
            "LEGACY_EMERALD_BLOCK" => Some(MaterialEnum::LegacyEmeraldBlock),
            "LEGACY_SPRUCE_WOOD_STAIRS" => Some(MaterialEnum::LegacySpruceWoodStairs),
            "LEGACY_BIRCH_WOOD_STAIRS" => Some(MaterialEnum::LegacyBirchWoodStairs),
            "LEGACY_JUNGLE_WOOD_STAIRS" => Some(MaterialEnum::LegacyJungleWoodStairs),
            "LEGACY_COMMAND" => Some(MaterialEnum::LegacyCommand),
            "LEGACY_BEACON" => Some(MaterialEnum::LegacyBeacon),
            "LEGACY_COBBLE_WALL" => Some(MaterialEnum::LegacyCobbleWall),
            "LEGACY_FLOWER_POT" => Some(MaterialEnum::LegacyFlowerPot),
            "LEGACY_CARROT" => Some(MaterialEnum::LegacyCarrot),
            "LEGACY_POTATO" => Some(MaterialEnum::LegacyPotato),
            "LEGACY_WOOD_BUTTON" => Some(MaterialEnum::LegacyWoodButton),
            "LEGACY_SKULL" => Some(MaterialEnum::LegacySkull),
            "LEGACY_ANVIL" => Some(MaterialEnum::LegacyAnvil),
            "LEGACY_TRAPPED_CHEST" => Some(MaterialEnum::LegacyTrappedChest),
            "LEGACY_GOLD_PLATE" => Some(MaterialEnum::LegacyGoldPlate),
            "LEGACY_IRON_PLATE" => Some(MaterialEnum::LegacyIronPlate),
            "LEGACY_REDSTONE_COMPARATOR_OFF" => Some(MaterialEnum::LegacyRedstoneComparatorOff),
            "LEGACY_REDSTONE_COMPARATOR_ON" => Some(MaterialEnum::LegacyRedstoneComparatorOn),
            "LEGACY_DAYLIGHT_DETECTOR" => Some(MaterialEnum::LegacyDaylightDetector),
            "LEGACY_REDSTONE_BLOCK" => Some(MaterialEnum::LegacyRedstoneBlock),
            "LEGACY_QUARTZ_ORE" => Some(MaterialEnum::LegacyQuartzOre),
            "LEGACY_HOPPER" => Some(MaterialEnum::LegacyHopper),
            "LEGACY_QUARTZ_BLOCK" => Some(MaterialEnum::LegacyQuartzBlock),
            "LEGACY_QUARTZ_STAIRS" => Some(MaterialEnum::LegacyQuartzStairs),
            "LEGACY_ACTIVATOR_RAIL" => Some(MaterialEnum::LegacyActivatorRail),
            "LEGACY_DROPPER" => Some(MaterialEnum::LegacyDropper),
            "LEGACY_STAINED_CLAY" => Some(MaterialEnum::LegacyStainedClay),
            "LEGACY_STAINED_GLASS_PANE" => Some(MaterialEnum::LegacyStainedGlassPane),
            "LEGACY_LEAVES_2" => Some(MaterialEnum::LegacyLeaves2),
            "LEGACY_LOG_2" => Some(MaterialEnum::LegacyLog2),
            "LEGACY_ACACIA_STAIRS" => Some(MaterialEnum::LegacyAcaciaStairs),
            "LEGACY_DARK_OAK_STAIRS" => Some(MaterialEnum::LegacyDarkOakStairs),
            "LEGACY_SLIME_BLOCK" => Some(MaterialEnum::LegacySlimeBlock),
            "LEGACY_BARRIER" => Some(MaterialEnum::LegacyBarrier),
            "LEGACY_IRON_TRAPDOOR" => Some(MaterialEnum::LegacyIronTrapdoor),
            "LEGACY_PRISMARINE" => Some(MaterialEnum::LegacyPrismarine),
            "LEGACY_SEA_LANTERN" => Some(MaterialEnum::LegacySeaLantern),
            "LEGACY_HAY_BLOCK" => Some(MaterialEnum::LegacyHayBlock),
            "LEGACY_CARPET" => Some(MaterialEnum::LegacyCarpet),
            "LEGACY_HARD_CLAY" => Some(MaterialEnum::LegacyHardClay),
            "LEGACY_COAL_BLOCK" => Some(MaterialEnum::LegacyCoalBlock),
            "LEGACY_PACKED_ICE" => Some(MaterialEnum::LegacyPackedIce),
            "LEGACY_DOUBLE_PLANT" => Some(MaterialEnum::LegacyDoublePlant),
            "LEGACY_STANDING_BANNER" => Some(MaterialEnum::LegacyStandingBanner),
            "LEGACY_WALL_BANNER" => Some(MaterialEnum::LegacyWallBanner),
            "LEGACY_DAYLIGHT_DETECTOR_INVERTED" => {
                Some(MaterialEnum::LegacyDaylightDetectorInverted)
            }
            "LEGACY_RED_SANDSTONE" => Some(MaterialEnum::LegacyRedSandstone),
            "LEGACY_RED_SANDSTONE_STAIRS" => Some(MaterialEnum::LegacyRedSandstoneStairs),
            "LEGACY_DOUBLE_STONE_SLAB2" => Some(MaterialEnum::LegacyDoubleStoneSlab2),
            "LEGACY_STONE_SLAB2" => Some(MaterialEnum::LegacyStoneSlab2),
            "LEGACY_SPRUCE_FENCE_GATE" => Some(MaterialEnum::LegacySpruceFenceGate),
            "LEGACY_BIRCH_FENCE_GATE" => Some(MaterialEnum::LegacyBirchFenceGate),
            "LEGACY_JUNGLE_FENCE_GATE" => Some(MaterialEnum::LegacyJungleFenceGate),
            "LEGACY_DARK_OAK_FENCE_GATE" => Some(MaterialEnum::LegacyDarkOakFenceGate),
            "LEGACY_ACACIA_FENCE_GATE" => Some(MaterialEnum::LegacyAcaciaFenceGate),
            "LEGACY_SPRUCE_FENCE" => Some(MaterialEnum::LegacySpruceFence),
            "LEGACY_BIRCH_FENCE" => Some(MaterialEnum::LegacyBirchFence),
            "LEGACY_JUNGLE_FENCE" => Some(MaterialEnum::LegacyJungleFence),
            "LEGACY_DARK_OAK_FENCE" => Some(MaterialEnum::LegacyDarkOakFence),
            "LEGACY_ACACIA_FENCE" => Some(MaterialEnum::LegacyAcaciaFence),
            "LEGACY_SPRUCE_DOOR" => Some(MaterialEnum::LegacySpruceDoor),
            "LEGACY_BIRCH_DOOR" => Some(MaterialEnum::LegacyBirchDoor),
            "LEGACY_JUNGLE_DOOR" => Some(MaterialEnum::LegacyJungleDoor),
            "LEGACY_ACACIA_DOOR" => Some(MaterialEnum::LegacyAcaciaDoor),
            "LEGACY_DARK_OAK_DOOR" => Some(MaterialEnum::LegacyDarkOakDoor),
            "LEGACY_END_ROD" => Some(MaterialEnum::LegacyEndRod),
            "LEGACY_CHORUS_PLANT" => Some(MaterialEnum::LegacyChorusPlant),
            "LEGACY_CHORUS_FLOWER" => Some(MaterialEnum::LegacyChorusFlower),
            "LEGACY_PURPUR_BLOCK" => Some(MaterialEnum::LegacyPurpurBlock),
            "LEGACY_PURPUR_PILLAR" => Some(MaterialEnum::LegacyPurpurPillar),
            "LEGACY_PURPUR_STAIRS" => Some(MaterialEnum::LegacyPurpurStairs),
            "LEGACY_PURPUR_DOUBLE_SLAB" => Some(MaterialEnum::LegacyPurpurDoubleSlab),
            "LEGACY_PURPUR_SLAB" => Some(MaterialEnum::LegacyPurpurSlab),
            "LEGACY_END_BRICKS" => Some(MaterialEnum::LegacyEndBricks),
            "LEGACY_BEETROOT_BLOCK" => Some(MaterialEnum::LegacyBeetrootBlock),
            "LEGACY_GRASS_PATH" => Some(MaterialEnum::LegacyGrassPath),
            "LEGACY_END_GATEWAY" => Some(MaterialEnum::LegacyEndGateway),
            "LEGACY_COMMAND_REPEATING" => Some(MaterialEnum::LegacyCommandRepeating),
            "LEGACY_COMMAND_CHAIN" => Some(MaterialEnum::LegacyCommandChain),
            "LEGACY_FROSTED_ICE" => Some(MaterialEnum::LegacyFrostedIce),
            "LEGACY_MAGMA" => Some(MaterialEnum::LegacyMagma),
            "LEGACY_NETHER_WART_BLOCK" => Some(MaterialEnum::LegacyNetherWartBlock),
            "LEGACY_RED_NETHER_BRICK" => Some(MaterialEnum::LegacyRedNetherBrick),
            "LEGACY_BONE_BLOCK" => Some(MaterialEnum::LegacyBoneBlock),
            "LEGACY_STRUCTURE_VOID" => Some(MaterialEnum::LegacyStructureVoid),
            "LEGACY_OBSERVER" => Some(MaterialEnum::LegacyObserver),
            "LEGACY_WHITE_SHULKER_BOX" => Some(MaterialEnum::LegacyWhiteShulkerBox),
            "LEGACY_ORANGE_SHULKER_BOX" => Some(MaterialEnum::LegacyOrangeShulkerBox),
            "LEGACY_MAGENTA_SHULKER_BOX" => Some(MaterialEnum::LegacyMagentaShulkerBox),
            "LEGACY_LIGHT_BLUE_SHULKER_BOX" => Some(MaterialEnum::LegacyLightBlueShulkerBox),
            "LEGACY_YELLOW_SHULKER_BOX" => Some(MaterialEnum::LegacyYellowShulkerBox),
            "LEGACY_LIME_SHULKER_BOX" => Some(MaterialEnum::LegacyLimeShulkerBox),
            "LEGACY_PINK_SHULKER_BOX" => Some(MaterialEnum::LegacyPinkShulkerBox),
            "LEGACY_GRAY_SHULKER_BOX" => Some(MaterialEnum::LegacyGrayShulkerBox),
            "LEGACY_SILVER_SHULKER_BOX" => Some(MaterialEnum::LegacySilverShulkerBox),
            "LEGACY_CYAN_SHULKER_BOX" => Some(MaterialEnum::LegacyCyanShulkerBox),
            "LEGACY_PURPLE_SHULKER_BOX" => Some(MaterialEnum::LegacyPurpleShulkerBox),
            "LEGACY_BLUE_SHULKER_BOX" => Some(MaterialEnum::LegacyBlueShulkerBox),
            "LEGACY_BROWN_SHULKER_BOX" => Some(MaterialEnum::LegacyBrownShulkerBox),
            "LEGACY_GREEN_SHULKER_BOX" => Some(MaterialEnum::LegacyGreenShulkerBox),
            "LEGACY_RED_SHULKER_BOX" => Some(MaterialEnum::LegacyRedShulkerBox),
            "LEGACY_BLACK_SHULKER_BOX" => Some(MaterialEnum::LegacyBlackShulkerBox),
            "LEGACY_WHITE_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyWhiteGlazedTerracotta),
            "LEGACY_ORANGE_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyOrangeGlazedTerracotta),
            "LEGACY_MAGENTA_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyMagentaGlazedTerracotta),
            "LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA" => {
                Some(MaterialEnum::LegacyLightBlueGlazedTerracotta)
            }
            "LEGACY_YELLOW_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyYellowGlazedTerracotta),
            "LEGACY_LIME_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyLimeGlazedTerracotta),
            "LEGACY_PINK_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyPinkGlazedTerracotta),
            "LEGACY_GRAY_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyGrayGlazedTerracotta),
            "LEGACY_SILVER_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacySilverGlazedTerracotta),
            "LEGACY_CYAN_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyCyanGlazedTerracotta),
            "LEGACY_PURPLE_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyPurpleGlazedTerracotta),
            "LEGACY_BLUE_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyBlueGlazedTerracotta),
            "LEGACY_BROWN_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyBrownGlazedTerracotta),
            "LEGACY_GREEN_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyGreenGlazedTerracotta),
            "LEGACY_RED_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyRedGlazedTerracotta),
            "LEGACY_BLACK_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyBlackGlazedTerracotta),
            "LEGACY_CONCRETE" => Some(MaterialEnum::LegacyConcrete),
            "LEGACY_CONCRETE_POWDER" => Some(MaterialEnum::LegacyConcretePowder),
            "LEGACY_STRUCTURE_BLOCK" => Some(MaterialEnum::LegacyStructureBlock),
            "LEGACY_IRON_SPADE" => Some(MaterialEnum::LegacyIronSpade),
            "LEGACY_IRON_PICKAXE" => Some(MaterialEnum::LegacyIronPickaxe),
            "LEGACY_IRON_AXE" => Some(MaterialEnum::LegacyIronAxe),
            "LEGACY_FLINT_AND_STEEL" => Some(MaterialEnum::LegacyFlintAndSteel),
            "LEGACY_APPLE" => Some(MaterialEnum::LegacyApple),
            "LEGACY_BOW" => Some(MaterialEnum::LegacyBow),
            "LEGACY_ARROW" => Some(MaterialEnum::LegacyArrow),
            "LEGACY_COAL" => Some(MaterialEnum::LegacyCoal),
            "LEGACY_DIAMOND" => Some(MaterialEnum::LegacyDiamond),
            "LEGACY_IRON_INGOT" => Some(MaterialEnum::LegacyIronIngot),
            "LEGACY_GOLD_INGOT" => Some(MaterialEnum::LegacyGoldIngot),
            "LEGACY_IRON_SWORD" => Some(MaterialEnum::LegacyIronSword),
            "LEGACY_WOOD_SWORD" => Some(MaterialEnum::LegacyWoodSword),
            "LEGACY_WOOD_SPADE" => Some(MaterialEnum::LegacyWoodSpade),
            "LEGACY_WOOD_PICKAXE" => Some(MaterialEnum::LegacyWoodPickaxe),
            "LEGACY_WOOD_AXE" => Some(MaterialEnum::LegacyWoodAxe),
            "LEGACY_STONE_SWORD" => Some(MaterialEnum::LegacyStoneSword),
            "LEGACY_STONE_SPADE" => Some(MaterialEnum::LegacyStoneSpade),
            "LEGACY_STONE_PICKAXE" => Some(MaterialEnum::LegacyStonePickaxe),
            "LEGACY_STONE_AXE" => Some(MaterialEnum::LegacyStoneAxe),
            "LEGACY_DIAMOND_SWORD" => Some(MaterialEnum::LegacyDiamondSword),
            "LEGACY_DIAMOND_SPADE" => Some(MaterialEnum::LegacyDiamondSpade),
            "LEGACY_DIAMOND_PICKAXE" => Some(MaterialEnum::LegacyDiamondPickaxe),
            "LEGACY_DIAMOND_AXE" => Some(MaterialEnum::LegacyDiamondAxe),
            "LEGACY_STICK" => Some(MaterialEnum::LegacyStick),
            "LEGACY_BOWL" => Some(MaterialEnum::LegacyBowl),
            "LEGACY_MUSHROOM_SOUP" => Some(MaterialEnum::LegacyMushroomSoup),
            "LEGACY_GOLD_SWORD" => Some(MaterialEnum::LegacyGoldSword),
            "LEGACY_GOLD_SPADE" => Some(MaterialEnum::LegacyGoldSpade),
            "LEGACY_GOLD_PICKAXE" => Some(MaterialEnum::LegacyGoldPickaxe),
            "LEGACY_GOLD_AXE" => Some(MaterialEnum::LegacyGoldAxe),
            "LEGACY_STRING" => Some(MaterialEnum::LegacyString),
            "LEGACY_FEATHER" => Some(MaterialEnum::LegacyFeather),
            "LEGACY_SULPHUR" => Some(MaterialEnum::LegacySulphur),
            "LEGACY_WOOD_HOE" => Some(MaterialEnum::LegacyWoodHoe),
            "LEGACY_STONE_HOE" => Some(MaterialEnum::LegacyStoneHoe),
            "LEGACY_IRON_HOE" => Some(MaterialEnum::LegacyIronHoe),
            "LEGACY_DIAMOND_HOE" => Some(MaterialEnum::LegacyDiamondHoe),
            "LEGACY_GOLD_HOE" => Some(MaterialEnum::LegacyGoldHoe),
            "LEGACY_SEEDS" => Some(MaterialEnum::LegacySeeds),
            "LEGACY_WHEAT" => Some(MaterialEnum::LegacyWheat),
            "LEGACY_BREAD" => Some(MaterialEnum::LegacyBread),
            "LEGACY_LEATHER_HELMET" => Some(MaterialEnum::LegacyLeatherHelmet),
            "LEGACY_LEATHER_CHESTPLATE" => Some(MaterialEnum::LegacyLeatherChestplate),
            "LEGACY_LEATHER_LEGGINGS" => Some(MaterialEnum::LegacyLeatherLeggings),
            "LEGACY_LEATHER_BOOTS" => Some(MaterialEnum::LegacyLeatherBoots),
            "LEGACY_CHAINMAIL_HELMET" => Some(MaterialEnum::LegacyChainmailHelmet),
            "LEGACY_CHAINMAIL_CHESTPLATE" => Some(MaterialEnum::LegacyChainmailChestplate),
            "LEGACY_CHAINMAIL_LEGGINGS" => Some(MaterialEnum::LegacyChainmailLeggings),
            "LEGACY_CHAINMAIL_BOOTS" => Some(MaterialEnum::LegacyChainmailBoots),
            "LEGACY_IRON_HELMET" => Some(MaterialEnum::LegacyIronHelmet),
            "LEGACY_IRON_CHESTPLATE" => Some(MaterialEnum::LegacyIronChestplate),
            "LEGACY_IRON_LEGGINGS" => Some(MaterialEnum::LegacyIronLeggings),
            "LEGACY_IRON_BOOTS" => Some(MaterialEnum::LegacyIronBoots),
            "LEGACY_DIAMOND_HELMET" => Some(MaterialEnum::LegacyDiamondHelmet),
            "LEGACY_DIAMOND_CHESTPLATE" => Some(MaterialEnum::LegacyDiamondChestplate),
            "LEGACY_DIAMOND_LEGGINGS" => Some(MaterialEnum::LegacyDiamondLeggings),
            "LEGACY_DIAMOND_BOOTS" => Some(MaterialEnum::LegacyDiamondBoots),
            "LEGACY_GOLD_HELMET" => Some(MaterialEnum::LegacyGoldHelmet),
            "LEGACY_GOLD_CHESTPLATE" => Some(MaterialEnum::LegacyGoldChestplate),
            "LEGACY_GOLD_LEGGINGS" => Some(MaterialEnum::LegacyGoldLeggings),
            "LEGACY_GOLD_BOOTS" => Some(MaterialEnum::LegacyGoldBoots),
            "LEGACY_FLINT" => Some(MaterialEnum::LegacyFlint),
            "LEGACY_PORK" => Some(MaterialEnum::LegacyPork),
            "LEGACY_GRILLED_PORK" => Some(MaterialEnum::LegacyGrilledPork),
            "LEGACY_PAINTING" => Some(MaterialEnum::LegacyPainting),
            "LEGACY_GOLDEN_APPLE" => Some(MaterialEnum::LegacyGoldenApple),
            "LEGACY_SIGN" => Some(MaterialEnum::LegacySign),
            "LEGACY_WOOD_DOOR" => Some(MaterialEnum::LegacyWoodDoor),
            "LEGACY_BUCKET" => Some(MaterialEnum::LegacyBucket),
            "LEGACY_WATER_BUCKET" => Some(MaterialEnum::LegacyWaterBucket),
            "LEGACY_LAVA_BUCKET" => Some(MaterialEnum::LegacyLavaBucket),
            "LEGACY_MINECART" => Some(MaterialEnum::LegacyMinecart),
            "LEGACY_SADDLE" => Some(MaterialEnum::LegacySaddle),
            "LEGACY_IRON_DOOR" => Some(MaterialEnum::LegacyIronDoor),
            "LEGACY_REDSTONE" => Some(MaterialEnum::LegacyRedstone),
            "LEGACY_SNOW_BALL" => Some(MaterialEnum::LegacySnowBall),
            "LEGACY_BOAT" => Some(MaterialEnum::LegacyBoat),
            "LEGACY_LEATHER" => Some(MaterialEnum::LegacyLeather),
            "LEGACY_MILK_BUCKET" => Some(MaterialEnum::LegacyMilkBucket),
            "LEGACY_CLAY_BRICK" => Some(MaterialEnum::LegacyClayBrick),
            "LEGACY_CLAY_BALL" => Some(MaterialEnum::LegacyClayBall),
            "LEGACY_SUGAR_CANE" => Some(MaterialEnum::LegacySugarCane),
            "LEGACY_PAPER" => Some(MaterialEnum::LegacyPaper),
            "LEGACY_BOOK" => Some(MaterialEnum::LegacyBook),
            "LEGACY_SLIME_BALL" => Some(MaterialEnum::LegacySlimeBall),
            "LEGACY_STORAGE_MINECART" => Some(MaterialEnum::LegacyStorageMinecart),
            "LEGACY_POWERED_MINECART" => Some(MaterialEnum::LegacyPoweredMinecart),
            "LEGACY_EGG" => Some(MaterialEnum::LegacyEgg),
            "LEGACY_COMPASS" => Some(MaterialEnum::LegacyCompass),
            "LEGACY_FISHING_ROD" => Some(MaterialEnum::LegacyFishingRod),
            "LEGACY_WATCH" => Some(MaterialEnum::LegacyWatch),
            "LEGACY_GLOWSTONE_DUST" => Some(MaterialEnum::LegacyGlowstoneDust),
            "LEGACY_RAW_FISH" => Some(MaterialEnum::LegacyRawFish),
            "LEGACY_COOKED_FISH" => Some(MaterialEnum::LegacyCookedFish),
            "LEGACY_INK_SACK" => Some(MaterialEnum::LegacyInkSack),
            "LEGACY_BONE" => Some(MaterialEnum::LegacyBone),
            "LEGACY_SUGAR" => Some(MaterialEnum::LegacySugar),
            "LEGACY_CAKE" => Some(MaterialEnum::LegacyCake),
            "LEGACY_BED" => Some(MaterialEnum::LegacyBed),
            "LEGACY_DIODE" => Some(MaterialEnum::LegacyDiode),
            "LEGACY_COOKIE" => Some(MaterialEnum::LegacyCookie),
            "LEGACY_MAP" => Some(MaterialEnum::LegacyMap),
            "LEGACY_SHEARS" => Some(MaterialEnum::LegacyShears),
            "LEGACY_MELON" => Some(MaterialEnum::LegacyMelon),
            "LEGACY_PUMPKIN_SEEDS" => Some(MaterialEnum::LegacyPumpkinSeeds),
            "LEGACY_MELON_SEEDS" => Some(MaterialEnum::LegacyMelonSeeds),
            "LEGACY_RAW_BEEF" => Some(MaterialEnum::LegacyRawBeef),
            "LEGACY_COOKED_BEEF" => Some(MaterialEnum::LegacyCookedBeef),
            "LEGACY_RAW_CHICKEN" => Some(MaterialEnum::LegacyRawChicken),
            "LEGACY_COOKED_CHICKEN" => Some(MaterialEnum::LegacyCookedChicken),
            "LEGACY_ROTTEN_FLESH" => Some(MaterialEnum::LegacyRottenFlesh),
            "LEGACY_ENDER_PEARL" => Some(MaterialEnum::LegacyEnderPearl),
            "LEGACY_BLAZE_ROD" => Some(MaterialEnum::LegacyBlazeRod),
            "LEGACY_GHAST_TEAR" => Some(MaterialEnum::LegacyGhastTear),
            "LEGACY_GOLD_NUGGET" => Some(MaterialEnum::LegacyGoldNugget),
            "LEGACY_NETHER_STALK" => Some(MaterialEnum::LegacyNetherStalk),
            "LEGACY_POTION" => Some(MaterialEnum::LegacyPotion),
            "LEGACY_GLASS_BOTTLE" => Some(MaterialEnum::LegacyGlassBottle),
            "LEGACY_SPIDER_EYE" => Some(MaterialEnum::LegacySpiderEye),
            "LEGACY_FERMENTED_SPIDER_EYE" => Some(MaterialEnum::LegacyFermentedSpiderEye),
            "LEGACY_BLAZE_POWDER" => Some(MaterialEnum::LegacyBlazePowder),
            "LEGACY_MAGMA_CREAM" => Some(MaterialEnum::LegacyMagmaCream),
            "LEGACY_BREWING_STAND_ITEM" => Some(MaterialEnum::LegacyBrewingStandItem),
            "LEGACY_CAULDRON_ITEM" => Some(MaterialEnum::LegacyCauldronItem),
            "LEGACY_EYE_OF_ENDER" => Some(MaterialEnum::LegacyEyeOfEnder),
            "LEGACY_SPECKLED_MELON" => Some(MaterialEnum::LegacySpeckledMelon),
            "LEGACY_MONSTER_EGG" => Some(MaterialEnum::LegacyMonsterEgg),
            "LEGACY_EXP_BOTTLE" => Some(MaterialEnum::LegacyExpBottle),
            "LEGACY_FIREBALL" => Some(MaterialEnum::LegacyFireball),
            "LEGACY_BOOK_AND_QUILL" => Some(MaterialEnum::LegacyBookAndQuill),
            "LEGACY_WRITTEN_BOOK" => Some(MaterialEnum::LegacyWrittenBook),
            "LEGACY_EMERALD" => Some(MaterialEnum::LegacyEmerald),
            "LEGACY_ITEM_FRAME" => Some(MaterialEnum::LegacyItemFrame),
            "LEGACY_FLOWER_POT_ITEM" => Some(MaterialEnum::LegacyFlowerPotItem),
            "LEGACY_CARROT_ITEM" => Some(MaterialEnum::LegacyCarrotItem),
            "LEGACY_POTATO_ITEM" => Some(MaterialEnum::LegacyPotatoItem),
            "LEGACY_BAKED_POTATO" => Some(MaterialEnum::LegacyBakedPotato),
            "LEGACY_POISONOUS_POTATO" => Some(MaterialEnum::LegacyPoisonousPotato),
            "LEGACY_EMPTY_MAP" => Some(MaterialEnum::LegacyEmptyMap),
            "LEGACY_GOLDEN_CARROT" => Some(MaterialEnum::LegacyGoldenCarrot),
            "LEGACY_SKULL_ITEM" => Some(MaterialEnum::LegacySkullItem),
            "LEGACY_CARROT_STICK" => Some(MaterialEnum::LegacyCarrotStick),
            "LEGACY_NETHER_STAR" => Some(MaterialEnum::LegacyNetherStar),
            "LEGACY_PUMPKIN_PIE" => Some(MaterialEnum::LegacyPumpkinPie),
            "LEGACY_FIREWORK" => Some(MaterialEnum::LegacyFirework),
            "LEGACY_FIREWORK_CHARGE" => Some(MaterialEnum::LegacyFireworkCharge),
            "LEGACY_ENCHANTED_BOOK" => Some(MaterialEnum::LegacyEnchantedBook),
            "LEGACY_REDSTONE_COMPARATOR" => Some(MaterialEnum::LegacyRedstoneComparator),
            "LEGACY_NETHER_BRICK_ITEM" => Some(MaterialEnum::LegacyNetherBrickItem),
            "LEGACY_QUARTZ" => Some(MaterialEnum::LegacyQuartz),
            "LEGACY_EXPLOSIVE_MINECART" => Some(MaterialEnum::LegacyExplosiveMinecart),
            "LEGACY_HOPPER_MINECART" => Some(MaterialEnum::LegacyHopperMinecart),
            "LEGACY_PRISMARINE_SHARD" => Some(MaterialEnum::LegacyPrismarineShard),
            "LEGACY_PRISMARINE_CRYSTALS" => Some(MaterialEnum::LegacyPrismarineCrystals),
            "LEGACY_RABBIT" => Some(MaterialEnum::LegacyRabbit),
            "LEGACY_COOKED_RABBIT" => Some(MaterialEnum::LegacyCookedRabbit),
            "LEGACY_RABBIT_STEW" => Some(MaterialEnum::LegacyRabbitStew),
            "LEGACY_RABBIT_FOOT" => Some(MaterialEnum::LegacyRabbitFoot),
            "LEGACY_RABBIT_HIDE" => Some(MaterialEnum::LegacyRabbitHide),
            "LEGACY_ARMOR_STAND" => Some(MaterialEnum::LegacyArmorStand),
            "LEGACY_IRON_BARDING" => Some(MaterialEnum::LegacyIronBarding),
            "LEGACY_GOLD_BARDING" => Some(MaterialEnum::LegacyGoldBarding),
            "LEGACY_DIAMOND_BARDING" => Some(MaterialEnum::LegacyDiamondBarding),
            "LEGACY_LEASH" => Some(MaterialEnum::LegacyLeash),
            "LEGACY_NAME_TAG" => Some(MaterialEnum::LegacyNameTag),
            "LEGACY_COMMAND_MINECART" => Some(MaterialEnum::LegacyCommandMinecart),
            "LEGACY_MUTTON" => Some(MaterialEnum::LegacyMutton),
            "LEGACY_COOKED_MUTTON" => Some(MaterialEnum::LegacyCookedMutton),
            "LEGACY_BANNER" => Some(MaterialEnum::LegacyBanner),
            "LEGACY_END_CRYSTAL" => Some(MaterialEnum::LegacyEndCrystal),
            "LEGACY_SPRUCE_DOOR_ITEM" => Some(MaterialEnum::LegacySpruceDoorItem),
            "LEGACY_BIRCH_DOOR_ITEM" => Some(MaterialEnum::LegacyBirchDoorItem),
            "LEGACY_JUNGLE_DOOR_ITEM" => Some(MaterialEnum::LegacyJungleDoorItem),
            "LEGACY_ACACIA_DOOR_ITEM" => Some(MaterialEnum::LegacyAcaciaDoorItem),
            "LEGACY_DARK_OAK_DOOR_ITEM" => Some(MaterialEnum::LegacyDarkOakDoorItem),
            "LEGACY_CHORUS_FRUIT" => Some(MaterialEnum::LegacyChorusFruit),
            "LEGACY_CHORUS_FRUIT_POPPED" => Some(MaterialEnum::LegacyChorusFruitPopped),
            "LEGACY_BEETROOT" => Some(MaterialEnum::LegacyBeetroot),
            "LEGACY_BEETROOT_SEEDS" => Some(MaterialEnum::LegacyBeetrootSeeds),
            "LEGACY_BEETROOT_SOUP" => Some(MaterialEnum::LegacyBeetrootSoup),
            "LEGACY_DRAGONS_BREATH" => Some(MaterialEnum::LegacyDragonsBreath),
            "LEGACY_SPLASH_POTION" => Some(MaterialEnum::LegacySplashPotion),
            "LEGACY_SPECTRAL_ARROW" => Some(MaterialEnum::LegacySpectralArrow),
            "LEGACY_TIPPED_ARROW" => Some(MaterialEnum::LegacyTippedArrow),
            "LEGACY_LINGERING_POTION" => Some(MaterialEnum::LegacyLingeringPotion),
            "LEGACY_SHIELD" => Some(MaterialEnum::LegacyShield),
            "LEGACY_ELYTRA" => Some(MaterialEnum::LegacyElytra),
            "LEGACY_BOAT_SPRUCE" => Some(MaterialEnum::LegacyBoatSpruce),
            "LEGACY_BOAT_BIRCH" => Some(MaterialEnum::LegacyBoatBirch),
            "LEGACY_BOAT_JUNGLE" => Some(MaterialEnum::LegacyBoatJungle),
            "LEGACY_BOAT_ACACIA" => Some(MaterialEnum::LegacyBoatAcacia),
            "LEGACY_BOAT_DARK_OAK" => Some(MaterialEnum::LegacyBoatDarkOak),
            "LEGACY_TOTEM" => Some(MaterialEnum::LegacyTotem),
            "LEGACY_SHULKER_SHELL" => Some(MaterialEnum::LegacyShulkerShell),
            "LEGACY_IRON_NUGGET" => Some(MaterialEnum::LegacyIronNugget),
            "LEGACY_KNOWLEDGE_BOOK" => Some(MaterialEnum::LegacyKnowledgeBook),
            "LEGACY_GOLD_RECORD" => Some(MaterialEnum::LegacyGoldRecord),
            "LEGACY_GREEN_RECORD" => Some(MaterialEnum::LegacyGreenRecord),
            "LEGACY_RECORD_3" => Some(MaterialEnum::LegacyRecord3),
            "LEGACY_RECORD_4" => Some(MaterialEnum::LegacyRecord4),
            "LEGACY_RECORD_5" => Some(MaterialEnum::LegacyRecord5),
            "LEGACY_RECORD_6" => Some(MaterialEnum::LegacyRecord6),
            "LEGACY_RECORD_7" => Some(MaterialEnum::LegacyRecord7),
            "LEGACY_RECORD_8" => Some(MaterialEnum::LegacyRecord8),
            "LEGACY_RECORD_9" => Some(MaterialEnum::LegacyRecord9),
            "LEGACY_RECORD_10" => Some(MaterialEnum::LegacyRecord10),
            "LEGACY_RECORD_11" => Some(MaterialEnum::LegacyRecord11),
            "LEGACY_RECORD_12" => Some(MaterialEnum::LegacyRecord12),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Material<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Material")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Material;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Material(
                jni,
                raw_obj,
                crate::bukkit::Material::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn is_record(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isRecord", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn id(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getId", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn data(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getData",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn get_material_with_string(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: std::option::Option<String>,
        arg1: std::option::Option<bool>,
    ) -> Result<crate::bukkit::Material<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0.unwrap()).unwrap());
        let val_1 = jni::objects::JValueGen::Bool(arg1.unwrap().into());
        let cls = &jni.find_class("org/bukkit/Material")?;
        let res = jni.call_static_method(
            cls,
            "getMaterial",
            "(Ljava/lang/String;Z)Lorg/bukkit/Material;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Material(
                jni,
                raw_obj,
                crate::bukkit::Material::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn is_occluding(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isOccluding", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn has_gravity(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasGravity", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn translation_key(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTranslationKey",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn max_stack_size(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getMaxStackSize", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn is_enabled_by_feature(
        &mut self,
        arg0: crate::bukkit::World<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isEnabledByFeature",
            "(Lorg/bukkit/World;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn is_legacy(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isLegacy", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn get_new_data(
        &mut self,
        arg0: i8,
    ) -> Result<crate::bukkit::material::MaterialData<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Byte(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getNewData",
            "(B)Lorg/bukkit/material/MaterialData;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::material::MaterialData(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn max_durability(&mut self) -> Result<i16, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getMaxDurability", "()S", &[])?;
        Ok(res.s().unwrap())
    }
    pub fn is_block(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isBlock", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_item(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isItem", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn creative_category(
        &mut self,
    ) -> Result<crate::bukkit::inventory::CreativeCategory<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getCreativeCategory",
            "()Lorg/bukkit/inventory/CreativeCategory;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant = self
                .0
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .0
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::inventory::CreativeCategory(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::inventory::CreativeCategory::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn block_translation_key(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockTranslationKey",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn item_translation_key(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getItemTranslationKey",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn is_edible(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isEdible", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn match_material_with_string(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: std::option::Option<String>,
        arg1: std::option::Option<bool>,
    ) -> Result<crate::bukkit::Material<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0.unwrap()).unwrap());
        let val_1 = jni::objects::JValueGen::Bool(arg1.unwrap().into());
        let cls = &jni.find_class("org/bukkit/Material")?;
        let res = jni.call_static_method(
            cls,
            "matchMaterial",
            "(Ljava/lang/String;Z)Lorg/bukkit/Material;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Material(
                jni,
                raw_obj,
                crate::bukkit::Material::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn is_solid(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isSolid", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_air(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isAir", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_transparent(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isTransparent", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_flammable(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isFlammable", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_burnable(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isBurnable", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_fuel(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isFuel", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn is_interactable(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isInteractable", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn hardness(&mut self) -> Result<f32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getHardness", "()F", &[])?;
        Ok(res.f().unwrap())
    }
    pub fn blast_resistance(&mut self) -> Result<f32, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getBlastResistance", "()F", &[])?;
        Ok(res.f().unwrap())
    }
    pub fn slipperiness(&mut self) -> Result<f32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSlipperiness", "()F", &[])?;
        Ok(res.f().unwrap())
    }
    pub fn crafting_remaining_item(
        &mut self,
    ) -> Result<crate::bukkit::Material<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getCraftingRemainingItem",
            "()Lorg/bukkit/Material;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant = self
                .0
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .0
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Material(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Material::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn equipment_slot(
        &mut self,
    ) -> Result<crate::bukkit::inventory::EquipmentSlot<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEquipmentSlot",
            "()Lorg/bukkit/inventory/EquipmentSlot;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant = self
                .0
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .0
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::inventory::EquipmentSlot(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::inventory::EquipmentSlot::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
/// An instantiatable struct that implements Registry. Needed for returning it from Java.
pub struct Registry<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> Registry<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Registry from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Registry") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Registry object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn get(
        &mut self,
        arg0: crate::bukkit::NamespacedKey<'mc>,
    ) -> Result<crate::bukkit::Keyed<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "get",
            "(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/Keyed;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::Keyed(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn get_match(
        &mut self,
        arg0: String,
    ) -> Result<crate::bukkit::Keyed<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(self.jni_ref().new_string(arg0).unwrap());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "match",
            "(Ljava/lang/String;)Lorg/bukkit/Keyed;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::Keyed(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn spliterator(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "spliterator",
            "()Ljava/util/Spliterator;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
}
impl<'mc> crate::JNIRaw<'mc> for Registry<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub enum RotationEnum {
    None,
    Clockwise45,
    Clockwise,
    Clockwise135,
    Flipped,
    Flipped45,
    CounterClockwise,
    CounterClockwise45,
}
impl std::fmt::Display for RotationEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            RotationEnum::None => f.write_str("NONE"),
            RotationEnum::Clockwise45 => f.write_str("CLOCKWISE_45"),
            RotationEnum::Clockwise => f.write_str("CLOCKWISE"),
            RotationEnum::Clockwise135 => f.write_str("CLOCKWISE_135"),
            RotationEnum::Flipped => f.write_str("FLIPPED"),
            RotationEnum::Flipped45 => f.write_str("FLIPPED_45"),
            RotationEnum::CounterClockwise => f.write_str("COUNTER_CLOCKWISE"),
            RotationEnum::CounterClockwise45 => f.write_str("COUNTER_CLOCKWISE_45"),
        }
    }
}
pub struct Rotation<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub RotationEnum,
);
impl<'mc> std::ops::Deref for Rotation<'mc> {
    type Target = RotationEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for Rotation<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Rotation<'mc> {
    pub const NONE: RotationEnum = RotationEnum::None;
    pub const CLOCKWISE45: RotationEnum = RotationEnum::Clockwise45;
    pub const CLOCKWISE: RotationEnum = RotationEnum::Clockwise;
    pub const CLOCKWISE135: RotationEnum = RotationEnum::Clockwise135;
    pub const FLIPPED: RotationEnum = RotationEnum::Flipped;
    pub const FLIPPED45: RotationEnum = RotationEnum::Flipped45;
    pub const COUNTERCLOCKWISE: RotationEnum = RotationEnum::CounterClockwise;
    pub const COUNTERCLOCKWISE45: RotationEnum = RotationEnum::CounterClockwise45;
    pub fn from_string(str: String) -> std::option::Option<RotationEnum> {
        match str.as_str() {
            "NONE" => Some(RotationEnum::None),
            "CLOCKWISE_45" => Some(RotationEnum::Clockwise45),
            "CLOCKWISE" => Some(RotationEnum::Clockwise),
            "CLOCKWISE_135" => Some(RotationEnum::Clockwise135),
            "FLIPPED" => Some(RotationEnum::Flipped),
            "FLIPPED_45" => Some(RotationEnum::Flipped45),
            "COUNTER_CLOCKWISE" => Some(RotationEnum::CounterClockwise),
            "COUNTER_CLOCKWISE_45" => Some(RotationEnum::CounterClockwise45),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Rotation<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Rotation")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Rotation;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Rotation(
                jni,
                raw_obj,
                crate::bukkit::Rotation::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn rotate_clockwise(
        &mut self,
    ) -> Result<crate::bukkit::Rotation<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "rotateClockwise",
            "()Lorg/bukkit/Rotation;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant = self
                .0
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .0
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Rotation(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Rotation::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn rotate_counter_clockwise(
        &mut self,
    ) -> Result<crate::bukkit::Rotation<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "rotateCounterClockwise",
            "()Lorg/bukkit/Rotation;",
            &[],
        )?;
        let ret = {
            let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
            let variant = self
                .0
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = self
                .0
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Rotation(
                self.jni_ref(),
                raw_obj,
                crate::bukkit::Rotation::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub struct VibrationDestinationEntityDestination<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for VibrationDestinationEntityDestination<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> VibrationDestinationEntityDestination<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate VibrationDestinationEntityDestination from null object."
            )
            .into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("VibrationDestinationEntityDestination") {
            Err(eyre::eyre!(
        "Invalid argument passed. Expected a VibrationDestinationEntityDestination object, got {}",
        name
    )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn entity(
        &mut self,
    ) -> Result<crate::bukkit::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEntity",
            "()Lorg/bukkit/entity/Entity;",
            &[],
        )?;
        let ret = {
            crate::bukkit::entity::Entity(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
/// An instantiatable struct that implements UndefinedNullability. Needed for returning it from Java.
pub struct UndefinedNullability<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> UndefinedNullability<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate UndefinedNullability from null object.").into(),
            );
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("UndefinedNullability") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a UndefinedNullability object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn value(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "value", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn annotation_type(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "annotationType",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
}
impl<'mc> crate::JNIRaw<'mc> for UndefinedNullability<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub enum CoalTypeEnum {
    Coal,
    Charcoal,
}
impl std::fmt::Display for CoalTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            CoalTypeEnum::Coal => f.write_str("COAL"),
            CoalTypeEnum::Charcoal => f.write_str("CHARCOAL"),
        }
    }
}
pub struct CoalType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub CoalTypeEnum,
);
impl<'mc> std::ops::Deref for CoalType<'mc> {
    type Target = CoalTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for CoalType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> CoalType<'mc> {
    pub const COAL: CoalTypeEnum = CoalTypeEnum::Coal;
    pub const CHARCOAL: CoalTypeEnum = CoalTypeEnum::Charcoal;
    pub fn from_string(str: String) -> std::option::Option<CoalTypeEnum> {
        match str.as_str() {
            "COAL" => Some(CoalTypeEnum::Coal),
            "CHARCOAL" => Some(CoalTypeEnum::Charcoal),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::CoalType<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/CoalType")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/CoalType;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::CoalType(
                jni,
                raw_obj,
                crate::bukkit::CoalType::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn data(&mut self) -> Result<i8, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getData", "()B", &[])?;
        Ok(res.b().unwrap())
    }
    pub fn get_by_data(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i8,
    ) -> Result<crate::bukkit::CoalType<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Byte(arg0.into());
        let cls = &jni.find_class("org/bukkit/CoalType")?;
        let res = jni.call_static_method(
            cls,
            "getByData",
            "(B)Lorg/bukkit/CoalType;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::CoalType(
                jni,
                raw_obj,
                crate::bukkit::CoalType::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub struct WorldEnvironment<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for WorldEnvironment<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> WorldEnvironment<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate WorldEnvironment from null object.").into(),
            );
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("WorldEnvironment") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WorldEnvironment object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn id(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getId", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn get_environment(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<crate::bukkit::WorldEnvironment<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let cls = &jni.find_class("org/bukkit/World$Environment")?;
        let res = jni.call_static_method(
            cls,
            "getEnvironment",
            "(I)Lorg/bukkit/World$Environment;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::WorldEnvironment(jni, obj)
        };
        Ok(ret)
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "name", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn describe_constable(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "describeConstable",
            "()Ljava/util/Optional;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn declaring_class(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDeclaringClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn ordinal(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "ordinal", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
/// An instantiatable struct that implements BlockChangeDelegate. Needed for returning it from Java.
pub struct BlockChangeDelegate<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> BlockChangeDelegate<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate BlockChangeDelegate from null object.").into(),
            );
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("BlockChangeDelegate") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a BlockChangeDelegate object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn is_empty(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isEmpty",
            "(III)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn height(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getHeight", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn get_block_data(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<crate::bukkit::block::data::BlockData<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockData",
            "(III)Lorg/bukkit/block/data/BlockData;",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
            ],
        )?;
        let ret = {
            crate::bukkit::block::data::BlockData(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn set_block_data(
        &mut self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
        arg3: crate::bukkit::block::data::BlockData<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Int(arg0.into());
        let val_1 = jni::objects::JValueGen::Int(arg1.into());
        let val_2 = jni::objects::JValueGen::Int(arg2.into());
        let val_3 = unsafe { jni::objects::JObject::from_raw(arg3.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setBlockData",
            "(IIILorg/bukkit/block/data/BlockData;)Z",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
                jni::objects::JValueGen::from(&val_2),
                jni::objects::JValueGen::from(&val_3),
            ],
        )?;
        Ok(res.z().unwrap())
    }
}
impl<'mc> crate::JNIRaw<'mc> for BlockChangeDelegate<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub struct StructureType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for StructureType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> StructureType<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate StructureType from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("StructureType") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a StructureType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getName",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn map_icon(
        &mut self,
    ) -> Result<crate::bukkit::map::MapCursorType<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMapIcon",
            "()Lorg/bukkit/map/MapCursor$Type;",
            &[],
        )?;
        let ret = {
            crate::bukkit::map::MapCursorType(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub struct RaidRaidStatus<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for RaidRaidStatus<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> RaidRaidStatus<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate RaidRaidStatus from null object.").into(),
            );
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("RaidRaidStatus") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a RaidRaidStatus object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn name(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "name", "()Ljava/lang/String;", &[])?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn describe_constable(
        &mut self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "describeConstable",
            "()Ljava/util/Optional;",
            &[],
        )?;
        Ok(res.l().unwrap())
    }
    pub fn declaring_class(
        &mut self,
    ) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDeclaringClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn ordinal(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "ordinal", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub enum InstrumentEnum {
    Piano,
    BassDrum,
    SnareDrum,
    Sticks,
    BassGuitar,
    Flute,
    Bell,
    Guitar,
    Chime,
    Xylophone,
    IronXylophone,
    CowBell,
    Didgeridoo,
    Bit,
    Banjo,
    Pling,
    Zombie,
    Skeleton,
    Creeper,
    Dragon,
    WitherSkeleton,
    Piglin,
    CustomHead,
}
impl std::fmt::Display for InstrumentEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            InstrumentEnum::Piano => f.write_str("PIANO"),
            InstrumentEnum::BassDrum => f.write_str("BASS_DRUM"),
            InstrumentEnum::SnareDrum => f.write_str("SNARE_DRUM"),
            InstrumentEnum::Sticks => f.write_str("STICKS"),
            InstrumentEnum::BassGuitar => f.write_str("BASS_GUITAR"),
            InstrumentEnum::Flute => f.write_str("FLUTE"),
            InstrumentEnum::Bell => f.write_str("BELL"),
            InstrumentEnum::Guitar => f.write_str("GUITAR"),
            InstrumentEnum::Chime => f.write_str("CHIME"),
            InstrumentEnum::Xylophone => f.write_str("XYLOPHONE"),
            InstrumentEnum::IronXylophone => f.write_str("IRON_XYLOPHONE"),
            InstrumentEnum::CowBell => f.write_str("COW_BELL"),
            InstrumentEnum::Didgeridoo => f.write_str("DIDGERIDOO"),
            InstrumentEnum::Bit => f.write_str("BIT"),
            InstrumentEnum::Banjo => f.write_str("BANJO"),
            InstrumentEnum::Pling => f.write_str("PLING"),
            InstrumentEnum::Zombie => f.write_str("ZOMBIE"),
            InstrumentEnum::Skeleton => f.write_str("SKELETON"),
            InstrumentEnum::Creeper => f.write_str("CREEPER"),
            InstrumentEnum::Dragon => f.write_str("DRAGON"),
            InstrumentEnum::WitherSkeleton => f.write_str("WITHER_SKELETON"),
            InstrumentEnum::Piglin => f.write_str("PIGLIN"),
            InstrumentEnum::CustomHead => f.write_str("CUSTOM_HEAD"),
        }
    }
}
pub struct Instrument<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub InstrumentEnum,
);
impl<'mc> std::ops::Deref for Instrument<'mc> {
    type Target = InstrumentEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for Instrument<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Instrument<'mc> {
    pub const PIANO: InstrumentEnum = InstrumentEnum::Piano;
    pub const BASSDRUM: InstrumentEnum = InstrumentEnum::BassDrum;
    pub const SNAREDRUM: InstrumentEnum = InstrumentEnum::SnareDrum;
    pub const STICKS: InstrumentEnum = InstrumentEnum::Sticks;
    pub const BASSGUITAR: InstrumentEnum = InstrumentEnum::BassGuitar;
    pub const FLUTE: InstrumentEnum = InstrumentEnum::Flute;
    pub const BELL: InstrumentEnum = InstrumentEnum::Bell;
    pub const GUITAR: InstrumentEnum = InstrumentEnum::Guitar;
    pub const CHIME: InstrumentEnum = InstrumentEnum::Chime;
    pub const XYLOPHONE: InstrumentEnum = InstrumentEnum::Xylophone;
    pub const IRONXYLOPHONE: InstrumentEnum = InstrumentEnum::IronXylophone;
    pub const COWBELL: InstrumentEnum = InstrumentEnum::CowBell;
    pub const DIDGERIDOO: InstrumentEnum = InstrumentEnum::Didgeridoo;
    pub const BIT: InstrumentEnum = InstrumentEnum::Bit;
    pub const BANJO: InstrumentEnum = InstrumentEnum::Banjo;
    pub const PLING: InstrumentEnum = InstrumentEnum::Pling;
    pub const ZOMBIE: InstrumentEnum = InstrumentEnum::Zombie;
    pub const SKELETON: InstrumentEnum = InstrumentEnum::Skeleton;
    pub const CREEPER: InstrumentEnum = InstrumentEnum::Creeper;
    pub const DRAGON: InstrumentEnum = InstrumentEnum::Dragon;
    pub const WITHERSKELETON: InstrumentEnum = InstrumentEnum::WitherSkeleton;
    pub const PIGLIN: InstrumentEnum = InstrumentEnum::Piglin;
    pub const CUSTOMHEAD: InstrumentEnum = InstrumentEnum::CustomHead;
    pub fn from_string(str: String) -> std::option::Option<InstrumentEnum> {
        match str.as_str() {
            "PIANO" => Some(InstrumentEnum::Piano),
            "BASS_DRUM" => Some(InstrumentEnum::BassDrum),
            "SNARE_DRUM" => Some(InstrumentEnum::SnareDrum),
            "STICKS" => Some(InstrumentEnum::Sticks),
            "BASS_GUITAR" => Some(InstrumentEnum::BassGuitar),
            "FLUTE" => Some(InstrumentEnum::Flute),
            "BELL" => Some(InstrumentEnum::Bell),
            "GUITAR" => Some(InstrumentEnum::Guitar),
            "CHIME" => Some(InstrumentEnum::Chime),
            "XYLOPHONE" => Some(InstrumentEnum::Xylophone),
            "IRON_XYLOPHONE" => Some(InstrumentEnum::IronXylophone),
            "COW_BELL" => Some(InstrumentEnum::CowBell),
            "DIDGERIDOO" => Some(InstrumentEnum::Didgeridoo),
            "BIT" => Some(InstrumentEnum::Bit),
            "BANJO" => Some(InstrumentEnum::Banjo),
            "PLING" => Some(InstrumentEnum::Pling),
            "ZOMBIE" => Some(InstrumentEnum::Zombie),
            "SKELETON" => Some(InstrumentEnum::Skeleton),
            "CREEPER" => Some(InstrumentEnum::Creeper),
            "DRAGON" => Some(InstrumentEnum::Dragon),
            "WITHER_SKELETON" => Some(InstrumentEnum::WitherSkeleton),
            "PIGLIN" => Some(InstrumentEnum::Piglin),
            "CUSTOM_HEAD" => Some(InstrumentEnum::CustomHead),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::Instrument<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/Instrument")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Instrument;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Instrument(
                jni,
                raw_obj,
                crate::bukkit::Instrument::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
    pub fn get_type(&mut self) -> Result<i8, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getType", "()B", &[])?;
        Ok(res.b().unwrap())
    }
    pub fn get_by_type(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: i8,
    ) -> Result<crate::bukkit::Instrument<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Byte(arg0.into());
        let cls = &jni.find_class("org/bukkit/Instrument")?;
        let res = jni.call_static_method(
            cls,
            "getByType",
            "(B)Lorg/bukkit/Instrument;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::Instrument(
                jni,
                raw_obj,
                crate::bukkit::Instrument::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
/// An instantiatable struct that implements Tag. Needed for returning it from Java.
pub struct Tag<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> Tag<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Tag from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Tag") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Tag object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn is_tagged(
        &mut self,
        arg0: crate::bukkit::Keyed<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isTagged",
            "(Lorg/bukkit/Keyed;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn key(&mut self) -> Result<crate::bukkit::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKey",
            "()Lorg/bukkit/NamespacedKey;",
            &[],
        )?;
        let ret = {
            crate::bukkit::NamespacedKey(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
}
impl<'mc> crate::JNIRaw<'mc> for Tag<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
pub enum SkullTypeEnum {
    Skeleton,
    Wither,
    Zombie,
    Player,
    Creeper,
    Dragon,
    Piglin,
}
impl std::fmt::Display for SkullTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            SkullTypeEnum::Skeleton => f.write_str("SKELETON"),
            SkullTypeEnum::Wither => f.write_str("WITHER"),
            SkullTypeEnum::Zombie => f.write_str("ZOMBIE"),
            SkullTypeEnum::Player => f.write_str("PLAYER"),
            SkullTypeEnum::Creeper => f.write_str("CREEPER"),
            SkullTypeEnum::Dragon => f.write_str("DRAGON"),
            SkullTypeEnum::Piglin => f.write_str("PIGLIN"),
        }
    }
}
pub struct SkullType<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub SkullTypeEnum,
);
impl<'mc> std::ops::Deref for SkullType<'mc> {
    type Target = SkullTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
impl<'mc> crate::JNIRaw<'mc> for SkullType<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> SkullType<'mc> {
    pub const SKELETON: SkullTypeEnum = SkullTypeEnum::Skeleton;
    pub const WITHER: SkullTypeEnum = SkullTypeEnum::Wither;
    pub const ZOMBIE: SkullTypeEnum = SkullTypeEnum::Zombie;
    pub const PLAYER: SkullTypeEnum = SkullTypeEnum::Player;
    pub const CREEPER: SkullTypeEnum = SkullTypeEnum::Creeper;
    pub const DRAGON: SkullTypeEnum = SkullTypeEnum::Dragon;
    pub const PIGLIN: SkullTypeEnum = SkullTypeEnum::Piglin;
    pub fn from_string(str: String) -> std::option::Option<SkullTypeEnum> {
        match str.as_str() {
            "SKELETON" => Some(SkullTypeEnum::Skeleton),
            "WITHER" => Some(SkullTypeEnum::Wither),
            "ZOMBIE" => Some(SkullTypeEnum::Zombie),
            "PLAYER" => Some(SkullTypeEnum::Player),
            "CREEPER" => Some(SkullTypeEnum::Creeper),
            "DRAGON" => Some(SkullTypeEnum::Dragon),
            "PIGLIN" => Some(SkullTypeEnum::Piglin),
            _ => None,
        }
    }
    pub fn value_of(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: String,
    ) -> Result<crate::bukkit::SkullType<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JObject::from(jni.new_string(arg0).unwrap());
        let cls = &jni.find_class("org/bukkit/SkullType")?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/SkullType;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            let raw_obj = obj;
            let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", &[])?;
            let variant_str = jni
                .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                .to_string_lossy()
                .to_string();
            crate::bukkit::SkullType(
                jni,
                raw_obj,
                crate::bukkit::SkullType::from_string(variant_str).unwrap(),
            )
        };
        Ok(ret)
    }
}
pub struct Location<'mc>(
    pub(crate) crate::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
impl<'mc> crate::JNIRaw<'mc> for Location<'mc> {
    fn jni_ref(&self) -> crate::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}
impl<'mc> Location<'mc> {
    pub fn from_raw(
        env: &crate::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Location from null object.").into());
        }
        let cls = env.jni.borrow().get_object_class(&obj)?;
        let name_raw = env.call_method(cls, "getName", "()Ljava/lang/String;", &[])?;
        let oh = name_raw.l()?.into();
        let what = env.get_string(&oh)?;
        let name = what.to_string_lossy();
        if !name.ends_with("Location") {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Location object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
    pub fn equals(
        &mut self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let val_0 = arg0;
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            "(Ljava/lang/Object;)Z",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.z().unwrap())
    }
    pub fn length(&mut self) -> Result<f64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "length", "()D", &[])?;
        Ok(res.d().unwrap())
    }
    pub fn to_string(&mut self) -> Result<String, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toString",
            "()Ljava/lang/String;",
            &[],
        )?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    pub fn hash_code(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn clone(&mut self) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "clone",
            "()Lorg/bukkit/Location;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Location(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn zero(&mut self) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "zero",
            "()Lorg/bukkit/Location;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Location(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn distance(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
    ) -> Result<f64, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "distance",
            "(Lorg/bukkit/Location;)D",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.d().unwrap())
    }
    pub fn multiply(
        &mut self,
        arg0: f64,
    ) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Double(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "multiply",
            "(D)Lorg/bukkit/Location;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::Location(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn world(&mut self) -> Result<crate::bukkit::World<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWorld",
            "()Lorg/bukkit/World;",
            &[],
        )?;
        let ret = {
            crate::bukkit::World(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn block(
        &mut self,
    ) -> Result<crate::bukkit::block::Block<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlock",
            "()Lorg/bukkit/block/Block;",
            &[],
        )?;
        let ret = {
            crate::bukkit::block::Block(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn x(&mut self) -> Result<f64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getX", "()D", &[])?;
        Ok(res.d().unwrap())
    }
    pub fn y(&mut self) -> Result<f64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getY", "()D", &[])?;
        Ok(res.d().unwrap())
    }
    pub fn z(&mut self) -> Result<f64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getZ", "()D", &[])?;
        Ok(res.d().unwrap())
    }
    pub fn chunk(&mut self) -> Result<crate::bukkit::Chunk<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getChunk",
            "()Lorg/bukkit/Chunk;",
            &[],
        )?;
        let ret = {
            crate::bukkit::Chunk(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn set_world(
        &mut self,
        arg0: crate::bukkit::World<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        self.jni_ref().call_method(
            &self.jni_object(),
            "setWorld",
            "(Lorg/bukkit/World;)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn is_world_loaded(&mut self) -> Result<bool, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isWorldLoaded", "()Z", &[])?;
        Ok(res.z().unwrap())
    }
    pub fn set_x(&mut self, arg0: f64) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Double(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setX",
            "(D)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn block_x(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlockX", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn loc_to_block(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: f64,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Double(arg0.into());
        let cls = &jni.find_class("int")?;
        let res = jni.call_static_method(
            cls,
            "locToBlock",
            "(D)I",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.i().unwrap())
    }
    pub fn set_y(&mut self, arg0: f64) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Double(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setY",
            "(D)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn block_y(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlockY", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_z(&mut self, arg0: f64) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Double(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setZ",
            "(D)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn block_z(&mut self) -> Result<i32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlockZ", "()I", &[])?;
        Ok(res.i().unwrap())
    }
    pub fn set_yaw(&mut self, arg0: f32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Float(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setYaw",
            "(F)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn yaw(&mut self) -> Result<f32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getYaw", "()F", &[])?;
        Ok(res.f().unwrap())
    }
    pub fn set_pitch(&mut self, arg0: f32) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Float(arg0.into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "setPitch",
            "(F)V",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(())
    }
    pub fn pitch(&mut self) -> Result<f32, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getPitch", "()F", &[])?;
        Ok(res.f().unwrap())
    }
    pub fn direction(
        &mut self,
    ) -> Result<crate::bukkit::util::Vector<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDirection",
            "()Lorg/bukkit/util/Vector;",
            &[],
        )?;
        let ret = {
            crate::bukkit::util::Vector(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn set_direction(
        &mut self,
        arg0: crate::bukkit::util::Vector<'mc>,
    ) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setDirection",
            "(Lorg/bukkit/util/Vector;)Lorg/bukkit/Location;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            crate::bukkit::Location(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn length_squared(&mut self) -> Result<f64, Box<dyn std::error::Error>> {
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "lengthSquared", "()D", &[])?;
        Ok(res.d().unwrap())
    }
    pub fn distance_squared(
        &mut self,
        arg0: crate::bukkit::Location<'mc>,
    ) -> Result<f64, Box<dyn std::error::Error>> {
        let val_0 = unsafe { jni::objects::JObject::from_raw(arg0.1.clone()) };
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "distanceSquared",
            "(Lorg/bukkit/Location;)D",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.d().unwrap())
    }
    pub fn to_vector(
        &mut self,
    ) -> Result<crate::bukkit::util::Vector<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toVector",
            "()Lorg/bukkit/util/Vector;",
            &[],
        )?;
        let ret = {
            crate::bukkit::util::Vector(self.jni_ref(), unsafe {
                jni::objects::JObject::from_raw(res.l()?.clone())
            })
        };
        Ok(ret)
    }
    pub fn check_finite(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "checkFinite", "()V", &[])?;
        Ok(())
    }
    pub fn deserialize(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: std::collections::HashMap<String, jni::objects::JObject<'mc>>,
    ) -> Result<crate::bukkit::Location<'mc>, Box<dyn std::error::Error>> {
        let raw_val_0 = jni.new_object("java/util/HashMap", "()V", &[]).unwrap();
        for (k, v) in arg0 {
            let map_val_0 = jni::objects::JObject::from(jni.new_string(k).unwrap());
            let map_val_1 = v;
            jni.call_method(
                &raw_val_0,
                "put",
                "(Ljava/Lang/ObjectLjava/Lang/Object)V",
                &[
                    jni::objects::JValueGen::from(&map_val_0),
                    jni::objects::JValueGen::from(&map_val_1),
                ],
            )?;
        }
        let val_0 = jni::objects::JValueGen::Object(raw_val_0);
        let cls = &jni.find_class("org/bukkit/Location")?;
        let res = jni.call_static_method(
            cls,
            "deserialize",
            "(Ljava/util/Map;)Lorg/bukkit/Location;",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        let ret = {
            let obj = res.l()?;
            crate::bukkit::Location(jni, obj)
        };
        Ok(ret)
    }
    pub fn normalize_yaw(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: f32,
    ) -> Result<f32, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Float(arg0.into());
        let cls = &jni.find_class("float")?;
        let res = jni.call_static_method(
            cls,
            "normalizeYaw",
            "(F)F",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.f().unwrap())
    }
    pub fn normalize_pitch(
        mut jni: crate::SharedJNIEnv<'mc>,
        arg0: f32,
    ) -> Result<f32, Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Float(arg0.into());
        let cls = &jni.find_class("float")?;
        let res = jni.call_static_method(
            cls,
            "normalizePitch",
            "(F)F",
            &[jni::objects::JValueGen::from(&val_0)],
        )?;
        Ok(res.f().unwrap())
    }
    pub fn wait(
        &mut self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let val_0 = jni::objects::JValueGen::Long(arg0.unwrap().into());
        let val_1 = jni::objects::JValueGen::Int(arg1.unwrap().into());
        self.jni_ref().call_method(
            &self.jni_object(),
            "wait",
            "(JI)V",
            &[
                jni::objects::JValueGen::from(&val_0),
                jni::objects::JValueGen::from(&val_1),
            ],
        )?;
        Ok(())
    }
    pub fn class(&mut self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClass",
            "()Ljava/lang/Class;",
            &[],
        )?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    pub fn notify(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notify", "()V", &[])?;
        Ok(())
    }
    pub fn notify_all(&mut self) -> Result<(), Box<dyn std::error::Error>> {
        self.jni_ref()
            .call_method(&self.jni_object(), "notifyAll", "()V", &[])?;
        Ok(())
    }
}
pub mod advancement;
pub mod attribute;
pub mod ban;
pub mod block;
pub mod boss;
pub mod command;
pub mod configuration;
pub mod conversations;
pub mod enchantments;
pub mod entity;
pub mod event;
pub mod generator;
pub mod help;
pub mod inventory;
pub mod loot;
pub mod map;
pub mod material;
pub mod metadata;
pub mod packs;
pub mod permissions;
pub mod persistence;
pub mod plugin;
pub mod potion;
pub mod profile;
pub mod projectiles;
pub mod scheduler;
pub mod scoreboard;
pub mod structure;
pub mod util;
