#![allow(deprecated)]
use blackboxmc_general::JNIRaw;
use blackboxmc_general::JNIInstantiatable;
use color_eyre::eyre::Result;/*org/bukkit/mod.rs*/

pub mod prelude;
pub enum Particle<'mc> {
	ExplosionNormal {inner: ParticleStruct<'mc>},
	ExplosionLarge {inner: ParticleStruct<'mc>},
	ExplosionHuge {inner: ParticleStruct<'mc>},
	FireworksSpark {inner: ParticleStruct<'mc>},
	WaterBubble {inner: ParticleStruct<'mc>},
	WaterSplash {inner: ParticleStruct<'mc>},
	WaterWake {inner: ParticleStruct<'mc>},
	Suspended {inner: ParticleStruct<'mc>},
	SuspendedDepth {inner: ParticleStruct<'mc>},
	Crit {inner: ParticleStruct<'mc>},
	CritMagic {inner: ParticleStruct<'mc>},
	SmokeNormal {inner: ParticleStruct<'mc>},
	SmokeLarge {inner: ParticleStruct<'mc>},
	Spell {inner: ParticleStruct<'mc>},
	SpellInstant {inner: ParticleStruct<'mc>},
	SpellMob {inner: ParticleStruct<'mc>},
	SpellMobAmbient {inner: ParticleStruct<'mc>},
	SpellWitch {inner: ParticleStruct<'mc>},
	DripWater {inner: ParticleStruct<'mc>},
	DripLava {inner: ParticleStruct<'mc>},
	VillagerAngry {inner: ParticleStruct<'mc>},
	VillagerHappy {inner: ParticleStruct<'mc>},
	TownAura {inner: ParticleStruct<'mc>},
	Note {inner: ParticleStruct<'mc>},
	Portal {inner: ParticleStruct<'mc>},
	EnchantmentTable {inner: ParticleStruct<'mc>},
	Flame {inner: ParticleStruct<'mc>},
	Lava {inner: ParticleStruct<'mc>},
	Cloud {inner: ParticleStruct<'mc>},
	Redstone {inner: ParticleStruct<'mc>},
	Snowball {inner: ParticleStruct<'mc>},
	SnowShovel {inner: ParticleStruct<'mc>},
	Slime {inner: ParticleStruct<'mc>},
	Heart {inner: ParticleStruct<'mc>},
	ItemCrack {inner: ParticleStruct<'mc>},
	BlockCrack {inner: ParticleStruct<'mc>},
	BlockDust {inner: ParticleStruct<'mc>},
	WaterDrop {inner: ParticleStruct<'mc>},
	MobAppearance {inner: ParticleStruct<'mc>},
	DragonBreath {inner: ParticleStruct<'mc>},
	EndRod {inner: ParticleStruct<'mc>},
	DamageIndicator {inner: ParticleStruct<'mc>},
	SweepAttack {inner: ParticleStruct<'mc>},
	FallingDust {inner: ParticleStruct<'mc>},
	Totem {inner: ParticleStruct<'mc>},
	Spit {inner: ParticleStruct<'mc>},
	SquidInk {inner: ParticleStruct<'mc>},
	BubblePop {inner: ParticleStruct<'mc>},
	CurrentDown {inner: ParticleStruct<'mc>},
	BubbleColumnUp {inner: ParticleStruct<'mc>},
	Nautilus {inner: ParticleStruct<'mc>},
	Dolphin {inner: ParticleStruct<'mc>},
	Sneeze {inner: ParticleStruct<'mc>},
	CampfireCosySmoke {inner: ParticleStruct<'mc>},
	CampfireSignalSmoke {inner: ParticleStruct<'mc>},
	Composter {inner: ParticleStruct<'mc>},
	Flash {inner: ParticleStruct<'mc>},
	FallingLava {inner: ParticleStruct<'mc>},
	LandingLava {inner: ParticleStruct<'mc>},
	FallingWater {inner: ParticleStruct<'mc>},
	DrippingHoney {inner: ParticleStruct<'mc>},
	FallingHoney {inner: ParticleStruct<'mc>},
	LandingHoney {inner: ParticleStruct<'mc>},
	FallingNectar {inner: ParticleStruct<'mc>},
	SoulFireFlame {inner: ParticleStruct<'mc>},
	Ash {inner: ParticleStruct<'mc>},
	CrimsonSpore {inner: ParticleStruct<'mc>},
	WarpedSpore {inner: ParticleStruct<'mc>},
	Soul {inner: ParticleStruct<'mc>},
	DrippingObsidianTear {inner: ParticleStruct<'mc>},
	FallingObsidianTear {inner: ParticleStruct<'mc>},
	LandingObsidianTear {inner: ParticleStruct<'mc>},
	ReversePortal {inner: ParticleStruct<'mc>},
	WhiteAsh {inner: ParticleStruct<'mc>},
	DustColorTransition {inner: ParticleStruct<'mc>},
	Vibration {inner: ParticleStruct<'mc>},
	FallingSporeBlossom {inner: ParticleStruct<'mc>},
	SporeBlossomAir {inner: ParticleStruct<'mc>},
	SmallFlame {inner: ParticleStruct<'mc>},
	Snowflake {inner: ParticleStruct<'mc>},
	DrippingDripstoneLava {inner: ParticleStruct<'mc>},
	FallingDripstoneLava {inner: ParticleStruct<'mc>},
	DrippingDripstoneWater {inner: ParticleStruct<'mc>},
	FallingDripstoneWater {inner: ParticleStruct<'mc>},
	GlowSquidInk {inner: ParticleStruct<'mc>},
	Glow {inner: ParticleStruct<'mc>},
	WaxOn {inner: ParticleStruct<'mc>},
	WaxOff {inner: ParticleStruct<'mc>},
	ElectricSpark {inner: ParticleStruct<'mc>},
	Scrape {inner: ParticleStruct<'mc>},
	SonicBoom {inner: ParticleStruct<'mc>},
	SculkSoul {inner: ParticleStruct<'mc>},
	SculkCharge {inner: ParticleStruct<'mc>},
	SculkChargePop {inner: ParticleStruct<'mc>},
	Shriek {inner: ParticleStruct<'mc>},
	CherryLeaves {inner: ParticleStruct<'mc>},
	EggCrack {inner: ParticleStruct<'mc>},
	DustPlume {inner: ParticleStruct<'mc>},
	WhiteSmoke {inner: ParticleStruct<'mc>},
	Gust {inner: ParticleStruct<'mc>},
	GustEmitter {inner: ParticleStruct<'mc>},
	GustDust {inner: ParticleStruct<'mc>},
	TrialSpawnerDetection {inner: ParticleStruct<'mc>},
	BlockMarker {inner: ParticleStruct<'mc>},
	LegacyBlockCrack {inner: ParticleStruct<'mc>},
	LegacyBlockDust {inner: ParticleStruct<'mc>},
	LegacyFallingDust {inner: ParticleStruct<'mc>},
}
impl<'mc> std::fmt::Display for Particle<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           Particle::ExplosionNormal { .. } => f.write_str("EXPLOSION_NORMAL"),
           Particle::ExplosionLarge { .. } => f.write_str("EXPLOSION_LARGE"),
           Particle::ExplosionHuge { .. } => f.write_str("EXPLOSION_HUGE"),
           Particle::FireworksSpark { .. } => f.write_str("FIREWORKS_SPARK"),
           Particle::WaterBubble { .. } => f.write_str("WATER_BUBBLE"),
           Particle::WaterSplash { .. } => f.write_str("WATER_SPLASH"),
           Particle::WaterWake { .. } => f.write_str("WATER_WAKE"),
           Particle::Suspended { .. } => f.write_str("SUSPENDED"),
           Particle::SuspendedDepth { .. } => f.write_str("SUSPENDED_DEPTH"),
           Particle::Crit { .. } => f.write_str("CRIT"),
           Particle::CritMagic { .. } => f.write_str("CRIT_MAGIC"),
           Particle::SmokeNormal { .. } => f.write_str("SMOKE_NORMAL"),
           Particle::SmokeLarge { .. } => f.write_str("SMOKE_LARGE"),
           Particle::Spell { .. } => f.write_str("SPELL"),
           Particle::SpellInstant { .. } => f.write_str("SPELL_INSTANT"),
           Particle::SpellMob { .. } => f.write_str("SPELL_MOB"),
           Particle::SpellMobAmbient { .. } => f.write_str("SPELL_MOB_AMBIENT"),
           Particle::SpellWitch { .. } => f.write_str("SPELL_WITCH"),
           Particle::DripWater { .. } => f.write_str("DRIP_WATER"),
           Particle::DripLava { .. } => f.write_str("DRIP_LAVA"),
           Particle::VillagerAngry { .. } => f.write_str("VILLAGER_ANGRY"),
           Particle::VillagerHappy { .. } => f.write_str("VILLAGER_HAPPY"),
           Particle::TownAura { .. } => f.write_str("TOWN_AURA"),
           Particle::Note { .. } => f.write_str("NOTE"),
           Particle::Portal { .. } => f.write_str("PORTAL"),
           Particle::EnchantmentTable { .. } => f.write_str("ENCHANTMENT_TABLE"),
           Particle::Flame { .. } => f.write_str("FLAME"),
           Particle::Lava { .. } => f.write_str("LAVA"),
           Particle::Cloud { .. } => f.write_str("CLOUD"),
           Particle::Redstone { .. } => f.write_str("REDSTONE"),
           Particle::Snowball { .. } => f.write_str("SNOWBALL"),
           Particle::SnowShovel { .. } => f.write_str("SNOW_SHOVEL"),
           Particle::Slime { .. } => f.write_str("SLIME"),
           Particle::Heart { .. } => f.write_str("HEART"),
           Particle::ItemCrack { .. } => f.write_str("ITEM_CRACK"),
           Particle::BlockCrack { .. } => f.write_str("BLOCK_CRACK"),
           Particle::BlockDust { .. } => f.write_str("BLOCK_DUST"),
           Particle::WaterDrop { .. } => f.write_str("WATER_DROP"),
           Particle::MobAppearance { .. } => f.write_str("MOB_APPEARANCE"),
           Particle::DragonBreath { .. } => f.write_str("DRAGON_BREATH"),
           Particle::EndRod { .. } => f.write_str("END_ROD"),
           Particle::DamageIndicator { .. } => f.write_str("DAMAGE_INDICATOR"),
           Particle::SweepAttack { .. } => f.write_str("SWEEP_ATTACK"),
           Particle::FallingDust { .. } => f.write_str("FALLING_DUST"),
           Particle::Totem { .. } => f.write_str("TOTEM"),
           Particle::Spit { .. } => f.write_str("SPIT"),
           Particle::SquidInk { .. } => f.write_str("SQUID_INK"),
           Particle::BubblePop { .. } => f.write_str("BUBBLE_POP"),
           Particle::CurrentDown { .. } => f.write_str("CURRENT_DOWN"),
           Particle::BubbleColumnUp { .. } => f.write_str("BUBBLE_COLUMN_UP"),
           Particle::Nautilus { .. } => f.write_str("NAUTILUS"),
           Particle::Dolphin { .. } => f.write_str("DOLPHIN"),
           Particle::Sneeze { .. } => f.write_str("SNEEZE"),
           Particle::CampfireCosySmoke { .. } => f.write_str("CAMPFIRE_COSY_SMOKE"),
           Particle::CampfireSignalSmoke { .. } => f.write_str("CAMPFIRE_SIGNAL_SMOKE"),
           Particle::Composter { .. } => f.write_str("COMPOSTER"),
           Particle::Flash { .. } => f.write_str("FLASH"),
           Particle::FallingLava { .. } => f.write_str("FALLING_LAVA"),
           Particle::LandingLava { .. } => f.write_str("LANDING_LAVA"),
           Particle::FallingWater { .. } => f.write_str("FALLING_WATER"),
           Particle::DrippingHoney { .. } => f.write_str("DRIPPING_HONEY"),
           Particle::FallingHoney { .. } => f.write_str("FALLING_HONEY"),
           Particle::LandingHoney { .. } => f.write_str("LANDING_HONEY"),
           Particle::FallingNectar { .. } => f.write_str("FALLING_NECTAR"),
           Particle::SoulFireFlame { .. } => f.write_str("SOUL_FIRE_FLAME"),
           Particle::Ash { .. } => f.write_str("ASH"),
           Particle::CrimsonSpore { .. } => f.write_str("CRIMSON_SPORE"),
           Particle::WarpedSpore { .. } => f.write_str("WARPED_SPORE"),
           Particle::Soul { .. } => f.write_str("SOUL"),
           Particle::DrippingObsidianTear { .. } => f.write_str("DRIPPING_OBSIDIAN_TEAR"),
           Particle::FallingObsidianTear { .. } => f.write_str("FALLING_OBSIDIAN_TEAR"),
           Particle::LandingObsidianTear { .. } => f.write_str("LANDING_OBSIDIAN_TEAR"),
           Particle::ReversePortal { .. } => f.write_str("REVERSE_PORTAL"),
           Particle::WhiteAsh { .. } => f.write_str("WHITE_ASH"),
           Particle::DustColorTransition { .. } => f.write_str("DUST_COLOR_TRANSITION"),
           Particle::Vibration { .. } => f.write_str("VIBRATION"),
           Particle::FallingSporeBlossom { .. } => f.write_str("FALLING_SPORE_BLOSSOM"),
           Particle::SporeBlossomAir { .. } => f.write_str("SPORE_BLOSSOM_AIR"),
           Particle::SmallFlame { .. } => f.write_str("SMALL_FLAME"),
           Particle::Snowflake { .. } => f.write_str("SNOWFLAKE"),
           Particle::DrippingDripstoneLava { .. } => f.write_str("DRIPPING_DRIPSTONE_LAVA"),
           Particle::FallingDripstoneLava { .. } => f.write_str("FALLING_DRIPSTONE_LAVA"),
           Particle::DrippingDripstoneWater { .. } => f.write_str("DRIPPING_DRIPSTONE_WATER"),
           Particle::FallingDripstoneWater { .. } => f.write_str("FALLING_DRIPSTONE_WATER"),
           Particle::GlowSquidInk { .. } => f.write_str("GLOW_SQUID_INK"),
           Particle::Glow { .. } => f.write_str("GLOW"),
           Particle::WaxOn { .. } => f.write_str("WAX_ON"),
           Particle::WaxOff { .. } => f.write_str("WAX_OFF"),
           Particle::ElectricSpark { .. } => f.write_str("ELECTRIC_SPARK"),
           Particle::Scrape { .. } => f.write_str("SCRAPE"),
           Particle::SonicBoom { .. } => f.write_str("SONIC_BOOM"),
           Particle::SculkSoul { .. } => f.write_str("SCULK_SOUL"),
           Particle::SculkCharge { .. } => f.write_str("SCULK_CHARGE"),
           Particle::SculkChargePop { .. } => f.write_str("SCULK_CHARGE_POP"),
           Particle::Shriek { .. } => f.write_str("SHRIEK"),
           Particle::CherryLeaves { .. } => f.write_str("CHERRY_LEAVES"),
           Particle::EggCrack { .. } => f.write_str("EGG_CRACK"),
           Particle::DustPlume { .. } => f.write_str("DUST_PLUME"),
           Particle::WhiteSmoke { .. } => f.write_str("WHITE_SMOKE"),
           Particle::Gust { .. } => f.write_str("GUST"),
           Particle::GustEmitter { .. } => f.write_str("GUST_EMITTER"),
           Particle::GustDust { .. } => f.write_str("GUST_DUST"),
           Particle::TrialSpawnerDetection { .. } => f.write_str("TRIAL_SPAWNER_DETECTION"),
           Particle::BlockMarker { .. } => f.write_str("BLOCK_MARKER"),
           Particle::LegacyBlockCrack { .. } => f.write_str("LEGACY_BLOCK_CRACK"),
           Particle::LegacyBlockDust { .. } => f.write_str("LEGACY_BLOCK_DUST"),
           Particle::LegacyFallingDust { .. } => f.write_str("LEGACY_FALLING_DUST"),
       }
   }
}

        impl<'mc> ParticleTrait<'mc> for Particle<'mc> {}
        
        pub trait ParticleTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<Particle<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Particle");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Particle;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"EXPLOSION_NORMAL" => Ok(Particle::ExplosionNormal { inner: ParticleStruct::from_raw(env,obj)?}),
"EXPLOSION_LARGE" => Ok(Particle::ExplosionLarge { inner: ParticleStruct::from_raw(env,obj)?}),
"EXPLOSION_HUGE" => Ok(Particle::ExplosionHuge { inner: ParticleStruct::from_raw(env,obj)?}),
"FIREWORKS_SPARK" => Ok(Particle::FireworksSpark { inner: ParticleStruct::from_raw(env,obj)?}),
"WATER_BUBBLE" => Ok(Particle::WaterBubble { inner: ParticleStruct::from_raw(env,obj)?}),
"WATER_SPLASH" => Ok(Particle::WaterSplash { inner: ParticleStruct::from_raw(env,obj)?}),
"WATER_WAKE" => Ok(Particle::WaterWake { inner: ParticleStruct::from_raw(env,obj)?}),
"SUSPENDED" => Ok(Particle::Suspended { inner: ParticleStruct::from_raw(env,obj)?}),
"SUSPENDED_DEPTH" => Ok(Particle::SuspendedDepth { inner: ParticleStruct::from_raw(env,obj)?}),
"CRIT" => Ok(Particle::Crit { inner: ParticleStruct::from_raw(env,obj)?}),
"CRIT_MAGIC" => Ok(Particle::CritMagic { inner: ParticleStruct::from_raw(env,obj)?}),
"SMOKE_NORMAL" => Ok(Particle::SmokeNormal { inner: ParticleStruct::from_raw(env,obj)?}),
"SMOKE_LARGE" => Ok(Particle::SmokeLarge { inner: ParticleStruct::from_raw(env,obj)?}),
"SPELL" => Ok(Particle::Spell { inner: ParticleStruct::from_raw(env,obj)?}),
"SPELL_INSTANT" => Ok(Particle::SpellInstant { inner: ParticleStruct::from_raw(env,obj)?}),
"SPELL_MOB" => Ok(Particle::SpellMob { inner: ParticleStruct::from_raw(env,obj)?}),
"SPELL_MOB_AMBIENT" => Ok(Particle::SpellMobAmbient { inner: ParticleStruct::from_raw(env,obj)?}),
"SPELL_WITCH" => Ok(Particle::SpellWitch { inner: ParticleStruct::from_raw(env,obj)?}),
"DRIP_WATER" => Ok(Particle::DripWater { inner: ParticleStruct::from_raw(env,obj)?}),
"DRIP_LAVA" => Ok(Particle::DripLava { inner: ParticleStruct::from_raw(env,obj)?}),
"VILLAGER_ANGRY" => Ok(Particle::VillagerAngry { inner: ParticleStruct::from_raw(env,obj)?}),
"VILLAGER_HAPPY" => Ok(Particle::VillagerHappy { inner: ParticleStruct::from_raw(env,obj)?}),
"TOWN_AURA" => Ok(Particle::TownAura { inner: ParticleStruct::from_raw(env,obj)?}),
"NOTE" => Ok(Particle::Note { inner: ParticleStruct::from_raw(env,obj)?}),
"PORTAL" => Ok(Particle::Portal { inner: ParticleStruct::from_raw(env,obj)?}),
"ENCHANTMENT_TABLE" => Ok(Particle::EnchantmentTable { inner: ParticleStruct::from_raw(env,obj)?}),
"FLAME" => Ok(Particle::Flame { inner: ParticleStruct::from_raw(env,obj)?}),
"LAVA" => Ok(Particle::Lava { inner: ParticleStruct::from_raw(env,obj)?}),
"CLOUD" => Ok(Particle::Cloud { inner: ParticleStruct::from_raw(env,obj)?}),
"REDSTONE" => Ok(Particle::Redstone { inner: ParticleStruct::from_raw(env,obj)?}),
"SNOWBALL" => Ok(Particle::Snowball { inner: ParticleStruct::from_raw(env,obj)?}),
"SNOW_SHOVEL" => Ok(Particle::SnowShovel { inner: ParticleStruct::from_raw(env,obj)?}),
"SLIME" => Ok(Particle::Slime { inner: ParticleStruct::from_raw(env,obj)?}),
"HEART" => Ok(Particle::Heart { inner: ParticleStruct::from_raw(env,obj)?}),
"ITEM_CRACK" => Ok(Particle::ItemCrack { inner: ParticleStruct::from_raw(env,obj)?}),
"BLOCK_CRACK" => Ok(Particle::BlockCrack { inner: ParticleStruct::from_raw(env,obj)?}),
"BLOCK_DUST" => Ok(Particle::BlockDust { inner: ParticleStruct::from_raw(env,obj)?}),
"WATER_DROP" => Ok(Particle::WaterDrop { inner: ParticleStruct::from_raw(env,obj)?}),
"MOB_APPEARANCE" => Ok(Particle::MobAppearance { inner: ParticleStruct::from_raw(env,obj)?}),
"DRAGON_BREATH" => Ok(Particle::DragonBreath { inner: ParticleStruct::from_raw(env,obj)?}),
"END_ROD" => Ok(Particle::EndRod { inner: ParticleStruct::from_raw(env,obj)?}),
"DAMAGE_INDICATOR" => Ok(Particle::DamageIndicator { inner: ParticleStruct::from_raw(env,obj)?}),
"SWEEP_ATTACK" => Ok(Particle::SweepAttack { inner: ParticleStruct::from_raw(env,obj)?}),
"FALLING_DUST" => Ok(Particle::FallingDust { inner: ParticleStruct::from_raw(env,obj)?}),
"TOTEM" => Ok(Particle::Totem { inner: ParticleStruct::from_raw(env,obj)?}),
"SPIT" => Ok(Particle::Spit { inner: ParticleStruct::from_raw(env,obj)?}),
"SQUID_INK" => Ok(Particle::SquidInk { inner: ParticleStruct::from_raw(env,obj)?}),
"BUBBLE_POP" => Ok(Particle::BubblePop { inner: ParticleStruct::from_raw(env,obj)?}),
"CURRENT_DOWN" => Ok(Particle::CurrentDown { inner: ParticleStruct::from_raw(env,obj)?}),
"BUBBLE_COLUMN_UP" => Ok(Particle::BubbleColumnUp { inner: ParticleStruct::from_raw(env,obj)?}),
"NAUTILUS" => Ok(Particle::Nautilus { inner: ParticleStruct::from_raw(env,obj)?}),
"DOLPHIN" => Ok(Particle::Dolphin { inner: ParticleStruct::from_raw(env,obj)?}),
"SNEEZE" => Ok(Particle::Sneeze { inner: ParticleStruct::from_raw(env,obj)?}),
"CAMPFIRE_COSY_SMOKE" => Ok(Particle::CampfireCosySmoke { inner: ParticleStruct::from_raw(env,obj)?}),
"CAMPFIRE_SIGNAL_SMOKE" => Ok(Particle::CampfireSignalSmoke { inner: ParticleStruct::from_raw(env,obj)?}),
"COMPOSTER" => Ok(Particle::Composter { inner: ParticleStruct::from_raw(env,obj)?}),
"FLASH" => Ok(Particle::Flash { inner: ParticleStruct::from_raw(env,obj)?}),
"FALLING_LAVA" => Ok(Particle::FallingLava { inner: ParticleStruct::from_raw(env,obj)?}),
"LANDING_LAVA" => Ok(Particle::LandingLava { inner: ParticleStruct::from_raw(env,obj)?}),
"FALLING_WATER" => Ok(Particle::FallingWater { inner: ParticleStruct::from_raw(env,obj)?}),
"DRIPPING_HONEY" => Ok(Particle::DrippingHoney { inner: ParticleStruct::from_raw(env,obj)?}),
"FALLING_HONEY" => Ok(Particle::FallingHoney { inner: ParticleStruct::from_raw(env,obj)?}),
"LANDING_HONEY" => Ok(Particle::LandingHoney { inner: ParticleStruct::from_raw(env,obj)?}),
"FALLING_NECTAR" => Ok(Particle::FallingNectar { inner: ParticleStruct::from_raw(env,obj)?}),
"SOUL_FIRE_FLAME" => Ok(Particle::SoulFireFlame { inner: ParticleStruct::from_raw(env,obj)?}),
"ASH" => Ok(Particle::Ash { inner: ParticleStruct::from_raw(env,obj)?}),
"CRIMSON_SPORE" => Ok(Particle::CrimsonSpore { inner: ParticleStruct::from_raw(env,obj)?}),
"WARPED_SPORE" => Ok(Particle::WarpedSpore { inner: ParticleStruct::from_raw(env,obj)?}),
"SOUL" => Ok(Particle::Soul { inner: ParticleStruct::from_raw(env,obj)?}),
"DRIPPING_OBSIDIAN_TEAR" => Ok(Particle::DrippingObsidianTear { inner: ParticleStruct::from_raw(env,obj)?}),
"FALLING_OBSIDIAN_TEAR" => Ok(Particle::FallingObsidianTear { inner: ParticleStruct::from_raw(env,obj)?}),
"LANDING_OBSIDIAN_TEAR" => Ok(Particle::LandingObsidianTear { inner: ParticleStruct::from_raw(env,obj)?}),
"REVERSE_PORTAL" => Ok(Particle::ReversePortal { inner: ParticleStruct::from_raw(env,obj)?}),
"WHITE_ASH" => Ok(Particle::WhiteAsh { inner: ParticleStruct::from_raw(env,obj)?}),
"DUST_COLOR_TRANSITION" => Ok(Particle::DustColorTransition { inner: ParticleStruct::from_raw(env,obj)?}),
"VIBRATION" => Ok(Particle::Vibration { inner: ParticleStruct::from_raw(env,obj)?}),
"FALLING_SPORE_BLOSSOM" => Ok(Particle::FallingSporeBlossom { inner: ParticleStruct::from_raw(env,obj)?}),
"SPORE_BLOSSOM_AIR" => Ok(Particle::SporeBlossomAir { inner: ParticleStruct::from_raw(env,obj)?}),
"SMALL_FLAME" => Ok(Particle::SmallFlame { inner: ParticleStruct::from_raw(env,obj)?}),
"SNOWFLAKE" => Ok(Particle::Snowflake { inner: ParticleStruct::from_raw(env,obj)?}),
"DRIPPING_DRIPSTONE_LAVA" => Ok(Particle::DrippingDripstoneLava { inner: ParticleStruct::from_raw(env,obj)?}),
"FALLING_DRIPSTONE_LAVA" => Ok(Particle::FallingDripstoneLava { inner: ParticleStruct::from_raw(env,obj)?}),
"DRIPPING_DRIPSTONE_WATER" => Ok(Particle::DrippingDripstoneWater { inner: ParticleStruct::from_raw(env,obj)?}),
"FALLING_DRIPSTONE_WATER" => Ok(Particle::FallingDripstoneWater { inner: ParticleStruct::from_raw(env,obj)?}),
"GLOW_SQUID_INK" => Ok(Particle::GlowSquidInk { inner: ParticleStruct::from_raw(env,obj)?}),
"GLOW" => Ok(Particle::Glow { inner: ParticleStruct::from_raw(env,obj)?}),
"WAX_ON" => Ok(Particle::WaxOn { inner: ParticleStruct::from_raw(env,obj)?}),
"WAX_OFF" => Ok(Particle::WaxOff { inner: ParticleStruct::from_raw(env,obj)?}),
"ELECTRIC_SPARK" => Ok(Particle::ElectricSpark { inner: ParticleStruct::from_raw(env,obj)?}),
"SCRAPE" => Ok(Particle::Scrape { inner: ParticleStruct::from_raw(env,obj)?}),
"SONIC_BOOM" => Ok(Particle::SonicBoom { inner: ParticleStruct::from_raw(env,obj)?}),
"SCULK_SOUL" => Ok(Particle::SculkSoul { inner: ParticleStruct::from_raw(env,obj)?}),
"SCULK_CHARGE" => Ok(Particle::SculkCharge { inner: ParticleStruct::from_raw(env,obj)?}),
"SCULK_CHARGE_POP" => Ok(Particle::SculkChargePop { inner: ParticleStruct::from_raw(env,obj)?}),
"SHRIEK" => Ok(Particle::Shriek { inner: ParticleStruct::from_raw(env,obj)?}),
"CHERRY_LEAVES" => Ok(Particle::CherryLeaves { inner: ParticleStruct::from_raw(env,obj)?}),
"EGG_CRACK" => Ok(Particle::EggCrack { inner: ParticleStruct::from_raw(env,obj)?}),
"DUST_PLUME" => Ok(Particle::DustPlume { inner: ParticleStruct::from_raw(env,obj)?}),
"WHITE_SMOKE" => Ok(Particle::WhiteSmoke { inner: ParticleStruct::from_raw(env,obj)?}),
"GUST" => Ok(Particle::Gust { inner: ParticleStruct::from_raw(env,obj)?}),
"GUST_EMITTER" => Ok(Particle::GustEmitter { inner: ParticleStruct::from_raw(env,obj)?}),
"GUST_DUST" => Ok(Particle::GustDust { inner: ParticleStruct::from_raw(env,obj)?}),
"TRIAL_SPAWNER_DETECTION" => Ok(Particle::TrialSpawnerDetection { inner: ParticleStruct::from_raw(env,obj)?}),
"BLOCK_MARKER" => Ok(Particle::BlockMarker { inner: ParticleStruct::from_raw(env,obj)?}),
"LEGACY_BLOCK_CRACK" => Ok(Particle::LegacyBlockCrack { inner: ParticleStruct::from_raw(env,obj)?}),
"LEGACY_BLOCK_DUST" => Ok(Particle::LegacyBlockDust { inner: ParticleStruct::from_raw(env,obj)?}),
"LEGACY_FALLING_DUST" => Ok(Particle::LegacyFallingDust { inner: ParticleStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct ParticleStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Particle<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::ExplosionNormal { inner } => inner.0.clone(),
Self::ExplosionLarge { inner } => inner.0.clone(),
Self::ExplosionHuge { inner } => inner.0.clone(),
Self::FireworksSpark { inner } => inner.0.clone(),
Self::WaterBubble { inner } => inner.0.clone(),
Self::WaterSplash { inner } => inner.0.clone(),
Self::WaterWake { inner } => inner.0.clone(),
Self::Suspended { inner } => inner.0.clone(),
Self::SuspendedDepth { inner } => inner.0.clone(),
Self::Crit { inner } => inner.0.clone(),
Self::CritMagic { inner } => inner.0.clone(),
Self::SmokeNormal { inner } => inner.0.clone(),
Self::SmokeLarge { inner } => inner.0.clone(),
Self::Spell { inner } => inner.0.clone(),
Self::SpellInstant { inner } => inner.0.clone(),
Self::SpellMob { inner } => inner.0.clone(),
Self::SpellMobAmbient { inner } => inner.0.clone(),
Self::SpellWitch { inner } => inner.0.clone(),
Self::DripWater { inner } => inner.0.clone(),
Self::DripLava { inner } => inner.0.clone(),
Self::VillagerAngry { inner } => inner.0.clone(),
Self::VillagerHappy { inner } => inner.0.clone(),
Self::TownAura { inner } => inner.0.clone(),
Self::Note { inner } => inner.0.clone(),
Self::Portal { inner } => inner.0.clone(),
Self::EnchantmentTable { inner } => inner.0.clone(),
Self::Flame { inner } => inner.0.clone(),
Self::Lava { inner } => inner.0.clone(),
Self::Cloud { inner } => inner.0.clone(),
Self::Redstone { inner } => inner.0.clone(),
Self::Snowball { inner } => inner.0.clone(),
Self::SnowShovel { inner } => inner.0.clone(),
Self::Slime { inner } => inner.0.clone(),
Self::Heart { inner } => inner.0.clone(),
Self::ItemCrack { inner } => inner.0.clone(),
Self::BlockCrack { inner } => inner.0.clone(),
Self::BlockDust { inner } => inner.0.clone(),
Self::WaterDrop { inner } => inner.0.clone(),
Self::MobAppearance { inner } => inner.0.clone(),
Self::DragonBreath { inner } => inner.0.clone(),
Self::EndRod { inner } => inner.0.clone(),
Self::DamageIndicator { inner } => inner.0.clone(),
Self::SweepAttack { inner } => inner.0.clone(),
Self::FallingDust { inner } => inner.0.clone(),
Self::Totem { inner } => inner.0.clone(),
Self::Spit { inner } => inner.0.clone(),
Self::SquidInk { inner } => inner.0.clone(),
Self::BubblePop { inner } => inner.0.clone(),
Self::CurrentDown { inner } => inner.0.clone(),
Self::BubbleColumnUp { inner } => inner.0.clone(),
Self::Nautilus { inner } => inner.0.clone(),
Self::Dolphin { inner } => inner.0.clone(),
Self::Sneeze { inner } => inner.0.clone(),
Self::CampfireCosySmoke { inner } => inner.0.clone(),
Self::CampfireSignalSmoke { inner } => inner.0.clone(),
Self::Composter { inner } => inner.0.clone(),
Self::Flash { inner } => inner.0.clone(),
Self::FallingLava { inner } => inner.0.clone(),
Self::LandingLava { inner } => inner.0.clone(),
Self::FallingWater { inner } => inner.0.clone(),
Self::DrippingHoney { inner } => inner.0.clone(),
Self::FallingHoney { inner } => inner.0.clone(),
Self::LandingHoney { inner } => inner.0.clone(),
Self::FallingNectar { inner } => inner.0.clone(),
Self::SoulFireFlame { inner } => inner.0.clone(),
Self::Ash { inner } => inner.0.clone(),
Self::CrimsonSpore { inner } => inner.0.clone(),
Self::WarpedSpore { inner } => inner.0.clone(),
Self::Soul { inner } => inner.0.clone(),
Self::DrippingObsidianTear { inner } => inner.0.clone(),
Self::FallingObsidianTear { inner } => inner.0.clone(),
Self::LandingObsidianTear { inner } => inner.0.clone(),
Self::ReversePortal { inner } => inner.0.clone(),
Self::WhiteAsh { inner } => inner.0.clone(),
Self::DustColorTransition { inner } => inner.0.clone(),
Self::Vibration { inner } => inner.0.clone(),
Self::FallingSporeBlossom { inner } => inner.0.clone(),
Self::SporeBlossomAir { inner } => inner.0.clone(),
Self::SmallFlame { inner } => inner.0.clone(),
Self::Snowflake { inner } => inner.0.clone(),
Self::DrippingDripstoneLava { inner } => inner.0.clone(),
Self::FallingDripstoneLava { inner } => inner.0.clone(),
Self::DrippingDripstoneWater { inner } => inner.0.clone(),
Self::FallingDripstoneWater { inner } => inner.0.clone(),
Self::GlowSquidInk { inner } => inner.0.clone(),
Self::Glow { inner } => inner.0.clone(),
Self::WaxOn { inner } => inner.0.clone(),
Self::WaxOff { inner } => inner.0.clone(),
Self::ElectricSpark { inner } => inner.0.clone(),
Self::Scrape { inner } => inner.0.clone(),
Self::SonicBoom { inner } => inner.0.clone(),
Self::SculkSoul { inner } => inner.0.clone(),
Self::SculkCharge { inner } => inner.0.clone(),
Self::SculkChargePop { inner } => inner.0.clone(),
Self::Shriek { inner } => inner.0.clone(),
Self::CherryLeaves { inner } => inner.0.clone(),
Self::EggCrack { inner } => inner.0.clone(),
Self::DustPlume { inner } => inner.0.clone(),
Self::WhiteSmoke { inner } => inner.0.clone(),
Self::Gust { inner } => inner.0.clone(),
Self::GustEmitter { inner } => inner.0.clone(),
Self::GustDust { inner } => inner.0.clone(),
Self::TrialSpawnerDetection { inner } => inner.0.clone(),
Self::BlockMarker { inner } => inner.0.clone(),
Self::LegacyBlockCrack { inner } => inner.0.clone(),
Self::LegacyBlockDust { inner } => inner.0.clone(),
Self::LegacyFallingDust { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::ExplosionNormal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExplosionLarge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExplosionHuge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FireworksSpark { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaterBubble { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaterSplash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaterWake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Suspended { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SuspendedDepth { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Crit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CritMagic { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmokeNormal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmokeLarge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Spell { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpellInstant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpellMob { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpellMobAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpellWitch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DripWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DripLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VillagerAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VillagerHappy { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TownAura { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Note { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Portal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnchantmentTable { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Flame { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Lava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cloud { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Redstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Snowball { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SnowShovel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Slime { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Heart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemCrack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCrack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDust { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaterDrop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MobAppearance { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DragonBreath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndRod { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DamageIndicator { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SweepAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FallingDust { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Totem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Spit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SquidInk { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BubblePop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CurrentDown { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BubbleColumnUp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Nautilus { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Dolphin { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Sneeze { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CampfireCosySmoke { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CampfireSignalSmoke { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Composter { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Flash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FallingLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LandingLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FallingWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DrippingHoney { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FallingHoney { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LandingHoney { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FallingNectar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SoulFireFlame { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Ash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonSpore { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedSpore { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Soul { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DrippingObsidianTear { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FallingObsidianTear { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LandingObsidianTear { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ReversePortal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteAsh { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DustColorTransition { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Vibration { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FallingSporeBlossom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SporeBlossomAir { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmallFlame { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Snowflake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DrippingDripstoneLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FallingDripstoneLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DrippingDripstoneWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FallingDripstoneWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GlowSquidInk { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Glow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ElectricSpark { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Scrape { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SonicBoom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SculkSoul { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SculkCharge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SculkChargePop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Shriek { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EggCrack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DustPlume { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteSmoke { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Gust { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GustEmitter { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GustDust { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TrialSpawnerDetection { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMarker { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBlockCrack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBlockDust { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFallingDust { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for Particle<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Particle from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Particle")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Particle object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "EXPLOSION_NORMAL" => Ok(Particle::ExplosionNormal { inner: ParticleStruct::from_raw(env,obj)?}),"EXPLOSION_LARGE" => Ok(Particle::ExplosionLarge { inner: ParticleStruct::from_raw(env,obj)?}),"EXPLOSION_HUGE" => Ok(Particle::ExplosionHuge { inner: ParticleStruct::from_raw(env,obj)?}),"FIREWORKS_SPARK" => Ok(Particle::FireworksSpark { inner: ParticleStruct::from_raw(env,obj)?}),"WATER_BUBBLE" => Ok(Particle::WaterBubble { inner: ParticleStruct::from_raw(env,obj)?}),"WATER_SPLASH" => Ok(Particle::WaterSplash { inner: ParticleStruct::from_raw(env,obj)?}),"WATER_WAKE" => Ok(Particle::WaterWake { inner: ParticleStruct::from_raw(env,obj)?}),"SUSPENDED" => Ok(Particle::Suspended { inner: ParticleStruct::from_raw(env,obj)?}),"SUSPENDED_DEPTH" => Ok(Particle::SuspendedDepth { inner: ParticleStruct::from_raw(env,obj)?}),"CRIT" => Ok(Particle::Crit { inner: ParticleStruct::from_raw(env,obj)?}),"CRIT_MAGIC" => Ok(Particle::CritMagic { inner: ParticleStruct::from_raw(env,obj)?}),"SMOKE_NORMAL" => Ok(Particle::SmokeNormal { inner: ParticleStruct::from_raw(env,obj)?}),"SMOKE_LARGE" => Ok(Particle::SmokeLarge { inner: ParticleStruct::from_raw(env,obj)?}),"SPELL" => Ok(Particle::Spell { inner: ParticleStruct::from_raw(env,obj)?}),"SPELL_INSTANT" => Ok(Particle::SpellInstant { inner: ParticleStruct::from_raw(env,obj)?}),"SPELL_MOB" => Ok(Particle::SpellMob { inner: ParticleStruct::from_raw(env,obj)?}),"SPELL_MOB_AMBIENT" => Ok(Particle::SpellMobAmbient { inner: ParticleStruct::from_raw(env,obj)?}),"SPELL_WITCH" => Ok(Particle::SpellWitch { inner: ParticleStruct::from_raw(env,obj)?}),"DRIP_WATER" => Ok(Particle::DripWater { inner: ParticleStruct::from_raw(env,obj)?}),"DRIP_LAVA" => Ok(Particle::DripLava { inner: ParticleStruct::from_raw(env,obj)?}),"VILLAGER_ANGRY" => Ok(Particle::VillagerAngry { inner: ParticleStruct::from_raw(env,obj)?}),"VILLAGER_HAPPY" => Ok(Particle::VillagerHappy { inner: ParticleStruct::from_raw(env,obj)?}),"TOWN_AURA" => Ok(Particle::TownAura { inner: ParticleStruct::from_raw(env,obj)?}),"NOTE" => Ok(Particle::Note { inner: ParticleStruct::from_raw(env,obj)?}),"PORTAL" => Ok(Particle::Portal { inner: ParticleStruct::from_raw(env,obj)?}),"ENCHANTMENT_TABLE" => Ok(Particle::EnchantmentTable { inner: ParticleStruct::from_raw(env,obj)?}),"FLAME" => Ok(Particle::Flame { inner: ParticleStruct::from_raw(env,obj)?}),"LAVA" => Ok(Particle::Lava { inner: ParticleStruct::from_raw(env,obj)?}),"CLOUD" => Ok(Particle::Cloud { inner: ParticleStruct::from_raw(env,obj)?}),"REDSTONE" => Ok(Particle::Redstone { inner: ParticleStruct::from_raw(env,obj)?}),"SNOWBALL" => Ok(Particle::Snowball { inner: ParticleStruct::from_raw(env,obj)?}),"SNOW_SHOVEL" => Ok(Particle::SnowShovel { inner: ParticleStruct::from_raw(env,obj)?}),"SLIME" => Ok(Particle::Slime { inner: ParticleStruct::from_raw(env,obj)?}),"HEART" => Ok(Particle::Heart { inner: ParticleStruct::from_raw(env,obj)?}),"ITEM_CRACK" => Ok(Particle::ItemCrack { inner: ParticleStruct::from_raw(env,obj)?}),"BLOCK_CRACK" => Ok(Particle::BlockCrack { inner: ParticleStruct::from_raw(env,obj)?}),"BLOCK_DUST" => Ok(Particle::BlockDust { inner: ParticleStruct::from_raw(env,obj)?}),"WATER_DROP" => Ok(Particle::WaterDrop { inner: ParticleStruct::from_raw(env,obj)?}),"MOB_APPEARANCE" => Ok(Particle::MobAppearance { inner: ParticleStruct::from_raw(env,obj)?}),"DRAGON_BREATH" => Ok(Particle::DragonBreath { inner: ParticleStruct::from_raw(env,obj)?}),"END_ROD" => Ok(Particle::EndRod { inner: ParticleStruct::from_raw(env,obj)?}),"DAMAGE_INDICATOR" => Ok(Particle::DamageIndicator { inner: ParticleStruct::from_raw(env,obj)?}),"SWEEP_ATTACK" => Ok(Particle::SweepAttack { inner: ParticleStruct::from_raw(env,obj)?}),"FALLING_DUST" => Ok(Particle::FallingDust { inner: ParticleStruct::from_raw(env,obj)?}),"TOTEM" => Ok(Particle::Totem { inner: ParticleStruct::from_raw(env,obj)?}),"SPIT" => Ok(Particle::Spit { inner: ParticleStruct::from_raw(env,obj)?}),"SQUID_INK" => Ok(Particle::SquidInk { inner: ParticleStruct::from_raw(env,obj)?}),"BUBBLE_POP" => Ok(Particle::BubblePop { inner: ParticleStruct::from_raw(env,obj)?}),"CURRENT_DOWN" => Ok(Particle::CurrentDown { inner: ParticleStruct::from_raw(env,obj)?}),"BUBBLE_COLUMN_UP" => Ok(Particle::BubbleColumnUp { inner: ParticleStruct::from_raw(env,obj)?}),"NAUTILUS" => Ok(Particle::Nautilus { inner: ParticleStruct::from_raw(env,obj)?}),"DOLPHIN" => Ok(Particle::Dolphin { inner: ParticleStruct::from_raw(env,obj)?}),"SNEEZE" => Ok(Particle::Sneeze { inner: ParticleStruct::from_raw(env,obj)?}),"CAMPFIRE_COSY_SMOKE" => Ok(Particle::CampfireCosySmoke { inner: ParticleStruct::from_raw(env,obj)?}),"CAMPFIRE_SIGNAL_SMOKE" => Ok(Particle::CampfireSignalSmoke { inner: ParticleStruct::from_raw(env,obj)?}),"COMPOSTER" => Ok(Particle::Composter { inner: ParticleStruct::from_raw(env,obj)?}),"FLASH" => Ok(Particle::Flash { inner: ParticleStruct::from_raw(env,obj)?}),"FALLING_LAVA" => Ok(Particle::FallingLava { inner: ParticleStruct::from_raw(env,obj)?}),"LANDING_LAVA" => Ok(Particle::LandingLava { inner: ParticleStruct::from_raw(env,obj)?}),"FALLING_WATER" => Ok(Particle::FallingWater { inner: ParticleStruct::from_raw(env,obj)?}),"DRIPPING_HONEY" => Ok(Particle::DrippingHoney { inner: ParticleStruct::from_raw(env,obj)?}),"FALLING_HONEY" => Ok(Particle::FallingHoney { inner: ParticleStruct::from_raw(env,obj)?}),"LANDING_HONEY" => Ok(Particle::LandingHoney { inner: ParticleStruct::from_raw(env,obj)?}),"FALLING_NECTAR" => Ok(Particle::FallingNectar { inner: ParticleStruct::from_raw(env,obj)?}),"SOUL_FIRE_FLAME" => Ok(Particle::SoulFireFlame { inner: ParticleStruct::from_raw(env,obj)?}),"ASH" => Ok(Particle::Ash { inner: ParticleStruct::from_raw(env,obj)?}),"CRIMSON_SPORE" => Ok(Particle::CrimsonSpore { inner: ParticleStruct::from_raw(env,obj)?}),"WARPED_SPORE" => Ok(Particle::WarpedSpore { inner: ParticleStruct::from_raw(env,obj)?}),"SOUL" => Ok(Particle::Soul { inner: ParticleStruct::from_raw(env,obj)?}),"DRIPPING_OBSIDIAN_TEAR" => Ok(Particle::DrippingObsidianTear { inner: ParticleStruct::from_raw(env,obj)?}),"FALLING_OBSIDIAN_TEAR" => Ok(Particle::FallingObsidianTear { inner: ParticleStruct::from_raw(env,obj)?}),"LANDING_OBSIDIAN_TEAR" => Ok(Particle::LandingObsidianTear { inner: ParticleStruct::from_raw(env,obj)?}),"REVERSE_PORTAL" => Ok(Particle::ReversePortal { inner: ParticleStruct::from_raw(env,obj)?}),"WHITE_ASH" => Ok(Particle::WhiteAsh { inner: ParticleStruct::from_raw(env,obj)?}),"DUST_COLOR_TRANSITION" => Ok(Particle::DustColorTransition { inner: ParticleStruct::from_raw(env,obj)?}),"VIBRATION" => Ok(Particle::Vibration { inner: ParticleStruct::from_raw(env,obj)?}),"FALLING_SPORE_BLOSSOM" => Ok(Particle::FallingSporeBlossom { inner: ParticleStruct::from_raw(env,obj)?}),"SPORE_BLOSSOM_AIR" => Ok(Particle::SporeBlossomAir { inner: ParticleStruct::from_raw(env,obj)?}),"SMALL_FLAME" => Ok(Particle::SmallFlame { inner: ParticleStruct::from_raw(env,obj)?}),"SNOWFLAKE" => Ok(Particle::Snowflake { inner: ParticleStruct::from_raw(env,obj)?}),"DRIPPING_DRIPSTONE_LAVA" => Ok(Particle::DrippingDripstoneLava { inner: ParticleStruct::from_raw(env,obj)?}),"FALLING_DRIPSTONE_LAVA" => Ok(Particle::FallingDripstoneLava { inner: ParticleStruct::from_raw(env,obj)?}),"DRIPPING_DRIPSTONE_WATER" => Ok(Particle::DrippingDripstoneWater { inner: ParticleStruct::from_raw(env,obj)?}),"FALLING_DRIPSTONE_WATER" => Ok(Particle::FallingDripstoneWater { inner: ParticleStruct::from_raw(env,obj)?}),"GLOW_SQUID_INK" => Ok(Particle::GlowSquidInk { inner: ParticleStruct::from_raw(env,obj)?}),"GLOW" => Ok(Particle::Glow { inner: ParticleStruct::from_raw(env,obj)?}),"WAX_ON" => Ok(Particle::WaxOn { inner: ParticleStruct::from_raw(env,obj)?}),"WAX_OFF" => Ok(Particle::WaxOff { inner: ParticleStruct::from_raw(env,obj)?}),"ELECTRIC_SPARK" => Ok(Particle::ElectricSpark { inner: ParticleStruct::from_raw(env,obj)?}),"SCRAPE" => Ok(Particle::Scrape { inner: ParticleStruct::from_raw(env,obj)?}),"SONIC_BOOM" => Ok(Particle::SonicBoom { inner: ParticleStruct::from_raw(env,obj)?}),"SCULK_SOUL" => Ok(Particle::SculkSoul { inner: ParticleStruct::from_raw(env,obj)?}),"SCULK_CHARGE" => Ok(Particle::SculkCharge { inner: ParticleStruct::from_raw(env,obj)?}),"SCULK_CHARGE_POP" => Ok(Particle::SculkChargePop { inner: ParticleStruct::from_raw(env,obj)?}),"SHRIEK" => Ok(Particle::Shriek { inner: ParticleStruct::from_raw(env,obj)?}),"CHERRY_LEAVES" => Ok(Particle::CherryLeaves { inner: ParticleStruct::from_raw(env,obj)?}),"EGG_CRACK" => Ok(Particle::EggCrack { inner: ParticleStruct::from_raw(env,obj)?}),"DUST_PLUME" => Ok(Particle::DustPlume { inner: ParticleStruct::from_raw(env,obj)?}),"WHITE_SMOKE" => Ok(Particle::WhiteSmoke { inner: ParticleStruct::from_raw(env,obj)?}),"GUST" => Ok(Particle::Gust { inner: ParticleStruct::from_raw(env,obj)?}),"GUST_EMITTER" => Ok(Particle::GustEmitter { inner: ParticleStruct::from_raw(env,obj)?}),"GUST_DUST" => Ok(Particle::GustDust { inner: ParticleStruct::from_raw(env,obj)?}),"TRIAL_SPAWNER_DETECTION" => Ok(Particle::TrialSpawnerDetection { inner: ParticleStruct::from_raw(env,obj)?}),"BLOCK_MARKER" => Ok(Particle::BlockMarker { inner: ParticleStruct::from_raw(env,obj)?}),"LEGACY_BLOCK_CRACK" => Ok(Particle::LegacyBlockCrack { inner: ParticleStruct::from_raw(env,obj)?}),"LEGACY_BLOCK_DUST" => Ok(Particle::LegacyBlockDust { inner: ParticleStruct::from_raw(env,obj)?}),"LEGACY_FALLING_DUST" => Ok(Particle::LegacyFallingDust { inner: ParticleStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for ParticleStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for ParticleStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate ParticleStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Particle")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a ParticleStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> ParticleStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Particle<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Particle;");
let cls = jni.find_class("org/bukkit/Particle"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Particle::from_raw(&jni,obj
)}

	fn key(&self) 
-> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/NamespacedKey;");
let res = self.jni_ref().call_method(&self.jni_object(),"getKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::NamespacedKey::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum TreeSpecies<'mc> {
	Generic {inner: TreeSpeciesStruct<'mc>},
	Redwood {inner: TreeSpeciesStruct<'mc>},
	Birch {inner: TreeSpeciesStruct<'mc>},
	Jungle {inner: TreeSpeciesStruct<'mc>},
	Acacia {inner: TreeSpeciesStruct<'mc>},
	DarkOak {inner: TreeSpeciesStruct<'mc>},
}
impl<'mc> std::fmt::Display for TreeSpecies<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           TreeSpecies::Generic { .. } => f.write_str("GENERIC"),
           TreeSpecies::Redwood { .. } => f.write_str("REDWOOD"),
           TreeSpecies::Birch { .. } => f.write_str("BIRCH"),
           TreeSpecies::Jungle { .. } => f.write_str("JUNGLE"),
           TreeSpecies::Acacia { .. } => f.write_str("ACACIA"),
           TreeSpecies::DarkOak { .. } => f.write_str("DARK_OAK"),
       }
   }
}

        impl<'mc> TreeSpeciesTrait<'mc> for TreeSpecies<'mc> {}
        
        pub trait TreeSpeciesTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<TreeSpecies<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/TreeSpecies");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/TreeSpecies;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"GENERIC" => Ok(TreeSpecies::Generic { inner: TreeSpeciesStruct::from_raw(env,obj)?}),
"REDWOOD" => Ok(TreeSpecies::Redwood { inner: TreeSpeciesStruct::from_raw(env,obj)?}),
"BIRCH" => Ok(TreeSpecies::Birch { inner: TreeSpeciesStruct::from_raw(env,obj)?}),
"JUNGLE" => Ok(TreeSpecies::Jungle { inner: TreeSpeciesStruct::from_raw(env,obj)?}),
"ACACIA" => Ok(TreeSpecies::Acacia { inner: TreeSpeciesStruct::from_raw(env,obj)?}),
"DARK_OAK" => Ok(TreeSpecies::DarkOak { inner: TreeSpeciesStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct TreeSpeciesStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for TreeSpecies<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Generic { inner } => inner.0.clone(),
Self::Redwood { inner } => inner.0.clone(),
Self::Birch { inner } => inner.0.clone(),
Self::Jungle { inner } => inner.0.clone(),
Self::Acacia { inner } => inner.0.clone(),
Self::DarkOak { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Generic { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Redwood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Birch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Jungle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Acacia { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for TreeSpecies<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate TreeSpecies from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/TreeSpecies")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a TreeSpecies object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "GENERIC" => Ok(TreeSpecies::Generic { inner: TreeSpeciesStruct::from_raw(env,obj)?}),"REDWOOD" => Ok(TreeSpecies::Redwood { inner: TreeSpeciesStruct::from_raw(env,obj)?}),"BIRCH" => Ok(TreeSpecies::Birch { inner: TreeSpeciesStruct::from_raw(env,obj)?}),"JUNGLE" => Ok(TreeSpecies::Jungle { inner: TreeSpeciesStruct::from_raw(env,obj)?}),"ACACIA" => Ok(TreeSpecies::Acacia { inner: TreeSpeciesStruct::from_raw(env,obj)?}),"DARK_OAK" => Ok(TreeSpecies::DarkOak { inner: TreeSpeciesStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for TreeSpeciesStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for TreeSpeciesStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate TreeSpeciesStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/TreeSpecies")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a TreeSpeciesStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> TreeSpeciesStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::TreeSpecies<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/TreeSpecies;");
let cls = jni.find_class("org/bukkit/TreeSpecies"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::TreeSpecies::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the associated data value representing this species
	fn data(&self) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("()B");
let res = self.jni_ref().call_method(&self.jni_object(),"getData",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
#[deprecated]
/// Gets the TreeSpecies with the given data value
	fn get_by_data(jni: &blackboxmc_general::SharedJNIEnv<'mc>,data: i8) 
-> Result<Option<crate::TreeSpecies<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(B)Lorg/bukkit/TreeSpecies;");
let val_1 = jni::objects::JValueGen::Byte(data);
let cls = jni.find_class("org/bukkit/TreeSpecies"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByData",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::TreeSpecies::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct VibrationDestinationEntityDestination<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for VibrationDestinationEntityDestination<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for VibrationDestinationEntityDestination<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate VibrationDestinationEntityDestination from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Vibration/Destination/EntityDestination")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a VibrationDestinationEntityDestination object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> VibrationDestinationEntityDestinationTrait<'mc> for VibrationDestinationEntityDestination<'mc> {}
pub trait VibrationDestinationEntityDestinationTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

	fn new(jni: &blackboxmc_general::SharedJNIEnv<'mc>,entity: impl Into<crate::entity::Entity<'mc>>) 
-> Result<crate::VibrationDestinationEntityDestination<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/entity/Entity;)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(entity.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Vibration/Destination/EntityDestination"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.new_object(cls,
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error_no_gen(res)?;
crate::VibrationDestinationEntityDestination::from_raw(&jni,res
)}

	fn entity(&self) 
-> Result<crate::entity::Entity<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/entity/Entity;");
let res = self.jni_ref().call_method(&self.jni_object(),"getEntity",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::entity::Entity::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::VibrationDestination<'mc>> for VibrationDestinationEntityDestination<'mc>{

fn into(self) -> crate::VibrationDestination<'mc> {

crate::VibrationDestination::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting VibrationDestinationEntityDestination into crate::VibrationDestination")

   }
}
impl<'mc> crate::VibrationDestinationTrait<'mc> for VibrationDestinationEntityDestination<'mc> {}
pub enum Material<'mc> {
	Air {inner: MaterialStruct<'mc>},
	Stone {inner: MaterialStruct<'mc>},
	Granite {inner: MaterialStruct<'mc>},
	PolishedGranite {inner: MaterialStruct<'mc>},
	Diorite {inner: MaterialStruct<'mc>},
	PolishedDiorite {inner: MaterialStruct<'mc>},
	Andesite {inner: MaterialStruct<'mc>},
	PolishedAndesite {inner: MaterialStruct<'mc>},
	Deepslate {inner: MaterialStruct<'mc>},
	CobbledDeepslate {inner: MaterialStruct<'mc>},
	PolishedDeepslate {inner: MaterialStruct<'mc>},
	Calcite {inner: MaterialStruct<'mc>},
	Tuff {inner: MaterialStruct<'mc>},
	TuffSlab {inner: MaterialStruct<'mc>},
	TuffStairs {inner: MaterialStruct<'mc>},
	TuffWall {inner: MaterialStruct<'mc>},
	ChiseledTuff {inner: MaterialStruct<'mc>},
	PolishedTuff {inner: MaterialStruct<'mc>},
	PolishedTuffSlab {inner: MaterialStruct<'mc>},
	PolishedTuffStairs {inner: MaterialStruct<'mc>},
	PolishedTuffWall {inner: MaterialStruct<'mc>},
	TuffBricks {inner: MaterialStruct<'mc>},
	TuffBrickSlab {inner: MaterialStruct<'mc>},
	TuffBrickStairs {inner: MaterialStruct<'mc>},
	TuffBrickWall {inner: MaterialStruct<'mc>},
	ChiseledTuffBricks {inner: MaterialStruct<'mc>},
	DripstoneBlock {inner: MaterialStruct<'mc>},
	GrassBlock {inner: MaterialStruct<'mc>},
	Dirt {inner: MaterialStruct<'mc>},
	CoarseDirt {inner: MaterialStruct<'mc>},
	Podzol {inner: MaterialStruct<'mc>},
	RootedDirt {inner: MaterialStruct<'mc>},
	Mud {inner: MaterialStruct<'mc>},
	CrimsonNylium {inner: MaterialStruct<'mc>},
	WarpedNylium {inner: MaterialStruct<'mc>},
	Cobblestone {inner: MaterialStruct<'mc>},
	OakPlanks {inner: MaterialStruct<'mc>},
	SprucePlanks {inner: MaterialStruct<'mc>},
	BirchPlanks {inner: MaterialStruct<'mc>},
	JunglePlanks {inner: MaterialStruct<'mc>},
	AcaciaPlanks {inner: MaterialStruct<'mc>},
	CherryPlanks {inner: MaterialStruct<'mc>},
	DarkOakPlanks {inner: MaterialStruct<'mc>},
	MangrovePlanks {inner: MaterialStruct<'mc>},
	BambooPlanks {inner: MaterialStruct<'mc>},
	CrimsonPlanks {inner: MaterialStruct<'mc>},
	WarpedPlanks {inner: MaterialStruct<'mc>},
	BambooMosaic {inner: MaterialStruct<'mc>},
	OakSapling {inner: MaterialStruct<'mc>},
	SpruceSapling {inner: MaterialStruct<'mc>},
	BirchSapling {inner: MaterialStruct<'mc>},
	JungleSapling {inner: MaterialStruct<'mc>},
	AcaciaSapling {inner: MaterialStruct<'mc>},
	CherrySapling {inner: MaterialStruct<'mc>},
	DarkOakSapling {inner: MaterialStruct<'mc>},
	MangrovePropagule {inner: MaterialStruct<'mc>},
	Bedrock {inner: MaterialStruct<'mc>},
	Sand {inner: MaterialStruct<'mc>},
	SuspiciousSand {inner: MaterialStruct<'mc>},
	SuspiciousGravel {inner: MaterialStruct<'mc>},
	RedSand {inner: MaterialStruct<'mc>},
	Gravel {inner: MaterialStruct<'mc>},
	CoalOre {inner: MaterialStruct<'mc>},
	DeepslateCoalOre {inner: MaterialStruct<'mc>},
	IronOre {inner: MaterialStruct<'mc>},
	DeepslateIronOre {inner: MaterialStruct<'mc>},
	CopperOre {inner: MaterialStruct<'mc>},
	DeepslateCopperOre {inner: MaterialStruct<'mc>},
	GoldOre {inner: MaterialStruct<'mc>},
	DeepslateGoldOre {inner: MaterialStruct<'mc>},
	RedstoneOre {inner: MaterialStruct<'mc>},
	DeepslateRedstoneOre {inner: MaterialStruct<'mc>},
	EmeraldOre {inner: MaterialStruct<'mc>},
	DeepslateEmeraldOre {inner: MaterialStruct<'mc>},
	LapisOre {inner: MaterialStruct<'mc>},
	DeepslateLapisOre {inner: MaterialStruct<'mc>},
	DiamondOre {inner: MaterialStruct<'mc>},
	DeepslateDiamondOre {inner: MaterialStruct<'mc>},
	NetherGoldOre {inner: MaterialStruct<'mc>},
	NetherQuartzOre {inner: MaterialStruct<'mc>},
	AncientDebris {inner: MaterialStruct<'mc>},
	CoalBlock {inner: MaterialStruct<'mc>},
	RawIronBlock {inner: MaterialStruct<'mc>},
	RawCopperBlock {inner: MaterialStruct<'mc>},
	RawGoldBlock {inner: MaterialStruct<'mc>},
	AmethystBlock {inner: MaterialStruct<'mc>},
	BuddingAmethyst {inner: MaterialStruct<'mc>},
	IronBlock {inner: MaterialStruct<'mc>},
	CopperBlock {inner: MaterialStruct<'mc>},
	GoldBlock {inner: MaterialStruct<'mc>},
	DiamondBlock {inner: MaterialStruct<'mc>},
	NetheriteBlock {inner: MaterialStruct<'mc>},
	ExposedCopper {inner: MaterialStruct<'mc>},
	WeatheredCopper {inner: MaterialStruct<'mc>},
	OxidizedCopper {inner: MaterialStruct<'mc>},
	ChiseledCopper {inner: MaterialStruct<'mc>},
	ExposedChiseledCopper {inner: MaterialStruct<'mc>},
	WeatheredChiseledCopper {inner: MaterialStruct<'mc>},
	OxidizedChiseledCopper {inner: MaterialStruct<'mc>},
	CutCopper {inner: MaterialStruct<'mc>},
	ExposedCutCopper {inner: MaterialStruct<'mc>},
	WeatheredCutCopper {inner: MaterialStruct<'mc>},
	OxidizedCutCopper {inner: MaterialStruct<'mc>},
	CutCopperStairs {inner: MaterialStruct<'mc>},
	ExposedCutCopperStairs {inner: MaterialStruct<'mc>},
	WeatheredCutCopperStairs {inner: MaterialStruct<'mc>},
	OxidizedCutCopperStairs {inner: MaterialStruct<'mc>},
	CutCopperSlab {inner: MaterialStruct<'mc>},
	ExposedCutCopperSlab {inner: MaterialStruct<'mc>},
	WeatheredCutCopperSlab {inner: MaterialStruct<'mc>},
	OxidizedCutCopperSlab {inner: MaterialStruct<'mc>},
	WaxedCopperBlock {inner: MaterialStruct<'mc>},
	WaxedExposedCopper {inner: MaterialStruct<'mc>},
	WaxedWeatheredCopper {inner: MaterialStruct<'mc>},
	WaxedOxidizedCopper {inner: MaterialStruct<'mc>},
	WaxedChiseledCopper {inner: MaterialStruct<'mc>},
	WaxedExposedChiseledCopper {inner: MaterialStruct<'mc>},
	WaxedWeatheredChiseledCopper {inner: MaterialStruct<'mc>},
	WaxedOxidizedChiseledCopper {inner: MaterialStruct<'mc>},
	WaxedCutCopper {inner: MaterialStruct<'mc>},
	WaxedExposedCutCopper {inner: MaterialStruct<'mc>},
	WaxedWeatheredCutCopper {inner: MaterialStruct<'mc>},
	WaxedOxidizedCutCopper {inner: MaterialStruct<'mc>},
	WaxedCutCopperStairs {inner: MaterialStruct<'mc>},
	WaxedExposedCutCopperStairs {inner: MaterialStruct<'mc>},
	WaxedWeatheredCutCopperStairs {inner: MaterialStruct<'mc>},
	WaxedOxidizedCutCopperStairs {inner: MaterialStruct<'mc>},
	WaxedCutCopperSlab {inner: MaterialStruct<'mc>},
	WaxedExposedCutCopperSlab {inner: MaterialStruct<'mc>},
	WaxedWeatheredCutCopperSlab {inner: MaterialStruct<'mc>},
	WaxedOxidizedCutCopperSlab {inner: MaterialStruct<'mc>},
	OakLog {inner: MaterialStruct<'mc>},
	SpruceLog {inner: MaterialStruct<'mc>},
	BirchLog {inner: MaterialStruct<'mc>},
	JungleLog {inner: MaterialStruct<'mc>},
	AcaciaLog {inner: MaterialStruct<'mc>},
	CherryLog {inner: MaterialStruct<'mc>},
	DarkOakLog {inner: MaterialStruct<'mc>},
	MangroveLog {inner: MaterialStruct<'mc>},
	MangroveRoots {inner: MaterialStruct<'mc>},
	MuddyMangroveRoots {inner: MaterialStruct<'mc>},
	CrimsonStem {inner: MaterialStruct<'mc>},
	WarpedStem {inner: MaterialStruct<'mc>},
	BambooBlock {inner: MaterialStruct<'mc>},
	StrippedOakLog {inner: MaterialStruct<'mc>},
	StrippedSpruceLog {inner: MaterialStruct<'mc>},
	StrippedBirchLog {inner: MaterialStruct<'mc>},
	StrippedJungleLog {inner: MaterialStruct<'mc>},
	StrippedAcaciaLog {inner: MaterialStruct<'mc>},
	StrippedCherryLog {inner: MaterialStruct<'mc>},
	StrippedDarkOakLog {inner: MaterialStruct<'mc>},
	StrippedMangroveLog {inner: MaterialStruct<'mc>},
	StrippedCrimsonStem {inner: MaterialStruct<'mc>},
	StrippedWarpedStem {inner: MaterialStruct<'mc>},
	StrippedOakWood {inner: MaterialStruct<'mc>},
	StrippedSpruceWood {inner: MaterialStruct<'mc>},
	StrippedBirchWood {inner: MaterialStruct<'mc>},
	StrippedJungleWood {inner: MaterialStruct<'mc>},
	StrippedAcaciaWood {inner: MaterialStruct<'mc>},
	StrippedCherryWood {inner: MaterialStruct<'mc>},
	StrippedDarkOakWood {inner: MaterialStruct<'mc>},
	StrippedMangroveWood {inner: MaterialStruct<'mc>},
	StrippedCrimsonHyphae {inner: MaterialStruct<'mc>},
	StrippedWarpedHyphae {inner: MaterialStruct<'mc>},
	StrippedBambooBlock {inner: MaterialStruct<'mc>},
	OakWood {inner: MaterialStruct<'mc>},
	SpruceWood {inner: MaterialStruct<'mc>},
	BirchWood {inner: MaterialStruct<'mc>},
	JungleWood {inner: MaterialStruct<'mc>},
	AcaciaWood {inner: MaterialStruct<'mc>},
	CherryWood {inner: MaterialStruct<'mc>},
	DarkOakWood {inner: MaterialStruct<'mc>},
	MangroveWood {inner: MaterialStruct<'mc>},
	CrimsonHyphae {inner: MaterialStruct<'mc>},
	WarpedHyphae {inner: MaterialStruct<'mc>},
	OakLeaves {inner: MaterialStruct<'mc>},
	SpruceLeaves {inner: MaterialStruct<'mc>},
	BirchLeaves {inner: MaterialStruct<'mc>},
	JungleLeaves {inner: MaterialStruct<'mc>},
	AcaciaLeaves {inner: MaterialStruct<'mc>},
	CherryLeaves {inner: MaterialStruct<'mc>},
	DarkOakLeaves {inner: MaterialStruct<'mc>},
	MangroveLeaves {inner: MaterialStruct<'mc>},
	AzaleaLeaves {inner: MaterialStruct<'mc>},
	FloweringAzaleaLeaves {inner: MaterialStruct<'mc>},
	Sponge {inner: MaterialStruct<'mc>},
	WetSponge {inner: MaterialStruct<'mc>},
	Glass {inner: MaterialStruct<'mc>},
	TintedGlass {inner: MaterialStruct<'mc>},
	LapisBlock {inner: MaterialStruct<'mc>},
	Sandstone {inner: MaterialStruct<'mc>},
	ChiseledSandstone {inner: MaterialStruct<'mc>},
	CutSandstone {inner: MaterialStruct<'mc>},
	Cobweb {inner: MaterialStruct<'mc>},
	ShortGrass {inner: MaterialStruct<'mc>},
	Fern {inner: MaterialStruct<'mc>},
	Azalea {inner: MaterialStruct<'mc>},
	FloweringAzalea {inner: MaterialStruct<'mc>},
	DeadBush {inner: MaterialStruct<'mc>},
	Seagrass {inner: MaterialStruct<'mc>},
	SeaPickle {inner: MaterialStruct<'mc>},
	WhiteWool {inner: MaterialStruct<'mc>},
	OrangeWool {inner: MaterialStruct<'mc>},
	MagentaWool {inner: MaterialStruct<'mc>},
	LightBlueWool {inner: MaterialStruct<'mc>},
	YellowWool {inner: MaterialStruct<'mc>},
	LimeWool {inner: MaterialStruct<'mc>},
	PinkWool {inner: MaterialStruct<'mc>},
	GrayWool {inner: MaterialStruct<'mc>},
	LightGrayWool {inner: MaterialStruct<'mc>},
	CyanWool {inner: MaterialStruct<'mc>},
	PurpleWool {inner: MaterialStruct<'mc>},
	BlueWool {inner: MaterialStruct<'mc>},
	BrownWool {inner: MaterialStruct<'mc>},
	GreenWool {inner: MaterialStruct<'mc>},
	RedWool {inner: MaterialStruct<'mc>},
	BlackWool {inner: MaterialStruct<'mc>},
	Dandelion {inner: MaterialStruct<'mc>},
	Poppy {inner: MaterialStruct<'mc>},
	BlueOrchid {inner: MaterialStruct<'mc>},
	Allium {inner: MaterialStruct<'mc>},
	AzureBluet {inner: MaterialStruct<'mc>},
	RedTulip {inner: MaterialStruct<'mc>},
	OrangeTulip {inner: MaterialStruct<'mc>},
	WhiteTulip {inner: MaterialStruct<'mc>},
	PinkTulip {inner: MaterialStruct<'mc>},
	OxeyeDaisy {inner: MaterialStruct<'mc>},
	Cornflower {inner: MaterialStruct<'mc>},
	LilyOfTheValley {inner: MaterialStruct<'mc>},
	WitherRose {inner: MaterialStruct<'mc>},
	Torchflower {inner: MaterialStruct<'mc>},
	PitcherPlant {inner: MaterialStruct<'mc>},
	SporeBlossom {inner: MaterialStruct<'mc>},
	BrownMushroom {inner: MaterialStruct<'mc>},
	RedMushroom {inner: MaterialStruct<'mc>},
	CrimsonFungus {inner: MaterialStruct<'mc>},
	WarpedFungus {inner: MaterialStruct<'mc>},
	CrimsonRoots {inner: MaterialStruct<'mc>},
	WarpedRoots {inner: MaterialStruct<'mc>},
	NetherSprouts {inner: MaterialStruct<'mc>},
	WeepingVines {inner: MaterialStruct<'mc>},
	TwistingVines {inner: MaterialStruct<'mc>},
	SugarCane {inner: MaterialStruct<'mc>},
	Kelp {inner: MaterialStruct<'mc>},
	MossCarpet {inner: MaterialStruct<'mc>},
	PinkPetals {inner: MaterialStruct<'mc>},
	MossBlock {inner: MaterialStruct<'mc>},
	HangingRoots {inner: MaterialStruct<'mc>},
	BigDripleaf {inner: MaterialStruct<'mc>},
	SmallDripleaf {inner: MaterialStruct<'mc>},
	Bamboo {inner: MaterialStruct<'mc>},
	OakSlab {inner: MaterialStruct<'mc>},
	SpruceSlab {inner: MaterialStruct<'mc>},
	BirchSlab {inner: MaterialStruct<'mc>},
	JungleSlab {inner: MaterialStruct<'mc>},
	AcaciaSlab {inner: MaterialStruct<'mc>},
	CherrySlab {inner: MaterialStruct<'mc>},
	DarkOakSlab {inner: MaterialStruct<'mc>},
	MangroveSlab {inner: MaterialStruct<'mc>},
	BambooSlab {inner: MaterialStruct<'mc>},
	BambooMosaicSlab {inner: MaterialStruct<'mc>},
	CrimsonSlab {inner: MaterialStruct<'mc>},
	WarpedSlab {inner: MaterialStruct<'mc>},
	StoneSlab {inner: MaterialStruct<'mc>},
	SmoothStoneSlab {inner: MaterialStruct<'mc>},
	SandstoneSlab {inner: MaterialStruct<'mc>},
	CutSandstoneSlab {inner: MaterialStruct<'mc>},
	PetrifiedOakSlab {inner: MaterialStruct<'mc>},
	CobblestoneSlab {inner: MaterialStruct<'mc>},
	BrickSlab {inner: MaterialStruct<'mc>},
	StoneBrickSlab {inner: MaterialStruct<'mc>},
	MudBrickSlab {inner: MaterialStruct<'mc>},
	NetherBrickSlab {inner: MaterialStruct<'mc>},
	QuartzSlab {inner: MaterialStruct<'mc>},
	RedSandstoneSlab {inner: MaterialStruct<'mc>},
	CutRedSandstoneSlab {inner: MaterialStruct<'mc>},
	PurpurSlab {inner: MaterialStruct<'mc>},
	PrismarineSlab {inner: MaterialStruct<'mc>},
	PrismarineBrickSlab {inner: MaterialStruct<'mc>},
	DarkPrismarineSlab {inner: MaterialStruct<'mc>},
	SmoothQuartz {inner: MaterialStruct<'mc>},
	SmoothRedSandstone {inner: MaterialStruct<'mc>},
	SmoothSandstone {inner: MaterialStruct<'mc>},
	SmoothStone {inner: MaterialStruct<'mc>},
	Bricks {inner: MaterialStruct<'mc>},
	Bookshelf {inner: MaterialStruct<'mc>},
	ChiseledBookshelf {inner: MaterialStruct<'mc>},
	DecoratedPot {inner: MaterialStruct<'mc>},
	MossyCobblestone {inner: MaterialStruct<'mc>},
	Obsidian {inner: MaterialStruct<'mc>},
	Torch {inner: MaterialStruct<'mc>},
	EndRod {inner: MaterialStruct<'mc>},
	ChorusPlant {inner: MaterialStruct<'mc>},
	ChorusFlower {inner: MaterialStruct<'mc>},
	PurpurBlock {inner: MaterialStruct<'mc>},
	PurpurPillar {inner: MaterialStruct<'mc>},
	PurpurStairs {inner: MaterialStruct<'mc>},
	Spawner {inner: MaterialStruct<'mc>},
	Chest {inner: MaterialStruct<'mc>},
	CraftingTable {inner: MaterialStruct<'mc>},
	Farmland {inner: MaterialStruct<'mc>},
	Furnace {inner: MaterialStruct<'mc>},
	Ladder {inner: MaterialStruct<'mc>},
	CobblestoneStairs {inner: MaterialStruct<'mc>},
	Snow {inner: MaterialStruct<'mc>},
	Ice {inner: MaterialStruct<'mc>},
	SnowBlock {inner: MaterialStruct<'mc>},
	Cactus {inner: MaterialStruct<'mc>},
	Clay {inner: MaterialStruct<'mc>},
	Jukebox {inner: MaterialStruct<'mc>},
	OakFence {inner: MaterialStruct<'mc>},
	SpruceFence {inner: MaterialStruct<'mc>},
	BirchFence {inner: MaterialStruct<'mc>},
	JungleFence {inner: MaterialStruct<'mc>},
	AcaciaFence {inner: MaterialStruct<'mc>},
	CherryFence {inner: MaterialStruct<'mc>},
	DarkOakFence {inner: MaterialStruct<'mc>},
	MangroveFence {inner: MaterialStruct<'mc>},
	BambooFence {inner: MaterialStruct<'mc>},
	CrimsonFence {inner: MaterialStruct<'mc>},
	WarpedFence {inner: MaterialStruct<'mc>},
	Pumpkin {inner: MaterialStruct<'mc>},
	CarvedPumpkin {inner: MaterialStruct<'mc>},
	JackOLantern {inner: MaterialStruct<'mc>},
	Netherrack {inner: MaterialStruct<'mc>},
	SoulSand {inner: MaterialStruct<'mc>},
	SoulSoil {inner: MaterialStruct<'mc>},
	Basalt {inner: MaterialStruct<'mc>},
	PolishedBasalt {inner: MaterialStruct<'mc>},
	SmoothBasalt {inner: MaterialStruct<'mc>},
	SoulTorch {inner: MaterialStruct<'mc>},
	Glowstone {inner: MaterialStruct<'mc>},
	InfestedStone {inner: MaterialStruct<'mc>},
	InfestedCobblestone {inner: MaterialStruct<'mc>},
	InfestedStoneBricks {inner: MaterialStruct<'mc>},
	InfestedMossyStoneBricks {inner: MaterialStruct<'mc>},
	InfestedCrackedStoneBricks {inner: MaterialStruct<'mc>},
	InfestedChiseledStoneBricks {inner: MaterialStruct<'mc>},
	InfestedDeepslate {inner: MaterialStruct<'mc>},
	StoneBricks {inner: MaterialStruct<'mc>},
	MossyStoneBricks {inner: MaterialStruct<'mc>},
	CrackedStoneBricks {inner: MaterialStruct<'mc>},
	ChiseledStoneBricks {inner: MaterialStruct<'mc>},
	PackedMud {inner: MaterialStruct<'mc>},
	MudBricks {inner: MaterialStruct<'mc>},
	DeepslateBricks {inner: MaterialStruct<'mc>},
	CrackedDeepslateBricks {inner: MaterialStruct<'mc>},
	DeepslateTiles {inner: MaterialStruct<'mc>},
	CrackedDeepslateTiles {inner: MaterialStruct<'mc>},
	ChiseledDeepslate {inner: MaterialStruct<'mc>},
	ReinforcedDeepslate {inner: MaterialStruct<'mc>},
	BrownMushroomBlock {inner: MaterialStruct<'mc>},
	RedMushroomBlock {inner: MaterialStruct<'mc>},
	MushroomStem {inner: MaterialStruct<'mc>},
	IronBars {inner: MaterialStruct<'mc>},
	Chain {inner: MaterialStruct<'mc>},
	GlassPane {inner: MaterialStruct<'mc>},
	Melon {inner: MaterialStruct<'mc>},
	Vine {inner: MaterialStruct<'mc>},
	GlowLichen {inner: MaterialStruct<'mc>},
	BrickStairs {inner: MaterialStruct<'mc>},
	StoneBrickStairs {inner: MaterialStruct<'mc>},
	MudBrickStairs {inner: MaterialStruct<'mc>},
	Mycelium {inner: MaterialStruct<'mc>},
	LilyPad {inner: MaterialStruct<'mc>},
	NetherBricks {inner: MaterialStruct<'mc>},
	CrackedNetherBricks {inner: MaterialStruct<'mc>},
	ChiseledNetherBricks {inner: MaterialStruct<'mc>},
	NetherBrickFence {inner: MaterialStruct<'mc>},
	NetherBrickStairs {inner: MaterialStruct<'mc>},
	Sculk {inner: MaterialStruct<'mc>},
	SculkVein {inner: MaterialStruct<'mc>},
	SculkCatalyst {inner: MaterialStruct<'mc>},
	SculkShrieker {inner: MaterialStruct<'mc>},
	EnchantingTable {inner: MaterialStruct<'mc>},
	EndPortalFrame {inner: MaterialStruct<'mc>},
	EndStone {inner: MaterialStruct<'mc>},
	EndStoneBricks {inner: MaterialStruct<'mc>},
	DragonEgg {inner: MaterialStruct<'mc>},
	SandstoneStairs {inner: MaterialStruct<'mc>},
	EnderChest {inner: MaterialStruct<'mc>},
	EmeraldBlock {inner: MaterialStruct<'mc>},
	OakStairs {inner: MaterialStruct<'mc>},
	SpruceStairs {inner: MaterialStruct<'mc>},
	BirchStairs {inner: MaterialStruct<'mc>},
	JungleStairs {inner: MaterialStruct<'mc>},
	AcaciaStairs {inner: MaterialStruct<'mc>},
	CherryStairs {inner: MaterialStruct<'mc>},
	DarkOakStairs {inner: MaterialStruct<'mc>},
	MangroveStairs {inner: MaterialStruct<'mc>},
	BambooStairs {inner: MaterialStruct<'mc>},
	BambooMosaicStairs {inner: MaterialStruct<'mc>},
	CrimsonStairs {inner: MaterialStruct<'mc>},
	WarpedStairs {inner: MaterialStruct<'mc>},
	CommandBlock {inner: MaterialStruct<'mc>},
	Beacon {inner: MaterialStruct<'mc>},
	CobblestoneWall {inner: MaterialStruct<'mc>},
	MossyCobblestoneWall {inner: MaterialStruct<'mc>},
	BrickWall {inner: MaterialStruct<'mc>},
	PrismarineWall {inner: MaterialStruct<'mc>},
	RedSandstoneWall {inner: MaterialStruct<'mc>},
	MossyStoneBrickWall {inner: MaterialStruct<'mc>},
	GraniteWall {inner: MaterialStruct<'mc>},
	StoneBrickWall {inner: MaterialStruct<'mc>},
	MudBrickWall {inner: MaterialStruct<'mc>},
	NetherBrickWall {inner: MaterialStruct<'mc>},
	AndesiteWall {inner: MaterialStruct<'mc>},
	RedNetherBrickWall {inner: MaterialStruct<'mc>},
	SandstoneWall {inner: MaterialStruct<'mc>},
	EndStoneBrickWall {inner: MaterialStruct<'mc>},
	DioriteWall {inner: MaterialStruct<'mc>},
	BlackstoneWall {inner: MaterialStruct<'mc>},
	PolishedBlackstoneWall {inner: MaterialStruct<'mc>},
	PolishedBlackstoneBrickWall {inner: MaterialStruct<'mc>},
	CobbledDeepslateWall {inner: MaterialStruct<'mc>},
	PolishedDeepslateWall {inner: MaterialStruct<'mc>},
	DeepslateBrickWall {inner: MaterialStruct<'mc>},
	DeepslateTileWall {inner: MaterialStruct<'mc>},
	Anvil {inner: MaterialStruct<'mc>},
	ChippedAnvil {inner: MaterialStruct<'mc>},
	DamagedAnvil {inner: MaterialStruct<'mc>},
	ChiseledQuartzBlock {inner: MaterialStruct<'mc>},
	QuartzBlock {inner: MaterialStruct<'mc>},
	QuartzBricks {inner: MaterialStruct<'mc>},
	QuartzPillar {inner: MaterialStruct<'mc>},
	QuartzStairs {inner: MaterialStruct<'mc>},
	WhiteTerracotta {inner: MaterialStruct<'mc>},
	OrangeTerracotta {inner: MaterialStruct<'mc>},
	MagentaTerracotta {inner: MaterialStruct<'mc>},
	LightBlueTerracotta {inner: MaterialStruct<'mc>},
	YellowTerracotta {inner: MaterialStruct<'mc>},
	LimeTerracotta {inner: MaterialStruct<'mc>},
	PinkTerracotta {inner: MaterialStruct<'mc>},
	GrayTerracotta {inner: MaterialStruct<'mc>},
	LightGrayTerracotta {inner: MaterialStruct<'mc>},
	CyanTerracotta {inner: MaterialStruct<'mc>},
	PurpleTerracotta {inner: MaterialStruct<'mc>},
	BlueTerracotta {inner: MaterialStruct<'mc>},
	BrownTerracotta {inner: MaterialStruct<'mc>},
	GreenTerracotta {inner: MaterialStruct<'mc>},
	RedTerracotta {inner: MaterialStruct<'mc>},
	BlackTerracotta {inner: MaterialStruct<'mc>},
	Barrier {inner: MaterialStruct<'mc>},
	Light {inner: MaterialStruct<'mc>},
	HayBlock {inner: MaterialStruct<'mc>},
	WhiteCarpet {inner: MaterialStruct<'mc>},
	OrangeCarpet {inner: MaterialStruct<'mc>},
	MagentaCarpet {inner: MaterialStruct<'mc>},
	LightBlueCarpet {inner: MaterialStruct<'mc>},
	YellowCarpet {inner: MaterialStruct<'mc>},
	LimeCarpet {inner: MaterialStruct<'mc>},
	PinkCarpet {inner: MaterialStruct<'mc>},
	GrayCarpet {inner: MaterialStruct<'mc>},
	LightGrayCarpet {inner: MaterialStruct<'mc>},
	CyanCarpet {inner: MaterialStruct<'mc>},
	PurpleCarpet {inner: MaterialStruct<'mc>},
	BlueCarpet {inner: MaterialStruct<'mc>},
	BrownCarpet {inner: MaterialStruct<'mc>},
	GreenCarpet {inner: MaterialStruct<'mc>},
	RedCarpet {inner: MaterialStruct<'mc>},
	BlackCarpet {inner: MaterialStruct<'mc>},
	Terracotta {inner: MaterialStruct<'mc>},
	PackedIce {inner: MaterialStruct<'mc>},
	DirtPath {inner: MaterialStruct<'mc>},
	Sunflower {inner: MaterialStruct<'mc>},
	Lilac {inner: MaterialStruct<'mc>},
	RoseBush {inner: MaterialStruct<'mc>},
	Peony {inner: MaterialStruct<'mc>},
	TallGrass {inner: MaterialStruct<'mc>},
	LargeFern {inner: MaterialStruct<'mc>},
	WhiteStainedGlass {inner: MaterialStruct<'mc>},
	OrangeStainedGlass {inner: MaterialStruct<'mc>},
	MagentaStainedGlass {inner: MaterialStruct<'mc>},
	LightBlueStainedGlass {inner: MaterialStruct<'mc>},
	YellowStainedGlass {inner: MaterialStruct<'mc>},
	LimeStainedGlass {inner: MaterialStruct<'mc>},
	PinkStainedGlass {inner: MaterialStruct<'mc>},
	GrayStainedGlass {inner: MaterialStruct<'mc>},
	LightGrayStainedGlass {inner: MaterialStruct<'mc>},
	CyanStainedGlass {inner: MaterialStruct<'mc>},
	PurpleStainedGlass {inner: MaterialStruct<'mc>},
	BlueStainedGlass {inner: MaterialStruct<'mc>},
	BrownStainedGlass {inner: MaterialStruct<'mc>},
	GreenStainedGlass {inner: MaterialStruct<'mc>},
	RedStainedGlass {inner: MaterialStruct<'mc>},
	BlackStainedGlass {inner: MaterialStruct<'mc>},
	WhiteStainedGlassPane {inner: MaterialStruct<'mc>},
	OrangeStainedGlassPane {inner: MaterialStruct<'mc>},
	MagentaStainedGlassPane {inner: MaterialStruct<'mc>},
	LightBlueStainedGlassPane {inner: MaterialStruct<'mc>},
	YellowStainedGlassPane {inner: MaterialStruct<'mc>},
	LimeStainedGlassPane {inner: MaterialStruct<'mc>},
	PinkStainedGlassPane {inner: MaterialStruct<'mc>},
	GrayStainedGlassPane {inner: MaterialStruct<'mc>},
	LightGrayStainedGlassPane {inner: MaterialStruct<'mc>},
	CyanStainedGlassPane {inner: MaterialStruct<'mc>},
	PurpleStainedGlassPane {inner: MaterialStruct<'mc>},
	BlueStainedGlassPane {inner: MaterialStruct<'mc>},
	BrownStainedGlassPane {inner: MaterialStruct<'mc>},
	GreenStainedGlassPane {inner: MaterialStruct<'mc>},
	RedStainedGlassPane {inner: MaterialStruct<'mc>},
	BlackStainedGlassPane {inner: MaterialStruct<'mc>},
	Prismarine {inner: MaterialStruct<'mc>},
	PrismarineBricks {inner: MaterialStruct<'mc>},
	DarkPrismarine {inner: MaterialStruct<'mc>},
	PrismarineStairs {inner: MaterialStruct<'mc>},
	PrismarineBrickStairs {inner: MaterialStruct<'mc>},
	DarkPrismarineStairs {inner: MaterialStruct<'mc>},
	SeaLantern {inner: MaterialStruct<'mc>},
	RedSandstone {inner: MaterialStruct<'mc>},
	ChiseledRedSandstone {inner: MaterialStruct<'mc>},
	CutRedSandstone {inner: MaterialStruct<'mc>},
	RedSandstoneStairs {inner: MaterialStruct<'mc>},
	RepeatingCommandBlock {inner: MaterialStruct<'mc>},
	ChainCommandBlock {inner: MaterialStruct<'mc>},
	MagmaBlock {inner: MaterialStruct<'mc>},
	NetherWartBlock {inner: MaterialStruct<'mc>},
	WarpedWartBlock {inner: MaterialStruct<'mc>},
	RedNetherBricks {inner: MaterialStruct<'mc>},
	BoneBlock {inner: MaterialStruct<'mc>},
	StructureVoid {inner: MaterialStruct<'mc>},
	ShulkerBox {inner: MaterialStruct<'mc>},
	WhiteShulkerBox {inner: MaterialStruct<'mc>},
	OrangeShulkerBox {inner: MaterialStruct<'mc>},
	MagentaShulkerBox {inner: MaterialStruct<'mc>},
	LightBlueShulkerBox {inner: MaterialStruct<'mc>},
	YellowShulkerBox {inner: MaterialStruct<'mc>},
	LimeShulkerBox {inner: MaterialStruct<'mc>},
	PinkShulkerBox {inner: MaterialStruct<'mc>},
	GrayShulkerBox {inner: MaterialStruct<'mc>},
	LightGrayShulkerBox {inner: MaterialStruct<'mc>},
	CyanShulkerBox {inner: MaterialStruct<'mc>},
	PurpleShulkerBox {inner: MaterialStruct<'mc>},
	BlueShulkerBox {inner: MaterialStruct<'mc>},
	BrownShulkerBox {inner: MaterialStruct<'mc>},
	GreenShulkerBox {inner: MaterialStruct<'mc>},
	RedShulkerBox {inner: MaterialStruct<'mc>},
	BlackShulkerBox {inner: MaterialStruct<'mc>},
	WhiteGlazedTerracotta {inner: MaterialStruct<'mc>},
	OrangeGlazedTerracotta {inner: MaterialStruct<'mc>},
	MagentaGlazedTerracotta {inner: MaterialStruct<'mc>},
	LightBlueGlazedTerracotta {inner: MaterialStruct<'mc>},
	YellowGlazedTerracotta {inner: MaterialStruct<'mc>},
	LimeGlazedTerracotta {inner: MaterialStruct<'mc>},
	PinkGlazedTerracotta {inner: MaterialStruct<'mc>},
	GrayGlazedTerracotta {inner: MaterialStruct<'mc>},
	LightGrayGlazedTerracotta {inner: MaterialStruct<'mc>},
	CyanGlazedTerracotta {inner: MaterialStruct<'mc>},
	PurpleGlazedTerracotta {inner: MaterialStruct<'mc>},
	BlueGlazedTerracotta {inner: MaterialStruct<'mc>},
	BrownGlazedTerracotta {inner: MaterialStruct<'mc>},
	GreenGlazedTerracotta {inner: MaterialStruct<'mc>},
	RedGlazedTerracotta {inner: MaterialStruct<'mc>},
	BlackGlazedTerracotta {inner: MaterialStruct<'mc>},
	WhiteConcrete {inner: MaterialStruct<'mc>},
	OrangeConcrete {inner: MaterialStruct<'mc>},
	MagentaConcrete {inner: MaterialStruct<'mc>},
	LightBlueConcrete {inner: MaterialStruct<'mc>},
	YellowConcrete {inner: MaterialStruct<'mc>},
	LimeConcrete {inner: MaterialStruct<'mc>},
	PinkConcrete {inner: MaterialStruct<'mc>},
	GrayConcrete {inner: MaterialStruct<'mc>},
	LightGrayConcrete {inner: MaterialStruct<'mc>},
	CyanConcrete {inner: MaterialStruct<'mc>},
	PurpleConcrete {inner: MaterialStruct<'mc>},
	BlueConcrete {inner: MaterialStruct<'mc>},
	BrownConcrete {inner: MaterialStruct<'mc>},
	GreenConcrete {inner: MaterialStruct<'mc>},
	RedConcrete {inner: MaterialStruct<'mc>},
	BlackConcrete {inner: MaterialStruct<'mc>},
	WhiteConcretePowder {inner: MaterialStruct<'mc>},
	OrangeConcretePowder {inner: MaterialStruct<'mc>},
	MagentaConcretePowder {inner: MaterialStruct<'mc>},
	LightBlueConcretePowder {inner: MaterialStruct<'mc>},
	YellowConcretePowder {inner: MaterialStruct<'mc>},
	LimeConcretePowder {inner: MaterialStruct<'mc>},
	PinkConcretePowder {inner: MaterialStruct<'mc>},
	GrayConcretePowder {inner: MaterialStruct<'mc>},
	LightGrayConcretePowder {inner: MaterialStruct<'mc>},
	CyanConcretePowder {inner: MaterialStruct<'mc>},
	PurpleConcretePowder {inner: MaterialStruct<'mc>},
	BlueConcretePowder {inner: MaterialStruct<'mc>},
	BrownConcretePowder {inner: MaterialStruct<'mc>},
	GreenConcretePowder {inner: MaterialStruct<'mc>},
	RedConcretePowder {inner: MaterialStruct<'mc>},
	BlackConcretePowder {inner: MaterialStruct<'mc>},
	TurtleEgg {inner: MaterialStruct<'mc>},
	SnifferEgg {inner: MaterialStruct<'mc>},
	DeadTubeCoralBlock {inner: MaterialStruct<'mc>},
	DeadBrainCoralBlock {inner: MaterialStruct<'mc>},
	DeadBubbleCoralBlock {inner: MaterialStruct<'mc>},
	DeadFireCoralBlock {inner: MaterialStruct<'mc>},
	DeadHornCoralBlock {inner: MaterialStruct<'mc>},
	TubeCoralBlock {inner: MaterialStruct<'mc>},
	BrainCoralBlock {inner: MaterialStruct<'mc>},
	BubbleCoralBlock {inner: MaterialStruct<'mc>},
	FireCoralBlock {inner: MaterialStruct<'mc>},
	HornCoralBlock {inner: MaterialStruct<'mc>},
	TubeCoral {inner: MaterialStruct<'mc>},
	BrainCoral {inner: MaterialStruct<'mc>},
	BubbleCoral {inner: MaterialStruct<'mc>},
	FireCoral {inner: MaterialStruct<'mc>},
	HornCoral {inner: MaterialStruct<'mc>},
	DeadBrainCoral {inner: MaterialStruct<'mc>},
	DeadBubbleCoral {inner: MaterialStruct<'mc>},
	DeadFireCoral {inner: MaterialStruct<'mc>},
	DeadHornCoral {inner: MaterialStruct<'mc>},
	DeadTubeCoral {inner: MaterialStruct<'mc>},
	TubeCoralFan {inner: MaterialStruct<'mc>},
	BrainCoralFan {inner: MaterialStruct<'mc>},
	BubbleCoralFan {inner: MaterialStruct<'mc>},
	FireCoralFan {inner: MaterialStruct<'mc>},
	HornCoralFan {inner: MaterialStruct<'mc>},
	DeadTubeCoralFan {inner: MaterialStruct<'mc>},
	DeadBrainCoralFan {inner: MaterialStruct<'mc>},
	DeadBubbleCoralFan {inner: MaterialStruct<'mc>},
	DeadFireCoralFan {inner: MaterialStruct<'mc>},
	DeadHornCoralFan {inner: MaterialStruct<'mc>},
	BlueIce {inner: MaterialStruct<'mc>},
	Conduit {inner: MaterialStruct<'mc>},
	PolishedGraniteStairs {inner: MaterialStruct<'mc>},
	SmoothRedSandstoneStairs {inner: MaterialStruct<'mc>},
	MossyStoneBrickStairs {inner: MaterialStruct<'mc>},
	PolishedDioriteStairs {inner: MaterialStruct<'mc>},
	MossyCobblestoneStairs {inner: MaterialStruct<'mc>},
	EndStoneBrickStairs {inner: MaterialStruct<'mc>},
	StoneStairs {inner: MaterialStruct<'mc>},
	SmoothSandstoneStairs {inner: MaterialStruct<'mc>},
	SmoothQuartzStairs {inner: MaterialStruct<'mc>},
	GraniteStairs {inner: MaterialStruct<'mc>},
	AndesiteStairs {inner: MaterialStruct<'mc>},
	RedNetherBrickStairs {inner: MaterialStruct<'mc>},
	PolishedAndesiteStairs {inner: MaterialStruct<'mc>},
	DioriteStairs {inner: MaterialStruct<'mc>},
	CobbledDeepslateStairs {inner: MaterialStruct<'mc>},
	PolishedDeepslateStairs {inner: MaterialStruct<'mc>},
	DeepslateBrickStairs {inner: MaterialStruct<'mc>},
	DeepslateTileStairs {inner: MaterialStruct<'mc>},
	PolishedGraniteSlab {inner: MaterialStruct<'mc>},
	SmoothRedSandstoneSlab {inner: MaterialStruct<'mc>},
	MossyStoneBrickSlab {inner: MaterialStruct<'mc>},
	PolishedDioriteSlab {inner: MaterialStruct<'mc>},
	MossyCobblestoneSlab {inner: MaterialStruct<'mc>},
	EndStoneBrickSlab {inner: MaterialStruct<'mc>},
	SmoothSandstoneSlab {inner: MaterialStruct<'mc>},
	SmoothQuartzSlab {inner: MaterialStruct<'mc>},
	GraniteSlab {inner: MaterialStruct<'mc>},
	AndesiteSlab {inner: MaterialStruct<'mc>},
	RedNetherBrickSlab {inner: MaterialStruct<'mc>},
	PolishedAndesiteSlab {inner: MaterialStruct<'mc>},
	DioriteSlab {inner: MaterialStruct<'mc>},
	CobbledDeepslateSlab {inner: MaterialStruct<'mc>},
	PolishedDeepslateSlab {inner: MaterialStruct<'mc>},
	DeepslateBrickSlab {inner: MaterialStruct<'mc>},
	DeepslateTileSlab {inner: MaterialStruct<'mc>},
	Scaffolding {inner: MaterialStruct<'mc>},
	Redstone {inner: MaterialStruct<'mc>},
	RedstoneTorch {inner: MaterialStruct<'mc>},
	RedstoneBlock {inner: MaterialStruct<'mc>},
	Repeater {inner: MaterialStruct<'mc>},
	Comparator {inner: MaterialStruct<'mc>},
	Piston {inner: MaterialStruct<'mc>},
	StickyPiston {inner: MaterialStruct<'mc>},
	SlimeBlock {inner: MaterialStruct<'mc>},
	HoneyBlock {inner: MaterialStruct<'mc>},
	Observer {inner: MaterialStruct<'mc>},
	Hopper {inner: MaterialStruct<'mc>},
	Dispenser {inner: MaterialStruct<'mc>},
	Dropper {inner: MaterialStruct<'mc>},
	Lectern {inner: MaterialStruct<'mc>},
	Target {inner: MaterialStruct<'mc>},
	Lever {inner: MaterialStruct<'mc>},
	LightningRod {inner: MaterialStruct<'mc>},
	DaylightDetector {inner: MaterialStruct<'mc>},
	SculkSensor {inner: MaterialStruct<'mc>},
	CalibratedSculkSensor {inner: MaterialStruct<'mc>},
	TripwireHook {inner: MaterialStruct<'mc>},
	TrappedChest {inner: MaterialStruct<'mc>},
	Tnt {inner: MaterialStruct<'mc>},
	RedstoneLamp {inner: MaterialStruct<'mc>},
	NoteBlock {inner: MaterialStruct<'mc>},
	StoneButton {inner: MaterialStruct<'mc>},
	PolishedBlackstoneButton {inner: MaterialStruct<'mc>},
	OakButton {inner: MaterialStruct<'mc>},
	SpruceButton {inner: MaterialStruct<'mc>},
	BirchButton {inner: MaterialStruct<'mc>},
	JungleButton {inner: MaterialStruct<'mc>},
	AcaciaButton {inner: MaterialStruct<'mc>},
	CherryButton {inner: MaterialStruct<'mc>},
	DarkOakButton {inner: MaterialStruct<'mc>},
	MangroveButton {inner: MaterialStruct<'mc>},
	BambooButton {inner: MaterialStruct<'mc>},
	CrimsonButton {inner: MaterialStruct<'mc>},
	WarpedButton {inner: MaterialStruct<'mc>},
	StonePressurePlate {inner: MaterialStruct<'mc>},
	PolishedBlackstonePressurePlate {inner: MaterialStruct<'mc>},
	LightWeightedPressurePlate {inner: MaterialStruct<'mc>},
	HeavyWeightedPressurePlate {inner: MaterialStruct<'mc>},
	OakPressurePlate {inner: MaterialStruct<'mc>},
	SprucePressurePlate {inner: MaterialStruct<'mc>},
	BirchPressurePlate {inner: MaterialStruct<'mc>},
	JunglePressurePlate {inner: MaterialStruct<'mc>},
	AcaciaPressurePlate {inner: MaterialStruct<'mc>},
	CherryPressurePlate {inner: MaterialStruct<'mc>},
	DarkOakPressurePlate {inner: MaterialStruct<'mc>},
	MangrovePressurePlate {inner: MaterialStruct<'mc>},
	BambooPressurePlate {inner: MaterialStruct<'mc>},
	CrimsonPressurePlate {inner: MaterialStruct<'mc>},
	WarpedPressurePlate {inner: MaterialStruct<'mc>},
	IronDoor {inner: MaterialStruct<'mc>},
	OakDoor {inner: MaterialStruct<'mc>},
	SpruceDoor {inner: MaterialStruct<'mc>},
	BirchDoor {inner: MaterialStruct<'mc>},
	JungleDoor {inner: MaterialStruct<'mc>},
	AcaciaDoor {inner: MaterialStruct<'mc>},
	CherryDoor {inner: MaterialStruct<'mc>},
	DarkOakDoor {inner: MaterialStruct<'mc>},
	MangroveDoor {inner: MaterialStruct<'mc>},
	BambooDoor {inner: MaterialStruct<'mc>},
	CrimsonDoor {inner: MaterialStruct<'mc>},
	WarpedDoor {inner: MaterialStruct<'mc>},
	CopperDoor {inner: MaterialStruct<'mc>},
	ExposedCopperDoor {inner: MaterialStruct<'mc>},
	WeatheredCopperDoor {inner: MaterialStruct<'mc>},
	OxidizedCopperDoor {inner: MaterialStruct<'mc>},
	WaxedCopperDoor {inner: MaterialStruct<'mc>},
	WaxedExposedCopperDoor {inner: MaterialStruct<'mc>},
	WaxedWeatheredCopperDoor {inner: MaterialStruct<'mc>},
	WaxedOxidizedCopperDoor {inner: MaterialStruct<'mc>},
	IronTrapdoor {inner: MaterialStruct<'mc>},
	OakTrapdoor {inner: MaterialStruct<'mc>},
	SpruceTrapdoor {inner: MaterialStruct<'mc>},
	BirchTrapdoor {inner: MaterialStruct<'mc>},
	JungleTrapdoor {inner: MaterialStruct<'mc>},
	AcaciaTrapdoor {inner: MaterialStruct<'mc>},
	CherryTrapdoor {inner: MaterialStruct<'mc>},
	DarkOakTrapdoor {inner: MaterialStruct<'mc>},
	MangroveTrapdoor {inner: MaterialStruct<'mc>},
	BambooTrapdoor {inner: MaterialStruct<'mc>},
	CrimsonTrapdoor {inner: MaterialStruct<'mc>},
	WarpedTrapdoor {inner: MaterialStruct<'mc>},
	CopperTrapdoor {inner: MaterialStruct<'mc>},
	ExposedCopperTrapdoor {inner: MaterialStruct<'mc>},
	WeatheredCopperTrapdoor {inner: MaterialStruct<'mc>},
	OxidizedCopperTrapdoor {inner: MaterialStruct<'mc>},
	WaxedCopperTrapdoor {inner: MaterialStruct<'mc>},
	WaxedExposedCopperTrapdoor {inner: MaterialStruct<'mc>},
	WaxedWeatheredCopperTrapdoor {inner: MaterialStruct<'mc>},
	WaxedOxidizedCopperTrapdoor {inner: MaterialStruct<'mc>},
	OakFenceGate {inner: MaterialStruct<'mc>},
	SpruceFenceGate {inner: MaterialStruct<'mc>},
	BirchFenceGate {inner: MaterialStruct<'mc>},
	JungleFenceGate {inner: MaterialStruct<'mc>},
	AcaciaFenceGate {inner: MaterialStruct<'mc>},
	CherryFenceGate {inner: MaterialStruct<'mc>},
	DarkOakFenceGate {inner: MaterialStruct<'mc>},
	MangroveFenceGate {inner: MaterialStruct<'mc>},
	BambooFenceGate {inner: MaterialStruct<'mc>},
	CrimsonFenceGate {inner: MaterialStruct<'mc>},
	WarpedFenceGate {inner: MaterialStruct<'mc>},
	PoweredRail {inner: MaterialStruct<'mc>},
	DetectorRail {inner: MaterialStruct<'mc>},
	Rail {inner: MaterialStruct<'mc>},
	ActivatorRail {inner: MaterialStruct<'mc>},
	Saddle {inner: MaterialStruct<'mc>},
	Minecart {inner: MaterialStruct<'mc>},
	ChestMinecart {inner: MaterialStruct<'mc>},
	FurnaceMinecart {inner: MaterialStruct<'mc>},
	TntMinecart {inner: MaterialStruct<'mc>},
	HopperMinecart {inner: MaterialStruct<'mc>},
	CarrotOnAStick {inner: MaterialStruct<'mc>},
	WarpedFungusOnAStick {inner: MaterialStruct<'mc>},
	Elytra {inner: MaterialStruct<'mc>},
	OakBoat {inner: MaterialStruct<'mc>},
	OakChestBoat {inner: MaterialStruct<'mc>},
	SpruceBoat {inner: MaterialStruct<'mc>},
	SpruceChestBoat {inner: MaterialStruct<'mc>},
	BirchBoat {inner: MaterialStruct<'mc>},
	BirchChestBoat {inner: MaterialStruct<'mc>},
	JungleBoat {inner: MaterialStruct<'mc>},
	JungleChestBoat {inner: MaterialStruct<'mc>},
	AcaciaBoat {inner: MaterialStruct<'mc>},
	AcaciaChestBoat {inner: MaterialStruct<'mc>},
	CherryBoat {inner: MaterialStruct<'mc>},
	CherryChestBoat {inner: MaterialStruct<'mc>},
	DarkOakBoat {inner: MaterialStruct<'mc>},
	DarkOakChestBoat {inner: MaterialStruct<'mc>},
	MangroveBoat {inner: MaterialStruct<'mc>},
	MangroveChestBoat {inner: MaterialStruct<'mc>},
	BambooRaft {inner: MaterialStruct<'mc>},
	BambooChestRaft {inner: MaterialStruct<'mc>},
	StructureBlock {inner: MaterialStruct<'mc>},
	Jigsaw {inner: MaterialStruct<'mc>},
	TurtleHelmet {inner: MaterialStruct<'mc>},
	Scute {inner: MaterialStruct<'mc>},
	FlintAndSteel {inner: MaterialStruct<'mc>},
	Apple {inner: MaterialStruct<'mc>},
	Bow {inner: MaterialStruct<'mc>},
	Arrow {inner: MaterialStruct<'mc>},
	Coal {inner: MaterialStruct<'mc>},
	Charcoal {inner: MaterialStruct<'mc>},
	Diamond {inner: MaterialStruct<'mc>},
	Emerald {inner: MaterialStruct<'mc>},
	LapisLazuli {inner: MaterialStruct<'mc>},
	Quartz {inner: MaterialStruct<'mc>},
	AmethystShard {inner: MaterialStruct<'mc>},
	RawIron {inner: MaterialStruct<'mc>},
	IronIngot {inner: MaterialStruct<'mc>},
	RawCopper {inner: MaterialStruct<'mc>},
	CopperIngot {inner: MaterialStruct<'mc>},
	RawGold {inner: MaterialStruct<'mc>},
	GoldIngot {inner: MaterialStruct<'mc>},
	NetheriteIngot {inner: MaterialStruct<'mc>},
	NetheriteScrap {inner: MaterialStruct<'mc>},
	WoodenSword {inner: MaterialStruct<'mc>},
	WoodenShovel {inner: MaterialStruct<'mc>},
	WoodenPickaxe {inner: MaterialStruct<'mc>},
	WoodenAxe {inner: MaterialStruct<'mc>},
	WoodenHoe {inner: MaterialStruct<'mc>},
	StoneSword {inner: MaterialStruct<'mc>},
	StoneShovel {inner: MaterialStruct<'mc>},
	StonePickaxe {inner: MaterialStruct<'mc>},
	StoneAxe {inner: MaterialStruct<'mc>},
	StoneHoe {inner: MaterialStruct<'mc>},
	GoldenSword {inner: MaterialStruct<'mc>},
	GoldenShovel {inner: MaterialStruct<'mc>},
	GoldenPickaxe {inner: MaterialStruct<'mc>},
	GoldenAxe {inner: MaterialStruct<'mc>},
	GoldenHoe {inner: MaterialStruct<'mc>},
	IronSword {inner: MaterialStruct<'mc>},
	IronShovel {inner: MaterialStruct<'mc>},
	IronPickaxe {inner: MaterialStruct<'mc>},
	IronAxe {inner: MaterialStruct<'mc>},
	IronHoe {inner: MaterialStruct<'mc>},
	DiamondSword {inner: MaterialStruct<'mc>},
	DiamondShovel {inner: MaterialStruct<'mc>},
	DiamondPickaxe {inner: MaterialStruct<'mc>},
	DiamondAxe {inner: MaterialStruct<'mc>},
	DiamondHoe {inner: MaterialStruct<'mc>},
	NetheriteSword {inner: MaterialStruct<'mc>},
	NetheriteShovel {inner: MaterialStruct<'mc>},
	NetheritePickaxe {inner: MaterialStruct<'mc>},
	NetheriteAxe {inner: MaterialStruct<'mc>},
	NetheriteHoe {inner: MaterialStruct<'mc>},
	Stick {inner: MaterialStruct<'mc>},
	Bowl {inner: MaterialStruct<'mc>},
	MushroomStew {inner: MaterialStruct<'mc>},
	String {inner: MaterialStruct<'mc>},
	Feather {inner: MaterialStruct<'mc>},
	Gunpowder {inner: MaterialStruct<'mc>},
	WheatSeeds {inner: MaterialStruct<'mc>},
	Wheat {inner: MaterialStruct<'mc>},
	Bread {inner: MaterialStruct<'mc>},
	LeatherHelmet {inner: MaterialStruct<'mc>},
	LeatherChestplate {inner: MaterialStruct<'mc>},
	LeatherLeggings {inner: MaterialStruct<'mc>},
	LeatherBoots {inner: MaterialStruct<'mc>},
	ChainmailHelmet {inner: MaterialStruct<'mc>},
	ChainmailChestplate {inner: MaterialStruct<'mc>},
	ChainmailLeggings {inner: MaterialStruct<'mc>},
	ChainmailBoots {inner: MaterialStruct<'mc>},
	IronHelmet {inner: MaterialStruct<'mc>},
	IronChestplate {inner: MaterialStruct<'mc>},
	IronLeggings {inner: MaterialStruct<'mc>},
	IronBoots {inner: MaterialStruct<'mc>},
	DiamondHelmet {inner: MaterialStruct<'mc>},
	DiamondChestplate {inner: MaterialStruct<'mc>},
	DiamondLeggings {inner: MaterialStruct<'mc>},
	DiamondBoots {inner: MaterialStruct<'mc>},
	GoldenHelmet {inner: MaterialStruct<'mc>},
	GoldenChestplate {inner: MaterialStruct<'mc>},
	GoldenLeggings {inner: MaterialStruct<'mc>},
	GoldenBoots {inner: MaterialStruct<'mc>},
	NetheriteHelmet {inner: MaterialStruct<'mc>},
	NetheriteChestplate {inner: MaterialStruct<'mc>},
	NetheriteLeggings {inner: MaterialStruct<'mc>},
	NetheriteBoots {inner: MaterialStruct<'mc>},
	Flint {inner: MaterialStruct<'mc>},
	Porkchop {inner: MaterialStruct<'mc>},
	CookedPorkchop {inner: MaterialStruct<'mc>},
	Painting {inner: MaterialStruct<'mc>},
	GoldenApple {inner: MaterialStruct<'mc>},
	EnchantedGoldenApple {inner: MaterialStruct<'mc>},
	OakSign {inner: MaterialStruct<'mc>},
	SpruceSign {inner: MaterialStruct<'mc>},
	BirchSign {inner: MaterialStruct<'mc>},
	JungleSign {inner: MaterialStruct<'mc>},
	AcaciaSign {inner: MaterialStruct<'mc>},
	CherrySign {inner: MaterialStruct<'mc>},
	DarkOakSign {inner: MaterialStruct<'mc>},
	MangroveSign {inner: MaterialStruct<'mc>},
	BambooSign {inner: MaterialStruct<'mc>},
	CrimsonSign {inner: MaterialStruct<'mc>},
	WarpedSign {inner: MaterialStruct<'mc>},
	OakHangingSign {inner: MaterialStruct<'mc>},
	SpruceHangingSign {inner: MaterialStruct<'mc>},
	BirchHangingSign {inner: MaterialStruct<'mc>},
	JungleHangingSign {inner: MaterialStruct<'mc>},
	AcaciaHangingSign {inner: MaterialStruct<'mc>},
	CherryHangingSign {inner: MaterialStruct<'mc>},
	DarkOakHangingSign {inner: MaterialStruct<'mc>},
	MangroveHangingSign {inner: MaterialStruct<'mc>},
	BambooHangingSign {inner: MaterialStruct<'mc>},
	CrimsonHangingSign {inner: MaterialStruct<'mc>},
	WarpedHangingSign {inner: MaterialStruct<'mc>},
	Bucket {inner: MaterialStruct<'mc>},
	WaterBucket {inner: MaterialStruct<'mc>},
	LavaBucket {inner: MaterialStruct<'mc>},
	PowderSnowBucket {inner: MaterialStruct<'mc>},
	Snowball {inner: MaterialStruct<'mc>},
	Leather {inner: MaterialStruct<'mc>},
	MilkBucket {inner: MaterialStruct<'mc>},
	PufferfishBucket {inner: MaterialStruct<'mc>},
	SalmonBucket {inner: MaterialStruct<'mc>},
	CodBucket {inner: MaterialStruct<'mc>},
	TropicalFishBucket {inner: MaterialStruct<'mc>},
	AxolotlBucket {inner: MaterialStruct<'mc>},
	TadpoleBucket {inner: MaterialStruct<'mc>},
	Brick {inner: MaterialStruct<'mc>},
	ClayBall {inner: MaterialStruct<'mc>},
	DriedKelpBlock {inner: MaterialStruct<'mc>},
	Paper {inner: MaterialStruct<'mc>},
	Book {inner: MaterialStruct<'mc>},
	SlimeBall {inner: MaterialStruct<'mc>},
	Egg {inner: MaterialStruct<'mc>},
	Compass {inner: MaterialStruct<'mc>},
	RecoveryCompass {inner: MaterialStruct<'mc>},
	Bundle {inner: MaterialStruct<'mc>},
	FishingRod {inner: MaterialStruct<'mc>},
	Clock {inner: MaterialStruct<'mc>},
	Spyglass {inner: MaterialStruct<'mc>},
	GlowstoneDust {inner: MaterialStruct<'mc>},
	Cod {inner: MaterialStruct<'mc>},
	Salmon {inner: MaterialStruct<'mc>},
	TropicalFish {inner: MaterialStruct<'mc>},
	Pufferfish {inner: MaterialStruct<'mc>},
	CookedCod {inner: MaterialStruct<'mc>},
	CookedSalmon {inner: MaterialStruct<'mc>},
	InkSac {inner: MaterialStruct<'mc>},
	GlowInkSac {inner: MaterialStruct<'mc>},
	CocoaBeans {inner: MaterialStruct<'mc>},
	WhiteDye {inner: MaterialStruct<'mc>},
	OrangeDye {inner: MaterialStruct<'mc>},
	MagentaDye {inner: MaterialStruct<'mc>},
	LightBlueDye {inner: MaterialStruct<'mc>},
	YellowDye {inner: MaterialStruct<'mc>},
	LimeDye {inner: MaterialStruct<'mc>},
	PinkDye {inner: MaterialStruct<'mc>},
	GrayDye {inner: MaterialStruct<'mc>},
	LightGrayDye {inner: MaterialStruct<'mc>},
	CyanDye {inner: MaterialStruct<'mc>},
	PurpleDye {inner: MaterialStruct<'mc>},
	BlueDye {inner: MaterialStruct<'mc>},
	BrownDye {inner: MaterialStruct<'mc>},
	GreenDye {inner: MaterialStruct<'mc>},
	RedDye {inner: MaterialStruct<'mc>},
	BlackDye {inner: MaterialStruct<'mc>},
	BoneMeal {inner: MaterialStruct<'mc>},
	Bone {inner: MaterialStruct<'mc>},
	Sugar {inner: MaterialStruct<'mc>},
	Cake {inner: MaterialStruct<'mc>},
	WhiteBed {inner: MaterialStruct<'mc>},
	OrangeBed {inner: MaterialStruct<'mc>},
	MagentaBed {inner: MaterialStruct<'mc>},
	LightBlueBed {inner: MaterialStruct<'mc>},
	YellowBed {inner: MaterialStruct<'mc>},
	LimeBed {inner: MaterialStruct<'mc>},
	PinkBed {inner: MaterialStruct<'mc>},
	GrayBed {inner: MaterialStruct<'mc>},
	LightGrayBed {inner: MaterialStruct<'mc>},
	CyanBed {inner: MaterialStruct<'mc>},
	PurpleBed {inner: MaterialStruct<'mc>},
	BlueBed {inner: MaterialStruct<'mc>},
	BrownBed {inner: MaterialStruct<'mc>},
	GreenBed {inner: MaterialStruct<'mc>},
	RedBed {inner: MaterialStruct<'mc>},
	BlackBed {inner: MaterialStruct<'mc>},
	Cookie {inner: MaterialStruct<'mc>},
	Crafter {inner: MaterialStruct<'mc>},
	FilledMap {inner: MaterialStruct<'mc>},
	Shears {inner: MaterialStruct<'mc>},
	MelonSlice {inner: MaterialStruct<'mc>},
	DriedKelp {inner: MaterialStruct<'mc>},
	PumpkinSeeds {inner: MaterialStruct<'mc>},
	MelonSeeds {inner: MaterialStruct<'mc>},
	Beef {inner: MaterialStruct<'mc>},
	CookedBeef {inner: MaterialStruct<'mc>},
	Chicken {inner: MaterialStruct<'mc>},
	CookedChicken {inner: MaterialStruct<'mc>},
	RottenFlesh {inner: MaterialStruct<'mc>},
	EnderPearl {inner: MaterialStruct<'mc>},
	BlazeRod {inner: MaterialStruct<'mc>},
	GhastTear {inner: MaterialStruct<'mc>},
	GoldNugget {inner: MaterialStruct<'mc>},
	NetherWart {inner: MaterialStruct<'mc>},
	Potion {inner: MaterialStruct<'mc>},
	GlassBottle {inner: MaterialStruct<'mc>},
	SpiderEye {inner: MaterialStruct<'mc>},
	FermentedSpiderEye {inner: MaterialStruct<'mc>},
	BlazePowder {inner: MaterialStruct<'mc>},
	MagmaCream {inner: MaterialStruct<'mc>},
	BrewingStand {inner: MaterialStruct<'mc>},
	Cauldron {inner: MaterialStruct<'mc>},
	EnderEye {inner: MaterialStruct<'mc>},
	GlisteringMelonSlice {inner: MaterialStruct<'mc>},
	AllaySpawnEgg {inner: MaterialStruct<'mc>},
	AxolotlSpawnEgg {inner: MaterialStruct<'mc>},
	BatSpawnEgg {inner: MaterialStruct<'mc>},
	BeeSpawnEgg {inner: MaterialStruct<'mc>},
	BlazeSpawnEgg {inner: MaterialStruct<'mc>},
	BreezeSpawnEgg {inner: MaterialStruct<'mc>},
	CatSpawnEgg {inner: MaterialStruct<'mc>},
	CamelSpawnEgg {inner: MaterialStruct<'mc>},
	CaveSpiderSpawnEgg {inner: MaterialStruct<'mc>},
	ChickenSpawnEgg {inner: MaterialStruct<'mc>},
	CodSpawnEgg {inner: MaterialStruct<'mc>},
	CowSpawnEgg {inner: MaterialStruct<'mc>},
	CreeperSpawnEgg {inner: MaterialStruct<'mc>},
	DolphinSpawnEgg {inner: MaterialStruct<'mc>},
	DonkeySpawnEgg {inner: MaterialStruct<'mc>},
	DrownedSpawnEgg {inner: MaterialStruct<'mc>},
	ElderGuardianSpawnEgg {inner: MaterialStruct<'mc>},
	EnderDragonSpawnEgg {inner: MaterialStruct<'mc>},
	EndermanSpawnEgg {inner: MaterialStruct<'mc>},
	EndermiteSpawnEgg {inner: MaterialStruct<'mc>},
	EvokerSpawnEgg {inner: MaterialStruct<'mc>},
	FoxSpawnEgg {inner: MaterialStruct<'mc>},
	FrogSpawnEgg {inner: MaterialStruct<'mc>},
	GhastSpawnEgg {inner: MaterialStruct<'mc>},
	GlowSquidSpawnEgg {inner: MaterialStruct<'mc>},
	GoatSpawnEgg {inner: MaterialStruct<'mc>},
	GuardianSpawnEgg {inner: MaterialStruct<'mc>},
	HoglinSpawnEgg {inner: MaterialStruct<'mc>},
	HorseSpawnEgg {inner: MaterialStruct<'mc>},
	HuskSpawnEgg {inner: MaterialStruct<'mc>},
	IronGolemSpawnEgg {inner: MaterialStruct<'mc>},
	LlamaSpawnEgg {inner: MaterialStruct<'mc>},
	MagmaCubeSpawnEgg {inner: MaterialStruct<'mc>},
	MooshroomSpawnEgg {inner: MaterialStruct<'mc>},
	MuleSpawnEgg {inner: MaterialStruct<'mc>},
	OcelotSpawnEgg {inner: MaterialStruct<'mc>},
	PandaSpawnEgg {inner: MaterialStruct<'mc>},
	ParrotSpawnEgg {inner: MaterialStruct<'mc>},
	PhantomSpawnEgg {inner: MaterialStruct<'mc>},
	PigSpawnEgg {inner: MaterialStruct<'mc>},
	PiglinSpawnEgg {inner: MaterialStruct<'mc>},
	PiglinBruteSpawnEgg {inner: MaterialStruct<'mc>},
	PillagerSpawnEgg {inner: MaterialStruct<'mc>},
	PolarBearSpawnEgg {inner: MaterialStruct<'mc>},
	PufferfishSpawnEgg {inner: MaterialStruct<'mc>},
	RabbitSpawnEgg {inner: MaterialStruct<'mc>},
	RavagerSpawnEgg {inner: MaterialStruct<'mc>},
	SalmonSpawnEgg {inner: MaterialStruct<'mc>},
	SheepSpawnEgg {inner: MaterialStruct<'mc>},
	ShulkerSpawnEgg {inner: MaterialStruct<'mc>},
	SilverfishSpawnEgg {inner: MaterialStruct<'mc>},
	SkeletonSpawnEgg {inner: MaterialStruct<'mc>},
	SkeletonHorseSpawnEgg {inner: MaterialStruct<'mc>},
	SlimeSpawnEgg {inner: MaterialStruct<'mc>},
	SnifferSpawnEgg {inner: MaterialStruct<'mc>},
	SnowGolemSpawnEgg {inner: MaterialStruct<'mc>},
	SpiderSpawnEgg {inner: MaterialStruct<'mc>},
	SquidSpawnEgg {inner: MaterialStruct<'mc>},
	StraySpawnEgg {inner: MaterialStruct<'mc>},
	StriderSpawnEgg {inner: MaterialStruct<'mc>},
	TadpoleSpawnEgg {inner: MaterialStruct<'mc>},
	TraderLlamaSpawnEgg {inner: MaterialStruct<'mc>},
	TropicalFishSpawnEgg {inner: MaterialStruct<'mc>},
	TurtleSpawnEgg {inner: MaterialStruct<'mc>},
	VexSpawnEgg {inner: MaterialStruct<'mc>},
	VillagerSpawnEgg {inner: MaterialStruct<'mc>},
	VindicatorSpawnEgg {inner: MaterialStruct<'mc>},
	WanderingTraderSpawnEgg {inner: MaterialStruct<'mc>},
	WardenSpawnEgg {inner: MaterialStruct<'mc>},
	WitchSpawnEgg {inner: MaterialStruct<'mc>},
	WitherSpawnEgg {inner: MaterialStruct<'mc>},
	WitherSkeletonSpawnEgg {inner: MaterialStruct<'mc>},
	WolfSpawnEgg {inner: MaterialStruct<'mc>},
	ZoglinSpawnEgg {inner: MaterialStruct<'mc>},
	ZombieSpawnEgg {inner: MaterialStruct<'mc>},
	ZombieHorseSpawnEgg {inner: MaterialStruct<'mc>},
	ZombieVillagerSpawnEgg {inner: MaterialStruct<'mc>},
	ZombifiedPiglinSpawnEgg {inner: MaterialStruct<'mc>},
	ExperienceBottle {inner: MaterialStruct<'mc>},
	FireCharge {inner: MaterialStruct<'mc>},
	WritableBook {inner: MaterialStruct<'mc>},
	WrittenBook {inner: MaterialStruct<'mc>},
	ItemFrame {inner: MaterialStruct<'mc>},
	GlowItemFrame {inner: MaterialStruct<'mc>},
	FlowerPot {inner: MaterialStruct<'mc>},
	Carrot {inner: MaterialStruct<'mc>},
	Potato {inner: MaterialStruct<'mc>},
	BakedPotato {inner: MaterialStruct<'mc>},
	PoisonousPotato {inner: MaterialStruct<'mc>},
	Map {inner: MaterialStruct<'mc>},
	GoldenCarrot {inner: MaterialStruct<'mc>},
	SkeletonSkull {inner: MaterialStruct<'mc>},
	WitherSkeletonSkull {inner: MaterialStruct<'mc>},
	PlayerHead {inner: MaterialStruct<'mc>},
	ZombieHead {inner: MaterialStruct<'mc>},
	CreeperHead {inner: MaterialStruct<'mc>},
	DragonHead {inner: MaterialStruct<'mc>},
	PiglinHead {inner: MaterialStruct<'mc>},
	NetherStar {inner: MaterialStruct<'mc>},
	PumpkinPie {inner: MaterialStruct<'mc>},
	FireworkRocket {inner: MaterialStruct<'mc>},
	FireworkStar {inner: MaterialStruct<'mc>},
	EnchantedBook {inner: MaterialStruct<'mc>},
	NetherBrick {inner: MaterialStruct<'mc>},
	PrismarineShard {inner: MaterialStruct<'mc>},
	PrismarineCrystals {inner: MaterialStruct<'mc>},
	Rabbit {inner: MaterialStruct<'mc>},
	CookedRabbit {inner: MaterialStruct<'mc>},
	RabbitStew {inner: MaterialStruct<'mc>},
	RabbitFoot {inner: MaterialStruct<'mc>},
	RabbitHide {inner: MaterialStruct<'mc>},
	ArmorStand {inner: MaterialStruct<'mc>},
	IronHorseArmor {inner: MaterialStruct<'mc>},
	GoldenHorseArmor {inner: MaterialStruct<'mc>},
	DiamondHorseArmor {inner: MaterialStruct<'mc>},
	LeatherHorseArmor {inner: MaterialStruct<'mc>},
	Lead {inner: MaterialStruct<'mc>},
	NameTag {inner: MaterialStruct<'mc>},
	CommandBlockMinecart {inner: MaterialStruct<'mc>},
	Mutton {inner: MaterialStruct<'mc>},
	CookedMutton {inner: MaterialStruct<'mc>},
	WhiteBanner {inner: MaterialStruct<'mc>},
	OrangeBanner {inner: MaterialStruct<'mc>},
	MagentaBanner {inner: MaterialStruct<'mc>},
	LightBlueBanner {inner: MaterialStruct<'mc>},
	YellowBanner {inner: MaterialStruct<'mc>},
	LimeBanner {inner: MaterialStruct<'mc>},
	PinkBanner {inner: MaterialStruct<'mc>},
	GrayBanner {inner: MaterialStruct<'mc>},
	LightGrayBanner {inner: MaterialStruct<'mc>},
	CyanBanner {inner: MaterialStruct<'mc>},
	PurpleBanner {inner: MaterialStruct<'mc>},
	BlueBanner {inner: MaterialStruct<'mc>},
	BrownBanner {inner: MaterialStruct<'mc>},
	GreenBanner {inner: MaterialStruct<'mc>},
	RedBanner {inner: MaterialStruct<'mc>},
	BlackBanner {inner: MaterialStruct<'mc>},
	EndCrystal {inner: MaterialStruct<'mc>},
	ChorusFruit {inner: MaterialStruct<'mc>},
	PoppedChorusFruit {inner: MaterialStruct<'mc>},
	TorchflowerSeeds {inner: MaterialStruct<'mc>},
	PitcherPod {inner: MaterialStruct<'mc>},
	Beetroot {inner: MaterialStruct<'mc>},
	BeetrootSeeds {inner: MaterialStruct<'mc>},
	BeetrootSoup {inner: MaterialStruct<'mc>},
	DragonBreath {inner: MaterialStruct<'mc>},
	SplashPotion {inner: MaterialStruct<'mc>},
	SpectralArrow {inner: MaterialStruct<'mc>},
	TippedArrow {inner: MaterialStruct<'mc>},
	LingeringPotion {inner: MaterialStruct<'mc>},
	Shield {inner: MaterialStruct<'mc>},
	TotemOfUndying {inner: MaterialStruct<'mc>},
	ShulkerShell {inner: MaterialStruct<'mc>},
	IronNugget {inner: MaterialStruct<'mc>},
	KnowledgeBook {inner: MaterialStruct<'mc>},
	DebugStick {inner: MaterialStruct<'mc>},
	MusicDisc13 {inner: MaterialStruct<'mc>},
	MusicDiscCat {inner: MaterialStruct<'mc>},
	MusicDiscBlocks {inner: MaterialStruct<'mc>},
	MusicDiscChirp {inner: MaterialStruct<'mc>},
	MusicDiscFar {inner: MaterialStruct<'mc>},
	MusicDiscMall {inner: MaterialStruct<'mc>},
	MusicDiscMellohi {inner: MaterialStruct<'mc>},
	MusicDiscStal {inner: MaterialStruct<'mc>},
	MusicDiscStrad {inner: MaterialStruct<'mc>},
	MusicDiscWard {inner: MaterialStruct<'mc>},
	MusicDisc11 {inner: MaterialStruct<'mc>},
	MusicDiscWait {inner: MaterialStruct<'mc>},
	MusicDiscOtherside {inner: MaterialStruct<'mc>},
	MusicDiscRelic {inner: MaterialStruct<'mc>},
	MusicDisc5 {inner: MaterialStruct<'mc>},
	MusicDiscPigstep {inner: MaterialStruct<'mc>},
	DiscFragment5 {inner: MaterialStruct<'mc>},
	Trident {inner: MaterialStruct<'mc>},
	PhantomMembrane {inner: MaterialStruct<'mc>},
	NautilusShell {inner: MaterialStruct<'mc>},
	HeartOfTheSea {inner: MaterialStruct<'mc>},
	Crossbow {inner: MaterialStruct<'mc>},
	SuspiciousStew {inner: MaterialStruct<'mc>},
	Loom {inner: MaterialStruct<'mc>},
	FlowerBannerPattern {inner: MaterialStruct<'mc>},
	CreeperBannerPattern {inner: MaterialStruct<'mc>},
	SkullBannerPattern {inner: MaterialStruct<'mc>},
	MojangBannerPattern {inner: MaterialStruct<'mc>},
	GlobeBannerPattern {inner: MaterialStruct<'mc>},
	PiglinBannerPattern {inner: MaterialStruct<'mc>},
	GoatHorn {inner: MaterialStruct<'mc>},
	Composter {inner: MaterialStruct<'mc>},
	Barrel {inner: MaterialStruct<'mc>},
	Smoker {inner: MaterialStruct<'mc>},
	BlastFurnace {inner: MaterialStruct<'mc>},
	CartographyTable {inner: MaterialStruct<'mc>},
	FletchingTable {inner: MaterialStruct<'mc>},
	Grindstone {inner: MaterialStruct<'mc>},
	SmithingTable {inner: MaterialStruct<'mc>},
	Stonecutter {inner: MaterialStruct<'mc>},
	Bell {inner: MaterialStruct<'mc>},
	Lantern {inner: MaterialStruct<'mc>},
	SoulLantern {inner: MaterialStruct<'mc>},
	SweetBerries {inner: MaterialStruct<'mc>},
	GlowBerries {inner: MaterialStruct<'mc>},
	Campfire {inner: MaterialStruct<'mc>},
	SoulCampfire {inner: MaterialStruct<'mc>},
	Shroomlight {inner: MaterialStruct<'mc>},
	Honeycomb {inner: MaterialStruct<'mc>},
	BeeNest {inner: MaterialStruct<'mc>},
	Beehive {inner: MaterialStruct<'mc>},
	HoneyBottle {inner: MaterialStruct<'mc>},
	HoneycombBlock {inner: MaterialStruct<'mc>},
	Lodestone {inner: MaterialStruct<'mc>},
	CryingObsidian {inner: MaterialStruct<'mc>},
	Blackstone {inner: MaterialStruct<'mc>},
	BlackstoneSlab {inner: MaterialStruct<'mc>},
	BlackstoneStairs {inner: MaterialStruct<'mc>},
	GildedBlackstone {inner: MaterialStruct<'mc>},
	PolishedBlackstone {inner: MaterialStruct<'mc>},
	PolishedBlackstoneSlab {inner: MaterialStruct<'mc>},
	PolishedBlackstoneStairs {inner: MaterialStruct<'mc>},
	ChiseledPolishedBlackstone {inner: MaterialStruct<'mc>},
	PolishedBlackstoneBricks {inner: MaterialStruct<'mc>},
	PolishedBlackstoneBrickSlab {inner: MaterialStruct<'mc>},
	PolishedBlackstoneBrickStairs {inner: MaterialStruct<'mc>},
	CrackedPolishedBlackstoneBricks {inner: MaterialStruct<'mc>},
	RespawnAnchor {inner: MaterialStruct<'mc>},
	Candle {inner: MaterialStruct<'mc>},
	WhiteCandle {inner: MaterialStruct<'mc>},
	OrangeCandle {inner: MaterialStruct<'mc>},
	MagentaCandle {inner: MaterialStruct<'mc>},
	LightBlueCandle {inner: MaterialStruct<'mc>},
	YellowCandle {inner: MaterialStruct<'mc>},
	LimeCandle {inner: MaterialStruct<'mc>},
	PinkCandle {inner: MaterialStruct<'mc>},
	GrayCandle {inner: MaterialStruct<'mc>},
	LightGrayCandle {inner: MaterialStruct<'mc>},
	CyanCandle {inner: MaterialStruct<'mc>},
	PurpleCandle {inner: MaterialStruct<'mc>},
	BlueCandle {inner: MaterialStruct<'mc>},
	BrownCandle {inner: MaterialStruct<'mc>},
	GreenCandle {inner: MaterialStruct<'mc>},
	RedCandle {inner: MaterialStruct<'mc>},
	BlackCandle {inner: MaterialStruct<'mc>},
	SmallAmethystBud {inner: MaterialStruct<'mc>},
	MediumAmethystBud {inner: MaterialStruct<'mc>},
	LargeAmethystBud {inner: MaterialStruct<'mc>},
	AmethystCluster {inner: MaterialStruct<'mc>},
	PointedDripstone {inner: MaterialStruct<'mc>},
	OchreFroglight {inner: MaterialStruct<'mc>},
	VerdantFroglight {inner: MaterialStruct<'mc>},
	PearlescentFroglight {inner: MaterialStruct<'mc>},
	Frogspawn {inner: MaterialStruct<'mc>},
	EchoShard {inner: MaterialStruct<'mc>},
	Brush {inner: MaterialStruct<'mc>},
	NetheriteUpgradeSmithingTemplate {inner: MaterialStruct<'mc>},
	SentryArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	DuneArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	CoastArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	WildArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	WardArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	EyeArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	VexArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	TideArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	SnoutArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	RibArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	SpireArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	WayfinderArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	ShaperArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	SilenceArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	RaiserArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	HostArmorTrimSmithingTemplate {inner: MaterialStruct<'mc>},
	AnglerPotterySherd {inner: MaterialStruct<'mc>},
	ArcherPotterySherd {inner: MaterialStruct<'mc>},
	ArmsUpPotterySherd {inner: MaterialStruct<'mc>},
	BladePotterySherd {inner: MaterialStruct<'mc>},
	BrewerPotterySherd {inner: MaterialStruct<'mc>},
	BurnPotterySherd {inner: MaterialStruct<'mc>},
	DangerPotterySherd {inner: MaterialStruct<'mc>},
	ExplorerPotterySherd {inner: MaterialStruct<'mc>},
	FriendPotterySherd {inner: MaterialStruct<'mc>},
	HeartPotterySherd {inner: MaterialStruct<'mc>},
	HeartbreakPotterySherd {inner: MaterialStruct<'mc>},
	HowlPotterySherd {inner: MaterialStruct<'mc>},
	MinerPotterySherd {inner: MaterialStruct<'mc>},
	MournerPotterySherd {inner: MaterialStruct<'mc>},
	PlentyPotterySherd {inner: MaterialStruct<'mc>},
	PrizePotterySherd {inner: MaterialStruct<'mc>},
	SheafPotterySherd {inner: MaterialStruct<'mc>},
	ShelterPotterySherd {inner: MaterialStruct<'mc>},
	SkullPotterySherd {inner: MaterialStruct<'mc>},
	SnortPotterySherd {inner: MaterialStruct<'mc>},
	CopperGrate {inner: MaterialStruct<'mc>},
	ExposedCopperGrate {inner: MaterialStruct<'mc>},
	WeatheredCopperGrate {inner: MaterialStruct<'mc>},
	OxidizedCopperGrate {inner: MaterialStruct<'mc>},
	WaxedCopperGrate {inner: MaterialStruct<'mc>},
	WaxedExposedCopperGrate {inner: MaterialStruct<'mc>},
	WaxedWeatheredCopperGrate {inner: MaterialStruct<'mc>},
	WaxedOxidizedCopperGrate {inner: MaterialStruct<'mc>},
	CopperBulb {inner: MaterialStruct<'mc>},
	ExposedCopperBulb {inner: MaterialStruct<'mc>},
	WeatheredCopperBulb {inner: MaterialStruct<'mc>},
	OxidizedCopperBulb {inner: MaterialStruct<'mc>},
	WaxedCopperBulb {inner: MaterialStruct<'mc>},
	WaxedExposedCopperBulb {inner: MaterialStruct<'mc>},
	WaxedWeatheredCopperBulb {inner: MaterialStruct<'mc>},
	WaxedOxidizedCopperBulb {inner: MaterialStruct<'mc>},
	TrialSpawner {inner: MaterialStruct<'mc>},
	TrialKey {inner: MaterialStruct<'mc>},
	Water {inner: MaterialStruct<'mc>},
	Lava {inner: MaterialStruct<'mc>},
	TallSeagrass {inner: MaterialStruct<'mc>},
	PistonHead {inner: MaterialStruct<'mc>},
	MovingPiston {inner: MaterialStruct<'mc>},
	WallTorch {inner: MaterialStruct<'mc>},
	Fire {inner: MaterialStruct<'mc>},
	SoulFire {inner: MaterialStruct<'mc>},
	RedstoneWire {inner: MaterialStruct<'mc>},
	OakWallSign {inner: MaterialStruct<'mc>},
	SpruceWallSign {inner: MaterialStruct<'mc>},
	BirchWallSign {inner: MaterialStruct<'mc>},
	AcaciaWallSign {inner: MaterialStruct<'mc>},
	CherryWallSign {inner: MaterialStruct<'mc>},
	JungleWallSign {inner: MaterialStruct<'mc>},
	DarkOakWallSign {inner: MaterialStruct<'mc>},
	MangroveWallSign {inner: MaterialStruct<'mc>},
	BambooWallSign {inner: MaterialStruct<'mc>},
	OakWallHangingSign {inner: MaterialStruct<'mc>},
	SpruceWallHangingSign {inner: MaterialStruct<'mc>},
	BirchWallHangingSign {inner: MaterialStruct<'mc>},
	AcaciaWallHangingSign {inner: MaterialStruct<'mc>},
	CherryWallHangingSign {inner: MaterialStruct<'mc>},
	JungleWallHangingSign {inner: MaterialStruct<'mc>},
	DarkOakWallHangingSign {inner: MaterialStruct<'mc>},
	MangroveWallHangingSign {inner: MaterialStruct<'mc>},
	CrimsonWallHangingSign {inner: MaterialStruct<'mc>},
	WarpedWallHangingSign {inner: MaterialStruct<'mc>},
	BambooWallHangingSign {inner: MaterialStruct<'mc>},
	RedstoneWallTorch {inner: MaterialStruct<'mc>},
	SoulWallTorch {inner: MaterialStruct<'mc>},
	NetherPortal {inner: MaterialStruct<'mc>},
	AttachedPumpkinStem {inner: MaterialStruct<'mc>},
	AttachedMelonStem {inner: MaterialStruct<'mc>},
	PumpkinStem {inner: MaterialStruct<'mc>},
	MelonStem {inner: MaterialStruct<'mc>},
	WaterCauldron {inner: MaterialStruct<'mc>},
	LavaCauldron {inner: MaterialStruct<'mc>},
	PowderSnowCauldron {inner: MaterialStruct<'mc>},
	EndPortal {inner: MaterialStruct<'mc>},
	Cocoa {inner: MaterialStruct<'mc>},
	Tripwire {inner: MaterialStruct<'mc>},
	PottedTorchflower {inner: MaterialStruct<'mc>},
	PottedOakSapling {inner: MaterialStruct<'mc>},
	PottedSpruceSapling {inner: MaterialStruct<'mc>},
	PottedBirchSapling {inner: MaterialStruct<'mc>},
	PottedJungleSapling {inner: MaterialStruct<'mc>},
	PottedAcaciaSapling {inner: MaterialStruct<'mc>},
	PottedCherrySapling {inner: MaterialStruct<'mc>},
	PottedDarkOakSapling {inner: MaterialStruct<'mc>},
	PottedMangrovePropagule {inner: MaterialStruct<'mc>},
	PottedFern {inner: MaterialStruct<'mc>},
	PottedDandelion {inner: MaterialStruct<'mc>},
	PottedPoppy {inner: MaterialStruct<'mc>},
	PottedBlueOrchid {inner: MaterialStruct<'mc>},
	PottedAllium {inner: MaterialStruct<'mc>},
	PottedAzureBluet {inner: MaterialStruct<'mc>},
	PottedRedTulip {inner: MaterialStruct<'mc>},
	PottedOrangeTulip {inner: MaterialStruct<'mc>},
	PottedWhiteTulip {inner: MaterialStruct<'mc>},
	PottedPinkTulip {inner: MaterialStruct<'mc>},
	PottedOxeyeDaisy {inner: MaterialStruct<'mc>},
	PottedCornflower {inner: MaterialStruct<'mc>},
	PottedLilyOfTheValley {inner: MaterialStruct<'mc>},
	PottedWitherRose {inner: MaterialStruct<'mc>},
	PottedRedMushroom {inner: MaterialStruct<'mc>},
	PottedBrownMushroom {inner: MaterialStruct<'mc>},
	PottedDeadBush {inner: MaterialStruct<'mc>},
	PottedCactus {inner: MaterialStruct<'mc>},
	Carrots {inner: MaterialStruct<'mc>},
	Potatoes {inner: MaterialStruct<'mc>},
	SkeletonWallSkull {inner: MaterialStruct<'mc>},
	WitherSkeletonWallSkull {inner: MaterialStruct<'mc>},
	ZombieWallHead {inner: MaterialStruct<'mc>},
	PlayerWallHead {inner: MaterialStruct<'mc>},
	CreeperWallHead {inner: MaterialStruct<'mc>},
	DragonWallHead {inner: MaterialStruct<'mc>},
	PiglinWallHead {inner: MaterialStruct<'mc>},
	WhiteWallBanner {inner: MaterialStruct<'mc>},
	OrangeWallBanner {inner: MaterialStruct<'mc>},
	MagentaWallBanner {inner: MaterialStruct<'mc>},
	LightBlueWallBanner {inner: MaterialStruct<'mc>},
	YellowWallBanner {inner: MaterialStruct<'mc>},
	LimeWallBanner {inner: MaterialStruct<'mc>},
	PinkWallBanner {inner: MaterialStruct<'mc>},
	GrayWallBanner {inner: MaterialStruct<'mc>},
	LightGrayWallBanner {inner: MaterialStruct<'mc>},
	CyanWallBanner {inner: MaterialStruct<'mc>},
	PurpleWallBanner {inner: MaterialStruct<'mc>},
	BlueWallBanner {inner: MaterialStruct<'mc>},
	BrownWallBanner {inner: MaterialStruct<'mc>},
	GreenWallBanner {inner: MaterialStruct<'mc>},
	RedWallBanner {inner: MaterialStruct<'mc>},
	BlackWallBanner {inner: MaterialStruct<'mc>},
	TorchflowerCrop {inner: MaterialStruct<'mc>},
	PitcherCrop {inner: MaterialStruct<'mc>},
	Beetroots {inner: MaterialStruct<'mc>},
	EndGateway {inner: MaterialStruct<'mc>},
	FrostedIce {inner: MaterialStruct<'mc>},
	KelpPlant {inner: MaterialStruct<'mc>},
	DeadTubeCoralWallFan {inner: MaterialStruct<'mc>},
	DeadBrainCoralWallFan {inner: MaterialStruct<'mc>},
	DeadBubbleCoralWallFan {inner: MaterialStruct<'mc>},
	DeadFireCoralWallFan {inner: MaterialStruct<'mc>},
	DeadHornCoralWallFan {inner: MaterialStruct<'mc>},
	TubeCoralWallFan {inner: MaterialStruct<'mc>},
	BrainCoralWallFan {inner: MaterialStruct<'mc>},
	BubbleCoralWallFan {inner: MaterialStruct<'mc>},
	FireCoralWallFan {inner: MaterialStruct<'mc>},
	HornCoralWallFan {inner: MaterialStruct<'mc>},
	BambooSapling {inner: MaterialStruct<'mc>},
	PottedBamboo {inner: MaterialStruct<'mc>},
	VoidAir {inner: MaterialStruct<'mc>},
	CaveAir {inner: MaterialStruct<'mc>},
	BubbleColumn {inner: MaterialStruct<'mc>},
	SweetBerryBush {inner: MaterialStruct<'mc>},
	WeepingVinesPlant {inner: MaterialStruct<'mc>},
	TwistingVinesPlant {inner: MaterialStruct<'mc>},
	CrimsonWallSign {inner: MaterialStruct<'mc>},
	WarpedWallSign {inner: MaterialStruct<'mc>},
	PottedCrimsonFungus {inner: MaterialStruct<'mc>},
	PottedWarpedFungus {inner: MaterialStruct<'mc>},
	PottedCrimsonRoots {inner: MaterialStruct<'mc>},
	PottedWarpedRoots {inner: MaterialStruct<'mc>},
	CandleCake {inner: MaterialStruct<'mc>},
	WhiteCandleCake {inner: MaterialStruct<'mc>},
	OrangeCandleCake {inner: MaterialStruct<'mc>},
	MagentaCandleCake {inner: MaterialStruct<'mc>},
	LightBlueCandleCake {inner: MaterialStruct<'mc>},
	YellowCandleCake {inner: MaterialStruct<'mc>},
	LimeCandleCake {inner: MaterialStruct<'mc>},
	PinkCandleCake {inner: MaterialStruct<'mc>},
	GrayCandleCake {inner: MaterialStruct<'mc>},
	LightGrayCandleCake {inner: MaterialStruct<'mc>},
	CyanCandleCake {inner: MaterialStruct<'mc>},
	PurpleCandleCake {inner: MaterialStruct<'mc>},
	BlueCandleCake {inner: MaterialStruct<'mc>},
	BrownCandleCake {inner: MaterialStruct<'mc>},
	GreenCandleCake {inner: MaterialStruct<'mc>},
	RedCandleCake {inner: MaterialStruct<'mc>},
	BlackCandleCake {inner: MaterialStruct<'mc>},
	PowderSnow {inner: MaterialStruct<'mc>},
	CaveVines {inner: MaterialStruct<'mc>},
	CaveVinesPlant {inner: MaterialStruct<'mc>},
	BigDripleafStem {inner: MaterialStruct<'mc>},
	PottedAzaleaBush {inner: MaterialStruct<'mc>},
	PottedFloweringAzaleaBush {inner: MaterialStruct<'mc>},
	LegacyAir {inner: MaterialStruct<'mc>},
	LegacyStone {inner: MaterialStruct<'mc>},
	LegacyGrass {inner: MaterialStruct<'mc>},
	LegacyDirt {inner: MaterialStruct<'mc>},
	LegacyCobblestone {inner: MaterialStruct<'mc>},
	LegacyWood {inner: MaterialStruct<'mc>},
	LegacySapling {inner: MaterialStruct<'mc>},
	LegacyBedrock {inner: MaterialStruct<'mc>},
	LegacyWater {inner: MaterialStruct<'mc>},
	LegacyStationaryWater {inner: MaterialStruct<'mc>},
	LegacyLava {inner: MaterialStruct<'mc>},
	LegacyStationaryLava {inner: MaterialStruct<'mc>},
	LegacySand {inner: MaterialStruct<'mc>},
	LegacyGravel {inner: MaterialStruct<'mc>},
	LegacyGoldOre {inner: MaterialStruct<'mc>},
	LegacyIronOre {inner: MaterialStruct<'mc>},
	LegacyCoalOre {inner: MaterialStruct<'mc>},
	LegacyLog {inner: MaterialStruct<'mc>},
	LegacyLeaves {inner: MaterialStruct<'mc>},
	LegacySponge {inner: MaterialStruct<'mc>},
	LegacyGlass {inner: MaterialStruct<'mc>},
	LegacyLapisOre {inner: MaterialStruct<'mc>},
	LegacyLapisBlock {inner: MaterialStruct<'mc>},
	LegacyDispenser {inner: MaterialStruct<'mc>},
	LegacySandstone {inner: MaterialStruct<'mc>},
	LegacyNoteBlock {inner: MaterialStruct<'mc>},
	LegacyBedBlock {inner: MaterialStruct<'mc>},
	LegacyPoweredRail {inner: MaterialStruct<'mc>},
	LegacyDetectorRail {inner: MaterialStruct<'mc>},
	LegacyPistonStickyBase {inner: MaterialStruct<'mc>},
	LegacyWeb {inner: MaterialStruct<'mc>},
	LegacyLongGrass {inner: MaterialStruct<'mc>},
	LegacyDeadBush {inner: MaterialStruct<'mc>},
	LegacyPistonBase {inner: MaterialStruct<'mc>},
	LegacyPistonExtension {inner: MaterialStruct<'mc>},
	LegacyWool {inner: MaterialStruct<'mc>},
	LegacyPistonMovingPiece {inner: MaterialStruct<'mc>},
	LegacyYellowFlower {inner: MaterialStruct<'mc>},
	LegacyRedRose {inner: MaterialStruct<'mc>},
	LegacyBrownMushroom {inner: MaterialStruct<'mc>},
	LegacyRedMushroom {inner: MaterialStruct<'mc>},
	LegacyGoldBlock {inner: MaterialStruct<'mc>},
	LegacyIronBlock {inner: MaterialStruct<'mc>},
	LegacyDoubleStep {inner: MaterialStruct<'mc>},
	LegacyStep {inner: MaterialStruct<'mc>},
	LegacyBrick {inner: MaterialStruct<'mc>},
	LegacyTnt {inner: MaterialStruct<'mc>},
	LegacyBookshelf {inner: MaterialStruct<'mc>},
	LegacyMossyCobblestone {inner: MaterialStruct<'mc>},
	LegacyObsidian {inner: MaterialStruct<'mc>},
	LegacyTorch {inner: MaterialStruct<'mc>},
	LegacyFire {inner: MaterialStruct<'mc>},
	LegacyMobSpawner {inner: MaterialStruct<'mc>},
	LegacyWoodStairs {inner: MaterialStruct<'mc>},
	LegacyChest {inner: MaterialStruct<'mc>},
	LegacyRedstoneWire {inner: MaterialStruct<'mc>},
	LegacyDiamondOre {inner: MaterialStruct<'mc>},
	LegacyDiamondBlock {inner: MaterialStruct<'mc>},
	LegacyWorkbench {inner: MaterialStruct<'mc>},
	LegacyCrops {inner: MaterialStruct<'mc>},
	LegacySoil {inner: MaterialStruct<'mc>},
	LegacyFurnace {inner: MaterialStruct<'mc>},
	LegacyBurningFurnace {inner: MaterialStruct<'mc>},
	LegacySignPost {inner: MaterialStruct<'mc>},
	LegacyWoodenDoor {inner: MaterialStruct<'mc>},
	LegacyLadder {inner: MaterialStruct<'mc>},
	LegacyRails {inner: MaterialStruct<'mc>},
	LegacyCobblestoneStairs {inner: MaterialStruct<'mc>},
	LegacyWallSign {inner: MaterialStruct<'mc>},
	LegacyLever {inner: MaterialStruct<'mc>},
	LegacyStonePlate {inner: MaterialStruct<'mc>},
	LegacyIronDoorBlock {inner: MaterialStruct<'mc>},
	LegacyWoodPlate {inner: MaterialStruct<'mc>},
	LegacyRedstoneOre {inner: MaterialStruct<'mc>},
	LegacyGlowingRedstoneOre {inner: MaterialStruct<'mc>},
	LegacyRedstoneTorchOff {inner: MaterialStruct<'mc>},
	LegacyRedstoneTorchOn {inner: MaterialStruct<'mc>},
	LegacyStoneButton {inner: MaterialStruct<'mc>},
	LegacySnow {inner: MaterialStruct<'mc>},
	LegacyIce {inner: MaterialStruct<'mc>},
	LegacySnowBlock {inner: MaterialStruct<'mc>},
	LegacyCactus {inner: MaterialStruct<'mc>},
	LegacyClay {inner: MaterialStruct<'mc>},
	LegacySugarCaneBlock {inner: MaterialStruct<'mc>},
	LegacyJukebox {inner: MaterialStruct<'mc>},
	LegacyFence {inner: MaterialStruct<'mc>},
	LegacyPumpkin {inner: MaterialStruct<'mc>},
	LegacyNetherrack {inner: MaterialStruct<'mc>},
	LegacySoulSand {inner: MaterialStruct<'mc>},
	LegacyGlowstone {inner: MaterialStruct<'mc>},
	LegacyPortal {inner: MaterialStruct<'mc>},
	LegacyJackOLantern {inner: MaterialStruct<'mc>},
	LegacyCakeBlock {inner: MaterialStruct<'mc>},
	LegacyDiodeBlockOff {inner: MaterialStruct<'mc>},
	LegacyDiodeBlockOn {inner: MaterialStruct<'mc>},
	LegacyStainedGlass {inner: MaterialStruct<'mc>},
	LegacyTrapDoor {inner: MaterialStruct<'mc>},
	LegacyMonsterEggs {inner: MaterialStruct<'mc>},
	LegacySmoothBrick {inner: MaterialStruct<'mc>},
	LegacyHugeMushroom1 {inner: MaterialStruct<'mc>},
	LegacyHugeMushroom2 {inner: MaterialStruct<'mc>},
	LegacyIronFence {inner: MaterialStruct<'mc>},
	LegacyThinGlass {inner: MaterialStruct<'mc>},
	LegacyMelonBlock {inner: MaterialStruct<'mc>},
	LegacyPumpkinStem {inner: MaterialStruct<'mc>},
	LegacyMelonStem {inner: MaterialStruct<'mc>},
	LegacyVine {inner: MaterialStruct<'mc>},
	LegacyFenceGate {inner: MaterialStruct<'mc>},
	LegacyBrickStairs {inner: MaterialStruct<'mc>},
	LegacySmoothStairs {inner: MaterialStruct<'mc>},
	LegacyMycel {inner: MaterialStruct<'mc>},
	LegacyWaterLily {inner: MaterialStruct<'mc>},
	LegacyNetherBrick {inner: MaterialStruct<'mc>},
	LegacyNetherFence {inner: MaterialStruct<'mc>},
	LegacyNetherBrickStairs {inner: MaterialStruct<'mc>},
	LegacyNetherWarts {inner: MaterialStruct<'mc>},
	LegacyEnchantmentTable {inner: MaterialStruct<'mc>},
	LegacyBrewingStand {inner: MaterialStruct<'mc>},
	LegacyCauldron {inner: MaterialStruct<'mc>},
	LegacyEnderPortal {inner: MaterialStruct<'mc>},
	LegacyEnderPortalFrame {inner: MaterialStruct<'mc>},
	LegacyEnderStone {inner: MaterialStruct<'mc>},
	LegacyDragonEgg {inner: MaterialStruct<'mc>},
	LegacyRedstoneLampOff {inner: MaterialStruct<'mc>},
	LegacyRedstoneLampOn {inner: MaterialStruct<'mc>},
	LegacyWoodDoubleStep {inner: MaterialStruct<'mc>},
	LegacyWoodStep {inner: MaterialStruct<'mc>},
	LegacyCocoa {inner: MaterialStruct<'mc>},
	LegacySandstoneStairs {inner: MaterialStruct<'mc>},
	LegacyEmeraldOre {inner: MaterialStruct<'mc>},
	LegacyEnderChest {inner: MaterialStruct<'mc>},
	LegacyTripwireHook {inner: MaterialStruct<'mc>},
	LegacyTripwire {inner: MaterialStruct<'mc>},
	LegacyEmeraldBlock {inner: MaterialStruct<'mc>},
	LegacySpruceWoodStairs {inner: MaterialStruct<'mc>},
	LegacyBirchWoodStairs {inner: MaterialStruct<'mc>},
	LegacyJungleWoodStairs {inner: MaterialStruct<'mc>},
	LegacyCommand {inner: MaterialStruct<'mc>},
	LegacyBeacon {inner: MaterialStruct<'mc>},
	LegacyCobbleWall {inner: MaterialStruct<'mc>},
	LegacyFlowerPot {inner: MaterialStruct<'mc>},
	LegacyCarrot {inner: MaterialStruct<'mc>},
	LegacyPotato {inner: MaterialStruct<'mc>},
	LegacyWoodButton {inner: MaterialStruct<'mc>},
	LegacySkull {inner: MaterialStruct<'mc>},
	LegacyAnvil {inner: MaterialStruct<'mc>},
	LegacyTrappedChest {inner: MaterialStruct<'mc>},
	LegacyGoldPlate {inner: MaterialStruct<'mc>},
	LegacyIronPlate {inner: MaterialStruct<'mc>},
	LegacyRedstoneComparatorOff {inner: MaterialStruct<'mc>},
	LegacyRedstoneComparatorOn {inner: MaterialStruct<'mc>},
	LegacyDaylightDetector {inner: MaterialStruct<'mc>},
	LegacyRedstoneBlock {inner: MaterialStruct<'mc>},
	LegacyQuartzOre {inner: MaterialStruct<'mc>},
	LegacyHopper {inner: MaterialStruct<'mc>},
	LegacyQuartzBlock {inner: MaterialStruct<'mc>},
	LegacyQuartzStairs {inner: MaterialStruct<'mc>},
	LegacyActivatorRail {inner: MaterialStruct<'mc>},
	LegacyDropper {inner: MaterialStruct<'mc>},
	LegacyStainedClay {inner: MaterialStruct<'mc>},
	LegacyStainedGlassPane {inner: MaterialStruct<'mc>},
	LegacyLeaves2 {inner: MaterialStruct<'mc>},
	LegacyLog2 {inner: MaterialStruct<'mc>},
	LegacyAcaciaStairs {inner: MaterialStruct<'mc>},
	LegacyDarkOakStairs {inner: MaterialStruct<'mc>},
	LegacySlimeBlock {inner: MaterialStruct<'mc>},
	LegacyBarrier {inner: MaterialStruct<'mc>},
	LegacyIronTrapdoor {inner: MaterialStruct<'mc>},
	LegacyPrismarine {inner: MaterialStruct<'mc>},
	LegacySeaLantern {inner: MaterialStruct<'mc>},
	LegacyHayBlock {inner: MaterialStruct<'mc>},
	LegacyCarpet {inner: MaterialStruct<'mc>},
	LegacyHardClay {inner: MaterialStruct<'mc>},
	LegacyCoalBlock {inner: MaterialStruct<'mc>},
	LegacyPackedIce {inner: MaterialStruct<'mc>},
	LegacyDoublePlant {inner: MaterialStruct<'mc>},
	LegacyStandingBanner {inner: MaterialStruct<'mc>},
	LegacyWallBanner {inner: MaterialStruct<'mc>},
	LegacyDaylightDetectorInverted {inner: MaterialStruct<'mc>},
	LegacyRedSandstone {inner: MaterialStruct<'mc>},
	LegacyRedSandstoneStairs {inner: MaterialStruct<'mc>},
	LegacyDoubleStoneSlab2 {inner: MaterialStruct<'mc>},
	LegacyStoneSlab2 {inner: MaterialStruct<'mc>},
	LegacySpruceFenceGate {inner: MaterialStruct<'mc>},
	LegacyBirchFenceGate {inner: MaterialStruct<'mc>},
	LegacyJungleFenceGate {inner: MaterialStruct<'mc>},
	LegacyDarkOakFenceGate {inner: MaterialStruct<'mc>},
	LegacyAcaciaFenceGate {inner: MaterialStruct<'mc>},
	LegacySpruceFence {inner: MaterialStruct<'mc>},
	LegacyBirchFence {inner: MaterialStruct<'mc>},
	LegacyJungleFence {inner: MaterialStruct<'mc>},
	LegacyDarkOakFence {inner: MaterialStruct<'mc>},
	LegacyAcaciaFence {inner: MaterialStruct<'mc>},
	LegacySpruceDoor {inner: MaterialStruct<'mc>},
	LegacyBirchDoor {inner: MaterialStruct<'mc>},
	LegacyJungleDoor {inner: MaterialStruct<'mc>},
	LegacyAcaciaDoor {inner: MaterialStruct<'mc>},
	LegacyDarkOakDoor {inner: MaterialStruct<'mc>},
	LegacyEndRod {inner: MaterialStruct<'mc>},
	LegacyChorusPlant {inner: MaterialStruct<'mc>},
	LegacyChorusFlower {inner: MaterialStruct<'mc>},
	LegacyPurpurBlock {inner: MaterialStruct<'mc>},
	LegacyPurpurPillar {inner: MaterialStruct<'mc>},
	LegacyPurpurStairs {inner: MaterialStruct<'mc>},
	LegacyPurpurDoubleSlab {inner: MaterialStruct<'mc>},
	LegacyPurpurSlab {inner: MaterialStruct<'mc>},
	LegacyEndBricks {inner: MaterialStruct<'mc>},
	LegacyBeetrootBlock {inner: MaterialStruct<'mc>},
	LegacyGrassPath {inner: MaterialStruct<'mc>},
	LegacyEndGateway {inner: MaterialStruct<'mc>},
	LegacyCommandRepeating {inner: MaterialStruct<'mc>},
	LegacyCommandChain {inner: MaterialStruct<'mc>},
	LegacyFrostedIce {inner: MaterialStruct<'mc>},
	LegacyMagma {inner: MaterialStruct<'mc>},
	LegacyNetherWartBlock {inner: MaterialStruct<'mc>},
	LegacyRedNetherBrick {inner: MaterialStruct<'mc>},
	LegacyBoneBlock {inner: MaterialStruct<'mc>},
	LegacyStructureVoid {inner: MaterialStruct<'mc>},
	LegacyObserver {inner: MaterialStruct<'mc>},
	LegacyWhiteShulkerBox {inner: MaterialStruct<'mc>},
	LegacyOrangeShulkerBox {inner: MaterialStruct<'mc>},
	LegacyMagentaShulkerBox {inner: MaterialStruct<'mc>},
	LegacyLightBlueShulkerBox {inner: MaterialStruct<'mc>},
	LegacyYellowShulkerBox {inner: MaterialStruct<'mc>},
	LegacyLimeShulkerBox {inner: MaterialStruct<'mc>},
	LegacyPinkShulkerBox {inner: MaterialStruct<'mc>},
	LegacyGrayShulkerBox {inner: MaterialStruct<'mc>},
	LegacySilverShulkerBox {inner: MaterialStruct<'mc>},
	LegacyCyanShulkerBox {inner: MaterialStruct<'mc>},
	LegacyPurpleShulkerBox {inner: MaterialStruct<'mc>},
	LegacyBlueShulkerBox {inner: MaterialStruct<'mc>},
	LegacyBrownShulkerBox {inner: MaterialStruct<'mc>},
	LegacyGreenShulkerBox {inner: MaterialStruct<'mc>},
	LegacyRedShulkerBox {inner: MaterialStruct<'mc>},
	LegacyBlackShulkerBox {inner: MaterialStruct<'mc>},
	LegacyWhiteGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyOrangeGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyMagentaGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyLightBlueGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyYellowGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyLimeGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyPinkGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyGrayGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacySilverGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyCyanGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyPurpleGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyBlueGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyBrownGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyGreenGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyRedGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyBlackGlazedTerracotta {inner: MaterialStruct<'mc>},
	LegacyConcrete {inner: MaterialStruct<'mc>},
	LegacyConcretePowder {inner: MaterialStruct<'mc>},
	LegacyStructureBlock {inner: MaterialStruct<'mc>},
	LegacyIronSpade {inner: MaterialStruct<'mc>},
	LegacyIronPickaxe {inner: MaterialStruct<'mc>},
	LegacyIronAxe {inner: MaterialStruct<'mc>},
	LegacyFlintAndSteel {inner: MaterialStruct<'mc>},
	LegacyApple {inner: MaterialStruct<'mc>},
	LegacyBow {inner: MaterialStruct<'mc>},
	LegacyArrow {inner: MaterialStruct<'mc>},
	LegacyCoal {inner: MaterialStruct<'mc>},
	LegacyDiamond {inner: MaterialStruct<'mc>},
	LegacyIronIngot {inner: MaterialStruct<'mc>},
	LegacyGoldIngot {inner: MaterialStruct<'mc>},
	LegacyIronSword {inner: MaterialStruct<'mc>},
	LegacyWoodSword {inner: MaterialStruct<'mc>},
	LegacyWoodSpade {inner: MaterialStruct<'mc>},
	LegacyWoodPickaxe {inner: MaterialStruct<'mc>},
	LegacyWoodAxe {inner: MaterialStruct<'mc>},
	LegacyStoneSword {inner: MaterialStruct<'mc>},
	LegacyStoneSpade {inner: MaterialStruct<'mc>},
	LegacyStonePickaxe {inner: MaterialStruct<'mc>},
	LegacyStoneAxe {inner: MaterialStruct<'mc>},
	LegacyDiamondSword {inner: MaterialStruct<'mc>},
	LegacyDiamondSpade {inner: MaterialStruct<'mc>},
	LegacyDiamondPickaxe {inner: MaterialStruct<'mc>},
	LegacyDiamondAxe {inner: MaterialStruct<'mc>},
	LegacyStick {inner: MaterialStruct<'mc>},
	LegacyBowl {inner: MaterialStruct<'mc>},
	LegacyMushroomSoup {inner: MaterialStruct<'mc>},
	LegacyGoldSword {inner: MaterialStruct<'mc>},
	LegacyGoldSpade {inner: MaterialStruct<'mc>},
	LegacyGoldPickaxe {inner: MaterialStruct<'mc>},
	LegacyGoldAxe {inner: MaterialStruct<'mc>},
	LegacyString {inner: MaterialStruct<'mc>},
	LegacyFeather {inner: MaterialStruct<'mc>},
	LegacySulphur {inner: MaterialStruct<'mc>},
	LegacyWoodHoe {inner: MaterialStruct<'mc>},
	LegacyStoneHoe {inner: MaterialStruct<'mc>},
	LegacyIronHoe {inner: MaterialStruct<'mc>},
	LegacyDiamondHoe {inner: MaterialStruct<'mc>},
	LegacyGoldHoe {inner: MaterialStruct<'mc>},
	LegacySeeds {inner: MaterialStruct<'mc>},
	LegacyWheat {inner: MaterialStruct<'mc>},
	LegacyBread {inner: MaterialStruct<'mc>},
	LegacyLeatherHelmet {inner: MaterialStruct<'mc>},
	LegacyLeatherChestplate {inner: MaterialStruct<'mc>},
	LegacyLeatherLeggings {inner: MaterialStruct<'mc>},
	LegacyLeatherBoots {inner: MaterialStruct<'mc>},
	LegacyChainmailHelmet {inner: MaterialStruct<'mc>},
	LegacyChainmailChestplate {inner: MaterialStruct<'mc>},
	LegacyChainmailLeggings {inner: MaterialStruct<'mc>},
	LegacyChainmailBoots {inner: MaterialStruct<'mc>},
	LegacyIronHelmet {inner: MaterialStruct<'mc>},
	LegacyIronChestplate {inner: MaterialStruct<'mc>},
	LegacyIronLeggings {inner: MaterialStruct<'mc>},
	LegacyIronBoots {inner: MaterialStruct<'mc>},
	LegacyDiamondHelmet {inner: MaterialStruct<'mc>},
	LegacyDiamondChestplate {inner: MaterialStruct<'mc>},
	LegacyDiamondLeggings {inner: MaterialStruct<'mc>},
	LegacyDiamondBoots {inner: MaterialStruct<'mc>},
	LegacyGoldHelmet {inner: MaterialStruct<'mc>},
	LegacyGoldChestplate {inner: MaterialStruct<'mc>},
	LegacyGoldLeggings {inner: MaterialStruct<'mc>},
	LegacyGoldBoots {inner: MaterialStruct<'mc>},
	LegacyFlint {inner: MaterialStruct<'mc>},
	LegacyPork {inner: MaterialStruct<'mc>},
	LegacyGrilledPork {inner: MaterialStruct<'mc>},
	LegacyPainting {inner: MaterialStruct<'mc>},
	LegacyGoldenApple {inner: MaterialStruct<'mc>},
	LegacySign {inner: MaterialStruct<'mc>},
	LegacyWoodDoor {inner: MaterialStruct<'mc>},
	LegacyBucket {inner: MaterialStruct<'mc>},
	LegacyWaterBucket {inner: MaterialStruct<'mc>},
	LegacyLavaBucket {inner: MaterialStruct<'mc>},
	LegacyMinecart {inner: MaterialStruct<'mc>},
	LegacySaddle {inner: MaterialStruct<'mc>},
	LegacyIronDoor {inner: MaterialStruct<'mc>},
	LegacyRedstone {inner: MaterialStruct<'mc>},
	LegacySnowBall {inner: MaterialStruct<'mc>},
	LegacyBoat {inner: MaterialStruct<'mc>},
	LegacyLeather {inner: MaterialStruct<'mc>},
	LegacyMilkBucket {inner: MaterialStruct<'mc>},
	LegacyClayBrick {inner: MaterialStruct<'mc>},
	LegacyClayBall {inner: MaterialStruct<'mc>},
	LegacySugarCane {inner: MaterialStruct<'mc>},
	LegacyPaper {inner: MaterialStruct<'mc>},
	LegacyBook {inner: MaterialStruct<'mc>},
	LegacySlimeBall {inner: MaterialStruct<'mc>},
	LegacyStorageMinecart {inner: MaterialStruct<'mc>},
	LegacyPoweredMinecart {inner: MaterialStruct<'mc>},
	LegacyEgg {inner: MaterialStruct<'mc>},
	LegacyCompass {inner: MaterialStruct<'mc>},
	LegacyFishingRod {inner: MaterialStruct<'mc>},
	LegacyWatch {inner: MaterialStruct<'mc>},
	LegacyGlowstoneDust {inner: MaterialStruct<'mc>},
	LegacyRawFish {inner: MaterialStruct<'mc>},
	LegacyCookedFish {inner: MaterialStruct<'mc>},
	LegacyInkSack {inner: MaterialStruct<'mc>},
	LegacyBone {inner: MaterialStruct<'mc>},
	LegacySugar {inner: MaterialStruct<'mc>},
	LegacyCake {inner: MaterialStruct<'mc>},
	LegacyBed {inner: MaterialStruct<'mc>},
	LegacyDiode {inner: MaterialStruct<'mc>},
	LegacyCookie {inner: MaterialStruct<'mc>},
	LegacyMap {inner: MaterialStruct<'mc>},
	LegacyShears {inner: MaterialStruct<'mc>},
	LegacyMelon {inner: MaterialStruct<'mc>},
	LegacyPumpkinSeeds {inner: MaterialStruct<'mc>},
	LegacyMelonSeeds {inner: MaterialStruct<'mc>},
	LegacyRawBeef {inner: MaterialStruct<'mc>},
	LegacyCookedBeef {inner: MaterialStruct<'mc>},
	LegacyRawChicken {inner: MaterialStruct<'mc>},
	LegacyCookedChicken {inner: MaterialStruct<'mc>},
	LegacyRottenFlesh {inner: MaterialStruct<'mc>},
	LegacyEnderPearl {inner: MaterialStruct<'mc>},
	LegacyBlazeRod {inner: MaterialStruct<'mc>},
	LegacyGhastTear {inner: MaterialStruct<'mc>},
	LegacyGoldNugget {inner: MaterialStruct<'mc>},
	LegacyNetherStalk {inner: MaterialStruct<'mc>},
	LegacyPotion {inner: MaterialStruct<'mc>},
	LegacyGlassBottle {inner: MaterialStruct<'mc>},
	LegacySpiderEye {inner: MaterialStruct<'mc>},
	LegacyFermentedSpiderEye {inner: MaterialStruct<'mc>},
	LegacyBlazePowder {inner: MaterialStruct<'mc>},
	LegacyMagmaCream {inner: MaterialStruct<'mc>},
	LegacyBrewingStandItem {inner: MaterialStruct<'mc>},
	LegacyCauldronItem {inner: MaterialStruct<'mc>},
	LegacyEyeOfEnder {inner: MaterialStruct<'mc>},
	LegacySpeckledMelon {inner: MaterialStruct<'mc>},
	LegacyMonsterEgg {inner: MaterialStruct<'mc>},
	LegacyExpBottle {inner: MaterialStruct<'mc>},
	LegacyFireball {inner: MaterialStruct<'mc>},
	LegacyBookAndQuill {inner: MaterialStruct<'mc>},
	LegacyWrittenBook {inner: MaterialStruct<'mc>},
	LegacyEmerald {inner: MaterialStruct<'mc>},
	LegacyItemFrame {inner: MaterialStruct<'mc>},
	LegacyFlowerPotItem {inner: MaterialStruct<'mc>},
	LegacyCarrotItem {inner: MaterialStruct<'mc>},
	LegacyPotatoItem {inner: MaterialStruct<'mc>},
	LegacyBakedPotato {inner: MaterialStruct<'mc>},
	LegacyPoisonousPotato {inner: MaterialStruct<'mc>},
	LegacyEmptyMap {inner: MaterialStruct<'mc>},
	LegacyGoldenCarrot {inner: MaterialStruct<'mc>},
	LegacySkullItem {inner: MaterialStruct<'mc>},
	LegacyCarrotStick {inner: MaterialStruct<'mc>},
	LegacyNetherStar {inner: MaterialStruct<'mc>},
	LegacyPumpkinPie {inner: MaterialStruct<'mc>},
	LegacyFirework {inner: MaterialStruct<'mc>},
	LegacyFireworkCharge {inner: MaterialStruct<'mc>},
	LegacyEnchantedBook {inner: MaterialStruct<'mc>},
	LegacyRedstoneComparator {inner: MaterialStruct<'mc>},
	LegacyNetherBrickItem {inner: MaterialStruct<'mc>},
	LegacyQuartz {inner: MaterialStruct<'mc>},
	LegacyExplosiveMinecart {inner: MaterialStruct<'mc>},
	LegacyHopperMinecart {inner: MaterialStruct<'mc>},
	LegacyPrismarineShard {inner: MaterialStruct<'mc>},
	LegacyPrismarineCrystals {inner: MaterialStruct<'mc>},
	LegacyRabbit {inner: MaterialStruct<'mc>},
	LegacyCookedRabbit {inner: MaterialStruct<'mc>},
	LegacyRabbitStew {inner: MaterialStruct<'mc>},
	LegacyRabbitFoot {inner: MaterialStruct<'mc>},
	LegacyRabbitHide {inner: MaterialStruct<'mc>},
	LegacyArmorStand {inner: MaterialStruct<'mc>},
	LegacyIronBarding {inner: MaterialStruct<'mc>},
	LegacyGoldBarding {inner: MaterialStruct<'mc>},
	LegacyDiamondBarding {inner: MaterialStruct<'mc>},
	LegacyLeash {inner: MaterialStruct<'mc>},
	LegacyNameTag {inner: MaterialStruct<'mc>},
	LegacyCommandMinecart {inner: MaterialStruct<'mc>},
	LegacyMutton {inner: MaterialStruct<'mc>},
	LegacyCookedMutton {inner: MaterialStruct<'mc>},
	LegacyBanner {inner: MaterialStruct<'mc>},
	LegacyEndCrystal {inner: MaterialStruct<'mc>},
	LegacySpruceDoorItem {inner: MaterialStruct<'mc>},
	LegacyBirchDoorItem {inner: MaterialStruct<'mc>},
	LegacyJungleDoorItem {inner: MaterialStruct<'mc>},
	LegacyAcaciaDoorItem {inner: MaterialStruct<'mc>},
	LegacyDarkOakDoorItem {inner: MaterialStruct<'mc>},
	LegacyChorusFruit {inner: MaterialStruct<'mc>},
	LegacyChorusFruitPopped {inner: MaterialStruct<'mc>},
	LegacyBeetroot {inner: MaterialStruct<'mc>},
	LegacyBeetrootSeeds {inner: MaterialStruct<'mc>},
	LegacyBeetrootSoup {inner: MaterialStruct<'mc>},
	LegacyDragonsBreath {inner: MaterialStruct<'mc>},
	LegacySplashPotion {inner: MaterialStruct<'mc>},
	LegacySpectralArrow {inner: MaterialStruct<'mc>},
	LegacyTippedArrow {inner: MaterialStruct<'mc>},
	LegacyLingeringPotion {inner: MaterialStruct<'mc>},
	LegacyShield {inner: MaterialStruct<'mc>},
	LegacyElytra {inner: MaterialStruct<'mc>},
	LegacyBoatSpruce {inner: MaterialStruct<'mc>},
	LegacyBoatBirch {inner: MaterialStruct<'mc>},
	LegacyBoatJungle {inner: MaterialStruct<'mc>},
	LegacyBoatAcacia {inner: MaterialStruct<'mc>},
	LegacyBoatDarkOak {inner: MaterialStruct<'mc>},
	LegacyTotem {inner: MaterialStruct<'mc>},
	LegacyShulkerShell {inner: MaterialStruct<'mc>},
	LegacyIronNugget {inner: MaterialStruct<'mc>},
	LegacyKnowledgeBook {inner: MaterialStruct<'mc>},
	LegacyGoldRecord {inner: MaterialStruct<'mc>},
	LegacyGreenRecord {inner: MaterialStruct<'mc>},
	LegacyRecord3 {inner: MaterialStruct<'mc>},
	LegacyRecord4 {inner: MaterialStruct<'mc>},
	LegacyRecord5 {inner: MaterialStruct<'mc>},
	LegacyRecord6 {inner: MaterialStruct<'mc>},
	LegacyRecord7 {inner: MaterialStruct<'mc>},
	LegacyRecord8 {inner: MaterialStruct<'mc>},
	LegacyRecord9 {inner: MaterialStruct<'mc>},
	LegacyRecord10 {inner: MaterialStruct<'mc>},
	LegacyRecord11 {inner: MaterialStruct<'mc>},
	LegacyRecord12 {inner: MaterialStruct<'mc>},
}
impl<'mc> std::fmt::Display for Material<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           Material::Air { .. } => f.write_str("AIR"),
           Material::Stone { .. } => f.write_str("STONE"),
           Material::Granite { .. } => f.write_str("GRANITE"),
           Material::PolishedGranite { .. } => f.write_str("POLISHED_GRANITE"),
           Material::Diorite { .. } => f.write_str("DIORITE"),
           Material::PolishedDiorite { .. } => f.write_str("POLISHED_DIORITE"),
           Material::Andesite { .. } => f.write_str("ANDESITE"),
           Material::PolishedAndesite { .. } => f.write_str("POLISHED_ANDESITE"),
           Material::Deepslate { .. } => f.write_str("DEEPSLATE"),
           Material::CobbledDeepslate { .. } => f.write_str("COBBLED_DEEPSLATE"),
           Material::PolishedDeepslate { .. } => f.write_str("POLISHED_DEEPSLATE"),
           Material::Calcite { .. } => f.write_str("CALCITE"),
           Material::Tuff { .. } => f.write_str("TUFF"),
           Material::TuffSlab { .. } => f.write_str("TUFF_SLAB"),
           Material::TuffStairs { .. } => f.write_str("TUFF_STAIRS"),
           Material::TuffWall { .. } => f.write_str("TUFF_WALL"),
           Material::ChiseledTuff { .. } => f.write_str("CHISELED_TUFF"),
           Material::PolishedTuff { .. } => f.write_str("POLISHED_TUFF"),
           Material::PolishedTuffSlab { .. } => f.write_str("POLISHED_TUFF_SLAB"),
           Material::PolishedTuffStairs { .. } => f.write_str("POLISHED_TUFF_STAIRS"),
           Material::PolishedTuffWall { .. } => f.write_str("POLISHED_TUFF_WALL"),
           Material::TuffBricks { .. } => f.write_str("TUFF_BRICKS"),
           Material::TuffBrickSlab { .. } => f.write_str("TUFF_BRICK_SLAB"),
           Material::TuffBrickStairs { .. } => f.write_str("TUFF_BRICK_STAIRS"),
           Material::TuffBrickWall { .. } => f.write_str("TUFF_BRICK_WALL"),
           Material::ChiseledTuffBricks { .. } => f.write_str("CHISELED_TUFF_BRICKS"),
           Material::DripstoneBlock { .. } => f.write_str("DRIPSTONE_BLOCK"),
           Material::GrassBlock { .. } => f.write_str("GRASS_BLOCK"),
           Material::Dirt { .. } => f.write_str("DIRT"),
           Material::CoarseDirt { .. } => f.write_str("COARSE_DIRT"),
           Material::Podzol { .. } => f.write_str("PODZOL"),
           Material::RootedDirt { .. } => f.write_str("ROOTED_DIRT"),
           Material::Mud { .. } => f.write_str("MUD"),
           Material::CrimsonNylium { .. } => f.write_str("CRIMSON_NYLIUM"),
           Material::WarpedNylium { .. } => f.write_str("WARPED_NYLIUM"),
           Material::Cobblestone { .. } => f.write_str("COBBLESTONE"),
           Material::OakPlanks { .. } => f.write_str("OAK_PLANKS"),
           Material::SprucePlanks { .. } => f.write_str("SPRUCE_PLANKS"),
           Material::BirchPlanks { .. } => f.write_str("BIRCH_PLANKS"),
           Material::JunglePlanks { .. } => f.write_str("JUNGLE_PLANKS"),
           Material::AcaciaPlanks { .. } => f.write_str("ACACIA_PLANKS"),
           Material::CherryPlanks { .. } => f.write_str("CHERRY_PLANKS"),
           Material::DarkOakPlanks { .. } => f.write_str("DARK_OAK_PLANKS"),
           Material::MangrovePlanks { .. } => f.write_str("MANGROVE_PLANKS"),
           Material::BambooPlanks { .. } => f.write_str("BAMBOO_PLANKS"),
           Material::CrimsonPlanks { .. } => f.write_str("CRIMSON_PLANKS"),
           Material::WarpedPlanks { .. } => f.write_str("WARPED_PLANKS"),
           Material::BambooMosaic { .. } => f.write_str("BAMBOO_MOSAIC"),
           Material::OakSapling { .. } => f.write_str("OAK_SAPLING"),
           Material::SpruceSapling { .. } => f.write_str("SPRUCE_SAPLING"),
           Material::BirchSapling { .. } => f.write_str("BIRCH_SAPLING"),
           Material::JungleSapling { .. } => f.write_str("JUNGLE_SAPLING"),
           Material::AcaciaSapling { .. } => f.write_str("ACACIA_SAPLING"),
           Material::CherrySapling { .. } => f.write_str("CHERRY_SAPLING"),
           Material::DarkOakSapling { .. } => f.write_str("DARK_OAK_SAPLING"),
           Material::MangrovePropagule { .. } => f.write_str("MANGROVE_PROPAGULE"),
           Material::Bedrock { .. } => f.write_str("BEDROCK"),
           Material::Sand { .. } => f.write_str("SAND"),
           Material::SuspiciousSand { .. } => f.write_str("SUSPICIOUS_SAND"),
           Material::SuspiciousGravel { .. } => f.write_str("SUSPICIOUS_GRAVEL"),
           Material::RedSand { .. } => f.write_str("RED_SAND"),
           Material::Gravel { .. } => f.write_str("GRAVEL"),
           Material::CoalOre { .. } => f.write_str("COAL_ORE"),
           Material::DeepslateCoalOre { .. } => f.write_str("DEEPSLATE_COAL_ORE"),
           Material::IronOre { .. } => f.write_str("IRON_ORE"),
           Material::DeepslateIronOre { .. } => f.write_str("DEEPSLATE_IRON_ORE"),
           Material::CopperOre { .. } => f.write_str("COPPER_ORE"),
           Material::DeepslateCopperOre { .. } => f.write_str("DEEPSLATE_COPPER_ORE"),
           Material::GoldOre { .. } => f.write_str("GOLD_ORE"),
           Material::DeepslateGoldOre { .. } => f.write_str("DEEPSLATE_GOLD_ORE"),
           Material::RedstoneOre { .. } => f.write_str("REDSTONE_ORE"),
           Material::DeepslateRedstoneOre { .. } => f.write_str("DEEPSLATE_REDSTONE_ORE"),
           Material::EmeraldOre { .. } => f.write_str("EMERALD_ORE"),
           Material::DeepslateEmeraldOre { .. } => f.write_str("DEEPSLATE_EMERALD_ORE"),
           Material::LapisOre { .. } => f.write_str("LAPIS_ORE"),
           Material::DeepslateLapisOre { .. } => f.write_str("DEEPSLATE_LAPIS_ORE"),
           Material::DiamondOre { .. } => f.write_str("DIAMOND_ORE"),
           Material::DeepslateDiamondOre { .. } => f.write_str("DEEPSLATE_DIAMOND_ORE"),
           Material::NetherGoldOre { .. } => f.write_str("NETHER_GOLD_ORE"),
           Material::NetherQuartzOre { .. } => f.write_str("NETHER_QUARTZ_ORE"),
           Material::AncientDebris { .. } => f.write_str("ANCIENT_DEBRIS"),
           Material::CoalBlock { .. } => f.write_str("COAL_BLOCK"),
           Material::RawIronBlock { .. } => f.write_str("RAW_IRON_BLOCK"),
           Material::RawCopperBlock { .. } => f.write_str("RAW_COPPER_BLOCK"),
           Material::RawGoldBlock { .. } => f.write_str("RAW_GOLD_BLOCK"),
           Material::AmethystBlock { .. } => f.write_str("AMETHYST_BLOCK"),
           Material::BuddingAmethyst { .. } => f.write_str("BUDDING_AMETHYST"),
           Material::IronBlock { .. } => f.write_str("IRON_BLOCK"),
           Material::CopperBlock { .. } => f.write_str("COPPER_BLOCK"),
           Material::GoldBlock { .. } => f.write_str("GOLD_BLOCK"),
           Material::DiamondBlock { .. } => f.write_str("DIAMOND_BLOCK"),
           Material::NetheriteBlock { .. } => f.write_str("NETHERITE_BLOCK"),
           Material::ExposedCopper { .. } => f.write_str("EXPOSED_COPPER"),
           Material::WeatheredCopper { .. } => f.write_str("WEATHERED_COPPER"),
           Material::OxidizedCopper { .. } => f.write_str("OXIDIZED_COPPER"),
           Material::ChiseledCopper { .. } => f.write_str("CHISELED_COPPER"),
           Material::ExposedChiseledCopper { .. } => f.write_str("EXPOSED_CHISELED_COPPER"),
           Material::WeatheredChiseledCopper { .. } => f.write_str("WEATHERED_CHISELED_COPPER"),
           Material::OxidizedChiseledCopper { .. } => f.write_str("OXIDIZED_CHISELED_COPPER"),
           Material::CutCopper { .. } => f.write_str("CUT_COPPER"),
           Material::ExposedCutCopper { .. } => f.write_str("EXPOSED_CUT_COPPER"),
           Material::WeatheredCutCopper { .. } => f.write_str("WEATHERED_CUT_COPPER"),
           Material::OxidizedCutCopper { .. } => f.write_str("OXIDIZED_CUT_COPPER"),
           Material::CutCopperStairs { .. } => f.write_str("CUT_COPPER_STAIRS"),
           Material::ExposedCutCopperStairs { .. } => f.write_str("EXPOSED_CUT_COPPER_STAIRS"),
           Material::WeatheredCutCopperStairs { .. } => f.write_str("WEATHERED_CUT_COPPER_STAIRS"),
           Material::OxidizedCutCopperStairs { .. } => f.write_str("OXIDIZED_CUT_COPPER_STAIRS"),
           Material::CutCopperSlab { .. } => f.write_str("CUT_COPPER_SLAB"),
           Material::ExposedCutCopperSlab { .. } => f.write_str("EXPOSED_CUT_COPPER_SLAB"),
           Material::WeatheredCutCopperSlab { .. } => f.write_str("WEATHERED_CUT_COPPER_SLAB"),
           Material::OxidizedCutCopperSlab { .. } => f.write_str("OXIDIZED_CUT_COPPER_SLAB"),
           Material::WaxedCopperBlock { .. } => f.write_str("WAXED_COPPER_BLOCK"),
           Material::WaxedExposedCopper { .. } => f.write_str("WAXED_EXPOSED_COPPER"),
           Material::WaxedWeatheredCopper { .. } => f.write_str("WAXED_WEATHERED_COPPER"),
           Material::WaxedOxidizedCopper { .. } => f.write_str("WAXED_OXIDIZED_COPPER"),
           Material::WaxedChiseledCopper { .. } => f.write_str("WAXED_CHISELED_COPPER"),
           Material::WaxedExposedChiseledCopper { .. } => f.write_str("WAXED_EXPOSED_CHISELED_COPPER"),
           Material::WaxedWeatheredChiseledCopper { .. } => f.write_str("WAXED_WEATHERED_CHISELED_COPPER"),
           Material::WaxedOxidizedChiseledCopper { .. } => f.write_str("WAXED_OXIDIZED_CHISELED_COPPER"),
           Material::WaxedCutCopper { .. } => f.write_str("WAXED_CUT_COPPER"),
           Material::WaxedExposedCutCopper { .. } => f.write_str("WAXED_EXPOSED_CUT_COPPER"),
           Material::WaxedWeatheredCutCopper { .. } => f.write_str("WAXED_WEATHERED_CUT_COPPER"),
           Material::WaxedOxidizedCutCopper { .. } => f.write_str("WAXED_OXIDIZED_CUT_COPPER"),
           Material::WaxedCutCopperStairs { .. } => f.write_str("WAXED_CUT_COPPER_STAIRS"),
           Material::WaxedExposedCutCopperStairs { .. } => f.write_str("WAXED_EXPOSED_CUT_COPPER_STAIRS"),
           Material::WaxedWeatheredCutCopperStairs { .. } => f.write_str("WAXED_WEATHERED_CUT_COPPER_STAIRS"),
           Material::WaxedOxidizedCutCopperStairs { .. } => f.write_str("WAXED_OXIDIZED_CUT_COPPER_STAIRS"),
           Material::WaxedCutCopperSlab { .. } => f.write_str("WAXED_CUT_COPPER_SLAB"),
           Material::WaxedExposedCutCopperSlab { .. } => f.write_str("WAXED_EXPOSED_CUT_COPPER_SLAB"),
           Material::WaxedWeatheredCutCopperSlab { .. } => f.write_str("WAXED_WEATHERED_CUT_COPPER_SLAB"),
           Material::WaxedOxidizedCutCopperSlab { .. } => f.write_str("WAXED_OXIDIZED_CUT_COPPER_SLAB"),
           Material::OakLog { .. } => f.write_str("OAK_LOG"),
           Material::SpruceLog { .. } => f.write_str("SPRUCE_LOG"),
           Material::BirchLog { .. } => f.write_str("BIRCH_LOG"),
           Material::JungleLog { .. } => f.write_str("JUNGLE_LOG"),
           Material::AcaciaLog { .. } => f.write_str("ACACIA_LOG"),
           Material::CherryLog { .. } => f.write_str("CHERRY_LOG"),
           Material::DarkOakLog { .. } => f.write_str("DARK_OAK_LOG"),
           Material::MangroveLog { .. } => f.write_str("MANGROVE_LOG"),
           Material::MangroveRoots { .. } => f.write_str("MANGROVE_ROOTS"),
           Material::MuddyMangroveRoots { .. } => f.write_str("MUDDY_MANGROVE_ROOTS"),
           Material::CrimsonStem { .. } => f.write_str("CRIMSON_STEM"),
           Material::WarpedStem { .. } => f.write_str("WARPED_STEM"),
           Material::BambooBlock { .. } => f.write_str("BAMBOO_BLOCK"),
           Material::StrippedOakLog { .. } => f.write_str("STRIPPED_OAK_LOG"),
           Material::StrippedSpruceLog { .. } => f.write_str("STRIPPED_SPRUCE_LOG"),
           Material::StrippedBirchLog { .. } => f.write_str("STRIPPED_BIRCH_LOG"),
           Material::StrippedJungleLog { .. } => f.write_str("STRIPPED_JUNGLE_LOG"),
           Material::StrippedAcaciaLog { .. } => f.write_str("STRIPPED_ACACIA_LOG"),
           Material::StrippedCherryLog { .. } => f.write_str("STRIPPED_CHERRY_LOG"),
           Material::StrippedDarkOakLog { .. } => f.write_str("STRIPPED_DARK_OAK_LOG"),
           Material::StrippedMangroveLog { .. } => f.write_str("STRIPPED_MANGROVE_LOG"),
           Material::StrippedCrimsonStem { .. } => f.write_str("STRIPPED_CRIMSON_STEM"),
           Material::StrippedWarpedStem { .. } => f.write_str("STRIPPED_WARPED_STEM"),
           Material::StrippedOakWood { .. } => f.write_str("STRIPPED_OAK_WOOD"),
           Material::StrippedSpruceWood { .. } => f.write_str("STRIPPED_SPRUCE_WOOD"),
           Material::StrippedBirchWood { .. } => f.write_str("STRIPPED_BIRCH_WOOD"),
           Material::StrippedJungleWood { .. } => f.write_str("STRIPPED_JUNGLE_WOOD"),
           Material::StrippedAcaciaWood { .. } => f.write_str("STRIPPED_ACACIA_WOOD"),
           Material::StrippedCherryWood { .. } => f.write_str("STRIPPED_CHERRY_WOOD"),
           Material::StrippedDarkOakWood { .. } => f.write_str("STRIPPED_DARK_OAK_WOOD"),
           Material::StrippedMangroveWood { .. } => f.write_str("STRIPPED_MANGROVE_WOOD"),
           Material::StrippedCrimsonHyphae { .. } => f.write_str("STRIPPED_CRIMSON_HYPHAE"),
           Material::StrippedWarpedHyphae { .. } => f.write_str("STRIPPED_WARPED_HYPHAE"),
           Material::StrippedBambooBlock { .. } => f.write_str("STRIPPED_BAMBOO_BLOCK"),
           Material::OakWood { .. } => f.write_str("OAK_WOOD"),
           Material::SpruceWood { .. } => f.write_str("SPRUCE_WOOD"),
           Material::BirchWood { .. } => f.write_str("BIRCH_WOOD"),
           Material::JungleWood { .. } => f.write_str("JUNGLE_WOOD"),
           Material::AcaciaWood { .. } => f.write_str("ACACIA_WOOD"),
           Material::CherryWood { .. } => f.write_str("CHERRY_WOOD"),
           Material::DarkOakWood { .. } => f.write_str("DARK_OAK_WOOD"),
           Material::MangroveWood { .. } => f.write_str("MANGROVE_WOOD"),
           Material::CrimsonHyphae { .. } => f.write_str("CRIMSON_HYPHAE"),
           Material::WarpedHyphae { .. } => f.write_str("WARPED_HYPHAE"),
           Material::OakLeaves { .. } => f.write_str("OAK_LEAVES"),
           Material::SpruceLeaves { .. } => f.write_str("SPRUCE_LEAVES"),
           Material::BirchLeaves { .. } => f.write_str("BIRCH_LEAVES"),
           Material::JungleLeaves { .. } => f.write_str("JUNGLE_LEAVES"),
           Material::AcaciaLeaves { .. } => f.write_str("ACACIA_LEAVES"),
           Material::CherryLeaves { .. } => f.write_str("CHERRY_LEAVES"),
           Material::DarkOakLeaves { .. } => f.write_str("DARK_OAK_LEAVES"),
           Material::MangroveLeaves { .. } => f.write_str("MANGROVE_LEAVES"),
           Material::AzaleaLeaves { .. } => f.write_str("AZALEA_LEAVES"),
           Material::FloweringAzaleaLeaves { .. } => f.write_str("FLOWERING_AZALEA_LEAVES"),
           Material::Sponge { .. } => f.write_str("SPONGE"),
           Material::WetSponge { .. } => f.write_str("WET_SPONGE"),
           Material::Glass { .. } => f.write_str("GLASS"),
           Material::TintedGlass { .. } => f.write_str("TINTED_GLASS"),
           Material::LapisBlock { .. } => f.write_str("LAPIS_BLOCK"),
           Material::Sandstone { .. } => f.write_str("SANDSTONE"),
           Material::ChiseledSandstone { .. } => f.write_str("CHISELED_SANDSTONE"),
           Material::CutSandstone { .. } => f.write_str("CUT_SANDSTONE"),
           Material::Cobweb { .. } => f.write_str("COBWEB"),
           Material::ShortGrass { .. } => f.write_str("SHORT_GRASS"),
           Material::Fern { .. } => f.write_str("FERN"),
           Material::Azalea { .. } => f.write_str("AZALEA"),
           Material::FloweringAzalea { .. } => f.write_str("FLOWERING_AZALEA"),
           Material::DeadBush { .. } => f.write_str("DEAD_BUSH"),
           Material::Seagrass { .. } => f.write_str("SEAGRASS"),
           Material::SeaPickle { .. } => f.write_str("SEA_PICKLE"),
           Material::WhiteWool { .. } => f.write_str("WHITE_WOOL"),
           Material::OrangeWool { .. } => f.write_str("ORANGE_WOOL"),
           Material::MagentaWool { .. } => f.write_str("MAGENTA_WOOL"),
           Material::LightBlueWool { .. } => f.write_str("LIGHT_BLUE_WOOL"),
           Material::YellowWool { .. } => f.write_str("YELLOW_WOOL"),
           Material::LimeWool { .. } => f.write_str("LIME_WOOL"),
           Material::PinkWool { .. } => f.write_str("PINK_WOOL"),
           Material::GrayWool { .. } => f.write_str("GRAY_WOOL"),
           Material::LightGrayWool { .. } => f.write_str("LIGHT_GRAY_WOOL"),
           Material::CyanWool { .. } => f.write_str("CYAN_WOOL"),
           Material::PurpleWool { .. } => f.write_str("PURPLE_WOOL"),
           Material::BlueWool { .. } => f.write_str("BLUE_WOOL"),
           Material::BrownWool { .. } => f.write_str("BROWN_WOOL"),
           Material::GreenWool { .. } => f.write_str("GREEN_WOOL"),
           Material::RedWool { .. } => f.write_str("RED_WOOL"),
           Material::BlackWool { .. } => f.write_str("BLACK_WOOL"),
           Material::Dandelion { .. } => f.write_str("DANDELION"),
           Material::Poppy { .. } => f.write_str("POPPY"),
           Material::BlueOrchid { .. } => f.write_str("BLUE_ORCHID"),
           Material::Allium { .. } => f.write_str("ALLIUM"),
           Material::AzureBluet { .. } => f.write_str("AZURE_BLUET"),
           Material::RedTulip { .. } => f.write_str("RED_TULIP"),
           Material::OrangeTulip { .. } => f.write_str("ORANGE_TULIP"),
           Material::WhiteTulip { .. } => f.write_str("WHITE_TULIP"),
           Material::PinkTulip { .. } => f.write_str("PINK_TULIP"),
           Material::OxeyeDaisy { .. } => f.write_str("OXEYE_DAISY"),
           Material::Cornflower { .. } => f.write_str("CORNFLOWER"),
           Material::LilyOfTheValley { .. } => f.write_str("LILY_OF_THE_VALLEY"),
           Material::WitherRose { .. } => f.write_str("WITHER_ROSE"),
           Material::Torchflower { .. } => f.write_str("TORCHFLOWER"),
           Material::PitcherPlant { .. } => f.write_str("PITCHER_PLANT"),
           Material::SporeBlossom { .. } => f.write_str("SPORE_BLOSSOM"),
           Material::BrownMushroom { .. } => f.write_str("BROWN_MUSHROOM"),
           Material::RedMushroom { .. } => f.write_str("RED_MUSHROOM"),
           Material::CrimsonFungus { .. } => f.write_str("CRIMSON_FUNGUS"),
           Material::WarpedFungus { .. } => f.write_str("WARPED_FUNGUS"),
           Material::CrimsonRoots { .. } => f.write_str("CRIMSON_ROOTS"),
           Material::WarpedRoots { .. } => f.write_str("WARPED_ROOTS"),
           Material::NetherSprouts { .. } => f.write_str("NETHER_SPROUTS"),
           Material::WeepingVines { .. } => f.write_str("WEEPING_VINES"),
           Material::TwistingVines { .. } => f.write_str("TWISTING_VINES"),
           Material::SugarCane { .. } => f.write_str("SUGAR_CANE"),
           Material::Kelp { .. } => f.write_str("KELP"),
           Material::MossCarpet { .. } => f.write_str("MOSS_CARPET"),
           Material::PinkPetals { .. } => f.write_str("PINK_PETALS"),
           Material::MossBlock { .. } => f.write_str("MOSS_BLOCK"),
           Material::HangingRoots { .. } => f.write_str("HANGING_ROOTS"),
           Material::BigDripleaf { .. } => f.write_str("BIG_DRIPLEAF"),
           Material::SmallDripleaf { .. } => f.write_str("SMALL_DRIPLEAF"),
           Material::Bamboo { .. } => f.write_str("BAMBOO"),
           Material::OakSlab { .. } => f.write_str("OAK_SLAB"),
           Material::SpruceSlab { .. } => f.write_str("SPRUCE_SLAB"),
           Material::BirchSlab { .. } => f.write_str("BIRCH_SLAB"),
           Material::JungleSlab { .. } => f.write_str("JUNGLE_SLAB"),
           Material::AcaciaSlab { .. } => f.write_str("ACACIA_SLAB"),
           Material::CherrySlab { .. } => f.write_str("CHERRY_SLAB"),
           Material::DarkOakSlab { .. } => f.write_str("DARK_OAK_SLAB"),
           Material::MangroveSlab { .. } => f.write_str("MANGROVE_SLAB"),
           Material::BambooSlab { .. } => f.write_str("BAMBOO_SLAB"),
           Material::BambooMosaicSlab { .. } => f.write_str("BAMBOO_MOSAIC_SLAB"),
           Material::CrimsonSlab { .. } => f.write_str("CRIMSON_SLAB"),
           Material::WarpedSlab { .. } => f.write_str("WARPED_SLAB"),
           Material::StoneSlab { .. } => f.write_str("STONE_SLAB"),
           Material::SmoothStoneSlab { .. } => f.write_str("SMOOTH_STONE_SLAB"),
           Material::SandstoneSlab { .. } => f.write_str("SANDSTONE_SLAB"),
           Material::CutSandstoneSlab { .. } => f.write_str("CUT_SANDSTONE_SLAB"),
           Material::PetrifiedOakSlab { .. } => f.write_str("PETRIFIED_OAK_SLAB"),
           Material::CobblestoneSlab { .. } => f.write_str("COBBLESTONE_SLAB"),
           Material::BrickSlab { .. } => f.write_str("BRICK_SLAB"),
           Material::StoneBrickSlab { .. } => f.write_str("STONE_BRICK_SLAB"),
           Material::MudBrickSlab { .. } => f.write_str("MUD_BRICK_SLAB"),
           Material::NetherBrickSlab { .. } => f.write_str("NETHER_BRICK_SLAB"),
           Material::QuartzSlab { .. } => f.write_str("QUARTZ_SLAB"),
           Material::RedSandstoneSlab { .. } => f.write_str("RED_SANDSTONE_SLAB"),
           Material::CutRedSandstoneSlab { .. } => f.write_str("CUT_RED_SANDSTONE_SLAB"),
           Material::PurpurSlab { .. } => f.write_str("PURPUR_SLAB"),
           Material::PrismarineSlab { .. } => f.write_str("PRISMARINE_SLAB"),
           Material::PrismarineBrickSlab { .. } => f.write_str("PRISMARINE_BRICK_SLAB"),
           Material::DarkPrismarineSlab { .. } => f.write_str("DARK_PRISMARINE_SLAB"),
           Material::SmoothQuartz { .. } => f.write_str("SMOOTH_QUARTZ"),
           Material::SmoothRedSandstone { .. } => f.write_str("SMOOTH_RED_SANDSTONE"),
           Material::SmoothSandstone { .. } => f.write_str("SMOOTH_SANDSTONE"),
           Material::SmoothStone { .. } => f.write_str("SMOOTH_STONE"),
           Material::Bricks { .. } => f.write_str("BRICKS"),
           Material::Bookshelf { .. } => f.write_str("BOOKSHELF"),
           Material::ChiseledBookshelf { .. } => f.write_str("CHISELED_BOOKSHELF"),
           Material::DecoratedPot { .. } => f.write_str("DECORATED_POT"),
           Material::MossyCobblestone { .. } => f.write_str("MOSSY_COBBLESTONE"),
           Material::Obsidian { .. } => f.write_str("OBSIDIAN"),
           Material::Torch { .. } => f.write_str("TORCH"),
           Material::EndRod { .. } => f.write_str("END_ROD"),
           Material::ChorusPlant { .. } => f.write_str("CHORUS_PLANT"),
           Material::ChorusFlower { .. } => f.write_str("CHORUS_FLOWER"),
           Material::PurpurBlock { .. } => f.write_str("PURPUR_BLOCK"),
           Material::PurpurPillar { .. } => f.write_str("PURPUR_PILLAR"),
           Material::PurpurStairs { .. } => f.write_str("PURPUR_STAIRS"),
           Material::Spawner { .. } => f.write_str("SPAWNER"),
           Material::Chest { .. } => f.write_str("CHEST"),
           Material::CraftingTable { .. } => f.write_str("CRAFTING_TABLE"),
           Material::Farmland { .. } => f.write_str("FARMLAND"),
           Material::Furnace { .. } => f.write_str("FURNACE"),
           Material::Ladder { .. } => f.write_str("LADDER"),
           Material::CobblestoneStairs { .. } => f.write_str("COBBLESTONE_STAIRS"),
           Material::Snow { .. } => f.write_str("SNOW"),
           Material::Ice { .. } => f.write_str("ICE"),
           Material::SnowBlock { .. } => f.write_str("SNOW_BLOCK"),
           Material::Cactus { .. } => f.write_str("CACTUS"),
           Material::Clay { .. } => f.write_str("CLAY"),
           Material::Jukebox { .. } => f.write_str("JUKEBOX"),
           Material::OakFence { .. } => f.write_str("OAK_FENCE"),
           Material::SpruceFence { .. } => f.write_str("SPRUCE_FENCE"),
           Material::BirchFence { .. } => f.write_str("BIRCH_FENCE"),
           Material::JungleFence { .. } => f.write_str("JUNGLE_FENCE"),
           Material::AcaciaFence { .. } => f.write_str("ACACIA_FENCE"),
           Material::CherryFence { .. } => f.write_str("CHERRY_FENCE"),
           Material::DarkOakFence { .. } => f.write_str("DARK_OAK_FENCE"),
           Material::MangroveFence { .. } => f.write_str("MANGROVE_FENCE"),
           Material::BambooFence { .. } => f.write_str("BAMBOO_FENCE"),
           Material::CrimsonFence { .. } => f.write_str("CRIMSON_FENCE"),
           Material::WarpedFence { .. } => f.write_str("WARPED_FENCE"),
           Material::Pumpkin { .. } => f.write_str("PUMPKIN"),
           Material::CarvedPumpkin { .. } => f.write_str("CARVED_PUMPKIN"),
           Material::JackOLantern { .. } => f.write_str("JACK_O_LANTERN"),
           Material::Netherrack { .. } => f.write_str("NETHERRACK"),
           Material::SoulSand { .. } => f.write_str("SOUL_SAND"),
           Material::SoulSoil { .. } => f.write_str("SOUL_SOIL"),
           Material::Basalt { .. } => f.write_str("BASALT"),
           Material::PolishedBasalt { .. } => f.write_str("POLISHED_BASALT"),
           Material::SmoothBasalt { .. } => f.write_str("SMOOTH_BASALT"),
           Material::SoulTorch { .. } => f.write_str("SOUL_TORCH"),
           Material::Glowstone { .. } => f.write_str("GLOWSTONE"),
           Material::InfestedStone { .. } => f.write_str("INFESTED_STONE"),
           Material::InfestedCobblestone { .. } => f.write_str("INFESTED_COBBLESTONE"),
           Material::InfestedStoneBricks { .. } => f.write_str("INFESTED_STONE_BRICKS"),
           Material::InfestedMossyStoneBricks { .. } => f.write_str("INFESTED_MOSSY_STONE_BRICKS"),
           Material::InfestedCrackedStoneBricks { .. } => f.write_str("INFESTED_CRACKED_STONE_BRICKS"),
           Material::InfestedChiseledStoneBricks { .. } => f.write_str("INFESTED_CHISELED_STONE_BRICKS"),
           Material::InfestedDeepslate { .. } => f.write_str("INFESTED_DEEPSLATE"),
           Material::StoneBricks { .. } => f.write_str("STONE_BRICKS"),
           Material::MossyStoneBricks { .. } => f.write_str("MOSSY_STONE_BRICKS"),
           Material::CrackedStoneBricks { .. } => f.write_str("CRACKED_STONE_BRICKS"),
           Material::ChiseledStoneBricks { .. } => f.write_str("CHISELED_STONE_BRICKS"),
           Material::PackedMud { .. } => f.write_str("PACKED_MUD"),
           Material::MudBricks { .. } => f.write_str("MUD_BRICKS"),
           Material::DeepslateBricks { .. } => f.write_str("DEEPSLATE_BRICKS"),
           Material::CrackedDeepslateBricks { .. } => f.write_str("CRACKED_DEEPSLATE_BRICKS"),
           Material::DeepslateTiles { .. } => f.write_str("DEEPSLATE_TILES"),
           Material::CrackedDeepslateTiles { .. } => f.write_str("CRACKED_DEEPSLATE_TILES"),
           Material::ChiseledDeepslate { .. } => f.write_str("CHISELED_DEEPSLATE"),
           Material::ReinforcedDeepslate { .. } => f.write_str("REINFORCED_DEEPSLATE"),
           Material::BrownMushroomBlock { .. } => f.write_str("BROWN_MUSHROOM_BLOCK"),
           Material::RedMushroomBlock { .. } => f.write_str("RED_MUSHROOM_BLOCK"),
           Material::MushroomStem { .. } => f.write_str("MUSHROOM_STEM"),
           Material::IronBars { .. } => f.write_str("IRON_BARS"),
           Material::Chain { .. } => f.write_str("CHAIN"),
           Material::GlassPane { .. } => f.write_str("GLASS_PANE"),
           Material::Melon { .. } => f.write_str("MELON"),
           Material::Vine { .. } => f.write_str("VINE"),
           Material::GlowLichen { .. } => f.write_str("GLOW_LICHEN"),
           Material::BrickStairs { .. } => f.write_str("BRICK_STAIRS"),
           Material::StoneBrickStairs { .. } => f.write_str("STONE_BRICK_STAIRS"),
           Material::MudBrickStairs { .. } => f.write_str("MUD_BRICK_STAIRS"),
           Material::Mycelium { .. } => f.write_str("MYCELIUM"),
           Material::LilyPad { .. } => f.write_str("LILY_PAD"),
           Material::NetherBricks { .. } => f.write_str("NETHER_BRICKS"),
           Material::CrackedNetherBricks { .. } => f.write_str("CRACKED_NETHER_BRICKS"),
           Material::ChiseledNetherBricks { .. } => f.write_str("CHISELED_NETHER_BRICKS"),
           Material::NetherBrickFence { .. } => f.write_str("NETHER_BRICK_FENCE"),
           Material::NetherBrickStairs { .. } => f.write_str("NETHER_BRICK_STAIRS"),
           Material::Sculk { .. } => f.write_str("SCULK"),
           Material::SculkVein { .. } => f.write_str("SCULK_VEIN"),
           Material::SculkCatalyst { .. } => f.write_str("SCULK_CATALYST"),
           Material::SculkShrieker { .. } => f.write_str("SCULK_SHRIEKER"),
           Material::EnchantingTable { .. } => f.write_str("ENCHANTING_TABLE"),
           Material::EndPortalFrame { .. } => f.write_str("END_PORTAL_FRAME"),
           Material::EndStone { .. } => f.write_str("END_STONE"),
           Material::EndStoneBricks { .. } => f.write_str("END_STONE_BRICKS"),
           Material::DragonEgg { .. } => f.write_str("DRAGON_EGG"),
           Material::SandstoneStairs { .. } => f.write_str("SANDSTONE_STAIRS"),
           Material::EnderChest { .. } => f.write_str("ENDER_CHEST"),
           Material::EmeraldBlock { .. } => f.write_str("EMERALD_BLOCK"),
           Material::OakStairs { .. } => f.write_str("OAK_STAIRS"),
           Material::SpruceStairs { .. } => f.write_str("SPRUCE_STAIRS"),
           Material::BirchStairs { .. } => f.write_str("BIRCH_STAIRS"),
           Material::JungleStairs { .. } => f.write_str("JUNGLE_STAIRS"),
           Material::AcaciaStairs { .. } => f.write_str("ACACIA_STAIRS"),
           Material::CherryStairs { .. } => f.write_str("CHERRY_STAIRS"),
           Material::DarkOakStairs { .. } => f.write_str("DARK_OAK_STAIRS"),
           Material::MangroveStairs { .. } => f.write_str("MANGROVE_STAIRS"),
           Material::BambooStairs { .. } => f.write_str("BAMBOO_STAIRS"),
           Material::BambooMosaicStairs { .. } => f.write_str("BAMBOO_MOSAIC_STAIRS"),
           Material::CrimsonStairs { .. } => f.write_str("CRIMSON_STAIRS"),
           Material::WarpedStairs { .. } => f.write_str("WARPED_STAIRS"),
           Material::CommandBlock { .. } => f.write_str("COMMAND_BLOCK"),
           Material::Beacon { .. } => f.write_str("BEACON"),
           Material::CobblestoneWall { .. } => f.write_str("COBBLESTONE_WALL"),
           Material::MossyCobblestoneWall { .. } => f.write_str("MOSSY_COBBLESTONE_WALL"),
           Material::BrickWall { .. } => f.write_str("BRICK_WALL"),
           Material::PrismarineWall { .. } => f.write_str("PRISMARINE_WALL"),
           Material::RedSandstoneWall { .. } => f.write_str("RED_SANDSTONE_WALL"),
           Material::MossyStoneBrickWall { .. } => f.write_str("MOSSY_STONE_BRICK_WALL"),
           Material::GraniteWall { .. } => f.write_str("GRANITE_WALL"),
           Material::StoneBrickWall { .. } => f.write_str("STONE_BRICK_WALL"),
           Material::MudBrickWall { .. } => f.write_str("MUD_BRICK_WALL"),
           Material::NetherBrickWall { .. } => f.write_str("NETHER_BRICK_WALL"),
           Material::AndesiteWall { .. } => f.write_str("ANDESITE_WALL"),
           Material::RedNetherBrickWall { .. } => f.write_str("RED_NETHER_BRICK_WALL"),
           Material::SandstoneWall { .. } => f.write_str("SANDSTONE_WALL"),
           Material::EndStoneBrickWall { .. } => f.write_str("END_STONE_BRICK_WALL"),
           Material::DioriteWall { .. } => f.write_str("DIORITE_WALL"),
           Material::BlackstoneWall { .. } => f.write_str("BLACKSTONE_WALL"),
           Material::PolishedBlackstoneWall { .. } => f.write_str("POLISHED_BLACKSTONE_WALL"),
           Material::PolishedBlackstoneBrickWall { .. } => f.write_str("POLISHED_BLACKSTONE_BRICK_WALL"),
           Material::CobbledDeepslateWall { .. } => f.write_str("COBBLED_DEEPSLATE_WALL"),
           Material::PolishedDeepslateWall { .. } => f.write_str("POLISHED_DEEPSLATE_WALL"),
           Material::DeepslateBrickWall { .. } => f.write_str("DEEPSLATE_BRICK_WALL"),
           Material::DeepslateTileWall { .. } => f.write_str("DEEPSLATE_TILE_WALL"),
           Material::Anvil { .. } => f.write_str("ANVIL"),
           Material::ChippedAnvil { .. } => f.write_str("CHIPPED_ANVIL"),
           Material::DamagedAnvil { .. } => f.write_str("DAMAGED_ANVIL"),
           Material::ChiseledQuartzBlock { .. } => f.write_str("CHISELED_QUARTZ_BLOCK"),
           Material::QuartzBlock { .. } => f.write_str("QUARTZ_BLOCK"),
           Material::QuartzBricks { .. } => f.write_str("QUARTZ_BRICKS"),
           Material::QuartzPillar { .. } => f.write_str("QUARTZ_PILLAR"),
           Material::QuartzStairs { .. } => f.write_str("QUARTZ_STAIRS"),
           Material::WhiteTerracotta { .. } => f.write_str("WHITE_TERRACOTTA"),
           Material::OrangeTerracotta { .. } => f.write_str("ORANGE_TERRACOTTA"),
           Material::MagentaTerracotta { .. } => f.write_str("MAGENTA_TERRACOTTA"),
           Material::LightBlueTerracotta { .. } => f.write_str("LIGHT_BLUE_TERRACOTTA"),
           Material::YellowTerracotta { .. } => f.write_str("YELLOW_TERRACOTTA"),
           Material::LimeTerracotta { .. } => f.write_str("LIME_TERRACOTTA"),
           Material::PinkTerracotta { .. } => f.write_str("PINK_TERRACOTTA"),
           Material::GrayTerracotta { .. } => f.write_str("GRAY_TERRACOTTA"),
           Material::LightGrayTerracotta { .. } => f.write_str("LIGHT_GRAY_TERRACOTTA"),
           Material::CyanTerracotta { .. } => f.write_str("CYAN_TERRACOTTA"),
           Material::PurpleTerracotta { .. } => f.write_str("PURPLE_TERRACOTTA"),
           Material::BlueTerracotta { .. } => f.write_str("BLUE_TERRACOTTA"),
           Material::BrownTerracotta { .. } => f.write_str("BROWN_TERRACOTTA"),
           Material::GreenTerracotta { .. } => f.write_str("GREEN_TERRACOTTA"),
           Material::RedTerracotta { .. } => f.write_str("RED_TERRACOTTA"),
           Material::BlackTerracotta { .. } => f.write_str("BLACK_TERRACOTTA"),
           Material::Barrier { .. } => f.write_str("BARRIER"),
           Material::Light { .. } => f.write_str("LIGHT"),
           Material::HayBlock { .. } => f.write_str("HAY_BLOCK"),
           Material::WhiteCarpet { .. } => f.write_str("WHITE_CARPET"),
           Material::OrangeCarpet { .. } => f.write_str("ORANGE_CARPET"),
           Material::MagentaCarpet { .. } => f.write_str("MAGENTA_CARPET"),
           Material::LightBlueCarpet { .. } => f.write_str("LIGHT_BLUE_CARPET"),
           Material::YellowCarpet { .. } => f.write_str("YELLOW_CARPET"),
           Material::LimeCarpet { .. } => f.write_str("LIME_CARPET"),
           Material::PinkCarpet { .. } => f.write_str("PINK_CARPET"),
           Material::GrayCarpet { .. } => f.write_str("GRAY_CARPET"),
           Material::LightGrayCarpet { .. } => f.write_str("LIGHT_GRAY_CARPET"),
           Material::CyanCarpet { .. } => f.write_str("CYAN_CARPET"),
           Material::PurpleCarpet { .. } => f.write_str("PURPLE_CARPET"),
           Material::BlueCarpet { .. } => f.write_str("BLUE_CARPET"),
           Material::BrownCarpet { .. } => f.write_str("BROWN_CARPET"),
           Material::GreenCarpet { .. } => f.write_str("GREEN_CARPET"),
           Material::RedCarpet { .. } => f.write_str("RED_CARPET"),
           Material::BlackCarpet { .. } => f.write_str("BLACK_CARPET"),
           Material::Terracotta { .. } => f.write_str("TERRACOTTA"),
           Material::PackedIce { .. } => f.write_str("PACKED_ICE"),
           Material::DirtPath { .. } => f.write_str("DIRT_PATH"),
           Material::Sunflower { .. } => f.write_str("SUNFLOWER"),
           Material::Lilac { .. } => f.write_str("LILAC"),
           Material::RoseBush { .. } => f.write_str("ROSE_BUSH"),
           Material::Peony { .. } => f.write_str("PEONY"),
           Material::TallGrass { .. } => f.write_str("TALL_GRASS"),
           Material::LargeFern { .. } => f.write_str("LARGE_FERN"),
           Material::WhiteStainedGlass { .. } => f.write_str("WHITE_STAINED_GLASS"),
           Material::OrangeStainedGlass { .. } => f.write_str("ORANGE_STAINED_GLASS"),
           Material::MagentaStainedGlass { .. } => f.write_str("MAGENTA_STAINED_GLASS"),
           Material::LightBlueStainedGlass { .. } => f.write_str("LIGHT_BLUE_STAINED_GLASS"),
           Material::YellowStainedGlass { .. } => f.write_str("YELLOW_STAINED_GLASS"),
           Material::LimeStainedGlass { .. } => f.write_str("LIME_STAINED_GLASS"),
           Material::PinkStainedGlass { .. } => f.write_str("PINK_STAINED_GLASS"),
           Material::GrayStainedGlass { .. } => f.write_str("GRAY_STAINED_GLASS"),
           Material::LightGrayStainedGlass { .. } => f.write_str("LIGHT_GRAY_STAINED_GLASS"),
           Material::CyanStainedGlass { .. } => f.write_str("CYAN_STAINED_GLASS"),
           Material::PurpleStainedGlass { .. } => f.write_str("PURPLE_STAINED_GLASS"),
           Material::BlueStainedGlass { .. } => f.write_str("BLUE_STAINED_GLASS"),
           Material::BrownStainedGlass { .. } => f.write_str("BROWN_STAINED_GLASS"),
           Material::GreenStainedGlass { .. } => f.write_str("GREEN_STAINED_GLASS"),
           Material::RedStainedGlass { .. } => f.write_str("RED_STAINED_GLASS"),
           Material::BlackStainedGlass { .. } => f.write_str("BLACK_STAINED_GLASS"),
           Material::WhiteStainedGlassPane { .. } => f.write_str("WHITE_STAINED_GLASS_PANE"),
           Material::OrangeStainedGlassPane { .. } => f.write_str("ORANGE_STAINED_GLASS_PANE"),
           Material::MagentaStainedGlassPane { .. } => f.write_str("MAGENTA_STAINED_GLASS_PANE"),
           Material::LightBlueStainedGlassPane { .. } => f.write_str("LIGHT_BLUE_STAINED_GLASS_PANE"),
           Material::YellowStainedGlassPane { .. } => f.write_str("YELLOW_STAINED_GLASS_PANE"),
           Material::LimeStainedGlassPane { .. } => f.write_str("LIME_STAINED_GLASS_PANE"),
           Material::PinkStainedGlassPane { .. } => f.write_str("PINK_STAINED_GLASS_PANE"),
           Material::GrayStainedGlassPane { .. } => f.write_str("GRAY_STAINED_GLASS_PANE"),
           Material::LightGrayStainedGlassPane { .. } => f.write_str("LIGHT_GRAY_STAINED_GLASS_PANE"),
           Material::CyanStainedGlassPane { .. } => f.write_str("CYAN_STAINED_GLASS_PANE"),
           Material::PurpleStainedGlassPane { .. } => f.write_str("PURPLE_STAINED_GLASS_PANE"),
           Material::BlueStainedGlassPane { .. } => f.write_str("BLUE_STAINED_GLASS_PANE"),
           Material::BrownStainedGlassPane { .. } => f.write_str("BROWN_STAINED_GLASS_PANE"),
           Material::GreenStainedGlassPane { .. } => f.write_str("GREEN_STAINED_GLASS_PANE"),
           Material::RedStainedGlassPane { .. } => f.write_str("RED_STAINED_GLASS_PANE"),
           Material::BlackStainedGlassPane { .. } => f.write_str("BLACK_STAINED_GLASS_PANE"),
           Material::Prismarine { .. } => f.write_str("PRISMARINE"),
           Material::PrismarineBricks { .. } => f.write_str("PRISMARINE_BRICKS"),
           Material::DarkPrismarine { .. } => f.write_str("DARK_PRISMARINE"),
           Material::PrismarineStairs { .. } => f.write_str("PRISMARINE_STAIRS"),
           Material::PrismarineBrickStairs { .. } => f.write_str("PRISMARINE_BRICK_STAIRS"),
           Material::DarkPrismarineStairs { .. } => f.write_str("DARK_PRISMARINE_STAIRS"),
           Material::SeaLantern { .. } => f.write_str("SEA_LANTERN"),
           Material::RedSandstone { .. } => f.write_str("RED_SANDSTONE"),
           Material::ChiseledRedSandstone { .. } => f.write_str("CHISELED_RED_SANDSTONE"),
           Material::CutRedSandstone { .. } => f.write_str("CUT_RED_SANDSTONE"),
           Material::RedSandstoneStairs { .. } => f.write_str("RED_SANDSTONE_STAIRS"),
           Material::RepeatingCommandBlock { .. } => f.write_str("REPEATING_COMMAND_BLOCK"),
           Material::ChainCommandBlock { .. } => f.write_str("CHAIN_COMMAND_BLOCK"),
           Material::MagmaBlock { .. } => f.write_str("MAGMA_BLOCK"),
           Material::NetherWartBlock { .. } => f.write_str("NETHER_WART_BLOCK"),
           Material::WarpedWartBlock { .. } => f.write_str("WARPED_WART_BLOCK"),
           Material::RedNetherBricks { .. } => f.write_str("RED_NETHER_BRICKS"),
           Material::BoneBlock { .. } => f.write_str("BONE_BLOCK"),
           Material::StructureVoid { .. } => f.write_str("STRUCTURE_VOID"),
           Material::ShulkerBox { .. } => f.write_str("SHULKER_BOX"),
           Material::WhiteShulkerBox { .. } => f.write_str("WHITE_SHULKER_BOX"),
           Material::OrangeShulkerBox { .. } => f.write_str("ORANGE_SHULKER_BOX"),
           Material::MagentaShulkerBox { .. } => f.write_str("MAGENTA_SHULKER_BOX"),
           Material::LightBlueShulkerBox { .. } => f.write_str("LIGHT_BLUE_SHULKER_BOX"),
           Material::YellowShulkerBox { .. } => f.write_str("YELLOW_SHULKER_BOX"),
           Material::LimeShulkerBox { .. } => f.write_str("LIME_SHULKER_BOX"),
           Material::PinkShulkerBox { .. } => f.write_str("PINK_SHULKER_BOX"),
           Material::GrayShulkerBox { .. } => f.write_str("GRAY_SHULKER_BOX"),
           Material::LightGrayShulkerBox { .. } => f.write_str("LIGHT_GRAY_SHULKER_BOX"),
           Material::CyanShulkerBox { .. } => f.write_str("CYAN_SHULKER_BOX"),
           Material::PurpleShulkerBox { .. } => f.write_str("PURPLE_SHULKER_BOX"),
           Material::BlueShulkerBox { .. } => f.write_str("BLUE_SHULKER_BOX"),
           Material::BrownShulkerBox { .. } => f.write_str("BROWN_SHULKER_BOX"),
           Material::GreenShulkerBox { .. } => f.write_str("GREEN_SHULKER_BOX"),
           Material::RedShulkerBox { .. } => f.write_str("RED_SHULKER_BOX"),
           Material::BlackShulkerBox { .. } => f.write_str("BLACK_SHULKER_BOX"),
           Material::WhiteGlazedTerracotta { .. } => f.write_str("WHITE_GLAZED_TERRACOTTA"),
           Material::OrangeGlazedTerracotta { .. } => f.write_str("ORANGE_GLAZED_TERRACOTTA"),
           Material::MagentaGlazedTerracotta { .. } => f.write_str("MAGENTA_GLAZED_TERRACOTTA"),
           Material::LightBlueGlazedTerracotta { .. } => f.write_str("LIGHT_BLUE_GLAZED_TERRACOTTA"),
           Material::YellowGlazedTerracotta { .. } => f.write_str("YELLOW_GLAZED_TERRACOTTA"),
           Material::LimeGlazedTerracotta { .. } => f.write_str("LIME_GLAZED_TERRACOTTA"),
           Material::PinkGlazedTerracotta { .. } => f.write_str("PINK_GLAZED_TERRACOTTA"),
           Material::GrayGlazedTerracotta { .. } => f.write_str("GRAY_GLAZED_TERRACOTTA"),
           Material::LightGrayGlazedTerracotta { .. } => f.write_str("LIGHT_GRAY_GLAZED_TERRACOTTA"),
           Material::CyanGlazedTerracotta { .. } => f.write_str("CYAN_GLAZED_TERRACOTTA"),
           Material::PurpleGlazedTerracotta { .. } => f.write_str("PURPLE_GLAZED_TERRACOTTA"),
           Material::BlueGlazedTerracotta { .. } => f.write_str("BLUE_GLAZED_TERRACOTTA"),
           Material::BrownGlazedTerracotta { .. } => f.write_str("BROWN_GLAZED_TERRACOTTA"),
           Material::GreenGlazedTerracotta { .. } => f.write_str("GREEN_GLAZED_TERRACOTTA"),
           Material::RedGlazedTerracotta { .. } => f.write_str("RED_GLAZED_TERRACOTTA"),
           Material::BlackGlazedTerracotta { .. } => f.write_str("BLACK_GLAZED_TERRACOTTA"),
           Material::WhiteConcrete { .. } => f.write_str("WHITE_CONCRETE"),
           Material::OrangeConcrete { .. } => f.write_str("ORANGE_CONCRETE"),
           Material::MagentaConcrete { .. } => f.write_str("MAGENTA_CONCRETE"),
           Material::LightBlueConcrete { .. } => f.write_str("LIGHT_BLUE_CONCRETE"),
           Material::YellowConcrete { .. } => f.write_str("YELLOW_CONCRETE"),
           Material::LimeConcrete { .. } => f.write_str("LIME_CONCRETE"),
           Material::PinkConcrete { .. } => f.write_str("PINK_CONCRETE"),
           Material::GrayConcrete { .. } => f.write_str("GRAY_CONCRETE"),
           Material::LightGrayConcrete { .. } => f.write_str("LIGHT_GRAY_CONCRETE"),
           Material::CyanConcrete { .. } => f.write_str("CYAN_CONCRETE"),
           Material::PurpleConcrete { .. } => f.write_str("PURPLE_CONCRETE"),
           Material::BlueConcrete { .. } => f.write_str("BLUE_CONCRETE"),
           Material::BrownConcrete { .. } => f.write_str("BROWN_CONCRETE"),
           Material::GreenConcrete { .. } => f.write_str("GREEN_CONCRETE"),
           Material::RedConcrete { .. } => f.write_str("RED_CONCRETE"),
           Material::BlackConcrete { .. } => f.write_str("BLACK_CONCRETE"),
           Material::WhiteConcretePowder { .. } => f.write_str("WHITE_CONCRETE_POWDER"),
           Material::OrangeConcretePowder { .. } => f.write_str("ORANGE_CONCRETE_POWDER"),
           Material::MagentaConcretePowder { .. } => f.write_str("MAGENTA_CONCRETE_POWDER"),
           Material::LightBlueConcretePowder { .. } => f.write_str("LIGHT_BLUE_CONCRETE_POWDER"),
           Material::YellowConcretePowder { .. } => f.write_str("YELLOW_CONCRETE_POWDER"),
           Material::LimeConcretePowder { .. } => f.write_str("LIME_CONCRETE_POWDER"),
           Material::PinkConcretePowder { .. } => f.write_str("PINK_CONCRETE_POWDER"),
           Material::GrayConcretePowder { .. } => f.write_str("GRAY_CONCRETE_POWDER"),
           Material::LightGrayConcretePowder { .. } => f.write_str("LIGHT_GRAY_CONCRETE_POWDER"),
           Material::CyanConcretePowder { .. } => f.write_str("CYAN_CONCRETE_POWDER"),
           Material::PurpleConcretePowder { .. } => f.write_str("PURPLE_CONCRETE_POWDER"),
           Material::BlueConcretePowder { .. } => f.write_str("BLUE_CONCRETE_POWDER"),
           Material::BrownConcretePowder { .. } => f.write_str("BROWN_CONCRETE_POWDER"),
           Material::GreenConcretePowder { .. } => f.write_str("GREEN_CONCRETE_POWDER"),
           Material::RedConcretePowder { .. } => f.write_str("RED_CONCRETE_POWDER"),
           Material::BlackConcretePowder { .. } => f.write_str("BLACK_CONCRETE_POWDER"),
           Material::TurtleEgg { .. } => f.write_str("TURTLE_EGG"),
           Material::SnifferEgg { .. } => f.write_str("SNIFFER_EGG"),
           Material::DeadTubeCoralBlock { .. } => f.write_str("DEAD_TUBE_CORAL_BLOCK"),
           Material::DeadBrainCoralBlock { .. } => f.write_str("DEAD_BRAIN_CORAL_BLOCK"),
           Material::DeadBubbleCoralBlock { .. } => f.write_str("DEAD_BUBBLE_CORAL_BLOCK"),
           Material::DeadFireCoralBlock { .. } => f.write_str("DEAD_FIRE_CORAL_BLOCK"),
           Material::DeadHornCoralBlock { .. } => f.write_str("DEAD_HORN_CORAL_BLOCK"),
           Material::TubeCoralBlock { .. } => f.write_str("TUBE_CORAL_BLOCK"),
           Material::BrainCoralBlock { .. } => f.write_str("BRAIN_CORAL_BLOCK"),
           Material::BubbleCoralBlock { .. } => f.write_str("BUBBLE_CORAL_BLOCK"),
           Material::FireCoralBlock { .. } => f.write_str("FIRE_CORAL_BLOCK"),
           Material::HornCoralBlock { .. } => f.write_str("HORN_CORAL_BLOCK"),
           Material::TubeCoral { .. } => f.write_str("TUBE_CORAL"),
           Material::BrainCoral { .. } => f.write_str("BRAIN_CORAL"),
           Material::BubbleCoral { .. } => f.write_str("BUBBLE_CORAL"),
           Material::FireCoral { .. } => f.write_str("FIRE_CORAL"),
           Material::HornCoral { .. } => f.write_str("HORN_CORAL"),
           Material::DeadBrainCoral { .. } => f.write_str("DEAD_BRAIN_CORAL"),
           Material::DeadBubbleCoral { .. } => f.write_str("DEAD_BUBBLE_CORAL"),
           Material::DeadFireCoral { .. } => f.write_str("DEAD_FIRE_CORAL"),
           Material::DeadHornCoral { .. } => f.write_str("DEAD_HORN_CORAL"),
           Material::DeadTubeCoral { .. } => f.write_str("DEAD_TUBE_CORAL"),
           Material::TubeCoralFan { .. } => f.write_str("TUBE_CORAL_FAN"),
           Material::BrainCoralFan { .. } => f.write_str("BRAIN_CORAL_FAN"),
           Material::BubbleCoralFan { .. } => f.write_str("BUBBLE_CORAL_FAN"),
           Material::FireCoralFan { .. } => f.write_str("FIRE_CORAL_FAN"),
           Material::HornCoralFan { .. } => f.write_str("HORN_CORAL_FAN"),
           Material::DeadTubeCoralFan { .. } => f.write_str("DEAD_TUBE_CORAL_FAN"),
           Material::DeadBrainCoralFan { .. } => f.write_str("DEAD_BRAIN_CORAL_FAN"),
           Material::DeadBubbleCoralFan { .. } => f.write_str("DEAD_BUBBLE_CORAL_FAN"),
           Material::DeadFireCoralFan { .. } => f.write_str("DEAD_FIRE_CORAL_FAN"),
           Material::DeadHornCoralFan { .. } => f.write_str("DEAD_HORN_CORAL_FAN"),
           Material::BlueIce { .. } => f.write_str("BLUE_ICE"),
           Material::Conduit { .. } => f.write_str("CONDUIT"),
           Material::PolishedGraniteStairs { .. } => f.write_str("POLISHED_GRANITE_STAIRS"),
           Material::SmoothRedSandstoneStairs { .. } => f.write_str("SMOOTH_RED_SANDSTONE_STAIRS"),
           Material::MossyStoneBrickStairs { .. } => f.write_str("MOSSY_STONE_BRICK_STAIRS"),
           Material::PolishedDioriteStairs { .. } => f.write_str("POLISHED_DIORITE_STAIRS"),
           Material::MossyCobblestoneStairs { .. } => f.write_str("MOSSY_COBBLESTONE_STAIRS"),
           Material::EndStoneBrickStairs { .. } => f.write_str("END_STONE_BRICK_STAIRS"),
           Material::StoneStairs { .. } => f.write_str("STONE_STAIRS"),
           Material::SmoothSandstoneStairs { .. } => f.write_str("SMOOTH_SANDSTONE_STAIRS"),
           Material::SmoothQuartzStairs { .. } => f.write_str("SMOOTH_QUARTZ_STAIRS"),
           Material::GraniteStairs { .. } => f.write_str("GRANITE_STAIRS"),
           Material::AndesiteStairs { .. } => f.write_str("ANDESITE_STAIRS"),
           Material::RedNetherBrickStairs { .. } => f.write_str("RED_NETHER_BRICK_STAIRS"),
           Material::PolishedAndesiteStairs { .. } => f.write_str("POLISHED_ANDESITE_STAIRS"),
           Material::DioriteStairs { .. } => f.write_str("DIORITE_STAIRS"),
           Material::CobbledDeepslateStairs { .. } => f.write_str("COBBLED_DEEPSLATE_STAIRS"),
           Material::PolishedDeepslateStairs { .. } => f.write_str("POLISHED_DEEPSLATE_STAIRS"),
           Material::DeepslateBrickStairs { .. } => f.write_str("DEEPSLATE_BRICK_STAIRS"),
           Material::DeepslateTileStairs { .. } => f.write_str("DEEPSLATE_TILE_STAIRS"),
           Material::PolishedGraniteSlab { .. } => f.write_str("POLISHED_GRANITE_SLAB"),
           Material::SmoothRedSandstoneSlab { .. } => f.write_str("SMOOTH_RED_SANDSTONE_SLAB"),
           Material::MossyStoneBrickSlab { .. } => f.write_str("MOSSY_STONE_BRICK_SLAB"),
           Material::PolishedDioriteSlab { .. } => f.write_str("POLISHED_DIORITE_SLAB"),
           Material::MossyCobblestoneSlab { .. } => f.write_str("MOSSY_COBBLESTONE_SLAB"),
           Material::EndStoneBrickSlab { .. } => f.write_str("END_STONE_BRICK_SLAB"),
           Material::SmoothSandstoneSlab { .. } => f.write_str("SMOOTH_SANDSTONE_SLAB"),
           Material::SmoothQuartzSlab { .. } => f.write_str("SMOOTH_QUARTZ_SLAB"),
           Material::GraniteSlab { .. } => f.write_str("GRANITE_SLAB"),
           Material::AndesiteSlab { .. } => f.write_str("ANDESITE_SLAB"),
           Material::RedNetherBrickSlab { .. } => f.write_str("RED_NETHER_BRICK_SLAB"),
           Material::PolishedAndesiteSlab { .. } => f.write_str("POLISHED_ANDESITE_SLAB"),
           Material::DioriteSlab { .. } => f.write_str("DIORITE_SLAB"),
           Material::CobbledDeepslateSlab { .. } => f.write_str("COBBLED_DEEPSLATE_SLAB"),
           Material::PolishedDeepslateSlab { .. } => f.write_str("POLISHED_DEEPSLATE_SLAB"),
           Material::DeepslateBrickSlab { .. } => f.write_str("DEEPSLATE_BRICK_SLAB"),
           Material::DeepslateTileSlab { .. } => f.write_str("DEEPSLATE_TILE_SLAB"),
           Material::Scaffolding { .. } => f.write_str("SCAFFOLDING"),
           Material::Redstone { .. } => f.write_str("REDSTONE"),
           Material::RedstoneTorch { .. } => f.write_str("REDSTONE_TORCH"),
           Material::RedstoneBlock { .. } => f.write_str("REDSTONE_BLOCK"),
           Material::Repeater { .. } => f.write_str("REPEATER"),
           Material::Comparator { .. } => f.write_str("COMPARATOR"),
           Material::Piston { .. } => f.write_str("PISTON"),
           Material::StickyPiston { .. } => f.write_str("STICKY_PISTON"),
           Material::SlimeBlock { .. } => f.write_str("SLIME_BLOCK"),
           Material::HoneyBlock { .. } => f.write_str("HONEY_BLOCK"),
           Material::Observer { .. } => f.write_str("OBSERVER"),
           Material::Hopper { .. } => f.write_str("HOPPER"),
           Material::Dispenser { .. } => f.write_str("DISPENSER"),
           Material::Dropper { .. } => f.write_str("DROPPER"),
           Material::Lectern { .. } => f.write_str("LECTERN"),
           Material::Target { .. } => f.write_str("TARGET"),
           Material::Lever { .. } => f.write_str("LEVER"),
           Material::LightningRod { .. } => f.write_str("LIGHTNING_ROD"),
           Material::DaylightDetector { .. } => f.write_str("DAYLIGHT_DETECTOR"),
           Material::SculkSensor { .. } => f.write_str("SCULK_SENSOR"),
           Material::CalibratedSculkSensor { .. } => f.write_str("CALIBRATED_SCULK_SENSOR"),
           Material::TripwireHook { .. } => f.write_str("TRIPWIRE_HOOK"),
           Material::TrappedChest { .. } => f.write_str("TRAPPED_CHEST"),
           Material::Tnt { .. } => f.write_str("TNT"),
           Material::RedstoneLamp { .. } => f.write_str("REDSTONE_LAMP"),
           Material::NoteBlock { .. } => f.write_str("NOTE_BLOCK"),
           Material::StoneButton { .. } => f.write_str("STONE_BUTTON"),
           Material::PolishedBlackstoneButton { .. } => f.write_str("POLISHED_BLACKSTONE_BUTTON"),
           Material::OakButton { .. } => f.write_str("OAK_BUTTON"),
           Material::SpruceButton { .. } => f.write_str("SPRUCE_BUTTON"),
           Material::BirchButton { .. } => f.write_str("BIRCH_BUTTON"),
           Material::JungleButton { .. } => f.write_str("JUNGLE_BUTTON"),
           Material::AcaciaButton { .. } => f.write_str("ACACIA_BUTTON"),
           Material::CherryButton { .. } => f.write_str("CHERRY_BUTTON"),
           Material::DarkOakButton { .. } => f.write_str("DARK_OAK_BUTTON"),
           Material::MangroveButton { .. } => f.write_str("MANGROVE_BUTTON"),
           Material::BambooButton { .. } => f.write_str("BAMBOO_BUTTON"),
           Material::CrimsonButton { .. } => f.write_str("CRIMSON_BUTTON"),
           Material::WarpedButton { .. } => f.write_str("WARPED_BUTTON"),
           Material::StonePressurePlate { .. } => f.write_str("STONE_PRESSURE_PLATE"),
           Material::PolishedBlackstonePressurePlate { .. } => f.write_str("POLISHED_BLACKSTONE_PRESSURE_PLATE"),
           Material::LightWeightedPressurePlate { .. } => f.write_str("LIGHT_WEIGHTED_PRESSURE_PLATE"),
           Material::HeavyWeightedPressurePlate { .. } => f.write_str("HEAVY_WEIGHTED_PRESSURE_PLATE"),
           Material::OakPressurePlate { .. } => f.write_str("OAK_PRESSURE_PLATE"),
           Material::SprucePressurePlate { .. } => f.write_str("SPRUCE_PRESSURE_PLATE"),
           Material::BirchPressurePlate { .. } => f.write_str("BIRCH_PRESSURE_PLATE"),
           Material::JunglePressurePlate { .. } => f.write_str("JUNGLE_PRESSURE_PLATE"),
           Material::AcaciaPressurePlate { .. } => f.write_str("ACACIA_PRESSURE_PLATE"),
           Material::CherryPressurePlate { .. } => f.write_str("CHERRY_PRESSURE_PLATE"),
           Material::DarkOakPressurePlate { .. } => f.write_str("DARK_OAK_PRESSURE_PLATE"),
           Material::MangrovePressurePlate { .. } => f.write_str("MANGROVE_PRESSURE_PLATE"),
           Material::BambooPressurePlate { .. } => f.write_str("BAMBOO_PRESSURE_PLATE"),
           Material::CrimsonPressurePlate { .. } => f.write_str("CRIMSON_PRESSURE_PLATE"),
           Material::WarpedPressurePlate { .. } => f.write_str("WARPED_PRESSURE_PLATE"),
           Material::IronDoor { .. } => f.write_str("IRON_DOOR"),
           Material::OakDoor { .. } => f.write_str("OAK_DOOR"),
           Material::SpruceDoor { .. } => f.write_str("SPRUCE_DOOR"),
           Material::BirchDoor { .. } => f.write_str("BIRCH_DOOR"),
           Material::JungleDoor { .. } => f.write_str("JUNGLE_DOOR"),
           Material::AcaciaDoor { .. } => f.write_str("ACACIA_DOOR"),
           Material::CherryDoor { .. } => f.write_str("CHERRY_DOOR"),
           Material::DarkOakDoor { .. } => f.write_str("DARK_OAK_DOOR"),
           Material::MangroveDoor { .. } => f.write_str("MANGROVE_DOOR"),
           Material::BambooDoor { .. } => f.write_str("BAMBOO_DOOR"),
           Material::CrimsonDoor { .. } => f.write_str("CRIMSON_DOOR"),
           Material::WarpedDoor { .. } => f.write_str("WARPED_DOOR"),
           Material::CopperDoor { .. } => f.write_str("COPPER_DOOR"),
           Material::ExposedCopperDoor { .. } => f.write_str("EXPOSED_COPPER_DOOR"),
           Material::WeatheredCopperDoor { .. } => f.write_str("WEATHERED_COPPER_DOOR"),
           Material::OxidizedCopperDoor { .. } => f.write_str("OXIDIZED_COPPER_DOOR"),
           Material::WaxedCopperDoor { .. } => f.write_str("WAXED_COPPER_DOOR"),
           Material::WaxedExposedCopperDoor { .. } => f.write_str("WAXED_EXPOSED_COPPER_DOOR"),
           Material::WaxedWeatheredCopperDoor { .. } => f.write_str("WAXED_WEATHERED_COPPER_DOOR"),
           Material::WaxedOxidizedCopperDoor { .. } => f.write_str("WAXED_OXIDIZED_COPPER_DOOR"),
           Material::IronTrapdoor { .. } => f.write_str("IRON_TRAPDOOR"),
           Material::OakTrapdoor { .. } => f.write_str("OAK_TRAPDOOR"),
           Material::SpruceTrapdoor { .. } => f.write_str("SPRUCE_TRAPDOOR"),
           Material::BirchTrapdoor { .. } => f.write_str("BIRCH_TRAPDOOR"),
           Material::JungleTrapdoor { .. } => f.write_str("JUNGLE_TRAPDOOR"),
           Material::AcaciaTrapdoor { .. } => f.write_str("ACACIA_TRAPDOOR"),
           Material::CherryTrapdoor { .. } => f.write_str("CHERRY_TRAPDOOR"),
           Material::DarkOakTrapdoor { .. } => f.write_str("DARK_OAK_TRAPDOOR"),
           Material::MangroveTrapdoor { .. } => f.write_str("MANGROVE_TRAPDOOR"),
           Material::BambooTrapdoor { .. } => f.write_str("BAMBOO_TRAPDOOR"),
           Material::CrimsonTrapdoor { .. } => f.write_str("CRIMSON_TRAPDOOR"),
           Material::WarpedTrapdoor { .. } => f.write_str("WARPED_TRAPDOOR"),
           Material::CopperTrapdoor { .. } => f.write_str("COPPER_TRAPDOOR"),
           Material::ExposedCopperTrapdoor { .. } => f.write_str("EXPOSED_COPPER_TRAPDOOR"),
           Material::WeatheredCopperTrapdoor { .. } => f.write_str("WEATHERED_COPPER_TRAPDOOR"),
           Material::OxidizedCopperTrapdoor { .. } => f.write_str("OXIDIZED_COPPER_TRAPDOOR"),
           Material::WaxedCopperTrapdoor { .. } => f.write_str("WAXED_COPPER_TRAPDOOR"),
           Material::WaxedExposedCopperTrapdoor { .. } => f.write_str("WAXED_EXPOSED_COPPER_TRAPDOOR"),
           Material::WaxedWeatheredCopperTrapdoor { .. } => f.write_str("WAXED_WEATHERED_COPPER_TRAPDOOR"),
           Material::WaxedOxidizedCopperTrapdoor { .. } => f.write_str("WAXED_OXIDIZED_COPPER_TRAPDOOR"),
           Material::OakFenceGate { .. } => f.write_str("OAK_FENCE_GATE"),
           Material::SpruceFenceGate { .. } => f.write_str("SPRUCE_FENCE_GATE"),
           Material::BirchFenceGate { .. } => f.write_str("BIRCH_FENCE_GATE"),
           Material::JungleFenceGate { .. } => f.write_str("JUNGLE_FENCE_GATE"),
           Material::AcaciaFenceGate { .. } => f.write_str("ACACIA_FENCE_GATE"),
           Material::CherryFenceGate { .. } => f.write_str("CHERRY_FENCE_GATE"),
           Material::DarkOakFenceGate { .. } => f.write_str("DARK_OAK_FENCE_GATE"),
           Material::MangroveFenceGate { .. } => f.write_str("MANGROVE_FENCE_GATE"),
           Material::BambooFenceGate { .. } => f.write_str("BAMBOO_FENCE_GATE"),
           Material::CrimsonFenceGate { .. } => f.write_str("CRIMSON_FENCE_GATE"),
           Material::WarpedFenceGate { .. } => f.write_str("WARPED_FENCE_GATE"),
           Material::PoweredRail { .. } => f.write_str("POWERED_RAIL"),
           Material::DetectorRail { .. } => f.write_str("DETECTOR_RAIL"),
           Material::Rail { .. } => f.write_str("RAIL"),
           Material::ActivatorRail { .. } => f.write_str("ACTIVATOR_RAIL"),
           Material::Saddle { .. } => f.write_str("SADDLE"),
           Material::Minecart { .. } => f.write_str("MINECART"),
           Material::ChestMinecart { .. } => f.write_str("CHEST_MINECART"),
           Material::FurnaceMinecart { .. } => f.write_str("FURNACE_MINECART"),
           Material::TntMinecart { .. } => f.write_str("TNT_MINECART"),
           Material::HopperMinecart { .. } => f.write_str("HOPPER_MINECART"),
           Material::CarrotOnAStick { .. } => f.write_str("CARROT_ON_A_STICK"),
           Material::WarpedFungusOnAStick { .. } => f.write_str("WARPED_FUNGUS_ON_A_STICK"),
           Material::Elytra { .. } => f.write_str("ELYTRA"),
           Material::OakBoat { .. } => f.write_str("OAK_BOAT"),
           Material::OakChestBoat { .. } => f.write_str("OAK_CHEST_BOAT"),
           Material::SpruceBoat { .. } => f.write_str("SPRUCE_BOAT"),
           Material::SpruceChestBoat { .. } => f.write_str("SPRUCE_CHEST_BOAT"),
           Material::BirchBoat { .. } => f.write_str("BIRCH_BOAT"),
           Material::BirchChestBoat { .. } => f.write_str("BIRCH_CHEST_BOAT"),
           Material::JungleBoat { .. } => f.write_str("JUNGLE_BOAT"),
           Material::JungleChestBoat { .. } => f.write_str("JUNGLE_CHEST_BOAT"),
           Material::AcaciaBoat { .. } => f.write_str("ACACIA_BOAT"),
           Material::AcaciaChestBoat { .. } => f.write_str("ACACIA_CHEST_BOAT"),
           Material::CherryBoat { .. } => f.write_str("CHERRY_BOAT"),
           Material::CherryChestBoat { .. } => f.write_str("CHERRY_CHEST_BOAT"),
           Material::DarkOakBoat { .. } => f.write_str("DARK_OAK_BOAT"),
           Material::DarkOakChestBoat { .. } => f.write_str("DARK_OAK_CHEST_BOAT"),
           Material::MangroveBoat { .. } => f.write_str("MANGROVE_BOAT"),
           Material::MangroveChestBoat { .. } => f.write_str("MANGROVE_CHEST_BOAT"),
           Material::BambooRaft { .. } => f.write_str("BAMBOO_RAFT"),
           Material::BambooChestRaft { .. } => f.write_str("BAMBOO_CHEST_RAFT"),
           Material::StructureBlock { .. } => f.write_str("STRUCTURE_BLOCK"),
           Material::Jigsaw { .. } => f.write_str("JIGSAW"),
           Material::TurtleHelmet { .. } => f.write_str("TURTLE_HELMET"),
           Material::Scute { .. } => f.write_str("SCUTE"),
           Material::FlintAndSteel { .. } => f.write_str("FLINT_AND_STEEL"),
           Material::Apple { .. } => f.write_str("APPLE"),
           Material::Bow { .. } => f.write_str("BOW"),
           Material::Arrow { .. } => f.write_str("ARROW"),
           Material::Coal { .. } => f.write_str("COAL"),
           Material::Charcoal { .. } => f.write_str("CHARCOAL"),
           Material::Diamond { .. } => f.write_str("DIAMOND"),
           Material::Emerald { .. } => f.write_str("EMERALD"),
           Material::LapisLazuli { .. } => f.write_str("LAPIS_LAZULI"),
           Material::Quartz { .. } => f.write_str("QUARTZ"),
           Material::AmethystShard { .. } => f.write_str("AMETHYST_SHARD"),
           Material::RawIron { .. } => f.write_str("RAW_IRON"),
           Material::IronIngot { .. } => f.write_str("IRON_INGOT"),
           Material::RawCopper { .. } => f.write_str("RAW_COPPER"),
           Material::CopperIngot { .. } => f.write_str("COPPER_INGOT"),
           Material::RawGold { .. } => f.write_str("RAW_GOLD"),
           Material::GoldIngot { .. } => f.write_str("GOLD_INGOT"),
           Material::NetheriteIngot { .. } => f.write_str("NETHERITE_INGOT"),
           Material::NetheriteScrap { .. } => f.write_str("NETHERITE_SCRAP"),
           Material::WoodenSword { .. } => f.write_str("WOODEN_SWORD"),
           Material::WoodenShovel { .. } => f.write_str("WOODEN_SHOVEL"),
           Material::WoodenPickaxe { .. } => f.write_str("WOODEN_PICKAXE"),
           Material::WoodenAxe { .. } => f.write_str("WOODEN_AXE"),
           Material::WoodenHoe { .. } => f.write_str("WOODEN_HOE"),
           Material::StoneSword { .. } => f.write_str("STONE_SWORD"),
           Material::StoneShovel { .. } => f.write_str("STONE_SHOVEL"),
           Material::StonePickaxe { .. } => f.write_str("STONE_PICKAXE"),
           Material::StoneAxe { .. } => f.write_str("STONE_AXE"),
           Material::StoneHoe { .. } => f.write_str("STONE_HOE"),
           Material::GoldenSword { .. } => f.write_str("GOLDEN_SWORD"),
           Material::GoldenShovel { .. } => f.write_str("GOLDEN_SHOVEL"),
           Material::GoldenPickaxe { .. } => f.write_str("GOLDEN_PICKAXE"),
           Material::GoldenAxe { .. } => f.write_str("GOLDEN_AXE"),
           Material::GoldenHoe { .. } => f.write_str("GOLDEN_HOE"),
           Material::IronSword { .. } => f.write_str("IRON_SWORD"),
           Material::IronShovel { .. } => f.write_str("IRON_SHOVEL"),
           Material::IronPickaxe { .. } => f.write_str("IRON_PICKAXE"),
           Material::IronAxe { .. } => f.write_str("IRON_AXE"),
           Material::IronHoe { .. } => f.write_str("IRON_HOE"),
           Material::DiamondSword { .. } => f.write_str("DIAMOND_SWORD"),
           Material::DiamondShovel { .. } => f.write_str("DIAMOND_SHOVEL"),
           Material::DiamondPickaxe { .. } => f.write_str("DIAMOND_PICKAXE"),
           Material::DiamondAxe { .. } => f.write_str("DIAMOND_AXE"),
           Material::DiamondHoe { .. } => f.write_str("DIAMOND_HOE"),
           Material::NetheriteSword { .. } => f.write_str("NETHERITE_SWORD"),
           Material::NetheriteShovel { .. } => f.write_str("NETHERITE_SHOVEL"),
           Material::NetheritePickaxe { .. } => f.write_str("NETHERITE_PICKAXE"),
           Material::NetheriteAxe { .. } => f.write_str("NETHERITE_AXE"),
           Material::NetheriteHoe { .. } => f.write_str("NETHERITE_HOE"),
           Material::Stick { .. } => f.write_str("STICK"),
           Material::Bowl { .. } => f.write_str("BOWL"),
           Material::MushroomStew { .. } => f.write_str("MUSHROOM_STEW"),
           Material::String { .. } => f.write_str("STRING"),
           Material::Feather { .. } => f.write_str("FEATHER"),
           Material::Gunpowder { .. } => f.write_str("GUNPOWDER"),
           Material::WheatSeeds { .. } => f.write_str("WHEAT_SEEDS"),
           Material::Wheat { .. } => f.write_str("WHEAT"),
           Material::Bread { .. } => f.write_str("BREAD"),
           Material::LeatherHelmet { .. } => f.write_str("LEATHER_HELMET"),
           Material::LeatherChestplate { .. } => f.write_str("LEATHER_CHESTPLATE"),
           Material::LeatherLeggings { .. } => f.write_str("LEATHER_LEGGINGS"),
           Material::LeatherBoots { .. } => f.write_str("LEATHER_BOOTS"),
           Material::ChainmailHelmet { .. } => f.write_str("CHAINMAIL_HELMET"),
           Material::ChainmailChestplate { .. } => f.write_str("CHAINMAIL_CHESTPLATE"),
           Material::ChainmailLeggings { .. } => f.write_str("CHAINMAIL_LEGGINGS"),
           Material::ChainmailBoots { .. } => f.write_str("CHAINMAIL_BOOTS"),
           Material::IronHelmet { .. } => f.write_str("IRON_HELMET"),
           Material::IronChestplate { .. } => f.write_str("IRON_CHESTPLATE"),
           Material::IronLeggings { .. } => f.write_str("IRON_LEGGINGS"),
           Material::IronBoots { .. } => f.write_str("IRON_BOOTS"),
           Material::DiamondHelmet { .. } => f.write_str("DIAMOND_HELMET"),
           Material::DiamondChestplate { .. } => f.write_str("DIAMOND_CHESTPLATE"),
           Material::DiamondLeggings { .. } => f.write_str("DIAMOND_LEGGINGS"),
           Material::DiamondBoots { .. } => f.write_str("DIAMOND_BOOTS"),
           Material::GoldenHelmet { .. } => f.write_str("GOLDEN_HELMET"),
           Material::GoldenChestplate { .. } => f.write_str("GOLDEN_CHESTPLATE"),
           Material::GoldenLeggings { .. } => f.write_str("GOLDEN_LEGGINGS"),
           Material::GoldenBoots { .. } => f.write_str("GOLDEN_BOOTS"),
           Material::NetheriteHelmet { .. } => f.write_str("NETHERITE_HELMET"),
           Material::NetheriteChestplate { .. } => f.write_str("NETHERITE_CHESTPLATE"),
           Material::NetheriteLeggings { .. } => f.write_str("NETHERITE_LEGGINGS"),
           Material::NetheriteBoots { .. } => f.write_str("NETHERITE_BOOTS"),
           Material::Flint { .. } => f.write_str("FLINT"),
           Material::Porkchop { .. } => f.write_str("PORKCHOP"),
           Material::CookedPorkchop { .. } => f.write_str("COOKED_PORKCHOP"),
           Material::Painting { .. } => f.write_str("PAINTING"),
           Material::GoldenApple { .. } => f.write_str("GOLDEN_APPLE"),
           Material::EnchantedGoldenApple { .. } => f.write_str("ENCHANTED_GOLDEN_APPLE"),
           Material::OakSign { .. } => f.write_str("OAK_SIGN"),
           Material::SpruceSign { .. } => f.write_str("SPRUCE_SIGN"),
           Material::BirchSign { .. } => f.write_str("BIRCH_SIGN"),
           Material::JungleSign { .. } => f.write_str("JUNGLE_SIGN"),
           Material::AcaciaSign { .. } => f.write_str("ACACIA_SIGN"),
           Material::CherrySign { .. } => f.write_str("CHERRY_SIGN"),
           Material::DarkOakSign { .. } => f.write_str("DARK_OAK_SIGN"),
           Material::MangroveSign { .. } => f.write_str("MANGROVE_SIGN"),
           Material::BambooSign { .. } => f.write_str("BAMBOO_SIGN"),
           Material::CrimsonSign { .. } => f.write_str("CRIMSON_SIGN"),
           Material::WarpedSign { .. } => f.write_str("WARPED_SIGN"),
           Material::OakHangingSign { .. } => f.write_str("OAK_HANGING_SIGN"),
           Material::SpruceHangingSign { .. } => f.write_str("SPRUCE_HANGING_SIGN"),
           Material::BirchHangingSign { .. } => f.write_str("BIRCH_HANGING_SIGN"),
           Material::JungleHangingSign { .. } => f.write_str("JUNGLE_HANGING_SIGN"),
           Material::AcaciaHangingSign { .. } => f.write_str("ACACIA_HANGING_SIGN"),
           Material::CherryHangingSign { .. } => f.write_str("CHERRY_HANGING_SIGN"),
           Material::DarkOakHangingSign { .. } => f.write_str("DARK_OAK_HANGING_SIGN"),
           Material::MangroveHangingSign { .. } => f.write_str("MANGROVE_HANGING_SIGN"),
           Material::BambooHangingSign { .. } => f.write_str("BAMBOO_HANGING_SIGN"),
           Material::CrimsonHangingSign { .. } => f.write_str("CRIMSON_HANGING_SIGN"),
           Material::WarpedHangingSign { .. } => f.write_str("WARPED_HANGING_SIGN"),
           Material::Bucket { .. } => f.write_str("BUCKET"),
           Material::WaterBucket { .. } => f.write_str("WATER_BUCKET"),
           Material::LavaBucket { .. } => f.write_str("LAVA_BUCKET"),
           Material::PowderSnowBucket { .. } => f.write_str("POWDER_SNOW_BUCKET"),
           Material::Snowball { .. } => f.write_str("SNOWBALL"),
           Material::Leather { .. } => f.write_str("LEATHER"),
           Material::MilkBucket { .. } => f.write_str("MILK_BUCKET"),
           Material::PufferfishBucket { .. } => f.write_str("PUFFERFISH_BUCKET"),
           Material::SalmonBucket { .. } => f.write_str("SALMON_BUCKET"),
           Material::CodBucket { .. } => f.write_str("COD_BUCKET"),
           Material::TropicalFishBucket { .. } => f.write_str("TROPICAL_FISH_BUCKET"),
           Material::AxolotlBucket { .. } => f.write_str("AXOLOTL_BUCKET"),
           Material::TadpoleBucket { .. } => f.write_str("TADPOLE_BUCKET"),
           Material::Brick { .. } => f.write_str("BRICK"),
           Material::ClayBall { .. } => f.write_str("CLAY_BALL"),
           Material::DriedKelpBlock { .. } => f.write_str("DRIED_KELP_BLOCK"),
           Material::Paper { .. } => f.write_str("PAPER"),
           Material::Book { .. } => f.write_str("BOOK"),
           Material::SlimeBall { .. } => f.write_str("SLIME_BALL"),
           Material::Egg { .. } => f.write_str("EGG"),
           Material::Compass { .. } => f.write_str("COMPASS"),
           Material::RecoveryCompass { .. } => f.write_str("RECOVERY_COMPASS"),
           Material::Bundle { .. } => f.write_str("BUNDLE"),
           Material::FishingRod { .. } => f.write_str("FISHING_ROD"),
           Material::Clock { .. } => f.write_str("CLOCK"),
           Material::Spyglass { .. } => f.write_str("SPYGLASS"),
           Material::GlowstoneDust { .. } => f.write_str("GLOWSTONE_DUST"),
           Material::Cod { .. } => f.write_str("COD"),
           Material::Salmon { .. } => f.write_str("SALMON"),
           Material::TropicalFish { .. } => f.write_str("TROPICAL_FISH"),
           Material::Pufferfish { .. } => f.write_str("PUFFERFISH"),
           Material::CookedCod { .. } => f.write_str("COOKED_COD"),
           Material::CookedSalmon { .. } => f.write_str("COOKED_SALMON"),
           Material::InkSac { .. } => f.write_str("INK_SAC"),
           Material::GlowInkSac { .. } => f.write_str("GLOW_INK_SAC"),
           Material::CocoaBeans { .. } => f.write_str("COCOA_BEANS"),
           Material::WhiteDye { .. } => f.write_str("WHITE_DYE"),
           Material::OrangeDye { .. } => f.write_str("ORANGE_DYE"),
           Material::MagentaDye { .. } => f.write_str("MAGENTA_DYE"),
           Material::LightBlueDye { .. } => f.write_str("LIGHT_BLUE_DYE"),
           Material::YellowDye { .. } => f.write_str("YELLOW_DYE"),
           Material::LimeDye { .. } => f.write_str("LIME_DYE"),
           Material::PinkDye { .. } => f.write_str("PINK_DYE"),
           Material::GrayDye { .. } => f.write_str("GRAY_DYE"),
           Material::LightGrayDye { .. } => f.write_str("LIGHT_GRAY_DYE"),
           Material::CyanDye { .. } => f.write_str("CYAN_DYE"),
           Material::PurpleDye { .. } => f.write_str("PURPLE_DYE"),
           Material::BlueDye { .. } => f.write_str("BLUE_DYE"),
           Material::BrownDye { .. } => f.write_str("BROWN_DYE"),
           Material::GreenDye { .. } => f.write_str("GREEN_DYE"),
           Material::RedDye { .. } => f.write_str("RED_DYE"),
           Material::BlackDye { .. } => f.write_str("BLACK_DYE"),
           Material::BoneMeal { .. } => f.write_str("BONE_MEAL"),
           Material::Bone { .. } => f.write_str("BONE"),
           Material::Sugar { .. } => f.write_str("SUGAR"),
           Material::Cake { .. } => f.write_str("CAKE"),
           Material::WhiteBed { .. } => f.write_str("WHITE_BED"),
           Material::OrangeBed { .. } => f.write_str("ORANGE_BED"),
           Material::MagentaBed { .. } => f.write_str("MAGENTA_BED"),
           Material::LightBlueBed { .. } => f.write_str("LIGHT_BLUE_BED"),
           Material::YellowBed { .. } => f.write_str("YELLOW_BED"),
           Material::LimeBed { .. } => f.write_str("LIME_BED"),
           Material::PinkBed { .. } => f.write_str("PINK_BED"),
           Material::GrayBed { .. } => f.write_str("GRAY_BED"),
           Material::LightGrayBed { .. } => f.write_str("LIGHT_GRAY_BED"),
           Material::CyanBed { .. } => f.write_str("CYAN_BED"),
           Material::PurpleBed { .. } => f.write_str("PURPLE_BED"),
           Material::BlueBed { .. } => f.write_str("BLUE_BED"),
           Material::BrownBed { .. } => f.write_str("BROWN_BED"),
           Material::GreenBed { .. } => f.write_str("GREEN_BED"),
           Material::RedBed { .. } => f.write_str("RED_BED"),
           Material::BlackBed { .. } => f.write_str("BLACK_BED"),
           Material::Cookie { .. } => f.write_str("COOKIE"),
           Material::Crafter { .. } => f.write_str("CRAFTER"),
           Material::FilledMap { .. } => f.write_str("FILLED_MAP"),
           Material::Shears { .. } => f.write_str("SHEARS"),
           Material::MelonSlice { .. } => f.write_str("MELON_SLICE"),
           Material::DriedKelp { .. } => f.write_str("DRIED_KELP"),
           Material::PumpkinSeeds { .. } => f.write_str("PUMPKIN_SEEDS"),
           Material::MelonSeeds { .. } => f.write_str("MELON_SEEDS"),
           Material::Beef { .. } => f.write_str("BEEF"),
           Material::CookedBeef { .. } => f.write_str("COOKED_BEEF"),
           Material::Chicken { .. } => f.write_str("CHICKEN"),
           Material::CookedChicken { .. } => f.write_str("COOKED_CHICKEN"),
           Material::RottenFlesh { .. } => f.write_str("ROTTEN_FLESH"),
           Material::EnderPearl { .. } => f.write_str("ENDER_PEARL"),
           Material::BlazeRod { .. } => f.write_str("BLAZE_ROD"),
           Material::GhastTear { .. } => f.write_str("GHAST_TEAR"),
           Material::GoldNugget { .. } => f.write_str("GOLD_NUGGET"),
           Material::NetherWart { .. } => f.write_str("NETHER_WART"),
           Material::Potion { .. } => f.write_str("POTION"),
           Material::GlassBottle { .. } => f.write_str("GLASS_BOTTLE"),
           Material::SpiderEye { .. } => f.write_str("SPIDER_EYE"),
           Material::FermentedSpiderEye { .. } => f.write_str("FERMENTED_SPIDER_EYE"),
           Material::BlazePowder { .. } => f.write_str("BLAZE_POWDER"),
           Material::MagmaCream { .. } => f.write_str("MAGMA_CREAM"),
           Material::BrewingStand { .. } => f.write_str("BREWING_STAND"),
           Material::Cauldron { .. } => f.write_str("CAULDRON"),
           Material::EnderEye { .. } => f.write_str("ENDER_EYE"),
           Material::GlisteringMelonSlice { .. } => f.write_str("GLISTERING_MELON_SLICE"),
           Material::AllaySpawnEgg { .. } => f.write_str("ALLAY_SPAWN_EGG"),
           Material::AxolotlSpawnEgg { .. } => f.write_str("AXOLOTL_SPAWN_EGG"),
           Material::BatSpawnEgg { .. } => f.write_str("BAT_SPAWN_EGG"),
           Material::BeeSpawnEgg { .. } => f.write_str("BEE_SPAWN_EGG"),
           Material::BlazeSpawnEgg { .. } => f.write_str("BLAZE_SPAWN_EGG"),
           Material::BreezeSpawnEgg { .. } => f.write_str("BREEZE_SPAWN_EGG"),
           Material::CatSpawnEgg { .. } => f.write_str("CAT_SPAWN_EGG"),
           Material::CamelSpawnEgg { .. } => f.write_str("CAMEL_SPAWN_EGG"),
           Material::CaveSpiderSpawnEgg { .. } => f.write_str("CAVE_SPIDER_SPAWN_EGG"),
           Material::ChickenSpawnEgg { .. } => f.write_str("CHICKEN_SPAWN_EGG"),
           Material::CodSpawnEgg { .. } => f.write_str("COD_SPAWN_EGG"),
           Material::CowSpawnEgg { .. } => f.write_str("COW_SPAWN_EGG"),
           Material::CreeperSpawnEgg { .. } => f.write_str("CREEPER_SPAWN_EGG"),
           Material::DolphinSpawnEgg { .. } => f.write_str("DOLPHIN_SPAWN_EGG"),
           Material::DonkeySpawnEgg { .. } => f.write_str("DONKEY_SPAWN_EGG"),
           Material::DrownedSpawnEgg { .. } => f.write_str("DROWNED_SPAWN_EGG"),
           Material::ElderGuardianSpawnEgg { .. } => f.write_str("ELDER_GUARDIAN_SPAWN_EGG"),
           Material::EnderDragonSpawnEgg { .. } => f.write_str("ENDER_DRAGON_SPAWN_EGG"),
           Material::EndermanSpawnEgg { .. } => f.write_str("ENDERMAN_SPAWN_EGG"),
           Material::EndermiteSpawnEgg { .. } => f.write_str("ENDERMITE_SPAWN_EGG"),
           Material::EvokerSpawnEgg { .. } => f.write_str("EVOKER_SPAWN_EGG"),
           Material::FoxSpawnEgg { .. } => f.write_str("FOX_SPAWN_EGG"),
           Material::FrogSpawnEgg { .. } => f.write_str("FROG_SPAWN_EGG"),
           Material::GhastSpawnEgg { .. } => f.write_str("GHAST_SPAWN_EGG"),
           Material::GlowSquidSpawnEgg { .. } => f.write_str("GLOW_SQUID_SPAWN_EGG"),
           Material::GoatSpawnEgg { .. } => f.write_str("GOAT_SPAWN_EGG"),
           Material::GuardianSpawnEgg { .. } => f.write_str("GUARDIAN_SPAWN_EGG"),
           Material::HoglinSpawnEgg { .. } => f.write_str("HOGLIN_SPAWN_EGG"),
           Material::HorseSpawnEgg { .. } => f.write_str("HORSE_SPAWN_EGG"),
           Material::HuskSpawnEgg { .. } => f.write_str("HUSK_SPAWN_EGG"),
           Material::IronGolemSpawnEgg { .. } => f.write_str("IRON_GOLEM_SPAWN_EGG"),
           Material::LlamaSpawnEgg { .. } => f.write_str("LLAMA_SPAWN_EGG"),
           Material::MagmaCubeSpawnEgg { .. } => f.write_str("MAGMA_CUBE_SPAWN_EGG"),
           Material::MooshroomSpawnEgg { .. } => f.write_str("MOOSHROOM_SPAWN_EGG"),
           Material::MuleSpawnEgg { .. } => f.write_str("MULE_SPAWN_EGG"),
           Material::OcelotSpawnEgg { .. } => f.write_str("OCELOT_SPAWN_EGG"),
           Material::PandaSpawnEgg { .. } => f.write_str("PANDA_SPAWN_EGG"),
           Material::ParrotSpawnEgg { .. } => f.write_str("PARROT_SPAWN_EGG"),
           Material::PhantomSpawnEgg { .. } => f.write_str("PHANTOM_SPAWN_EGG"),
           Material::PigSpawnEgg { .. } => f.write_str("PIG_SPAWN_EGG"),
           Material::PiglinSpawnEgg { .. } => f.write_str("PIGLIN_SPAWN_EGG"),
           Material::PiglinBruteSpawnEgg { .. } => f.write_str("PIGLIN_BRUTE_SPAWN_EGG"),
           Material::PillagerSpawnEgg { .. } => f.write_str("PILLAGER_SPAWN_EGG"),
           Material::PolarBearSpawnEgg { .. } => f.write_str("POLAR_BEAR_SPAWN_EGG"),
           Material::PufferfishSpawnEgg { .. } => f.write_str("PUFFERFISH_SPAWN_EGG"),
           Material::RabbitSpawnEgg { .. } => f.write_str("RABBIT_SPAWN_EGG"),
           Material::RavagerSpawnEgg { .. } => f.write_str("RAVAGER_SPAWN_EGG"),
           Material::SalmonSpawnEgg { .. } => f.write_str("SALMON_SPAWN_EGG"),
           Material::SheepSpawnEgg { .. } => f.write_str("SHEEP_SPAWN_EGG"),
           Material::ShulkerSpawnEgg { .. } => f.write_str("SHULKER_SPAWN_EGG"),
           Material::SilverfishSpawnEgg { .. } => f.write_str("SILVERFISH_SPAWN_EGG"),
           Material::SkeletonSpawnEgg { .. } => f.write_str("SKELETON_SPAWN_EGG"),
           Material::SkeletonHorseSpawnEgg { .. } => f.write_str("SKELETON_HORSE_SPAWN_EGG"),
           Material::SlimeSpawnEgg { .. } => f.write_str("SLIME_SPAWN_EGG"),
           Material::SnifferSpawnEgg { .. } => f.write_str("SNIFFER_SPAWN_EGG"),
           Material::SnowGolemSpawnEgg { .. } => f.write_str("SNOW_GOLEM_SPAWN_EGG"),
           Material::SpiderSpawnEgg { .. } => f.write_str("SPIDER_SPAWN_EGG"),
           Material::SquidSpawnEgg { .. } => f.write_str("SQUID_SPAWN_EGG"),
           Material::StraySpawnEgg { .. } => f.write_str("STRAY_SPAWN_EGG"),
           Material::StriderSpawnEgg { .. } => f.write_str("STRIDER_SPAWN_EGG"),
           Material::TadpoleSpawnEgg { .. } => f.write_str("TADPOLE_SPAWN_EGG"),
           Material::TraderLlamaSpawnEgg { .. } => f.write_str("TRADER_LLAMA_SPAWN_EGG"),
           Material::TropicalFishSpawnEgg { .. } => f.write_str("TROPICAL_FISH_SPAWN_EGG"),
           Material::TurtleSpawnEgg { .. } => f.write_str("TURTLE_SPAWN_EGG"),
           Material::VexSpawnEgg { .. } => f.write_str("VEX_SPAWN_EGG"),
           Material::VillagerSpawnEgg { .. } => f.write_str("VILLAGER_SPAWN_EGG"),
           Material::VindicatorSpawnEgg { .. } => f.write_str("VINDICATOR_SPAWN_EGG"),
           Material::WanderingTraderSpawnEgg { .. } => f.write_str("WANDERING_TRADER_SPAWN_EGG"),
           Material::WardenSpawnEgg { .. } => f.write_str("WARDEN_SPAWN_EGG"),
           Material::WitchSpawnEgg { .. } => f.write_str("WITCH_SPAWN_EGG"),
           Material::WitherSpawnEgg { .. } => f.write_str("WITHER_SPAWN_EGG"),
           Material::WitherSkeletonSpawnEgg { .. } => f.write_str("WITHER_SKELETON_SPAWN_EGG"),
           Material::WolfSpawnEgg { .. } => f.write_str("WOLF_SPAWN_EGG"),
           Material::ZoglinSpawnEgg { .. } => f.write_str("ZOGLIN_SPAWN_EGG"),
           Material::ZombieSpawnEgg { .. } => f.write_str("ZOMBIE_SPAWN_EGG"),
           Material::ZombieHorseSpawnEgg { .. } => f.write_str("ZOMBIE_HORSE_SPAWN_EGG"),
           Material::ZombieVillagerSpawnEgg { .. } => f.write_str("ZOMBIE_VILLAGER_SPAWN_EGG"),
           Material::ZombifiedPiglinSpawnEgg { .. } => f.write_str("ZOMBIFIED_PIGLIN_SPAWN_EGG"),
           Material::ExperienceBottle { .. } => f.write_str("EXPERIENCE_BOTTLE"),
           Material::FireCharge { .. } => f.write_str("FIRE_CHARGE"),
           Material::WritableBook { .. } => f.write_str("WRITABLE_BOOK"),
           Material::WrittenBook { .. } => f.write_str("WRITTEN_BOOK"),
           Material::ItemFrame { .. } => f.write_str("ITEM_FRAME"),
           Material::GlowItemFrame { .. } => f.write_str("GLOW_ITEM_FRAME"),
           Material::FlowerPot { .. } => f.write_str("FLOWER_POT"),
           Material::Carrot { .. } => f.write_str("CARROT"),
           Material::Potato { .. } => f.write_str("POTATO"),
           Material::BakedPotato { .. } => f.write_str("BAKED_POTATO"),
           Material::PoisonousPotato { .. } => f.write_str("POISONOUS_POTATO"),
           Material::Map { .. } => f.write_str("MAP"),
           Material::GoldenCarrot { .. } => f.write_str("GOLDEN_CARROT"),
           Material::SkeletonSkull { .. } => f.write_str("SKELETON_SKULL"),
           Material::WitherSkeletonSkull { .. } => f.write_str("WITHER_SKELETON_SKULL"),
           Material::PlayerHead { .. } => f.write_str("PLAYER_HEAD"),
           Material::ZombieHead { .. } => f.write_str("ZOMBIE_HEAD"),
           Material::CreeperHead { .. } => f.write_str("CREEPER_HEAD"),
           Material::DragonHead { .. } => f.write_str("DRAGON_HEAD"),
           Material::PiglinHead { .. } => f.write_str("PIGLIN_HEAD"),
           Material::NetherStar { .. } => f.write_str("NETHER_STAR"),
           Material::PumpkinPie { .. } => f.write_str("PUMPKIN_PIE"),
           Material::FireworkRocket { .. } => f.write_str("FIREWORK_ROCKET"),
           Material::FireworkStar { .. } => f.write_str("FIREWORK_STAR"),
           Material::EnchantedBook { .. } => f.write_str("ENCHANTED_BOOK"),
           Material::NetherBrick { .. } => f.write_str("NETHER_BRICK"),
           Material::PrismarineShard { .. } => f.write_str("PRISMARINE_SHARD"),
           Material::PrismarineCrystals { .. } => f.write_str("PRISMARINE_CRYSTALS"),
           Material::Rabbit { .. } => f.write_str("RABBIT"),
           Material::CookedRabbit { .. } => f.write_str("COOKED_RABBIT"),
           Material::RabbitStew { .. } => f.write_str("RABBIT_STEW"),
           Material::RabbitFoot { .. } => f.write_str("RABBIT_FOOT"),
           Material::RabbitHide { .. } => f.write_str("RABBIT_HIDE"),
           Material::ArmorStand { .. } => f.write_str("ARMOR_STAND"),
           Material::IronHorseArmor { .. } => f.write_str("IRON_HORSE_ARMOR"),
           Material::GoldenHorseArmor { .. } => f.write_str("GOLDEN_HORSE_ARMOR"),
           Material::DiamondHorseArmor { .. } => f.write_str("DIAMOND_HORSE_ARMOR"),
           Material::LeatherHorseArmor { .. } => f.write_str("LEATHER_HORSE_ARMOR"),
           Material::Lead { .. } => f.write_str("LEAD"),
           Material::NameTag { .. } => f.write_str("NAME_TAG"),
           Material::CommandBlockMinecart { .. } => f.write_str("COMMAND_BLOCK_MINECART"),
           Material::Mutton { .. } => f.write_str("MUTTON"),
           Material::CookedMutton { .. } => f.write_str("COOKED_MUTTON"),
           Material::WhiteBanner { .. } => f.write_str("WHITE_BANNER"),
           Material::OrangeBanner { .. } => f.write_str("ORANGE_BANNER"),
           Material::MagentaBanner { .. } => f.write_str("MAGENTA_BANNER"),
           Material::LightBlueBanner { .. } => f.write_str("LIGHT_BLUE_BANNER"),
           Material::YellowBanner { .. } => f.write_str("YELLOW_BANNER"),
           Material::LimeBanner { .. } => f.write_str("LIME_BANNER"),
           Material::PinkBanner { .. } => f.write_str("PINK_BANNER"),
           Material::GrayBanner { .. } => f.write_str("GRAY_BANNER"),
           Material::LightGrayBanner { .. } => f.write_str("LIGHT_GRAY_BANNER"),
           Material::CyanBanner { .. } => f.write_str("CYAN_BANNER"),
           Material::PurpleBanner { .. } => f.write_str("PURPLE_BANNER"),
           Material::BlueBanner { .. } => f.write_str("BLUE_BANNER"),
           Material::BrownBanner { .. } => f.write_str("BROWN_BANNER"),
           Material::GreenBanner { .. } => f.write_str("GREEN_BANNER"),
           Material::RedBanner { .. } => f.write_str("RED_BANNER"),
           Material::BlackBanner { .. } => f.write_str("BLACK_BANNER"),
           Material::EndCrystal { .. } => f.write_str("END_CRYSTAL"),
           Material::ChorusFruit { .. } => f.write_str("CHORUS_FRUIT"),
           Material::PoppedChorusFruit { .. } => f.write_str("POPPED_CHORUS_FRUIT"),
           Material::TorchflowerSeeds { .. } => f.write_str("TORCHFLOWER_SEEDS"),
           Material::PitcherPod { .. } => f.write_str("PITCHER_POD"),
           Material::Beetroot { .. } => f.write_str("BEETROOT"),
           Material::BeetrootSeeds { .. } => f.write_str("BEETROOT_SEEDS"),
           Material::BeetrootSoup { .. } => f.write_str("BEETROOT_SOUP"),
           Material::DragonBreath { .. } => f.write_str("DRAGON_BREATH"),
           Material::SplashPotion { .. } => f.write_str("SPLASH_POTION"),
           Material::SpectralArrow { .. } => f.write_str("SPECTRAL_ARROW"),
           Material::TippedArrow { .. } => f.write_str("TIPPED_ARROW"),
           Material::LingeringPotion { .. } => f.write_str("LINGERING_POTION"),
           Material::Shield { .. } => f.write_str("SHIELD"),
           Material::TotemOfUndying { .. } => f.write_str("TOTEM_OF_UNDYING"),
           Material::ShulkerShell { .. } => f.write_str("SHULKER_SHELL"),
           Material::IronNugget { .. } => f.write_str("IRON_NUGGET"),
           Material::KnowledgeBook { .. } => f.write_str("KNOWLEDGE_BOOK"),
           Material::DebugStick { .. } => f.write_str("DEBUG_STICK"),
           Material::MusicDisc13 { .. } => f.write_str("MUSIC_DISC_13"),
           Material::MusicDiscCat { .. } => f.write_str("MUSIC_DISC_CAT"),
           Material::MusicDiscBlocks { .. } => f.write_str("MUSIC_DISC_BLOCKS"),
           Material::MusicDiscChirp { .. } => f.write_str("MUSIC_DISC_CHIRP"),
           Material::MusicDiscFar { .. } => f.write_str("MUSIC_DISC_FAR"),
           Material::MusicDiscMall { .. } => f.write_str("MUSIC_DISC_MALL"),
           Material::MusicDiscMellohi { .. } => f.write_str("MUSIC_DISC_MELLOHI"),
           Material::MusicDiscStal { .. } => f.write_str("MUSIC_DISC_STAL"),
           Material::MusicDiscStrad { .. } => f.write_str("MUSIC_DISC_STRAD"),
           Material::MusicDiscWard { .. } => f.write_str("MUSIC_DISC_WARD"),
           Material::MusicDisc11 { .. } => f.write_str("MUSIC_DISC_11"),
           Material::MusicDiscWait { .. } => f.write_str("MUSIC_DISC_WAIT"),
           Material::MusicDiscOtherside { .. } => f.write_str("MUSIC_DISC_OTHERSIDE"),
           Material::MusicDiscRelic { .. } => f.write_str("MUSIC_DISC_RELIC"),
           Material::MusicDisc5 { .. } => f.write_str("MUSIC_DISC_5"),
           Material::MusicDiscPigstep { .. } => f.write_str("MUSIC_DISC_PIGSTEP"),
           Material::DiscFragment5 { .. } => f.write_str("DISC_FRAGMENT_5"),
           Material::Trident { .. } => f.write_str("TRIDENT"),
           Material::PhantomMembrane { .. } => f.write_str("PHANTOM_MEMBRANE"),
           Material::NautilusShell { .. } => f.write_str("NAUTILUS_SHELL"),
           Material::HeartOfTheSea { .. } => f.write_str("HEART_OF_THE_SEA"),
           Material::Crossbow { .. } => f.write_str("CROSSBOW"),
           Material::SuspiciousStew { .. } => f.write_str("SUSPICIOUS_STEW"),
           Material::Loom { .. } => f.write_str("LOOM"),
           Material::FlowerBannerPattern { .. } => f.write_str("FLOWER_BANNER_PATTERN"),
           Material::CreeperBannerPattern { .. } => f.write_str("CREEPER_BANNER_PATTERN"),
           Material::SkullBannerPattern { .. } => f.write_str("SKULL_BANNER_PATTERN"),
           Material::MojangBannerPattern { .. } => f.write_str("MOJANG_BANNER_PATTERN"),
           Material::GlobeBannerPattern { .. } => f.write_str("GLOBE_BANNER_PATTERN"),
           Material::PiglinBannerPattern { .. } => f.write_str("PIGLIN_BANNER_PATTERN"),
           Material::GoatHorn { .. } => f.write_str("GOAT_HORN"),
           Material::Composter { .. } => f.write_str("COMPOSTER"),
           Material::Barrel { .. } => f.write_str("BARREL"),
           Material::Smoker { .. } => f.write_str("SMOKER"),
           Material::BlastFurnace { .. } => f.write_str("BLAST_FURNACE"),
           Material::CartographyTable { .. } => f.write_str("CARTOGRAPHY_TABLE"),
           Material::FletchingTable { .. } => f.write_str("FLETCHING_TABLE"),
           Material::Grindstone { .. } => f.write_str("GRINDSTONE"),
           Material::SmithingTable { .. } => f.write_str("SMITHING_TABLE"),
           Material::Stonecutter { .. } => f.write_str("STONECUTTER"),
           Material::Bell { .. } => f.write_str("BELL"),
           Material::Lantern { .. } => f.write_str("LANTERN"),
           Material::SoulLantern { .. } => f.write_str("SOUL_LANTERN"),
           Material::SweetBerries { .. } => f.write_str("SWEET_BERRIES"),
           Material::GlowBerries { .. } => f.write_str("GLOW_BERRIES"),
           Material::Campfire { .. } => f.write_str("CAMPFIRE"),
           Material::SoulCampfire { .. } => f.write_str("SOUL_CAMPFIRE"),
           Material::Shroomlight { .. } => f.write_str("SHROOMLIGHT"),
           Material::Honeycomb { .. } => f.write_str("HONEYCOMB"),
           Material::BeeNest { .. } => f.write_str("BEE_NEST"),
           Material::Beehive { .. } => f.write_str("BEEHIVE"),
           Material::HoneyBottle { .. } => f.write_str("HONEY_BOTTLE"),
           Material::HoneycombBlock { .. } => f.write_str("HONEYCOMB_BLOCK"),
           Material::Lodestone { .. } => f.write_str("LODESTONE"),
           Material::CryingObsidian { .. } => f.write_str("CRYING_OBSIDIAN"),
           Material::Blackstone { .. } => f.write_str("BLACKSTONE"),
           Material::BlackstoneSlab { .. } => f.write_str("BLACKSTONE_SLAB"),
           Material::BlackstoneStairs { .. } => f.write_str("BLACKSTONE_STAIRS"),
           Material::GildedBlackstone { .. } => f.write_str("GILDED_BLACKSTONE"),
           Material::PolishedBlackstone { .. } => f.write_str("POLISHED_BLACKSTONE"),
           Material::PolishedBlackstoneSlab { .. } => f.write_str("POLISHED_BLACKSTONE_SLAB"),
           Material::PolishedBlackstoneStairs { .. } => f.write_str("POLISHED_BLACKSTONE_STAIRS"),
           Material::ChiseledPolishedBlackstone { .. } => f.write_str("CHISELED_POLISHED_BLACKSTONE"),
           Material::PolishedBlackstoneBricks { .. } => f.write_str("POLISHED_BLACKSTONE_BRICKS"),
           Material::PolishedBlackstoneBrickSlab { .. } => f.write_str("POLISHED_BLACKSTONE_BRICK_SLAB"),
           Material::PolishedBlackstoneBrickStairs { .. } => f.write_str("POLISHED_BLACKSTONE_BRICK_STAIRS"),
           Material::CrackedPolishedBlackstoneBricks { .. } => f.write_str("CRACKED_POLISHED_BLACKSTONE_BRICKS"),
           Material::RespawnAnchor { .. } => f.write_str("RESPAWN_ANCHOR"),
           Material::Candle { .. } => f.write_str("CANDLE"),
           Material::WhiteCandle { .. } => f.write_str("WHITE_CANDLE"),
           Material::OrangeCandle { .. } => f.write_str("ORANGE_CANDLE"),
           Material::MagentaCandle { .. } => f.write_str("MAGENTA_CANDLE"),
           Material::LightBlueCandle { .. } => f.write_str("LIGHT_BLUE_CANDLE"),
           Material::YellowCandle { .. } => f.write_str("YELLOW_CANDLE"),
           Material::LimeCandle { .. } => f.write_str("LIME_CANDLE"),
           Material::PinkCandle { .. } => f.write_str("PINK_CANDLE"),
           Material::GrayCandle { .. } => f.write_str("GRAY_CANDLE"),
           Material::LightGrayCandle { .. } => f.write_str("LIGHT_GRAY_CANDLE"),
           Material::CyanCandle { .. } => f.write_str("CYAN_CANDLE"),
           Material::PurpleCandle { .. } => f.write_str("PURPLE_CANDLE"),
           Material::BlueCandle { .. } => f.write_str("BLUE_CANDLE"),
           Material::BrownCandle { .. } => f.write_str("BROWN_CANDLE"),
           Material::GreenCandle { .. } => f.write_str("GREEN_CANDLE"),
           Material::RedCandle { .. } => f.write_str("RED_CANDLE"),
           Material::BlackCandle { .. } => f.write_str("BLACK_CANDLE"),
           Material::SmallAmethystBud { .. } => f.write_str("SMALL_AMETHYST_BUD"),
           Material::MediumAmethystBud { .. } => f.write_str("MEDIUM_AMETHYST_BUD"),
           Material::LargeAmethystBud { .. } => f.write_str("LARGE_AMETHYST_BUD"),
           Material::AmethystCluster { .. } => f.write_str("AMETHYST_CLUSTER"),
           Material::PointedDripstone { .. } => f.write_str("POINTED_DRIPSTONE"),
           Material::OchreFroglight { .. } => f.write_str("OCHRE_FROGLIGHT"),
           Material::VerdantFroglight { .. } => f.write_str("VERDANT_FROGLIGHT"),
           Material::PearlescentFroglight { .. } => f.write_str("PEARLESCENT_FROGLIGHT"),
           Material::Frogspawn { .. } => f.write_str("FROGSPAWN"),
           Material::EchoShard { .. } => f.write_str("ECHO_SHARD"),
           Material::Brush { .. } => f.write_str("BRUSH"),
           Material::NetheriteUpgradeSmithingTemplate { .. } => f.write_str("NETHERITE_UPGRADE_SMITHING_TEMPLATE"),
           Material::SentryArmorTrimSmithingTemplate { .. } => f.write_str("SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::DuneArmorTrimSmithingTemplate { .. } => f.write_str("DUNE_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::CoastArmorTrimSmithingTemplate { .. } => f.write_str("COAST_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::WildArmorTrimSmithingTemplate { .. } => f.write_str("WILD_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::WardArmorTrimSmithingTemplate { .. } => f.write_str("WARD_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::EyeArmorTrimSmithingTemplate { .. } => f.write_str("EYE_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::VexArmorTrimSmithingTemplate { .. } => f.write_str("VEX_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::TideArmorTrimSmithingTemplate { .. } => f.write_str("TIDE_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::SnoutArmorTrimSmithingTemplate { .. } => f.write_str("SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::RibArmorTrimSmithingTemplate { .. } => f.write_str("RIB_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::SpireArmorTrimSmithingTemplate { .. } => f.write_str("SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::WayfinderArmorTrimSmithingTemplate { .. } => f.write_str("WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::ShaperArmorTrimSmithingTemplate { .. } => f.write_str("SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::SilenceArmorTrimSmithingTemplate { .. } => f.write_str("SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::RaiserArmorTrimSmithingTemplate { .. } => f.write_str("RAISER_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::HostArmorTrimSmithingTemplate { .. } => f.write_str("HOST_ARMOR_TRIM_SMITHING_TEMPLATE"),
           Material::AnglerPotterySherd { .. } => f.write_str("ANGLER_POTTERY_SHERD"),
           Material::ArcherPotterySherd { .. } => f.write_str("ARCHER_POTTERY_SHERD"),
           Material::ArmsUpPotterySherd { .. } => f.write_str("ARMS_UP_POTTERY_SHERD"),
           Material::BladePotterySherd { .. } => f.write_str("BLADE_POTTERY_SHERD"),
           Material::BrewerPotterySherd { .. } => f.write_str("BREWER_POTTERY_SHERD"),
           Material::BurnPotterySherd { .. } => f.write_str("BURN_POTTERY_SHERD"),
           Material::DangerPotterySherd { .. } => f.write_str("DANGER_POTTERY_SHERD"),
           Material::ExplorerPotterySherd { .. } => f.write_str("EXPLORER_POTTERY_SHERD"),
           Material::FriendPotterySherd { .. } => f.write_str("FRIEND_POTTERY_SHERD"),
           Material::HeartPotterySherd { .. } => f.write_str("HEART_POTTERY_SHERD"),
           Material::HeartbreakPotterySherd { .. } => f.write_str("HEARTBREAK_POTTERY_SHERD"),
           Material::HowlPotterySherd { .. } => f.write_str("HOWL_POTTERY_SHERD"),
           Material::MinerPotterySherd { .. } => f.write_str("MINER_POTTERY_SHERD"),
           Material::MournerPotterySherd { .. } => f.write_str("MOURNER_POTTERY_SHERD"),
           Material::PlentyPotterySherd { .. } => f.write_str("PLENTY_POTTERY_SHERD"),
           Material::PrizePotterySherd { .. } => f.write_str("PRIZE_POTTERY_SHERD"),
           Material::SheafPotterySherd { .. } => f.write_str("SHEAF_POTTERY_SHERD"),
           Material::ShelterPotterySherd { .. } => f.write_str("SHELTER_POTTERY_SHERD"),
           Material::SkullPotterySherd { .. } => f.write_str("SKULL_POTTERY_SHERD"),
           Material::SnortPotterySherd { .. } => f.write_str("SNORT_POTTERY_SHERD"),
           Material::CopperGrate { .. } => f.write_str("COPPER_GRATE"),
           Material::ExposedCopperGrate { .. } => f.write_str("EXPOSED_COPPER_GRATE"),
           Material::WeatheredCopperGrate { .. } => f.write_str("WEATHERED_COPPER_GRATE"),
           Material::OxidizedCopperGrate { .. } => f.write_str("OXIDIZED_COPPER_GRATE"),
           Material::WaxedCopperGrate { .. } => f.write_str("WAXED_COPPER_GRATE"),
           Material::WaxedExposedCopperGrate { .. } => f.write_str("WAXED_EXPOSED_COPPER_GRATE"),
           Material::WaxedWeatheredCopperGrate { .. } => f.write_str("WAXED_WEATHERED_COPPER_GRATE"),
           Material::WaxedOxidizedCopperGrate { .. } => f.write_str("WAXED_OXIDIZED_COPPER_GRATE"),
           Material::CopperBulb { .. } => f.write_str("COPPER_BULB"),
           Material::ExposedCopperBulb { .. } => f.write_str("EXPOSED_COPPER_BULB"),
           Material::WeatheredCopperBulb { .. } => f.write_str("WEATHERED_COPPER_BULB"),
           Material::OxidizedCopperBulb { .. } => f.write_str("OXIDIZED_COPPER_BULB"),
           Material::WaxedCopperBulb { .. } => f.write_str("WAXED_COPPER_BULB"),
           Material::WaxedExposedCopperBulb { .. } => f.write_str("WAXED_EXPOSED_COPPER_BULB"),
           Material::WaxedWeatheredCopperBulb { .. } => f.write_str("WAXED_WEATHERED_COPPER_BULB"),
           Material::WaxedOxidizedCopperBulb { .. } => f.write_str("WAXED_OXIDIZED_COPPER_BULB"),
           Material::TrialSpawner { .. } => f.write_str("TRIAL_SPAWNER"),
           Material::TrialKey { .. } => f.write_str("TRIAL_KEY"),
           Material::Water { .. } => f.write_str("WATER"),
           Material::Lava { .. } => f.write_str("LAVA"),
           Material::TallSeagrass { .. } => f.write_str("TALL_SEAGRASS"),
           Material::PistonHead { .. } => f.write_str("PISTON_HEAD"),
           Material::MovingPiston { .. } => f.write_str("MOVING_PISTON"),
           Material::WallTorch { .. } => f.write_str("WALL_TORCH"),
           Material::Fire { .. } => f.write_str("FIRE"),
           Material::SoulFire { .. } => f.write_str("SOUL_FIRE"),
           Material::RedstoneWire { .. } => f.write_str("REDSTONE_WIRE"),
           Material::OakWallSign { .. } => f.write_str("OAK_WALL_SIGN"),
           Material::SpruceWallSign { .. } => f.write_str("SPRUCE_WALL_SIGN"),
           Material::BirchWallSign { .. } => f.write_str("BIRCH_WALL_SIGN"),
           Material::AcaciaWallSign { .. } => f.write_str("ACACIA_WALL_SIGN"),
           Material::CherryWallSign { .. } => f.write_str("CHERRY_WALL_SIGN"),
           Material::JungleWallSign { .. } => f.write_str("JUNGLE_WALL_SIGN"),
           Material::DarkOakWallSign { .. } => f.write_str("DARK_OAK_WALL_SIGN"),
           Material::MangroveWallSign { .. } => f.write_str("MANGROVE_WALL_SIGN"),
           Material::BambooWallSign { .. } => f.write_str("BAMBOO_WALL_SIGN"),
           Material::OakWallHangingSign { .. } => f.write_str("OAK_WALL_HANGING_SIGN"),
           Material::SpruceWallHangingSign { .. } => f.write_str("SPRUCE_WALL_HANGING_SIGN"),
           Material::BirchWallHangingSign { .. } => f.write_str("BIRCH_WALL_HANGING_SIGN"),
           Material::AcaciaWallHangingSign { .. } => f.write_str("ACACIA_WALL_HANGING_SIGN"),
           Material::CherryWallHangingSign { .. } => f.write_str("CHERRY_WALL_HANGING_SIGN"),
           Material::JungleWallHangingSign { .. } => f.write_str("JUNGLE_WALL_HANGING_SIGN"),
           Material::DarkOakWallHangingSign { .. } => f.write_str("DARK_OAK_WALL_HANGING_SIGN"),
           Material::MangroveWallHangingSign { .. } => f.write_str("MANGROVE_WALL_HANGING_SIGN"),
           Material::CrimsonWallHangingSign { .. } => f.write_str("CRIMSON_WALL_HANGING_SIGN"),
           Material::WarpedWallHangingSign { .. } => f.write_str("WARPED_WALL_HANGING_SIGN"),
           Material::BambooWallHangingSign { .. } => f.write_str("BAMBOO_WALL_HANGING_SIGN"),
           Material::RedstoneWallTorch { .. } => f.write_str("REDSTONE_WALL_TORCH"),
           Material::SoulWallTorch { .. } => f.write_str("SOUL_WALL_TORCH"),
           Material::NetherPortal { .. } => f.write_str("NETHER_PORTAL"),
           Material::AttachedPumpkinStem { .. } => f.write_str("ATTACHED_PUMPKIN_STEM"),
           Material::AttachedMelonStem { .. } => f.write_str("ATTACHED_MELON_STEM"),
           Material::PumpkinStem { .. } => f.write_str("PUMPKIN_STEM"),
           Material::MelonStem { .. } => f.write_str("MELON_STEM"),
           Material::WaterCauldron { .. } => f.write_str("WATER_CAULDRON"),
           Material::LavaCauldron { .. } => f.write_str("LAVA_CAULDRON"),
           Material::PowderSnowCauldron { .. } => f.write_str("POWDER_SNOW_CAULDRON"),
           Material::EndPortal { .. } => f.write_str("END_PORTAL"),
           Material::Cocoa { .. } => f.write_str("COCOA"),
           Material::Tripwire { .. } => f.write_str("TRIPWIRE"),
           Material::PottedTorchflower { .. } => f.write_str("POTTED_TORCHFLOWER"),
           Material::PottedOakSapling { .. } => f.write_str("POTTED_OAK_SAPLING"),
           Material::PottedSpruceSapling { .. } => f.write_str("POTTED_SPRUCE_SAPLING"),
           Material::PottedBirchSapling { .. } => f.write_str("POTTED_BIRCH_SAPLING"),
           Material::PottedJungleSapling { .. } => f.write_str("POTTED_JUNGLE_SAPLING"),
           Material::PottedAcaciaSapling { .. } => f.write_str("POTTED_ACACIA_SAPLING"),
           Material::PottedCherrySapling { .. } => f.write_str("POTTED_CHERRY_SAPLING"),
           Material::PottedDarkOakSapling { .. } => f.write_str("POTTED_DARK_OAK_SAPLING"),
           Material::PottedMangrovePropagule { .. } => f.write_str("POTTED_MANGROVE_PROPAGULE"),
           Material::PottedFern { .. } => f.write_str("POTTED_FERN"),
           Material::PottedDandelion { .. } => f.write_str("POTTED_DANDELION"),
           Material::PottedPoppy { .. } => f.write_str("POTTED_POPPY"),
           Material::PottedBlueOrchid { .. } => f.write_str("POTTED_BLUE_ORCHID"),
           Material::PottedAllium { .. } => f.write_str("POTTED_ALLIUM"),
           Material::PottedAzureBluet { .. } => f.write_str("POTTED_AZURE_BLUET"),
           Material::PottedRedTulip { .. } => f.write_str("POTTED_RED_TULIP"),
           Material::PottedOrangeTulip { .. } => f.write_str("POTTED_ORANGE_TULIP"),
           Material::PottedWhiteTulip { .. } => f.write_str("POTTED_WHITE_TULIP"),
           Material::PottedPinkTulip { .. } => f.write_str("POTTED_PINK_TULIP"),
           Material::PottedOxeyeDaisy { .. } => f.write_str("POTTED_OXEYE_DAISY"),
           Material::PottedCornflower { .. } => f.write_str("POTTED_CORNFLOWER"),
           Material::PottedLilyOfTheValley { .. } => f.write_str("POTTED_LILY_OF_THE_VALLEY"),
           Material::PottedWitherRose { .. } => f.write_str("POTTED_WITHER_ROSE"),
           Material::PottedRedMushroom { .. } => f.write_str("POTTED_RED_MUSHROOM"),
           Material::PottedBrownMushroom { .. } => f.write_str("POTTED_BROWN_MUSHROOM"),
           Material::PottedDeadBush { .. } => f.write_str("POTTED_DEAD_BUSH"),
           Material::PottedCactus { .. } => f.write_str("POTTED_CACTUS"),
           Material::Carrots { .. } => f.write_str("CARROTS"),
           Material::Potatoes { .. } => f.write_str("POTATOES"),
           Material::SkeletonWallSkull { .. } => f.write_str("SKELETON_WALL_SKULL"),
           Material::WitherSkeletonWallSkull { .. } => f.write_str("WITHER_SKELETON_WALL_SKULL"),
           Material::ZombieWallHead { .. } => f.write_str("ZOMBIE_WALL_HEAD"),
           Material::PlayerWallHead { .. } => f.write_str("PLAYER_WALL_HEAD"),
           Material::CreeperWallHead { .. } => f.write_str("CREEPER_WALL_HEAD"),
           Material::DragonWallHead { .. } => f.write_str("DRAGON_WALL_HEAD"),
           Material::PiglinWallHead { .. } => f.write_str("PIGLIN_WALL_HEAD"),
           Material::WhiteWallBanner { .. } => f.write_str("WHITE_WALL_BANNER"),
           Material::OrangeWallBanner { .. } => f.write_str("ORANGE_WALL_BANNER"),
           Material::MagentaWallBanner { .. } => f.write_str("MAGENTA_WALL_BANNER"),
           Material::LightBlueWallBanner { .. } => f.write_str("LIGHT_BLUE_WALL_BANNER"),
           Material::YellowWallBanner { .. } => f.write_str("YELLOW_WALL_BANNER"),
           Material::LimeWallBanner { .. } => f.write_str("LIME_WALL_BANNER"),
           Material::PinkWallBanner { .. } => f.write_str("PINK_WALL_BANNER"),
           Material::GrayWallBanner { .. } => f.write_str("GRAY_WALL_BANNER"),
           Material::LightGrayWallBanner { .. } => f.write_str("LIGHT_GRAY_WALL_BANNER"),
           Material::CyanWallBanner { .. } => f.write_str("CYAN_WALL_BANNER"),
           Material::PurpleWallBanner { .. } => f.write_str("PURPLE_WALL_BANNER"),
           Material::BlueWallBanner { .. } => f.write_str("BLUE_WALL_BANNER"),
           Material::BrownWallBanner { .. } => f.write_str("BROWN_WALL_BANNER"),
           Material::GreenWallBanner { .. } => f.write_str("GREEN_WALL_BANNER"),
           Material::RedWallBanner { .. } => f.write_str("RED_WALL_BANNER"),
           Material::BlackWallBanner { .. } => f.write_str("BLACK_WALL_BANNER"),
           Material::TorchflowerCrop { .. } => f.write_str("TORCHFLOWER_CROP"),
           Material::PitcherCrop { .. } => f.write_str("PITCHER_CROP"),
           Material::Beetroots { .. } => f.write_str("BEETROOTS"),
           Material::EndGateway { .. } => f.write_str("END_GATEWAY"),
           Material::FrostedIce { .. } => f.write_str("FROSTED_ICE"),
           Material::KelpPlant { .. } => f.write_str("KELP_PLANT"),
           Material::DeadTubeCoralWallFan { .. } => f.write_str("DEAD_TUBE_CORAL_WALL_FAN"),
           Material::DeadBrainCoralWallFan { .. } => f.write_str("DEAD_BRAIN_CORAL_WALL_FAN"),
           Material::DeadBubbleCoralWallFan { .. } => f.write_str("DEAD_BUBBLE_CORAL_WALL_FAN"),
           Material::DeadFireCoralWallFan { .. } => f.write_str("DEAD_FIRE_CORAL_WALL_FAN"),
           Material::DeadHornCoralWallFan { .. } => f.write_str("DEAD_HORN_CORAL_WALL_FAN"),
           Material::TubeCoralWallFan { .. } => f.write_str("TUBE_CORAL_WALL_FAN"),
           Material::BrainCoralWallFan { .. } => f.write_str("BRAIN_CORAL_WALL_FAN"),
           Material::BubbleCoralWallFan { .. } => f.write_str("BUBBLE_CORAL_WALL_FAN"),
           Material::FireCoralWallFan { .. } => f.write_str("FIRE_CORAL_WALL_FAN"),
           Material::HornCoralWallFan { .. } => f.write_str("HORN_CORAL_WALL_FAN"),
           Material::BambooSapling { .. } => f.write_str("BAMBOO_SAPLING"),
           Material::PottedBamboo { .. } => f.write_str("POTTED_BAMBOO"),
           Material::VoidAir { .. } => f.write_str("VOID_AIR"),
           Material::CaveAir { .. } => f.write_str("CAVE_AIR"),
           Material::BubbleColumn { .. } => f.write_str("BUBBLE_COLUMN"),
           Material::SweetBerryBush { .. } => f.write_str("SWEET_BERRY_BUSH"),
           Material::WeepingVinesPlant { .. } => f.write_str("WEEPING_VINES_PLANT"),
           Material::TwistingVinesPlant { .. } => f.write_str("TWISTING_VINES_PLANT"),
           Material::CrimsonWallSign { .. } => f.write_str("CRIMSON_WALL_SIGN"),
           Material::WarpedWallSign { .. } => f.write_str("WARPED_WALL_SIGN"),
           Material::PottedCrimsonFungus { .. } => f.write_str("POTTED_CRIMSON_FUNGUS"),
           Material::PottedWarpedFungus { .. } => f.write_str("POTTED_WARPED_FUNGUS"),
           Material::PottedCrimsonRoots { .. } => f.write_str("POTTED_CRIMSON_ROOTS"),
           Material::PottedWarpedRoots { .. } => f.write_str("POTTED_WARPED_ROOTS"),
           Material::CandleCake { .. } => f.write_str("CANDLE_CAKE"),
           Material::WhiteCandleCake { .. } => f.write_str("WHITE_CANDLE_CAKE"),
           Material::OrangeCandleCake { .. } => f.write_str("ORANGE_CANDLE_CAKE"),
           Material::MagentaCandleCake { .. } => f.write_str("MAGENTA_CANDLE_CAKE"),
           Material::LightBlueCandleCake { .. } => f.write_str("LIGHT_BLUE_CANDLE_CAKE"),
           Material::YellowCandleCake { .. } => f.write_str("YELLOW_CANDLE_CAKE"),
           Material::LimeCandleCake { .. } => f.write_str("LIME_CANDLE_CAKE"),
           Material::PinkCandleCake { .. } => f.write_str("PINK_CANDLE_CAKE"),
           Material::GrayCandleCake { .. } => f.write_str("GRAY_CANDLE_CAKE"),
           Material::LightGrayCandleCake { .. } => f.write_str("LIGHT_GRAY_CANDLE_CAKE"),
           Material::CyanCandleCake { .. } => f.write_str("CYAN_CANDLE_CAKE"),
           Material::PurpleCandleCake { .. } => f.write_str("PURPLE_CANDLE_CAKE"),
           Material::BlueCandleCake { .. } => f.write_str("BLUE_CANDLE_CAKE"),
           Material::BrownCandleCake { .. } => f.write_str("BROWN_CANDLE_CAKE"),
           Material::GreenCandleCake { .. } => f.write_str("GREEN_CANDLE_CAKE"),
           Material::RedCandleCake { .. } => f.write_str("RED_CANDLE_CAKE"),
           Material::BlackCandleCake { .. } => f.write_str("BLACK_CANDLE_CAKE"),
           Material::PowderSnow { .. } => f.write_str("POWDER_SNOW"),
           Material::CaveVines { .. } => f.write_str("CAVE_VINES"),
           Material::CaveVinesPlant { .. } => f.write_str("CAVE_VINES_PLANT"),
           Material::BigDripleafStem { .. } => f.write_str("BIG_DRIPLEAF_STEM"),
           Material::PottedAzaleaBush { .. } => f.write_str("POTTED_AZALEA_BUSH"),
           Material::PottedFloweringAzaleaBush { .. } => f.write_str("POTTED_FLOWERING_AZALEA_BUSH"),
           Material::LegacyAir { .. } => f.write_str("LEGACY_AIR"),
           Material::LegacyStone { .. } => f.write_str("LEGACY_STONE"),
           Material::LegacyGrass { .. } => f.write_str("LEGACY_GRASS"),
           Material::LegacyDirt { .. } => f.write_str("LEGACY_DIRT"),
           Material::LegacyCobblestone { .. } => f.write_str("LEGACY_COBBLESTONE"),
           Material::LegacyWood { .. } => f.write_str("LEGACY_WOOD"),
           Material::LegacySapling { .. } => f.write_str("LEGACY_SAPLING"),
           Material::LegacyBedrock { .. } => f.write_str("LEGACY_BEDROCK"),
           Material::LegacyWater { .. } => f.write_str("LEGACY_WATER"),
           Material::LegacyStationaryWater { .. } => f.write_str("LEGACY_STATIONARY_WATER"),
           Material::LegacyLava { .. } => f.write_str("LEGACY_LAVA"),
           Material::LegacyStationaryLava { .. } => f.write_str("LEGACY_STATIONARY_LAVA"),
           Material::LegacySand { .. } => f.write_str("LEGACY_SAND"),
           Material::LegacyGravel { .. } => f.write_str("LEGACY_GRAVEL"),
           Material::LegacyGoldOre { .. } => f.write_str("LEGACY_GOLD_ORE"),
           Material::LegacyIronOre { .. } => f.write_str("LEGACY_IRON_ORE"),
           Material::LegacyCoalOre { .. } => f.write_str("LEGACY_COAL_ORE"),
           Material::LegacyLog { .. } => f.write_str("LEGACY_LOG"),
           Material::LegacyLeaves { .. } => f.write_str("LEGACY_LEAVES"),
           Material::LegacySponge { .. } => f.write_str("LEGACY_SPONGE"),
           Material::LegacyGlass { .. } => f.write_str("LEGACY_GLASS"),
           Material::LegacyLapisOre { .. } => f.write_str("LEGACY_LAPIS_ORE"),
           Material::LegacyLapisBlock { .. } => f.write_str("LEGACY_LAPIS_BLOCK"),
           Material::LegacyDispenser { .. } => f.write_str("LEGACY_DISPENSER"),
           Material::LegacySandstone { .. } => f.write_str("LEGACY_SANDSTONE"),
           Material::LegacyNoteBlock { .. } => f.write_str("LEGACY_NOTE_BLOCK"),
           Material::LegacyBedBlock { .. } => f.write_str("LEGACY_BED_BLOCK"),
           Material::LegacyPoweredRail { .. } => f.write_str("LEGACY_POWERED_RAIL"),
           Material::LegacyDetectorRail { .. } => f.write_str("LEGACY_DETECTOR_RAIL"),
           Material::LegacyPistonStickyBase { .. } => f.write_str("LEGACY_PISTON_STICKY_BASE"),
           Material::LegacyWeb { .. } => f.write_str("LEGACY_WEB"),
           Material::LegacyLongGrass { .. } => f.write_str("LEGACY_LONG_GRASS"),
           Material::LegacyDeadBush { .. } => f.write_str("LEGACY_DEAD_BUSH"),
           Material::LegacyPistonBase { .. } => f.write_str("LEGACY_PISTON_BASE"),
           Material::LegacyPistonExtension { .. } => f.write_str("LEGACY_PISTON_EXTENSION"),
           Material::LegacyWool { .. } => f.write_str("LEGACY_WOOL"),
           Material::LegacyPistonMovingPiece { .. } => f.write_str("LEGACY_PISTON_MOVING_PIECE"),
           Material::LegacyYellowFlower { .. } => f.write_str("LEGACY_YELLOW_FLOWER"),
           Material::LegacyRedRose { .. } => f.write_str("LEGACY_RED_ROSE"),
           Material::LegacyBrownMushroom { .. } => f.write_str("LEGACY_BROWN_MUSHROOM"),
           Material::LegacyRedMushroom { .. } => f.write_str("LEGACY_RED_MUSHROOM"),
           Material::LegacyGoldBlock { .. } => f.write_str("LEGACY_GOLD_BLOCK"),
           Material::LegacyIronBlock { .. } => f.write_str("LEGACY_IRON_BLOCK"),
           Material::LegacyDoubleStep { .. } => f.write_str("LEGACY_DOUBLE_STEP"),
           Material::LegacyStep { .. } => f.write_str("LEGACY_STEP"),
           Material::LegacyBrick { .. } => f.write_str("LEGACY_BRICK"),
           Material::LegacyTnt { .. } => f.write_str("LEGACY_TNT"),
           Material::LegacyBookshelf { .. } => f.write_str("LEGACY_BOOKSHELF"),
           Material::LegacyMossyCobblestone { .. } => f.write_str("LEGACY_MOSSY_COBBLESTONE"),
           Material::LegacyObsidian { .. } => f.write_str("LEGACY_OBSIDIAN"),
           Material::LegacyTorch { .. } => f.write_str("LEGACY_TORCH"),
           Material::LegacyFire { .. } => f.write_str("LEGACY_FIRE"),
           Material::LegacyMobSpawner { .. } => f.write_str("LEGACY_MOB_SPAWNER"),
           Material::LegacyWoodStairs { .. } => f.write_str("LEGACY_WOOD_STAIRS"),
           Material::LegacyChest { .. } => f.write_str("LEGACY_CHEST"),
           Material::LegacyRedstoneWire { .. } => f.write_str("LEGACY_REDSTONE_WIRE"),
           Material::LegacyDiamondOre { .. } => f.write_str("LEGACY_DIAMOND_ORE"),
           Material::LegacyDiamondBlock { .. } => f.write_str("LEGACY_DIAMOND_BLOCK"),
           Material::LegacyWorkbench { .. } => f.write_str("LEGACY_WORKBENCH"),
           Material::LegacyCrops { .. } => f.write_str("LEGACY_CROPS"),
           Material::LegacySoil { .. } => f.write_str("LEGACY_SOIL"),
           Material::LegacyFurnace { .. } => f.write_str("LEGACY_FURNACE"),
           Material::LegacyBurningFurnace { .. } => f.write_str("LEGACY_BURNING_FURNACE"),
           Material::LegacySignPost { .. } => f.write_str("LEGACY_SIGN_POST"),
           Material::LegacyWoodenDoor { .. } => f.write_str("LEGACY_WOODEN_DOOR"),
           Material::LegacyLadder { .. } => f.write_str("LEGACY_LADDER"),
           Material::LegacyRails { .. } => f.write_str("LEGACY_RAILS"),
           Material::LegacyCobblestoneStairs { .. } => f.write_str("LEGACY_COBBLESTONE_STAIRS"),
           Material::LegacyWallSign { .. } => f.write_str("LEGACY_WALL_SIGN"),
           Material::LegacyLever { .. } => f.write_str("LEGACY_LEVER"),
           Material::LegacyStonePlate { .. } => f.write_str("LEGACY_STONE_PLATE"),
           Material::LegacyIronDoorBlock { .. } => f.write_str("LEGACY_IRON_DOOR_BLOCK"),
           Material::LegacyWoodPlate { .. } => f.write_str("LEGACY_WOOD_PLATE"),
           Material::LegacyRedstoneOre { .. } => f.write_str("LEGACY_REDSTONE_ORE"),
           Material::LegacyGlowingRedstoneOre { .. } => f.write_str("LEGACY_GLOWING_REDSTONE_ORE"),
           Material::LegacyRedstoneTorchOff { .. } => f.write_str("LEGACY_REDSTONE_TORCH_OFF"),
           Material::LegacyRedstoneTorchOn { .. } => f.write_str("LEGACY_REDSTONE_TORCH_ON"),
           Material::LegacyStoneButton { .. } => f.write_str("LEGACY_STONE_BUTTON"),
           Material::LegacySnow { .. } => f.write_str("LEGACY_SNOW"),
           Material::LegacyIce { .. } => f.write_str("LEGACY_ICE"),
           Material::LegacySnowBlock { .. } => f.write_str("LEGACY_SNOW_BLOCK"),
           Material::LegacyCactus { .. } => f.write_str("LEGACY_CACTUS"),
           Material::LegacyClay { .. } => f.write_str("LEGACY_CLAY"),
           Material::LegacySugarCaneBlock { .. } => f.write_str("LEGACY_SUGAR_CANE_BLOCK"),
           Material::LegacyJukebox { .. } => f.write_str("LEGACY_JUKEBOX"),
           Material::LegacyFence { .. } => f.write_str("LEGACY_FENCE"),
           Material::LegacyPumpkin { .. } => f.write_str("LEGACY_PUMPKIN"),
           Material::LegacyNetherrack { .. } => f.write_str("LEGACY_NETHERRACK"),
           Material::LegacySoulSand { .. } => f.write_str("LEGACY_SOUL_SAND"),
           Material::LegacyGlowstone { .. } => f.write_str("LEGACY_GLOWSTONE"),
           Material::LegacyPortal { .. } => f.write_str("LEGACY_PORTAL"),
           Material::LegacyJackOLantern { .. } => f.write_str("LEGACY_JACK_O_LANTERN"),
           Material::LegacyCakeBlock { .. } => f.write_str("LEGACY_CAKE_BLOCK"),
           Material::LegacyDiodeBlockOff { .. } => f.write_str("LEGACY_DIODE_BLOCK_OFF"),
           Material::LegacyDiodeBlockOn { .. } => f.write_str("LEGACY_DIODE_BLOCK_ON"),
           Material::LegacyStainedGlass { .. } => f.write_str("LEGACY_STAINED_GLASS"),
           Material::LegacyTrapDoor { .. } => f.write_str("LEGACY_TRAP_DOOR"),
           Material::LegacyMonsterEggs { .. } => f.write_str("LEGACY_MONSTER_EGGS"),
           Material::LegacySmoothBrick { .. } => f.write_str("LEGACY_SMOOTH_BRICK"),
           Material::LegacyHugeMushroom1 { .. } => f.write_str("LEGACY_HUGE_MUSHROOM_1"),
           Material::LegacyHugeMushroom2 { .. } => f.write_str("LEGACY_HUGE_MUSHROOM_2"),
           Material::LegacyIronFence { .. } => f.write_str("LEGACY_IRON_FENCE"),
           Material::LegacyThinGlass { .. } => f.write_str("LEGACY_THIN_GLASS"),
           Material::LegacyMelonBlock { .. } => f.write_str("LEGACY_MELON_BLOCK"),
           Material::LegacyPumpkinStem { .. } => f.write_str("LEGACY_PUMPKIN_STEM"),
           Material::LegacyMelonStem { .. } => f.write_str("LEGACY_MELON_STEM"),
           Material::LegacyVine { .. } => f.write_str("LEGACY_VINE"),
           Material::LegacyFenceGate { .. } => f.write_str("LEGACY_FENCE_GATE"),
           Material::LegacyBrickStairs { .. } => f.write_str("LEGACY_BRICK_STAIRS"),
           Material::LegacySmoothStairs { .. } => f.write_str("LEGACY_SMOOTH_STAIRS"),
           Material::LegacyMycel { .. } => f.write_str("LEGACY_MYCEL"),
           Material::LegacyWaterLily { .. } => f.write_str("LEGACY_WATER_LILY"),
           Material::LegacyNetherBrick { .. } => f.write_str("LEGACY_NETHER_BRICK"),
           Material::LegacyNetherFence { .. } => f.write_str("LEGACY_NETHER_FENCE"),
           Material::LegacyNetherBrickStairs { .. } => f.write_str("LEGACY_NETHER_BRICK_STAIRS"),
           Material::LegacyNetherWarts { .. } => f.write_str("LEGACY_NETHER_WARTS"),
           Material::LegacyEnchantmentTable { .. } => f.write_str("LEGACY_ENCHANTMENT_TABLE"),
           Material::LegacyBrewingStand { .. } => f.write_str("LEGACY_BREWING_STAND"),
           Material::LegacyCauldron { .. } => f.write_str("LEGACY_CAULDRON"),
           Material::LegacyEnderPortal { .. } => f.write_str("LEGACY_ENDER_PORTAL"),
           Material::LegacyEnderPortalFrame { .. } => f.write_str("LEGACY_ENDER_PORTAL_FRAME"),
           Material::LegacyEnderStone { .. } => f.write_str("LEGACY_ENDER_STONE"),
           Material::LegacyDragonEgg { .. } => f.write_str("LEGACY_DRAGON_EGG"),
           Material::LegacyRedstoneLampOff { .. } => f.write_str("LEGACY_REDSTONE_LAMP_OFF"),
           Material::LegacyRedstoneLampOn { .. } => f.write_str("LEGACY_REDSTONE_LAMP_ON"),
           Material::LegacyWoodDoubleStep { .. } => f.write_str("LEGACY_WOOD_DOUBLE_STEP"),
           Material::LegacyWoodStep { .. } => f.write_str("LEGACY_WOOD_STEP"),
           Material::LegacyCocoa { .. } => f.write_str("LEGACY_COCOA"),
           Material::LegacySandstoneStairs { .. } => f.write_str("LEGACY_SANDSTONE_STAIRS"),
           Material::LegacyEmeraldOre { .. } => f.write_str("LEGACY_EMERALD_ORE"),
           Material::LegacyEnderChest { .. } => f.write_str("LEGACY_ENDER_CHEST"),
           Material::LegacyTripwireHook { .. } => f.write_str("LEGACY_TRIPWIRE_HOOK"),
           Material::LegacyTripwire { .. } => f.write_str("LEGACY_TRIPWIRE"),
           Material::LegacyEmeraldBlock { .. } => f.write_str("LEGACY_EMERALD_BLOCK"),
           Material::LegacySpruceWoodStairs { .. } => f.write_str("LEGACY_SPRUCE_WOOD_STAIRS"),
           Material::LegacyBirchWoodStairs { .. } => f.write_str("LEGACY_BIRCH_WOOD_STAIRS"),
           Material::LegacyJungleWoodStairs { .. } => f.write_str("LEGACY_JUNGLE_WOOD_STAIRS"),
           Material::LegacyCommand { .. } => f.write_str("LEGACY_COMMAND"),
           Material::LegacyBeacon { .. } => f.write_str("LEGACY_BEACON"),
           Material::LegacyCobbleWall { .. } => f.write_str("LEGACY_COBBLE_WALL"),
           Material::LegacyFlowerPot { .. } => f.write_str("LEGACY_FLOWER_POT"),
           Material::LegacyCarrot { .. } => f.write_str("LEGACY_CARROT"),
           Material::LegacyPotato { .. } => f.write_str("LEGACY_POTATO"),
           Material::LegacyWoodButton { .. } => f.write_str("LEGACY_WOOD_BUTTON"),
           Material::LegacySkull { .. } => f.write_str("LEGACY_SKULL"),
           Material::LegacyAnvil { .. } => f.write_str("LEGACY_ANVIL"),
           Material::LegacyTrappedChest { .. } => f.write_str("LEGACY_TRAPPED_CHEST"),
           Material::LegacyGoldPlate { .. } => f.write_str("LEGACY_GOLD_PLATE"),
           Material::LegacyIronPlate { .. } => f.write_str("LEGACY_IRON_PLATE"),
           Material::LegacyRedstoneComparatorOff { .. } => f.write_str("LEGACY_REDSTONE_COMPARATOR_OFF"),
           Material::LegacyRedstoneComparatorOn { .. } => f.write_str("LEGACY_REDSTONE_COMPARATOR_ON"),
           Material::LegacyDaylightDetector { .. } => f.write_str("LEGACY_DAYLIGHT_DETECTOR"),
           Material::LegacyRedstoneBlock { .. } => f.write_str("LEGACY_REDSTONE_BLOCK"),
           Material::LegacyQuartzOre { .. } => f.write_str("LEGACY_QUARTZ_ORE"),
           Material::LegacyHopper { .. } => f.write_str("LEGACY_HOPPER"),
           Material::LegacyQuartzBlock { .. } => f.write_str("LEGACY_QUARTZ_BLOCK"),
           Material::LegacyQuartzStairs { .. } => f.write_str("LEGACY_QUARTZ_STAIRS"),
           Material::LegacyActivatorRail { .. } => f.write_str("LEGACY_ACTIVATOR_RAIL"),
           Material::LegacyDropper { .. } => f.write_str("LEGACY_DROPPER"),
           Material::LegacyStainedClay { .. } => f.write_str("LEGACY_STAINED_CLAY"),
           Material::LegacyStainedGlassPane { .. } => f.write_str("LEGACY_STAINED_GLASS_PANE"),
           Material::LegacyLeaves2 { .. } => f.write_str("LEGACY_LEAVES_2"),
           Material::LegacyLog2 { .. } => f.write_str("LEGACY_LOG_2"),
           Material::LegacyAcaciaStairs { .. } => f.write_str("LEGACY_ACACIA_STAIRS"),
           Material::LegacyDarkOakStairs { .. } => f.write_str("LEGACY_DARK_OAK_STAIRS"),
           Material::LegacySlimeBlock { .. } => f.write_str("LEGACY_SLIME_BLOCK"),
           Material::LegacyBarrier { .. } => f.write_str("LEGACY_BARRIER"),
           Material::LegacyIronTrapdoor { .. } => f.write_str("LEGACY_IRON_TRAPDOOR"),
           Material::LegacyPrismarine { .. } => f.write_str("LEGACY_PRISMARINE"),
           Material::LegacySeaLantern { .. } => f.write_str("LEGACY_SEA_LANTERN"),
           Material::LegacyHayBlock { .. } => f.write_str("LEGACY_HAY_BLOCK"),
           Material::LegacyCarpet { .. } => f.write_str("LEGACY_CARPET"),
           Material::LegacyHardClay { .. } => f.write_str("LEGACY_HARD_CLAY"),
           Material::LegacyCoalBlock { .. } => f.write_str("LEGACY_COAL_BLOCK"),
           Material::LegacyPackedIce { .. } => f.write_str("LEGACY_PACKED_ICE"),
           Material::LegacyDoublePlant { .. } => f.write_str("LEGACY_DOUBLE_PLANT"),
           Material::LegacyStandingBanner { .. } => f.write_str("LEGACY_STANDING_BANNER"),
           Material::LegacyWallBanner { .. } => f.write_str("LEGACY_WALL_BANNER"),
           Material::LegacyDaylightDetectorInverted { .. } => f.write_str("LEGACY_DAYLIGHT_DETECTOR_INVERTED"),
           Material::LegacyRedSandstone { .. } => f.write_str("LEGACY_RED_SANDSTONE"),
           Material::LegacyRedSandstoneStairs { .. } => f.write_str("LEGACY_RED_SANDSTONE_STAIRS"),
           Material::LegacyDoubleStoneSlab2 { .. } => f.write_str("LEGACY_DOUBLE_STONE_SLAB2"),
           Material::LegacyStoneSlab2 { .. } => f.write_str("LEGACY_STONE_SLAB2"),
           Material::LegacySpruceFenceGate { .. } => f.write_str("LEGACY_SPRUCE_FENCE_GATE"),
           Material::LegacyBirchFenceGate { .. } => f.write_str("LEGACY_BIRCH_FENCE_GATE"),
           Material::LegacyJungleFenceGate { .. } => f.write_str("LEGACY_JUNGLE_FENCE_GATE"),
           Material::LegacyDarkOakFenceGate { .. } => f.write_str("LEGACY_DARK_OAK_FENCE_GATE"),
           Material::LegacyAcaciaFenceGate { .. } => f.write_str("LEGACY_ACACIA_FENCE_GATE"),
           Material::LegacySpruceFence { .. } => f.write_str("LEGACY_SPRUCE_FENCE"),
           Material::LegacyBirchFence { .. } => f.write_str("LEGACY_BIRCH_FENCE"),
           Material::LegacyJungleFence { .. } => f.write_str("LEGACY_JUNGLE_FENCE"),
           Material::LegacyDarkOakFence { .. } => f.write_str("LEGACY_DARK_OAK_FENCE"),
           Material::LegacyAcaciaFence { .. } => f.write_str("LEGACY_ACACIA_FENCE"),
           Material::LegacySpruceDoor { .. } => f.write_str("LEGACY_SPRUCE_DOOR"),
           Material::LegacyBirchDoor { .. } => f.write_str("LEGACY_BIRCH_DOOR"),
           Material::LegacyJungleDoor { .. } => f.write_str("LEGACY_JUNGLE_DOOR"),
           Material::LegacyAcaciaDoor { .. } => f.write_str("LEGACY_ACACIA_DOOR"),
           Material::LegacyDarkOakDoor { .. } => f.write_str("LEGACY_DARK_OAK_DOOR"),
           Material::LegacyEndRod { .. } => f.write_str("LEGACY_END_ROD"),
           Material::LegacyChorusPlant { .. } => f.write_str("LEGACY_CHORUS_PLANT"),
           Material::LegacyChorusFlower { .. } => f.write_str("LEGACY_CHORUS_FLOWER"),
           Material::LegacyPurpurBlock { .. } => f.write_str("LEGACY_PURPUR_BLOCK"),
           Material::LegacyPurpurPillar { .. } => f.write_str("LEGACY_PURPUR_PILLAR"),
           Material::LegacyPurpurStairs { .. } => f.write_str("LEGACY_PURPUR_STAIRS"),
           Material::LegacyPurpurDoubleSlab { .. } => f.write_str("LEGACY_PURPUR_DOUBLE_SLAB"),
           Material::LegacyPurpurSlab { .. } => f.write_str("LEGACY_PURPUR_SLAB"),
           Material::LegacyEndBricks { .. } => f.write_str("LEGACY_END_BRICKS"),
           Material::LegacyBeetrootBlock { .. } => f.write_str("LEGACY_BEETROOT_BLOCK"),
           Material::LegacyGrassPath { .. } => f.write_str("LEGACY_GRASS_PATH"),
           Material::LegacyEndGateway { .. } => f.write_str("LEGACY_END_GATEWAY"),
           Material::LegacyCommandRepeating { .. } => f.write_str("LEGACY_COMMAND_REPEATING"),
           Material::LegacyCommandChain { .. } => f.write_str("LEGACY_COMMAND_CHAIN"),
           Material::LegacyFrostedIce { .. } => f.write_str("LEGACY_FROSTED_ICE"),
           Material::LegacyMagma { .. } => f.write_str("LEGACY_MAGMA"),
           Material::LegacyNetherWartBlock { .. } => f.write_str("LEGACY_NETHER_WART_BLOCK"),
           Material::LegacyRedNetherBrick { .. } => f.write_str("LEGACY_RED_NETHER_BRICK"),
           Material::LegacyBoneBlock { .. } => f.write_str("LEGACY_BONE_BLOCK"),
           Material::LegacyStructureVoid { .. } => f.write_str("LEGACY_STRUCTURE_VOID"),
           Material::LegacyObserver { .. } => f.write_str("LEGACY_OBSERVER"),
           Material::LegacyWhiteShulkerBox { .. } => f.write_str("LEGACY_WHITE_SHULKER_BOX"),
           Material::LegacyOrangeShulkerBox { .. } => f.write_str("LEGACY_ORANGE_SHULKER_BOX"),
           Material::LegacyMagentaShulkerBox { .. } => f.write_str("LEGACY_MAGENTA_SHULKER_BOX"),
           Material::LegacyLightBlueShulkerBox { .. } => f.write_str("LEGACY_LIGHT_BLUE_SHULKER_BOX"),
           Material::LegacyYellowShulkerBox { .. } => f.write_str("LEGACY_YELLOW_SHULKER_BOX"),
           Material::LegacyLimeShulkerBox { .. } => f.write_str("LEGACY_LIME_SHULKER_BOX"),
           Material::LegacyPinkShulkerBox { .. } => f.write_str("LEGACY_PINK_SHULKER_BOX"),
           Material::LegacyGrayShulkerBox { .. } => f.write_str("LEGACY_GRAY_SHULKER_BOX"),
           Material::LegacySilverShulkerBox { .. } => f.write_str("LEGACY_SILVER_SHULKER_BOX"),
           Material::LegacyCyanShulkerBox { .. } => f.write_str("LEGACY_CYAN_SHULKER_BOX"),
           Material::LegacyPurpleShulkerBox { .. } => f.write_str("LEGACY_PURPLE_SHULKER_BOX"),
           Material::LegacyBlueShulkerBox { .. } => f.write_str("LEGACY_BLUE_SHULKER_BOX"),
           Material::LegacyBrownShulkerBox { .. } => f.write_str("LEGACY_BROWN_SHULKER_BOX"),
           Material::LegacyGreenShulkerBox { .. } => f.write_str("LEGACY_GREEN_SHULKER_BOX"),
           Material::LegacyRedShulkerBox { .. } => f.write_str("LEGACY_RED_SHULKER_BOX"),
           Material::LegacyBlackShulkerBox { .. } => f.write_str("LEGACY_BLACK_SHULKER_BOX"),
           Material::LegacyWhiteGlazedTerracotta { .. } => f.write_str("LEGACY_WHITE_GLAZED_TERRACOTTA"),
           Material::LegacyOrangeGlazedTerracotta { .. } => f.write_str("LEGACY_ORANGE_GLAZED_TERRACOTTA"),
           Material::LegacyMagentaGlazedTerracotta { .. } => f.write_str("LEGACY_MAGENTA_GLAZED_TERRACOTTA"),
           Material::LegacyLightBlueGlazedTerracotta { .. } => f.write_str("LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA"),
           Material::LegacyYellowGlazedTerracotta { .. } => f.write_str("LEGACY_YELLOW_GLAZED_TERRACOTTA"),
           Material::LegacyLimeGlazedTerracotta { .. } => f.write_str("LEGACY_LIME_GLAZED_TERRACOTTA"),
           Material::LegacyPinkGlazedTerracotta { .. } => f.write_str("LEGACY_PINK_GLAZED_TERRACOTTA"),
           Material::LegacyGrayGlazedTerracotta { .. } => f.write_str("LEGACY_GRAY_GLAZED_TERRACOTTA"),
           Material::LegacySilverGlazedTerracotta { .. } => f.write_str("LEGACY_SILVER_GLAZED_TERRACOTTA"),
           Material::LegacyCyanGlazedTerracotta { .. } => f.write_str("LEGACY_CYAN_GLAZED_TERRACOTTA"),
           Material::LegacyPurpleGlazedTerracotta { .. } => f.write_str("LEGACY_PURPLE_GLAZED_TERRACOTTA"),
           Material::LegacyBlueGlazedTerracotta { .. } => f.write_str("LEGACY_BLUE_GLAZED_TERRACOTTA"),
           Material::LegacyBrownGlazedTerracotta { .. } => f.write_str("LEGACY_BROWN_GLAZED_TERRACOTTA"),
           Material::LegacyGreenGlazedTerracotta { .. } => f.write_str("LEGACY_GREEN_GLAZED_TERRACOTTA"),
           Material::LegacyRedGlazedTerracotta { .. } => f.write_str("LEGACY_RED_GLAZED_TERRACOTTA"),
           Material::LegacyBlackGlazedTerracotta { .. } => f.write_str("LEGACY_BLACK_GLAZED_TERRACOTTA"),
           Material::LegacyConcrete { .. } => f.write_str("LEGACY_CONCRETE"),
           Material::LegacyConcretePowder { .. } => f.write_str("LEGACY_CONCRETE_POWDER"),
           Material::LegacyStructureBlock { .. } => f.write_str("LEGACY_STRUCTURE_BLOCK"),
           Material::LegacyIronSpade { .. } => f.write_str("LEGACY_IRON_SPADE"),
           Material::LegacyIronPickaxe { .. } => f.write_str("LEGACY_IRON_PICKAXE"),
           Material::LegacyIronAxe { .. } => f.write_str("LEGACY_IRON_AXE"),
           Material::LegacyFlintAndSteel { .. } => f.write_str("LEGACY_FLINT_AND_STEEL"),
           Material::LegacyApple { .. } => f.write_str("LEGACY_APPLE"),
           Material::LegacyBow { .. } => f.write_str("LEGACY_BOW"),
           Material::LegacyArrow { .. } => f.write_str("LEGACY_ARROW"),
           Material::LegacyCoal { .. } => f.write_str("LEGACY_COAL"),
           Material::LegacyDiamond { .. } => f.write_str("LEGACY_DIAMOND"),
           Material::LegacyIronIngot { .. } => f.write_str("LEGACY_IRON_INGOT"),
           Material::LegacyGoldIngot { .. } => f.write_str("LEGACY_GOLD_INGOT"),
           Material::LegacyIronSword { .. } => f.write_str("LEGACY_IRON_SWORD"),
           Material::LegacyWoodSword { .. } => f.write_str("LEGACY_WOOD_SWORD"),
           Material::LegacyWoodSpade { .. } => f.write_str("LEGACY_WOOD_SPADE"),
           Material::LegacyWoodPickaxe { .. } => f.write_str("LEGACY_WOOD_PICKAXE"),
           Material::LegacyWoodAxe { .. } => f.write_str("LEGACY_WOOD_AXE"),
           Material::LegacyStoneSword { .. } => f.write_str("LEGACY_STONE_SWORD"),
           Material::LegacyStoneSpade { .. } => f.write_str("LEGACY_STONE_SPADE"),
           Material::LegacyStonePickaxe { .. } => f.write_str("LEGACY_STONE_PICKAXE"),
           Material::LegacyStoneAxe { .. } => f.write_str("LEGACY_STONE_AXE"),
           Material::LegacyDiamondSword { .. } => f.write_str("LEGACY_DIAMOND_SWORD"),
           Material::LegacyDiamondSpade { .. } => f.write_str("LEGACY_DIAMOND_SPADE"),
           Material::LegacyDiamondPickaxe { .. } => f.write_str("LEGACY_DIAMOND_PICKAXE"),
           Material::LegacyDiamondAxe { .. } => f.write_str("LEGACY_DIAMOND_AXE"),
           Material::LegacyStick { .. } => f.write_str("LEGACY_STICK"),
           Material::LegacyBowl { .. } => f.write_str("LEGACY_BOWL"),
           Material::LegacyMushroomSoup { .. } => f.write_str("LEGACY_MUSHROOM_SOUP"),
           Material::LegacyGoldSword { .. } => f.write_str("LEGACY_GOLD_SWORD"),
           Material::LegacyGoldSpade { .. } => f.write_str("LEGACY_GOLD_SPADE"),
           Material::LegacyGoldPickaxe { .. } => f.write_str("LEGACY_GOLD_PICKAXE"),
           Material::LegacyGoldAxe { .. } => f.write_str("LEGACY_GOLD_AXE"),
           Material::LegacyString { .. } => f.write_str("LEGACY_STRING"),
           Material::LegacyFeather { .. } => f.write_str("LEGACY_FEATHER"),
           Material::LegacySulphur { .. } => f.write_str("LEGACY_SULPHUR"),
           Material::LegacyWoodHoe { .. } => f.write_str("LEGACY_WOOD_HOE"),
           Material::LegacyStoneHoe { .. } => f.write_str("LEGACY_STONE_HOE"),
           Material::LegacyIronHoe { .. } => f.write_str("LEGACY_IRON_HOE"),
           Material::LegacyDiamondHoe { .. } => f.write_str("LEGACY_DIAMOND_HOE"),
           Material::LegacyGoldHoe { .. } => f.write_str("LEGACY_GOLD_HOE"),
           Material::LegacySeeds { .. } => f.write_str("LEGACY_SEEDS"),
           Material::LegacyWheat { .. } => f.write_str("LEGACY_WHEAT"),
           Material::LegacyBread { .. } => f.write_str("LEGACY_BREAD"),
           Material::LegacyLeatherHelmet { .. } => f.write_str("LEGACY_LEATHER_HELMET"),
           Material::LegacyLeatherChestplate { .. } => f.write_str("LEGACY_LEATHER_CHESTPLATE"),
           Material::LegacyLeatherLeggings { .. } => f.write_str("LEGACY_LEATHER_LEGGINGS"),
           Material::LegacyLeatherBoots { .. } => f.write_str("LEGACY_LEATHER_BOOTS"),
           Material::LegacyChainmailHelmet { .. } => f.write_str("LEGACY_CHAINMAIL_HELMET"),
           Material::LegacyChainmailChestplate { .. } => f.write_str("LEGACY_CHAINMAIL_CHESTPLATE"),
           Material::LegacyChainmailLeggings { .. } => f.write_str("LEGACY_CHAINMAIL_LEGGINGS"),
           Material::LegacyChainmailBoots { .. } => f.write_str("LEGACY_CHAINMAIL_BOOTS"),
           Material::LegacyIronHelmet { .. } => f.write_str("LEGACY_IRON_HELMET"),
           Material::LegacyIronChestplate { .. } => f.write_str("LEGACY_IRON_CHESTPLATE"),
           Material::LegacyIronLeggings { .. } => f.write_str("LEGACY_IRON_LEGGINGS"),
           Material::LegacyIronBoots { .. } => f.write_str("LEGACY_IRON_BOOTS"),
           Material::LegacyDiamondHelmet { .. } => f.write_str("LEGACY_DIAMOND_HELMET"),
           Material::LegacyDiamondChestplate { .. } => f.write_str("LEGACY_DIAMOND_CHESTPLATE"),
           Material::LegacyDiamondLeggings { .. } => f.write_str("LEGACY_DIAMOND_LEGGINGS"),
           Material::LegacyDiamondBoots { .. } => f.write_str("LEGACY_DIAMOND_BOOTS"),
           Material::LegacyGoldHelmet { .. } => f.write_str("LEGACY_GOLD_HELMET"),
           Material::LegacyGoldChestplate { .. } => f.write_str("LEGACY_GOLD_CHESTPLATE"),
           Material::LegacyGoldLeggings { .. } => f.write_str("LEGACY_GOLD_LEGGINGS"),
           Material::LegacyGoldBoots { .. } => f.write_str("LEGACY_GOLD_BOOTS"),
           Material::LegacyFlint { .. } => f.write_str("LEGACY_FLINT"),
           Material::LegacyPork { .. } => f.write_str("LEGACY_PORK"),
           Material::LegacyGrilledPork { .. } => f.write_str("LEGACY_GRILLED_PORK"),
           Material::LegacyPainting { .. } => f.write_str("LEGACY_PAINTING"),
           Material::LegacyGoldenApple { .. } => f.write_str("LEGACY_GOLDEN_APPLE"),
           Material::LegacySign { .. } => f.write_str("LEGACY_SIGN"),
           Material::LegacyWoodDoor { .. } => f.write_str("LEGACY_WOOD_DOOR"),
           Material::LegacyBucket { .. } => f.write_str("LEGACY_BUCKET"),
           Material::LegacyWaterBucket { .. } => f.write_str("LEGACY_WATER_BUCKET"),
           Material::LegacyLavaBucket { .. } => f.write_str("LEGACY_LAVA_BUCKET"),
           Material::LegacyMinecart { .. } => f.write_str("LEGACY_MINECART"),
           Material::LegacySaddle { .. } => f.write_str("LEGACY_SADDLE"),
           Material::LegacyIronDoor { .. } => f.write_str("LEGACY_IRON_DOOR"),
           Material::LegacyRedstone { .. } => f.write_str("LEGACY_REDSTONE"),
           Material::LegacySnowBall { .. } => f.write_str("LEGACY_SNOW_BALL"),
           Material::LegacyBoat { .. } => f.write_str("LEGACY_BOAT"),
           Material::LegacyLeather { .. } => f.write_str("LEGACY_LEATHER"),
           Material::LegacyMilkBucket { .. } => f.write_str("LEGACY_MILK_BUCKET"),
           Material::LegacyClayBrick { .. } => f.write_str("LEGACY_CLAY_BRICK"),
           Material::LegacyClayBall { .. } => f.write_str("LEGACY_CLAY_BALL"),
           Material::LegacySugarCane { .. } => f.write_str("LEGACY_SUGAR_CANE"),
           Material::LegacyPaper { .. } => f.write_str("LEGACY_PAPER"),
           Material::LegacyBook { .. } => f.write_str("LEGACY_BOOK"),
           Material::LegacySlimeBall { .. } => f.write_str("LEGACY_SLIME_BALL"),
           Material::LegacyStorageMinecart { .. } => f.write_str("LEGACY_STORAGE_MINECART"),
           Material::LegacyPoweredMinecart { .. } => f.write_str("LEGACY_POWERED_MINECART"),
           Material::LegacyEgg { .. } => f.write_str("LEGACY_EGG"),
           Material::LegacyCompass { .. } => f.write_str("LEGACY_COMPASS"),
           Material::LegacyFishingRod { .. } => f.write_str("LEGACY_FISHING_ROD"),
           Material::LegacyWatch { .. } => f.write_str("LEGACY_WATCH"),
           Material::LegacyGlowstoneDust { .. } => f.write_str("LEGACY_GLOWSTONE_DUST"),
           Material::LegacyRawFish { .. } => f.write_str("LEGACY_RAW_FISH"),
           Material::LegacyCookedFish { .. } => f.write_str("LEGACY_COOKED_FISH"),
           Material::LegacyInkSack { .. } => f.write_str("LEGACY_INK_SACK"),
           Material::LegacyBone { .. } => f.write_str("LEGACY_BONE"),
           Material::LegacySugar { .. } => f.write_str("LEGACY_SUGAR"),
           Material::LegacyCake { .. } => f.write_str("LEGACY_CAKE"),
           Material::LegacyBed { .. } => f.write_str("LEGACY_BED"),
           Material::LegacyDiode { .. } => f.write_str("LEGACY_DIODE"),
           Material::LegacyCookie { .. } => f.write_str("LEGACY_COOKIE"),
           Material::LegacyMap { .. } => f.write_str("LEGACY_MAP"),
           Material::LegacyShears { .. } => f.write_str("LEGACY_SHEARS"),
           Material::LegacyMelon { .. } => f.write_str("LEGACY_MELON"),
           Material::LegacyPumpkinSeeds { .. } => f.write_str("LEGACY_PUMPKIN_SEEDS"),
           Material::LegacyMelonSeeds { .. } => f.write_str("LEGACY_MELON_SEEDS"),
           Material::LegacyRawBeef { .. } => f.write_str("LEGACY_RAW_BEEF"),
           Material::LegacyCookedBeef { .. } => f.write_str("LEGACY_COOKED_BEEF"),
           Material::LegacyRawChicken { .. } => f.write_str("LEGACY_RAW_CHICKEN"),
           Material::LegacyCookedChicken { .. } => f.write_str("LEGACY_COOKED_CHICKEN"),
           Material::LegacyRottenFlesh { .. } => f.write_str("LEGACY_ROTTEN_FLESH"),
           Material::LegacyEnderPearl { .. } => f.write_str("LEGACY_ENDER_PEARL"),
           Material::LegacyBlazeRod { .. } => f.write_str("LEGACY_BLAZE_ROD"),
           Material::LegacyGhastTear { .. } => f.write_str("LEGACY_GHAST_TEAR"),
           Material::LegacyGoldNugget { .. } => f.write_str("LEGACY_GOLD_NUGGET"),
           Material::LegacyNetherStalk { .. } => f.write_str("LEGACY_NETHER_STALK"),
           Material::LegacyPotion { .. } => f.write_str("LEGACY_POTION"),
           Material::LegacyGlassBottle { .. } => f.write_str("LEGACY_GLASS_BOTTLE"),
           Material::LegacySpiderEye { .. } => f.write_str("LEGACY_SPIDER_EYE"),
           Material::LegacyFermentedSpiderEye { .. } => f.write_str("LEGACY_FERMENTED_SPIDER_EYE"),
           Material::LegacyBlazePowder { .. } => f.write_str("LEGACY_BLAZE_POWDER"),
           Material::LegacyMagmaCream { .. } => f.write_str("LEGACY_MAGMA_CREAM"),
           Material::LegacyBrewingStandItem { .. } => f.write_str("LEGACY_BREWING_STAND_ITEM"),
           Material::LegacyCauldronItem { .. } => f.write_str("LEGACY_CAULDRON_ITEM"),
           Material::LegacyEyeOfEnder { .. } => f.write_str("LEGACY_EYE_OF_ENDER"),
           Material::LegacySpeckledMelon { .. } => f.write_str("LEGACY_SPECKLED_MELON"),
           Material::LegacyMonsterEgg { .. } => f.write_str("LEGACY_MONSTER_EGG"),
           Material::LegacyExpBottle { .. } => f.write_str("LEGACY_EXP_BOTTLE"),
           Material::LegacyFireball { .. } => f.write_str("LEGACY_FIREBALL"),
           Material::LegacyBookAndQuill { .. } => f.write_str("LEGACY_BOOK_AND_QUILL"),
           Material::LegacyWrittenBook { .. } => f.write_str("LEGACY_WRITTEN_BOOK"),
           Material::LegacyEmerald { .. } => f.write_str("LEGACY_EMERALD"),
           Material::LegacyItemFrame { .. } => f.write_str("LEGACY_ITEM_FRAME"),
           Material::LegacyFlowerPotItem { .. } => f.write_str("LEGACY_FLOWER_POT_ITEM"),
           Material::LegacyCarrotItem { .. } => f.write_str("LEGACY_CARROT_ITEM"),
           Material::LegacyPotatoItem { .. } => f.write_str("LEGACY_POTATO_ITEM"),
           Material::LegacyBakedPotato { .. } => f.write_str("LEGACY_BAKED_POTATO"),
           Material::LegacyPoisonousPotato { .. } => f.write_str("LEGACY_POISONOUS_POTATO"),
           Material::LegacyEmptyMap { .. } => f.write_str("LEGACY_EMPTY_MAP"),
           Material::LegacyGoldenCarrot { .. } => f.write_str("LEGACY_GOLDEN_CARROT"),
           Material::LegacySkullItem { .. } => f.write_str("LEGACY_SKULL_ITEM"),
           Material::LegacyCarrotStick { .. } => f.write_str("LEGACY_CARROT_STICK"),
           Material::LegacyNetherStar { .. } => f.write_str("LEGACY_NETHER_STAR"),
           Material::LegacyPumpkinPie { .. } => f.write_str("LEGACY_PUMPKIN_PIE"),
           Material::LegacyFirework { .. } => f.write_str("LEGACY_FIREWORK"),
           Material::LegacyFireworkCharge { .. } => f.write_str("LEGACY_FIREWORK_CHARGE"),
           Material::LegacyEnchantedBook { .. } => f.write_str("LEGACY_ENCHANTED_BOOK"),
           Material::LegacyRedstoneComparator { .. } => f.write_str("LEGACY_REDSTONE_COMPARATOR"),
           Material::LegacyNetherBrickItem { .. } => f.write_str("LEGACY_NETHER_BRICK_ITEM"),
           Material::LegacyQuartz { .. } => f.write_str("LEGACY_QUARTZ"),
           Material::LegacyExplosiveMinecart { .. } => f.write_str("LEGACY_EXPLOSIVE_MINECART"),
           Material::LegacyHopperMinecart { .. } => f.write_str("LEGACY_HOPPER_MINECART"),
           Material::LegacyPrismarineShard { .. } => f.write_str("LEGACY_PRISMARINE_SHARD"),
           Material::LegacyPrismarineCrystals { .. } => f.write_str("LEGACY_PRISMARINE_CRYSTALS"),
           Material::LegacyRabbit { .. } => f.write_str("LEGACY_RABBIT"),
           Material::LegacyCookedRabbit { .. } => f.write_str("LEGACY_COOKED_RABBIT"),
           Material::LegacyRabbitStew { .. } => f.write_str("LEGACY_RABBIT_STEW"),
           Material::LegacyRabbitFoot { .. } => f.write_str("LEGACY_RABBIT_FOOT"),
           Material::LegacyRabbitHide { .. } => f.write_str("LEGACY_RABBIT_HIDE"),
           Material::LegacyArmorStand { .. } => f.write_str("LEGACY_ARMOR_STAND"),
           Material::LegacyIronBarding { .. } => f.write_str("LEGACY_IRON_BARDING"),
           Material::LegacyGoldBarding { .. } => f.write_str("LEGACY_GOLD_BARDING"),
           Material::LegacyDiamondBarding { .. } => f.write_str("LEGACY_DIAMOND_BARDING"),
           Material::LegacyLeash { .. } => f.write_str("LEGACY_LEASH"),
           Material::LegacyNameTag { .. } => f.write_str("LEGACY_NAME_TAG"),
           Material::LegacyCommandMinecart { .. } => f.write_str("LEGACY_COMMAND_MINECART"),
           Material::LegacyMutton { .. } => f.write_str("LEGACY_MUTTON"),
           Material::LegacyCookedMutton { .. } => f.write_str("LEGACY_COOKED_MUTTON"),
           Material::LegacyBanner { .. } => f.write_str("LEGACY_BANNER"),
           Material::LegacyEndCrystal { .. } => f.write_str("LEGACY_END_CRYSTAL"),
           Material::LegacySpruceDoorItem { .. } => f.write_str("LEGACY_SPRUCE_DOOR_ITEM"),
           Material::LegacyBirchDoorItem { .. } => f.write_str("LEGACY_BIRCH_DOOR_ITEM"),
           Material::LegacyJungleDoorItem { .. } => f.write_str("LEGACY_JUNGLE_DOOR_ITEM"),
           Material::LegacyAcaciaDoorItem { .. } => f.write_str("LEGACY_ACACIA_DOOR_ITEM"),
           Material::LegacyDarkOakDoorItem { .. } => f.write_str("LEGACY_DARK_OAK_DOOR_ITEM"),
           Material::LegacyChorusFruit { .. } => f.write_str("LEGACY_CHORUS_FRUIT"),
           Material::LegacyChorusFruitPopped { .. } => f.write_str("LEGACY_CHORUS_FRUIT_POPPED"),
           Material::LegacyBeetroot { .. } => f.write_str("LEGACY_BEETROOT"),
           Material::LegacyBeetrootSeeds { .. } => f.write_str("LEGACY_BEETROOT_SEEDS"),
           Material::LegacyBeetrootSoup { .. } => f.write_str("LEGACY_BEETROOT_SOUP"),
           Material::LegacyDragonsBreath { .. } => f.write_str("LEGACY_DRAGONS_BREATH"),
           Material::LegacySplashPotion { .. } => f.write_str("LEGACY_SPLASH_POTION"),
           Material::LegacySpectralArrow { .. } => f.write_str("LEGACY_SPECTRAL_ARROW"),
           Material::LegacyTippedArrow { .. } => f.write_str("LEGACY_TIPPED_ARROW"),
           Material::LegacyLingeringPotion { .. } => f.write_str("LEGACY_LINGERING_POTION"),
           Material::LegacyShield { .. } => f.write_str("LEGACY_SHIELD"),
           Material::LegacyElytra { .. } => f.write_str("LEGACY_ELYTRA"),
           Material::LegacyBoatSpruce { .. } => f.write_str("LEGACY_BOAT_SPRUCE"),
           Material::LegacyBoatBirch { .. } => f.write_str("LEGACY_BOAT_BIRCH"),
           Material::LegacyBoatJungle { .. } => f.write_str("LEGACY_BOAT_JUNGLE"),
           Material::LegacyBoatAcacia { .. } => f.write_str("LEGACY_BOAT_ACACIA"),
           Material::LegacyBoatDarkOak { .. } => f.write_str("LEGACY_BOAT_DARK_OAK"),
           Material::LegacyTotem { .. } => f.write_str("LEGACY_TOTEM"),
           Material::LegacyShulkerShell { .. } => f.write_str("LEGACY_SHULKER_SHELL"),
           Material::LegacyIronNugget { .. } => f.write_str("LEGACY_IRON_NUGGET"),
           Material::LegacyKnowledgeBook { .. } => f.write_str("LEGACY_KNOWLEDGE_BOOK"),
           Material::LegacyGoldRecord { .. } => f.write_str("LEGACY_GOLD_RECORD"),
           Material::LegacyGreenRecord { .. } => f.write_str("LEGACY_GREEN_RECORD"),
           Material::LegacyRecord3 { .. } => f.write_str("LEGACY_RECORD_3"),
           Material::LegacyRecord4 { .. } => f.write_str("LEGACY_RECORD_4"),
           Material::LegacyRecord5 { .. } => f.write_str("LEGACY_RECORD_5"),
           Material::LegacyRecord6 { .. } => f.write_str("LEGACY_RECORD_6"),
           Material::LegacyRecord7 { .. } => f.write_str("LEGACY_RECORD_7"),
           Material::LegacyRecord8 { .. } => f.write_str("LEGACY_RECORD_8"),
           Material::LegacyRecord9 { .. } => f.write_str("LEGACY_RECORD_9"),
           Material::LegacyRecord10 { .. } => f.write_str("LEGACY_RECORD_10"),
           Material::LegacyRecord11 { .. } => f.write_str("LEGACY_RECORD_11"),
           Material::LegacyRecord12 { .. } => f.write_str("LEGACY_RECORD_12"),
       }
   }
}

        impl<'mc> MaterialTrait<'mc> for Material<'mc> {}
        
        pub trait MaterialTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<Material<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Material");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Material;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"AIR" => Ok(Material::Air { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE" => Ok(Material::Stone { inner: MaterialStruct::from_raw(env,obj)?}),
"GRANITE" => Ok(Material::Granite { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_GRANITE" => Ok(Material::PolishedGranite { inner: MaterialStruct::from_raw(env,obj)?}),
"DIORITE" => Ok(Material::Diorite { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_DIORITE" => Ok(Material::PolishedDiorite { inner: MaterialStruct::from_raw(env,obj)?}),
"ANDESITE" => Ok(Material::Andesite { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_ANDESITE" => Ok(Material::PolishedAndesite { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE" => Ok(Material::Deepslate { inner: MaterialStruct::from_raw(env,obj)?}),
"COBBLED_DEEPSLATE" => Ok(Material::CobbledDeepslate { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_DEEPSLATE" => Ok(Material::PolishedDeepslate { inner: MaterialStruct::from_raw(env,obj)?}),
"CALCITE" => Ok(Material::Calcite { inner: MaterialStruct::from_raw(env,obj)?}),
"TUFF" => Ok(Material::Tuff { inner: MaterialStruct::from_raw(env,obj)?}),
"TUFF_SLAB" => Ok(Material::TuffSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"TUFF_STAIRS" => Ok(Material::TuffStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"TUFF_WALL" => Ok(Material::TuffWall { inner: MaterialStruct::from_raw(env,obj)?}),
"CHISELED_TUFF" => Ok(Material::ChiseledTuff { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_TUFF" => Ok(Material::PolishedTuff { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_TUFF_SLAB" => Ok(Material::PolishedTuffSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_TUFF_STAIRS" => Ok(Material::PolishedTuffStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_TUFF_WALL" => Ok(Material::PolishedTuffWall { inner: MaterialStruct::from_raw(env,obj)?}),
"TUFF_BRICKS" => Ok(Material::TuffBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"TUFF_BRICK_SLAB" => Ok(Material::TuffBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"TUFF_BRICK_STAIRS" => Ok(Material::TuffBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"TUFF_BRICK_WALL" => Ok(Material::TuffBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),
"CHISELED_TUFF_BRICKS" => Ok(Material::ChiseledTuffBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"DRIPSTONE_BLOCK" => Ok(Material::DripstoneBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"GRASS_BLOCK" => Ok(Material::GrassBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"DIRT" => Ok(Material::Dirt { inner: MaterialStruct::from_raw(env,obj)?}),
"COARSE_DIRT" => Ok(Material::CoarseDirt { inner: MaterialStruct::from_raw(env,obj)?}),
"PODZOL" => Ok(Material::Podzol { inner: MaterialStruct::from_raw(env,obj)?}),
"ROOTED_DIRT" => Ok(Material::RootedDirt { inner: MaterialStruct::from_raw(env,obj)?}),
"MUD" => Ok(Material::Mud { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_NYLIUM" => Ok(Material::CrimsonNylium { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_NYLIUM" => Ok(Material::WarpedNylium { inner: MaterialStruct::from_raw(env,obj)?}),
"COBBLESTONE" => Ok(Material::Cobblestone { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_PLANKS" => Ok(Material::OakPlanks { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_PLANKS" => Ok(Material::SprucePlanks { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_PLANKS" => Ok(Material::BirchPlanks { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_PLANKS" => Ok(Material::JunglePlanks { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_PLANKS" => Ok(Material::AcaciaPlanks { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_PLANKS" => Ok(Material::CherryPlanks { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_PLANKS" => Ok(Material::DarkOakPlanks { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_PLANKS" => Ok(Material::MangrovePlanks { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_PLANKS" => Ok(Material::BambooPlanks { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_PLANKS" => Ok(Material::CrimsonPlanks { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_PLANKS" => Ok(Material::WarpedPlanks { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_MOSAIC" => Ok(Material::BambooMosaic { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_SAPLING" => Ok(Material::OakSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_SAPLING" => Ok(Material::SpruceSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_SAPLING" => Ok(Material::BirchSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_SAPLING" => Ok(Material::JungleSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_SAPLING" => Ok(Material::AcaciaSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_SAPLING" => Ok(Material::CherrySapling { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_SAPLING" => Ok(Material::DarkOakSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_PROPAGULE" => Ok(Material::MangrovePropagule { inner: MaterialStruct::from_raw(env,obj)?}),
"BEDROCK" => Ok(Material::Bedrock { inner: MaterialStruct::from_raw(env,obj)?}),
"SAND" => Ok(Material::Sand { inner: MaterialStruct::from_raw(env,obj)?}),
"SUSPICIOUS_SAND" => Ok(Material::SuspiciousSand { inner: MaterialStruct::from_raw(env,obj)?}),
"SUSPICIOUS_GRAVEL" => Ok(Material::SuspiciousGravel { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_SAND" => Ok(Material::RedSand { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAVEL" => Ok(Material::Gravel { inner: MaterialStruct::from_raw(env,obj)?}),
"COAL_ORE" => Ok(Material::CoalOre { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_COAL_ORE" => Ok(Material::DeepslateCoalOre { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_ORE" => Ok(Material::IronOre { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_IRON_ORE" => Ok(Material::DeepslateIronOre { inner: MaterialStruct::from_raw(env,obj)?}),
"COPPER_ORE" => Ok(Material::CopperOre { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_COPPER_ORE" => Ok(Material::DeepslateCopperOre { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLD_ORE" => Ok(Material::GoldOre { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_GOLD_ORE" => Ok(Material::DeepslateGoldOre { inner: MaterialStruct::from_raw(env,obj)?}),
"REDSTONE_ORE" => Ok(Material::RedstoneOre { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_REDSTONE_ORE" => Ok(Material::DeepslateRedstoneOre { inner: MaterialStruct::from_raw(env,obj)?}),
"EMERALD_ORE" => Ok(Material::EmeraldOre { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_EMERALD_ORE" => Ok(Material::DeepslateEmeraldOre { inner: MaterialStruct::from_raw(env,obj)?}),
"LAPIS_ORE" => Ok(Material::LapisOre { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_LAPIS_ORE" => Ok(Material::DeepslateLapisOre { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_ORE" => Ok(Material::DiamondOre { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_DIAMOND_ORE" => Ok(Material::DeepslateDiamondOre { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_GOLD_ORE" => Ok(Material::NetherGoldOre { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_QUARTZ_ORE" => Ok(Material::NetherQuartzOre { inner: MaterialStruct::from_raw(env,obj)?}),
"ANCIENT_DEBRIS" => Ok(Material::AncientDebris { inner: MaterialStruct::from_raw(env,obj)?}),
"COAL_BLOCK" => Ok(Material::CoalBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"RAW_IRON_BLOCK" => Ok(Material::RawIronBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"RAW_COPPER_BLOCK" => Ok(Material::RawCopperBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"RAW_GOLD_BLOCK" => Ok(Material::RawGoldBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"AMETHYST_BLOCK" => Ok(Material::AmethystBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"BUDDING_AMETHYST" => Ok(Material::BuddingAmethyst { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_BLOCK" => Ok(Material::IronBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"COPPER_BLOCK" => Ok(Material::CopperBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLD_BLOCK" => Ok(Material::GoldBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_BLOCK" => Ok(Material::DiamondBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_BLOCK" => Ok(Material::NetheriteBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"EXPOSED_COPPER" => Ok(Material::ExposedCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WEATHERED_COPPER" => Ok(Material::WeatheredCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"OXIDIZED_COPPER" => Ok(Material::OxidizedCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"CHISELED_COPPER" => Ok(Material::ChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"EXPOSED_CHISELED_COPPER" => Ok(Material::ExposedChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WEATHERED_CHISELED_COPPER" => Ok(Material::WeatheredChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"OXIDIZED_CHISELED_COPPER" => Ok(Material::OxidizedChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"CUT_COPPER" => Ok(Material::CutCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"EXPOSED_CUT_COPPER" => Ok(Material::ExposedCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WEATHERED_CUT_COPPER" => Ok(Material::WeatheredCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"OXIDIZED_CUT_COPPER" => Ok(Material::OxidizedCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"CUT_COPPER_STAIRS" => Ok(Material::CutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"EXPOSED_CUT_COPPER_STAIRS" => Ok(Material::ExposedCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"WEATHERED_CUT_COPPER_STAIRS" => Ok(Material::WeatheredCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"OXIDIZED_CUT_COPPER_STAIRS" => Ok(Material::OxidizedCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"CUT_COPPER_SLAB" => Ok(Material::CutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"EXPOSED_CUT_COPPER_SLAB" => Ok(Material::ExposedCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"WEATHERED_CUT_COPPER_SLAB" => Ok(Material::WeatheredCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"OXIDIZED_CUT_COPPER_SLAB" => Ok(Material::OxidizedCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_COPPER_BLOCK" => Ok(Material::WaxedCopperBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_EXPOSED_COPPER" => Ok(Material::WaxedExposedCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_WEATHERED_COPPER" => Ok(Material::WaxedWeatheredCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_OXIDIZED_COPPER" => Ok(Material::WaxedOxidizedCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_CHISELED_COPPER" => Ok(Material::WaxedChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_EXPOSED_CHISELED_COPPER" => Ok(Material::WaxedExposedChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_WEATHERED_CHISELED_COPPER" => Ok(Material::WaxedWeatheredChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_OXIDIZED_CHISELED_COPPER" => Ok(Material::WaxedOxidizedChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_CUT_COPPER" => Ok(Material::WaxedCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_EXPOSED_CUT_COPPER" => Ok(Material::WaxedExposedCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_WEATHERED_CUT_COPPER" => Ok(Material::WaxedWeatheredCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_OXIDIZED_CUT_COPPER" => Ok(Material::WaxedOxidizedCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_CUT_COPPER_STAIRS" => Ok(Material::WaxedCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_EXPOSED_CUT_COPPER_STAIRS" => Ok(Material::WaxedExposedCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_WEATHERED_CUT_COPPER_STAIRS" => Ok(Material::WaxedWeatheredCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_OXIDIZED_CUT_COPPER_STAIRS" => Ok(Material::WaxedOxidizedCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_CUT_COPPER_SLAB" => Ok(Material::WaxedCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_EXPOSED_CUT_COPPER_SLAB" => Ok(Material::WaxedExposedCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_WEATHERED_CUT_COPPER_SLAB" => Ok(Material::WaxedWeatheredCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_OXIDIZED_CUT_COPPER_SLAB" => Ok(Material::WaxedOxidizedCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_LOG" => Ok(Material::OakLog { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_LOG" => Ok(Material::SpruceLog { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_LOG" => Ok(Material::BirchLog { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_LOG" => Ok(Material::JungleLog { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_LOG" => Ok(Material::AcaciaLog { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_LOG" => Ok(Material::CherryLog { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_LOG" => Ok(Material::DarkOakLog { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_LOG" => Ok(Material::MangroveLog { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_ROOTS" => Ok(Material::MangroveRoots { inner: MaterialStruct::from_raw(env,obj)?}),
"MUDDY_MANGROVE_ROOTS" => Ok(Material::MuddyMangroveRoots { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_STEM" => Ok(Material::CrimsonStem { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_STEM" => Ok(Material::WarpedStem { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_BLOCK" => Ok(Material::BambooBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_OAK_LOG" => Ok(Material::StrippedOakLog { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_SPRUCE_LOG" => Ok(Material::StrippedSpruceLog { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_BIRCH_LOG" => Ok(Material::StrippedBirchLog { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_JUNGLE_LOG" => Ok(Material::StrippedJungleLog { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_ACACIA_LOG" => Ok(Material::StrippedAcaciaLog { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_CHERRY_LOG" => Ok(Material::StrippedCherryLog { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_DARK_OAK_LOG" => Ok(Material::StrippedDarkOakLog { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_MANGROVE_LOG" => Ok(Material::StrippedMangroveLog { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_CRIMSON_STEM" => Ok(Material::StrippedCrimsonStem { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_WARPED_STEM" => Ok(Material::StrippedWarpedStem { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_OAK_WOOD" => Ok(Material::StrippedOakWood { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_SPRUCE_WOOD" => Ok(Material::StrippedSpruceWood { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_BIRCH_WOOD" => Ok(Material::StrippedBirchWood { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_JUNGLE_WOOD" => Ok(Material::StrippedJungleWood { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_ACACIA_WOOD" => Ok(Material::StrippedAcaciaWood { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_CHERRY_WOOD" => Ok(Material::StrippedCherryWood { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_DARK_OAK_WOOD" => Ok(Material::StrippedDarkOakWood { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_MANGROVE_WOOD" => Ok(Material::StrippedMangroveWood { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_CRIMSON_HYPHAE" => Ok(Material::StrippedCrimsonHyphae { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_WARPED_HYPHAE" => Ok(Material::StrippedWarpedHyphae { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIPPED_BAMBOO_BLOCK" => Ok(Material::StrippedBambooBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_WOOD" => Ok(Material::OakWood { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_WOOD" => Ok(Material::SpruceWood { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_WOOD" => Ok(Material::BirchWood { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_WOOD" => Ok(Material::JungleWood { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_WOOD" => Ok(Material::AcaciaWood { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_WOOD" => Ok(Material::CherryWood { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_WOOD" => Ok(Material::DarkOakWood { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_WOOD" => Ok(Material::MangroveWood { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_HYPHAE" => Ok(Material::CrimsonHyphae { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_HYPHAE" => Ok(Material::WarpedHyphae { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_LEAVES" => Ok(Material::OakLeaves { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_LEAVES" => Ok(Material::SpruceLeaves { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_LEAVES" => Ok(Material::BirchLeaves { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_LEAVES" => Ok(Material::JungleLeaves { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_LEAVES" => Ok(Material::AcaciaLeaves { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_LEAVES" => Ok(Material::CherryLeaves { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_LEAVES" => Ok(Material::DarkOakLeaves { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_LEAVES" => Ok(Material::MangroveLeaves { inner: MaterialStruct::from_raw(env,obj)?}),
"AZALEA_LEAVES" => Ok(Material::AzaleaLeaves { inner: MaterialStruct::from_raw(env,obj)?}),
"FLOWERING_AZALEA_LEAVES" => Ok(Material::FloweringAzaleaLeaves { inner: MaterialStruct::from_raw(env,obj)?}),
"SPONGE" => Ok(Material::Sponge { inner: MaterialStruct::from_raw(env,obj)?}),
"WET_SPONGE" => Ok(Material::WetSponge { inner: MaterialStruct::from_raw(env,obj)?}),
"GLASS" => Ok(Material::Glass { inner: MaterialStruct::from_raw(env,obj)?}),
"TINTED_GLASS" => Ok(Material::TintedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"LAPIS_BLOCK" => Ok(Material::LapisBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"SANDSTONE" => Ok(Material::Sandstone { inner: MaterialStruct::from_raw(env,obj)?}),
"CHISELED_SANDSTONE" => Ok(Material::ChiseledSandstone { inner: MaterialStruct::from_raw(env,obj)?}),
"CUT_SANDSTONE" => Ok(Material::CutSandstone { inner: MaterialStruct::from_raw(env,obj)?}),
"COBWEB" => Ok(Material::Cobweb { inner: MaterialStruct::from_raw(env,obj)?}),
"SHORT_GRASS" => Ok(Material::ShortGrass { inner: MaterialStruct::from_raw(env,obj)?}),
"FERN" => Ok(Material::Fern { inner: MaterialStruct::from_raw(env,obj)?}),
"AZALEA" => Ok(Material::Azalea { inner: MaterialStruct::from_raw(env,obj)?}),
"FLOWERING_AZALEA" => Ok(Material::FloweringAzalea { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_BUSH" => Ok(Material::DeadBush { inner: MaterialStruct::from_raw(env,obj)?}),
"SEAGRASS" => Ok(Material::Seagrass { inner: MaterialStruct::from_raw(env,obj)?}),
"SEA_PICKLE" => Ok(Material::SeaPickle { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_WOOL" => Ok(Material::WhiteWool { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_WOOL" => Ok(Material::OrangeWool { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_WOOL" => Ok(Material::MagentaWool { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_WOOL" => Ok(Material::LightBlueWool { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_WOOL" => Ok(Material::YellowWool { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_WOOL" => Ok(Material::LimeWool { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_WOOL" => Ok(Material::PinkWool { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_WOOL" => Ok(Material::GrayWool { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_WOOL" => Ok(Material::LightGrayWool { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_WOOL" => Ok(Material::CyanWool { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_WOOL" => Ok(Material::PurpleWool { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_WOOL" => Ok(Material::BlueWool { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_WOOL" => Ok(Material::BrownWool { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_WOOL" => Ok(Material::GreenWool { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_WOOL" => Ok(Material::RedWool { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_WOOL" => Ok(Material::BlackWool { inner: MaterialStruct::from_raw(env,obj)?}),
"DANDELION" => Ok(Material::Dandelion { inner: MaterialStruct::from_raw(env,obj)?}),
"POPPY" => Ok(Material::Poppy { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_ORCHID" => Ok(Material::BlueOrchid { inner: MaterialStruct::from_raw(env,obj)?}),
"ALLIUM" => Ok(Material::Allium { inner: MaterialStruct::from_raw(env,obj)?}),
"AZURE_BLUET" => Ok(Material::AzureBluet { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_TULIP" => Ok(Material::RedTulip { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_TULIP" => Ok(Material::OrangeTulip { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_TULIP" => Ok(Material::WhiteTulip { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_TULIP" => Ok(Material::PinkTulip { inner: MaterialStruct::from_raw(env,obj)?}),
"OXEYE_DAISY" => Ok(Material::OxeyeDaisy { inner: MaterialStruct::from_raw(env,obj)?}),
"CORNFLOWER" => Ok(Material::Cornflower { inner: MaterialStruct::from_raw(env,obj)?}),
"LILY_OF_THE_VALLEY" => Ok(Material::LilyOfTheValley { inner: MaterialStruct::from_raw(env,obj)?}),
"WITHER_ROSE" => Ok(Material::WitherRose { inner: MaterialStruct::from_raw(env,obj)?}),
"TORCHFLOWER" => Ok(Material::Torchflower { inner: MaterialStruct::from_raw(env,obj)?}),
"PITCHER_PLANT" => Ok(Material::PitcherPlant { inner: MaterialStruct::from_raw(env,obj)?}),
"SPORE_BLOSSOM" => Ok(Material::SporeBlossom { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_MUSHROOM" => Ok(Material::BrownMushroom { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_MUSHROOM" => Ok(Material::RedMushroom { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_FUNGUS" => Ok(Material::CrimsonFungus { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_FUNGUS" => Ok(Material::WarpedFungus { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_ROOTS" => Ok(Material::CrimsonRoots { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_ROOTS" => Ok(Material::WarpedRoots { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_SPROUTS" => Ok(Material::NetherSprouts { inner: MaterialStruct::from_raw(env,obj)?}),
"WEEPING_VINES" => Ok(Material::WeepingVines { inner: MaterialStruct::from_raw(env,obj)?}),
"TWISTING_VINES" => Ok(Material::TwistingVines { inner: MaterialStruct::from_raw(env,obj)?}),
"SUGAR_CANE" => Ok(Material::SugarCane { inner: MaterialStruct::from_raw(env,obj)?}),
"KELP" => Ok(Material::Kelp { inner: MaterialStruct::from_raw(env,obj)?}),
"MOSS_CARPET" => Ok(Material::MossCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_PETALS" => Ok(Material::PinkPetals { inner: MaterialStruct::from_raw(env,obj)?}),
"MOSS_BLOCK" => Ok(Material::MossBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"HANGING_ROOTS" => Ok(Material::HangingRoots { inner: MaterialStruct::from_raw(env,obj)?}),
"BIG_DRIPLEAF" => Ok(Material::BigDripleaf { inner: MaterialStruct::from_raw(env,obj)?}),
"SMALL_DRIPLEAF" => Ok(Material::SmallDripleaf { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO" => Ok(Material::Bamboo { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_SLAB" => Ok(Material::OakSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_SLAB" => Ok(Material::SpruceSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_SLAB" => Ok(Material::BirchSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_SLAB" => Ok(Material::JungleSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_SLAB" => Ok(Material::AcaciaSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_SLAB" => Ok(Material::CherrySlab { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_SLAB" => Ok(Material::DarkOakSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_SLAB" => Ok(Material::MangroveSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_SLAB" => Ok(Material::BambooSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_MOSAIC_SLAB" => Ok(Material::BambooMosaicSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_SLAB" => Ok(Material::CrimsonSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_SLAB" => Ok(Material::WarpedSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_SLAB" => Ok(Material::StoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_STONE_SLAB" => Ok(Material::SmoothStoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"SANDSTONE_SLAB" => Ok(Material::SandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"CUT_SANDSTONE_SLAB" => Ok(Material::CutSandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"PETRIFIED_OAK_SLAB" => Ok(Material::PetrifiedOakSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"COBBLESTONE_SLAB" => Ok(Material::CobblestoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"BRICK_SLAB" => Ok(Material::BrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_BRICK_SLAB" => Ok(Material::StoneBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"MUD_BRICK_SLAB" => Ok(Material::MudBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_BRICK_SLAB" => Ok(Material::NetherBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"QUARTZ_SLAB" => Ok(Material::QuartzSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_SANDSTONE_SLAB" => Ok(Material::RedSandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"CUT_RED_SANDSTONE_SLAB" => Ok(Material::CutRedSandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPUR_SLAB" => Ok(Material::PurpurSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"PRISMARINE_SLAB" => Ok(Material::PrismarineSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"PRISMARINE_BRICK_SLAB" => Ok(Material::PrismarineBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_PRISMARINE_SLAB" => Ok(Material::DarkPrismarineSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_QUARTZ" => Ok(Material::SmoothQuartz { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_RED_SANDSTONE" => Ok(Material::SmoothRedSandstone { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_SANDSTONE" => Ok(Material::SmoothSandstone { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_STONE" => Ok(Material::SmoothStone { inner: MaterialStruct::from_raw(env,obj)?}),
"BRICKS" => Ok(Material::Bricks { inner: MaterialStruct::from_raw(env,obj)?}),
"BOOKSHELF" => Ok(Material::Bookshelf { inner: MaterialStruct::from_raw(env,obj)?}),
"CHISELED_BOOKSHELF" => Ok(Material::ChiseledBookshelf { inner: MaterialStruct::from_raw(env,obj)?}),
"DECORATED_POT" => Ok(Material::DecoratedPot { inner: MaterialStruct::from_raw(env,obj)?}),
"MOSSY_COBBLESTONE" => Ok(Material::MossyCobblestone { inner: MaterialStruct::from_raw(env,obj)?}),
"OBSIDIAN" => Ok(Material::Obsidian { inner: MaterialStruct::from_raw(env,obj)?}),
"TORCH" => Ok(Material::Torch { inner: MaterialStruct::from_raw(env,obj)?}),
"END_ROD" => Ok(Material::EndRod { inner: MaterialStruct::from_raw(env,obj)?}),
"CHORUS_PLANT" => Ok(Material::ChorusPlant { inner: MaterialStruct::from_raw(env,obj)?}),
"CHORUS_FLOWER" => Ok(Material::ChorusFlower { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPUR_BLOCK" => Ok(Material::PurpurBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPUR_PILLAR" => Ok(Material::PurpurPillar { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPUR_STAIRS" => Ok(Material::PurpurStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"SPAWNER" => Ok(Material::Spawner { inner: MaterialStruct::from_raw(env,obj)?}),
"CHEST" => Ok(Material::Chest { inner: MaterialStruct::from_raw(env,obj)?}),
"CRAFTING_TABLE" => Ok(Material::CraftingTable { inner: MaterialStruct::from_raw(env,obj)?}),
"FARMLAND" => Ok(Material::Farmland { inner: MaterialStruct::from_raw(env,obj)?}),
"FURNACE" => Ok(Material::Furnace { inner: MaterialStruct::from_raw(env,obj)?}),
"LADDER" => Ok(Material::Ladder { inner: MaterialStruct::from_raw(env,obj)?}),
"COBBLESTONE_STAIRS" => Ok(Material::CobblestoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"SNOW" => Ok(Material::Snow { inner: MaterialStruct::from_raw(env,obj)?}),
"ICE" => Ok(Material::Ice { inner: MaterialStruct::from_raw(env,obj)?}),
"SNOW_BLOCK" => Ok(Material::SnowBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"CACTUS" => Ok(Material::Cactus { inner: MaterialStruct::from_raw(env,obj)?}),
"CLAY" => Ok(Material::Clay { inner: MaterialStruct::from_raw(env,obj)?}),
"JUKEBOX" => Ok(Material::Jukebox { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_FENCE" => Ok(Material::OakFence { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_FENCE" => Ok(Material::SpruceFence { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_FENCE" => Ok(Material::BirchFence { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_FENCE" => Ok(Material::JungleFence { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_FENCE" => Ok(Material::AcaciaFence { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_FENCE" => Ok(Material::CherryFence { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_FENCE" => Ok(Material::DarkOakFence { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_FENCE" => Ok(Material::MangroveFence { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_FENCE" => Ok(Material::BambooFence { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_FENCE" => Ok(Material::CrimsonFence { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_FENCE" => Ok(Material::WarpedFence { inner: MaterialStruct::from_raw(env,obj)?}),
"PUMPKIN" => Ok(Material::Pumpkin { inner: MaterialStruct::from_raw(env,obj)?}),
"CARVED_PUMPKIN" => Ok(Material::CarvedPumpkin { inner: MaterialStruct::from_raw(env,obj)?}),
"JACK_O_LANTERN" => Ok(Material::JackOLantern { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERRACK" => Ok(Material::Netherrack { inner: MaterialStruct::from_raw(env,obj)?}),
"SOUL_SAND" => Ok(Material::SoulSand { inner: MaterialStruct::from_raw(env,obj)?}),
"SOUL_SOIL" => Ok(Material::SoulSoil { inner: MaterialStruct::from_raw(env,obj)?}),
"BASALT" => Ok(Material::Basalt { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_BASALT" => Ok(Material::PolishedBasalt { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_BASALT" => Ok(Material::SmoothBasalt { inner: MaterialStruct::from_raw(env,obj)?}),
"SOUL_TORCH" => Ok(Material::SoulTorch { inner: MaterialStruct::from_raw(env,obj)?}),
"GLOWSTONE" => Ok(Material::Glowstone { inner: MaterialStruct::from_raw(env,obj)?}),
"INFESTED_STONE" => Ok(Material::InfestedStone { inner: MaterialStruct::from_raw(env,obj)?}),
"INFESTED_COBBLESTONE" => Ok(Material::InfestedCobblestone { inner: MaterialStruct::from_raw(env,obj)?}),
"INFESTED_STONE_BRICKS" => Ok(Material::InfestedStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"INFESTED_MOSSY_STONE_BRICKS" => Ok(Material::InfestedMossyStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"INFESTED_CRACKED_STONE_BRICKS" => Ok(Material::InfestedCrackedStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"INFESTED_CHISELED_STONE_BRICKS" => Ok(Material::InfestedChiseledStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"INFESTED_DEEPSLATE" => Ok(Material::InfestedDeepslate { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_BRICKS" => Ok(Material::StoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"MOSSY_STONE_BRICKS" => Ok(Material::MossyStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"CRACKED_STONE_BRICKS" => Ok(Material::CrackedStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"CHISELED_STONE_BRICKS" => Ok(Material::ChiseledStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"PACKED_MUD" => Ok(Material::PackedMud { inner: MaterialStruct::from_raw(env,obj)?}),
"MUD_BRICKS" => Ok(Material::MudBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_BRICKS" => Ok(Material::DeepslateBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"CRACKED_DEEPSLATE_BRICKS" => Ok(Material::CrackedDeepslateBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_TILES" => Ok(Material::DeepslateTiles { inner: MaterialStruct::from_raw(env,obj)?}),
"CRACKED_DEEPSLATE_TILES" => Ok(Material::CrackedDeepslateTiles { inner: MaterialStruct::from_raw(env,obj)?}),
"CHISELED_DEEPSLATE" => Ok(Material::ChiseledDeepslate { inner: MaterialStruct::from_raw(env,obj)?}),
"REINFORCED_DEEPSLATE" => Ok(Material::ReinforcedDeepslate { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_MUSHROOM_BLOCK" => Ok(Material::BrownMushroomBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_MUSHROOM_BLOCK" => Ok(Material::RedMushroomBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSHROOM_STEM" => Ok(Material::MushroomStem { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_BARS" => Ok(Material::IronBars { inner: MaterialStruct::from_raw(env,obj)?}),
"CHAIN" => Ok(Material::Chain { inner: MaterialStruct::from_raw(env,obj)?}),
"GLASS_PANE" => Ok(Material::GlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"MELON" => Ok(Material::Melon { inner: MaterialStruct::from_raw(env,obj)?}),
"VINE" => Ok(Material::Vine { inner: MaterialStruct::from_raw(env,obj)?}),
"GLOW_LICHEN" => Ok(Material::GlowLichen { inner: MaterialStruct::from_raw(env,obj)?}),
"BRICK_STAIRS" => Ok(Material::BrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_BRICK_STAIRS" => Ok(Material::StoneBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"MUD_BRICK_STAIRS" => Ok(Material::MudBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"MYCELIUM" => Ok(Material::Mycelium { inner: MaterialStruct::from_raw(env,obj)?}),
"LILY_PAD" => Ok(Material::LilyPad { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_BRICKS" => Ok(Material::NetherBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"CRACKED_NETHER_BRICKS" => Ok(Material::CrackedNetherBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"CHISELED_NETHER_BRICKS" => Ok(Material::ChiseledNetherBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_BRICK_FENCE" => Ok(Material::NetherBrickFence { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_BRICK_STAIRS" => Ok(Material::NetherBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"SCULK" => Ok(Material::Sculk { inner: MaterialStruct::from_raw(env,obj)?}),
"SCULK_VEIN" => Ok(Material::SculkVein { inner: MaterialStruct::from_raw(env,obj)?}),
"SCULK_CATALYST" => Ok(Material::SculkCatalyst { inner: MaterialStruct::from_raw(env,obj)?}),
"SCULK_SHRIEKER" => Ok(Material::SculkShrieker { inner: MaterialStruct::from_raw(env,obj)?}),
"ENCHANTING_TABLE" => Ok(Material::EnchantingTable { inner: MaterialStruct::from_raw(env,obj)?}),
"END_PORTAL_FRAME" => Ok(Material::EndPortalFrame { inner: MaterialStruct::from_raw(env,obj)?}),
"END_STONE" => Ok(Material::EndStone { inner: MaterialStruct::from_raw(env,obj)?}),
"END_STONE_BRICKS" => Ok(Material::EndStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"DRAGON_EGG" => Ok(Material::DragonEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SANDSTONE_STAIRS" => Ok(Material::SandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"ENDER_CHEST" => Ok(Material::EnderChest { inner: MaterialStruct::from_raw(env,obj)?}),
"EMERALD_BLOCK" => Ok(Material::EmeraldBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_STAIRS" => Ok(Material::OakStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_STAIRS" => Ok(Material::SpruceStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_STAIRS" => Ok(Material::BirchStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_STAIRS" => Ok(Material::JungleStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_STAIRS" => Ok(Material::AcaciaStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_STAIRS" => Ok(Material::CherryStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_STAIRS" => Ok(Material::DarkOakStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_STAIRS" => Ok(Material::MangroveStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_STAIRS" => Ok(Material::BambooStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_MOSAIC_STAIRS" => Ok(Material::BambooMosaicStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_STAIRS" => Ok(Material::CrimsonStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_STAIRS" => Ok(Material::WarpedStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"COMMAND_BLOCK" => Ok(Material::CommandBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"BEACON" => Ok(Material::Beacon { inner: MaterialStruct::from_raw(env,obj)?}),
"COBBLESTONE_WALL" => Ok(Material::CobblestoneWall { inner: MaterialStruct::from_raw(env,obj)?}),
"MOSSY_COBBLESTONE_WALL" => Ok(Material::MossyCobblestoneWall { inner: MaterialStruct::from_raw(env,obj)?}),
"BRICK_WALL" => Ok(Material::BrickWall { inner: MaterialStruct::from_raw(env,obj)?}),
"PRISMARINE_WALL" => Ok(Material::PrismarineWall { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_SANDSTONE_WALL" => Ok(Material::RedSandstoneWall { inner: MaterialStruct::from_raw(env,obj)?}),
"MOSSY_STONE_BRICK_WALL" => Ok(Material::MossyStoneBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),
"GRANITE_WALL" => Ok(Material::GraniteWall { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_BRICK_WALL" => Ok(Material::StoneBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),
"MUD_BRICK_WALL" => Ok(Material::MudBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_BRICK_WALL" => Ok(Material::NetherBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),
"ANDESITE_WALL" => Ok(Material::AndesiteWall { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_NETHER_BRICK_WALL" => Ok(Material::RedNetherBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),
"SANDSTONE_WALL" => Ok(Material::SandstoneWall { inner: MaterialStruct::from_raw(env,obj)?}),
"END_STONE_BRICK_WALL" => Ok(Material::EndStoneBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),
"DIORITE_WALL" => Ok(Material::DioriteWall { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACKSTONE_WALL" => Ok(Material::BlackstoneWall { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_BLACKSTONE_WALL" => Ok(Material::PolishedBlackstoneWall { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_BLACKSTONE_BRICK_WALL" => Ok(Material::PolishedBlackstoneBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),
"COBBLED_DEEPSLATE_WALL" => Ok(Material::CobbledDeepslateWall { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_DEEPSLATE_WALL" => Ok(Material::PolishedDeepslateWall { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_BRICK_WALL" => Ok(Material::DeepslateBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_TILE_WALL" => Ok(Material::DeepslateTileWall { inner: MaterialStruct::from_raw(env,obj)?}),
"ANVIL" => Ok(Material::Anvil { inner: MaterialStruct::from_raw(env,obj)?}),
"CHIPPED_ANVIL" => Ok(Material::ChippedAnvil { inner: MaterialStruct::from_raw(env,obj)?}),
"DAMAGED_ANVIL" => Ok(Material::DamagedAnvil { inner: MaterialStruct::from_raw(env,obj)?}),
"CHISELED_QUARTZ_BLOCK" => Ok(Material::ChiseledQuartzBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"QUARTZ_BLOCK" => Ok(Material::QuartzBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"QUARTZ_BRICKS" => Ok(Material::QuartzBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"QUARTZ_PILLAR" => Ok(Material::QuartzPillar { inner: MaterialStruct::from_raw(env,obj)?}),
"QUARTZ_STAIRS" => Ok(Material::QuartzStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_TERRACOTTA" => Ok(Material::WhiteTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_TERRACOTTA" => Ok(Material::OrangeTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_TERRACOTTA" => Ok(Material::MagentaTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_TERRACOTTA" => Ok(Material::LightBlueTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_TERRACOTTA" => Ok(Material::YellowTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_TERRACOTTA" => Ok(Material::LimeTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_TERRACOTTA" => Ok(Material::PinkTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_TERRACOTTA" => Ok(Material::GrayTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_TERRACOTTA" => Ok(Material::LightGrayTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_TERRACOTTA" => Ok(Material::CyanTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_TERRACOTTA" => Ok(Material::PurpleTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_TERRACOTTA" => Ok(Material::BlueTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_TERRACOTTA" => Ok(Material::BrownTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_TERRACOTTA" => Ok(Material::GreenTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_TERRACOTTA" => Ok(Material::RedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_TERRACOTTA" => Ok(Material::BlackTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"BARRIER" => Ok(Material::Barrier { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT" => Ok(Material::Light { inner: MaterialStruct::from_raw(env,obj)?}),
"HAY_BLOCK" => Ok(Material::HayBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_CARPET" => Ok(Material::WhiteCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_CARPET" => Ok(Material::OrangeCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_CARPET" => Ok(Material::MagentaCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_CARPET" => Ok(Material::LightBlueCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_CARPET" => Ok(Material::YellowCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_CARPET" => Ok(Material::LimeCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_CARPET" => Ok(Material::PinkCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_CARPET" => Ok(Material::GrayCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_CARPET" => Ok(Material::LightGrayCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_CARPET" => Ok(Material::CyanCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_CARPET" => Ok(Material::PurpleCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_CARPET" => Ok(Material::BlueCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_CARPET" => Ok(Material::BrownCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_CARPET" => Ok(Material::GreenCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_CARPET" => Ok(Material::RedCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_CARPET" => Ok(Material::BlackCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"TERRACOTTA" => Ok(Material::Terracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"PACKED_ICE" => Ok(Material::PackedIce { inner: MaterialStruct::from_raw(env,obj)?}),
"DIRT_PATH" => Ok(Material::DirtPath { inner: MaterialStruct::from_raw(env,obj)?}),
"SUNFLOWER" => Ok(Material::Sunflower { inner: MaterialStruct::from_raw(env,obj)?}),
"LILAC" => Ok(Material::Lilac { inner: MaterialStruct::from_raw(env,obj)?}),
"ROSE_BUSH" => Ok(Material::RoseBush { inner: MaterialStruct::from_raw(env,obj)?}),
"PEONY" => Ok(Material::Peony { inner: MaterialStruct::from_raw(env,obj)?}),
"TALL_GRASS" => Ok(Material::TallGrass { inner: MaterialStruct::from_raw(env,obj)?}),
"LARGE_FERN" => Ok(Material::LargeFern { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_STAINED_GLASS" => Ok(Material::WhiteStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_STAINED_GLASS" => Ok(Material::OrangeStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_STAINED_GLASS" => Ok(Material::MagentaStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_STAINED_GLASS" => Ok(Material::LightBlueStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_STAINED_GLASS" => Ok(Material::YellowStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_STAINED_GLASS" => Ok(Material::LimeStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_STAINED_GLASS" => Ok(Material::PinkStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_STAINED_GLASS" => Ok(Material::GrayStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_STAINED_GLASS" => Ok(Material::LightGrayStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_STAINED_GLASS" => Ok(Material::CyanStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_STAINED_GLASS" => Ok(Material::PurpleStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_STAINED_GLASS" => Ok(Material::BlueStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_STAINED_GLASS" => Ok(Material::BrownStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_STAINED_GLASS" => Ok(Material::GreenStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_STAINED_GLASS" => Ok(Material::RedStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_STAINED_GLASS" => Ok(Material::BlackStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_STAINED_GLASS_PANE" => Ok(Material::WhiteStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_STAINED_GLASS_PANE" => Ok(Material::OrangeStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_STAINED_GLASS_PANE" => Ok(Material::MagentaStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_STAINED_GLASS_PANE" => Ok(Material::LightBlueStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_STAINED_GLASS_PANE" => Ok(Material::YellowStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_STAINED_GLASS_PANE" => Ok(Material::LimeStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_STAINED_GLASS_PANE" => Ok(Material::PinkStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_STAINED_GLASS_PANE" => Ok(Material::GrayStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_STAINED_GLASS_PANE" => Ok(Material::LightGrayStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_STAINED_GLASS_PANE" => Ok(Material::CyanStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_STAINED_GLASS_PANE" => Ok(Material::PurpleStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_STAINED_GLASS_PANE" => Ok(Material::BlueStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_STAINED_GLASS_PANE" => Ok(Material::BrownStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_STAINED_GLASS_PANE" => Ok(Material::GreenStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_STAINED_GLASS_PANE" => Ok(Material::RedStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_STAINED_GLASS_PANE" => Ok(Material::BlackStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"PRISMARINE" => Ok(Material::Prismarine { inner: MaterialStruct::from_raw(env,obj)?}),
"PRISMARINE_BRICKS" => Ok(Material::PrismarineBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_PRISMARINE" => Ok(Material::DarkPrismarine { inner: MaterialStruct::from_raw(env,obj)?}),
"PRISMARINE_STAIRS" => Ok(Material::PrismarineStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"PRISMARINE_BRICK_STAIRS" => Ok(Material::PrismarineBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_PRISMARINE_STAIRS" => Ok(Material::DarkPrismarineStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"SEA_LANTERN" => Ok(Material::SeaLantern { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_SANDSTONE" => Ok(Material::RedSandstone { inner: MaterialStruct::from_raw(env,obj)?}),
"CHISELED_RED_SANDSTONE" => Ok(Material::ChiseledRedSandstone { inner: MaterialStruct::from_raw(env,obj)?}),
"CUT_RED_SANDSTONE" => Ok(Material::CutRedSandstone { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_SANDSTONE_STAIRS" => Ok(Material::RedSandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"REPEATING_COMMAND_BLOCK" => Ok(Material::RepeatingCommandBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"CHAIN_COMMAND_BLOCK" => Ok(Material::ChainCommandBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGMA_BLOCK" => Ok(Material::MagmaBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_WART_BLOCK" => Ok(Material::NetherWartBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_WART_BLOCK" => Ok(Material::WarpedWartBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_NETHER_BRICKS" => Ok(Material::RedNetherBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"BONE_BLOCK" => Ok(Material::BoneBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"STRUCTURE_VOID" => Ok(Material::StructureVoid { inner: MaterialStruct::from_raw(env,obj)?}),
"SHULKER_BOX" => Ok(Material::ShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_SHULKER_BOX" => Ok(Material::WhiteShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_SHULKER_BOX" => Ok(Material::OrangeShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_SHULKER_BOX" => Ok(Material::MagentaShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_SHULKER_BOX" => Ok(Material::LightBlueShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_SHULKER_BOX" => Ok(Material::YellowShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_SHULKER_BOX" => Ok(Material::LimeShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_SHULKER_BOX" => Ok(Material::PinkShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_SHULKER_BOX" => Ok(Material::GrayShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_SHULKER_BOX" => Ok(Material::LightGrayShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_SHULKER_BOX" => Ok(Material::CyanShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_SHULKER_BOX" => Ok(Material::PurpleShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_SHULKER_BOX" => Ok(Material::BlueShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_SHULKER_BOX" => Ok(Material::BrownShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_SHULKER_BOX" => Ok(Material::GreenShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_SHULKER_BOX" => Ok(Material::RedShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_SHULKER_BOX" => Ok(Material::BlackShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_GLAZED_TERRACOTTA" => Ok(Material::WhiteGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_GLAZED_TERRACOTTA" => Ok(Material::OrangeGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_GLAZED_TERRACOTTA" => Ok(Material::MagentaGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_GLAZED_TERRACOTTA" => Ok(Material::LightBlueGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_GLAZED_TERRACOTTA" => Ok(Material::YellowGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_GLAZED_TERRACOTTA" => Ok(Material::LimeGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_GLAZED_TERRACOTTA" => Ok(Material::PinkGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_GLAZED_TERRACOTTA" => Ok(Material::GrayGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_GLAZED_TERRACOTTA" => Ok(Material::LightGrayGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_GLAZED_TERRACOTTA" => Ok(Material::CyanGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_GLAZED_TERRACOTTA" => Ok(Material::PurpleGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_GLAZED_TERRACOTTA" => Ok(Material::BlueGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_GLAZED_TERRACOTTA" => Ok(Material::BrownGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_GLAZED_TERRACOTTA" => Ok(Material::GreenGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_GLAZED_TERRACOTTA" => Ok(Material::RedGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_GLAZED_TERRACOTTA" => Ok(Material::BlackGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_CONCRETE" => Ok(Material::WhiteConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_CONCRETE" => Ok(Material::OrangeConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_CONCRETE" => Ok(Material::MagentaConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_CONCRETE" => Ok(Material::LightBlueConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_CONCRETE" => Ok(Material::YellowConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_CONCRETE" => Ok(Material::LimeConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_CONCRETE" => Ok(Material::PinkConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_CONCRETE" => Ok(Material::GrayConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_CONCRETE" => Ok(Material::LightGrayConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_CONCRETE" => Ok(Material::CyanConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_CONCRETE" => Ok(Material::PurpleConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_CONCRETE" => Ok(Material::BlueConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_CONCRETE" => Ok(Material::BrownConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_CONCRETE" => Ok(Material::GreenConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_CONCRETE" => Ok(Material::RedConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_CONCRETE" => Ok(Material::BlackConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_CONCRETE_POWDER" => Ok(Material::WhiteConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_CONCRETE_POWDER" => Ok(Material::OrangeConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_CONCRETE_POWDER" => Ok(Material::MagentaConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_CONCRETE_POWDER" => Ok(Material::LightBlueConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_CONCRETE_POWDER" => Ok(Material::YellowConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_CONCRETE_POWDER" => Ok(Material::LimeConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_CONCRETE_POWDER" => Ok(Material::PinkConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_CONCRETE_POWDER" => Ok(Material::GrayConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_CONCRETE_POWDER" => Ok(Material::LightGrayConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_CONCRETE_POWDER" => Ok(Material::CyanConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_CONCRETE_POWDER" => Ok(Material::PurpleConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_CONCRETE_POWDER" => Ok(Material::BlueConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_CONCRETE_POWDER" => Ok(Material::BrownConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_CONCRETE_POWDER" => Ok(Material::GreenConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_CONCRETE_POWDER" => Ok(Material::RedConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_CONCRETE_POWDER" => Ok(Material::BlackConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"TURTLE_EGG" => Ok(Material::TurtleEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SNIFFER_EGG" => Ok(Material::SnifferEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_TUBE_CORAL_BLOCK" => Ok(Material::DeadTubeCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_BRAIN_CORAL_BLOCK" => Ok(Material::DeadBrainCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_BUBBLE_CORAL_BLOCK" => Ok(Material::DeadBubbleCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_FIRE_CORAL_BLOCK" => Ok(Material::DeadFireCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_HORN_CORAL_BLOCK" => Ok(Material::DeadHornCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"TUBE_CORAL_BLOCK" => Ok(Material::TubeCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"BRAIN_CORAL_BLOCK" => Ok(Material::BrainCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"BUBBLE_CORAL_BLOCK" => Ok(Material::BubbleCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"FIRE_CORAL_BLOCK" => Ok(Material::FireCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"HORN_CORAL_BLOCK" => Ok(Material::HornCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"TUBE_CORAL" => Ok(Material::TubeCoral { inner: MaterialStruct::from_raw(env,obj)?}),
"BRAIN_CORAL" => Ok(Material::BrainCoral { inner: MaterialStruct::from_raw(env,obj)?}),
"BUBBLE_CORAL" => Ok(Material::BubbleCoral { inner: MaterialStruct::from_raw(env,obj)?}),
"FIRE_CORAL" => Ok(Material::FireCoral { inner: MaterialStruct::from_raw(env,obj)?}),
"HORN_CORAL" => Ok(Material::HornCoral { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_BRAIN_CORAL" => Ok(Material::DeadBrainCoral { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_BUBBLE_CORAL" => Ok(Material::DeadBubbleCoral { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_FIRE_CORAL" => Ok(Material::DeadFireCoral { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_HORN_CORAL" => Ok(Material::DeadHornCoral { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_TUBE_CORAL" => Ok(Material::DeadTubeCoral { inner: MaterialStruct::from_raw(env,obj)?}),
"TUBE_CORAL_FAN" => Ok(Material::TubeCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),
"BRAIN_CORAL_FAN" => Ok(Material::BrainCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),
"BUBBLE_CORAL_FAN" => Ok(Material::BubbleCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),
"FIRE_CORAL_FAN" => Ok(Material::FireCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),
"HORN_CORAL_FAN" => Ok(Material::HornCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_TUBE_CORAL_FAN" => Ok(Material::DeadTubeCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_BRAIN_CORAL_FAN" => Ok(Material::DeadBrainCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_BUBBLE_CORAL_FAN" => Ok(Material::DeadBubbleCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_FIRE_CORAL_FAN" => Ok(Material::DeadFireCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_HORN_CORAL_FAN" => Ok(Material::DeadHornCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_ICE" => Ok(Material::BlueIce { inner: MaterialStruct::from_raw(env,obj)?}),
"CONDUIT" => Ok(Material::Conduit { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_GRANITE_STAIRS" => Ok(Material::PolishedGraniteStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_RED_SANDSTONE_STAIRS" => Ok(Material::SmoothRedSandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"MOSSY_STONE_BRICK_STAIRS" => Ok(Material::MossyStoneBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_DIORITE_STAIRS" => Ok(Material::PolishedDioriteStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"MOSSY_COBBLESTONE_STAIRS" => Ok(Material::MossyCobblestoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"END_STONE_BRICK_STAIRS" => Ok(Material::EndStoneBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_STAIRS" => Ok(Material::StoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_SANDSTONE_STAIRS" => Ok(Material::SmoothSandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_QUARTZ_STAIRS" => Ok(Material::SmoothQuartzStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"GRANITE_STAIRS" => Ok(Material::GraniteStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"ANDESITE_STAIRS" => Ok(Material::AndesiteStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_NETHER_BRICK_STAIRS" => Ok(Material::RedNetherBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_ANDESITE_STAIRS" => Ok(Material::PolishedAndesiteStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"DIORITE_STAIRS" => Ok(Material::DioriteStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"COBBLED_DEEPSLATE_STAIRS" => Ok(Material::CobbledDeepslateStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_DEEPSLATE_STAIRS" => Ok(Material::PolishedDeepslateStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_BRICK_STAIRS" => Ok(Material::DeepslateBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_TILE_STAIRS" => Ok(Material::DeepslateTileStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_GRANITE_SLAB" => Ok(Material::PolishedGraniteSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_RED_SANDSTONE_SLAB" => Ok(Material::SmoothRedSandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"MOSSY_STONE_BRICK_SLAB" => Ok(Material::MossyStoneBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_DIORITE_SLAB" => Ok(Material::PolishedDioriteSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"MOSSY_COBBLESTONE_SLAB" => Ok(Material::MossyCobblestoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"END_STONE_BRICK_SLAB" => Ok(Material::EndStoneBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_SANDSTONE_SLAB" => Ok(Material::SmoothSandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOOTH_QUARTZ_SLAB" => Ok(Material::SmoothQuartzSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"GRANITE_SLAB" => Ok(Material::GraniteSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"ANDESITE_SLAB" => Ok(Material::AndesiteSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_NETHER_BRICK_SLAB" => Ok(Material::RedNetherBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_ANDESITE_SLAB" => Ok(Material::PolishedAndesiteSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"DIORITE_SLAB" => Ok(Material::DioriteSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"COBBLED_DEEPSLATE_SLAB" => Ok(Material::CobbledDeepslateSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_DEEPSLATE_SLAB" => Ok(Material::PolishedDeepslateSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_BRICK_SLAB" => Ok(Material::DeepslateBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"DEEPSLATE_TILE_SLAB" => Ok(Material::DeepslateTileSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"SCAFFOLDING" => Ok(Material::Scaffolding { inner: MaterialStruct::from_raw(env,obj)?}),
"REDSTONE" => Ok(Material::Redstone { inner: MaterialStruct::from_raw(env,obj)?}),
"REDSTONE_TORCH" => Ok(Material::RedstoneTorch { inner: MaterialStruct::from_raw(env,obj)?}),
"REDSTONE_BLOCK" => Ok(Material::RedstoneBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"REPEATER" => Ok(Material::Repeater { inner: MaterialStruct::from_raw(env,obj)?}),
"COMPARATOR" => Ok(Material::Comparator { inner: MaterialStruct::from_raw(env,obj)?}),
"PISTON" => Ok(Material::Piston { inner: MaterialStruct::from_raw(env,obj)?}),
"STICKY_PISTON" => Ok(Material::StickyPiston { inner: MaterialStruct::from_raw(env,obj)?}),
"SLIME_BLOCK" => Ok(Material::SlimeBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"HONEY_BLOCK" => Ok(Material::HoneyBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"OBSERVER" => Ok(Material::Observer { inner: MaterialStruct::from_raw(env,obj)?}),
"HOPPER" => Ok(Material::Hopper { inner: MaterialStruct::from_raw(env,obj)?}),
"DISPENSER" => Ok(Material::Dispenser { inner: MaterialStruct::from_raw(env,obj)?}),
"DROPPER" => Ok(Material::Dropper { inner: MaterialStruct::from_raw(env,obj)?}),
"LECTERN" => Ok(Material::Lectern { inner: MaterialStruct::from_raw(env,obj)?}),
"TARGET" => Ok(Material::Target { inner: MaterialStruct::from_raw(env,obj)?}),
"LEVER" => Ok(Material::Lever { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHTNING_ROD" => Ok(Material::LightningRod { inner: MaterialStruct::from_raw(env,obj)?}),
"DAYLIGHT_DETECTOR" => Ok(Material::DaylightDetector { inner: MaterialStruct::from_raw(env,obj)?}),
"SCULK_SENSOR" => Ok(Material::SculkSensor { inner: MaterialStruct::from_raw(env,obj)?}),
"CALIBRATED_SCULK_SENSOR" => Ok(Material::CalibratedSculkSensor { inner: MaterialStruct::from_raw(env,obj)?}),
"TRIPWIRE_HOOK" => Ok(Material::TripwireHook { inner: MaterialStruct::from_raw(env,obj)?}),
"TRAPPED_CHEST" => Ok(Material::TrappedChest { inner: MaterialStruct::from_raw(env,obj)?}),
"TNT" => Ok(Material::Tnt { inner: MaterialStruct::from_raw(env,obj)?}),
"REDSTONE_LAMP" => Ok(Material::RedstoneLamp { inner: MaterialStruct::from_raw(env,obj)?}),
"NOTE_BLOCK" => Ok(Material::NoteBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_BUTTON" => Ok(Material::StoneButton { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_BLACKSTONE_BUTTON" => Ok(Material::PolishedBlackstoneButton { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_BUTTON" => Ok(Material::OakButton { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_BUTTON" => Ok(Material::SpruceButton { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_BUTTON" => Ok(Material::BirchButton { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_BUTTON" => Ok(Material::JungleButton { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_BUTTON" => Ok(Material::AcaciaButton { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_BUTTON" => Ok(Material::CherryButton { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_BUTTON" => Ok(Material::DarkOakButton { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_BUTTON" => Ok(Material::MangroveButton { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_BUTTON" => Ok(Material::BambooButton { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_BUTTON" => Ok(Material::CrimsonButton { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_BUTTON" => Ok(Material::WarpedButton { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_PRESSURE_PLATE" => Ok(Material::StonePressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_BLACKSTONE_PRESSURE_PLATE" => Ok(Material::PolishedBlackstonePressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_WEIGHTED_PRESSURE_PLATE" => Ok(Material::LightWeightedPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"HEAVY_WEIGHTED_PRESSURE_PLATE" => Ok(Material::HeavyWeightedPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_PRESSURE_PLATE" => Ok(Material::OakPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_PRESSURE_PLATE" => Ok(Material::SprucePressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_PRESSURE_PLATE" => Ok(Material::BirchPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_PRESSURE_PLATE" => Ok(Material::JunglePressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_PRESSURE_PLATE" => Ok(Material::AcaciaPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_PRESSURE_PLATE" => Ok(Material::CherryPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_PRESSURE_PLATE" => Ok(Material::DarkOakPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_PRESSURE_PLATE" => Ok(Material::MangrovePressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_PRESSURE_PLATE" => Ok(Material::BambooPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_PRESSURE_PLATE" => Ok(Material::CrimsonPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_PRESSURE_PLATE" => Ok(Material::WarpedPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_DOOR" => Ok(Material::IronDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_DOOR" => Ok(Material::OakDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_DOOR" => Ok(Material::SpruceDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_DOOR" => Ok(Material::BirchDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_DOOR" => Ok(Material::JungleDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_DOOR" => Ok(Material::AcaciaDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_DOOR" => Ok(Material::CherryDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_DOOR" => Ok(Material::DarkOakDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_DOOR" => Ok(Material::MangroveDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_DOOR" => Ok(Material::BambooDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_DOOR" => Ok(Material::CrimsonDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_DOOR" => Ok(Material::WarpedDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"COPPER_DOOR" => Ok(Material::CopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"EXPOSED_COPPER_DOOR" => Ok(Material::ExposedCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WEATHERED_COPPER_DOOR" => Ok(Material::WeatheredCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"OXIDIZED_COPPER_DOOR" => Ok(Material::OxidizedCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_COPPER_DOOR" => Ok(Material::WaxedCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_EXPOSED_COPPER_DOOR" => Ok(Material::WaxedExposedCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_WEATHERED_COPPER_DOOR" => Ok(Material::WaxedWeatheredCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_OXIDIZED_COPPER_DOOR" => Ok(Material::WaxedOxidizedCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_TRAPDOOR" => Ok(Material::IronTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_TRAPDOOR" => Ok(Material::OakTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_TRAPDOOR" => Ok(Material::SpruceTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_TRAPDOOR" => Ok(Material::BirchTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_TRAPDOOR" => Ok(Material::JungleTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_TRAPDOOR" => Ok(Material::AcaciaTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_TRAPDOOR" => Ok(Material::CherryTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_TRAPDOOR" => Ok(Material::DarkOakTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_TRAPDOOR" => Ok(Material::MangroveTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_TRAPDOOR" => Ok(Material::BambooTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_TRAPDOOR" => Ok(Material::CrimsonTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_TRAPDOOR" => Ok(Material::WarpedTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"COPPER_TRAPDOOR" => Ok(Material::CopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"EXPOSED_COPPER_TRAPDOOR" => Ok(Material::ExposedCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WEATHERED_COPPER_TRAPDOOR" => Ok(Material::WeatheredCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"OXIDIZED_COPPER_TRAPDOOR" => Ok(Material::OxidizedCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_COPPER_TRAPDOOR" => Ok(Material::WaxedCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_EXPOSED_COPPER_TRAPDOOR" => Ok(Material::WaxedExposedCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_WEATHERED_COPPER_TRAPDOOR" => Ok(Material::WaxedWeatheredCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_OXIDIZED_COPPER_TRAPDOOR" => Ok(Material::WaxedOxidizedCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_FENCE_GATE" => Ok(Material::OakFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_FENCE_GATE" => Ok(Material::SpruceFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_FENCE_GATE" => Ok(Material::BirchFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_FENCE_GATE" => Ok(Material::JungleFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_FENCE_GATE" => Ok(Material::AcaciaFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_FENCE_GATE" => Ok(Material::CherryFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_FENCE_GATE" => Ok(Material::DarkOakFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_FENCE_GATE" => Ok(Material::MangroveFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_FENCE_GATE" => Ok(Material::BambooFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_FENCE_GATE" => Ok(Material::CrimsonFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_FENCE_GATE" => Ok(Material::WarpedFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"POWERED_RAIL" => Ok(Material::PoweredRail { inner: MaterialStruct::from_raw(env,obj)?}),
"DETECTOR_RAIL" => Ok(Material::DetectorRail { inner: MaterialStruct::from_raw(env,obj)?}),
"RAIL" => Ok(Material::Rail { inner: MaterialStruct::from_raw(env,obj)?}),
"ACTIVATOR_RAIL" => Ok(Material::ActivatorRail { inner: MaterialStruct::from_raw(env,obj)?}),
"SADDLE" => Ok(Material::Saddle { inner: MaterialStruct::from_raw(env,obj)?}),
"MINECART" => Ok(Material::Minecart { inner: MaterialStruct::from_raw(env,obj)?}),
"CHEST_MINECART" => Ok(Material::ChestMinecart { inner: MaterialStruct::from_raw(env,obj)?}),
"FURNACE_MINECART" => Ok(Material::FurnaceMinecart { inner: MaterialStruct::from_raw(env,obj)?}),
"TNT_MINECART" => Ok(Material::TntMinecart { inner: MaterialStruct::from_raw(env,obj)?}),
"HOPPER_MINECART" => Ok(Material::HopperMinecart { inner: MaterialStruct::from_raw(env,obj)?}),
"CARROT_ON_A_STICK" => Ok(Material::CarrotOnAStick { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_FUNGUS_ON_A_STICK" => Ok(Material::WarpedFungusOnAStick { inner: MaterialStruct::from_raw(env,obj)?}),
"ELYTRA" => Ok(Material::Elytra { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_BOAT" => Ok(Material::OakBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_CHEST_BOAT" => Ok(Material::OakChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_BOAT" => Ok(Material::SpruceBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_CHEST_BOAT" => Ok(Material::SpruceChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_BOAT" => Ok(Material::BirchBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_CHEST_BOAT" => Ok(Material::BirchChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_BOAT" => Ok(Material::JungleBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_CHEST_BOAT" => Ok(Material::JungleChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_BOAT" => Ok(Material::AcaciaBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_CHEST_BOAT" => Ok(Material::AcaciaChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_BOAT" => Ok(Material::CherryBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_CHEST_BOAT" => Ok(Material::CherryChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_BOAT" => Ok(Material::DarkOakBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_CHEST_BOAT" => Ok(Material::DarkOakChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_BOAT" => Ok(Material::MangroveBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_CHEST_BOAT" => Ok(Material::MangroveChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_RAFT" => Ok(Material::BambooRaft { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_CHEST_RAFT" => Ok(Material::BambooChestRaft { inner: MaterialStruct::from_raw(env,obj)?}),
"STRUCTURE_BLOCK" => Ok(Material::StructureBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"JIGSAW" => Ok(Material::Jigsaw { inner: MaterialStruct::from_raw(env,obj)?}),
"TURTLE_HELMET" => Ok(Material::TurtleHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"SCUTE" => Ok(Material::Scute { inner: MaterialStruct::from_raw(env,obj)?}),
"FLINT_AND_STEEL" => Ok(Material::FlintAndSteel { inner: MaterialStruct::from_raw(env,obj)?}),
"APPLE" => Ok(Material::Apple { inner: MaterialStruct::from_raw(env,obj)?}),
"BOW" => Ok(Material::Bow { inner: MaterialStruct::from_raw(env,obj)?}),
"ARROW" => Ok(Material::Arrow { inner: MaterialStruct::from_raw(env,obj)?}),
"COAL" => Ok(Material::Coal { inner: MaterialStruct::from_raw(env,obj)?}),
"CHARCOAL" => Ok(Material::Charcoal { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND" => Ok(Material::Diamond { inner: MaterialStruct::from_raw(env,obj)?}),
"EMERALD" => Ok(Material::Emerald { inner: MaterialStruct::from_raw(env,obj)?}),
"LAPIS_LAZULI" => Ok(Material::LapisLazuli { inner: MaterialStruct::from_raw(env,obj)?}),
"QUARTZ" => Ok(Material::Quartz { inner: MaterialStruct::from_raw(env,obj)?}),
"AMETHYST_SHARD" => Ok(Material::AmethystShard { inner: MaterialStruct::from_raw(env,obj)?}),
"RAW_IRON" => Ok(Material::RawIron { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_INGOT" => Ok(Material::IronIngot { inner: MaterialStruct::from_raw(env,obj)?}),
"RAW_COPPER" => Ok(Material::RawCopper { inner: MaterialStruct::from_raw(env,obj)?}),
"COPPER_INGOT" => Ok(Material::CopperIngot { inner: MaterialStruct::from_raw(env,obj)?}),
"RAW_GOLD" => Ok(Material::RawGold { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLD_INGOT" => Ok(Material::GoldIngot { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_INGOT" => Ok(Material::NetheriteIngot { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_SCRAP" => Ok(Material::NetheriteScrap { inner: MaterialStruct::from_raw(env,obj)?}),
"WOODEN_SWORD" => Ok(Material::WoodenSword { inner: MaterialStruct::from_raw(env,obj)?}),
"WOODEN_SHOVEL" => Ok(Material::WoodenShovel { inner: MaterialStruct::from_raw(env,obj)?}),
"WOODEN_PICKAXE" => Ok(Material::WoodenPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),
"WOODEN_AXE" => Ok(Material::WoodenAxe { inner: MaterialStruct::from_raw(env,obj)?}),
"WOODEN_HOE" => Ok(Material::WoodenHoe { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_SWORD" => Ok(Material::StoneSword { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_SHOVEL" => Ok(Material::StoneShovel { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_PICKAXE" => Ok(Material::StonePickaxe { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_AXE" => Ok(Material::StoneAxe { inner: MaterialStruct::from_raw(env,obj)?}),
"STONE_HOE" => Ok(Material::StoneHoe { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_SWORD" => Ok(Material::GoldenSword { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_SHOVEL" => Ok(Material::GoldenShovel { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_PICKAXE" => Ok(Material::GoldenPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_AXE" => Ok(Material::GoldenAxe { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_HOE" => Ok(Material::GoldenHoe { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_SWORD" => Ok(Material::IronSword { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_SHOVEL" => Ok(Material::IronShovel { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_PICKAXE" => Ok(Material::IronPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_AXE" => Ok(Material::IronAxe { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_HOE" => Ok(Material::IronHoe { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_SWORD" => Ok(Material::DiamondSword { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_SHOVEL" => Ok(Material::DiamondShovel { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_PICKAXE" => Ok(Material::DiamondPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_AXE" => Ok(Material::DiamondAxe { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_HOE" => Ok(Material::DiamondHoe { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_SWORD" => Ok(Material::NetheriteSword { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_SHOVEL" => Ok(Material::NetheriteShovel { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_PICKAXE" => Ok(Material::NetheritePickaxe { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_AXE" => Ok(Material::NetheriteAxe { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_HOE" => Ok(Material::NetheriteHoe { inner: MaterialStruct::from_raw(env,obj)?}),
"STICK" => Ok(Material::Stick { inner: MaterialStruct::from_raw(env,obj)?}),
"BOWL" => Ok(Material::Bowl { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSHROOM_STEW" => Ok(Material::MushroomStew { inner: MaterialStruct::from_raw(env,obj)?}),
"STRING" => Ok(Material::String { inner: MaterialStruct::from_raw(env,obj)?}),
"FEATHER" => Ok(Material::Feather { inner: MaterialStruct::from_raw(env,obj)?}),
"GUNPOWDER" => Ok(Material::Gunpowder { inner: MaterialStruct::from_raw(env,obj)?}),
"WHEAT_SEEDS" => Ok(Material::WheatSeeds { inner: MaterialStruct::from_raw(env,obj)?}),
"WHEAT" => Ok(Material::Wheat { inner: MaterialStruct::from_raw(env,obj)?}),
"BREAD" => Ok(Material::Bread { inner: MaterialStruct::from_raw(env,obj)?}),
"LEATHER_HELMET" => Ok(Material::LeatherHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"LEATHER_CHESTPLATE" => Ok(Material::LeatherChestplate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEATHER_LEGGINGS" => Ok(Material::LeatherLeggings { inner: MaterialStruct::from_raw(env,obj)?}),
"LEATHER_BOOTS" => Ok(Material::LeatherBoots { inner: MaterialStruct::from_raw(env,obj)?}),
"CHAINMAIL_HELMET" => Ok(Material::ChainmailHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"CHAINMAIL_CHESTPLATE" => Ok(Material::ChainmailChestplate { inner: MaterialStruct::from_raw(env,obj)?}),
"CHAINMAIL_LEGGINGS" => Ok(Material::ChainmailLeggings { inner: MaterialStruct::from_raw(env,obj)?}),
"CHAINMAIL_BOOTS" => Ok(Material::ChainmailBoots { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_HELMET" => Ok(Material::IronHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_CHESTPLATE" => Ok(Material::IronChestplate { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_LEGGINGS" => Ok(Material::IronLeggings { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_BOOTS" => Ok(Material::IronBoots { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_HELMET" => Ok(Material::DiamondHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_CHESTPLATE" => Ok(Material::DiamondChestplate { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_LEGGINGS" => Ok(Material::DiamondLeggings { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_BOOTS" => Ok(Material::DiamondBoots { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_HELMET" => Ok(Material::GoldenHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_CHESTPLATE" => Ok(Material::GoldenChestplate { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_LEGGINGS" => Ok(Material::GoldenLeggings { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_BOOTS" => Ok(Material::GoldenBoots { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_HELMET" => Ok(Material::NetheriteHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_CHESTPLATE" => Ok(Material::NetheriteChestplate { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_LEGGINGS" => Ok(Material::NetheriteLeggings { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_BOOTS" => Ok(Material::NetheriteBoots { inner: MaterialStruct::from_raw(env,obj)?}),
"FLINT" => Ok(Material::Flint { inner: MaterialStruct::from_raw(env,obj)?}),
"PORKCHOP" => Ok(Material::Porkchop { inner: MaterialStruct::from_raw(env,obj)?}),
"COOKED_PORKCHOP" => Ok(Material::CookedPorkchop { inner: MaterialStruct::from_raw(env,obj)?}),
"PAINTING" => Ok(Material::Painting { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_APPLE" => Ok(Material::GoldenApple { inner: MaterialStruct::from_raw(env,obj)?}),
"ENCHANTED_GOLDEN_APPLE" => Ok(Material::EnchantedGoldenApple { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_SIGN" => Ok(Material::OakSign { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_SIGN" => Ok(Material::SpruceSign { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_SIGN" => Ok(Material::BirchSign { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_SIGN" => Ok(Material::JungleSign { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_SIGN" => Ok(Material::AcaciaSign { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_SIGN" => Ok(Material::CherrySign { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_SIGN" => Ok(Material::DarkOakSign { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_SIGN" => Ok(Material::MangroveSign { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_SIGN" => Ok(Material::BambooSign { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_SIGN" => Ok(Material::CrimsonSign { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_SIGN" => Ok(Material::WarpedSign { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_HANGING_SIGN" => Ok(Material::OakHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_HANGING_SIGN" => Ok(Material::SpruceHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_HANGING_SIGN" => Ok(Material::BirchHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_HANGING_SIGN" => Ok(Material::JungleHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_HANGING_SIGN" => Ok(Material::AcaciaHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_HANGING_SIGN" => Ok(Material::CherryHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_HANGING_SIGN" => Ok(Material::DarkOakHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_HANGING_SIGN" => Ok(Material::MangroveHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_HANGING_SIGN" => Ok(Material::BambooHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_HANGING_SIGN" => Ok(Material::CrimsonHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_HANGING_SIGN" => Ok(Material::WarpedHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"BUCKET" => Ok(Material::Bucket { inner: MaterialStruct::from_raw(env,obj)?}),
"WATER_BUCKET" => Ok(Material::WaterBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"LAVA_BUCKET" => Ok(Material::LavaBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"POWDER_SNOW_BUCKET" => Ok(Material::PowderSnowBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"SNOWBALL" => Ok(Material::Snowball { inner: MaterialStruct::from_raw(env,obj)?}),
"LEATHER" => Ok(Material::Leather { inner: MaterialStruct::from_raw(env,obj)?}),
"MILK_BUCKET" => Ok(Material::MilkBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"PUFFERFISH_BUCKET" => Ok(Material::PufferfishBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"SALMON_BUCKET" => Ok(Material::SalmonBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"COD_BUCKET" => Ok(Material::CodBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"TROPICAL_FISH_BUCKET" => Ok(Material::TropicalFishBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"AXOLOTL_BUCKET" => Ok(Material::AxolotlBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"TADPOLE_BUCKET" => Ok(Material::TadpoleBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"BRICK" => Ok(Material::Brick { inner: MaterialStruct::from_raw(env,obj)?}),
"CLAY_BALL" => Ok(Material::ClayBall { inner: MaterialStruct::from_raw(env,obj)?}),
"DRIED_KELP_BLOCK" => Ok(Material::DriedKelpBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"PAPER" => Ok(Material::Paper { inner: MaterialStruct::from_raw(env,obj)?}),
"BOOK" => Ok(Material::Book { inner: MaterialStruct::from_raw(env,obj)?}),
"SLIME_BALL" => Ok(Material::SlimeBall { inner: MaterialStruct::from_raw(env,obj)?}),
"EGG" => Ok(Material::Egg { inner: MaterialStruct::from_raw(env,obj)?}),
"COMPASS" => Ok(Material::Compass { inner: MaterialStruct::from_raw(env,obj)?}),
"RECOVERY_COMPASS" => Ok(Material::RecoveryCompass { inner: MaterialStruct::from_raw(env,obj)?}),
"BUNDLE" => Ok(Material::Bundle { inner: MaterialStruct::from_raw(env,obj)?}),
"FISHING_ROD" => Ok(Material::FishingRod { inner: MaterialStruct::from_raw(env,obj)?}),
"CLOCK" => Ok(Material::Clock { inner: MaterialStruct::from_raw(env,obj)?}),
"SPYGLASS" => Ok(Material::Spyglass { inner: MaterialStruct::from_raw(env,obj)?}),
"GLOWSTONE_DUST" => Ok(Material::GlowstoneDust { inner: MaterialStruct::from_raw(env,obj)?}),
"COD" => Ok(Material::Cod { inner: MaterialStruct::from_raw(env,obj)?}),
"SALMON" => Ok(Material::Salmon { inner: MaterialStruct::from_raw(env,obj)?}),
"TROPICAL_FISH" => Ok(Material::TropicalFish { inner: MaterialStruct::from_raw(env,obj)?}),
"PUFFERFISH" => Ok(Material::Pufferfish { inner: MaterialStruct::from_raw(env,obj)?}),
"COOKED_COD" => Ok(Material::CookedCod { inner: MaterialStruct::from_raw(env,obj)?}),
"COOKED_SALMON" => Ok(Material::CookedSalmon { inner: MaterialStruct::from_raw(env,obj)?}),
"INK_SAC" => Ok(Material::InkSac { inner: MaterialStruct::from_raw(env,obj)?}),
"GLOW_INK_SAC" => Ok(Material::GlowInkSac { inner: MaterialStruct::from_raw(env,obj)?}),
"COCOA_BEANS" => Ok(Material::CocoaBeans { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_DYE" => Ok(Material::WhiteDye { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_DYE" => Ok(Material::OrangeDye { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_DYE" => Ok(Material::MagentaDye { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_DYE" => Ok(Material::LightBlueDye { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_DYE" => Ok(Material::YellowDye { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_DYE" => Ok(Material::LimeDye { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_DYE" => Ok(Material::PinkDye { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_DYE" => Ok(Material::GrayDye { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_DYE" => Ok(Material::LightGrayDye { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_DYE" => Ok(Material::CyanDye { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_DYE" => Ok(Material::PurpleDye { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_DYE" => Ok(Material::BlueDye { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_DYE" => Ok(Material::BrownDye { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_DYE" => Ok(Material::GreenDye { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_DYE" => Ok(Material::RedDye { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_DYE" => Ok(Material::BlackDye { inner: MaterialStruct::from_raw(env,obj)?}),
"BONE_MEAL" => Ok(Material::BoneMeal { inner: MaterialStruct::from_raw(env,obj)?}),
"BONE" => Ok(Material::Bone { inner: MaterialStruct::from_raw(env,obj)?}),
"SUGAR" => Ok(Material::Sugar { inner: MaterialStruct::from_raw(env,obj)?}),
"CAKE" => Ok(Material::Cake { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_BED" => Ok(Material::WhiteBed { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_BED" => Ok(Material::OrangeBed { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_BED" => Ok(Material::MagentaBed { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_BED" => Ok(Material::LightBlueBed { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_BED" => Ok(Material::YellowBed { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_BED" => Ok(Material::LimeBed { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_BED" => Ok(Material::PinkBed { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_BED" => Ok(Material::GrayBed { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_BED" => Ok(Material::LightGrayBed { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_BED" => Ok(Material::CyanBed { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_BED" => Ok(Material::PurpleBed { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_BED" => Ok(Material::BlueBed { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_BED" => Ok(Material::BrownBed { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_BED" => Ok(Material::GreenBed { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_BED" => Ok(Material::RedBed { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_BED" => Ok(Material::BlackBed { inner: MaterialStruct::from_raw(env,obj)?}),
"COOKIE" => Ok(Material::Cookie { inner: MaterialStruct::from_raw(env,obj)?}),
"CRAFTER" => Ok(Material::Crafter { inner: MaterialStruct::from_raw(env,obj)?}),
"FILLED_MAP" => Ok(Material::FilledMap { inner: MaterialStruct::from_raw(env,obj)?}),
"SHEARS" => Ok(Material::Shears { inner: MaterialStruct::from_raw(env,obj)?}),
"MELON_SLICE" => Ok(Material::MelonSlice { inner: MaterialStruct::from_raw(env,obj)?}),
"DRIED_KELP" => Ok(Material::DriedKelp { inner: MaterialStruct::from_raw(env,obj)?}),
"PUMPKIN_SEEDS" => Ok(Material::PumpkinSeeds { inner: MaterialStruct::from_raw(env,obj)?}),
"MELON_SEEDS" => Ok(Material::MelonSeeds { inner: MaterialStruct::from_raw(env,obj)?}),
"BEEF" => Ok(Material::Beef { inner: MaterialStruct::from_raw(env,obj)?}),
"COOKED_BEEF" => Ok(Material::CookedBeef { inner: MaterialStruct::from_raw(env,obj)?}),
"CHICKEN" => Ok(Material::Chicken { inner: MaterialStruct::from_raw(env,obj)?}),
"COOKED_CHICKEN" => Ok(Material::CookedChicken { inner: MaterialStruct::from_raw(env,obj)?}),
"ROTTEN_FLESH" => Ok(Material::RottenFlesh { inner: MaterialStruct::from_raw(env,obj)?}),
"ENDER_PEARL" => Ok(Material::EnderPearl { inner: MaterialStruct::from_raw(env,obj)?}),
"BLAZE_ROD" => Ok(Material::BlazeRod { inner: MaterialStruct::from_raw(env,obj)?}),
"GHAST_TEAR" => Ok(Material::GhastTear { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLD_NUGGET" => Ok(Material::GoldNugget { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_WART" => Ok(Material::NetherWart { inner: MaterialStruct::from_raw(env,obj)?}),
"POTION" => Ok(Material::Potion { inner: MaterialStruct::from_raw(env,obj)?}),
"GLASS_BOTTLE" => Ok(Material::GlassBottle { inner: MaterialStruct::from_raw(env,obj)?}),
"SPIDER_EYE" => Ok(Material::SpiderEye { inner: MaterialStruct::from_raw(env,obj)?}),
"FERMENTED_SPIDER_EYE" => Ok(Material::FermentedSpiderEye { inner: MaterialStruct::from_raw(env,obj)?}),
"BLAZE_POWDER" => Ok(Material::BlazePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGMA_CREAM" => Ok(Material::MagmaCream { inner: MaterialStruct::from_raw(env,obj)?}),
"BREWING_STAND" => Ok(Material::BrewingStand { inner: MaterialStruct::from_raw(env,obj)?}),
"CAULDRON" => Ok(Material::Cauldron { inner: MaterialStruct::from_raw(env,obj)?}),
"ENDER_EYE" => Ok(Material::EnderEye { inner: MaterialStruct::from_raw(env,obj)?}),
"GLISTERING_MELON_SLICE" => Ok(Material::GlisteringMelonSlice { inner: MaterialStruct::from_raw(env,obj)?}),
"ALLAY_SPAWN_EGG" => Ok(Material::AllaySpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"AXOLOTL_SPAWN_EGG" => Ok(Material::AxolotlSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"BAT_SPAWN_EGG" => Ok(Material::BatSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"BEE_SPAWN_EGG" => Ok(Material::BeeSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"BLAZE_SPAWN_EGG" => Ok(Material::BlazeSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"BREEZE_SPAWN_EGG" => Ok(Material::BreezeSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"CAT_SPAWN_EGG" => Ok(Material::CatSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"CAMEL_SPAWN_EGG" => Ok(Material::CamelSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"CAVE_SPIDER_SPAWN_EGG" => Ok(Material::CaveSpiderSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"CHICKEN_SPAWN_EGG" => Ok(Material::ChickenSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"COD_SPAWN_EGG" => Ok(Material::CodSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"COW_SPAWN_EGG" => Ok(Material::CowSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"CREEPER_SPAWN_EGG" => Ok(Material::CreeperSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"DOLPHIN_SPAWN_EGG" => Ok(Material::DolphinSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"DONKEY_SPAWN_EGG" => Ok(Material::DonkeySpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"DROWNED_SPAWN_EGG" => Ok(Material::DrownedSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"ELDER_GUARDIAN_SPAWN_EGG" => Ok(Material::ElderGuardianSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"ENDER_DRAGON_SPAWN_EGG" => Ok(Material::EnderDragonSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"ENDERMAN_SPAWN_EGG" => Ok(Material::EndermanSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"ENDERMITE_SPAWN_EGG" => Ok(Material::EndermiteSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"EVOKER_SPAWN_EGG" => Ok(Material::EvokerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"FOX_SPAWN_EGG" => Ok(Material::FoxSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"FROG_SPAWN_EGG" => Ok(Material::FrogSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"GHAST_SPAWN_EGG" => Ok(Material::GhastSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"GLOW_SQUID_SPAWN_EGG" => Ok(Material::GlowSquidSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"GOAT_SPAWN_EGG" => Ok(Material::GoatSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"GUARDIAN_SPAWN_EGG" => Ok(Material::GuardianSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"HOGLIN_SPAWN_EGG" => Ok(Material::HoglinSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"HORSE_SPAWN_EGG" => Ok(Material::HorseSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"HUSK_SPAWN_EGG" => Ok(Material::HuskSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_GOLEM_SPAWN_EGG" => Ok(Material::IronGolemSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"LLAMA_SPAWN_EGG" => Ok(Material::LlamaSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGMA_CUBE_SPAWN_EGG" => Ok(Material::MagmaCubeSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"MOOSHROOM_SPAWN_EGG" => Ok(Material::MooshroomSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"MULE_SPAWN_EGG" => Ok(Material::MuleSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"OCELOT_SPAWN_EGG" => Ok(Material::OcelotSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"PANDA_SPAWN_EGG" => Ok(Material::PandaSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"PARROT_SPAWN_EGG" => Ok(Material::ParrotSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"PHANTOM_SPAWN_EGG" => Ok(Material::PhantomSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"PIG_SPAWN_EGG" => Ok(Material::PigSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"PIGLIN_SPAWN_EGG" => Ok(Material::PiglinSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"PIGLIN_BRUTE_SPAWN_EGG" => Ok(Material::PiglinBruteSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"PILLAGER_SPAWN_EGG" => Ok(Material::PillagerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"POLAR_BEAR_SPAWN_EGG" => Ok(Material::PolarBearSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"PUFFERFISH_SPAWN_EGG" => Ok(Material::PufferfishSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"RABBIT_SPAWN_EGG" => Ok(Material::RabbitSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"RAVAGER_SPAWN_EGG" => Ok(Material::RavagerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SALMON_SPAWN_EGG" => Ok(Material::SalmonSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SHEEP_SPAWN_EGG" => Ok(Material::SheepSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SHULKER_SPAWN_EGG" => Ok(Material::ShulkerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SILVERFISH_SPAWN_EGG" => Ok(Material::SilverfishSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SKELETON_SPAWN_EGG" => Ok(Material::SkeletonSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SKELETON_HORSE_SPAWN_EGG" => Ok(Material::SkeletonHorseSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SLIME_SPAWN_EGG" => Ok(Material::SlimeSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SNIFFER_SPAWN_EGG" => Ok(Material::SnifferSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SNOW_GOLEM_SPAWN_EGG" => Ok(Material::SnowGolemSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SPIDER_SPAWN_EGG" => Ok(Material::SpiderSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"SQUID_SPAWN_EGG" => Ok(Material::SquidSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"STRAY_SPAWN_EGG" => Ok(Material::StraySpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"STRIDER_SPAWN_EGG" => Ok(Material::StriderSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"TADPOLE_SPAWN_EGG" => Ok(Material::TadpoleSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"TRADER_LLAMA_SPAWN_EGG" => Ok(Material::TraderLlamaSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"TROPICAL_FISH_SPAWN_EGG" => Ok(Material::TropicalFishSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"TURTLE_SPAWN_EGG" => Ok(Material::TurtleSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"VEX_SPAWN_EGG" => Ok(Material::VexSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"VILLAGER_SPAWN_EGG" => Ok(Material::VillagerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"VINDICATOR_SPAWN_EGG" => Ok(Material::VindicatorSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"WANDERING_TRADER_SPAWN_EGG" => Ok(Material::WanderingTraderSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"WARDEN_SPAWN_EGG" => Ok(Material::WardenSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"WITCH_SPAWN_EGG" => Ok(Material::WitchSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"WITHER_SPAWN_EGG" => Ok(Material::WitherSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"WITHER_SKELETON_SPAWN_EGG" => Ok(Material::WitherSkeletonSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"WOLF_SPAWN_EGG" => Ok(Material::WolfSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"ZOGLIN_SPAWN_EGG" => Ok(Material::ZoglinSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"ZOMBIE_SPAWN_EGG" => Ok(Material::ZombieSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"ZOMBIE_HORSE_SPAWN_EGG" => Ok(Material::ZombieHorseSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"ZOMBIE_VILLAGER_SPAWN_EGG" => Ok(Material::ZombieVillagerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"ZOMBIFIED_PIGLIN_SPAWN_EGG" => Ok(Material::ZombifiedPiglinSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"EXPERIENCE_BOTTLE" => Ok(Material::ExperienceBottle { inner: MaterialStruct::from_raw(env,obj)?}),
"FIRE_CHARGE" => Ok(Material::FireCharge { inner: MaterialStruct::from_raw(env,obj)?}),
"WRITABLE_BOOK" => Ok(Material::WritableBook { inner: MaterialStruct::from_raw(env,obj)?}),
"WRITTEN_BOOK" => Ok(Material::WrittenBook { inner: MaterialStruct::from_raw(env,obj)?}),
"ITEM_FRAME" => Ok(Material::ItemFrame { inner: MaterialStruct::from_raw(env,obj)?}),
"GLOW_ITEM_FRAME" => Ok(Material::GlowItemFrame { inner: MaterialStruct::from_raw(env,obj)?}),
"FLOWER_POT" => Ok(Material::FlowerPot { inner: MaterialStruct::from_raw(env,obj)?}),
"CARROT" => Ok(Material::Carrot { inner: MaterialStruct::from_raw(env,obj)?}),
"POTATO" => Ok(Material::Potato { inner: MaterialStruct::from_raw(env,obj)?}),
"BAKED_POTATO" => Ok(Material::BakedPotato { inner: MaterialStruct::from_raw(env,obj)?}),
"POISONOUS_POTATO" => Ok(Material::PoisonousPotato { inner: MaterialStruct::from_raw(env,obj)?}),
"MAP" => Ok(Material::Map { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_CARROT" => Ok(Material::GoldenCarrot { inner: MaterialStruct::from_raw(env,obj)?}),
"SKELETON_SKULL" => Ok(Material::SkeletonSkull { inner: MaterialStruct::from_raw(env,obj)?}),
"WITHER_SKELETON_SKULL" => Ok(Material::WitherSkeletonSkull { inner: MaterialStruct::from_raw(env,obj)?}),
"PLAYER_HEAD" => Ok(Material::PlayerHead { inner: MaterialStruct::from_raw(env,obj)?}),
"ZOMBIE_HEAD" => Ok(Material::ZombieHead { inner: MaterialStruct::from_raw(env,obj)?}),
"CREEPER_HEAD" => Ok(Material::CreeperHead { inner: MaterialStruct::from_raw(env,obj)?}),
"DRAGON_HEAD" => Ok(Material::DragonHead { inner: MaterialStruct::from_raw(env,obj)?}),
"PIGLIN_HEAD" => Ok(Material::PiglinHead { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_STAR" => Ok(Material::NetherStar { inner: MaterialStruct::from_raw(env,obj)?}),
"PUMPKIN_PIE" => Ok(Material::PumpkinPie { inner: MaterialStruct::from_raw(env,obj)?}),
"FIREWORK_ROCKET" => Ok(Material::FireworkRocket { inner: MaterialStruct::from_raw(env,obj)?}),
"FIREWORK_STAR" => Ok(Material::FireworkStar { inner: MaterialStruct::from_raw(env,obj)?}),
"ENCHANTED_BOOK" => Ok(Material::EnchantedBook { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_BRICK" => Ok(Material::NetherBrick { inner: MaterialStruct::from_raw(env,obj)?}),
"PRISMARINE_SHARD" => Ok(Material::PrismarineShard { inner: MaterialStruct::from_raw(env,obj)?}),
"PRISMARINE_CRYSTALS" => Ok(Material::PrismarineCrystals { inner: MaterialStruct::from_raw(env,obj)?}),
"RABBIT" => Ok(Material::Rabbit { inner: MaterialStruct::from_raw(env,obj)?}),
"COOKED_RABBIT" => Ok(Material::CookedRabbit { inner: MaterialStruct::from_raw(env,obj)?}),
"RABBIT_STEW" => Ok(Material::RabbitStew { inner: MaterialStruct::from_raw(env,obj)?}),
"RABBIT_FOOT" => Ok(Material::RabbitFoot { inner: MaterialStruct::from_raw(env,obj)?}),
"RABBIT_HIDE" => Ok(Material::RabbitHide { inner: MaterialStruct::from_raw(env,obj)?}),
"ARMOR_STAND" => Ok(Material::ArmorStand { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_HORSE_ARMOR" => Ok(Material::IronHorseArmor { inner: MaterialStruct::from_raw(env,obj)?}),
"GOLDEN_HORSE_ARMOR" => Ok(Material::GoldenHorseArmor { inner: MaterialStruct::from_raw(env,obj)?}),
"DIAMOND_HORSE_ARMOR" => Ok(Material::DiamondHorseArmor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEATHER_HORSE_ARMOR" => Ok(Material::LeatherHorseArmor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEAD" => Ok(Material::Lead { inner: MaterialStruct::from_raw(env,obj)?}),
"NAME_TAG" => Ok(Material::NameTag { inner: MaterialStruct::from_raw(env,obj)?}),
"COMMAND_BLOCK_MINECART" => Ok(Material::CommandBlockMinecart { inner: MaterialStruct::from_raw(env,obj)?}),
"MUTTON" => Ok(Material::Mutton { inner: MaterialStruct::from_raw(env,obj)?}),
"COOKED_MUTTON" => Ok(Material::CookedMutton { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_BANNER" => Ok(Material::WhiteBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_BANNER" => Ok(Material::OrangeBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_BANNER" => Ok(Material::MagentaBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_BANNER" => Ok(Material::LightBlueBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_BANNER" => Ok(Material::YellowBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_BANNER" => Ok(Material::LimeBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_BANNER" => Ok(Material::PinkBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_BANNER" => Ok(Material::GrayBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_BANNER" => Ok(Material::LightGrayBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_BANNER" => Ok(Material::CyanBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_BANNER" => Ok(Material::PurpleBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_BANNER" => Ok(Material::BlueBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_BANNER" => Ok(Material::BrownBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_BANNER" => Ok(Material::GreenBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_BANNER" => Ok(Material::RedBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_BANNER" => Ok(Material::BlackBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"END_CRYSTAL" => Ok(Material::EndCrystal { inner: MaterialStruct::from_raw(env,obj)?}),
"CHORUS_FRUIT" => Ok(Material::ChorusFruit { inner: MaterialStruct::from_raw(env,obj)?}),
"POPPED_CHORUS_FRUIT" => Ok(Material::PoppedChorusFruit { inner: MaterialStruct::from_raw(env,obj)?}),
"TORCHFLOWER_SEEDS" => Ok(Material::TorchflowerSeeds { inner: MaterialStruct::from_raw(env,obj)?}),
"PITCHER_POD" => Ok(Material::PitcherPod { inner: MaterialStruct::from_raw(env,obj)?}),
"BEETROOT" => Ok(Material::Beetroot { inner: MaterialStruct::from_raw(env,obj)?}),
"BEETROOT_SEEDS" => Ok(Material::BeetrootSeeds { inner: MaterialStruct::from_raw(env,obj)?}),
"BEETROOT_SOUP" => Ok(Material::BeetrootSoup { inner: MaterialStruct::from_raw(env,obj)?}),
"DRAGON_BREATH" => Ok(Material::DragonBreath { inner: MaterialStruct::from_raw(env,obj)?}),
"SPLASH_POTION" => Ok(Material::SplashPotion { inner: MaterialStruct::from_raw(env,obj)?}),
"SPECTRAL_ARROW" => Ok(Material::SpectralArrow { inner: MaterialStruct::from_raw(env,obj)?}),
"TIPPED_ARROW" => Ok(Material::TippedArrow { inner: MaterialStruct::from_raw(env,obj)?}),
"LINGERING_POTION" => Ok(Material::LingeringPotion { inner: MaterialStruct::from_raw(env,obj)?}),
"SHIELD" => Ok(Material::Shield { inner: MaterialStruct::from_raw(env,obj)?}),
"TOTEM_OF_UNDYING" => Ok(Material::TotemOfUndying { inner: MaterialStruct::from_raw(env,obj)?}),
"SHULKER_SHELL" => Ok(Material::ShulkerShell { inner: MaterialStruct::from_raw(env,obj)?}),
"IRON_NUGGET" => Ok(Material::IronNugget { inner: MaterialStruct::from_raw(env,obj)?}),
"KNOWLEDGE_BOOK" => Ok(Material::KnowledgeBook { inner: MaterialStruct::from_raw(env,obj)?}),
"DEBUG_STICK" => Ok(Material::DebugStick { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_13" => Ok(Material::MusicDisc13 { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_CAT" => Ok(Material::MusicDiscCat { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_BLOCKS" => Ok(Material::MusicDiscBlocks { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_CHIRP" => Ok(Material::MusicDiscChirp { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_FAR" => Ok(Material::MusicDiscFar { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_MALL" => Ok(Material::MusicDiscMall { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_MELLOHI" => Ok(Material::MusicDiscMellohi { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_STAL" => Ok(Material::MusicDiscStal { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_STRAD" => Ok(Material::MusicDiscStrad { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_WARD" => Ok(Material::MusicDiscWard { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_11" => Ok(Material::MusicDisc11 { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_WAIT" => Ok(Material::MusicDiscWait { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_OTHERSIDE" => Ok(Material::MusicDiscOtherside { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_RELIC" => Ok(Material::MusicDiscRelic { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_5" => Ok(Material::MusicDisc5 { inner: MaterialStruct::from_raw(env,obj)?}),
"MUSIC_DISC_PIGSTEP" => Ok(Material::MusicDiscPigstep { inner: MaterialStruct::from_raw(env,obj)?}),
"DISC_FRAGMENT_5" => Ok(Material::DiscFragment5 { inner: MaterialStruct::from_raw(env,obj)?}),
"TRIDENT" => Ok(Material::Trident { inner: MaterialStruct::from_raw(env,obj)?}),
"PHANTOM_MEMBRANE" => Ok(Material::PhantomMembrane { inner: MaterialStruct::from_raw(env,obj)?}),
"NAUTILUS_SHELL" => Ok(Material::NautilusShell { inner: MaterialStruct::from_raw(env,obj)?}),
"HEART_OF_THE_SEA" => Ok(Material::HeartOfTheSea { inner: MaterialStruct::from_raw(env,obj)?}),
"CROSSBOW" => Ok(Material::Crossbow { inner: MaterialStruct::from_raw(env,obj)?}),
"SUSPICIOUS_STEW" => Ok(Material::SuspiciousStew { inner: MaterialStruct::from_raw(env,obj)?}),
"LOOM" => Ok(Material::Loom { inner: MaterialStruct::from_raw(env,obj)?}),
"FLOWER_BANNER_PATTERN" => Ok(Material::FlowerBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),
"CREEPER_BANNER_PATTERN" => Ok(Material::CreeperBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),
"SKULL_BANNER_PATTERN" => Ok(Material::SkullBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),
"MOJANG_BANNER_PATTERN" => Ok(Material::MojangBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),
"GLOBE_BANNER_PATTERN" => Ok(Material::GlobeBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),
"PIGLIN_BANNER_PATTERN" => Ok(Material::PiglinBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),
"GOAT_HORN" => Ok(Material::GoatHorn { inner: MaterialStruct::from_raw(env,obj)?}),
"COMPOSTER" => Ok(Material::Composter { inner: MaterialStruct::from_raw(env,obj)?}),
"BARREL" => Ok(Material::Barrel { inner: MaterialStruct::from_raw(env,obj)?}),
"SMOKER" => Ok(Material::Smoker { inner: MaterialStruct::from_raw(env,obj)?}),
"BLAST_FURNACE" => Ok(Material::BlastFurnace { inner: MaterialStruct::from_raw(env,obj)?}),
"CARTOGRAPHY_TABLE" => Ok(Material::CartographyTable { inner: MaterialStruct::from_raw(env,obj)?}),
"FLETCHING_TABLE" => Ok(Material::FletchingTable { inner: MaterialStruct::from_raw(env,obj)?}),
"GRINDSTONE" => Ok(Material::Grindstone { inner: MaterialStruct::from_raw(env,obj)?}),
"SMITHING_TABLE" => Ok(Material::SmithingTable { inner: MaterialStruct::from_raw(env,obj)?}),
"STONECUTTER" => Ok(Material::Stonecutter { inner: MaterialStruct::from_raw(env,obj)?}),
"BELL" => Ok(Material::Bell { inner: MaterialStruct::from_raw(env,obj)?}),
"LANTERN" => Ok(Material::Lantern { inner: MaterialStruct::from_raw(env,obj)?}),
"SOUL_LANTERN" => Ok(Material::SoulLantern { inner: MaterialStruct::from_raw(env,obj)?}),
"SWEET_BERRIES" => Ok(Material::SweetBerries { inner: MaterialStruct::from_raw(env,obj)?}),
"GLOW_BERRIES" => Ok(Material::GlowBerries { inner: MaterialStruct::from_raw(env,obj)?}),
"CAMPFIRE" => Ok(Material::Campfire { inner: MaterialStruct::from_raw(env,obj)?}),
"SOUL_CAMPFIRE" => Ok(Material::SoulCampfire { inner: MaterialStruct::from_raw(env,obj)?}),
"SHROOMLIGHT" => Ok(Material::Shroomlight { inner: MaterialStruct::from_raw(env,obj)?}),
"HONEYCOMB" => Ok(Material::Honeycomb { inner: MaterialStruct::from_raw(env,obj)?}),
"BEE_NEST" => Ok(Material::BeeNest { inner: MaterialStruct::from_raw(env,obj)?}),
"BEEHIVE" => Ok(Material::Beehive { inner: MaterialStruct::from_raw(env,obj)?}),
"HONEY_BOTTLE" => Ok(Material::HoneyBottle { inner: MaterialStruct::from_raw(env,obj)?}),
"HONEYCOMB_BLOCK" => Ok(Material::HoneycombBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LODESTONE" => Ok(Material::Lodestone { inner: MaterialStruct::from_raw(env,obj)?}),
"CRYING_OBSIDIAN" => Ok(Material::CryingObsidian { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACKSTONE" => Ok(Material::Blackstone { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACKSTONE_SLAB" => Ok(Material::BlackstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACKSTONE_STAIRS" => Ok(Material::BlackstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"GILDED_BLACKSTONE" => Ok(Material::GildedBlackstone { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_BLACKSTONE" => Ok(Material::PolishedBlackstone { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_BLACKSTONE_SLAB" => Ok(Material::PolishedBlackstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_BLACKSTONE_STAIRS" => Ok(Material::PolishedBlackstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"CHISELED_POLISHED_BLACKSTONE" => Ok(Material::ChiseledPolishedBlackstone { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_BLACKSTONE_BRICKS" => Ok(Material::PolishedBlackstoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_BLACKSTONE_BRICK_SLAB" => Ok(Material::PolishedBlackstoneBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"POLISHED_BLACKSTONE_BRICK_STAIRS" => Ok(Material::PolishedBlackstoneBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"CRACKED_POLISHED_BLACKSTONE_BRICKS" => Ok(Material::CrackedPolishedBlackstoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"RESPAWN_ANCHOR" => Ok(Material::RespawnAnchor { inner: MaterialStruct::from_raw(env,obj)?}),
"CANDLE" => Ok(Material::Candle { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_CANDLE" => Ok(Material::WhiteCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_CANDLE" => Ok(Material::OrangeCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_CANDLE" => Ok(Material::MagentaCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_CANDLE" => Ok(Material::LightBlueCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_CANDLE" => Ok(Material::YellowCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_CANDLE" => Ok(Material::LimeCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_CANDLE" => Ok(Material::PinkCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_CANDLE" => Ok(Material::GrayCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_CANDLE" => Ok(Material::LightGrayCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_CANDLE" => Ok(Material::CyanCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_CANDLE" => Ok(Material::PurpleCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_CANDLE" => Ok(Material::BlueCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_CANDLE" => Ok(Material::BrownCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_CANDLE" => Ok(Material::GreenCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_CANDLE" => Ok(Material::RedCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_CANDLE" => Ok(Material::BlackCandle { inner: MaterialStruct::from_raw(env,obj)?}),
"SMALL_AMETHYST_BUD" => Ok(Material::SmallAmethystBud { inner: MaterialStruct::from_raw(env,obj)?}),
"MEDIUM_AMETHYST_BUD" => Ok(Material::MediumAmethystBud { inner: MaterialStruct::from_raw(env,obj)?}),
"LARGE_AMETHYST_BUD" => Ok(Material::LargeAmethystBud { inner: MaterialStruct::from_raw(env,obj)?}),
"AMETHYST_CLUSTER" => Ok(Material::AmethystCluster { inner: MaterialStruct::from_raw(env,obj)?}),
"POINTED_DRIPSTONE" => Ok(Material::PointedDripstone { inner: MaterialStruct::from_raw(env,obj)?}),
"OCHRE_FROGLIGHT" => Ok(Material::OchreFroglight { inner: MaterialStruct::from_raw(env,obj)?}),
"VERDANT_FROGLIGHT" => Ok(Material::VerdantFroglight { inner: MaterialStruct::from_raw(env,obj)?}),
"PEARLESCENT_FROGLIGHT" => Ok(Material::PearlescentFroglight { inner: MaterialStruct::from_raw(env,obj)?}),
"FROGSPAWN" => Ok(Material::Frogspawn { inner: MaterialStruct::from_raw(env,obj)?}),
"ECHO_SHARD" => Ok(Material::EchoShard { inner: MaterialStruct::from_raw(env,obj)?}),
"BRUSH" => Ok(Material::Brush { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHERITE_UPGRADE_SMITHING_TEMPLATE" => Ok(Material::NetheriteUpgradeSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::SentryArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"DUNE_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::DuneArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"COAST_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::CoastArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"WILD_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::WildArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"WARD_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::WardArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"EYE_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::EyeArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"VEX_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::VexArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"TIDE_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::TideArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::SnoutArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"RIB_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::RibArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::SpireArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::WayfinderArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::ShaperArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::SilenceArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"RAISER_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::RaiserArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"HOST_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::HostArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),
"ANGLER_POTTERY_SHERD" => Ok(Material::AnglerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"ARCHER_POTTERY_SHERD" => Ok(Material::ArcherPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"ARMS_UP_POTTERY_SHERD" => Ok(Material::ArmsUpPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"BLADE_POTTERY_SHERD" => Ok(Material::BladePotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"BREWER_POTTERY_SHERD" => Ok(Material::BrewerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"BURN_POTTERY_SHERD" => Ok(Material::BurnPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"DANGER_POTTERY_SHERD" => Ok(Material::DangerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"EXPLORER_POTTERY_SHERD" => Ok(Material::ExplorerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"FRIEND_POTTERY_SHERD" => Ok(Material::FriendPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"HEART_POTTERY_SHERD" => Ok(Material::HeartPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"HEARTBREAK_POTTERY_SHERD" => Ok(Material::HeartbreakPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"HOWL_POTTERY_SHERD" => Ok(Material::HowlPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"MINER_POTTERY_SHERD" => Ok(Material::MinerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"MOURNER_POTTERY_SHERD" => Ok(Material::MournerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"PLENTY_POTTERY_SHERD" => Ok(Material::PlentyPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"PRIZE_POTTERY_SHERD" => Ok(Material::PrizePotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"SHEAF_POTTERY_SHERD" => Ok(Material::SheafPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"SHELTER_POTTERY_SHERD" => Ok(Material::ShelterPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"SKULL_POTTERY_SHERD" => Ok(Material::SkullPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"SNORT_POTTERY_SHERD" => Ok(Material::SnortPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),
"COPPER_GRATE" => Ok(Material::CopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),
"EXPOSED_COPPER_GRATE" => Ok(Material::ExposedCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),
"WEATHERED_COPPER_GRATE" => Ok(Material::WeatheredCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),
"OXIDIZED_COPPER_GRATE" => Ok(Material::OxidizedCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_COPPER_GRATE" => Ok(Material::WaxedCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_EXPOSED_COPPER_GRATE" => Ok(Material::WaxedExposedCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_WEATHERED_COPPER_GRATE" => Ok(Material::WaxedWeatheredCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_OXIDIZED_COPPER_GRATE" => Ok(Material::WaxedOxidizedCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),
"COPPER_BULB" => Ok(Material::CopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),
"EXPOSED_COPPER_BULB" => Ok(Material::ExposedCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),
"WEATHERED_COPPER_BULB" => Ok(Material::WeatheredCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),
"OXIDIZED_COPPER_BULB" => Ok(Material::OxidizedCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_COPPER_BULB" => Ok(Material::WaxedCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_EXPOSED_COPPER_BULB" => Ok(Material::WaxedExposedCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_WEATHERED_COPPER_BULB" => Ok(Material::WaxedWeatheredCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),
"WAXED_OXIDIZED_COPPER_BULB" => Ok(Material::WaxedOxidizedCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),
"TRIAL_SPAWNER" => Ok(Material::TrialSpawner { inner: MaterialStruct::from_raw(env,obj)?}),
"TRIAL_KEY" => Ok(Material::TrialKey { inner: MaterialStruct::from_raw(env,obj)?}),
"WATER" => Ok(Material::Water { inner: MaterialStruct::from_raw(env,obj)?}),
"LAVA" => Ok(Material::Lava { inner: MaterialStruct::from_raw(env,obj)?}),
"TALL_SEAGRASS" => Ok(Material::TallSeagrass { inner: MaterialStruct::from_raw(env,obj)?}),
"PISTON_HEAD" => Ok(Material::PistonHead { inner: MaterialStruct::from_raw(env,obj)?}),
"MOVING_PISTON" => Ok(Material::MovingPiston { inner: MaterialStruct::from_raw(env,obj)?}),
"WALL_TORCH" => Ok(Material::WallTorch { inner: MaterialStruct::from_raw(env,obj)?}),
"FIRE" => Ok(Material::Fire { inner: MaterialStruct::from_raw(env,obj)?}),
"SOUL_FIRE" => Ok(Material::SoulFire { inner: MaterialStruct::from_raw(env,obj)?}),
"REDSTONE_WIRE" => Ok(Material::RedstoneWire { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_WALL_SIGN" => Ok(Material::OakWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_WALL_SIGN" => Ok(Material::SpruceWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_WALL_SIGN" => Ok(Material::BirchWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_WALL_SIGN" => Ok(Material::AcaciaWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_WALL_SIGN" => Ok(Material::CherryWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_WALL_SIGN" => Ok(Material::JungleWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_WALL_SIGN" => Ok(Material::DarkOakWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_WALL_SIGN" => Ok(Material::MangroveWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_WALL_SIGN" => Ok(Material::BambooWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"OAK_WALL_HANGING_SIGN" => Ok(Material::OakWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"SPRUCE_WALL_HANGING_SIGN" => Ok(Material::SpruceWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"BIRCH_WALL_HANGING_SIGN" => Ok(Material::BirchWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"ACACIA_WALL_HANGING_SIGN" => Ok(Material::AcaciaWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"CHERRY_WALL_HANGING_SIGN" => Ok(Material::CherryWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"JUNGLE_WALL_HANGING_SIGN" => Ok(Material::JungleWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"DARK_OAK_WALL_HANGING_SIGN" => Ok(Material::DarkOakWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"MANGROVE_WALL_HANGING_SIGN" => Ok(Material::MangroveWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_WALL_HANGING_SIGN" => Ok(Material::CrimsonWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_WALL_HANGING_SIGN" => Ok(Material::WarpedWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_WALL_HANGING_SIGN" => Ok(Material::BambooWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),
"REDSTONE_WALL_TORCH" => Ok(Material::RedstoneWallTorch { inner: MaterialStruct::from_raw(env,obj)?}),
"SOUL_WALL_TORCH" => Ok(Material::SoulWallTorch { inner: MaterialStruct::from_raw(env,obj)?}),
"NETHER_PORTAL" => Ok(Material::NetherPortal { inner: MaterialStruct::from_raw(env,obj)?}),
"ATTACHED_PUMPKIN_STEM" => Ok(Material::AttachedPumpkinStem { inner: MaterialStruct::from_raw(env,obj)?}),
"ATTACHED_MELON_STEM" => Ok(Material::AttachedMelonStem { inner: MaterialStruct::from_raw(env,obj)?}),
"PUMPKIN_STEM" => Ok(Material::PumpkinStem { inner: MaterialStruct::from_raw(env,obj)?}),
"MELON_STEM" => Ok(Material::MelonStem { inner: MaterialStruct::from_raw(env,obj)?}),
"WATER_CAULDRON" => Ok(Material::WaterCauldron { inner: MaterialStruct::from_raw(env,obj)?}),
"LAVA_CAULDRON" => Ok(Material::LavaCauldron { inner: MaterialStruct::from_raw(env,obj)?}),
"POWDER_SNOW_CAULDRON" => Ok(Material::PowderSnowCauldron { inner: MaterialStruct::from_raw(env,obj)?}),
"END_PORTAL" => Ok(Material::EndPortal { inner: MaterialStruct::from_raw(env,obj)?}),
"COCOA" => Ok(Material::Cocoa { inner: MaterialStruct::from_raw(env,obj)?}),
"TRIPWIRE" => Ok(Material::Tripwire { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_TORCHFLOWER" => Ok(Material::PottedTorchflower { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_OAK_SAPLING" => Ok(Material::PottedOakSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_SPRUCE_SAPLING" => Ok(Material::PottedSpruceSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_BIRCH_SAPLING" => Ok(Material::PottedBirchSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_JUNGLE_SAPLING" => Ok(Material::PottedJungleSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_ACACIA_SAPLING" => Ok(Material::PottedAcaciaSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_CHERRY_SAPLING" => Ok(Material::PottedCherrySapling { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_DARK_OAK_SAPLING" => Ok(Material::PottedDarkOakSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_MANGROVE_PROPAGULE" => Ok(Material::PottedMangrovePropagule { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_FERN" => Ok(Material::PottedFern { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_DANDELION" => Ok(Material::PottedDandelion { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_POPPY" => Ok(Material::PottedPoppy { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_BLUE_ORCHID" => Ok(Material::PottedBlueOrchid { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_ALLIUM" => Ok(Material::PottedAllium { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_AZURE_BLUET" => Ok(Material::PottedAzureBluet { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_RED_TULIP" => Ok(Material::PottedRedTulip { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_ORANGE_TULIP" => Ok(Material::PottedOrangeTulip { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_WHITE_TULIP" => Ok(Material::PottedWhiteTulip { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_PINK_TULIP" => Ok(Material::PottedPinkTulip { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_OXEYE_DAISY" => Ok(Material::PottedOxeyeDaisy { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_CORNFLOWER" => Ok(Material::PottedCornflower { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_LILY_OF_THE_VALLEY" => Ok(Material::PottedLilyOfTheValley { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_WITHER_ROSE" => Ok(Material::PottedWitherRose { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_RED_MUSHROOM" => Ok(Material::PottedRedMushroom { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_BROWN_MUSHROOM" => Ok(Material::PottedBrownMushroom { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_DEAD_BUSH" => Ok(Material::PottedDeadBush { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_CACTUS" => Ok(Material::PottedCactus { inner: MaterialStruct::from_raw(env,obj)?}),
"CARROTS" => Ok(Material::Carrots { inner: MaterialStruct::from_raw(env,obj)?}),
"POTATOES" => Ok(Material::Potatoes { inner: MaterialStruct::from_raw(env,obj)?}),
"SKELETON_WALL_SKULL" => Ok(Material::SkeletonWallSkull { inner: MaterialStruct::from_raw(env,obj)?}),
"WITHER_SKELETON_WALL_SKULL" => Ok(Material::WitherSkeletonWallSkull { inner: MaterialStruct::from_raw(env,obj)?}),
"ZOMBIE_WALL_HEAD" => Ok(Material::ZombieWallHead { inner: MaterialStruct::from_raw(env,obj)?}),
"PLAYER_WALL_HEAD" => Ok(Material::PlayerWallHead { inner: MaterialStruct::from_raw(env,obj)?}),
"CREEPER_WALL_HEAD" => Ok(Material::CreeperWallHead { inner: MaterialStruct::from_raw(env,obj)?}),
"DRAGON_WALL_HEAD" => Ok(Material::DragonWallHead { inner: MaterialStruct::from_raw(env,obj)?}),
"PIGLIN_WALL_HEAD" => Ok(Material::PiglinWallHead { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_WALL_BANNER" => Ok(Material::WhiteWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_WALL_BANNER" => Ok(Material::OrangeWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_WALL_BANNER" => Ok(Material::MagentaWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_WALL_BANNER" => Ok(Material::LightBlueWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_WALL_BANNER" => Ok(Material::YellowWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_WALL_BANNER" => Ok(Material::LimeWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_WALL_BANNER" => Ok(Material::PinkWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_WALL_BANNER" => Ok(Material::GrayWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_WALL_BANNER" => Ok(Material::LightGrayWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_WALL_BANNER" => Ok(Material::CyanWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_WALL_BANNER" => Ok(Material::PurpleWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_WALL_BANNER" => Ok(Material::BlueWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_WALL_BANNER" => Ok(Material::BrownWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_WALL_BANNER" => Ok(Material::GreenWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_WALL_BANNER" => Ok(Material::RedWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_WALL_BANNER" => Ok(Material::BlackWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"TORCHFLOWER_CROP" => Ok(Material::TorchflowerCrop { inner: MaterialStruct::from_raw(env,obj)?}),
"PITCHER_CROP" => Ok(Material::PitcherCrop { inner: MaterialStruct::from_raw(env,obj)?}),
"BEETROOTS" => Ok(Material::Beetroots { inner: MaterialStruct::from_raw(env,obj)?}),
"END_GATEWAY" => Ok(Material::EndGateway { inner: MaterialStruct::from_raw(env,obj)?}),
"FROSTED_ICE" => Ok(Material::FrostedIce { inner: MaterialStruct::from_raw(env,obj)?}),
"KELP_PLANT" => Ok(Material::KelpPlant { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_TUBE_CORAL_WALL_FAN" => Ok(Material::DeadTubeCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_BRAIN_CORAL_WALL_FAN" => Ok(Material::DeadBrainCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_BUBBLE_CORAL_WALL_FAN" => Ok(Material::DeadBubbleCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_FIRE_CORAL_WALL_FAN" => Ok(Material::DeadFireCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),
"DEAD_HORN_CORAL_WALL_FAN" => Ok(Material::DeadHornCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),
"TUBE_CORAL_WALL_FAN" => Ok(Material::TubeCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),
"BRAIN_CORAL_WALL_FAN" => Ok(Material::BrainCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),
"BUBBLE_CORAL_WALL_FAN" => Ok(Material::BubbleCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),
"FIRE_CORAL_WALL_FAN" => Ok(Material::FireCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),
"HORN_CORAL_WALL_FAN" => Ok(Material::HornCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),
"BAMBOO_SAPLING" => Ok(Material::BambooSapling { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_BAMBOO" => Ok(Material::PottedBamboo { inner: MaterialStruct::from_raw(env,obj)?}),
"VOID_AIR" => Ok(Material::VoidAir { inner: MaterialStruct::from_raw(env,obj)?}),
"CAVE_AIR" => Ok(Material::CaveAir { inner: MaterialStruct::from_raw(env,obj)?}),
"BUBBLE_COLUMN" => Ok(Material::BubbleColumn { inner: MaterialStruct::from_raw(env,obj)?}),
"SWEET_BERRY_BUSH" => Ok(Material::SweetBerryBush { inner: MaterialStruct::from_raw(env,obj)?}),
"WEEPING_VINES_PLANT" => Ok(Material::WeepingVinesPlant { inner: MaterialStruct::from_raw(env,obj)?}),
"TWISTING_VINES_PLANT" => Ok(Material::TwistingVinesPlant { inner: MaterialStruct::from_raw(env,obj)?}),
"CRIMSON_WALL_SIGN" => Ok(Material::CrimsonWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"WARPED_WALL_SIGN" => Ok(Material::WarpedWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_CRIMSON_FUNGUS" => Ok(Material::PottedCrimsonFungus { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_WARPED_FUNGUS" => Ok(Material::PottedWarpedFungus { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_CRIMSON_ROOTS" => Ok(Material::PottedCrimsonRoots { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_WARPED_ROOTS" => Ok(Material::PottedWarpedRoots { inner: MaterialStruct::from_raw(env,obj)?}),
"CANDLE_CAKE" => Ok(Material::CandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"WHITE_CANDLE_CAKE" => Ok(Material::WhiteCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"ORANGE_CANDLE_CAKE" => Ok(Material::OrangeCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"MAGENTA_CANDLE_CAKE" => Ok(Material::MagentaCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_BLUE_CANDLE_CAKE" => Ok(Material::LightBlueCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"YELLOW_CANDLE_CAKE" => Ok(Material::YellowCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"LIME_CANDLE_CAKE" => Ok(Material::LimeCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"PINK_CANDLE_CAKE" => Ok(Material::PinkCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"GRAY_CANDLE_CAKE" => Ok(Material::GrayCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"LIGHT_GRAY_CANDLE_CAKE" => Ok(Material::LightGrayCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"CYAN_CANDLE_CAKE" => Ok(Material::CyanCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"PURPLE_CANDLE_CAKE" => Ok(Material::PurpleCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"BLUE_CANDLE_CAKE" => Ok(Material::BlueCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"BROWN_CANDLE_CAKE" => Ok(Material::BrownCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"GREEN_CANDLE_CAKE" => Ok(Material::GreenCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"RED_CANDLE_CAKE" => Ok(Material::RedCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"BLACK_CANDLE_CAKE" => Ok(Material::BlackCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),
"POWDER_SNOW" => Ok(Material::PowderSnow { inner: MaterialStruct::from_raw(env,obj)?}),
"CAVE_VINES" => Ok(Material::CaveVines { inner: MaterialStruct::from_raw(env,obj)?}),
"CAVE_VINES_PLANT" => Ok(Material::CaveVinesPlant { inner: MaterialStruct::from_raw(env,obj)?}),
"BIG_DRIPLEAF_STEM" => Ok(Material::BigDripleafStem { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_AZALEA_BUSH" => Ok(Material::PottedAzaleaBush { inner: MaterialStruct::from_raw(env,obj)?}),
"POTTED_FLOWERING_AZALEA_BUSH" => Ok(Material::PottedFloweringAzaleaBush { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_AIR" => Ok(Material::LegacyAir { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STONE" => Ok(Material::LegacyStone { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GRASS" => Ok(Material::LegacyGrass { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIRT" => Ok(Material::LegacyDirt { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COBBLESTONE" => Ok(Material::LegacyCobblestone { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD" => Ok(Material::LegacyWood { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SAPLING" => Ok(Material::LegacySapling { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BEDROCK" => Ok(Material::LegacyBedrock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WATER" => Ok(Material::LegacyWater { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STATIONARY_WATER" => Ok(Material::LegacyStationaryWater { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LAVA" => Ok(Material::LegacyLava { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STATIONARY_LAVA" => Ok(Material::LegacyStationaryLava { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SAND" => Ok(Material::LegacySand { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GRAVEL" => Ok(Material::LegacyGravel { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_ORE" => Ok(Material::LegacyGoldOre { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_ORE" => Ok(Material::LegacyIronOre { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COAL_ORE" => Ok(Material::LegacyCoalOre { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LOG" => Ok(Material::LegacyLog { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LEAVES" => Ok(Material::LegacyLeaves { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SPONGE" => Ok(Material::LegacySponge { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GLASS" => Ok(Material::LegacyGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LAPIS_ORE" => Ok(Material::LegacyLapisOre { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LAPIS_BLOCK" => Ok(Material::LegacyLapisBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DISPENSER" => Ok(Material::LegacyDispenser { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SANDSTONE" => Ok(Material::LegacySandstone { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_NOTE_BLOCK" => Ok(Material::LegacyNoteBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BED_BLOCK" => Ok(Material::LegacyBedBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_POWERED_RAIL" => Ok(Material::LegacyPoweredRail { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DETECTOR_RAIL" => Ok(Material::LegacyDetectorRail { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PISTON_STICKY_BASE" => Ok(Material::LegacyPistonStickyBase { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WEB" => Ok(Material::LegacyWeb { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LONG_GRASS" => Ok(Material::LegacyLongGrass { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DEAD_BUSH" => Ok(Material::LegacyDeadBush { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PISTON_BASE" => Ok(Material::LegacyPistonBase { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PISTON_EXTENSION" => Ok(Material::LegacyPistonExtension { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOL" => Ok(Material::LegacyWool { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PISTON_MOVING_PIECE" => Ok(Material::LegacyPistonMovingPiece { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_YELLOW_FLOWER" => Ok(Material::LegacyYellowFlower { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RED_ROSE" => Ok(Material::LegacyRedRose { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BROWN_MUSHROOM" => Ok(Material::LegacyBrownMushroom { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RED_MUSHROOM" => Ok(Material::LegacyRedMushroom { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_BLOCK" => Ok(Material::LegacyGoldBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_BLOCK" => Ok(Material::LegacyIronBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DOUBLE_STEP" => Ok(Material::LegacyDoubleStep { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STEP" => Ok(Material::LegacyStep { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BRICK" => Ok(Material::LegacyBrick { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_TNT" => Ok(Material::LegacyTnt { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BOOKSHELF" => Ok(Material::LegacyBookshelf { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MOSSY_COBBLESTONE" => Ok(Material::LegacyMossyCobblestone { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_OBSIDIAN" => Ok(Material::LegacyObsidian { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_TORCH" => Ok(Material::LegacyTorch { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FIRE" => Ok(Material::LegacyFire { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MOB_SPAWNER" => Ok(Material::LegacyMobSpawner { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD_STAIRS" => Ok(Material::LegacyWoodStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CHEST" => Ok(Material::LegacyChest { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_REDSTONE_WIRE" => Ok(Material::LegacyRedstoneWire { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_ORE" => Ok(Material::LegacyDiamondOre { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_BLOCK" => Ok(Material::LegacyDiamondBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WORKBENCH" => Ok(Material::LegacyWorkbench { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CROPS" => Ok(Material::LegacyCrops { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SOIL" => Ok(Material::LegacySoil { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FURNACE" => Ok(Material::LegacyFurnace { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BURNING_FURNACE" => Ok(Material::LegacyBurningFurnace { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SIGN_POST" => Ok(Material::LegacySignPost { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOODEN_DOOR" => Ok(Material::LegacyWoodenDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LADDER" => Ok(Material::LegacyLadder { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RAILS" => Ok(Material::LegacyRails { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COBBLESTONE_STAIRS" => Ok(Material::LegacyCobblestoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WALL_SIGN" => Ok(Material::LegacyWallSign { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LEVER" => Ok(Material::LegacyLever { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STONE_PLATE" => Ok(Material::LegacyStonePlate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_DOOR_BLOCK" => Ok(Material::LegacyIronDoorBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD_PLATE" => Ok(Material::LegacyWoodPlate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_REDSTONE_ORE" => Ok(Material::LegacyRedstoneOre { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GLOWING_REDSTONE_ORE" => Ok(Material::LegacyGlowingRedstoneOre { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_REDSTONE_TORCH_OFF" => Ok(Material::LegacyRedstoneTorchOff { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_REDSTONE_TORCH_ON" => Ok(Material::LegacyRedstoneTorchOn { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STONE_BUTTON" => Ok(Material::LegacyStoneButton { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SNOW" => Ok(Material::LegacySnow { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ICE" => Ok(Material::LegacyIce { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SNOW_BLOCK" => Ok(Material::LegacySnowBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CACTUS" => Ok(Material::LegacyCactus { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CLAY" => Ok(Material::LegacyClay { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SUGAR_CANE_BLOCK" => Ok(Material::LegacySugarCaneBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_JUKEBOX" => Ok(Material::LegacyJukebox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FENCE" => Ok(Material::LegacyFence { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PUMPKIN" => Ok(Material::LegacyPumpkin { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_NETHERRACK" => Ok(Material::LegacyNetherrack { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SOUL_SAND" => Ok(Material::LegacySoulSand { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GLOWSTONE" => Ok(Material::LegacyGlowstone { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PORTAL" => Ok(Material::LegacyPortal { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_JACK_O_LANTERN" => Ok(Material::LegacyJackOLantern { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CAKE_BLOCK" => Ok(Material::LegacyCakeBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIODE_BLOCK_OFF" => Ok(Material::LegacyDiodeBlockOff { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIODE_BLOCK_ON" => Ok(Material::LegacyDiodeBlockOn { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STAINED_GLASS" => Ok(Material::LegacyStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_TRAP_DOOR" => Ok(Material::LegacyTrapDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MONSTER_EGGS" => Ok(Material::LegacyMonsterEggs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SMOOTH_BRICK" => Ok(Material::LegacySmoothBrick { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_HUGE_MUSHROOM_1" => Ok(Material::LegacyHugeMushroom1 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_HUGE_MUSHROOM_2" => Ok(Material::LegacyHugeMushroom2 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_FENCE" => Ok(Material::LegacyIronFence { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_THIN_GLASS" => Ok(Material::LegacyThinGlass { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MELON_BLOCK" => Ok(Material::LegacyMelonBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PUMPKIN_STEM" => Ok(Material::LegacyPumpkinStem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MELON_STEM" => Ok(Material::LegacyMelonStem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_VINE" => Ok(Material::LegacyVine { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FENCE_GATE" => Ok(Material::LegacyFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BRICK_STAIRS" => Ok(Material::LegacyBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SMOOTH_STAIRS" => Ok(Material::LegacySmoothStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MYCEL" => Ok(Material::LegacyMycel { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WATER_LILY" => Ok(Material::LegacyWaterLily { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_NETHER_BRICK" => Ok(Material::LegacyNetherBrick { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_NETHER_FENCE" => Ok(Material::LegacyNetherFence { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_NETHER_BRICK_STAIRS" => Ok(Material::LegacyNetherBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_NETHER_WARTS" => Ok(Material::LegacyNetherWarts { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ENCHANTMENT_TABLE" => Ok(Material::LegacyEnchantmentTable { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BREWING_STAND" => Ok(Material::LegacyBrewingStand { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CAULDRON" => Ok(Material::LegacyCauldron { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ENDER_PORTAL" => Ok(Material::LegacyEnderPortal { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ENDER_PORTAL_FRAME" => Ok(Material::LegacyEnderPortalFrame { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ENDER_STONE" => Ok(Material::LegacyEnderStone { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DRAGON_EGG" => Ok(Material::LegacyDragonEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_REDSTONE_LAMP_OFF" => Ok(Material::LegacyRedstoneLampOff { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_REDSTONE_LAMP_ON" => Ok(Material::LegacyRedstoneLampOn { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD_DOUBLE_STEP" => Ok(Material::LegacyWoodDoubleStep { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD_STEP" => Ok(Material::LegacyWoodStep { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COCOA" => Ok(Material::LegacyCocoa { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SANDSTONE_STAIRS" => Ok(Material::LegacySandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_EMERALD_ORE" => Ok(Material::LegacyEmeraldOre { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ENDER_CHEST" => Ok(Material::LegacyEnderChest { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_TRIPWIRE_HOOK" => Ok(Material::LegacyTripwireHook { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_TRIPWIRE" => Ok(Material::LegacyTripwire { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_EMERALD_BLOCK" => Ok(Material::LegacyEmeraldBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SPRUCE_WOOD_STAIRS" => Ok(Material::LegacySpruceWoodStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BIRCH_WOOD_STAIRS" => Ok(Material::LegacyBirchWoodStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_JUNGLE_WOOD_STAIRS" => Ok(Material::LegacyJungleWoodStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COMMAND" => Ok(Material::LegacyCommand { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BEACON" => Ok(Material::LegacyBeacon { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COBBLE_WALL" => Ok(Material::LegacyCobbleWall { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FLOWER_POT" => Ok(Material::LegacyFlowerPot { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CARROT" => Ok(Material::LegacyCarrot { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_POTATO" => Ok(Material::LegacyPotato { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD_BUTTON" => Ok(Material::LegacyWoodButton { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SKULL" => Ok(Material::LegacySkull { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ANVIL" => Ok(Material::LegacyAnvil { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_TRAPPED_CHEST" => Ok(Material::LegacyTrappedChest { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_PLATE" => Ok(Material::LegacyGoldPlate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_PLATE" => Ok(Material::LegacyIronPlate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_REDSTONE_COMPARATOR_OFF" => Ok(Material::LegacyRedstoneComparatorOff { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_REDSTONE_COMPARATOR_ON" => Ok(Material::LegacyRedstoneComparatorOn { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DAYLIGHT_DETECTOR" => Ok(Material::LegacyDaylightDetector { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_REDSTONE_BLOCK" => Ok(Material::LegacyRedstoneBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_QUARTZ_ORE" => Ok(Material::LegacyQuartzOre { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_HOPPER" => Ok(Material::LegacyHopper { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_QUARTZ_BLOCK" => Ok(Material::LegacyQuartzBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_QUARTZ_STAIRS" => Ok(Material::LegacyQuartzStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ACTIVATOR_RAIL" => Ok(Material::LegacyActivatorRail { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DROPPER" => Ok(Material::LegacyDropper { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STAINED_CLAY" => Ok(Material::LegacyStainedClay { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STAINED_GLASS_PANE" => Ok(Material::LegacyStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LEAVES_2" => Ok(Material::LegacyLeaves2 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LOG_2" => Ok(Material::LegacyLog2 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ACACIA_STAIRS" => Ok(Material::LegacyAcaciaStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DARK_OAK_STAIRS" => Ok(Material::LegacyDarkOakStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SLIME_BLOCK" => Ok(Material::LegacySlimeBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BARRIER" => Ok(Material::LegacyBarrier { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_TRAPDOOR" => Ok(Material::LegacyIronTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PRISMARINE" => Ok(Material::LegacyPrismarine { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SEA_LANTERN" => Ok(Material::LegacySeaLantern { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_HAY_BLOCK" => Ok(Material::LegacyHayBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CARPET" => Ok(Material::LegacyCarpet { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_HARD_CLAY" => Ok(Material::LegacyHardClay { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COAL_BLOCK" => Ok(Material::LegacyCoalBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PACKED_ICE" => Ok(Material::LegacyPackedIce { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DOUBLE_PLANT" => Ok(Material::LegacyDoublePlant { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STANDING_BANNER" => Ok(Material::LegacyStandingBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WALL_BANNER" => Ok(Material::LegacyWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DAYLIGHT_DETECTOR_INVERTED" => Ok(Material::LegacyDaylightDetectorInverted { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RED_SANDSTONE" => Ok(Material::LegacyRedSandstone { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RED_SANDSTONE_STAIRS" => Ok(Material::LegacyRedSandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DOUBLE_STONE_SLAB2" => Ok(Material::LegacyDoubleStoneSlab2 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STONE_SLAB2" => Ok(Material::LegacyStoneSlab2 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SPRUCE_FENCE_GATE" => Ok(Material::LegacySpruceFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BIRCH_FENCE_GATE" => Ok(Material::LegacyBirchFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_JUNGLE_FENCE_GATE" => Ok(Material::LegacyJungleFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DARK_OAK_FENCE_GATE" => Ok(Material::LegacyDarkOakFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ACACIA_FENCE_GATE" => Ok(Material::LegacyAcaciaFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SPRUCE_FENCE" => Ok(Material::LegacySpruceFence { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BIRCH_FENCE" => Ok(Material::LegacyBirchFence { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_JUNGLE_FENCE" => Ok(Material::LegacyJungleFence { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DARK_OAK_FENCE" => Ok(Material::LegacyDarkOakFence { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ACACIA_FENCE" => Ok(Material::LegacyAcaciaFence { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SPRUCE_DOOR" => Ok(Material::LegacySpruceDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BIRCH_DOOR" => Ok(Material::LegacyBirchDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_JUNGLE_DOOR" => Ok(Material::LegacyJungleDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ACACIA_DOOR" => Ok(Material::LegacyAcaciaDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DARK_OAK_DOOR" => Ok(Material::LegacyDarkOakDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_END_ROD" => Ok(Material::LegacyEndRod { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CHORUS_PLANT" => Ok(Material::LegacyChorusPlant { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CHORUS_FLOWER" => Ok(Material::LegacyChorusFlower { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PURPUR_BLOCK" => Ok(Material::LegacyPurpurBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PURPUR_PILLAR" => Ok(Material::LegacyPurpurPillar { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PURPUR_STAIRS" => Ok(Material::LegacyPurpurStairs { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PURPUR_DOUBLE_SLAB" => Ok(Material::LegacyPurpurDoubleSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PURPUR_SLAB" => Ok(Material::LegacyPurpurSlab { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_END_BRICKS" => Ok(Material::LegacyEndBricks { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BEETROOT_BLOCK" => Ok(Material::LegacyBeetrootBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GRASS_PATH" => Ok(Material::LegacyGrassPath { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_END_GATEWAY" => Ok(Material::LegacyEndGateway { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COMMAND_REPEATING" => Ok(Material::LegacyCommandRepeating { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COMMAND_CHAIN" => Ok(Material::LegacyCommandChain { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FROSTED_ICE" => Ok(Material::LegacyFrostedIce { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MAGMA" => Ok(Material::LegacyMagma { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_NETHER_WART_BLOCK" => Ok(Material::LegacyNetherWartBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RED_NETHER_BRICK" => Ok(Material::LegacyRedNetherBrick { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BONE_BLOCK" => Ok(Material::LegacyBoneBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STRUCTURE_VOID" => Ok(Material::LegacyStructureVoid { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_OBSERVER" => Ok(Material::LegacyObserver { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WHITE_SHULKER_BOX" => Ok(Material::LegacyWhiteShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ORANGE_SHULKER_BOX" => Ok(Material::LegacyOrangeShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MAGENTA_SHULKER_BOX" => Ok(Material::LegacyMagentaShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LIGHT_BLUE_SHULKER_BOX" => Ok(Material::LegacyLightBlueShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_YELLOW_SHULKER_BOX" => Ok(Material::LegacyYellowShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LIME_SHULKER_BOX" => Ok(Material::LegacyLimeShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PINK_SHULKER_BOX" => Ok(Material::LegacyPinkShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GRAY_SHULKER_BOX" => Ok(Material::LegacyGrayShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SILVER_SHULKER_BOX" => Ok(Material::LegacySilverShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CYAN_SHULKER_BOX" => Ok(Material::LegacyCyanShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PURPLE_SHULKER_BOX" => Ok(Material::LegacyPurpleShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BLUE_SHULKER_BOX" => Ok(Material::LegacyBlueShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BROWN_SHULKER_BOX" => Ok(Material::LegacyBrownShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GREEN_SHULKER_BOX" => Ok(Material::LegacyGreenShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RED_SHULKER_BOX" => Ok(Material::LegacyRedShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BLACK_SHULKER_BOX" => Ok(Material::LegacyBlackShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WHITE_GLAZED_TERRACOTTA" => Ok(Material::LegacyWhiteGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ORANGE_GLAZED_TERRACOTTA" => Ok(Material::LegacyOrangeGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MAGENTA_GLAZED_TERRACOTTA" => Ok(Material::LegacyMagentaGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA" => Ok(Material::LegacyLightBlueGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_YELLOW_GLAZED_TERRACOTTA" => Ok(Material::LegacyYellowGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LIME_GLAZED_TERRACOTTA" => Ok(Material::LegacyLimeGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PINK_GLAZED_TERRACOTTA" => Ok(Material::LegacyPinkGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GRAY_GLAZED_TERRACOTTA" => Ok(Material::LegacyGrayGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SILVER_GLAZED_TERRACOTTA" => Ok(Material::LegacySilverGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CYAN_GLAZED_TERRACOTTA" => Ok(Material::LegacyCyanGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PURPLE_GLAZED_TERRACOTTA" => Ok(Material::LegacyPurpleGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BLUE_GLAZED_TERRACOTTA" => Ok(Material::LegacyBlueGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BROWN_GLAZED_TERRACOTTA" => Ok(Material::LegacyBrownGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GREEN_GLAZED_TERRACOTTA" => Ok(Material::LegacyGreenGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RED_GLAZED_TERRACOTTA" => Ok(Material::LegacyRedGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BLACK_GLAZED_TERRACOTTA" => Ok(Material::LegacyBlackGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CONCRETE" => Ok(Material::LegacyConcrete { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CONCRETE_POWDER" => Ok(Material::LegacyConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STRUCTURE_BLOCK" => Ok(Material::LegacyStructureBlock { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_SPADE" => Ok(Material::LegacyIronSpade { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_PICKAXE" => Ok(Material::LegacyIronPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_AXE" => Ok(Material::LegacyIronAxe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FLINT_AND_STEEL" => Ok(Material::LegacyFlintAndSteel { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_APPLE" => Ok(Material::LegacyApple { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BOW" => Ok(Material::LegacyBow { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ARROW" => Ok(Material::LegacyArrow { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COAL" => Ok(Material::LegacyCoal { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND" => Ok(Material::LegacyDiamond { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_INGOT" => Ok(Material::LegacyIronIngot { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_INGOT" => Ok(Material::LegacyGoldIngot { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_SWORD" => Ok(Material::LegacyIronSword { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD_SWORD" => Ok(Material::LegacyWoodSword { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD_SPADE" => Ok(Material::LegacyWoodSpade { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD_PICKAXE" => Ok(Material::LegacyWoodPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD_AXE" => Ok(Material::LegacyWoodAxe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STONE_SWORD" => Ok(Material::LegacyStoneSword { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STONE_SPADE" => Ok(Material::LegacyStoneSpade { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STONE_PICKAXE" => Ok(Material::LegacyStonePickaxe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STONE_AXE" => Ok(Material::LegacyStoneAxe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_SWORD" => Ok(Material::LegacyDiamondSword { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_SPADE" => Ok(Material::LegacyDiamondSpade { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_PICKAXE" => Ok(Material::LegacyDiamondPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_AXE" => Ok(Material::LegacyDiamondAxe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STICK" => Ok(Material::LegacyStick { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BOWL" => Ok(Material::LegacyBowl { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MUSHROOM_SOUP" => Ok(Material::LegacyMushroomSoup { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_SWORD" => Ok(Material::LegacyGoldSword { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_SPADE" => Ok(Material::LegacyGoldSpade { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_PICKAXE" => Ok(Material::LegacyGoldPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_AXE" => Ok(Material::LegacyGoldAxe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STRING" => Ok(Material::LegacyString { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FEATHER" => Ok(Material::LegacyFeather { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SULPHUR" => Ok(Material::LegacySulphur { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD_HOE" => Ok(Material::LegacyWoodHoe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STONE_HOE" => Ok(Material::LegacyStoneHoe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_HOE" => Ok(Material::LegacyIronHoe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_HOE" => Ok(Material::LegacyDiamondHoe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_HOE" => Ok(Material::LegacyGoldHoe { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SEEDS" => Ok(Material::LegacySeeds { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WHEAT" => Ok(Material::LegacyWheat { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BREAD" => Ok(Material::LegacyBread { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LEATHER_HELMET" => Ok(Material::LegacyLeatherHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LEATHER_CHESTPLATE" => Ok(Material::LegacyLeatherChestplate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LEATHER_LEGGINGS" => Ok(Material::LegacyLeatherLeggings { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LEATHER_BOOTS" => Ok(Material::LegacyLeatherBoots { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CHAINMAIL_HELMET" => Ok(Material::LegacyChainmailHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CHAINMAIL_CHESTPLATE" => Ok(Material::LegacyChainmailChestplate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CHAINMAIL_LEGGINGS" => Ok(Material::LegacyChainmailLeggings { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CHAINMAIL_BOOTS" => Ok(Material::LegacyChainmailBoots { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_HELMET" => Ok(Material::LegacyIronHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_CHESTPLATE" => Ok(Material::LegacyIronChestplate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_LEGGINGS" => Ok(Material::LegacyIronLeggings { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_BOOTS" => Ok(Material::LegacyIronBoots { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_HELMET" => Ok(Material::LegacyDiamondHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_CHESTPLATE" => Ok(Material::LegacyDiamondChestplate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_LEGGINGS" => Ok(Material::LegacyDiamondLeggings { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_BOOTS" => Ok(Material::LegacyDiamondBoots { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_HELMET" => Ok(Material::LegacyGoldHelmet { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_CHESTPLATE" => Ok(Material::LegacyGoldChestplate { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_LEGGINGS" => Ok(Material::LegacyGoldLeggings { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_BOOTS" => Ok(Material::LegacyGoldBoots { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FLINT" => Ok(Material::LegacyFlint { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PORK" => Ok(Material::LegacyPork { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GRILLED_PORK" => Ok(Material::LegacyGrilledPork { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PAINTING" => Ok(Material::LegacyPainting { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLDEN_APPLE" => Ok(Material::LegacyGoldenApple { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SIGN" => Ok(Material::LegacySign { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WOOD_DOOR" => Ok(Material::LegacyWoodDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BUCKET" => Ok(Material::LegacyBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WATER_BUCKET" => Ok(Material::LegacyWaterBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LAVA_BUCKET" => Ok(Material::LegacyLavaBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MINECART" => Ok(Material::LegacyMinecart { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SADDLE" => Ok(Material::LegacySaddle { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_DOOR" => Ok(Material::LegacyIronDoor { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_REDSTONE" => Ok(Material::LegacyRedstone { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SNOW_BALL" => Ok(Material::LegacySnowBall { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BOAT" => Ok(Material::LegacyBoat { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LEATHER" => Ok(Material::LegacyLeather { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MILK_BUCKET" => Ok(Material::LegacyMilkBucket { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CLAY_BRICK" => Ok(Material::LegacyClayBrick { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CLAY_BALL" => Ok(Material::LegacyClayBall { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SUGAR_CANE" => Ok(Material::LegacySugarCane { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PAPER" => Ok(Material::LegacyPaper { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BOOK" => Ok(Material::LegacyBook { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SLIME_BALL" => Ok(Material::LegacySlimeBall { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_STORAGE_MINECART" => Ok(Material::LegacyStorageMinecart { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_POWERED_MINECART" => Ok(Material::LegacyPoweredMinecart { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_EGG" => Ok(Material::LegacyEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COMPASS" => Ok(Material::LegacyCompass { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FISHING_ROD" => Ok(Material::LegacyFishingRod { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WATCH" => Ok(Material::LegacyWatch { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GLOWSTONE_DUST" => Ok(Material::LegacyGlowstoneDust { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RAW_FISH" => Ok(Material::LegacyRawFish { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COOKED_FISH" => Ok(Material::LegacyCookedFish { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_INK_SACK" => Ok(Material::LegacyInkSack { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BONE" => Ok(Material::LegacyBone { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SUGAR" => Ok(Material::LegacySugar { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CAKE" => Ok(Material::LegacyCake { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BED" => Ok(Material::LegacyBed { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIODE" => Ok(Material::LegacyDiode { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COOKIE" => Ok(Material::LegacyCookie { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MAP" => Ok(Material::LegacyMap { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SHEARS" => Ok(Material::LegacyShears { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MELON" => Ok(Material::LegacyMelon { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PUMPKIN_SEEDS" => Ok(Material::LegacyPumpkinSeeds { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MELON_SEEDS" => Ok(Material::LegacyMelonSeeds { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RAW_BEEF" => Ok(Material::LegacyRawBeef { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COOKED_BEEF" => Ok(Material::LegacyCookedBeef { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RAW_CHICKEN" => Ok(Material::LegacyRawChicken { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COOKED_CHICKEN" => Ok(Material::LegacyCookedChicken { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ROTTEN_FLESH" => Ok(Material::LegacyRottenFlesh { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ENDER_PEARL" => Ok(Material::LegacyEnderPearl { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BLAZE_ROD" => Ok(Material::LegacyBlazeRod { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GHAST_TEAR" => Ok(Material::LegacyGhastTear { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_NUGGET" => Ok(Material::LegacyGoldNugget { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_NETHER_STALK" => Ok(Material::LegacyNetherStalk { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_POTION" => Ok(Material::LegacyPotion { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GLASS_BOTTLE" => Ok(Material::LegacyGlassBottle { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SPIDER_EYE" => Ok(Material::LegacySpiderEye { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FERMENTED_SPIDER_EYE" => Ok(Material::LegacyFermentedSpiderEye { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BLAZE_POWDER" => Ok(Material::LegacyBlazePowder { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MAGMA_CREAM" => Ok(Material::LegacyMagmaCream { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BREWING_STAND_ITEM" => Ok(Material::LegacyBrewingStandItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CAULDRON_ITEM" => Ok(Material::LegacyCauldronItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_EYE_OF_ENDER" => Ok(Material::LegacyEyeOfEnder { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SPECKLED_MELON" => Ok(Material::LegacySpeckledMelon { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MONSTER_EGG" => Ok(Material::LegacyMonsterEgg { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_EXP_BOTTLE" => Ok(Material::LegacyExpBottle { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FIREBALL" => Ok(Material::LegacyFireball { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BOOK_AND_QUILL" => Ok(Material::LegacyBookAndQuill { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_WRITTEN_BOOK" => Ok(Material::LegacyWrittenBook { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_EMERALD" => Ok(Material::LegacyEmerald { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ITEM_FRAME" => Ok(Material::LegacyItemFrame { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FLOWER_POT_ITEM" => Ok(Material::LegacyFlowerPotItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CARROT_ITEM" => Ok(Material::LegacyCarrotItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_POTATO_ITEM" => Ok(Material::LegacyPotatoItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BAKED_POTATO" => Ok(Material::LegacyBakedPotato { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_POISONOUS_POTATO" => Ok(Material::LegacyPoisonousPotato { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_EMPTY_MAP" => Ok(Material::LegacyEmptyMap { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLDEN_CARROT" => Ok(Material::LegacyGoldenCarrot { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SKULL_ITEM" => Ok(Material::LegacySkullItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CARROT_STICK" => Ok(Material::LegacyCarrotStick { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_NETHER_STAR" => Ok(Material::LegacyNetherStar { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PUMPKIN_PIE" => Ok(Material::LegacyPumpkinPie { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FIREWORK" => Ok(Material::LegacyFirework { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_FIREWORK_CHARGE" => Ok(Material::LegacyFireworkCharge { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ENCHANTED_BOOK" => Ok(Material::LegacyEnchantedBook { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_REDSTONE_COMPARATOR" => Ok(Material::LegacyRedstoneComparator { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_NETHER_BRICK_ITEM" => Ok(Material::LegacyNetherBrickItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_QUARTZ" => Ok(Material::LegacyQuartz { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_EXPLOSIVE_MINECART" => Ok(Material::LegacyExplosiveMinecart { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_HOPPER_MINECART" => Ok(Material::LegacyHopperMinecart { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PRISMARINE_SHARD" => Ok(Material::LegacyPrismarineShard { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_PRISMARINE_CRYSTALS" => Ok(Material::LegacyPrismarineCrystals { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RABBIT" => Ok(Material::LegacyRabbit { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COOKED_RABBIT" => Ok(Material::LegacyCookedRabbit { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RABBIT_STEW" => Ok(Material::LegacyRabbitStew { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RABBIT_FOOT" => Ok(Material::LegacyRabbitFoot { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RABBIT_HIDE" => Ok(Material::LegacyRabbitHide { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ARMOR_STAND" => Ok(Material::LegacyArmorStand { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_BARDING" => Ok(Material::LegacyIronBarding { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_BARDING" => Ok(Material::LegacyGoldBarding { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DIAMOND_BARDING" => Ok(Material::LegacyDiamondBarding { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LEASH" => Ok(Material::LegacyLeash { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_NAME_TAG" => Ok(Material::LegacyNameTag { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COMMAND_MINECART" => Ok(Material::LegacyCommandMinecart { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_MUTTON" => Ok(Material::LegacyMutton { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_COOKED_MUTTON" => Ok(Material::LegacyCookedMutton { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BANNER" => Ok(Material::LegacyBanner { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_END_CRYSTAL" => Ok(Material::LegacyEndCrystal { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SPRUCE_DOOR_ITEM" => Ok(Material::LegacySpruceDoorItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BIRCH_DOOR_ITEM" => Ok(Material::LegacyBirchDoorItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_JUNGLE_DOOR_ITEM" => Ok(Material::LegacyJungleDoorItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ACACIA_DOOR_ITEM" => Ok(Material::LegacyAcaciaDoorItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DARK_OAK_DOOR_ITEM" => Ok(Material::LegacyDarkOakDoorItem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CHORUS_FRUIT" => Ok(Material::LegacyChorusFruit { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_CHORUS_FRUIT_POPPED" => Ok(Material::LegacyChorusFruitPopped { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BEETROOT" => Ok(Material::LegacyBeetroot { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BEETROOT_SEEDS" => Ok(Material::LegacyBeetrootSeeds { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BEETROOT_SOUP" => Ok(Material::LegacyBeetrootSoup { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_DRAGONS_BREATH" => Ok(Material::LegacyDragonsBreath { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SPLASH_POTION" => Ok(Material::LegacySplashPotion { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SPECTRAL_ARROW" => Ok(Material::LegacySpectralArrow { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_TIPPED_ARROW" => Ok(Material::LegacyTippedArrow { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_LINGERING_POTION" => Ok(Material::LegacyLingeringPotion { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SHIELD" => Ok(Material::LegacyShield { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_ELYTRA" => Ok(Material::LegacyElytra { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BOAT_SPRUCE" => Ok(Material::LegacyBoatSpruce { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BOAT_BIRCH" => Ok(Material::LegacyBoatBirch { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BOAT_JUNGLE" => Ok(Material::LegacyBoatJungle { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BOAT_ACACIA" => Ok(Material::LegacyBoatAcacia { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_BOAT_DARK_OAK" => Ok(Material::LegacyBoatDarkOak { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_TOTEM" => Ok(Material::LegacyTotem { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_SHULKER_SHELL" => Ok(Material::LegacyShulkerShell { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_IRON_NUGGET" => Ok(Material::LegacyIronNugget { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_KNOWLEDGE_BOOK" => Ok(Material::LegacyKnowledgeBook { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GOLD_RECORD" => Ok(Material::LegacyGoldRecord { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_GREEN_RECORD" => Ok(Material::LegacyGreenRecord { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RECORD_3" => Ok(Material::LegacyRecord3 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RECORD_4" => Ok(Material::LegacyRecord4 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RECORD_5" => Ok(Material::LegacyRecord5 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RECORD_6" => Ok(Material::LegacyRecord6 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RECORD_7" => Ok(Material::LegacyRecord7 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RECORD_8" => Ok(Material::LegacyRecord8 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RECORD_9" => Ok(Material::LegacyRecord9 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RECORD_10" => Ok(Material::LegacyRecord10 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RECORD_11" => Ok(Material::LegacyRecord11 { inner: MaterialStruct::from_raw(env,obj)?}),
"LEGACY_RECORD_12" => Ok(Material::LegacyRecord12 { inner: MaterialStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct MaterialStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Material<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Air { inner } => inner.0.clone(),
Self::Stone { inner } => inner.0.clone(),
Self::Granite { inner } => inner.0.clone(),
Self::PolishedGranite { inner } => inner.0.clone(),
Self::Diorite { inner } => inner.0.clone(),
Self::PolishedDiorite { inner } => inner.0.clone(),
Self::Andesite { inner } => inner.0.clone(),
Self::PolishedAndesite { inner } => inner.0.clone(),
Self::Deepslate { inner } => inner.0.clone(),
Self::CobbledDeepslate { inner } => inner.0.clone(),
Self::PolishedDeepslate { inner } => inner.0.clone(),
Self::Calcite { inner } => inner.0.clone(),
Self::Tuff { inner } => inner.0.clone(),
Self::TuffSlab { inner } => inner.0.clone(),
Self::TuffStairs { inner } => inner.0.clone(),
Self::TuffWall { inner } => inner.0.clone(),
Self::ChiseledTuff { inner } => inner.0.clone(),
Self::PolishedTuff { inner } => inner.0.clone(),
Self::PolishedTuffSlab { inner } => inner.0.clone(),
Self::PolishedTuffStairs { inner } => inner.0.clone(),
Self::PolishedTuffWall { inner } => inner.0.clone(),
Self::TuffBricks { inner } => inner.0.clone(),
Self::TuffBrickSlab { inner } => inner.0.clone(),
Self::TuffBrickStairs { inner } => inner.0.clone(),
Self::TuffBrickWall { inner } => inner.0.clone(),
Self::ChiseledTuffBricks { inner } => inner.0.clone(),
Self::DripstoneBlock { inner } => inner.0.clone(),
Self::GrassBlock { inner } => inner.0.clone(),
Self::Dirt { inner } => inner.0.clone(),
Self::CoarseDirt { inner } => inner.0.clone(),
Self::Podzol { inner } => inner.0.clone(),
Self::RootedDirt { inner } => inner.0.clone(),
Self::Mud { inner } => inner.0.clone(),
Self::CrimsonNylium { inner } => inner.0.clone(),
Self::WarpedNylium { inner } => inner.0.clone(),
Self::Cobblestone { inner } => inner.0.clone(),
Self::OakPlanks { inner } => inner.0.clone(),
Self::SprucePlanks { inner } => inner.0.clone(),
Self::BirchPlanks { inner } => inner.0.clone(),
Self::JunglePlanks { inner } => inner.0.clone(),
Self::AcaciaPlanks { inner } => inner.0.clone(),
Self::CherryPlanks { inner } => inner.0.clone(),
Self::DarkOakPlanks { inner } => inner.0.clone(),
Self::MangrovePlanks { inner } => inner.0.clone(),
Self::BambooPlanks { inner } => inner.0.clone(),
Self::CrimsonPlanks { inner } => inner.0.clone(),
Self::WarpedPlanks { inner } => inner.0.clone(),
Self::BambooMosaic { inner } => inner.0.clone(),
Self::OakSapling { inner } => inner.0.clone(),
Self::SpruceSapling { inner } => inner.0.clone(),
Self::BirchSapling { inner } => inner.0.clone(),
Self::JungleSapling { inner } => inner.0.clone(),
Self::AcaciaSapling { inner } => inner.0.clone(),
Self::CherrySapling { inner } => inner.0.clone(),
Self::DarkOakSapling { inner } => inner.0.clone(),
Self::MangrovePropagule { inner } => inner.0.clone(),
Self::Bedrock { inner } => inner.0.clone(),
Self::Sand { inner } => inner.0.clone(),
Self::SuspiciousSand { inner } => inner.0.clone(),
Self::SuspiciousGravel { inner } => inner.0.clone(),
Self::RedSand { inner } => inner.0.clone(),
Self::Gravel { inner } => inner.0.clone(),
Self::CoalOre { inner } => inner.0.clone(),
Self::DeepslateCoalOre { inner } => inner.0.clone(),
Self::IronOre { inner } => inner.0.clone(),
Self::DeepslateIronOre { inner } => inner.0.clone(),
Self::CopperOre { inner } => inner.0.clone(),
Self::DeepslateCopperOre { inner } => inner.0.clone(),
Self::GoldOre { inner } => inner.0.clone(),
Self::DeepslateGoldOre { inner } => inner.0.clone(),
Self::RedstoneOre { inner } => inner.0.clone(),
Self::DeepslateRedstoneOre { inner } => inner.0.clone(),
Self::EmeraldOre { inner } => inner.0.clone(),
Self::DeepslateEmeraldOre { inner } => inner.0.clone(),
Self::LapisOre { inner } => inner.0.clone(),
Self::DeepslateLapisOre { inner } => inner.0.clone(),
Self::DiamondOre { inner } => inner.0.clone(),
Self::DeepslateDiamondOre { inner } => inner.0.clone(),
Self::NetherGoldOre { inner } => inner.0.clone(),
Self::NetherQuartzOre { inner } => inner.0.clone(),
Self::AncientDebris { inner } => inner.0.clone(),
Self::CoalBlock { inner } => inner.0.clone(),
Self::RawIronBlock { inner } => inner.0.clone(),
Self::RawCopperBlock { inner } => inner.0.clone(),
Self::RawGoldBlock { inner } => inner.0.clone(),
Self::AmethystBlock { inner } => inner.0.clone(),
Self::BuddingAmethyst { inner } => inner.0.clone(),
Self::IronBlock { inner } => inner.0.clone(),
Self::CopperBlock { inner } => inner.0.clone(),
Self::GoldBlock { inner } => inner.0.clone(),
Self::DiamondBlock { inner } => inner.0.clone(),
Self::NetheriteBlock { inner } => inner.0.clone(),
Self::ExposedCopper { inner } => inner.0.clone(),
Self::WeatheredCopper { inner } => inner.0.clone(),
Self::OxidizedCopper { inner } => inner.0.clone(),
Self::ChiseledCopper { inner } => inner.0.clone(),
Self::ExposedChiseledCopper { inner } => inner.0.clone(),
Self::WeatheredChiseledCopper { inner } => inner.0.clone(),
Self::OxidizedChiseledCopper { inner } => inner.0.clone(),
Self::CutCopper { inner } => inner.0.clone(),
Self::ExposedCutCopper { inner } => inner.0.clone(),
Self::WeatheredCutCopper { inner } => inner.0.clone(),
Self::OxidizedCutCopper { inner } => inner.0.clone(),
Self::CutCopperStairs { inner } => inner.0.clone(),
Self::ExposedCutCopperStairs { inner } => inner.0.clone(),
Self::WeatheredCutCopperStairs { inner } => inner.0.clone(),
Self::OxidizedCutCopperStairs { inner } => inner.0.clone(),
Self::CutCopperSlab { inner } => inner.0.clone(),
Self::ExposedCutCopperSlab { inner } => inner.0.clone(),
Self::WeatheredCutCopperSlab { inner } => inner.0.clone(),
Self::OxidizedCutCopperSlab { inner } => inner.0.clone(),
Self::WaxedCopperBlock { inner } => inner.0.clone(),
Self::WaxedExposedCopper { inner } => inner.0.clone(),
Self::WaxedWeatheredCopper { inner } => inner.0.clone(),
Self::WaxedOxidizedCopper { inner } => inner.0.clone(),
Self::WaxedChiseledCopper { inner } => inner.0.clone(),
Self::WaxedExposedChiseledCopper { inner } => inner.0.clone(),
Self::WaxedWeatheredChiseledCopper { inner } => inner.0.clone(),
Self::WaxedOxidizedChiseledCopper { inner } => inner.0.clone(),
Self::WaxedCutCopper { inner } => inner.0.clone(),
Self::WaxedExposedCutCopper { inner } => inner.0.clone(),
Self::WaxedWeatheredCutCopper { inner } => inner.0.clone(),
Self::WaxedOxidizedCutCopper { inner } => inner.0.clone(),
Self::WaxedCutCopperStairs { inner } => inner.0.clone(),
Self::WaxedExposedCutCopperStairs { inner } => inner.0.clone(),
Self::WaxedWeatheredCutCopperStairs { inner } => inner.0.clone(),
Self::WaxedOxidizedCutCopperStairs { inner } => inner.0.clone(),
Self::WaxedCutCopperSlab { inner } => inner.0.clone(),
Self::WaxedExposedCutCopperSlab { inner } => inner.0.clone(),
Self::WaxedWeatheredCutCopperSlab { inner } => inner.0.clone(),
Self::WaxedOxidizedCutCopperSlab { inner } => inner.0.clone(),
Self::OakLog { inner } => inner.0.clone(),
Self::SpruceLog { inner } => inner.0.clone(),
Self::BirchLog { inner } => inner.0.clone(),
Self::JungleLog { inner } => inner.0.clone(),
Self::AcaciaLog { inner } => inner.0.clone(),
Self::CherryLog { inner } => inner.0.clone(),
Self::DarkOakLog { inner } => inner.0.clone(),
Self::MangroveLog { inner } => inner.0.clone(),
Self::MangroveRoots { inner } => inner.0.clone(),
Self::MuddyMangroveRoots { inner } => inner.0.clone(),
Self::CrimsonStem { inner } => inner.0.clone(),
Self::WarpedStem { inner } => inner.0.clone(),
Self::BambooBlock { inner } => inner.0.clone(),
Self::StrippedOakLog { inner } => inner.0.clone(),
Self::StrippedSpruceLog { inner } => inner.0.clone(),
Self::StrippedBirchLog { inner } => inner.0.clone(),
Self::StrippedJungleLog { inner } => inner.0.clone(),
Self::StrippedAcaciaLog { inner } => inner.0.clone(),
Self::StrippedCherryLog { inner } => inner.0.clone(),
Self::StrippedDarkOakLog { inner } => inner.0.clone(),
Self::StrippedMangroveLog { inner } => inner.0.clone(),
Self::StrippedCrimsonStem { inner } => inner.0.clone(),
Self::StrippedWarpedStem { inner } => inner.0.clone(),
Self::StrippedOakWood { inner } => inner.0.clone(),
Self::StrippedSpruceWood { inner } => inner.0.clone(),
Self::StrippedBirchWood { inner } => inner.0.clone(),
Self::StrippedJungleWood { inner } => inner.0.clone(),
Self::StrippedAcaciaWood { inner } => inner.0.clone(),
Self::StrippedCherryWood { inner } => inner.0.clone(),
Self::StrippedDarkOakWood { inner } => inner.0.clone(),
Self::StrippedMangroveWood { inner } => inner.0.clone(),
Self::StrippedCrimsonHyphae { inner } => inner.0.clone(),
Self::StrippedWarpedHyphae { inner } => inner.0.clone(),
Self::StrippedBambooBlock { inner } => inner.0.clone(),
Self::OakWood { inner } => inner.0.clone(),
Self::SpruceWood { inner } => inner.0.clone(),
Self::BirchWood { inner } => inner.0.clone(),
Self::JungleWood { inner } => inner.0.clone(),
Self::AcaciaWood { inner } => inner.0.clone(),
Self::CherryWood { inner } => inner.0.clone(),
Self::DarkOakWood { inner } => inner.0.clone(),
Self::MangroveWood { inner } => inner.0.clone(),
Self::CrimsonHyphae { inner } => inner.0.clone(),
Self::WarpedHyphae { inner } => inner.0.clone(),
Self::OakLeaves { inner } => inner.0.clone(),
Self::SpruceLeaves { inner } => inner.0.clone(),
Self::BirchLeaves { inner } => inner.0.clone(),
Self::JungleLeaves { inner } => inner.0.clone(),
Self::AcaciaLeaves { inner } => inner.0.clone(),
Self::CherryLeaves { inner } => inner.0.clone(),
Self::DarkOakLeaves { inner } => inner.0.clone(),
Self::MangroveLeaves { inner } => inner.0.clone(),
Self::AzaleaLeaves { inner } => inner.0.clone(),
Self::FloweringAzaleaLeaves { inner } => inner.0.clone(),
Self::Sponge { inner } => inner.0.clone(),
Self::WetSponge { inner } => inner.0.clone(),
Self::Glass { inner } => inner.0.clone(),
Self::TintedGlass { inner } => inner.0.clone(),
Self::LapisBlock { inner } => inner.0.clone(),
Self::Sandstone { inner } => inner.0.clone(),
Self::ChiseledSandstone { inner } => inner.0.clone(),
Self::CutSandstone { inner } => inner.0.clone(),
Self::Cobweb { inner } => inner.0.clone(),
Self::ShortGrass { inner } => inner.0.clone(),
Self::Fern { inner } => inner.0.clone(),
Self::Azalea { inner } => inner.0.clone(),
Self::FloweringAzalea { inner } => inner.0.clone(),
Self::DeadBush { inner } => inner.0.clone(),
Self::Seagrass { inner } => inner.0.clone(),
Self::SeaPickle { inner } => inner.0.clone(),
Self::WhiteWool { inner } => inner.0.clone(),
Self::OrangeWool { inner } => inner.0.clone(),
Self::MagentaWool { inner } => inner.0.clone(),
Self::LightBlueWool { inner } => inner.0.clone(),
Self::YellowWool { inner } => inner.0.clone(),
Self::LimeWool { inner } => inner.0.clone(),
Self::PinkWool { inner } => inner.0.clone(),
Self::GrayWool { inner } => inner.0.clone(),
Self::LightGrayWool { inner } => inner.0.clone(),
Self::CyanWool { inner } => inner.0.clone(),
Self::PurpleWool { inner } => inner.0.clone(),
Self::BlueWool { inner } => inner.0.clone(),
Self::BrownWool { inner } => inner.0.clone(),
Self::GreenWool { inner } => inner.0.clone(),
Self::RedWool { inner } => inner.0.clone(),
Self::BlackWool { inner } => inner.0.clone(),
Self::Dandelion { inner } => inner.0.clone(),
Self::Poppy { inner } => inner.0.clone(),
Self::BlueOrchid { inner } => inner.0.clone(),
Self::Allium { inner } => inner.0.clone(),
Self::AzureBluet { inner } => inner.0.clone(),
Self::RedTulip { inner } => inner.0.clone(),
Self::OrangeTulip { inner } => inner.0.clone(),
Self::WhiteTulip { inner } => inner.0.clone(),
Self::PinkTulip { inner } => inner.0.clone(),
Self::OxeyeDaisy { inner } => inner.0.clone(),
Self::Cornflower { inner } => inner.0.clone(),
Self::LilyOfTheValley { inner } => inner.0.clone(),
Self::WitherRose { inner } => inner.0.clone(),
Self::Torchflower { inner } => inner.0.clone(),
Self::PitcherPlant { inner } => inner.0.clone(),
Self::SporeBlossom { inner } => inner.0.clone(),
Self::BrownMushroom { inner } => inner.0.clone(),
Self::RedMushroom { inner } => inner.0.clone(),
Self::CrimsonFungus { inner } => inner.0.clone(),
Self::WarpedFungus { inner } => inner.0.clone(),
Self::CrimsonRoots { inner } => inner.0.clone(),
Self::WarpedRoots { inner } => inner.0.clone(),
Self::NetherSprouts { inner } => inner.0.clone(),
Self::WeepingVines { inner } => inner.0.clone(),
Self::TwistingVines { inner } => inner.0.clone(),
Self::SugarCane { inner } => inner.0.clone(),
Self::Kelp { inner } => inner.0.clone(),
Self::MossCarpet { inner } => inner.0.clone(),
Self::PinkPetals { inner } => inner.0.clone(),
Self::MossBlock { inner } => inner.0.clone(),
Self::HangingRoots { inner } => inner.0.clone(),
Self::BigDripleaf { inner } => inner.0.clone(),
Self::SmallDripleaf { inner } => inner.0.clone(),
Self::Bamboo { inner } => inner.0.clone(),
Self::OakSlab { inner } => inner.0.clone(),
Self::SpruceSlab { inner } => inner.0.clone(),
Self::BirchSlab { inner } => inner.0.clone(),
Self::JungleSlab { inner } => inner.0.clone(),
Self::AcaciaSlab { inner } => inner.0.clone(),
Self::CherrySlab { inner } => inner.0.clone(),
Self::DarkOakSlab { inner } => inner.0.clone(),
Self::MangroveSlab { inner } => inner.0.clone(),
Self::BambooSlab { inner } => inner.0.clone(),
Self::BambooMosaicSlab { inner } => inner.0.clone(),
Self::CrimsonSlab { inner } => inner.0.clone(),
Self::WarpedSlab { inner } => inner.0.clone(),
Self::StoneSlab { inner } => inner.0.clone(),
Self::SmoothStoneSlab { inner } => inner.0.clone(),
Self::SandstoneSlab { inner } => inner.0.clone(),
Self::CutSandstoneSlab { inner } => inner.0.clone(),
Self::PetrifiedOakSlab { inner } => inner.0.clone(),
Self::CobblestoneSlab { inner } => inner.0.clone(),
Self::BrickSlab { inner } => inner.0.clone(),
Self::StoneBrickSlab { inner } => inner.0.clone(),
Self::MudBrickSlab { inner } => inner.0.clone(),
Self::NetherBrickSlab { inner } => inner.0.clone(),
Self::QuartzSlab { inner } => inner.0.clone(),
Self::RedSandstoneSlab { inner } => inner.0.clone(),
Self::CutRedSandstoneSlab { inner } => inner.0.clone(),
Self::PurpurSlab { inner } => inner.0.clone(),
Self::PrismarineSlab { inner } => inner.0.clone(),
Self::PrismarineBrickSlab { inner } => inner.0.clone(),
Self::DarkPrismarineSlab { inner } => inner.0.clone(),
Self::SmoothQuartz { inner } => inner.0.clone(),
Self::SmoothRedSandstone { inner } => inner.0.clone(),
Self::SmoothSandstone { inner } => inner.0.clone(),
Self::SmoothStone { inner } => inner.0.clone(),
Self::Bricks { inner } => inner.0.clone(),
Self::Bookshelf { inner } => inner.0.clone(),
Self::ChiseledBookshelf { inner } => inner.0.clone(),
Self::DecoratedPot { inner } => inner.0.clone(),
Self::MossyCobblestone { inner } => inner.0.clone(),
Self::Obsidian { inner } => inner.0.clone(),
Self::Torch { inner } => inner.0.clone(),
Self::EndRod { inner } => inner.0.clone(),
Self::ChorusPlant { inner } => inner.0.clone(),
Self::ChorusFlower { inner } => inner.0.clone(),
Self::PurpurBlock { inner } => inner.0.clone(),
Self::PurpurPillar { inner } => inner.0.clone(),
Self::PurpurStairs { inner } => inner.0.clone(),
Self::Spawner { inner } => inner.0.clone(),
Self::Chest { inner } => inner.0.clone(),
Self::CraftingTable { inner } => inner.0.clone(),
Self::Farmland { inner } => inner.0.clone(),
Self::Furnace { inner } => inner.0.clone(),
Self::Ladder { inner } => inner.0.clone(),
Self::CobblestoneStairs { inner } => inner.0.clone(),
Self::Snow { inner } => inner.0.clone(),
Self::Ice { inner } => inner.0.clone(),
Self::SnowBlock { inner } => inner.0.clone(),
Self::Cactus { inner } => inner.0.clone(),
Self::Clay { inner } => inner.0.clone(),
Self::Jukebox { inner } => inner.0.clone(),
Self::OakFence { inner } => inner.0.clone(),
Self::SpruceFence { inner } => inner.0.clone(),
Self::BirchFence { inner } => inner.0.clone(),
Self::JungleFence { inner } => inner.0.clone(),
Self::AcaciaFence { inner } => inner.0.clone(),
Self::CherryFence { inner } => inner.0.clone(),
Self::DarkOakFence { inner } => inner.0.clone(),
Self::MangroveFence { inner } => inner.0.clone(),
Self::BambooFence { inner } => inner.0.clone(),
Self::CrimsonFence { inner } => inner.0.clone(),
Self::WarpedFence { inner } => inner.0.clone(),
Self::Pumpkin { inner } => inner.0.clone(),
Self::CarvedPumpkin { inner } => inner.0.clone(),
Self::JackOLantern { inner } => inner.0.clone(),
Self::Netherrack { inner } => inner.0.clone(),
Self::SoulSand { inner } => inner.0.clone(),
Self::SoulSoil { inner } => inner.0.clone(),
Self::Basalt { inner } => inner.0.clone(),
Self::PolishedBasalt { inner } => inner.0.clone(),
Self::SmoothBasalt { inner } => inner.0.clone(),
Self::SoulTorch { inner } => inner.0.clone(),
Self::Glowstone { inner } => inner.0.clone(),
Self::InfestedStone { inner } => inner.0.clone(),
Self::InfestedCobblestone { inner } => inner.0.clone(),
Self::InfestedStoneBricks { inner } => inner.0.clone(),
Self::InfestedMossyStoneBricks { inner } => inner.0.clone(),
Self::InfestedCrackedStoneBricks { inner } => inner.0.clone(),
Self::InfestedChiseledStoneBricks { inner } => inner.0.clone(),
Self::InfestedDeepslate { inner } => inner.0.clone(),
Self::StoneBricks { inner } => inner.0.clone(),
Self::MossyStoneBricks { inner } => inner.0.clone(),
Self::CrackedStoneBricks { inner } => inner.0.clone(),
Self::ChiseledStoneBricks { inner } => inner.0.clone(),
Self::PackedMud { inner } => inner.0.clone(),
Self::MudBricks { inner } => inner.0.clone(),
Self::DeepslateBricks { inner } => inner.0.clone(),
Self::CrackedDeepslateBricks { inner } => inner.0.clone(),
Self::DeepslateTiles { inner } => inner.0.clone(),
Self::CrackedDeepslateTiles { inner } => inner.0.clone(),
Self::ChiseledDeepslate { inner } => inner.0.clone(),
Self::ReinforcedDeepslate { inner } => inner.0.clone(),
Self::BrownMushroomBlock { inner } => inner.0.clone(),
Self::RedMushroomBlock { inner } => inner.0.clone(),
Self::MushroomStem { inner } => inner.0.clone(),
Self::IronBars { inner } => inner.0.clone(),
Self::Chain { inner } => inner.0.clone(),
Self::GlassPane { inner } => inner.0.clone(),
Self::Melon { inner } => inner.0.clone(),
Self::Vine { inner } => inner.0.clone(),
Self::GlowLichen { inner } => inner.0.clone(),
Self::BrickStairs { inner } => inner.0.clone(),
Self::StoneBrickStairs { inner } => inner.0.clone(),
Self::MudBrickStairs { inner } => inner.0.clone(),
Self::Mycelium { inner } => inner.0.clone(),
Self::LilyPad { inner } => inner.0.clone(),
Self::NetherBricks { inner } => inner.0.clone(),
Self::CrackedNetherBricks { inner } => inner.0.clone(),
Self::ChiseledNetherBricks { inner } => inner.0.clone(),
Self::NetherBrickFence { inner } => inner.0.clone(),
Self::NetherBrickStairs { inner } => inner.0.clone(),
Self::Sculk { inner } => inner.0.clone(),
Self::SculkVein { inner } => inner.0.clone(),
Self::SculkCatalyst { inner } => inner.0.clone(),
Self::SculkShrieker { inner } => inner.0.clone(),
Self::EnchantingTable { inner } => inner.0.clone(),
Self::EndPortalFrame { inner } => inner.0.clone(),
Self::EndStone { inner } => inner.0.clone(),
Self::EndStoneBricks { inner } => inner.0.clone(),
Self::DragonEgg { inner } => inner.0.clone(),
Self::SandstoneStairs { inner } => inner.0.clone(),
Self::EnderChest { inner } => inner.0.clone(),
Self::EmeraldBlock { inner } => inner.0.clone(),
Self::OakStairs { inner } => inner.0.clone(),
Self::SpruceStairs { inner } => inner.0.clone(),
Self::BirchStairs { inner } => inner.0.clone(),
Self::JungleStairs { inner } => inner.0.clone(),
Self::AcaciaStairs { inner } => inner.0.clone(),
Self::CherryStairs { inner } => inner.0.clone(),
Self::DarkOakStairs { inner } => inner.0.clone(),
Self::MangroveStairs { inner } => inner.0.clone(),
Self::BambooStairs { inner } => inner.0.clone(),
Self::BambooMosaicStairs { inner } => inner.0.clone(),
Self::CrimsonStairs { inner } => inner.0.clone(),
Self::WarpedStairs { inner } => inner.0.clone(),
Self::CommandBlock { inner } => inner.0.clone(),
Self::Beacon { inner } => inner.0.clone(),
Self::CobblestoneWall { inner } => inner.0.clone(),
Self::MossyCobblestoneWall { inner } => inner.0.clone(),
Self::BrickWall { inner } => inner.0.clone(),
Self::PrismarineWall { inner } => inner.0.clone(),
Self::RedSandstoneWall { inner } => inner.0.clone(),
Self::MossyStoneBrickWall { inner } => inner.0.clone(),
Self::GraniteWall { inner } => inner.0.clone(),
Self::StoneBrickWall { inner } => inner.0.clone(),
Self::MudBrickWall { inner } => inner.0.clone(),
Self::NetherBrickWall { inner } => inner.0.clone(),
Self::AndesiteWall { inner } => inner.0.clone(),
Self::RedNetherBrickWall { inner } => inner.0.clone(),
Self::SandstoneWall { inner } => inner.0.clone(),
Self::EndStoneBrickWall { inner } => inner.0.clone(),
Self::DioriteWall { inner } => inner.0.clone(),
Self::BlackstoneWall { inner } => inner.0.clone(),
Self::PolishedBlackstoneWall { inner } => inner.0.clone(),
Self::PolishedBlackstoneBrickWall { inner } => inner.0.clone(),
Self::CobbledDeepslateWall { inner } => inner.0.clone(),
Self::PolishedDeepslateWall { inner } => inner.0.clone(),
Self::DeepslateBrickWall { inner } => inner.0.clone(),
Self::DeepslateTileWall { inner } => inner.0.clone(),
Self::Anvil { inner } => inner.0.clone(),
Self::ChippedAnvil { inner } => inner.0.clone(),
Self::DamagedAnvil { inner } => inner.0.clone(),
Self::ChiseledQuartzBlock { inner } => inner.0.clone(),
Self::QuartzBlock { inner } => inner.0.clone(),
Self::QuartzBricks { inner } => inner.0.clone(),
Self::QuartzPillar { inner } => inner.0.clone(),
Self::QuartzStairs { inner } => inner.0.clone(),
Self::WhiteTerracotta { inner } => inner.0.clone(),
Self::OrangeTerracotta { inner } => inner.0.clone(),
Self::MagentaTerracotta { inner } => inner.0.clone(),
Self::LightBlueTerracotta { inner } => inner.0.clone(),
Self::YellowTerracotta { inner } => inner.0.clone(),
Self::LimeTerracotta { inner } => inner.0.clone(),
Self::PinkTerracotta { inner } => inner.0.clone(),
Self::GrayTerracotta { inner } => inner.0.clone(),
Self::LightGrayTerracotta { inner } => inner.0.clone(),
Self::CyanTerracotta { inner } => inner.0.clone(),
Self::PurpleTerracotta { inner } => inner.0.clone(),
Self::BlueTerracotta { inner } => inner.0.clone(),
Self::BrownTerracotta { inner } => inner.0.clone(),
Self::GreenTerracotta { inner } => inner.0.clone(),
Self::RedTerracotta { inner } => inner.0.clone(),
Self::BlackTerracotta { inner } => inner.0.clone(),
Self::Barrier { inner } => inner.0.clone(),
Self::Light { inner } => inner.0.clone(),
Self::HayBlock { inner } => inner.0.clone(),
Self::WhiteCarpet { inner } => inner.0.clone(),
Self::OrangeCarpet { inner } => inner.0.clone(),
Self::MagentaCarpet { inner } => inner.0.clone(),
Self::LightBlueCarpet { inner } => inner.0.clone(),
Self::YellowCarpet { inner } => inner.0.clone(),
Self::LimeCarpet { inner } => inner.0.clone(),
Self::PinkCarpet { inner } => inner.0.clone(),
Self::GrayCarpet { inner } => inner.0.clone(),
Self::LightGrayCarpet { inner } => inner.0.clone(),
Self::CyanCarpet { inner } => inner.0.clone(),
Self::PurpleCarpet { inner } => inner.0.clone(),
Self::BlueCarpet { inner } => inner.0.clone(),
Self::BrownCarpet { inner } => inner.0.clone(),
Self::GreenCarpet { inner } => inner.0.clone(),
Self::RedCarpet { inner } => inner.0.clone(),
Self::BlackCarpet { inner } => inner.0.clone(),
Self::Terracotta { inner } => inner.0.clone(),
Self::PackedIce { inner } => inner.0.clone(),
Self::DirtPath { inner } => inner.0.clone(),
Self::Sunflower { inner } => inner.0.clone(),
Self::Lilac { inner } => inner.0.clone(),
Self::RoseBush { inner } => inner.0.clone(),
Self::Peony { inner } => inner.0.clone(),
Self::TallGrass { inner } => inner.0.clone(),
Self::LargeFern { inner } => inner.0.clone(),
Self::WhiteStainedGlass { inner } => inner.0.clone(),
Self::OrangeStainedGlass { inner } => inner.0.clone(),
Self::MagentaStainedGlass { inner } => inner.0.clone(),
Self::LightBlueStainedGlass { inner } => inner.0.clone(),
Self::YellowStainedGlass { inner } => inner.0.clone(),
Self::LimeStainedGlass { inner } => inner.0.clone(),
Self::PinkStainedGlass { inner } => inner.0.clone(),
Self::GrayStainedGlass { inner } => inner.0.clone(),
Self::LightGrayStainedGlass { inner } => inner.0.clone(),
Self::CyanStainedGlass { inner } => inner.0.clone(),
Self::PurpleStainedGlass { inner } => inner.0.clone(),
Self::BlueStainedGlass { inner } => inner.0.clone(),
Self::BrownStainedGlass { inner } => inner.0.clone(),
Self::GreenStainedGlass { inner } => inner.0.clone(),
Self::RedStainedGlass { inner } => inner.0.clone(),
Self::BlackStainedGlass { inner } => inner.0.clone(),
Self::WhiteStainedGlassPane { inner } => inner.0.clone(),
Self::OrangeStainedGlassPane { inner } => inner.0.clone(),
Self::MagentaStainedGlassPane { inner } => inner.0.clone(),
Self::LightBlueStainedGlassPane { inner } => inner.0.clone(),
Self::YellowStainedGlassPane { inner } => inner.0.clone(),
Self::LimeStainedGlassPane { inner } => inner.0.clone(),
Self::PinkStainedGlassPane { inner } => inner.0.clone(),
Self::GrayStainedGlassPane { inner } => inner.0.clone(),
Self::LightGrayStainedGlassPane { inner } => inner.0.clone(),
Self::CyanStainedGlassPane { inner } => inner.0.clone(),
Self::PurpleStainedGlassPane { inner } => inner.0.clone(),
Self::BlueStainedGlassPane { inner } => inner.0.clone(),
Self::BrownStainedGlassPane { inner } => inner.0.clone(),
Self::GreenStainedGlassPane { inner } => inner.0.clone(),
Self::RedStainedGlassPane { inner } => inner.0.clone(),
Self::BlackStainedGlassPane { inner } => inner.0.clone(),
Self::Prismarine { inner } => inner.0.clone(),
Self::PrismarineBricks { inner } => inner.0.clone(),
Self::DarkPrismarine { inner } => inner.0.clone(),
Self::PrismarineStairs { inner } => inner.0.clone(),
Self::PrismarineBrickStairs { inner } => inner.0.clone(),
Self::DarkPrismarineStairs { inner } => inner.0.clone(),
Self::SeaLantern { inner } => inner.0.clone(),
Self::RedSandstone { inner } => inner.0.clone(),
Self::ChiseledRedSandstone { inner } => inner.0.clone(),
Self::CutRedSandstone { inner } => inner.0.clone(),
Self::RedSandstoneStairs { inner } => inner.0.clone(),
Self::RepeatingCommandBlock { inner } => inner.0.clone(),
Self::ChainCommandBlock { inner } => inner.0.clone(),
Self::MagmaBlock { inner } => inner.0.clone(),
Self::NetherWartBlock { inner } => inner.0.clone(),
Self::WarpedWartBlock { inner } => inner.0.clone(),
Self::RedNetherBricks { inner } => inner.0.clone(),
Self::BoneBlock { inner } => inner.0.clone(),
Self::StructureVoid { inner } => inner.0.clone(),
Self::ShulkerBox { inner } => inner.0.clone(),
Self::WhiteShulkerBox { inner } => inner.0.clone(),
Self::OrangeShulkerBox { inner } => inner.0.clone(),
Self::MagentaShulkerBox { inner } => inner.0.clone(),
Self::LightBlueShulkerBox { inner } => inner.0.clone(),
Self::YellowShulkerBox { inner } => inner.0.clone(),
Self::LimeShulkerBox { inner } => inner.0.clone(),
Self::PinkShulkerBox { inner } => inner.0.clone(),
Self::GrayShulkerBox { inner } => inner.0.clone(),
Self::LightGrayShulkerBox { inner } => inner.0.clone(),
Self::CyanShulkerBox { inner } => inner.0.clone(),
Self::PurpleShulkerBox { inner } => inner.0.clone(),
Self::BlueShulkerBox { inner } => inner.0.clone(),
Self::BrownShulkerBox { inner } => inner.0.clone(),
Self::GreenShulkerBox { inner } => inner.0.clone(),
Self::RedShulkerBox { inner } => inner.0.clone(),
Self::BlackShulkerBox { inner } => inner.0.clone(),
Self::WhiteGlazedTerracotta { inner } => inner.0.clone(),
Self::OrangeGlazedTerracotta { inner } => inner.0.clone(),
Self::MagentaGlazedTerracotta { inner } => inner.0.clone(),
Self::LightBlueGlazedTerracotta { inner } => inner.0.clone(),
Self::YellowGlazedTerracotta { inner } => inner.0.clone(),
Self::LimeGlazedTerracotta { inner } => inner.0.clone(),
Self::PinkGlazedTerracotta { inner } => inner.0.clone(),
Self::GrayGlazedTerracotta { inner } => inner.0.clone(),
Self::LightGrayGlazedTerracotta { inner } => inner.0.clone(),
Self::CyanGlazedTerracotta { inner } => inner.0.clone(),
Self::PurpleGlazedTerracotta { inner } => inner.0.clone(),
Self::BlueGlazedTerracotta { inner } => inner.0.clone(),
Self::BrownGlazedTerracotta { inner } => inner.0.clone(),
Self::GreenGlazedTerracotta { inner } => inner.0.clone(),
Self::RedGlazedTerracotta { inner } => inner.0.clone(),
Self::BlackGlazedTerracotta { inner } => inner.0.clone(),
Self::WhiteConcrete { inner } => inner.0.clone(),
Self::OrangeConcrete { inner } => inner.0.clone(),
Self::MagentaConcrete { inner } => inner.0.clone(),
Self::LightBlueConcrete { inner } => inner.0.clone(),
Self::YellowConcrete { inner } => inner.0.clone(),
Self::LimeConcrete { inner } => inner.0.clone(),
Self::PinkConcrete { inner } => inner.0.clone(),
Self::GrayConcrete { inner } => inner.0.clone(),
Self::LightGrayConcrete { inner } => inner.0.clone(),
Self::CyanConcrete { inner } => inner.0.clone(),
Self::PurpleConcrete { inner } => inner.0.clone(),
Self::BlueConcrete { inner } => inner.0.clone(),
Self::BrownConcrete { inner } => inner.0.clone(),
Self::GreenConcrete { inner } => inner.0.clone(),
Self::RedConcrete { inner } => inner.0.clone(),
Self::BlackConcrete { inner } => inner.0.clone(),
Self::WhiteConcretePowder { inner } => inner.0.clone(),
Self::OrangeConcretePowder { inner } => inner.0.clone(),
Self::MagentaConcretePowder { inner } => inner.0.clone(),
Self::LightBlueConcretePowder { inner } => inner.0.clone(),
Self::YellowConcretePowder { inner } => inner.0.clone(),
Self::LimeConcretePowder { inner } => inner.0.clone(),
Self::PinkConcretePowder { inner } => inner.0.clone(),
Self::GrayConcretePowder { inner } => inner.0.clone(),
Self::LightGrayConcretePowder { inner } => inner.0.clone(),
Self::CyanConcretePowder { inner } => inner.0.clone(),
Self::PurpleConcretePowder { inner } => inner.0.clone(),
Self::BlueConcretePowder { inner } => inner.0.clone(),
Self::BrownConcretePowder { inner } => inner.0.clone(),
Self::GreenConcretePowder { inner } => inner.0.clone(),
Self::RedConcretePowder { inner } => inner.0.clone(),
Self::BlackConcretePowder { inner } => inner.0.clone(),
Self::TurtleEgg { inner } => inner.0.clone(),
Self::SnifferEgg { inner } => inner.0.clone(),
Self::DeadTubeCoralBlock { inner } => inner.0.clone(),
Self::DeadBrainCoralBlock { inner } => inner.0.clone(),
Self::DeadBubbleCoralBlock { inner } => inner.0.clone(),
Self::DeadFireCoralBlock { inner } => inner.0.clone(),
Self::DeadHornCoralBlock { inner } => inner.0.clone(),
Self::TubeCoralBlock { inner } => inner.0.clone(),
Self::BrainCoralBlock { inner } => inner.0.clone(),
Self::BubbleCoralBlock { inner } => inner.0.clone(),
Self::FireCoralBlock { inner } => inner.0.clone(),
Self::HornCoralBlock { inner } => inner.0.clone(),
Self::TubeCoral { inner } => inner.0.clone(),
Self::BrainCoral { inner } => inner.0.clone(),
Self::BubbleCoral { inner } => inner.0.clone(),
Self::FireCoral { inner } => inner.0.clone(),
Self::HornCoral { inner } => inner.0.clone(),
Self::DeadBrainCoral { inner } => inner.0.clone(),
Self::DeadBubbleCoral { inner } => inner.0.clone(),
Self::DeadFireCoral { inner } => inner.0.clone(),
Self::DeadHornCoral { inner } => inner.0.clone(),
Self::DeadTubeCoral { inner } => inner.0.clone(),
Self::TubeCoralFan { inner } => inner.0.clone(),
Self::BrainCoralFan { inner } => inner.0.clone(),
Self::BubbleCoralFan { inner } => inner.0.clone(),
Self::FireCoralFan { inner } => inner.0.clone(),
Self::HornCoralFan { inner } => inner.0.clone(),
Self::DeadTubeCoralFan { inner } => inner.0.clone(),
Self::DeadBrainCoralFan { inner } => inner.0.clone(),
Self::DeadBubbleCoralFan { inner } => inner.0.clone(),
Self::DeadFireCoralFan { inner } => inner.0.clone(),
Self::DeadHornCoralFan { inner } => inner.0.clone(),
Self::BlueIce { inner } => inner.0.clone(),
Self::Conduit { inner } => inner.0.clone(),
Self::PolishedGraniteStairs { inner } => inner.0.clone(),
Self::SmoothRedSandstoneStairs { inner } => inner.0.clone(),
Self::MossyStoneBrickStairs { inner } => inner.0.clone(),
Self::PolishedDioriteStairs { inner } => inner.0.clone(),
Self::MossyCobblestoneStairs { inner } => inner.0.clone(),
Self::EndStoneBrickStairs { inner } => inner.0.clone(),
Self::StoneStairs { inner } => inner.0.clone(),
Self::SmoothSandstoneStairs { inner } => inner.0.clone(),
Self::SmoothQuartzStairs { inner } => inner.0.clone(),
Self::GraniteStairs { inner } => inner.0.clone(),
Self::AndesiteStairs { inner } => inner.0.clone(),
Self::RedNetherBrickStairs { inner } => inner.0.clone(),
Self::PolishedAndesiteStairs { inner } => inner.0.clone(),
Self::DioriteStairs { inner } => inner.0.clone(),
Self::CobbledDeepslateStairs { inner } => inner.0.clone(),
Self::PolishedDeepslateStairs { inner } => inner.0.clone(),
Self::DeepslateBrickStairs { inner } => inner.0.clone(),
Self::DeepslateTileStairs { inner } => inner.0.clone(),
Self::PolishedGraniteSlab { inner } => inner.0.clone(),
Self::SmoothRedSandstoneSlab { inner } => inner.0.clone(),
Self::MossyStoneBrickSlab { inner } => inner.0.clone(),
Self::PolishedDioriteSlab { inner } => inner.0.clone(),
Self::MossyCobblestoneSlab { inner } => inner.0.clone(),
Self::EndStoneBrickSlab { inner } => inner.0.clone(),
Self::SmoothSandstoneSlab { inner } => inner.0.clone(),
Self::SmoothQuartzSlab { inner } => inner.0.clone(),
Self::GraniteSlab { inner } => inner.0.clone(),
Self::AndesiteSlab { inner } => inner.0.clone(),
Self::RedNetherBrickSlab { inner } => inner.0.clone(),
Self::PolishedAndesiteSlab { inner } => inner.0.clone(),
Self::DioriteSlab { inner } => inner.0.clone(),
Self::CobbledDeepslateSlab { inner } => inner.0.clone(),
Self::PolishedDeepslateSlab { inner } => inner.0.clone(),
Self::DeepslateBrickSlab { inner } => inner.0.clone(),
Self::DeepslateTileSlab { inner } => inner.0.clone(),
Self::Scaffolding { inner } => inner.0.clone(),
Self::Redstone { inner } => inner.0.clone(),
Self::RedstoneTorch { inner } => inner.0.clone(),
Self::RedstoneBlock { inner } => inner.0.clone(),
Self::Repeater { inner } => inner.0.clone(),
Self::Comparator { inner } => inner.0.clone(),
Self::Piston { inner } => inner.0.clone(),
Self::StickyPiston { inner } => inner.0.clone(),
Self::SlimeBlock { inner } => inner.0.clone(),
Self::HoneyBlock { inner } => inner.0.clone(),
Self::Observer { inner } => inner.0.clone(),
Self::Hopper { inner } => inner.0.clone(),
Self::Dispenser { inner } => inner.0.clone(),
Self::Dropper { inner } => inner.0.clone(),
Self::Lectern { inner } => inner.0.clone(),
Self::Target { inner } => inner.0.clone(),
Self::Lever { inner } => inner.0.clone(),
Self::LightningRod { inner } => inner.0.clone(),
Self::DaylightDetector { inner } => inner.0.clone(),
Self::SculkSensor { inner } => inner.0.clone(),
Self::CalibratedSculkSensor { inner } => inner.0.clone(),
Self::TripwireHook { inner } => inner.0.clone(),
Self::TrappedChest { inner } => inner.0.clone(),
Self::Tnt { inner } => inner.0.clone(),
Self::RedstoneLamp { inner } => inner.0.clone(),
Self::NoteBlock { inner } => inner.0.clone(),
Self::StoneButton { inner } => inner.0.clone(),
Self::PolishedBlackstoneButton { inner } => inner.0.clone(),
Self::OakButton { inner } => inner.0.clone(),
Self::SpruceButton { inner } => inner.0.clone(),
Self::BirchButton { inner } => inner.0.clone(),
Self::JungleButton { inner } => inner.0.clone(),
Self::AcaciaButton { inner } => inner.0.clone(),
Self::CherryButton { inner } => inner.0.clone(),
Self::DarkOakButton { inner } => inner.0.clone(),
Self::MangroveButton { inner } => inner.0.clone(),
Self::BambooButton { inner } => inner.0.clone(),
Self::CrimsonButton { inner } => inner.0.clone(),
Self::WarpedButton { inner } => inner.0.clone(),
Self::StonePressurePlate { inner } => inner.0.clone(),
Self::PolishedBlackstonePressurePlate { inner } => inner.0.clone(),
Self::LightWeightedPressurePlate { inner } => inner.0.clone(),
Self::HeavyWeightedPressurePlate { inner } => inner.0.clone(),
Self::OakPressurePlate { inner } => inner.0.clone(),
Self::SprucePressurePlate { inner } => inner.0.clone(),
Self::BirchPressurePlate { inner } => inner.0.clone(),
Self::JunglePressurePlate { inner } => inner.0.clone(),
Self::AcaciaPressurePlate { inner } => inner.0.clone(),
Self::CherryPressurePlate { inner } => inner.0.clone(),
Self::DarkOakPressurePlate { inner } => inner.0.clone(),
Self::MangrovePressurePlate { inner } => inner.0.clone(),
Self::BambooPressurePlate { inner } => inner.0.clone(),
Self::CrimsonPressurePlate { inner } => inner.0.clone(),
Self::WarpedPressurePlate { inner } => inner.0.clone(),
Self::IronDoor { inner } => inner.0.clone(),
Self::OakDoor { inner } => inner.0.clone(),
Self::SpruceDoor { inner } => inner.0.clone(),
Self::BirchDoor { inner } => inner.0.clone(),
Self::JungleDoor { inner } => inner.0.clone(),
Self::AcaciaDoor { inner } => inner.0.clone(),
Self::CherryDoor { inner } => inner.0.clone(),
Self::DarkOakDoor { inner } => inner.0.clone(),
Self::MangroveDoor { inner } => inner.0.clone(),
Self::BambooDoor { inner } => inner.0.clone(),
Self::CrimsonDoor { inner } => inner.0.clone(),
Self::WarpedDoor { inner } => inner.0.clone(),
Self::CopperDoor { inner } => inner.0.clone(),
Self::ExposedCopperDoor { inner } => inner.0.clone(),
Self::WeatheredCopperDoor { inner } => inner.0.clone(),
Self::OxidizedCopperDoor { inner } => inner.0.clone(),
Self::WaxedCopperDoor { inner } => inner.0.clone(),
Self::WaxedExposedCopperDoor { inner } => inner.0.clone(),
Self::WaxedWeatheredCopperDoor { inner } => inner.0.clone(),
Self::WaxedOxidizedCopperDoor { inner } => inner.0.clone(),
Self::IronTrapdoor { inner } => inner.0.clone(),
Self::OakTrapdoor { inner } => inner.0.clone(),
Self::SpruceTrapdoor { inner } => inner.0.clone(),
Self::BirchTrapdoor { inner } => inner.0.clone(),
Self::JungleTrapdoor { inner } => inner.0.clone(),
Self::AcaciaTrapdoor { inner } => inner.0.clone(),
Self::CherryTrapdoor { inner } => inner.0.clone(),
Self::DarkOakTrapdoor { inner } => inner.0.clone(),
Self::MangroveTrapdoor { inner } => inner.0.clone(),
Self::BambooTrapdoor { inner } => inner.0.clone(),
Self::CrimsonTrapdoor { inner } => inner.0.clone(),
Self::WarpedTrapdoor { inner } => inner.0.clone(),
Self::CopperTrapdoor { inner } => inner.0.clone(),
Self::ExposedCopperTrapdoor { inner } => inner.0.clone(),
Self::WeatheredCopperTrapdoor { inner } => inner.0.clone(),
Self::OxidizedCopperTrapdoor { inner } => inner.0.clone(),
Self::WaxedCopperTrapdoor { inner } => inner.0.clone(),
Self::WaxedExposedCopperTrapdoor { inner } => inner.0.clone(),
Self::WaxedWeatheredCopperTrapdoor { inner } => inner.0.clone(),
Self::WaxedOxidizedCopperTrapdoor { inner } => inner.0.clone(),
Self::OakFenceGate { inner } => inner.0.clone(),
Self::SpruceFenceGate { inner } => inner.0.clone(),
Self::BirchFenceGate { inner } => inner.0.clone(),
Self::JungleFenceGate { inner } => inner.0.clone(),
Self::AcaciaFenceGate { inner } => inner.0.clone(),
Self::CherryFenceGate { inner } => inner.0.clone(),
Self::DarkOakFenceGate { inner } => inner.0.clone(),
Self::MangroveFenceGate { inner } => inner.0.clone(),
Self::BambooFenceGate { inner } => inner.0.clone(),
Self::CrimsonFenceGate { inner } => inner.0.clone(),
Self::WarpedFenceGate { inner } => inner.0.clone(),
Self::PoweredRail { inner } => inner.0.clone(),
Self::DetectorRail { inner } => inner.0.clone(),
Self::Rail { inner } => inner.0.clone(),
Self::ActivatorRail { inner } => inner.0.clone(),
Self::Saddle { inner } => inner.0.clone(),
Self::Minecart { inner } => inner.0.clone(),
Self::ChestMinecart { inner } => inner.0.clone(),
Self::FurnaceMinecart { inner } => inner.0.clone(),
Self::TntMinecart { inner } => inner.0.clone(),
Self::HopperMinecart { inner } => inner.0.clone(),
Self::CarrotOnAStick { inner } => inner.0.clone(),
Self::WarpedFungusOnAStick { inner } => inner.0.clone(),
Self::Elytra { inner } => inner.0.clone(),
Self::OakBoat { inner } => inner.0.clone(),
Self::OakChestBoat { inner } => inner.0.clone(),
Self::SpruceBoat { inner } => inner.0.clone(),
Self::SpruceChestBoat { inner } => inner.0.clone(),
Self::BirchBoat { inner } => inner.0.clone(),
Self::BirchChestBoat { inner } => inner.0.clone(),
Self::JungleBoat { inner } => inner.0.clone(),
Self::JungleChestBoat { inner } => inner.0.clone(),
Self::AcaciaBoat { inner } => inner.0.clone(),
Self::AcaciaChestBoat { inner } => inner.0.clone(),
Self::CherryBoat { inner } => inner.0.clone(),
Self::CherryChestBoat { inner } => inner.0.clone(),
Self::DarkOakBoat { inner } => inner.0.clone(),
Self::DarkOakChestBoat { inner } => inner.0.clone(),
Self::MangroveBoat { inner } => inner.0.clone(),
Self::MangroveChestBoat { inner } => inner.0.clone(),
Self::BambooRaft { inner } => inner.0.clone(),
Self::BambooChestRaft { inner } => inner.0.clone(),
Self::StructureBlock { inner } => inner.0.clone(),
Self::Jigsaw { inner } => inner.0.clone(),
Self::TurtleHelmet { inner } => inner.0.clone(),
Self::Scute { inner } => inner.0.clone(),
Self::FlintAndSteel { inner } => inner.0.clone(),
Self::Apple { inner } => inner.0.clone(),
Self::Bow { inner } => inner.0.clone(),
Self::Arrow { inner } => inner.0.clone(),
Self::Coal { inner } => inner.0.clone(),
Self::Charcoal { inner } => inner.0.clone(),
Self::Diamond { inner } => inner.0.clone(),
Self::Emerald { inner } => inner.0.clone(),
Self::LapisLazuli { inner } => inner.0.clone(),
Self::Quartz { inner } => inner.0.clone(),
Self::AmethystShard { inner } => inner.0.clone(),
Self::RawIron { inner } => inner.0.clone(),
Self::IronIngot { inner } => inner.0.clone(),
Self::RawCopper { inner } => inner.0.clone(),
Self::CopperIngot { inner } => inner.0.clone(),
Self::RawGold { inner } => inner.0.clone(),
Self::GoldIngot { inner } => inner.0.clone(),
Self::NetheriteIngot { inner } => inner.0.clone(),
Self::NetheriteScrap { inner } => inner.0.clone(),
Self::WoodenSword { inner } => inner.0.clone(),
Self::WoodenShovel { inner } => inner.0.clone(),
Self::WoodenPickaxe { inner } => inner.0.clone(),
Self::WoodenAxe { inner } => inner.0.clone(),
Self::WoodenHoe { inner } => inner.0.clone(),
Self::StoneSword { inner } => inner.0.clone(),
Self::StoneShovel { inner } => inner.0.clone(),
Self::StonePickaxe { inner } => inner.0.clone(),
Self::StoneAxe { inner } => inner.0.clone(),
Self::StoneHoe { inner } => inner.0.clone(),
Self::GoldenSword { inner } => inner.0.clone(),
Self::GoldenShovel { inner } => inner.0.clone(),
Self::GoldenPickaxe { inner } => inner.0.clone(),
Self::GoldenAxe { inner } => inner.0.clone(),
Self::GoldenHoe { inner } => inner.0.clone(),
Self::IronSword { inner } => inner.0.clone(),
Self::IronShovel { inner } => inner.0.clone(),
Self::IronPickaxe { inner } => inner.0.clone(),
Self::IronAxe { inner } => inner.0.clone(),
Self::IronHoe { inner } => inner.0.clone(),
Self::DiamondSword { inner } => inner.0.clone(),
Self::DiamondShovel { inner } => inner.0.clone(),
Self::DiamondPickaxe { inner } => inner.0.clone(),
Self::DiamondAxe { inner } => inner.0.clone(),
Self::DiamondHoe { inner } => inner.0.clone(),
Self::NetheriteSword { inner } => inner.0.clone(),
Self::NetheriteShovel { inner } => inner.0.clone(),
Self::NetheritePickaxe { inner } => inner.0.clone(),
Self::NetheriteAxe { inner } => inner.0.clone(),
Self::NetheriteHoe { inner } => inner.0.clone(),
Self::Stick { inner } => inner.0.clone(),
Self::Bowl { inner } => inner.0.clone(),
Self::MushroomStew { inner } => inner.0.clone(),
Self::String { inner } => inner.0.clone(),
Self::Feather { inner } => inner.0.clone(),
Self::Gunpowder { inner } => inner.0.clone(),
Self::WheatSeeds { inner } => inner.0.clone(),
Self::Wheat { inner } => inner.0.clone(),
Self::Bread { inner } => inner.0.clone(),
Self::LeatherHelmet { inner } => inner.0.clone(),
Self::LeatherChestplate { inner } => inner.0.clone(),
Self::LeatherLeggings { inner } => inner.0.clone(),
Self::LeatherBoots { inner } => inner.0.clone(),
Self::ChainmailHelmet { inner } => inner.0.clone(),
Self::ChainmailChestplate { inner } => inner.0.clone(),
Self::ChainmailLeggings { inner } => inner.0.clone(),
Self::ChainmailBoots { inner } => inner.0.clone(),
Self::IronHelmet { inner } => inner.0.clone(),
Self::IronChestplate { inner } => inner.0.clone(),
Self::IronLeggings { inner } => inner.0.clone(),
Self::IronBoots { inner } => inner.0.clone(),
Self::DiamondHelmet { inner } => inner.0.clone(),
Self::DiamondChestplate { inner } => inner.0.clone(),
Self::DiamondLeggings { inner } => inner.0.clone(),
Self::DiamondBoots { inner } => inner.0.clone(),
Self::GoldenHelmet { inner } => inner.0.clone(),
Self::GoldenChestplate { inner } => inner.0.clone(),
Self::GoldenLeggings { inner } => inner.0.clone(),
Self::GoldenBoots { inner } => inner.0.clone(),
Self::NetheriteHelmet { inner } => inner.0.clone(),
Self::NetheriteChestplate { inner } => inner.0.clone(),
Self::NetheriteLeggings { inner } => inner.0.clone(),
Self::NetheriteBoots { inner } => inner.0.clone(),
Self::Flint { inner } => inner.0.clone(),
Self::Porkchop { inner } => inner.0.clone(),
Self::CookedPorkchop { inner } => inner.0.clone(),
Self::Painting { inner } => inner.0.clone(),
Self::GoldenApple { inner } => inner.0.clone(),
Self::EnchantedGoldenApple { inner } => inner.0.clone(),
Self::OakSign { inner } => inner.0.clone(),
Self::SpruceSign { inner } => inner.0.clone(),
Self::BirchSign { inner } => inner.0.clone(),
Self::JungleSign { inner } => inner.0.clone(),
Self::AcaciaSign { inner } => inner.0.clone(),
Self::CherrySign { inner } => inner.0.clone(),
Self::DarkOakSign { inner } => inner.0.clone(),
Self::MangroveSign { inner } => inner.0.clone(),
Self::BambooSign { inner } => inner.0.clone(),
Self::CrimsonSign { inner } => inner.0.clone(),
Self::WarpedSign { inner } => inner.0.clone(),
Self::OakHangingSign { inner } => inner.0.clone(),
Self::SpruceHangingSign { inner } => inner.0.clone(),
Self::BirchHangingSign { inner } => inner.0.clone(),
Self::JungleHangingSign { inner } => inner.0.clone(),
Self::AcaciaHangingSign { inner } => inner.0.clone(),
Self::CherryHangingSign { inner } => inner.0.clone(),
Self::DarkOakHangingSign { inner } => inner.0.clone(),
Self::MangroveHangingSign { inner } => inner.0.clone(),
Self::BambooHangingSign { inner } => inner.0.clone(),
Self::CrimsonHangingSign { inner } => inner.0.clone(),
Self::WarpedHangingSign { inner } => inner.0.clone(),
Self::Bucket { inner } => inner.0.clone(),
Self::WaterBucket { inner } => inner.0.clone(),
Self::LavaBucket { inner } => inner.0.clone(),
Self::PowderSnowBucket { inner } => inner.0.clone(),
Self::Snowball { inner } => inner.0.clone(),
Self::Leather { inner } => inner.0.clone(),
Self::MilkBucket { inner } => inner.0.clone(),
Self::PufferfishBucket { inner } => inner.0.clone(),
Self::SalmonBucket { inner } => inner.0.clone(),
Self::CodBucket { inner } => inner.0.clone(),
Self::TropicalFishBucket { inner } => inner.0.clone(),
Self::AxolotlBucket { inner } => inner.0.clone(),
Self::TadpoleBucket { inner } => inner.0.clone(),
Self::Brick { inner } => inner.0.clone(),
Self::ClayBall { inner } => inner.0.clone(),
Self::DriedKelpBlock { inner } => inner.0.clone(),
Self::Paper { inner } => inner.0.clone(),
Self::Book { inner } => inner.0.clone(),
Self::SlimeBall { inner } => inner.0.clone(),
Self::Egg { inner } => inner.0.clone(),
Self::Compass { inner } => inner.0.clone(),
Self::RecoveryCompass { inner } => inner.0.clone(),
Self::Bundle { inner } => inner.0.clone(),
Self::FishingRod { inner } => inner.0.clone(),
Self::Clock { inner } => inner.0.clone(),
Self::Spyglass { inner } => inner.0.clone(),
Self::GlowstoneDust { inner } => inner.0.clone(),
Self::Cod { inner } => inner.0.clone(),
Self::Salmon { inner } => inner.0.clone(),
Self::TropicalFish { inner } => inner.0.clone(),
Self::Pufferfish { inner } => inner.0.clone(),
Self::CookedCod { inner } => inner.0.clone(),
Self::CookedSalmon { inner } => inner.0.clone(),
Self::InkSac { inner } => inner.0.clone(),
Self::GlowInkSac { inner } => inner.0.clone(),
Self::CocoaBeans { inner } => inner.0.clone(),
Self::WhiteDye { inner } => inner.0.clone(),
Self::OrangeDye { inner } => inner.0.clone(),
Self::MagentaDye { inner } => inner.0.clone(),
Self::LightBlueDye { inner } => inner.0.clone(),
Self::YellowDye { inner } => inner.0.clone(),
Self::LimeDye { inner } => inner.0.clone(),
Self::PinkDye { inner } => inner.0.clone(),
Self::GrayDye { inner } => inner.0.clone(),
Self::LightGrayDye { inner } => inner.0.clone(),
Self::CyanDye { inner } => inner.0.clone(),
Self::PurpleDye { inner } => inner.0.clone(),
Self::BlueDye { inner } => inner.0.clone(),
Self::BrownDye { inner } => inner.0.clone(),
Self::GreenDye { inner } => inner.0.clone(),
Self::RedDye { inner } => inner.0.clone(),
Self::BlackDye { inner } => inner.0.clone(),
Self::BoneMeal { inner } => inner.0.clone(),
Self::Bone { inner } => inner.0.clone(),
Self::Sugar { inner } => inner.0.clone(),
Self::Cake { inner } => inner.0.clone(),
Self::WhiteBed { inner } => inner.0.clone(),
Self::OrangeBed { inner } => inner.0.clone(),
Self::MagentaBed { inner } => inner.0.clone(),
Self::LightBlueBed { inner } => inner.0.clone(),
Self::YellowBed { inner } => inner.0.clone(),
Self::LimeBed { inner } => inner.0.clone(),
Self::PinkBed { inner } => inner.0.clone(),
Self::GrayBed { inner } => inner.0.clone(),
Self::LightGrayBed { inner } => inner.0.clone(),
Self::CyanBed { inner } => inner.0.clone(),
Self::PurpleBed { inner } => inner.0.clone(),
Self::BlueBed { inner } => inner.0.clone(),
Self::BrownBed { inner } => inner.0.clone(),
Self::GreenBed { inner } => inner.0.clone(),
Self::RedBed { inner } => inner.0.clone(),
Self::BlackBed { inner } => inner.0.clone(),
Self::Cookie { inner } => inner.0.clone(),
Self::Crafter { inner } => inner.0.clone(),
Self::FilledMap { inner } => inner.0.clone(),
Self::Shears { inner } => inner.0.clone(),
Self::MelonSlice { inner } => inner.0.clone(),
Self::DriedKelp { inner } => inner.0.clone(),
Self::PumpkinSeeds { inner } => inner.0.clone(),
Self::MelonSeeds { inner } => inner.0.clone(),
Self::Beef { inner } => inner.0.clone(),
Self::CookedBeef { inner } => inner.0.clone(),
Self::Chicken { inner } => inner.0.clone(),
Self::CookedChicken { inner } => inner.0.clone(),
Self::RottenFlesh { inner } => inner.0.clone(),
Self::EnderPearl { inner } => inner.0.clone(),
Self::BlazeRod { inner } => inner.0.clone(),
Self::GhastTear { inner } => inner.0.clone(),
Self::GoldNugget { inner } => inner.0.clone(),
Self::NetherWart { inner } => inner.0.clone(),
Self::Potion { inner } => inner.0.clone(),
Self::GlassBottle { inner } => inner.0.clone(),
Self::SpiderEye { inner } => inner.0.clone(),
Self::FermentedSpiderEye { inner } => inner.0.clone(),
Self::BlazePowder { inner } => inner.0.clone(),
Self::MagmaCream { inner } => inner.0.clone(),
Self::BrewingStand { inner } => inner.0.clone(),
Self::Cauldron { inner } => inner.0.clone(),
Self::EnderEye { inner } => inner.0.clone(),
Self::GlisteringMelonSlice { inner } => inner.0.clone(),
Self::AllaySpawnEgg { inner } => inner.0.clone(),
Self::AxolotlSpawnEgg { inner } => inner.0.clone(),
Self::BatSpawnEgg { inner } => inner.0.clone(),
Self::BeeSpawnEgg { inner } => inner.0.clone(),
Self::BlazeSpawnEgg { inner } => inner.0.clone(),
Self::BreezeSpawnEgg { inner } => inner.0.clone(),
Self::CatSpawnEgg { inner } => inner.0.clone(),
Self::CamelSpawnEgg { inner } => inner.0.clone(),
Self::CaveSpiderSpawnEgg { inner } => inner.0.clone(),
Self::ChickenSpawnEgg { inner } => inner.0.clone(),
Self::CodSpawnEgg { inner } => inner.0.clone(),
Self::CowSpawnEgg { inner } => inner.0.clone(),
Self::CreeperSpawnEgg { inner } => inner.0.clone(),
Self::DolphinSpawnEgg { inner } => inner.0.clone(),
Self::DonkeySpawnEgg { inner } => inner.0.clone(),
Self::DrownedSpawnEgg { inner } => inner.0.clone(),
Self::ElderGuardianSpawnEgg { inner } => inner.0.clone(),
Self::EnderDragonSpawnEgg { inner } => inner.0.clone(),
Self::EndermanSpawnEgg { inner } => inner.0.clone(),
Self::EndermiteSpawnEgg { inner } => inner.0.clone(),
Self::EvokerSpawnEgg { inner } => inner.0.clone(),
Self::FoxSpawnEgg { inner } => inner.0.clone(),
Self::FrogSpawnEgg { inner } => inner.0.clone(),
Self::GhastSpawnEgg { inner } => inner.0.clone(),
Self::GlowSquidSpawnEgg { inner } => inner.0.clone(),
Self::GoatSpawnEgg { inner } => inner.0.clone(),
Self::GuardianSpawnEgg { inner } => inner.0.clone(),
Self::HoglinSpawnEgg { inner } => inner.0.clone(),
Self::HorseSpawnEgg { inner } => inner.0.clone(),
Self::HuskSpawnEgg { inner } => inner.0.clone(),
Self::IronGolemSpawnEgg { inner } => inner.0.clone(),
Self::LlamaSpawnEgg { inner } => inner.0.clone(),
Self::MagmaCubeSpawnEgg { inner } => inner.0.clone(),
Self::MooshroomSpawnEgg { inner } => inner.0.clone(),
Self::MuleSpawnEgg { inner } => inner.0.clone(),
Self::OcelotSpawnEgg { inner } => inner.0.clone(),
Self::PandaSpawnEgg { inner } => inner.0.clone(),
Self::ParrotSpawnEgg { inner } => inner.0.clone(),
Self::PhantomSpawnEgg { inner } => inner.0.clone(),
Self::PigSpawnEgg { inner } => inner.0.clone(),
Self::PiglinSpawnEgg { inner } => inner.0.clone(),
Self::PiglinBruteSpawnEgg { inner } => inner.0.clone(),
Self::PillagerSpawnEgg { inner } => inner.0.clone(),
Self::PolarBearSpawnEgg { inner } => inner.0.clone(),
Self::PufferfishSpawnEgg { inner } => inner.0.clone(),
Self::RabbitSpawnEgg { inner } => inner.0.clone(),
Self::RavagerSpawnEgg { inner } => inner.0.clone(),
Self::SalmonSpawnEgg { inner } => inner.0.clone(),
Self::SheepSpawnEgg { inner } => inner.0.clone(),
Self::ShulkerSpawnEgg { inner } => inner.0.clone(),
Self::SilverfishSpawnEgg { inner } => inner.0.clone(),
Self::SkeletonSpawnEgg { inner } => inner.0.clone(),
Self::SkeletonHorseSpawnEgg { inner } => inner.0.clone(),
Self::SlimeSpawnEgg { inner } => inner.0.clone(),
Self::SnifferSpawnEgg { inner } => inner.0.clone(),
Self::SnowGolemSpawnEgg { inner } => inner.0.clone(),
Self::SpiderSpawnEgg { inner } => inner.0.clone(),
Self::SquidSpawnEgg { inner } => inner.0.clone(),
Self::StraySpawnEgg { inner } => inner.0.clone(),
Self::StriderSpawnEgg { inner } => inner.0.clone(),
Self::TadpoleSpawnEgg { inner } => inner.0.clone(),
Self::TraderLlamaSpawnEgg { inner } => inner.0.clone(),
Self::TropicalFishSpawnEgg { inner } => inner.0.clone(),
Self::TurtleSpawnEgg { inner } => inner.0.clone(),
Self::VexSpawnEgg { inner } => inner.0.clone(),
Self::VillagerSpawnEgg { inner } => inner.0.clone(),
Self::VindicatorSpawnEgg { inner } => inner.0.clone(),
Self::WanderingTraderSpawnEgg { inner } => inner.0.clone(),
Self::WardenSpawnEgg { inner } => inner.0.clone(),
Self::WitchSpawnEgg { inner } => inner.0.clone(),
Self::WitherSpawnEgg { inner } => inner.0.clone(),
Self::WitherSkeletonSpawnEgg { inner } => inner.0.clone(),
Self::WolfSpawnEgg { inner } => inner.0.clone(),
Self::ZoglinSpawnEgg { inner } => inner.0.clone(),
Self::ZombieSpawnEgg { inner } => inner.0.clone(),
Self::ZombieHorseSpawnEgg { inner } => inner.0.clone(),
Self::ZombieVillagerSpawnEgg { inner } => inner.0.clone(),
Self::ZombifiedPiglinSpawnEgg { inner } => inner.0.clone(),
Self::ExperienceBottle { inner } => inner.0.clone(),
Self::FireCharge { inner } => inner.0.clone(),
Self::WritableBook { inner } => inner.0.clone(),
Self::WrittenBook { inner } => inner.0.clone(),
Self::ItemFrame { inner } => inner.0.clone(),
Self::GlowItemFrame { inner } => inner.0.clone(),
Self::FlowerPot { inner } => inner.0.clone(),
Self::Carrot { inner } => inner.0.clone(),
Self::Potato { inner } => inner.0.clone(),
Self::BakedPotato { inner } => inner.0.clone(),
Self::PoisonousPotato { inner } => inner.0.clone(),
Self::Map { inner } => inner.0.clone(),
Self::GoldenCarrot { inner } => inner.0.clone(),
Self::SkeletonSkull { inner } => inner.0.clone(),
Self::WitherSkeletonSkull { inner } => inner.0.clone(),
Self::PlayerHead { inner } => inner.0.clone(),
Self::ZombieHead { inner } => inner.0.clone(),
Self::CreeperHead { inner } => inner.0.clone(),
Self::DragonHead { inner } => inner.0.clone(),
Self::PiglinHead { inner } => inner.0.clone(),
Self::NetherStar { inner } => inner.0.clone(),
Self::PumpkinPie { inner } => inner.0.clone(),
Self::FireworkRocket { inner } => inner.0.clone(),
Self::FireworkStar { inner } => inner.0.clone(),
Self::EnchantedBook { inner } => inner.0.clone(),
Self::NetherBrick { inner } => inner.0.clone(),
Self::PrismarineShard { inner } => inner.0.clone(),
Self::PrismarineCrystals { inner } => inner.0.clone(),
Self::Rabbit { inner } => inner.0.clone(),
Self::CookedRabbit { inner } => inner.0.clone(),
Self::RabbitStew { inner } => inner.0.clone(),
Self::RabbitFoot { inner } => inner.0.clone(),
Self::RabbitHide { inner } => inner.0.clone(),
Self::ArmorStand { inner } => inner.0.clone(),
Self::IronHorseArmor { inner } => inner.0.clone(),
Self::GoldenHorseArmor { inner } => inner.0.clone(),
Self::DiamondHorseArmor { inner } => inner.0.clone(),
Self::LeatherHorseArmor { inner } => inner.0.clone(),
Self::Lead { inner } => inner.0.clone(),
Self::NameTag { inner } => inner.0.clone(),
Self::CommandBlockMinecart { inner } => inner.0.clone(),
Self::Mutton { inner } => inner.0.clone(),
Self::CookedMutton { inner } => inner.0.clone(),
Self::WhiteBanner { inner } => inner.0.clone(),
Self::OrangeBanner { inner } => inner.0.clone(),
Self::MagentaBanner { inner } => inner.0.clone(),
Self::LightBlueBanner { inner } => inner.0.clone(),
Self::YellowBanner { inner } => inner.0.clone(),
Self::LimeBanner { inner } => inner.0.clone(),
Self::PinkBanner { inner } => inner.0.clone(),
Self::GrayBanner { inner } => inner.0.clone(),
Self::LightGrayBanner { inner } => inner.0.clone(),
Self::CyanBanner { inner } => inner.0.clone(),
Self::PurpleBanner { inner } => inner.0.clone(),
Self::BlueBanner { inner } => inner.0.clone(),
Self::BrownBanner { inner } => inner.0.clone(),
Self::GreenBanner { inner } => inner.0.clone(),
Self::RedBanner { inner } => inner.0.clone(),
Self::BlackBanner { inner } => inner.0.clone(),
Self::EndCrystal { inner } => inner.0.clone(),
Self::ChorusFruit { inner } => inner.0.clone(),
Self::PoppedChorusFruit { inner } => inner.0.clone(),
Self::TorchflowerSeeds { inner } => inner.0.clone(),
Self::PitcherPod { inner } => inner.0.clone(),
Self::Beetroot { inner } => inner.0.clone(),
Self::BeetrootSeeds { inner } => inner.0.clone(),
Self::BeetrootSoup { inner } => inner.0.clone(),
Self::DragonBreath { inner } => inner.0.clone(),
Self::SplashPotion { inner } => inner.0.clone(),
Self::SpectralArrow { inner } => inner.0.clone(),
Self::TippedArrow { inner } => inner.0.clone(),
Self::LingeringPotion { inner } => inner.0.clone(),
Self::Shield { inner } => inner.0.clone(),
Self::TotemOfUndying { inner } => inner.0.clone(),
Self::ShulkerShell { inner } => inner.0.clone(),
Self::IronNugget { inner } => inner.0.clone(),
Self::KnowledgeBook { inner } => inner.0.clone(),
Self::DebugStick { inner } => inner.0.clone(),
Self::MusicDisc13 { inner } => inner.0.clone(),
Self::MusicDiscCat { inner } => inner.0.clone(),
Self::MusicDiscBlocks { inner } => inner.0.clone(),
Self::MusicDiscChirp { inner } => inner.0.clone(),
Self::MusicDiscFar { inner } => inner.0.clone(),
Self::MusicDiscMall { inner } => inner.0.clone(),
Self::MusicDiscMellohi { inner } => inner.0.clone(),
Self::MusicDiscStal { inner } => inner.0.clone(),
Self::MusicDiscStrad { inner } => inner.0.clone(),
Self::MusicDiscWard { inner } => inner.0.clone(),
Self::MusicDisc11 { inner } => inner.0.clone(),
Self::MusicDiscWait { inner } => inner.0.clone(),
Self::MusicDiscOtherside { inner } => inner.0.clone(),
Self::MusicDiscRelic { inner } => inner.0.clone(),
Self::MusicDisc5 { inner } => inner.0.clone(),
Self::MusicDiscPigstep { inner } => inner.0.clone(),
Self::DiscFragment5 { inner } => inner.0.clone(),
Self::Trident { inner } => inner.0.clone(),
Self::PhantomMembrane { inner } => inner.0.clone(),
Self::NautilusShell { inner } => inner.0.clone(),
Self::HeartOfTheSea { inner } => inner.0.clone(),
Self::Crossbow { inner } => inner.0.clone(),
Self::SuspiciousStew { inner } => inner.0.clone(),
Self::Loom { inner } => inner.0.clone(),
Self::FlowerBannerPattern { inner } => inner.0.clone(),
Self::CreeperBannerPattern { inner } => inner.0.clone(),
Self::SkullBannerPattern { inner } => inner.0.clone(),
Self::MojangBannerPattern { inner } => inner.0.clone(),
Self::GlobeBannerPattern { inner } => inner.0.clone(),
Self::PiglinBannerPattern { inner } => inner.0.clone(),
Self::GoatHorn { inner } => inner.0.clone(),
Self::Composter { inner } => inner.0.clone(),
Self::Barrel { inner } => inner.0.clone(),
Self::Smoker { inner } => inner.0.clone(),
Self::BlastFurnace { inner } => inner.0.clone(),
Self::CartographyTable { inner } => inner.0.clone(),
Self::FletchingTable { inner } => inner.0.clone(),
Self::Grindstone { inner } => inner.0.clone(),
Self::SmithingTable { inner } => inner.0.clone(),
Self::Stonecutter { inner } => inner.0.clone(),
Self::Bell { inner } => inner.0.clone(),
Self::Lantern { inner } => inner.0.clone(),
Self::SoulLantern { inner } => inner.0.clone(),
Self::SweetBerries { inner } => inner.0.clone(),
Self::GlowBerries { inner } => inner.0.clone(),
Self::Campfire { inner } => inner.0.clone(),
Self::SoulCampfire { inner } => inner.0.clone(),
Self::Shroomlight { inner } => inner.0.clone(),
Self::Honeycomb { inner } => inner.0.clone(),
Self::BeeNest { inner } => inner.0.clone(),
Self::Beehive { inner } => inner.0.clone(),
Self::HoneyBottle { inner } => inner.0.clone(),
Self::HoneycombBlock { inner } => inner.0.clone(),
Self::Lodestone { inner } => inner.0.clone(),
Self::CryingObsidian { inner } => inner.0.clone(),
Self::Blackstone { inner } => inner.0.clone(),
Self::BlackstoneSlab { inner } => inner.0.clone(),
Self::BlackstoneStairs { inner } => inner.0.clone(),
Self::GildedBlackstone { inner } => inner.0.clone(),
Self::PolishedBlackstone { inner } => inner.0.clone(),
Self::PolishedBlackstoneSlab { inner } => inner.0.clone(),
Self::PolishedBlackstoneStairs { inner } => inner.0.clone(),
Self::ChiseledPolishedBlackstone { inner } => inner.0.clone(),
Self::PolishedBlackstoneBricks { inner } => inner.0.clone(),
Self::PolishedBlackstoneBrickSlab { inner } => inner.0.clone(),
Self::PolishedBlackstoneBrickStairs { inner } => inner.0.clone(),
Self::CrackedPolishedBlackstoneBricks { inner } => inner.0.clone(),
Self::RespawnAnchor { inner } => inner.0.clone(),
Self::Candle { inner } => inner.0.clone(),
Self::WhiteCandle { inner } => inner.0.clone(),
Self::OrangeCandle { inner } => inner.0.clone(),
Self::MagentaCandle { inner } => inner.0.clone(),
Self::LightBlueCandle { inner } => inner.0.clone(),
Self::YellowCandle { inner } => inner.0.clone(),
Self::LimeCandle { inner } => inner.0.clone(),
Self::PinkCandle { inner } => inner.0.clone(),
Self::GrayCandle { inner } => inner.0.clone(),
Self::LightGrayCandle { inner } => inner.0.clone(),
Self::CyanCandle { inner } => inner.0.clone(),
Self::PurpleCandle { inner } => inner.0.clone(),
Self::BlueCandle { inner } => inner.0.clone(),
Self::BrownCandle { inner } => inner.0.clone(),
Self::GreenCandle { inner } => inner.0.clone(),
Self::RedCandle { inner } => inner.0.clone(),
Self::BlackCandle { inner } => inner.0.clone(),
Self::SmallAmethystBud { inner } => inner.0.clone(),
Self::MediumAmethystBud { inner } => inner.0.clone(),
Self::LargeAmethystBud { inner } => inner.0.clone(),
Self::AmethystCluster { inner } => inner.0.clone(),
Self::PointedDripstone { inner } => inner.0.clone(),
Self::OchreFroglight { inner } => inner.0.clone(),
Self::VerdantFroglight { inner } => inner.0.clone(),
Self::PearlescentFroglight { inner } => inner.0.clone(),
Self::Frogspawn { inner } => inner.0.clone(),
Self::EchoShard { inner } => inner.0.clone(),
Self::Brush { inner } => inner.0.clone(),
Self::NetheriteUpgradeSmithingTemplate { inner } => inner.0.clone(),
Self::SentryArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::DuneArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::CoastArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::WildArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::WardArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::EyeArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::VexArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::TideArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::SnoutArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::RibArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::SpireArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::WayfinderArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::ShaperArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::SilenceArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::RaiserArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::HostArmorTrimSmithingTemplate { inner } => inner.0.clone(),
Self::AnglerPotterySherd { inner } => inner.0.clone(),
Self::ArcherPotterySherd { inner } => inner.0.clone(),
Self::ArmsUpPotterySherd { inner } => inner.0.clone(),
Self::BladePotterySherd { inner } => inner.0.clone(),
Self::BrewerPotterySherd { inner } => inner.0.clone(),
Self::BurnPotterySherd { inner } => inner.0.clone(),
Self::DangerPotterySherd { inner } => inner.0.clone(),
Self::ExplorerPotterySherd { inner } => inner.0.clone(),
Self::FriendPotterySherd { inner } => inner.0.clone(),
Self::HeartPotterySherd { inner } => inner.0.clone(),
Self::HeartbreakPotterySherd { inner } => inner.0.clone(),
Self::HowlPotterySherd { inner } => inner.0.clone(),
Self::MinerPotterySherd { inner } => inner.0.clone(),
Self::MournerPotterySherd { inner } => inner.0.clone(),
Self::PlentyPotterySherd { inner } => inner.0.clone(),
Self::PrizePotterySherd { inner } => inner.0.clone(),
Self::SheafPotterySherd { inner } => inner.0.clone(),
Self::ShelterPotterySherd { inner } => inner.0.clone(),
Self::SkullPotterySherd { inner } => inner.0.clone(),
Self::SnortPotterySherd { inner } => inner.0.clone(),
Self::CopperGrate { inner } => inner.0.clone(),
Self::ExposedCopperGrate { inner } => inner.0.clone(),
Self::WeatheredCopperGrate { inner } => inner.0.clone(),
Self::OxidizedCopperGrate { inner } => inner.0.clone(),
Self::WaxedCopperGrate { inner } => inner.0.clone(),
Self::WaxedExposedCopperGrate { inner } => inner.0.clone(),
Self::WaxedWeatheredCopperGrate { inner } => inner.0.clone(),
Self::WaxedOxidizedCopperGrate { inner } => inner.0.clone(),
Self::CopperBulb { inner } => inner.0.clone(),
Self::ExposedCopperBulb { inner } => inner.0.clone(),
Self::WeatheredCopperBulb { inner } => inner.0.clone(),
Self::OxidizedCopperBulb { inner } => inner.0.clone(),
Self::WaxedCopperBulb { inner } => inner.0.clone(),
Self::WaxedExposedCopperBulb { inner } => inner.0.clone(),
Self::WaxedWeatheredCopperBulb { inner } => inner.0.clone(),
Self::WaxedOxidizedCopperBulb { inner } => inner.0.clone(),
Self::TrialSpawner { inner } => inner.0.clone(),
Self::TrialKey { inner } => inner.0.clone(),
Self::Water { inner } => inner.0.clone(),
Self::Lava { inner } => inner.0.clone(),
Self::TallSeagrass { inner } => inner.0.clone(),
Self::PistonHead { inner } => inner.0.clone(),
Self::MovingPiston { inner } => inner.0.clone(),
Self::WallTorch { inner } => inner.0.clone(),
Self::Fire { inner } => inner.0.clone(),
Self::SoulFire { inner } => inner.0.clone(),
Self::RedstoneWire { inner } => inner.0.clone(),
Self::OakWallSign { inner } => inner.0.clone(),
Self::SpruceWallSign { inner } => inner.0.clone(),
Self::BirchWallSign { inner } => inner.0.clone(),
Self::AcaciaWallSign { inner } => inner.0.clone(),
Self::CherryWallSign { inner } => inner.0.clone(),
Self::JungleWallSign { inner } => inner.0.clone(),
Self::DarkOakWallSign { inner } => inner.0.clone(),
Self::MangroveWallSign { inner } => inner.0.clone(),
Self::BambooWallSign { inner } => inner.0.clone(),
Self::OakWallHangingSign { inner } => inner.0.clone(),
Self::SpruceWallHangingSign { inner } => inner.0.clone(),
Self::BirchWallHangingSign { inner } => inner.0.clone(),
Self::AcaciaWallHangingSign { inner } => inner.0.clone(),
Self::CherryWallHangingSign { inner } => inner.0.clone(),
Self::JungleWallHangingSign { inner } => inner.0.clone(),
Self::DarkOakWallHangingSign { inner } => inner.0.clone(),
Self::MangroveWallHangingSign { inner } => inner.0.clone(),
Self::CrimsonWallHangingSign { inner } => inner.0.clone(),
Self::WarpedWallHangingSign { inner } => inner.0.clone(),
Self::BambooWallHangingSign { inner } => inner.0.clone(),
Self::RedstoneWallTorch { inner } => inner.0.clone(),
Self::SoulWallTorch { inner } => inner.0.clone(),
Self::NetherPortal { inner } => inner.0.clone(),
Self::AttachedPumpkinStem { inner } => inner.0.clone(),
Self::AttachedMelonStem { inner } => inner.0.clone(),
Self::PumpkinStem { inner } => inner.0.clone(),
Self::MelonStem { inner } => inner.0.clone(),
Self::WaterCauldron { inner } => inner.0.clone(),
Self::LavaCauldron { inner } => inner.0.clone(),
Self::PowderSnowCauldron { inner } => inner.0.clone(),
Self::EndPortal { inner } => inner.0.clone(),
Self::Cocoa { inner } => inner.0.clone(),
Self::Tripwire { inner } => inner.0.clone(),
Self::PottedTorchflower { inner } => inner.0.clone(),
Self::PottedOakSapling { inner } => inner.0.clone(),
Self::PottedSpruceSapling { inner } => inner.0.clone(),
Self::PottedBirchSapling { inner } => inner.0.clone(),
Self::PottedJungleSapling { inner } => inner.0.clone(),
Self::PottedAcaciaSapling { inner } => inner.0.clone(),
Self::PottedCherrySapling { inner } => inner.0.clone(),
Self::PottedDarkOakSapling { inner } => inner.0.clone(),
Self::PottedMangrovePropagule { inner } => inner.0.clone(),
Self::PottedFern { inner } => inner.0.clone(),
Self::PottedDandelion { inner } => inner.0.clone(),
Self::PottedPoppy { inner } => inner.0.clone(),
Self::PottedBlueOrchid { inner } => inner.0.clone(),
Self::PottedAllium { inner } => inner.0.clone(),
Self::PottedAzureBluet { inner } => inner.0.clone(),
Self::PottedRedTulip { inner } => inner.0.clone(),
Self::PottedOrangeTulip { inner } => inner.0.clone(),
Self::PottedWhiteTulip { inner } => inner.0.clone(),
Self::PottedPinkTulip { inner } => inner.0.clone(),
Self::PottedOxeyeDaisy { inner } => inner.0.clone(),
Self::PottedCornflower { inner } => inner.0.clone(),
Self::PottedLilyOfTheValley { inner } => inner.0.clone(),
Self::PottedWitherRose { inner } => inner.0.clone(),
Self::PottedRedMushroom { inner } => inner.0.clone(),
Self::PottedBrownMushroom { inner } => inner.0.clone(),
Self::PottedDeadBush { inner } => inner.0.clone(),
Self::PottedCactus { inner } => inner.0.clone(),
Self::Carrots { inner } => inner.0.clone(),
Self::Potatoes { inner } => inner.0.clone(),
Self::SkeletonWallSkull { inner } => inner.0.clone(),
Self::WitherSkeletonWallSkull { inner } => inner.0.clone(),
Self::ZombieWallHead { inner } => inner.0.clone(),
Self::PlayerWallHead { inner } => inner.0.clone(),
Self::CreeperWallHead { inner } => inner.0.clone(),
Self::DragonWallHead { inner } => inner.0.clone(),
Self::PiglinWallHead { inner } => inner.0.clone(),
Self::WhiteWallBanner { inner } => inner.0.clone(),
Self::OrangeWallBanner { inner } => inner.0.clone(),
Self::MagentaWallBanner { inner } => inner.0.clone(),
Self::LightBlueWallBanner { inner } => inner.0.clone(),
Self::YellowWallBanner { inner } => inner.0.clone(),
Self::LimeWallBanner { inner } => inner.0.clone(),
Self::PinkWallBanner { inner } => inner.0.clone(),
Self::GrayWallBanner { inner } => inner.0.clone(),
Self::LightGrayWallBanner { inner } => inner.0.clone(),
Self::CyanWallBanner { inner } => inner.0.clone(),
Self::PurpleWallBanner { inner } => inner.0.clone(),
Self::BlueWallBanner { inner } => inner.0.clone(),
Self::BrownWallBanner { inner } => inner.0.clone(),
Self::GreenWallBanner { inner } => inner.0.clone(),
Self::RedWallBanner { inner } => inner.0.clone(),
Self::BlackWallBanner { inner } => inner.0.clone(),
Self::TorchflowerCrop { inner } => inner.0.clone(),
Self::PitcherCrop { inner } => inner.0.clone(),
Self::Beetroots { inner } => inner.0.clone(),
Self::EndGateway { inner } => inner.0.clone(),
Self::FrostedIce { inner } => inner.0.clone(),
Self::KelpPlant { inner } => inner.0.clone(),
Self::DeadTubeCoralWallFan { inner } => inner.0.clone(),
Self::DeadBrainCoralWallFan { inner } => inner.0.clone(),
Self::DeadBubbleCoralWallFan { inner } => inner.0.clone(),
Self::DeadFireCoralWallFan { inner } => inner.0.clone(),
Self::DeadHornCoralWallFan { inner } => inner.0.clone(),
Self::TubeCoralWallFan { inner } => inner.0.clone(),
Self::BrainCoralWallFan { inner } => inner.0.clone(),
Self::BubbleCoralWallFan { inner } => inner.0.clone(),
Self::FireCoralWallFan { inner } => inner.0.clone(),
Self::HornCoralWallFan { inner } => inner.0.clone(),
Self::BambooSapling { inner } => inner.0.clone(),
Self::PottedBamboo { inner } => inner.0.clone(),
Self::VoidAir { inner } => inner.0.clone(),
Self::CaveAir { inner } => inner.0.clone(),
Self::BubbleColumn { inner } => inner.0.clone(),
Self::SweetBerryBush { inner } => inner.0.clone(),
Self::WeepingVinesPlant { inner } => inner.0.clone(),
Self::TwistingVinesPlant { inner } => inner.0.clone(),
Self::CrimsonWallSign { inner } => inner.0.clone(),
Self::WarpedWallSign { inner } => inner.0.clone(),
Self::PottedCrimsonFungus { inner } => inner.0.clone(),
Self::PottedWarpedFungus { inner } => inner.0.clone(),
Self::PottedCrimsonRoots { inner } => inner.0.clone(),
Self::PottedWarpedRoots { inner } => inner.0.clone(),
Self::CandleCake { inner } => inner.0.clone(),
Self::WhiteCandleCake { inner } => inner.0.clone(),
Self::OrangeCandleCake { inner } => inner.0.clone(),
Self::MagentaCandleCake { inner } => inner.0.clone(),
Self::LightBlueCandleCake { inner } => inner.0.clone(),
Self::YellowCandleCake { inner } => inner.0.clone(),
Self::LimeCandleCake { inner } => inner.0.clone(),
Self::PinkCandleCake { inner } => inner.0.clone(),
Self::GrayCandleCake { inner } => inner.0.clone(),
Self::LightGrayCandleCake { inner } => inner.0.clone(),
Self::CyanCandleCake { inner } => inner.0.clone(),
Self::PurpleCandleCake { inner } => inner.0.clone(),
Self::BlueCandleCake { inner } => inner.0.clone(),
Self::BrownCandleCake { inner } => inner.0.clone(),
Self::GreenCandleCake { inner } => inner.0.clone(),
Self::RedCandleCake { inner } => inner.0.clone(),
Self::BlackCandleCake { inner } => inner.0.clone(),
Self::PowderSnow { inner } => inner.0.clone(),
Self::CaveVines { inner } => inner.0.clone(),
Self::CaveVinesPlant { inner } => inner.0.clone(),
Self::BigDripleafStem { inner } => inner.0.clone(),
Self::PottedAzaleaBush { inner } => inner.0.clone(),
Self::PottedFloweringAzaleaBush { inner } => inner.0.clone(),
Self::LegacyAir { inner } => inner.0.clone(),
Self::LegacyStone { inner } => inner.0.clone(),
Self::LegacyGrass { inner } => inner.0.clone(),
Self::LegacyDirt { inner } => inner.0.clone(),
Self::LegacyCobblestone { inner } => inner.0.clone(),
Self::LegacyWood { inner } => inner.0.clone(),
Self::LegacySapling { inner } => inner.0.clone(),
Self::LegacyBedrock { inner } => inner.0.clone(),
Self::LegacyWater { inner } => inner.0.clone(),
Self::LegacyStationaryWater { inner } => inner.0.clone(),
Self::LegacyLava { inner } => inner.0.clone(),
Self::LegacyStationaryLava { inner } => inner.0.clone(),
Self::LegacySand { inner } => inner.0.clone(),
Self::LegacyGravel { inner } => inner.0.clone(),
Self::LegacyGoldOre { inner } => inner.0.clone(),
Self::LegacyIronOre { inner } => inner.0.clone(),
Self::LegacyCoalOre { inner } => inner.0.clone(),
Self::LegacyLog { inner } => inner.0.clone(),
Self::LegacyLeaves { inner } => inner.0.clone(),
Self::LegacySponge { inner } => inner.0.clone(),
Self::LegacyGlass { inner } => inner.0.clone(),
Self::LegacyLapisOre { inner } => inner.0.clone(),
Self::LegacyLapisBlock { inner } => inner.0.clone(),
Self::LegacyDispenser { inner } => inner.0.clone(),
Self::LegacySandstone { inner } => inner.0.clone(),
Self::LegacyNoteBlock { inner } => inner.0.clone(),
Self::LegacyBedBlock { inner } => inner.0.clone(),
Self::LegacyPoweredRail { inner } => inner.0.clone(),
Self::LegacyDetectorRail { inner } => inner.0.clone(),
Self::LegacyPistonStickyBase { inner } => inner.0.clone(),
Self::LegacyWeb { inner } => inner.0.clone(),
Self::LegacyLongGrass { inner } => inner.0.clone(),
Self::LegacyDeadBush { inner } => inner.0.clone(),
Self::LegacyPistonBase { inner } => inner.0.clone(),
Self::LegacyPistonExtension { inner } => inner.0.clone(),
Self::LegacyWool { inner } => inner.0.clone(),
Self::LegacyPistonMovingPiece { inner } => inner.0.clone(),
Self::LegacyYellowFlower { inner } => inner.0.clone(),
Self::LegacyRedRose { inner } => inner.0.clone(),
Self::LegacyBrownMushroom { inner } => inner.0.clone(),
Self::LegacyRedMushroom { inner } => inner.0.clone(),
Self::LegacyGoldBlock { inner } => inner.0.clone(),
Self::LegacyIronBlock { inner } => inner.0.clone(),
Self::LegacyDoubleStep { inner } => inner.0.clone(),
Self::LegacyStep { inner } => inner.0.clone(),
Self::LegacyBrick { inner } => inner.0.clone(),
Self::LegacyTnt { inner } => inner.0.clone(),
Self::LegacyBookshelf { inner } => inner.0.clone(),
Self::LegacyMossyCobblestone { inner } => inner.0.clone(),
Self::LegacyObsidian { inner } => inner.0.clone(),
Self::LegacyTorch { inner } => inner.0.clone(),
Self::LegacyFire { inner } => inner.0.clone(),
Self::LegacyMobSpawner { inner } => inner.0.clone(),
Self::LegacyWoodStairs { inner } => inner.0.clone(),
Self::LegacyChest { inner } => inner.0.clone(),
Self::LegacyRedstoneWire { inner } => inner.0.clone(),
Self::LegacyDiamondOre { inner } => inner.0.clone(),
Self::LegacyDiamondBlock { inner } => inner.0.clone(),
Self::LegacyWorkbench { inner } => inner.0.clone(),
Self::LegacyCrops { inner } => inner.0.clone(),
Self::LegacySoil { inner } => inner.0.clone(),
Self::LegacyFurnace { inner } => inner.0.clone(),
Self::LegacyBurningFurnace { inner } => inner.0.clone(),
Self::LegacySignPost { inner } => inner.0.clone(),
Self::LegacyWoodenDoor { inner } => inner.0.clone(),
Self::LegacyLadder { inner } => inner.0.clone(),
Self::LegacyRails { inner } => inner.0.clone(),
Self::LegacyCobblestoneStairs { inner } => inner.0.clone(),
Self::LegacyWallSign { inner } => inner.0.clone(),
Self::LegacyLever { inner } => inner.0.clone(),
Self::LegacyStonePlate { inner } => inner.0.clone(),
Self::LegacyIronDoorBlock { inner } => inner.0.clone(),
Self::LegacyWoodPlate { inner } => inner.0.clone(),
Self::LegacyRedstoneOre { inner } => inner.0.clone(),
Self::LegacyGlowingRedstoneOre { inner } => inner.0.clone(),
Self::LegacyRedstoneTorchOff { inner } => inner.0.clone(),
Self::LegacyRedstoneTorchOn { inner } => inner.0.clone(),
Self::LegacyStoneButton { inner } => inner.0.clone(),
Self::LegacySnow { inner } => inner.0.clone(),
Self::LegacyIce { inner } => inner.0.clone(),
Self::LegacySnowBlock { inner } => inner.0.clone(),
Self::LegacyCactus { inner } => inner.0.clone(),
Self::LegacyClay { inner } => inner.0.clone(),
Self::LegacySugarCaneBlock { inner } => inner.0.clone(),
Self::LegacyJukebox { inner } => inner.0.clone(),
Self::LegacyFence { inner } => inner.0.clone(),
Self::LegacyPumpkin { inner } => inner.0.clone(),
Self::LegacyNetherrack { inner } => inner.0.clone(),
Self::LegacySoulSand { inner } => inner.0.clone(),
Self::LegacyGlowstone { inner } => inner.0.clone(),
Self::LegacyPortal { inner } => inner.0.clone(),
Self::LegacyJackOLantern { inner } => inner.0.clone(),
Self::LegacyCakeBlock { inner } => inner.0.clone(),
Self::LegacyDiodeBlockOff { inner } => inner.0.clone(),
Self::LegacyDiodeBlockOn { inner } => inner.0.clone(),
Self::LegacyStainedGlass { inner } => inner.0.clone(),
Self::LegacyTrapDoor { inner } => inner.0.clone(),
Self::LegacyMonsterEggs { inner } => inner.0.clone(),
Self::LegacySmoothBrick { inner } => inner.0.clone(),
Self::LegacyHugeMushroom1 { inner } => inner.0.clone(),
Self::LegacyHugeMushroom2 { inner } => inner.0.clone(),
Self::LegacyIronFence { inner } => inner.0.clone(),
Self::LegacyThinGlass { inner } => inner.0.clone(),
Self::LegacyMelonBlock { inner } => inner.0.clone(),
Self::LegacyPumpkinStem { inner } => inner.0.clone(),
Self::LegacyMelonStem { inner } => inner.0.clone(),
Self::LegacyVine { inner } => inner.0.clone(),
Self::LegacyFenceGate { inner } => inner.0.clone(),
Self::LegacyBrickStairs { inner } => inner.0.clone(),
Self::LegacySmoothStairs { inner } => inner.0.clone(),
Self::LegacyMycel { inner } => inner.0.clone(),
Self::LegacyWaterLily { inner } => inner.0.clone(),
Self::LegacyNetherBrick { inner } => inner.0.clone(),
Self::LegacyNetherFence { inner } => inner.0.clone(),
Self::LegacyNetherBrickStairs { inner } => inner.0.clone(),
Self::LegacyNetherWarts { inner } => inner.0.clone(),
Self::LegacyEnchantmentTable { inner } => inner.0.clone(),
Self::LegacyBrewingStand { inner } => inner.0.clone(),
Self::LegacyCauldron { inner } => inner.0.clone(),
Self::LegacyEnderPortal { inner } => inner.0.clone(),
Self::LegacyEnderPortalFrame { inner } => inner.0.clone(),
Self::LegacyEnderStone { inner } => inner.0.clone(),
Self::LegacyDragonEgg { inner } => inner.0.clone(),
Self::LegacyRedstoneLampOff { inner } => inner.0.clone(),
Self::LegacyRedstoneLampOn { inner } => inner.0.clone(),
Self::LegacyWoodDoubleStep { inner } => inner.0.clone(),
Self::LegacyWoodStep { inner } => inner.0.clone(),
Self::LegacyCocoa { inner } => inner.0.clone(),
Self::LegacySandstoneStairs { inner } => inner.0.clone(),
Self::LegacyEmeraldOre { inner } => inner.0.clone(),
Self::LegacyEnderChest { inner } => inner.0.clone(),
Self::LegacyTripwireHook { inner } => inner.0.clone(),
Self::LegacyTripwire { inner } => inner.0.clone(),
Self::LegacyEmeraldBlock { inner } => inner.0.clone(),
Self::LegacySpruceWoodStairs { inner } => inner.0.clone(),
Self::LegacyBirchWoodStairs { inner } => inner.0.clone(),
Self::LegacyJungleWoodStairs { inner } => inner.0.clone(),
Self::LegacyCommand { inner } => inner.0.clone(),
Self::LegacyBeacon { inner } => inner.0.clone(),
Self::LegacyCobbleWall { inner } => inner.0.clone(),
Self::LegacyFlowerPot { inner } => inner.0.clone(),
Self::LegacyCarrot { inner } => inner.0.clone(),
Self::LegacyPotato { inner } => inner.0.clone(),
Self::LegacyWoodButton { inner } => inner.0.clone(),
Self::LegacySkull { inner } => inner.0.clone(),
Self::LegacyAnvil { inner } => inner.0.clone(),
Self::LegacyTrappedChest { inner } => inner.0.clone(),
Self::LegacyGoldPlate { inner } => inner.0.clone(),
Self::LegacyIronPlate { inner } => inner.0.clone(),
Self::LegacyRedstoneComparatorOff { inner } => inner.0.clone(),
Self::LegacyRedstoneComparatorOn { inner } => inner.0.clone(),
Self::LegacyDaylightDetector { inner } => inner.0.clone(),
Self::LegacyRedstoneBlock { inner } => inner.0.clone(),
Self::LegacyQuartzOre { inner } => inner.0.clone(),
Self::LegacyHopper { inner } => inner.0.clone(),
Self::LegacyQuartzBlock { inner } => inner.0.clone(),
Self::LegacyQuartzStairs { inner } => inner.0.clone(),
Self::LegacyActivatorRail { inner } => inner.0.clone(),
Self::LegacyDropper { inner } => inner.0.clone(),
Self::LegacyStainedClay { inner } => inner.0.clone(),
Self::LegacyStainedGlassPane { inner } => inner.0.clone(),
Self::LegacyLeaves2 { inner } => inner.0.clone(),
Self::LegacyLog2 { inner } => inner.0.clone(),
Self::LegacyAcaciaStairs { inner } => inner.0.clone(),
Self::LegacyDarkOakStairs { inner } => inner.0.clone(),
Self::LegacySlimeBlock { inner } => inner.0.clone(),
Self::LegacyBarrier { inner } => inner.0.clone(),
Self::LegacyIronTrapdoor { inner } => inner.0.clone(),
Self::LegacyPrismarine { inner } => inner.0.clone(),
Self::LegacySeaLantern { inner } => inner.0.clone(),
Self::LegacyHayBlock { inner } => inner.0.clone(),
Self::LegacyCarpet { inner } => inner.0.clone(),
Self::LegacyHardClay { inner } => inner.0.clone(),
Self::LegacyCoalBlock { inner } => inner.0.clone(),
Self::LegacyPackedIce { inner } => inner.0.clone(),
Self::LegacyDoublePlant { inner } => inner.0.clone(),
Self::LegacyStandingBanner { inner } => inner.0.clone(),
Self::LegacyWallBanner { inner } => inner.0.clone(),
Self::LegacyDaylightDetectorInverted { inner } => inner.0.clone(),
Self::LegacyRedSandstone { inner } => inner.0.clone(),
Self::LegacyRedSandstoneStairs { inner } => inner.0.clone(),
Self::LegacyDoubleStoneSlab2 { inner } => inner.0.clone(),
Self::LegacyStoneSlab2 { inner } => inner.0.clone(),
Self::LegacySpruceFenceGate { inner } => inner.0.clone(),
Self::LegacyBirchFenceGate { inner } => inner.0.clone(),
Self::LegacyJungleFenceGate { inner } => inner.0.clone(),
Self::LegacyDarkOakFenceGate { inner } => inner.0.clone(),
Self::LegacyAcaciaFenceGate { inner } => inner.0.clone(),
Self::LegacySpruceFence { inner } => inner.0.clone(),
Self::LegacyBirchFence { inner } => inner.0.clone(),
Self::LegacyJungleFence { inner } => inner.0.clone(),
Self::LegacyDarkOakFence { inner } => inner.0.clone(),
Self::LegacyAcaciaFence { inner } => inner.0.clone(),
Self::LegacySpruceDoor { inner } => inner.0.clone(),
Self::LegacyBirchDoor { inner } => inner.0.clone(),
Self::LegacyJungleDoor { inner } => inner.0.clone(),
Self::LegacyAcaciaDoor { inner } => inner.0.clone(),
Self::LegacyDarkOakDoor { inner } => inner.0.clone(),
Self::LegacyEndRod { inner } => inner.0.clone(),
Self::LegacyChorusPlant { inner } => inner.0.clone(),
Self::LegacyChorusFlower { inner } => inner.0.clone(),
Self::LegacyPurpurBlock { inner } => inner.0.clone(),
Self::LegacyPurpurPillar { inner } => inner.0.clone(),
Self::LegacyPurpurStairs { inner } => inner.0.clone(),
Self::LegacyPurpurDoubleSlab { inner } => inner.0.clone(),
Self::LegacyPurpurSlab { inner } => inner.0.clone(),
Self::LegacyEndBricks { inner } => inner.0.clone(),
Self::LegacyBeetrootBlock { inner } => inner.0.clone(),
Self::LegacyGrassPath { inner } => inner.0.clone(),
Self::LegacyEndGateway { inner } => inner.0.clone(),
Self::LegacyCommandRepeating { inner } => inner.0.clone(),
Self::LegacyCommandChain { inner } => inner.0.clone(),
Self::LegacyFrostedIce { inner } => inner.0.clone(),
Self::LegacyMagma { inner } => inner.0.clone(),
Self::LegacyNetherWartBlock { inner } => inner.0.clone(),
Self::LegacyRedNetherBrick { inner } => inner.0.clone(),
Self::LegacyBoneBlock { inner } => inner.0.clone(),
Self::LegacyStructureVoid { inner } => inner.0.clone(),
Self::LegacyObserver { inner } => inner.0.clone(),
Self::LegacyWhiteShulkerBox { inner } => inner.0.clone(),
Self::LegacyOrangeShulkerBox { inner } => inner.0.clone(),
Self::LegacyMagentaShulkerBox { inner } => inner.0.clone(),
Self::LegacyLightBlueShulkerBox { inner } => inner.0.clone(),
Self::LegacyYellowShulkerBox { inner } => inner.0.clone(),
Self::LegacyLimeShulkerBox { inner } => inner.0.clone(),
Self::LegacyPinkShulkerBox { inner } => inner.0.clone(),
Self::LegacyGrayShulkerBox { inner } => inner.0.clone(),
Self::LegacySilverShulkerBox { inner } => inner.0.clone(),
Self::LegacyCyanShulkerBox { inner } => inner.0.clone(),
Self::LegacyPurpleShulkerBox { inner } => inner.0.clone(),
Self::LegacyBlueShulkerBox { inner } => inner.0.clone(),
Self::LegacyBrownShulkerBox { inner } => inner.0.clone(),
Self::LegacyGreenShulkerBox { inner } => inner.0.clone(),
Self::LegacyRedShulkerBox { inner } => inner.0.clone(),
Self::LegacyBlackShulkerBox { inner } => inner.0.clone(),
Self::LegacyWhiteGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyOrangeGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyMagentaGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyLightBlueGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyYellowGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyLimeGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyPinkGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyGrayGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacySilverGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyCyanGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyPurpleGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyBlueGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyBrownGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyGreenGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyRedGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyBlackGlazedTerracotta { inner } => inner.0.clone(),
Self::LegacyConcrete { inner } => inner.0.clone(),
Self::LegacyConcretePowder { inner } => inner.0.clone(),
Self::LegacyStructureBlock { inner } => inner.0.clone(),
Self::LegacyIronSpade { inner } => inner.0.clone(),
Self::LegacyIronPickaxe { inner } => inner.0.clone(),
Self::LegacyIronAxe { inner } => inner.0.clone(),
Self::LegacyFlintAndSteel { inner } => inner.0.clone(),
Self::LegacyApple { inner } => inner.0.clone(),
Self::LegacyBow { inner } => inner.0.clone(),
Self::LegacyArrow { inner } => inner.0.clone(),
Self::LegacyCoal { inner } => inner.0.clone(),
Self::LegacyDiamond { inner } => inner.0.clone(),
Self::LegacyIronIngot { inner } => inner.0.clone(),
Self::LegacyGoldIngot { inner } => inner.0.clone(),
Self::LegacyIronSword { inner } => inner.0.clone(),
Self::LegacyWoodSword { inner } => inner.0.clone(),
Self::LegacyWoodSpade { inner } => inner.0.clone(),
Self::LegacyWoodPickaxe { inner } => inner.0.clone(),
Self::LegacyWoodAxe { inner } => inner.0.clone(),
Self::LegacyStoneSword { inner } => inner.0.clone(),
Self::LegacyStoneSpade { inner } => inner.0.clone(),
Self::LegacyStonePickaxe { inner } => inner.0.clone(),
Self::LegacyStoneAxe { inner } => inner.0.clone(),
Self::LegacyDiamondSword { inner } => inner.0.clone(),
Self::LegacyDiamondSpade { inner } => inner.0.clone(),
Self::LegacyDiamondPickaxe { inner } => inner.0.clone(),
Self::LegacyDiamondAxe { inner } => inner.0.clone(),
Self::LegacyStick { inner } => inner.0.clone(),
Self::LegacyBowl { inner } => inner.0.clone(),
Self::LegacyMushroomSoup { inner } => inner.0.clone(),
Self::LegacyGoldSword { inner } => inner.0.clone(),
Self::LegacyGoldSpade { inner } => inner.0.clone(),
Self::LegacyGoldPickaxe { inner } => inner.0.clone(),
Self::LegacyGoldAxe { inner } => inner.0.clone(),
Self::LegacyString { inner } => inner.0.clone(),
Self::LegacyFeather { inner } => inner.0.clone(),
Self::LegacySulphur { inner } => inner.0.clone(),
Self::LegacyWoodHoe { inner } => inner.0.clone(),
Self::LegacyStoneHoe { inner } => inner.0.clone(),
Self::LegacyIronHoe { inner } => inner.0.clone(),
Self::LegacyDiamondHoe { inner } => inner.0.clone(),
Self::LegacyGoldHoe { inner } => inner.0.clone(),
Self::LegacySeeds { inner } => inner.0.clone(),
Self::LegacyWheat { inner } => inner.0.clone(),
Self::LegacyBread { inner } => inner.0.clone(),
Self::LegacyLeatherHelmet { inner } => inner.0.clone(),
Self::LegacyLeatherChestplate { inner } => inner.0.clone(),
Self::LegacyLeatherLeggings { inner } => inner.0.clone(),
Self::LegacyLeatherBoots { inner } => inner.0.clone(),
Self::LegacyChainmailHelmet { inner } => inner.0.clone(),
Self::LegacyChainmailChestplate { inner } => inner.0.clone(),
Self::LegacyChainmailLeggings { inner } => inner.0.clone(),
Self::LegacyChainmailBoots { inner } => inner.0.clone(),
Self::LegacyIronHelmet { inner } => inner.0.clone(),
Self::LegacyIronChestplate { inner } => inner.0.clone(),
Self::LegacyIronLeggings { inner } => inner.0.clone(),
Self::LegacyIronBoots { inner } => inner.0.clone(),
Self::LegacyDiamondHelmet { inner } => inner.0.clone(),
Self::LegacyDiamondChestplate { inner } => inner.0.clone(),
Self::LegacyDiamondLeggings { inner } => inner.0.clone(),
Self::LegacyDiamondBoots { inner } => inner.0.clone(),
Self::LegacyGoldHelmet { inner } => inner.0.clone(),
Self::LegacyGoldChestplate { inner } => inner.0.clone(),
Self::LegacyGoldLeggings { inner } => inner.0.clone(),
Self::LegacyGoldBoots { inner } => inner.0.clone(),
Self::LegacyFlint { inner } => inner.0.clone(),
Self::LegacyPork { inner } => inner.0.clone(),
Self::LegacyGrilledPork { inner } => inner.0.clone(),
Self::LegacyPainting { inner } => inner.0.clone(),
Self::LegacyGoldenApple { inner } => inner.0.clone(),
Self::LegacySign { inner } => inner.0.clone(),
Self::LegacyWoodDoor { inner } => inner.0.clone(),
Self::LegacyBucket { inner } => inner.0.clone(),
Self::LegacyWaterBucket { inner } => inner.0.clone(),
Self::LegacyLavaBucket { inner } => inner.0.clone(),
Self::LegacyMinecart { inner } => inner.0.clone(),
Self::LegacySaddle { inner } => inner.0.clone(),
Self::LegacyIronDoor { inner } => inner.0.clone(),
Self::LegacyRedstone { inner } => inner.0.clone(),
Self::LegacySnowBall { inner } => inner.0.clone(),
Self::LegacyBoat { inner } => inner.0.clone(),
Self::LegacyLeather { inner } => inner.0.clone(),
Self::LegacyMilkBucket { inner } => inner.0.clone(),
Self::LegacyClayBrick { inner } => inner.0.clone(),
Self::LegacyClayBall { inner } => inner.0.clone(),
Self::LegacySugarCane { inner } => inner.0.clone(),
Self::LegacyPaper { inner } => inner.0.clone(),
Self::LegacyBook { inner } => inner.0.clone(),
Self::LegacySlimeBall { inner } => inner.0.clone(),
Self::LegacyStorageMinecart { inner } => inner.0.clone(),
Self::LegacyPoweredMinecart { inner } => inner.0.clone(),
Self::LegacyEgg { inner } => inner.0.clone(),
Self::LegacyCompass { inner } => inner.0.clone(),
Self::LegacyFishingRod { inner } => inner.0.clone(),
Self::LegacyWatch { inner } => inner.0.clone(),
Self::LegacyGlowstoneDust { inner } => inner.0.clone(),
Self::LegacyRawFish { inner } => inner.0.clone(),
Self::LegacyCookedFish { inner } => inner.0.clone(),
Self::LegacyInkSack { inner } => inner.0.clone(),
Self::LegacyBone { inner } => inner.0.clone(),
Self::LegacySugar { inner } => inner.0.clone(),
Self::LegacyCake { inner } => inner.0.clone(),
Self::LegacyBed { inner } => inner.0.clone(),
Self::LegacyDiode { inner } => inner.0.clone(),
Self::LegacyCookie { inner } => inner.0.clone(),
Self::LegacyMap { inner } => inner.0.clone(),
Self::LegacyShears { inner } => inner.0.clone(),
Self::LegacyMelon { inner } => inner.0.clone(),
Self::LegacyPumpkinSeeds { inner } => inner.0.clone(),
Self::LegacyMelonSeeds { inner } => inner.0.clone(),
Self::LegacyRawBeef { inner } => inner.0.clone(),
Self::LegacyCookedBeef { inner } => inner.0.clone(),
Self::LegacyRawChicken { inner } => inner.0.clone(),
Self::LegacyCookedChicken { inner } => inner.0.clone(),
Self::LegacyRottenFlesh { inner } => inner.0.clone(),
Self::LegacyEnderPearl { inner } => inner.0.clone(),
Self::LegacyBlazeRod { inner } => inner.0.clone(),
Self::LegacyGhastTear { inner } => inner.0.clone(),
Self::LegacyGoldNugget { inner } => inner.0.clone(),
Self::LegacyNetherStalk { inner } => inner.0.clone(),
Self::LegacyPotion { inner } => inner.0.clone(),
Self::LegacyGlassBottle { inner } => inner.0.clone(),
Self::LegacySpiderEye { inner } => inner.0.clone(),
Self::LegacyFermentedSpiderEye { inner } => inner.0.clone(),
Self::LegacyBlazePowder { inner } => inner.0.clone(),
Self::LegacyMagmaCream { inner } => inner.0.clone(),
Self::LegacyBrewingStandItem { inner } => inner.0.clone(),
Self::LegacyCauldronItem { inner } => inner.0.clone(),
Self::LegacyEyeOfEnder { inner } => inner.0.clone(),
Self::LegacySpeckledMelon { inner } => inner.0.clone(),
Self::LegacyMonsterEgg { inner } => inner.0.clone(),
Self::LegacyExpBottle { inner } => inner.0.clone(),
Self::LegacyFireball { inner } => inner.0.clone(),
Self::LegacyBookAndQuill { inner } => inner.0.clone(),
Self::LegacyWrittenBook { inner } => inner.0.clone(),
Self::LegacyEmerald { inner } => inner.0.clone(),
Self::LegacyItemFrame { inner } => inner.0.clone(),
Self::LegacyFlowerPotItem { inner } => inner.0.clone(),
Self::LegacyCarrotItem { inner } => inner.0.clone(),
Self::LegacyPotatoItem { inner } => inner.0.clone(),
Self::LegacyBakedPotato { inner } => inner.0.clone(),
Self::LegacyPoisonousPotato { inner } => inner.0.clone(),
Self::LegacyEmptyMap { inner } => inner.0.clone(),
Self::LegacyGoldenCarrot { inner } => inner.0.clone(),
Self::LegacySkullItem { inner } => inner.0.clone(),
Self::LegacyCarrotStick { inner } => inner.0.clone(),
Self::LegacyNetherStar { inner } => inner.0.clone(),
Self::LegacyPumpkinPie { inner } => inner.0.clone(),
Self::LegacyFirework { inner } => inner.0.clone(),
Self::LegacyFireworkCharge { inner } => inner.0.clone(),
Self::LegacyEnchantedBook { inner } => inner.0.clone(),
Self::LegacyRedstoneComparator { inner } => inner.0.clone(),
Self::LegacyNetherBrickItem { inner } => inner.0.clone(),
Self::LegacyQuartz { inner } => inner.0.clone(),
Self::LegacyExplosiveMinecart { inner } => inner.0.clone(),
Self::LegacyHopperMinecart { inner } => inner.0.clone(),
Self::LegacyPrismarineShard { inner } => inner.0.clone(),
Self::LegacyPrismarineCrystals { inner } => inner.0.clone(),
Self::LegacyRabbit { inner } => inner.0.clone(),
Self::LegacyCookedRabbit { inner } => inner.0.clone(),
Self::LegacyRabbitStew { inner } => inner.0.clone(),
Self::LegacyRabbitFoot { inner } => inner.0.clone(),
Self::LegacyRabbitHide { inner } => inner.0.clone(),
Self::LegacyArmorStand { inner } => inner.0.clone(),
Self::LegacyIronBarding { inner } => inner.0.clone(),
Self::LegacyGoldBarding { inner } => inner.0.clone(),
Self::LegacyDiamondBarding { inner } => inner.0.clone(),
Self::LegacyLeash { inner } => inner.0.clone(),
Self::LegacyNameTag { inner } => inner.0.clone(),
Self::LegacyCommandMinecart { inner } => inner.0.clone(),
Self::LegacyMutton { inner } => inner.0.clone(),
Self::LegacyCookedMutton { inner } => inner.0.clone(),
Self::LegacyBanner { inner } => inner.0.clone(),
Self::LegacyEndCrystal { inner } => inner.0.clone(),
Self::LegacySpruceDoorItem { inner } => inner.0.clone(),
Self::LegacyBirchDoorItem { inner } => inner.0.clone(),
Self::LegacyJungleDoorItem { inner } => inner.0.clone(),
Self::LegacyAcaciaDoorItem { inner } => inner.0.clone(),
Self::LegacyDarkOakDoorItem { inner } => inner.0.clone(),
Self::LegacyChorusFruit { inner } => inner.0.clone(),
Self::LegacyChorusFruitPopped { inner } => inner.0.clone(),
Self::LegacyBeetroot { inner } => inner.0.clone(),
Self::LegacyBeetrootSeeds { inner } => inner.0.clone(),
Self::LegacyBeetrootSoup { inner } => inner.0.clone(),
Self::LegacyDragonsBreath { inner } => inner.0.clone(),
Self::LegacySplashPotion { inner } => inner.0.clone(),
Self::LegacySpectralArrow { inner } => inner.0.clone(),
Self::LegacyTippedArrow { inner } => inner.0.clone(),
Self::LegacyLingeringPotion { inner } => inner.0.clone(),
Self::LegacyShield { inner } => inner.0.clone(),
Self::LegacyElytra { inner } => inner.0.clone(),
Self::LegacyBoatSpruce { inner } => inner.0.clone(),
Self::LegacyBoatBirch { inner } => inner.0.clone(),
Self::LegacyBoatJungle { inner } => inner.0.clone(),
Self::LegacyBoatAcacia { inner } => inner.0.clone(),
Self::LegacyBoatDarkOak { inner } => inner.0.clone(),
Self::LegacyTotem { inner } => inner.0.clone(),
Self::LegacyShulkerShell { inner } => inner.0.clone(),
Self::LegacyIronNugget { inner } => inner.0.clone(),
Self::LegacyKnowledgeBook { inner } => inner.0.clone(),
Self::LegacyGoldRecord { inner } => inner.0.clone(),
Self::LegacyGreenRecord { inner } => inner.0.clone(),
Self::LegacyRecord3 { inner } => inner.0.clone(),
Self::LegacyRecord4 { inner } => inner.0.clone(),
Self::LegacyRecord5 { inner } => inner.0.clone(),
Self::LegacyRecord6 { inner } => inner.0.clone(),
Self::LegacyRecord7 { inner } => inner.0.clone(),
Self::LegacyRecord8 { inner } => inner.0.clone(),
Self::LegacyRecord9 { inner } => inner.0.clone(),
Self::LegacyRecord10 { inner } => inner.0.clone(),
Self::LegacyRecord11 { inner } => inner.0.clone(),
Self::LegacyRecord12 { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Air { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Stone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Granite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedGranite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Diorite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedDiorite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Andesite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedAndesite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Deepslate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CobbledDeepslate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedDeepslate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Calcite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Tuff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TuffSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TuffStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TuffWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChiseledTuff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedTuff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedTuffSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedTuffStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedTuffWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TuffBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TuffBrickSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TuffBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TuffBrickWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChiseledTuffBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DripstoneBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrassBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Dirt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CoarseDirt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Podzol { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RootedDirt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Mud { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonNylium { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedNylium { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cobblestone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakPlanks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SprucePlanks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchPlanks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JunglePlanks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaPlanks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryPlanks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakPlanks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangrovePlanks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooPlanks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonPlanks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedPlanks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooMosaic { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherrySapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangrovePropagule { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bedrock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Sand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SuspiciousSand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SuspiciousGravel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedSand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Gravel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CoalOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateCoalOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateIronOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CopperOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateCopperOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateGoldOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedstoneOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateRedstoneOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EmeraldOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateEmeraldOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LapisOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateLapisOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateDiamondOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherGoldOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherQuartzOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AncientDebris { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CoalBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RawIronBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RawCopperBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RawGoldBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmethystBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BuddingAmethyst { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CopperBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExposedCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeatheredCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OxidizedCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChiseledCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExposedChiseledCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeatheredChiseledCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OxidizedChiseledCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CutCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExposedCutCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeatheredCutCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OxidizedCutCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CutCopperStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExposedCutCopperStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeatheredCutCopperStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OxidizedCutCopperStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CutCopperSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExposedCutCopperSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeatheredCutCopperSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OxidizedCutCopperSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedCopperBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedExposedCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedWeatheredCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedOxidizedCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedChiseledCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedExposedChiseledCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedWeatheredChiseledCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedOxidizedChiseledCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedCutCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedExposedCutCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedWeatheredCutCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedOxidizedCutCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedCutCopperStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedExposedCutCopperStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedWeatheredCutCopperStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedOxidizedCutCopperStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedCutCopperSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedExposedCutCopperSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedWeatheredCutCopperSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedOxidizedCutCopperSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveRoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MuddyMangroveRoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedOakLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedSpruceLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedBirchLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedJungleLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedAcaciaLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedCherryLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedDarkOakLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedMangroveLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedCrimsonStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedWarpedStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedOakWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedSpruceWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedBirchWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedJungleWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedAcaciaWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedCherryWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedDarkOakWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedMangroveWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedCrimsonHyphae { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedWarpedHyphae { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StrippedBambooBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonHyphae { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedHyphae { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AzaleaLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FloweringAzaleaLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Sponge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WetSponge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Glass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TintedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LapisBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Sandstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChiseledSandstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CutSandstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cobweb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ShortGrass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Fern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Azalea { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FloweringAzalea { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadBush { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Seagrass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SeaPickle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Dandelion { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Poppy { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueOrchid { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Allium { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AzureBluet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedTulip { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeTulip { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteTulip { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkTulip { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OxeyeDaisy { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cornflower { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LilyOfTheValley { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WitherRose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Torchflower { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PitcherPlant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SporeBlossom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownMushroom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedMushroom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonFungus { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedFungus { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonRoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedRoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherSprouts { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeepingVines { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TwistingVines { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SugarCane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Kelp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MossCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkPetals { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MossBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HangingRoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BigDripleaf { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmallDripleaf { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bamboo { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherrySlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooMosaicSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothStoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SandstoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CutSandstoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PetrifiedOakSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CobblestoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrickSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StoneBrickSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MudBrickSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherBrickSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::QuartzSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedSandstoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CutRedSandstoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpurSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PrismarineSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PrismarineBrickSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkPrismarineSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothQuartz { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothRedSandstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothSandstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothStone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bookshelf { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChiseledBookshelf { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DecoratedPot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MossyCobblestone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Obsidian { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Torch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndRod { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChorusPlant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChorusFlower { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpurBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpurPillar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpurStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Spawner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Chest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CraftingTable { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Farmland { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Furnace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Ladder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CobblestoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Snow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Ice { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SnowBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cactus { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Clay { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Jukebox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Pumpkin { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CarvedPumpkin { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JackOLantern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Netherrack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SoulSand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SoulSoil { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Basalt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedBasalt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothBasalt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SoulTorch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Glowstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InfestedStone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InfestedCobblestone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InfestedStoneBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InfestedMossyStoneBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InfestedCrackedStoneBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InfestedChiseledStoneBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InfestedDeepslate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StoneBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MossyStoneBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrackedStoneBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChiseledStoneBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PackedMud { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MudBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrackedDeepslateBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateTiles { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrackedDeepslateTiles { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChiseledDeepslate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ReinforcedDeepslate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownMushroomBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedMushroomBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MushroomStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronBars { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Chain { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Melon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Vine { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GlowLichen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StoneBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MudBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Mycelium { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LilyPad { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrackedNetherBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChiseledNetherBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherBrickFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Sculk { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SculkVein { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SculkCatalyst { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SculkShrieker { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnchantingTable { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndPortalFrame { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndStone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndStoneBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DragonEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SandstoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnderChest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EmeraldBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooMosaicStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CommandBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Beacon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CobblestoneWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MossyCobblestoneWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrickWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PrismarineWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedSandstoneWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MossyStoneBrickWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GraniteWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StoneBrickWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MudBrickWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherBrickWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AndesiteWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedNetherBrickWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SandstoneWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndStoneBrickWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DioriteWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackstoneWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedBlackstoneWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedBlackstoneBrickWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CobbledDeepslateWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedDeepslateWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateBrickWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateTileWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Anvil { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChippedAnvil { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DamagedAnvil { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChiseledQuartzBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::QuartzBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::QuartzBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::QuartzPillar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::QuartzStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Barrier { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Light { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HayBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Terracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PackedIce { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DirtPath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Sunflower { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Lilac { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RoseBush { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Peony { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TallGrass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LargeFern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Prismarine { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PrismarineBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkPrismarine { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PrismarineStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PrismarineBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkPrismarineStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SeaLantern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedSandstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChiseledRedSandstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CutRedSandstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedSandstoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RepeatingCommandBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChainCommandBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagmaBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherWartBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedWartBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedNetherBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BoneBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StructureVoid { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TurtleEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SnifferEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadTubeCoralBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadBrainCoralBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadBubbleCoralBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadFireCoralBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadHornCoralBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TubeCoralBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrainCoralBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BubbleCoralBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FireCoralBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HornCoralBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TubeCoral { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrainCoral { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BubbleCoral { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FireCoral { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HornCoral { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadBrainCoral { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadBubbleCoral { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadFireCoral { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadHornCoral { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadTubeCoral { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TubeCoralFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrainCoralFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BubbleCoralFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FireCoralFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HornCoralFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadTubeCoralFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadBrainCoralFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadBubbleCoralFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadFireCoralFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadHornCoralFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueIce { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Conduit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedGraniteStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothRedSandstoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MossyStoneBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedDioriteStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MossyCobblestoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndStoneBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothSandstoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothQuartzStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GraniteStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AndesiteStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedNetherBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedAndesiteStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DioriteStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CobbledDeepslateStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedDeepslateStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateTileStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedGraniteSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothRedSandstoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MossyStoneBrickSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedDioriteSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MossyCobblestoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndStoneBrickSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothSandstoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmoothQuartzSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GraniteSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AndesiteSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedNetherBrickSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedAndesiteSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DioriteSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CobbledDeepslateSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedDeepslateSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateBrickSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeepslateTileSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Scaffolding { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Redstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedstoneTorch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedstoneBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Repeater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Comparator { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Piston { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StickyPiston { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SlimeBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HoneyBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Observer { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Hopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Dispenser { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Dropper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Lectern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Target { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Lever { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightningRod { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DaylightDetector { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SculkSensor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CalibratedSculkSensor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TripwireHook { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TrappedChest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Tnt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedstoneLamp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NoteBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StoneButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedBlackstoneButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StonePressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedBlackstonePressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightWeightedPressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HeavyWeightedPressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakPressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SprucePressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchPressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JunglePressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaPressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryPressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakPressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangrovePressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooPressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonPressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedPressurePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CopperDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExposedCopperDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeatheredCopperDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OxidizedCopperDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedCopperDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedExposedCopperDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedWeatheredCopperDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedOxidizedCopperDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CopperTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExposedCopperTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeatheredCopperTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OxidizedCopperTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedCopperTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedExposedCopperTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedWeatheredCopperTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedOxidizedCopperTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PoweredRail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DetectorRail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Rail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ActivatorRail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Saddle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Minecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChestMinecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FurnaceMinecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TntMinecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HopperMinecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CarrotOnAStick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedFungusOnAStick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Elytra { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakChestBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceChestBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchChestBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleChestBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaChestBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryChestBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakChestBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveChestBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooRaft { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooChestRaft { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StructureBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Jigsaw { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TurtleHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Scute { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FlintAndSteel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Apple { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Arrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Coal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Charcoal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Diamond { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Emerald { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LapisLazuli { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Quartz { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmethystShard { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RawIron { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronIngot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RawCopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CopperIngot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RawGold { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldIngot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteIngot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteScrap { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WoodenSword { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WoodenShovel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WoodenPickaxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WoodenAxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WoodenHoe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StoneSword { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StoneShovel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StonePickaxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StoneAxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StoneHoe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenSword { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenShovel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenPickaxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenAxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenHoe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronSword { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronShovel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronPickaxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronAxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronHoe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondSword { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondShovel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondPickaxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondAxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondHoe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteSword { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteShovel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheritePickaxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteAxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteHoe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Stick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bowl { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MushroomStew { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::String { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Feather { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Gunpowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WheatSeeds { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Wheat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bread { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LeatherHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LeatherChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LeatherLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LeatherBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChainmailHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChainmailChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChainmailLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChainmailBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Flint { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Porkchop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CookedPorkchop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Painting { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenApple { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnchantedGoldenApple { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherrySign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaterBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LavaBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PowderSnowBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Snowball { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Leather { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MilkBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PufferfishBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SalmonBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CodBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TropicalFishBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AxolotlBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TadpoleBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Brick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ClayBall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DriedKelpBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Paper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Book { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SlimeBall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Egg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Compass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RecoveryCompass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bundle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FishingRod { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Clock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Spyglass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GlowstoneDust { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cod { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Salmon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TropicalFish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Pufferfish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CookedCod { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CookedSalmon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InkSac { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GlowInkSac { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CocoaBeans { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackDye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BoneMeal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Sugar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cookie { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Crafter { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FilledMap { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Shears { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MelonSlice { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DriedKelp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PumpkinSeeds { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MelonSeeds { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Beef { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CookedBeef { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Chicken { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CookedChicken { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RottenFlesh { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnderPearl { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlazeRod { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GhastTear { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldNugget { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherWart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Potion { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GlassBottle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpiderEye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FermentedSpiderEye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlazePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagmaCream { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrewingStand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cauldron { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnderEye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GlisteringMelonSlice { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AllaySpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AxolotlSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BatSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BeeSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlazeSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BreezeSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CatSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CamelSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CaveSpiderSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChickenSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CodSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CowSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CreeperSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DolphinSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DonkeySpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DrownedSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ElderGuardianSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnderDragonSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndermanSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndermiteSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EvokerSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FoxSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FrogSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GhastSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GlowSquidSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoatSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GuardianSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HoglinSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HorseSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HuskSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronGolemSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LlamaSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagmaCubeSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MooshroomSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MuleSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OcelotSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PandaSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ParrotSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PhantomSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PigSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PiglinSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PiglinBruteSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PillagerSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolarBearSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PufferfishSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RabbitSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RavagerSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SalmonSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SheepSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ShulkerSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SilverfishSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SkeletonSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SkeletonHorseSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SlimeSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SnifferSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SnowGolemSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpiderSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SquidSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StraySpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StriderSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TadpoleSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TraderLlamaSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TropicalFishSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TurtleSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VexSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VillagerSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VindicatorSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WanderingTraderSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WardenSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WitchSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WitherSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WitherSkeletonSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WolfSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZoglinSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieHorseSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieVillagerSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombifiedPiglinSpawnEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExperienceBottle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FireCharge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WritableBook { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WrittenBook { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemFrame { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GlowItemFrame { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FlowerPot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Carrot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Potato { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BakedPotato { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PoisonousPotato { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Map { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenCarrot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SkeletonSkull { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WitherSkeletonSkull { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PlayerHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CreeperHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DragonHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PiglinHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherStar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PumpkinPie { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FireworkRocket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FireworkStar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnchantedBook { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherBrick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PrismarineShard { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PrismarineCrystals { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Rabbit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CookedRabbit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RabbitStew { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RabbitFoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RabbitHide { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ArmorStand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronHorseArmor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoldenHorseArmor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiamondHorseArmor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LeatherHorseArmor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Lead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NameTag { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CommandBlockMinecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Mutton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CookedMutton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndCrystal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChorusFruit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PoppedChorusFruit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TorchflowerSeeds { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PitcherPod { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Beetroot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BeetrootSeeds { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BeetrootSoup { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DragonBreath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SplashPotion { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpectralArrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TippedArrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LingeringPotion { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Shield { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TotemOfUndying { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ShulkerShell { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronNugget { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::KnowledgeBook { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DebugStick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDisc13 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscCat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscBlocks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscChirp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscFar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscMall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscMellohi { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscStal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscStrad { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscWard { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDisc11 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscWait { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscOtherside { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscRelic { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDisc5 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscPigstep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DiscFragment5 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Trident { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PhantomMembrane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NautilusShell { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HeartOfTheSea { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Crossbow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SuspiciousStew { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Loom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FlowerBannerPattern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CreeperBannerPattern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SkullBannerPattern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MojangBannerPattern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GlobeBannerPattern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PiglinBannerPattern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoatHorn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Composter { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Barrel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Smoker { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlastFurnace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CartographyTable { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FletchingTable { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Grindstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmithingTable { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Stonecutter { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bell { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Lantern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SoulLantern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SweetBerries { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GlowBerries { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Campfire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SoulCampfire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Shroomlight { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Honeycomb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BeeNest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Beehive { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HoneyBottle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HoneycombBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Lodestone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CryingObsidian { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Blackstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackstoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackstoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GildedBlackstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedBlackstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedBlackstoneSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedBlackstoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChiseledPolishedBlackstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedBlackstoneBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedBlackstoneBrickSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PolishedBlackstoneBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrackedPolishedBlackstoneBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RespawnAnchor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Candle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmallAmethystBud { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MediumAmethystBud { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LargeAmethystBud { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmethystCluster { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PointedDripstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OchreFroglight { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VerdantFroglight { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PearlescentFroglight { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Frogspawn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EchoShard { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Brush { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetheriteUpgradeSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SentryArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DuneArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CoastArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WildArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WardArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EyeArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VexArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TideArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SnoutArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RibArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpireArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WayfinderArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ShaperArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SilenceArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RaiserArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HostArmorTrimSmithingTemplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AnglerPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ArcherPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ArmsUpPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BladePotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrewerPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BurnPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DangerPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExplorerPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FriendPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HeartPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HeartbreakPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HowlPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MinerPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MournerPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PlentyPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PrizePotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SheafPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ShelterPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SkullPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SnortPotterySherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CopperGrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExposedCopperGrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeatheredCopperGrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OxidizedCopperGrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedCopperGrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedExposedCopperGrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedWeatheredCopperGrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedOxidizedCopperGrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CopperBulb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ExposedCopperBulb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeatheredCopperBulb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OxidizedCopperBulb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedCopperBulb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedExposedCopperBulb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedWeatheredCopperBulb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaxedOxidizedCopperBulb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TrialSpawner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TrialKey { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Water { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Lava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TallSeagrass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PistonHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MovingPiston { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WallTorch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Fire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SoulFire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedstoneWire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OakWallHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpruceWallHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BirchWallHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AcaciaWallHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CherryWallHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleWallHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOakWallHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MangroveWallHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonWallHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedWallHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooWallHangingSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedstoneWallTorch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SoulWallTorch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NetherPortal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AttachedPumpkinStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AttachedMelonStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PumpkinStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MelonStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WaterCauldron { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LavaCauldron { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PowderSnowCauldron { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndPortal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cocoa { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Tripwire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedTorchflower { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedOakSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedSpruceSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedBirchSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedJungleSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedAcaciaSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedCherrySapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedDarkOakSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedMangrovePropagule { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedFern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedDandelion { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedPoppy { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedBlueOrchid { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedAllium { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedAzureBluet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedRedTulip { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedOrangeTulip { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedWhiteTulip { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedPinkTulip { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedOxeyeDaisy { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedCornflower { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedLilyOfTheValley { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedWitherRose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedRedMushroom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedBrownMushroom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedDeadBush { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedCactus { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Carrots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Potatoes { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SkeletonWallSkull { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WitherSkeletonWallSkull { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieWallHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PlayerWallHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CreeperWallHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DragonWallHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PiglinWallHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TorchflowerCrop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PitcherCrop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Beetroots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndGateway { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FrostedIce { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::KelpPlant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadTubeCoralWallFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadBrainCoralWallFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadBubbleCoralWallFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadFireCoralWallFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DeadHornCoralWallFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TubeCoralWallFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrainCoralWallFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BubbleCoralWallFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FireCoralWallFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HornCoralWallFan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BambooSapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedBamboo { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VoidAir { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CaveAir { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BubbleColumn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SweetBerryBush { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeepingVinesPlant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TwistingVinesPlant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedCrimsonFungus { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedWarpedFungus { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedCrimsonRoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedWarpedRoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WhiteCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OrangeCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MagentaCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlueCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::YellowCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LimeCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PinkCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrayCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGrayCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CyanCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PurpleCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlueCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GreenCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlackCandleCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PowderSnow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CaveVines { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CaveVinesPlant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BigDripleafStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedAzaleaBush { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PottedFloweringAzaleaBush { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyAir { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGrass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDirt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCobblestone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySapling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBedrock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStationaryWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStationaryLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGravel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCoalOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLog { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySponge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLapisOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLapisBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDispenser { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySandstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyNoteBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBedBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPoweredRail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDetectorRail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPistonStickyBase { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWeb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLongGrass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDeadBush { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPistonBase { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPistonExtension { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPistonMovingPiece { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyYellowFlower { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedRose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBrownMushroom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedMushroom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDoubleStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBrick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyTnt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBookshelf { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMossyCobblestone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyObsidian { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyTorch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMobSpawner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyChest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedstoneWire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWorkbench { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCrops { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySoil { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFurnace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBurningFurnace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySignPost { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodenDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLadder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRails { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCobblestoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWallSign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLever { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStonePlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronDoorBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodPlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedstoneOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGlowingRedstoneOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedstoneTorchOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedstoneTorchOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStoneButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySnow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIce { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySnowBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCactus { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyClay { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySugarCaneBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyJukebox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPumpkin { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyNetherrack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySoulSand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGlowstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPortal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyJackOLantern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCakeBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiodeBlockOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiodeBlockOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStainedGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyTrapDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMonsterEggs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySmoothBrick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyHugeMushroom1 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyHugeMushroom2 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyThinGlass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMelonBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPumpkinStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMelonStem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyVine { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySmoothStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMycel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWaterLily { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyNetherBrick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyNetherFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyNetherBrickStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyNetherWarts { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEnchantmentTable { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBrewingStand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCauldron { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEnderPortal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEnderPortalFrame { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEnderStone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDragonEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedstoneLampOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedstoneLampOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodDoubleStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCocoa { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySandstoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEmeraldOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEnderChest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyTripwireHook { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyTripwire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEmeraldBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySpruceWoodStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBirchWoodStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyJungleWoodStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCommand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBeacon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCobbleWall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFlowerPot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCarrot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPotato { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodButton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySkull { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyAnvil { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyTrappedChest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldPlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronPlate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedstoneComparatorOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedstoneComparatorOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDaylightDetector { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedstoneBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyQuartzOre { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyHopper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyQuartzBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyQuartzStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyActivatorRail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDropper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStainedClay { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStainedGlassPane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLeaves2 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLog2 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyAcaciaStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDarkOakStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySlimeBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBarrier { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronTrapdoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPrismarine { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySeaLantern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyHayBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCarpet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyHardClay { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCoalBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPackedIce { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDoublePlant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStandingBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWallBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDaylightDetectorInverted { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedSandstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedSandstoneStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDoubleStoneSlab2 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStoneSlab2 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySpruceFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBirchFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyJungleFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDarkOakFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyAcaciaFenceGate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySpruceFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBirchFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyJungleFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDarkOakFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyAcaciaFence { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySpruceDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBirchDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyJungleDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyAcaciaDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDarkOakDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEndRod { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyChorusPlant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyChorusFlower { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPurpurBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPurpurPillar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPurpurStairs { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPurpurDoubleSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPurpurSlab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEndBricks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBeetrootBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGrassPath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEndGateway { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCommandRepeating { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCommandChain { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFrostedIce { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMagma { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyNetherWartBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedNetherBrick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBoneBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStructureVoid { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyObserver { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWhiteShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyOrangeShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMagentaShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLightBlueShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyYellowShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLimeShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPinkShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGrayShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySilverShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCyanShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPurpleShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBlueShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBrownShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGreenShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBlackShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWhiteGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyOrangeGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMagentaGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLightBlueGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyYellowGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLimeGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPinkGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGrayGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySilverGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCyanGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPurpleGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBlueGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBrownGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGreenGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBlackGlazedTerracotta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyConcrete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyConcretePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStructureBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronSpade { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronPickaxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronAxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFlintAndSteel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyApple { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyArrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCoal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamond { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronIngot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldIngot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronSword { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodSword { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodSpade { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodPickaxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodAxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStoneSword { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStoneSpade { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStonePickaxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStoneAxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondSword { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondSpade { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondPickaxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondAxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBowl { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMushroomSoup { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldSword { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldSpade { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldPickaxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldAxe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyString { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFeather { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySulphur { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodHoe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStoneHoe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronHoe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondHoe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldHoe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySeeds { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWheat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBread { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLeatherHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLeatherChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLeatherLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLeatherBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyChainmailHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyChainmailChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyChainmailLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyChainmailBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFlint { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPork { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGrilledPork { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPainting { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldenApple { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySign { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWoodDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWaterBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLavaBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMinecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySaddle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySnowBall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBoat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLeather { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMilkBucket { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyClayBrick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyClayBall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySugarCane { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPaper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBook { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySlimeBall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyStorageMinecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPoweredMinecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCompass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFishingRod { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWatch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGlowstoneDust { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRawFish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCookedFish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyInkSack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySugar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiode { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCookie { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMap { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyShears { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMelon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPumpkinSeeds { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMelonSeeds { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRawBeef { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCookedBeef { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRawChicken { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCookedChicken { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRottenFlesh { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEnderPearl { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBlazeRod { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGhastTear { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldNugget { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyNetherStalk { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPotion { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGlassBottle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySpiderEye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFermentedSpiderEye { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBlazePowder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMagmaCream { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBrewingStandItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCauldronItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEyeOfEnder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySpeckledMelon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMonsterEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyExpBottle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFireball { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBookAndQuill { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyWrittenBook { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEmerald { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyItemFrame { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFlowerPotItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCarrotItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPotatoItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBakedPotato { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPoisonousPotato { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEmptyMap { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldenCarrot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySkullItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCarrotStick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyNetherStar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPumpkinPie { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFirework { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyFireworkCharge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEnchantedBook { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRedstoneComparator { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyNetherBrickItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyQuartz { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyExplosiveMinecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyHopperMinecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPrismarineShard { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyPrismarineCrystals { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRabbit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCookedRabbit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRabbitStew { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRabbitFoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRabbitHide { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyArmorStand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronBarding { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldBarding { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDiamondBarding { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLeash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyNameTag { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCommandMinecart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyMutton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyCookedMutton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBanner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyEndCrystal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySpruceDoorItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBirchDoorItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyJungleDoorItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyAcaciaDoorItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDarkOakDoorItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyChorusFruit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyChorusFruitPopped { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBeetroot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBeetrootSeeds { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBeetrootSoup { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyDragonsBreath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySplashPotion { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacySpectralArrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyTippedArrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyLingeringPotion { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyShield { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyElytra { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBoatSpruce { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBoatBirch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBoatJungle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBoatAcacia { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyBoatDarkOak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyTotem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyShulkerShell { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyIronNugget { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyKnowledgeBook { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGoldRecord { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyGreenRecord { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRecord3 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRecord4 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRecord5 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRecord6 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRecord7 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRecord8 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRecord9 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRecord10 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRecord11 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LegacyRecord12 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for Material<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Material from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Material")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Material object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "AIR" => Ok(Material::Air { inner: MaterialStruct::from_raw(env,obj)?}),"STONE" => Ok(Material::Stone { inner: MaterialStruct::from_raw(env,obj)?}),"GRANITE" => Ok(Material::Granite { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_GRANITE" => Ok(Material::PolishedGranite { inner: MaterialStruct::from_raw(env,obj)?}),"DIORITE" => Ok(Material::Diorite { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_DIORITE" => Ok(Material::PolishedDiorite { inner: MaterialStruct::from_raw(env,obj)?}),"ANDESITE" => Ok(Material::Andesite { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_ANDESITE" => Ok(Material::PolishedAndesite { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE" => Ok(Material::Deepslate { inner: MaterialStruct::from_raw(env,obj)?}),"COBBLED_DEEPSLATE" => Ok(Material::CobbledDeepslate { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_DEEPSLATE" => Ok(Material::PolishedDeepslate { inner: MaterialStruct::from_raw(env,obj)?}),"CALCITE" => Ok(Material::Calcite { inner: MaterialStruct::from_raw(env,obj)?}),"TUFF" => Ok(Material::Tuff { inner: MaterialStruct::from_raw(env,obj)?}),"TUFF_SLAB" => Ok(Material::TuffSlab { inner: MaterialStruct::from_raw(env,obj)?}),"TUFF_STAIRS" => Ok(Material::TuffStairs { inner: MaterialStruct::from_raw(env,obj)?}),"TUFF_WALL" => Ok(Material::TuffWall { inner: MaterialStruct::from_raw(env,obj)?}),"CHISELED_TUFF" => Ok(Material::ChiseledTuff { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_TUFF" => Ok(Material::PolishedTuff { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_TUFF_SLAB" => Ok(Material::PolishedTuffSlab { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_TUFF_STAIRS" => Ok(Material::PolishedTuffStairs { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_TUFF_WALL" => Ok(Material::PolishedTuffWall { inner: MaterialStruct::from_raw(env,obj)?}),"TUFF_BRICKS" => Ok(Material::TuffBricks { inner: MaterialStruct::from_raw(env,obj)?}),"TUFF_BRICK_SLAB" => Ok(Material::TuffBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),"TUFF_BRICK_STAIRS" => Ok(Material::TuffBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"TUFF_BRICK_WALL" => Ok(Material::TuffBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),"CHISELED_TUFF_BRICKS" => Ok(Material::ChiseledTuffBricks { inner: MaterialStruct::from_raw(env,obj)?}),"DRIPSTONE_BLOCK" => Ok(Material::DripstoneBlock { inner: MaterialStruct::from_raw(env,obj)?}),"GRASS_BLOCK" => Ok(Material::GrassBlock { inner: MaterialStruct::from_raw(env,obj)?}),"DIRT" => Ok(Material::Dirt { inner: MaterialStruct::from_raw(env,obj)?}),"COARSE_DIRT" => Ok(Material::CoarseDirt { inner: MaterialStruct::from_raw(env,obj)?}),"PODZOL" => Ok(Material::Podzol { inner: MaterialStruct::from_raw(env,obj)?}),"ROOTED_DIRT" => Ok(Material::RootedDirt { inner: MaterialStruct::from_raw(env,obj)?}),"MUD" => Ok(Material::Mud { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_NYLIUM" => Ok(Material::CrimsonNylium { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_NYLIUM" => Ok(Material::WarpedNylium { inner: MaterialStruct::from_raw(env,obj)?}),"COBBLESTONE" => Ok(Material::Cobblestone { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_PLANKS" => Ok(Material::OakPlanks { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_PLANKS" => Ok(Material::SprucePlanks { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_PLANKS" => Ok(Material::BirchPlanks { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_PLANKS" => Ok(Material::JunglePlanks { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_PLANKS" => Ok(Material::AcaciaPlanks { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_PLANKS" => Ok(Material::CherryPlanks { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_PLANKS" => Ok(Material::DarkOakPlanks { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_PLANKS" => Ok(Material::MangrovePlanks { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_PLANKS" => Ok(Material::BambooPlanks { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_PLANKS" => Ok(Material::CrimsonPlanks { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_PLANKS" => Ok(Material::WarpedPlanks { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_MOSAIC" => Ok(Material::BambooMosaic { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_SAPLING" => Ok(Material::OakSapling { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_SAPLING" => Ok(Material::SpruceSapling { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_SAPLING" => Ok(Material::BirchSapling { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_SAPLING" => Ok(Material::JungleSapling { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_SAPLING" => Ok(Material::AcaciaSapling { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_SAPLING" => Ok(Material::CherrySapling { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_SAPLING" => Ok(Material::DarkOakSapling { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_PROPAGULE" => Ok(Material::MangrovePropagule { inner: MaterialStruct::from_raw(env,obj)?}),"BEDROCK" => Ok(Material::Bedrock { inner: MaterialStruct::from_raw(env,obj)?}),"SAND" => Ok(Material::Sand { inner: MaterialStruct::from_raw(env,obj)?}),"SUSPICIOUS_SAND" => Ok(Material::SuspiciousSand { inner: MaterialStruct::from_raw(env,obj)?}),"SUSPICIOUS_GRAVEL" => Ok(Material::SuspiciousGravel { inner: MaterialStruct::from_raw(env,obj)?}),"RED_SAND" => Ok(Material::RedSand { inner: MaterialStruct::from_raw(env,obj)?}),"GRAVEL" => Ok(Material::Gravel { inner: MaterialStruct::from_raw(env,obj)?}),"COAL_ORE" => Ok(Material::CoalOre { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_COAL_ORE" => Ok(Material::DeepslateCoalOre { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_ORE" => Ok(Material::IronOre { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_IRON_ORE" => Ok(Material::DeepslateIronOre { inner: MaterialStruct::from_raw(env,obj)?}),"COPPER_ORE" => Ok(Material::CopperOre { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_COPPER_ORE" => Ok(Material::DeepslateCopperOre { inner: MaterialStruct::from_raw(env,obj)?}),"GOLD_ORE" => Ok(Material::GoldOre { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_GOLD_ORE" => Ok(Material::DeepslateGoldOre { inner: MaterialStruct::from_raw(env,obj)?}),"REDSTONE_ORE" => Ok(Material::RedstoneOre { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_REDSTONE_ORE" => Ok(Material::DeepslateRedstoneOre { inner: MaterialStruct::from_raw(env,obj)?}),"EMERALD_ORE" => Ok(Material::EmeraldOre { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_EMERALD_ORE" => Ok(Material::DeepslateEmeraldOre { inner: MaterialStruct::from_raw(env,obj)?}),"LAPIS_ORE" => Ok(Material::LapisOre { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_LAPIS_ORE" => Ok(Material::DeepslateLapisOre { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_ORE" => Ok(Material::DiamondOre { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_DIAMOND_ORE" => Ok(Material::DeepslateDiamondOre { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_GOLD_ORE" => Ok(Material::NetherGoldOre { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_QUARTZ_ORE" => Ok(Material::NetherQuartzOre { inner: MaterialStruct::from_raw(env,obj)?}),"ANCIENT_DEBRIS" => Ok(Material::AncientDebris { inner: MaterialStruct::from_raw(env,obj)?}),"COAL_BLOCK" => Ok(Material::CoalBlock { inner: MaterialStruct::from_raw(env,obj)?}),"RAW_IRON_BLOCK" => Ok(Material::RawIronBlock { inner: MaterialStruct::from_raw(env,obj)?}),"RAW_COPPER_BLOCK" => Ok(Material::RawCopperBlock { inner: MaterialStruct::from_raw(env,obj)?}),"RAW_GOLD_BLOCK" => Ok(Material::RawGoldBlock { inner: MaterialStruct::from_raw(env,obj)?}),"AMETHYST_BLOCK" => Ok(Material::AmethystBlock { inner: MaterialStruct::from_raw(env,obj)?}),"BUDDING_AMETHYST" => Ok(Material::BuddingAmethyst { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_BLOCK" => Ok(Material::IronBlock { inner: MaterialStruct::from_raw(env,obj)?}),"COPPER_BLOCK" => Ok(Material::CopperBlock { inner: MaterialStruct::from_raw(env,obj)?}),"GOLD_BLOCK" => Ok(Material::GoldBlock { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_BLOCK" => Ok(Material::DiamondBlock { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_BLOCK" => Ok(Material::NetheriteBlock { inner: MaterialStruct::from_raw(env,obj)?}),"EXPOSED_COPPER" => Ok(Material::ExposedCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WEATHERED_COPPER" => Ok(Material::WeatheredCopper { inner: MaterialStruct::from_raw(env,obj)?}),"OXIDIZED_COPPER" => Ok(Material::OxidizedCopper { inner: MaterialStruct::from_raw(env,obj)?}),"CHISELED_COPPER" => Ok(Material::ChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),"EXPOSED_CHISELED_COPPER" => Ok(Material::ExposedChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WEATHERED_CHISELED_COPPER" => Ok(Material::WeatheredChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),"OXIDIZED_CHISELED_COPPER" => Ok(Material::OxidizedChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),"CUT_COPPER" => Ok(Material::CutCopper { inner: MaterialStruct::from_raw(env,obj)?}),"EXPOSED_CUT_COPPER" => Ok(Material::ExposedCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WEATHERED_CUT_COPPER" => Ok(Material::WeatheredCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),"OXIDIZED_CUT_COPPER" => Ok(Material::OxidizedCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),"CUT_COPPER_STAIRS" => Ok(Material::CutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),"EXPOSED_CUT_COPPER_STAIRS" => Ok(Material::ExposedCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),"WEATHERED_CUT_COPPER_STAIRS" => Ok(Material::WeatheredCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),"OXIDIZED_CUT_COPPER_STAIRS" => Ok(Material::OxidizedCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),"CUT_COPPER_SLAB" => Ok(Material::CutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),"EXPOSED_CUT_COPPER_SLAB" => Ok(Material::ExposedCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),"WEATHERED_CUT_COPPER_SLAB" => Ok(Material::WeatheredCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),"OXIDIZED_CUT_COPPER_SLAB" => Ok(Material::OxidizedCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_COPPER_BLOCK" => Ok(Material::WaxedCopperBlock { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_EXPOSED_COPPER" => Ok(Material::WaxedExposedCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_WEATHERED_COPPER" => Ok(Material::WaxedWeatheredCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_OXIDIZED_COPPER" => Ok(Material::WaxedOxidizedCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_CHISELED_COPPER" => Ok(Material::WaxedChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_EXPOSED_CHISELED_COPPER" => Ok(Material::WaxedExposedChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_WEATHERED_CHISELED_COPPER" => Ok(Material::WaxedWeatheredChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_OXIDIZED_CHISELED_COPPER" => Ok(Material::WaxedOxidizedChiseledCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_CUT_COPPER" => Ok(Material::WaxedCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_EXPOSED_CUT_COPPER" => Ok(Material::WaxedExposedCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_WEATHERED_CUT_COPPER" => Ok(Material::WaxedWeatheredCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_OXIDIZED_CUT_COPPER" => Ok(Material::WaxedOxidizedCutCopper { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_CUT_COPPER_STAIRS" => Ok(Material::WaxedCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_EXPOSED_CUT_COPPER_STAIRS" => Ok(Material::WaxedExposedCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_WEATHERED_CUT_COPPER_STAIRS" => Ok(Material::WaxedWeatheredCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_OXIDIZED_CUT_COPPER_STAIRS" => Ok(Material::WaxedOxidizedCutCopperStairs { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_CUT_COPPER_SLAB" => Ok(Material::WaxedCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_EXPOSED_CUT_COPPER_SLAB" => Ok(Material::WaxedExposedCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_WEATHERED_CUT_COPPER_SLAB" => Ok(Material::WaxedWeatheredCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_OXIDIZED_CUT_COPPER_SLAB" => Ok(Material::WaxedOxidizedCutCopperSlab { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_LOG" => Ok(Material::OakLog { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_LOG" => Ok(Material::SpruceLog { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_LOG" => Ok(Material::BirchLog { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_LOG" => Ok(Material::JungleLog { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_LOG" => Ok(Material::AcaciaLog { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_LOG" => Ok(Material::CherryLog { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_LOG" => Ok(Material::DarkOakLog { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_LOG" => Ok(Material::MangroveLog { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_ROOTS" => Ok(Material::MangroveRoots { inner: MaterialStruct::from_raw(env,obj)?}),"MUDDY_MANGROVE_ROOTS" => Ok(Material::MuddyMangroveRoots { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_STEM" => Ok(Material::CrimsonStem { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_STEM" => Ok(Material::WarpedStem { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_BLOCK" => Ok(Material::BambooBlock { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_OAK_LOG" => Ok(Material::StrippedOakLog { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_SPRUCE_LOG" => Ok(Material::StrippedSpruceLog { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_BIRCH_LOG" => Ok(Material::StrippedBirchLog { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_JUNGLE_LOG" => Ok(Material::StrippedJungleLog { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_ACACIA_LOG" => Ok(Material::StrippedAcaciaLog { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_CHERRY_LOG" => Ok(Material::StrippedCherryLog { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_DARK_OAK_LOG" => Ok(Material::StrippedDarkOakLog { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_MANGROVE_LOG" => Ok(Material::StrippedMangroveLog { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_CRIMSON_STEM" => Ok(Material::StrippedCrimsonStem { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_WARPED_STEM" => Ok(Material::StrippedWarpedStem { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_OAK_WOOD" => Ok(Material::StrippedOakWood { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_SPRUCE_WOOD" => Ok(Material::StrippedSpruceWood { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_BIRCH_WOOD" => Ok(Material::StrippedBirchWood { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_JUNGLE_WOOD" => Ok(Material::StrippedJungleWood { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_ACACIA_WOOD" => Ok(Material::StrippedAcaciaWood { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_CHERRY_WOOD" => Ok(Material::StrippedCherryWood { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_DARK_OAK_WOOD" => Ok(Material::StrippedDarkOakWood { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_MANGROVE_WOOD" => Ok(Material::StrippedMangroveWood { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_CRIMSON_HYPHAE" => Ok(Material::StrippedCrimsonHyphae { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_WARPED_HYPHAE" => Ok(Material::StrippedWarpedHyphae { inner: MaterialStruct::from_raw(env,obj)?}),"STRIPPED_BAMBOO_BLOCK" => Ok(Material::StrippedBambooBlock { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_WOOD" => Ok(Material::OakWood { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_WOOD" => Ok(Material::SpruceWood { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_WOOD" => Ok(Material::BirchWood { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_WOOD" => Ok(Material::JungleWood { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_WOOD" => Ok(Material::AcaciaWood { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_WOOD" => Ok(Material::CherryWood { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_WOOD" => Ok(Material::DarkOakWood { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_WOOD" => Ok(Material::MangroveWood { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_HYPHAE" => Ok(Material::CrimsonHyphae { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_HYPHAE" => Ok(Material::WarpedHyphae { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_LEAVES" => Ok(Material::OakLeaves { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_LEAVES" => Ok(Material::SpruceLeaves { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_LEAVES" => Ok(Material::BirchLeaves { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_LEAVES" => Ok(Material::JungleLeaves { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_LEAVES" => Ok(Material::AcaciaLeaves { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_LEAVES" => Ok(Material::CherryLeaves { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_LEAVES" => Ok(Material::DarkOakLeaves { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_LEAVES" => Ok(Material::MangroveLeaves { inner: MaterialStruct::from_raw(env,obj)?}),"AZALEA_LEAVES" => Ok(Material::AzaleaLeaves { inner: MaterialStruct::from_raw(env,obj)?}),"FLOWERING_AZALEA_LEAVES" => Ok(Material::FloweringAzaleaLeaves { inner: MaterialStruct::from_raw(env,obj)?}),"SPONGE" => Ok(Material::Sponge { inner: MaterialStruct::from_raw(env,obj)?}),"WET_SPONGE" => Ok(Material::WetSponge { inner: MaterialStruct::from_raw(env,obj)?}),"GLASS" => Ok(Material::Glass { inner: MaterialStruct::from_raw(env,obj)?}),"TINTED_GLASS" => Ok(Material::TintedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"LAPIS_BLOCK" => Ok(Material::LapisBlock { inner: MaterialStruct::from_raw(env,obj)?}),"SANDSTONE" => Ok(Material::Sandstone { inner: MaterialStruct::from_raw(env,obj)?}),"CHISELED_SANDSTONE" => Ok(Material::ChiseledSandstone { inner: MaterialStruct::from_raw(env,obj)?}),"CUT_SANDSTONE" => Ok(Material::CutSandstone { inner: MaterialStruct::from_raw(env,obj)?}),"COBWEB" => Ok(Material::Cobweb { inner: MaterialStruct::from_raw(env,obj)?}),"SHORT_GRASS" => Ok(Material::ShortGrass { inner: MaterialStruct::from_raw(env,obj)?}),"FERN" => Ok(Material::Fern { inner: MaterialStruct::from_raw(env,obj)?}),"AZALEA" => Ok(Material::Azalea { inner: MaterialStruct::from_raw(env,obj)?}),"FLOWERING_AZALEA" => Ok(Material::FloweringAzalea { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_BUSH" => Ok(Material::DeadBush { inner: MaterialStruct::from_raw(env,obj)?}),"SEAGRASS" => Ok(Material::Seagrass { inner: MaterialStruct::from_raw(env,obj)?}),"SEA_PICKLE" => Ok(Material::SeaPickle { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_WOOL" => Ok(Material::WhiteWool { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_WOOL" => Ok(Material::OrangeWool { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_WOOL" => Ok(Material::MagentaWool { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_WOOL" => Ok(Material::LightBlueWool { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_WOOL" => Ok(Material::YellowWool { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_WOOL" => Ok(Material::LimeWool { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_WOOL" => Ok(Material::PinkWool { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_WOOL" => Ok(Material::GrayWool { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_WOOL" => Ok(Material::LightGrayWool { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_WOOL" => Ok(Material::CyanWool { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_WOOL" => Ok(Material::PurpleWool { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_WOOL" => Ok(Material::BlueWool { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_WOOL" => Ok(Material::BrownWool { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_WOOL" => Ok(Material::GreenWool { inner: MaterialStruct::from_raw(env,obj)?}),"RED_WOOL" => Ok(Material::RedWool { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_WOOL" => Ok(Material::BlackWool { inner: MaterialStruct::from_raw(env,obj)?}),"DANDELION" => Ok(Material::Dandelion { inner: MaterialStruct::from_raw(env,obj)?}),"POPPY" => Ok(Material::Poppy { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_ORCHID" => Ok(Material::BlueOrchid { inner: MaterialStruct::from_raw(env,obj)?}),"ALLIUM" => Ok(Material::Allium { inner: MaterialStruct::from_raw(env,obj)?}),"AZURE_BLUET" => Ok(Material::AzureBluet { inner: MaterialStruct::from_raw(env,obj)?}),"RED_TULIP" => Ok(Material::RedTulip { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_TULIP" => Ok(Material::OrangeTulip { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_TULIP" => Ok(Material::WhiteTulip { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_TULIP" => Ok(Material::PinkTulip { inner: MaterialStruct::from_raw(env,obj)?}),"OXEYE_DAISY" => Ok(Material::OxeyeDaisy { inner: MaterialStruct::from_raw(env,obj)?}),"CORNFLOWER" => Ok(Material::Cornflower { inner: MaterialStruct::from_raw(env,obj)?}),"LILY_OF_THE_VALLEY" => Ok(Material::LilyOfTheValley { inner: MaterialStruct::from_raw(env,obj)?}),"WITHER_ROSE" => Ok(Material::WitherRose { inner: MaterialStruct::from_raw(env,obj)?}),"TORCHFLOWER" => Ok(Material::Torchflower { inner: MaterialStruct::from_raw(env,obj)?}),"PITCHER_PLANT" => Ok(Material::PitcherPlant { inner: MaterialStruct::from_raw(env,obj)?}),"SPORE_BLOSSOM" => Ok(Material::SporeBlossom { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_MUSHROOM" => Ok(Material::BrownMushroom { inner: MaterialStruct::from_raw(env,obj)?}),"RED_MUSHROOM" => Ok(Material::RedMushroom { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_FUNGUS" => Ok(Material::CrimsonFungus { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_FUNGUS" => Ok(Material::WarpedFungus { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_ROOTS" => Ok(Material::CrimsonRoots { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_ROOTS" => Ok(Material::WarpedRoots { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_SPROUTS" => Ok(Material::NetherSprouts { inner: MaterialStruct::from_raw(env,obj)?}),"WEEPING_VINES" => Ok(Material::WeepingVines { inner: MaterialStruct::from_raw(env,obj)?}),"TWISTING_VINES" => Ok(Material::TwistingVines { inner: MaterialStruct::from_raw(env,obj)?}),"SUGAR_CANE" => Ok(Material::SugarCane { inner: MaterialStruct::from_raw(env,obj)?}),"KELP" => Ok(Material::Kelp { inner: MaterialStruct::from_raw(env,obj)?}),"MOSS_CARPET" => Ok(Material::MossCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_PETALS" => Ok(Material::PinkPetals { inner: MaterialStruct::from_raw(env,obj)?}),"MOSS_BLOCK" => Ok(Material::MossBlock { inner: MaterialStruct::from_raw(env,obj)?}),"HANGING_ROOTS" => Ok(Material::HangingRoots { inner: MaterialStruct::from_raw(env,obj)?}),"BIG_DRIPLEAF" => Ok(Material::BigDripleaf { inner: MaterialStruct::from_raw(env,obj)?}),"SMALL_DRIPLEAF" => Ok(Material::SmallDripleaf { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO" => Ok(Material::Bamboo { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_SLAB" => Ok(Material::OakSlab { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_SLAB" => Ok(Material::SpruceSlab { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_SLAB" => Ok(Material::BirchSlab { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_SLAB" => Ok(Material::JungleSlab { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_SLAB" => Ok(Material::AcaciaSlab { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_SLAB" => Ok(Material::CherrySlab { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_SLAB" => Ok(Material::DarkOakSlab { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_SLAB" => Ok(Material::MangroveSlab { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_SLAB" => Ok(Material::BambooSlab { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_MOSAIC_SLAB" => Ok(Material::BambooMosaicSlab { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_SLAB" => Ok(Material::CrimsonSlab { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_SLAB" => Ok(Material::WarpedSlab { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_SLAB" => Ok(Material::StoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_STONE_SLAB" => Ok(Material::SmoothStoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"SANDSTONE_SLAB" => Ok(Material::SandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"CUT_SANDSTONE_SLAB" => Ok(Material::CutSandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"PETRIFIED_OAK_SLAB" => Ok(Material::PetrifiedOakSlab { inner: MaterialStruct::from_raw(env,obj)?}),"COBBLESTONE_SLAB" => Ok(Material::CobblestoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"BRICK_SLAB" => Ok(Material::BrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_BRICK_SLAB" => Ok(Material::StoneBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),"MUD_BRICK_SLAB" => Ok(Material::MudBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_BRICK_SLAB" => Ok(Material::NetherBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),"QUARTZ_SLAB" => Ok(Material::QuartzSlab { inner: MaterialStruct::from_raw(env,obj)?}),"RED_SANDSTONE_SLAB" => Ok(Material::RedSandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"CUT_RED_SANDSTONE_SLAB" => Ok(Material::CutRedSandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"PURPUR_SLAB" => Ok(Material::PurpurSlab { inner: MaterialStruct::from_raw(env,obj)?}),"PRISMARINE_SLAB" => Ok(Material::PrismarineSlab { inner: MaterialStruct::from_raw(env,obj)?}),"PRISMARINE_BRICK_SLAB" => Ok(Material::PrismarineBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_PRISMARINE_SLAB" => Ok(Material::DarkPrismarineSlab { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_QUARTZ" => Ok(Material::SmoothQuartz { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_RED_SANDSTONE" => Ok(Material::SmoothRedSandstone { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_SANDSTONE" => Ok(Material::SmoothSandstone { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_STONE" => Ok(Material::SmoothStone { inner: MaterialStruct::from_raw(env,obj)?}),"BRICKS" => Ok(Material::Bricks { inner: MaterialStruct::from_raw(env,obj)?}),"BOOKSHELF" => Ok(Material::Bookshelf { inner: MaterialStruct::from_raw(env,obj)?}),"CHISELED_BOOKSHELF" => Ok(Material::ChiseledBookshelf { inner: MaterialStruct::from_raw(env,obj)?}),"DECORATED_POT" => Ok(Material::DecoratedPot { inner: MaterialStruct::from_raw(env,obj)?}),"MOSSY_COBBLESTONE" => Ok(Material::MossyCobblestone { inner: MaterialStruct::from_raw(env,obj)?}),"OBSIDIAN" => Ok(Material::Obsidian { inner: MaterialStruct::from_raw(env,obj)?}),"TORCH" => Ok(Material::Torch { inner: MaterialStruct::from_raw(env,obj)?}),"END_ROD" => Ok(Material::EndRod { inner: MaterialStruct::from_raw(env,obj)?}),"CHORUS_PLANT" => Ok(Material::ChorusPlant { inner: MaterialStruct::from_raw(env,obj)?}),"CHORUS_FLOWER" => Ok(Material::ChorusFlower { inner: MaterialStruct::from_raw(env,obj)?}),"PURPUR_BLOCK" => Ok(Material::PurpurBlock { inner: MaterialStruct::from_raw(env,obj)?}),"PURPUR_PILLAR" => Ok(Material::PurpurPillar { inner: MaterialStruct::from_raw(env,obj)?}),"PURPUR_STAIRS" => Ok(Material::PurpurStairs { inner: MaterialStruct::from_raw(env,obj)?}),"SPAWNER" => Ok(Material::Spawner { inner: MaterialStruct::from_raw(env,obj)?}),"CHEST" => Ok(Material::Chest { inner: MaterialStruct::from_raw(env,obj)?}),"CRAFTING_TABLE" => Ok(Material::CraftingTable { inner: MaterialStruct::from_raw(env,obj)?}),"FARMLAND" => Ok(Material::Farmland { inner: MaterialStruct::from_raw(env,obj)?}),"FURNACE" => Ok(Material::Furnace { inner: MaterialStruct::from_raw(env,obj)?}),"LADDER" => Ok(Material::Ladder { inner: MaterialStruct::from_raw(env,obj)?}),"COBBLESTONE_STAIRS" => Ok(Material::CobblestoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"SNOW" => Ok(Material::Snow { inner: MaterialStruct::from_raw(env,obj)?}),"ICE" => Ok(Material::Ice { inner: MaterialStruct::from_raw(env,obj)?}),"SNOW_BLOCK" => Ok(Material::SnowBlock { inner: MaterialStruct::from_raw(env,obj)?}),"CACTUS" => Ok(Material::Cactus { inner: MaterialStruct::from_raw(env,obj)?}),"CLAY" => Ok(Material::Clay { inner: MaterialStruct::from_raw(env,obj)?}),"JUKEBOX" => Ok(Material::Jukebox { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_FENCE" => Ok(Material::OakFence { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_FENCE" => Ok(Material::SpruceFence { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_FENCE" => Ok(Material::BirchFence { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_FENCE" => Ok(Material::JungleFence { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_FENCE" => Ok(Material::AcaciaFence { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_FENCE" => Ok(Material::CherryFence { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_FENCE" => Ok(Material::DarkOakFence { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_FENCE" => Ok(Material::MangroveFence { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_FENCE" => Ok(Material::BambooFence { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_FENCE" => Ok(Material::CrimsonFence { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_FENCE" => Ok(Material::WarpedFence { inner: MaterialStruct::from_raw(env,obj)?}),"PUMPKIN" => Ok(Material::Pumpkin { inner: MaterialStruct::from_raw(env,obj)?}),"CARVED_PUMPKIN" => Ok(Material::CarvedPumpkin { inner: MaterialStruct::from_raw(env,obj)?}),"JACK_O_LANTERN" => Ok(Material::JackOLantern { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERRACK" => Ok(Material::Netherrack { inner: MaterialStruct::from_raw(env,obj)?}),"SOUL_SAND" => Ok(Material::SoulSand { inner: MaterialStruct::from_raw(env,obj)?}),"SOUL_SOIL" => Ok(Material::SoulSoil { inner: MaterialStruct::from_raw(env,obj)?}),"BASALT" => Ok(Material::Basalt { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_BASALT" => Ok(Material::PolishedBasalt { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_BASALT" => Ok(Material::SmoothBasalt { inner: MaterialStruct::from_raw(env,obj)?}),"SOUL_TORCH" => Ok(Material::SoulTorch { inner: MaterialStruct::from_raw(env,obj)?}),"GLOWSTONE" => Ok(Material::Glowstone { inner: MaterialStruct::from_raw(env,obj)?}),"INFESTED_STONE" => Ok(Material::InfestedStone { inner: MaterialStruct::from_raw(env,obj)?}),"INFESTED_COBBLESTONE" => Ok(Material::InfestedCobblestone { inner: MaterialStruct::from_raw(env,obj)?}),"INFESTED_STONE_BRICKS" => Ok(Material::InfestedStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),"INFESTED_MOSSY_STONE_BRICKS" => Ok(Material::InfestedMossyStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),"INFESTED_CRACKED_STONE_BRICKS" => Ok(Material::InfestedCrackedStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),"INFESTED_CHISELED_STONE_BRICKS" => Ok(Material::InfestedChiseledStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),"INFESTED_DEEPSLATE" => Ok(Material::InfestedDeepslate { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_BRICKS" => Ok(Material::StoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),"MOSSY_STONE_BRICKS" => Ok(Material::MossyStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),"CRACKED_STONE_BRICKS" => Ok(Material::CrackedStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),"CHISELED_STONE_BRICKS" => Ok(Material::ChiseledStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),"PACKED_MUD" => Ok(Material::PackedMud { inner: MaterialStruct::from_raw(env,obj)?}),"MUD_BRICKS" => Ok(Material::MudBricks { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_BRICKS" => Ok(Material::DeepslateBricks { inner: MaterialStruct::from_raw(env,obj)?}),"CRACKED_DEEPSLATE_BRICKS" => Ok(Material::CrackedDeepslateBricks { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_TILES" => Ok(Material::DeepslateTiles { inner: MaterialStruct::from_raw(env,obj)?}),"CRACKED_DEEPSLATE_TILES" => Ok(Material::CrackedDeepslateTiles { inner: MaterialStruct::from_raw(env,obj)?}),"CHISELED_DEEPSLATE" => Ok(Material::ChiseledDeepslate { inner: MaterialStruct::from_raw(env,obj)?}),"REINFORCED_DEEPSLATE" => Ok(Material::ReinforcedDeepslate { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_MUSHROOM_BLOCK" => Ok(Material::BrownMushroomBlock { inner: MaterialStruct::from_raw(env,obj)?}),"RED_MUSHROOM_BLOCK" => Ok(Material::RedMushroomBlock { inner: MaterialStruct::from_raw(env,obj)?}),"MUSHROOM_STEM" => Ok(Material::MushroomStem { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_BARS" => Ok(Material::IronBars { inner: MaterialStruct::from_raw(env,obj)?}),"CHAIN" => Ok(Material::Chain { inner: MaterialStruct::from_raw(env,obj)?}),"GLASS_PANE" => Ok(Material::GlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"MELON" => Ok(Material::Melon { inner: MaterialStruct::from_raw(env,obj)?}),"VINE" => Ok(Material::Vine { inner: MaterialStruct::from_raw(env,obj)?}),"GLOW_LICHEN" => Ok(Material::GlowLichen { inner: MaterialStruct::from_raw(env,obj)?}),"BRICK_STAIRS" => Ok(Material::BrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_BRICK_STAIRS" => Ok(Material::StoneBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"MUD_BRICK_STAIRS" => Ok(Material::MudBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"MYCELIUM" => Ok(Material::Mycelium { inner: MaterialStruct::from_raw(env,obj)?}),"LILY_PAD" => Ok(Material::LilyPad { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_BRICKS" => Ok(Material::NetherBricks { inner: MaterialStruct::from_raw(env,obj)?}),"CRACKED_NETHER_BRICKS" => Ok(Material::CrackedNetherBricks { inner: MaterialStruct::from_raw(env,obj)?}),"CHISELED_NETHER_BRICKS" => Ok(Material::ChiseledNetherBricks { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_BRICK_FENCE" => Ok(Material::NetherBrickFence { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_BRICK_STAIRS" => Ok(Material::NetherBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"SCULK" => Ok(Material::Sculk { inner: MaterialStruct::from_raw(env,obj)?}),"SCULK_VEIN" => Ok(Material::SculkVein { inner: MaterialStruct::from_raw(env,obj)?}),"SCULK_CATALYST" => Ok(Material::SculkCatalyst { inner: MaterialStruct::from_raw(env,obj)?}),"SCULK_SHRIEKER" => Ok(Material::SculkShrieker { inner: MaterialStruct::from_raw(env,obj)?}),"ENCHANTING_TABLE" => Ok(Material::EnchantingTable { inner: MaterialStruct::from_raw(env,obj)?}),"END_PORTAL_FRAME" => Ok(Material::EndPortalFrame { inner: MaterialStruct::from_raw(env,obj)?}),"END_STONE" => Ok(Material::EndStone { inner: MaterialStruct::from_raw(env,obj)?}),"END_STONE_BRICKS" => Ok(Material::EndStoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),"DRAGON_EGG" => Ok(Material::DragonEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SANDSTONE_STAIRS" => Ok(Material::SandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"ENDER_CHEST" => Ok(Material::EnderChest { inner: MaterialStruct::from_raw(env,obj)?}),"EMERALD_BLOCK" => Ok(Material::EmeraldBlock { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_STAIRS" => Ok(Material::OakStairs { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_STAIRS" => Ok(Material::SpruceStairs { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_STAIRS" => Ok(Material::BirchStairs { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_STAIRS" => Ok(Material::JungleStairs { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_STAIRS" => Ok(Material::AcaciaStairs { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_STAIRS" => Ok(Material::CherryStairs { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_STAIRS" => Ok(Material::DarkOakStairs { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_STAIRS" => Ok(Material::MangroveStairs { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_STAIRS" => Ok(Material::BambooStairs { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_MOSAIC_STAIRS" => Ok(Material::BambooMosaicStairs { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_STAIRS" => Ok(Material::CrimsonStairs { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_STAIRS" => Ok(Material::WarpedStairs { inner: MaterialStruct::from_raw(env,obj)?}),"COMMAND_BLOCK" => Ok(Material::CommandBlock { inner: MaterialStruct::from_raw(env,obj)?}),"BEACON" => Ok(Material::Beacon { inner: MaterialStruct::from_raw(env,obj)?}),"COBBLESTONE_WALL" => Ok(Material::CobblestoneWall { inner: MaterialStruct::from_raw(env,obj)?}),"MOSSY_COBBLESTONE_WALL" => Ok(Material::MossyCobblestoneWall { inner: MaterialStruct::from_raw(env,obj)?}),"BRICK_WALL" => Ok(Material::BrickWall { inner: MaterialStruct::from_raw(env,obj)?}),"PRISMARINE_WALL" => Ok(Material::PrismarineWall { inner: MaterialStruct::from_raw(env,obj)?}),"RED_SANDSTONE_WALL" => Ok(Material::RedSandstoneWall { inner: MaterialStruct::from_raw(env,obj)?}),"MOSSY_STONE_BRICK_WALL" => Ok(Material::MossyStoneBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),"GRANITE_WALL" => Ok(Material::GraniteWall { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_BRICK_WALL" => Ok(Material::StoneBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),"MUD_BRICK_WALL" => Ok(Material::MudBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_BRICK_WALL" => Ok(Material::NetherBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),"ANDESITE_WALL" => Ok(Material::AndesiteWall { inner: MaterialStruct::from_raw(env,obj)?}),"RED_NETHER_BRICK_WALL" => Ok(Material::RedNetherBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),"SANDSTONE_WALL" => Ok(Material::SandstoneWall { inner: MaterialStruct::from_raw(env,obj)?}),"END_STONE_BRICK_WALL" => Ok(Material::EndStoneBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),"DIORITE_WALL" => Ok(Material::DioriteWall { inner: MaterialStruct::from_raw(env,obj)?}),"BLACKSTONE_WALL" => Ok(Material::BlackstoneWall { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_BLACKSTONE_WALL" => Ok(Material::PolishedBlackstoneWall { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_BLACKSTONE_BRICK_WALL" => Ok(Material::PolishedBlackstoneBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),"COBBLED_DEEPSLATE_WALL" => Ok(Material::CobbledDeepslateWall { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_DEEPSLATE_WALL" => Ok(Material::PolishedDeepslateWall { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_BRICK_WALL" => Ok(Material::DeepslateBrickWall { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_TILE_WALL" => Ok(Material::DeepslateTileWall { inner: MaterialStruct::from_raw(env,obj)?}),"ANVIL" => Ok(Material::Anvil { inner: MaterialStruct::from_raw(env,obj)?}),"CHIPPED_ANVIL" => Ok(Material::ChippedAnvil { inner: MaterialStruct::from_raw(env,obj)?}),"DAMAGED_ANVIL" => Ok(Material::DamagedAnvil { inner: MaterialStruct::from_raw(env,obj)?}),"CHISELED_QUARTZ_BLOCK" => Ok(Material::ChiseledQuartzBlock { inner: MaterialStruct::from_raw(env,obj)?}),"QUARTZ_BLOCK" => Ok(Material::QuartzBlock { inner: MaterialStruct::from_raw(env,obj)?}),"QUARTZ_BRICKS" => Ok(Material::QuartzBricks { inner: MaterialStruct::from_raw(env,obj)?}),"QUARTZ_PILLAR" => Ok(Material::QuartzPillar { inner: MaterialStruct::from_raw(env,obj)?}),"QUARTZ_STAIRS" => Ok(Material::QuartzStairs { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_TERRACOTTA" => Ok(Material::WhiteTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_TERRACOTTA" => Ok(Material::OrangeTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_TERRACOTTA" => Ok(Material::MagentaTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_TERRACOTTA" => Ok(Material::LightBlueTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_TERRACOTTA" => Ok(Material::YellowTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_TERRACOTTA" => Ok(Material::LimeTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_TERRACOTTA" => Ok(Material::PinkTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_TERRACOTTA" => Ok(Material::GrayTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_TERRACOTTA" => Ok(Material::LightGrayTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_TERRACOTTA" => Ok(Material::CyanTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_TERRACOTTA" => Ok(Material::PurpleTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_TERRACOTTA" => Ok(Material::BlueTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_TERRACOTTA" => Ok(Material::BrownTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_TERRACOTTA" => Ok(Material::GreenTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"RED_TERRACOTTA" => Ok(Material::RedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_TERRACOTTA" => Ok(Material::BlackTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"BARRIER" => Ok(Material::Barrier { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT" => Ok(Material::Light { inner: MaterialStruct::from_raw(env,obj)?}),"HAY_BLOCK" => Ok(Material::HayBlock { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_CARPET" => Ok(Material::WhiteCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_CARPET" => Ok(Material::OrangeCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_CARPET" => Ok(Material::MagentaCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_CARPET" => Ok(Material::LightBlueCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_CARPET" => Ok(Material::YellowCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_CARPET" => Ok(Material::LimeCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_CARPET" => Ok(Material::PinkCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_CARPET" => Ok(Material::GrayCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_CARPET" => Ok(Material::LightGrayCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_CARPET" => Ok(Material::CyanCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_CARPET" => Ok(Material::PurpleCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_CARPET" => Ok(Material::BlueCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_CARPET" => Ok(Material::BrownCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_CARPET" => Ok(Material::GreenCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"RED_CARPET" => Ok(Material::RedCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_CARPET" => Ok(Material::BlackCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"TERRACOTTA" => Ok(Material::Terracotta { inner: MaterialStruct::from_raw(env,obj)?}),"PACKED_ICE" => Ok(Material::PackedIce { inner: MaterialStruct::from_raw(env,obj)?}),"DIRT_PATH" => Ok(Material::DirtPath { inner: MaterialStruct::from_raw(env,obj)?}),"SUNFLOWER" => Ok(Material::Sunflower { inner: MaterialStruct::from_raw(env,obj)?}),"LILAC" => Ok(Material::Lilac { inner: MaterialStruct::from_raw(env,obj)?}),"ROSE_BUSH" => Ok(Material::RoseBush { inner: MaterialStruct::from_raw(env,obj)?}),"PEONY" => Ok(Material::Peony { inner: MaterialStruct::from_raw(env,obj)?}),"TALL_GRASS" => Ok(Material::TallGrass { inner: MaterialStruct::from_raw(env,obj)?}),"LARGE_FERN" => Ok(Material::LargeFern { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_STAINED_GLASS" => Ok(Material::WhiteStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_STAINED_GLASS" => Ok(Material::OrangeStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_STAINED_GLASS" => Ok(Material::MagentaStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_STAINED_GLASS" => Ok(Material::LightBlueStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_STAINED_GLASS" => Ok(Material::YellowStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_STAINED_GLASS" => Ok(Material::LimeStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_STAINED_GLASS" => Ok(Material::PinkStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_STAINED_GLASS" => Ok(Material::GrayStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_STAINED_GLASS" => Ok(Material::LightGrayStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_STAINED_GLASS" => Ok(Material::CyanStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_STAINED_GLASS" => Ok(Material::PurpleStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_STAINED_GLASS" => Ok(Material::BlueStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_STAINED_GLASS" => Ok(Material::BrownStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_STAINED_GLASS" => Ok(Material::GreenStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"RED_STAINED_GLASS" => Ok(Material::RedStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_STAINED_GLASS" => Ok(Material::BlackStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_STAINED_GLASS_PANE" => Ok(Material::WhiteStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_STAINED_GLASS_PANE" => Ok(Material::OrangeStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_STAINED_GLASS_PANE" => Ok(Material::MagentaStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_STAINED_GLASS_PANE" => Ok(Material::LightBlueStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_STAINED_GLASS_PANE" => Ok(Material::YellowStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_STAINED_GLASS_PANE" => Ok(Material::LimeStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_STAINED_GLASS_PANE" => Ok(Material::PinkStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_STAINED_GLASS_PANE" => Ok(Material::GrayStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_STAINED_GLASS_PANE" => Ok(Material::LightGrayStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_STAINED_GLASS_PANE" => Ok(Material::CyanStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_STAINED_GLASS_PANE" => Ok(Material::PurpleStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_STAINED_GLASS_PANE" => Ok(Material::BlueStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_STAINED_GLASS_PANE" => Ok(Material::BrownStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_STAINED_GLASS_PANE" => Ok(Material::GreenStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"RED_STAINED_GLASS_PANE" => Ok(Material::RedStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_STAINED_GLASS_PANE" => Ok(Material::BlackStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"PRISMARINE" => Ok(Material::Prismarine { inner: MaterialStruct::from_raw(env,obj)?}),"PRISMARINE_BRICKS" => Ok(Material::PrismarineBricks { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_PRISMARINE" => Ok(Material::DarkPrismarine { inner: MaterialStruct::from_raw(env,obj)?}),"PRISMARINE_STAIRS" => Ok(Material::PrismarineStairs { inner: MaterialStruct::from_raw(env,obj)?}),"PRISMARINE_BRICK_STAIRS" => Ok(Material::PrismarineBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_PRISMARINE_STAIRS" => Ok(Material::DarkPrismarineStairs { inner: MaterialStruct::from_raw(env,obj)?}),"SEA_LANTERN" => Ok(Material::SeaLantern { inner: MaterialStruct::from_raw(env,obj)?}),"RED_SANDSTONE" => Ok(Material::RedSandstone { inner: MaterialStruct::from_raw(env,obj)?}),"CHISELED_RED_SANDSTONE" => Ok(Material::ChiseledRedSandstone { inner: MaterialStruct::from_raw(env,obj)?}),"CUT_RED_SANDSTONE" => Ok(Material::CutRedSandstone { inner: MaterialStruct::from_raw(env,obj)?}),"RED_SANDSTONE_STAIRS" => Ok(Material::RedSandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"REPEATING_COMMAND_BLOCK" => Ok(Material::RepeatingCommandBlock { inner: MaterialStruct::from_raw(env,obj)?}),"CHAIN_COMMAND_BLOCK" => Ok(Material::ChainCommandBlock { inner: MaterialStruct::from_raw(env,obj)?}),"MAGMA_BLOCK" => Ok(Material::MagmaBlock { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_WART_BLOCK" => Ok(Material::NetherWartBlock { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_WART_BLOCK" => Ok(Material::WarpedWartBlock { inner: MaterialStruct::from_raw(env,obj)?}),"RED_NETHER_BRICKS" => Ok(Material::RedNetherBricks { inner: MaterialStruct::from_raw(env,obj)?}),"BONE_BLOCK" => Ok(Material::BoneBlock { inner: MaterialStruct::from_raw(env,obj)?}),"STRUCTURE_VOID" => Ok(Material::StructureVoid { inner: MaterialStruct::from_raw(env,obj)?}),"SHULKER_BOX" => Ok(Material::ShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_SHULKER_BOX" => Ok(Material::WhiteShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_SHULKER_BOX" => Ok(Material::OrangeShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_SHULKER_BOX" => Ok(Material::MagentaShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_SHULKER_BOX" => Ok(Material::LightBlueShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_SHULKER_BOX" => Ok(Material::YellowShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_SHULKER_BOX" => Ok(Material::LimeShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_SHULKER_BOX" => Ok(Material::PinkShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_SHULKER_BOX" => Ok(Material::GrayShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_SHULKER_BOX" => Ok(Material::LightGrayShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_SHULKER_BOX" => Ok(Material::CyanShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_SHULKER_BOX" => Ok(Material::PurpleShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_SHULKER_BOX" => Ok(Material::BlueShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_SHULKER_BOX" => Ok(Material::BrownShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_SHULKER_BOX" => Ok(Material::GreenShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"RED_SHULKER_BOX" => Ok(Material::RedShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_SHULKER_BOX" => Ok(Material::BlackShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_GLAZED_TERRACOTTA" => Ok(Material::WhiteGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_GLAZED_TERRACOTTA" => Ok(Material::OrangeGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_GLAZED_TERRACOTTA" => Ok(Material::MagentaGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_GLAZED_TERRACOTTA" => Ok(Material::LightBlueGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_GLAZED_TERRACOTTA" => Ok(Material::YellowGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_GLAZED_TERRACOTTA" => Ok(Material::LimeGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_GLAZED_TERRACOTTA" => Ok(Material::PinkGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_GLAZED_TERRACOTTA" => Ok(Material::GrayGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_GLAZED_TERRACOTTA" => Ok(Material::LightGrayGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_GLAZED_TERRACOTTA" => Ok(Material::CyanGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_GLAZED_TERRACOTTA" => Ok(Material::PurpleGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_GLAZED_TERRACOTTA" => Ok(Material::BlueGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_GLAZED_TERRACOTTA" => Ok(Material::BrownGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_GLAZED_TERRACOTTA" => Ok(Material::GreenGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"RED_GLAZED_TERRACOTTA" => Ok(Material::RedGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_GLAZED_TERRACOTTA" => Ok(Material::BlackGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_CONCRETE" => Ok(Material::WhiteConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_CONCRETE" => Ok(Material::OrangeConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_CONCRETE" => Ok(Material::MagentaConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_CONCRETE" => Ok(Material::LightBlueConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_CONCRETE" => Ok(Material::YellowConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_CONCRETE" => Ok(Material::LimeConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_CONCRETE" => Ok(Material::PinkConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_CONCRETE" => Ok(Material::GrayConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_CONCRETE" => Ok(Material::LightGrayConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_CONCRETE" => Ok(Material::CyanConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_CONCRETE" => Ok(Material::PurpleConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_CONCRETE" => Ok(Material::BlueConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_CONCRETE" => Ok(Material::BrownConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_CONCRETE" => Ok(Material::GreenConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"RED_CONCRETE" => Ok(Material::RedConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_CONCRETE" => Ok(Material::BlackConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_CONCRETE_POWDER" => Ok(Material::WhiteConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_CONCRETE_POWDER" => Ok(Material::OrangeConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_CONCRETE_POWDER" => Ok(Material::MagentaConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_CONCRETE_POWDER" => Ok(Material::LightBlueConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_CONCRETE_POWDER" => Ok(Material::YellowConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_CONCRETE_POWDER" => Ok(Material::LimeConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_CONCRETE_POWDER" => Ok(Material::PinkConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_CONCRETE_POWDER" => Ok(Material::GrayConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_CONCRETE_POWDER" => Ok(Material::LightGrayConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_CONCRETE_POWDER" => Ok(Material::CyanConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_CONCRETE_POWDER" => Ok(Material::PurpleConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_CONCRETE_POWDER" => Ok(Material::BlueConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_CONCRETE_POWDER" => Ok(Material::BrownConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_CONCRETE_POWDER" => Ok(Material::GreenConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"RED_CONCRETE_POWDER" => Ok(Material::RedConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_CONCRETE_POWDER" => Ok(Material::BlackConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"TURTLE_EGG" => Ok(Material::TurtleEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SNIFFER_EGG" => Ok(Material::SnifferEgg { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_TUBE_CORAL_BLOCK" => Ok(Material::DeadTubeCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_BRAIN_CORAL_BLOCK" => Ok(Material::DeadBrainCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_BUBBLE_CORAL_BLOCK" => Ok(Material::DeadBubbleCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_FIRE_CORAL_BLOCK" => Ok(Material::DeadFireCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_HORN_CORAL_BLOCK" => Ok(Material::DeadHornCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),"TUBE_CORAL_BLOCK" => Ok(Material::TubeCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),"BRAIN_CORAL_BLOCK" => Ok(Material::BrainCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),"BUBBLE_CORAL_BLOCK" => Ok(Material::BubbleCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),"FIRE_CORAL_BLOCK" => Ok(Material::FireCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),"HORN_CORAL_BLOCK" => Ok(Material::HornCoralBlock { inner: MaterialStruct::from_raw(env,obj)?}),"TUBE_CORAL" => Ok(Material::TubeCoral { inner: MaterialStruct::from_raw(env,obj)?}),"BRAIN_CORAL" => Ok(Material::BrainCoral { inner: MaterialStruct::from_raw(env,obj)?}),"BUBBLE_CORAL" => Ok(Material::BubbleCoral { inner: MaterialStruct::from_raw(env,obj)?}),"FIRE_CORAL" => Ok(Material::FireCoral { inner: MaterialStruct::from_raw(env,obj)?}),"HORN_CORAL" => Ok(Material::HornCoral { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_BRAIN_CORAL" => Ok(Material::DeadBrainCoral { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_BUBBLE_CORAL" => Ok(Material::DeadBubbleCoral { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_FIRE_CORAL" => Ok(Material::DeadFireCoral { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_HORN_CORAL" => Ok(Material::DeadHornCoral { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_TUBE_CORAL" => Ok(Material::DeadTubeCoral { inner: MaterialStruct::from_raw(env,obj)?}),"TUBE_CORAL_FAN" => Ok(Material::TubeCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),"BRAIN_CORAL_FAN" => Ok(Material::BrainCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),"BUBBLE_CORAL_FAN" => Ok(Material::BubbleCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),"FIRE_CORAL_FAN" => Ok(Material::FireCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),"HORN_CORAL_FAN" => Ok(Material::HornCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_TUBE_CORAL_FAN" => Ok(Material::DeadTubeCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_BRAIN_CORAL_FAN" => Ok(Material::DeadBrainCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_BUBBLE_CORAL_FAN" => Ok(Material::DeadBubbleCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_FIRE_CORAL_FAN" => Ok(Material::DeadFireCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_HORN_CORAL_FAN" => Ok(Material::DeadHornCoralFan { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_ICE" => Ok(Material::BlueIce { inner: MaterialStruct::from_raw(env,obj)?}),"CONDUIT" => Ok(Material::Conduit { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_GRANITE_STAIRS" => Ok(Material::PolishedGraniteStairs { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_RED_SANDSTONE_STAIRS" => Ok(Material::SmoothRedSandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"MOSSY_STONE_BRICK_STAIRS" => Ok(Material::MossyStoneBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_DIORITE_STAIRS" => Ok(Material::PolishedDioriteStairs { inner: MaterialStruct::from_raw(env,obj)?}),"MOSSY_COBBLESTONE_STAIRS" => Ok(Material::MossyCobblestoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"END_STONE_BRICK_STAIRS" => Ok(Material::EndStoneBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_STAIRS" => Ok(Material::StoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_SANDSTONE_STAIRS" => Ok(Material::SmoothSandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_QUARTZ_STAIRS" => Ok(Material::SmoothQuartzStairs { inner: MaterialStruct::from_raw(env,obj)?}),"GRANITE_STAIRS" => Ok(Material::GraniteStairs { inner: MaterialStruct::from_raw(env,obj)?}),"ANDESITE_STAIRS" => Ok(Material::AndesiteStairs { inner: MaterialStruct::from_raw(env,obj)?}),"RED_NETHER_BRICK_STAIRS" => Ok(Material::RedNetherBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_ANDESITE_STAIRS" => Ok(Material::PolishedAndesiteStairs { inner: MaterialStruct::from_raw(env,obj)?}),"DIORITE_STAIRS" => Ok(Material::DioriteStairs { inner: MaterialStruct::from_raw(env,obj)?}),"COBBLED_DEEPSLATE_STAIRS" => Ok(Material::CobbledDeepslateStairs { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_DEEPSLATE_STAIRS" => Ok(Material::PolishedDeepslateStairs { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_BRICK_STAIRS" => Ok(Material::DeepslateBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_TILE_STAIRS" => Ok(Material::DeepslateTileStairs { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_GRANITE_SLAB" => Ok(Material::PolishedGraniteSlab { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_RED_SANDSTONE_SLAB" => Ok(Material::SmoothRedSandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"MOSSY_STONE_BRICK_SLAB" => Ok(Material::MossyStoneBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_DIORITE_SLAB" => Ok(Material::PolishedDioriteSlab { inner: MaterialStruct::from_raw(env,obj)?}),"MOSSY_COBBLESTONE_SLAB" => Ok(Material::MossyCobblestoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"END_STONE_BRICK_SLAB" => Ok(Material::EndStoneBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_SANDSTONE_SLAB" => Ok(Material::SmoothSandstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"SMOOTH_QUARTZ_SLAB" => Ok(Material::SmoothQuartzSlab { inner: MaterialStruct::from_raw(env,obj)?}),"GRANITE_SLAB" => Ok(Material::GraniteSlab { inner: MaterialStruct::from_raw(env,obj)?}),"ANDESITE_SLAB" => Ok(Material::AndesiteSlab { inner: MaterialStruct::from_raw(env,obj)?}),"RED_NETHER_BRICK_SLAB" => Ok(Material::RedNetherBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_ANDESITE_SLAB" => Ok(Material::PolishedAndesiteSlab { inner: MaterialStruct::from_raw(env,obj)?}),"DIORITE_SLAB" => Ok(Material::DioriteSlab { inner: MaterialStruct::from_raw(env,obj)?}),"COBBLED_DEEPSLATE_SLAB" => Ok(Material::CobbledDeepslateSlab { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_DEEPSLATE_SLAB" => Ok(Material::PolishedDeepslateSlab { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_BRICK_SLAB" => Ok(Material::DeepslateBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),"DEEPSLATE_TILE_SLAB" => Ok(Material::DeepslateTileSlab { inner: MaterialStruct::from_raw(env,obj)?}),"SCAFFOLDING" => Ok(Material::Scaffolding { inner: MaterialStruct::from_raw(env,obj)?}),"REDSTONE" => Ok(Material::Redstone { inner: MaterialStruct::from_raw(env,obj)?}),"REDSTONE_TORCH" => Ok(Material::RedstoneTorch { inner: MaterialStruct::from_raw(env,obj)?}),"REDSTONE_BLOCK" => Ok(Material::RedstoneBlock { inner: MaterialStruct::from_raw(env,obj)?}),"REPEATER" => Ok(Material::Repeater { inner: MaterialStruct::from_raw(env,obj)?}),"COMPARATOR" => Ok(Material::Comparator { inner: MaterialStruct::from_raw(env,obj)?}),"PISTON" => Ok(Material::Piston { inner: MaterialStruct::from_raw(env,obj)?}),"STICKY_PISTON" => Ok(Material::StickyPiston { inner: MaterialStruct::from_raw(env,obj)?}),"SLIME_BLOCK" => Ok(Material::SlimeBlock { inner: MaterialStruct::from_raw(env,obj)?}),"HONEY_BLOCK" => Ok(Material::HoneyBlock { inner: MaterialStruct::from_raw(env,obj)?}),"OBSERVER" => Ok(Material::Observer { inner: MaterialStruct::from_raw(env,obj)?}),"HOPPER" => Ok(Material::Hopper { inner: MaterialStruct::from_raw(env,obj)?}),"DISPENSER" => Ok(Material::Dispenser { inner: MaterialStruct::from_raw(env,obj)?}),"DROPPER" => Ok(Material::Dropper { inner: MaterialStruct::from_raw(env,obj)?}),"LECTERN" => Ok(Material::Lectern { inner: MaterialStruct::from_raw(env,obj)?}),"TARGET" => Ok(Material::Target { inner: MaterialStruct::from_raw(env,obj)?}),"LEVER" => Ok(Material::Lever { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHTNING_ROD" => Ok(Material::LightningRod { inner: MaterialStruct::from_raw(env,obj)?}),"DAYLIGHT_DETECTOR" => Ok(Material::DaylightDetector { inner: MaterialStruct::from_raw(env,obj)?}),"SCULK_SENSOR" => Ok(Material::SculkSensor { inner: MaterialStruct::from_raw(env,obj)?}),"CALIBRATED_SCULK_SENSOR" => Ok(Material::CalibratedSculkSensor { inner: MaterialStruct::from_raw(env,obj)?}),"TRIPWIRE_HOOK" => Ok(Material::TripwireHook { inner: MaterialStruct::from_raw(env,obj)?}),"TRAPPED_CHEST" => Ok(Material::TrappedChest { inner: MaterialStruct::from_raw(env,obj)?}),"TNT" => Ok(Material::Tnt { inner: MaterialStruct::from_raw(env,obj)?}),"REDSTONE_LAMP" => Ok(Material::RedstoneLamp { inner: MaterialStruct::from_raw(env,obj)?}),"NOTE_BLOCK" => Ok(Material::NoteBlock { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_BUTTON" => Ok(Material::StoneButton { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_BLACKSTONE_BUTTON" => Ok(Material::PolishedBlackstoneButton { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_BUTTON" => Ok(Material::OakButton { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_BUTTON" => Ok(Material::SpruceButton { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_BUTTON" => Ok(Material::BirchButton { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_BUTTON" => Ok(Material::JungleButton { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_BUTTON" => Ok(Material::AcaciaButton { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_BUTTON" => Ok(Material::CherryButton { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_BUTTON" => Ok(Material::DarkOakButton { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_BUTTON" => Ok(Material::MangroveButton { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_BUTTON" => Ok(Material::BambooButton { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_BUTTON" => Ok(Material::CrimsonButton { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_BUTTON" => Ok(Material::WarpedButton { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_PRESSURE_PLATE" => Ok(Material::StonePressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_BLACKSTONE_PRESSURE_PLATE" => Ok(Material::PolishedBlackstonePressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_WEIGHTED_PRESSURE_PLATE" => Ok(Material::LightWeightedPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"HEAVY_WEIGHTED_PRESSURE_PLATE" => Ok(Material::HeavyWeightedPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_PRESSURE_PLATE" => Ok(Material::OakPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_PRESSURE_PLATE" => Ok(Material::SprucePressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_PRESSURE_PLATE" => Ok(Material::BirchPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_PRESSURE_PLATE" => Ok(Material::JunglePressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_PRESSURE_PLATE" => Ok(Material::AcaciaPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_PRESSURE_PLATE" => Ok(Material::CherryPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_PRESSURE_PLATE" => Ok(Material::DarkOakPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_PRESSURE_PLATE" => Ok(Material::MangrovePressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_PRESSURE_PLATE" => Ok(Material::BambooPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_PRESSURE_PLATE" => Ok(Material::CrimsonPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_PRESSURE_PLATE" => Ok(Material::WarpedPressurePlate { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_DOOR" => Ok(Material::IronDoor { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_DOOR" => Ok(Material::OakDoor { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_DOOR" => Ok(Material::SpruceDoor { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_DOOR" => Ok(Material::BirchDoor { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_DOOR" => Ok(Material::JungleDoor { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_DOOR" => Ok(Material::AcaciaDoor { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_DOOR" => Ok(Material::CherryDoor { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_DOOR" => Ok(Material::DarkOakDoor { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_DOOR" => Ok(Material::MangroveDoor { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_DOOR" => Ok(Material::BambooDoor { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_DOOR" => Ok(Material::CrimsonDoor { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_DOOR" => Ok(Material::WarpedDoor { inner: MaterialStruct::from_raw(env,obj)?}),"COPPER_DOOR" => Ok(Material::CopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),"EXPOSED_COPPER_DOOR" => Ok(Material::ExposedCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),"WEATHERED_COPPER_DOOR" => Ok(Material::WeatheredCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),"OXIDIZED_COPPER_DOOR" => Ok(Material::OxidizedCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_COPPER_DOOR" => Ok(Material::WaxedCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_EXPOSED_COPPER_DOOR" => Ok(Material::WaxedExposedCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_WEATHERED_COPPER_DOOR" => Ok(Material::WaxedWeatheredCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_OXIDIZED_COPPER_DOOR" => Ok(Material::WaxedOxidizedCopperDoor { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_TRAPDOOR" => Ok(Material::IronTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_TRAPDOOR" => Ok(Material::OakTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_TRAPDOOR" => Ok(Material::SpruceTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_TRAPDOOR" => Ok(Material::BirchTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_TRAPDOOR" => Ok(Material::JungleTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_TRAPDOOR" => Ok(Material::AcaciaTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_TRAPDOOR" => Ok(Material::CherryTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_TRAPDOOR" => Ok(Material::DarkOakTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_TRAPDOOR" => Ok(Material::MangroveTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_TRAPDOOR" => Ok(Material::BambooTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_TRAPDOOR" => Ok(Material::CrimsonTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_TRAPDOOR" => Ok(Material::WarpedTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"COPPER_TRAPDOOR" => Ok(Material::CopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"EXPOSED_COPPER_TRAPDOOR" => Ok(Material::ExposedCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"WEATHERED_COPPER_TRAPDOOR" => Ok(Material::WeatheredCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"OXIDIZED_COPPER_TRAPDOOR" => Ok(Material::OxidizedCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_COPPER_TRAPDOOR" => Ok(Material::WaxedCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_EXPOSED_COPPER_TRAPDOOR" => Ok(Material::WaxedExposedCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_WEATHERED_COPPER_TRAPDOOR" => Ok(Material::WaxedWeatheredCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_OXIDIZED_COPPER_TRAPDOOR" => Ok(Material::WaxedOxidizedCopperTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_FENCE_GATE" => Ok(Material::OakFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_FENCE_GATE" => Ok(Material::SpruceFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_FENCE_GATE" => Ok(Material::BirchFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_FENCE_GATE" => Ok(Material::JungleFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_FENCE_GATE" => Ok(Material::AcaciaFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_FENCE_GATE" => Ok(Material::CherryFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_FENCE_GATE" => Ok(Material::DarkOakFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_FENCE_GATE" => Ok(Material::MangroveFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_FENCE_GATE" => Ok(Material::BambooFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_FENCE_GATE" => Ok(Material::CrimsonFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_FENCE_GATE" => Ok(Material::WarpedFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"POWERED_RAIL" => Ok(Material::PoweredRail { inner: MaterialStruct::from_raw(env,obj)?}),"DETECTOR_RAIL" => Ok(Material::DetectorRail { inner: MaterialStruct::from_raw(env,obj)?}),"RAIL" => Ok(Material::Rail { inner: MaterialStruct::from_raw(env,obj)?}),"ACTIVATOR_RAIL" => Ok(Material::ActivatorRail { inner: MaterialStruct::from_raw(env,obj)?}),"SADDLE" => Ok(Material::Saddle { inner: MaterialStruct::from_raw(env,obj)?}),"MINECART" => Ok(Material::Minecart { inner: MaterialStruct::from_raw(env,obj)?}),"CHEST_MINECART" => Ok(Material::ChestMinecart { inner: MaterialStruct::from_raw(env,obj)?}),"FURNACE_MINECART" => Ok(Material::FurnaceMinecart { inner: MaterialStruct::from_raw(env,obj)?}),"TNT_MINECART" => Ok(Material::TntMinecart { inner: MaterialStruct::from_raw(env,obj)?}),"HOPPER_MINECART" => Ok(Material::HopperMinecart { inner: MaterialStruct::from_raw(env,obj)?}),"CARROT_ON_A_STICK" => Ok(Material::CarrotOnAStick { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_FUNGUS_ON_A_STICK" => Ok(Material::WarpedFungusOnAStick { inner: MaterialStruct::from_raw(env,obj)?}),"ELYTRA" => Ok(Material::Elytra { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_BOAT" => Ok(Material::OakBoat { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_CHEST_BOAT" => Ok(Material::OakChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_BOAT" => Ok(Material::SpruceBoat { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_CHEST_BOAT" => Ok(Material::SpruceChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_BOAT" => Ok(Material::BirchBoat { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_CHEST_BOAT" => Ok(Material::BirchChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_BOAT" => Ok(Material::JungleBoat { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_CHEST_BOAT" => Ok(Material::JungleChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_BOAT" => Ok(Material::AcaciaBoat { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_CHEST_BOAT" => Ok(Material::AcaciaChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_BOAT" => Ok(Material::CherryBoat { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_CHEST_BOAT" => Ok(Material::CherryChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_BOAT" => Ok(Material::DarkOakBoat { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_CHEST_BOAT" => Ok(Material::DarkOakChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_BOAT" => Ok(Material::MangroveBoat { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_CHEST_BOAT" => Ok(Material::MangroveChestBoat { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_RAFT" => Ok(Material::BambooRaft { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_CHEST_RAFT" => Ok(Material::BambooChestRaft { inner: MaterialStruct::from_raw(env,obj)?}),"STRUCTURE_BLOCK" => Ok(Material::StructureBlock { inner: MaterialStruct::from_raw(env,obj)?}),"JIGSAW" => Ok(Material::Jigsaw { inner: MaterialStruct::from_raw(env,obj)?}),"TURTLE_HELMET" => Ok(Material::TurtleHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"SCUTE" => Ok(Material::Scute { inner: MaterialStruct::from_raw(env,obj)?}),"FLINT_AND_STEEL" => Ok(Material::FlintAndSteel { inner: MaterialStruct::from_raw(env,obj)?}),"APPLE" => Ok(Material::Apple { inner: MaterialStruct::from_raw(env,obj)?}),"BOW" => Ok(Material::Bow { inner: MaterialStruct::from_raw(env,obj)?}),"ARROW" => Ok(Material::Arrow { inner: MaterialStruct::from_raw(env,obj)?}),"COAL" => Ok(Material::Coal { inner: MaterialStruct::from_raw(env,obj)?}),"CHARCOAL" => Ok(Material::Charcoal { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND" => Ok(Material::Diamond { inner: MaterialStruct::from_raw(env,obj)?}),"EMERALD" => Ok(Material::Emerald { inner: MaterialStruct::from_raw(env,obj)?}),"LAPIS_LAZULI" => Ok(Material::LapisLazuli { inner: MaterialStruct::from_raw(env,obj)?}),"QUARTZ" => Ok(Material::Quartz { inner: MaterialStruct::from_raw(env,obj)?}),"AMETHYST_SHARD" => Ok(Material::AmethystShard { inner: MaterialStruct::from_raw(env,obj)?}),"RAW_IRON" => Ok(Material::RawIron { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_INGOT" => Ok(Material::IronIngot { inner: MaterialStruct::from_raw(env,obj)?}),"RAW_COPPER" => Ok(Material::RawCopper { inner: MaterialStruct::from_raw(env,obj)?}),"COPPER_INGOT" => Ok(Material::CopperIngot { inner: MaterialStruct::from_raw(env,obj)?}),"RAW_GOLD" => Ok(Material::RawGold { inner: MaterialStruct::from_raw(env,obj)?}),"GOLD_INGOT" => Ok(Material::GoldIngot { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_INGOT" => Ok(Material::NetheriteIngot { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_SCRAP" => Ok(Material::NetheriteScrap { inner: MaterialStruct::from_raw(env,obj)?}),"WOODEN_SWORD" => Ok(Material::WoodenSword { inner: MaterialStruct::from_raw(env,obj)?}),"WOODEN_SHOVEL" => Ok(Material::WoodenShovel { inner: MaterialStruct::from_raw(env,obj)?}),"WOODEN_PICKAXE" => Ok(Material::WoodenPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),"WOODEN_AXE" => Ok(Material::WoodenAxe { inner: MaterialStruct::from_raw(env,obj)?}),"WOODEN_HOE" => Ok(Material::WoodenHoe { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_SWORD" => Ok(Material::StoneSword { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_SHOVEL" => Ok(Material::StoneShovel { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_PICKAXE" => Ok(Material::StonePickaxe { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_AXE" => Ok(Material::StoneAxe { inner: MaterialStruct::from_raw(env,obj)?}),"STONE_HOE" => Ok(Material::StoneHoe { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_SWORD" => Ok(Material::GoldenSword { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_SHOVEL" => Ok(Material::GoldenShovel { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_PICKAXE" => Ok(Material::GoldenPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_AXE" => Ok(Material::GoldenAxe { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_HOE" => Ok(Material::GoldenHoe { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_SWORD" => Ok(Material::IronSword { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_SHOVEL" => Ok(Material::IronShovel { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_PICKAXE" => Ok(Material::IronPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_AXE" => Ok(Material::IronAxe { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_HOE" => Ok(Material::IronHoe { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_SWORD" => Ok(Material::DiamondSword { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_SHOVEL" => Ok(Material::DiamondShovel { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_PICKAXE" => Ok(Material::DiamondPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_AXE" => Ok(Material::DiamondAxe { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_HOE" => Ok(Material::DiamondHoe { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_SWORD" => Ok(Material::NetheriteSword { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_SHOVEL" => Ok(Material::NetheriteShovel { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_PICKAXE" => Ok(Material::NetheritePickaxe { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_AXE" => Ok(Material::NetheriteAxe { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_HOE" => Ok(Material::NetheriteHoe { inner: MaterialStruct::from_raw(env,obj)?}),"STICK" => Ok(Material::Stick { inner: MaterialStruct::from_raw(env,obj)?}),"BOWL" => Ok(Material::Bowl { inner: MaterialStruct::from_raw(env,obj)?}),"MUSHROOM_STEW" => Ok(Material::MushroomStew { inner: MaterialStruct::from_raw(env,obj)?}),"STRING" => Ok(Material::String { inner: MaterialStruct::from_raw(env,obj)?}),"FEATHER" => Ok(Material::Feather { inner: MaterialStruct::from_raw(env,obj)?}),"GUNPOWDER" => Ok(Material::Gunpowder { inner: MaterialStruct::from_raw(env,obj)?}),"WHEAT_SEEDS" => Ok(Material::WheatSeeds { inner: MaterialStruct::from_raw(env,obj)?}),"WHEAT" => Ok(Material::Wheat { inner: MaterialStruct::from_raw(env,obj)?}),"BREAD" => Ok(Material::Bread { inner: MaterialStruct::from_raw(env,obj)?}),"LEATHER_HELMET" => Ok(Material::LeatherHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"LEATHER_CHESTPLATE" => Ok(Material::LeatherChestplate { inner: MaterialStruct::from_raw(env,obj)?}),"LEATHER_LEGGINGS" => Ok(Material::LeatherLeggings { inner: MaterialStruct::from_raw(env,obj)?}),"LEATHER_BOOTS" => Ok(Material::LeatherBoots { inner: MaterialStruct::from_raw(env,obj)?}),"CHAINMAIL_HELMET" => Ok(Material::ChainmailHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"CHAINMAIL_CHESTPLATE" => Ok(Material::ChainmailChestplate { inner: MaterialStruct::from_raw(env,obj)?}),"CHAINMAIL_LEGGINGS" => Ok(Material::ChainmailLeggings { inner: MaterialStruct::from_raw(env,obj)?}),"CHAINMAIL_BOOTS" => Ok(Material::ChainmailBoots { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_HELMET" => Ok(Material::IronHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_CHESTPLATE" => Ok(Material::IronChestplate { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_LEGGINGS" => Ok(Material::IronLeggings { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_BOOTS" => Ok(Material::IronBoots { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_HELMET" => Ok(Material::DiamondHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_CHESTPLATE" => Ok(Material::DiamondChestplate { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_LEGGINGS" => Ok(Material::DiamondLeggings { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_BOOTS" => Ok(Material::DiamondBoots { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_HELMET" => Ok(Material::GoldenHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_CHESTPLATE" => Ok(Material::GoldenChestplate { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_LEGGINGS" => Ok(Material::GoldenLeggings { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_BOOTS" => Ok(Material::GoldenBoots { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_HELMET" => Ok(Material::NetheriteHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_CHESTPLATE" => Ok(Material::NetheriteChestplate { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_LEGGINGS" => Ok(Material::NetheriteLeggings { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_BOOTS" => Ok(Material::NetheriteBoots { inner: MaterialStruct::from_raw(env,obj)?}),"FLINT" => Ok(Material::Flint { inner: MaterialStruct::from_raw(env,obj)?}),"PORKCHOP" => Ok(Material::Porkchop { inner: MaterialStruct::from_raw(env,obj)?}),"COOKED_PORKCHOP" => Ok(Material::CookedPorkchop { inner: MaterialStruct::from_raw(env,obj)?}),"PAINTING" => Ok(Material::Painting { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_APPLE" => Ok(Material::GoldenApple { inner: MaterialStruct::from_raw(env,obj)?}),"ENCHANTED_GOLDEN_APPLE" => Ok(Material::EnchantedGoldenApple { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_SIGN" => Ok(Material::OakSign { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_SIGN" => Ok(Material::SpruceSign { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_SIGN" => Ok(Material::BirchSign { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_SIGN" => Ok(Material::JungleSign { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_SIGN" => Ok(Material::AcaciaSign { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_SIGN" => Ok(Material::CherrySign { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_SIGN" => Ok(Material::DarkOakSign { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_SIGN" => Ok(Material::MangroveSign { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_SIGN" => Ok(Material::BambooSign { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_SIGN" => Ok(Material::CrimsonSign { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_SIGN" => Ok(Material::WarpedSign { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_HANGING_SIGN" => Ok(Material::OakHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_HANGING_SIGN" => Ok(Material::SpruceHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_HANGING_SIGN" => Ok(Material::BirchHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_HANGING_SIGN" => Ok(Material::JungleHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_HANGING_SIGN" => Ok(Material::AcaciaHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_HANGING_SIGN" => Ok(Material::CherryHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_HANGING_SIGN" => Ok(Material::DarkOakHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_HANGING_SIGN" => Ok(Material::MangroveHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_HANGING_SIGN" => Ok(Material::BambooHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_HANGING_SIGN" => Ok(Material::CrimsonHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_HANGING_SIGN" => Ok(Material::WarpedHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"BUCKET" => Ok(Material::Bucket { inner: MaterialStruct::from_raw(env,obj)?}),"WATER_BUCKET" => Ok(Material::WaterBucket { inner: MaterialStruct::from_raw(env,obj)?}),"LAVA_BUCKET" => Ok(Material::LavaBucket { inner: MaterialStruct::from_raw(env,obj)?}),"POWDER_SNOW_BUCKET" => Ok(Material::PowderSnowBucket { inner: MaterialStruct::from_raw(env,obj)?}),"SNOWBALL" => Ok(Material::Snowball { inner: MaterialStruct::from_raw(env,obj)?}),"LEATHER" => Ok(Material::Leather { inner: MaterialStruct::from_raw(env,obj)?}),"MILK_BUCKET" => Ok(Material::MilkBucket { inner: MaterialStruct::from_raw(env,obj)?}),"PUFFERFISH_BUCKET" => Ok(Material::PufferfishBucket { inner: MaterialStruct::from_raw(env,obj)?}),"SALMON_BUCKET" => Ok(Material::SalmonBucket { inner: MaterialStruct::from_raw(env,obj)?}),"COD_BUCKET" => Ok(Material::CodBucket { inner: MaterialStruct::from_raw(env,obj)?}),"TROPICAL_FISH_BUCKET" => Ok(Material::TropicalFishBucket { inner: MaterialStruct::from_raw(env,obj)?}),"AXOLOTL_BUCKET" => Ok(Material::AxolotlBucket { inner: MaterialStruct::from_raw(env,obj)?}),"TADPOLE_BUCKET" => Ok(Material::TadpoleBucket { inner: MaterialStruct::from_raw(env,obj)?}),"BRICK" => Ok(Material::Brick { inner: MaterialStruct::from_raw(env,obj)?}),"CLAY_BALL" => Ok(Material::ClayBall { inner: MaterialStruct::from_raw(env,obj)?}),"DRIED_KELP_BLOCK" => Ok(Material::DriedKelpBlock { inner: MaterialStruct::from_raw(env,obj)?}),"PAPER" => Ok(Material::Paper { inner: MaterialStruct::from_raw(env,obj)?}),"BOOK" => Ok(Material::Book { inner: MaterialStruct::from_raw(env,obj)?}),"SLIME_BALL" => Ok(Material::SlimeBall { inner: MaterialStruct::from_raw(env,obj)?}),"EGG" => Ok(Material::Egg { inner: MaterialStruct::from_raw(env,obj)?}),"COMPASS" => Ok(Material::Compass { inner: MaterialStruct::from_raw(env,obj)?}),"RECOVERY_COMPASS" => Ok(Material::RecoveryCompass { inner: MaterialStruct::from_raw(env,obj)?}),"BUNDLE" => Ok(Material::Bundle { inner: MaterialStruct::from_raw(env,obj)?}),"FISHING_ROD" => Ok(Material::FishingRod { inner: MaterialStruct::from_raw(env,obj)?}),"CLOCK" => Ok(Material::Clock { inner: MaterialStruct::from_raw(env,obj)?}),"SPYGLASS" => Ok(Material::Spyglass { inner: MaterialStruct::from_raw(env,obj)?}),"GLOWSTONE_DUST" => Ok(Material::GlowstoneDust { inner: MaterialStruct::from_raw(env,obj)?}),"COD" => Ok(Material::Cod { inner: MaterialStruct::from_raw(env,obj)?}),"SALMON" => Ok(Material::Salmon { inner: MaterialStruct::from_raw(env,obj)?}),"TROPICAL_FISH" => Ok(Material::TropicalFish { inner: MaterialStruct::from_raw(env,obj)?}),"PUFFERFISH" => Ok(Material::Pufferfish { inner: MaterialStruct::from_raw(env,obj)?}),"COOKED_COD" => Ok(Material::CookedCod { inner: MaterialStruct::from_raw(env,obj)?}),"COOKED_SALMON" => Ok(Material::CookedSalmon { inner: MaterialStruct::from_raw(env,obj)?}),"INK_SAC" => Ok(Material::InkSac { inner: MaterialStruct::from_raw(env,obj)?}),"GLOW_INK_SAC" => Ok(Material::GlowInkSac { inner: MaterialStruct::from_raw(env,obj)?}),"COCOA_BEANS" => Ok(Material::CocoaBeans { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_DYE" => Ok(Material::WhiteDye { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_DYE" => Ok(Material::OrangeDye { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_DYE" => Ok(Material::MagentaDye { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_DYE" => Ok(Material::LightBlueDye { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_DYE" => Ok(Material::YellowDye { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_DYE" => Ok(Material::LimeDye { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_DYE" => Ok(Material::PinkDye { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_DYE" => Ok(Material::GrayDye { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_DYE" => Ok(Material::LightGrayDye { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_DYE" => Ok(Material::CyanDye { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_DYE" => Ok(Material::PurpleDye { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_DYE" => Ok(Material::BlueDye { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_DYE" => Ok(Material::BrownDye { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_DYE" => Ok(Material::GreenDye { inner: MaterialStruct::from_raw(env,obj)?}),"RED_DYE" => Ok(Material::RedDye { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_DYE" => Ok(Material::BlackDye { inner: MaterialStruct::from_raw(env,obj)?}),"BONE_MEAL" => Ok(Material::BoneMeal { inner: MaterialStruct::from_raw(env,obj)?}),"BONE" => Ok(Material::Bone { inner: MaterialStruct::from_raw(env,obj)?}),"SUGAR" => Ok(Material::Sugar { inner: MaterialStruct::from_raw(env,obj)?}),"CAKE" => Ok(Material::Cake { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_BED" => Ok(Material::WhiteBed { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_BED" => Ok(Material::OrangeBed { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_BED" => Ok(Material::MagentaBed { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_BED" => Ok(Material::LightBlueBed { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_BED" => Ok(Material::YellowBed { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_BED" => Ok(Material::LimeBed { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_BED" => Ok(Material::PinkBed { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_BED" => Ok(Material::GrayBed { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_BED" => Ok(Material::LightGrayBed { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_BED" => Ok(Material::CyanBed { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_BED" => Ok(Material::PurpleBed { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_BED" => Ok(Material::BlueBed { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_BED" => Ok(Material::BrownBed { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_BED" => Ok(Material::GreenBed { inner: MaterialStruct::from_raw(env,obj)?}),"RED_BED" => Ok(Material::RedBed { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_BED" => Ok(Material::BlackBed { inner: MaterialStruct::from_raw(env,obj)?}),"COOKIE" => Ok(Material::Cookie { inner: MaterialStruct::from_raw(env,obj)?}),"CRAFTER" => Ok(Material::Crafter { inner: MaterialStruct::from_raw(env,obj)?}),"FILLED_MAP" => Ok(Material::FilledMap { inner: MaterialStruct::from_raw(env,obj)?}),"SHEARS" => Ok(Material::Shears { inner: MaterialStruct::from_raw(env,obj)?}),"MELON_SLICE" => Ok(Material::MelonSlice { inner: MaterialStruct::from_raw(env,obj)?}),"DRIED_KELP" => Ok(Material::DriedKelp { inner: MaterialStruct::from_raw(env,obj)?}),"PUMPKIN_SEEDS" => Ok(Material::PumpkinSeeds { inner: MaterialStruct::from_raw(env,obj)?}),"MELON_SEEDS" => Ok(Material::MelonSeeds { inner: MaterialStruct::from_raw(env,obj)?}),"BEEF" => Ok(Material::Beef { inner: MaterialStruct::from_raw(env,obj)?}),"COOKED_BEEF" => Ok(Material::CookedBeef { inner: MaterialStruct::from_raw(env,obj)?}),"CHICKEN" => Ok(Material::Chicken { inner: MaterialStruct::from_raw(env,obj)?}),"COOKED_CHICKEN" => Ok(Material::CookedChicken { inner: MaterialStruct::from_raw(env,obj)?}),"ROTTEN_FLESH" => Ok(Material::RottenFlesh { inner: MaterialStruct::from_raw(env,obj)?}),"ENDER_PEARL" => Ok(Material::EnderPearl { inner: MaterialStruct::from_raw(env,obj)?}),"BLAZE_ROD" => Ok(Material::BlazeRod { inner: MaterialStruct::from_raw(env,obj)?}),"GHAST_TEAR" => Ok(Material::GhastTear { inner: MaterialStruct::from_raw(env,obj)?}),"GOLD_NUGGET" => Ok(Material::GoldNugget { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_WART" => Ok(Material::NetherWart { inner: MaterialStruct::from_raw(env,obj)?}),"POTION" => Ok(Material::Potion { inner: MaterialStruct::from_raw(env,obj)?}),"GLASS_BOTTLE" => Ok(Material::GlassBottle { inner: MaterialStruct::from_raw(env,obj)?}),"SPIDER_EYE" => Ok(Material::SpiderEye { inner: MaterialStruct::from_raw(env,obj)?}),"FERMENTED_SPIDER_EYE" => Ok(Material::FermentedSpiderEye { inner: MaterialStruct::from_raw(env,obj)?}),"BLAZE_POWDER" => Ok(Material::BlazePowder { inner: MaterialStruct::from_raw(env,obj)?}),"MAGMA_CREAM" => Ok(Material::MagmaCream { inner: MaterialStruct::from_raw(env,obj)?}),"BREWING_STAND" => Ok(Material::BrewingStand { inner: MaterialStruct::from_raw(env,obj)?}),"CAULDRON" => Ok(Material::Cauldron { inner: MaterialStruct::from_raw(env,obj)?}),"ENDER_EYE" => Ok(Material::EnderEye { inner: MaterialStruct::from_raw(env,obj)?}),"GLISTERING_MELON_SLICE" => Ok(Material::GlisteringMelonSlice { inner: MaterialStruct::from_raw(env,obj)?}),"ALLAY_SPAWN_EGG" => Ok(Material::AllaySpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"AXOLOTL_SPAWN_EGG" => Ok(Material::AxolotlSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"BAT_SPAWN_EGG" => Ok(Material::BatSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"BEE_SPAWN_EGG" => Ok(Material::BeeSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"BLAZE_SPAWN_EGG" => Ok(Material::BlazeSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"BREEZE_SPAWN_EGG" => Ok(Material::BreezeSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"CAT_SPAWN_EGG" => Ok(Material::CatSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"CAMEL_SPAWN_EGG" => Ok(Material::CamelSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"CAVE_SPIDER_SPAWN_EGG" => Ok(Material::CaveSpiderSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"CHICKEN_SPAWN_EGG" => Ok(Material::ChickenSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"COD_SPAWN_EGG" => Ok(Material::CodSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"COW_SPAWN_EGG" => Ok(Material::CowSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"CREEPER_SPAWN_EGG" => Ok(Material::CreeperSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"DOLPHIN_SPAWN_EGG" => Ok(Material::DolphinSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"DONKEY_SPAWN_EGG" => Ok(Material::DonkeySpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"DROWNED_SPAWN_EGG" => Ok(Material::DrownedSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"ELDER_GUARDIAN_SPAWN_EGG" => Ok(Material::ElderGuardianSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"ENDER_DRAGON_SPAWN_EGG" => Ok(Material::EnderDragonSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"ENDERMAN_SPAWN_EGG" => Ok(Material::EndermanSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"ENDERMITE_SPAWN_EGG" => Ok(Material::EndermiteSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"EVOKER_SPAWN_EGG" => Ok(Material::EvokerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"FOX_SPAWN_EGG" => Ok(Material::FoxSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"FROG_SPAWN_EGG" => Ok(Material::FrogSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"GHAST_SPAWN_EGG" => Ok(Material::GhastSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"GLOW_SQUID_SPAWN_EGG" => Ok(Material::GlowSquidSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"GOAT_SPAWN_EGG" => Ok(Material::GoatSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"GUARDIAN_SPAWN_EGG" => Ok(Material::GuardianSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"HOGLIN_SPAWN_EGG" => Ok(Material::HoglinSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"HORSE_SPAWN_EGG" => Ok(Material::HorseSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"HUSK_SPAWN_EGG" => Ok(Material::HuskSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_GOLEM_SPAWN_EGG" => Ok(Material::IronGolemSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"LLAMA_SPAWN_EGG" => Ok(Material::LlamaSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"MAGMA_CUBE_SPAWN_EGG" => Ok(Material::MagmaCubeSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"MOOSHROOM_SPAWN_EGG" => Ok(Material::MooshroomSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"MULE_SPAWN_EGG" => Ok(Material::MuleSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"OCELOT_SPAWN_EGG" => Ok(Material::OcelotSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"PANDA_SPAWN_EGG" => Ok(Material::PandaSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"PARROT_SPAWN_EGG" => Ok(Material::ParrotSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"PHANTOM_SPAWN_EGG" => Ok(Material::PhantomSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"PIG_SPAWN_EGG" => Ok(Material::PigSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"PIGLIN_SPAWN_EGG" => Ok(Material::PiglinSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"PIGLIN_BRUTE_SPAWN_EGG" => Ok(Material::PiglinBruteSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"PILLAGER_SPAWN_EGG" => Ok(Material::PillagerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"POLAR_BEAR_SPAWN_EGG" => Ok(Material::PolarBearSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"PUFFERFISH_SPAWN_EGG" => Ok(Material::PufferfishSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"RABBIT_SPAWN_EGG" => Ok(Material::RabbitSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"RAVAGER_SPAWN_EGG" => Ok(Material::RavagerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SALMON_SPAWN_EGG" => Ok(Material::SalmonSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SHEEP_SPAWN_EGG" => Ok(Material::SheepSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SHULKER_SPAWN_EGG" => Ok(Material::ShulkerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SILVERFISH_SPAWN_EGG" => Ok(Material::SilverfishSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SKELETON_SPAWN_EGG" => Ok(Material::SkeletonSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SKELETON_HORSE_SPAWN_EGG" => Ok(Material::SkeletonHorseSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SLIME_SPAWN_EGG" => Ok(Material::SlimeSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SNIFFER_SPAWN_EGG" => Ok(Material::SnifferSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SNOW_GOLEM_SPAWN_EGG" => Ok(Material::SnowGolemSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SPIDER_SPAWN_EGG" => Ok(Material::SpiderSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"SQUID_SPAWN_EGG" => Ok(Material::SquidSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"STRAY_SPAWN_EGG" => Ok(Material::StraySpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"STRIDER_SPAWN_EGG" => Ok(Material::StriderSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"TADPOLE_SPAWN_EGG" => Ok(Material::TadpoleSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"TRADER_LLAMA_SPAWN_EGG" => Ok(Material::TraderLlamaSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"TROPICAL_FISH_SPAWN_EGG" => Ok(Material::TropicalFishSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"TURTLE_SPAWN_EGG" => Ok(Material::TurtleSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"VEX_SPAWN_EGG" => Ok(Material::VexSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"VILLAGER_SPAWN_EGG" => Ok(Material::VillagerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"VINDICATOR_SPAWN_EGG" => Ok(Material::VindicatorSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"WANDERING_TRADER_SPAWN_EGG" => Ok(Material::WanderingTraderSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"WARDEN_SPAWN_EGG" => Ok(Material::WardenSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"WITCH_SPAWN_EGG" => Ok(Material::WitchSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"WITHER_SPAWN_EGG" => Ok(Material::WitherSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"WITHER_SKELETON_SPAWN_EGG" => Ok(Material::WitherSkeletonSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"WOLF_SPAWN_EGG" => Ok(Material::WolfSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"ZOGLIN_SPAWN_EGG" => Ok(Material::ZoglinSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"ZOMBIE_SPAWN_EGG" => Ok(Material::ZombieSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"ZOMBIE_HORSE_SPAWN_EGG" => Ok(Material::ZombieHorseSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"ZOMBIE_VILLAGER_SPAWN_EGG" => Ok(Material::ZombieVillagerSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"ZOMBIFIED_PIGLIN_SPAWN_EGG" => Ok(Material::ZombifiedPiglinSpawnEgg { inner: MaterialStruct::from_raw(env,obj)?}),"EXPERIENCE_BOTTLE" => Ok(Material::ExperienceBottle { inner: MaterialStruct::from_raw(env,obj)?}),"FIRE_CHARGE" => Ok(Material::FireCharge { inner: MaterialStruct::from_raw(env,obj)?}),"WRITABLE_BOOK" => Ok(Material::WritableBook { inner: MaterialStruct::from_raw(env,obj)?}),"WRITTEN_BOOK" => Ok(Material::WrittenBook { inner: MaterialStruct::from_raw(env,obj)?}),"ITEM_FRAME" => Ok(Material::ItemFrame { inner: MaterialStruct::from_raw(env,obj)?}),"GLOW_ITEM_FRAME" => Ok(Material::GlowItemFrame { inner: MaterialStruct::from_raw(env,obj)?}),"FLOWER_POT" => Ok(Material::FlowerPot { inner: MaterialStruct::from_raw(env,obj)?}),"CARROT" => Ok(Material::Carrot { inner: MaterialStruct::from_raw(env,obj)?}),"POTATO" => Ok(Material::Potato { inner: MaterialStruct::from_raw(env,obj)?}),"BAKED_POTATO" => Ok(Material::BakedPotato { inner: MaterialStruct::from_raw(env,obj)?}),"POISONOUS_POTATO" => Ok(Material::PoisonousPotato { inner: MaterialStruct::from_raw(env,obj)?}),"MAP" => Ok(Material::Map { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_CARROT" => Ok(Material::GoldenCarrot { inner: MaterialStruct::from_raw(env,obj)?}),"SKELETON_SKULL" => Ok(Material::SkeletonSkull { inner: MaterialStruct::from_raw(env,obj)?}),"WITHER_SKELETON_SKULL" => Ok(Material::WitherSkeletonSkull { inner: MaterialStruct::from_raw(env,obj)?}),"PLAYER_HEAD" => Ok(Material::PlayerHead { inner: MaterialStruct::from_raw(env,obj)?}),"ZOMBIE_HEAD" => Ok(Material::ZombieHead { inner: MaterialStruct::from_raw(env,obj)?}),"CREEPER_HEAD" => Ok(Material::CreeperHead { inner: MaterialStruct::from_raw(env,obj)?}),"DRAGON_HEAD" => Ok(Material::DragonHead { inner: MaterialStruct::from_raw(env,obj)?}),"PIGLIN_HEAD" => Ok(Material::PiglinHead { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_STAR" => Ok(Material::NetherStar { inner: MaterialStruct::from_raw(env,obj)?}),"PUMPKIN_PIE" => Ok(Material::PumpkinPie { inner: MaterialStruct::from_raw(env,obj)?}),"FIREWORK_ROCKET" => Ok(Material::FireworkRocket { inner: MaterialStruct::from_raw(env,obj)?}),"FIREWORK_STAR" => Ok(Material::FireworkStar { inner: MaterialStruct::from_raw(env,obj)?}),"ENCHANTED_BOOK" => Ok(Material::EnchantedBook { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_BRICK" => Ok(Material::NetherBrick { inner: MaterialStruct::from_raw(env,obj)?}),"PRISMARINE_SHARD" => Ok(Material::PrismarineShard { inner: MaterialStruct::from_raw(env,obj)?}),"PRISMARINE_CRYSTALS" => Ok(Material::PrismarineCrystals { inner: MaterialStruct::from_raw(env,obj)?}),"RABBIT" => Ok(Material::Rabbit { inner: MaterialStruct::from_raw(env,obj)?}),"COOKED_RABBIT" => Ok(Material::CookedRabbit { inner: MaterialStruct::from_raw(env,obj)?}),"RABBIT_STEW" => Ok(Material::RabbitStew { inner: MaterialStruct::from_raw(env,obj)?}),"RABBIT_FOOT" => Ok(Material::RabbitFoot { inner: MaterialStruct::from_raw(env,obj)?}),"RABBIT_HIDE" => Ok(Material::RabbitHide { inner: MaterialStruct::from_raw(env,obj)?}),"ARMOR_STAND" => Ok(Material::ArmorStand { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_HORSE_ARMOR" => Ok(Material::IronHorseArmor { inner: MaterialStruct::from_raw(env,obj)?}),"GOLDEN_HORSE_ARMOR" => Ok(Material::GoldenHorseArmor { inner: MaterialStruct::from_raw(env,obj)?}),"DIAMOND_HORSE_ARMOR" => Ok(Material::DiamondHorseArmor { inner: MaterialStruct::from_raw(env,obj)?}),"LEATHER_HORSE_ARMOR" => Ok(Material::LeatherHorseArmor { inner: MaterialStruct::from_raw(env,obj)?}),"LEAD" => Ok(Material::Lead { inner: MaterialStruct::from_raw(env,obj)?}),"NAME_TAG" => Ok(Material::NameTag { inner: MaterialStruct::from_raw(env,obj)?}),"COMMAND_BLOCK_MINECART" => Ok(Material::CommandBlockMinecart { inner: MaterialStruct::from_raw(env,obj)?}),"MUTTON" => Ok(Material::Mutton { inner: MaterialStruct::from_raw(env,obj)?}),"COOKED_MUTTON" => Ok(Material::CookedMutton { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_BANNER" => Ok(Material::WhiteBanner { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_BANNER" => Ok(Material::OrangeBanner { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_BANNER" => Ok(Material::MagentaBanner { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_BANNER" => Ok(Material::LightBlueBanner { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_BANNER" => Ok(Material::YellowBanner { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_BANNER" => Ok(Material::LimeBanner { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_BANNER" => Ok(Material::PinkBanner { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_BANNER" => Ok(Material::GrayBanner { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_BANNER" => Ok(Material::LightGrayBanner { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_BANNER" => Ok(Material::CyanBanner { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_BANNER" => Ok(Material::PurpleBanner { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_BANNER" => Ok(Material::BlueBanner { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_BANNER" => Ok(Material::BrownBanner { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_BANNER" => Ok(Material::GreenBanner { inner: MaterialStruct::from_raw(env,obj)?}),"RED_BANNER" => Ok(Material::RedBanner { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_BANNER" => Ok(Material::BlackBanner { inner: MaterialStruct::from_raw(env,obj)?}),"END_CRYSTAL" => Ok(Material::EndCrystal { inner: MaterialStruct::from_raw(env,obj)?}),"CHORUS_FRUIT" => Ok(Material::ChorusFruit { inner: MaterialStruct::from_raw(env,obj)?}),"POPPED_CHORUS_FRUIT" => Ok(Material::PoppedChorusFruit { inner: MaterialStruct::from_raw(env,obj)?}),"TORCHFLOWER_SEEDS" => Ok(Material::TorchflowerSeeds { inner: MaterialStruct::from_raw(env,obj)?}),"PITCHER_POD" => Ok(Material::PitcherPod { inner: MaterialStruct::from_raw(env,obj)?}),"BEETROOT" => Ok(Material::Beetroot { inner: MaterialStruct::from_raw(env,obj)?}),"BEETROOT_SEEDS" => Ok(Material::BeetrootSeeds { inner: MaterialStruct::from_raw(env,obj)?}),"BEETROOT_SOUP" => Ok(Material::BeetrootSoup { inner: MaterialStruct::from_raw(env,obj)?}),"DRAGON_BREATH" => Ok(Material::DragonBreath { inner: MaterialStruct::from_raw(env,obj)?}),"SPLASH_POTION" => Ok(Material::SplashPotion { inner: MaterialStruct::from_raw(env,obj)?}),"SPECTRAL_ARROW" => Ok(Material::SpectralArrow { inner: MaterialStruct::from_raw(env,obj)?}),"TIPPED_ARROW" => Ok(Material::TippedArrow { inner: MaterialStruct::from_raw(env,obj)?}),"LINGERING_POTION" => Ok(Material::LingeringPotion { inner: MaterialStruct::from_raw(env,obj)?}),"SHIELD" => Ok(Material::Shield { inner: MaterialStruct::from_raw(env,obj)?}),"TOTEM_OF_UNDYING" => Ok(Material::TotemOfUndying { inner: MaterialStruct::from_raw(env,obj)?}),"SHULKER_SHELL" => Ok(Material::ShulkerShell { inner: MaterialStruct::from_raw(env,obj)?}),"IRON_NUGGET" => Ok(Material::IronNugget { inner: MaterialStruct::from_raw(env,obj)?}),"KNOWLEDGE_BOOK" => Ok(Material::KnowledgeBook { inner: MaterialStruct::from_raw(env,obj)?}),"DEBUG_STICK" => Ok(Material::DebugStick { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_13" => Ok(Material::MusicDisc13 { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_CAT" => Ok(Material::MusicDiscCat { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_BLOCKS" => Ok(Material::MusicDiscBlocks { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_CHIRP" => Ok(Material::MusicDiscChirp { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_FAR" => Ok(Material::MusicDiscFar { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_MALL" => Ok(Material::MusicDiscMall { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_MELLOHI" => Ok(Material::MusicDiscMellohi { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_STAL" => Ok(Material::MusicDiscStal { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_STRAD" => Ok(Material::MusicDiscStrad { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_WARD" => Ok(Material::MusicDiscWard { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_11" => Ok(Material::MusicDisc11 { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_WAIT" => Ok(Material::MusicDiscWait { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_OTHERSIDE" => Ok(Material::MusicDiscOtherside { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_RELIC" => Ok(Material::MusicDiscRelic { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_5" => Ok(Material::MusicDisc5 { inner: MaterialStruct::from_raw(env,obj)?}),"MUSIC_DISC_PIGSTEP" => Ok(Material::MusicDiscPigstep { inner: MaterialStruct::from_raw(env,obj)?}),"DISC_FRAGMENT_5" => Ok(Material::DiscFragment5 { inner: MaterialStruct::from_raw(env,obj)?}),"TRIDENT" => Ok(Material::Trident { inner: MaterialStruct::from_raw(env,obj)?}),"PHANTOM_MEMBRANE" => Ok(Material::PhantomMembrane { inner: MaterialStruct::from_raw(env,obj)?}),"NAUTILUS_SHELL" => Ok(Material::NautilusShell { inner: MaterialStruct::from_raw(env,obj)?}),"HEART_OF_THE_SEA" => Ok(Material::HeartOfTheSea { inner: MaterialStruct::from_raw(env,obj)?}),"CROSSBOW" => Ok(Material::Crossbow { inner: MaterialStruct::from_raw(env,obj)?}),"SUSPICIOUS_STEW" => Ok(Material::SuspiciousStew { inner: MaterialStruct::from_raw(env,obj)?}),"LOOM" => Ok(Material::Loom { inner: MaterialStruct::from_raw(env,obj)?}),"FLOWER_BANNER_PATTERN" => Ok(Material::FlowerBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),"CREEPER_BANNER_PATTERN" => Ok(Material::CreeperBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),"SKULL_BANNER_PATTERN" => Ok(Material::SkullBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),"MOJANG_BANNER_PATTERN" => Ok(Material::MojangBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),"GLOBE_BANNER_PATTERN" => Ok(Material::GlobeBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),"PIGLIN_BANNER_PATTERN" => Ok(Material::PiglinBannerPattern { inner: MaterialStruct::from_raw(env,obj)?}),"GOAT_HORN" => Ok(Material::GoatHorn { inner: MaterialStruct::from_raw(env,obj)?}),"COMPOSTER" => Ok(Material::Composter { inner: MaterialStruct::from_raw(env,obj)?}),"BARREL" => Ok(Material::Barrel { inner: MaterialStruct::from_raw(env,obj)?}),"SMOKER" => Ok(Material::Smoker { inner: MaterialStruct::from_raw(env,obj)?}),"BLAST_FURNACE" => Ok(Material::BlastFurnace { inner: MaterialStruct::from_raw(env,obj)?}),"CARTOGRAPHY_TABLE" => Ok(Material::CartographyTable { inner: MaterialStruct::from_raw(env,obj)?}),"FLETCHING_TABLE" => Ok(Material::FletchingTable { inner: MaterialStruct::from_raw(env,obj)?}),"GRINDSTONE" => Ok(Material::Grindstone { inner: MaterialStruct::from_raw(env,obj)?}),"SMITHING_TABLE" => Ok(Material::SmithingTable { inner: MaterialStruct::from_raw(env,obj)?}),"STONECUTTER" => Ok(Material::Stonecutter { inner: MaterialStruct::from_raw(env,obj)?}),"BELL" => Ok(Material::Bell { inner: MaterialStruct::from_raw(env,obj)?}),"LANTERN" => Ok(Material::Lantern { inner: MaterialStruct::from_raw(env,obj)?}),"SOUL_LANTERN" => Ok(Material::SoulLantern { inner: MaterialStruct::from_raw(env,obj)?}),"SWEET_BERRIES" => Ok(Material::SweetBerries { inner: MaterialStruct::from_raw(env,obj)?}),"GLOW_BERRIES" => Ok(Material::GlowBerries { inner: MaterialStruct::from_raw(env,obj)?}),"CAMPFIRE" => Ok(Material::Campfire { inner: MaterialStruct::from_raw(env,obj)?}),"SOUL_CAMPFIRE" => Ok(Material::SoulCampfire { inner: MaterialStruct::from_raw(env,obj)?}),"SHROOMLIGHT" => Ok(Material::Shroomlight { inner: MaterialStruct::from_raw(env,obj)?}),"HONEYCOMB" => Ok(Material::Honeycomb { inner: MaterialStruct::from_raw(env,obj)?}),"BEE_NEST" => Ok(Material::BeeNest { inner: MaterialStruct::from_raw(env,obj)?}),"BEEHIVE" => Ok(Material::Beehive { inner: MaterialStruct::from_raw(env,obj)?}),"HONEY_BOTTLE" => Ok(Material::HoneyBottle { inner: MaterialStruct::from_raw(env,obj)?}),"HONEYCOMB_BLOCK" => Ok(Material::HoneycombBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LODESTONE" => Ok(Material::Lodestone { inner: MaterialStruct::from_raw(env,obj)?}),"CRYING_OBSIDIAN" => Ok(Material::CryingObsidian { inner: MaterialStruct::from_raw(env,obj)?}),"BLACKSTONE" => Ok(Material::Blackstone { inner: MaterialStruct::from_raw(env,obj)?}),"BLACKSTONE_SLAB" => Ok(Material::BlackstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"BLACKSTONE_STAIRS" => Ok(Material::BlackstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"GILDED_BLACKSTONE" => Ok(Material::GildedBlackstone { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_BLACKSTONE" => Ok(Material::PolishedBlackstone { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_BLACKSTONE_SLAB" => Ok(Material::PolishedBlackstoneSlab { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_BLACKSTONE_STAIRS" => Ok(Material::PolishedBlackstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"CHISELED_POLISHED_BLACKSTONE" => Ok(Material::ChiseledPolishedBlackstone { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_BLACKSTONE_BRICKS" => Ok(Material::PolishedBlackstoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_BLACKSTONE_BRICK_SLAB" => Ok(Material::PolishedBlackstoneBrickSlab { inner: MaterialStruct::from_raw(env,obj)?}),"POLISHED_BLACKSTONE_BRICK_STAIRS" => Ok(Material::PolishedBlackstoneBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"CRACKED_POLISHED_BLACKSTONE_BRICKS" => Ok(Material::CrackedPolishedBlackstoneBricks { inner: MaterialStruct::from_raw(env,obj)?}),"RESPAWN_ANCHOR" => Ok(Material::RespawnAnchor { inner: MaterialStruct::from_raw(env,obj)?}),"CANDLE" => Ok(Material::Candle { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_CANDLE" => Ok(Material::WhiteCandle { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_CANDLE" => Ok(Material::OrangeCandle { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_CANDLE" => Ok(Material::MagentaCandle { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_CANDLE" => Ok(Material::LightBlueCandle { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_CANDLE" => Ok(Material::YellowCandle { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_CANDLE" => Ok(Material::LimeCandle { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_CANDLE" => Ok(Material::PinkCandle { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_CANDLE" => Ok(Material::GrayCandle { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_CANDLE" => Ok(Material::LightGrayCandle { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_CANDLE" => Ok(Material::CyanCandle { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_CANDLE" => Ok(Material::PurpleCandle { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_CANDLE" => Ok(Material::BlueCandle { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_CANDLE" => Ok(Material::BrownCandle { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_CANDLE" => Ok(Material::GreenCandle { inner: MaterialStruct::from_raw(env,obj)?}),"RED_CANDLE" => Ok(Material::RedCandle { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_CANDLE" => Ok(Material::BlackCandle { inner: MaterialStruct::from_raw(env,obj)?}),"SMALL_AMETHYST_BUD" => Ok(Material::SmallAmethystBud { inner: MaterialStruct::from_raw(env,obj)?}),"MEDIUM_AMETHYST_BUD" => Ok(Material::MediumAmethystBud { inner: MaterialStruct::from_raw(env,obj)?}),"LARGE_AMETHYST_BUD" => Ok(Material::LargeAmethystBud { inner: MaterialStruct::from_raw(env,obj)?}),"AMETHYST_CLUSTER" => Ok(Material::AmethystCluster { inner: MaterialStruct::from_raw(env,obj)?}),"POINTED_DRIPSTONE" => Ok(Material::PointedDripstone { inner: MaterialStruct::from_raw(env,obj)?}),"OCHRE_FROGLIGHT" => Ok(Material::OchreFroglight { inner: MaterialStruct::from_raw(env,obj)?}),"VERDANT_FROGLIGHT" => Ok(Material::VerdantFroglight { inner: MaterialStruct::from_raw(env,obj)?}),"PEARLESCENT_FROGLIGHT" => Ok(Material::PearlescentFroglight { inner: MaterialStruct::from_raw(env,obj)?}),"FROGSPAWN" => Ok(Material::Frogspawn { inner: MaterialStruct::from_raw(env,obj)?}),"ECHO_SHARD" => Ok(Material::EchoShard { inner: MaterialStruct::from_raw(env,obj)?}),"BRUSH" => Ok(Material::Brush { inner: MaterialStruct::from_raw(env,obj)?}),"NETHERITE_UPGRADE_SMITHING_TEMPLATE" => Ok(Material::NetheriteUpgradeSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::SentryArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"DUNE_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::DuneArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"COAST_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::CoastArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"WILD_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::WildArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"WARD_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::WardArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"EYE_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::EyeArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"VEX_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::VexArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"TIDE_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::TideArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::SnoutArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"RIB_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::RibArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::SpireArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::WayfinderArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::ShaperArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::SilenceArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"RAISER_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::RaiserArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"HOST_ARMOR_TRIM_SMITHING_TEMPLATE" => Ok(Material::HostArmorTrimSmithingTemplate { inner: MaterialStruct::from_raw(env,obj)?}),"ANGLER_POTTERY_SHERD" => Ok(Material::AnglerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"ARCHER_POTTERY_SHERD" => Ok(Material::ArcherPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"ARMS_UP_POTTERY_SHERD" => Ok(Material::ArmsUpPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"BLADE_POTTERY_SHERD" => Ok(Material::BladePotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"BREWER_POTTERY_SHERD" => Ok(Material::BrewerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"BURN_POTTERY_SHERD" => Ok(Material::BurnPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"DANGER_POTTERY_SHERD" => Ok(Material::DangerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"EXPLORER_POTTERY_SHERD" => Ok(Material::ExplorerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"FRIEND_POTTERY_SHERD" => Ok(Material::FriendPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"HEART_POTTERY_SHERD" => Ok(Material::HeartPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"HEARTBREAK_POTTERY_SHERD" => Ok(Material::HeartbreakPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"HOWL_POTTERY_SHERD" => Ok(Material::HowlPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"MINER_POTTERY_SHERD" => Ok(Material::MinerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"MOURNER_POTTERY_SHERD" => Ok(Material::MournerPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"PLENTY_POTTERY_SHERD" => Ok(Material::PlentyPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"PRIZE_POTTERY_SHERD" => Ok(Material::PrizePotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"SHEAF_POTTERY_SHERD" => Ok(Material::SheafPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"SHELTER_POTTERY_SHERD" => Ok(Material::ShelterPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"SKULL_POTTERY_SHERD" => Ok(Material::SkullPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"SNORT_POTTERY_SHERD" => Ok(Material::SnortPotterySherd { inner: MaterialStruct::from_raw(env,obj)?}),"COPPER_GRATE" => Ok(Material::CopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),"EXPOSED_COPPER_GRATE" => Ok(Material::ExposedCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),"WEATHERED_COPPER_GRATE" => Ok(Material::WeatheredCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),"OXIDIZED_COPPER_GRATE" => Ok(Material::OxidizedCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_COPPER_GRATE" => Ok(Material::WaxedCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_EXPOSED_COPPER_GRATE" => Ok(Material::WaxedExposedCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_WEATHERED_COPPER_GRATE" => Ok(Material::WaxedWeatheredCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_OXIDIZED_COPPER_GRATE" => Ok(Material::WaxedOxidizedCopperGrate { inner: MaterialStruct::from_raw(env,obj)?}),"COPPER_BULB" => Ok(Material::CopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),"EXPOSED_COPPER_BULB" => Ok(Material::ExposedCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),"WEATHERED_COPPER_BULB" => Ok(Material::WeatheredCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),"OXIDIZED_COPPER_BULB" => Ok(Material::OxidizedCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_COPPER_BULB" => Ok(Material::WaxedCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_EXPOSED_COPPER_BULB" => Ok(Material::WaxedExposedCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_WEATHERED_COPPER_BULB" => Ok(Material::WaxedWeatheredCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),"WAXED_OXIDIZED_COPPER_BULB" => Ok(Material::WaxedOxidizedCopperBulb { inner: MaterialStruct::from_raw(env,obj)?}),"TRIAL_SPAWNER" => Ok(Material::TrialSpawner { inner: MaterialStruct::from_raw(env,obj)?}),"TRIAL_KEY" => Ok(Material::TrialKey { inner: MaterialStruct::from_raw(env,obj)?}),"WATER" => Ok(Material::Water { inner: MaterialStruct::from_raw(env,obj)?}),"LAVA" => Ok(Material::Lava { inner: MaterialStruct::from_raw(env,obj)?}),"TALL_SEAGRASS" => Ok(Material::TallSeagrass { inner: MaterialStruct::from_raw(env,obj)?}),"PISTON_HEAD" => Ok(Material::PistonHead { inner: MaterialStruct::from_raw(env,obj)?}),"MOVING_PISTON" => Ok(Material::MovingPiston { inner: MaterialStruct::from_raw(env,obj)?}),"WALL_TORCH" => Ok(Material::WallTorch { inner: MaterialStruct::from_raw(env,obj)?}),"FIRE" => Ok(Material::Fire { inner: MaterialStruct::from_raw(env,obj)?}),"SOUL_FIRE" => Ok(Material::SoulFire { inner: MaterialStruct::from_raw(env,obj)?}),"REDSTONE_WIRE" => Ok(Material::RedstoneWire { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_WALL_SIGN" => Ok(Material::OakWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_WALL_SIGN" => Ok(Material::SpruceWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_WALL_SIGN" => Ok(Material::BirchWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_WALL_SIGN" => Ok(Material::AcaciaWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_WALL_SIGN" => Ok(Material::CherryWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_WALL_SIGN" => Ok(Material::JungleWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_WALL_SIGN" => Ok(Material::DarkOakWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_WALL_SIGN" => Ok(Material::MangroveWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_WALL_SIGN" => Ok(Material::BambooWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"OAK_WALL_HANGING_SIGN" => Ok(Material::OakWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"SPRUCE_WALL_HANGING_SIGN" => Ok(Material::SpruceWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"BIRCH_WALL_HANGING_SIGN" => Ok(Material::BirchWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"ACACIA_WALL_HANGING_SIGN" => Ok(Material::AcaciaWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"CHERRY_WALL_HANGING_SIGN" => Ok(Material::CherryWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"JUNGLE_WALL_HANGING_SIGN" => Ok(Material::JungleWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"DARK_OAK_WALL_HANGING_SIGN" => Ok(Material::DarkOakWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"MANGROVE_WALL_HANGING_SIGN" => Ok(Material::MangroveWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_WALL_HANGING_SIGN" => Ok(Material::CrimsonWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_WALL_HANGING_SIGN" => Ok(Material::WarpedWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_WALL_HANGING_SIGN" => Ok(Material::BambooWallHangingSign { inner: MaterialStruct::from_raw(env,obj)?}),"REDSTONE_WALL_TORCH" => Ok(Material::RedstoneWallTorch { inner: MaterialStruct::from_raw(env,obj)?}),"SOUL_WALL_TORCH" => Ok(Material::SoulWallTorch { inner: MaterialStruct::from_raw(env,obj)?}),"NETHER_PORTAL" => Ok(Material::NetherPortal { inner: MaterialStruct::from_raw(env,obj)?}),"ATTACHED_PUMPKIN_STEM" => Ok(Material::AttachedPumpkinStem { inner: MaterialStruct::from_raw(env,obj)?}),"ATTACHED_MELON_STEM" => Ok(Material::AttachedMelonStem { inner: MaterialStruct::from_raw(env,obj)?}),"PUMPKIN_STEM" => Ok(Material::PumpkinStem { inner: MaterialStruct::from_raw(env,obj)?}),"MELON_STEM" => Ok(Material::MelonStem { inner: MaterialStruct::from_raw(env,obj)?}),"WATER_CAULDRON" => Ok(Material::WaterCauldron { inner: MaterialStruct::from_raw(env,obj)?}),"LAVA_CAULDRON" => Ok(Material::LavaCauldron { inner: MaterialStruct::from_raw(env,obj)?}),"POWDER_SNOW_CAULDRON" => Ok(Material::PowderSnowCauldron { inner: MaterialStruct::from_raw(env,obj)?}),"END_PORTAL" => Ok(Material::EndPortal { inner: MaterialStruct::from_raw(env,obj)?}),"COCOA" => Ok(Material::Cocoa { inner: MaterialStruct::from_raw(env,obj)?}),"TRIPWIRE" => Ok(Material::Tripwire { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_TORCHFLOWER" => Ok(Material::PottedTorchflower { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_OAK_SAPLING" => Ok(Material::PottedOakSapling { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_SPRUCE_SAPLING" => Ok(Material::PottedSpruceSapling { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_BIRCH_SAPLING" => Ok(Material::PottedBirchSapling { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_JUNGLE_SAPLING" => Ok(Material::PottedJungleSapling { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_ACACIA_SAPLING" => Ok(Material::PottedAcaciaSapling { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_CHERRY_SAPLING" => Ok(Material::PottedCherrySapling { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_DARK_OAK_SAPLING" => Ok(Material::PottedDarkOakSapling { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_MANGROVE_PROPAGULE" => Ok(Material::PottedMangrovePropagule { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_FERN" => Ok(Material::PottedFern { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_DANDELION" => Ok(Material::PottedDandelion { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_POPPY" => Ok(Material::PottedPoppy { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_BLUE_ORCHID" => Ok(Material::PottedBlueOrchid { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_ALLIUM" => Ok(Material::PottedAllium { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_AZURE_BLUET" => Ok(Material::PottedAzureBluet { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_RED_TULIP" => Ok(Material::PottedRedTulip { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_ORANGE_TULIP" => Ok(Material::PottedOrangeTulip { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_WHITE_TULIP" => Ok(Material::PottedWhiteTulip { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_PINK_TULIP" => Ok(Material::PottedPinkTulip { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_OXEYE_DAISY" => Ok(Material::PottedOxeyeDaisy { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_CORNFLOWER" => Ok(Material::PottedCornflower { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_LILY_OF_THE_VALLEY" => Ok(Material::PottedLilyOfTheValley { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_WITHER_ROSE" => Ok(Material::PottedWitherRose { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_RED_MUSHROOM" => Ok(Material::PottedRedMushroom { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_BROWN_MUSHROOM" => Ok(Material::PottedBrownMushroom { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_DEAD_BUSH" => Ok(Material::PottedDeadBush { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_CACTUS" => Ok(Material::PottedCactus { inner: MaterialStruct::from_raw(env,obj)?}),"CARROTS" => Ok(Material::Carrots { inner: MaterialStruct::from_raw(env,obj)?}),"POTATOES" => Ok(Material::Potatoes { inner: MaterialStruct::from_raw(env,obj)?}),"SKELETON_WALL_SKULL" => Ok(Material::SkeletonWallSkull { inner: MaterialStruct::from_raw(env,obj)?}),"WITHER_SKELETON_WALL_SKULL" => Ok(Material::WitherSkeletonWallSkull { inner: MaterialStruct::from_raw(env,obj)?}),"ZOMBIE_WALL_HEAD" => Ok(Material::ZombieWallHead { inner: MaterialStruct::from_raw(env,obj)?}),"PLAYER_WALL_HEAD" => Ok(Material::PlayerWallHead { inner: MaterialStruct::from_raw(env,obj)?}),"CREEPER_WALL_HEAD" => Ok(Material::CreeperWallHead { inner: MaterialStruct::from_raw(env,obj)?}),"DRAGON_WALL_HEAD" => Ok(Material::DragonWallHead { inner: MaterialStruct::from_raw(env,obj)?}),"PIGLIN_WALL_HEAD" => Ok(Material::PiglinWallHead { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_WALL_BANNER" => Ok(Material::WhiteWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_WALL_BANNER" => Ok(Material::OrangeWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_WALL_BANNER" => Ok(Material::MagentaWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_WALL_BANNER" => Ok(Material::LightBlueWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_WALL_BANNER" => Ok(Material::YellowWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_WALL_BANNER" => Ok(Material::LimeWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_WALL_BANNER" => Ok(Material::PinkWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_WALL_BANNER" => Ok(Material::GrayWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_WALL_BANNER" => Ok(Material::LightGrayWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_WALL_BANNER" => Ok(Material::CyanWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_WALL_BANNER" => Ok(Material::PurpleWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_WALL_BANNER" => Ok(Material::BlueWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_WALL_BANNER" => Ok(Material::BrownWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_WALL_BANNER" => Ok(Material::GreenWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"RED_WALL_BANNER" => Ok(Material::RedWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_WALL_BANNER" => Ok(Material::BlackWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"TORCHFLOWER_CROP" => Ok(Material::TorchflowerCrop { inner: MaterialStruct::from_raw(env,obj)?}),"PITCHER_CROP" => Ok(Material::PitcherCrop { inner: MaterialStruct::from_raw(env,obj)?}),"BEETROOTS" => Ok(Material::Beetroots { inner: MaterialStruct::from_raw(env,obj)?}),"END_GATEWAY" => Ok(Material::EndGateway { inner: MaterialStruct::from_raw(env,obj)?}),"FROSTED_ICE" => Ok(Material::FrostedIce { inner: MaterialStruct::from_raw(env,obj)?}),"KELP_PLANT" => Ok(Material::KelpPlant { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_TUBE_CORAL_WALL_FAN" => Ok(Material::DeadTubeCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_BRAIN_CORAL_WALL_FAN" => Ok(Material::DeadBrainCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_BUBBLE_CORAL_WALL_FAN" => Ok(Material::DeadBubbleCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_FIRE_CORAL_WALL_FAN" => Ok(Material::DeadFireCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),"DEAD_HORN_CORAL_WALL_FAN" => Ok(Material::DeadHornCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),"TUBE_CORAL_WALL_FAN" => Ok(Material::TubeCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),"BRAIN_CORAL_WALL_FAN" => Ok(Material::BrainCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),"BUBBLE_CORAL_WALL_FAN" => Ok(Material::BubbleCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),"FIRE_CORAL_WALL_FAN" => Ok(Material::FireCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),"HORN_CORAL_WALL_FAN" => Ok(Material::HornCoralWallFan { inner: MaterialStruct::from_raw(env,obj)?}),"BAMBOO_SAPLING" => Ok(Material::BambooSapling { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_BAMBOO" => Ok(Material::PottedBamboo { inner: MaterialStruct::from_raw(env,obj)?}),"VOID_AIR" => Ok(Material::VoidAir { inner: MaterialStruct::from_raw(env,obj)?}),"CAVE_AIR" => Ok(Material::CaveAir { inner: MaterialStruct::from_raw(env,obj)?}),"BUBBLE_COLUMN" => Ok(Material::BubbleColumn { inner: MaterialStruct::from_raw(env,obj)?}),"SWEET_BERRY_BUSH" => Ok(Material::SweetBerryBush { inner: MaterialStruct::from_raw(env,obj)?}),"WEEPING_VINES_PLANT" => Ok(Material::WeepingVinesPlant { inner: MaterialStruct::from_raw(env,obj)?}),"TWISTING_VINES_PLANT" => Ok(Material::TwistingVinesPlant { inner: MaterialStruct::from_raw(env,obj)?}),"CRIMSON_WALL_SIGN" => Ok(Material::CrimsonWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"WARPED_WALL_SIGN" => Ok(Material::WarpedWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_CRIMSON_FUNGUS" => Ok(Material::PottedCrimsonFungus { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_WARPED_FUNGUS" => Ok(Material::PottedWarpedFungus { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_CRIMSON_ROOTS" => Ok(Material::PottedCrimsonRoots { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_WARPED_ROOTS" => Ok(Material::PottedWarpedRoots { inner: MaterialStruct::from_raw(env,obj)?}),"CANDLE_CAKE" => Ok(Material::CandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"WHITE_CANDLE_CAKE" => Ok(Material::WhiteCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"ORANGE_CANDLE_CAKE" => Ok(Material::OrangeCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"MAGENTA_CANDLE_CAKE" => Ok(Material::MagentaCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_BLUE_CANDLE_CAKE" => Ok(Material::LightBlueCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"YELLOW_CANDLE_CAKE" => Ok(Material::YellowCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"LIME_CANDLE_CAKE" => Ok(Material::LimeCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"PINK_CANDLE_CAKE" => Ok(Material::PinkCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"GRAY_CANDLE_CAKE" => Ok(Material::GrayCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"LIGHT_GRAY_CANDLE_CAKE" => Ok(Material::LightGrayCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"CYAN_CANDLE_CAKE" => Ok(Material::CyanCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"PURPLE_CANDLE_CAKE" => Ok(Material::PurpleCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"BLUE_CANDLE_CAKE" => Ok(Material::BlueCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"BROWN_CANDLE_CAKE" => Ok(Material::BrownCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"GREEN_CANDLE_CAKE" => Ok(Material::GreenCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"RED_CANDLE_CAKE" => Ok(Material::RedCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"BLACK_CANDLE_CAKE" => Ok(Material::BlackCandleCake { inner: MaterialStruct::from_raw(env,obj)?}),"POWDER_SNOW" => Ok(Material::PowderSnow { inner: MaterialStruct::from_raw(env,obj)?}),"CAVE_VINES" => Ok(Material::CaveVines { inner: MaterialStruct::from_raw(env,obj)?}),"CAVE_VINES_PLANT" => Ok(Material::CaveVinesPlant { inner: MaterialStruct::from_raw(env,obj)?}),"BIG_DRIPLEAF_STEM" => Ok(Material::BigDripleafStem { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_AZALEA_BUSH" => Ok(Material::PottedAzaleaBush { inner: MaterialStruct::from_raw(env,obj)?}),"POTTED_FLOWERING_AZALEA_BUSH" => Ok(Material::PottedFloweringAzaleaBush { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_AIR" => Ok(Material::LegacyAir { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STONE" => Ok(Material::LegacyStone { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GRASS" => Ok(Material::LegacyGrass { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIRT" => Ok(Material::LegacyDirt { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COBBLESTONE" => Ok(Material::LegacyCobblestone { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD" => Ok(Material::LegacyWood { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SAPLING" => Ok(Material::LegacySapling { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BEDROCK" => Ok(Material::LegacyBedrock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WATER" => Ok(Material::LegacyWater { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STATIONARY_WATER" => Ok(Material::LegacyStationaryWater { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LAVA" => Ok(Material::LegacyLava { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STATIONARY_LAVA" => Ok(Material::LegacyStationaryLava { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SAND" => Ok(Material::LegacySand { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GRAVEL" => Ok(Material::LegacyGravel { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_ORE" => Ok(Material::LegacyGoldOre { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_ORE" => Ok(Material::LegacyIronOre { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COAL_ORE" => Ok(Material::LegacyCoalOre { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LOG" => Ok(Material::LegacyLog { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LEAVES" => Ok(Material::LegacyLeaves { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SPONGE" => Ok(Material::LegacySponge { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GLASS" => Ok(Material::LegacyGlass { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LAPIS_ORE" => Ok(Material::LegacyLapisOre { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LAPIS_BLOCK" => Ok(Material::LegacyLapisBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DISPENSER" => Ok(Material::LegacyDispenser { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SANDSTONE" => Ok(Material::LegacySandstone { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_NOTE_BLOCK" => Ok(Material::LegacyNoteBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BED_BLOCK" => Ok(Material::LegacyBedBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_POWERED_RAIL" => Ok(Material::LegacyPoweredRail { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DETECTOR_RAIL" => Ok(Material::LegacyDetectorRail { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PISTON_STICKY_BASE" => Ok(Material::LegacyPistonStickyBase { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WEB" => Ok(Material::LegacyWeb { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LONG_GRASS" => Ok(Material::LegacyLongGrass { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DEAD_BUSH" => Ok(Material::LegacyDeadBush { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PISTON_BASE" => Ok(Material::LegacyPistonBase { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PISTON_EXTENSION" => Ok(Material::LegacyPistonExtension { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOL" => Ok(Material::LegacyWool { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PISTON_MOVING_PIECE" => Ok(Material::LegacyPistonMovingPiece { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_YELLOW_FLOWER" => Ok(Material::LegacyYellowFlower { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RED_ROSE" => Ok(Material::LegacyRedRose { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BROWN_MUSHROOM" => Ok(Material::LegacyBrownMushroom { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RED_MUSHROOM" => Ok(Material::LegacyRedMushroom { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_BLOCK" => Ok(Material::LegacyGoldBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_BLOCK" => Ok(Material::LegacyIronBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DOUBLE_STEP" => Ok(Material::LegacyDoubleStep { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STEP" => Ok(Material::LegacyStep { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BRICK" => Ok(Material::LegacyBrick { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_TNT" => Ok(Material::LegacyTnt { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BOOKSHELF" => Ok(Material::LegacyBookshelf { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MOSSY_COBBLESTONE" => Ok(Material::LegacyMossyCobblestone { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_OBSIDIAN" => Ok(Material::LegacyObsidian { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_TORCH" => Ok(Material::LegacyTorch { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FIRE" => Ok(Material::LegacyFire { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MOB_SPAWNER" => Ok(Material::LegacyMobSpawner { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD_STAIRS" => Ok(Material::LegacyWoodStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CHEST" => Ok(Material::LegacyChest { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_REDSTONE_WIRE" => Ok(Material::LegacyRedstoneWire { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_ORE" => Ok(Material::LegacyDiamondOre { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_BLOCK" => Ok(Material::LegacyDiamondBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WORKBENCH" => Ok(Material::LegacyWorkbench { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CROPS" => Ok(Material::LegacyCrops { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SOIL" => Ok(Material::LegacySoil { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FURNACE" => Ok(Material::LegacyFurnace { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BURNING_FURNACE" => Ok(Material::LegacyBurningFurnace { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SIGN_POST" => Ok(Material::LegacySignPost { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOODEN_DOOR" => Ok(Material::LegacyWoodenDoor { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LADDER" => Ok(Material::LegacyLadder { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RAILS" => Ok(Material::LegacyRails { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COBBLESTONE_STAIRS" => Ok(Material::LegacyCobblestoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WALL_SIGN" => Ok(Material::LegacyWallSign { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LEVER" => Ok(Material::LegacyLever { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STONE_PLATE" => Ok(Material::LegacyStonePlate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_DOOR_BLOCK" => Ok(Material::LegacyIronDoorBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD_PLATE" => Ok(Material::LegacyWoodPlate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_REDSTONE_ORE" => Ok(Material::LegacyRedstoneOre { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GLOWING_REDSTONE_ORE" => Ok(Material::LegacyGlowingRedstoneOre { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_REDSTONE_TORCH_OFF" => Ok(Material::LegacyRedstoneTorchOff { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_REDSTONE_TORCH_ON" => Ok(Material::LegacyRedstoneTorchOn { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STONE_BUTTON" => Ok(Material::LegacyStoneButton { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SNOW" => Ok(Material::LegacySnow { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ICE" => Ok(Material::LegacyIce { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SNOW_BLOCK" => Ok(Material::LegacySnowBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CACTUS" => Ok(Material::LegacyCactus { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CLAY" => Ok(Material::LegacyClay { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SUGAR_CANE_BLOCK" => Ok(Material::LegacySugarCaneBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_JUKEBOX" => Ok(Material::LegacyJukebox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FENCE" => Ok(Material::LegacyFence { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PUMPKIN" => Ok(Material::LegacyPumpkin { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_NETHERRACK" => Ok(Material::LegacyNetherrack { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SOUL_SAND" => Ok(Material::LegacySoulSand { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GLOWSTONE" => Ok(Material::LegacyGlowstone { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PORTAL" => Ok(Material::LegacyPortal { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_JACK_O_LANTERN" => Ok(Material::LegacyJackOLantern { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CAKE_BLOCK" => Ok(Material::LegacyCakeBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIODE_BLOCK_OFF" => Ok(Material::LegacyDiodeBlockOff { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIODE_BLOCK_ON" => Ok(Material::LegacyDiodeBlockOn { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STAINED_GLASS" => Ok(Material::LegacyStainedGlass { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_TRAP_DOOR" => Ok(Material::LegacyTrapDoor { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MONSTER_EGGS" => Ok(Material::LegacyMonsterEggs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SMOOTH_BRICK" => Ok(Material::LegacySmoothBrick { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_HUGE_MUSHROOM_1" => Ok(Material::LegacyHugeMushroom1 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_HUGE_MUSHROOM_2" => Ok(Material::LegacyHugeMushroom2 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_FENCE" => Ok(Material::LegacyIronFence { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_THIN_GLASS" => Ok(Material::LegacyThinGlass { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MELON_BLOCK" => Ok(Material::LegacyMelonBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PUMPKIN_STEM" => Ok(Material::LegacyPumpkinStem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MELON_STEM" => Ok(Material::LegacyMelonStem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_VINE" => Ok(Material::LegacyVine { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FENCE_GATE" => Ok(Material::LegacyFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BRICK_STAIRS" => Ok(Material::LegacyBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SMOOTH_STAIRS" => Ok(Material::LegacySmoothStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MYCEL" => Ok(Material::LegacyMycel { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WATER_LILY" => Ok(Material::LegacyWaterLily { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_NETHER_BRICK" => Ok(Material::LegacyNetherBrick { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_NETHER_FENCE" => Ok(Material::LegacyNetherFence { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_NETHER_BRICK_STAIRS" => Ok(Material::LegacyNetherBrickStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_NETHER_WARTS" => Ok(Material::LegacyNetherWarts { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ENCHANTMENT_TABLE" => Ok(Material::LegacyEnchantmentTable { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BREWING_STAND" => Ok(Material::LegacyBrewingStand { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CAULDRON" => Ok(Material::LegacyCauldron { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ENDER_PORTAL" => Ok(Material::LegacyEnderPortal { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ENDER_PORTAL_FRAME" => Ok(Material::LegacyEnderPortalFrame { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ENDER_STONE" => Ok(Material::LegacyEnderStone { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DRAGON_EGG" => Ok(Material::LegacyDragonEgg { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_REDSTONE_LAMP_OFF" => Ok(Material::LegacyRedstoneLampOff { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_REDSTONE_LAMP_ON" => Ok(Material::LegacyRedstoneLampOn { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD_DOUBLE_STEP" => Ok(Material::LegacyWoodDoubleStep { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD_STEP" => Ok(Material::LegacyWoodStep { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COCOA" => Ok(Material::LegacyCocoa { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SANDSTONE_STAIRS" => Ok(Material::LegacySandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_EMERALD_ORE" => Ok(Material::LegacyEmeraldOre { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ENDER_CHEST" => Ok(Material::LegacyEnderChest { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_TRIPWIRE_HOOK" => Ok(Material::LegacyTripwireHook { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_TRIPWIRE" => Ok(Material::LegacyTripwire { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_EMERALD_BLOCK" => Ok(Material::LegacyEmeraldBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SPRUCE_WOOD_STAIRS" => Ok(Material::LegacySpruceWoodStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BIRCH_WOOD_STAIRS" => Ok(Material::LegacyBirchWoodStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_JUNGLE_WOOD_STAIRS" => Ok(Material::LegacyJungleWoodStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COMMAND" => Ok(Material::LegacyCommand { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BEACON" => Ok(Material::LegacyBeacon { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COBBLE_WALL" => Ok(Material::LegacyCobbleWall { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FLOWER_POT" => Ok(Material::LegacyFlowerPot { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CARROT" => Ok(Material::LegacyCarrot { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_POTATO" => Ok(Material::LegacyPotato { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD_BUTTON" => Ok(Material::LegacyWoodButton { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SKULL" => Ok(Material::LegacySkull { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ANVIL" => Ok(Material::LegacyAnvil { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_TRAPPED_CHEST" => Ok(Material::LegacyTrappedChest { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_PLATE" => Ok(Material::LegacyGoldPlate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_PLATE" => Ok(Material::LegacyIronPlate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_REDSTONE_COMPARATOR_OFF" => Ok(Material::LegacyRedstoneComparatorOff { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_REDSTONE_COMPARATOR_ON" => Ok(Material::LegacyRedstoneComparatorOn { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DAYLIGHT_DETECTOR" => Ok(Material::LegacyDaylightDetector { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_REDSTONE_BLOCK" => Ok(Material::LegacyRedstoneBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_QUARTZ_ORE" => Ok(Material::LegacyQuartzOre { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_HOPPER" => Ok(Material::LegacyHopper { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_QUARTZ_BLOCK" => Ok(Material::LegacyQuartzBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_QUARTZ_STAIRS" => Ok(Material::LegacyQuartzStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ACTIVATOR_RAIL" => Ok(Material::LegacyActivatorRail { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DROPPER" => Ok(Material::LegacyDropper { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STAINED_CLAY" => Ok(Material::LegacyStainedClay { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STAINED_GLASS_PANE" => Ok(Material::LegacyStainedGlassPane { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LEAVES_2" => Ok(Material::LegacyLeaves2 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LOG_2" => Ok(Material::LegacyLog2 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ACACIA_STAIRS" => Ok(Material::LegacyAcaciaStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DARK_OAK_STAIRS" => Ok(Material::LegacyDarkOakStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SLIME_BLOCK" => Ok(Material::LegacySlimeBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BARRIER" => Ok(Material::LegacyBarrier { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_TRAPDOOR" => Ok(Material::LegacyIronTrapdoor { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PRISMARINE" => Ok(Material::LegacyPrismarine { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SEA_LANTERN" => Ok(Material::LegacySeaLantern { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_HAY_BLOCK" => Ok(Material::LegacyHayBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CARPET" => Ok(Material::LegacyCarpet { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_HARD_CLAY" => Ok(Material::LegacyHardClay { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COAL_BLOCK" => Ok(Material::LegacyCoalBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PACKED_ICE" => Ok(Material::LegacyPackedIce { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DOUBLE_PLANT" => Ok(Material::LegacyDoublePlant { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STANDING_BANNER" => Ok(Material::LegacyStandingBanner { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WALL_BANNER" => Ok(Material::LegacyWallBanner { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DAYLIGHT_DETECTOR_INVERTED" => Ok(Material::LegacyDaylightDetectorInverted { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RED_SANDSTONE" => Ok(Material::LegacyRedSandstone { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RED_SANDSTONE_STAIRS" => Ok(Material::LegacyRedSandstoneStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DOUBLE_STONE_SLAB2" => Ok(Material::LegacyDoubleStoneSlab2 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STONE_SLAB2" => Ok(Material::LegacyStoneSlab2 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SPRUCE_FENCE_GATE" => Ok(Material::LegacySpruceFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BIRCH_FENCE_GATE" => Ok(Material::LegacyBirchFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_JUNGLE_FENCE_GATE" => Ok(Material::LegacyJungleFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DARK_OAK_FENCE_GATE" => Ok(Material::LegacyDarkOakFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ACACIA_FENCE_GATE" => Ok(Material::LegacyAcaciaFenceGate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SPRUCE_FENCE" => Ok(Material::LegacySpruceFence { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BIRCH_FENCE" => Ok(Material::LegacyBirchFence { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_JUNGLE_FENCE" => Ok(Material::LegacyJungleFence { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DARK_OAK_FENCE" => Ok(Material::LegacyDarkOakFence { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ACACIA_FENCE" => Ok(Material::LegacyAcaciaFence { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SPRUCE_DOOR" => Ok(Material::LegacySpruceDoor { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BIRCH_DOOR" => Ok(Material::LegacyBirchDoor { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_JUNGLE_DOOR" => Ok(Material::LegacyJungleDoor { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ACACIA_DOOR" => Ok(Material::LegacyAcaciaDoor { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DARK_OAK_DOOR" => Ok(Material::LegacyDarkOakDoor { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_END_ROD" => Ok(Material::LegacyEndRod { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CHORUS_PLANT" => Ok(Material::LegacyChorusPlant { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CHORUS_FLOWER" => Ok(Material::LegacyChorusFlower { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PURPUR_BLOCK" => Ok(Material::LegacyPurpurBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PURPUR_PILLAR" => Ok(Material::LegacyPurpurPillar { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PURPUR_STAIRS" => Ok(Material::LegacyPurpurStairs { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PURPUR_DOUBLE_SLAB" => Ok(Material::LegacyPurpurDoubleSlab { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PURPUR_SLAB" => Ok(Material::LegacyPurpurSlab { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_END_BRICKS" => Ok(Material::LegacyEndBricks { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BEETROOT_BLOCK" => Ok(Material::LegacyBeetrootBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GRASS_PATH" => Ok(Material::LegacyGrassPath { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_END_GATEWAY" => Ok(Material::LegacyEndGateway { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COMMAND_REPEATING" => Ok(Material::LegacyCommandRepeating { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COMMAND_CHAIN" => Ok(Material::LegacyCommandChain { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FROSTED_ICE" => Ok(Material::LegacyFrostedIce { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MAGMA" => Ok(Material::LegacyMagma { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_NETHER_WART_BLOCK" => Ok(Material::LegacyNetherWartBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RED_NETHER_BRICK" => Ok(Material::LegacyRedNetherBrick { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BONE_BLOCK" => Ok(Material::LegacyBoneBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STRUCTURE_VOID" => Ok(Material::LegacyStructureVoid { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_OBSERVER" => Ok(Material::LegacyObserver { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WHITE_SHULKER_BOX" => Ok(Material::LegacyWhiteShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ORANGE_SHULKER_BOX" => Ok(Material::LegacyOrangeShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MAGENTA_SHULKER_BOX" => Ok(Material::LegacyMagentaShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LIGHT_BLUE_SHULKER_BOX" => Ok(Material::LegacyLightBlueShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_YELLOW_SHULKER_BOX" => Ok(Material::LegacyYellowShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LIME_SHULKER_BOX" => Ok(Material::LegacyLimeShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PINK_SHULKER_BOX" => Ok(Material::LegacyPinkShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GRAY_SHULKER_BOX" => Ok(Material::LegacyGrayShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SILVER_SHULKER_BOX" => Ok(Material::LegacySilverShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CYAN_SHULKER_BOX" => Ok(Material::LegacyCyanShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PURPLE_SHULKER_BOX" => Ok(Material::LegacyPurpleShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BLUE_SHULKER_BOX" => Ok(Material::LegacyBlueShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BROWN_SHULKER_BOX" => Ok(Material::LegacyBrownShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GREEN_SHULKER_BOX" => Ok(Material::LegacyGreenShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RED_SHULKER_BOX" => Ok(Material::LegacyRedShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BLACK_SHULKER_BOX" => Ok(Material::LegacyBlackShulkerBox { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WHITE_GLAZED_TERRACOTTA" => Ok(Material::LegacyWhiteGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ORANGE_GLAZED_TERRACOTTA" => Ok(Material::LegacyOrangeGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MAGENTA_GLAZED_TERRACOTTA" => Ok(Material::LegacyMagentaGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA" => Ok(Material::LegacyLightBlueGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_YELLOW_GLAZED_TERRACOTTA" => Ok(Material::LegacyYellowGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LIME_GLAZED_TERRACOTTA" => Ok(Material::LegacyLimeGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PINK_GLAZED_TERRACOTTA" => Ok(Material::LegacyPinkGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GRAY_GLAZED_TERRACOTTA" => Ok(Material::LegacyGrayGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SILVER_GLAZED_TERRACOTTA" => Ok(Material::LegacySilverGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CYAN_GLAZED_TERRACOTTA" => Ok(Material::LegacyCyanGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PURPLE_GLAZED_TERRACOTTA" => Ok(Material::LegacyPurpleGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BLUE_GLAZED_TERRACOTTA" => Ok(Material::LegacyBlueGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BROWN_GLAZED_TERRACOTTA" => Ok(Material::LegacyBrownGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GREEN_GLAZED_TERRACOTTA" => Ok(Material::LegacyGreenGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RED_GLAZED_TERRACOTTA" => Ok(Material::LegacyRedGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BLACK_GLAZED_TERRACOTTA" => Ok(Material::LegacyBlackGlazedTerracotta { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CONCRETE" => Ok(Material::LegacyConcrete { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CONCRETE_POWDER" => Ok(Material::LegacyConcretePowder { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STRUCTURE_BLOCK" => Ok(Material::LegacyStructureBlock { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_SPADE" => Ok(Material::LegacyIronSpade { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_PICKAXE" => Ok(Material::LegacyIronPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_AXE" => Ok(Material::LegacyIronAxe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FLINT_AND_STEEL" => Ok(Material::LegacyFlintAndSteel { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_APPLE" => Ok(Material::LegacyApple { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BOW" => Ok(Material::LegacyBow { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ARROW" => Ok(Material::LegacyArrow { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COAL" => Ok(Material::LegacyCoal { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND" => Ok(Material::LegacyDiamond { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_INGOT" => Ok(Material::LegacyIronIngot { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_INGOT" => Ok(Material::LegacyGoldIngot { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_SWORD" => Ok(Material::LegacyIronSword { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD_SWORD" => Ok(Material::LegacyWoodSword { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD_SPADE" => Ok(Material::LegacyWoodSpade { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD_PICKAXE" => Ok(Material::LegacyWoodPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD_AXE" => Ok(Material::LegacyWoodAxe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STONE_SWORD" => Ok(Material::LegacyStoneSword { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STONE_SPADE" => Ok(Material::LegacyStoneSpade { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STONE_PICKAXE" => Ok(Material::LegacyStonePickaxe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STONE_AXE" => Ok(Material::LegacyStoneAxe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_SWORD" => Ok(Material::LegacyDiamondSword { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_SPADE" => Ok(Material::LegacyDiamondSpade { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_PICKAXE" => Ok(Material::LegacyDiamondPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_AXE" => Ok(Material::LegacyDiamondAxe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STICK" => Ok(Material::LegacyStick { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BOWL" => Ok(Material::LegacyBowl { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MUSHROOM_SOUP" => Ok(Material::LegacyMushroomSoup { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_SWORD" => Ok(Material::LegacyGoldSword { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_SPADE" => Ok(Material::LegacyGoldSpade { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_PICKAXE" => Ok(Material::LegacyGoldPickaxe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_AXE" => Ok(Material::LegacyGoldAxe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STRING" => Ok(Material::LegacyString { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FEATHER" => Ok(Material::LegacyFeather { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SULPHUR" => Ok(Material::LegacySulphur { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD_HOE" => Ok(Material::LegacyWoodHoe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STONE_HOE" => Ok(Material::LegacyStoneHoe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_HOE" => Ok(Material::LegacyIronHoe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_HOE" => Ok(Material::LegacyDiamondHoe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_HOE" => Ok(Material::LegacyGoldHoe { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SEEDS" => Ok(Material::LegacySeeds { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WHEAT" => Ok(Material::LegacyWheat { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BREAD" => Ok(Material::LegacyBread { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LEATHER_HELMET" => Ok(Material::LegacyLeatherHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LEATHER_CHESTPLATE" => Ok(Material::LegacyLeatherChestplate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LEATHER_LEGGINGS" => Ok(Material::LegacyLeatherLeggings { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LEATHER_BOOTS" => Ok(Material::LegacyLeatherBoots { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CHAINMAIL_HELMET" => Ok(Material::LegacyChainmailHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CHAINMAIL_CHESTPLATE" => Ok(Material::LegacyChainmailChestplate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CHAINMAIL_LEGGINGS" => Ok(Material::LegacyChainmailLeggings { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CHAINMAIL_BOOTS" => Ok(Material::LegacyChainmailBoots { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_HELMET" => Ok(Material::LegacyIronHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_CHESTPLATE" => Ok(Material::LegacyIronChestplate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_LEGGINGS" => Ok(Material::LegacyIronLeggings { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_BOOTS" => Ok(Material::LegacyIronBoots { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_HELMET" => Ok(Material::LegacyDiamondHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_CHESTPLATE" => Ok(Material::LegacyDiamondChestplate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_LEGGINGS" => Ok(Material::LegacyDiamondLeggings { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_BOOTS" => Ok(Material::LegacyDiamondBoots { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_HELMET" => Ok(Material::LegacyGoldHelmet { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_CHESTPLATE" => Ok(Material::LegacyGoldChestplate { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_LEGGINGS" => Ok(Material::LegacyGoldLeggings { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_BOOTS" => Ok(Material::LegacyGoldBoots { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FLINT" => Ok(Material::LegacyFlint { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PORK" => Ok(Material::LegacyPork { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GRILLED_PORK" => Ok(Material::LegacyGrilledPork { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PAINTING" => Ok(Material::LegacyPainting { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLDEN_APPLE" => Ok(Material::LegacyGoldenApple { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SIGN" => Ok(Material::LegacySign { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WOOD_DOOR" => Ok(Material::LegacyWoodDoor { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BUCKET" => Ok(Material::LegacyBucket { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WATER_BUCKET" => Ok(Material::LegacyWaterBucket { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LAVA_BUCKET" => Ok(Material::LegacyLavaBucket { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MINECART" => Ok(Material::LegacyMinecart { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SADDLE" => Ok(Material::LegacySaddle { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_DOOR" => Ok(Material::LegacyIronDoor { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_REDSTONE" => Ok(Material::LegacyRedstone { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SNOW_BALL" => Ok(Material::LegacySnowBall { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BOAT" => Ok(Material::LegacyBoat { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LEATHER" => Ok(Material::LegacyLeather { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MILK_BUCKET" => Ok(Material::LegacyMilkBucket { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CLAY_BRICK" => Ok(Material::LegacyClayBrick { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CLAY_BALL" => Ok(Material::LegacyClayBall { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SUGAR_CANE" => Ok(Material::LegacySugarCane { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PAPER" => Ok(Material::LegacyPaper { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BOOK" => Ok(Material::LegacyBook { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SLIME_BALL" => Ok(Material::LegacySlimeBall { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_STORAGE_MINECART" => Ok(Material::LegacyStorageMinecart { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_POWERED_MINECART" => Ok(Material::LegacyPoweredMinecart { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_EGG" => Ok(Material::LegacyEgg { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COMPASS" => Ok(Material::LegacyCompass { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FISHING_ROD" => Ok(Material::LegacyFishingRod { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WATCH" => Ok(Material::LegacyWatch { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GLOWSTONE_DUST" => Ok(Material::LegacyGlowstoneDust { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RAW_FISH" => Ok(Material::LegacyRawFish { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COOKED_FISH" => Ok(Material::LegacyCookedFish { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_INK_SACK" => Ok(Material::LegacyInkSack { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BONE" => Ok(Material::LegacyBone { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SUGAR" => Ok(Material::LegacySugar { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CAKE" => Ok(Material::LegacyCake { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BED" => Ok(Material::LegacyBed { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIODE" => Ok(Material::LegacyDiode { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COOKIE" => Ok(Material::LegacyCookie { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MAP" => Ok(Material::LegacyMap { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SHEARS" => Ok(Material::LegacyShears { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MELON" => Ok(Material::LegacyMelon { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PUMPKIN_SEEDS" => Ok(Material::LegacyPumpkinSeeds { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MELON_SEEDS" => Ok(Material::LegacyMelonSeeds { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RAW_BEEF" => Ok(Material::LegacyRawBeef { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COOKED_BEEF" => Ok(Material::LegacyCookedBeef { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RAW_CHICKEN" => Ok(Material::LegacyRawChicken { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COOKED_CHICKEN" => Ok(Material::LegacyCookedChicken { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ROTTEN_FLESH" => Ok(Material::LegacyRottenFlesh { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ENDER_PEARL" => Ok(Material::LegacyEnderPearl { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BLAZE_ROD" => Ok(Material::LegacyBlazeRod { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GHAST_TEAR" => Ok(Material::LegacyGhastTear { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_NUGGET" => Ok(Material::LegacyGoldNugget { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_NETHER_STALK" => Ok(Material::LegacyNetherStalk { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_POTION" => Ok(Material::LegacyPotion { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GLASS_BOTTLE" => Ok(Material::LegacyGlassBottle { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SPIDER_EYE" => Ok(Material::LegacySpiderEye { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FERMENTED_SPIDER_EYE" => Ok(Material::LegacyFermentedSpiderEye { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BLAZE_POWDER" => Ok(Material::LegacyBlazePowder { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MAGMA_CREAM" => Ok(Material::LegacyMagmaCream { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BREWING_STAND_ITEM" => Ok(Material::LegacyBrewingStandItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CAULDRON_ITEM" => Ok(Material::LegacyCauldronItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_EYE_OF_ENDER" => Ok(Material::LegacyEyeOfEnder { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SPECKLED_MELON" => Ok(Material::LegacySpeckledMelon { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MONSTER_EGG" => Ok(Material::LegacyMonsterEgg { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_EXP_BOTTLE" => Ok(Material::LegacyExpBottle { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FIREBALL" => Ok(Material::LegacyFireball { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BOOK_AND_QUILL" => Ok(Material::LegacyBookAndQuill { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_WRITTEN_BOOK" => Ok(Material::LegacyWrittenBook { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_EMERALD" => Ok(Material::LegacyEmerald { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ITEM_FRAME" => Ok(Material::LegacyItemFrame { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FLOWER_POT_ITEM" => Ok(Material::LegacyFlowerPotItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CARROT_ITEM" => Ok(Material::LegacyCarrotItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_POTATO_ITEM" => Ok(Material::LegacyPotatoItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BAKED_POTATO" => Ok(Material::LegacyBakedPotato { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_POISONOUS_POTATO" => Ok(Material::LegacyPoisonousPotato { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_EMPTY_MAP" => Ok(Material::LegacyEmptyMap { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLDEN_CARROT" => Ok(Material::LegacyGoldenCarrot { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SKULL_ITEM" => Ok(Material::LegacySkullItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CARROT_STICK" => Ok(Material::LegacyCarrotStick { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_NETHER_STAR" => Ok(Material::LegacyNetherStar { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PUMPKIN_PIE" => Ok(Material::LegacyPumpkinPie { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FIREWORK" => Ok(Material::LegacyFirework { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_FIREWORK_CHARGE" => Ok(Material::LegacyFireworkCharge { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ENCHANTED_BOOK" => Ok(Material::LegacyEnchantedBook { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_REDSTONE_COMPARATOR" => Ok(Material::LegacyRedstoneComparator { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_NETHER_BRICK_ITEM" => Ok(Material::LegacyNetherBrickItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_QUARTZ" => Ok(Material::LegacyQuartz { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_EXPLOSIVE_MINECART" => Ok(Material::LegacyExplosiveMinecart { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_HOPPER_MINECART" => Ok(Material::LegacyHopperMinecart { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PRISMARINE_SHARD" => Ok(Material::LegacyPrismarineShard { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_PRISMARINE_CRYSTALS" => Ok(Material::LegacyPrismarineCrystals { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RABBIT" => Ok(Material::LegacyRabbit { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COOKED_RABBIT" => Ok(Material::LegacyCookedRabbit { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RABBIT_STEW" => Ok(Material::LegacyRabbitStew { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RABBIT_FOOT" => Ok(Material::LegacyRabbitFoot { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RABBIT_HIDE" => Ok(Material::LegacyRabbitHide { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ARMOR_STAND" => Ok(Material::LegacyArmorStand { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_BARDING" => Ok(Material::LegacyIronBarding { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_BARDING" => Ok(Material::LegacyGoldBarding { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DIAMOND_BARDING" => Ok(Material::LegacyDiamondBarding { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LEASH" => Ok(Material::LegacyLeash { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_NAME_TAG" => Ok(Material::LegacyNameTag { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COMMAND_MINECART" => Ok(Material::LegacyCommandMinecart { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_MUTTON" => Ok(Material::LegacyMutton { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_COOKED_MUTTON" => Ok(Material::LegacyCookedMutton { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BANNER" => Ok(Material::LegacyBanner { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_END_CRYSTAL" => Ok(Material::LegacyEndCrystal { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SPRUCE_DOOR_ITEM" => Ok(Material::LegacySpruceDoorItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BIRCH_DOOR_ITEM" => Ok(Material::LegacyBirchDoorItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_JUNGLE_DOOR_ITEM" => Ok(Material::LegacyJungleDoorItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ACACIA_DOOR_ITEM" => Ok(Material::LegacyAcaciaDoorItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DARK_OAK_DOOR_ITEM" => Ok(Material::LegacyDarkOakDoorItem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CHORUS_FRUIT" => Ok(Material::LegacyChorusFruit { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_CHORUS_FRUIT_POPPED" => Ok(Material::LegacyChorusFruitPopped { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BEETROOT" => Ok(Material::LegacyBeetroot { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BEETROOT_SEEDS" => Ok(Material::LegacyBeetrootSeeds { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BEETROOT_SOUP" => Ok(Material::LegacyBeetrootSoup { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_DRAGONS_BREATH" => Ok(Material::LegacyDragonsBreath { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SPLASH_POTION" => Ok(Material::LegacySplashPotion { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SPECTRAL_ARROW" => Ok(Material::LegacySpectralArrow { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_TIPPED_ARROW" => Ok(Material::LegacyTippedArrow { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_LINGERING_POTION" => Ok(Material::LegacyLingeringPotion { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SHIELD" => Ok(Material::LegacyShield { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_ELYTRA" => Ok(Material::LegacyElytra { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BOAT_SPRUCE" => Ok(Material::LegacyBoatSpruce { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BOAT_BIRCH" => Ok(Material::LegacyBoatBirch { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BOAT_JUNGLE" => Ok(Material::LegacyBoatJungle { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BOAT_ACACIA" => Ok(Material::LegacyBoatAcacia { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_BOAT_DARK_OAK" => Ok(Material::LegacyBoatDarkOak { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_TOTEM" => Ok(Material::LegacyTotem { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_SHULKER_SHELL" => Ok(Material::LegacyShulkerShell { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_IRON_NUGGET" => Ok(Material::LegacyIronNugget { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_KNOWLEDGE_BOOK" => Ok(Material::LegacyKnowledgeBook { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GOLD_RECORD" => Ok(Material::LegacyGoldRecord { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_GREEN_RECORD" => Ok(Material::LegacyGreenRecord { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RECORD_3" => Ok(Material::LegacyRecord3 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RECORD_4" => Ok(Material::LegacyRecord4 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RECORD_5" => Ok(Material::LegacyRecord5 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RECORD_6" => Ok(Material::LegacyRecord6 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RECORD_7" => Ok(Material::LegacyRecord7 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RECORD_8" => Ok(Material::LegacyRecord8 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RECORD_9" => Ok(Material::LegacyRecord9 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RECORD_10" => Ok(Material::LegacyRecord10 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RECORD_11" => Ok(Material::LegacyRecord11 { inner: MaterialStruct::from_raw(env,obj)?}),"LEGACY_RECORD_12" => Ok(Material::LegacyRecord12 { inner: MaterialStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for MaterialStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for MaterialStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate MaterialStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Material")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a MaterialStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> MaterialStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Material<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Material;");
let cls = jni.find_class("org/bukkit/Material"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Material::from_raw(&jni,obj
)}
#[deprecated]
/// Do not use for any reason.
	fn id(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getId",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Do not use for any reason.
	fn is_legacy(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isLegacy",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

	fn key(&self) 
-> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/NamespacedKey;");
let res = self.jni_ref().call_method(&self.jni_object(),"getKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::NamespacedKey::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the maximum amount of this material that can be held in a stack
	fn max_stack_size(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getMaxStackSize",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the maximum durability of this material
	fn max_durability(&self) 
-> Result<i16, Box<dyn std::error::Error>>

{let sig = String::from("()S");
let res = self.jni_ref().call_method(&self.jni_object(),"getMaxDurability",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.s()?
)}
/// Creates a new {@link BlockData} instance for this Material, with all
/// properties initialized to unspecified defaults, except for those provided
/// in data.
	fn create_block_data(&self,data: std::option::Option<impl Into<String>>) 
-> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = data {
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(a.into())?));
args.push(val_1);
}
sig += ")Lorg/bukkit/block/data/BlockData;";
let res = self.jni_ref().call_method(&self.jni_object(),"createBlockData",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::data::BlockData::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the MaterialData class associated with this Material
	fn data(&self) 
-> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/Class;");
let res = self.jni_ref().call_method(&self.jni_object(),"getData",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
unsafe {jni::objects::JClass::from_raw(res.as_jni().l)}
)}
#[deprecated]
/// Constructs a new MaterialData relevant for this Material, with the given initial data
	fn get_new_data(&self,raw: i8) 
-> Result<crate::material::MaterialData<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(B)Lorg/bukkit/material/MaterialData;");
let val_1 = jni::objects::JValueGen::Byte(raw);
let res = self.jni_ref().call_method(&self.jni_object(),"getNewData",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::material::MaterialData::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Checks if this Material is a placable block
	fn is_block(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isBlock",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if this Material is edible.
	fn is_edible(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isEdible",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Attempts to get the Material with the given name.
/// 
/// This is a normal lookup, names must be the precise name they are given in
/// the enum (but optionally including the LEGACY_PREFIX if legacyName is
/// true).
/// 
/// If legacyName is true, then the lookup will be against legacy materials,
/// but the returned Material will be a modern material (ie this method is
/// useful for updating stored data).
	fn get_material(jni: &blackboxmc_general::SharedJNIEnv<'mc>,name: impl Into<String>,legacy_name: std::option::Option<bool>) 
-> Result<Option<crate::Material<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
args.push(val_1);
if let Some(a) = legacy_name {
sig += "Z";
let val_2 = jni::objects::JValueGen::Bool(a.into());
args.push(val_2);
}
sig += ")Lorg/bukkit/Material;";
let cls = jni.find_class("org/bukkit/Material"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getMaterial",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::Material::from_raw(&jni,obj
)?
)
)}
/// Attempts to match the Material with the given name.
/// 
/// This is a match lookup; names will be stripped of the "minecraft:"
/// namespace, converted to uppercase, then stripped of special characters in
/// an attempt to format it like the enum.
	fn match_material(jni: &blackboxmc_general::SharedJNIEnv<'mc>,name: impl Into<String>,legacy_name: std::option::Option<bool>) 
-> Result<Option<crate::Material<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
args.push(val_1);
if let Some(a) = legacy_name {
sig += "Z";
let val_2 = jni::objects::JValueGen::Bool(a.into());
args.push(val_2);
}
sig += ")Lorg/bukkit/Material;";
let cls = jni.find_class("org/bukkit/Material"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"matchMaterial",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::Material::from_raw(&jni,obj
)?
)
)}

	fn is_record(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isRecord",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Check if the material is a block and solid (can be built upon)
	fn is_solid(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isSolid",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Check if the material is an air block.
	fn is_air(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isAir",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
#[deprecated]
/// Check if the material is a block and does not block any light
	fn is_transparent(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isTransparent",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Check if the material is a block and can catch fire
	fn is_flammable(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isFlammable",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Check if the material is a block and can burn away
	fn is_burnable(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isBurnable",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if this Material can be used as fuel in a Furnace
	fn is_fuel(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isFuel",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Check if the material is a block and occludes light in the lighting engine.
/// 
/// Generally speaking, most full blocks will occlude light. Non-full blocks are
/// not occluding (e.g. anvils, chests, tall grass, stairs, etc.), nor are specific
/// full blocks such as barriers or spawners which block light despite their texture.
/// 
/// An occluding block will have the following effects:
/// <ul>
/// <li>Chests cannot be opened if an occluding block is above it.
/// <li>Mobs cannot spawn inside of occluding blocks.
/// <li>Only occluding blocks can be "powered" ({@link Block#isBlockPowered()}).
/// </ul>
/// This list may be inconclusive. For a full list of the side effects of an occluding
/// block, see the <a href="https://minecraft.wiki/w/Opacity">Minecraft Wiki</a>.
	fn is_occluding(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isOccluding",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

	fn has_gravity(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"hasGravity",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if this Material is an obtainable item.
	fn is_item(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isItem",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if this Material can be interacted with.
/// Interactable materials include those with functionality when they are
/// interacted with by a player such as chests, furnaces, etc.
/// Some blocks such as piston heads and stairs are considered interactable
/// though may not perform any additional functionality.
/// Note that the interactability of some materials may be dependant on their
/// state as well. This method will return true if there is at least one
/// state in which additional interact handling is performed for the
/// material.
	fn is_interactable(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isInteractable",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Obtains the block's hardness level (also known as "strength").
/// 
/// This number is used to calculate the time required to break each block.
/// 
/// Only available when {@link #isBlock()} is true.
	fn hardness(&self) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("()F");
let res = self.jni_ref().call_method(&self.jni_object(),"getHardness",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.f()?
)}
/// Obtains the blast resistance value (also known as block "durability").
/// 
/// This value is used in explosions to calculate whether a block should be
/// broken or not.
/// 
/// Only available when {@link #isBlock()} is true.
	fn blast_resistance(&self) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("()F");
let res = self.jni_ref().call_method(&self.jni_object(),"getBlastResistance",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.f()?
)}
/// Returns a value that represents how 'slippery' the block is.
/// Blocks with higher slipperiness, like {@link Material#ICE} can be slid on
/// further by the player and other entities.
/// Most blocks have a default slipperiness of {@code 0.6f}.
/// Only available when {@link #isBlock()} is true.
	fn slipperiness(&self) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("()F");
let res = self.jni_ref().call_method(&self.jni_object(),"getSlipperiness",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.f()?
)}
/// Determines the remaining item in a crafting grid after crafting with this
/// ingredient.
/// 
/// Only available when {@link #isItem()} is true.
	fn crafting_remaining_item(&self) 
-> Result<Option<crate::Material<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Material;");
let res = self.jni_ref().call_method(&self.jni_object(),"getCraftingRemainingItem",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::Material::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Get the best suitable slot for this Material.
/// For most items this will be {@link EquipmentSlot#HAND}.
	fn equipment_slot(&self) 
-> Result<crate::inventory::EquipmentSlot<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/inventory/EquipmentSlot;");
let res = self.jni_ref().call_method(&self.jni_object(),"getEquipmentSlot",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::inventory::EquipmentSlot::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Return an immutable copy of all default {@link Attribute}s and their
/// {@link AttributeModifier}s for a given {@link EquipmentSlot}.
/// Default attributes are those that are always preset on some items, such
/// as the attack damage on weapons or the armor value on armor.
/// Only available when {@link #isItem()} is true.
	fn get_default_attribute_modifiers(&self,slot: impl Into<crate::inventory::EquipmentSlot<'mc>>) 
-> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/inventory/EquipmentSlot;)Lcom/google/common/collect/Multimap;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(slot.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getDefaultAttributeModifiers",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.l()?
)}
/// Get the {@link CreativeCategory} to which this material belongs.
	fn creative_category(&self) 
-> Result<Option<crate::inventory::CreativeCategory<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/inventory/CreativeCategory;");
let res = self.jni_ref().call_method(&self.jni_object(),"getCreativeCategory",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::inventory::CreativeCategory::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Get the translation key of the item or block associated with this
/// material.
/// If this material has both an item and a block form, the item form is
/// used.
	fn translation_key(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getTranslationKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Get the translation key of the block associated with this material, or
/// null if this material does not have an associated block.
	fn block_translation_key(&self) 
-> Result<Option<String>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockTranslationKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)
)}
/// Get the translation key of the item associated with this material, or
/// null if this material does not have an associated item.
	fn item_translation_key(&self) 
-> Result<Option<String>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getItemTranslationKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)
)}
/// Gets if the Material is enabled by the features in a world.
	fn is_enabled_by_feature(&self,world: impl Into<crate::World<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/World;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"isEnabledByFeature",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Keyed<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Keyed<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Keyed<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Keyed from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Keyed")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Keyed object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> KeyedTrait<'mc> for Keyed<'mc> {}
pub trait KeyedTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Return the namespaced identifier for this object.
	fn key(&self) 
-> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/NamespacedKey;");
let res = self.jni_ref().call_method(&self.jni_object(),"getKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::NamespacedKey::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum NoteTone<'mc> {
	G {inner: NoteToneStruct<'mc>},
	A {inner: NoteToneStruct<'mc>},
	B {inner: NoteToneStruct<'mc>},
	C {inner: NoteToneStruct<'mc>},
	D {inner: NoteToneStruct<'mc>},
	E {inner: NoteToneStruct<'mc>},
	F {inner: NoteToneStruct<'mc>},
}
impl<'mc> std::fmt::Display for NoteTone<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           NoteTone::G { .. } => f.write_str("G"),
           NoteTone::A { .. } => f.write_str("A"),
           NoteTone::B { .. } => f.write_str("B"),
           NoteTone::C { .. } => f.write_str("C"),
           NoteTone::D { .. } => f.write_str("D"),
           NoteTone::E { .. } => f.write_str("E"),
           NoteTone::F { .. } => f.write_str("F"),
       }
   }
}

        impl<'mc> NoteToneTrait<'mc> for NoteTone<'mc> {}
        
        pub trait NoteToneTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<NoteTone<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Note/Tone");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Note/Tone;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"G" => Ok(NoteTone::G { inner: NoteToneStruct::from_raw(env,obj)?}),
"A" => Ok(NoteTone::A { inner: NoteToneStruct::from_raw(env,obj)?}),
"B" => Ok(NoteTone::B { inner: NoteToneStruct::from_raw(env,obj)?}),
"C" => Ok(NoteTone::C { inner: NoteToneStruct::from_raw(env,obj)?}),
"D" => Ok(NoteTone::D { inner: NoteToneStruct::from_raw(env,obj)?}),
"E" => Ok(NoteTone::E { inner: NoteToneStruct::from_raw(env,obj)?}),
"F" => Ok(NoteTone::F { inner: NoteToneStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct NoteToneStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for NoteTone<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::G { inner } => inner.0.clone(),
Self::A { inner } => inner.0.clone(),
Self::B { inner } => inner.0.clone(),
Self::C { inner } => inner.0.clone(),
Self::D { inner } => inner.0.clone(),
Self::E { inner } => inner.0.clone(),
Self::F { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::G { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::A { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::B { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::C { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::D { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::E { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::F { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for NoteTone<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate NoteTone from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Note/Tone")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a NoteTone object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "G" => Ok(NoteTone::G { inner: NoteToneStruct::from_raw(env,obj)?}),"A" => Ok(NoteTone::A { inner: NoteToneStruct::from_raw(env,obj)?}),"B" => Ok(NoteTone::B { inner: NoteToneStruct::from_raw(env,obj)?}),"C" => Ok(NoteTone::C { inner: NoteToneStruct::from_raw(env,obj)?}),"D" => Ok(NoteTone::D { inner: NoteToneStruct::from_raw(env,obj)?}),"E" => Ok(NoteTone::E { inner: NoteToneStruct::from_raw(env,obj)?}),"F" => Ok(NoteTone::F { inner: NoteToneStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for NoteToneStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for NoteToneStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate NoteToneStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Note/Tone")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a NoteToneStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> NoteToneStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::NoteTone<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Note/Tone;");
let cls = jni.find_class("org/bukkit/Note/Tone"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::NoteTone::from_raw(&jni,obj
)}
#[deprecated]
/// Returns the id of this tone. These method allows to return the sharped id of the tone. If the tone couldn't be sharped it always return the not sharped id of this tone.
	fn get_id(&self,sharped: bool) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("(Z)B");
let val_1 = jni::objects::JValueGen::Bool(sharped.into());
let res = self.jni_ref().call_method(&self.jni_object(),"getId",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
/// Returns if this tone could be sharped.
	fn is_sharpable(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isSharpable",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
#[deprecated]
/// Returns if this tone id is the sharped id of the tone.
	fn is_sharped(&self,id: i8) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(B)Z");
let val_1 = jni::objects::JValueGen::Byte(id);
let res = self.jni_ref().call_method(&self.jni_object(),"isSharped",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
#[deprecated]
/// Returns the tone to id. Also returning the semitones.
	fn get_by_id(jni: &blackboxmc_general::SharedJNIEnv<'mc>,id: i8) 
-> Result<Option<crate::NoteTone<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(B)Lorg/bukkit/Note/Tone;");
let val_1 = jni::objects::JValueGen::Byte(id);
let cls = jni.find_class("org/bukkit/Note/Tone"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getById",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::NoteTone::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum DyeColor<'mc> {
	White {inner: DyeColorStruct<'mc>},
	Orange {inner: DyeColorStruct<'mc>},
	Magenta {inner: DyeColorStruct<'mc>},
	LightBlue {inner: DyeColorStruct<'mc>},
	Yellow {inner: DyeColorStruct<'mc>},
	Lime {inner: DyeColorStruct<'mc>},
	Pink {inner: DyeColorStruct<'mc>},
	Gray {inner: DyeColorStruct<'mc>},
	LightGray {inner: DyeColorStruct<'mc>},
	Cyan {inner: DyeColorStruct<'mc>},
	Purple {inner: DyeColorStruct<'mc>},
	Blue {inner: DyeColorStruct<'mc>},
	Brown {inner: DyeColorStruct<'mc>},
	Green {inner: DyeColorStruct<'mc>},
	Red {inner: DyeColorStruct<'mc>},
	Black {inner: DyeColorStruct<'mc>},
}
impl<'mc> std::fmt::Display for DyeColor<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           DyeColor::White { .. } => f.write_str("WHITE"),
           DyeColor::Orange { .. } => f.write_str("ORANGE"),
           DyeColor::Magenta { .. } => f.write_str("MAGENTA"),
           DyeColor::LightBlue { .. } => f.write_str("LIGHT_BLUE"),
           DyeColor::Yellow { .. } => f.write_str("YELLOW"),
           DyeColor::Lime { .. } => f.write_str("LIME"),
           DyeColor::Pink { .. } => f.write_str("PINK"),
           DyeColor::Gray { .. } => f.write_str("GRAY"),
           DyeColor::LightGray { .. } => f.write_str("LIGHT_GRAY"),
           DyeColor::Cyan { .. } => f.write_str("CYAN"),
           DyeColor::Purple { .. } => f.write_str("PURPLE"),
           DyeColor::Blue { .. } => f.write_str("BLUE"),
           DyeColor::Brown { .. } => f.write_str("BROWN"),
           DyeColor::Green { .. } => f.write_str("GREEN"),
           DyeColor::Red { .. } => f.write_str("RED"),
           DyeColor::Black { .. } => f.write_str("BLACK"),
       }
   }
}

        impl<'mc> DyeColorTrait<'mc> for DyeColor<'mc> {}
        
        pub trait DyeColorTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<DyeColor<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/DyeColor");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/DyeColor;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"WHITE" => Ok(DyeColor::White { inner: DyeColorStruct::from_raw(env,obj)?}),
"ORANGE" => Ok(DyeColor::Orange { inner: DyeColorStruct::from_raw(env,obj)?}),
"MAGENTA" => Ok(DyeColor::Magenta { inner: DyeColorStruct::from_raw(env,obj)?}),
"LIGHT_BLUE" => Ok(DyeColor::LightBlue { inner: DyeColorStruct::from_raw(env,obj)?}),
"YELLOW" => Ok(DyeColor::Yellow { inner: DyeColorStruct::from_raw(env,obj)?}),
"LIME" => Ok(DyeColor::Lime { inner: DyeColorStruct::from_raw(env,obj)?}),
"PINK" => Ok(DyeColor::Pink { inner: DyeColorStruct::from_raw(env,obj)?}),
"GRAY" => Ok(DyeColor::Gray { inner: DyeColorStruct::from_raw(env,obj)?}),
"LIGHT_GRAY" => Ok(DyeColor::LightGray { inner: DyeColorStruct::from_raw(env,obj)?}),
"CYAN" => Ok(DyeColor::Cyan { inner: DyeColorStruct::from_raw(env,obj)?}),
"PURPLE" => Ok(DyeColor::Purple { inner: DyeColorStruct::from_raw(env,obj)?}),
"BLUE" => Ok(DyeColor::Blue { inner: DyeColorStruct::from_raw(env,obj)?}),
"BROWN" => Ok(DyeColor::Brown { inner: DyeColorStruct::from_raw(env,obj)?}),
"GREEN" => Ok(DyeColor::Green { inner: DyeColorStruct::from_raw(env,obj)?}),
"RED" => Ok(DyeColor::Red { inner: DyeColorStruct::from_raw(env,obj)?}),
"BLACK" => Ok(DyeColor::Black { inner: DyeColorStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct DyeColorStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for DyeColor<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::White { inner } => inner.0.clone(),
Self::Orange { inner } => inner.0.clone(),
Self::Magenta { inner } => inner.0.clone(),
Self::LightBlue { inner } => inner.0.clone(),
Self::Yellow { inner } => inner.0.clone(),
Self::Lime { inner } => inner.0.clone(),
Self::Pink { inner } => inner.0.clone(),
Self::Gray { inner } => inner.0.clone(),
Self::LightGray { inner } => inner.0.clone(),
Self::Cyan { inner } => inner.0.clone(),
Self::Purple { inner } => inner.0.clone(),
Self::Blue { inner } => inner.0.clone(),
Self::Brown { inner } => inner.0.clone(),
Self::Green { inner } => inner.0.clone(),
Self::Red { inner } => inner.0.clone(),
Self::Black { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::White { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Orange { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Magenta { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightBlue { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Yellow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Lime { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Pink { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Gray { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightGray { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cyan { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Purple { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Blue { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Brown { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Green { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Red { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Black { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for DyeColor<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate DyeColor from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/DyeColor")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a DyeColor object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "WHITE" => Ok(DyeColor::White { inner: DyeColorStruct::from_raw(env,obj)?}),"ORANGE" => Ok(DyeColor::Orange { inner: DyeColorStruct::from_raw(env,obj)?}),"MAGENTA" => Ok(DyeColor::Magenta { inner: DyeColorStruct::from_raw(env,obj)?}),"LIGHT_BLUE" => Ok(DyeColor::LightBlue { inner: DyeColorStruct::from_raw(env,obj)?}),"YELLOW" => Ok(DyeColor::Yellow { inner: DyeColorStruct::from_raw(env,obj)?}),"LIME" => Ok(DyeColor::Lime { inner: DyeColorStruct::from_raw(env,obj)?}),"PINK" => Ok(DyeColor::Pink { inner: DyeColorStruct::from_raw(env,obj)?}),"GRAY" => Ok(DyeColor::Gray { inner: DyeColorStruct::from_raw(env,obj)?}),"LIGHT_GRAY" => Ok(DyeColor::LightGray { inner: DyeColorStruct::from_raw(env,obj)?}),"CYAN" => Ok(DyeColor::Cyan { inner: DyeColorStruct::from_raw(env,obj)?}),"PURPLE" => Ok(DyeColor::Purple { inner: DyeColorStruct::from_raw(env,obj)?}),"BLUE" => Ok(DyeColor::Blue { inner: DyeColorStruct::from_raw(env,obj)?}),"BROWN" => Ok(DyeColor::Brown { inner: DyeColorStruct::from_raw(env,obj)?}),"GREEN" => Ok(DyeColor::Green { inner: DyeColorStruct::from_raw(env,obj)?}),"RED" => Ok(DyeColor::Red { inner: DyeColorStruct::from_raw(env,obj)?}),"BLACK" => Ok(DyeColor::Black { inner: DyeColorStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for DyeColorStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for DyeColorStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate DyeColorStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/DyeColor")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a DyeColorStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> DyeColorStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::DyeColor<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/DyeColor;");
let cls = jni.find_class("org/bukkit/DyeColor"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::DyeColor::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the associated wool data value representing this color.
	fn wool_data(&self) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("()B");
let res = self.jni_ref().call_method(&self.jni_object(),"getWoolData",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
#[deprecated]
/// Gets the associated dye data value representing this color.
	fn dye_data(&self) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("()B");
let res = self.jni_ref().call_method(&self.jni_object(),"getDyeData",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
/// Gets the color that this dye represents.
	fn color(&self) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Color;");
let res = self.jni_ref().call_method(&self.jni_object(),"getColor",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Color::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the firework color that this dye represents.
	fn firework_color(&self) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Color;");
let res = self.jni_ref().call_method(&self.jni_object(),"getFireworkColor",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Color::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
#[deprecated]
/// Gets the DyeColor with the given wool data value.
	fn get_by_wool_data(jni: &blackboxmc_general::SharedJNIEnv<'mc>,data: i8) 
-> Result<Option<crate::DyeColor<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(B)Lorg/bukkit/DyeColor;");
let val_1 = jni::objects::JValueGen::Byte(data);
let cls = jni.find_class("org/bukkit/DyeColor"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByWoolData",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::DyeColor::from_raw(&jni,obj
)?
)
)}
#[deprecated]
/// Gets the DyeColor with the given dye data value.
	fn get_by_dye_data(jni: &blackboxmc_general::SharedJNIEnv<'mc>,data: i8) 
-> Result<Option<crate::DyeColor<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(B)Lorg/bukkit/DyeColor;");
let val_1 = jni::objects::JValueGen::Byte(data);
let cls = jni.find_class("org/bukkit/DyeColor"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByDyeData",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::DyeColor::from_raw(&jni,obj
)?
)
)}
/// Gets the DyeColor with the given color value.
	fn get_by_color(jni: &blackboxmc_general::SharedJNIEnv<'mc>,color: impl Into<crate::Color<'mc>>) 
-> Result<Option<crate::DyeColor<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Color;)Lorg/bukkit/DyeColor;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(color.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/DyeColor"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByColor",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::DyeColor::from_raw(&jni,obj
)?
)
)}
/// Gets the DyeColor with the given firework color value.
	fn get_by_firework_color(jni: &blackboxmc_general::SharedJNIEnv<'mc>,color: impl Into<crate::Color<'mc>>) 
-> Result<Option<crate::DyeColor<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Color;)Lorg/bukkit/DyeColor;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(color.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/DyeColor"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByFireworkColor",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::DyeColor::from_raw(&jni,obj
)?
)
)}
#[deprecated]
/// Gets the DyeColor for the given name, possibly doing legacy transformations.
	fn legacy_value_of(jni: &blackboxmc_general::SharedJNIEnv<'mc>,name: impl Into<String>) 
-> Result<crate::DyeColor<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/DyeColor;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
let cls = jni.find_class("org/bukkit/DyeColor"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"legacyValueOf",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::DyeColor::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum EffectType<'mc> {
	Sound {inner: EffectTypeStruct<'mc>},
	Visual {inner: EffectTypeStruct<'mc>},
}
impl<'mc> std::fmt::Display for EffectType<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           EffectType::Sound { .. } => f.write_str("SOUND"),
           EffectType::Visual { .. } => f.write_str("VISUAL"),
       }
   }
}

        impl<'mc> EffectTypeTrait<'mc> for EffectType<'mc> {}
        
        pub trait EffectTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<EffectType<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Effect/Type");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Effect/Type;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"SOUND" => Ok(EffectType::Sound { inner: EffectTypeStruct::from_raw(env,obj)?}),
"VISUAL" => Ok(EffectType::Visual { inner: EffectTypeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct EffectTypeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for EffectType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Sound { inner } => inner.0.clone(),
Self::Visual { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Sound { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Visual { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for EffectType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate EffectType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Effect/Type")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a EffectType object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "SOUND" => Ok(EffectType::Sound { inner: EffectTypeStruct::from_raw(env,obj)?}),"VISUAL" => Ok(EffectType::Visual { inner: EffectTypeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for EffectTypeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for EffectTypeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate EffectTypeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Effect/Type")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a EffectTypeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> EffectTypeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::EffectType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Effect/Type;");
let cls = jni.find_class("org/bukkit/Effect/Type"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::EffectType::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct WorldBorder<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for WorldBorder<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for WorldBorder<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate WorldBorder from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/WorldBorder")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a WorldBorder object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> WorldBorderTrait<'mc> for WorldBorder<'mc> {}
pub trait WorldBorderTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Get the {@link World} in which the border resides.
	fn world(&self) 
-> Result<Option<crate::World<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/World;");
let res = self.jni_ref().call_method(&self.jni_object(),"getWorld",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::World::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Resets the border to default values.
	fn reset(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"reset",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the current side length of the border.
	fn size(&self) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("()D");
let res = self.jni_ref().call_method(&self.jni_object(),"getSize",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Gets the current border center.
	fn center(&self) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Location;");
let res = self.jni_ref().call_method(&self.jni_object(),"getCenter",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the new border center.
	fn set_center(&self,x: f64,z: std::option::Option<f64>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "D";
let val_1 = jni::objects::JValueGen::Double(x);
args.push(val_1);
if let Some(a) = z {
sig += "D";
let val_2 = jni::objects::JValueGen::Double(a);
args.push(val_2);
}
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"setCenter",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the current border damage buffer.
	fn damage_buffer(&self) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("()D");
let res = self.jni_ref().call_method(&self.jni_object(),"getDamageBuffer",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Sets the amount of blocks a player may safely be outside the border before taking damage.
	fn set_damage_buffer(&self,blocks: f64) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(D)V");
let val_1 = jni::objects::JValueGen::Double(blocks);
let res = self.jni_ref().call_method(&self.jni_object(),"setDamageBuffer",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the current border damage amount.
	fn damage_amount(&self) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("()D");
let res = self.jni_ref().call_method(&self.jni_object(),"getDamageAmount",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Sets the amount of damage a player takes when outside the border plus the border buffer.
	fn set_damage_amount(&self,damage: f64) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(D)V");
let val_1 = jni::objects::JValueGen::Double(damage);
let res = self.jni_ref().call_method(&self.jni_object(),"setDamageAmount",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the current border warning time in seconds.
	fn warning_time(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getWarningTime",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Sets the warning time that causes the screen to be tinted red when a contracting border will reach the player within the specified time.
	fn set_warning_time(&self,seconds: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(seconds);
let res = self.jni_ref().call_method(&self.jni_object(),"setWarningTime",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the current border warning distance.
	fn warning_distance(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getWarningDistance",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Sets the warning distance that causes the screen to be tinted red when the player is within the specified number of blocks from the border.
	fn set_warning_distance(&self,distance: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(distance);
let res = self.jni_ref().call_method(&self.jni_object(),"setWarningDistance",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Check if the specified location is inside this border.
	fn is_inside(&self,location: impl Into<crate::Location<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Location;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"isInside",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the maximum possible size of a WorldBorder.
	fn max_size(&self) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("()D");
let res = self.jni_ref().call_method(&self.jni_object(),"getMaxSize",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Gets the absolute value of the maximum x/z center coordinate of a
/// WorldBorder.
	fn max_center_coordinate(&self) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("()D");
let res = self.jni_ref().call_method(&self.jni_object(),"getMaxCenterCoordinate",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct UndefinedNullability<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for UndefinedNullability<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for UndefinedNullability<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate UndefinedNullability from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/UndefinedNullability")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a UndefinedNullability object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> UndefinedNullabilityTrait<'mc> for UndefinedNullability<'mc> {}
pub trait UndefinedNullabilityTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Tag<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Tag<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Tag<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Tag from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Tag")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Tag object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> TagTrait<'mc> for Tag<'mc> {}
pub trait TagTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Returns whether or not this tag has an entry for the specified item.
	fn is_tagged(&self,item: jni::objects::JObject<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(LT;)Z");
let val_1 = jni::objects::JValueGen::Object(item);
let res = self.jni_ref().call_method(&self.jni_object(),"isTagged",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets an immutable set of all tagged items.
	fn values(&self) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let res = self.jni_ref().call_method(&self.jni_object(),"getValues",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaSet::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::Keyed<'mc>> for Tag<'mc>{

fn into(self) -> crate::Keyed<'mc> {

crate::Keyed::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting Tag into crate::Keyed")

   }
}
impl<'mc> crate::KeyedTrait<'mc> for Tag<'mc> {}
#[repr(C)]
pub struct UnsafeValues<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for UnsafeValues<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for UnsafeValues<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate UnsafeValues from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/UnsafeValues")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a UnsafeValues object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> UnsafeValuesTrait<'mc> for UnsafeValues<'mc> {}
pub trait UnsafeValuesTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

	fn to_legacy(&self,material: impl Into<crate::Material<'mc>>) 
-> Result<crate::Material<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Material;)Lorg/bukkit/Material;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(material.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"toLegacy",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Material::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn from_legacy(&self,material: impl Into<crate::Material<'mc>>,data: std::option::Option<i8>) 
-> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Material;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(material.into().jni_object().clone())});
args.push(val_1);
if let Some(a) = data {
sig += "B";
let val_2 = jni::objects::JValueGen::Byte(a);
args.push(val_2);
}
sig += ")Lorg/bukkit/block/data/BlockData;";
let res = self.jni_ref().call_method(&self.jni_object(),"fromLegacy",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::data::BlockData::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn get_material(&self,material: impl Into<String>,version: i32) 
-> Result<crate::Material<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;I)Lorg/bukkit/Material;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(material.into())?));
let val_2 = jni::objects::JValueGen::Int(version);
let res = self.jni_ref().call_method(&self.jni_object(),"getMaterial",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Material::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn data_version(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getDataVersion",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}

	fn modify_item_stack(&self,stack: impl Into<crate::inventory::ItemStack<'mc>>,arguments: impl Into<String>) 
-> Result<crate::inventory::ItemStack<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;)Lorg/bukkit/inventory/ItemStack;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(stack.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(arguments.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"modifyItemStack",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::inventory::ItemStack::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn check_supported(&self,pdf: impl Into<crate::plugin::PluginDescriptionFile<'mc>>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/plugin/PluginDescriptionFile;)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(pdf.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"checkSupported",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}

	fn process_class(&self,pdf: impl Into<crate::plugin::PluginDescriptionFile<'mc>>,path: impl Into<String>,clazz: i8) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/plugin/PluginDescriptionFile;Ljava/lang/String;B)B");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(pdf.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(path.into())?));
let val_3 = jni::objects::JValueGen::Byte(clazz);
let res = self.jni_ref().call_method(&self.jni_object(),"processClass",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
/// Load an advancement represented by the specified string into the server.
/// The advancement format is governed by Minecraft and has no specified
/// layout.
/// 
/// It is currently a JSON object, as described by the <a href="https://minecraft.wiki/w/Advancements">Minecraft wiki</a>.
/// 
/// Loaded advancements will be stored and persisted across server restarts
/// and reloads.
/// 
/// Callers should be prepared for {@link Exception} to be thrown.
	fn load_advancement(&self,key: impl Into<crate::NamespacedKey<'mc>>,advancement: impl Into<String>) 
-> Result<crate::advancement::Advancement<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;Ljava/lang/String;)Lorg/bukkit/advancement/Advancement;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(advancement.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"loadAdvancement",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::advancement::Advancement::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Delete an advancement which was loaded and saved by
/// {@link #loadAdvancement(org.bukkit.NamespacedKey, java.lang.String)}.
/// 
/// This method will only remove advancement from persistent storage. It
/// should be accompanied by a call to {@link Server#reloadData()} in order
/// to fully remove it from the running instance.
	fn remove_advancement(&self,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"removeAdvancement",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

	fn get_default_attribute_modifiers(&self,material: impl Into<crate::Material<'mc>>,slot: impl Into<crate::inventory::EquipmentSlot<'mc>>) 
-> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Material;Lorg/bukkit/inventory/EquipmentSlot;)Lcom/google/common/collect/Multimap;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(material.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(slot.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getDefaultAttributeModifiers",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.l()?
)}

	fn get_creative_category(&self,material: impl Into<crate::Material<'mc>>) 
-> Result<crate::inventory::CreativeCategory<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Material;)Lorg/bukkit/inventory/CreativeCategory;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(material.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getCreativeCategory",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::inventory::CreativeCategory::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn get_block_translation_key(&self,material: impl Into<crate::Material<'mc>>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Material;)Ljava/lang/String;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(material.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockTranslationKey",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}

	fn get_item_translation_key(&self,material: impl Into<crate::Material<'mc>>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Material;)Ljava/lang/String;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(material.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getItemTranslationKey",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}

	fn get_translation_key(&self,attribute: impl Into<crate::attribute::Attribute<'mc>>) 
-> Result<String, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/attribute/Attribute;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(attribute.into().jni_object().clone())});
args.push(val_1);
sig += ")Ljava/lang/String;";
let res = self.jni_ref().call_method(&self.jni_object(),"getTranslationKey",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}

	fn get_feature_flag(&self,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<crate::FeatureFlag<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/FeatureFlag;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getFeatureFlag",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::FeatureFlag::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Do not use, method will get removed, and the plugin won't run
	fn get_internal_potion_data(&self,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<crate::potion::PotionTypeInternalPotionData<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/potion/PotionType/InternalPotionData;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getInternalPotionData",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::potion::PotionTypeInternalPotionData::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn get_damage_effect(&self,key: impl Into<String>) 
-> Result<Option<crate::damage::DamageEffect<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/damage/DamageEffect;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(key.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"getDamageEffect",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::damage::DamageEffect::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Create a new {@link DamageSource.Builder}.
	fn create_damage_source_builder(&self,damage_type: impl Into<crate::damage::DamageType<'mc>>) 
-> Result<crate::damage::DamageSourceBuilder<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/damage/DamageType;)Lorg/bukkit/damage/DamageSource/Builder;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(damage_type.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"createDamageSourceBuilder",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::damage::DamageSourceBuilder::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum BanListType<'mc> {
	Name {inner: BanListTypeStruct<'mc>},
	Ip {inner: BanListTypeStruct<'mc>},
	Profile {inner: BanListTypeStruct<'mc>},
}
impl<'mc> std::fmt::Display for BanListType<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           BanListType::Name { .. } => f.write_str("NAME"),
           BanListType::Ip { .. } => f.write_str("IP"),
           BanListType::Profile { .. } => f.write_str("PROFILE"),
       }
   }
}

        impl<'mc> BanListTypeTrait<'mc> for BanListType<'mc> {}
        
        pub trait BanListTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<BanListType<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/BanList/Type");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/BanList/Type;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"NAME" => Ok(BanListType::Name { inner: BanListTypeStruct::from_raw(env,obj)?}),
"IP" => Ok(BanListType::Ip { inner: BanListTypeStruct::from_raw(env,obj)?}),
"PROFILE" => Ok(BanListType::Profile { inner: BanListTypeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct BanListTypeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for BanListType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Name { inner } => inner.0.clone(),
Self::Ip { inner } => inner.0.clone(),
Self::Profile { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Name { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Ip { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Profile { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for BanListType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate BanListType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/BanList/Type")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a BanListType object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "NAME" => Ok(BanListType::Name { inner: BanListTypeStruct::from_raw(env,obj)?}),"IP" => Ok(BanListType::Ip { inner: BanListTypeStruct::from_raw(env,obj)?}),"PROFILE" => Ok(BanListType::Profile { inner: BanListTypeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for BanListTypeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for BanListTypeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate BanListTypeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/BanList/Type")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a BanListTypeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> BanListTypeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::BanListType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/BanList/Type;");
let cls = jni.find_class("org/bukkit/BanList/Type"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::BanListType::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Translatable<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Translatable<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Translatable<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Translatable from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Translatable")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Translatable object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> TranslatableTrait<'mc> for Translatable<'mc> {}
pub trait TranslatableTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Get the translation key, suitable for use in a translation component.
	fn translation_key(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getTranslationKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct RegistrySimpleRegistry<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for RegistrySimpleRegistry<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for RegistrySimpleRegistry<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate RegistrySimpleRegistry from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Registry/SimpleRegistry")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a RegistrySimpleRegistry object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> RegistrySimpleRegistryTrait<'mc> for RegistrySimpleRegistry<'mc> {}
pub trait RegistrySimpleRegistryTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

	fn get(&self,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<jni::objects::JObject<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)LT;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"get",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
res.l()?
)
)}

	fn iterator(&self) 
-> Result<blackboxmc_java::util::JavaIterator<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Iterator;");
let res = self.jni_ref().call_method(&self.jni_object(),"iterator",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaIterator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::Registry<'mc>> for RegistrySimpleRegistry<'mc>{

fn into(self) -> crate::Registry<'mc> {

crate::Registry::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting RegistrySimpleRegistry into crate::Registry")

   }
}
impl<'mc> crate::RegistryTrait<'mc> for RegistrySimpleRegistry<'mc> {}
pub enum Rotation<'mc> {
	None {inner: RotationStruct<'mc>},
	Clockwise45 {inner: RotationStruct<'mc>},
	Clockwise {inner: RotationStruct<'mc>},
	Clockwise135 {inner: RotationStruct<'mc>},
	Flipped {inner: RotationStruct<'mc>},
	Flipped45 {inner: RotationStruct<'mc>},
	CounterClockwise {inner: RotationStruct<'mc>},
	CounterClockwise45 {inner: RotationStruct<'mc>},
}
impl<'mc> std::fmt::Display for Rotation<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           Rotation::None { .. } => f.write_str("NONE"),
           Rotation::Clockwise45 { .. } => f.write_str("CLOCKWISE_45"),
           Rotation::Clockwise { .. } => f.write_str("CLOCKWISE"),
           Rotation::Clockwise135 { .. } => f.write_str("CLOCKWISE_135"),
           Rotation::Flipped { .. } => f.write_str("FLIPPED"),
           Rotation::Flipped45 { .. } => f.write_str("FLIPPED_45"),
           Rotation::CounterClockwise { .. } => f.write_str("COUNTER_CLOCKWISE"),
           Rotation::CounterClockwise45 { .. } => f.write_str("COUNTER_CLOCKWISE_45"),
       }
   }
}

        impl<'mc> RotationTrait<'mc> for Rotation<'mc> {}
        
        pub trait RotationTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<Rotation<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Rotation");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Rotation;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"NONE" => Ok(Rotation::None { inner: RotationStruct::from_raw(env,obj)?}),
"CLOCKWISE_45" => Ok(Rotation::Clockwise45 { inner: RotationStruct::from_raw(env,obj)?}),
"CLOCKWISE" => Ok(Rotation::Clockwise { inner: RotationStruct::from_raw(env,obj)?}),
"CLOCKWISE_135" => Ok(Rotation::Clockwise135 { inner: RotationStruct::from_raw(env,obj)?}),
"FLIPPED" => Ok(Rotation::Flipped { inner: RotationStruct::from_raw(env,obj)?}),
"FLIPPED_45" => Ok(Rotation::Flipped45 { inner: RotationStruct::from_raw(env,obj)?}),
"COUNTER_CLOCKWISE" => Ok(Rotation::CounterClockwise { inner: RotationStruct::from_raw(env,obj)?}),
"COUNTER_CLOCKWISE_45" => Ok(Rotation::CounterClockwise45 { inner: RotationStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct RotationStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Rotation<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::None { inner } => inner.0.clone(),
Self::Clockwise45 { inner } => inner.0.clone(),
Self::Clockwise { inner } => inner.0.clone(),
Self::Clockwise135 { inner } => inner.0.clone(),
Self::Flipped { inner } => inner.0.clone(),
Self::Flipped45 { inner } => inner.0.clone(),
Self::CounterClockwise { inner } => inner.0.clone(),
Self::CounterClockwise45 { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::None { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Clockwise45 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Clockwise { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Clockwise135 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Flipped { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Flipped45 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CounterClockwise { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CounterClockwise45 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for Rotation<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Rotation from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Rotation")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Rotation object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "NONE" => Ok(Rotation::None { inner: RotationStruct::from_raw(env,obj)?}),"CLOCKWISE_45" => Ok(Rotation::Clockwise45 { inner: RotationStruct::from_raw(env,obj)?}),"CLOCKWISE" => Ok(Rotation::Clockwise { inner: RotationStruct::from_raw(env,obj)?}),"CLOCKWISE_135" => Ok(Rotation::Clockwise135 { inner: RotationStruct::from_raw(env,obj)?}),"FLIPPED" => Ok(Rotation::Flipped { inner: RotationStruct::from_raw(env,obj)?}),"FLIPPED_45" => Ok(Rotation::Flipped45 { inner: RotationStruct::from_raw(env,obj)?}),"COUNTER_CLOCKWISE" => Ok(Rotation::CounterClockwise { inner: RotationStruct::from_raw(env,obj)?}),"COUNTER_CLOCKWISE_45" => Ok(Rotation::CounterClockwise45 { inner: RotationStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for RotationStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for RotationStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate RotationStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Rotation")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a RotationStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> RotationStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Rotation<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Rotation;");
let cls = jni.find_class("org/bukkit/Rotation"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Rotation::from_raw(&jni,obj
)}
/// Rotate clockwise by 90 degrees.
	fn rotate_clockwise(&self) 
-> Result<crate::Rotation<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Rotation;");
let res = self.jni_ref().call_method(&self.jni_object(),"rotateClockwise",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Rotation::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Rotate counter-clockwise by 90 degrees.
	fn rotate_counter_clockwise(&self) 
-> Result<crate::Rotation<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Rotation;");
let res = self.jni_ref().call_method(&self.jni_object(),"rotateCounterClockwise",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Rotation::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum CropState<'mc> {
	Seeded {inner: CropStateStruct<'mc>},
	Germinated {inner: CropStateStruct<'mc>},
	VerySmall {inner: CropStateStruct<'mc>},
	Small {inner: CropStateStruct<'mc>},
	Medium {inner: CropStateStruct<'mc>},
	Tall {inner: CropStateStruct<'mc>},
	VeryTall {inner: CropStateStruct<'mc>},
	Ripe {inner: CropStateStruct<'mc>},
}
impl<'mc> std::fmt::Display for CropState<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           CropState::Seeded { .. } => f.write_str("SEEDED"),
           CropState::Germinated { .. } => f.write_str("GERMINATED"),
           CropState::VerySmall { .. } => f.write_str("VERY_SMALL"),
           CropState::Small { .. } => f.write_str("SMALL"),
           CropState::Medium { .. } => f.write_str("MEDIUM"),
           CropState::Tall { .. } => f.write_str("TALL"),
           CropState::VeryTall { .. } => f.write_str("VERY_TALL"),
           CropState::Ripe { .. } => f.write_str("RIPE"),
       }
   }
}

        impl<'mc> CropStateTrait<'mc> for CropState<'mc> {}
        
        pub trait CropStateTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<CropState<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/CropState");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/CropState;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"SEEDED" => Ok(CropState::Seeded { inner: CropStateStruct::from_raw(env,obj)?}),
"GERMINATED" => Ok(CropState::Germinated { inner: CropStateStruct::from_raw(env,obj)?}),
"VERY_SMALL" => Ok(CropState::VerySmall { inner: CropStateStruct::from_raw(env,obj)?}),
"SMALL" => Ok(CropState::Small { inner: CropStateStruct::from_raw(env,obj)?}),
"MEDIUM" => Ok(CropState::Medium { inner: CropStateStruct::from_raw(env,obj)?}),
"TALL" => Ok(CropState::Tall { inner: CropStateStruct::from_raw(env,obj)?}),
"VERY_TALL" => Ok(CropState::VeryTall { inner: CropStateStruct::from_raw(env,obj)?}),
"RIPE" => Ok(CropState::Ripe { inner: CropStateStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct CropStateStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for CropState<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Seeded { inner } => inner.0.clone(),
Self::Germinated { inner } => inner.0.clone(),
Self::VerySmall { inner } => inner.0.clone(),
Self::Small { inner } => inner.0.clone(),
Self::Medium { inner } => inner.0.clone(),
Self::Tall { inner } => inner.0.clone(),
Self::VeryTall { inner } => inner.0.clone(),
Self::Ripe { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Seeded { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Germinated { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VerySmall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Small { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Medium { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Tall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VeryTall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Ripe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for CropState<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate CropState from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/CropState")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a CropState object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "SEEDED" => Ok(CropState::Seeded { inner: CropStateStruct::from_raw(env,obj)?}),"GERMINATED" => Ok(CropState::Germinated { inner: CropStateStruct::from_raw(env,obj)?}),"VERY_SMALL" => Ok(CropState::VerySmall { inner: CropStateStruct::from_raw(env,obj)?}),"SMALL" => Ok(CropState::Small { inner: CropStateStruct::from_raw(env,obj)?}),"MEDIUM" => Ok(CropState::Medium { inner: CropStateStruct::from_raw(env,obj)?}),"TALL" => Ok(CropState::Tall { inner: CropStateStruct::from_raw(env,obj)?}),"VERY_TALL" => Ok(CropState::VeryTall { inner: CropStateStruct::from_raw(env,obj)?}),"RIPE" => Ok(CropState::Ripe { inner: CropStateStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for CropStateStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for CropStateStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate CropStateStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/CropState")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a CropStateStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> CropStateStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::CropState<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/CropState;");
let cls = jni.find_class("org/bukkit/CropState"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::CropState::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the associated data value representing this growth state
	fn data(&self) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("()B");
let res = self.jni_ref().call_method(&self.jni_object(),"getData",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
#[deprecated]
/// Gets the CropState with the given data value
	fn get_by_data(jni: &blackboxmc_general::SharedJNIEnv<'mc>,data: i8) 
-> Result<Option<crate::CropState<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(B)Lorg/bukkit/CropState;");
let val_1 = jni::objects::JValueGen::Byte(data);
let cls = jni.find_class("org/bukkit/CropState"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByData",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::CropState::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct RegionAccessor<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for RegionAccessor<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for RegionAccessor<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate RegionAccessor from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/RegionAccessor")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a RegionAccessor object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> RegionAccessorTrait<'mc> for RegionAccessor<'mc> {}
pub trait RegionAccessorTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Gets the {@link Biome} at the given coordinates.
	fn get_biome(&self,x: i32,y: std::option::Option<i32>,z: std::option::Option<i32>) 
-> Result<crate::block::Biome<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
if let Some(a) = y {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")Lorg/bukkit/block/Biome;";
let res = self.jni_ref().call_method(&self.jni_object(),"getBiome",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::Biome::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the {@link Biome} for the given block coordinates
	fn set_biome(&self,x: i32,y: i32,z: std::option::Option<i32>,biome: std::option::Option<impl Into<crate::block::Biome<'mc>>>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
sig += "I";
let val_2 = jni::objects::JValueGen::Int(y);
args.push(val_2);
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
if let Some(a) = biome {
sig += "Lorg/bukkit/block/Biome;";
let val_4 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_4);
}
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"setBiome",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the {@link BlockState} at the given coordinates.
	fn get_block_state(&self,x: i32,y: std::option::Option<i32>,z: std::option::Option<i32>) 
-> Result<crate::block::BlockState<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
if let Some(a) = y {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")Lorg/bukkit/block/BlockState;";
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockState",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::BlockState::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the {@link BlockData} at the given coordinates.
	fn get_block_data(&self,x: i32,y: std::option::Option<i32>,z: std::option::Option<i32>) 
-> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
if let Some(a) = y {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")Lorg/bukkit/block/data/BlockData;";
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockData",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::data::BlockData::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the type of the block at the given coordinates.
	fn get_type(&self,x: i32,y: std::option::Option<i32>,z: std::option::Option<i32>) 
-> Result<crate::Material<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
if let Some(a) = y {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")Lorg/bukkit/Material;";
let res = self.jni_ref().call_method(&self.jni_object(),"getType",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::Material::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the {@link BlockData} at the given coordinates.
	fn set_block_data(&self,x: i32,y: i32,z: std::option::Option<i32>,block_data: std::option::Option<impl Into<crate::block::data::BlockData<'mc>>>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
sig += "I";
let val_2 = jni::objects::JValueGen::Int(y);
args.push(val_2);
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
if let Some(a) = block_data {
sig += "Lorg/bukkit/block/data/BlockData;";
let val_4 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_4);
}
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"setBlockData",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Sets the {@link Material} at the given coordinates.
	fn set_type(&self,x: i32,y: i32,z: std::option::Option<i32>,material: std::option::Option<impl Into<crate::Material<'mc>>>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
sig += "I";
let val_2 = jni::objects::JValueGen::Int(y);
args.push(val_2);
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
if let Some(a) = material {
sig += "Lorg/bukkit/Material;";
let val_4 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_4);
}
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"setType",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Creates a tree at the given {@link Location}
/// 
/// The provided predicate gets called for every block which gets changed
/// as a result of the tree generation. When the predicate gets called no
/// modifications to the world are done yet. Which means, that calling
/// {@link #getBlockState(Location)} in the predicate will return the state
/// of the block before the generation.
/// 
/// If the predicate returns {@code true} the block gets set in the world.
/// If it returns {@code false} the block won't get set in the world.
	fn generate_tree(&self,location: impl Into<crate::Location<'mc>>,random: impl Into<blackboxmc_java::util::JavaRandom<'mc>>,val_type: impl Into<crate::TreeType<'mc>>,state_predicate: std::option::Option<impl Into<blackboxmc_java::util::function::JavaPredicate<'mc>>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_1);
sig += "Ljava/util/Random;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(random.into().jni_object().clone())});
args.push(val_2);
sig += "Lorg/bukkit/TreeType;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(val_type.into().jni_object().clone())});
args.push(val_3);
if let Some(a) = state_predicate {
sig += "Ljava/util/function/Predicate;";
let val_4 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_4);
}
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"generateTree",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Creates a new entity at the given {@link Location}.
	fn spawn_entity(&self,loc: impl Into<crate::Location<'mc>>,val_type: impl Into<crate::entity::EntityType<'mc>>,randomize_data: std::option::Option<bool>) 
-> Result<crate::entity::Entity<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(loc.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/entity/EntityType;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(val_type.into().jni_object().clone())});
args.push(val_2);
if let Some(a) = randomize_data {
sig += "Z";
let val_3 = jni::objects::JValueGen::Bool(a.into());
args.push(val_3);
}
sig += ")Lorg/bukkit/entity/Entity;";
let res = self.jni_ref().call_method(&self.jni_object(),"spawnEntity",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::entity::Entity::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Get a list of all entities in this RegionAccessor
	fn entities(&self) 
-> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getEntities",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Get a list of all living entities in this RegionAccessor
	fn living_entities(&self) 
-> Result<Vec<crate::entity::LivingEntity<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getLivingEntities",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::LivingEntity::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Get a collection of all entities in this RegionAccessor matching the given
/// class/interface
	fn get_entities_by_class(&self,cls: jni::objects::JClass<'mc>) 
-> Result<Vec<jni::objects::JObject<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Class;)Ljava/util/Collection;");
let val_1 = jni::objects::JValueGen::Object(cls.into());
let res = self.jni_ref().call_method(&self.jni_object(),"getEntitiesByClass",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&self.jni_ref(),res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(obj);
};
Ok(
new_vec
)}
/// Get a collection of all entities in this RegionAccessor matching any of the
/// given classes/interfaces
	fn get_entities_by_classes(&self,classes: jni::objects::JClass<'mc>) 
-> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Class;)Ljava/util/Collection;");
let val_1 = jni::objects::JValueGen::Object(classes.into());
let res = self.jni_ref().call_method(&self.jni_object(),"getEntitiesByClasses",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&self.jni_ref(),res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Creates an entity of a specific class at the given {@link Location} but
/// does not spawn it in the world.
/// 
/// <b>Note:</b> The created entity keeps a reference to the world it was
/// created in, care should be taken that the entity does not outlive the
/// world instance as this will lead to memory leaks.
	fn create_entity(&self,location: impl Into<crate::Location<'mc>>,clazz: jni::objects::JClass<'mc>) 
-> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Location;Ljava/lang/Class;)LT;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(clazz.into());
let res = self.jni_ref().call_method(&self.jni_object(),"createEntity",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.l()?
)}
/// Creates a new entity at the given {@link Location} with the supplied
/// function run before the entity is added to the world.
/// 
/// Note that when the function is run, the entity will not be actually in
/// the world. Any operation involving such as teleporting the entity is undefined
/// until after this function returns.
/// The passed function however is run after the potential entity's spawn
/// randomization and hence already allows access to the values of the mob,
/// whether or not those were randomized, such as attributes or the entity
/// equipment.
	fn spawn(&self,location: impl Into<crate::Location<'mc>>,clazz: jni::objects::JClass<'mc>,randomize_data: std::option::Option<bool>,function: std::option::Option<impl Into<blackboxmc_java::util::function::JavaConsumer<'mc>>>) 
-> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_1);
sig += "Ljava/lang/Class;";
let val_2 = jni::objects::JValueGen::Object(clazz.into());
args.push(val_2);
if let Some(a) = randomize_data {
sig += "Z";
let val_3 = jni::objects::JValueGen::Bool(a.into());
args.push(val_3);
}
if let Some(a) = function {
sig += "Ljava/util/function/Consumer;";
let val_4 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_4);
}
sig += ")LT;";
let res = self.jni_ref().call_method(&self.jni_object(),"spawn",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.l()?
)}
/// Gets the highest coordinate corresponding to the {@link HeightMap} at the
/// given {@link Location}.
	fn get_highest_block_yat(&self,location: impl Into<crate::Location<'mc>>,height_map: std::option::Option<impl Into<crate::HeightMap<'mc>>>) 
-> Result<i32, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_1);
if let Some(a) = height_map {
sig += "Lorg/bukkit/HeightMap;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_2);
}
sig += ")I";
let res = self.jni_ref().call_method(&self.jni_object(),"getHighestBlockYAt",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Spawns a previously created entity in the world.
/// 
/// The provided entity must not have already been spawned in a world.
	fn add_entity(&self,entity: jni::objects::JObject<'mc>) 
-> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(LT;)LT;");
let val_1 = jni::objects::JValueGen::Object(entity);
let res = self.jni_ref().call_method(&self.jni_object(),"addEntity",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.l()?
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct ServerTickManager<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for ServerTickManager<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for ServerTickManager<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate ServerTickManager from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/ServerTickManager")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a ServerTickManager object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> ServerTickManagerTrait<'mc> for ServerTickManager<'mc> {}
pub trait ServerTickManagerTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Checks if the server is running normally.
/// 
/// When the server is running normally it indicates that the server is not
/// currently frozen.
	fn is_running_normally(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isRunningNormally",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if the server is currently stepping.
	fn is_stepping(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isStepping",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if the server is currently sprinting.
	fn is_sprinting(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isSprinting",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if a given entity is frozen.
	fn is_frozen(&self,entity: std::option::Option<impl Into<crate::entity::Entity<'mc>>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = entity {
sig += "Lorg/bukkit/entity/Entity;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_1);
}
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"isFrozen",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the current tick rate of the server.
	fn tick_rate(&self) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("()F");
let res = self.jni_ref().call_method(&self.jni_object(),"getTickRate",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.f()?
)}
/// Sets the tick rate of the server.
/// 
/// The normal tick rate of the server is 20. No tick rate below 1.0F or
/// above 10,000 can be applied to the server.
	fn set_tick_rate(&self,tick: f32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(F)V");
let val_1 = jni::objects::JValueGen::Float(tick);
let res = self.jni_ref().call_method(&self.jni_object(),"setTickRate",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Sets the server to a frozen state that does not tick most things.
	fn set_frozen(&self,frozen: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(frozen.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setFrozen",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Steps the game a certain amount of ticks if the server is currently
/// frozen.
/// 
/// Steps occur when the server is in a frozen state which can be started by
/// either using the in game /tick freeze command or the
/// {@link #setFrozen(boolean)} method.
	fn step_game_if_frozen(&self,ticks: i32) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(I)Z");
let val_1 = jni::objects::JValueGen::Int(ticks);
let res = self.jni_ref().call_method(&self.jni_object(),"stepGameIfFrozen",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Stops the current stepping if stepping is occurring.
	fn stop_stepping(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"stopStepping",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Attempts to initiate a sprint, which executes all server ticks at a
/// faster rate then normal.
	fn request_game_to_sprint(&self,ticks: i32) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(I)Z");
let val_1 = jni::objects::JValueGen::Int(ticks);
let res = self.jni_ref().call_method(&self.jni_object(),"requestGameToSprint",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Stops the current sprint if one is currently happening.
	fn stop_sprinting(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"stopSprinting",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the amount of frozen ticks left to run.
	fn frozen_ticks_to_run(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getFrozenTicksToRun",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Note<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Note<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Note<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Note from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Note")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Note object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> NoteTrait<'mc> for Note<'mc> {}
pub trait NoteTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Creates a new note.
	fn new(jni: &blackboxmc_general::SharedJNIEnv<'mc>,octave: i32,tone: std::option::Option<impl Into<crate::NoteTone<'mc>>>,sharped: std::option::Option<bool>) 
-> Result<crate::Note<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(octave);
args.push(val_1);
if let Some(a) = tone {
sig += "Lorg/bukkit/Note/Tone;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_2);
}
if let Some(a) = sharped {
sig += "Z";
let val_3 = jni::objects::JValueGen::Bool(a.into());
args.push(val_3);
}
sig += ")V";
let cls = jni.find_class("org/bukkit/Note"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.new_object(cls,
sig.as_str(),args);
let res = 
jni.translate_error_no_gen(res)?;
crate::Note::from_raw(&jni,res
)}
/// Creates a new note for a flat tone, such as A-flat.
	fn flat(jni: &blackboxmc_general::SharedJNIEnv<'mc>,octave: i32,tone: impl Into<crate::NoteTone<'mc>>) 
-> Result<crate::Note<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(ILorg/bukkit/Note/Tone;)Lorg/bukkit/Note;");
let val_1 = jni::objects::JValueGen::Int(octave);
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(tone.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Note"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"flat",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Note::from_raw(&jni,obj
)}
/// Creates a new note for a sharp tone, such as A-sharp.
	fn sharp(jni: &blackboxmc_general::SharedJNIEnv<'mc>,octave: i32,tone: impl Into<crate::NoteTone<'mc>>) 
-> Result<crate::Note<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(ILorg/bukkit/Note/Tone;)Lorg/bukkit/Note;");
let val_1 = jni::objects::JValueGen::Int(octave);
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(tone.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Note"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"sharp",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Note::from_raw(&jni,obj
)}
/// Creates a new note for a natural tone, such as A-natural.
	fn natural(jni: &blackboxmc_general::SharedJNIEnv<'mc>,octave: i32,tone: impl Into<crate::NoteTone<'mc>>) 
-> Result<crate::Note<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(ILorg/bukkit/Note/Tone;)Lorg/bukkit/Note;");
let val_1 = jni::objects::JValueGen::Int(octave);
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(tone.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Note"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"natural",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Note::from_raw(&jni,obj
)}

	fn sharped(&self) 
-> Result<crate::Note<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Note;");
let res = self.jni_ref().call_method(&self.jni_object(),"sharped",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Note::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn flattened(&self) 
-> Result<crate::Note<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Note;");
let res = self.jni_ref().call_method(&self.jni_object(),"flattened",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Note::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
#[deprecated]
/// Returns the internal id of this note.
	fn id(&self) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("()B");
let res = self.jni_ref().call_method(&self.jni_object(),"getId",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
/// Returns the octave of this note.
	fn octave(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getOctave",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Returns the tone of this note.
	fn tone(&self) 
-> Result<crate::NoteTone<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Note/Tone;");
let res = self.jni_ref().call_method(&self.jni_object(),"getTone",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::NoteTone::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Returns if this note is sharped.
	fn is_sharped(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isSharped",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the pitch of this note. This is the value used with
/// {@link World#playSound} or the /playsound command.
	fn pitch(&self) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("()F");
let res = self.jni_ref().call_method(&self.jni_object(),"getPitch",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.f()?
)}

	fn hash_code(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"hashCode",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}

	fn equals(&self,obj: jni::objects::JObject<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Object;)Z");
let val_1 = jni::objects::JValueGen::Object(obj);
let res = self.jni_ref().call_method(&self.jni_object(),"equals",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

#[doc(hidden)]
	fn internal_to_string(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"toString",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}

        impl<'mc> std::string::ToString for Note<'mc> {
            fn to_string(&self) -> String {
                match NoteTrait::internal_to_string(self) {
                    Ok(a) => a.clone(),
                    Err(err) => format!(
                        "Error calling Note.toString: {}",
                        err
                    ),
                }
            }
        }
        
pub enum Difficulty<'mc> {
	Peaceful {inner: DifficultyStruct<'mc>},
	Easy {inner: DifficultyStruct<'mc>},
	Normal {inner: DifficultyStruct<'mc>},
	Hard {inner: DifficultyStruct<'mc>},
}
impl<'mc> std::fmt::Display for Difficulty<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           Difficulty::Peaceful { .. } => f.write_str("PEACEFUL"),
           Difficulty::Easy { .. } => f.write_str("EASY"),
           Difficulty::Normal { .. } => f.write_str("NORMAL"),
           Difficulty::Hard { .. } => f.write_str("HARD"),
       }
   }
}

        impl<'mc> DifficultyTrait<'mc> for Difficulty<'mc> {}
        
        pub trait DifficultyTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<Difficulty<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Difficulty");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Difficulty;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"PEACEFUL" => Ok(Difficulty::Peaceful { inner: DifficultyStruct::from_raw(env,obj)?}),
"EASY" => Ok(Difficulty::Easy { inner: DifficultyStruct::from_raw(env,obj)?}),
"NORMAL" => Ok(Difficulty::Normal { inner: DifficultyStruct::from_raw(env,obj)?}),
"HARD" => Ok(Difficulty::Hard { inner: DifficultyStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct DifficultyStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Difficulty<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Peaceful { inner } => inner.0.clone(),
Self::Easy { inner } => inner.0.clone(),
Self::Normal { inner } => inner.0.clone(),
Self::Hard { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Peaceful { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Easy { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Normal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Hard { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for Difficulty<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Difficulty from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Difficulty")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Difficulty object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "PEACEFUL" => Ok(Difficulty::Peaceful { inner: DifficultyStruct::from_raw(env,obj)?}),"EASY" => Ok(Difficulty::Easy { inner: DifficultyStruct::from_raw(env,obj)?}),"NORMAL" => Ok(Difficulty::Normal { inner: DifficultyStruct::from_raw(env,obj)?}),"HARD" => Ok(Difficulty::Hard { inner: DifficultyStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for DifficultyStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for DifficultyStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate DifficultyStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Difficulty")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a DifficultyStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> DifficultyStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Difficulty<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Difficulty;");
let cls = jni.find_class("org/bukkit/Difficulty"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Difficulty::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the difficulty value associated with this Difficulty.
	fn value(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getValue",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the Difficulty represented by the specified value
	fn get_by_value(jni: &blackboxmc_general::SharedJNIEnv<'mc>,value: i32) 
-> Result<Option<crate::Difficulty<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(I)Lorg/bukkit/Difficulty;");
let val_1 = jni::objects::JValueGen::Int(value);
let cls = jni.find_class("org/bukkit/Difficulty"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByValue",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::Difficulty::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct FeatureFlag<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for FeatureFlag<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for FeatureFlag<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate FeatureFlag from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/FeatureFlag")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a FeatureFlag object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> FeatureFlagTrait<'mc> for FeatureFlag<'mc> {}
pub trait FeatureFlagTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::Keyed<'mc>> for FeatureFlag<'mc>{

fn into(self) -> crate::Keyed<'mc> {

crate::Keyed::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting FeatureFlag into crate::Keyed")

   }
}
impl<'mc> crate::KeyedTrait<'mc> for FeatureFlag<'mc> {}
#[repr(C)]
pub struct VibrationDestinationBlockDestination<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for VibrationDestinationBlockDestination<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for VibrationDestinationBlockDestination<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate VibrationDestinationBlockDestination from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Vibration/Destination/BlockDestination")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a VibrationDestinationBlockDestination object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> VibrationDestinationBlockDestinationTrait<'mc> for VibrationDestinationBlockDestination<'mc> {}
pub trait VibrationDestinationBlockDestinationTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

	fn new(jni: &blackboxmc_general::SharedJNIEnv<'mc>,block: impl Into<crate::block::Block<'mc>>) 
-> Result<crate::VibrationDestinationBlockDestination<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/block/Block;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(block.into().jni_object().clone())});
args.push(val_1);
sig += ")V";
let cls = jni.find_class("org/bukkit/Vibration/Destination/BlockDestination"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.new_object(cls,
sig.as_str(),args);
let res = 
jni.translate_error_no_gen(res)?;
crate::VibrationDestinationBlockDestination::from_raw(&jni,res
)}

	fn location(&self) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Location;");
let res = self.jni_ref().call_method(&self.jni_object(),"getLocation",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn block(&self) 
-> Result<crate::block::Block<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/block/Block;");
let res = self.jni_ref().call_method(&self.jni_object(),"getBlock",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::Block::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::VibrationDestination<'mc>> for VibrationDestinationBlockDestination<'mc>{

fn into(self) -> crate::VibrationDestination<'mc> {

crate::VibrationDestination::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting VibrationDestinationBlockDestination into crate::VibrationDestination")

   }
}
impl<'mc> crate::VibrationDestinationTrait<'mc> for VibrationDestinationBlockDestination<'mc> {}
pub enum CoalType<'mc> {
	Coal {inner: CoalTypeStruct<'mc>},
	Charcoal {inner: CoalTypeStruct<'mc>},
}
impl<'mc> std::fmt::Display for CoalType<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           CoalType::Coal { .. } => f.write_str("COAL"),
           CoalType::Charcoal { .. } => f.write_str("CHARCOAL"),
       }
   }
}

        impl<'mc> CoalTypeTrait<'mc> for CoalType<'mc> {}
        
        pub trait CoalTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<CoalType<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/CoalType");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/CoalType;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"COAL" => Ok(CoalType::Coal { inner: CoalTypeStruct::from_raw(env,obj)?}),
"CHARCOAL" => Ok(CoalType::Charcoal { inner: CoalTypeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct CoalTypeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for CoalType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Coal { inner } => inner.0.clone(),
Self::Charcoal { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Coal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Charcoal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for CoalType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate CoalType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/CoalType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a CoalType object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "COAL" => Ok(CoalType::Coal { inner: CoalTypeStruct::from_raw(env,obj)?}),"CHARCOAL" => Ok(CoalType::Charcoal { inner: CoalTypeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for CoalTypeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for CoalTypeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate CoalTypeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/CoalType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a CoalTypeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> CoalTypeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::CoalType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/CoalType;");
let cls = jni.find_class("org/bukkit/CoalType"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::CoalType::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the associated data value representing this type of coal
	fn data(&self) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("()B");
let res = self.jni_ref().call_method(&self.jni_object(),"getData",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
#[deprecated]
/// Gets the type of coal with the given data value
	fn get_by_data(jni: &blackboxmc_general::SharedJNIEnv<'mc>,data: i8) 
-> Result<Option<crate::CoalType<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(B)Lorg/bukkit/CoalType;");
let val_1 = jni::objects::JValueGen::Byte(data);
let cls = jni.find_class("org/bukkit/CoalType"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByData",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::CoalType::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum PortalType<'mc> {
	Nether {inner: PortalTypeStruct<'mc>},
	Ender {inner: PortalTypeStruct<'mc>},
	Custom {inner: PortalTypeStruct<'mc>},
}
impl<'mc> std::fmt::Display for PortalType<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           PortalType::Nether { .. } => f.write_str("NETHER"),
           PortalType::Ender { .. } => f.write_str("ENDER"),
           PortalType::Custom { .. } => f.write_str("CUSTOM"),
       }
   }
}

        impl<'mc> PortalTypeTrait<'mc> for PortalType<'mc> {}
        
        pub trait PortalTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<PortalType<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/PortalType");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/PortalType;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"NETHER" => Ok(PortalType::Nether { inner: PortalTypeStruct::from_raw(env,obj)?}),
"ENDER" => Ok(PortalType::Ender { inner: PortalTypeStruct::from_raw(env,obj)?}),
"CUSTOM" => Ok(PortalType::Custom { inner: PortalTypeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct PortalTypeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for PortalType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Nether { inner } => inner.0.clone(),
Self::Ender { inner } => inner.0.clone(),
Self::Custom { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Nether { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Ender { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Custom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for PortalType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate PortalType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/PortalType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a PortalType object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "NETHER" => Ok(PortalType::Nether { inner: PortalTypeStruct::from_raw(env,obj)?}),"ENDER" => Ok(PortalType::Ender { inner: PortalTypeStruct::from_raw(env,obj)?}),"CUSTOM" => Ok(PortalType::Custom { inner: PortalTypeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for PortalTypeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for PortalTypeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate PortalTypeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/PortalType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a PortalTypeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> PortalTypeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::PortalType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/PortalType;");
let cls = jni.find_class("org/bukkit/PortalType"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::PortalType::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum WorldType<'mc> {
	Normal {inner: WorldTypeStruct<'mc>},
	Flat {inner: WorldTypeStruct<'mc>},
	LargeBiomes {inner: WorldTypeStruct<'mc>},
	Amplified {inner: WorldTypeStruct<'mc>},
}
impl<'mc> std::fmt::Display for WorldType<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           WorldType::Normal { .. } => f.write_str("NORMAL"),
           WorldType::Flat { .. } => f.write_str("FLAT"),
           WorldType::LargeBiomes { .. } => f.write_str("LARGE_BIOMES"),
           WorldType::Amplified { .. } => f.write_str("AMPLIFIED"),
       }
   }
}

        impl<'mc> WorldTypeTrait<'mc> for WorldType<'mc> {}
        
        pub trait WorldTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<WorldType<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/WorldType");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/WorldType;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"NORMAL" => Ok(WorldType::Normal { inner: WorldTypeStruct::from_raw(env,obj)?}),
"FLAT" => Ok(WorldType::Flat { inner: WorldTypeStruct::from_raw(env,obj)?}),
"LARGE_BIOMES" => Ok(WorldType::LargeBiomes { inner: WorldTypeStruct::from_raw(env,obj)?}),
"AMPLIFIED" => Ok(WorldType::Amplified { inner: WorldTypeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct WorldTypeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for WorldType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Normal { inner } => inner.0.clone(),
Self::Flat { inner } => inner.0.clone(),
Self::LargeBiomes { inner } => inner.0.clone(),
Self::Amplified { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Normal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Flat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LargeBiomes { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Amplified { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for WorldType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate WorldType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/WorldType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a WorldType object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "NORMAL" => Ok(WorldType::Normal { inner: WorldTypeStruct::from_raw(env,obj)?}),"FLAT" => Ok(WorldType::Flat { inner: WorldTypeStruct::from_raw(env,obj)?}),"LARGE_BIOMES" => Ok(WorldType::LargeBiomes { inner: WorldTypeStruct::from_raw(env,obj)?}),"AMPLIFIED" => Ok(WorldType::Amplified { inner: WorldTypeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for WorldTypeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for WorldTypeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate WorldTypeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/WorldType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a WorldTypeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> WorldTypeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::WorldType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/WorldType;");
let cls = jni.find_class("org/bukkit/WorldType"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::WorldType::from_raw(&jni,obj
)}
/// Gets the name of this WorldType
	fn name(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getName",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets a WorldType by its name
	fn get_by_name(jni: &blackboxmc_general::SharedJNIEnv<'mc>,name: impl Into<String>) 
-> Result<Option<crate::WorldType<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/WorldType;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
let cls = jni.find_class("org/bukkit/WorldType"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByName",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::WorldType::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct BanEntry<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for BanEntry<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for BanEntry<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate BanEntry from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/BanEntry")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a BanEntry object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> BanEntryTrait<'mc> for BanEntry<'mc> {}
pub trait BanEntryTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
#[deprecated]
/// Gets the target involved. This may be in the form of an IP or a player name.
	fn target(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getTarget",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the target involved.
	fn ban_target(&self) 
-> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()LT;");
let res = self.jni_ref().call_method(&self.jni_object(),"getBanTarget",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.l()?
)}
/// Gets the date this ban entry was created.
	fn created(&self) 
-> Result<blackboxmc_java::util::JavaDate<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Date;");
let res = self.jni_ref().call_method(&self.jni_object(),"getCreated",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaDate::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the date this ban entry was created.
	fn set_created(&self,created: impl Into<blackboxmc_java::util::JavaDate<'mc>>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/util/Date;)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(created.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"setCreated",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the source of this ban.
/// 
/// Note: A source is considered any String, although this is generally a
/// player name.
	fn source(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getSource",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Sets the source of this ban.
/// 
/// Note: A source is considered any String, although this is generally a
/// player name.
	fn set_source(&self,source: impl Into<String>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)V");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(source.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"setSource",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the date this ban expires on, or null for no defined end date.
	fn expiration(&self) 
-> Result<Option<blackboxmc_java::util::JavaDate<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Date;");
let res = self.jni_ref().call_method(&self.jni_object(),"getExpiration",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
blackboxmc_java::util::JavaDate::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Sets the date this ban expires on. Null values are considered
/// "infinite" bans.
	fn set_expiration(&self,expiration: impl Into<blackboxmc_java::util::JavaDate<'mc>>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/util/Date;)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(expiration.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"setExpiration",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the reason for this ban.
	fn reason(&self) 
-> Result<Option<String>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getReason",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)
)}
/// Sets the reason for this ban. Reasons must not be null.
	fn set_reason(&self,reason: impl Into<String>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)V");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(reason.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"setReason",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Saves the ban entry, overwriting any previous data in the ban list.
/// 
/// Saving the ban entry of an unbanned player will cause the player to be
/// banned once again.
	fn save(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"save",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Removes this ban entry from the appropriate ban list.
	fn remove(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"remove",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum ChatColor<'mc> {
	Black {inner: ChatColorStruct<'mc>},
	DarkBlue {inner: ChatColorStruct<'mc>},
	DarkGreen {inner: ChatColorStruct<'mc>},
	DarkAqua {inner: ChatColorStruct<'mc>},
	DarkRed {inner: ChatColorStruct<'mc>},
	DarkPurple {inner: ChatColorStruct<'mc>},
	Gold {inner: ChatColorStruct<'mc>},
	Gray {inner: ChatColorStruct<'mc>},
	DarkGray {inner: ChatColorStruct<'mc>},
	Blue {inner: ChatColorStruct<'mc>},
	Green {inner: ChatColorStruct<'mc>},
	Aqua {inner: ChatColorStruct<'mc>},
	Red {inner: ChatColorStruct<'mc>},
	LightPurple {inner: ChatColorStruct<'mc>},
	Yellow {inner: ChatColorStruct<'mc>},
	White {inner: ChatColorStruct<'mc>},
	Magic {inner: ChatColorStruct<'mc>},
	Bold {inner: ChatColorStruct<'mc>},
	Strikethrough {inner: ChatColorStruct<'mc>},
	Underline {inner: ChatColorStruct<'mc>},
	Italic {inner: ChatColorStruct<'mc>},
	Reset {inner: ChatColorStruct<'mc>},
}
impl<'mc> std::fmt::Display for ChatColor<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           ChatColor::Black { .. } => f.write_str("BLACK"),
           ChatColor::DarkBlue { .. } => f.write_str("DARK_BLUE"),
           ChatColor::DarkGreen { .. } => f.write_str("DARK_GREEN"),
           ChatColor::DarkAqua { .. } => f.write_str("DARK_AQUA"),
           ChatColor::DarkRed { .. } => f.write_str("DARK_RED"),
           ChatColor::DarkPurple { .. } => f.write_str("DARK_PURPLE"),
           ChatColor::Gold { .. } => f.write_str("GOLD"),
           ChatColor::Gray { .. } => f.write_str("GRAY"),
           ChatColor::DarkGray { .. } => f.write_str("DARK_GRAY"),
           ChatColor::Blue { .. } => f.write_str("BLUE"),
           ChatColor::Green { .. } => f.write_str("GREEN"),
           ChatColor::Aqua { .. } => f.write_str("AQUA"),
           ChatColor::Red { .. } => f.write_str("RED"),
           ChatColor::LightPurple { .. } => f.write_str("LIGHT_PURPLE"),
           ChatColor::Yellow { .. } => f.write_str("YELLOW"),
           ChatColor::White { .. } => f.write_str("WHITE"),
           ChatColor::Magic { .. } => f.write_str("MAGIC"),
           ChatColor::Bold { .. } => f.write_str("BOLD"),
           ChatColor::Strikethrough { .. } => f.write_str("STRIKETHROUGH"),
           ChatColor::Underline { .. } => f.write_str("UNDERLINE"),
           ChatColor::Italic { .. } => f.write_str("ITALIC"),
           ChatColor::Reset { .. } => f.write_str("RESET"),
       }
   }
}

        impl<'mc> ChatColorTrait<'mc> for ChatColor<'mc> {}
        
        pub trait ChatColorTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<ChatColor<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/ChatColor");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/ChatColor;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"BLACK" => Ok(ChatColor::Black { inner: ChatColorStruct::from_raw(env,obj)?}),
"DARK_BLUE" => Ok(ChatColor::DarkBlue { inner: ChatColorStruct::from_raw(env,obj)?}),
"DARK_GREEN" => Ok(ChatColor::DarkGreen { inner: ChatColorStruct::from_raw(env,obj)?}),
"DARK_AQUA" => Ok(ChatColor::DarkAqua { inner: ChatColorStruct::from_raw(env,obj)?}),
"DARK_RED" => Ok(ChatColor::DarkRed { inner: ChatColorStruct::from_raw(env,obj)?}),
"DARK_PURPLE" => Ok(ChatColor::DarkPurple { inner: ChatColorStruct::from_raw(env,obj)?}),
"GOLD" => Ok(ChatColor::Gold { inner: ChatColorStruct::from_raw(env,obj)?}),
"GRAY" => Ok(ChatColor::Gray { inner: ChatColorStruct::from_raw(env,obj)?}),
"DARK_GRAY" => Ok(ChatColor::DarkGray { inner: ChatColorStruct::from_raw(env,obj)?}),
"BLUE" => Ok(ChatColor::Blue { inner: ChatColorStruct::from_raw(env,obj)?}),
"GREEN" => Ok(ChatColor::Green { inner: ChatColorStruct::from_raw(env,obj)?}),
"AQUA" => Ok(ChatColor::Aqua { inner: ChatColorStruct::from_raw(env,obj)?}),
"RED" => Ok(ChatColor::Red { inner: ChatColorStruct::from_raw(env,obj)?}),
"LIGHT_PURPLE" => Ok(ChatColor::LightPurple { inner: ChatColorStruct::from_raw(env,obj)?}),
"YELLOW" => Ok(ChatColor::Yellow { inner: ChatColorStruct::from_raw(env,obj)?}),
"WHITE" => Ok(ChatColor::White { inner: ChatColorStruct::from_raw(env,obj)?}),
"MAGIC" => Ok(ChatColor::Magic { inner: ChatColorStruct::from_raw(env,obj)?}),
"BOLD" => Ok(ChatColor::Bold { inner: ChatColorStruct::from_raw(env,obj)?}),
"STRIKETHROUGH" => Ok(ChatColor::Strikethrough { inner: ChatColorStruct::from_raw(env,obj)?}),
"UNDERLINE" => Ok(ChatColor::Underline { inner: ChatColorStruct::from_raw(env,obj)?}),
"ITALIC" => Ok(ChatColor::Italic { inner: ChatColorStruct::from_raw(env,obj)?}),
"RESET" => Ok(ChatColor::Reset { inner: ChatColorStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct ChatColorStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for ChatColor<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Black { inner } => inner.0.clone(),
Self::DarkBlue { inner } => inner.0.clone(),
Self::DarkGreen { inner } => inner.0.clone(),
Self::DarkAqua { inner } => inner.0.clone(),
Self::DarkRed { inner } => inner.0.clone(),
Self::DarkPurple { inner } => inner.0.clone(),
Self::Gold { inner } => inner.0.clone(),
Self::Gray { inner } => inner.0.clone(),
Self::DarkGray { inner } => inner.0.clone(),
Self::Blue { inner } => inner.0.clone(),
Self::Green { inner } => inner.0.clone(),
Self::Aqua { inner } => inner.0.clone(),
Self::Red { inner } => inner.0.clone(),
Self::LightPurple { inner } => inner.0.clone(),
Self::Yellow { inner } => inner.0.clone(),
Self::White { inner } => inner.0.clone(),
Self::Magic { inner } => inner.0.clone(),
Self::Bold { inner } => inner.0.clone(),
Self::Strikethrough { inner } => inner.0.clone(),
Self::Underline { inner } => inner.0.clone(),
Self::Italic { inner } => inner.0.clone(),
Self::Reset { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Black { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkBlue { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkGreen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkAqua { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkRed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkPurple { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Gold { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Gray { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkGray { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Blue { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Green { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Aqua { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Red { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LightPurple { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Yellow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::White { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Magic { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bold { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Strikethrough { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Underline { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Italic { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Reset { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for ChatColor<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate ChatColor from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/ChatColor")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a ChatColor object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "BLACK" => Ok(ChatColor::Black { inner: ChatColorStruct::from_raw(env,obj)?}),"DARK_BLUE" => Ok(ChatColor::DarkBlue { inner: ChatColorStruct::from_raw(env,obj)?}),"DARK_GREEN" => Ok(ChatColor::DarkGreen { inner: ChatColorStruct::from_raw(env,obj)?}),"DARK_AQUA" => Ok(ChatColor::DarkAqua { inner: ChatColorStruct::from_raw(env,obj)?}),"DARK_RED" => Ok(ChatColor::DarkRed { inner: ChatColorStruct::from_raw(env,obj)?}),"DARK_PURPLE" => Ok(ChatColor::DarkPurple { inner: ChatColorStruct::from_raw(env,obj)?}),"GOLD" => Ok(ChatColor::Gold { inner: ChatColorStruct::from_raw(env,obj)?}),"GRAY" => Ok(ChatColor::Gray { inner: ChatColorStruct::from_raw(env,obj)?}),"DARK_GRAY" => Ok(ChatColor::DarkGray { inner: ChatColorStruct::from_raw(env,obj)?}),"BLUE" => Ok(ChatColor::Blue { inner: ChatColorStruct::from_raw(env,obj)?}),"GREEN" => Ok(ChatColor::Green { inner: ChatColorStruct::from_raw(env,obj)?}),"AQUA" => Ok(ChatColor::Aqua { inner: ChatColorStruct::from_raw(env,obj)?}),"RED" => Ok(ChatColor::Red { inner: ChatColorStruct::from_raw(env,obj)?}),"LIGHT_PURPLE" => Ok(ChatColor::LightPurple { inner: ChatColorStruct::from_raw(env,obj)?}),"YELLOW" => Ok(ChatColor::Yellow { inner: ChatColorStruct::from_raw(env,obj)?}),"WHITE" => Ok(ChatColor::White { inner: ChatColorStruct::from_raw(env,obj)?}),"MAGIC" => Ok(ChatColor::Magic { inner: ChatColorStruct::from_raw(env,obj)?}),"BOLD" => Ok(ChatColor::Bold { inner: ChatColorStruct::from_raw(env,obj)?}),"STRIKETHROUGH" => Ok(ChatColor::Strikethrough { inner: ChatColorStruct::from_raw(env,obj)?}),"UNDERLINE" => Ok(ChatColor::Underline { inner: ChatColorStruct::from_raw(env,obj)?}),"ITALIC" => Ok(ChatColor::Italic { inner: ChatColorStruct::from_raw(env,obj)?}),"RESET" => Ok(ChatColor::Reset { inner: ChatColorStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for ChatColorStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for ChatColorStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate ChatColorStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/ChatColor")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a ChatColorStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> ChatColorStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::ChatColor<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/ChatColor;");
let cls = jni.find_class("org/bukkit/ChatColor"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::ChatColor::from_raw(&jni,obj
)}
/// Gets the char value associated with this color
	fn char(&self) 
-> Result<u16, Box<dyn std::error::Error>>

{let sig = String::from("()C");
let res = self.jni_ref().call_method(&self.jni_object(),"getChar",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.c()?
)}

#[doc(hidden)]
	fn internal_to_string(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"toString",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Checks if this code is a format code as opposed to a color code.
	fn is_format(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isFormat",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if this code is a color code as opposed to a format code.
	fn is_color(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isColor",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the color represented by the specified color code
	fn get_by_char(jni: &blackboxmc_general::SharedJNIEnv<'mc>,code: impl Into<String>) 
-> Result<Option<crate::ChatColor<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(code.into())?));
args.push(val_1);
sig += ")Lorg/bukkit/ChatColor;";
let cls = jni.find_class("org/bukkit/ChatColor"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByChar",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::ChatColor::from_raw(&jni,obj
)?
)
)}
/// Strips the given message of all color codes
	fn strip_color(jni: &blackboxmc_general::SharedJNIEnv<'mc>,input: impl Into<String>) 
-> Result<Option<String>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Ljava/lang/String;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(input.into())?));
let cls = jni.find_class("org/bukkit/ChatColor"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"stripColor",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)
)}
/// Translates a string using an alternate color code character into a
/// string that uses the internal ChatColor.COLOR_CODE color code
/// character. The alternate color code character will only be replaced if
/// it is immediately followed by 0-9, A-F, a-f, K-O, k-o, R or r.
	fn translate_alternate_color_codes(jni: &blackboxmc_general::SharedJNIEnv<'mc>,alt_color_char: u16,text_to_translate: impl Into<String>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("(CLjava/lang/String;)Ljava/lang/String;");
let val_1 = jni::objects::JValueGen::Char(alt_color_char);
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(text_to_translate.into())?));
let cls = jni.find_class("org/bukkit/ChatColor"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"translateAlternateColorCodes",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the ChatColors used at the end of the given input string.
	fn get_last_colors(jni: &blackboxmc_general::SharedJNIEnv<'mc>,input: impl Into<String>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Ljava/lang/String;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(input.into())?));
let cls = jni.find_class("org/bukkit/ChatColor"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getLastColors",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum HeightMap<'mc> {
	MotionBlocking {inner: HeightMapStruct<'mc>},
	MotionBlockingNoLeaves {inner: HeightMapStruct<'mc>},
	OceanFloor {inner: HeightMapStruct<'mc>},
	OceanFloorWg {inner: HeightMapStruct<'mc>},
	WorldSurface {inner: HeightMapStruct<'mc>},
	WorldSurfaceWg {inner: HeightMapStruct<'mc>},
}
impl<'mc> std::fmt::Display for HeightMap<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           HeightMap::MotionBlocking { .. } => f.write_str("MOTION_BLOCKING"),
           HeightMap::MotionBlockingNoLeaves { .. } => f.write_str("MOTION_BLOCKING_NO_LEAVES"),
           HeightMap::OceanFloor { .. } => f.write_str("OCEAN_FLOOR"),
           HeightMap::OceanFloorWg { .. } => f.write_str("OCEAN_FLOOR_WG"),
           HeightMap::WorldSurface { .. } => f.write_str("WORLD_SURFACE"),
           HeightMap::WorldSurfaceWg { .. } => f.write_str("WORLD_SURFACE_WG"),
       }
   }
}

        impl<'mc> HeightMapTrait<'mc> for HeightMap<'mc> {}
        
        pub trait HeightMapTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<HeightMap<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/HeightMap");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/HeightMap;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"MOTION_BLOCKING" => Ok(HeightMap::MotionBlocking { inner: HeightMapStruct::from_raw(env,obj)?}),
"MOTION_BLOCKING_NO_LEAVES" => Ok(HeightMap::MotionBlockingNoLeaves { inner: HeightMapStruct::from_raw(env,obj)?}),
"OCEAN_FLOOR" => Ok(HeightMap::OceanFloor { inner: HeightMapStruct::from_raw(env,obj)?}),
"OCEAN_FLOOR_WG" => Ok(HeightMap::OceanFloorWg { inner: HeightMapStruct::from_raw(env,obj)?}),
"WORLD_SURFACE" => Ok(HeightMap::WorldSurface { inner: HeightMapStruct::from_raw(env,obj)?}),
"WORLD_SURFACE_WG" => Ok(HeightMap::WorldSurfaceWg { inner: HeightMapStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct HeightMapStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for HeightMap<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::MotionBlocking { inner } => inner.0.clone(),
Self::MotionBlockingNoLeaves { inner } => inner.0.clone(),
Self::OceanFloor { inner } => inner.0.clone(),
Self::OceanFloorWg { inner } => inner.0.clone(),
Self::WorldSurface { inner } => inner.0.clone(),
Self::WorldSurfaceWg { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::MotionBlocking { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MotionBlockingNoLeaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OceanFloor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OceanFloorWg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WorldSurface { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WorldSurfaceWg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for HeightMap<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate HeightMap from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/HeightMap")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a HeightMap object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "MOTION_BLOCKING" => Ok(HeightMap::MotionBlocking { inner: HeightMapStruct::from_raw(env,obj)?}),"MOTION_BLOCKING_NO_LEAVES" => Ok(HeightMap::MotionBlockingNoLeaves { inner: HeightMapStruct::from_raw(env,obj)?}),"OCEAN_FLOOR" => Ok(HeightMap::OceanFloor { inner: HeightMapStruct::from_raw(env,obj)?}),"OCEAN_FLOOR_WG" => Ok(HeightMap::OceanFloorWg { inner: HeightMapStruct::from_raw(env,obj)?}),"WORLD_SURFACE" => Ok(HeightMap::WorldSurface { inner: HeightMapStruct::from_raw(env,obj)?}),"WORLD_SURFACE_WG" => Ok(HeightMap::WorldSurfaceWg { inner: HeightMapStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for HeightMapStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for HeightMapStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate HeightMapStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/HeightMap")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a HeightMapStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> HeightMapStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::HeightMap<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/HeightMap;");
let cls = jni.find_class("org/bukkit/HeightMap"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::HeightMap::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Registry<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Registry<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Registry<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Registry from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Registry")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Registry object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> RegistryTrait<'mc> for Registry<'mc> {}
pub trait RegistryTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Get the object by its key.
	fn get(&self,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<jni::objects::JObject<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)LT;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"get",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
res.l()?
)
)}
/// Attempts to match the registered object with the given key.
/// 
/// This will attempt to find a reasonable match based on the provided input
/// and may do so through unspecified means.
	fn get_match(&self,input: impl Into<String>) 
-> Result<Option<jni::objects::JObject<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)LT;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(input.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"match",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
res.l()?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum Sound<'mc> {
	AmbientBasaltDeltasAdditions {inner: SoundStruct<'mc>},
	AmbientBasaltDeltasLoop {inner: SoundStruct<'mc>},
	AmbientBasaltDeltasMood {inner: SoundStruct<'mc>},
	AmbientCave {inner: SoundStruct<'mc>},
	AmbientCrimsonForestAdditions {inner: SoundStruct<'mc>},
	AmbientCrimsonForestLoop {inner: SoundStruct<'mc>},
	AmbientCrimsonForestMood {inner: SoundStruct<'mc>},
	AmbientNetherWastesAdditions {inner: SoundStruct<'mc>},
	AmbientNetherWastesLoop {inner: SoundStruct<'mc>},
	AmbientNetherWastesMood {inner: SoundStruct<'mc>},
	AmbientSoulSandValleyAdditions {inner: SoundStruct<'mc>},
	AmbientSoulSandValleyLoop {inner: SoundStruct<'mc>},
	AmbientSoulSandValleyMood {inner: SoundStruct<'mc>},
	AmbientUnderwaterEnter {inner: SoundStruct<'mc>},
	AmbientUnderwaterExit {inner: SoundStruct<'mc>},
	AmbientUnderwaterLoop {inner: SoundStruct<'mc>},
	AmbientUnderwaterLoopAdditions {inner: SoundStruct<'mc>},
	AmbientUnderwaterLoopAdditionsRare {inner: SoundStruct<'mc>},
	AmbientUnderwaterLoopAdditionsUltraRare {inner: SoundStruct<'mc>},
	AmbientWarpedForestAdditions {inner: SoundStruct<'mc>},
	AmbientWarpedForestLoop {inner: SoundStruct<'mc>},
	AmbientWarpedForestMood {inner: SoundStruct<'mc>},
	BlockAmethystBlockBreak {inner: SoundStruct<'mc>},
	BlockAmethystBlockChime {inner: SoundStruct<'mc>},
	BlockAmethystBlockFall {inner: SoundStruct<'mc>},
	BlockAmethystBlockHit {inner: SoundStruct<'mc>},
	BlockAmethystBlockPlace {inner: SoundStruct<'mc>},
	BlockAmethystBlockResonate {inner: SoundStruct<'mc>},
	BlockAmethystBlockStep {inner: SoundStruct<'mc>},
	BlockAmethystClusterBreak {inner: SoundStruct<'mc>},
	BlockAmethystClusterFall {inner: SoundStruct<'mc>},
	BlockAmethystClusterHit {inner: SoundStruct<'mc>},
	BlockAmethystClusterPlace {inner: SoundStruct<'mc>},
	BlockAmethystClusterStep {inner: SoundStruct<'mc>},
	BlockAncientDebrisBreak {inner: SoundStruct<'mc>},
	BlockAncientDebrisFall {inner: SoundStruct<'mc>},
	BlockAncientDebrisHit {inner: SoundStruct<'mc>},
	BlockAncientDebrisPlace {inner: SoundStruct<'mc>},
	BlockAncientDebrisStep {inner: SoundStruct<'mc>},
	BlockAnvilBreak {inner: SoundStruct<'mc>},
	BlockAnvilDestroy {inner: SoundStruct<'mc>},
	BlockAnvilFall {inner: SoundStruct<'mc>},
	BlockAnvilHit {inner: SoundStruct<'mc>},
	BlockAnvilLand {inner: SoundStruct<'mc>},
	BlockAnvilPlace {inner: SoundStruct<'mc>},
	BlockAnvilStep {inner: SoundStruct<'mc>},
	BlockAnvilUse {inner: SoundStruct<'mc>},
	BlockAzaleaBreak {inner: SoundStruct<'mc>},
	BlockAzaleaFall {inner: SoundStruct<'mc>},
	BlockAzaleaHit {inner: SoundStruct<'mc>},
	BlockAzaleaLeavesBreak {inner: SoundStruct<'mc>},
	BlockAzaleaLeavesFall {inner: SoundStruct<'mc>},
	BlockAzaleaLeavesHit {inner: SoundStruct<'mc>},
	BlockAzaleaLeavesPlace {inner: SoundStruct<'mc>},
	BlockAzaleaLeavesStep {inner: SoundStruct<'mc>},
	BlockAzaleaPlace {inner: SoundStruct<'mc>},
	BlockAzaleaStep {inner: SoundStruct<'mc>},
	BlockBambooBreak {inner: SoundStruct<'mc>},
	BlockBambooFall {inner: SoundStruct<'mc>},
	BlockBambooHit {inner: SoundStruct<'mc>},
	BlockBambooPlace {inner: SoundStruct<'mc>},
	BlockBambooSaplingBreak {inner: SoundStruct<'mc>},
	BlockBambooSaplingHit {inner: SoundStruct<'mc>},
	BlockBambooSaplingPlace {inner: SoundStruct<'mc>},
	BlockBambooStep {inner: SoundStruct<'mc>},
	BlockBambooWoodBreak {inner: SoundStruct<'mc>},
	BlockBambooWoodButtonClickOff {inner: SoundStruct<'mc>},
	BlockBambooWoodButtonClickOn {inner: SoundStruct<'mc>},
	BlockBambooWoodDoorClose {inner: SoundStruct<'mc>},
	BlockBambooWoodDoorOpen {inner: SoundStruct<'mc>},
	BlockBambooWoodFall {inner: SoundStruct<'mc>},
	BlockBambooWoodFenceGateClose {inner: SoundStruct<'mc>},
	BlockBambooWoodFenceGateOpen {inner: SoundStruct<'mc>},
	BlockBambooWoodHangingSignBreak {inner: SoundStruct<'mc>},
	BlockBambooWoodHangingSignFall {inner: SoundStruct<'mc>},
	BlockBambooWoodHangingSignHit {inner: SoundStruct<'mc>},
	BlockBambooWoodHangingSignPlace {inner: SoundStruct<'mc>},
	BlockBambooWoodHangingSignStep {inner: SoundStruct<'mc>},
	BlockBambooWoodHit {inner: SoundStruct<'mc>},
	BlockBambooWoodPlace {inner: SoundStruct<'mc>},
	BlockBambooWoodPressurePlateClickOff {inner: SoundStruct<'mc>},
	BlockBambooWoodPressurePlateClickOn {inner: SoundStruct<'mc>},
	BlockBambooWoodStep {inner: SoundStruct<'mc>},
	BlockBambooWoodTrapdoorClose {inner: SoundStruct<'mc>},
	BlockBambooWoodTrapdoorOpen {inner: SoundStruct<'mc>},
	BlockBarrelClose {inner: SoundStruct<'mc>},
	BlockBarrelOpen {inner: SoundStruct<'mc>},
	BlockBasaltBreak {inner: SoundStruct<'mc>},
	BlockBasaltFall {inner: SoundStruct<'mc>},
	BlockBasaltHit {inner: SoundStruct<'mc>},
	BlockBasaltPlace {inner: SoundStruct<'mc>},
	BlockBasaltStep {inner: SoundStruct<'mc>},
	BlockBeaconActivate {inner: SoundStruct<'mc>},
	BlockBeaconAmbient {inner: SoundStruct<'mc>},
	BlockBeaconDeactivate {inner: SoundStruct<'mc>},
	BlockBeaconPowerSelect {inner: SoundStruct<'mc>},
	BlockBeehiveDrip {inner: SoundStruct<'mc>},
	BlockBeehiveEnter {inner: SoundStruct<'mc>},
	BlockBeehiveExit {inner: SoundStruct<'mc>},
	BlockBeehiveShear {inner: SoundStruct<'mc>},
	BlockBeehiveWork {inner: SoundStruct<'mc>},
	BlockBellResonate {inner: SoundStruct<'mc>},
	BlockBellUse {inner: SoundStruct<'mc>},
	BlockBigDripleafBreak {inner: SoundStruct<'mc>},
	BlockBigDripleafFall {inner: SoundStruct<'mc>},
	BlockBigDripleafHit {inner: SoundStruct<'mc>},
	BlockBigDripleafPlace {inner: SoundStruct<'mc>},
	BlockBigDripleafStep {inner: SoundStruct<'mc>},
	BlockBigDripleafTiltDown {inner: SoundStruct<'mc>},
	BlockBigDripleafTiltUp {inner: SoundStruct<'mc>},
	BlockBlastfurnaceFireCrackle {inner: SoundStruct<'mc>},
	BlockBoneBlockBreak {inner: SoundStruct<'mc>},
	BlockBoneBlockFall {inner: SoundStruct<'mc>},
	BlockBoneBlockHit {inner: SoundStruct<'mc>},
	BlockBoneBlockPlace {inner: SoundStruct<'mc>},
	BlockBoneBlockStep {inner: SoundStruct<'mc>},
	BlockBrewingStandBrew {inner: SoundStruct<'mc>},
	BlockBubbleColumnBubblePop {inner: SoundStruct<'mc>},
	BlockBubbleColumnUpwardsAmbient {inner: SoundStruct<'mc>},
	BlockBubbleColumnUpwardsInside {inner: SoundStruct<'mc>},
	BlockBubbleColumnWhirlpoolAmbient {inner: SoundStruct<'mc>},
	BlockBubbleColumnWhirlpoolInside {inner: SoundStruct<'mc>},
	BlockCakeAddCandle {inner: SoundStruct<'mc>},
	BlockCalciteBreak {inner: SoundStruct<'mc>},
	BlockCalciteFall {inner: SoundStruct<'mc>},
	BlockCalciteHit {inner: SoundStruct<'mc>},
	BlockCalcitePlace {inner: SoundStruct<'mc>},
	BlockCalciteStep {inner: SoundStruct<'mc>},
	BlockCampfireCrackle {inner: SoundStruct<'mc>},
	BlockCandleAmbient {inner: SoundStruct<'mc>},
	BlockCandleBreak {inner: SoundStruct<'mc>},
	BlockCandleExtinguish {inner: SoundStruct<'mc>},
	BlockCandleFall {inner: SoundStruct<'mc>},
	BlockCandleHit {inner: SoundStruct<'mc>},
	BlockCandlePlace {inner: SoundStruct<'mc>},
	BlockCandleStep {inner: SoundStruct<'mc>},
	BlockCaveVinesBreak {inner: SoundStruct<'mc>},
	BlockCaveVinesFall {inner: SoundStruct<'mc>},
	BlockCaveVinesHit {inner: SoundStruct<'mc>},
	BlockCaveVinesPickBerries {inner: SoundStruct<'mc>},
	BlockCaveVinesPlace {inner: SoundStruct<'mc>},
	BlockCaveVinesStep {inner: SoundStruct<'mc>},
	BlockChainBreak {inner: SoundStruct<'mc>},
	BlockChainFall {inner: SoundStruct<'mc>},
	BlockChainHit {inner: SoundStruct<'mc>},
	BlockChainPlace {inner: SoundStruct<'mc>},
	BlockChainStep {inner: SoundStruct<'mc>},
	BlockCherryLeavesBreak {inner: SoundStruct<'mc>},
	BlockCherryLeavesFall {inner: SoundStruct<'mc>},
	BlockCherryLeavesHit {inner: SoundStruct<'mc>},
	BlockCherryLeavesPlace {inner: SoundStruct<'mc>},
	BlockCherryLeavesStep {inner: SoundStruct<'mc>},
	BlockCherrySaplingBreak {inner: SoundStruct<'mc>},
	BlockCherrySaplingFall {inner: SoundStruct<'mc>},
	BlockCherrySaplingHit {inner: SoundStruct<'mc>},
	BlockCherrySaplingPlace {inner: SoundStruct<'mc>},
	BlockCherrySaplingStep {inner: SoundStruct<'mc>},
	BlockCherryWoodBreak {inner: SoundStruct<'mc>},
	BlockCherryWoodButtonClickOff {inner: SoundStruct<'mc>},
	BlockCherryWoodButtonClickOn {inner: SoundStruct<'mc>},
	BlockCherryWoodDoorClose {inner: SoundStruct<'mc>},
	BlockCherryWoodDoorOpen {inner: SoundStruct<'mc>},
	BlockCherryWoodFall {inner: SoundStruct<'mc>},
	BlockCherryWoodFenceGateClose {inner: SoundStruct<'mc>},
	BlockCherryWoodFenceGateOpen {inner: SoundStruct<'mc>},
	BlockCherryWoodHangingSignBreak {inner: SoundStruct<'mc>},
	BlockCherryWoodHangingSignFall {inner: SoundStruct<'mc>},
	BlockCherryWoodHangingSignHit {inner: SoundStruct<'mc>},
	BlockCherryWoodHangingSignPlace {inner: SoundStruct<'mc>},
	BlockCherryWoodHangingSignStep {inner: SoundStruct<'mc>},
	BlockCherryWoodHit {inner: SoundStruct<'mc>},
	BlockCherryWoodPlace {inner: SoundStruct<'mc>},
	BlockCherryWoodPressurePlateClickOff {inner: SoundStruct<'mc>},
	BlockCherryWoodPressurePlateClickOn {inner: SoundStruct<'mc>},
	BlockCherryWoodStep {inner: SoundStruct<'mc>},
	BlockCherryWoodTrapdoorClose {inner: SoundStruct<'mc>},
	BlockCherryWoodTrapdoorOpen {inner: SoundStruct<'mc>},
	BlockChestClose {inner: SoundStruct<'mc>},
	BlockChestLocked {inner: SoundStruct<'mc>},
	BlockChestOpen {inner: SoundStruct<'mc>},
	BlockChiseledBookshelfBreak {inner: SoundStruct<'mc>},
	BlockChiseledBookshelfFall {inner: SoundStruct<'mc>},
	BlockChiseledBookshelfHit {inner: SoundStruct<'mc>},
	BlockChiseledBookshelfInsert {inner: SoundStruct<'mc>},
	BlockChiseledBookshelfInsertEnchanted {inner: SoundStruct<'mc>},
	BlockChiseledBookshelfPickup {inner: SoundStruct<'mc>},
	BlockChiseledBookshelfPickupEnchanted {inner: SoundStruct<'mc>},
	BlockChiseledBookshelfPlace {inner: SoundStruct<'mc>},
	BlockChiseledBookshelfStep {inner: SoundStruct<'mc>},
	BlockChorusFlowerDeath {inner: SoundStruct<'mc>},
	BlockChorusFlowerGrow {inner: SoundStruct<'mc>},
	BlockComparatorClick {inner: SoundStruct<'mc>},
	BlockComposterEmpty {inner: SoundStruct<'mc>},
	BlockComposterFill {inner: SoundStruct<'mc>},
	BlockComposterFillSuccess {inner: SoundStruct<'mc>},
	BlockComposterReady {inner: SoundStruct<'mc>},
	BlockConduitActivate {inner: SoundStruct<'mc>},
	BlockConduitAmbient {inner: SoundStruct<'mc>},
	BlockConduitAmbientShort {inner: SoundStruct<'mc>},
	BlockConduitAttackTarget {inner: SoundStruct<'mc>},
	BlockConduitDeactivate {inner: SoundStruct<'mc>},
	BlockCopperBreak {inner: SoundStruct<'mc>},
	BlockCopperBulbBreak {inner: SoundStruct<'mc>},
	BlockCopperBulbFall {inner: SoundStruct<'mc>},
	BlockCopperBulbHit {inner: SoundStruct<'mc>},
	BlockCopperBulbPlace {inner: SoundStruct<'mc>},
	BlockCopperBulbStep {inner: SoundStruct<'mc>},
	BlockCopperBulbTurnOff {inner: SoundStruct<'mc>},
	BlockCopperBulbTurnOn {inner: SoundStruct<'mc>},
	BlockCopperDoorClose {inner: SoundStruct<'mc>},
	BlockCopperDoorOpen {inner: SoundStruct<'mc>},
	BlockCopperFall {inner: SoundStruct<'mc>},
	BlockCopperGrateBreak {inner: SoundStruct<'mc>},
	BlockCopperGrateFall {inner: SoundStruct<'mc>},
	BlockCopperGrateHit {inner: SoundStruct<'mc>},
	BlockCopperGratePlace {inner: SoundStruct<'mc>},
	BlockCopperGrateStep {inner: SoundStruct<'mc>},
	BlockCopperHit {inner: SoundStruct<'mc>},
	BlockCopperPlace {inner: SoundStruct<'mc>},
	BlockCopperStep {inner: SoundStruct<'mc>},
	BlockCopperTrapdoorClose {inner: SoundStruct<'mc>},
	BlockCopperTrapdoorOpen {inner: SoundStruct<'mc>},
	BlockCoralBlockBreak {inner: SoundStruct<'mc>},
	BlockCoralBlockFall {inner: SoundStruct<'mc>},
	BlockCoralBlockHit {inner: SoundStruct<'mc>},
	BlockCoralBlockPlace {inner: SoundStruct<'mc>},
	BlockCoralBlockStep {inner: SoundStruct<'mc>},
	BlockCrafterCraft {inner: SoundStruct<'mc>},
	BlockCrafterFail {inner: SoundStruct<'mc>},
	BlockCropBreak {inner: SoundStruct<'mc>},
	BlockDecoratedPotBreak {inner: SoundStruct<'mc>},
	BlockDecoratedPotFall {inner: SoundStruct<'mc>},
	BlockDecoratedPotHit {inner: SoundStruct<'mc>},
	BlockDecoratedPotInsert {inner: SoundStruct<'mc>},
	BlockDecoratedPotInsertFail {inner: SoundStruct<'mc>},
	BlockDecoratedPotPlace {inner: SoundStruct<'mc>},
	BlockDecoratedPotShatter {inner: SoundStruct<'mc>},
	BlockDecoratedPotStep {inner: SoundStruct<'mc>},
	BlockDeepslateBreak {inner: SoundStruct<'mc>},
	BlockDeepslateBricksBreak {inner: SoundStruct<'mc>},
	BlockDeepslateBricksFall {inner: SoundStruct<'mc>},
	BlockDeepslateBricksHit {inner: SoundStruct<'mc>},
	BlockDeepslateBricksPlace {inner: SoundStruct<'mc>},
	BlockDeepslateBricksStep {inner: SoundStruct<'mc>},
	BlockDeepslateFall {inner: SoundStruct<'mc>},
	BlockDeepslateHit {inner: SoundStruct<'mc>},
	BlockDeepslatePlace {inner: SoundStruct<'mc>},
	BlockDeepslateStep {inner: SoundStruct<'mc>},
	BlockDeepslateTilesBreak {inner: SoundStruct<'mc>},
	BlockDeepslateTilesFall {inner: SoundStruct<'mc>},
	BlockDeepslateTilesHit {inner: SoundStruct<'mc>},
	BlockDeepslateTilesPlace {inner: SoundStruct<'mc>},
	BlockDeepslateTilesStep {inner: SoundStruct<'mc>},
	BlockDispenserDispense {inner: SoundStruct<'mc>},
	BlockDispenserFail {inner: SoundStruct<'mc>},
	BlockDispenserLaunch {inner: SoundStruct<'mc>},
	BlockDripstoneBlockBreak {inner: SoundStruct<'mc>},
	BlockDripstoneBlockFall {inner: SoundStruct<'mc>},
	BlockDripstoneBlockHit {inner: SoundStruct<'mc>},
	BlockDripstoneBlockPlace {inner: SoundStruct<'mc>},
	BlockDripstoneBlockStep {inner: SoundStruct<'mc>},
	BlockEnchantmentTableUse {inner: SoundStruct<'mc>},
	BlockEnderChestClose {inner: SoundStruct<'mc>},
	BlockEnderChestOpen {inner: SoundStruct<'mc>},
	BlockEndGatewaySpawn {inner: SoundStruct<'mc>},
	BlockEndPortalFrameFill {inner: SoundStruct<'mc>},
	BlockEndPortalSpawn {inner: SoundStruct<'mc>},
	BlockFenceGateClose {inner: SoundStruct<'mc>},
	BlockFenceGateOpen {inner: SoundStruct<'mc>},
	BlockFireAmbient {inner: SoundStruct<'mc>},
	BlockFireExtinguish {inner: SoundStruct<'mc>},
	BlockFloweringAzaleaBreak {inner: SoundStruct<'mc>},
	BlockFloweringAzaleaFall {inner: SoundStruct<'mc>},
	BlockFloweringAzaleaHit {inner: SoundStruct<'mc>},
	BlockFloweringAzaleaPlace {inner: SoundStruct<'mc>},
	BlockFloweringAzaleaStep {inner: SoundStruct<'mc>},
	BlockFroglightBreak {inner: SoundStruct<'mc>},
	BlockFroglightFall {inner: SoundStruct<'mc>},
	BlockFroglightHit {inner: SoundStruct<'mc>},
	BlockFroglightPlace {inner: SoundStruct<'mc>},
	BlockFroglightStep {inner: SoundStruct<'mc>},
	BlockFrogspawnBreak {inner: SoundStruct<'mc>},
	BlockFrogspawnFall {inner: SoundStruct<'mc>},
	BlockFrogspawnHatch {inner: SoundStruct<'mc>},
	BlockFrogspawnHit {inner: SoundStruct<'mc>},
	BlockFrogspawnPlace {inner: SoundStruct<'mc>},
	BlockFrogspawnStep {inner: SoundStruct<'mc>},
	BlockFungusBreak {inner: SoundStruct<'mc>},
	BlockFungusFall {inner: SoundStruct<'mc>},
	BlockFungusHit {inner: SoundStruct<'mc>},
	BlockFungusPlace {inner: SoundStruct<'mc>},
	BlockFungusStep {inner: SoundStruct<'mc>},
	BlockFurnaceFireCrackle {inner: SoundStruct<'mc>},
	BlockGildedBlackstoneBreak {inner: SoundStruct<'mc>},
	BlockGildedBlackstoneFall {inner: SoundStruct<'mc>},
	BlockGildedBlackstoneHit {inner: SoundStruct<'mc>},
	BlockGildedBlackstonePlace {inner: SoundStruct<'mc>},
	BlockGildedBlackstoneStep {inner: SoundStruct<'mc>},
	BlockGlassBreak {inner: SoundStruct<'mc>},
	BlockGlassFall {inner: SoundStruct<'mc>},
	BlockGlassHit {inner: SoundStruct<'mc>},
	BlockGlassPlace {inner: SoundStruct<'mc>},
	BlockGlassStep {inner: SoundStruct<'mc>},
	BlockGrassBreak {inner: SoundStruct<'mc>},
	BlockGrassFall {inner: SoundStruct<'mc>},
	BlockGrassHit {inner: SoundStruct<'mc>},
	BlockGrassPlace {inner: SoundStruct<'mc>},
	BlockGrassStep {inner: SoundStruct<'mc>},
	BlockGravelBreak {inner: SoundStruct<'mc>},
	BlockGravelFall {inner: SoundStruct<'mc>},
	BlockGravelHit {inner: SoundStruct<'mc>},
	BlockGravelPlace {inner: SoundStruct<'mc>},
	BlockGravelStep {inner: SoundStruct<'mc>},
	BlockGrindstoneUse {inner: SoundStruct<'mc>},
	BlockGrowingPlantCrop {inner: SoundStruct<'mc>},
	BlockHangingRootsBreak {inner: SoundStruct<'mc>},
	BlockHangingRootsFall {inner: SoundStruct<'mc>},
	BlockHangingRootsHit {inner: SoundStruct<'mc>},
	BlockHangingRootsPlace {inner: SoundStruct<'mc>},
	BlockHangingRootsStep {inner: SoundStruct<'mc>},
	BlockHangingSignBreak {inner: SoundStruct<'mc>},
	BlockHangingSignFall {inner: SoundStruct<'mc>},
	BlockHangingSignHit {inner: SoundStruct<'mc>},
	BlockHangingSignPlace {inner: SoundStruct<'mc>},
	BlockHangingSignStep {inner: SoundStruct<'mc>},
	BlockHangingSignWaxedInteractFail {inner: SoundStruct<'mc>},
	BlockHoneyBlockBreak {inner: SoundStruct<'mc>},
	BlockHoneyBlockFall {inner: SoundStruct<'mc>},
	BlockHoneyBlockHit {inner: SoundStruct<'mc>},
	BlockHoneyBlockPlace {inner: SoundStruct<'mc>},
	BlockHoneyBlockSlide {inner: SoundStruct<'mc>},
	BlockHoneyBlockStep {inner: SoundStruct<'mc>},
	BlockIronDoorClose {inner: SoundStruct<'mc>},
	BlockIronDoorOpen {inner: SoundStruct<'mc>},
	BlockIronTrapdoorClose {inner: SoundStruct<'mc>},
	BlockIronTrapdoorOpen {inner: SoundStruct<'mc>},
	BlockLadderBreak {inner: SoundStruct<'mc>},
	BlockLadderFall {inner: SoundStruct<'mc>},
	BlockLadderHit {inner: SoundStruct<'mc>},
	BlockLadderPlace {inner: SoundStruct<'mc>},
	BlockLadderStep {inner: SoundStruct<'mc>},
	BlockLanternBreak {inner: SoundStruct<'mc>},
	BlockLanternFall {inner: SoundStruct<'mc>},
	BlockLanternHit {inner: SoundStruct<'mc>},
	BlockLanternPlace {inner: SoundStruct<'mc>},
	BlockLanternStep {inner: SoundStruct<'mc>},
	BlockLargeAmethystBudBreak {inner: SoundStruct<'mc>},
	BlockLargeAmethystBudPlace {inner: SoundStruct<'mc>},
	BlockLavaAmbient {inner: SoundStruct<'mc>},
	BlockLavaExtinguish {inner: SoundStruct<'mc>},
	BlockLavaPop {inner: SoundStruct<'mc>},
	BlockLeverClick {inner: SoundStruct<'mc>},
	BlockLilyPadPlace {inner: SoundStruct<'mc>},
	BlockLodestoneBreak {inner: SoundStruct<'mc>},
	BlockLodestoneFall {inner: SoundStruct<'mc>},
	BlockLodestoneHit {inner: SoundStruct<'mc>},
	BlockLodestonePlace {inner: SoundStruct<'mc>},
	BlockLodestoneStep {inner: SoundStruct<'mc>},
	BlockMangroveRootsBreak {inner: SoundStruct<'mc>},
	BlockMangroveRootsFall {inner: SoundStruct<'mc>},
	BlockMangroveRootsHit {inner: SoundStruct<'mc>},
	BlockMangroveRootsPlace {inner: SoundStruct<'mc>},
	BlockMangroveRootsStep {inner: SoundStruct<'mc>},
	BlockMediumAmethystBudBreak {inner: SoundStruct<'mc>},
	BlockMediumAmethystBudPlace {inner: SoundStruct<'mc>},
	BlockMetalBreak {inner: SoundStruct<'mc>},
	BlockMetalFall {inner: SoundStruct<'mc>},
	BlockMetalHit {inner: SoundStruct<'mc>},
	BlockMetalPlace {inner: SoundStruct<'mc>},
	BlockMetalPressurePlateClickOff {inner: SoundStruct<'mc>},
	BlockMetalPressurePlateClickOn {inner: SoundStruct<'mc>},
	BlockMetalStep {inner: SoundStruct<'mc>},
	BlockMossBreak {inner: SoundStruct<'mc>},
	BlockMossCarpetBreak {inner: SoundStruct<'mc>},
	BlockMossCarpetFall {inner: SoundStruct<'mc>},
	BlockMossCarpetHit {inner: SoundStruct<'mc>},
	BlockMossCarpetPlace {inner: SoundStruct<'mc>},
	BlockMossCarpetStep {inner: SoundStruct<'mc>},
	BlockMossFall {inner: SoundStruct<'mc>},
	BlockMossHit {inner: SoundStruct<'mc>},
	BlockMossPlace {inner: SoundStruct<'mc>},
	BlockMossStep {inner: SoundStruct<'mc>},
	BlockMuddyMangroveRootsBreak {inner: SoundStruct<'mc>},
	BlockMuddyMangroveRootsFall {inner: SoundStruct<'mc>},
	BlockMuddyMangroveRootsHit {inner: SoundStruct<'mc>},
	BlockMuddyMangroveRootsPlace {inner: SoundStruct<'mc>},
	BlockMuddyMangroveRootsStep {inner: SoundStruct<'mc>},
	BlockMudBreak {inner: SoundStruct<'mc>},
	BlockMudBricksBreak {inner: SoundStruct<'mc>},
	BlockMudBricksFall {inner: SoundStruct<'mc>},
	BlockMudBricksHit {inner: SoundStruct<'mc>},
	BlockMudBricksPlace {inner: SoundStruct<'mc>},
	BlockMudBricksStep {inner: SoundStruct<'mc>},
	BlockMudFall {inner: SoundStruct<'mc>},
	BlockMudHit {inner: SoundStruct<'mc>},
	BlockMudPlace {inner: SoundStruct<'mc>},
	BlockMudStep {inner: SoundStruct<'mc>},
	BlockNetheriteBlockBreak {inner: SoundStruct<'mc>},
	BlockNetheriteBlockFall {inner: SoundStruct<'mc>},
	BlockNetheriteBlockHit {inner: SoundStruct<'mc>},
	BlockNetheriteBlockPlace {inner: SoundStruct<'mc>},
	BlockNetheriteBlockStep {inner: SoundStruct<'mc>},
	BlockNetherrackBreak {inner: SoundStruct<'mc>},
	BlockNetherrackFall {inner: SoundStruct<'mc>},
	BlockNetherrackHit {inner: SoundStruct<'mc>},
	BlockNetherrackPlace {inner: SoundStruct<'mc>},
	BlockNetherrackStep {inner: SoundStruct<'mc>},
	BlockNetherBricksBreak {inner: SoundStruct<'mc>},
	BlockNetherBricksFall {inner: SoundStruct<'mc>},
	BlockNetherBricksHit {inner: SoundStruct<'mc>},
	BlockNetherBricksPlace {inner: SoundStruct<'mc>},
	BlockNetherBricksStep {inner: SoundStruct<'mc>},
	BlockNetherGoldOreBreak {inner: SoundStruct<'mc>},
	BlockNetherGoldOreFall {inner: SoundStruct<'mc>},
	BlockNetherGoldOreHit {inner: SoundStruct<'mc>},
	BlockNetherGoldOrePlace {inner: SoundStruct<'mc>},
	BlockNetherGoldOreStep {inner: SoundStruct<'mc>},
	BlockNetherOreBreak {inner: SoundStruct<'mc>},
	BlockNetherOreFall {inner: SoundStruct<'mc>},
	BlockNetherOreHit {inner: SoundStruct<'mc>},
	BlockNetherOrePlace {inner: SoundStruct<'mc>},
	BlockNetherOreStep {inner: SoundStruct<'mc>},
	BlockNetherSproutsBreak {inner: SoundStruct<'mc>},
	BlockNetherSproutsFall {inner: SoundStruct<'mc>},
	BlockNetherSproutsHit {inner: SoundStruct<'mc>},
	BlockNetherSproutsPlace {inner: SoundStruct<'mc>},
	BlockNetherSproutsStep {inner: SoundStruct<'mc>},
	BlockNetherWartBreak {inner: SoundStruct<'mc>},
	BlockNetherWoodBreak {inner: SoundStruct<'mc>},
	BlockNetherWoodButtonClickOff {inner: SoundStruct<'mc>},
	BlockNetherWoodButtonClickOn {inner: SoundStruct<'mc>},
	BlockNetherWoodDoorClose {inner: SoundStruct<'mc>},
	BlockNetherWoodDoorOpen {inner: SoundStruct<'mc>},
	BlockNetherWoodFall {inner: SoundStruct<'mc>},
	BlockNetherWoodFenceGateClose {inner: SoundStruct<'mc>},
	BlockNetherWoodFenceGateOpen {inner: SoundStruct<'mc>},
	BlockNetherWoodHangingSignBreak {inner: SoundStruct<'mc>},
	BlockNetherWoodHangingSignFall {inner: SoundStruct<'mc>},
	BlockNetherWoodHangingSignHit {inner: SoundStruct<'mc>},
	BlockNetherWoodHangingSignPlace {inner: SoundStruct<'mc>},
	BlockNetherWoodHangingSignStep {inner: SoundStruct<'mc>},
	BlockNetherWoodHit {inner: SoundStruct<'mc>},
	BlockNetherWoodPlace {inner: SoundStruct<'mc>},
	BlockNetherWoodPressurePlateClickOff {inner: SoundStruct<'mc>},
	BlockNetherWoodPressurePlateClickOn {inner: SoundStruct<'mc>},
	BlockNetherWoodStep {inner: SoundStruct<'mc>},
	BlockNetherWoodTrapdoorClose {inner: SoundStruct<'mc>},
	BlockNetherWoodTrapdoorOpen {inner: SoundStruct<'mc>},
	BlockNoteBlockBanjo {inner: SoundStruct<'mc>},
	BlockNoteBlockBasedrum {inner: SoundStruct<'mc>},
	BlockNoteBlockBass {inner: SoundStruct<'mc>},
	BlockNoteBlockBell {inner: SoundStruct<'mc>},
	BlockNoteBlockBit {inner: SoundStruct<'mc>},
	BlockNoteBlockChime {inner: SoundStruct<'mc>},
	BlockNoteBlockCowBell {inner: SoundStruct<'mc>},
	BlockNoteBlockDidgeridoo {inner: SoundStruct<'mc>},
	BlockNoteBlockFlute {inner: SoundStruct<'mc>},
	BlockNoteBlockGuitar {inner: SoundStruct<'mc>},
	BlockNoteBlockHarp {inner: SoundStruct<'mc>},
	BlockNoteBlockHat {inner: SoundStruct<'mc>},
	BlockNoteBlockImitateCreeper {inner: SoundStruct<'mc>},
	BlockNoteBlockImitateEnderDragon {inner: SoundStruct<'mc>},
	BlockNoteBlockImitatePiglin {inner: SoundStruct<'mc>},
	BlockNoteBlockImitateSkeleton {inner: SoundStruct<'mc>},
	BlockNoteBlockImitateWitherSkeleton {inner: SoundStruct<'mc>},
	BlockNoteBlockImitateZombie {inner: SoundStruct<'mc>},
	BlockNoteBlockIronXylophone {inner: SoundStruct<'mc>},
	BlockNoteBlockPling {inner: SoundStruct<'mc>},
	BlockNoteBlockSnare {inner: SoundStruct<'mc>},
	BlockNoteBlockXylophone {inner: SoundStruct<'mc>},
	BlockNyliumBreak {inner: SoundStruct<'mc>},
	BlockNyliumFall {inner: SoundStruct<'mc>},
	BlockNyliumHit {inner: SoundStruct<'mc>},
	BlockNyliumPlace {inner: SoundStruct<'mc>},
	BlockNyliumStep {inner: SoundStruct<'mc>},
	BlockPackedMudBreak {inner: SoundStruct<'mc>},
	BlockPackedMudFall {inner: SoundStruct<'mc>},
	BlockPackedMudHit {inner: SoundStruct<'mc>},
	BlockPackedMudPlace {inner: SoundStruct<'mc>},
	BlockPackedMudStep {inner: SoundStruct<'mc>},
	BlockPinkPetalsBreak {inner: SoundStruct<'mc>},
	BlockPinkPetalsFall {inner: SoundStruct<'mc>},
	BlockPinkPetalsHit {inner: SoundStruct<'mc>},
	BlockPinkPetalsPlace {inner: SoundStruct<'mc>},
	BlockPinkPetalsStep {inner: SoundStruct<'mc>},
	BlockPistonContract {inner: SoundStruct<'mc>},
	BlockPistonExtend {inner: SoundStruct<'mc>},
	BlockPointedDripstoneBreak {inner: SoundStruct<'mc>},
	BlockPointedDripstoneDripLava {inner: SoundStruct<'mc>},
	BlockPointedDripstoneDripLavaIntoCauldron {inner: SoundStruct<'mc>},
	BlockPointedDripstoneDripWater {inner: SoundStruct<'mc>},
	BlockPointedDripstoneDripWaterIntoCauldron {inner: SoundStruct<'mc>},
	BlockPointedDripstoneFall {inner: SoundStruct<'mc>},
	BlockPointedDripstoneHit {inner: SoundStruct<'mc>},
	BlockPointedDripstoneLand {inner: SoundStruct<'mc>},
	BlockPointedDripstonePlace {inner: SoundStruct<'mc>},
	BlockPointedDripstoneStep {inner: SoundStruct<'mc>},
	BlockPolishedDeepslateBreak {inner: SoundStruct<'mc>},
	BlockPolishedDeepslateFall {inner: SoundStruct<'mc>},
	BlockPolishedDeepslateHit {inner: SoundStruct<'mc>},
	BlockPolishedDeepslatePlace {inner: SoundStruct<'mc>},
	BlockPolishedDeepslateStep {inner: SoundStruct<'mc>},
	BlockPolishedTuffBreak {inner: SoundStruct<'mc>},
	BlockPolishedTuffFall {inner: SoundStruct<'mc>},
	BlockPolishedTuffHit {inner: SoundStruct<'mc>},
	BlockPolishedTuffPlace {inner: SoundStruct<'mc>},
	BlockPolishedTuffStep {inner: SoundStruct<'mc>},
	BlockPortalAmbient {inner: SoundStruct<'mc>},
	BlockPortalTravel {inner: SoundStruct<'mc>},
	BlockPortalTrigger {inner: SoundStruct<'mc>},
	BlockPowderSnowBreak {inner: SoundStruct<'mc>},
	BlockPowderSnowFall {inner: SoundStruct<'mc>},
	BlockPowderSnowHit {inner: SoundStruct<'mc>},
	BlockPowderSnowPlace {inner: SoundStruct<'mc>},
	BlockPowderSnowStep {inner: SoundStruct<'mc>},
	BlockPumpkinCarve {inner: SoundStruct<'mc>},
	BlockRedstoneTorchBurnout {inner: SoundStruct<'mc>},
	BlockRespawnAnchorAmbient {inner: SoundStruct<'mc>},
	BlockRespawnAnchorCharge {inner: SoundStruct<'mc>},
	BlockRespawnAnchorDeplete {inner: SoundStruct<'mc>},
	BlockRespawnAnchorSetSpawn {inner: SoundStruct<'mc>},
	BlockRootedDirtBreak {inner: SoundStruct<'mc>},
	BlockRootedDirtFall {inner: SoundStruct<'mc>},
	BlockRootedDirtHit {inner: SoundStruct<'mc>},
	BlockRootedDirtPlace {inner: SoundStruct<'mc>},
	BlockRootedDirtStep {inner: SoundStruct<'mc>},
	BlockRootsBreak {inner: SoundStruct<'mc>},
	BlockRootsFall {inner: SoundStruct<'mc>},
	BlockRootsHit {inner: SoundStruct<'mc>},
	BlockRootsPlace {inner: SoundStruct<'mc>},
	BlockRootsStep {inner: SoundStruct<'mc>},
	BlockSandBreak {inner: SoundStruct<'mc>},
	BlockSandFall {inner: SoundStruct<'mc>},
	BlockSandHit {inner: SoundStruct<'mc>},
	BlockSandPlace {inner: SoundStruct<'mc>},
	BlockSandStep {inner: SoundStruct<'mc>},
	BlockScaffoldingBreak {inner: SoundStruct<'mc>},
	BlockScaffoldingFall {inner: SoundStruct<'mc>},
	BlockScaffoldingHit {inner: SoundStruct<'mc>},
	BlockScaffoldingPlace {inner: SoundStruct<'mc>},
	BlockScaffoldingStep {inner: SoundStruct<'mc>},
	BlockSculkBreak {inner: SoundStruct<'mc>},
	BlockSculkCatalystBloom {inner: SoundStruct<'mc>},
	BlockSculkCatalystBreak {inner: SoundStruct<'mc>},
	BlockSculkCatalystFall {inner: SoundStruct<'mc>},
	BlockSculkCatalystHit {inner: SoundStruct<'mc>},
	BlockSculkCatalystPlace {inner: SoundStruct<'mc>},
	BlockSculkCatalystStep {inner: SoundStruct<'mc>},
	BlockSculkCharge {inner: SoundStruct<'mc>},
	BlockSculkFall {inner: SoundStruct<'mc>},
	BlockSculkHit {inner: SoundStruct<'mc>},
	BlockSculkPlace {inner: SoundStruct<'mc>},
	BlockSculkSensorBreak {inner: SoundStruct<'mc>},
	BlockSculkSensorClicking {inner: SoundStruct<'mc>},
	BlockSculkSensorClickingStop {inner: SoundStruct<'mc>},
	BlockSculkSensorFall {inner: SoundStruct<'mc>},
	BlockSculkSensorHit {inner: SoundStruct<'mc>},
	BlockSculkSensorPlace {inner: SoundStruct<'mc>},
	BlockSculkSensorStep {inner: SoundStruct<'mc>},
	BlockSculkShriekerBreak {inner: SoundStruct<'mc>},
	BlockSculkShriekerFall {inner: SoundStruct<'mc>},
	BlockSculkShriekerHit {inner: SoundStruct<'mc>},
	BlockSculkShriekerPlace {inner: SoundStruct<'mc>},
	BlockSculkShriekerShriek {inner: SoundStruct<'mc>},
	BlockSculkShriekerStep {inner: SoundStruct<'mc>},
	BlockSculkSpread {inner: SoundStruct<'mc>},
	BlockSculkStep {inner: SoundStruct<'mc>},
	BlockSculkVeinBreak {inner: SoundStruct<'mc>},
	BlockSculkVeinFall {inner: SoundStruct<'mc>},
	BlockSculkVeinHit {inner: SoundStruct<'mc>},
	BlockSculkVeinPlace {inner: SoundStruct<'mc>},
	BlockSculkVeinStep {inner: SoundStruct<'mc>},
	BlockShroomlightBreak {inner: SoundStruct<'mc>},
	BlockShroomlightFall {inner: SoundStruct<'mc>},
	BlockShroomlightHit {inner: SoundStruct<'mc>},
	BlockShroomlightPlace {inner: SoundStruct<'mc>},
	BlockShroomlightStep {inner: SoundStruct<'mc>},
	BlockShulkerBoxClose {inner: SoundStruct<'mc>},
	BlockShulkerBoxOpen {inner: SoundStruct<'mc>},
	BlockSignWaxedInteractFail {inner: SoundStruct<'mc>},
	BlockSlimeBlockBreak {inner: SoundStruct<'mc>},
	BlockSlimeBlockFall {inner: SoundStruct<'mc>},
	BlockSlimeBlockHit {inner: SoundStruct<'mc>},
	BlockSlimeBlockPlace {inner: SoundStruct<'mc>},
	BlockSlimeBlockStep {inner: SoundStruct<'mc>},
	BlockSmallAmethystBudBreak {inner: SoundStruct<'mc>},
	BlockSmallAmethystBudPlace {inner: SoundStruct<'mc>},
	BlockSmallDripleafBreak {inner: SoundStruct<'mc>},
	BlockSmallDripleafFall {inner: SoundStruct<'mc>},
	BlockSmallDripleafHit {inner: SoundStruct<'mc>},
	BlockSmallDripleafPlace {inner: SoundStruct<'mc>},
	BlockSmallDripleafStep {inner: SoundStruct<'mc>},
	BlockSmithingTableUse {inner: SoundStruct<'mc>},
	BlockSmokerSmoke {inner: SoundStruct<'mc>},
	BlockSnifferEggCrack {inner: SoundStruct<'mc>},
	BlockSnifferEggHatch {inner: SoundStruct<'mc>},
	BlockSnifferEggPlop {inner: SoundStruct<'mc>},
	BlockSnowBreak {inner: SoundStruct<'mc>},
	BlockSnowFall {inner: SoundStruct<'mc>},
	BlockSnowHit {inner: SoundStruct<'mc>},
	BlockSnowPlace {inner: SoundStruct<'mc>},
	BlockSnowStep {inner: SoundStruct<'mc>},
	BlockSoulSandBreak {inner: SoundStruct<'mc>},
	BlockSoulSandFall {inner: SoundStruct<'mc>},
	BlockSoulSandHit {inner: SoundStruct<'mc>},
	BlockSoulSandPlace {inner: SoundStruct<'mc>},
	BlockSoulSandStep {inner: SoundStruct<'mc>},
	BlockSoulSoilBreak {inner: SoundStruct<'mc>},
	BlockSoulSoilFall {inner: SoundStruct<'mc>},
	BlockSoulSoilHit {inner: SoundStruct<'mc>},
	BlockSoulSoilPlace {inner: SoundStruct<'mc>},
	BlockSoulSoilStep {inner: SoundStruct<'mc>},
	BlockSpongeAbsorb {inner: SoundStruct<'mc>},
	BlockSpongeBreak {inner: SoundStruct<'mc>},
	BlockSpongeFall {inner: SoundStruct<'mc>},
	BlockSpongeHit {inner: SoundStruct<'mc>},
	BlockSpongePlace {inner: SoundStruct<'mc>},
	BlockSpongeStep {inner: SoundStruct<'mc>},
	BlockSporeBlossomBreak {inner: SoundStruct<'mc>},
	BlockSporeBlossomFall {inner: SoundStruct<'mc>},
	BlockSporeBlossomHit {inner: SoundStruct<'mc>},
	BlockSporeBlossomPlace {inner: SoundStruct<'mc>},
	BlockSporeBlossomStep {inner: SoundStruct<'mc>},
	BlockStemBreak {inner: SoundStruct<'mc>},
	BlockStemFall {inner: SoundStruct<'mc>},
	BlockStemHit {inner: SoundStruct<'mc>},
	BlockStemPlace {inner: SoundStruct<'mc>},
	BlockStemStep {inner: SoundStruct<'mc>},
	BlockStoneBreak {inner: SoundStruct<'mc>},
	BlockStoneButtonClickOff {inner: SoundStruct<'mc>},
	BlockStoneButtonClickOn {inner: SoundStruct<'mc>},
	BlockStoneFall {inner: SoundStruct<'mc>},
	BlockStoneHit {inner: SoundStruct<'mc>},
	BlockStonePlace {inner: SoundStruct<'mc>},
	BlockStonePressurePlateClickOff {inner: SoundStruct<'mc>},
	BlockStonePressurePlateClickOn {inner: SoundStruct<'mc>},
	BlockStoneStep {inner: SoundStruct<'mc>},
	BlockSuspiciousGravelBreak {inner: SoundStruct<'mc>},
	BlockSuspiciousGravelFall {inner: SoundStruct<'mc>},
	BlockSuspiciousGravelHit {inner: SoundStruct<'mc>},
	BlockSuspiciousGravelPlace {inner: SoundStruct<'mc>},
	BlockSuspiciousGravelStep {inner: SoundStruct<'mc>},
	BlockSuspiciousSandBreak {inner: SoundStruct<'mc>},
	BlockSuspiciousSandFall {inner: SoundStruct<'mc>},
	BlockSuspiciousSandHit {inner: SoundStruct<'mc>},
	BlockSuspiciousSandPlace {inner: SoundStruct<'mc>},
	BlockSuspiciousSandStep {inner: SoundStruct<'mc>},
	BlockSweetBerryBushBreak {inner: SoundStruct<'mc>},
	BlockSweetBerryBushPickBerries {inner: SoundStruct<'mc>},
	BlockSweetBerryBushPlace {inner: SoundStruct<'mc>},
	BlockTrialSpawnerAmbient {inner: SoundStruct<'mc>},
	BlockTrialSpawnerBreak {inner: SoundStruct<'mc>},
	BlockTrialSpawnerCloseShutter {inner: SoundStruct<'mc>},
	BlockTrialSpawnerDetectPlayer {inner: SoundStruct<'mc>},
	BlockTrialSpawnerEjectItem {inner: SoundStruct<'mc>},
	BlockTrialSpawnerFall {inner: SoundStruct<'mc>},
	BlockTrialSpawnerHit {inner: SoundStruct<'mc>},
	BlockTrialSpawnerOpenShutter {inner: SoundStruct<'mc>},
	BlockTrialSpawnerPlace {inner: SoundStruct<'mc>},
	BlockTrialSpawnerSpawnMob {inner: SoundStruct<'mc>},
	BlockTrialSpawnerStep {inner: SoundStruct<'mc>},
	BlockTripwireAttach {inner: SoundStruct<'mc>},
	BlockTripwireClickOff {inner: SoundStruct<'mc>},
	BlockTripwireClickOn {inner: SoundStruct<'mc>},
	BlockTripwireDetach {inner: SoundStruct<'mc>},
	BlockTuffBreak {inner: SoundStruct<'mc>},
	BlockTuffBricksBreak {inner: SoundStruct<'mc>},
	BlockTuffBricksFall {inner: SoundStruct<'mc>},
	BlockTuffBricksHit {inner: SoundStruct<'mc>},
	BlockTuffBricksPlace {inner: SoundStruct<'mc>},
	BlockTuffBricksStep {inner: SoundStruct<'mc>},
	BlockTuffFall {inner: SoundStruct<'mc>},
	BlockTuffHit {inner: SoundStruct<'mc>},
	BlockTuffPlace {inner: SoundStruct<'mc>},
	BlockTuffStep {inner: SoundStruct<'mc>},
	BlockVineBreak {inner: SoundStruct<'mc>},
	BlockVineFall {inner: SoundStruct<'mc>},
	BlockVineHit {inner: SoundStruct<'mc>},
	BlockVinePlace {inner: SoundStruct<'mc>},
	BlockVineStep {inner: SoundStruct<'mc>},
	BlockWartBlockBreak {inner: SoundStruct<'mc>},
	BlockWartBlockFall {inner: SoundStruct<'mc>},
	BlockWartBlockHit {inner: SoundStruct<'mc>},
	BlockWartBlockPlace {inner: SoundStruct<'mc>},
	BlockWartBlockStep {inner: SoundStruct<'mc>},
	BlockWaterAmbient {inner: SoundStruct<'mc>},
	BlockWeepingVinesBreak {inner: SoundStruct<'mc>},
	BlockWeepingVinesFall {inner: SoundStruct<'mc>},
	BlockWeepingVinesHit {inner: SoundStruct<'mc>},
	BlockWeepingVinesPlace {inner: SoundStruct<'mc>},
	BlockWeepingVinesStep {inner: SoundStruct<'mc>},
	BlockWetGrassBreak {inner: SoundStruct<'mc>},
	BlockWetGrassFall {inner: SoundStruct<'mc>},
	BlockWetGrassHit {inner: SoundStruct<'mc>},
	BlockWetGrassPlace {inner: SoundStruct<'mc>},
	BlockWetGrassStep {inner: SoundStruct<'mc>},
	BlockWetSpongeBreak {inner: SoundStruct<'mc>},
	BlockWetSpongeFall {inner: SoundStruct<'mc>},
	BlockWetSpongeHit {inner: SoundStruct<'mc>},
	BlockWetSpongePlace {inner: SoundStruct<'mc>},
	BlockWetSpongeStep {inner: SoundStruct<'mc>},
	BlockWoodenButtonClickOff {inner: SoundStruct<'mc>},
	BlockWoodenButtonClickOn {inner: SoundStruct<'mc>},
	BlockWoodenDoorClose {inner: SoundStruct<'mc>},
	BlockWoodenDoorOpen {inner: SoundStruct<'mc>},
	BlockWoodenPressurePlateClickOff {inner: SoundStruct<'mc>},
	BlockWoodenPressurePlateClickOn {inner: SoundStruct<'mc>},
	BlockWoodenTrapdoorClose {inner: SoundStruct<'mc>},
	BlockWoodenTrapdoorOpen {inner: SoundStruct<'mc>},
	BlockWoodBreak {inner: SoundStruct<'mc>},
	BlockWoodFall {inner: SoundStruct<'mc>},
	BlockWoodHit {inner: SoundStruct<'mc>},
	BlockWoodPlace {inner: SoundStruct<'mc>},
	BlockWoodStep {inner: SoundStruct<'mc>},
	BlockWoolBreak {inner: SoundStruct<'mc>},
	BlockWoolFall {inner: SoundStruct<'mc>},
	BlockWoolHit {inner: SoundStruct<'mc>},
	BlockWoolPlace {inner: SoundStruct<'mc>},
	BlockWoolStep {inner: SoundStruct<'mc>},
	EnchantThornsHit {inner: SoundStruct<'mc>},
	EntityAllayAmbientWithoutItem {inner: SoundStruct<'mc>},
	EntityAllayAmbientWithItem {inner: SoundStruct<'mc>},
	EntityAllayDeath {inner: SoundStruct<'mc>},
	EntityAllayHurt {inner: SoundStruct<'mc>},
	EntityAllayItemGiven {inner: SoundStruct<'mc>},
	EntityAllayItemTaken {inner: SoundStruct<'mc>},
	EntityAllayItemThrown {inner: SoundStruct<'mc>},
	EntityArmorStandBreak {inner: SoundStruct<'mc>},
	EntityArmorStandFall {inner: SoundStruct<'mc>},
	EntityArmorStandHit {inner: SoundStruct<'mc>},
	EntityArmorStandPlace {inner: SoundStruct<'mc>},
	EntityArrowHit {inner: SoundStruct<'mc>},
	EntityArrowHitPlayer {inner: SoundStruct<'mc>},
	EntityArrowShoot {inner: SoundStruct<'mc>},
	EntityAxolotlAttack {inner: SoundStruct<'mc>},
	EntityAxolotlDeath {inner: SoundStruct<'mc>},
	EntityAxolotlHurt {inner: SoundStruct<'mc>},
	EntityAxolotlIdleAir {inner: SoundStruct<'mc>},
	EntityAxolotlIdleWater {inner: SoundStruct<'mc>},
	EntityAxolotlSplash {inner: SoundStruct<'mc>},
	EntityAxolotlSwim {inner: SoundStruct<'mc>},
	EntityBatAmbient {inner: SoundStruct<'mc>},
	EntityBatDeath {inner: SoundStruct<'mc>},
	EntityBatHurt {inner: SoundStruct<'mc>},
	EntityBatLoop {inner: SoundStruct<'mc>},
	EntityBatTakeoff {inner: SoundStruct<'mc>},
	EntityBeeDeath {inner: SoundStruct<'mc>},
	EntityBeeHurt {inner: SoundStruct<'mc>},
	EntityBeeLoop {inner: SoundStruct<'mc>},
	EntityBeeLoopAggressive {inner: SoundStruct<'mc>},
	EntityBeePollinate {inner: SoundStruct<'mc>},
	EntityBeeSting {inner: SoundStruct<'mc>},
	EntityBlazeAmbient {inner: SoundStruct<'mc>},
	EntityBlazeBurn {inner: SoundStruct<'mc>},
	EntityBlazeDeath {inner: SoundStruct<'mc>},
	EntityBlazeHurt {inner: SoundStruct<'mc>},
	EntityBlazeShoot {inner: SoundStruct<'mc>},
	EntityBoatPaddleLand {inner: SoundStruct<'mc>},
	EntityBoatPaddleWater {inner: SoundStruct<'mc>},
	EntityBreezeDeath {inner: SoundStruct<'mc>},
	EntityBreezeHurt {inner: SoundStruct<'mc>},
	EntityBreezeIdleAir {inner: SoundStruct<'mc>},
	EntityBreezeIdleGround {inner: SoundStruct<'mc>},
	EntityBreezeInhale {inner: SoundStruct<'mc>},
	EntityBreezeJump {inner: SoundStruct<'mc>},
	EntityBreezeLand {inner: SoundStruct<'mc>},
	EntityBreezeShoot {inner: SoundStruct<'mc>},
	EntityBreezeSlide {inner: SoundStruct<'mc>},
	EntityCamelAmbient {inner: SoundStruct<'mc>},
	EntityCamelDash {inner: SoundStruct<'mc>},
	EntityCamelDashReady {inner: SoundStruct<'mc>},
	EntityCamelDeath {inner: SoundStruct<'mc>},
	EntityCamelEat {inner: SoundStruct<'mc>},
	EntityCamelHurt {inner: SoundStruct<'mc>},
	EntityCamelSaddle {inner: SoundStruct<'mc>},
	EntityCamelSit {inner: SoundStruct<'mc>},
	EntityCamelStand {inner: SoundStruct<'mc>},
	EntityCamelStep {inner: SoundStruct<'mc>},
	EntityCamelStepSand {inner: SoundStruct<'mc>},
	EntityCatAmbient {inner: SoundStruct<'mc>},
	EntityCatBegForFood {inner: SoundStruct<'mc>},
	EntityCatDeath {inner: SoundStruct<'mc>},
	EntityCatEat {inner: SoundStruct<'mc>},
	EntityCatHiss {inner: SoundStruct<'mc>},
	EntityCatHurt {inner: SoundStruct<'mc>},
	EntityCatPurr {inner: SoundStruct<'mc>},
	EntityCatPurreow {inner: SoundStruct<'mc>},
	EntityCatStrayAmbient {inner: SoundStruct<'mc>},
	EntityChickenAmbient {inner: SoundStruct<'mc>},
	EntityChickenDeath {inner: SoundStruct<'mc>},
	EntityChickenEgg {inner: SoundStruct<'mc>},
	EntityChickenHurt {inner: SoundStruct<'mc>},
	EntityChickenStep {inner: SoundStruct<'mc>},
	EntityCodAmbient {inner: SoundStruct<'mc>},
	EntityCodDeath {inner: SoundStruct<'mc>},
	EntityCodFlop {inner: SoundStruct<'mc>},
	EntityCodHurt {inner: SoundStruct<'mc>},
	EntityCowAmbient {inner: SoundStruct<'mc>},
	EntityCowDeath {inner: SoundStruct<'mc>},
	EntityCowHurt {inner: SoundStruct<'mc>},
	EntityCowMilk {inner: SoundStruct<'mc>},
	EntityCowStep {inner: SoundStruct<'mc>},
	EntityCreeperDeath {inner: SoundStruct<'mc>},
	EntityCreeperHurt {inner: SoundStruct<'mc>},
	EntityCreeperPrimed {inner: SoundStruct<'mc>},
	EntityDolphinAmbient {inner: SoundStruct<'mc>},
	EntityDolphinAmbientWater {inner: SoundStruct<'mc>},
	EntityDolphinAttack {inner: SoundStruct<'mc>},
	EntityDolphinDeath {inner: SoundStruct<'mc>},
	EntityDolphinEat {inner: SoundStruct<'mc>},
	EntityDolphinHurt {inner: SoundStruct<'mc>},
	EntityDolphinJump {inner: SoundStruct<'mc>},
	EntityDolphinPlay {inner: SoundStruct<'mc>},
	EntityDolphinSplash {inner: SoundStruct<'mc>},
	EntityDolphinSwim {inner: SoundStruct<'mc>},
	EntityDonkeyAmbient {inner: SoundStruct<'mc>},
	EntityDonkeyAngry {inner: SoundStruct<'mc>},
	EntityDonkeyChest {inner: SoundStruct<'mc>},
	EntityDonkeyDeath {inner: SoundStruct<'mc>},
	EntityDonkeyEat {inner: SoundStruct<'mc>},
	EntityDonkeyHurt {inner: SoundStruct<'mc>},
	EntityDragonFireballExplode {inner: SoundStruct<'mc>},
	EntityDrownedAmbient {inner: SoundStruct<'mc>},
	EntityDrownedAmbientWater {inner: SoundStruct<'mc>},
	EntityDrownedDeath {inner: SoundStruct<'mc>},
	EntityDrownedDeathWater {inner: SoundStruct<'mc>},
	EntityDrownedHurt {inner: SoundStruct<'mc>},
	EntityDrownedHurtWater {inner: SoundStruct<'mc>},
	EntityDrownedShoot {inner: SoundStruct<'mc>},
	EntityDrownedStep {inner: SoundStruct<'mc>},
	EntityDrownedSwim {inner: SoundStruct<'mc>},
	EntityEggThrow {inner: SoundStruct<'mc>},
	EntityElderGuardianAmbient {inner: SoundStruct<'mc>},
	EntityElderGuardianAmbientLand {inner: SoundStruct<'mc>},
	EntityElderGuardianCurse {inner: SoundStruct<'mc>},
	EntityElderGuardianDeath {inner: SoundStruct<'mc>},
	EntityElderGuardianDeathLand {inner: SoundStruct<'mc>},
	EntityElderGuardianFlop {inner: SoundStruct<'mc>},
	EntityElderGuardianHurt {inner: SoundStruct<'mc>},
	EntityElderGuardianHurtLand {inner: SoundStruct<'mc>},
	EntityEndermanAmbient {inner: SoundStruct<'mc>},
	EntityEndermanDeath {inner: SoundStruct<'mc>},
	EntityEndermanHurt {inner: SoundStruct<'mc>},
	EntityEndermanScream {inner: SoundStruct<'mc>},
	EntityEndermanStare {inner: SoundStruct<'mc>},
	EntityEndermanTeleport {inner: SoundStruct<'mc>},
	EntityEndermiteAmbient {inner: SoundStruct<'mc>},
	EntityEndermiteDeath {inner: SoundStruct<'mc>},
	EntityEndermiteHurt {inner: SoundStruct<'mc>},
	EntityEndermiteStep {inner: SoundStruct<'mc>},
	EntityEnderDragonAmbient {inner: SoundStruct<'mc>},
	EntityEnderDragonDeath {inner: SoundStruct<'mc>},
	EntityEnderDragonFlap {inner: SoundStruct<'mc>},
	EntityEnderDragonGrowl {inner: SoundStruct<'mc>},
	EntityEnderDragonHurt {inner: SoundStruct<'mc>},
	EntityEnderDragonShoot {inner: SoundStruct<'mc>},
	EntityEnderEyeDeath {inner: SoundStruct<'mc>},
	EntityEnderEyeLaunch {inner: SoundStruct<'mc>},
	EntityEnderPearlThrow {inner: SoundStruct<'mc>},
	EntityEvokerAmbient {inner: SoundStruct<'mc>},
	EntityEvokerCastSpell {inner: SoundStruct<'mc>},
	EntityEvokerCelebrate {inner: SoundStruct<'mc>},
	EntityEvokerDeath {inner: SoundStruct<'mc>},
	EntityEvokerFangsAttack {inner: SoundStruct<'mc>},
	EntityEvokerHurt {inner: SoundStruct<'mc>},
	EntityEvokerPrepareAttack {inner: SoundStruct<'mc>},
	EntityEvokerPrepareSummon {inner: SoundStruct<'mc>},
	EntityEvokerPrepareWololo {inner: SoundStruct<'mc>},
	EntityExperienceBottleThrow {inner: SoundStruct<'mc>},
	EntityExperienceOrbPickup {inner: SoundStruct<'mc>},
	EntityFireworkRocketBlast {inner: SoundStruct<'mc>},
	EntityFireworkRocketBlastFar {inner: SoundStruct<'mc>},
	EntityFireworkRocketLargeBlast {inner: SoundStruct<'mc>},
	EntityFireworkRocketLargeBlastFar {inner: SoundStruct<'mc>},
	EntityFireworkRocketLaunch {inner: SoundStruct<'mc>},
	EntityFireworkRocketShoot {inner: SoundStruct<'mc>},
	EntityFireworkRocketTwinkle {inner: SoundStruct<'mc>},
	EntityFireworkRocketTwinkleFar {inner: SoundStruct<'mc>},
	EntityFishingBobberRetrieve {inner: SoundStruct<'mc>},
	EntityFishingBobberSplash {inner: SoundStruct<'mc>},
	EntityFishingBobberThrow {inner: SoundStruct<'mc>},
	EntityFishSwim {inner: SoundStruct<'mc>},
	EntityFoxAggro {inner: SoundStruct<'mc>},
	EntityFoxAmbient {inner: SoundStruct<'mc>},
	EntityFoxBite {inner: SoundStruct<'mc>},
	EntityFoxDeath {inner: SoundStruct<'mc>},
	EntityFoxEat {inner: SoundStruct<'mc>},
	EntityFoxHurt {inner: SoundStruct<'mc>},
	EntityFoxScreech {inner: SoundStruct<'mc>},
	EntityFoxSleep {inner: SoundStruct<'mc>},
	EntityFoxSniff {inner: SoundStruct<'mc>},
	EntityFoxSpit {inner: SoundStruct<'mc>},
	EntityFoxTeleport {inner: SoundStruct<'mc>},
	EntityFrogAmbient {inner: SoundStruct<'mc>},
	EntityFrogDeath {inner: SoundStruct<'mc>},
	EntityFrogEat {inner: SoundStruct<'mc>},
	EntityFrogHurt {inner: SoundStruct<'mc>},
	EntityFrogLaySpawn {inner: SoundStruct<'mc>},
	EntityFrogLongJump {inner: SoundStruct<'mc>},
	EntityFrogStep {inner: SoundStruct<'mc>},
	EntityFrogTongue {inner: SoundStruct<'mc>},
	EntityGenericBigFall {inner: SoundStruct<'mc>},
	EntityGenericBurn {inner: SoundStruct<'mc>},
	EntityGenericDeath {inner: SoundStruct<'mc>},
	EntityGenericDrink {inner: SoundStruct<'mc>},
	EntityGenericEat {inner: SoundStruct<'mc>},
	EntityGenericExplode {inner: SoundStruct<'mc>},
	EntityGenericExtinguishFire {inner: SoundStruct<'mc>},
	EntityGenericHurt {inner: SoundStruct<'mc>},
	EntityGenericSmallFall {inner: SoundStruct<'mc>},
	EntityGenericSplash {inner: SoundStruct<'mc>},
	EntityGenericSwim {inner: SoundStruct<'mc>},
	EntityGenericWindBurst {inner: SoundStruct<'mc>},
	EntityGhastAmbient {inner: SoundStruct<'mc>},
	EntityGhastDeath {inner: SoundStruct<'mc>},
	EntityGhastHurt {inner: SoundStruct<'mc>},
	EntityGhastScream {inner: SoundStruct<'mc>},
	EntityGhastShoot {inner: SoundStruct<'mc>},
	EntityGhastWarn {inner: SoundStruct<'mc>},
	EntityGlowItemFrameAddItem {inner: SoundStruct<'mc>},
	EntityGlowItemFrameBreak {inner: SoundStruct<'mc>},
	EntityGlowItemFramePlace {inner: SoundStruct<'mc>},
	EntityGlowItemFrameRemoveItem {inner: SoundStruct<'mc>},
	EntityGlowItemFrameRotateItem {inner: SoundStruct<'mc>},
	EntityGlowSquidAmbient {inner: SoundStruct<'mc>},
	EntityGlowSquidDeath {inner: SoundStruct<'mc>},
	EntityGlowSquidHurt {inner: SoundStruct<'mc>},
	EntityGlowSquidSquirt {inner: SoundStruct<'mc>},
	EntityGoatAmbient {inner: SoundStruct<'mc>},
	EntityGoatDeath {inner: SoundStruct<'mc>},
	EntityGoatEat {inner: SoundStruct<'mc>},
	EntityGoatHornBreak {inner: SoundStruct<'mc>},
	EntityGoatHurt {inner: SoundStruct<'mc>},
	EntityGoatLongJump {inner: SoundStruct<'mc>},
	EntityGoatMilk {inner: SoundStruct<'mc>},
	EntityGoatPrepareRam {inner: SoundStruct<'mc>},
	EntityGoatRamImpact {inner: SoundStruct<'mc>},
	EntityGoatScreamingAmbient {inner: SoundStruct<'mc>},
	EntityGoatScreamingDeath {inner: SoundStruct<'mc>},
	EntityGoatScreamingEat {inner: SoundStruct<'mc>},
	EntityGoatScreamingHornBreak {inner: SoundStruct<'mc>},
	EntityGoatScreamingHurt {inner: SoundStruct<'mc>},
	EntityGoatScreamingLongJump {inner: SoundStruct<'mc>},
	EntityGoatScreamingMilk {inner: SoundStruct<'mc>},
	EntityGoatScreamingPrepareRam {inner: SoundStruct<'mc>},
	EntityGoatScreamingRamImpact {inner: SoundStruct<'mc>},
	EntityGoatStep {inner: SoundStruct<'mc>},
	EntityGuardianAmbient {inner: SoundStruct<'mc>},
	EntityGuardianAmbientLand {inner: SoundStruct<'mc>},
	EntityGuardianAttack {inner: SoundStruct<'mc>},
	EntityGuardianDeath {inner: SoundStruct<'mc>},
	EntityGuardianDeathLand {inner: SoundStruct<'mc>},
	EntityGuardianFlop {inner: SoundStruct<'mc>},
	EntityGuardianHurt {inner: SoundStruct<'mc>},
	EntityGuardianHurtLand {inner: SoundStruct<'mc>},
	EntityHoglinAmbient {inner: SoundStruct<'mc>},
	EntityHoglinAngry {inner: SoundStruct<'mc>},
	EntityHoglinAttack {inner: SoundStruct<'mc>},
	EntityHoglinConvertedToZombified {inner: SoundStruct<'mc>},
	EntityHoglinDeath {inner: SoundStruct<'mc>},
	EntityHoglinHurt {inner: SoundStruct<'mc>},
	EntityHoglinRetreat {inner: SoundStruct<'mc>},
	EntityHoglinStep {inner: SoundStruct<'mc>},
	EntityHorseAmbient {inner: SoundStruct<'mc>},
	EntityHorseAngry {inner: SoundStruct<'mc>},
	EntityHorseArmor {inner: SoundStruct<'mc>},
	EntityHorseBreathe {inner: SoundStruct<'mc>},
	EntityHorseDeath {inner: SoundStruct<'mc>},
	EntityHorseEat {inner: SoundStruct<'mc>},
	EntityHorseGallop {inner: SoundStruct<'mc>},
	EntityHorseHurt {inner: SoundStruct<'mc>},
	EntityHorseJump {inner: SoundStruct<'mc>},
	EntityHorseLand {inner: SoundStruct<'mc>},
	EntityHorseSaddle {inner: SoundStruct<'mc>},
	EntityHorseStep {inner: SoundStruct<'mc>},
	EntityHorseStepWood {inner: SoundStruct<'mc>},
	EntityHostileBigFall {inner: SoundStruct<'mc>},
	EntityHostileDeath {inner: SoundStruct<'mc>},
	EntityHostileHurt {inner: SoundStruct<'mc>},
	EntityHostileSmallFall {inner: SoundStruct<'mc>},
	EntityHostileSplash {inner: SoundStruct<'mc>},
	EntityHostileSwim {inner: SoundStruct<'mc>},
	EntityHuskAmbient {inner: SoundStruct<'mc>},
	EntityHuskConvertedToZombie {inner: SoundStruct<'mc>},
	EntityHuskDeath {inner: SoundStruct<'mc>},
	EntityHuskHurt {inner: SoundStruct<'mc>},
	EntityHuskStep {inner: SoundStruct<'mc>},
	EntityIllusionerAmbient {inner: SoundStruct<'mc>},
	EntityIllusionerCastSpell {inner: SoundStruct<'mc>},
	EntityIllusionerDeath {inner: SoundStruct<'mc>},
	EntityIllusionerHurt {inner: SoundStruct<'mc>},
	EntityIllusionerMirrorMove {inner: SoundStruct<'mc>},
	EntityIllusionerPrepareBlindness {inner: SoundStruct<'mc>},
	EntityIllusionerPrepareMirror {inner: SoundStruct<'mc>},
	EntityIronGolemAttack {inner: SoundStruct<'mc>},
	EntityIronGolemDamage {inner: SoundStruct<'mc>},
	EntityIronGolemDeath {inner: SoundStruct<'mc>},
	EntityIronGolemHurt {inner: SoundStruct<'mc>},
	EntityIronGolemRepair {inner: SoundStruct<'mc>},
	EntityIronGolemStep {inner: SoundStruct<'mc>},
	EntityItemBreak {inner: SoundStruct<'mc>},
	EntityItemFrameAddItem {inner: SoundStruct<'mc>},
	EntityItemFrameBreak {inner: SoundStruct<'mc>},
	EntityItemFramePlace {inner: SoundStruct<'mc>},
	EntityItemFrameRemoveItem {inner: SoundStruct<'mc>},
	EntityItemFrameRotateItem {inner: SoundStruct<'mc>},
	EntityItemPickup {inner: SoundStruct<'mc>},
	EntityLeashKnotBreak {inner: SoundStruct<'mc>},
	EntityLeashKnotPlace {inner: SoundStruct<'mc>},
	EntityLightningBoltImpact {inner: SoundStruct<'mc>},
	EntityLightningBoltThunder {inner: SoundStruct<'mc>},
	EntityLingeringPotionThrow {inner: SoundStruct<'mc>},
	EntityLlamaAmbient {inner: SoundStruct<'mc>},
	EntityLlamaAngry {inner: SoundStruct<'mc>},
	EntityLlamaChest {inner: SoundStruct<'mc>},
	EntityLlamaDeath {inner: SoundStruct<'mc>},
	EntityLlamaEat {inner: SoundStruct<'mc>},
	EntityLlamaHurt {inner: SoundStruct<'mc>},
	EntityLlamaSpit {inner: SoundStruct<'mc>},
	EntityLlamaStep {inner: SoundStruct<'mc>},
	EntityLlamaSwag {inner: SoundStruct<'mc>},
	EntityMagmaCubeDeath {inner: SoundStruct<'mc>},
	EntityMagmaCubeDeathSmall {inner: SoundStruct<'mc>},
	EntityMagmaCubeHurt {inner: SoundStruct<'mc>},
	EntityMagmaCubeHurtSmall {inner: SoundStruct<'mc>},
	EntityMagmaCubeJump {inner: SoundStruct<'mc>},
	EntityMagmaCubeSquish {inner: SoundStruct<'mc>},
	EntityMagmaCubeSquishSmall {inner: SoundStruct<'mc>},
	EntityMinecartInside {inner: SoundStruct<'mc>},
	EntityMinecartInsideUnderwater {inner: SoundStruct<'mc>},
	EntityMinecartRiding {inner: SoundStruct<'mc>},
	EntityMooshroomConvert {inner: SoundStruct<'mc>},
	EntityMooshroomEat {inner: SoundStruct<'mc>},
	EntityMooshroomMilk {inner: SoundStruct<'mc>},
	EntityMooshroomShear {inner: SoundStruct<'mc>},
	EntityMooshroomSuspiciousMilk {inner: SoundStruct<'mc>},
	EntityMuleAmbient {inner: SoundStruct<'mc>},
	EntityMuleAngry {inner: SoundStruct<'mc>},
	EntityMuleChest {inner: SoundStruct<'mc>},
	EntityMuleDeath {inner: SoundStruct<'mc>},
	EntityMuleEat {inner: SoundStruct<'mc>},
	EntityMuleHurt {inner: SoundStruct<'mc>},
	EntityOcelotAmbient {inner: SoundStruct<'mc>},
	EntityOcelotDeath {inner: SoundStruct<'mc>},
	EntityOcelotHurt {inner: SoundStruct<'mc>},
	EntityPaintingBreak {inner: SoundStruct<'mc>},
	EntityPaintingPlace {inner: SoundStruct<'mc>},
	EntityPandaAggressiveAmbient {inner: SoundStruct<'mc>},
	EntityPandaAmbient {inner: SoundStruct<'mc>},
	EntityPandaBite {inner: SoundStruct<'mc>},
	EntityPandaCantBreed {inner: SoundStruct<'mc>},
	EntityPandaDeath {inner: SoundStruct<'mc>},
	EntityPandaEat {inner: SoundStruct<'mc>},
	EntityPandaHurt {inner: SoundStruct<'mc>},
	EntityPandaPreSneeze {inner: SoundStruct<'mc>},
	EntityPandaSneeze {inner: SoundStruct<'mc>},
	EntityPandaStep {inner: SoundStruct<'mc>},
	EntityPandaWorriedAmbient {inner: SoundStruct<'mc>},
	EntityParrotAmbient {inner: SoundStruct<'mc>},
	EntityParrotDeath {inner: SoundStruct<'mc>},
	EntityParrotEat {inner: SoundStruct<'mc>},
	EntityParrotFly {inner: SoundStruct<'mc>},
	EntityParrotHurt {inner: SoundStruct<'mc>},
	EntityParrotImitateBlaze {inner: SoundStruct<'mc>},
	EntityParrotImitateBreeze {inner: SoundStruct<'mc>},
	EntityParrotImitateCreeper {inner: SoundStruct<'mc>},
	EntityParrotImitateDrowned {inner: SoundStruct<'mc>},
	EntityParrotImitateElderGuardian {inner: SoundStruct<'mc>},
	EntityParrotImitateEndermite {inner: SoundStruct<'mc>},
	EntityParrotImitateEnderDragon {inner: SoundStruct<'mc>},
	EntityParrotImitateEvoker {inner: SoundStruct<'mc>},
	EntityParrotImitateGhast {inner: SoundStruct<'mc>},
	EntityParrotImitateGuardian {inner: SoundStruct<'mc>},
	EntityParrotImitateHoglin {inner: SoundStruct<'mc>},
	EntityParrotImitateHusk {inner: SoundStruct<'mc>},
	EntityParrotImitateIllusioner {inner: SoundStruct<'mc>},
	EntityParrotImitateMagmaCube {inner: SoundStruct<'mc>},
	EntityParrotImitatePhantom {inner: SoundStruct<'mc>},
	EntityParrotImitatePiglin {inner: SoundStruct<'mc>},
	EntityParrotImitatePiglinBrute {inner: SoundStruct<'mc>},
	EntityParrotImitatePillager {inner: SoundStruct<'mc>},
	EntityParrotImitateRavager {inner: SoundStruct<'mc>},
	EntityParrotImitateShulker {inner: SoundStruct<'mc>},
	EntityParrotImitateSilverfish {inner: SoundStruct<'mc>},
	EntityParrotImitateSkeleton {inner: SoundStruct<'mc>},
	EntityParrotImitateSlime {inner: SoundStruct<'mc>},
	EntityParrotImitateSpider {inner: SoundStruct<'mc>},
	EntityParrotImitateStray {inner: SoundStruct<'mc>},
	EntityParrotImitateVex {inner: SoundStruct<'mc>},
	EntityParrotImitateVindicator {inner: SoundStruct<'mc>},
	EntityParrotImitateWarden {inner: SoundStruct<'mc>},
	EntityParrotImitateWitch {inner: SoundStruct<'mc>},
	EntityParrotImitateWither {inner: SoundStruct<'mc>},
	EntityParrotImitateWitherSkeleton {inner: SoundStruct<'mc>},
	EntityParrotImitateZoglin {inner: SoundStruct<'mc>},
	EntityParrotImitateZombie {inner: SoundStruct<'mc>},
	EntityParrotImitateZombieVillager {inner: SoundStruct<'mc>},
	EntityParrotStep {inner: SoundStruct<'mc>},
	EntityPhantomAmbient {inner: SoundStruct<'mc>},
	EntityPhantomBite {inner: SoundStruct<'mc>},
	EntityPhantomDeath {inner: SoundStruct<'mc>},
	EntityPhantomFlap {inner: SoundStruct<'mc>},
	EntityPhantomHurt {inner: SoundStruct<'mc>},
	EntityPhantomSwoop {inner: SoundStruct<'mc>},
	EntityPiglinAdmiringItem {inner: SoundStruct<'mc>},
	EntityPiglinAmbient {inner: SoundStruct<'mc>},
	EntityPiglinAngry {inner: SoundStruct<'mc>},
	EntityPiglinBruteAmbient {inner: SoundStruct<'mc>},
	EntityPiglinBruteAngry {inner: SoundStruct<'mc>},
	EntityPiglinBruteConvertedToZombified {inner: SoundStruct<'mc>},
	EntityPiglinBruteDeath {inner: SoundStruct<'mc>},
	EntityPiglinBruteHurt {inner: SoundStruct<'mc>},
	EntityPiglinBruteStep {inner: SoundStruct<'mc>},
	EntityPiglinCelebrate {inner: SoundStruct<'mc>},
	EntityPiglinConvertedToZombified {inner: SoundStruct<'mc>},
	EntityPiglinDeath {inner: SoundStruct<'mc>},
	EntityPiglinHurt {inner: SoundStruct<'mc>},
	EntityPiglinJealous {inner: SoundStruct<'mc>},
	EntityPiglinRetreat {inner: SoundStruct<'mc>},
	EntityPiglinStep {inner: SoundStruct<'mc>},
	EntityPigAmbient {inner: SoundStruct<'mc>},
	EntityPigDeath {inner: SoundStruct<'mc>},
	EntityPigHurt {inner: SoundStruct<'mc>},
	EntityPigSaddle {inner: SoundStruct<'mc>},
	EntityPigStep {inner: SoundStruct<'mc>},
	EntityPillagerAmbient {inner: SoundStruct<'mc>},
	EntityPillagerCelebrate {inner: SoundStruct<'mc>},
	EntityPillagerDeath {inner: SoundStruct<'mc>},
	EntityPillagerHurt {inner: SoundStruct<'mc>},
	EntityPlayerAttackCrit {inner: SoundStruct<'mc>},
	EntityPlayerAttackKnockback {inner: SoundStruct<'mc>},
	EntityPlayerAttackNodamage {inner: SoundStruct<'mc>},
	EntityPlayerAttackStrong {inner: SoundStruct<'mc>},
	EntityPlayerAttackSweep {inner: SoundStruct<'mc>},
	EntityPlayerAttackWeak {inner: SoundStruct<'mc>},
	EntityPlayerBigFall {inner: SoundStruct<'mc>},
	EntityPlayerBreath {inner: SoundStruct<'mc>},
	EntityPlayerBurp {inner: SoundStruct<'mc>},
	EntityPlayerDeath {inner: SoundStruct<'mc>},
	EntityPlayerHurt {inner: SoundStruct<'mc>},
	EntityPlayerHurtDrown {inner: SoundStruct<'mc>},
	EntityPlayerHurtFreeze {inner: SoundStruct<'mc>},
	EntityPlayerHurtOnFire {inner: SoundStruct<'mc>},
	EntityPlayerHurtSweetBerryBush {inner: SoundStruct<'mc>},
	EntityPlayerLevelup {inner: SoundStruct<'mc>},
	EntityPlayerSmallFall {inner: SoundStruct<'mc>},
	EntityPlayerSplash {inner: SoundStruct<'mc>},
	EntityPlayerSplashHighSpeed {inner: SoundStruct<'mc>},
	EntityPlayerSwim {inner: SoundStruct<'mc>},
	EntityPlayerTeleport {inner: SoundStruct<'mc>},
	EntityPolarBearAmbient {inner: SoundStruct<'mc>},
	EntityPolarBearAmbientBaby {inner: SoundStruct<'mc>},
	EntityPolarBearDeath {inner: SoundStruct<'mc>},
	EntityPolarBearHurt {inner: SoundStruct<'mc>},
	EntityPolarBearStep {inner: SoundStruct<'mc>},
	EntityPolarBearWarning {inner: SoundStruct<'mc>},
	EntityPufferFishAmbient {inner: SoundStruct<'mc>},
	EntityPufferFishBlowOut {inner: SoundStruct<'mc>},
	EntityPufferFishBlowUp {inner: SoundStruct<'mc>},
	EntityPufferFishDeath {inner: SoundStruct<'mc>},
	EntityPufferFishFlop {inner: SoundStruct<'mc>},
	EntityPufferFishHurt {inner: SoundStruct<'mc>},
	EntityPufferFishSting {inner: SoundStruct<'mc>},
	EntityRabbitAmbient {inner: SoundStruct<'mc>},
	EntityRabbitAttack {inner: SoundStruct<'mc>},
	EntityRabbitDeath {inner: SoundStruct<'mc>},
	EntityRabbitHurt {inner: SoundStruct<'mc>},
	EntityRabbitJump {inner: SoundStruct<'mc>},
	EntityRavagerAmbient {inner: SoundStruct<'mc>},
	EntityRavagerAttack {inner: SoundStruct<'mc>},
	EntityRavagerCelebrate {inner: SoundStruct<'mc>},
	EntityRavagerDeath {inner: SoundStruct<'mc>},
	EntityRavagerHurt {inner: SoundStruct<'mc>},
	EntityRavagerRoar {inner: SoundStruct<'mc>},
	EntityRavagerStep {inner: SoundStruct<'mc>},
	EntityRavagerStunned {inner: SoundStruct<'mc>},
	EntitySalmonAmbient {inner: SoundStruct<'mc>},
	EntitySalmonDeath {inner: SoundStruct<'mc>},
	EntitySalmonFlop {inner: SoundStruct<'mc>},
	EntitySalmonHurt {inner: SoundStruct<'mc>},
	EntitySheepAmbient {inner: SoundStruct<'mc>},
	EntitySheepDeath {inner: SoundStruct<'mc>},
	EntitySheepHurt {inner: SoundStruct<'mc>},
	EntitySheepShear {inner: SoundStruct<'mc>},
	EntitySheepStep {inner: SoundStruct<'mc>},
	EntityShulkerAmbient {inner: SoundStruct<'mc>},
	EntityShulkerBulletHit {inner: SoundStruct<'mc>},
	EntityShulkerBulletHurt {inner: SoundStruct<'mc>},
	EntityShulkerClose {inner: SoundStruct<'mc>},
	EntityShulkerDeath {inner: SoundStruct<'mc>},
	EntityShulkerHurt {inner: SoundStruct<'mc>},
	EntityShulkerHurtClosed {inner: SoundStruct<'mc>},
	EntityShulkerOpen {inner: SoundStruct<'mc>},
	EntityShulkerShoot {inner: SoundStruct<'mc>},
	EntityShulkerTeleport {inner: SoundStruct<'mc>},
	EntitySilverfishAmbient {inner: SoundStruct<'mc>},
	EntitySilverfishDeath {inner: SoundStruct<'mc>},
	EntitySilverfishHurt {inner: SoundStruct<'mc>},
	EntitySilverfishStep {inner: SoundStruct<'mc>},
	EntitySkeletonAmbient {inner: SoundStruct<'mc>},
	EntitySkeletonConvertedToStray {inner: SoundStruct<'mc>},
	EntitySkeletonDeath {inner: SoundStruct<'mc>},
	EntitySkeletonHorseAmbient {inner: SoundStruct<'mc>},
	EntitySkeletonHorseAmbientWater {inner: SoundStruct<'mc>},
	EntitySkeletonHorseDeath {inner: SoundStruct<'mc>},
	EntitySkeletonHorseGallopWater {inner: SoundStruct<'mc>},
	EntitySkeletonHorseHurt {inner: SoundStruct<'mc>},
	EntitySkeletonHorseJumpWater {inner: SoundStruct<'mc>},
	EntitySkeletonHorseStepWater {inner: SoundStruct<'mc>},
	EntitySkeletonHorseSwim {inner: SoundStruct<'mc>},
	EntitySkeletonHurt {inner: SoundStruct<'mc>},
	EntitySkeletonShoot {inner: SoundStruct<'mc>},
	EntitySkeletonStep {inner: SoundStruct<'mc>},
	EntitySlimeAttack {inner: SoundStruct<'mc>},
	EntitySlimeDeath {inner: SoundStruct<'mc>},
	EntitySlimeDeathSmall {inner: SoundStruct<'mc>},
	EntitySlimeHurt {inner: SoundStruct<'mc>},
	EntitySlimeHurtSmall {inner: SoundStruct<'mc>},
	EntitySlimeJump {inner: SoundStruct<'mc>},
	EntitySlimeJumpSmall {inner: SoundStruct<'mc>},
	EntitySlimeSquish {inner: SoundStruct<'mc>},
	EntitySlimeSquishSmall {inner: SoundStruct<'mc>},
	EntitySnifferDeath {inner: SoundStruct<'mc>},
	EntitySnifferDigging {inner: SoundStruct<'mc>},
	EntitySnifferDiggingStop {inner: SoundStruct<'mc>},
	EntitySnifferDropSeed {inner: SoundStruct<'mc>},
	EntitySnifferEat {inner: SoundStruct<'mc>},
	EntitySnifferHappy {inner: SoundStruct<'mc>},
	EntitySnifferHurt {inner: SoundStruct<'mc>},
	EntitySnifferIdle {inner: SoundStruct<'mc>},
	EntitySnifferScenting {inner: SoundStruct<'mc>},
	EntitySnifferSearching {inner: SoundStruct<'mc>},
	EntitySnifferSniffing {inner: SoundStruct<'mc>},
	EntitySnifferStep {inner: SoundStruct<'mc>},
	EntitySnowballThrow {inner: SoundStruct<'mc>},
	EntitySnowGolemAmbient {inner: SoundStruct<'mc>},
	EntitySnowGolemDeath {inner: SoundStruct<'mc>},
	EntitySnowGolemHurt {inner: SoundStruct<'mc>},
	EntitySnowGolemShear {inner: SoundStruct<'mc>},
	EntitySnowGolemShoot {inner: SoundStruct<'mc>},
	EntitySpiderAmbient {inner: SoundStruct<'mc>},
	EntitySpiderDeath {inner: SoundStruct<'mc>},
	EntitySpiderHurt {inner: SoundStruct<'mc>},
	EntitySpiderStep {inner: SoundStruct<'mc>},
	EntitySplashPotionBreak {inner: SoundStruct<'mc>},
	EntitySplashPotionThrow {inner: SoundStruct<'mc>},
	EntitySquidAmbient {inner: SoundStruct<'mc>},
	EntitySquidDeath {inner: SoundStruct<'mc>},
	EntitySquidHurt {inner: SoundStruct<'mc>},
	EntitySquidSquirt {inner: SoundStruct<'mc>},
	EntityStrayAmbient {inner: SoundStruct<'mc>},
	EntityStrayDeath {inner: SoundStruct<'mc>},
	EntityStrayHurt {inner: SoundStruct<'mc>},
	EntityStrayStep {inner: SoundStruct<'mc>},
	EntityStriderAmbient {inner: SoundStruct<'mc>},
	EntityStriderDeath {inner: SoundStruct<'mc>},
	EntityStriderEat {inner: SoundStruct<'mc>},
	EntityStriderHappy {inner: SoundStruct<'mc>},
	EntityStriderHurt {inner: SoundStruct<'mc>},
	EntityStriderRetreat {inner: SoundStruct<'mc>},
	EntityStriderSaddle {inner: SoundStruct<'mc>},
	EntityStriderStep {inner: SoundStruct<'mc>},
	EntityStriderStepLava {inner: SoundStruct<'mc>},
	EntityTadpoleDeath {inner: SoundStruct<'mc>},
	EntityTadpoleFlop {inner: SoundStruct<'mc>},
	EntityTadpoleGrowUp {inner: SoundStruct<'mc>},
	EntityTadpoleHurt {inner: SoundStruct<'mc>},
	EntityTntPrimed {inner: SoundStruct<'mc>},
	EntityTropicalFishAmbient {inner: SoundStruct<'mc>},
	EntityTropicalFishDeath {inner: SoundStruct<'mc>},
	EntityTropicalFishFlop {inner: SoundStruct<'mc>},
	EntityTropicalFishHurt {inner: SoundStruct<'mc>},
	EntityTurtleAmbientLand {inner: SoundStruct<'mc>},
	EntityTurtleDeath {inner: SoundStruct<'mc>},
	EntityTurtleDeathBaby {inner: SoundStruct<'mc>},
	EntityTurtleEggBreak {inner: SoundStruct<'mc>},
	EntityTurtleEggCrack {inner: SoundStruct<'mc>},
	EntityTurtleEggHatch {inner: SoundStruct<'mc>},
	EntityTurtleHurt {inner: SoundStruct<'mc>},
	EntityTurtleHurtBaby {inner: SoundStruct<'mc>},
	EntityTurtleLayEgg {inner: SoundStruct<'mc>},
	EntityTurtleShamble {inner: SoundStruct<'mc>},
	EntityTurtleShambleBaby {inner: SoundStruct<'mc>},
	EntityTurtleSwim {inner: SoundStruct<'mc>},
	EntityVexAmbient {inner: SoundStruct<'mc>},
	EntityVexCharge {inner: SoundStruct<'mc>},
	EntityVexDeath {inner: SoundStruct<'mc>},
	EntityVexHurt {inner: SoundStruct<'mc>},
	EntityVillagerAmbient {inner: SoundStruct<'mc>},
	EntityVillagerCelebrate {inner: SoundStruct<'mc>},
	EntityVillagerDeath {inner: SoundStruct<'mc>},
	EntityVillagerHurt {inner: SoundStruct<'mc>},
	EntityVillagerNo {inner: SoundStruct<'mc>},
	EntityVillagerTrade {inner: SoundStruct<'mc>},
	EntityVillagerWorkArmorer {inner: SoundStruct<'mc>},
	EntityVillagerWorkButcher {inner: SoundStruct<'mc>},
	EntityVillagerWorkCartographer {inner: SoundStruct<'mc>},
	EntityVillagerWorkCleric {inner: SoundStruct<'mc>},
	EntityVillagerWorkFarmer {inner: SoundStruct<'mc>},
	EntityVillagerWorkFisherman {inner: SoundStruct<'mc>},
	EntityVillagerWorkFletcher {inner: SoundStruct<'mc>},
	EntityVillagerWorkLeatherworker {inner: SoundStruct<'mc>},
	EntityVillagerWorkLibrarian {inner: SoundStruct<'mc>},
	EntityVillagerWorkMason {inner: SoundStruct<'mc>},
	EntityVillagerWorkShepherd {inner: SoundStruct<'mc>},
	EntityVillagerWorkToolsmith {inner: SoundStruct<'mc>},
	EntityVillagerWorkWeaponsmith {inner: SoundStruct<'mc>},
	EntityVillagerYes {inner: SoundStruct<'mc>},
	EntityVindicatorAmbient {inner: SoundStruct<'mc>},
	EntityVindicatorCelebrate {inner: SoundStruct<'mc>},
	EntityVindicatorDeath {inner: SoundStruct<'mc>},
	EntityVindicatorHurt {inner: SoundStruct<'mc>},
	EntityWanderingTraderAmbient {inner: SoundStruct<'mc>},
	EntityWanderingTraderDeath {inner: SoundStruct<'mc>},
	EntityWanderingTraderDisappeared {inner: SoundStruct<'mc>},
	EntityWanderingTraderDrinkMilk {inner: SoundStruct<'mc>},
	EntityWanderingTraderDrinkPotion {inner: SoundStruct<'mc>},
	EntityWanderingTraderHurt {inner: SoundStruct<'mc>},
	EntityWanderingTraderNo {inner: SoundStruct<'mc>},
	EntityWanderingTraderReappeared {inner: SoundStruct<'mc>},
	EntityWanderingTraderTrade {inner: SoundStruct<'mc>},
	EntityWanderingTraderYes {inner: SoundStruct<'mc>},
	EntityWardenAgitated {inner: SoundStruct<'mc>},
	EntityWardenAmbient {inner: SoundStruct<'mc>},
	EntityWardenAngry {inner: SoundStruct<'mc>},
	EntityWardenAttackImpact {inner: SoundStruct<'mc>},
	EntityWardenDeath {inner: SoundStruct<'mc>},
	EntityWardenDig {inner: SoundStruct<'mc>},
	EntityWardenEmerge {inner: SoundStruct<'mc>},
	EntityWardenHeartbeat {inner: SoundStruct<'mc>},
	EntityWardenHurt {inner: SoundStruct<'mc>},
	EntityWardenListening {inner: SoundStruct<'mc>},
	EntityWardenListeningAngry {inner: SoundStruct<'mc>},
	EntityWardenNearbyClose {inner: SoundStruct<'mc>},
	EntityWardenNearbyCloser {inner: SoundStruct<'mc>},
	EntityWardenNearbyClosest {inner: SoundStruct<'mc>},
	EntityWardenRoar {inner: SoundStruct<'mc>},
	EntityWardenSniff {inner: SoundStruct<'mc>},
	EntityWardenSonicBoom {inner: SoundStruct<'mc>},
	EntityWardenSonicCharge {inner: SoundStruct<'mc>},
	EntityWardenStep {inner: SoundStruct<'mc>},
	EntityWardenTendrilClicks {inner: SoundStruct<'mc>},
	EntityWitchAmbient {inner: SoundStruct<'mc>},
	EntityWitchCelebrate {inner: SoundStruct<'mc>},
	EntityWitchDeath {inner: SoundStruct<'mc>},
	EntityWitchDrink {inner: SoundStruct<'mc>},
	EntityWitchHurt {inner: SoundStruct<'mc>},
	EntityWitchThrow {inner: SoundStruct<'mc>},
	EntityWitherAmbient {inner: SoundStruct<'mc>},
	EntityWitherBreakBlock {inner: SoundStruct<'mc>},
	EntityWitherDeath {inner: SoundStruct<'mc>},
	EntityWitherHurt {inner: SoundStruct<'mc>},
	EntityWitherShoot {inner: SoundStruct<'mc>},
	EntityWitherSkeletonAmbient {inner: SoundStruct<'mc>},
	EntityWitherSkeletonDeath {inner: SoundStruct<'mc>},
	EntityWitherSkeletonHurt {inner: SoundStruct<'mc>},
	EntityWitherSkeletonStep {inner: SoundStruct<'mc>},
	EntityWitherSpawn {inner: SoundStruct<'mc>},
	EntityWolfAmbient {inner: SoundStruct<'mc>},
	EntityWolfDeath {inner: SoundStruct<'mc>},
	EntityWolfGrowl {inner: SoundStruct<'mc>},
	EntityWolfHowl {inner: SoundStruct<'mc>},
	EntityWolfHurt {inner: SoundStruct<'mc>},
	EntityWolfPant {inner: SoundStruct<'mc>},
	EntityWolfShake {inner: SoundStruct<'mc>},
	EntityWolfStep {inner: SoundStruct<'mc>},
	EntityWolfWhine {inner: SoundStruct<'mc>},
	EntityZoglinAmbient {inner: SoundStruct<'mc>},
	EntityZoglinAngry {inner: SoundStruct<'mc>},
	EntityZoglinAttack {inner: SoundStruct<'mc>},
	EntityZoglinDeath {inner: SoundStruct<'mc>},
	EntityZoglinHurt {inner: SoundStruct<'mc>},
	EntityZoglinStep {inner: SoundStruct<'mc>},
	EntityZombieAmbient {inner: SoundStruct<'mc>},
	EntityZombieAttackIronDoor {inner: SoundStruct<'mc>},
	EntityZombieAttackWoodenDoor {inner: SoundStruct<'mc>},
	EntityZombieBreakWoodenDoor {inner: SoundStruct<'mc>},
	EntityZombieConvertedToDrowned {inner: SoundStruct<'mc>},
	EntityZombieDeath {inner: SoundStruct<'mc>},
	EntityZombieDestroyEgg {inner: SoundStruct<'mc>},
	EntityZombieHorseAmbient {inner: SoundStruct<'mc>},
	EntityZombieHorseDeath {inner: SoundStruct<'mc>},
	EntityZombieHorseHurt {inner: SoundStruct<'mc>},
	EntityZombieHurt {inner: SoundStruct<'mc>},
	EntityZombieInfect {inner: SoundStruct<'mc>},
	EntityZombieStep {inner: SoundStruct<'mc>},
	EntityZombieVillagerAmbient {inner: SoundStruct<'mc>},
	EntityZombieVillagerConverted {inner: SoundStruct<'mc>},
	EntityZombieVillagerCure {inner: SoundStruct<'mc>},
	EntityZombieVillagerDeath {inner: SoundStruct<'mc>},
	EntityZombieVillagerHurt {inner: SoundStruct<'mc>},
	EntityZombieVillagerStep {inner: SoundStruct<'mc>},
	EntityZombifiedPiglinAmbient {inner: SoundStruct<'mc>},
	EntityZombifiedPiglinAngry {inner: SoundStruct<'mc>},
	EntityZombifiedPiglinDeath {inner: SoundStruct<'mc>},
	EntityZombifiedPiglinHurt {inner: SoundStruct<'mc>},
	EventRaidHorn {inner: SoundStruct<'mc>},
	IntentionallyEmpty {inner: SoundStruct<'mc>},
	ItemArmorEquipChain {inner: SoundStruct<'mc>},
	ItemArmorEquipDiamond {inner: SoundStruct<'mc>},
	ItemArmorEquipElytra {inner: SoundStruct<'mc>},
	ItemArmorEquipGeneric {inner: SoundStruct<'mc>},
	ItemArmorEquipGold {inner: SoundStruct<'mc>},
	ItemArmorEquipIron {inner: SoundStruct<'mc>},
	ItemArmorEquipLeather {inner: SoundStruct<'mc>},
	ItemArmorEquipNetherite {inner: SoundStruct<'mc>},
	ItemArmorEquipTurtle {inner: SoundStruct<'mc>},
	ItemAxeScrape {inner: SoundStruct<'mc>},
	ItemAxeStrip {inner: SoundStruct<'mc>},
	ItemAxeWaxOff {inner: SoundStruct<'mc>},
	ItemBoneMealUse {inner: SoundStruct<'mc>},
	ItemBookPageTurn {inner: SoundStruct<'mc>},
	ItemBookPut {inner: SoundStruct<'mc>},
	ItemBottleEmpty {inner: SoundStruct<'mc>},
	ItemBottleFill {inner: SoundStruct<'mc>},
	ItemBottleFillDragonbreath {inner: SoundStruct<'mc>},
	ItemBrushBrushingGeneric {inner: SoundStruct<'mc>},
	ItemBrushBrushingGravel {inner: SoundStruct<'mc>},
	ItemBrushBrushingGravelComplete {inner: SoundStruct<'mc>},
	ItemBrushBrushingSand {inner: SoundStruct<'mc>},
	ItemBrushBrushingSandComplete {inner: SoundStruct<'mc>},
	ItemBucketEmpty {inner: SoundStruct<'mc>},
	ItemBucketEmptyAxolotl {inner: SoundStruct<'mc>},
	ItemBucketEmptyFish {inner: SoundStruct<'mc>},
	ItemBucketEmptyLava {inner: SoundStruct<'mc>},
	ItemBucketEmptyPowderSnow {inner: SoundStruct<'mc>},
	ItemBucketEmptyTadpole {inner: SoundStruct<'mc>},
	ItemBucketFill {inner: SoundStruct<'mc>},
	ItemBucketFillAxolotl {inner: SoundStruct<'mc>},
	ItemBucketFillFish {inner: SoundStruct<'mc>},
	ItemBucketFillLava {inner: SoundStruct<'mc>},
	ItemBucketFillPowderSnow {inner: SoundStruct<'mc>},
	ItemBucketFillTadpole {inner: SoundStruct<'mc>},
	ItemBundleDropContents {inner: SoundStruct<'mc>},
	ItemBundleInsert {inner: SoundStruct<'mc>},
	ItemBundleRemoveOne {inner: SoundStruct<'mc>},
	ItemChorusFruitTeleport {inner: SoundStruct<'mc>},
	ItemCropPlant {inner: SoundStruct<'mc>},
	ItemCrossbowHit {inner: SoundStruct<'mc>},
	ItemCrossbowLoadingEnd {inner: SoundStruct<'mc>},
	ItemCrossbowLoadingMiddle {inner: SoundStruct<'mc>},
	ItemCrossbowLoadingStart {inner: SoundStruct<'mc>},
	ItemCrossbowQuickCharge1 {inner: SoundStruct<'mc>},
	ItemCrossbowQuickCharge2 {inner: SoundStruct<'mc>},
	ItemCrossbowQuickCharge3 {inner: SoundStruct<'mc>},
	ItemCrossbowShoot {inner: SoundStruct<'mc>},
	ItemDyeUse {inner: SoundStruct<'mc>},
	ItemElytraFlying {inner: SoundStruct<'mc>},
	ItemFirechargeUse {inner: SoundStruct<'mc>},
	ItemFlintandsteelUse {inner: SoundStruct<'mc>},
	ItemGlowInkSacUse {inner: SoundStruct<'mc>},
	ItemGoatHornPlay {inner: SoundStruct<'mc>},
	ItemGoatHornSound0 {inner: SoundStruct<'mc>},
	ItemGoatHornSound1 {inner: SoundStruct<'mc>},
	ItemGoatHornSound2 {inner: SoundStruct<'mc>},
	ItemGoatHornSound3 {inner: SoundStruct<'mc>},
	ItemGoatHornSound4 {inner: SoundStruct<'mc>},
	ItemGoatHornSound5 {inner: SoundStruct<'mc>},
	ItemGoatHornSound6 {inner: SoundStruct<'mc>},
	ItemGoatHornSound7 {inner: SoundStruct<'mc>},
	ItemHoeTill {inner: SoundStruct<'mc>},
	ItemHoneycombWaxOn {inner: SoundStruct<'mc>},
	ItemHoneyBottleDrink {inner: SoundStruct<'mc>},
	ItemInkSacUse {inner: SoundStruct<'mc>},
	ItemLodestoneCompassLock {inner: SoundStruct<'mc>},
	ItemNetherWartPlant {inner: SoundStruct<'mc>},
	ItemShieldBlock {inner: SoundStruct<'mc>},
	ItemShieldBreak {inner: SoundStruct<'mc>},
	ItemShovelFlatten {inner: SoundStruct<'mc>},
	ItemSpyglassStopUsing {inner: SoundStruct<'mc>},
	ItemSpyglassUse {inner: SoundStruct<'mc>},
	ItemTotemUse {inner: SoundStruct<'mc>},
	ItemTridentHit {inner: SoundStruct<'mc>},
	ItemTridentHitGround {inner: SoundStruct<'mc>},
	ItemTridentReturn {inner: SoundStruct<'mc>},
	ItemTridentRiptide1 {inner: SoundStruct<'mc>},
	ItemTridentRiptide2 {inner: SoundStruct<'mc>},
	ItemTridentRiptide3 {inner: SoundStruct<'mc>},
	ItemTridentThrow {inner: SoundStruct<'mc>},
	ItemTridentThunder {inner: SoundStruct<'mc>},
	MusicCreative {inner: SoundStruct<'mc>},
	MusicCredits {inner: SoundStruct<'mc>},
	MusicDisc11 {inner: SoundStruct<'mc>},
	MusicDisc13 {inner: SoundStruct<'mc>},
	MusicDisc5 {inner: SoundStruct<'mc>},
	MusicDiscBlocks {inner: SoundStruct<'mc>},
	MusicDiscCat {inner: SoundStruct<'mc>},
	MusicDiscChirp {inner: SoundStruct<'mc>},
	MusicDiscFar {inner: SoundStruct<'mc>},
	MusicDiscMall {inner: SoundStruct<'mc>},
	MusicDiscMellohi {inner: SoundStruct<'mc>},
	MusicDiscOtherside {inner: SoundStruct<'mc>},
	MusicDiscPigstep {inner: SoundStruct<'mc>},
	MusicDiscRelic {inner: SoundStruct<'mc>},
	MusicDiscStal {inner: SoundStruct<'mc>},
	MusicDiscStrad {inner: SoundStruct<'mc>},
	MusicDiscWait {inner: SoundStruct<'mc>},
	MusicDiscWard {inner: SoundStruct<'mc>},
	MusicDragon {inner: SoundStruct<'mc>},
	MusicEnd {inner: SoundStruct<'mc>},
	MusicGame {inner: SoundStruct<'mc>},
	MusicMenu {inner: SoundStruct<'mc>},
	MusicNetherBasaltDeltas {inner: SoundStruct<'mc>},
	MusicNetherCrimsonForest {inner: SoundStruct<'mc>},
	MusicNetherNetherWastes {inner: SoundStruct<'mc>},
	MusicNetherSoulSandValley {inner: SoundStruct<'mc>},
	MusicNetherWarpedForest {inner: SoundStruct<'mc>},
	MusicOverworldBadlands {inner: SoundStruct<'mc>},
	MusicOverworldBambooJungle {inner: SoundStruct<'mc>},
	MusicOverworldCherryGrove {inner: SoundStruct<'mc>},
	MusicOverworldDeepDark {inner: SoundStruct<'mc>},
	MusicOverworldDesert {inner: SoundStruct<'mc>},
	MusicOverworldDripstoneCaves {inner: SoundStruct<'mc>},
	MusicOverworldFlowerForest {inner: SoundStruct<'mc>},
	MusicOverworldForest {inner: SoundStruct<'mc>},
	MusicOverworldFrozenPeaks {inner: SoundStruct<'mc>},
	MusicOverworldGrove {inner: SoundStruct<'mc>},
	MusicOverworldJaggedPeaks {inner: SoundStruct<'mc>},
	MusicOverworldJungle {inner: SoundStruct<'mc>},
	MusicOverworldLushCaves {inner: SoundStruct<'mc>},
	MusicOverworldMeadow {inner: SoundStruct<'mc>},
	MusicOverworldOldGrowthTaiga {inner: SoundStruct<'mc>},
	MusicOverworldSnowySlopes {inner: SoundStruct<'mc>},
	MusicOverworldSparseJungle {inner: SoundStruct<'mc>},
	MusicOverworldStonyPeaks {inner: SoundStruct<'mc>},
	MusicOverworldSwamp {inner: SoundStruct<'mc>},
	MusicUnderWater {inner: SoundStruct<'mc>},
	ParticleSoulEscape {inner: SoundStruct<'mc>},
	UiButtonClick {inner: SoundStruct<'mc>},
	UiCartographyTableTakeResult {inner: SoundStruct<'mc>},
	UiLoomSelectPattern {inner: SoundStruct<'mc>},
	UiLoomTakeResult {inner: SoundStruct<'mc>},
	UiStonecutterSelectRecipe {inner: SoundStruct<'mc>},
	UiStonecutterTakeResult {inner: SoundStruct<'mc>},
	UiToastChallengeComplete {inner: SoundStruct<'mc>},
	UiToastIn {inner: SoundStruct<'mc>},
	UiToastOut {inner: SoundStruct<'mc>},
	WeatherRain {inner: SoundStruct<'mc>},
	WeatherRainAbove {inner: SoundStruct<'mc>},
}
impl<'mc> std::fmt::Display for Sound<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           Sound::AmbientBasaltDeltasAdditions { .. } => f.write_str("AMBIENT_BASALT_DELTAS_ADDITIONS"),
           Sound::AmbientBasaltDeltasLoop { .. } => f.write_str("AMBIENT_BASALT_DELTAS_LOOP"),
           Sound::AmbientBasaltDeltasMood { .. } => f.write_str("AMBIENT_BASALT_DELTAS_MOOD"),
           Sound::AmbientCave { .. } => f.write_str("AMBIENT_CAVE"),
           Sound::AmbientCrimsonForestAdditions { .. } => f.write_str("AMBIENT_CRIMSON_FOREST_ADDITIONS"),
           Sound::AmbientCrimsonForestLoop { .. } => f.write_str("AMBIENT_CRIMSON_FOREST_LOOP"),
           Sound::AmbientCrimsonForestMood { .. } => f.write_str("AMBIENT_CRIMSON_FOREST_MOOD"),
           Sound::AmbientNetherWastesAdditions { .. } => f.write_str("AMBIENT_NETHER_WASTES_ADDITIONS"),
           Sound::AmbientNetherWastesLoop { .. } => f.write_str("AMBIENT_NETHER_WASTES_LOOP"),
           Sound::AmbientNetherWastesMood { .. } => f.write_str("AMBIENT_NETHER_WASTES_MOOD"),
           Sound::AmbientSoulSandValleyAdditions { .. } => f.write_str("AMBIENT_SOUL_SAND_VALLEY_ADDITIONS"),
           Sound::AmbientSoulSandValleyLoop { .. } => f.write_str("AMBIENT_SOUL_SAND_VALLEY_LOOP"),
           Sound::AmbientSoulSandValleyMood { .. } => f.write_str("AMBIENT_SOUL_SAND_VALLEY_MOOD"),
           Sound::AmbientUnderwaterEnter { .. } => f.write_str("AMBIENT_UNDERWATER_ENTER"),
           Sound::AmbientUnderwaterExit { .. } => f.write_str("AMBIENT_UNDERWATER_EXIT"),
           Sound::AmbientUnderwaterLoop { .. } => f.write_str("AMBIENT_UNDERWATER_LOOP"),
           Sound::AmbientUnderwaterLoopAdditions { .. } => f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS"),
           Sound::AmbientUnderwaterLoopAdditionsRare { .. } => f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE"),
           Sound::AmbientUnderwaterLoopAdditionsUltraRare { .. } => f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE"),
           Sound::AmbientWarpedForestAdditions { .. } => f.write_str("AMBIENT_WARPED_FOREST_ADDITIONS"),
           Sound::AmbientWarpedForestLoop { .. } => f.write_str("AMBIENT_WARPED_FOREST_LOOP"),
           Sound::AmbientWarpedForestMood { .. } => f.write_str("AMBIENT_WARPED_FOREST_MOOD"),
           Sound::BlockAmethystBlockBreak { .. } => f.write_str("BLOCK_AMETHYST_BLOCK_BREAK"),
           Sound::BlockAmethystBlockChime { .. } => f.write_str("BLOCK_AMETHYST_BLOCK_CHIME"),
           Sound::BlockAmethystBlockFall { .. } => f.write_str("BLOCK_AMETHYST_BLOCK_FALL"),
           Sound::BlockAmethystBlockHit { .. } => f.write_str("BLOCK_AMETHYST_BLOCK_HIT"),
           Sound::BlockAmethystBlockPlace { .. } => f.write_str("BLOCK_AMETHYST_BLOCK_PLACE"),
           Sound::BlockAmethystBlockResonate { .. } => f.write_str("BLOCK_AMETHYST_BLOCK_RESONATE"),
           Sound::BlockAmethystBlockStep { .. } => f.write_str("BLOCK_AMETHYST_BLOCK_STEP"),
           Sound::BlockAmethystClusterBreak { .. } => f.write_str("BLOCK_AMETHYST_CLUSTER_BREAK"),
           Sound::BlockAmethystClusterFall { .. } => f.write_str("BLOCK_AMETHYST_CLUSTER_FALL"),
           Sound::BlockAmethystClusterHit { .. } => f.write_str("BLOCK_AMETHYST_CLUSTER_HIT"),
           Sound::BlockAmethystClusterPlace { .. } => f.write_str("BLOCK_AMETHYST_CLUSTER_PLACE"),
           Sound::BlockAmethystClusterStep { .. } => f.write_str("BLOCK_AMETHYST_CLUSTER_STEP"),
           Sound::BlockAncientDebrisBreak { .. } => f.write_str("BLOCK_ANCIENT_DEBRIS_BREAK"),
           Sound::BlockAncientDebrisFall { .. } => f.write_str("BLOCK_ANCIENT_DEBRIS_FALL"),
           Sound::BlockAncientDebrisHit { .. } => f.write_str("BLOCK_ANCIENT_DEBRIS_HIT"),
           Sound::BlockAncientDebrisPlace { .. } => f.write_str("BLOCK_ANCIENT_DEBRIS_PLACE"),
           Sound::BlockAncientDebrisStep { .. } => f.write_str("BLOCK_ANCIENT_DEBRIS_STEP"),
           Sound::BlockAnvilBreak { .. } => f.write_str("BLOCK_ANVIL_BREAK"),
           Sound::BlockAnvilDestroy { .. } => f.write_str("BLOCK_ANVIL_DESTROY"),
           Sound::BlockAnvilFall { .. } => f.write_str("BLOCK_ANVIL_FALL"),
           Sound::BlockAnvilHit { .. } => f.write_str("BLOCK_ANVIL_HIT"),
           Sound::BlockAnvilLand { .. } => f.write_str("BLOCK_ANVIL_LAND"),
           Sound::BlockAnvilPlace { .. } => f.write_str("BLOCK_ANVIL_PLACE"),
           Sound::BlockAnvilStep { .. } => f.write_str("BLOCK_ANVIL_STEP"),
           Sound::BlockAnvilUse { .. } => f.write_str("BLOCK_ANVIL_USE"),
           Sound::BlockAzaleaBreak { .. } => f.write_str("BLOCK_AZALEA_BREAK"),
           Sound::BlockAzaleaFall { .. } => f.write_str("BLOCK_AZALEA_FALL"),
           Sound::BlockAzaleaHit { .. } => f.write_str("BLOCK_AZALEA_HIT"),
           Sound::BlockAzaleaLeavesBreak { .. } => f.write_str("BLOCK_AZALEA_LEAVES_BREAK"),
           Sound::BlockAzaleaLeavesFall { .. } => f.write_str("BLOCK_AZALEA_LEAVES_FALL"),
           Sound::BlockAzaleaLeavesHit { .. } => f.write_str("BLOCK_AZALEA_LEAVES_HIT"),
           Sound::BlockAzaleaLeavesPlace { .. } => f.write_str("BLOCK_AZALEA_LEAVES_PLACE"),
           Sound::BlockAzaleaLeavesStep { .. } => f.write_str("BLOCK_AZALEA_LEAVES_STEP"),
           Sound::BlockAzaleaPlace { .. } => f.write_str("BLOCK_AZALEA_PLACE"),
           Sound::BlockAzaleaStep { .. } => f.write_str("BLOCK_AZALEA_STEP"),
           Sound::BlockBambooBreak { .. } => f.write_str("BLOCK_BAMBOO_BREAK"),
           Sound::BlockBambooFall { .. } => f.write_str("BLOCK_BAMBOO_FALL"),
           Sound::BlockBambooHit { .. } => f.write_str("BLOCK_BAMBOO_HIT"),
           Sound::BlockBambooPlace { .. } => f.write_str("BLOCK_BAMBOO_PLACE"),
           Sound::BlockBambooSaplingBreak { .. } => f.write_str("BLOCK_BAMBOO_SAPLING_BREAK"),
           Sound::BlockBambooSaplingHit { .. } => f.write_str("BLOCK_BAMBOO_SAPLING_HIT"),
           Sound::BlockBambooSaplingPlace { .. } => f.write_str("BLOCK_BAMBOO_SAPLING_PLACE"),
           Sound::BlockBambooStep { .. } => f.write_str("BLOCK_BAMBOO_STEP"),
           Sound::BlockBambooWoodBreak { .. } => f.write_str("BLOCK_BAMBOO_WOOD_BREAK"),
           Sound::BlockBambooWoodButtonClickOff { .. } => f.write_str("BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF"),
           Sound::BlockBambooWoodButtonClickOn { .. } => f.write_str("BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON"),
           Sound::BlockBambooWoodDoorClose { .. } => f.write_str("BLOCK_BAMBOO_WOOD_DOOR_CLOSE"),
           Sound::BlockBambooWoodDoorOpen { .. } => f.write_str("BLOCK_BAMBOO_WOOD_DOOR_OPEN"),
           Sound::BlockBambooWoodFall { .. } => f.write_str("BLOCK_BAMBOO_WOOD_FALL"),
           Sound::BlockBambooWoodFenceGateClose { .. } => f.write_str("BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE"),
           Sound::BlockBambooWoodFenceGateOpen { .. } => f.write_str("BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN"),
           Sound::BlockBambooWoodHangingSignBreak { .. } => f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK"),
           Sound::BlockBambooWoodHangingSignFall { .. } => f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL"),
           Sound::BlockBambooWoodHangingSignHit { .. } => f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT"),
           Sound::BlockBambooWoodHangingSignPlace { .. } => f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE"),
           Sound::BlockBambooWoodHangingSignStep { .. } => f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP"),
           Sound::BlockBambooWoodHit { .. } => f.write_str("BLOCK_BAMBOO_WOOD_HIT"),
           Sound::BlockBambooWoodPlace { .. } => f.write_str("BLOCK_BAMBOO_WOOD_PLACE"),
           Sound::BlockBambooWoodPressurePlateClickOff { .. } => f.write_str("BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF"),
           Sound::BlockBambooWoodPressurePlateClickOn { .. } => f.write_str("BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON"),
           Sound::BlockBambooWoodStep { .. } => f.write_str("BLOCK_BAMBOO_WOOD_STEP"),
           Sound::BlockBambooWoodTrapdoorClose { .. } => f.write_str("BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE"),
           Sound::BlockBambooWoodTrapdoorOpen { .. } => f.write_str("BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN"),
           Sound::BlockBarrelClose { .. } => f.write_str("BLOCK_BARREL_CLOSE"),
           Sound::BlockBarrelOpen { .. } => f.write_str("BLOCK_BARREL_OPEN"),
           Sound::BlockBasaltBreak { .. } => f.write_str("BLOCK_BASALT_BREAK"),
           Sound::BlockBasaltFall { .. } => f.write_str("BLOCK_BASALT_FALL"),
           Sound::BlockBasaltHit { .. } => f.write_str("BLOCK_BASALT_HIT"),
           Sound::BlockBasaltPlace { .. } => f.write_str("BLOCK_BASALT_PLACE"),
           Sound::BlockBasaltStep { .. } => f.write_str("BLOCK_BASALT_STEP"),
           Sound::BlockBeaconActivate { .. } => f.write_str("BLOCK_BEACON_ACTIVATE"),
           Sound::BlockBeaconAmbient { .. } => f.write_str("BLOCK_BEACON_AMBIENT"),
           Sound::BlockBeaconDeactivate { .. } => f.write_str("BLOCK_BEACON_DEACTIVATE"),
           Sound::BlockBeaconPowerSelect { .. } => f.write_str("BLOCK_BEACON_POWER_SELECT"),
           Sound::BlockBeehiveDrip { .. } => f.write_str("BLOCK_BEEHIVE_DRIP"),
           Sound::BlockBeehiveEnter { .. } => f.write_str("BLOCK_BEEHIVE_ENTER"),
           Sound::BlockBeehiveExit { .. } => f.write_str("BLOCK_BEEHIVE_EXIT"),
           Sound::BlockBeehiveShear { .. } => f.write_str("BLOCK_BEEHIVE_SHEAR"),
           Sound::BlockBeehiveWork { .. } => f.write_str("BLOCK_BEEHIVE_WORK"),
           Sound::BlockBellResonate { .. } => f.write_str("BLOCK_BELL_RESONATE"),
           Sound::BlockBellUse { .. } => f.write_str("BLOCK_BELL_USE"),
           Sound::BlockBigDripleafBreak { .. } => f.write_str("BLOCK_BIG_DRIPLEAF_BREAK"),
           Sound::BlockBigDripleafFall { .. } => f.write_str("BLOCK_BIG_DRIPLEAF_FALL"),
           Sound::BlockBigDripleafHit { .. } => f.write_str("BLOCK_BIG_DRIPLEAF_HIT"),
           Sound::BlockBigDripleafPlace { .. } => f.write_str("BLOCK_BIG_DRIPLEAF_PLACE"),
           Sound::BlockBigDripleafStep { .. } => f.write_str("BLOCK_BIG_DRIPLEAF_STEP"),
           Sound::BlockBigDripleafTiltDown { .. } => f.write_str("BLOCK_BIG_DRIPLEAF_TILT_DOWN"),
           Sound::BlockBigDripleafTiltUp { .. } => f.write_str("BLOCK_BIG_DRIPLEAF_TILT_UP"),
           Sound::BlockBlastfurnaceFireCrackle { .. } => f.write_str("BLOCK_BLASTFURNACE_FIRE_CRACKLE"),
           Sound::BlockBoneBlockBreak { .. } => f.write_str("BLOCK_BONE_BLOCK_BREAK"),
           Sound::BlockBoneBlockFall { .. } => f.write_str("BLOCK_BONE_BLOCK_FALL"),
           Sound::BlockBoneBlockHit { .. } => f.write_str("BLOCK_BONE_BLOCK_HIT"),
           Sound::BlockBoneBlockPlace { .. } => f.write_str("BLOCK_BONE_BLOCK_PLACE"),
           Sound::BlockBoneBlockStep { .. } => f.write_str("BLOCK_BONE_BLOCK_STEP"),
           Sound::BlockBrewingStandBrew { .. } => f.write_str("BLOCK_BREWING_STAND_BREW"),
           Sound::BlockBubbleColumnBubblePop { .. } => f.write_str("BLOCK_BUBBLE_COLUMN_BUBBLE_POP"),
           Sound::BlockBubbleColumnUpwardsAmbient { .. } => f.write_str("BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT"),
           Sound::BlockBubbleColumnUpwardsInside { .. } => f.write_str("BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE"),
           Sound::BlockBubbleColumnWhirlpoolAmbient { .. } => f.write_str("BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT"),
           Sound::BlockBubbleColumnWhirlpoolInside { .. } => f.write_str("BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE"),
           Sound::BlockCakeAddCandle { .. } => f.write_str("BLOCK_CAKE_ADD_CANDLE"),
           Sound::BlockCalciteBreak { .. } => f.write_str("BLOCK_CALCITE_BREAK"),
           Sound::BlockCalciteFall { .. } => f.write_str("BLOCK_CALCITE_FALL"),
           Sound::BlockCalciteHit { .. } => f.write_str("BLOCK_CALCITE_HIT"),
           Sound::BlockCalcitePlace { .. } => f.write_str("BLOCK_CALCITE_PLACE"),
           Sound::BlockCalciteStep { .. } => f.write_str("BLOCK_CALCITE_STEP"),
           Sound::BlockCampfireCrackle { .. } => f.write_str("BLOCK_CAMPFIRE_CRACKLE"),
           Sound::BlockCandleAmbient { .. } => f.write_str("BLOCK_CANDLE_AMBIENT"),
           Sound::BlockCandleBreak { .. } => f.write_str("BLOCK_CANDLE_BREAK"),
           Sound::BlockCandleExtinguish { .. } => f.write_str("BLOCK_CANDLE_EXTINGUISH"),
           Sound::BlockCandleFall { .. } => f.write_str("BLOCK_CANDLE_FALL"),
           Sound::BlockCandleHit { .. } => f.write_str("BLOCK_CANDLE_HIT"),
           Sound::BlockCandlePlace { .. } => f.write_str("BLOCK_CANDLE_PLACE"),
           Sound::BlockCandleStep { .. } => f.write_str("BLOCK_CANDLE_STEP"),
           Sound::BlockCaveVinesBreak { .. } => f.write_str("BLOCK_CAVE_VINES_BREAK"),
           Sound::BlockCaveVinesFall { .. } => f.write_str("BLOCK_CAVE_VINES_FALL"),
           Sound::BlockCaveVinesHit { .. } => f.write_str("BLOCK_CAVE_VINES_HIT"),
           Sound::BlockCaveVinesPickBerries { .. } => f.write_str("BLOCK_CAVE_VINES_PICK_BERRIES"),
           Sound::BlockCaveVinesPlace { .. } => f.write_str("BLOCK_CAVE_VINES_PLACE"),
           Sound::BlockCaveVinesStep { .. } => f.write_str("BLOCK_CAVE_VINES_STEP"),
           Sound::BlockChainBreak { .. } => f.write_str("BLOCK_CHAIN_BREAK"),
           Sound::BlockChainFall { .. } => f.write_str("BLOCK_CHAIN_FALL"),
           Sound::BlockChainHit { .. } => f.write_str("BLOCK_CHAIN_HIT"),
           Sound::BlockChainPlace { .. } => f.write_str("BLOCK_CHAIN_PLACE"),
           Sound::BlockChainStep { .. } => f.write_str("BLOCK_CHAIN_STEP"),
           Sound::BlockCherryLeavesBreak { .. } => f.write_str("BLOCK_CHERRY_LEAVES_BREAK"),
           Sound::BlockCherryLeavesFall { .. } => f.write_str("BLOCK_CHERRY_LEAVES_FALL"),
           Sound::BlockCherryLeavesHit { .. } => f.write_str("BLOCK_CHERRY_LEAVES_HIT"),
           Sound::BlockCherryLeavesPlace { .. } => f.write_str("BLOCK_CHERRY_LEAVES_PLACE"),
           Sound::BlockCherryLeavesStep { .. } => f.write_str("BLOCK_CHERRY_LEAVES_STEP"),
           Sound::BlockCherrySaplingBreak { .. } => f.write_str("BLOCK_CHERRY_SAPLING_BREAK"),
           Sound::BlockCherrySaplingFall { .. } => f.write_str("BLOCK_CHERRY_SAPLING_FALL"),
           Sound::BlockCherrySaplingHit { .. } => f.write_str("BLOCK_CHERRY_SAPLING_HIT"),
           Sound::BlockCherrySaplingPlace { .. } => f.write_str("BLOCK_CHERRY_SAPLING_PLACE"),
           Sound::BlockCherrySaplingStep { .. } => f.write_str("BLOCK_CHERRY_SAPLING_STEP"),
           Sound::BlockCherryWoodBreak { .. } => f.write_str("BLOCK_CHERRY_WOOD_BREAK"),
           Sound::BlockCherryWoodButtonClickOff { .. } => f.write_str("BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF"),
           Sound::BlockCherryWoodButtonClickOn { .. } => f.write_str("BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON"),
           Sound::BlockCherryWoodDoorClose { .. } => f.write_str("BLOCK_CHERRY_WOOD_DOOR_CLOSE"),
           Sound::BlockCherryWoodDoorOpen { .. } => f.write_str("BLOCK_CHERRY_WOOD_DOOR_OPEN"),
           Sound::BlockCherryWoodFall { .. } => f.write_str("BLOCK_CHERRY_WOOD_FALL"),
           Sound::BlockCherryWoodFenceGateClose { .. } => f.write_str("BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE"),
           Sound::BlockCherryWoodFenceGateOpen { .. } => f.write_str("BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN"),
           Sound::BlockCherryWoodHangingSignBreak { .. } => f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK"),
           Sound::BlockCherryWoodHangingSignFall { .. } => f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL"),
           Sound::BlockCherryWoodHangingSignHit { .. } => f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT"),
           Sound::BlockCherryWoodHangingSignPlace { .. } => f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE"),
           Sound::BlockCherryWoodHangingSignStep { .. } => f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP"),
           Sound::BlockCherryWoodHit { .. } => f.write_str("BLOCK_CHERRY_WOOD_HIT"),
           Sound::BlockCherryWoodPlace { .. } => f.write_str("BLOCK_CHERRY_WOOD_PLACE"),
           Sound::BlockCherryWoodPressurePlateClickOff { .. } => f.write_str("BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF"),
           Sound::BlockCherryWoodPressurePlateClickOn { .. } => f.write_str("BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON"),
           Sound::BlockCherryWoodStep { .. } => f.write_str("BLOCK_CHERRY_WOOD_STEP"),
           Sound::BlockCherryWoodTrapdoorClose { .. } => f.write_str("BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE"),
           Sound::BlockCherryWoodTrapdoorOpen { .. } => f.write_str("BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN"),
           Sound::BlockChestClose { .. } => f.write_str("BLOCK_CHEST_CLOSE"),
           Sound::BlockChestLocked { .. } => f.write_str("BLOCK_CHEST_LOCKED"),
           Sound::BlockChestOpen { .. } => f.write_str("BLOCK_CHEST_OPEN"),
           Sound::BlockChiseledBookshelfBreak { .. } => f.write_str("BLOCK_CHISELED_BOOKSHELF_BREAK"),
           Sound::BlockChiseledBookshelfFall { .. } => f.write_str("BLOCK_CHISELED_BOOKSHELF_FALL"),
           Sound::BlockChiseledBookshelfHit { .. } => f.write_str("BLOCK_CHISELED_BOOKSHELF_HIT"),
           Sound::BlockChiseledBookshelfInsert { .. } => f.write_str("BLOCK_CHISELED_BOOKSHELF_INSERT"),
           Sound::BlockChiseledBookshelfInsertEnchanted { .. } => f.write_str("BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED"),
           Sound::BlockChiseledBookshelfPickup { .. } => f.write_str("BLOCK_CHISELED_BOOKSHELF_PICKUP"),
           Sound::BlockChiseledBookshelfPickupEnchanted { .. } => f.write_str("BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED"),
           Sound::BlockChiseledBookshelfPlace { .. } => f.write_str("BLOCK_CHISELED_BOOKSHELF_PLACE"),
           Sound::BlockChiseledBookshelfStep { .. } => f.write_str("BLOCK_CHISELED_BOOKSHELF_STEP"),
           Sound::BlockChorusFlowerDeath { .. } => f.write_str("BLOCK_CHORUS_FLOWER_DEATH"),
           Sound::BlockChorusFlowerGrow { .. } => f.write_str("BLOCK_CHORUS_FLOWER_GROW"),
           Sound::BlockComparatorClick { .. } => f.write_str("BLOCK_COMPARATOR_CLICK"),
           Sound::BlockComposterEmpty { .. } => f.write_str("BLOCK_COMPOSTER_EMPTY"),
           Sound::BlockComposterFill { .. } => f.write_str("BLOCK_COMPOSTER_FILL"),
           Sound::BlockComposterFillSuccess { .. } => f.write_str("BLOCK_COMPOSTER_FILL_SUCCESS"),
           Sound::BlockComposterReady { .. } => f.write_str("BLOCK_COMPOSTER_READY"),
           Sound::BlockConduitActivate { .. } => f.write_str("BLOCK_CONDUIT_ACTIVATE"),
           Sound::BlockConduitAmbient { .. } => f.write_str("BLOCK_CONDUIT_AMBIENT"),
           Sound::BlockConduitAmbientShort { .. } => f.write_str("BLOCK_CONDUIT_AMBIENT_SHORT"),
           Sound::BlockConduitAttackTarget { .. } => f.write_str("BLOCK_CONDUIT_ATTACK_TARGET"),
           Sound::BlockConduitDeactivate { .. } => f.write_str("BLOCK_CONDUIT_DEACTIVATE"),
           Sound::BlockCopperBreak { .. } => f.write_str("BLOCK_COPPER_BREAK"),
           Sound::BlockCopperBulbBreak { .. } => f.write_str("BLOCK_COPPER_BULB_BREAK"),
           Sound::BlockCopperBulbFall { .. } => f.write_str("BLOCK_COPPER_BULB_FALL"),
           Sound::BlockCopperBulbHit { .. } => f.write_str("BLOCK_COPPER_BULB_HIT"),
           Sound::BlockCopperBulbPlace { .. } => f.write_str("BLOCK_COPPER_BULB_PLACE"),
           Sound::BlockCopperBulbStep { .. } => f.write_str("BLOCK_COPPER_BULB_STEP"),
           Sound::BlockCopperBulbTurnOff { .. } => f.write_str("BLOCK_COPPER_BULB_TURN_OFF"),
           Sound::BlockCopperBulbTurnOn { .. } => f.write_str("BLOCK_COPPER_BULB_TURN_ON"),
           Sound::BlockCopperDoorClose { .. } => f.write_str("BLOCK_COPPER_DOOR_CLOSE"),
           Sound::BlockCopperDoorOpen { .. } => f.write_str("BLOCK_COPPER_DOOR_OPEN"),
           Sound::BlockCopperFall { .. } => f.write_str("BLOCK_COPPER_FALL"),
           Sound::BlockCopperGrateBreak { .. } => f.write_str("BLOCK_COPPER_GRATE_BREAK"),
           Sound::BlockCopperGrateFall { .. } => f.write_str("BLOCK_COPPER_GRATE_FALL"),
           Sound::BlockCopperGrateHit { .. } => f.write_str("BLOCK_COPPER_GRATE_HIT"),
           Sound::BlockCopperGratePlace { .. } => f.write_str("BLOCK_COPPER_GRATE_PLACE"),
           Sound::BlockCopperGrateStep { .. } => f.write_str("BLOCK_COPPER_GRATE_STEP"),
           Sound::BlockCopperHit { .. } => f.write_str("BLOCK_COPPER_HIT"),
           Sound::BlockCopperPlace { .. } => f.write_str("BLOCK_COPPER_PLACE"),
           Sound::BlockCopperStep { .. } => f.write_str("BLOCK_COPPER_STEP"),
           Sound::BlockCopperTrapdoorClose { .. } => f.write_str("BLOCK_COPPER_TRAPDOOR_CLOSE"),
           Sound::BlockCopperTrapdoorOpen { .. } => f.write_str("BLOCK_COPPER_TRAPDOOR_OPEN"),
           Sound::BlockCoralBlockBreak { .. } => f.write_str("BLOCK_CORAL_BLOCK_BREAK"),
           Sound::BlockCoralBlockFall { .. } => f.write_str("BLOCK_CORAL_BLOCK_FALL"),
           Sound::BlockCoralBlockHit { .. } => f.write_str("BLOCK_CORAL_BLOCK_HIT"),
           Sound::BlockCoralBlockPlace { .. } => f.write_str("BLOCK_CORAL_BLOCK_PLACE"),
           Sound::BlockCoralBlockStep { .. } => f.write_str("BLOCK_CORAL_BLOCK_STEP"),
           Sound::BlockCrafterCraft { .. } => f.write_str("BLOCK_CRAFTER_CRAFT"),
           Sound::BlockCrafterFail { .. } => f.write_str("BLOCK_CRAFTER_FAIL"),
           Sound::BlockCropBreak { .. } => f.write_str("BLOCK_CROP_BREAK"),
           Sound::BlockDecoratedPotBreak { .. } => f.write_str("BLOCK_DECORATED_POT_BREAK"),
           Sound::BlockDecoratedPotFall { .. } => f.write_str("BLOCK_DECORATED_POT_FALL"),
           Sound::BlockDecoratedPotHit { .. } => f.write_str("BLOCK_DECORATED_POT_HIT"),
           Sound::BlockDecoratedPotInsert { .. } => f.write_str("BLOCK_DECORATED_POT_INSERT"),
           Sound::BlockDecoratedPotInsertFail { .. } => f.write_str("BLOCK_DECORATED_POT_INSERT_FAIL"),
           Sound::BlockDecoratedPotPlace { .. } => f.write_str("BLOCK_DECORATED_POT_PLACE"),
           Sound::BlockDecoratedPotShatter { .. } => f.write_str("BLOCK_DECORATED_POT_SHATTER"),
           Sound::BlockDecoratedPotStep { .. } => f.write_str("BLOCK_DECORATED_POT_STEP"),
           Sound::BlockDeepslateBreak { .. } => f.write_str("BLOCK_DEEPSLATE_BREAK"),
           Sound::BlockDeepslateBricksBreak { .. } => f.write_str("BLOCK_DEEPSLATE_BRICKS_BREAK"),
           Sound::BlockDeepslateBricksFall { .. } => f.write_str("BLOCK_DEEPSLATE_BRICKS_FALL"),
           Sound::BlockDeepslateBricksHit { .. } => f.write_str("BLOCK_DEEPSLATE_BRICKS_HIT"),
           Sound::BlockDeepslateBricksPlace { .. } => f.write_str("BLOCK_DEEPSLATE_BRICKS_PLACE"),
           Sound::BlockDeepslateBricksStep { .. } => f.write_str("BLOCK_DEEPSLATE_BRICKS_STEP"),
           Sound::BlockDeepslateFall { .. } => f.write_str("BLOCK_DEEPSLATE_FALL"),
           Sound::BlockDeepslateHit { .. } => f.write_str("BLOCK_DEEPSLATE_HIT"),
           Sound::BlockDeepslatePlace { .. } => f.write_str("BLOCK_DEEPSLATE_PLACE"),
           Sound::BlockDeepslateStep { .. } => f.write_str("BLOCK_DEEPSLATE_STEP"),
           Sound::BlockDeepslateTilesBreak { .. } => f.write_str("BLOCK_DEEPSLATE_TILES_BREAK"),
           Sound::BlockDeepslateTilesFall { .. } => f.write_str("BLOCK_DEEPSLATE_TILES_FALL"),
           Sound::BlockDeepslateTilesHit { .. } => f.write_str("BLOCK_DEEPSLATE_TILES_HIT"),
           Sound::BlockDeepslateTilesPlace { .. } => f.write_str("BLOCK_DEEPSLATE_TILES_PLACE"),
           Sound::BlockDeepslateTilesStep { .. } => f.write_str("BLOCK_DEEPSLATE_TILES_STEP"),
           Sound::BlockDispenserDispense { .. } => f.write_str("BLOCK_DISPENSER_DISPENSE"),
           Sound::BlockDispenserFail { .. } => f.write_str("BLOCK_DISPENSER_FAIL"),
           Sound::BlockDispenserLaunch { .. } => f.write_str("BLOCK_DISPENSER_LAUNCH"),
           Sound::BlockDripstoneBlockBreak { .. } => f.write_str("BLOCK_DRIPSTONE_BLOCK_BREAK"),
           Sound::BlockDripstoneBlockFall { .. } => f.write_str("BLOCK_DRIPSTONE_BLOCK_FALL"),
           Sound::BlockDripstoneBlockHit { .. } => f.write_str("BLOCK_DRIPSTONE_BLOCK_HIT"),
           Sound::BlockDripstoneBlockPlace { .. } => f.write_str("BLOCK_DRIPSTONE_BLOCK_PLACE"),
           Sound::BlockDripstoneBlockStep { .. } => f.write_str("BLOCK_DRIPSTONE_BLOCK_STEP"),
           Sound::BlockEnchantmentTableUse { .. } => f.write_str("BLOCK_ENCHANTMENT_TABLE_USE"),
           Sound::BlockEnderChestClose { .. } => f.write_str("BLOCK_ENDER_CHEST_CLOSE"),
           Sound::BlockEnderChestOpen { .. } => f.write_str("BLOCK_ENDER_CHEST_OPEN"),
           Sound::BlockEndGatewaySpawn { .. } => f.write_str("BLOCK_END_GATEWAY_SPAWN"),
           Sound::BlockEndPortalFrameFill { .. } => f.write_str("BLOCK_END_PORTAL_FRAME_FILL"),
           Sound::BlockEndPortalSpawn { .. } => f.write_str("BLOCK_END_PORTAL_SPAWN"),
           Sound::BlockFenceGateClose { .. } => f.write_str("BLOCK_FENCE_GATE_CLOSE"),
           Sound::BlockFenceGateOpen { .. } => f.write_str("BLOCK_FENCE_GATE_OPEN"),
           Sound::BlockFireAmbient { .. } => f.write_str("BLOCK_FIRE_AMBIENT"),
           Sound::BlockFireExtinguish { .. } => f.write_str("BLOCK_FIRE_EXTINGUISH"),
           Sound::BlockFloweringAzaleaBreak { .. } => f.write_str("BLOCK_FLOWERING_AZALEA_BREAK"),
           Sound::BlockFloweringAzaleaFall { .. } => f.write_str("BLOCK_FLOWERING_AZALEA_FALL"),
           Sound::BlockFloweringAzaleaHit { .. } => f.write_str("BLOCK_FLOWERING_AZALEA_HIT"),
           Sound::BlockFloweringAzaleaPlace { .. } => f.write_str("BLOCK_FLOWERING_AZALEA_PLACE"),
           Sound::BlockFloweringAzaleaStep { .. } => f.write_str("BLOCK_FLOWERING_AZALEA_STEP"),
           Sound::BlockFroglightBreak { .. } => f.write_str("BLOCK_FROGLIGHT_BREAK"),
           Sound::BlockFroglightFall { .. } => f.write_str("BLOCK_FROGLIGHT_FALL"),
           Sound::BlockFroglightHit { .. } => f.write_str("BLOCK_FROGLIGHT_HIT"),
           Sound::BlockFroglightPlace { .. } => f.write_str("BLOCK_FROGLIGHT_PLACE"),
           Sound::BlockFroglightStep { .. } => f.write_str("BLOCK_FROGLIGHT_STEP"),
           Sound::BlockFrogspawnBreak { .. } => f.write_str("BLOCK_FROGSPAWN_BREAK"),
           Sound::BlockFrogspawnFall { .. } => f.write_str("BLOCK_FROGSPAWN_FALL"),
           Sound::BlockFrogspawnHatch { .. } => f.write_str("BLOCK_FROGSPAWN_HATCH"),
           Sound::BlockFrogspawnHit { .. } => f.write_str("BLOCK_FROGSPAWN_HIT"),
           Sound::BlockFrogspawnPlace { .. } => f.write_str("BLOCK_FROGSPAWN_PLACE"),
           Sound::BlockFrogspawnStep { .. } => f.write_str("BLOCK_FROGSPAWN_STEP"),
           Sound::BlockFungusBreak { .. } => f.write_str("BLOCK_FUNGUS_BREAK"),
           Sound::BlockFungusFall { .. } => f.write_str("BLOCK_FUNGUS_FALL"),
           Sound::BlockFungusHit { .. } => f.write_str("BLOCK_FUNGUS_HIT"),
           Sound::BlockFungusPlace { .. } => f.write_str("BLOCK_FUNGUS_PLACE"),
           Sound::BlockFungusStep { .. } => f.write_str("BLOCK_FUNGUS_STEP"),
           Sound::BlockFurnaceFireCrackle { .. } => f.write_str("BLOCK_FURNACE_FIRE_CRACKLE"),
           Sound::BlockGildedBlackstoneBreak { .. } => f.write_str("BLOCK_GILDED_BLACKSTONE_BREAK"),
           Sound::BlockGildedBlackstoneFall { .. } => f.write_str("BLOCK_GILDED_BLACKSTONE_FALL"),
           Sound::BlockGildedBlackstoneHit { .. } => f.write_str("BLOCK_GILDED_BLACKSTONE_HIT"),
           Sound::BlockGildedBlackstonePlace { .. } => f.write_str("BLOCK_GILDED_BLACKSTONE_PLACE"),
           Sound::BlockGildedBlackstoneStep { .. } => f.write_str("BLOCK_GILDED_BLACKSTONE_STEP"),
           Sound::BlockGlassBreak { .. } => f.write_str("BLOCK_GLASS_BREAK"),
           Sound::BlockGlassFall { .. } => f.write_str("BLOCK_GLASS_FALL"),
           Sound::BlockGlassHit { .. } => f.write_str("BLOCK_GLASS_HIT"),
           Sound::BlockGlassPlace { .. } => f.write_str("BLOCK_GLASS_PLACE"),
           Sound::BlockGlassStep { .. } => f.write_str("BLOCK_GLASS_STEP"),
           Sound::BlockGrassBreak { .. } => f.write_str("BLOCK_GRASS_BREAK"),
           Sound::BlockGrassFall { .. } => f.write_str("BLOCK_GRASS_FALL"),
           Sound::BlockGrassHit { .. } => f.write_str("BLOCK_GRASS_HIT"),
           Sound::BlockGrassPlace { .. } => f.write_str("BLOCK_GRASS_PLACE"),
           Sound::BlockGrassStep { .. } => f.write_str("BLOCK_GRASS_STEP"),
           Sound::BlockGravelBreak { .. } => f.write_str("BLOCK_GRAVEL_BREAK"),
           Sound::BlockGravelFall { .. } => f.write_str("BLOCK_GRAVEL_FALL"),
           Sound::BlockGravelHit { .. } => f.write_str("BLOCK_GRAVEL_HIT"),
           Sound::BlockGravelPlace { .. } => f.write_str("BLOCK_GRAVEL_PLACE"),
           Sound::BlockGravelStep { .. } => f.write_str("BLOCK_GRAVEL_STEP"),
           Sound::BlockGrindstoneUse { .. } => f.write_str("BLOCK_GRINDSTONE_USE"),
           Sound::BlockGrowingPlantCrop { .. } => f.write_str("BLOCK_GROWING_PLANT_CROP"),
           Sound::BlockHangingRootsBreak { .. } => f.write_str("BLOCK_HANGING_ROOTS_BREAK"),
           Sound::BlockHangingRootsFall { .. } => f.write_str("BLOCK_HANGING_ROOTS_FALL"),
           Sound::BlockHangingRootsHit { .. } => f.write_str("BLOCK_HANGING_ROOTS_HIT"),
           Sound::BlockHangingRootsPlace { .. } => f.write_str("BLOCK_HANGING_ROOTS_PLACE"),
           Sound::BlockHangingRootsStep { .. } => f.write_str("BLOCK_HANGING_ROOTS_STEP"),
           Sound::BlockHangingSignBreak { .. } => f.write_str("BLOCK_HANGING_SIGN_BREAK"),
           Sound::BlockHangingSignFall { .. } => f.write_str("BLOCK_HANGING_SIGN_FALL"),
           Sound::BlockHangingSignHit { .. } => f.write_str("BLOCK_HANGING_SIGN_HIT"),
           Sound::BlockHangingSignPlace { .. } => f.write_str("BLOCK_HANGING_SIGN_PLACE"),
           Sound::BlockHangingSignStep { .. } => f.write_str("BLOCK_HANGING_SIGN_STEP"),
           Sound::BlockHangingSignWaxedInteractFail { .. } => f.write_str("BLOCK_HANGING_SIGN_WAXED_INTERACT_FAIL"),
           Sound::BlockHoneyBlockBreak { .. } => f.write_str("BLOCK_HONEY_BLOCK_BREAK"),
           Sound::BlockHoneyBlockFall { .. } => f.write_str("BLOCK_HONEY_BLOCK_FALL"),
           Sound::BlockHoneyBlockHit { .. } => f.write_str("BLOCK_HONEY_BLOCK_HIT"),
           Sound::BlockHoneyBlockPlace { .. } => f.write_str("BLOCK_HONEY_BLOCK_PLACE"),
           Sound::BlockHoneyBlockSlide { .. } => f.write_str("BLOCK_HONEY_BLOCK_SLIDE"),
           Sound::BlockHoneyBlockStep { .. } => f.write_str("BLOCK_HONEY_BLOCK_STEP"),
           Sound::BlockIronDoorClose { .. } => f.write_str("BLOCK_IRON_DOOR_CLOSE"),
           Sound::BlockIronDoorOpen { .. } => f.write_str("BLOCK_IRON_DOOR_OPEN"),
           Sound::BlockIronTrapdoorClose { .. } => f.write_str("BLOCK_IRON_TRAPDOOR_CLOSE"),
           Sound::BlockIronTrapdoorOpen { .. } => f.write_str("BLOCK_IRON_TRAPDOOR_OPEN"),
           Sound::BlockLadderBreak { .. } => f.write_str("BLOCK_LADDER_BREAK"),
           Sound::BlockLadderFall { .. } => f.write_str("BLOCK_LADDER_FALL"),
           Sound::BlockLadderHit { .. } => f.write_str("BLOCK_LADDER_HIT"),
           Sound::BlockLadderPlace { .. } => f.write_str("BLOCK_LADDER_PLACE"),
           Sound::BlockLadderStep { .. } => f.write_str("BLOCK_LADDER_STEP"),
           Sound::BlockLanternBreak { .. } => f.write_str("BLOCK_LANTERN_BREAK"),
           Sound::BlockLanternFall { .. } => f.write_str("BLOCK_LANTERN_FALL"),
           Sound::BlockLanternHit { .. } => f.write_str("BLOCK_LANTERN_HIT"),
           Sound::BlockLanternPlace { .. } => f.write_str("BLOCK_LANTERN_PLACE"),
           Sound::BlockLanternStep { .. } => f.write_str("BLOCK_LANTERN_STEP"),
           Sound::BlockLargeAmethystBudBreak { .. } => f.write_str("BLOCK_LARGE_AMETHYST_BUD_BREAK"),
           Sound::BlockLargeAmethystBudPlace { .. } => f.write_str("BLOCK_LARGE_AMETHYST_BUD_PLACE"),
           Sound::BlockLavaAmbient { .. } => f.write_str("BLOCK_LAVA_AMBIENT"),
           Sound::BlockLavaExtinguish { .. } => f.write_str("BLOCK_LAVA_EXTINGUISH"),
           Sound::BlockLavaPop { .. } => f.write_str("BLOCK_LAVA_POP"),
           Sound::BlockLeverClick { .. } => f.write_str("BLOCK_LEVER_CLICK"),
           Sound::BlockLilyPadPlace { .. } => f.write_str("BLOCK_LILY_PAD_PLACE"),
           Sound::BlockLodestoneBreak { .. } => f.write_str("BLOCK_LODESTONE_BREAK"),
           Sound::BlockLodestoneFall { .. } => f.write_str("BLOCK_LODESTONE_FALL"),
           Sound::BlockLodestoneHit { .. } => f.write_str("BLOCK_LODESTONE_HIT"),
           Sound::BlockLodestonePlace { .. } => f.write_str("BLOCK_LODESTONE_PLACE"),
           Sound::BlockLodestoneStep { .. } => f.write_str("BLOCK_LODESTONE_STEP"),
           Sound::BlockMangroveRootsBreak { .. } => f.write_str("BLOCK_MANGROVE_ROOTS_BREAK"),
           Sound::BlockMangroveRootsFall { .. } => f.write_str("BLOCK_MANGROVE_ROOTS_FALL"),
           Sound::BlockMangroveRootsHit { .. } => f.write_str("BLOCK_MANGROVE_ROOTS_HIT"),
           Sound::BlockMangroveRootsPlace { .. } => f.write_str("BLOCK_MANGROVE_ROOTS_PLACE"),
           Sound::BlockMangroveRootsStep { .. } => f.write_str("BLOCK_MANGROVE_ROOTS_STEP"),
           Sound::BlockMediumAmethystBudBreak { .. } => f.write_str("BLOCK_MEDIUM_AMETHYST_BUD_BREAK"),
           Sound::BlockMediumAmethystBudPlace { .. } => f.write_str("BLOCK_MEDIUM_AMETHYST_BUD_PLACE"),
           Sound::BlockMetalBreak { .. } => f.write_str("BLOCK_METAL_BREAK"),
           Sound::BlockMetalFall { .. } => f.write_str("BLOCK_METAL_FALL"),
           Sound::BlockMetalHit { .. } => f.write_str("BLOCK_METAL_HIT"),
           Sound::BlockMetalPlace { .. } => f.write_str("BLOCK_METAL_PLACE"),
           Sound::BlockMetalPressurePlateClickOff { .. } => f.write_str("BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF"),
           Sound::BlockMetalPressurePlateClickOn { .. } => f.write_str("BLOCK_METAL_PRESSURE_PLATE_CLICK_ON"),
           Sound::BlockMetalStep { .. } => f.write_str("BLOCK_METAL_STEP"),
           Sound::BlockMossBreak { .. } => f.write_str("BLOCK_MOSS_BREAK"),
           Sound::BlockMossCarpetBreak { .. } => f.write_str("BLOCK_MOSS_CARPET_BREAK"),
           Sound::BlockMossCarpetFall { .. } => f.write_str("BLOCK_MOSS_CARPET_FALL"),
           Sound::BlockMossCarpetHit { .. } => f.write_str("BLOCK_MOSS_CARPET_HIT"),
           Sound::BlockMossCarpetPlace { .. } => f.write_str("BLOCK_MOSS_CARPET_PLACE"),
           Sound::BlockMossCarpetStep { .. } => f.write_str("BLOCK_MOSS_CARPET_STEP"),
           Sound::BlockMossFall { .. } => f.write_str("BLOCK_MOSS_FALL"),
           Sound::BlockMossHit { .. } => f.write_str("BLOCK_MOSS_HIT"),
           Sound::BlockMossPlace { .. } => f.write_str("BLOCK_MOSS_PLACE"),
           Sound::BlockMossStep { .. } => f.write_str("BLOCK_MOSS_STEP"),
           Sound::BlockMuddyMangroveRootsBreak { .. } => f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_BREAK"),
           Sound::BlockMuddyMangroveRootsFall { .. } => f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_FALL"),
           Sound::BlockMuddyMangroveRootsHit { .. } => f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_HIT"),
           Sound::BlockMuddyMangroveRootsPlace { .. } => f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_PLACE"),
           Sound::BlockMuddyMangroveRootsStep { .. } => f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_STEP"),
           Sound::BlockMudBreak { .. } => f.write_str("BLOCK_MUD_BREAK"),
           Sound::BlockMudBricksBreak { .. } => f.write_str("BLOCK_MUD_BRICKS_BREAK"),
           Sound::BlockMudBricksFall { .. } => f.write_str("BLOCK_MUD_BRICKS_FALL"),
           Sound::BlockMudBricksHit { .. } => f.write_str("BLOCK_MUD_BRICKS_HIT"),
           Sound::BlockMudBricksPlace { .. } => f.write_str("BLOCK_MUD_BRICKS_PLACE"),
           Sound::BlockMudBricksStep { .. } => f.write_str("BLOCK_MUD_BRICKS_STEP"),
           Sound::BlockMudFall { .. } => f.write_str("BLOCK_MUD_FALL"),
           Sound::BlockMudHit { .. } => f.write_str("BLOCK_MUD_HIT"),
           Sound::BlockMudPlace { .. } => f.write_str("BLOCK_MUD_PLACE"),
           Sound::BlockMudStep { .. } => f.write_str("BLOCK_MUD_STEP"),
           Sound::BlockNetheriteBlockBreak { .. } => f.write_str("BLOCK_NETHERITE_BLOCK_BREAK"),
           Sound::BlockNetheriteBlockFall { .. } => f.write_str("BLOCK_NETHERITE_BLOCK_FALL"),
           Sound::BlockNetheriteBlockHit { .. } => f.write_str("BLOCK_NETHERITE_BLOCK_HIT"),
           Sound::BlockNetheriteBlockPlace { .. } => f.write_str("BLOCK_NETHERITE_BLOCK_PLACE"),
           Sound::BlockNetheriteBlockStep { .. } => f.write_str("BLOCK_NETHERITE_BLOCK_STEP"),
           Sound::BlockNetherrackBreak { .. } => f.write_str("BLOCK_NETHERRACK_BREAK"),
           Sound::BlockNetherrackFall { .. } => f.write_str("BLOCK_NETHERRACK_FALL"),
           Sound::BlockNetherrackHit { .. } => f.write_str("BLOCK_NETHERRACK_HIT"),
           Sound::BlockNetherrackPlace { .. } => f.write_str("BLOCK_NETHERRACK_PLACE"),
           Sound::BlockNetherrackStep { .. } => f.write_str("BLOCK_NETHERRACK_STEP"),
           Sound::BlockNetherBricksBreak { .. } => f.write_str("BLOCK_NETHER_BRICKS_BREAK"),
           Sound::BlockNetherBricksFall { .. } => f.write_str("BLOCK_NETHER_BRICKS_FALL"),
           Sound::BlockNetherBricksHit { .. } => f.write_str("BLOCK_NETHER_BRICKS_HIT"),
           Sound::BlockNetherBricksPlace { .. } => f.write_str("BLOCK_NETHER_BRICKS_PLACE"),
           Sound::BlockNetherBricksStep { .. } => f.write_str("BLOCK_NETHER_BRICKS_STEP"),
           Sound::BlockNetherGoldOreBreak { .. } => f.write_str("BLOCK_NETHER_GOLD_ORE_BREAK"),
           Sound::BlockNetherGoldOreFall { .. } => f.write_str("BLOCK_NETHER_GOLD_ORE_FALL"),
           Sound::BlockNetherGoldOreHit { .. } => f.write_str("BLOCK_NETHER_GOLD_ORE_HIT"),
           Sound::BlockNetherGoldOrePlace { .. } => f.write_str("BLOCK_NETHER_GOLD_ORE_PLACE"),
           Sound::BlockNetherGoldOreStep { .. } => f.write_str("BLOCK_NETHER_GOLD_ORE_STEP"),
           Sound::BlockNetherOreBreak { .. } => f.write_str("BLOCK_NETHER_ORE_BREAK"),
           Sound::BlockNetherOreFall { .. } => f.write_str("BLOCK_NETHER_ORE_FALL"),
           Sound::BlockNetherOreHit { .. } => f.write_str("BLOCK_NETHER_ORE_HIT"),
           Sound::BlockNetherOrePlace { .. } => f.write_str("BLOCK_NETHER_ORE_PLACE"),
           Sound::BlockNetherOreStep { .. } => f.write_str("BLOCK_NETHER_ORE_STEP"),
           Sound::BlockNetherSproutsBreak { .. } => f.write_str("BLOCK_NETHER_SPROUTS_BREAK"),
           Sound::BlockNetherSproutsFall { .. } => f.write_str("BLOCK_NETHER_SPROUTS_FALL"),
           Sound::BlockNetherSproutsHit { .. } => f.write_str("BLOCK_NETHER_SPROUTS_HIT"),
           Sound::BlockNetherSproutsPlace { .. } => f.write_str("BLOCK_NETHER_SPROUTS_PLACE"),
           Sound::BlockNetherSproutsStep { .. } => f.write_str("BLOCK_NETHER_SPROUTS_STEP"),
           Sound::BlockNetherWartBreak { .. } => f.write_str("BLOCK_NETHER_WART_BREAK"),
           Sound::BlockNetherWoodBreak { .. } => f.write_str("BLOCK_NETHER_WOOD_BREAK"),
           Sound::BlockNetherWoodButtonClickOff { .. } => f.write_str("BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF"),
           Sound::BlockNetherWoodButtonClickOn { .. } => f.write_str("BLOCK_NETHER_WOOD_BUTTON_CLICK_ON"),
           Sound::BlockNetherWoodDoorClose { .. } => f.write_str("BLOCK_NETHER_WOOD_DOOR_CLOSE"),
           Sound::BlockNetherWoodDoorOpen { .. } => f.write_str("BLOCK_NETHER_WOOD_DOOR_OPEN"),
           Sound::BlockNetherWoodFall { .. } => f.write_str("BLOCK_NETHER_WOOD_FALL"),
           Sound::BlockNetherWoodFenceGateClose { .. } => f.write_str("BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE"),
           Sound::BlockNetherWoodFenceGateOpen { .. } => f.write_str("BLOCK_NETHER_WOOD_FENCE_GATE_OPEN"),
           Sound::BlockNetherWoodHangingSignBreak { .. } => f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK"),
           Sound::BlockNetherWoodHangingSignFall { .. } => f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_FALL"),
           Sound::BlockNetherWoodHangingSignHit { .. } => f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_HIT"),
           Sound::BlockNetherWoodHangingSignPlace { .. } => f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE"),
           Sound::BlockNetherWoodHangingSignStep { .. } => f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_STEP"),
           Sound::BlockNetherWoodHit { .. } => f.write_str("BLOCK_NETHER_WOOD_HIT"),
           Sound::BlockNetherWoodPlace { .. } => f.write_str("BLOCK_NETHER_WOOD_PLACE"),
           Sound::BlockNetherWoodPressurePlateClickOff { .. } => f.write_str("BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF"),
           Sound::BlockNetherWoodPressurePlateClickOn { .. } => f.write_str("BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON"),
           Sound::BlockNetherWoodStep { .. } => f.write_str("BLOCK_NETHER_WOOD_STEP"),
           Sound::BlockNetherWoodTrapdoorClose { .. } => f.write_str("BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE"),
           Sound::BlockNetherWoodTrapdoorOpen { .. } => f.write_str("BLOCK_NETHER_WOOD_TRAPDOOR_OPEN"),
           Sound::BlockNoteBlockBanjo { .. } => f.write_str("BLOCK_NOTE_BLOCK_BANJO"),
           Sound::BlockNoteBlockBasedrum { .. } => f.write_str("BLOCK_NOTE_BLOCK_BASEDRUM"),
           Sound::BlockNoteBlockBass { .. } => f.write_str("BLOCK_NOTE_BLOCK_BASS"),
           Sound::BlockNoteBlockBell { .. } => f.write_str("BLOCK_NOTE_BLOCK_BELL"),
           Sound::BlockNoteBlockBit { .. } => f.write_str("BLOCK_NOTE_BLOCK_BIT"),
           Sound::BlockNoteBlockChime { .. } => f.write_str("BLOCK_NOTE_BLOCK_CHIME"),
           Sound::BlockNoteBlockCowBell { .. } => f.write_str("BLOCK_NOTE_BLOCK_COW_BELL"),
           Sound::BlockNoteBlockDidgeridoo { .. } => f.write_str("BLOCK_NOTE_BLOCK_DIDGERIDOO"),
           Sound::BlockNoteBlockFlute { .. } => f.write_str("BLOCK_NOTE_BLOCK_FLUTE"),
           Sound::BlockNoteBlockGuitar { .. } => f.write_str("BLOCK_NOTE_BLOCK_GUITAR"),
           Sound::BlockNoteBlockHarp { .. } => f.write_str("BLOCK_NOTE_BLOCK_HARP"),
           Sound::BlockNoteBlockHat { .. } => f.write_str("BLOCK_NOTE_BLOCK_HAT"),
           Sound::BlockNoteBlockImitateCreeper { .. } => f.write_str("BLOCK_NOTE_BLOCK_IMITATE_CREEPER"),
           Sound::BlockNoteBlockImitateEnderDragon { .. } => f.write_str("BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON"),
           Sound::BlockNoteBlockImitatePiglin { .. } => f.write_str("BLOCK_NOTE_BLOCK_IMITATE_PIGLIN"),
           Sound::BlockNoteBlockImitateSkeleton { .. } => f.write_str("BLOCK_NOTE_BLOCK_IMITATE_SKELETON"),
           Sound::BlockNoteBlockImitateWitherSkeleton { .. } => f.write_str("BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON"),
           Sound::BlockNoteBlockImitateZombie { .. } => f.write_str("BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE"),
           Sound::BlockNoteBlockIronXylophone { .. } => f.write_str("BLOCK_NOTE_BLOCK_IRON_XYLOPHONE"),
           Sound::BlockNoteBlockPling { .. } => f.write_str("BLOCK_NOTE_BLOCK_PLING"),
           Sound::BlockNoteBlockSnare { .. } => f.write_str("BLOCK_NOTE_BLOCK_SNARE"),
           Sound::BlockNoteBlockXylophone { .. } => f.write_str("BLOCK_NOTE_BLOCK_XYLOPHONE"),
           Sound::BlockNyliumBreak { .. } => f.write_str("BLOCK_NYLIUM_BREAK"),
           Sound::BlockNyliumFall { .. } => f.write_str("BLOCK_NYLIUM_FALL"),
           Sound::BlockNyliumHit { .. } => f.write_str("BLOCK_NYLIUM_HIT"),
           Sound::BlockNyliumPlace { .. } => f.write_str("BLOCK_NYLIUM_PLACE"),
           Sound::BlockNyliumStep { .. } => f.write_str("BLOCK_NYLIUM_STEP"),
           Sound::BlockPackedMudBreak { .. } => f.write_str("BLOCK_PACKED_MUD_BREAK"),
           Sound::BlockPackedMudFall { .. } => f.write_str("BLOCK_PACKED_MUD_FALL"),
           Sound::BlockPackedMudHit { .. } => f.write_str("BLOCK_PACKED_MUD_HIT"),
           Sound::BlockPackedMudPlace { .. } => f.write_str("BLOCK_PACKED_MUD_PLACE"),
           Sound::BlockPackedMudStep { .. } => f.write_str("BLOCK_PACKED_MUD_STEP"),
           Sound::BlockPinkPetalsBreak { .. } => f.write_str("BLOCK_PINK_PETALS_BREAK"),
           Sound::BlockPinkPetalsFall { .. } => f.write_str("BLOCK_PINK_PETALS_FALL"),
           Sound::BlockPinkPetalsHit { .. } => f.write_str("BLOCK_PINK_PETALS_HIT"),
           Sound::BlockPinkPetalsPlace { .. } => f.write_str("BLOCK_PINK_PETALS_PLACE"),
           Sound::BlockPinkPetalsStep { .. } => f.write_str("BLOCK_PINK_PETALS_STEP"),
           Sound::BlockPistonContract { .. } => f.write_str("BLOCK_PISTON_CONTRACT"),
           Sound::BlockPistonExtend { .. } => f.write_str("BLOCK_PISTON_EXTEND"),
           Sound::BlockPointedDripstoneBreak { .. } => f.write_str("BLOCK_POINTED_DRIPSTONE_BREAK"),
           Sound::BlockPointedDripstoneDripLava { .. } => f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_LAVA"),
           Sound::BlockPointedDripstoneDripLavaIntoCauldron { .. } => f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON"),
           Sound::BlockPointedDripstoneDripWater { .. } => f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_WATER"),
           Sound::BlockPointedDripstoneDripWaterIntoCauldron { .. } => f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON"),
           Sound::BlockPointedDripstoneFall { .. } => f.write_str("BLOCK_POINTED_DRIPSTONE_FALL"),
           Sound::BlockPointedDripstoneHit { .. } => f.write_str("BLOCK_POINTED_DRIPSTONE_HIT"),
           Sound::BlockPointedDripstoneLand { .. } => f.write_str("BLOCK_POINTED_DRIPSTONE_LAND"),
           Sound::BlockPointedDripstonePlace { .. } => f.write_str("BLOCK_POINTED_DRIPSTONE_PLACE"),
           Sound::BlockPointedDripstoneStep { .. } => f.write_str("BLOCK_POINTED_DRIPSTONE_STEP"),
           Sound::BlockPolishedDeepslateBreak { .. } => f.write_str("BLOCK_POLISHED_DEEPSLATE_BREAK"),
           Sound::BlockPolishedDeepslateFall { .. } => f.write_str("BLOCK_POLISHED_DEEPSLATE_FALL"),
           Sound::BlockPolishedDeepslateHit { .. } => f.write_str("BLOCK_POLISHED_DEEPSLATE_HIT"),
           Sound::BlockPolishedDeepslatePlace { .. } => f.write_str("BLOCK_POLISHED_DEEPSLATE_PLACE"),
           Sound::BlockPolishedDeepslateStep { .. } => f.write_str("BLOCK_POLISHED_DEEPSLATE_STEP"),
           Sound::BlockPolishedTuffBreak { .. } => f.write_str("BLOCK_POLISHED_TUFF_BREAK"),
           Sound::BlockPolishedTuffFall { .. } => f.write_str("BLOCK_POLISHED_TUFF_FALL"),
           Sound::BlockPolishedTuffHit { .. } => f.write_str("BLOCK_POLISHED_TUFF_HIT"),
           Sound::BlockPolishedTuffPlace { .. } => f.write_str("BLOCK_POLISHED_TUFF_PLACE"),
           Sound::BlockPolishedTuffStep { .. } => f.write_str("BLOCK_POLISHED_TUFF_STEP"),
           Sound::BlockPortalAmbient { .. } => f.write_str("BLOCK_PORTAL_AMBIENT"),
           Sound::BlockPortalTravel { .. } => f.write_str("BLOCK_PORTAL_TRAVEL"),
           Sound::BlockPortalTrigger { .. } => f.write_str("BLOCK_PORTAL_TRIGGER"),
           Sound::BlockPowderSnowBreak { .. } => f.write_str("BLOCK_POWDER_SNOW_BREAK"),
           Sound::BlockPowderSnowFall { .. } => f.write_str("BLOCK_POWDER_SNOW_FALL"),
           Sound::BlockPowderSnowHit { .. } => f.write_str("BLOCK_POWDER_SNOW_HIT"),
           Sound::BlockPowderSnowPlace { .. } => f.write_str("BLOCK_POWDER_SNOW_PLACE"),
           Sound::BlockPowderSnowStep { .. } => f.write_str("BLOCK_POWDER_SNOW_STEP"),
           Sound::BlockPumpkinCarve { .. } => f.write_str("BLOCK_PUMPKIN_CARVE"),
           Sound::BlockRedstoneTorchBurnout { .. } => f.write_str("BLOCK_REDSTONE_TORCH_BURNOUT"),
           Sound::BlockRespawnAnchorAmbient { .. } => f.write_str("BLOCK_RESPAWN_ANCHOR_AMBIENT"),
           Sound::BlockRespawnAnchorCharge { .. } => f.write_str("BLOCK_RESPAWN_ANCHOR_CHARGE"),
           Sound::BlockRespawnAnchorDeplete { .. } => f.write_str("BLOCK_RESPAWN_ANCHOR_DEPLETE"),
           Sound::BlockRespawnAnchorSetSpawn { .. } => f.write_str("BLOCK_RESPAWN_ANCHOR_SET_SPAWN"),
           Sound::BlockRootedDirtBreak { .. } => f.write_str("BLOCK_ROOTED_DIRT_BREAK"),
           Sound::BlockRootedDirtFall { .. } => f.write_str("BLOCK_ROOTED_DIRT_FALL"),
           Sound::BlockRootedDirtHit { .. } => f.write_str("BLOCK_ROOTED_DIRT_HIT"),
           Sound::BlockRootedDirtPlace { .. } => f.write_str("BLOCK_ROOTED_DIRT_PLACE"),
           Sound::BlockRootedDirtStep { .. } => f.write_str("BLOCK_ROOTED_DIRT_STEP"),
           Sound::BlockRootsBreak { .. } => f.write_str("BLOCK_ROOTS_BREAK"),
           Sound::BlockRootsFall { .. } => f.write_str("BLOCK_ROOTS_FALL"),
           Sound::BlockRootsHit { .. } => f.write_str("BLOCK_ROOTS_HIT"),
           Sound::BlockRootsPlace { .. } => f.write_str("BLOCK_ROOTS_PLACE"),
           Sound::BlockRootsStep { .. } => f.write_str("BLOCK_ROOTS_STEP"),
           Sound::BlockSandBreak { .. } => f.write_str("BLOCK_SAND_BREAK"),
           Sound::BlockSandFall { .. } => f.write_str("BLOCK_SAND_FALL"),
           Sound::BlockSandHit { .. } => f.write_str("BLOCK_SAND_HIT"),
           Sound::BlockSandPlace { .. } => f.write_str("BLOCK_SAND_PLACE"),
           Sound::BlockSandStep { .. } => f.write_str("BLOCK_SAND_STEP"),
           Sound::BlockScaffoldingBreak { .. } => f.write_str("BLOCK_SCAFFOLDING_BREAK"),
           Sound::BlockScaffoldingFall { .. } => f.write_str("BLOCK_SCAFFOLDING_FALL"),
           Sound::BlockScaffoldingHit { .. } => f.write_str("BLOCK_SCAFFOLDING_HIT"),
           Sound::BlockScaffoldingPlace { .. } => f.write_str("BLOCK_SCAFFOLDING_PLACE"),
           Sound::BlockScaffoldingStep { .. } => f.write_str("BLOCK_SCAFFOLDING_STEP"),
           Sound::BlockSculkBreak { .. } => f.write_str("BLOCK_SCULK_BREAK"),
           Sound::BlockSculkCatalystBloom { .. } => f.write_str("BLOCK_SCULK_CATALYST_BLOOM"),
           Sound::BlockSculkCatalystBreak { .. } => f.write_str("BLOCK_SCULK_CATALYST_BREAK"),
           Sound::BlockSculkCatalystFall { .. } => f.write_str("BLOCK_SCULK_CATALYST_FALL"),
           Sound::BlockSculkCatalystHit { .. } => f.write_str("BLOCK_SCULK_CATALYST_HIT"),
           Sound::BlockSculkCatalystPlace { .. } => f.write_str("BLOCK_SCULK_CATALYST_PLACE"),
           Sound::BlockSculkCatalystStep { .. } => f.write_str("BLOCK_SCULK_CATALYST_STEP"),
           Sound::BlockSculkCharge { .. } => f.write_str("BLOCK_SCULK_CHARGE"),
           Sound::BlockSculkFall { .. } => f.write_str("BLOCK_SCULK_FALL"),
           Sound::BlockSculkHit { .. } => f.write_str("BLOCK_SCULK_HIT"),
           Sound::BlockSculkPlace { .. } => f.write_str("BLOCK_SCULK_PLACE"),
           Sound::BlockSculkSensorBreak { .. } => f.write_str("BLOCK_SCULK_SENSOR_BREAK"),
           Sound::BlockSculkSensorClicking { .. } => f.write_str("BLOCK_SCULK_SENSOR_CLICKING"),
           Sound::BlockSculkSensorClickingStop { .. } => f.write_str("BLOCK_SCULK_SENSOR_CLICKING_STOP"),
           Sound::BlockSculkSensorFall { .. } => f.write_str("BLOCK_SCULK_SENSOR_FALL"),
           Sound::BlockSculkSensorHit { .. } => f.write_str("BLOCK_SCULK_SENSOR_HIT"),
           Sound::BlockSculkSensorPlace { .. } => f.write_str("BLOCK_SCULK_SENSOR_PLACE"),
           Sound::BlockSculkSensorStep { .. } => f.write_str("BLOCK_SCULK_SENSOR_STEP"),
           Sound::BlockSculkShriekerBreak { .. } => f.write_str("BLOCK_SCULK_SHRIEKER_BREAK"),
           Sound::BlockSculkShriekerFall { .. } => f.write_str("BLOCK_SCULK_SHRIEKER_FALL"),
           Sound::BlockSculkShriekerHit { .. } => f.write_str("BLOCK_SCULK_SHRIEKER_HIT"),
           Sound::BlockSculkShriekerPlace { .. } => f.write_str("BLOCK_SCULK_SHRIEKER_PLACE"),
           Sound::BlockSculkShriekerShriek { .. } => f.write_str("BLOCK_SCULK_SHRIEKER_SHRIEK"),
           Sound::BlockSculkShriekerStep { .. } => f.write_str("BLOCK_SCULK_SHRIEKER_STEP"),
           Sound::BlockSculkSpread { .. } => f.write_str("BLOCK_SCULK_SPREAD"),
           Sound::BlockSculkStep { .. } => f.write_str("BLOCK_SCULK_STEP"),
           Sound::BlockSculkVeinBreak { .. } => f.write_str("BLOCK_SCULK_VEIN_BREAK"),
           Sound::BlockSculkVeinFall { .. } => f.write_str("BLOCK_SCULK_VEIN_FALL"),
           Sound::BlockSculkVeinHit { .. } => f.write_str("BLOCK_SCULK_VEIN_HIT"),
           Sound::BlockSculkVeinPlace { .. } => f.write_str("BLOCK_SCULK_VEIN_PLACE"),
           Sound::BlockSculkVeinStep { .. } => f.write_str("BLOCK_SCULK_VEIN_STEP"),
           Sound::BlockShroomlightBreak { .. } => f.write_str("BLOCK_SHROOMLIGHT_BREAK"),
           Sound::BlockShroomlightFall { .. } => f.write_str("BLOCK_SHROOMLIGHT_FALL"),
           Sound::BlockShroomlightHit { .. } => f.write_str("BLOCK_SHROOMLIGHT_HIT"),
           Sound::BlockShroomlightPlace { .. } => f.write_str("BLOCK_SHROOMLIGHT_PLACE"),
           Sound::BlockShroomlightStep { .. } => f.write_str("BLOCK_SHROOMLIGHT_STEP"),
           Sound::BlockShulkerBoxClose { .. } => f.write_str("BLOCK_SHULKER_BOX_CLOSE"),
           Sound::BlockShulkerBoxOpen { .. } => f.write_str("BLOCK_SHULKER_BOX_OPEN"),
           Sound::BlockSignWaxedInteractFail { .. } => f.write_str("BLOCK_SIGN_WAXED_INTERACT_FAIL"),
           Sound::BlockSlimeBlockBreak { .. } => f.write_str("BLOCK_SLIME_BLOCK_BREAK"),
           Sound::BlockSlimeBlockFall { .. } => f.write_str("BLOCK_SLIME_BLOCK_FALL"),
           Sound::BlockSlimeBlockHit { .. } => f.write_str("BLOCK_SLIME_BLOCK_HIT"),
           Sound::BlockSlimeBlockPlace { .. } => f.write_str("BLOCK_SLIME_BLOCK_PLACE"),
           Sound::BlockSlimeBlockStep { .. } => f.write_str("BLOCK_SLIME_BLOCK_STEP"),
           Sound::BlockSmallAmethystBudBreak { .. } => f.write_str("BLOCK_SMALL_AMETHYST_BUD_BREAK"),
           Sound::BlockSmallAmethystBudPlace { .. } => f.write_str("BLOCK_SMALL_AMETHYST_BUD_PLACE"),
           Sound::BlockSmallDripleafBreak { .. } => f.write_str("BLOCK_SMALL_DRIPLEAF_BREAK"),
           Sound::BlockSmallDripleafFall { .. } => f.write_str("BLOCK_SMALL_DRIPLEAF_FALL"),
           Sound::BlockSmallDripleafHit { .. } => f.write_str("BLOCK_SMALL_DRIPLEAF_HIT"),
           Sound::BlockSmallDripleafPlace { .. } => f.write_str("BLOCK_SMALL_DRIPLEAF_PLACE"),
           Sound::BlockSmallDripleafStep { .. } => f.write_str("BLOCK_SMALL_DRIPLEAF_STEP"),
           Sound::BlockSmithingTableUse { .. } => f.write_str("BLOCK_SMITHING_TABLE_USE"),
           Sound::BlockSmokerSmoke { .. } => f.write_str("BLOCK_SMOKER_SMOKE"),
           Sound::BlockSnifferEggCrack { .. } => f.write_str("BLOCK_SNIFFER_EGG_CRACK"),
           Sound::BlockSnifferEggHatch { .. } => f.write_str("BLOCK_SNIFFER_EGG_HATCH"),
           Sound::BlockSnifferEggPlop { .. } => f.write_str("BLOCK_SNIFFER_EGG_PLOP"),
           Sound::BlockSnowBreak { .. } => f.write_str("BLOCK_SNOW_BREAK"),
           Sound::BlockSnowFall { .. } => f.write_str("BLOCK_SNOW_FALL"),
           Sound::BlockSnowHit { .. } => f.write_str("BLOCK_SNOW_HIT"),
           Sound::BlockSnowPlace { .. } => f.write_str("BLOCK_SNOW_PLACE"),
           Sound::BlockSnowStep { .. } => f.write_str("BLOCK_SNOW_STEP"),
           Sound::BlockSoulSandBreak { .. } => f.write_str("BLOCK_SOUL_SAND_BREAK"),
           Sound::BlockSoulSandFall { .. } => f.write_str("BLOCK_SOUL_SAND_FALL"),
           Sound::BlockSoulSandHit { .. } => f.write_str("BLOCK_SOUL_SAND_HIT"),
           Sound::BlockSoulSandPlace { .. } => f.write_str("BLOCK_SOUL_SAND_PLACE"),
           Sound::BlockSoulSandStep { .. } => f.write_str("BLOCK_SOUL_SAND_STEP"),
           Sound::BlockSoulSoilBreak { .. } => f.write_str("BLOCK_SOUL_SOIL_BREAK"),
           Sound::BlockSoulSoilFall { .. } => f.write_str("BLOCK_SOUL_SOIL_FALL"),
           Sound::BlockSoulSoilHit { .. } => f.write_str("BLOCK_SOUL_SOIL_HIT"),
           Sound::BlockSoulSoilPlace { .. } => f.write_str("BLOCK_SOUL_SOIL_PLACE"),
           Sound::BlockSoulSoilStep { .. } => f.write_str("BLOCK_SOUL_SOIL_STEP"),
           Sound::BlockSpongeAbsorb { .. } => f.write_str("BLOCK_SPONGE_ABSORB"),
           Sound::BlockSpongeBreak { .. } => f.write_str("BLOCK_SPONGE_BREAK"),
           Sound::BlockSpongeFall { .. } => f.write_str("BLOCK_SPONGE_FALL"),
           Sound::BlockSpongeHit { .. } => f.write_str("BLOCK_SPONGE_HIT"),
           Sound::BlockSpongePlace { .. } => f.write_str("BLOCK_SPONGE_PLACE"),
           Sound::BlockSpongeStep { .. } => f.write_str("BLOCK_SPONGE_STEP"),
           Sound::BlockSporeBlossomBreak { .. } => f.write_str("BLOCK_SPORE_BLOSSOM_BREAK"),
           Sound::BlockSporeBlossomFall { .. } => f.write_str("BLOCK_SPORE_BLOSSOM_FALL"),
           Sound::BlockSporeBlossomHit { .. } => f.write_str("BLOCK_SPORE_BLOSSOM_HIT"),
           Sound::BlockSporeBlossomPlace { .. } => f.write_str("BLOCK_SPORE_BLOSSOM_PLACE"),
           Sound::BlockSporeBlossomStep { .. } => f.write_str("BLOCK_SPORE_BLOSSOM_STEP"),
           Sound::BlockStemBreak { .. } => f.write_str("BLOCK_STEM_BREAK"),
           Sound::BlockStemFall { .. } => f.write_str("BLOCK_STEM_FALL"),
           Sound::BlockStemHit { .. } => f.write_str("BLOCK_STEM_HIT"),
           Sound::BlockStemPlace { .. } => f.write_str("BLOCK_STEM_PLACE"),
           Sound::BlockStemStep { .. } => f.write_str("BLOCK_STEM_STEP"),
           Sound::BlockStoneBreak { .. } => f.write_str("BLOCK_STONE_BREAK"),
           Sound::BlockStoneButtonClickOff { .. } => f.write_str("BLOCK_STONE_BUTTON_CLICK_OFF"),
           Sound::BlockStoneButtonClickOn { .. } => f.write_str("BLOCK_STONE_BUTTON_CLICK_ON"),
           Sound::BlockStoneFall { .. } => f.write_str("BLOCK_STONE_FALL"),
           Sound::BlockStoneHit { .. } => f.write_str("BLOCK_STONE_HIT"),
           Sound::BlockStonePlace { .. } => f.write_str("BLOCK_STONE_PLACE"),
           Sound::BlockStonePressurePlateClickOff { .. } => f.write_str("BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF"),
           Sound::BlockStonePressurePlateClickOn { .. } => f.write_str("BLOCK_STONE_PRESSURE_PLATE_CLICK_ON"),
           Sound::BlockStoneStep { .. } => f.write_str("BLOCK_STONE_STEP"),
           Sound::BlockSuspiciousGravelBreak { .. } => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_BREAK"),
           Sound::BlockSuspiciousGravelFall { .. } => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_FALL"),
           Sound::BlockSuspiciousGravelHit { .. } => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_HIT"),
           Sound::BlockSuspiciousGravelPlace { .. } => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_PLACE"),
           Sound::BlockSuspiciousGravelStep { .. } => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_STEP"),
           Sound::BlockSuspiciousSandBreak { .. } => f.write_str("BLOCK_SUSPICIOUS_SAND_BREAK"),
           Sound::BlockSuspiciousSandFall { .. } => f.write_str("BLOCK_SUSPICIOUS_SAND_FALL"),
           Sound::BlockSuspiciousSandHit { .. } => f.write_str("BLOCK_SUSPICIOUS_SAND_HIT"),
           Sound::BlockSuspiciousSandPlace { .. } => f.write_str("BLOCK_SUSPICIOUS_SAND_PLACE"),
           Sound::BlockSuspiciousSandStep { .. } => f.write_str("BLOCK_SUSPICIOUS_SAND_STEP"),
           Sound::BlockSweetBerryBushBreak { .. } => f.write_str("BLOCK_SWEET_BERRY_BUSH_BREAK"),
           Sound::BlockSweetBerryBushPickBerries { .. } => f.write_str("BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES"),
           Sound::BlockSweetBerryBushPlace { .. } => f.write_str("BLOCK_SWEET_BERRY_BUSH_PLACE"),
           Sound::BlockTrialSpawnerAmbient { .. } => f.write_str("BLOCK_TRIAL_SPAWNER_AMBIENT"),
           Sound::BlockTrialSpawnerBreak { .. } => f.write_str("BLOCK_TRIAL_SPAWNER_BREAK"),
           Sound::BlockTrialSpawnerCloseShutter { .. } => f.write_str("BLOCK_TRIAL_SPAWNER_CLOSE_SHUTTER"),
           Sound::BlockTrialSpawnerDetectPlayer { .. } => f.write_str("BLOCK_TRIAL_SPAWNER_DETECT_PLAYER"),
           Sound::BlockTrialSpawnerEjectItem { .. } => f.write_str("BLOCK_TRIAL_SPAWNER_EJECT_ITEM"),
           Sound::BlockTrialSpawnerFall { .. } => f.write_str("BLOCK_TRIAL_SPAWNER_FALL"),
           Sound::BlockTrialSpawnerHit { .. } => f.write_str("BLOCK_TRIAL_SPAWNER_HIT"),
           Sound::BlockTrialSpawnerOpenShutter { .. } => f.write_str("BLOCK_TRIAL_SPAWNER_OPEN_SHUTTER"),
           Sound::BlockTrialSpawnerPlace { .. } => f.write_str("BLOCK_TRIAL_SPAWNER_PLACE"),
           Sound::BlockTrialSpawnerSpawnMob { .. } => f.write_str("BLOCK_TRIAL_SPAWNER_SPAWN_MOB"),
           Sound::BlockTrialSpawnerStep { .. } => f.write_str("BLOCK_TRIAL_SPAWNER_STEP"),
           Sound::BlockTripwireAttach { .. } => f.write_str("BLOCK_TRIPWIRE_ATTACH"),
           Sound::BlockTripwireClickOff { .. } => f.write_str("BLOCK_TRIPWIRE_CLICK_OFF"),
           Sound::BlockTripwireClickOn { .. } => f.write_str("BLOCK_TRIPWIRE_CLICK_ON"),
           Sound::BlockTripwireDetach { .. } => f.write_str("BLOCK_TRIPWIRE_DETACH"),
           Sound::BlockTuffBreak { .. } => f.write_str("BLOCK_TUFF_BREAK"),
           Sound::BlockTuffBricksBreak { .. } => f.write_str("BLOCK_TUFF_BRICKS_BREAK"),
           Sound::BlockTuffBricksFall { .. } => f.write_str("BLOCK_TUFF_BRICKS_FALL"),
           Sound::BlockTuffBricksHit { .. } => f.write_str("BLOCK_TUFF_BRICKS_HIT"),
           Sound::BlockTuffBricksPlace { .. } => f.write_str("BLOCK_TUFF_BRICKS_PLACE"),
           Sound::BlockTuffBricksStep { .. } => f.write_str("BLOCK_TUFF_BRICKS_STEP"),
           Sound::BlockTuffFall { .. } => f.write_str("BLOCK_TUFF_FALL"),
           Sound::BlockTuffHit { .. } => f.write_str("BLOCK_TUFF_HIT"),
           Sound::BlockTuffPlace { .. } => f.write_str("BLOCK_TUFF_PLACE"),
           Sound::BlockTuffStep { .. } => f.write_str("BLOCK_TUFF_STEP"),
           Sound::BlockVineBreak { .. } => f.write_str("BLOCK_VINE_BREAK"),
           Sound::BlockVineFall { .. } => f.write_str("BLOCK_VINE_FALL"),
           Sound::BlockVineHit { .. } => f.write_str("BLOCK_VINE_HIT"),
           Sound::BlockVinePlace { .. } => f.write_str("BLOCK_VINE_PLACE"),
           Sound::BlockVineStep { .. } => f.write_str("BLOCK_VINE_STEP"),
           Sound::BlockWartBlockBreak { .. } => f.write_str("BLOCK_WART_BLOCK_BREAK"),
           Sound::BlockWartBlockFall { .. } => f.write_str("BLOCK_WART_BLOCK_FALL"),
           Sound::BlockWartBlockHit { .. } => f.write_str("BLOCK_WART_BLOCK_HIT"),
           Sound::BlockWartBlockPlace { .. } => f.write_str("BLOCK_WART_BLOCK_PLACE"),
           Sound::BlockWartBlockStep { .. } => f.write_str("BLOCK_WART_BLOCK_STEP"),
           Sound::BlockWaterAmbient { .. } => f.write_str("BLOCK_WATER_AMBIENT"),
           Sound::BlockWeepingVinesBreak { .. } => f.write_str("BLOCK_WEEPING_VINES_BREAK"),
           Sound::BlockWeepingVinesFall { .. } => f.write_str("BLOCK_WEEPING_VINES_FALL"),
           Sound::BlockWeepingVinesHit { .. } => f.write_str("BLOCK_WEEPING_VINES_HIT"),
           Sound::BlockWeepingVinesPlace { .. } => f.write_str("BLOCK_WEEPING_VINES_PLACE"),
           Sound::BlockWeepingVinesStep { .. } => f.write_str("BLOCK_WEEPING_VINES_STEP"),
           Sound::BlockWetGrassBreak { .. } => f.write_str("BLOCK_WET_GRASS_BREAK"),
           Sound::BlockWetGrassFall { .. } => f.write_str("BLOCK_WET_GRASS_FALL"),
           Sound::BlockWetGrassHit { .. } => f.write_str("BLOCK_WET_GRASS_HIT"),
           Sound::BlockWetGrassPlace { .. } => f.write_str("BLOCK_WET_GRASS_PLACE"),
           Sound::BlockWetGrassStep { .. } => f.write_str("BLOCK_WET_GRASS_STEP"),
           Sound::BlockWetSpongeBreak { .. } => f.write_str("BLOCK_WET_SPONGE_BREAK"),
           Sound::BlockWetSpongeFall { .. } => f.write_str("BLOCK_WET_SPONGE_FALL"),
           Sound::BlockWetSpongeHit { .. } => f.write_str("BLOCK_WET_SPONGE_HIT"),
           Sound::BlockWetSpongePlace { .. } => f.write_str("BLOCK_WET_SPONGE_PLACE"),
           Sound::BlockWetSpongeStep { .. } => f.write_str("BLOCK_WET_SPONGE_STEP"),
           Sound::BlockWoodenButtonClickOff { .. } => f.write_str("BLOCK_WOODEN_BUTTON_CLICK_OFF"),
           Sound::BlockWoodenButtonClickOn { .. } => f.write_str("BLOCK_WOODEN_BUTTON_CLICK_ON"),
           Sound::BlockWoodenDoorClose { .. } => f.write_str("BLOCK_WOODEN_DOOR_CLOSE"),
           Sound::BlockWoodenDoorOpen { .. } => f.write_str("BLOCK_WOODEN_DOOR_OPEN"),
           Sound::BlockWoodenPressurePlateClickOff { .. } => f.write_str("BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF"),
           Sound::BlockWoodenPressurePlateClickOn { .. } => f.write_str("BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON"),
           Sound::BlockWoodenTrapdoorClose { .. } => f.write_str("BLOCK_WOODEN_TRAPDOOR_CLOSE"),
           Sound::BlockWoodenTrapdoorOpen { .. } => f.write_str("BLOCK_WOODEN_TRAPDOOR_OPEN"),
           Sound::BlockWoodBreak { .. } => f.write_str("BLOCK_WOOD_BREAK"),
           Sound::BlockWoodFall { .. } => f.write_str("BLOCK_WOOD_FALL"),
           Sound::BlockWoodHit { .. } => f.write_str("BLOCK_WOOD_HIT"),
           Sound::BlockWoodPlace { .. } => f.write_str("BLOCK_WOOD_PLACE"),
           Sound::BlockWoodStep { .. } => f.write_str("BLOCK_WOOD_STEP"),
           Sound::BlockWoolBreak { .. } => f.write_str("BLOCK_WOOL_BREAK"),
           Sound::BlockWoolFall { .. } => f.write_str("BLOCK_WOOL_FALL"),
           Sound::BlockWoolHit { .. } => f.write_str("BLOCK_WOOL_HIT"),
           Sound::BlockWoolPlace { .. } => f.write_str("BLOCK_WOOL_PLACE"),
           Sound::BlockWoolStep { .. } => f.write_str("BLOCK_WOOL_STEP"),
           Sound::EnchantThornsHit { .. } => f.write_str("ENCHANT_THORNS_HIT"),
           Sound::EntityAllayAmbientWithoutItem { .. } => f.write_str("ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM"),
           Sound::EntityAllayAmbientWithItem { .. } => f.write_str("ENTITY_ALLAY_AMBIENT_WITH_ITEM"),
           Sound::EntityAllayDeath { .. } => f.write_str("ENTITY_ALLAY_DEATH"),
           Sound::EntityAllayHurt { .. } => f.write_str("ENTITY_ALLAY_HURT"),
           Sound::EntityAllayItemGiven { .. } => f.write_str("ENTITY_ALLAY_ITEM_GIVEN"),
           Sound::EntityAllayItemTaken { .. } => f.write_str("ENTITY_ALLAY_ITEM_TAKEN"),
           Sound::EntityAllayItemThrown { .. } => f.write_str("ENTITY_ALLAY_ITEM_THROWN"),
           Sound::EntityArmorStandBreak { .. } => f.write_str("ENTITY_ARMOR_STAND_BREAK"),
           Sound::EntityArmorStandFall { .. } => f.write_str("ENTITY_ARMOR_STAND_FALL"),
           Sound::EntityArmorStandHit { .. } => f.write_str("ENTITY_ARMOR_STAND_HIT"),
           Sound::EntityArmorStandPlace { .. } => f.write_str("ENTITY_ARMOR_STAND_PLACE"),
           Sound::EntityArrowHit { .. } => f.write_str("ENTITY_ARROW_HIT"),
           Sound::EntityArrowHitPlayer { .. } => f.write_str("ENTITY_ARROW_HIT_PLAYER"),
           Sound::EntityArrowShoot { .. } => f.write_str("ENTITY_ARROW_SHOOT"),
           Sound::EntityAxolotlAttack { .. } => f.write_str("ENTITY_AXOLOTL_ATTACK"),
           Sound::EntityAxolotlDeath { .. } => f.write_str("ENTITY_AXOLOTL_DEATH"),
           Sound::EntityAxolotlHurt { .. } => f.write_str("ENTITY_AXOLOTL_HURT"),
           Sound::EntityAxolotlIdleAir { .. } => f.write_str("ENTITY_AXOLOTL_IDLE_AIR"),
           Sound::EntityAxolotlIdleWater { .. } => f.write_str("ENTITY_AXOLOTL_IDLE_WATER"),
           Sound::EntityAxolotlSplash { .. } => f.write_str("ENTITY_AXOLOTL_SPLASH"),
           Sound::EntityAxolotlSwim { .. } => f.write_str("ENTITY_AXOLOTL_SWIM"),
           Sound::EntityBatAmbient { .. } => f.write_str("ENTITY_BAT_AMBIENT"),
           Sound::EntityBatDeath { .. } => f.write_str("ENTITY_BAT_DEATH"),
           Sound::EntityBatHurt { .. } => f.write_str("ENTITY_BAT_HURT"),
           Sound::EntityBatLoop { .. } => f.write_str("ENTITY_BAT_LOOP"),
           Sound::EntityBatTakeoff { .. } => f.write_str("ENTITY_BAT_TAKEOFF"),
           Sound::EntityBeeDeath { .. } => f.write_str("ENTITY_BEE_DEATH"),
           Sound::EntityBeeHurt { .. } => f.write_str("ENTITY_BEE_HURT"),
           Sound::EntityBeeLoop { .. } => f.write_str("ENTITY_BEE_LOOP"),
           Sound::EntityBeeLoopAggressive { .. } => f.write_str("ENTITY_BEE_LOOP_AGGRESSIVE"),
           Sound::EntityBeePollinate { .. } => f.write_str("ENTITY_BEE_POLLINATE"),
           Sound::EntityBeeSting { .. } => f.write_str("ENTITY_BEE_STING"),
           Sound::EntityBlazeAmbient { .. } => f.write_str("ENTITY_BLAZE_AMBIENT"),
           Sound::EntityBlazeBurn { .. } => f.write_str("ENTITY_BLAZE_BURN"),
           Sound::EntityBlazeDeath { .. } => f.write_str("ENTITY_BLAZE_DEATH"),
           Sound::EntityBlazeHurt { .. } => f.write_str("ENTITY_BLAZE_HURT"),
           Sound::EntityBlazeShoot { .. } => f.write_str("ENTITY_BLAZE_SHOOT"),
           Sound::EntityBoatPaddleLand { .. } => f.write_str("ENTITY_BOAT_PADDLE_LAND"),
           Sound::EntityBoatPaddleWater { .. } => f.write_str("ENTITY_BOAT_PADDLE_WATER"),
           Sound::EntityBreezeDeath { .. } => f.write_str("ENTITY_BREEZE_DEATH"),
           Sound::EntityBreezeHurt { .. } => f.write_str("ENTITY_BREEZE_HURT"),
           Sound::EntityBreezeIdleAir { .. } => f.write_str("ENTITY_BREEZE_IDLE_AIR"),
           Sound::EntityBreezeIdleGround { .. } => f.write_str("ENTITY_BREEZE_IDLE_GROUND"),
           Sound::EntityBreezeInhale { .. } => f.write_str("ENTITY_BREEZE_INHALE"),
           Sound::EntityBreezeJump { .. } => f.write_str("ENTITY_BREEZE_JUMP"),
           Sound::EntityBreezeLand { .. } => f.write_str("ENTITY_BREEZE_LAND"),
           Sound::EntityBreezeShoot { .. } => f.write_str("ENTITY_BREEZE_SHOOT"),
           Sound::EntityBreezeSlide { .. } => f.write_str("ENTITY_BREEZE_SLIDE"),
           Sound::EntityCamelAmbient { .. } => f.write_str("ENTITY_CAMEL_AMBIENT"),
           Sound::EntityCamelDash { .. } => f.write_str("ENTITY_CAMEL_DASH"),
           Sound::EntityCamelDashReady { .. } => f.write_str("ENTITY_CAMEL_DASH_READY"),
           Sound::EntityCamelDeath { .. } => f.write_str("ENTITY_CAMEL_DEATH"),
           Sound::EntityCamelEat { .. } => f.write_str("ENTITY_CAMEL_EAT"),
           Sound::EntityCamelHurt { .. } => f.write_str("ENTITY_CAMEL_HURT"),
           Sound::EntityCamelSaddle { .. } => f.write_str("ENTITY_CAMEL_SADDLE"),
           Sound::EntityCamelSit { .. } => f.write_str("ENTITY_CAMEL_SIT"),
           Sound::EntityCamelStand { .. } => f.write_str("ENTITY_CAMEL_STAND"),
           Sound::EntityCamelStep { .. } => f.write_str("ENTITY_CAMEL_STEP"),
           Sound::EntityCamelStepSand { .. } => f.write_str("ENTITY_CAMEL_STEP_SAND"),
           Sound::EntityCatAmbient { .. } => f.write_str("ENTITY_CAT_AMBIENT"),
           Sound::EntityCatBegForFood { .. } => f.write_str("ENTITY_CAT_BEG_FOR_FOOD"),
           Sound::EntityCatDeath { .. } => f.write_str("ENTITY_CAT_DEATH"),
           Sound::EntityCatEat { .. } => f.write_str("ENTITY_CAT_EAT"),
           Sound::EntityCatHiss { .. } => f.write_str("ENTITY_CAT_HISS"),
           Sound::EntityCatHurt { .. } => f.write_str("ENTITY_CAT_HURT"),
           Sound::EntityCatPurr { .. } => f.write_str("ENTITY_CAT_PURR"),
           Sound::EntityCatPurreow { .. } => f.write_str("ENTITY_CAT_PURREOW"),
           Sound::EntityCatStrayAmbient { .. } => f.write_str("ENTITY_CAT_STRAY_AMBIENT"),
           Sound::EntityChickenAmbient { .. } => f.write_str("ENTITY_CHICKEN_AMBIENT"),
           Sound::EntityChickenDeath { .. } => f.write_str("ENTITY_CHICKEN_DEATH"),
           Sound::EntityChickenEgg { .. } => f.write_str("ENTITY_CHICKEN_EGG"),
           Sound::EntityChickenHurt { .. } => f.write_str("ENTITY_CHICKEN_HURT"),
           Sound::EntityChickenStep { .. } => f.write_str("ENTITY_CHICKEN_STEP"),
           Sound::EntityCodAmbient { .. } => f.write_str("ENTITY_COD_AMBIENT"),
           Sound::EntityCodDeath { .. } => f.write_str("ENTITY_COD_DEATH"),
           Sound::EntityCodFlop { .. } => f.write_str("ENTITY_COD_FLOP"),
           Sound::EntityCodHurt { .. } => f.write_str("ENTITY_COD_HURT"),
           Sound::EntityCowAmbient { .. } => f.write_str("ENTITY_COW_AMBIENT"),
           Sound::EntityCowDeath { .. } => f.write_str("ENTITY_COW_DEATH"),
           Sound::EntityCowHurt { .. } => f.write_str("ENTITY_COW_HURT"),
           Sound::EntityCowMilk { .. } => f.write_str("ENTITY_COW_MILK"),
           Sound::EntityCowStep { .. } => f.write_str("ENTITY_COW_STEP"),
           Sound::EntityCreeperDeath { .. } => f.write_str("ENTITY_CREEPER_DEATH"),
           Sound::EntityCreeperHurt { .. } => f.write_str("ENTITY_CREEPER_HURT"),
           Sound::EntityCreeperPrimed { .. } => f.write_str("ENTITY_CREEPER_PRIMED"),
           Sound::EntityDolphinAmbient { .. } => f.write_str("ENTITY_DOLPHIN_AMBIENT"),
           Sound::EntityDolphinAmbientWater { .. } => f.write_str("ENTITY_DOLPHIN_AMBIENT_WATER"),
           Sound::EntityDolphinAttack { .. } => f.write_str("ENTITY_DOLPHIN_ATTACK"),
           Sound::EntityDolphinDeath { .. } => f.write_str("ENTITY_DOLPHIN_DEATH"),
           Sound::EntityDolphinEat { .. } => f.write_str("ENTITY_DOLPHIN_EAT"),
           Sound::EntityDolphinHurt { .. } => f.write_str("ENTITY_DOLPHIN_HURT"),
           Sound::EntityDolphinJump { .. } => f.write_str("ENTITY_DOLPHIN_JUMP"),
           Sound::EntityDolphinPlay { .. } => f.write_str("ENTITY_DOLPHIN_PLAY"),
           Sound::EntityDolphinSplash { .. } => f.write_str("ENTITY_DOLPHIN_SPLASH"),
           Sound::EntityDolphinSwim { .. } => f.write_str("ENTITY_DOLPHIN_SWIM"),
           Sound::EntityDonkeyAmbient { .. } => f.write_str("ENTITY_DONKEY_AMBIENT"),
           Sound::EntityDonkeyAngry { .. } => f.write_str("ENTITY_DONKEY_ANGRY"),
           Sound::EntityDonkeyChest { .. } => f.write_str("ENTITY_DONKEY_CHEST"),
           Sound::EntityDonkeyDeath { .. } => f.write_str("ENTITY_DONKEY_DEATH"),
           Sound::EntityDonkeyEat { .. } => f.write_str("ENTITY_DONKEY_EAT"),
           Sound::EntityDonkeyHurt { .. } => f.write_str("ENTITY_DONKEY_HURT"),
           Sound::EntityDragonFireballExplode { .. } => f.write_str("ENTITY_DRAGON_FIREBALL_EXPLODE"),
           Sound::EntityDrownedAmbient { .. } => f.write_str("ENTITY_DROWNED_AMBIENT"),
           Sound::EntityDrownedAmbientWater { .. } => f.write_str("ENTITY_DROWNED_AMBIENT_WATER"),
           Sound::EntityDrownedDeath { .. } => f.write_str("ENTITY_DROWNED_DEATH"),
           Sound::EntityDrownedDeathWater { .. } => f.write_str("ENTITY_DROWNED_DEATH_WATER"),
           Sound::EntityDrownedHurt { .. } => f.write_str("ENTITY_DROWNED_HURT"),
           Sound::EntityDrownedHurtWater { .. } => f.write_str("ENTITY_DROWNED_HURT_WATER"),
           Sound::EntityDrownedShoot { .. } => f.write_str("ENTITY_DROWNED_SHOOT"),
           Sound::EntityDrownedStep { .. } => f.write_str("ENTITY_DROWNED_STEP"),
           Sound::EntityDrownedSwim { .. } => f.write_str("ENTITY_DROWNED_SWIM"),
           Sound::EntityEggThrow { .. } => f.write_str("ENTITY_EGG_THROW"),
           Sound::EntityElderGuardianAmbient { .. } => f.write_str("ENTITY_ELDER_GUARDIAN_AMBIENT"),
           Sound::EntityElderGuardianAmbientLand { .. } => f.write_str("ENTITY_ELDER_GUARDIAN_AMBIENT_LAND"),
           Sound::EntityElderGuardianCurse { .. } => f.write_str("ENTITY_ELDER_GUARDIAN_CURSE"),
           Sound::EntityElderGuardianDeath { .. } => f.write_str("ENTITY_ELDER_GUARDIAN_DEATH"),
           Sound::EntityElderGuardianDeathLand { .. } => f.write_str("ENTITY_ELDER_GUARDIAN_DEATH_LAND"),
           Sound::EntityElderGuardianFlop { .. } => f.write_str("ENTITY_ELDER_GUARDIAN_FLOP"),
           Sound::EntityElderGuardianHurt { .. } => f.write_str("ENTITY_ELDER_GUARDIAN_HURT"),
           Sound::EntityElderGuardianHurtLand { .. } => f.write_str("ENTITY_ELDER_GUARDIAN_HURT_LAND"),
           Sound::EntityEndermanAmbient { .. } => f.write_str("ENTITY_ENDERMAN_AMBIENT"),
           Sound::EntityEndermanDeath { .. } => f.write_str("ENTITY_ENDERMAN_DEATH"),
           Sound::EntityEndermanHurt { .. } => f.write_str("ENTITY_ENDERMAN_HURT"),
           Sound::EntityEndermanScream { .. } => f.write_str("ENTITY_ENDERMAN_SCREAM"),
           Sound::EntityEndermanStare { .. } => f.write_str("ENTITY_ENDERMAN_STARE"),
           Sound::EntityEndermanTeleport { .. } => f.write_str("ENTITY_ENDERMAN_TELEPORT"),
           Sound::EntityEndermiteAmbient { .. } => f.write_str("ENTITY_ENDERMITE_AMBIENT"),
           Sound::EntityEndermiteDeath { .. } => f.write_str("ENTITY_ENDERMITE_DEATH"),
           Sound::EntityEndermiteHurt { .. } => f.write_str("ENTITY_ENDERMITE_HURT"),
           Sound::EntityEndermiteStep { .. } => f.write_str("ENTITY_ENDERMITE_STEP"),
           Sound::EntityEnderDragonAmbient { .. } => f.write_str("ENTITY_ENDER_DRAGON_AMBIENT"),
           Sound::EntityEnderDragonDeath { .. } => f.write_str("ENTITY_ENDER_DRAGON_DEATH"),
           Sound::EntityEnderDragonFlap { .. } => f.write_str("ENTITY_ENDER_DRAGON_FLAP"),
           Sound::EntityEnderDragonGrowl { .. } => f.write_str("ENTITY_ENDER_DRAGON_GROWL"),
           Sound::EntityEnderDragonHurt { .. } => f.write_str("ENTITY_ENDER_DRAGON_HURT"),
           Sound::EntityEnderDragonShoot { .. } => f.write_str("ENTITY_ENDER_DRAGON_SHOOT"),
           Sound::EntityEnderEyeDeath { .. } => f.write_str("ENTITY_ENDER_EYE_DEATH"),
           Sound::EntityEnderEyeLaunch { .. } => f.write_str("ENTITY_ENDER_EYE_LAUNCH"),
           Sound::EntityEnderPearlThrow { .. } => f.write_str("ENTITY_ENDER_PEARL_THROW"),
           Sound::EntityEvokerAmbient { .. } => f.write_str("ENTITY_EVOKER_AMBIENT"),
           Sound::EntityEvokerCastSpell { .. } => f.write_str("ENTITY_EVOKER_CAST_SPELL"),
           Sound::EntityEvokerCelebrate { .. } => f.write_str("ENTITY_EVOKER_CELEBRATE"),
           Sound::EntityEvokerDeath { .. } => f.write_str("ENTITY_EVOKER_DEATH"),
           Sound::EntityEvokerFangsAttack { .. } => f.write_str("ENTITY_EVOKER_FANGS_ATTACK"),
           Sound::EntityEvokerHurt { .. } => f.write_str("ENTITY_EVOKER_HURT"),
           Sound::EntityEvokerPrepareAttack { .. } => f.write_str("ENTITY_EVOKER_PREPARE_ATTACK"),
           Sound::EntityEvokerPrepareSummon { .. } => f.write_str("ENTITY_EVOKER_PREPARE_SUMMON"),
           Sound::EntityEvokerPrepareWololo { .. } => f.write_str("ENTITY_EVOKER_PREPARE_WOLOLO"),
           Sound::EntityExperienceBottleThrow { .. } => f.write_str("ENTITY_EXPERIENCE_BOTTLE_THROW"),
           Sound::EntityExperienceOrbPickup { .. } => f.write_str("ENTITY_EXPERIENCE_ORB_PICKUP"),
           Sound::EntityFireworkRocketBlast { .. } => f.write_str("ENTITY_FIREWORK_ROCKET_BLAST"),
           Sound::EntityFireworkRocketBlastFar { .. } => f.write_str("ENTITY_FIREWORK_ROCKET_BLAST_FAR"),
           Sound::EntityFireworkRocketLargeBlast { .. } => f.write_str("ENTITY_FIREWORK_ROCKET_LARGE_BLAST"),
           Sound::EntityFireworkRocketLargeBlastFar { .. } => f.write_str("ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR"),
           Sound::EntityFireworkRocketLaunch { .. } => f.write_str("ENTITY_FIREWORK_ROCKET_LAUNCH"),
           Sound::EntityFireworkRocketShoot { .. } => f.write_str("ENTITY_FIREWORK_ROCKET_SHOOT"),
           Sound::EntityFireworkRocketTwinkle { .. } => f.write_str("ENTITY_FIREWORK_ROCKET_TWINKLE"),
           Sound::EntityFireworkRocketTwinkleFar { .. } => f.write_str("ENTITY_FIREWORK_ROCKET_TWINKLE_FAR"),
           Sound::EntityFishingBobberRetrieve { .. } => f.write_str("ENTITY_FISHING_BOBBER_RETRIEVE"),
           Sound::EntityFishingBobberSplash { .. } => f.write_str("ENTITY_FISHING_BOBBER_SPLASH"),
           Sound::EntityFishingBobberThrow { .. } => f.write_str("ENTITY_FISHING_BOBBER_THROW"),
           Sound::EntityFishSwim { .. } => f.write_str("ENTITY_FISH_SWIM"),
           Sound::EntityFoxAggro { .. } => f.write_str("ENTITY_FOX_AGGRO"),
           Sound::EntityFoxAmbient { .. } => f.write_str("ENTITY_FOX_AMBIENT"),
           Sound::EntityFoxBite { .. } => f.write_str("ENTITY_FOX_BITE"),
           Sound::EntityFoxDeath { .. } => f.write_str("ENTITY_FOX_DEATH"),
           Sound::EntityFoxEat { .. } => f.write_str("ENTITY_FOX_EAT"),
           Sound::EntityFoxHurt { .. } => f.write_str("ENTITY_FOX_HURT"),
           Sound::EntityFoxScreech { .. } => f.write_str("ENTITY_FOX_SCREECH"),
           Sound::EntityFoxSleep { .. } => f.write_str("ENTITY_FOX_SLEEP"),
           Sound::EntityFoxSniff { .. } => f.write_str("ENTITY_FOX_SNIFF"),
           Sound::EntityFoxSpit { .. } => f.write_str("ENTITY_FOX_SPIT"),
           Sound::EntityFoxTeleport { .. } => f.write_str("ENTITY_FOX_TELEPORT"),
           Sound::EntityFrogAmbient { .. } => f.write_str("ENTITY_FROG_AMBIENT"),
           Sound::EntityFrogDeath { .. } => f.write_str("ENTITY_FROG_DEATH"),
           Sound::EntityFrogEat { .. } => f.write_str("ENTITY_FROG_EAT"),
           Sound::EntityFrogHurt { .. } => f.write_str("ENTITY_FROG_HURT"),
           Sound::EntityFrogLaySpawn { .. } => f.write_str("ENTITY_FROG_LAY_SPAWN"),
           Sound::EntityFrogLongJump { .. } => f.write_str("ENTITY_FROG_LONG_JUMP"),
           Sound::EntityFrogStep { .. } => f.write_str("ENTITY_FROG_STEP"),
           Sound::EntityFrogTongue { .. } => f.write_str("ENTITY_FROG_TONGUE"),
           Sound::EntityGenericBigFall { .. } => f.write_str("ENTITY_GENERIC_BIG_FALL"),
           Sound::EntityGenericBurn { .. } => f.write_str("ENTITY_GENERIC_BURN"),
           Sound::EntityGenericDeath { .. } => f.write_str("ENTITY_GENERIC_DEATH"),
           Sound::EntityGenericDrink { .. } => f.write_str("ENTITY_GENERIC_DRINK"),
           Sound::EntityGenericEat { .. } => f.write_str("ENTITY_GENERIC_EAT"),
           Sound::EntityGenericExplode { .. } => f.write_str("ENTITY_GENERIC_EXPLODE"),
           Sound::EntityGenericExtinguishFire { .. } => f.write_str("ENTITY_GENERIC_EXTINGUISH_FIRE"),
           Sound::EntityGenericHurt { .. } => f.write_str("ENTITY_GENERIC_HURT"),
           Sound::EntityGenericSmallFall { .. } => f.write_str("ENTITY_GENERIC_SMALL_FALL"),
           Sound::EntityGenericSplash { .. } => f.write_str("ENTITY_GENERIC_SPLASH"),
           Sound::EntityGenericSwim { .. } => f.write_str("ENTITY_GENERIC_SWIM"),
           Sound::EntityGenericWindBurst { .. } => f.write_str("ENTITY_GENERIC_WIND_BURST"),
           Sound::EntityGhastAmbient { .. } => f.write_str("ENTITY_GHAST_AMBIENT"),
           Sound::EntityGhastDeath { .. } => f.write_str("ENTITY_GHAST_DEATH"),
           Sound::EntityGhastHurt { .. } => f.write_str("ENTITY_GHAST_HURT"),
           Sound::EntityGhastScream { .. } => f.write_str("ENTITY_GHAST_SCREAM"),
           Sound::EntityGhastShoot { .. } => f.write_str("ENTITY_GHAST_SHOOT"),
           Sound::EntityGhastWarn { .. } => f.write_str("ENTITY_GHAST_WARN"),
           Sound::EntityGlowItemFrameAddItem { .. } => f.write_str("ENTITY_GLOW_ITEM_FRAME_ADD_ITEM"),
           Sound::EntityGlowItemFrameBreak { .. } => f.write_str("ENTITY_GLOW_ITEM_FRAME_BREAK"),
           Sound::EntityGlowItemFramePlace { .. } => f.write_str("ENTITY_GLOW_ITEM_FRAME_PLACE"),
           Sound::EntityGlowItemFrameRemoveItem { .. } => f.write_str("ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM"),
           Sound::EntityGlowItemFrameRotateItem { .. } => f.write_str("ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM"),
           Sound::EntityGlowSquidAmbient { .. } => f.write_str("ENTITY_GLOW_SQUID_AMBIENT"),
           Sound::EntityGlowSquidDeath { .. } => f.write_str("ENTITY_GLOW_SQUID_DEATH"),
           Sound::EntityGlowSquidHurt { .. } => f.write_str("ENTITY_GLOW_SQUID_HURT"),
           Sound::EntityGlowSquidSquirt { .. } => f.write_str("ENTITY_GLOW_SQUID_SQUIRT"),
           Sound::EntityGoatAmbient { .. } => f.write_str("ENTITY_GOAT_AMBIENT"),
           Sound::EntityGoatDeath { .. } => f.write_str("ENTITY_GOAT_DEATH"),
           Sound::EntityGoatEat { .. } => f.write_str("ENTITY_GOAT_EAT"),
           Sound::EntityGoatHornBreak { .. } => f.write_str("ENTITY_GOAT_HORN_BREAK"),
           Sound::EntityGoatHurt { .. } => f.write_str("ENTITY_GOAT_HURT"),
           Sound::EntityGoatLongJump { .. } => f.write_str("ENTITY_GOAT_LONG_JUMP"),
           Sound::EntityGoatMilk { .. } => f.write_str("ENTITY_GOAT_MILK"),
           Sound::EntityGoatPrepareRam { .. } => f.write_str("ENTITY_GOAT_PREPARE_RAM"),
           Sound::EntityGoatRamImpact { .. } => f.write_str("ENTITY_GOAT_RAM_IMPACT"),
           Sound::EntityGoatScreamingAmbient { .. } => f.write_str("ENTITY_GOAT_SCREAMING_AMBIENT"),
           Sound::EntityGoatScreamingDeath { .. } => f.write_str("ENTITY_GOAT_SCREAMING_DEATH"),
           Sound::EntityGoatScreamingEat { .. } => f.write_str("ENTITY_GOAT_SCREAMING_EAT"),
           Sound::EntityGoatScreamingHornBreak { .. } => f.write_str("ENTITY_GOAT_SCREAMING_HORN_BREAK"),
           Sound::EntityGoatScreamingHurt { .. } => f.write_str("ENTITY_GOAT_SCREAMING_HURT"),
           Sound::EntityGoatScreamingLongJump { .. } => f.write_str("ENTITY_GOAT_SCREAMING_LONG_JUMP"),
           Sound::EntityGoatScreamingMilk { .. } => f.write_str("ENTITY_GOAT_SCREAMING_MILK"),
           Sound::EntityGoatScreamingPrepareRam { .. } => f.write_str("ENTITY_GOAT_SCREAMING_PREPARE_RAM"),
           Sound::EntityGoatScreamingRamImpact { .. } => f.write_str("ENTITY_GOAT_SCREAMING_RAM_IMPACT"),
           Sound::EntityGoatStep { .. } => f.write_str("ENTITY_GOAT_STEP"),
           Sound::EntityGuardianAmbient { .. } => f.write_str("ENTITY_GUARDIAN_AMBIENT"),
           Sound::EntityGuardianAmbientLand { .. } => f.write_str("ENTITY_GUARDIAN_AMBIENT_LAND"),
           Sound::EntityGuardianAttack { .. } => f.write_str("ENTITY_GUARDIAN_ATTACK"),
           Sound::EntityGuardianDeath { .. } => f.write_str("ENTITY_GUARDIAN_DEATH"),
           Sound::EntityGuardianDeathLand { .. } => f.write_str("ENTITY_GUARDIAN_DEATH_LAND"),
           Sound::EntityGuardianFlop { .. } => f.write_str("ENTITY_GUARDIAN_FLOP"),
           Sound::EntityGuardianHurt { .. } => f.write_str("ENTITY_GUARDIAN_HURT"),
           Sound::EntityGuardianHurtLand { .. } => f.write_str("ENTITY_GUARDIAN_HURT_LAND"),
           Sound::EntityHoglinAmbient { .. } => f.write_str("ENTITY_HOGLIN_AMBIENT"),
           Sound::EntityHoglinAngry { .. } => f.write_str("ENTITY_HOGLIN_ANGRY"),
           Sound::EntityHoglinAttack { .. } => f.write_str("ENTITY_HOGLIN_ATTACK"),
           Sound::EntityHoglinConvertedToZombified { .. } => f.write_str("ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED"),
           Sound::EntityHoglinDeath { .. } => f.write_str("ENTITY_HOGLIN_DEATH"),
           Sound::EntityHoglinHurt { .. } => f.write_str("ENTITY_HOGLIN_HURT"),
           Sound::EntityHoglinRetreat { .. } => f.write_str("ENTITY_HOGLIN_RETREAT"),
           Sound::EntityHoglinStep { .. } => f.write_str("ENTITY_HOGLIN_STEP"),
           Sound::EntityHorseAmbient { .. } => f.write_str("ENTITY_HORSE_AMBIENT"),
           Sound::EntityHorseAngry { .. } => f.write_str("ENTITY_HORSE_ANGRY"),
           Sound::EntityHorseArmor { .. } => f.write_str("ENTITY_HORSE_ARMOR"),
           Sound::EntityHorseBreathe { .. } => f.write_str("ENTITY_HORSE_BREATHE"),
           Sound::EntityHorseDeath { .. } => f.write_str("ENTITY_HORSE_DEATH"),
           Sound::EntityHorseEat { .. } => f.write_str("ENTITY_HORSE_EAT"),
           Sound::EntityHorseGallop { .. } => f.write_str("ENTITY_HORSE_GALLOP"),
           Sound::EntityHorseHurt { .. } => f.write_str("ENTITY_HORSE_HURT"),
           Sound::EntityHorseJump { .. } => f.write_str("ENTITY_HORSE_JUMP"),
           Sound::EntityHorseLand { .. } => f.write_str("ENTITY_HORSE_LAND"),
           Sound::EntityHorseSaddle { .. } => f.write_str("ENTITY_HORSE_SADDLE"),
           Sound::EntityHorseStep { .. } => f.write_str("ENTITY_HORSE_STEP"),
           Sound::EntityHorseStepWood { .. } => f.write_str("ENTITY_HORSE_STEP_WOOD"),
           Sound::EntityHostileBigFall { .. } => f.write_str("ENTITY_HOSTILE_BIG_FALL"),
           Sound::EntityHostileDeath { .. } => f.write_str("ENTITY_HOSTILE_DEATH"),
           Sound::EntityHostileHurt { .. } => f.write_str("ENTITY_HOSTILE_HURT"),
           Sound::EntityHostileSmallFall { .. } => f.write_str("ENTITY_HOSTILE_SMALL_FALL"),
           Sound::EntityHostileSplash { .. } => f.write_str("ENTITY_HOSTILE_SPLASH"),
           Sound::EntityHostileSwim { .. } => f.write_str("ENTITY_HOSTILE_SWIM"),
           Sound::EntityHuskAmbient { .. } => f.write_str("ENTITY_HUSK_AMBIENT"),
           Sound::EntityHuskConvertedToZombie { .. } => f.write_str("ENTITY_HUSK_CONVERTED_TO_ZOMBIE"),
           Sound::EntityHuskDeath { .. } => f.write_str("ENTITY_HUSK_DEATH"),
           Sound::EntityHuskHurt { .. } => f.write_str("ENTITY_HUSK_HURT"),
           Sound::EntityHuskStep { .. } => f.write_str("ENTITY_HUSK_STEP"),
           Sound::EntityIllusionerAmbient { .. } => f.write_str("ENTITY_ILLUSIONER_AMBIENT"),
           Sound::EntityIllusionerCastSpell { .. } => f.write_str("ENTITY_ILLUSIONER_CAST_SPELL"),
           Sound::EntityIllusionerDeath { .. } => f.write_str("ENTITY_ILLUSIONER_DEATH"),
           Sound::EntityIllusionerHurt { .. } => f.write_str("ENTITY_ILLUSIONER_HURT"),
           Sound::EntityIllusionerMirrorMove { .. } => f.write_str("ENTITY_ILLUSIONER_MIRROR_MOVE"),
           Sound::EntityIllusionerPrepareBlindness { .. } => f.write_str("ENTITY_ILLUSIONER_PREPARE_BLINDNESS"),
           Sound::EntityIllusionerPrepareMirror { .. } => f.write_str("ENTITY_ILLUSIONER_PREPARE_MIRROR"),
           Sound::EntityIronGolemAttack { .. } => f.write_str("ENTITY_IRON_GOLEM_ATTACK"),
           Sound::EntityIronGolemDamage { .. } => f.write_str("ENTITY_IRON_GOLEM_DAMAGE"),
           Sound::EntityIronGolemDeath { .. } => f.write_str("ENTITY_IRON_GOLEM_DEATH"),
           Sound::EntityIronGolemHurt { .. } => f.write_str("ENTITY_IRON_GOLEM_HURT"),
           Sound::EntityIronGolemRepair { .. } => f.write_str("ENTITY_IRON_GOLEM_REPAIR"),
           Sound::EntityIronGolemStep { .. } => f.write_str("ENTITY_IRON_GOLEM_STEP"),
           Sound::EntityItemBreak { .. } => f.write_str("ENTITY_ITEM_BREAK"),
           Sound::EntityItemFrameAddItem { .. } => f.write_str("ENTITY_ITEM_FRAME_ADD_ITEM"),
           Sound::EntityItemFrameBreak { .. } => f.write_str("ENTITY_ITEM_FRAME_BREAK"),
           Sound::EntityItemFramePlace { .. } => f.write_str("ENTITY_ITEM_FRAME_PLACE"),
           Sound::EntityItemFrameRemoveItem { .. } => f.write_str("ENTITY_ITEM_FRAME_REMOVE_ITEM"),
           Sound::EntityItemFrameRotateItem { .. } => f.write_str("ENTITY_ITEM_FRAME_ROTATE_ITEM"),
           Sound::EntityItemPickup { .. } => f.write_str("ENTITY_ITEM_PICKUP"),
           Sound::EntityLeashKnotBreak { .. } => f.write_str("ENTITY_LEASH_KNOT_BREAK"),
           Sound::EntityLeashKnotPlace { .. } => f.write_str("ENTITY_LEASH_KNOT_PLACE"),
           Sound::EntityLightningBoltImpact { .. } => f.write_str("ENTITY_LIGHTNING_BOLT_IMPACT"),
           Sound::EntityLightningBoltThunder { .. } => f.write_str("ENTITY_LIGHTNING_BOLT_THUNDER"),
           Sound::EntityLingeringPotionThrow { .. } => f.write_str("ENTITY_LINGERING_POTION_THROW"),
           Sound::EntityLlamaAmbient { .. } => f.write_str("ENTITY_LLAMA_AMBIENT"),
           Sound::EntityLlamaAngry { .. } => f.write_str("ENTITY_LLAMA_ANGRY"),
           Sound::EntityLlamaChest { .. } => f.write_str("ENTITY_LLAMA_CHEST"),
           Sound::EntityLlamaDeath { .. } => f.write_str("ENTITY_LLAMA_DEATH"),
           Sound::EntityLlamaEat { .. } => f.write_str("ENTITY_LLAMA_EAT"),
           Sound::EntityLlamaHurt { .. } => f.write_str("ENTITY_LLAMA_HURT"),
           Sound::EntityLlamaSpit { .. } => f.write_str("ENTITY_LLAMA_SPIT"),
           Sound::EntityLlamaStep { .. } => f.write_str("ENTITY_LLAMA_STEP"),
           Sound::EntityLlamaSwag { .. } => f.write_str("ENTITY_LLAMA_SWAG"),
           Sound::EntityMagmaCubeDeath { .. } => f.write_str("ENTITY_MAGMA_CUBE_DEATH"),
           Sound::EntityMagmaCubeDeathSmall { .. } => f.write_str("ENTITY_MAGMA_CUBE_DEATH_SMALL"),
           Sound::EntityMagmaCubeHurt { .. } => f.write_str("ENTITY_MAGMA_CUBE_HURT"),
           Sound::EntityMagmaCubeHurtSmall { .. } => f.write_str("ENTITY_MAGMA_CUBE_HURT_SMALL"),
           Sound::EntityMagmaCubeJump { .. } => f.write_str("ENTITY_MAGMA_CUBE_JUMP"),
           Sound::EntityMagmaCubeSquish { .. } => f.write_str("ENTITY_MAGMA_CUBE_SQUISH"),
           Sound::EntityMagmaCubeSquishSmall { .. } => f.write_str("ENTITY_MAGMA_CUBE_SQUISH_SMALL"),
           Sound::EntityMinecartInside { .. } => f.write_str("ENTITY_MINECART_INSIDE"),
           Sound::EntityMinecartInsideUnderwater { .. } => f.write_str("ENTITY_MINECART_INSIDE_UNDERWATER"),
           Sound::EntityMinecartRiding { .. } => f.write_str("ENTITY_MINECART_RIDING"),
           Sound::EntityMooshroomConvert { .. } => f.write_str("ENTITY_MOOSHROOM_CONVERT"),
           Sound::EntityMooshroomEat { .. } => f.write_str("ENTITY_MOOSHROOM_EAT"),
           Sound::EntityMooshroomMilk { .. } => f.write_str("ENTITY_MOOSHROOM_MILK"),
           Sound::EntityMooshroomShear { .. } => f.write_str("ENTITY_MOOSHROOM_SHEAR"),
           Sound::EntityMooshroomSuspiciousMilk { .. } => f.write_str("ENTITY_MOOSHROOM_SUSPICIOUS_MILK"),
           Sound::EntityMuleAmbient { .. } => f.write_str("ENTITY_MULE_AMBIENT"),
           Sound::EntityMuleAngry { .. } => f.write_str("ENTITY_MULE_ANGRY"),
           Sound::EntityMuleChest { .. } => f.write_str("ENTITY_MULE_CHEST"),
           Sound::EntityMuleDeath { .. } => f.write_str("ENTITY_MULE_DEATH"),
           Sound::EntityMuleEat { .. } => f.write_str("ENTITY_MULE_EAT"),
           Sound::EntityMuleHurt { .. } => f.write_str("ENTITY_MULE_HURT"),
           Sound::EntityOcelotAmbient { .. } => f.write_str("ENTITY_OCELOT_AMBIENT"),
           Sound::EntityOcelotDeath { .. } => f.write_str("ENTITY_OCELOT_DEATH"),
           Sound::EntityOcelotHurt { .. } => f.write_str("ENTITY_OCELOT_HURT"),
           Sound::EntityPaintingBreak { .. } => f.write_str("ENTITY_PAINTING_BREAK"),
           Sound::EntityPaintingPlace { .. } => f.write_str("ENTITY_PAINTING_PLACE"),
           Sound::EntityPandaAggressiveAmbient { .. } => f.write_str("ENTITY_PANDA_AGGRESSIVE_AMBIENT"),
           Sound::EntityPandaAmbient { .. } => f.write_str("ENTITY_PANDA_AMBIENT"),
           Sound::EntityPandaBite { .. } => f.write_str("ENTITY_PANDA_BITE"),
           Sound::EntityPandaCantBreed { .. } => f.write_str("ENTITY_PANDA_CANT_BREED"),
           Sound::EntityPandaDeath { .. } => f.write_str("ENTITY_PANDA_DEATH"),
           Sound::EntityPandaEat { .. } => f.write_str("ENTITY_PANDA_EAT"),
           Sound::EntityPandaHurt { .. } => f.write_str("ENTITY_PANDA_HURT"),
           Sound::EntityPandaPreSneeze { .. } => f.write_str("ENTITY_PANDA_PRE_SNEEZE"),
           Sound::EntityPandaSneeze { .. } => f.write_str("ENTITY_PANDA_SNEEZE"),
           Sound::EntityPandaStep { .. } => f.write_str("ENTITY_PANDA_STEP"),
           Sound::EntityPandaWorriedAmbient { .. } => f.write_str("ENTITY_PANDA_WORRIED_AMBIENT"),
           Sound::EntityParrotAmbient { .. } => f.write_str("ENTITY_PARROT_AMBIENT"),
           Sound::EntityParrotDeath { .. } => f.write_str("ENTITY_PARROT_DEATH"),
           Sound::EntityParrotEat { .. } => f.write_str("ENTITY_PARROT_EAT"),
           Sound::EntityParrotFly { .. } => f.write_str("ENTITY_PARROT_FLY"),
           Sound::EntityParrotHurt { .. } => f.write_str("ENTITY_PARROT_HURT"),
           Sound::EntityParrotImitateBlaze { .. } => f.write_str("ENTITY_PARROT_IMITATE_BLAZE"),
           Sound::EntityParrotImitateBreeze { .. } => f.write_str("ENTITY_PARROT_IMITATE_BREEZE"),
           Sound::EntityParrotImitateCreeper { .. } => f.write_str("ENTITY_PARROT_IMITATE_CREEPER"),
           Sound::EntityParrotImitateDrowned { .. } => f.write_str("ENTITY_PARROT_IMITATE_DROWNED"),
           Sound::EntityParrotImitateElderGuardian { .. } => f.write_str("ENTITY_PARROT_IMITATE_ELDER_GUARDIAN"),
           Sound::EntityParrotImitateEndermite { .. } => f.write_str("ENTITY_PARROT_IMITATE_ENDERMITE"),
           Sound::EntityParrotImitateEnderDragon { .. } => f.write_str("ENTITY_PARROT_IMITATE_ENDER_DRAGON"),
           Sound::EntityParrotImitateEvoker { .. } => f.write_str("ENTITY_PARROT_IMITATE_EVOKER"),
           Sound::EntityParrotImitateGhast { .. } => f.write_str("ENTITY_PARROT_IMITATE_GHAST"),
           Sound::EntityParrotImitateGuardian { .. } => f.write_str("ENTITY_PARROT_IMITATE_GUARDIAN"),
           Sound::EntityParrotImitateHoglin { .. } => f.write_str("ENTITY_PARROT_IMITATE_HOGLIN"),
           Sound::EntityParrotImitateHusk { .. } => f.write_str("ENTITY_PARROT_IMITATE_HUSK"),
           Sound::EntityParrotImitateIllusioner { .. } => f.write_str("ENTITY_PARROT_IMITATE_ILLUSIONER"),
           Sound::EntityParrotImitateMagmaCube { .. } => f.write_str("ENTITY_PARROT_IMITATE_MAGMA_CUBE"),
           Sound::EntityParrotImitatePhantom { .. } => f.write_str("ENTITY_PARROT_IMITATE_PHANTOM"),
           Sound::EntityParrotImitatePiglin { .. } => f.write_str("ENTITY_PARROT_IMITATE_PIGLIN"),
           Sound::EntityParrotImitatePiglinBrute { .. } => f.write_str("ENTITY_PARROT_IMITATE_PIGLIN_BRUTE"),
           Sound::EntityParrotImitatePillager { .. } => f.write_str("ENTITY_PARROT_IMITATE_PILLAGER"),
           Sound::EntityParrotImitateRavager { .. } => f.write_str("ENTITY_PARROT_IMITATE_RAVAGER"),
           Sound::EntityParrotImitateShulker { .. } => f.write_str("ENTITY_PARROT_IMITATE_SHULKER"),
           Sound::EntityParrotImitateSilverfish { .. } => f.write_str("ENTITY_PARROT_IMITATE_SILVERFISH"),
           Sound::EntityParrotImitateSkeleton { .. } => f.write_str("ENTITY_PARROT_IMITATE_SKELETON"),
           Sound::EntityParrotImitateSlime { .. } => f.write_str("ENTITY_PARROT_IMITATE_SLIME"),
           Sound::EntityParrotImitateSpider { .. } => f.write_str("ENTITY_PARROT_IMITATE_SPIDER"),
           Sound::EntityParrotImitateStray { .. } => f.write_str("ENTITY_PARROT_IMITATE_STRAY"),
           Sound::EntityParrotImitateVex { .. } => f.write_str("ENTITY_PARROT_IMITATE_VEX"),
           Sound::EntityParrotImitateVindicator { .. } => f.write_str("ENTITY_PARROT_IMITATE_VINDICATOR"),
           Sound::EntityParrotImitateWarden { .. } => f.write_str("ENTITY_PARROT_IMITATE_WARDEN"),
           Sound::EntityParrotImitateWitch { .. } => f.write_str("ENTITY_PARROT_IMITATE_WITCH"),
           Sound::EntityParrotImitateWither { .. } => f.write_str("ENTITY_PARROT_IMITATE_WITHER"),
           Sound::EntityParrotImitateWitherSkeleton { .. } => f.write_str("ENTITY_PARROT_IMITATE_WITHER_SKELETON"),
           Sound::EntityParrotImitateZoglin { .. } => f.write_str("ENTITY_PARROT_IMITATE_ZOGLIN"),
           Sound::EntityParrotImitateZombie { .. } => f.write_str("ENTITY_PARROT_IMITATE_ZOMBIE"),
           Sound::EntityParrotImitateZombieVillager { .. } => f.write_str("ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER"),
           Sound::EntityParrotStep { .. } => f.write_str("ENTITY_PARROT_STEP"),
           Sound::EntityPhantomAmbient { .. } => f.write_str("ENTITY_PHANTOM_AMBIENT"),
           Sound::EntityPhantomBite { .. } => f.write_str("ENTITY_PHANTOM_BITE"),
           Sound::EntityPhantomDeath { .. } => f.write_str("ENTITY_PHANTOM_DEATH"),
           Sound::EntityPhantomFlap { .. } => f.write_str("ENTITY_PHANTOM_FLAP"),
           Sound::EntityPhantomHurt { .. } => f.write_str("ENTITY_PHANTOM_HURT"),
           Sound::EntityPhantomSwoop { .. } => f.write_str("ENTITY_PHANTOM_SWOOP"),
           Sound::EntityPiglinAdmiringItem { .. } => f.write_str("ENTITY_PIGLIN_ADMIRING_ITEM"),
           Sound::EntityPiglinAmbient { .. } => f.write_str("ENTITY_PIGLIN_AMBIENT"),
           Sound::EntityPiglinAngry { .. } => f.write_str("ENTITY_PIGLIN_ANGRY"),
           Sound::EntityPiglinBruteAmbient { .. } => f.write_str("ENTITY_PIGLIN_BRUTE_AMBIENT"),
           Sound::EntityPiglinBruteAngry { .. } => f.write_str("ENTITY_PIGLIN_BRUTE_ANGRY"),
           Sound::EntityPiglinBruteConvertedToZombified { .. } => f.write_str("ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED"),
           Sound::EntityPiglinBruteDeath { .. } => f.write_str("ENTITY_PIGLIN_BRUTE_DEATH"),
           Sound::EntityPiglinBruteHurt { .. } => f.write_str("ENTITY_PIGLIN_BRUTE_HURT"),
           Sound::EntityPiglinBruteStep { .. } => f.write_str("ENTITY_PIGLIN_BRUTE_STEP"),
           Sound::EntityPiglinCelebrate { .. } => f.write_str("ENTITY_PIGLIN_CELEBRATE"),
           Sound::EntityPiglinConvertedToZombified { .. } => f.write_str("ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED"),
           Sound::EntityPiglinDeath { .. } => f.write_str("ENTITY_PIGLIN_DEATH"),
           Sound::EntityPiglinHurt { .. } => f.write_str("ENTITY_PIGLIN_HURT"),
           Sound::EntityPiglinJealous { .. } => f.write_str("ENTITY_PIGLIN_JEALOUS"),
           Sound::EntityPiglinRetreat { .. } => f.write_str("ENTITY_PIGLIN_RETREAT"),
           Sound::EntityPiglinStep { .. } => f.write_str("ENTITY_PIGLIN_STEP"),
           Sound::EntityPigAmbient { .. } => f.write_str("ENTITY_PIG_AMBIENT"),
           Sound::EntityPigDeath { .. } => f.write_str("ENTITY_PIG_DEATH"),
           Sound::EntityPigHurt { .. } => f.write_str("ENTITY_PIG_HURT"),
           Sound::EntityPigSaddle { .. } => f.write_str("ENTITY_PIG_SADDLE"),
           Sound::EntityPigStep { .. } => f.write_str("ENTITY_PIG_STEP"),
           Sound::EntityPillagerAmbient { .. } => f.write_str("ENTITY_PILLAGER_AMBIENT"),
           Sound::EntityPillagerCelebrate { .. } => f.write_str("ENTITY_PILLAGER_CELEBRATE"),
           Sound::EntityPillagerDeath { .. } => f.write_str("ENTITY_PILLAGER_DEATH"),
           Sound::EntityPillagerHurt { .. } => f.write_str("ENTITY_PILLAGER_HURT"),
           Sound::EntityPlayerAttackCrit { .. } => f.write_str("ENTITY_PLAYER_ATTACK_CRIT"),
           Sound::EntityPlayerAttackKnockback { .. } => f.write_str("ENTITY_PLAYER_ATTACK_KNOCKBACK"),
           Sound::EntityPlayerAttackNodamage { .. } => f.write_str("ENTITY_PLAYER_ATTACK_NODAMAGE"),
           Sound::EntityPlayerAttackStrong { .. } => f.write_str("ENTITY_PLAYER_ATTACK_STRONG"),
           Sound::EntityPlayerAttackSweep { .. } => f.write_str("ENTITY_PLAYER_ATTACK_SWEEP"),
           Sound::EntityPlayerAttackWeak { .. } => f.write_str("ENTITY_PLAYER_ATTACK_WEAK"),
           Sound::EntityPlayerBigFall { .. } => f.write_str("ENTITY_PLAYER_BIG_FALL"),
           Sound::EntityPlayerBreath { .. } => f.write_str("ENTITY_PLAYER_BREATH"),
           Sound::EntityPlayerBurp { .. } => f.write_str("ENTITY_PLAYER_BURP"),
           Sound::EntityPlayerDeath { .. } => f.write_str("ENTITY_PLAYER_DEATH"),
           Sound::EntityPlayerHurt { .. } => f.write_str("ENTITY_PLAYER_HURT"),
           Sound::EntityPlayerHurtDrown { .. } => f.write_str("ENTITY_PLAYER_HURT_DROWN"),
           Sound::EntityPlayerHurtFreeze { .. } => f.write_str("ENTITY_PLAYER_HURT_FREEZE"),
           Sound::EntityPlayerHurtOnFire { .. } => f.write_str("ENTITY_PLAYER_HURT_ON_FIRE"),
           Sound::EntityPlayerHurtSweetBerryBush { .. } => f.write_str("ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH"),
           Sound::EntityPlayerLevelup { .. } => f.write_str("ENTITY_PLAYER_LEVELUP"),
           Sound::EntityPlayerSmallFall { .. } => f.write_str("ENTITY_PLAYER_SMALL_FALL"),
           Sound::EntityPlayerSplash { .. } => f.write_str("ENTITY_PLAYER_SPLASH"),
           Sound::EntityPlayerSplashHighSpeed { .. } => f.write_str("ENTITY_PLAYER_SPLASH_HIGH_SPEED"),
           Sound::EntityPlayerSwim { .. } => f.write_str("ENTITY_PLAYER_SWIM"),
           Sound::EntityPlayerTeleport { .. } => f.write_str("ENTITY_PLAYER_TELEPORT"),
           Sound::EntityPolarBearAmbient { .. } => f.write_str("ENTITY_POLAR_BEAR_AMBIENT"),
           Sound::EntityPolarBearAmbientBaby { .. } => f.write_str("ENTITY_POLAR_BEAR_AMBIENT_BABY"),
           Sound::EntityPolarBearDeath { .. } => f.write_str("ENTITY_POLAR_BEAR_DEATH"),
           Sound::EntityPolarBearHurt { .. } => f.write_str("ENTITY_POLAR_BEAR_HURT"),
           Sound::EntityPolarBearStep { .. } => f.write_str("ENTITY_POLAR_BEAR_STEP"),
           Sound::EntityPolarBearWarning { .. } => f.write_str("ENTITY_POLAR_BEAR_WARNING"),
           Sound::EntityPufferFishAmbient { .. } => f.write_str("ENTITY_PUFFER_FISH_AMBIENT"),
           Sound::EntityPufferFishBlowOut { .. } => f.write_str("ENTITY_PUFFER_FISH_BLOW_OUT"),
           Sound::EntityPufferFishBlowUp { .. } => f.write_str("ENTITY_PUFFER_FISH_BLOW_UP"),
           Sound::EntityPufferFishDeath { .. } => f.write_str("ENTITY_PUFFER_FISH_DEATH"),
           Sound::EntityPufferFishFlop { .. } => f.write_str("ENTITY_PUFFER_FISH_FLOP"),
           Sound::EntityPufferFishHurt { .. } => f.write_str("ENTITY_PUFFER_FISH_HURT"),
           Sound::EntityPufferFishSting { .. } => f.write_str("ENTITY_PUFFER_FISH_STING"),
           Sound::EntityRabbitAmbient { .. } => f.write_str("ENTITY_RABBIT_AMBIENT"),
           Sound::EntityRabbitAttack { .. } => f.write_str("ENTITY_RABBIT_ATTACK"),
           Sound::EntityRabbitDeath { .. } => f.write_str("ENTITY_RABBIT_DEATH"),
           Sound::EntityRabbitHurt { .. } => f.write_str("ENTITY_RABBIT_HURT"),
           Sound::EntityRabbitJump { .. } => f.write_str("ENTITY_RABBIT_JUMP"),
           Sound::EntityRavagerAmbient { .. } => f.write_str("ENTITY_RAVAGER_AMBIENT"),
           Sound::EntityRavagerAttack { .. } => f.write_str("ENTITY_RAVAGER_ATTACK"),
           Sound::EntityRavagerCelebrate { .. } => f.write_str("ENTITY_RAVAGER_CELEBRATE"),
           Sound::EntityRavagerDeath { .. } => f.write_str("ENTITY_RAVAGER_DEATH"),
           Sound::EntityRavagerHurt { .. } => f.write_str("ENTITY_RAVAGER_HURT"),
           Sound::EntityRavagerRoar { .. } => f.write_str("ENTITY_RAVAGER_ROAR"),
           Sound::EntityRavagerStep { .. } => f.write_str("ENTITY_RAVAGER_STEP"),
           Sound::EntityRavagerStunned { .. } => f.write_str("ENTITY_RAVAGER_STUNNED"),
           Sound::EntitySalmonAmbient { .. } => f.write_str("ENTITY_SALMON_AMBIENT"),
           Sound::EntitySalmonDeath { .. } => f.write_str("ENTITY_SALMON_DEATH"),
           Sound::EntitySalmonFlop { .. } => f.write_str("ENTITY_SALMON_FLOP"),
           Sound::EntitySalmonHurt { .. } => f.write_str("ENTITY_SALMON_HURT"),
           Sound::EntitySheepAmbient { .. } => f.write_str("ENTITY_SHEEP_AMBIENT"),
           Sound::EntitySheepDeath { .. } => f.write_str("ENTITY_SHEEP_DEATH"),
           Sound::EntitySheepHurt { .. } => f.write_str("ENTITY_SHEEP_HURT"),
           Sound::EntitySheepShear { .. } => f.write_str("ENTITY_SHEEP_SHEAR"),
           Sound::EntitySheepStep { .. } => f.write_str("ENTITY_SHEEP_STEP"),
           Sound::EntityShulkerAmbient { .. } => f.write_str("ENTITY_SHULKER_AMBIENT"),
           Sound::EntityShulkerBulletHit { .. } => f.write_str("ENTITY_SHULKER_BULLET_HIT"),
           Sound::EntityShulkerBulletHurt { .. } => f.write_str("ENTITY_SHULKER_BULLET_HURT"),
           Sound::EntityShulkerClose { .. } => f.write_str("ENTITY_SHULKER_CLOSE"),
           Sound::EntityShulkerDeath { .. } => f.write_str("ENTITY_SHULKER_DEATH"),
           Sound::EntityShulkerHurt { .. } => f.write_str("ENTITY_SHULKER_HURT"),
           Sound::EntityShulkerHurtClosed { .. } => f.write_str("ENTITY_SHULKER_HURT_CLOSED"),
           Sound::EntityShulkerOpen { .. } => f.write_str("ENTITY_SHULKER_OPEN"),
           Sound::EntityShulkerShoot { .. } => f.write_str("ENTITY_SHULKER_SHOOT"),
           Sound::EntityShulkerTeleport { .. } => f.write_str("ENTITY_SHULKER_TELEPORT"),
           Sound::EntitySilverfishAmbient { .. } => f.write_str("ENTITY_SILVERFISH_AMBIENT"),
           Sound::EntitySilverfishDeath { .. } => f.write_str("ENTITY_SILVERFISH_DEATH"),
           Sound::EntitySilverfishHurt { .. } => f.write_str("ENTITY_SILVERFISH_HURT"),
           Sound::EntitySilverfishStep { .. } => f.write_str("ENTITY_SILVERFISH_STEP"),
           Sound::EntitySkeletonAmbient { .. } => f.write_str("ENTITY_SKELETON_AMBIENT"),
           Sound::EntitySkeletonConvertedToStray { .. } => f.write_str("ENTITY_SKELETON_CONVERTED_TO_STRAY"),
           Sound::EntitySkeletonDeath { .. } => f.write_str("ENTITY_SKELETON_DEATH"),
           Sound::EntitySkeletonHorseAmbient { .. } => f.write_str("ENTITY_SKELETON_HORSE_AMBIENT"),
           Sound::EntitySkeletonHorseAmbientWater { .. } => f.write_str("ENTITY_SKELETON_HORSE_AMBIENT_WATER"),
           Sound::EntitySkeletonHorseDeath { .. } => f.write_str("ENTITY_SKELETON_HORSE_DEATH"),
           Sound::EntitySkeletonHorseGallopWater { .. } => f.write_str("ENTITY_SKELETON_HORSE_GALLOP_WATER"),
           Sound::EntitySkeletonHorseHurt { .. } => f.write_str("ENTITY_SKELETON_HORSE_HURT"),
           Sound::EntitySkeletonHorseJumpWater { .. } => f.write_str("ENTITY_SKELETON_HORSE_JUMP_WATER"),
           Sound::EntitySkeletonHorseStepWater { .. } => f.write_str("ENTITY_SKELETON_HORSE_STEP_WATER"),
           Sound::EntitySkeletonHorseSwim { .. } => f.write_str("ENTITY_SKELETON_HORSE_SWIM"),
           Sound::EntitySkeletonHurt { .. } => f.write_str("ENTITY_SKELETON_HURT"),
           Sound::EntitySkeletonShoot { .. } => f.write_str("ENTITY_SKELETON_SHOOT"),
           Sound::EntitySkeletonStep { .. } => f.write_str("ENTITY_SKELETON_STEP"),
           Sound::EntitySlimeAttack { .. } => f.write_str("ENTITY_SLIME_ATTACK"),
           Sound::EntitySlimeDeath { .. } => f.write_str("ENTITY_SLIME_DEATH"),
           Sound::EntitySlimeDeathSmall { .. } => f.write_str("ENTITY_SLIME_DEATH_SMALL"),
           Sound::EntitySlimeHurt { .. } => f.write_str("ENTITY_SLIME_HURT"),
           Sound::EntitySlimeHurtSmall { .. } => f.write_str("ENTITY_SLIME_HURT_SMALL"),
           Sound::EntitySlimeJump { .. } => f.write_str("ENTITY_SLIME_JUMP"),
           Sound::EntitySlimeJumpSmall { .. } => f.write_str("ENTITY_SLIME_JUMP_SMALL"),
           Sound::EntitySlimeSquish { .. } => f.write_str("ENTITY_SLIME_SQUISH"),
           Sound::EntitySlimeSquishSmall { .. } => f.write_str("ENTITY_SLIME_SQUISH_SMALL"),
           Sound::EntitySnifferDeath { .. } => f.write_str("ENTITY_SNIFFER_DEATH"),
           Sound::EntitySnifferDigging { .. } => f.write_str("ENTITY_SNIFFER_DIGGING"),
           Sound::EntitySnifferDiggingStop { .. } => f.write_str("ENTITY_SNIFFER_DIGGING_STOP"),
           Sound::EntitySnifferDropSeed { .. } => f.write_str("ENTITY_SNIFFER_DROP_SEED"),
           Sound::EntitySnifferEat { .. } => f.write_str("ENTITY_SNIFFER_EAT"),
           Sound::EntitySnifferHappy { .. } => f.write_str("ENTITY_SNIFFER_HAPPY"),
           Sound::EntitySnifferHurt { .. } => f.write_str("ENTITY_SNIFFER_HURT"),
           Sound::EntitySnifferIdle { .. } => f.write_str("ENTITY_SNIFFER_IDLE"),
           Sound::EntitySnifferScenting { .. } => f.write_str("ENTITY_SNIFFER_SCENTING"),
           Sound::EntitySnifferSearching { .. } => f.write_str("ENTITY_SNIFFER_SEARCHING"),
           Sound::EntitySnifferSniffing { .. } => f.write_str("ENTITY_SNIFFER_SNIFFING"),
           Sound::EntitySnifferStep { .. } => f.write_str("ENTITY_SNIFFER_STEP"),
           Sound::EntitySnowballThrow { .. } => f.write_str("ENTITY_SNOWBALL_THROW"),
           Sound::EntitySnowGolemAmbient { .. } => f.write_str("ENTITY_SNOW_GOLEM_AMBIENT"),
           Sound::EntitySnowGolemDeath { .. } => f.write_str("ENTITY_SNOW_GOLEM_DEATH"),
           Sound::EntitySnowGolemHurt { .. } => f.write_str("ENTITY_SNOW_GOLEM_HURT"),
           Sound::EntitySnowGolemShear { .. } => f.write_str("ENTITY_SNOW_GOLEM_SHEAR"),
           Sound::EntitySnowGolemShoot { .. } => f.write_str("ENTITY_SNOW_GOLEM_SHOOT"),
           Sound::EntitySpiderAmbient { .. } => f.write_str("ENTITY_SPIDER_AMBIENT"),
           Sound::EntitySpiderDeath { .. } => f.write_str("ENTITY_SPIDER_DEATH"),
           Sound::EntitySpiderHurt { .. } => f.write_str("ENTITY_SPIDER_HURT"),
           Sound::EntitySpiderStep { .. } => f.write_str("ENTITY_SPIDER_STEP"),
           Sound::EntitySplashPotionBreak { .. } => f.write_str("ENTITY_SPLASH_POTION_BREAK"),
           Sound::EntitySplashPotionThrow { .. } => f.write_str("ENTITY_SPLASH_POTION_THROW"),
           Sound::EntitySquidAmbient { .. } => f.write_str("ENTITY_SQUID_AMBIENT"),
           Sound::EntitySquidDeath { .. } => f.write_str("ENTITY_SQUID_DEATH"),
           Sound::EntitySquidHurt { .. } => f.write_str("ENTITY_SQUID_HURT"),
           Sound::EntitySquidSquirt { .. } => f.write_str("ENTITY_SQUID_SQUIRT"),
           Sound::EntityStrayAmbient { .. } => f.write_str("ENTITY_STRAY_AMBIENT"),
           Sound::EntityStrayDeath { .. } => f.write_str("ENTITY_STRAY_DEATH"),
           Sound::EntityStrayHurt { .. } => f.write_str("ENTITY_STRAY_HURT"),
           Sound::EntityStrayStep { .. } => f.write_str("ENTITY_STRAY_STEP"),
           Sound::EntityStriderAmbient { .. } => f.write_str("ENTITY_STRIDER_AMBIENT"),
           Sound::EntityStriderDeath { .. } => f.write_str("ENTITY_STRIDER_DEATH"),
           Sound::EntityStriderEat { .. } => f.write_str("ENTITY_STRIDER_EAT"),
           Sound::EntityStriderHappy { .. } => f.write_str("ENTITY_STRIDER_HAPPY"),
           Sound::EntityStriderHurt { .. } => f.write_str("ENTITY_STRIDER_HURT"),
           Sound::EntityStriderRetreat { .. } => f.write_str("ENTITY_STRIDER_RETREAT"),
           Sound::EntityStriderSaddle { .. } => f.write_str("ENTITY_STRIDER_SADDLE"),
           Sound::EntityStriderStep { .. } => f.write_str("ENTITY_STRIDER_STEP"),
           Sound::EntityStriderStepLava { .. } => f.write_str("ENTITY_STRIDER_STEP_LAVA"),
           Sound::EntityTadpoleDeath { .. } => f.write_str("ENTITY_TADPOLE_DEATH"),
           Sound::EntityTadpoleFlop { .. } => f.write_str("ENTITY_TADPOLE_FLOP"),
           Sound::EntityTadpoleGrowUp { .. } => f.write_str("ENTITY_TADPOLE_GROW_UP"),
           Sound::EntityTadpoleHurt { .. } => f.write_str("ENTITY_TADPOLE_HURT"),
           Sound::EntityTntPrimed { .. } => f.write_str("ENTITY_TNT_PRIMED"),
           Sound::EntityTropicalFishAmbient { .. } => f.write_str("ENTITY_TROPICAL_FISH_AMBIENT"),
           Sound::EntityTropicalFishDeath { .. } => f.write_str("ENTITY_TROPICAL_FISH_DEATH"),
           Sound::EntityTropicalFishFlop { .. } => f.write_str("ENTITY_TROPICAL_FISH_FLOP"),
           Sound::EntityTropicalFishHurt { .. } => f.write_str("ENTITY_TROPICAL_FISH_HURT"),
           Sound::EntityTurtleAmbientLand { .. } => f.write_str("ENTITY_TURTLE_AMBIENT_LAND"),
           Sound::EntityTurtleDeath { .. } => f.write_str("ENTITY_TURTLE_DEATH"),
           Sound::EntityTurtleDeathBaby { .. } => f.write_str("ENTITY_TURTLE_DEATH_BABY"),
           Sound::EntityTurtleEggBreak { .. } => f.write_str("ENTITY_TURTLE_EGG_BREAK"),
           Sound::EntityTurtleEggCrack { .. } => f.write_str("ENTITY_TURTLE_EGG_CRACK"),
           Sound::EntityTurtleEggHatch { .. } => f.write_str("ENTITY_TURTLE_EGG_HATCH"),
           Sound::EntityTurtleHurt { .. } => f.write_str("ENTITY_TURTLE_HURT"),
           Sound::EntityTurtleHurtBaby { .. } => f.write_str("ENTITY_TURTLE_HURT_BABY"),
           Sound::EntityTurtleLayEgg { .. } => f.write_str("ENTITY_TURTLE_LAY_EGG"),
           Sound::EntityTurtleShamble { .. } => f.write_str("ENTITY_TURTLE_SHAMBLE"),
           Sound::EntityTurtleShambleBaby { .. } => f.write_str("ENTITY_TURTLE_SHAMBLE_BABY"),
           Sound::EntityTurtleSwim { .. } => f.write_str("ENTITY_TURTLE_SWIM"),
           Sound::EntityVexAmbient { .. } => f.write_str("ENTITY_VEX_AMBIENT"),
           Sound::EntityVexCharge { .. } => f.write_str("ENTITY_VEX_CHARGE"),
           Sound::EntityVexDeath { .. } => f.write_str("ENTITY_VEX_DEATH"),
           Sound::EntityVexHurt { .. } => f.write_str("ENTITY_VEX_HURT"),
           Sound::EntityVillagerAmbient { .. } => f.write_str("ENTITY_VILLAGER_AMBIENT"),
           Sound::EntityVillagerCelebrate { .. } => f.write_str("ENTITY_VILLAGER_CELEBRATE"),
           Sound::EntityVillagerDeath { .. } => f.write_str("ENTITY_VILLAGER_DEATH"),
           Sound::EntityVillagerHurt { .. } => f.write_str("ENTITY_VILLAGER_HURT"),
           Sound::EntityVillagerNo { .. } => f.write_str("ENTITY_VILLAGER_NO"),
           Sound::EntityVillagerTrade { .. } => f.write_str("ENTITY_VILLAGER_TRADE"),
           Sound::EntityVillagerWorkArmorer { .. } => f.write_str("ENTITY_VILLAGER_WORK_ARMORER"),
           Sound::EntityVillagerWorkButcher { .. } => f.write_str("ENTITY_VILLAGER_WORK_BUTCHER"),
           Sound::EntityVillagerWorkCartographer { .. } => f.write_str("ENTITY_VILLAGER_WORK_CARTOGRAPHER"),
           Sound::EntityVillagerWorkCleric { .. } => f.write_str("ENTITY_VILLAGER_WORK_CLERIC"),
           Sound::EntityVillagerWorkFarmer { .. } => f.write_str("ENTITY_VILLAGER_WORK_FARMER"),
           Sound::EntityVillagerWorkFisherman { .. } => f.write_str("ENTITY_VILLAGER_WORK_FISHERMAN"),
           Sound::EntityVillagerWorkFletcher { .. } => f.write_str("ENTITY_VILLAGER_WORK_FLETCHER"),
           Sound::EntityVillagerWorkLeatherworker { .. } => f.write_str("ENTITY_VILLAGER_WORK_LEATHERWORKER"),
           Sound::EntityVillagerWorkLibrarian { .. } => f.write_str("ENTITY_VILLAGER_WORK_LIBRARIAN"),
           Sound::EntityVillagerWorkMason { .. } => f.write_str("ENTITY_VILLAGER_WORK_MASON"),
           Sound::EntityVillagerWorkShepherd { .. } => f.write_str("ENTITY_VILLAGER_WORK_SHEPHERD"),
           Sound::EntityVillagerWorkToolsmith { .. } => f.write_str("ENTITY_VILLAGER_WORK_TOOLSMITH"),
           Sound::EntityVillagerWorkWeaponsmith { .. } => f.write_str("ENTITY_VILLAGER_WORK_WEAPONSMITH"),
           Sound::EntityVillagerYes { .. } => f.write_str("ENTITY_VILLAGER_YES"),
           Sound::EntityVindicatorAmbient { .. } => f.write_str("ENTITY_VINDICATOR_AMBIENT"),
           Sound::EntityVindicatorCelebrate { .. } => f.write_str("ENTITY_VINDICATOR_CELEBRATE"),
           Sound::EntityVindicatorDeath { .. } => f.write_str("ENTITY_VINDICATOR_DEATH"),
           Sound::EntityVindicatorHurt { .. } => f.write_str("ENTITY_VINDICATOR_HURT"),
           Sound::EntityWanderingTraderAmbient { .. } => f.write_str("ENTITY_WANDERING_TRADER_AMBIENT"),
           Sound::EntityWanderingTraderDeath { .. } => f.write_str("ENTITY_WANDERING_TRADER_DEATH"),
           Sound::EntityWanderingTraderDisappeared { .. } => f.write_str("ENTITY_WANDERING_TRADER_DISAPPEARED"),
           Sound::EntityWanderingTraderDrinkMilk { .. } => f.write_str("ENTITY_WANDERING_TRADER_DRINK_MILK"),
           Sound::EntityWanderingTraderDrinkPotion { .. } => f.write_str("ENTITY_WANDERING_TRADER_DRINK_POTION"),
           Sound::EntityWanderingTraderHurt { .. } => f.write_str("ENTITY_WANDERING_TRADER_HURT"),
           Sound::EntityWanderingTraderNo { .. } => f.write_str("ENTITY_WANDERING_TRADER_NO"),
           Sound::EntityWanderingTraderReappeared { .. } => f.write_str("ENTITY_WANDERING_TRADER_REAPPEARED"),
           Sound::EntityWanderingTraderTrade { .. } => f.write_str("ENTITY_WANDERING_TRADER_TRADE"),
           Sound::EntityWanderingTraderYes { .. } => f.write_str("ENTITY_WANDERING_TRADER_YES"),
           Sound::EntityWardenAgitated { .. } => f.write_str("ENTITY_WARDEN_AGITATED"),
           Sound::EntityWardenAmbient { .. } => f.write_str("ENTITY_WARDEN_AMBIENT"),
           Sound::EntityWardenAngry { .. } => f.write_str("ENTITY_WARDEN_ANGRY"),
           Sound::EntityWardenAttackImpact { .. } => f.write_str("ENTITY_WARDEN_ATTACK_IMPACT"),
           Sound::EntityWardenDeath { .. } => f.write_str("ENTITY_WARDEN_DEATH"),
           Sound::EntityWardenDig { .. } => f.write_str("ENTITY_WARDEN_DIG"),
           Sound::EntityWardenEmerge { .. } => f.write_str("ENTITY_WARDEN_EMERGE"),
           Sound::EntityWardenHeartbeat { .. } => f.write_str("ENTITY_WARDEN_HEARTBEAT"),
           Sound::EntityWardenHurt { .. } => f.write_str("ENTITY_WARDEN_HURT"),
           Sound::EntityWardenListening { .. } => f.write_str("ENTITY_WARDEN_LISTENING"),
           Sound::EntityWardenListeningAngry { .. } => f.write_str("ENTITY_WARDEN_LISTENING_ANGRY"),
           Sound::EntityWardenNearbyClose { .. } => f.write_str("ENTITY_WARDEN_NEARBY_CLOSE"),
           Sound::EntityWardenNearbyCloser { .. } => f.write_str("ENTITY_WARDEN_NEARBY_CLOSER"),
           Sound::EntityWardenNearbyClosest { .. } => f.write_str("ENTITY_WARDEN_NEARBY_CLOSEST"),
           Sound::EntityWardenRoar { .. } => f.write_str("ENTITY_WARDEN_ROAR"),
           Sound::EntityWardenSniff { .. } => f.write_str("ENTITY_WARDEN_SNIFF"),
           Sound::EntityWardenSonicBoom { .. } => f.write_str("ENTITY_WARDEN_SONIC_BOOM"),
           Sound::EntityWardenSonicCharge { .. } => f.write_str("ENTITY_WARDEN_SONIC_CHARGE"),
           Sound::EntityWardenStep { .. } => f.write_str("ENTITY_WARDEN_STEP"),
           Sound::EntityWardenTendrilClicks { .. } => f.write_str("ENTITY_WARDEN_TENDRIL_CLICKS"),
           Sound::EntityWitchAmbient { .. } => f.write_str("ENTITY_WITCH_AMBIENT"),
           Sound::EntityWitchCelebrate { .. } => f.write_str("ENTITY_WITCH_CELEBRATE"),
           Sound::EntityWitchDeath { .. } => f.write_str("ENTITY_WITCH_DEATH"),
           Sound::EntityWitchDrink { .. } => f.write_str("ENTITY_WITCH_DRINK"),
           Sound::EntityWitchHurt { .. } => f.write_str("ENTITY_WITCH_HURT"),
           Sound::EntityWitchThrow { .. } => f.write_str("ENTITY_WITCH_THROW"),
           Sound::EntityWitherAmbient { .. } => f.write_str("ENTITY_WITHER_AMBIENT"),
           Sound::EntityWitherBreakBlock { .. } => f.write_str("ENTITY_WITHER_BREAK_BLOCK"),
           Sound::EntityWitherDeath { .. } => f.write_str("ENTITY_WITHER_DEATH"),
           Sound::EntityWitherHurt { .. } => f.write_str("ENTITY_WITHER_HURT"),
           Sound::EntityWitherShoot { .. } => f.write_str("ENTITY_WITHER_SHOOT"),
           Sound::EntityWitherSkeletonAmbient { .. } => f.write_str("ENTITY_WITHER_SKELETON_AMBIENT"),
           Sound::EntityWitherSkeletonDeath { .. } => f.write_str("ENTITY_WITHER_SKELETON_DEATH"),
           Sound::EntityWitherSkeletonHurt { .. } => f.write_str("ENTITY_WITHER_SKELETON_HURT"),
           Sound::EntityWitherSkeletonStep { .. } => f.write_str("ENTITY_WITHER_SKELETON_STEP"),
           Sound::EntityWitherSpawn { .. } => f.write_str("ENTITY_WITHER_SPAWN"),
           Sound::EntityWolfAmbient { .. } => f.write_str("ENTITY_WOLF_AMBIENT"),
           Sound::EntityWolfDeath { .. } => f.write_str("ENTITY_WOLF_DEATH"),
           Sound::EntityWolfGrowl { .. } => f.write_str("ENTITY_WOLF_GROWL"),
           Sound::EntityWolfHowl { .. } => f.write_str("ENTITY_WOLF_HOWL"),
           Sound::EntityWolfHurt { .. } => f.write_str("ENTITY_WOLF_HURT"),
           Sound::EntityWolfPant { .. } => f.write_str("ENTITY_WOLF_PANT"),
           Sound::EntityWolfShake { .. } => f.write_str("ENTITY_WOLF_SHAKE"),
           Sound::EntityWolfStep { .. } => f.write_str("ENTITY_WOLF_STEP"),
           Sound::EntityWolfWhine { .. } => f.write_str("ENTITY_WOLF_WHINE"),
           Sound::EntityZoglinAmbient { .. } => f.write_str("ENTITY_ZOGLIN_AMBIENT"),
           Sound::EntityZoglinAngry { .. } => f.write_str("ENTITY_ZOGLIN_ANGRY"),
           Sound::EntityZoglinAttack { .. } => f.write_str("ENTITY_ZOGLIN_ATTACK"),
           Sound::EntityZoglinDeath { .. } => f.write_str("ENTITY_ZOGLIN_DEATH"),
           Sound::EntityZoglinHurt { .. } => f.write_str("ENTITY_ZOGLIN_HURT"),
           Sound::EntityZoglinStep { .. } => f.write_str("ENTITY_ZOGLIN_STEP"),
           Sound::EntityZombieAmbient { .. } => f.write_str("ENTITY_ZOMBIE_AMBIENT"),
           Sound::EntityZombieAttackIronDoor { .. } => f.write_str("ENTITY_ZOMBIE_ATTACK_IRON_DOOR"),
           Sound::EntityZombieAttackWoodenDoor { .. } => f.write_str("ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR"),
           Sound::EntityZombieBreakWoodenDoor { .. } => f.write_str("ENTITY_ZOMBIE_BREAK_WOODEN_DOOR"),
           Sound::EntityZombieConvertedToDrowned { .. } => f.write_str("ENTITY_ZOMBIE_CONVERTED_TO_DROWNED"),
           Sound::EntityZombieDeath { .. } => f.write_str("ENTITY_ZOMBIE_DEATH"),
           Sound::EntityZombieDestroyEgg { .. } => f.write_str("ENTITY_ZOMBIE_DESTROY_EGG"),
           Sound::EntityZombieHorseAmbient { .. } => f.write_str("ENTITY_ZOMBIE_HORSE_AMBIENT"),
           Sound::EntityZombieHorseDeath { .. } => f.write_str("ENTITY_ZOMBIE_HORSE_DEATH"),
           Sound::EntityZombieHorseHurt { .. } => f.write_str("ENTITY_ZOMBIE_HORSE_HURT"),
           Sound::EntityZombieHurt { .. } => f.write_str("ENTITY_ZOMBIE_HURT"),
           Sound::EntityZombieInfect { .. } => f.write_str("ENTITY_ZOMBIE_INFECT"),
           Sound::EntityZombieStep { .. } => f.write_str("ENTITY_ZOMBIE_STEP"),
           Sound::EntityZombieVillagerAmbient { .. } => f.write_str("ENTITY_ZOMBIE_VILLAGER_AMBIENT"),
           Sound::EntityZombieVillagerConverted { .. } => f.write_str("ENTITY_ZOMBIE_VILLAGER_CONVERTED"),
           Sound::EntityZombieVillagerCure { .. } => f.write_str("ENTITY_ZOMBIE_VILLAGER_CURE"),
           Sound::EntityZombieVillagerDeath { .. } => f.write_str("ENTITY_ZOMBIE_VILLAGER_DEATH"),
           Sound::EntityZombieVillagerHurt { .. } => f.write_str("ENTITY_ZOMBIE_VILLAGER_HURT"),
           Sound::EntityZombieVillagerStep { .. } => f.write_str("ENTITY_ZOMBIE_VILLAGER_STEP"),
           Sound::EntityZombifiedPiglinAmbient { .. } => f.write_str("ENTITY_ZOMBIFIED_PIGLIN_AMBIENT"),
           Sound::EntityZombifiedPiglinAngry { .. } => f.write_str("ENTITY_ZOMBIFIED_PIGLIN_ANGRY"),
           Sound::EntityZombifiedPiglinDeath { .. } => f.write_str("ENTITY_ZOMBIFIED_PIGLIN_DEATH"),
           Sound::EntityZombifiedPiglinHurt { .. } => f.write_str("ENTITY_ZOMBIFIED_PIGLIN_HURT"),
           Sound::EventRaidHorn { .. } => f.write_str("EVENT_RAID_HORN"),
           Sound::IntentionallyEmpty { .. } => f.write_str("INTENTIONALLY_EMPTY"),
           Sound::ItemArmorEquipChain { .. } => f.write_str("ITEM_ARMOR_EQUIP_CHAIN"),
           Sound::ItemArmorEquipDiamond { .. } => f.write_str("ITEM_ARMOR_EQUIP_DIAMOND"),
           Sound::ItemArmorEquipElytra { .. } => f.write_str("ITEM_ARMOR_EQUIP_ELYTRA"),
           Sound::ItemArmorEquipGeneric { .. } => f.write_str("ITEM_ARMOR_EQUIP_GENERIC"),
           Sound::ItemArmorEquipGold { .. } => f.write_str("ITEM_ARMOR_EQUIP_GOLD"),
           Sound::ItemArmorEquipIron { .. } => f.write_str("ITEM_ARMOR_EQUIP_IRON"),
           Sound::ItemArmorEquipLeather { .. } => f.write_str("ITEM_ARMOR_EQUIP_LEATHER"),
           Sound::ItemArmorEquipNetherite { .. } => f.write_str("ITEM_ARMOR_EQUIP_NETHERITE"),
           Sound::ItemArmorEquipTurtle { .. } => f.write_str("ITEM_ARMOR_EQUIP_TURTLE"),
           Sound::ItemAxeScrape { .. } => f.write_str("ITEM_AXE_SCRAPE"),
           Sound::ItemAxeStrip { .. } => f.write_str("ITEM_AXE_STRIP"),
           Sound::ItemAxeWaxOff { .. } => f.write_str("ITEM_AXE_WAX_OFF"),
           Sound::ItemBoneMealUse { .. } => f.write_str("ITEM_BONE_MEAL_USE"),
           Sound::ItemBookPageTurn { .. } => f.write_str("ITEM_BOOK_PAGE_TURN"),
           Sound::ItemBookPut { .. } => f.write_str("ITEM_BOOK_PUT"),
           Sound::ItemBottleEmpty { .. } => f.write_str("ITEM_BOTTLE_EMPTY"),
           Sound::ItemBottleFill { .. } => f.write_str("ITEM_BOTTLE_FILL"),
           Sound::ItemBottleFillDragonbreath { .. } => f.write_str("ITEM_BOTTLE_FILL_DRAGONBREATH"),
           Sound::ItemBrushBrushingGeneric { .. } => f.write_str("ITEM_BRUSH_BRUSHING_GENERIC"),
           Sound::ItemBrushBrushingGravel { .. } => f.write_str("ITEM_BRUSH_BRUSHING_GRAVEL"),
           Sound::ItemBrushBrushingGravelComplete { .. } => f.write_str("ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE"),
           Sound::ItemBrushBrushingSand { .. } => f.write_str("ITEM_BRUSH_BRUSHING_SAND"),
           Sound::ItemBrushBrushingSandComplete { .. } => f.write_str("ITEM_BRUSH_BRUSHING_SAND_COMPLETE"),
           Sound::ItemBucketEmpty { .. } => f.write_str("ITEM_BUCKET_EMPTY"),
           Sound::ItemBucketEmptyAxolotl { .. } => f.write_str("ITEM_BUCKET_EMPTY_AXOLOTL"),
           Sound::ItemBucketEmptyFish { .. } => f.write_str("ITEM_BUCKET_EMPTY_FISH"),
           Sound::ItemBucketEmptyLava { .. } => f.write_str("ITEM_BUCKET_EMPTY_LAVA"),
           Sound::ItemBucketEmptyPowderSnow { .. } => f.write_str("ITEM_BUCKET_EMPTY_POWDER_SNOW"),
           Sound::ItemBucketEmptyTadpole { .. } => f.write_str("ITEM_BUCKET_EMPTY_TADPOLE"),
           Sound::ItemBucketFill { .. } => f.write_str("ITEM_BUCKET_FILL"),
           Sound::ItemBucketFillAxolotl { .. } => f.write_str("ITEM_BUCKET_FILL_AXOLOTL"),
           Sound::ItemBucketFillFish { .. } => f.write_str("ITEM_BUCKET_FILL_FISH"),
           Sound::ItemBucketFillLava { .. } => f.write_str("ITEM_BUCKET_FILL_LAVA"),
           Sound::ItemBucketFillPowderSnow { .. } => f.write_str("ITEM_BUCKET_FILL_POWDER_SNOW"),
           Sound::ItemBucketFillTadpole { .. } => f.write_str("ITEM_BUCKET_FILL_TADPOLE"),
           Sound::ItemBundleDropContents { .. } => f.write_str("ITEM_BUNDLE_DROP_CONTENTS"),
           Sound::ItemBundleInsert { .. } => f.write_str("ITEM_BUNDLE_INSERT"),
           Sound::ItemBundleRemoveOne { .. } => f.write_str("ITEM_BUNDLE_REMOVE_ONE"),
           Sound::ItemChorusFruitTeleport { .. } => f.write_str("ITEM_CHORUS_FRUIT_TELEPORT"),
           Sound::ItemCropPlant { .. } => f.write_str("ITEM_CROP_PLANT"),
           Sound::ItemCrossbowHit { .. } => f.write_str("ITEM_CROSSBOW_HIT"),
           Sound::ItemCrossbowLoadingEnd { .. } => f.write_str("ITEM_CROSSBOW_LOADING_END"),
           Sound::ItemCrossbowLoadingMiddle { .. } => f.write_str("ITEM_CROSSBOW_LOADING_MIDDLE"),
           Sound::ItemCrossbowLoadingStart { .. } => f.write_str("ITEM_CROSSBOW_LOADING_START"),
           Sound::ItemCrossbowQuickCharge1 { .. } => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_1"),
           Sound::ItemCrossbowQuickCharge2 { .. } => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_2"),
           Sound::ItemCrossbowQuickCharge3 { .. } => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_3"),
           Sound::ItemCrossbowShoot { .. } => f.write_str("ITEM_CROSSBOW_SHOOT"),
           Sound::ItemDyeUse { .. } => f.write_str("ITEM_DYE_USE"),
           Sound::ItemElytraFlying { .. } => f.write_str("ITEM_ELYTRA_FLYING"),
           Sound::ItemFirechargeUse { .. } => f.write_str("ITEM_FIRECHARGE_USE"),
           Sound::ItemFlintandsteelUse { .. } => f.write_str("ITEM_FLINTANDSTEEL_USE"),
           Sound::ItemGlowInkSacUse { .. } => f.write_str("ITEM_GLOW_INK_SAC_USE"),
           Sound::ItemGoatHornPlay { .. } => f.write_str("ITEM_GOAT_HORN_PLAY"),
           Sound::ItemGoatHornSound0 { .. } => f.write_str("ITEM_GOAT_HORN_SOUND_0"),
           Sound::ItemGoatHornSound1 { .. } => f.write_str("ITEM_GOAT_HORN_SOUND_1"),
           Sound::ItemGoatHornSound2 { .. } => f.write_str("ITEM_GOAT_HORN_SOUND_2"),
           Sound::ItemGoatHornSound3 { .. } => f.write_str("ITEM_GOAT_HORN_SOUND_3"),
           Sound::ItemGoatHornSound4 { .. } => f.write_str("ITEM_GOAT_HORN_SOUND_4"),
           Sound::ItemGoatHornSound5 { .. } => f.write_str("ITEM_GOAT_HORN_SOUND_5"),
           Sound::ItemGoatHornSound6 { .. } => f.write_str("ITEM_GOAT_HORN_SOUND_6"),
           Sound::ItemGoatHornSound7 { .. } => f.write_str("ITEM_GOAT_HORN_SOUND_7"),
           Sound::ItemHoeTill { .. } => f.write_str("ITEM_HOE_TILL"),
           Sound::ItemHoneycombWaxOn { .. } => f.write_str("ITEM_HONEYCOMB_WAX_ON"),
           Sound::ItemHoneyBottleDrink { .. } => f.write_str("ITEM_HONEY_BOTTLE_DRINK"),
           Sound::ItemInkSacUse { .. } => f.write_str("ITEM_INK_SAC_USE"),
           Sound::ItemLodestoneCompassLock { .. } => f.write_str("ITEM_LODESTONE_COMPASS_LOCK"),
           Sound::ItemNetherWartPlant { .. } => f.write_str("ITEM_NETHER_WART_PLANT"),
           Sound::ItemShieldBlock { .. } => f.write_str("ITEM_SHIELD_BLOCK"),
           Sound::ItemShieldBreak { .. } => f.write_str("ITEM_SHIELD_BREAK"),
           Sound::ItemShovelFlatten { .. } => f.write_str("ITEM_SHOVEL_FLATTEN"),
           Sound::ItemSpyglassStopUsing { .. } => f.write_str("ITEM_SPYGLASS_STOP_USING"),
           Sound::ItemSpyglassUse { .. } => f.write_str("ITEM_SPYGLASS_USE"),
           Sound::ItemTotemUse { .. } => f.write_str("ITEM_TOTEM_USE"),
           Sound::ItemTridentHit { .. } => f.write_str("ITEM_TRIDENT_HIT"),
           Sound::ItemTridentHitGround { .. } => f.write_str("ITEM_TRIDENT_HIT_GROUND"),
           Sound::ItemTridentReturn { .. } => f.write_str("ITEM_TRIDENT_RETURN"),
           Sound::ItemTridentRiptide1 { .. } => f.write_str("ITEM_TRIDENT_RIPTIDE_1"),
           Sound::ItemTridentRiptide2 { .. } => f.write_str("ITEM_TRIDENT_RIPTIDE_2"),
           Sound::ItemTridentRiptide3 { .. } => f.write_str("ITEM_TRIDENT_RIPTIDE_3"),
           Sound::ItemTridentThrow { .. } => f.write_str("ITEM_TRIDENT_THROW"),
           Sound::ItemTridentThunder { .. } => f.write_str("ITEM_TRIDENT_THUNDER"),
           Sound::MusicCreative { .. } => f.write_str("MUSIC_CREATIVE"),
           Sound::MusicCredits { .. } => f.write_str("MUSIC_CREDITS"),
           Sound::MusicDisc11 { .. } => f.write_str("MUSIC_DISC_11"),
           Sound::MusicDisc13 { .. } => f.write_str("MUSIC_DISC_13"),
           Sound::MusicDisc5 { .. } => f.write_str("MUSIC_DISC_5"),
           Sound::MusicDiscBlocks { .. } => f.write_str("MUSIC_DISC_BLOCKS"),
           Sound::MusicDiscCat { .. } => f.write_str("MUSIC_DISC_CAT"),
           Sound::MusicDiscChirp { .. } => f.write_str("MUSIC_DISC_CHIRP"),
           Sound::MusicDiscFar { .. } => f.write_str("MUSIC_DISC_FAR"),
           Sound::MusicDiscMall { .. } => f.write_str("MUSIC_DISC_MALL"),
           Sound::MusicDiscMellohi { .. } => f.write_str("MUSIC_DISC_MELLOHI"),
           Sound::MusicDiscOtherside { .. } => f.write_str("MUSIC_DISC_OTHERSIDE"),
           Sound::MusicDiscPigstep { .. } => f.write_str("MUSIC_DISC_PIGSTEP"),
           Sound::MusicDiscRelic { .. } => f.write_str("MUSIC_DISC_RELIC"),
           Sound::MusicDiscStal { .. } => f.write_str("MUSIC_DISC_STAL"),
           Sound::MusicDiscStrad { .. } => f.write_str("MUSIC_DISC_STRAD"),
           Sound::MusicDiscWait { .. } => f.write_str("MUSIC_DISC_WAIT"),
           Sound::MusicDiscWard { .. } => f.write_str("MUSIC_DISC_WARD"),
           Sound::MusicDragon { .. } => f.write_str("MUSIC_DRAGON"),
           Sound::MusicEnd { .. } => f.write_str("MUSIC_END"),
           Sound::MusicGame { .. } => f.write_str("MUSIC_GAME"),
           Sound::MusicMenu { .. } => f.write_str("MUSIC_MENU"),
           Sound::MusicNetherBasaltDeltas { .. } => f.write_str("MUSIC_NETHER_BASALT_DELTAS"),
           Sound::MusicNetherCrimsonForest { .. } => f.write_str("MUSIC_NETHER_CRIMSON_FOREST"),
           Sound::MusicNetherNetherWastes { .. } => f.write_str("MUSIC_NETHER_NETHER_WASTES"),
           Sound::MusicNetherSoulSandValley { .. } => f.write_str("MUSIC_NETHER_SOUL_SAND_VALLEY"),
           Sound::MusicNetherWarpedForest { .. } => f.write_str("MUSIC_NETHER_WARPED_FOREST"),
           Sound::MusicOverworldBadlands { .. } => f.write_str("MUSIC_OVERWORLD_BADLANDS"),
           Sound::MusicOverworldBambooJungle { .. } => f.write_str("MUSIC_OVERWORLD_BAMBOO_JUNGLE"),
           Sound::MusicOverworldCherryGrove { .. } => f.write_str("MUSIC_OVERWORLD_CHERRY_GROVE"),
           Sound::MusicOverworldDeepDark { .. } => f.write_str("MUSIC_OVERWORLD_DEEP_DARK"),
           Sound::MusicOverworldDesert { .. } => f.write_str("MUSIC_OVERWORLD_DESERT"),
           Sound::MusicOverworldDripstoneCaves { .. } => f.write_str("MUSIC_OVERWORLD_DRIPSTONE_CAVES"),
           Sound::MusicOverworldFlowerForest { .. } => f.write_str("MUSIC_OVERWORLD_FLOWER_FOREST"),
           Sound::MusicOverworldForest { .. } => f.write_str("MUSIC_OVERWORLD_FOREST"),
           Sound::MusicOverworldFrozenPeaks { .. } => f.write_str("MUSIC_OVERWORLD_FROZEN_PEAKS"),
           Sound::MusicOverworldGrove { .. } => f.write_str("MUSIC_OVERWORLD_GROVE"),
           Sound::MusicOverworldJaggedPeaks { .. } => f.write_str("MUSIC_OVERWORLD_JAGGED_PEAKS"),
           Sound::MusicOverworldJungle { .. } => f.write_str("MUSIC_OVERWORLD_JUNGLE"),
           Sound::MusicOverworldLushCaves { .. } => f.write_str("MUSIC_OVERWORLD_LUSH_CAVES"),
           Sound::MusicOverworldMeadow { .. } => f.write_str("MUSIC_OVERWORLD_MEADOW"),
           Sound::MusicOverworldOldGrowthTaiga { .. } => f.write_str("MUSIC_OVERWORLD_OLD_GROWTH_TAIGA"),
           Sound::MusicOverworldSnowySlopes { .. } => f.write_str("MUSIC_OVERWORLD_SNOWY_SLOPES"),
           Sound::MusicOverworldSparseJungle { .. } => f.write_str("MUSIC_OVERWORLD_SPARSE_JUNGLE"),
           Sound::MusicOverworldStonyPeaks { .. } => f.write_str("MUSIC_OVERWORLD_STONY_PEAKS"),
           Sound::MusicOverworldSwamp { .. } => f.write_str("MUSIC_OVERWORLD_SWAMP"),
           Sound::MusicUnderWater { .. } => f.write_str("MUSIC_UNDER_WATER"),
           Sound::ParticleSoulEscape { .. } => f.write_str("PARTICLE_SOUL_ESCAPE"),
           Sound::UiButtonClick { .. } => f.write_str("UI_BUTTON_CLICK"),
           Sound::UiCartographyTableTakeResult { .. } => f.write_str("UI_CARTOGRAPHY_TABLE_TAKE_RESULT"),
           Sound::UiLoomSelectPattern { .. } => f.write_str("UI_LOOM_SELECT_PATTERN"),
           Sound::UiLoomTakeResult { .. } => f.write_str("UI_LOOM_TAKE_RESULT"),
           Sound::UiStonecutterSelectRecipe { .. } => f.write_str("UI_STONECUTTER_SELECT_RECIPE"),
           Sound::UiStonecutterTakeResult { .. } => f.write_str("UI_STONECUTTER_TAKE_RESULT"),
           Sound::UiToastChallengeComplete { .. } => f.write_str("UI_TOAST_CHALLENGE_COMPLETE"),
           Sound::UiToastIn { .. } => f.write_str("UI_TOAST_IN"),
           Sound::UiToastOut { .. } => f.write_str("UI_TOAST_OUT"),
           Sound::WeatherRain { .. } => f.write_str("WEATHER_RAIN"),
           Sound::WeatherRainAbove { .. } => f.write_str("WEATHER_RAIN_ABOVE"),
       }
   }
}

        impl<'mc> SoundTrait<'mc> for Sound<'mc> {}
        
        pub trait SoundTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<Sound<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Sound");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Sound;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"AMBIENT_BASALT_DELTAS_ADDITIONS" => Ok(Sound::AmbientBasaltDeltasAdditions { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_BASALT_DELTAS_LOOP" => Ok(Sound::AmbientBasaltDeltasLoop { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_BASALT_DELTAS_MOOD" => Ok(Sound::AmbientBasaltDeltasMood { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_CAVE" => Ok(Sound::AmbientCave { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_CRIMSON_FOREST_ADDITIONS" => Ok(Sound::AmbientCrimsonForestAdditions { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_CRIMSON_FOREST_LOOP" => Ok(Sound::AmbientCrimsonForestLoop { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_CRIMSON_FOREST_MOOD" => Ok(Sound::AmbientCrimsonForestMood { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_NETHER_WASTES_ADDITIONS" => Ok(Sound::AmbientNetherWastesAdditions { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_NETHER_WASTES_LOOP" => Ok(Sound::AmbientNetherWastesLoop { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_NETHER_WASTES_MOOD" => Ok(Sound::AmbientNetherWastesMood { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_SOUL_SAND_VALLEY_ADDITIONS" => Ok(Sound::AmbientSoulSandValleyAdditions { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_SOUL_SAND_VALLEY_LOOP" => Ok(Sound::AmbientSoulSandValleyLoop { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_SOUL_SAND_VALLEY_MOOD" => Ok(Sound::AmbientSoulSandValleyMood { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_UNDERWATER_ENTER" => Ok(Sound::AmbientUnderwaterEnter { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_UNDERWATER_EXIT" => Ok(Sound::AmbientUnderwaterExit { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_UNDERWATER_LOOP" => Ok(Sound::AmbientUnderwaterLoop { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_UNDERWATER_LOOP_ADDITIONS" => Ok(Sound::AmbientUnderwaterLoopAdditions { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE" => Ok(Sound::AmbientUnderwaterLoopAdditionsRare { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE" => Ok(Sound::AmbientUnderwaterLoopAdditionsUltraRare { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_WARPED_FOREST_ADDITIONS" => Ok(Sound::AmbientWarpedForestAdditions { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_WARPED_FOREST_LOOP" => Ok(Sound::AmbientWarpedForestLoop { inner: SoundStruct::from_raw(env,obj)?}),
"AMBIENT_WARPED_FOREST_MOOD" => Ok(Sound::AmbientWarpedForestMood { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_BLOCK_BREAK" => Ok(Sound::BlockAmethystBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_BLOCK_CHIME" => Ok(Sound::BlockAmethystBlockChime { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_BLOCK_FALL" => Ok(Sound::BlockAmethystBlockFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_BLOCK_HIT" => Ok(Sound::BlockAmethystBlockHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_BLOCK_PLACE" => Ok(Sound::BlockAmethystBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_BLOCK_RESONATE" => Ok(Sound::BlockAmethystBlockResonate { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_BLOCK_STEP" => Ok(Sound::BlockAmethystBlockStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_CLUSTER_BREAK" => Ok(Sound::BlockAmethystClusterBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_CLUSTER_FALL" => Ok(Sound::BlockAmethystClusterFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_CLUSTER_HIT" => Ok(Sound::BlockAmethystClusterHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_CLUSTER_PLACE" => Ok(Sound::BlockAmethystClusterPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AMETHYST_CLUSTER_STEP" => Ok(Sound::BlockAmethystClusterStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANCIENT_DEBRIS_BREAK" => Ok(Sound::BlockAncientDebrisBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANCIENT_DEBRIS_FALL" => Ok(Sound::BlockAncientDebrisFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANCIENT_DEBRIS_HIT" => Ok(Sound::BlockAncientDebrisHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANCIENT_DEBRIS_PLACE" => Ok(Sound::BlockAncientDebrisPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANCIENT_DEBRIS_STEP" => Ok(Sound::BlockAncientDebrisStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANVIL_BREAK" => Ok(Sound::BlockAnvilBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANVIL_DESTROY" => Ok(Sound::BlockAnvilDestroy { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANVIL_FALL" => Ok(Sound::BlockAnvilFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANVIL_HIT" => Ok(Sound::BlockAnvilHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANVIL_LAND" => Ok(Sound::BlockAnvilLand { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANVIL_PLACE" => Ok(Sound::BlockAnvilPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANVIL_STEP" => Ok(Sound::BlockAnvilStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ANVIL_USE" => Ok(Sound::BlockAnvilUse { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AZALEA_BREAK" => Ok(Sound::BlockAzaleaBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AZALEA_FALL" => Ok(Sound::BlockAzaleaFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AZALEA_HIT" => Ok(Sound::BlockAzaleaHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AZALEA_LEAVES_BREAK" => Ok(Sound::BlockAzaleaLeavesBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AZALEA_LEAVES_FALL" => Ok(Sound::BlockAzaleaLeavesFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AZALEA_LEAVES_HIT" => Ok(Sound::BlockAzaleaLeavesHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AZALEA_LEAVES_PLACE" => Ok(Sound::BlockAzaleaLeavesPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AZALEA_LEAVES_STEP" => Ok(Sound::BlockAzaleaLeavesStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AZALEA_PLACE" => Ok(Sound::BlockAzaleaPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_AZALEA_STEP" => Ok(Sound::BlockAzaleaStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_BREAK" => Ok(Sound::BlockBambooBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_FALL" => Ok(Sound::BlockBambooFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_HIT" => Ok(Sound::BlockBambooHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_PLACE" => Ok(Sound::BlockBambooPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_SAPLING_BREAK" => Ok(Sound::BlockBambooSaplingBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_SAPLING_HIT" => Ok(Sound::BlockBambooSaplingHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_SAPLING_PLACE" => Ok(Sound::BlockBambooSaplingPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_STEP" => Ok(Sound::BlockBambooStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_BREAK" => Ok(Sound::BlockBambooWoodBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF" => Ok(Sound::BlockBambooWoodButtonClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON" => Ok(Sound::BlockBambooWoodButtonClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_DOOR_CLOSE" => Ok(Sound::BlockBambooWoodDoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_DOOR_OPEN" => Ok(Sound::BlockBambooWoodDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_FALL" => Ok(Sound::BlockBambooWoodFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE" => Ok(Sound::BlockBambooWoodFenceGateClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN" => Ok(Sound::BlockBambooWoodFenceGateOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK" => Ok(Sound::BlockBambooWoodHangingSignBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL" => Ok(Sound::BlockBambooWoodHangingSignFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT" => Ok(Sound::BlockBambooWoodHangingSignHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE" => Ok(Sound::BlockBambooWoodHangingSignPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP" => Ok(Sound::BlockBambooWoodHangingSignStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_HIT" => Ok(Sound::BlockBambooWoodHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_PLACE" => Ok(Sound::BlockBambooWoodPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockBambooWoodPressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockBambooWoodPressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_STEP" => Ok(Sound::BlockBambooWoodStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE" => Ok(Sound::BlockBambooWoodTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN" => Ok(Sound::BlockBambooWoodTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BARREL_CLOSE" => Ok(Sound::BlockBarrelClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BARREL_OPEN" => Ok(Sound::BlockBarrelOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BASALT_BREAK" => Ok(Sound::BlockBasaltBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BASALT_FALL" => Ok(Sound::BlockBasaltFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BASALT_HIT" => Ok(Sound::BlockBasaltHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BASALT_PLACE" => Ok(Sound::BlockBasaltPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BASALT_STEP" => Ok(Sound::BlockBasaltStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BEACON_ACTIVATE" => Ok(Sound::BlockBeaconActivate { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BEACON_AMBIENT" => Ok(Sound::BlockBeaconAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BEACON_DEACTIVATE" => Ok(Sound::BlockBeaconDeactivate { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BEACON_POWER_SELECT" => Ok(Sound::BlockBeaconPowerSelect { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BEEHIVE_DRIP" => Ok(Sound::BlockBeehiveDrip { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BEEHIVE_ENTER" => Ok(Sound::BlockBeehiveEnter { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BEEHIVE_EXIT" => Ok(Sound::BlockBeehiveExit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BEEHIVE_SHEAR" => Ok(Sound::BlockBeehiveShear { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BEEHIVE_WORK" => Ok(Sound::BlockBeehiveWork { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BELL_RESONATE" => Ok(Sound::BlockBellResonate { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BELL_USE" => Ok(Sound::BlockBellUse { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BIG_DRIPLEAF_BREAK" => Ok(Sound::BlockBigDripleafBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BIG_DRIPLEAF_FALL" => Ok(Sound::BlockBigDripleafFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BIG_DRIPLEAF_HIT" => Ok(Sound::BlockBigDripleafHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BIG_DRIPLEAF_PLACE" => Ok(Sound::BlockBigDripleafPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BIG_DRIPLEAF_STEP" => Ok(Sound::BlockBigDripleafStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BIG_DRIPLEAF_TILT_DOWN" => Ok(Sound::BlockBigDripleafTiltDown { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BIG_DRIPLEAF_TILT_UP" => Ok(Sound::BlockBigDripleafTiltUp { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BLASTFURNACE_FIRE_CRACKLE" => Ok(Sound::BlockBlastfurnaceFireCrackle { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BONE_BLOCK_BREAK" => Ok(Sound::BlockBoneBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BONE_BLOCK_FALL" => Ok(Sound::BlockBoneBlockFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BONE_BLOCK_HIT" => Ok(Sound::BlockBoneBlockHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BONE_BLOCK_PLACE" => Ok(Sound::BlockBoneBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BONE_BLOCK_STEP" => Ok(Sound::BlockBoneBlockStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BREWING_STAND_BREW" => Ok(Sound::BlockBrewingStandBrew { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BUBBLE_COLUMN_BUBBLE_POP" => Ok(Sound::BlockBubbleColumnBubblePop { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT" => Ok(Sound::BlockBubbleColumnUpwardsAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE" => Ok(Sound::BlockBubbleColumnUpwardsInside { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT" => Ok(Sound::BlockBubbleColumnWhirlpoolAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE" => Ok(Sound::BlockBubbleColumnWhirlpoolInside { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CAKE_ADD_CANDLE" => Ok(Sound::BlockCakeAddCandle { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CALCITE_BREAK" => Ok(Sound::BlockCalciteBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CALCITE_FALL" => Ok(Sound::BlockCalciteFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CALCITE_HIT" => Ok(Sound::BlockCalciteHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CALCITE_PLACE" => Ok(Sound::BlockCalcitePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CALCITE_STEP" => Ok(Sound::BlockCalciteStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CAMPFIRE_CRACKLE" => Ok(Sound::BlockCampfireCrackle { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CANDLE_AMBIENT" => Ok(Sound::BlockCandleAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CANDLE_BREAK" => Ok(Sound::BlockCandleBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CANDLE_EXTINGUISH" => Ok(Sound::BlockCandleExtinguish { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CANDLE_FALL" => Ok(Sound::BlockCandleFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CANDLE_HIT" => Ok(Sound::BlockCandleHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CANDLE_PLACE" => Ok(Sound::BlockCandlePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CANDLE_STEP" => Ok(Sound::BlockCandleStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CAVE_VINES_BREAK" => Ok(Sound::BlockCaveVinesBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CAVE_VINES_FALL" => Ok(Sound::BlockCaveVinesFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CAVE_VINES_HIT" => Ok(Sound::BlockCaveVinesHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CAVE_VINES_PICK_BERRIES" => Ok(Sound::BlockCaveVinesPickBerries { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CAVE_VINES_PLACE" => Ok(Sound::BlockCaveVinesPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CAVE_VINES_STEP" => Ok(Sound::BlockCaveVinesStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHAIN_BREAK" => Ok(Sound::BlockChainBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHAIN_FALL" => Ok(Sound::BlockChainFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHAIN_HIT" => Ok(Sound::BlockChainHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHAIN_PLACE" => Ok(Sound::BlockChainPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHAIN_STEP" => Ok(Sound::BlockChainStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_LEAVES_BREAK" => Ok(Sound::BlockCherryLeavesBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_LEAVES_FALL" => Ok(Sound::BlockCherryLeavesFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_LEAVES_HIT" => Ok(Sound::BlockCherryLeavesHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_LEAVES_PLACE" => Ok(Sound::BlockCherryLeavesPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_LEAVES_STEP" => Ok(Sound::BlockCherryLeavesStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_SAPLING_BREAK" => Ok(Sound::BlockCherrySaplingBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_SAPLING_FALL" => Ok(Sound::BlockCherrySaplingFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_SAPLING_HIT" => Ok(Sound::BlockCherrySaplingHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_SAPLING_PLACE" => Ok(Sound::BlockCherrySaplingPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_SAPLING_STEP" => Ok(Sound::BlockCherrySaplingStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_BREAK" => Ok(Sound::BlockCherryWoodBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF" => Ok(Sound::BlockCherryWoodButtonClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON" => Ok(Sound::BlockCherryWoodButtonClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_DOOR_CLOSE" => Ok(Sound::BlockCherryWoodDoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_DOOR_OPEN" => Ok(Sound::BlockCherryWoodDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_FALL" => Ok(Sound::BlockCherryWoodFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE" => Ok(Sound::BlockCherryWoodFenceGateClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN" => Ok(Sound::BlockCherryWoodFenceGateOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK" => Ok(Sound::BlockCherryWoodHangingSignBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL" => Ok(Sound::BlockCherryWoodHangingSignFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT" => Ok(Sound::BlockCherryWoodHangingSignHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE" => Ok(Sound::BlockCherryWoodHangingSignPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP" => Ok(Sound::BlockCherryWoodHangingSignStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_HIT" => Ok(Sound::BlockCherryWoodHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_PLACE" => Ok(Sound::BlockCherryWoodPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockCherryWoodPressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockCherryWoodPressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_STEP" => Ok(Sound::BlockCherryWoodStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE" => Ok(Sound::BlockCherryWoodTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN" => Ok(Sound::BlockCherryWoodTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHEST_CLOSE" => Ok(Sound::BlockChestClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHEST_LOCKED" => Ok(Sound::BlockChestLocked { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHEST_OPEN" => Ok(Sound::BlockChestOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHISELED_BOOKSHELF_BREAK" => Ok(Sound::BlockChiseledBookshelfBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHISELED_BOOKSHELF_FALL" => Ok(Sound::BlockChiseledBookshelfFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHISELED_BOOKSHELF_HIT" => Ok(Sound::BlockChiseledBookshelfHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHISELED_BOOKSHELF_INSERT" => Ok(Sound::BlockChiseledBookshelfInsert { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED" => Ok(Sound::BlockChiseledBookshelfInsertEnchanted { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHISELED_BOOKSHELF_PICKUP" => Ok(Sound::BlockChiseledBookshelfPickup { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED" => Ok(Sound::BlockChiseledBookshelfPickupEnchanted { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHISELED_BOOKSHELF_PLACE" => Ok(Sound::BlockChiseledBookshelfPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHISELED_BOOKSHELF_STEP" => Ok(Sound::BlockChiseledBookshelfStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHORUS_FLOWER_DEATH" => Ok(Sound::BlockChorusFlowerDeath { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CHORUS_FLOWER_GROW" => Ok(Sound::BlockChorusFlowerGrow { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COMPARATOR_CLICK" => Ok(Sound::BlockComparatorClick { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COMPOSTER_EMPTY" => Ok(Sound::BlockComposterEmpty { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COMPOSTER_FILL" => Ok(Sound::BlockComposterFill { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COMPOSTER_FILL_SUCCESS" => Ok(Sound::BlockComposterFillSuccess { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COMPOSTER_READY" => Ok(Sound::BlockComposterReady { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CONDUIT_ACTIVATE" => Ok(Sound::BlockConduitActivate { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CONDUIT_AMBIENT" => Ok(Sound::BlockConduitAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CONDUIT_AMBIENT_SHORT" => Ok(Sound::BlockConduitAmbientShort { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CONDUIT_ATTACK_TARGET" => Ok(Sound::BlockConduitAttackTarget { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CONDUIT_DEACTIVATE" => Ok(Sound::BlockConduitDeactivate { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_BREAK" => Ok(Sound::BlockCopperBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_BULB_BREAK" => Ok(Sound::BlockCopperBulbBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_BULB_FALL" => Ok(Sound::BlockCopperBulbFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_BULB_HIT" => Ok(Sound::BlockCopperBulbHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_BULB_PLACE" => Ok(Sound::BlockCopperBulbPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_BULB_STEP" => Ok(Sound::BlockCopperBulbStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_BULB_TURN_OFF" => Ok(Sound::BlockCopperBulbTurnOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_BULB_TURN_ON" => Ok(Sound::BlockCopperBulbTurnOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_DOOR_CLOSE" => Ok(Sound::BlockCopperDoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_DOOR_OPEN" => Ok(Sound::BlockCopperDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_FALL" => Ok(Sound::BlockCopperFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_GRATE_BREAK" => Ok(Sound::BlockCopperGrateBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_GRATE_FALL" => Ok(Sound::BlockCopperGrateFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_GRATE_HIT" => Ok(Sound::BlockCopperGrateHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_GRATE_PLACE" => Ok(Sound::BlockCopperGratePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_GRATE_STEP" => Ok(Sound::BlockCopperGrateStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_HIT" => Ok(Sound::BlockCopperHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_PLACE" => Ok(Sound::BlockCopperPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_STEP" => Ok(Sound::BlockCopperStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_TRAPDOOR_CLOSE" => Ok(Sound::BlockCopperTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_COPPER_TRAPDOOR_OPEN" => Ok(Sound::BlockCopperTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CORAL_BLOCK_BREAK" => Ok(Sound::BlockCoralBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CORAL_BLOCK_FALL" => Ok(Sound::BlockCoralBlockFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CORAL_BLOCK_HIT" => Ok(Sound::BlockCoralBlockHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CORAL_BLOCK_PLACE" => Ok(Sound::BlockCoralBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CORAL_BLOCK_STEP" => Ok(Sound::BlockCoralBlockStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CRAFTER_CRAFT" => Ok(Sound::BlockCrafterCraft { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CRAFTER_FAIL" => Ok(Sound::BlockCrafterFail { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_CROP_BREAK" => Ok(Sound::BlockCropBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DECORATED_POT_BREAK" => Ok(Sound::BlockDecoratedPotBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DECORATED_POT_FALL" => Ok(Sound::BlockDecoratedPotFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DECORATED_POT_HIT" => Ok(Sound::BlockDecoratedPotHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DECORATED_POT_INSERT" => Ok(Sound::BlockDecoratedPotInsert { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DECORATED_POT_INSERT_FAIL" => Ok(Sound::BlockDecoratedPotInsertFail { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DECORATED_POT_PLACE" => Ok(Sound::BlockDecoratedPotPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DECORATED_POT_SHATTER" => Ok(Sound::BlockDecoratedPotShatter { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DECORATED_POT_STEP" => Ok(Sound::BlockDecoratedPotStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_BREAK" => Ok(Sound::BlockDeepslateBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_BRICKS_BREAK" => Ok(Sound::BlockDeepslateBricksBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_BRICKS_FALL" => Ok(Sound::BlockDeepslateBricksFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_BRICKS_HIT" => Ok(Sound::BlockDeepslateBricksHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_BRICKS_PLACE" => Ok(Sound::BlockDeepslateBricksPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_BRICKS_STEP" => Ok(Sound::BlockDeepslateBricksStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_FALL" => Ok(Sound::BlockDeepslateFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_HIT" => Ok(Sound::BlockDeepslateHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_PLACE" => Ok(Sound::BlockDeepslatePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_STEP" => Ok(Sound::BlockDeepslateStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_TILES_BREAK" => Ok(Sound::BlockDeepslateTilesBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_TILES_FALL" => Ok(Sound::BlockDeepslateTilesFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_TILES_HIT" => Ok(Sound::BlockDeepslateTilesHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_TILES_PLACE" => Ok(Sound::BlockDeepslateTilesPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DEEPSLATE_TILES_STEP" => Ok(Sound::BlockDeepslateTilesStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DISPENSER_DISPENSE" => Ok(Sound::BlockDispenserDispense { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DISPENSER_FAIL" => Ok(Sound::BlockDispenserFail { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DISPENSER_LAUNCH" => Ok(Sound::BlockDispenserLaunch { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DRIPSTONE_BLOCK_BREAK" => Ok(Sound::BlockDripstoneBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DRIPSTONE_BLOCK_FALL" => Ok(Sound::BlockDripstoneBlockFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DRIPSTONE_BLOCK_HIT" => Ok(Sound::BlockDripstoneBlockHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DRIPSTONE_BLOCK_PLACE" => Ok(Sound::BlockDripstoneBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_DRIPSTONE_BLOCK_STEP" => Ok(Sound::BlockDripstoneBlockStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ENCHANTMENT_TABLE_USE" => Ok(Sound::BlockEnchantmentTableUse { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ENDER_CHEST_CLOSE" => Ok(Sound::BlockEnderChestClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ENDER_CHEST_OPEN" => Ok(Sound::BlockEnderChestOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_END_GATEWAY_SPAWN" => Ok(Sound::BlockEndGatewaySpawn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_END_PORTAL_FRAME_FILL" => Ok(Sound::BlockEndPortalFrameFill { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_END_PORTAL_SPAWN" => Ok(Sound::BlockEndPortalSpawn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FENCE_GATE_CLOSE" => Ok(Sound::BlockFenceGateClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FENCE_GATE_OPEN" => Ok(Sound::BlockFenceGateOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FIRE_AMBIENT" => Ok(Sound::BlockFireAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FIRE_EXTINGUISH" => Ok(Sound::BlockFireExtinguish { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FLOWERING_AZALEA_BREAK" => Ok(Sound::BlockFloweringAzaleaBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FLOWERING_AZALEA_FALL" => Ok(Sound::BlockFloweringAzaleaFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FLOWERING_AZALEA_HIT" => Ok(Sound::BlockFloweringAzaleaHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FLOWERING_AZALEA_PLACE" => Ok(Sound::BlockFloweringAzaleaPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FLOWERING_AZALEA_STEP" => Ok(Sound::BlockFloweringAzaleaStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FROGLIGHT_BREAK" => Ok(Sound::BlockFroglightBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FROGLIGHT_FALL" => Ok(Sound::BlockFroglightFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FROGLIGHT_HIT" => Ok(Sound::BlockFroglightHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FROGLIGHT_PLACE" => Ok(Sound::BlockFroglightPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FROGLIGHT_STEP" => Ok(Sound::BlockFroglightStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FROGSPAWN_BREAK" => Ok(Sound::BlockFrogspawnBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FROGSPAWN_FALL" => Ok(Sound::BlockFrogspawnFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FROGSPAWN_HATCH" => Ok(Sound::BlockFrogspawnHatch { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FROGSPAWN_HIT" => Ok(Sound::BlockFrogspawnHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FROGSPAWN_PLACE" => Ok(Sound::BlockFrogspawnPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FROGSPAWN_STEP" => Ok(Sound::BlockFrogspawnStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FUNGUS_BREAK" => Ok(Sound::BlockFungusBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FUNGUS_FALL" => Ok(Sound::BlockFungusFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FUNGUS_HIT" => Ok(Sound::BlockFungusHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FUNGUS_PLACE" => Ok(Sound::BlockFungusPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FUNGUS_STEP" => Ok(Sound::BlockFungusStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_FURNACE_FIRE_CRACKLE" => Ok(Sound::BlockFurnaceFireCrackle { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GILDED_BLACKSTONE_BREAK" => Ok(Sound::BlockGildedBlackstoneBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GILDED_BLACKSTONE_FALL" => Ok(Sound::BlockGildedBlackstoneFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GILDED_BLACKSTONE_HIT" => Ok(Sound::BlockGildedBlackstoneHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GILDED_BLACKSTONE_PLACE" => Ok(Sound::BlockGildedBlackstonePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GILDED_BLACKSTONE_STEP" => Ok(Sound::BlockGildedBlackstoneStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GLASS_BREAK" => Ok(Sound::BlockGlassBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GLASS_FALL" => Ok(Sound::BlockGlassFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GLASS_HIT" => Ok(Sound::BlockGlassHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GLASS_PLACE" => Ok(Sound::BlockGlassPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GLASS_STEP" => Ok(Sound::BlockGlassStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GRASS_BREAK" => Ok(Sound::BlockGrassBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GRASS_FALL" => Ok(Sound::BlockGrassFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GRASS_HIT" => Ok(Sound::BlockGrassHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GRASS_PLACE" => Ok(Sound::BlockGrassPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GRASS_STEP" => Ok(Sound::BlockGrassStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GRAVEL_BREAK" => Ok(Sound::BlockGravelBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GRAVEL_FALL" => Ok(Sound::BlockGravelFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GRAVEL_HIT" => Ok(Sound::BlockGravelHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GRAVEL_PLACE" => Ok(Sound::BlockGravelPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GRAVEL_STEP" => Ok(Sound::BlockGravelStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GRINDSTONE_USE" => Ok(Sound::BlockGrindstoneUse { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_GROWING_PLANT_CROP" => Ok(Sound::BlockGrowingPlantCrop { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HANGING_ROOTS_BREAK" => Ok(Sound::BlockHangingRootsBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HANGING_ROOTS_FALL" => Ok(Sound::BlockHangingRootsFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HANGING_ROOTS_HIT" => Ok(Sound::BlockHangingRootsHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HANGING_ROOTS_PLACE" => Ok(Sound::BlockHangingRootsPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HANGING_ROOTS_STEP" => Ok(Sound::BlockHangingRootsStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HANGING_SIGN_BREAK" => Ok(Sound::BlockHangingSignBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HANGING_SIGN_FALL" => Ok(Sound::BlockHangingSignFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HANGING_SIGN_HIT" => Ok(Sound::BlockHangingSignHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HANGING_SIGN_PLACE" => Ok(Sound::BlockHangingSignPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HANGING_SIGN_STEP" => Ok(Sound::BlockHangingSignStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HANGING_SIGN_WAXED_INTERACT_FAIL" => Ok(Sound::BlockHangingSignWaxedInteractFail { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HONEY_BLOCK_BREAK" => Ok(Sound::BlockHoneyBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HONEY_BLOCK_FALL" => Ok(Sound::BlockHoneyBlockFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HONEY_BLOCK_HIT" => Ok(Sound::BlockHoneyBlockHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HONEY_BLOCK_PLACE" => Ok(Sound::BlockHoneyBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HONEY_BLOCK_SLIDE" => Ok(Sound::BlockHoneyBlockSlide { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_HONEY_BLOCK_STEP" => Ok(Sound::BlockHoneyBlockStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_IRON_DOOR_CLOSE" => Ok(Sound::BlockIronDoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_IRON_DOOR_OPEN" => Ok(Sound::BlockIronDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_IRON_TRAPDOOR_CLOSE" => Ok(Sound::BlockIronTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_IRON_TRAPDOOR_OPEN" => Ok(Sound::BlockIronTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LADDER_BREAK" => Ok(Sound::BlockLadderBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LADDER_FALL" => Ok(Sound::BlockLadderFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LADDER_HIT" => Ok(Sound::BlockLadderHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LADDER_PLACE" => Ok(Sound::BlockLadderPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LADDER_STEP" => Ok(Sound::BlockLadderStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LANTERN_BREAK" => Ok(Sound::BlockLanternBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LANTERN_FALL" => Ok(Sound::BlockLanternFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LANTERN_HIT" => Ok(Sound::BlockLanternHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LANTERN_PLACE" => Ok(Sound::BlockLanternPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LANTERN_STEP" => Ok(Sound::BlockLanternStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LARGE_AMETHYST_BUD_BREAK" => Ok(Sound::BlockLargeAmethystBudBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LARGE_AMETHYST_BUD_PLACE" => Ok(Sound::BlockLargeAmethystBudPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LAVA_AMBIENT" => Ok(Sound::BlockLavaAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LAVA_EXTINGUISH" => Ok(Sound::BlockLavaExtinguish { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LAVA_POP" => Ok(Sound::BlockLavaPop { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LEVER_CLICK" => Ok(Sound::BlockLeverClick { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LILY_PAD_PLACE" => Ok(Sound::BlockLilyPadPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LODESTONE_BREAK" => Ok(Sound::BlockLodestoneBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LODESTONE_FALL" => Ok(Sound::BlockLodestoneFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LODESTONE_HIT" => Ok(Sound::BlockLodestoneHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LODESTONE_PLACE" => Ok(Sound::BlockLodestonePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_LODESTONE_STEP" => Ok(Sound::BlockLodestoneStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MANGROVE_ROOTS_BREAK" => Ok(Sound::BlockMangroveRootsBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MANGROVE_ROOTS_FALL" => Ok(Sound::BlockMangroveRootsFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MANGROVE_ROOTS_HIT" => Ok(Sound::BlockMangroveRootsHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MANGROVE_ROOTS_PLACE" => Ok(Sound::BlockMangroveRootsPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MANGROVE_ROOTS_STEP" => Ok(Sound::BlockMangroveRootsStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MEDIUM_AMETHYST_BUD_BREAK" => Ok(Sound::BlockMediumAmethystBudBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MEDIUM_AMETHYST_BUD_PLACE" => Ok(Sound::BlockMediumAmethystBudPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_METAL_BREAK" => Ok(Sound::BlockMetalBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_METAL_FALL" => Ok(Sound::BlockMetalFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_METAL_HIT" => Ok(Sound::BlockMetalHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_METAL_PLACE" => Ok(Sound::BlockMetalPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockMetalPressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_METAL_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockMetalPressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_METAL_STEP" => Ok(Sound::BlockMetalStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MOSS_BREAK" => Ok(Sound::BlockMossBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MOSS_CARPET_BREAK" => Ok(Sound::BlockMossCarpetBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MOSS_CARPET_FALL" => Ok(Sound::BlockMossCarpetFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MOSS_CARPET_HIT" => Ok(Sound::BlockMossCarpetHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MOSS_CARPET_PLACE" => Ok(Sound::BlockMossCarpetPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MOSS_CARPET_STEP" => Ok(Sound::BlockMossCarpetStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MOSS_FALL" => Ok(Sound::BlockMossFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MOSS_HIT" => Ok(Sound::BlockMossHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MOSS_PLACE" => Ok(Sound::BlockMossPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MOSS_STEP" => Ok(Sound::BlockMossStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUDDY_MANGROVE_ROOTS_BREAK" => Ok(Sound::BlockMuddyMangroveRootsBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUDDY_MANGROVE_ROOTS_FALL" => Ok(Sound::BlockMuddyMangroveRootsFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUDDY_MANGROVE_ROOTS_HIT" => Ok(Sound::BlockMuddyMangroveRootsHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUDDY_MANGROVE_ROOTS_PLACE" => Ok(Sound::BlockMuddyMangroveRootsPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUDDY_MANGROVE_ROOTS_STEP" => Ok(Sound::BlockMuddyMangroveRootsStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUD_BREAK" => Ok(Sound::BlockMudBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUD_BRICKS_BREAK" => Ok(Sound::BlockMudBricksBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUD_BRICKS_FALL" => Ok(Sound::BlockMudBricksFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUD_BRICKS_HIT" => Ok(Sound::BlockMudBricksHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUD_BRICKS_PLACE" => Ok(Sound::BlockMudBricksPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUD_BRICKS_STEP" => Ok(Sound::BlockMudBricksStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUD_FALL" => Ok(Sound::BlockMudFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUD_HIT" => Ok(Sound::BlockMudHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUD_PLACE" => Ok(Sound::BlockMudPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_MUD_STEP" => Ok(Sound::BlockMudStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHERITE_BLOCK_BREAK" => Ok(Sound::BlockNetheriteBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHERITE_BLOCK_FALL" => Ok(Sound::BlockNetheriteBlockFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHERITE_BLOCK_HIT" => Ok(Sound::BlockNetheriteBlockHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHERITE_BLOCK_PLACE" => Ok(Sound::BlockNetheriteBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHERITE_BLOCK_STEP" => Ok(Sound::BlockNetheriteBlockStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHERRACK_BREAK" => Ok(Sound::BlockNetherrackBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHERRACK_FALL" => Ok(Sound::BlockNetherrackFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHERRACK_HIT" => Ok(Sound::BlockNetherrackHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHERRACK_PLACE" => Ok(Sound::BlockNetherrackPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHERRACK_STEP" => Ok(Sound::BlockNetherrackStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_BRICKS_BREAK" => Ok(Sound::BlockNetherBricksBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_BRICKS_FALL" => Ok(Sound::BlockNetherBricksFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_BRICKS_HIT" => Ok(Sound::BlockNetherBricksHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_BRICKS_PLACE" => Ok(Sound::BlockNetherBricksPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_BRICKS_STEP" => Ok(Sound::BlockNetherBricksStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_GOLD_ORE_BREAK" => Ok(Sound::BlockNetherGoldOreBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_GOLD_ORE_FALL" => Ok(Sound::BlockNetherGoldOreFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_GOLD_ORE_HIT" => Ok(Sound::BlockNetherGoldOreHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_GOLD_ORE_PLACE" => Ok(Sound::BlockNetherGoldOrePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_GOLD_ORE_STEP" => Ok(Sound::BlockNetherGoldOreStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_ORE_BREAK" => Ok(Sound::BlockNetherOreBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_ORE_FALL" => Ok(Sound::BlockNetherOreFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_ORE_HIT" => Ok(Sound::BlockNetherOreHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_ORE_PLACE" => Ok(Sound::BlockNetherOrePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_ORE_STEP" => Ok(Sound::BlockNetherOreStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_SPROUTS_BREAK" => Ok(Sound::BlockNetherSproutsBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_SPROUTS_FALL" => Ok(Sound::BlockNetherSproutsFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_SPROUTS_HIT" => Ok(Sound::BlockNetherSproutsHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_SPROUTS_PLACE" => Ok(Sound::BlockNetherSproutsPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_SPROUTS_STEP" => Ok(Sound::BlockNetherSproutsStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WART_BREAK" => Ok(Sound::BlockNetherWartBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_BREAK" => Ok(Sound::BlockNetherWoodBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF" => Ok(Sound::BlockNetherWoodButtonClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_BUTTON_CLICK_ON" => Ok(Sound::BlockNetherWoodButtonClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_DOOR_CLOSE" => Ok(Sound::BlockNetherWoodDoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_DOOR_OPEN" => Ok(Sound::BlockNetherWoodDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_FALL" => Ok(Sound::BlockNetherWoodFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE" => Ok(Sound::BlockNetherWoodFenceGateClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_FENCE_GATE_OPEN" => Ok(Sound::BlockNetherWoodFenceGateOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK" => Ok(Sound::BlockNetherWoodHangingSignBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_HANGING_SIGN_FALL" => Ok(Sound::BlockNetherWoodHangingSignFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_HANGING_SIGN_HIT" => Ok(Sound::BlockNetherWoodHangingSignHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE" => Ok(Sound::BlockNetherWoodHangingSignPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_HANGING_SIGN_STEP" => Ok(Sound::BlockNetherWoodHangingSignStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_HIT" => Ok(Sound::BlockNetherWoodHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_PLACE" => Ok(Sound::BlockNetherWoodPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockNetherWoodPressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockNetherWoodPressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_STEP" => Ok(Sound::BlockNetherWoodStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE" => Ok(Sound::BlockNetherWoodTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NETHER_WOOD_TRAPDOOR_OPEN" => Ok(Sound::BlockNetherWoodTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_BANJO" => Ok(Sound::BlockNoteBlockBanjo { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_BASEDRUM" => Ok(Sound::BlockNoteBlockBasedrum { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_BASS" => Ok(Sound::BlockNoteBlockBass { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_BELL" => Ok(Sound::BlockNoteBlockBell { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_BIT" => Ok(Sound::BlockNoteBlockBit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_CHIME" => Ok(Sound::BlockNoteBlockChime { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_COW_BELL" => Ok(Sound::BlockNoteBlockCowBell { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_DIDGERIDOO" => Ok(Sound::BlockNoteBlockDidgeridoo { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_FLUTE" => Ok(Sound::BlockNoteBlockFlute { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_GUITAR" => Ok(Sound::BlockNoteBlockGuitar { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_HARP" => Ok(Sound::BlockNoteBlockHarp { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_HAT" => Ok(Sound::BlockNoteBlockHat { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_IMITATE_CREEPER" => Ok(Sound::BlockNoteBlockImitateCreeper { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON" => Ok(Sound::BlockNoteBlockImitateEnderDragon { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_IMITATE_PIGLIN" => Ok(Sound::BlockNoteBlockImitatePiglin { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_IMITATE_SKELETON" => Ok(Sound::BlockNoteBlockImitateSkeleton { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON" => Ok(Sound::BlockNoteBlockImitateWitherSkeleton { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE" => Ok(Sound::BlockNoteBlockImitateZombie { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_IRON_XYLOPHONE" => Ok(Sound::BlockNoteBlockIronXylophone { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_PLING" => Ok(Sound::BlockNoteBlockPling { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_SNARE" => Ok(Sound::BlockNoteBlockSnare { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NOTE_BLOCK_XYLOPHONE" => Ok(Sound::BlockNoteBlockXylophone { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NYLIUM_BREAK" => Ok(Sound::BlockNyliumBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NYLIUM_FALL" => Ok(Sound::BlockNyliumFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NYLIUM_HIT" => Ok(Sound::BlockNyliumHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NYLIUM_PLACE" => Ok(Sound::BlockNyliumPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_NYLIUM_STEP" => Ok(Sound::BlockNyliumStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PACKED_MUD_BREAK" => Ok(Sound::BlockPackedMudBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PACKED_MUD_FALL" => Ok(Sound::BlockPackedMudFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PACKED_MUD_HIT" => Ok(Sound::BlockPackedMudHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PACKED_MUD_PLACE" => Ok(Sound::BlockPackedMudPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PACKED_MUD_STEP" => Ok(Sound::BlockPackedMudStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PINK_PETALS_BREAK" => Ok(Sound::BlockPinkPetalsBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PINK_PETALS_FALL" => Ok(Sound::BlockPinkPetalsFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PINK_PETALS_HIT" => Ok(Sound::BlockPinkPetalsHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PINK_PETALS_PLACE" => Ok(Sound::BlockPinkPetalsPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PINK_PETALS_STEP" => Ok(Sound::BlockPinkPetalsStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PISTON_CONTRACT" => Ok(Sound::BlockPistonContract { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PISTON_EXTEND" => Ok(Sound::BlockPistonExtend { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POINTED_DRIPSTONE_BREAK" => Ok(Sound::BlockPointedDripstoneBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POINTED_DRIPSTONE_DRIP_LAVA" => Ok(Sound::BlockPointedDripstoneDripLava { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON" => Ok(Sound::BlockPointedDripstoneDripLavaIntoCauldron { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POINTED_DRIPSTONE_DRIP_WATER" => Ok(Sound::BlockPointedDripstoneDripWater { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON" => Ok(Sound::BlockPointedDripstoneDripWaterIntoCauldron { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POINTED_DRIPSTONE_FALL" => Ok(Sound::BlockPointedDripstoneFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POINTED_DRIPSTONE_HIT" => Ok(Sound::BlockPointedDripstoneHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POINTED_DRIPSTONE_LAND" => Ok(Sound::BlockPointedDripstoneLand { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POINTED_DRIPSTONE_PLACE" => Ok(Sound::BlockPointedDripstonePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POINTED_DRIPSTONE_STEP" => Ok(Sound::BlockPointedDripstoneStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POLISHED_DEEPSLATE_BREAK" => Ok(Sound::BlockPolishedDeepslateBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POLISHED_DEEPSLATE_FALL" => Ok(Sound::BlockPolishedDeepslateFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POLISHED_DEEPSLATE_HIT" => Ok(Sound::BlockPolishedDeepslateHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POLISHED_DEEPSLATE_PLACE" => Ok(Sound::BlockPolishedDeepslatePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POLISHED_DEEPSLATE_STEP" => Ok(Sound::BlockPolishedDeepslateStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POLISHED_TUFF_BREAK" => Ok(Sound::BlockPolishedTuffBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POLISHED_TUFF_FALL" => Ok(Sound::BlockPolishedTuffFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POLISHED_TUFF_HIT" => Ok(Sound::BlockPolishedTuffHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POLISHED_TUFF_PLACE" => Ok(Sound::BlockPolishedTuffPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POLISHED_TUFF_STEP" => Ok(Sound::BlockPolishedTuffStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PORTAL_AMBIENT" => Ok(Sound::BlockPortalAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PORTAL_TRAVEL" => Ok(Sound::BlockPortalTravel { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PORTAL_TRIGGER" => Ok(Sound::BlockPortalTrigger { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POWDER_SNOW_BREAK" => Ok(Sound::BlockPowderSnowBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POWDER_SNOW_FALL" => Ok(Sound::BlockPowderSnowFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POWDER_SNOW_HIT" => Ok(Sound::BlockPowderSnowHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POWDER_SNOW_PLACE" => Ok(Sound::BlockPowderSnowPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_POWDER_SNOW_STEP" => Ok(Sound::BlockPowderSnowStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_PUMPKIN_CARVE" => Ok(Sound::BlockPumpkinCarve { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_REDSTONE_TORCH_BURNOUT" => Ok(Sound::BlockRedstoneTorchBurnout { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_RESPAWN_ANCHOR_AMBIENT" => Ok(Sound::BlockRespawnAnchorAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_RESPAWN_ANCHOR_CHARGE" => Ok(Sound::BlockRespawnAnchorCharge { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_RESPAWN_ANCHOR_DEPLETE" => Ok(Sound::BlockRespawnAnchorDeplete { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_RESPAWN_ANCHOR_SET_SPAWN" => Ok(Sound::BlockRespawnAnchorSetSpawn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ROOTED_DIRT_BREAK" => Ok(Sound::BlockRootedDirtBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ROOTED_DIRT_FALL" => Ok(Sound::BlockRootedDirtFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ROOTED_DIRT_HIT" => Ok(Sound::BlockRootedDirtHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ROOTED_DIRT_PLACE" => Ok(Sound::BlockRootedDirtPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ROOTED_DIRT_STEP" => Ok(Sound::BlockRootedDirtStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ROOTS_BREAK" => Ok(Sound::BlockRootsBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ROOTS_FALL" => Ok(Sound::BlockRootsFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ROOTS_HIT" => Ok(Sound::BlockRootsHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ROOTS_PLACE" => Ok(Sound::BlockRootsPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_ROOTS_STEP" => Ok(Sound::BlockRootsStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SAND_BREAK" => Ok(Sound::BlockSandBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SAND_FALL" => Ok(Sound::BlockSandFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SAND_HIT" => Ok(Sound::BlockSandHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SAND_PLACE" => Ok(Sound::BlockSandPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SAND_STEP" => Ok(Sound::BlockSandStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCAFFOLDING_BREAK" => Ok(Sound::BlockScaffoldingBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCAFFOLDING_FALL" => Ok(Sound::BlockScaffoldingFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCAFFOLDING_HIT" => Ok(Sound::BlockScaffoldingHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCAFFOLDING_PLACE" => Ok(Sound::BlockScaffoldingPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCAFFOLDING_STEP" => Ok(Sound::BlockScaffoldingStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_BREAK" => Ok(Sound::BlockSculkBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_CATALYST_BLOOM" => Ok(Sound::BlockSculkCatalystBloom { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_CATALYST_BREAK" => Ok(Sound::BlockSculkCatalystBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_CATALYST_FALL" => Ok(Sound::BlockSculkCatalystFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_CATALYST_HIT" => Ok(Sound::BlockSculkCatalystHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_CATALYST_PLACE" => Ok(Sound::BlockSculkCatalystPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_CATALYST_STEP" => Ok(Sound::BlockSculkCatalystStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_CHARGE" => Ok(Sound::BlockSculkCharge { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_FALL" => Ok(Sound::BlockSculkFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_HIT" => Ok(Sound::BlockSculkHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_PLACE" => Ok(Sound::BlockSculkPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SENSOR_BREAK" => Ok(Sound::BlockSculkSensorBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SENSOR_CLICKING" => Ok(Sound::BlockSculkSensorClicking { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SENSOR_CLICKING_STOP" => Ok(Sound::BlockSculkSensorClickingStop { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SENSOR_FALL" => Ok(Sound::BlockSculkSensorFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SENSOR_HIT" => Ok(Sound::BlockSculkSensorHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SENSOR_PLACE" => Ok(Sound::BlockSculkSensorPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SENSOR_STEP" => Ok(Sound::BlockSculkSensorStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SHRIEKER_BREAK" => Ok(Sound::BlockSculkShriekerBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SHRIEKER_FALL" => Ok(Sound::BlockSculkShriekerFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SHRIEKER_HIT" => Ok(Sound::BlockSculkShriekerHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SHRIEKER_PLACE" => Ok(Sound::BlockSculkShriekerPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SHRIEKER_SHRIEK" => Ok(Sound::BlockSculkShriekerShriek { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SHRIEKER_STEP" => Ok(Sound::BlockSculkShriekerStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_SPREAD" => Ok(Sound::BlockSculkSpread { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_STEP" => Ok(Sound::BlockSculkStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_VEIN_BREAK" => Ok(Sound::BlockSculkVeinBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_VEIN_FALL" => Ok(Sound::BlockSculkVeinFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_VEIN_HIT" => Ok(Sound::BlockSculkVeinHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_VEIN_PLACE" => Ok(Sound::BlockSculkVeinPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SCULK_VEIN_STEP" => Ok(Sound::BlockSculkVeinStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SHROOMLIGHT_BREAK" => Ok(Sound::BlockShroomlightBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SHROOMLIGHT_FALL" => Ok(Sound::BlockShroomlightFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SHROOMLIGHT_HIT" => Ok(Sound::BlockShroomlightHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SHROOMLIGHT_PLACE" => Ok(Sound::BlockShroomlightPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SHROOMLIGHT_STEP" => Ok(Sound::BlockShroomlightStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SHULKER_BOX_CLOSE" => Ok(Sound::BlockShulkerBoxClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SHULKER_BOX_OPEN" => Ok(Sound::BlockShulkerBoxOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SIGN_WAXED_INTERACT_FAIL" => Ok(Sound::BlockSignWaxedInteractFail { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SLIME_BLOCK_BREAK" => Ok(Sound::BlockSlimeBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SLIME_BLOCK_FALL" => Ok(Sound::BlockSlimeBlockFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SLIME_BLOCK_HIT" => Ok(Sound::BlockSlimeBlockHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SLIME_BLOCK_PLACE" => Ok(Sound::BlockSlimeBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SLIME_BLOCK_STEP" => Ok(Sound::BlockSlimeBlockStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SMALL_AMETHYST_BUD_BREAK" => Ok(Sound::BlockSmallAmethystBudBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SMALL_AMETHYST_BUD_PLACE" => Ok(Sound::BlockSmallAmethystBudPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SMALL_DRIPLEAF_BREAK" => Ok(Sound::BlockSmallDripleafBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SMALL_DRIPLEAF_FALL" => Ok(Sound::BlockSmallDripleafFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SMALL_DRIPLEAF_HIT" => Ok(Sound::BlockSmallDripleafHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SMALL_DRIPLEAF_PLACE" => Ok(Sound::BlockSmallDripleafPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SMALL_DRIPLEAF_STEP" => Ok(Sound::BlockSmallDripleafStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SMITHING_TABLE_USE" => Ok(Sound::BlockSmithingTableUse { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SMOKER_SMOKE" => Ok(Sound::BlockSmokerSmoke { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SNIFFER_EGG_CRACK" => Ok(Sound::BlockSnifferEggCrack { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SNIFFER_EGG_HATCH" => Ok(Sound::BlockSnifferEggHatch { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SNIFFER_EGG_PLOP" => Ok(Sound::BlockSnifferEggPlop { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SNOW_BREAK" => Ok(Sound::BlockSnowBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SNOW_FALL" => Ok(Sound::BlockSnowFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SNOW_HIT" => Ok(Sound::BlockSnowHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SNOW_PLACE" => Ok(Sound::BlockSnowPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SNOW_STEP" => Ok(Sound::BlockSnowStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SOUL_SAND_BREAK" => Ok(Sound::BlockSoulSandBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SOUL_SAND_FALL" => Ok(Sound::BlockSoulSandFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SOUL_SAND_HIT" => Ok(Sound::BlockSoulSandHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SOUL_SAND_PLACE" => Ok(Sound::BlockSoulSandPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SOUL_SAND_STEP" => Ok(Sound::BlockSoulSandStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SOUL_SOIL_BREAK" => Ok(Sound::BlockSoulSoilBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SOUL_SOIL_FALL" => Ok(Sound::BlockSoulSoilFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SOUL_SOIL_HIT" => Ok(Sound::BlockSoulSoilHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SOUL_SOIL_PLACE" => Ok(Sound::BlockSoulSoilPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SOUL_SOIL_STEP" => Ok(Sound::BlockSoulSoilStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SPONGE_ABSORB" => Ok(Sound::BlockSpongeAbsorb { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SPONGE_BREAK" => Ok(Sound::BlockSpongeBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SPONGE_FALL" => Ok(Sound::BlockSpongeFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SPONGE_HIT" => Ok(Sound::BlockSpongeHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SPONGE_PLACE" => Ok(Sound::BlockSpongePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SPONGE_STEP" => Ok(Sound::BlockSpongeStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SPORE_BLOSSOM_BREAK" => Ok(Sound::BlockSporeBlossomBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SPORE_BLOSSOM_FALL" => Ok(Sound::BlockSporeBlossomFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SPORE_BLOSSOM_HIT" => Ok(Sound::BlockSporeBlossomHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SPORE_BLOSSOM_PLACE" => Ok(Sound::BlockSporeBlossomPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SPORE_BLOSSOM_STEP" => Ok(Sound::BlockSporeBlossomStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STEM_BREAK" => Ok(Sound::BlockStemBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STEM_FALL" => Ok(Sound::BlockStemFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STEM_HIT" => Ok(Sound::BlockStemHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STEM_PLACE" => Ok(Sound::BlockStemPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STEM_STEP" => Ok(Sound::BlockStemStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STONE_BREAK" => Ok(Sound::BlockStoneBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STONE_BUTTON_CLICK_OFF" => Ok(Sound::BlockStoneButtonClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STONE_BUTTON_CLICK_ON" => Ok(Sound::BlockStoneButtonClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STONE_FALL" => Ok(Sound::BlockStoneFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STONE_HIT" => Ok(Sound::BlockStoneHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STONE_PLACE" => Ok(Sound::BlockStonePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockStonePressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STONE_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockStonePressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_STONE_STEP" => Ok(Sound::BlockStoneStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SUSPICIOUS_GRAVEL_BREAK" => Ok(Sound::BlockSuspiciousGravelBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SUSPICIOUS_GRAVEL_FALL" => Ok(Sound::BlockSuspiciousGravelFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SUSPICIOUS_GRAVEL_HIT" => Ok(Sound::BlockSuspiciousGravelHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SUSPICIOUS_GRAVEL_PLACE" => Ok(Sound::BlockSuspiciousGravelPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SUSPICIOUS_GRAVEL_STEP" => Ok(Sound::BlockSuspiciousGravelStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SUSPICIOUS_SAND_BREAK" => Ok(Sound::BlockSuspiciousSandBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SUSPICIOUS_SAND_FALL" => Ok(Sound::BlockSuspiciousSandFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SUSPICIOUS_SAND_HIT" => Ok(Sound::BlockSuspiciousSandHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SUSPICIOUS_SAND_PLACE" => Ok(Sound::BlockSuspiciousSandPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SUSPICIOUS_SAND_STEP" => Ok(Sound::BlockSuspiciousSandStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SWEET_BERRY_BUSH_BREAK" => Ok(Sound::BlockSweetBerryBushBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES" => Ok(Sound::BlockSweetBerryBushPickBerries { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_SWEET_BERRY_BUSH_PLACE" => Ok(Sound::BlockSweetBerryBushPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIAL_SPAWNER_AMBIENT" => Ok(Sound::BlockTrialSpawnerAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIAL_SPAWNER_BREAK" => Ok(Sound::BlockTrialSpawnerBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIAL_SPAWNER_CLOSE_SHUTTER" => Ok(Sound::BlockTrialSpawnerCloseShutter { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIAL_SPAWNER_DETECT_PLAYER" => Ok(Sound::BlockTrialSpawnerDetectPlayer { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIAL_SPAWNER_EJECT_ITEM" => Ok(Sound::BlockTrialSpawnerEjectItem { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIAL_SPAWNER_FALL" => Ok(Sound::BlockTrialSpawnerFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIAL_SPAWNER_HIT" => Ok(Sound::BlockTrialSpawnerHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIAL_SPAWNER_OPEN_SHUTTER" => Ok(Sound::BlockTrialSpawnerOpenShutter { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIAL_SPAWNER_PLACE" => Ok(Sound::BlockTrialSpawnerPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIAL_SPAWNER_SPAWN_MOB" => Ok(Sound::BlockTrialSpawnerSpawnMob { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIAL_SPAWNER_STEP" => Ok(Sound::BlockTrialSpawnerStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIPWIRE_ATTACH" => Ok(Sound::BlockTripwireAttach { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIPWIRE_CLICK_OFF" => Ok(Sound::BlockTripwireClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIPWIRE_CLICK_ON" => Ok(Sound::BlockTripwireClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TRIPWIRE_DETACH" => Ok(Sound::BlockTripwireDetach { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TUFF_BREAK" => Ok(Sound::BlockTuffBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TUFF_BRICKS_BREAK" => Ok(Sound::BlockTuffBricksBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TUFF_BRICKS_FALL" => Ok(Sound::BlockTuffBricksFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TUFF_BRICKS_HIT" => Ok(Sound::BlockTuffBricksHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TUFF_BRICKS_PLACE" => Ok(Sound::BlockTuffBricksPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TUFF_BRICKS_STEP" => Ok(Sound::BlockTuffBricksStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TUFF_FALL" => Ok(Sound::BlockTuffFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TUFF_HIT" => Ok(Sound::BlockTuffHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TUFF_PLACE" => Ok(Sound::BlockTuffPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_TUFF_STEP" => Ok(Sound::BlockTuffStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_VINE_BREAK" => Ok(Sound::BlockVineBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_VINE_FALL" => Ok(Sound::BlockVineFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_VINE_HIT" => Ok(Sound::BlockVineHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_VINE_PLACE" => Ok(Sound::BlockVinePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_VINE_STEP" => Ok(Sound::BlockVineStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WART_BLOCK_BREAK" => Ok(Sound::BlockWartBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WART_BLOCK_FALL" => Ok(Sound::BlockWartBlockFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WART_BLOCK_HIT" => Ok(Sound::BlockWartBlockHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WART_BLOCK_PLACE" => Ok(Sound::BlockWartBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WART_BLOCK_STEP" => Ok(Sound::BlockWartBlockStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WATER_AMBIENT" => Ok(Sound::BlockWaterAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WEEPING_VINES_BREAK" => Ok(Sound::BlockWeepingVinesBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WEEPING_VINES_FALL" => Ok(Sound::BlockWeepingVinesFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WEEPING_VINES_HIT" => Ok(Sound::BlockWeepingVinesHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WEEPING_VINES_PLACE" => Ok(Sound::BlockWeepingVinesPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WEEPING_VINES_STEP" => Ok(Sound::BlockWeepingVinesStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WET_GRASS_BREAK" => Ok(Sound::BlockWetGrassBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WET_GRASS_FALL" => Ok(Sound::BlockWetGrassFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WET_GRASS_HIT" => Ok(Sound::BlockWetGrassHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WET_GRASS_PLACE" => Ok(Sound::BlockWetGrassPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WET_GRASS_STEP" => Ok(Sound::BlockWetGrassStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WET_SPONGE_BREAK" => Ok(Sound::BlockWetSpongeBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WET_SPONGE_FALL" => Ok(Sound::BlockWetSpongeFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WET_SPONGE_HIT" => Ok(Sound::BlockWetSpongeHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WET_SPONGE_PLACE" => Ok(Sound::BlockWetSpongePlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WET_SPONGE_STEP" => Ok(Sound::BlockWetSpongeStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOODEN_BUTTON_CLICK_OFF" => Ok(Sound::BlockWoodenButtonClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOODEN_BUTTON_CLICK_ON" => Ok(Sound::BlockWoodenButtonClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOODEN_DOOR_CLOSE" => Ok(Sound::BlockWoodenDoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOODEN_DOOR_OPEN" => Ok(Sound::BlockWoodenDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockWoodenPressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockWoodenPressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOODEN_TRAPDOOR_CLOSE" => Ok(Sound::BlockWoodenTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOODEN_TRAPDOOR_OPEN" => Ok(Sound::BlockWoodenTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOOD_BREAK" => Ok(Sound::BlockWoodBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOOD_FALL" => Ok(Sound::BlockWoodFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOOD_HIT" => Ok(Sound::BlockWoodHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOOD_PLACE" => Ok(Sound::BlockWoodPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOOD_STEP" => Ok(Sound::BlockWoodStep { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOOL_BREAK" => Ok(Sound::BlockWoolBreak { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOOL_FALL" => Ok(Sound::BlockWoolFall { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOOL_HIT" => Ok(Sound::BlockWoolHit { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOOL_PLACE" => Ok(Sound::BlockWoolPlace { inner: SoundStruct::from_raw(env,obj)?}),
"BLOCK_WOOL_STEP" => Ok(Sound::BlockWoolStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENCHANT_THORNS_HIT" => Ok(Sound::EnchantThornsHit { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM" => Ok(Sound::EntityAllayAmbientWithoutItem { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ALLAY_AMBIENT_WITH_ITEM" => Ok(Sound::EntityAllayAmbientWithItem { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ALLAY_DEATH" => Ok(Sound::EntityAllayDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ALLAY_HURT" => Ok(Sound::EntityAllayHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ALLAY_ITEM_GIVEN" => Ok(Sound::EntityAllayItemGiven { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ALLAY_ITEM_TAKEN" => Ok(Sound::EntityAllayItemTaken { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ALLAY_ITEM_THROWN" => Ok(Sound::EntityAllayItemThrown { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ARMOR_STAND_BREAK" => Ok(Sound::EntityArmorStandBreak { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ARMOR_STAND_FALL" => Ok(Sound::EntityArmorStandFall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ARMOR_STAND_HIT" => Ok(Sound::EntityArmorStandHit { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ARMOR_STAND_PLACE" => Ok(Sound::EntityArmorStandPlace { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ARROW_HIT" => Ok(Sound::EntityArrowHit { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ARROW_HIT_PLAYER" => Ok(Sound::EntityArrowHitPlayer { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ARROW_SHOOT" => Ok(Sound::EntityArrowShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_AXOLOTL_ATTACK" => Ok(Sound::EntityAxolotlAttack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_AXOLOTL_DEATH" => Ok(Sound::EntityAxolotlDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_AXOLOTL_HURT" => Ok(Sound::EntityAxolotlHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_AXOLOTL_IDLE_AIR" => Ok(Sound::EntityAxolotlIdleAir { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_AXOLOTL_IDLE_WATER" => Ok(Sound::EntityAxolotlIdleWater { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_AXOLOTL_SPLASH" => Ok(Sound::EntityAxolotlSplash { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_AXOLOTL_SWIM" => Ok(Sound::EntityAxolotlSwim { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BAT_AMBIENT" => Ok(Sound::EntityBatAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BAT_DEATH" => Ok(Sound::EntityBatDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BAT_HURT" => Ok(Sound::EntityBatHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BAT_LOOP" => Ok(Sound::EntityBatLoop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BAT_TAKEOFF" => Ok(Sound::EntityBatTakeoff { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BEE_DEATH" => Ok(Sound::EntityBeeDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BEE_HURT" => Ok(Sound::EntityBeeHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BEE_LOOP" => Ok(Sound::EntityBeeLoop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BEE_LOOP_AGGRESSIVE" => Ok(Sound::EntityBeeLoopAggressive { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BEE_POLLINATE" => Ok(Sound::EntityBeePollinate { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BEE_STING" => Ok(Sound::EntityBeeSting { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BLAZE_AMBIENT" => Ok(Sound::EntityBlazeAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BLAZE_BURN" => Ok(Sound::EntityBlazeBurn { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BLAZE_DEATH" => Ok(Sound::EntityBlazeDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BLAZE_HURT" => Ok(Sound::EntityBlazeHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BLAZE_SHOOT" => Ok(Sound::EntityBlazeShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BOAT_PADDLE_LAND" => Ok(Sound::EntityBoatPaddleLand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BOAT_PADDLE_WATER" => Ok(Sound::EntityBoatPaddleWater { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BREEZE_DEATH" => Ok(Sound::EntityBreezeDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BREEZE_HURT" => Ok(Sound::EntityBreezeHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BREEZE_IDLE_AIR" => Ok(Sound::EntityBreezeIdleAir { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BREEZE_IDLE_GROUND" => Ok(Sound::EntityBreezeIdleGround { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BREEZE_INHALE" => Ok(Sound::EntityBreezeInhale { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BREEZE_JUMP" => Ok(Sound::EntityBreezeJump { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BREEZE_LAND" => Ok(Sound::EntityBreezeLand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BREEZE_SHOOT" => Ok(Sound::EntityBreezeShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_BREEZE_SLIDE" => Ok(Sound::EntityBreezeSlide { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAMEL_AMBIENT" => Ok(Sound::EntityCamelAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAMEL_DASH" => Ok(Sound::EntityCamelDash { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAMEL_DASH_READY" => Ok(Sound::EntityCamelDashReady { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAMEL_DEATH" => Ok(Sound::EntityCamelDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAMEL_EAT" => Ok(Sound::EntityCamelEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAMEL_HURT" => Ok(Sound::EntityCamelHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAMEL_SADDLE" => Ok(Sound::EntityCamelSaddle { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAMEL_SIT" => Ok(Sound::EntityCamelSit { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAMEL_STAND" => Ok(Sound::EntityCamelStand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAMEL_STEP" => Ok(Sound::EntityCamelStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAMEL_STEP_SAND" => Ok(Sound::EntityCamelStepSand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAT_AMBIENT" => Ok(Sound::EntityCatAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAT_BEG_FOR_FOOD" => Ok(Sound::EntityCatBegForFood { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAT_DEATH" => Ok(Sound::EntityCatDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAT_EAT" => Ok(Sound::EntityCatEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAT_HISS" => Ok(Sound::EntityCatHiss { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAT_HURT" => Ok(Sound::EntityCatHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAT_PURR" => Ok(Sound::EntityCatPurr { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAT_PURREOW" => Ok(Sound::EntityCatPurreow { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CAT_STRAY_AMBIENT" => Ok(Sound::EntityCatStrayAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CHICKEN_AMBIENT" => Ok(Sound::EntityChickenAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CHICKEN_DEATH" => Ok(Sound::EntityChickenDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CHICKEN_EGG" => Ok(Sound::EntityChickenEgg { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CHICKEN_HURT" => Ok(Sound::EntityChickenHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CHICKEN_STEP" => Ok(Sound::EntityChickenStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_COD_AMBIENT" => Ok(Sound::EntityCodAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_COD_DEATH" => Ok(Sound::EntityCodDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_COD_FLOP" => Ok(Sound::EntityCodFlop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_COD_HURT" => Ok(Sound::EntityCodHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_COW_AMBIENT" => Ok(Sound::EntityCowAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_COW_DEATH" => Ok(Sound::EntityCowDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_COW_HURT" => Ok(Sound::EntityCowHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_COW_MILK" => Ok(Sound::EntityCowMilk { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_COW_STEP" => Ok(Sound::EntityCowStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CREEPER_DEATH" => Ok(Sound::EntityCreeperDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CREEPER_HURT" => Ok(Sound::EntityCreeperHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_CREEPER_PRIMED" => Ok(Sound::EntityCreeperPrimed { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DOLPHIN_AMBIENT" => Ok(Sound::EntityDolphinAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DOLPHIN_AMBIENT_WATER" => Ok(Sound::EntityDolphinAmbientWater { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DOLPHIN_ATTACK" => Ok(Sound::EntityDolphinAttack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DOLPHIN_DEATH" => Ok(Sound::EntityDolphinDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DOLPHIN_EAT" => Ok(Sound::EntityDolphinEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DOLPHIN_HURT" => Ok(Sound::EntityDolphinHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DOLPHIN_JUMP" => Ok(Sound::EntityDolphinJump { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DOLPHIN_PLAY" => Ok(Sound::EntityDolphinPlay { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DOLPHIN_SPLASH" => Ok(Sound::EntityDolphinSplash { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DOLPHIN_SWIM" => Ok(Sound::EntityDolphinSwim { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DONKEY_AMBIENT" => Ok(Sound::EntityDonkeyAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DONKEY_ANGRY" => Ok(Sound::EntityDonkeyAngry { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DONKEY_CHEST" => Ok(Sound::EntityDonkeyChest { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DONKEY_DEATH" => Ok(Sound::EntityDonkeyDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DONKEY_EAT" => Ok(Sound::EntityDonkeyEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DONKEY_HURT" => Ok(Sound::EntityDonkeyHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DRAGON_FIREBALL_EXPLODE" => Ok(Sound::EntityDragonFireballExplode { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DROWNED_AMBIENT" => Ok(Sound::EntityDrownedAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DROWNED_AMBIENT_WATER" => Ok(Sound::EntityDrownedAmbientWater { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DROWNED_DEATH" => Ok(Sound::EntityDrownedDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DROWNED_DEATH_WATER" => Ok(Sound::EntityDrownedDeathWater { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DROWNED_HURT" => Ok(Sound::EntityDrownedHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DROWNED_HURT_WATER" => Ok(Sound::EntityDrownedHurtWater { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DROWNED_SHOOT" => Ok(Sound::EntityDrownedShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DROWNED_STEP" => Ok(Sound::EntityDrownedStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_DROWNED_SWIM" => Ok(Sound::EntityDrownedSwim { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EGG_THROW" => Ok(Sound::EntityEggThrow { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ELDER_GUARDIAN_AMBIENT" => Ok(Sound::EntityElderGuardianAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ELDER_GUARDIAN_AMBIENT_LAND" => Ok(Sound::EntityElderGuardianAmbientLand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ELDER_GUARDIAN_CURSE" => Ok(Sound::EntityElderGuardianCurse { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ELDER_GUARDIAN_DEATH" => Ok(Sound::EntityElderGuardianDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ELDER_GUARDIAN_DEATH_LAND" => Ok(Sound::EntityElderGuardianDeathLand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ELDER_GUARDIAN_FLOP" => Ok(Sound::EntityElderGuardianFlop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ELDER_GUARDIAN_HURT" => Ok(Sound::EntityElderGuardianHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ELDER_GUARDIAN_HURT_LAND" => Ok(Sound::EntityElderGuardianHurtLand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDERMAN_AMBIENT" => Ok(Sound::EntityEndermanAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDERMAN_DEATH" => Ok(Sound::EntityEndermanDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDERMAN_HURT" => Ok(Sound::EntityEndermanHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDERMAN_SCREAM" => Ok(Sound::EntityEndermanScream { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDERMAN_STARE" => Ok(Sound::EntityEndermanStare { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDERMAN_TELEPORT" => Ok(Sound::EntityEndermanTeleport { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDERMITE_AMBIENT" => Ok(Sound::EntityEndermiteAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDERMITE_DEATH" => Ok(Sound::EntityEndermiteDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDERMITE_HURT" => Ok(Sound::EntityEndermiteHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDERMITE_STEP" => Ok(Sound::EntityEndermiteStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDER_DRAGON_AMBIENT" => Ok(Sound::EntityEnderDragonAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDER_DRAGON_DEATH" => Ok(Sound::EntityEnderDragonDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDER_DRAGON_FLAP" => Ok(Sound::EntityEnderDragonFlap { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDER_DRAGON_GROWL" => Ok(Sound::EntityEnderDragonGrowl { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDER_DRAGON_HURT" => Ok(Sound::EntityEnderDragonHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDER_DRAGON_SHOOT" => Ok(Sound::EntityEnderDragonShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDER_EYE_DEATH" => Ok(Sound::EntityEnderEyeDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDER_EYE_LAUNCH" => Ok(Sound::EntityEnderEyeLaunch { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ENDER_PEARL_THROW" => Ok(Sound::EntityEnderPearlThrow { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EVOKER_AMBIENT" => Ok(Sound::EntityEvokerAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EVOKER_CAST_SPELL" => Ok(Sound::EntityEvokerCastSpell { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EVOKER_CELEBRATE" => Ok(Sound::EntityEvokerCelebrate { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EVOKER_DEATH" => Ok(Sound::EntityEvokerDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EVOKER_FANGS_ATTACK" => Ok(Sound::EntityEvokerFangsAttack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EVOKER_HURT" => Ok(Sound::EntityEvokerHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EVOKER_PREPARE_ATTACK" => Ok(Sound::EntityEvokerPrepareAttack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EVOKER_PREPARE_SUMMON" => Ok(Sound::EntityEvokerPrepareSummon { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EVOKER_PREPARE_WOLOLO" => Ok(Sound::EntityEvokerPrepareWololo { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EXPERIENCE_BOTTLE_THROW" => Ok(Sound::EntityExperienceBottleThrow { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_EXPERIENCE_ORB_PICKUP" => Ok(Sound::EntityExperienceOrbPickup { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FIREWORK_ROCKET_BLAST" => Ok(Sound::EntityFireworkRocketBlast { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FIREWORK_ROCKET_BLAST_FAR" => Ok(Sound::EntityFireworkRocketBlastFar { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FIREWORK_ROCKET_LARGE_BLAST" => Ok(Sound::EntityFireworkRocketLargeBlast { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR" => Ok(Sound::EntityFireworkRocketLargeBlastFar { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FIREWORK_ROCKET_LAUNCH" => Ok(Sound::EntityFireworkRocketLaunch { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FIREWORK_ROCKET_SHOOT" => Ok(Sound::EntityFireworkRocketShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FIREWORK_ROCKET_TWINKLE" => Ok(Sound::EntityFireworkRocketTwinkle { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FIREWORK_ROCKET_TWINKLE_FAR" => Ok(Sound::EntityFireworkRocketTwinkleFar { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FISHING_BOBBER_RETRIEVE" => Ok(Sound::EntityFishingBobberRetrieve { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FISHING_BOBBER_SPLASH" => Ok(Sound::EntityFishingBobberSplash { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FISHING_BOBBER_THROW" => Ok(Sound::EntityFishingBobberThrow { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FISH_SWIM" => Ok(Sound::EntityFishSwim { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FOX_AGGRO" => Ok(Sound::EntityFoxAggro { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FOX_AMBIENT" => Ok(Sound::EntityFoxAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FOX_BITE" => Ok(Sound::EntityFoxBite { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FOX_DEATH" => Ok(Sound::EntityFoxDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FOX_EAT" => Ok(Sound::EntityFoxEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FOX_HURT" => Ok(Sound::EntityFoxHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FOX_SCREECH" => Ok(Sound::EntityFoxScreech { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FOX_SLEEP" => Ok(Sound::EntityFoxSleep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FOX_SNIFF" => Ok(Sound::EntityFoxSniff { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FOX_SPIT" => Ok(Sound::EntityFoxSpit { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FOX_TELEPORT" => Ok(Sound::EntityFoxTeleport { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FROG_AMBIENT" => Ok(Sound::EntityFrogAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FROG_DEATH" => Ok(Sound::EntityFrogDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FROG_EAT" => Ok(Sound::EntityFrogEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FROG_HURT" => Ok(Sound::EntityFrogHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FROG_LAY_SPAWN" => Ok(Sound::EntityFrogLaySpawn { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FROG_LONG_JUMP" => Ok(Sound::EntityFrogLongJump { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FROG_STEP" => Ok(Sound::EntityFrogStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_FROG_TONGUE" => Ok(Sound::EntityFrogTongue { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_BIG_FALL" => Ok(Sound::EntityGenericBigFall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_BURN" => Ok(Sound::EntityGenericBurn { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_DEATH" => Ok(Sound::EntityGenericDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_DRINK" => Ok(Sound::EntityGenericDrink { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_EAT" => Ok(Sound::EntityGenericEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_EXPLODE" => Ok(Sound::EntityGenericExplode { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_EXTINGUISH_FIRE" => Ok(Sound::EntityGenericExtinguishFire { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_HURT" => Ok(Sound::EntityGenericHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_SMALL_FALL" => Ok(Sound::EntityGenericSmallFall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_SPLASH" => Ok(Sound::EntityGenericSplash { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_SWIM" => Ok(Sound::EntityGenericSwim { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GENERIC_WIND_BURST" => Ok(Sound::EntityGenericWindBurst { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GHAST_AMBIENT" => Ok(Sound::EntityGhastAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GHAST_DEATH" => Ok(Sound::EntityGhastDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GHAST_HURT" => Ok(Sound::EntityGhastHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GHAST_SCREAM" => Ok(Sound::EntityGhastScream { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GHAST_SHOOT" => Ok(Sound::EntityGhastShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GHAST_WARN" => Ok(Sound::EntityGhastWarn { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GLOW_ITEM_FRAME_ADD_ITEM" => Ok(Sound::EntityGlowItemFrameAddItem { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GLOW_ITEM_FRAME_BREAK" => Ok(Sound::EntityGlowItemFrameBreak { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GLOW_ITEM_FRAME_PLACE" => Ok(Sound::EntityGlowItemFramePlace { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM" => Ok(Sound::EntityGlowItemFrameRemoveItem { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM" => Ok(Sound::EntityGlowItemFrameRotateItem { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GLOW_SQUID_AMBIENT" => Ok(Sound::EntityGlowSquidAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GLOW_SQUID_DEATH" => Ok(Sound::EntityGlowSquidDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GLOW_SQUID_HURT" => Ok(Sound::EntityGlowSquidHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GLOW_SQUID_SQUIRT" => Ok(Sound::EntityGlowSquidSquirt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_AMBIENT" => Ok(Sound::EntityGoatAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_DEATH" => Ok(Sound::EntityGoatDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_EAT" => Ok(Sound::EntityGoatEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_HORN_BREAK" => Ok(Sound::EntityGoatHornBreak { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_HURT" => Ok(Sound::EntityGoatHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_LONG_JUMP" => Ok(Sound::EntityGoatLongJump { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_MILK" => Ok(Sound::EntityGoatMilk { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_PREPARE_RAM" => Ok(Sound::EntityGoatPrepareRam { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_RAM_IMPACT" => Ok(Sound::EntityGoatRamImpact { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_SCREAMING_AMBIENT" => Ok(Sound::EntityGoatScreamingAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_SCREAMING_DEATH" => Ok(Sound::EntityGoatScreamingDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_SCREAMING_EAT" => Ok(Sound::EntityGoatScreamingEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_SCREAMING_HORN_BREAK" => Ok(Sound::EntityGoatScreamingHornBreak { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_SCREAMING_HURT" => Ok(Sound::EntityGoatScreamingHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_SCREAMING_LONG_JUMP" => Ok(Sound::EntityGoatScreamingLongJump { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_SCREAMING_MILK" => Ok(Sound::EntityGoatScreamingMilk { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_SCREAMING_PREPARE_RAM" => Ok(Sound::EntityGoatScreamingPrepareRam { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_SCREAMING_RAM_IMPACT" => Ok(Sound::EntityGoatScreamingRamImpact { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GOAT_STEP" => Ok(Sound::EntityGoatStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GUARDIAN_AMBIENT" => Ok(Sound::EntityGuardianAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GUARDIAN_AMBIENT_LAND" => Ok(Sound::EntityGuardianAmbientLand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GUARDIAN_ATTACK" => Ok(Sound::EntityGuardianAttack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GUARDIAN_DEATH" => Ok(Sound::EntityGuardianDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GUARDIAN_DEATH_LAND" => Ok(Sound::EntityGuardianDeathLand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GUARDIAN_FLOP" => Ok(Sound::EntityGuardianFlop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GUARDIAN_HURT" => Ok(Sound::EntityGuardianHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_GUARDIAN_HURT_LAND" => Ok(Sound::EntityGuardianHurtLand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOGLIN_AMBIENT" => Ok(Sound::EntityHoglinAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOGLIN_ANGRY" => Ok(Sound::EntityHoglinAngry { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOGLIN_ATTACK" => Ok(Sound::EntityHoglinAttack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED" => Ok(Sound::EntityHoglinConvertedToZombified { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOGLIN_DEATH" => Ok(Sound::EntityHoglinDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOGLIN_HURT" => Ok(Sound::EntityHoglinHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOGLIN_RETREAT" => Ok(Sound::EntityHoglinRetreat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOGLIN_STEP" => Ok(Sound::EntityHoglinStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_AMBIENT" => Ok(Sound::EntityHorseAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_ANGRY" => Ok(Sound::EntityHorseAngry { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_ARMOR" => Ok(Sound::EntityHorseArmor { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_BREATHE" => Ok(Sound::EntityHorseBreathe { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_DEATH" => Ok(Sound::EntityHorseDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_EAT" => Ok(Sound::EntityHorseEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_GALLOP" => Ok(Sound::EntityHorseGallop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_HURT" => Ok(Sound::EntityHorseHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_JUMP" => Ok(Sound::EntityHorseJump { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_LAND" => Ok(Sound::EntityHorseLand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_SADDLE" => Ok(Sound::EntityHorseSaddle { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_STEP" => Ok(Sound::EntityHorseStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HORSE_STEP_WOOD" => Ok(Sound::EntityHorseStepWood { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOSTILE_BIG_FALL" => Ok(Sound::EntityHostileBigFall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOSTILE_DEATH" => Ok(Sound::EntityHostileDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOSTILE_HURT" => Ok(Sound::EntityHostileHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOSTILE_SMALL_FALL" => Ok(Sound::EntityHostileSmallFall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOSTILE_SPLASH" => Ok(Sound::EntityHostileSplash { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HOSTILE_SWIM" => Ok(Sound::EntityHostileSwim { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HUSK_AMBIENT" => Ok(Sound::EntityHuskAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HUSK_CONVERTED_TO_ZOMBIE" => Ok(Sound::EntityHuskConvertedToZombie { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HUSK_DEATH" => Ok(Sound::EntityHuskDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HUSK_HURT" => Ok(Sound::EntityHuskHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_HUSK_STEP" => Ok(Sound::EntityHuskStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ILLUSIONER_AMBIENT" => Ok(Sound::EntityIllusionerAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ILLUSIONER_CAST_SPELL" => Ok(Sound::EntityIllusionerCastSpell { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ILLUSIONER_DEATH" => Ok(Sound::EntityIllusionerDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ILLUSIONER_HURT" => Ok(Sound::EntityIllusionerHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ILLUSIONER_MIRROR_MOVE" => Ok(Sound::EntityIllusionerMirrorMove { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ILLUSIONER_PREPARE_BLINDNESS" => Ok(Sound::EntityIllusionerPrepareBlindness { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ILLUSIONER_PREPARE_MIRROR" => Ok(Sound::EntityIllusionerPrepareMirror { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_IRON_GOLEM_ATTACK" => Ok(Sound::EntityIronGolemAttack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_IRON_GOLEM_DAMAGE" => Ok(Sound::EntityIronGolemDamage { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_IRON_GOLEM_DEATH" => Ok(Sound::EntityIronGolemDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_IRON_GOLEM_HURT" => Ok(Sound::EntityIronGolemHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_IRON_GOLEM_REPAIR" => Ok(Sound::EntityIronGolemRepair { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_IRON_GOLEM_STEP" => Ok(Sound::EntityIronGolemStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ITEM_BREAK" => Ok(Sound::EntityItemBreak { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ITEM_FRAME_ADD_ITEM" => Ok(Sound::EntityItemFrameAddItem { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ITEM_FRAME_BREAK" => Ok(Sound::EntityItemFrameBreak { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ITEM_FRAME_PLACE" => Ok(Sound::EntityItemFramePlace { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ITEM_FRAME_REMOVE_ITEM" => Ok(Sound::EntityItemFrameRemoveItem { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ITEM_FRAME_ROTATE_ITEM" => Ok(Sound::EntityItemFrameRotateItem { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ITEM_PICKUP" => Ok(Sound::EntityItemPickup { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LEASH_KNOT_BREAK" => Ok(Sound::EntityLeashKnotBreak { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LEASH_KNOT_PLACE" => Ok(Sound::EntityLeashKnotPlace { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LIGHTNING_BOLT_IMPACT" => Ok(Sound::EntityLightningBoltImpact { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LIGHTNING_BOLT_THUNDER" => Ok(Sound::EntityLightningBoltThunder { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LINGERING_POTION_THROW" => Ok(Sound::EntityLingeringPotionThrow { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LLAMA_AMBIENT" => Ok(Sound::EntityLlamaAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LLAMA_ANGRY" => Ok(Sound::EntityLlamaAngry { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LLAMA_CHEST" => Ok(Sound::EntityLlamaChest { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LLAMA_DEATH" => Ok(Sound::EntityLlamaDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LLAMA_EAT" => Ok(Sound::EntityLlamaEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LLAMA_HURT" => Ok(Sound::EntityLlamaHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LLAMA_SPIT" => Ok(Sound::EntityLlamaSpit { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LLAMA_STEP" => Ok(Sound::EntityLlamaStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_LLAMA_SWAG" => Ok(Sound::EntityLlamaSwag { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MAGMA_CUBE_DEATH" => Ok(Sound::EntityMagmaCubeDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MAGMA_CUBE_DEATH_SMALL" => Ok(Sound::EntityMagmaCubeDeathSmall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MAGMA_CUBE_HURT" => Ok(Sound::EntityMagmaCubeHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MAGMA_CUBE_HURT_SMALL" => Ok(Sound::EntityMagmaCubeHurtSmall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MAGMA_CUBE_JUMP" => Ok(Sound::EntityMagmaCubeJump { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MAGMA_CUBE_SQUISH" => Ok(Sound::EntityMagmaCubeSquish { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MAGMA_CUBE_SQUISH_SMALL" => Ok(Sound::EntityMagmaCubeSquishSmall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MINECART_INSIDE" => Ok(Sound::EntityMinecartInside { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MINECART_INSIDE_UNDERWATER" => Ok(Sound::EntityMinecartInsideUnderwater { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MINECART_RIDING" => Ok(Sound::EntityMinecartRiding { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MOOSHROOM_CONVERT" => Ok(Sound::EntityMooshroomConvert { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MOOSHROOM_EAT" => Ok(Sound::EntityMooshroomEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MOOSHROOM_MILK" => Ok(Sound::EntityMooshroomMilk { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MOOSHROOM_SHEAR" => Ok(Sound::EntityMooshroomShear { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MOOSHROOM_SUSPICIOUS_MILK" => Ok(Sound::EntityMooshroomSuspiciousMilk { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MULE_AMBIENT" => Ok(Sound::EntityMuleAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MULE_ANGRY" => Ok(Sound::EntityMuleAngry { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MULE_CHEST" => Ok(Sound::EntityMuleChest { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MULE_DEATH" => Ok(Sound::EntityMuleDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MULE_EAT" => Ok(Sound::EntityMuleEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_MULE_HURT" => Ok(Sound::EntityMuleHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_OCELOT_AMBIENT" => Ok(Sound::EntityOcelotAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_OCELOT_DEATH" => Ok(Sound::EntityOcelotDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_OCELOT_HURT" => Ok(Sound::EntityOcelotHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PAINTING_BREAK" => Ok(Sound::EntityPaintingBreak { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PAINTING_PLACE" => Ok(Sound::EntityPaintingPlace { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PANDA_AGGRESSIVE_AMBIENT" => Ok(Sound::EntityPandaAggressiveAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PANDA_AMBIENT" => Ok(Sound::EntityPandaAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PANDA_BITE" => Ok(Sound::EntityPandaBite { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PANDA_CANT_BREED" => Ok(Sound::EntityPandaCantBreed { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PANDA_DEATH" => Ok(Sound::EntityPandaDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PANDA_EAT" => Ok(Sound::EntityPandaEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PANDA_HURT" => Ok(Sound::EntityPandaHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PANDA_PRE_SNEEZE" => Ok(Sound::EntityPandaPreSneeze { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PANDA_SNEEZE" => Ok(Sound::EntityPandaSneeze { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PANDA_STEP" => Ok(Sound::EntityPandaStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PANDA_WORRIED_AMBIENT" => Ok(Sound::EntityPandaWorriedAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_AMBIENT" => Ok(Sound::EntityParrotAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_DEATH" => Ok(Sound::EntityParrotDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_EAT" => Ok(Sound::EntityParrotEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_FLY" => Ok(Sound::EntityParrotFly { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_HURT" => Ok(Sound::EntityParrotHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_BLAZE" => Ok(Sound::EntityParrotImitateBlaze { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_BREEZE" => Ok(Sound::EntityParrotImitateBreeze { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_CREEPER" => Ok(Sound::EntityParrotImitateCreeper { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_DROWNED" => Ok(Sound::EntityParrotImitateDrowned { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_ELDER_GUARDIAN" => Ok(Sound::EntityParrotImitateElderGuardian { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_ENDERMITE" => Ok(Sound::EntityParrotImitateEndermite { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_ENDER_DRAGON" => Ok(Sound::EntityParrotImitateEnderDragon { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_EVOKER" => Ok(Sound::EntityParrotImitateEvoker { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_GHAST" => Ok(Sound::EntityParrotImitateGhast { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_GUARDIAN" => Ok(Sound::EntityParrotImitateGuardian { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_HOGLIN" => Ok(Sound::EntityParrotImitateHoglin { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_HUSK" => Ok(Sound::EntityParrotImitateHusk { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_ILLUSIONER" => Ok(Sound::EntityParrotImitateIllusioner { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_MAGMA_CUBE" => Ok(Sound::EntityParrotImitateMagmaCube { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_PHANTOM" => Ok(Sound::EntityParrotImitatePhantom { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_PIGLIN" => Ok(Sound::EntityParrotImitatePiglin { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_PIGLIN_BRUTE" => Ok(Sound::EntityParrotImitatePiglinBrute { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_PILLAGER" => Ok(Sound::EntityParrotImitatePillager { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_RAVAGER" => Ok(Sound::EntityParrotImitateRavager { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_SHULKER" => Ok(Sound::EntityParrotImitateShulker { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_SILVERFISH" => Ok(Sound::EntityParrotImitateSilverfish { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_SKELETON" => Ok(Sound::EntityParrotImitateSkeleton { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_SLIME" => Ok(Sound::EntityParrotImitateSlime { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_SPIDER" => Ok(Sound::EntityParrotImitateSpider { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_STRAY" => Ok(Sound::EntityParrotImitateStray { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_VEX" => Ok(Sound::EntityParrotImitateVex { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_VINDICATOR" => Ok(Sound::EntityParrotImitateVindicator { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_WARDEN" => Ok(Sound::EntityParrotImitateWarden { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_WITCH" => Ok(Sound::EntityParrotImitateWitch { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_WITHER" => Ok(Sound::EntityParrotImitateWither { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_WITHER_SKELETON" => Ok(Sound::EntityParrotImitateWitherSkeleton { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_ZOGLIN" => Ok(Sound::EntityParrotImitateZoglin { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_ZOMBIE" => Ok(Sound::EntityParrotImitateZombie { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER" => Ok(Sound::EntityParrotImitateZombieVillager { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PARROT_STEP" => Ok(Sound::EntityParrotStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PHANTOM_AMBIENT" => Ok(Sound::EntityPhantomAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PHANTOM_BITE" => Ok(Sound::EntityPhantomBite { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PHANTOM_DEATH" => Ok(Sound::EntityPhantomDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PHANTOM_FLAP" => Ok(Sound::EntityPhantomFlap { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PHANTOM_HURT" => Ok(Sound::EntityPhantomHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PHANTOM_SWOOP" => Ok(Sound::EntityPhantomSwoop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_ADMIRING_ITEM" => Ok(Sound::EntityPiglinAdmiringItem { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_AMBIENT" => Ok(Sound::EntityPiglinAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_ANGRY" => Ok(Sound::EntityPiglinAngry { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_BRUTE_AMBIENT" => Ok(Sound::EntityPiglinBruteAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_BRUTE_ANGRY" => Ok(Sound::EntityPiglinBruteAngry { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED" => Ok(Sound::EntityPiglinBruteConvertedToZombified { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_BRUTE_DEATH" => Ok(Sound::EntityPiglinBruteDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_BRUTE_HURT" => Ok(Sound::EntityPiglinBruteHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_BRUTE_STEP" => Ok(Sound::EntityPiglinBruteStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_CELEBRATE" => Ok(Sound::EntityPiglinCelebrate { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED" => Ok(Sound::EntityPiglinConvertedToZombified { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_DEATH" => Ok(Sound::EntityPiglinDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_HURT" => Ok(Sound::EntityPiglinHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_JEALOUS" => Ok(Sound::EntityPiglinJealous { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_RETREAT" => Ok(Sound::EntityPiglinRetreat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIGLIN_STEP" => Ok(Sound::EntityPiglinStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIG_AMBIENT" => Ok(Sound::EntityPigAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIG_DEATH" => Ok(Sound::EntityPigDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIG_HURT" => Ok(Sound::EntityPigHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIG_SADDLE" => Ok(Sound::EntityPigSaddle { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PIG_STEP" => Ok(Sound::EntityPigStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PILLAGER_AMBIENT" => Ok(Sound::EntityPillagerAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PILLAGER_CELEBRATE" => Ok(Sound::EntityPillagerCelebrate { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PILLAGER_DEATH" => Ok(Sound::EntityPillagerDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PILLAGER_HURT" => Ok(Sound::EntityPillagerHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_ATTACK_CRIT" => Ok(Sound::EntityPlayerAttackCrit { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_ATTACK_KNOCKBACK" => Ok(Sound::EntityPlayerAttackKnockback { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_ATTACK_NODAMAGE" => Ok(Sound::EntityPlayerAttackNodamage { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_ATTACK_STRONG" => Ok(Sound::EntityPlayerAttackStrong { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_ATTACK_SWEEP" => Ok(Sound::EntityPlayerAttackSweep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_ATTACK_WEAK" => Ok(Sound::EntityPlayerAttackWeak { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_BIG_FALL" => Ok(Sound::EntityPlayerBigFall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_BREATH" => Ok(Sound::EntityPlayerBreath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_BURP" => Ok(Sound::EntityPlayerBurp { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_DEATH" => Ok(Sound::EntityPlayerDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_HURT" => Ok(Sound::EntityPlayerHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_HURT_DROWN" => Ok(Sound::EntityPlayerHurtDrown { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_HURT_FREEZE" => Ok(Sound::EntityPlayerHurtFreeze { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_HURT_ON_FIRE" => Ok(Sound::EntityPlayerHurtOnFire { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH" => Ok(Sound::EntityPlayerHurtSweetBerryBush { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_LEVELUP" => Ok(Sound::EntityPlayerLevelup { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_SMALL_FALL" => Ok(Sound::EntityPlayerSmallFall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_SPLASH" => Ok(Sound::EntityPlayerSplash { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_SPLASH_HIGH_SPEED" => Ok(Sound::EntityPlayerSplashHighSpeed { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_SWIM" => Ok(Sound::EntityPlayerSwim { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PLAYER_TELEPORT" => Ok(Sound::EntityPlayerTeleport { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_POLAR_BEAR_AMBIENT" => Ok(Sound::EntityPolarBearAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_POLAR_BEAR_AMBIENT_BABY" => Ok(Sound::EntityPolarBearAmbientBaby { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_POLAR_BEAR_DEATH" => Ok(Sound::EntityPolarBearDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_POLAR_BEAR_HURT" => Ok(Sound::EntityPolarBearHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_POLAR_BEAR_STEP" => Ok(Sound::EntityPolarBearStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_POLAR_BEAR_WARNING" => Ok(Sound::EntityPolarBearWarning { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PUFFER_FISH_AMBIENT" => Ok(Sound::EntityPufferFishAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PUFFER_FISH_BLOW_OUT" => Ok(Sound::EntityPufferFishBlowOut { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PUFFER_FISH_BLOW_UP" => Ok(Sound::EntityPufferFishBlowUp { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PUFFER_FISH_DEATH" => Ok(Sound::EntityPufferFishDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PUFFER_FISH_FLOP" => Ok(Sound::EntityPufferFishFlop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PUFFER_FISH_HURT" => Ok(Sound::EntityPufferFishHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_PUFFER_FISH_STING" => Ok(Sound::EntityPufferFishSting { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RABBIT_AMBIENT" => Ok(Sound::EntityRabbitAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RABBIT_ATTACK" => Ok(Sound::EntityRabbitAttack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RABBIT_DEATH" => Ok(Sound::EntityRabbitDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RABBIT_HURT" => Ok(Sound::EntityRabbitHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RABBIT_JUMP" => Ok(Sound::EntityRabbitJump { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RAVAGER_AMBIENT" => Ok(Sound::EntityRavagerAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RAVAGER_ATTACK" => Ok(Sound::EntityRavagerAttack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RAVAGER_CELEBRATE" => Ok(Sound::EntityRavagerCelebrate { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RAVAGER_DEATH" => Ok(Sound::EntityRavagerDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RAVAGER_HURT" => Ok(Sound::EntityRavagerHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RAVAGER_ROAR" => Ok(Sound::EntityRavagerRoar { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RAVAGER_STEP" => Ok(Sound::EntityRavagerStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_RAVAGER_STUNNED" => Ok(Sound::EntityRavagerStunned { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SALMON_AMBIENT" => Ok(Sound::EntitySalmonAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SALMON_DEATH" => Ok(Sound::EntitySalmonDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SALMON_FLOP" => Ok(Sound::EntitySalmonFlop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SALMON_HURT" => Ok(Sound::EntitySalmonHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHEEP_AMBIENT" => Ok(Sound::EntitySheepAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHEEP_DEATH" => Ok(Sound::EntitySheepDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHEEP_HURT" => Ok(Sound::EntitySheepHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHEEP_SHEAR" => Ok(Sound::EntitySheepShear { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHEEP_STEP" => Ok(Sound::EntitySheepStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHULKER_AMBIENT" => Ok(Sound::EntityShulkerAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHULKER_BULLET_HIT" => Ok(Sound::EntityShulkerBulletHit { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHULKER_BULLET_HURT" => Ok(Sound::EntityShulkerBulletHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHULKER_CLOSE" => Ok(Sound::EntityShulkerClose { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHULKER_DEATH" => Ok(Sound::EntityShulkerDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHULKER_HURT" => Ok(Sound::EntityShulkerHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHULKER_HURT_CLOSED" => Ok(Sound::EntityShulkerHurtClosed { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHULKER_OPEN" => Ok(Sound::EntityShulkerOpen { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHULKER_SHOOT" => Ok(Sound::EntityShulkerShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SHULKER_TELEPORT" => Ok(Sound::EntityShulkerTeleport { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SILVERFISH_AMBIENT" => Ok(Sound::EntitySilverfishAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SILVERFISH_DEATH" => Ok(Sound::EntitySilverfishDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SILVERFISH_HURT" => Ok(Sound::EntitySilverfishHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SILVERFISH_STEP" => Ok(Sound::EntitySilverfishStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_AMBIENT" => Ok(Sound::EntitySkeletonAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_CONVERTED_TO_STRAY" => Ok(Sound::EntitySkeletonConvertedToStray { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_DEATH" => Ok(Sound::EntitySkeletonDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_HORSE_AMBIENT" => Ok(Sound::EntitySkeletonHorseAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_HORSE_AMBIENT_WATER" => Ok(Sound::EntitySkeletonHorseAmbientWater { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_HORSE_DEATH" => Ok(Sound::EntitySkeletonHorseDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_HORSE_GALLOP_WATER" => Ok(Sound::EntitySkeletonHorseGallopWater { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_HORSE_HURT" => Ok(Sound::EntitySkeletonHorseHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_HORSE_JUMP_WATER" => Ok(Sound::EntitySkeletonHorseJumpWater { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_HORSE_STEP_WATER" => Ok(Sound::EntitySkeletonHorseStepWater { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_HORSE_SWIM" => Ok(Sound::EntitySkeletonHorseSwim { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_HURT" => Ok(Sound::EntitySkeletonHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_SHOOT" => Ok(Sound::EntitySkeletonShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SKELETON_STEP" => Ok(Sound::EntitySkeletonStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SLIME_ATTACK" => Ok(Sound::EntitySlimeAttack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SLIME_DEATH" => Ok(Sound::EntitySlimeDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SLIME_DEATH_SMALL" => Ok(Sound::EntitySlimeDeathSmall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SLIME_HURT" => Ok(Sound::EntitySlimeHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SLIME_HURT_SMALL" => Ok(Sound::EntitySlimeHurtSmall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SLIME_JUMP" => Ok(Sound::EntitySlimeJump { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SLIME_JUMP_SMALL" => Ok(Sound::EntitySlimeJumpSmall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SLIME_SQUISH" => Ok(Sound::EntitySlimeSquish { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SLIME_SQUISH_SMALL" => Ok(Sound::EntitySlimeSquishSmall { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_DEATH" => Ok(Sound::EntitySnifferDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_DIGGING" => Ok(Sound::EntitySnifferDigging { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_DIGGING_STOP" => Ok(Sound::EntitySnifferDiggingStop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_DROP_SEED" => Ok(Sound::EntitySnifferDropSeed { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_EAT" => Ok(Sound::EntitySnifferEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_HAPPY" => Ok(Sound::EntitySnifferHappy { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_HURT" => Ok(Sound::EntitySnifferHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_IDLE" => Ok(Sound::EntitySnifferIdle { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_SCENTING" => Ok(Sound::EntitySnifferScenting { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_SEARCHING" => Ok(Sound::EntitySnifferSearching { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_SNIFFING" => Ok(Sound::EntitySnifferSniffing { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNIFFER_STEP" => Ok(Sound::EntitySnifferStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNOWBALL_THROW" => Ok(Sound::EntitySnowballThrow { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNOW_GOLEM_AMBIENT" => Ok(Sound::EntitySnowGolemAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNOW_GOLEM_DEATH" => Ok(Sound::EntitySnowGolemDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNOW_GOLEM_HURT" => Ok(Sound::EntitySnowGolemHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNOW_GOLEM_SHEAR" => Ok(Sound::EntitySnowGolemShear { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SNOW_GOLEM_SHOOT" => Ok(Sound::EntitySnowGolemShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SPIDER_AMBIENT" => Ok(Sound::EntitySpiderAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SPIDER_DEATH" => Ok(Sound::EntitySpiderDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SPIDER_HURT" => Ok(Sound::EntitySpiderHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SPIDER_STEP" => Ok(Sound::EntitySpiderStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SPLASH_POTION_BREAK" => Ok(Sound::EntitySplashPotionBreak { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SPLASH_POTION_THROW" => Ok(Sound::EntitySplashPotionThrow { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SQUID_AMBIENT" => Ok(Sound::EntitySquidAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SQUID_DEATH" => Ok(Sound::EntitySquidDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SQUID_HURT" => Ok(Sound::EntitySquidHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_SQUID_SQUIRT" => Ok(Sound::EntitySquidSquirt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRAY_AMBIENT" => Ok(Sound::EntityStrayAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRAY_DEATH" => Ok(Sound::EntityStrayDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRAY_HURT" => Ok(Sound::EntityStrayHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRAY_STEP" => Ok(Sound::EntityStrayStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRIDER_AMBIENT" => Ok(Sound::EntityStriderAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRIDER_DEATH" => Ok(Sound::EntityStriderDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRIDER_EAT" => Ok(Sound::EntityStriderEat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRIDER_HAPPY" => Ok(Sound::EntityStriderHappy { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRIDER_HURT" => Ok(Sound::EntityStriderHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRIDER_RETREAT" => Ok(Sound::EntityStriderRetreat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRIDER_SADDLE" => Ok(Sound::EntityStriderSaddle { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRIDER_STEP" => Ok(Sound::EntityStriderStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_STRIDER_STEP_LAVA" => Ok(Sound::EntityStriderStepLava { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TADPOLE_DEATH" => Ok(Sound::EntityTadpoleDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TADPOLE_FLOP" => Ok(Sound::EntityTadpoleFlop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TADPOLE_GROW_UP" => Ok(Sound::EntityTadpoleGrowUp { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TADPOLE_HURT" => Ok(Sound::EntityTadpoleHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TNT_PRIMED" => Ok(Sound::EntityTntPrimed { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TROPICAL_FISH_AMBIENT" => Ok(Sound::EntityTropicalFishAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TROPICAL_FISH_DEATH" => Ok(Sound::EntityTropicalFishDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TROPICAL_FISH_FLOP" => Ok(Sound::EntityTropicalFishFlop { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TROPICAL_FISH_HURT" => Ok(Sound::EntityTropicalFishHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_AMBIENT_LAND" => Ok(Sound::EntityTurtleAmbientLand { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_DEATH" => Ok(Sound::EntityTurtleDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_DEATH_BABY" => Ok(Sound::EntityTurtleDeathBaby { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_EGG_BREAK" => Ok(Sound::EntityTurtleEggBreak { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_EGG_CRACK" => Ok(Sound::EntityTurtleEggCrack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_EGG_HATCH" => Ok(Sound::EntityTurtleEggHatch { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_HURT" => Ok(Sound::EntityTurtleHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_HURT_BABY" => Ok(Sound::EntityTurtleHurtBaby { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_LAY_EGG" => Ok(Sound::EntityTurtleLayEgg { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_SHAMBLE" => Ok(Sound::EntityTurtleShamble { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_SHAMBLE_BABY" => Ok(Sound::EntityTurtleShambleBaby { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_TURTLE_SWIM" => Ok(Sound::EntityTurtleSwim { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VEX_AMBIENT" => Ok(Sound::EntityVexAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VEX_CHARGE" => Ok(Sound::EntityVexCharge { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VEX_DEATH" => Ok(Sound::EntityVexDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VEX_HURT" => Ok(Sound::EntityVexHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_AMBIENT" => Ok(Sound::EntityVillagerAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_CELEBRATE" => Ok(Sound::EntityVillagerCelebrate { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_DEATH" => Ok(Sound::EntityVillagerDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_HURT" => Ok(Sound::EntityVillagerHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_NO" => Ok(Sound::EntityVillagerNo { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_TRADE" => Ok(Sound::EntityVillagerTrade { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_ARMORER" => Ok(Sound::EntityVillagerWorkArmorer { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_BUTCHER" => Ok(Sound::EntityVillagerWorkButcher { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_CARTOGRAPHER" => Ok(Sound::EntityVillagerWorkCartographer { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_CLERIC" => Ok(Sound::EntityVillagerWorkCleric { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_FARMER" => Ok(Sound::EntityVillagerWorkFarmer { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_FISHERMAN" => Ok(Sound::EntityVillagerWorkFisherman { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_FLETCHER" => Ok(Sound::EntityVillagerWorkFletcher { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_LEATHERWORKER" => Ok(Sound::EntityVillagerWorkLeatherworker { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_LIBRARIAN" => Ok(Sound::EntityVillagerWorkLibrarian { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_MASON" => Ok(Sound::EntityVillagerWorkMason { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_SHEPHERD" => Ok(Sound::EntityVillagerWorkShepherd { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_TOOLSMITH" => Ok(Sound::EntityVillagerWorkToolsmith { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_WORK_WEAPONSMITH" => Ok(Sound::EntityVillagerWorkWeaponsmith { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VILLAGER_YES" => Ok(Sound::EntityVillagerYes { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VINDICATOR_AMBIENT" => Ok(Sound::EntityVindicatorAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VINDICATOR_CELEBRATE" => Ok(Sound::EntityVindicatorCelebrate { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VINDICATOR_DEATH" => Ok(Sound::EntityVindicatorDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_VINDICATOR_HURT" => Ok(Sound::EntityVindicatorHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WANDERING_TRADER_AMBIENT" => Ok(Sound::EntityWanderingTraderAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WANDERING_TRADER_DEATH" => Ok(Sound::EntityWanderingTraderDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WANDERING_TRADER_DISAPPEARED" => Ok(Sound::EntityWanderingTraderDisappeared { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WANDERING_TRADER_DRINK_MILK" => Ok(Sound::EntityWanderingTraderDrinkMilk { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WANDERING_TRADER_DRINK_POTION" => Ok(Sound::EntityWanderingTraderDrinkPotion { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WANDERING_TRADER_HURT" => Ok(Sound::EntityWanderingTraderHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WANDERING_TRADER_NO" => Ok(Sound::EntityWanderingTraderNo { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WANDERING_TRADER_REAPPEARED" => Ok(Sound::EntityWanderingTraderReappeared { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WANDERING_TRADER_TRADE" => Ok(Sound::EntityWanderingTraderTrade { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WANDERING_TRADER_YES" => Ok(Sound::EntityWanderingTraderYes { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_AGITATED" => Ok(Sound::EntityWardenAgitated { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_AMBIENT" => Ok(Sound::EntityWardenAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_ANGRY" => Ok(Sound::EntityWardenAngry { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_ATTACK_IMPACT" => Ok(Sound::EntityWardenAttackImpact { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_DEATH" => Ok(Sound::EntityWardenDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_DIG" => Ok(Sound::EntityWardenDig { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_EMERGE" => Ok(Sound::EntityWardenEmerge { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_HEARTBEAT" => Ok(Sound::EntityWardenHeartbeat { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_HURT" => Ok(Sound::EntityWardenHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_LISTENING" => Ok(Sound::EntityWardenListening { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_LISTENING_ANGRY" => Ok(Sound::EntityWardenListeningAngry { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_NEARBY_CLOSE" => Ok(Sound::EntityWardenNearbyClose { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_NEARBY_CLOSER" => Ok(Sound::EntityWardenNearbyCloser { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_NEARBY_CLOSEST" => Ok(Sound::EntityWardenNearbyClosest { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_ROAR" => Ok(Sound::EntityWardenRoar { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_SNIFF" => Ok(Sound::EntityWardenSniff { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_SONIC_BOOM" => Ok(Sound::EntityWardenSonicBoom { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_SONIC_CHARGE" => Ok(Sound::EntityWardenSonicCharge { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_STEP" => Ok(Sound::EntityWardenStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WARDEN_TENDRIL_CLICKS" => Ok(Sound::EntityWardenTendrilClicks { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITCH_AMBIENT" => Ok(Sound::EntityWitchAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITCH_CELEBRATE" => Ok(Sound::EntityWitchCelebrate { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITCH_DEATH" => Ok(Sound::EntityWitchDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITCH_DRINK" => Ok(Sound::EntityWitchDrink { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITCH_HURT" => Ok(Sound::EntityWitchHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITCH_THROW" => Ok(Sound::EntityWitchThrow { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITHER_AMBIENT" => Ok(Sound::EntityWitherAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITHER_BREAK_BLOCK" => Ok(Sound::EntityWitherBreakBlock { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITHER_DEATH" => Ok(Sound::EntityWitherDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITHER_HURT" => Ok(Sound::EntityWitherHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITHER_SHOOT" => Ok(Sound::EntityWitherShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITHER_SKELETON_AMBIENT" => Ok(Sound::EntityWitherSkeletonAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITHER_SKELETON_DEATH" => Ok(Sound::EntityWitherSkeletonDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITHER_SKELETON_HURT" => Ok(Sound::EntityWitherSkeletonHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITHER_SKELETON_STEP" => Ok(Sound::EntityWitherSkeletonStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WITHER_SPAWN" => Ok(Sound::EntityWitherSpawn { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WOLF_AMBIENT" => Ok(Sound::EntityWolfAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WOLF_DEATH" => Ok(Sound::EntityWolfDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WOLF_GROWL" => Ok(Sound::EntityWolfGrowl { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WOLF_HOWL" => Ok(Sound::EntityWolfHowl { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WOLF_HURT" => Ok(Sound::EntityWolfHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WOLF_PANT" => Ok(Sound::EntityWolfPant { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WOLF_SHAKE" => Ok(Sound::EntityWolfShake { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WOLF_STEP" => Ok(Sound::EntityWolfStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_WOLF_WHINE" => Ok(Sound::EntityWolfWhine { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOGLIN_AMBIENT" => Ok(Sound::EntityZoglinAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOGLIN_ANGRY" => Ok(Sound::EntityZoglinAngry { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOGLIN_ATTACK" => Ok(Sound::EntityZoglinAttack { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOGLIN_DEATH" => Ok(Sound::EntityZoglinDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOGLIN_HURT" => Ok(Sound::EntityZoglinHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOGLIN_STEP" => Ok(Sound::EntityZoglinStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_AMBIENT" => Ok(Sound::EntityZombieAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_ATTACK_IRON_DOOR" => Ok(Sound::EntityZombieAttackIronDoor { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR" => Ok(Sound::EntityZombieAttackWoodenDoor { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_BREAK_WOODEN_DOOR" => Ok(Sound::EntityZombieBreakWoodenDoor { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_CONVERTED_TO_DROWNED" => Ok(Sound::EntityZombieConvertedToDrowned { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_DEATH" => Ok(Sound::EntityZombieDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_DESTROY_EGG" => Ok(Sound::EntityZombieDestroyEgg { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_HORSE_AMBIENT" => Ok(Sound::EntityZombieHorseAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_HORSE_DEATH" => Ok(Sound::EntityZombieHorseDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_HORSE_HURT" => Ok(Sound::EntityZombieHorseHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_HURT" => Ok(Sound::EntityZombieHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_INFECT" => Ok(Sound::EntityZombieInfect { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_STEP" => Ok(Sound::EntityZombieStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_VILLAGER_AMBIENT" => Ok(Sound::EntityZombieVillagerAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_VILLAGER_CONVERTED" => Ok(Sound::EntityZombieVillagerConverted { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_VILLAGER_CURE" => Ok(Sound::EntityZombieVillagerCure { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_VILLAGER_DEATH" => Ok(Sound::EntityZombieVillagerDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_VILLAGER_HURT" => Ok(Sound::EntityZombieVillagerHurt { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIE_VILLAGER_STEP" => Ok(Sound::EntityZombieVillagerStep { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIFIED_PIGLIN_AMBIENT" => Ok(Sound::EntityZombifiedPiglinAmbient { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIFIED_PIGLIN_ANGRY" => Ok(Sound::EntityZombifiedPiglinAngry { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIFIED_PIGLIN_DEATH" => Ok(Sound::EntityZombifiedPiglinDeath { inner: SoundStruct::from_raw(env,obj)?}),
"ENTITY_ZOMBIFIED_PIGLIN_HURT" => Ok(Sound::EntityZombifiedPiglinHurt { inner: SoundStruct::from_raw(env,obj)?}),
"EVENT_RAID_HORN" => Ok(Sound::EventRaidHorn { inner: SoundStruct::from_raw(env,obj)?}),
"INTENTIONALLY_EMPTY" => Ok(Sound::IntentionallyEmpty { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_ARMOR_EQUIP_CHAIN" => Ok(Sound::ItemArmorEquipChain { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_ARMOR_EQUIP_DIAMOND" => Ok(Sound::ItemArmorEquipDiamond { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_ARMOR_EQUIP_ELYTRA" => Ok(Sound::ItemArmorEquipElytra { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_ARMOR_EQUIP_GENERIC" => Ok(Sound::ItemArmorEquipGeneric { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_ARMOR_EQUIP_GOLD" => Ok(Sound::ItemArmorEquipGold { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_ARMOR_EQUIP_IRON" => Ok(Sound::ItemArmorEquipIron { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_ARMOR_EQUIP_LEATHER" => Ok(Sound::ItemArmorEquipLeather { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_ARMOR_EQUIP_NETHERITE" => Ok(Sound::ItemArmorEquipNetherite { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_ARMOR_EQUIP_TURTLE" => Ok(Sound::ItemArmorEquipTurtle { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_AXE_SCRAPE" => Ok(Sound::ItemAxeScrape { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_AXE_STRIP" => Ok(Sound::ItemAxeStrip { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_AXE_WAX_OFF" => Ok(Sound::ItemAxeWaxOff { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BONE_MEAL_USE" => Ok(Sound::ItemBoneMealUse { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BOOK_PAGE_TURN" => Ok(Sound::ItemBookPageTurn { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BOOK_PUT" => Ok(Sound::ItemBookPut { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BOTTLE_EMPTY" => Ok(Sound::ItemBottleEmpty { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BOTTLE_FILL" => Ok(Sound::ItemBottleFill { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BOTTLE_FILL_DRAGONBREATH" => Ok(Sound::ItemBottleFillDragonbreath { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BRUSH_BRUSHING_GENERIC" => Ok(Sound::ItemBrushBrushingGeneric { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BRUSH_BRUSHING_GRAVEL" => Ok(Sound::ItemBrushBrushingGravel { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE" => Ok(Sound::ItemBrushBrushingGravelComplete { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BRUSH_BRUSHING_SAND" => Ok(Sound::ItemBrushBrushingSand { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BRUSH_BRUSHING_SAND_COMPLETE" => Ok(Sound::ItemBrushBrushingSandComplete { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_EMPTY" => Ok(Sound::ItemBucketEmpty { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_EMPTY_AXOLOTL" => Ok(Sound::ItemBucketEmptyAxolotl { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_EMPTY_FISH" => Ok(Sound::ItemBucketEmptyFish { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_EMPTY_LAVA" => Ok(Sound::ItemBucketEmptyLava { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_EMPTY_POWDER_SNOW" => Ok(Sound::ItemBucketEmptyPowderSnow { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_EMPTY_TADPOLE" => Ok(Sound::ItemBucketEmptyTadpole { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_FILL" => Ok(Sound::ItemBucketFill { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_FILL_AXOLOTL" => Ok(Sound::ItemBucketFillAxolotl { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_FILL_FISH" => Ok(Sound::ItemBucketFillFish { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_FILL_LAVA" => Ok(Sound::ItemBucketFillLava { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_FILL_POWDER_SNOW" => Ok(Sound::ItemBucketFillPowderSnow { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUCKET_FILL_TADPOLE" => Ok(Sound::ItemBucketFillTadpole { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUNDLE_DROP_CONTENTS" => Ok(Sound::ItemBundleDropContents { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUNDLE_INSERT" => Ok(Sound::ItemBundleInsert { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_BUNDLE_REMOVE_ONE" => Ok(Sound::ItemBundleRemoveOne { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_CHORUS_FRUIT_TELEPORT" => Ok(Sound::ItemChorusFruitTeleport { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_CROP_PLANT" => Ok(Sound::ItemCropPlant { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_CROSSBOW_HIT" => Ok(Sound::ItemCrossbowHit { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_CROSSBOW_LOADING_END" => Ok(Sound::ItemCrossbowLoadingEnd { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_CROSSBOW_LOADING_MIDDLE" => Ok(Sound::ItemCrossbowLoadingMiddle { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_CROSSBOW_LOADING_START" => Ok(Sound::ItemCrossbowLoadingStart { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_CROSSBOW_QUICK_CHARGE_1" => Ok(Sound::ItemCrossbowQuickCharge1 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_CROSSBOW_QUICK_CHARGE_2" => Ok(Sound::ItemCrossbowQuickCharge2 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_CROSSBOW_QUICK_CHARGE_3" => Ok(Sound::ItemCrossbowQuickCharge3 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_CROSSBOW_SHOOT" => Ok(Sound::ItemCrossbowShoot { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_DYE_USE" => Ok(Sound::ItemDyeUse { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_ELYTRA_FLYING" => Ok(Sound::ItemElytraFlying { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_FIRECHARGE_USE" => Ok(Sound::ItemFirechargeUse { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_FLINTANDSTEEL_USE" => Ok(Sound::ItemFlintandsteelUse { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_GLOW_INK_SAC_USE" => Ok(Sound::ItemGlowInkSacUse { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_GOAT_HORN_PLAY" => Ok(Sound::ItemGoatHornPlay { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_GOAT_HORN_SOUND_0" => Ok(Sound::ItemGoatHornSound0 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_GOAT_HORN_SOUND_1" => Ok(Sound::ItemGoatHornSound1 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_GOAT_HORN_SOUND_2" => Ok(Sound::ItemGoatHornSound2 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_GOAT_HORN_SOUND_3" => Ok(Sound::ItemGoatHornSound3 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_GOAT_HORN_SOUND_4" => Ok(Sound::ItemGoatHornSound4 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_GOAT_HORN_SOUND_5" => Ok(Sound::ItemGoatHornSound5 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_GOAT_HORN_SOUND_6" => Ok(Sound::ItemGoatHornSound6 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_GOAT_HORN_SOUND_7" => Ok(Sound::ItemGoatHornSound7 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_HOE_TILL" => Ok(Sound::ItemHoeTill { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_HONEYCOMB_WAX_ON" => Ok(Sound::ItemHoneycombWaxOn { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_HONEY_BOTTLE_DRINK" => Ok(Sound::ItemHoneyBottleDrink { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_INK_SAC_USE" => Ok(Sound::ItemInkSacUse { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_LODESTONE_COMPASS_LOCK" => Ok(Sound::ItemLodestoneCompassLock { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_NETHER_WART_PLANT" => Ok(Sound::ItemNetherWartPlant { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_SHIELD_BLOCK" => Ok(Sound::ItemShieldBlock { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_SHIELD_BREAK" => Ok(Sound::ItemShieldBreak { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_SHOVEL_FLATTEN" => Ok(Sound::ItemShovelFlatten { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_SPYGLASS_STOP_USING" => Ok(Sound::ItemSpyglassStopUsing { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_SPYGLASS_USE" => Ok(Sound::ItemSpyglassUse { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_TOTEM_USE" => Ok(Sound::ItemTotemUse { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_TRIDENT_HIT" => Ok(Sound::ItemTridentHit { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_TRIDENT_HIT_GROUND" => Ok(Sound::ItemTridentHitGround { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_TRIDENT_RETURN" => Ok(Sound::ItemTridentReturn { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_TRIDENT_RIPTIDE_1" => Ok(Sound::ItemTridentRiptide1 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_TRIDENT_RIPTIDE_2" => Ok(Sound::ItemTridentRiptide2 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_TRIDENT_RIPTIDE_3" => Ok(Sound::ItemTridentRiptide3 { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_TRIDENT_THROW" => Ok(Sound::ItemTridentThrow { inner: SoundStruct::from_raw(env,obj)?}),
"ITEM_TRIDENT_THUNDER" => Ok(Sound::ItemTridentThunder { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_CREATIVE" => Ok(Sound::MusicCreative { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_CREDITS" => Ok(Sound::MusicCredits { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_11" => Ok(Sound::MusicDisc11 { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_13" => Ok(Sound::MusicDisc13 { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_5" => Ok(Sound::MusicDisc5 { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_BLOCKS" => Ok(Sound::MusicDiscBlocks { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_CAT" => Ok(Sound::MusicDiscCat { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_CHIRP" => Ok(Sound::MusicDiscChirp { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_FAR" => Ok(Sound::MusicDiscFar { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_MALL" => Ok(Sound::MusicDiscMall { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_MELLOHI" => Ok(Sound::MusicDiscMellohi { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_OTHERSIDE" => Ok(Sound::MusicDiscOtherside { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_PIGSTEP" => Ok(Sound::MusicDiscPigstep { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_RELIC" => Ok(Sound::MusicDiscRelic { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_STAL" => Ok(Sound::MusicDiscStal { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_STRAD" => Ok(Sound::MusicDiscStrad { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_WAIT" => Ok(Sound::MusicDiscWait { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DISC_WARD" => Ok(Sound::MusicDiscWard { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_DRAGON" => Ok(Sound::MusicDragon { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_END" => Ok(Sound::MusicEnd { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_GAME" => Ok(Sound::MusicGame { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_MENU" => Ok(Sound::MusicMenu { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_NETHER_BASALT_DELTAS" => Ok(Sound::MusicNetherBasaltDeltas { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_NETHER_CRIMSON_FOREST" => Ok(Sound::MusicNetherCrimsonForest { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_NETHER_NETHER_WASTES" => Ok(Sound::MusicNetherNetherWastes { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_NETHER_SOUL_SAND_VALLEY" => Ok(Sound::MusicNetherSoulSandValley { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_NETHER_WARPED_FOREST" => Ok(Sound::MusicNetherWarpedForest { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_BADLANDS" => Ok(Sound::MusicOverworldBadlands { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_BAMBOO_JUNGLE" => Ok(Sound::MusicOverworldBambooJungle { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_CHERRY_GROVE" => Ok(Sound::MusicOverworldCherryGrove { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_DEEP_DARK" => Ok(Sound::MusicOverworldDeepDark { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_DESERT" => Ok(Sound::MusicOverworldDesert { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_DRIPSTONE_CAVES" => Ok(Sound::MusicOverworldDripstoneCaves { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_FLOWER_FOREST" => Ok(Sound::MusicOverworldFlowerForest { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_FOREST" => Ok(Sound::MusicOverworldForest { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_FROZEN_PEAKS" => Ok(Sound::MusicOverworldFrozenPeaks { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_GROVE" => Ok(Sound::MusicOverworldGrove { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_JAGGED_PEAKS" => Ok(Sound::MusicOverworldJaggedPeaks { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_JUNGLE" => Ok(Sound::MusicOverworldJungle { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_LUSH_CAVES" => Ok(Sound::MusicOverworldLushCaves { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_MEADOW" => Ok(Sound::MusicOverworldMeadow { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_OLD_GROWTH_TAIGA" => Ok(Sound::MusicOverworldOldGrowthTaiga { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_SNOWY_SLOPES" => Ok(Sound::MusicOverworldSnowySlopes { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_SPARSE_JUNGLE" => Ok(Sound::MusicOverworldSparseJungle { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_STONY_PEAKS" => Ok(Sound::MusicOverworldStonyPeaks { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_OVERWORLD_SWAMP" => Ok(Sound::MusicOverworldSwamp { inner: SoundStruct::from_raw(env,obj)?}),
"MUSIC_UNDER_WATER" => Ok(Sound::MusicUnderWater { inner: SoundStruct::from_raw(env,obj)?}),
"PARTICLE_SOUL_ESCAPE" => Ok(Sound::ParticleSoulEscape { inner: SoundStruct::from_raw(env,obj)?}),
"UI_BUTTON_CLICK" => Ok(Sound::UiButtonClick { inner: SoundStruct::from_raw(env,obj)?}),
"UI_CARTOGRAPHY_TABLE_TAKE_RESULT" => Ok(Sound::UiCartographyTableTakeResult { inner: SoundStruct::from_raw(env,obj)?}),
"UI_LOOM_SELECT_PATTERN" => Ok(Sound::UiLoomSelectPattern { inner: SoundStruct::from_raw(env,obj)?}),
"UI_LOOM_TAKE_RESULT" => Ok(Sound::UiLoomTakeResult { inner: SoundStruct::from_raw(env,obj)?}),
"UI_STONECUTTER_SELECT_RECIPE" => Ok(Sound::UiStonecutterSelectRecipe { inner: SoundStruct::from_raw(env,obj)?}),
"UI_STONECUTTER_TAKE_RESULT" => Ok(Sound::UiStonecutterTakeResult { inner: SoundStruct::from_raw(env,obj)?}),
"UI_TOAST_CHALLENGE_COMPLETE" => Ok(Sound::UiToastChallengeComplete { inner: SoundStruct::from_raw(env,obj)?}),
"UI_TOAST_IN" => Ok(Sound::UiToastIn { inner: SoundStruct::from_raw(env,obj)?}),
"UI_TOAST_OUT" => Ok(Sound::UiToastOut { inner: SoundStruct::from_raw(env,obj)?}),
"WEATHER_RAIN" => Ok(Sound::WeatherRain { inner: SoundStruct::from_raw(env,obj)?}),
"WEATHER_RAIN_ABOVE" => Ok(Sound::WeatherRainAbove { inner: SoundStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct SoundStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Sound<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::AmbientBasaltDeltasAdditions { inner } => inner.0.clone(),
Self::AmbientBasaltDeltasLoop { inner } => inner.0.clone(),
Self::AmbientBasaltDeltasMood { inner } => inner.0.clone(),
Self::AmbientCave { inner } => inner.0.clone(),
Self::AmbientCrimsonForestAdditions { inner } => inner.0.clone(),
Self::AmbientCrimsonForestLoop { inner } => inner.0.clone(),
Self::AmbientCrimsonForestMood { inner } => inner.0.clone(),
Self::AmbientNetherWastesAdditions { inner } => inner.0.clone(),
Self::AmbientNetherWastesLoop { inner } => inner.0.clone(),
Self::AmbientNetherWastesMood { inner } => inner.0.clone(),
Self::AmbientSoulSandValleyAdditions { inner } => inner.0.clone(),
Self::AmbientSoulSandValleyLoop { inner } => inner.0.clone(),
Self::AmbientSoulSandValleyMood { inner } => inner.0.clone(),
Self::AmbientUnderwaterEnter { inner } => inner.0.clone(),
Self::AmbientUnderwaterExit { inner } => inner.0.clone(),
Self::AmbientUnderwaterLoop { inner } => inner.0.clone(),
Self::AmbientUnderwaterLoopAdditions { inner } => inner.0.clone(),
Self::AmbientUnderwaterLoopAdditionsRare { inner } => inner.0.clone(),
Self::AmbientUnderwaterLoopAdditionsUltraRare { inner } => inner.0.clone(),
Self::AmbientWarpedForestAdditions { inner } => inner.0.clone(),
Self::AmbientWarpedForestLoop { inner } => inner.0.clone(),
Self::AmbientWarpedForestMood { inner } => inner.0.clone(),
Self::BlockAmethystBlockBreak { inner } => inner.0.clone(),
Self::BlockAmethystBlockChime { inner } => inner.0.clone(),
Self::BlockAmethystBlockFall { inner } => inner.0.clone(),
Self::BlockAmethystBlockHit { inner } => inner.0.clone(),
Self::BlockAmethystBlockPlace { inner } => inner.0.clone(),
Self::BlockAmethystBlockResonate { inner } => inner.0.clone(),
Self::BlockAmethystBlockStep { inner } => inner.0.clone(),
Self::BlockAmethystClusterBreak { inner } => inner.0.clone(),
Self::BlockAmethystClusterFall { inner } => inner.0.clone(),
Self::BlockAmethystClusterHit { inner } => inner.0.clone(),
Self::BlockAmethystClusterPlace { inner } => inner.0.clone(),
Self::BlockAmethystClusterStep { inner } => inner.0.clone(),
Self::BlockAncientDebrisBreak { inner } => inner.0.clone(),
Self::BlockAncientDebrisFall { inner } => inner.0.clone(),
Self::BlockAncientDebrisHit { inner } => inner.0.clone(),
Self::BlockAncientDebrisPlace { inner } => inner.0.clone(),
Self::BlockAncientDebrisStep { inner } => inner.0.clone(),
Self::BlockAnvilBreak { inner } => inner.0.clone(),
Self::BlockAnvilDestroy { inner } => inner.0.clone(),
Self::BlockAnvilFall { inner } => inner.0.clone(),
Self::BlockAnvilHit { inner } => inner.0.clone(),
Self::BlockAnvilLand { inner } => inner.0.clone(),
Self::BlockAnvilPlace { inner } => inner.0.clone(),
Self::BlockAnvilStep { inner } => inner.0.clone(),
Self::BlockAnvilUse { inner } => inner.0.clone(),
Self::BlockAzaleaBreak { inner } => inner.0.clone(),
Self::BlockAzaleaFall { inner } => inner.0.clone(),
Self::BlockAzaleaHit { inner } => inner.0.clone(),
Self::BlockAzaleaLeavesBreak { inner } => inner.0.clone(),
Self::BlockAzaleaLeavesFall { inner } => inner.0.clone(),
Self::BlockAzaleaLeavesHit { inner } => inner.0.clone(),
Self::BlockAzaleaLeavesPlace { inner } => inner.0.clone(),
Self::BlockAzaleaLeavesStep { inner } => inner.0.clone(),
Self::BlockAzaleaPlace { inner } => inner.0.clone(),
Self::BlockAzaleaStep { inner } => inner.0.clone(),
Self::BlockBambooBreak { inner } => inner.0.clone(),
Self::BlockBambooFall { inner } => inner.0.clone(),
Self::BlockBambooHit { inner } => inner.0.clone(),
Self::BlockBambooPlace { inner } => inner.0.clone(),
Self::BlockBambooSaplingBreak { inner } => inner.0.clone(),
Self::BlockBambooSaplingHit { inner } => inner.0.clone(),
Self::BlockBambooSaplingPlace { inner } => inner.0.clone(),
Self::BlockBambooStep { inner } => inner.0.clone(),
Self::BlockBambooWoodBreak { inner } => inner.0.clone(),
Self::BlockBambooWoodButtonClickOff { inner } => inner.0.clone(),
Self::BlockBambooWoodButtonClickOn { inner } => inner.0.clone(),
Self::BlockBambooWoodDoorClose { inner } => inner.0.clone(),
Self::BlockBambooWoodDoorOpen { inner } => inner.0.clone(),
Self::BlockBambooWoodFall { inner } => inner.0.clone(),
Self::BlockBambooWoodFenceGateClose { inner } => inner.0.clone(),
Self::BlockBambooWoodFenceGateOpen { inner } => inner.0.clone(),
Self::BlockBambooWoodHangingSignBreak { inner } => inner.0.clone(),
Self::BlockBambooWoodHangingSignFall { inner } => inner.0.clone(),
Self::BlockBambooWoodHangingSignHit { inner } => inner.0.clone(),
Self::BlockBambooWoodHangingSignPlace { inner } => inner.0.clone(),
Self::BlockBambooWoodHangingSignStep { inner } => inner.0.clone(),
Self::BlockBambooWoodHit { inner } => inner.0.clone(),
Self::BlockBambooWoodPlace { inner } => inner.0.clone(),
Self::BlockBambooWoodPressurePlateClickOff { inner } => inner.0.clone(),
Self::BlockBambooWoodPressurePlateClickOn { inner } => inner.0.clone(),
Self::BlockBambooWoodStep { inner } => inner.0.clone(),
Self::BlockBambooWoodTrapdoorClose { inner } => inner.0.clone(),
Self::BlockBambooWoodTrapdoorOpen { inner } => inner.0.clone(),
Self::BlockBarrelClose { inner } => inner.0.clone(),
Self::BlockBarrelOpen { inner } => inner.0.clone(),
Self::BlockBasaltBreak { inner } => inner.0.clone(),
Self::BlockBasaltFall { inner } => inner.0.clone(),
Self::BlockBasaltHit { inner } => inner.0.clone(),
Self::BlockBasaltPlace { inner } => inner.0.clone(),
Self::BlockBasaltStep { inner } => inner.0.clone(),
Self::BlockBeaconActivate { inner } => inner.0.clone(),
Self::BlockBeaconAmbient { inner } => inner.0.clone(),
Self::BlockBeaconDeactivate { inner } => inner.0.clone(),
Self::BlockBeaconPowerSelect { inner } => inner.0.clone(),
Self::BlockBeehiveDrip { inner } => inner.0.clone(),
Self::BlockBeehiveEnter { inner } => inner.0.clone(),
Self::BlockBeehiveExit { inner } => inner.0.clone(),
Self::BlockBeehiveShear { inner } => inner.0.clone(),
Self::BlockBeehiveWork { inner } => inner.0.clone(),
Self::BlockBellResonate { inner } => inner.0.clone(),
Self::BlockBellUse { inner } => inner.0.clone(),
Self::BlockBigDripleafBreak { inner } => inner.0.clone(),
Self::BlockBigDripleafFall { inner } => inner.0.clone(),
Self::BlockBigDripleafHit { inner } => inner.0.clone(),
Self::BlockBigDripleafPlace { inner } => inner.0.clone(),
Self::BlockBigDripleafStep { inner } => inner.0.clone(),
Self::BlockBigDripleafTiltDown { inner } => inner.0.clone(),
Self::BlockBigDripleafTiltUp { inner } => inner.0.clone(),
Self::BlockBlastfurnaceFireCrackle { inner } => inner.0.clone(),
Self::BlockBoneBlockBreak { inner } => inner.0.clone(),
Self::BlockBoneBlockFall { inner } => inner.0.clone(),
Self::BlockBoneBlockHit { inner } => inner.0.clone(),
Self::BlockBoneBlockPlace { inner } => inner.0.clone(),
Self::BlockBoneBlockStep { inner } => inner.0.clone(),
Self::BlockBrewingStandBrew { inner } => inner.0.clone(),
Self::BlockBubbleColumnBubblePop { inner } => inner.0.clone(),
Self::BlockBubbleColumnUpwardsAmbient { inner } => inner.0.clone(),
Self::BlockBubbleColumnUpwardsInside { inner } => inner.0.clone(),
Self::BlockBubbleColumnWhirlpoolAmbient { inner } => inner.0.clone(),
Self::BlockBubbleColumnWhirlpoolInside { inner } => inner.0.clone(),
Self::BlockCakeAddCandle { inner } => inner.0.clone(),
Self::BlockCalciteBreak { inner } => inner.0.clone(),
Self::BlockCalciteFall { inner } => inner.0.clone(),
Self::BlockCalciteHit { inner } => inner.0.clone(),
Self::BlockCalcitePlace { inner } => inner.0.clone(),
Self::BlockCalciteStep { inner } => inner.0.clone(),
Self::BlockCampfireCrackle { inner } => inner.0.clone(),
Self::BlockCandleAmbient { inner } => inner.0.clone(),
Self::BlockCandleBreak { inner } => inner.0.clone(),
Self::BlockCandleExtinguish { inner } => inner.0.clone(),
Self::BlockCandleFall { inner } => inner.0.clone(),
Self::BlockCandleHit { inner } => inner.0.clone(),
Self::BlockCandlePlace { inner } => inner.0.clone(),
Self::BlockCandleStep { inner } => inner.0.clone(),
Self::BlockCaveVinesBreak { inner } => inner.0.clone(),
Self::BlockCaveVinesFall { inner } => inner.0.clone(),
Self::BlockCaveVinesHit { inner } => inner.0.clone(),
Self::BlockCaveVinesPickBerries { inner } => inner.0.clone(),
Self::BlockCaveVinesPlace { inner } => inner.0.clone(),
Self::BlockCaveVinesStep { inner } => inner.0.clone(),
Self::BlockChainBreak { inner } => inner.0.clone(),
Self::BlockChainFall { inner } => inner.0.clone(),
Self::BlockChainHit { inner } => inner.0.clone(),
Self::BlockChainPlace { inner } => inner.0.clone(),
Self::BlockChainStep { inner } => inner.0.clone(),
Self::BlockCherryLeavesBreak { inner } => inner.0.clone(),
Self::BlockCherryLeavesFall { inner } => inner.0.clone(),
Self::BlockCherryLeavesHit { inner } => inner.0.clone(),
Self::BlockCherryLeavesPlace { inner } => inner.0.clone(),
Self::BlockCherryLeavesStep { inner } => inner.0.clone(),
Self::BlockCherrySaplingBreak { inner } => inner.0.clone(),
Self::BlockCherrySaplingFall { inner } => inner.0.clone(),
Self::BlockCherrySaplingHit { inner } => inner.0.clone(),
Self::BlockCherrySaplingPlace { inner } => inner.0.clone(),
Self::BlockCherrySaplingStep { inner } => inner.0.clone(),
Self::BlockCherryWoodBreak { inner } => inner.0.clone(),
Self::BlockCherryWoodButtonClickOff { inner } => inner.0.clone(),
Self::BlockCherryWoodButtonClickOn { inner } => inner.0.clone(),
Self::BlockCherryWoodDoorClose { inner } => inner.0.clone(),
Self::BlockCherryWoodDoorOpen { inner } => inner.0.clone(),
Self::BlockCherryWoodFall { inner } => inner.0.clone(),
Self::BlockCherryWoodFenceGateClose { inner } => inner.0.clone(),
Self::BlockCherryWoodFenceGateOpen { inner } => inner.0.clone(),
Self::BlockCherryWoodHangingSignBreak { inner } => inner.0.clone(),
Self::BlockCherryWoodHangingSignFall { inner } => inner.0.clone(),
Self::BlockCherryWoodHangingSignHit { inner } => inner.0.clone(),
Self::BlockCherryWoodHangingSignPlace { inner } => inner.0.clone(),
Self::BlockCherryWoodHangingSignStep { inner } => inner.0.clone(),
Self::BlockCherryWoodHit { inner } => inner.0.clone(),
Self::BlockCherryWoodPlace { inner } => inner.0.clone(),
Self::BlockCherryWoodPressurePlateClickOff { inner } => inner.0.clone(),
Self::BlockCherryWoodPressurePlateClickOn { inner } => inner.0.clone(),
Self::BlockCherryWoodStep { inner } => inner.0.clone(),
Self::BlockCherryWoodTrapdoorClose { inner } => inner.0.clone(),
Self::BlockCherryWoodTrapdoorOpen { inner } => inner.0.clone(),
Self::BlockChestClose { inner } => inner.0.clone(),
Self::BlockChestLocked { inner } => inner.0.clone(),
Self::BlockChestOpen { inner } => inner.0.clone(),
Self::BlockChiseledBookshelfBreak { inner } => inner.0.clone(),
Self::BlockChiseledBookshelfFall { inner } => inner.0.clone(),
Self::BlockChiseledBookshelfHit { inner } => inner.0.clone(),
Self::BlockChiseledBookshelfInsert { inner } => inner.0.clone(),
Self::BlockChiseledBookshelfInsertEnchanted { inner } => inner.0.clone(),
Self::BlockChiseledBookshelfPickup { inner } => inner.0.clone(),
Self::BlockChiseledBookshelfPickupEnchanted { inner } => inner.0.clone(),
Self::BlockChiseledBookshelfPlace { inner } => inner.0.clone(),
Self::BlockChiseledBookshelfStep { inner } => inner.0.clone(),
Self::BlockChorusFlowerDeath { inner } => inner.0.clone(),
Self::BlockChorusFlowerGrow { inner } => inner.0.clone(),
Self::BlockComparatorClick { inner } => inner.0.clone(),
Self::BlockComposterEmpty { inner } => inner.0.clone(),
Self::BlockComposterFill { inner } => inner.0.clone(),
Self::BlockComposterFillSuccess { inner } => inner.0.clone(),
Self::BlockComposterReady { inner } => inner.0.clone(),
Self::BlockConduitActivate { inner } => inner.0.clone(),
Self::BlockConduitAmbient { inner } => inner.0.clone(),
Self::BlockConduitAmbientShort { inner } => inner.0.clone(),
Self::BlockConduitAttackTarget { inner } => inner.0.clone(),
Self::BlockConduitDeactivate { inner } => inner.0.clone(),
Self::BlockCopperBreak { inner } => inner.0.clone(),
Self::BlockCopperBulbBreak { inner } => inner.0.clone(),
Self::BlockCopperBulbFall { inner } => inner.0.clone(),
Self::BlockCopperBulbHit { inner } => inner.0.clone(),
Self::BlockCopperBulbPlace { inner } => inner.0.clone(),
Self::BlockCopperBulbStep { inner } => inner.0.clone(),
Self::BlockCopperBulbTurnOff { inner } => inner.0.clone(),
Self::BlockCopperBulbTurnOn { inner } => inner.0.clone(),
Self::BlockCopperDoorClose { inner } => inner.0.clone(),
Self::BlockCopperDoorOpen { inner } => inner.0.clone(),
Self::BlockCopperFall { inner } => inner.0.clone(),
Self::BlockCopperGrateBreak { inner } => inner.0.clone(),
Self::BlockCopperGrateFall { inner } => inner.0.clone(),
Self::BlockCopperGrateHit { inner } => inner.0.clone(),
Self::BlockCopperGratePlace { inner } => inner.0.clone(),
Self::BlockCopperGrateStep { inner } => inner.0.clone(),
Self::BlockCopperHit { inner } => inner.0.clone(),
Self::BlockCopperPlace { inner } => inner.0.clone(),
Self::BlockCopperStep { inner } => inner.0.clone(),
Self::BlockCopperTrapdoorClose { inner } => inner.0.clone(),
Self::BlockCopperTrapdoorOpen { inner } => inner.0.clone(),
Self::BlockCoralBlockBreak { inner } => inner.0.clone(),
Self::BlockCoralBlockFall { inner } => inner.0.clone(),
Self::BlockCoralBlockHit { inner } => inner.0.clone(),
Self::BlockCoralBlockPlace { inner } => inner.0.clone(),
Self::BlockCoralBlockStep { inner } => inner.0.clone(),
Self::BlockCrafterCraft { inner } => inner.0.clone(),
Self::BlockCrafterFail { inner } => inner.0.clone(),
Self::BlockCropBreak { inner } => inner.0.clone(),
Self::BlockDecoratedPotBreak { inner } => inner.0.clone(),
Self::BlockDecoratedPotFall { inner } => inner.0.clone(),
Self::BlockDecoratedPotHit { inner } => inner.0.clone(),
Self::BlockDecoratedPotInsert { inner } => inner.0.clone(),
Self::BlockDecoratedPotInsertFail { inner } => inner.0.clone(),
Self::BlockDecoratedPotPlace { inner } => inner.0.clone(),
Self::BlockDecoratedPotShatter { inner } => inner.0.clone(),
Self::BlockDecoratedPotStep { inner } => inner.0.clone(),
Self::BlockDeepslateBreak { inner } => inner.0.clone(),
Self::BlockDeepslateBricksBreak { inner } => inner.0.clone(),
Self::BlockDeepslateBricksFall { inner } => inner.0.clone(),
Self::BlockDeepslateBricksHit { inner } => inner.0.clone(),
Self::BlockDeepslateBricksPlace { inner } => inner.0.clone(),
Self::BlockDeepslateBricksStep { inner } => inner.0.clone(),
Self::BlockDeepslateFall { inner } => inner.0.clone(),
Self::BlockDeepslateHit { inner } => inner.0.clone(),
Self::BlockDeepslatePlace { inner } => inner.0.clone(),
Self::BlockDeepslateStep { inner } => inner.0.clone(),
Self::BlockDeepslateTilesBreak { inner } => inner.0.clone(),
Self::BlockDeepslateTilesFall { inner } => inner.0.clone(),
Self::BlockDeepslateTilesHit { inner } => inner.0.clone(),
Self::BlockDeepslateTilesPlace { inner } => inner.0.clone(),
Self::BlockDeepslateTilesStep { inner } => inner.0.clone(),
Self::BlockDispenserDispense { inner } => inner.0.clone(),
Self::BlockDispenserFail { inner } => inner.0.clone(),
Self::BlockDispenserLaunch { inner } => inner.0.clone(),
Self::BlockDripstoneBlockBreak { inner } => inner.0.clone(),
Self::BlockDripstoneBlockFall { inner } => inner.0.clone(),
Self::BlockDripstoneBlockHit { inner } => inner.0.clone(),
Self::BlockDripstoneBlockPlace { inner } => inner.0.clone(),
Self::BlockDripstoneBlockStep { inner } => inner.0.clone(),
Self::BlockEnchantmentTableUse { inner } => inner.0.clone(),
Self::BlockEnderChestClose { inner } => inner.0.clone(),
Self::BlockEnderChestOpen { inner } => inner.0.clone(),
Self::BlockEndGatewaySpawn { inner } => inner.0.clone(),
Self::BlockEndPortalFrameFill { inner } => inner.0.clone(),
Self::BlockEndPortalSpawn { inner } => inner.0.clone(),
Self::BlockFenceGateClose { inner } => inner.0.clone(),
Self::BlockFenceGateOpen { inner } => inner.0.clone(),
Self::BlockFireAmbient { inner } => inner.0.clone(),
Self::BlockFireExtinguish { inner } => inner.0.clone(),
Self::BlockFloweringAzaleaBreak { inner } => inner.0.clone(),
Self::BlockFloweringAzaleaFall { inner } => inner.0.clone(),
Self::BlockFloweringAzaleaHit { inner } => inner.0.clone(),
Self::BlockFloweringAzaleaPlace { inner } => inner.0.clone(),
Self::BlockFloweringAzaleaStep { inner } => inner.0.clone(),
Self::BlockFroglightBreak { inner } => inner.0.clone(),
Self::BlockFroglightFall { inner } => inner.0.clone(),
Self::BlockFroglightHit { inner } => inner.0.clone(),
Self::BlockFroglightPlace { inner } => inner.0.clone(),
Self::BlockFroglightStep { inner } => inner.0.clone(),
Self::BlockFrogspawnBreak { inner } => inner.0.clone(),
Self::BlockFrogspawnFall { inner } => inner.0.clone(),
Self::BlockFrogspawnHatch { inner } => inner.0.clone(),
Self::BlockFrogspawnHit { inner } => inner.0.clone(),
Self::BlockFrogspawnPlace { inner } => inner.0.clone(),
Self::BlockFrogspawnStep { inner } => inner.0.clone(),
Self::BlockFungusBreak { inner } => inner.0.clone(),
Self::BlockFungusFall { inner } => inner.0.clone(),
Self::BlockFungusHit { inner } => inner.0.clone(),
Self::BlockFungusPlace { inner } => inner.0.clone(),
Self::BlockFungusStep { inner } => inner.0.clone(),
Self::BlockFurnaceFireCrackle { inner } => inner.0.clone(),
Self::BlockGildedBlackstoneBreak { inner } => inner.0.clone(),
Self::BlockGildedBlackstoneFall { inner } => inner.0.clone(),
Self::BlockGildedBlackstoneHit { inner } => inner.0.clone(),
Self::BlockGildedBlackstonePlace { inner } => inner.0.clone(),
Self::BlockGildedBlackstoneStep { inner } => inner.0.clone(),
Self::BlockGlassBreak { inner } => inner.0.clone(),
Self::BlockGlassFall { inner } => inner.0.clone(),
Self::BlockGlassHit { inner } => inner.0.clone(),
Self::BlockGlassPlace { inner } => inner.0.clone(),
Self::BlockGlassStep { inner } => inner.0.clone(),
Self::BlockGrassBreak { inner } => inner.0.clone(),
Self::BlockGrassFall { inner } => inner.0.clone(),
Self::BlockGrassHit { inner } => inner.0.clone(),
Self::BlockGrassPlace { inner } => inner.0.clone(),
Self::BlockGrassStep { inner } => inner.0.clone(),
Self::BlockGravelBreak { inner } => inner.0.clone(),
Self::BlockGravelFall { inner } => inner.0.clone(),
Self::BlockGravelHit { inner } => inner.0.clone(),
Self::BlockGravelPlace { inner } => inner.0.clone(),
Self::BlockGravelStep { inner } => inner.0.clone(),
Self::BlockGrindstoneUse { inner } => inner.0.clone(),
Self::BlockGrowingPlantCrop { inner } => inner.0.clone(),
Self::BlockHangingRootsBreak { inner } => inner.0.clone(),
Self::BlockHangingRootsFall { inner } => inner.0.clone(),
Self::BlockHangingRootsHit { inner } => inner.0.clone(),
Self::BlockHangingRootsPlace { inner } => inner.0.clone(),
Self::BlockHangingRootsStep { inner } => inner.0.clone(),
Self::BlockHangingSignBreak { inner } => inner.0.clone(),
Self::BlockHangingSignFall { inner } => inner.0.clone(),
Self::BlockHangingSignHit { inner } => inner.0.clone(),
Self::BlockHangingSignPlace { inner } => inner.0.clone(),
Self::BlockHangingSignStep { inner } => inner.0.clone(),
Self::BlockHangingSignWaxedInteractFail { inner } => inner.0.clone(),
Self::BlockHoneyBlockBreak { inner } => inner.0.clone(),
Self::BlockHoneyBlockFall { inner } => inner.0.clone(),
Self::BlockHoneyBlockHit { inner } => inner.0.clone(),
Self::BlockHoneyBlockPlace { inner } => inner.0.clone(),
Self::BlockHoneyBlockSlide { inner } => inner.0.clone(),
Self::BlockHoneyBlockStep { inner } => inner.0.clone(),
Self::BlockIronDoorClose { inner } => inner.0.clone(),
Self::BlockIronDoorOpen { inner } => inner.0.clone(),
Self::BlockIronTrapdoorClose { inner } => inner.0.clone(),
Self::BlockIronTrapdoorOpen { inner } => inner.0.clone(),
Self::BlockLadderBreak { inner } => inner.0.clone(),
Self::BlockLadderFall { inner } => inner.0.clone(),
Self::BlockLadderHit { inner } => inner.0.clone(),
Self::BlockLadderPlace { inner } => inner.0.clone(),
Self::BlockLadderStep { inner } => inner.0.clone(),
Self::BlockLanternBreak { inner } => inner.0.clone(),
Self::BlockLanternFall { inner } => inner.0.clone(),
Self::BlockLanternHit { inner } => inner.0.clone(),
Self::BlockLanternPlace { inner } => inner.0.clone(),
Self::BlockLanternStep { inner } => inner.0.clone(),
Self::BlockLargeAmethystBudBreak { inner } => inner.0.clone(),
Self::BlockLargeAmethystBudPlace { inner } => inner.0.clone(),
Self::BlockLavaAmbient { inner } => inner.0.clone(),
Self::BlockLavaExtinguish { inner } => inner.0.clone(),
Self::BlockLavaPop { inner } => inner.0.clone(),
Self::BlockLeverClick { inner } => inner.0.clone(),
Self::BlockLilyPadPlace { inner } => inner.0.clone(),
Self::BlockLodestoneBreak { inner } => inner.0.clone(),
Self::BlockLodestoneFall { inner } => inner.0.clone(),
Self::BlockLodestoneHit { inner } => inner.0.clone(),
Self::BlockLodestonePlace { inner } => inner.0.clone(),
Self::BlockLodestoneStep { inner } => inner.0.clone(),
Self::BlockMangroveRootsBreak { inner } => inner.0.clone(),
Self::BlockMangroveRootsFall { inner } => inner.0.clone(),
Self::BlockMangroveRootsHit { inner } => inner.0.clone(),
Self::BlockMangroveRootsPlace { inner } => inner.0.clone(),
Self::BlockMangroveRootsStep { inner } => inner.0.clone(),
Self::BlockMediumAmethystBudBreak { inner } => inner.0.clone(),
Self::BlockMediumAmethystBudPlace { inner } => inner.0.clone(),
Self::BlockMetalBreak { inner } => inner.0.clone(),
Self::BlockMetalFall { inner } => inner.0.clone(),
Self::BlockMetalHit { inner } => inner.0.clone(),
Self::BlockMetalPlace { inner } => inner.0.clone(),
Self::BlockMetalPressurePlateClickOff { inner } => inner.0.clone(),
Self::BlockMetalPressurePlateClickOn { inner } => inner.0.clone(),
Self::BlockMetalStep { inner } => inner.0.clone(),
Self::BlockMossBreak { inner } => inner.0.clone(),
Self::BlockMossCarpetBreak { inner } => inner.0.clone(),
Self::BlockMossCarpetFall { inner } => inner.0.clone(),
Self::BlockMossCarpetHit { inner } => inner.0.clone(),
Self::BlockMossCarpetPlace { inner } => inner.0.clone(),
Self::BlockMossCarpetStep { inner } => inner.0.clone(),
Self::BlockMossFall { inner } => inner.0.clone(),
Self::BlockMossHit { inner } => inner.0.clone(),
Self::BlockMossPlace { inner } => inner.0.clone(),
Self::BlockMossStep { inner } => inner.0.clone(),
Self::BlockMuddyMangroveRootsBreak { inner } => inner.0.clone(),
Self::BlockMuddyMangroveRootsFall { inner } => inner.0.clone(),
Self::BlockMuddyMangroveRootsHit { inner } => inner.0.clone(),
Self::BlockMuddyMangroveRootsPlace { inner } => inner.0.clone(),
Self::BlockMuddyMangroveRootsStep { inner } => inner.0.clone(),
Self::BlockMudBreak { inner } => inner.0.clone(),
Self::BlockMudBricksBreak { inner } => inner.0.clone(),
Self::BlockMudBricksFall { inner } => inner.0.clone(),
Self::BlockMudBricksHit { inner } => inner.0.clone(),
Self::BlockMudBricksPlace { inner } => inner.0.clone(),
Self::BlockMudBricksStep { inner } => inner.0.clone(),
Self::BlockMudFall { inner } => inner.0.clone(),
Self::BlockMudHit { inner } => inner.0.clone(),
Self::BlockMudPlace { inner } => inner.0.clone(),
Self::BlockMudStep { inner } => inner.0.clone(),
Self::BlockNetheriteBlockBreak { inner } => inner.0.clone(),
Self::BlockNetheriteBlockFall { inner } => inner.0.clone(),
Self::BlockNetheriteBlockHit { inner } => inner.0.clone(),
Self::BlockNetheriteBlockPlace { inner } => inner.0.clone(),
Self::BlockNetheriteBlockStep { inner } => inner.0.clone(),
Self::BlockNetherrackBreak { inner } => inner.0.clone(),
Self::BlockNetherrackFall { inner } => inner.0.clone(),
Self::BlockNetherrackHit { inner } => inner.0.clone(),
Self::BlockNetherrackPlace { inner } => inner.0.clone(),
Self::BlockNetherrackStep { inner } => inner.0.clone(),
Self::BlockNetherBricksBreak { inner } => inner.0.clone(),
Self::BlockNetherBricksFall { inner } => inner.0.clone(),
Self::BlockNetherBricksHit { inner } => inner.0.clone(),
Self::BlockNetherBricksPlace { inner } => inner.0.clone(),
Self::BlockNetherBricksStep { inner } => inner.0.clone(),
Self::BlockNetherGoldOreBreak { inner } => inner.0.clone(),
Self::BlockNetherGoldOreFall { inner } => inner.0.clone(),
Self::BlockNetherGoldOreHit { inner } => inner.0.clone(),
Self::BlockNetherGoldOrePlace { inner } => inner.0.clone(),
Self::BlockNetherGoldOreStep { inner } => inner.0.clone(),
Self::BlockNetherOreBreak { inner } => inner.0.clone(),
Self::BlockNetherOreFall { inner } => inner.0.clone(),
Self::BlockNetherOreHit { inner } => inner.0.clone(),
Self::BlockNetherOrePlace { inner } => inner.0.clone(),
Self::BlockNetherOreStep { inner } => inner.0.clone(),
Self::BlockNetherSproutsBreak { inner } => inner.0.clone(),
Self::BlockNetherSproutsFall { inner } => inner.0.clone(),
Self::BlockNetherSproutsHit { inner } => inner.0.clone(),
Self::BlockNetherSproutsPlace { inner } => inner.0.clone(),
Self::BlockNetherSproutsStep { inner } => inner.0.clone(),
Self::BlockNetherWartBreak { inner } => inner.0.clone(),
Self::BlockNetherWoodBreak { inner } => inner.0.clone(),
Self::BlockNetherWoodButtonClickOff { inner } => inner.0.clone(),
Self::BlockNetherWoodButtonClickOn { inner } => inner.0.clone(),
Self::BlockNetherWoodDoorClose { inner } => inner.0.clone(),
Self::BlockNetherWoodDoorOpen { inner } => inner.0.clone(),
Self::BlockNetherWoodFall { inner } => inner.0.clone(),
Self::BlockNetherWoodFenceGateClose { inner } => inner.0.clone(),
Self::BlockNetherWoodFenceGateOpen { inner } => inner.0.clone(),
Self::BlockNetherWoodHangingSignBreak { inner } => inner.0.clone(),
Self::BlockNetherWoodHangingSignFall { inner } => inner.0.clone(),
Self::BlockNetherWoodHangingSignHit { inner } => inner.0.clone(),
Self::BlockNetherWoodHangingSignPlace { inner } => inner.0.clone(),
Self::BlockNetherWoodHangingSignStep { inner } => inner.0.clone(),
Self::BlockNetherWoodHit { inner } => inner.0.clone(),
Self::BlockNetherWoodPlace { inner } => inner.0.clone(),
Self::BlockNetherWoodPressurePlateClickOff { inner } => inner.0.clone(),
Self::BlockNetherWoodPressurePlateClickOn { inner } => inner.0.clone(),
Self::BlockNetherWoodStep { inner } => inner.0.clone(),
Self::BlockNetherWoodTrapdoorClose { inner } => inner.0.clone(),
Self::BlockNetherWoodTrapdoorOpen { inner } => inner.0.clone(),
Self::BlockNoteBlockBanjo { inner } => inner.0.clone(),
Self::BlockNoteBlockBasedrum { inner } => inner.0.clone(),
Self::BlockNoteBlockBass { inner } => inner.0.clone(),
Self::BlockNoteBlockBell { inner } => inner.0.clone(),
Self::BlockNoteBlockBit { inner } => inner.0.clone(),
Self::BlockNoteBlockChime { inner } => inner.0.clone(),
Self::BlockNoteBlockCowBell { inner } => inner.0.clone(),
Self::BlockNoteBlockDidgeridoo { inner } => inner.0.clone(),
Self::BlockNoteBlockFlute { inner } => inner.0.clone(),
Self::BlockNoteBlockGuitar { inner } => inner.0.clone(),
Self::BlockNoteBlockHarp { inner } => inner.0.clone(),
Self::BlockNoteBlockHat { inner } => inner.0.clone(),
Self::BlockNoteBlockImitateCreeper { inner } => inner.0.clone(),
Self::BlockNoteBlockImitateEnderDragon { inner } => inner.0.clone(),
Self::BlockNoteBlockImitatePiglin { inner } => inner.0.clone(),
Self::BlockNoteBlockImitateSkeleton { inner } => inner.0.clone(),
Self::BlockNoteBlockImitateWitherSkeleton { inner } => inner.0.clone(),
Self::BlockNoteBlockImitateZombie { inner } => inner.0.clone(),
Self::BlockNoteBlockIronXylophone { inner } => inner.0.clone(),
Self::BlockNoteBlockPling { inner } => inner.0.clone(),
Self::BlockNoteBlockSnare { inner } => inner.0.clone(),
Self::BlockNoteBlockXylophone { inner } => inner.0.clone(),
Self::BlockNyliumBreak { inner } => inner.0.clone(),
Self::BlockNyliumFall { inner } => inner.0.clone(),
Self::BlockNyliumHit { inner } => inner.0.clone(),
Self::BlockNyliumPlace { inner } => inner.0.clone(),
Self::BlockNyliumStep { inner } => inner.0.clone(),
Self::BlockPackedMudBreak { inner } => inner.0.clone(),
Self::BlockPackedMudFall { inner } => inner.0.clone(),
Self::BlockPackedMudHit { inner } => inner.0.clone(),
Self::BlockPackedMudPlace { inner } => inner.0.clone(),
Self::BlockPackedMudStep { inner } => inner.0.clone(),
Self::BlockPinkPetalsBreak { inner } => inner.0.clone(),
Self::BlockPinkPetalsFall { inner } => inner.0.clone(),
Self::BlockPinkPetalsHit { inner } => inner.0.clone(),
Self::BlockPinkPetalsPlace { inner } => inner.0.clone(),
Self::BlockPinkPetalsStep { inner } => inner.0.clone(),
Self::BlockPistonContract { inner } => inner.0.clone(),
Self::BlockPistonExtend { inner } => inner.0.clone(),
Self::BlockPointedDripstoneBreak { inner } => inner.0.clone(),
Self::BlockPointedDripstoneDripLava { inner } => inner.0.clone(),
Self::BlockPointedDripstoneDripLavaIntoCauldron { inner } => inner.0.clone(),
Self::BlockPointedDripstoneDripWater { inner } => inner.0.clone(),
Self::BlockPointedDripstoneDripWaterIntoCauldron { inner } => inner.0.clone(),
Self::BlockPointedDripstoneFall { inner } => inner.0.clone(),
Self::BlockPointedDripstoneHit { inner } => inner.0.clone(),
Self::BlockPointedDripstoneLand { inner } => inner.0.clone(),
Self::BlockPointedDripstonePlace { inner } => inner.0.clone(),
Self::BlockPointedDripstoneStep { inner } => inner.0.clone(),
Self::BlockPolishedDeepslateBreak { inner } => inner.0.clone(),
Self::BlockPolishedDeepslateFall { inner } => inner.0.clone(),
Self::BlockPolishedDeepslateHit { inner } => inner.0.clone(),
Self::BlockPolishedDeepslatePlace { inner } => inner.0.clone(),
Self::BlockPolishedDeepslateStep { inner } => inner.0.clone(),
Self::BlockPolishedTuffBreak { inner } => inner.0.clone(),
Self::BlockPolishedTuffFall { inner } => inner.0.clone(),
Self::BlockPolishedTuffHit { inner } => inner.0.clone(),
Self::BlockPolishedTuffPlace { inner } => inner.0.clone(),
Self::BlockPolishedTuffStep { inner } => inner.0.clone(),
Self::BlockPortalAmbient { inner } => inner.0.clone(),
Self::BlockPortalTravel { inner } => inner.0.clone(),
Self::BlockPortalTrigger { inner } => inner.0.clone(),
Self::BlockPowderSnowBreak { inner } => inner.0.clone(),
Self::BlockPowderSnowFall { inner } => inner.0.clone(),
Self::BlockPowderSnowHit { inner } => inner.0.clone(),
Self::BlockPowderSnowPlace { inner } => inner.0.clone(),
Self::BlockPowderSnowStep { inner } => inner.0.clone(),
Self::BlockPumpkinCarve { inner } => inner.0.clone(),
Self::BlockRedstoneTorchBurnout { inner } => inner.0.clone(),
Self::BlockRespawnAnchorAmbient { inner } => inner.0.clone(),
Self::BlockRespawnAnchorCharge { inner } => inner.0.clone(),
Self::BlockRespawnAnchorDeplete { inner } => inner.0.clone(),
Self::BlockRespawnAnchorSetSpawn { inner } => inner.0.clone(),
Self::BlockRootedDirtBreak { inner } => inner.0.clone(),
Self::BlockRootedDirtFall { inner } => inner.0.clone(),
Self::BlockRootedDirtHit { inner } => inner.0.clone(),
Self::BlockRootedDirtPlace { inner } => inner.0.clone(),
Self::BlockRootedDirtStep { inner } => inner.0.clone(),
Self::BlockRootsBreak { inner } => inner.0.clone(),
Self::BlockRootsFall { inner } => inner.0.clone(),
Self::BlockRootsHit { inner } => inner.0.clone(),
Self::BlockRootsPlace { inner } => inner.0.clone(),
Self::BlockRootsStep { inner } => inner.0.clone(),
Self::BlockSandBreak { inner } => inner.0.clone(),
Self::BlockSandFall { inner } => inner.0.clone(),
Self::BlockSandHit { inner } => inner.0.clone(),
Self::BlockSandPlace { inner } => inner.0.clone(),
Self::BlockSandStep { inner } => inner.0.clone(),
Self::BlockScaffoldingBreak { inner } => inner.0.clone(),
Self::BlockScaffoldingFall { inner } => inner.0.clone(),
Self::BlockScaffoldingHit { inner } => inner.0.clone(),
Self::BlockScaffoldingPlace { inner } => inner.0.clone(),
Self::BlockScaffoldingStep { inner } => inner.0.clone(),
Self::BlockSculkBreak { inner } => inner.0.clone(),
Self::BlockSculkCatalystBloom { inner } => inner.0.clone(),
Self::BlockSculkCatalystBreak { inner } => inner.0.clone(),
Self::BlockSculkCatalystFall { inner } => inner.0.clone(),
Self::BlockSculkCatalystHit { inner } => inner.0.clone(),
Self::BlockSculkCatalystPlace { inner } => inner.0.clone(),
Self::BlockSculkCatalystStep { inner } => inner.0.clone(),
Self::BlockSculkCharge { inner } => inner.0.clone(),
Self::BlockSculkFall { inner } => inner.0.clone(),
Self::BlockSculkHit { inner } => inner.0.clone(),
Self::BlockSculkPlace { inner } => inner.0.clone(),
Self::BlockSculkSensorBreak { inner } => inner.0.clone(),
Self::BlockSculkSensorClicking { inner } => inner.0.clone(),
Self::BlockSculkSensorClickingStop { inner } => inner.0.clone(),
Self::BlockSculkSensorFall { inner } => inner.0.clone(),
Self::BlockSculkSensorHit { inner } => inner.0.clone(),
Self::BlockSculkSensorPlace { inner } => inner.0.clone(),
Self::BlockSculkSensorStep { inner } => inner.0.clone(),
Self::BlockSculkShriekerBreak { inner } => inner.0.clone(),
Self::BlockSculkShriekerFall { inner } => inner.0.clone(),
Self::BlockSculkShriekerHit { inner } => inner.0.clone(),
Self::BlockSculkShriekerPlace { inner } => inner.0.clone(),
Self::BlockSculkShriekerShriek { inner } => inner.0.clone(),
Self::BlockSculkShriekerStep { inner } => inner.0.clone(),
Self::BlockSculkSpread { inner } => inner.0.clone(),
Self::BlockSculkStep { inner } => inner.0.clone(),
Self::BlockSculkVeinBreak { inner } => inner.0.clone(),
Self::BlockSculkVeinFall { inner } => inner.0.clone(),
Self::BlockSculkVeinHit { inner } => inner.0.clone(),
Self::BlockSculkVeinPlace { inner } => inner.0.clone(),
Self::BlockSculkVeinStep { inner } => inner.0.clone(),
Self::BlockShroomlightBreak { inner } => inner.0.clone(),
Self::BlockShroomlightFall { inner } => inner.0.clone(),
Self::BlockShroomlightHit { inner } => inner.0.clone(),
Self::BlockShroomlightPlace { inner } => inner.0.clone(),
Self::BlockShroomlightStep { inner } => inner.0.clone(),
Self::BlockShulkerBoxClose { inner } => inner.0.clone(),
Self::BlockShulkerBoxOpen { inner } => inner.0.clone(),
Self::BlockSignWaxedInteractFail { inner } => inner.0.clone(),
Self::BlockSlimeBlockBreak { inner } => inner.0.clone(),
Self::BlockSlimeBlockFall { inner } => inner.0.clone(),
Self::BlockSlimeBlockHit { inner } => inner.0.clone(),
Self::BlockSlimeBlockPlace { inner } => inner.0.clone(),
Self::BlockSlimeBlockStep { inner } => inner.0.clone(),
Self::BlockSmallAmethystBudBreak { inner } => inner.0.clone(),
Self::BlockSmallAmethystBudPlace { inner } => inner.0.clone(),
Self::BlockSmallDripleafBreak { inner } => inner.0.clone(),
Self::BlockSmallDripleafFall { inner } => inner.0.clone(),
Self::BlockSmallDripleafHit { inner } => inner.0.clone(),
Self::BlockSmallDripleafPlace { inner } => inner.0.clone(),
Self::BlockSmallDripleafStep { inner } => inner.0.clone(),
Self::BlockSmithingTableUse { inner } => inner.0.clone(),
Self::BlockSmokerSmoke { inner } => inner.0.clone(),
Self::BlockSnifferEggCrack { inner } => inner.0.clone(),
Self::BlockSnifferEggHatch { inner } => inner.0.clone(),
Self::BlockSnifferEggPlop { inner } => inner.0.clone(),
Self::BlockSnowBreak { inner } => inner.0.clone(),
Self::BlockSnowFall { inner } => inner.0.clone(),
Self::BlockSnowHit { inner } => inner.0.clone(),
Self::BlockSnowPlace { inner } => inner.0.clone(),
Self::BlockSnowStep { inner } => inner.0.clone(),
Self::BlockSoulSandBreak { inner } => inner.0.clone(),
Self::BlockSoulSandFall { inner } => inner.0.clone(),
Self::BlockSoulSandHit { inner } => inner.0.clone(),
Self::BlockSoulSandPlace { inner } => inner.0.clone(),
Self::BlockSoulSandStep { inner } => inner.0.clone(),
Self::BlockSoulSoilBreak { inner } => inner.0.clone(),
Self::BlockSoulSoilFall { inner } => inner.0.clone(),
Self::BlockSoulSoilHit { inner } => inner.0.clone(),
Self::BlockSoulSoilPlace { inner } => inner.0.clone(),
Self::BlockSoulSoilStep { inner } => inner.0.clone(),
Self::BlockSpongeAbsorb { inner } => inner.0.clone(),
Self::BlockSpongeBreak { inner } => inner.0.clone(),
Self::BlockSpongeFall { inner } => inner.0.clone(),
Self::BlockSpongeHit { inner } => inner.0.clone(),
Self::BlockSpongePlace { inner } => inner.0.clone(),
Self::BlockSpongeStep { inner } => inner.0.clone(),
Self::BlockSporeBlossomBreak { inner } => inner.0.clone(),
Self::BlockSporeBlossomFall { inner } => inner.0.clone(),
Self::BlockSporeBlossomHit { inner } => inner.0.clone(),
Self::BlockSporeBlossomPlace { inner } => inner.0.clone(),
Self::BlockSporeBlossomStep { inner } => inner.0.clone(),
Self::BlockStemBreak { inner } => inner.0.clone(),
Self::BlockStemFall { inner } => inner.0.clone(),
Self::BlockStemHit { inner } => inner.0.clone(),
Self::BlockStemPlace { inner } => inner.0.clone(),
Self::BlockStemStep { inner } => inner.0.clone(),
Self::BlockStoneBreak { inner } => inner.0.clone(),
Self::BlockStoneButtonClickOff { inner } => inner.0.clone(),
Self::BlockStoneButtonClickOn { inner } => inner.0.clone(),
Self::BlockStoneFall { inner } => inner.0.clone(),
Self::BlockStoneHit { inner } => inner.0.clone(),
Self::BlockStonePlace { inner } => inner.0.clone(),
Self::BlockStonePressurePlateClickOff { inner } => inner.0.clone(),
Self::BlockStonePressurePlateClickOn { inner } => inner.0.clone(),
Self::BlockStoneStep { inner } => inner.0.clone(),
Self::BlockSuspiciousGravelBreak { inner } => inner.0.clone(),
Self::BlockSuspiciousGravelFall { inner } => inner.0.clone(),
Self::BlockSuspiciousGravelHit { inner } => inner.0.clone(),
Self::BlockSuspiciousGravelPlace { inner } => inner.0.clone(),
Self::BlockSuspiciousGravelStep { inner } => inner.0.clone(),
Self::BlockSuspiciousSandBreak { inner } => inner.0.clone(),
Self::BlockSuspiciousSandFall { inner } => inner.0.clone(),
Self::BlockSuspiciousSandHit { inner } => inner.0.clone(),
Self::BlockSuspiciousSandPlace { inner } => inner.0.clone(),
Self::BlockSuspiciousSandStep { inner } => inner.0.clone(),
Self::BlockSweetBerryBushBreak { inner } => inner.0.clone(),
Self::BlockSweetBerryBushPickBerries { inner } => inner.0.clone(),
Self::BlockSweetBerryBushPlace { inner } => inner.0.clone(),
Self::BlockTrialSpawnerAmbient { inner } => inner.0.clone(),
Self::BlockTrialSpawnerBreak { inner } => inner.0.clone(),
Self::BlockTrialSpawnerCloseShutter { inner } => inner.0.clone(),
Self::BlockTrialSpawnerDetectPlayer { inner } => inner.0.clone(),
Self::BlockTrialSpawnerEjectItem { inner } => inner.0.clone(),
Self::BlockTrialSpawnerFall { inner } => inner.0.clone(),
Self::BlockTrialSpawnerHit { inner } => inner.0.clone(),
Self::BlockTrialSpawnerOpenShutter { inner } => inner.0.clone(),
Self::BlockTrialSpawnerPlace { inner } => inner.0.clone(),
Self::BlockTrialSpawnerSpawnMob { inner } => inner.0.clone(),
Self::BlockTrialSpawnerStep { inner } => inner.0.clone(),
Self::BlockTripwireAttach { inner } => inner.0.clone(),
Self::BlockTripwireClickOff { inner } => inner.0.clone(),
Self::BlockTripwireClickOn { inner } => inner.0.clone(),
Self::BlockTripwireDetach { inner } => inner.0.clone(),
Self::BlockTuffBreak { inner } => inner.0.clone(),
Self::BlockTuffBricksBreak { inner } => inner.0.clone(),
Self::BlockTuffBricksFall { inner } => inner.0.clone(),
Self::BlockTuffBricksHit { inner } => inner.0.clone(),
Self::BlockTuffBricksPlace { inner } => inner.0.clone(),
Self::BlockTuffBricksStep { inner } => inner.0.clone(),
Self::BlockTuffFall { inner } => inner.0.clone(),
Self::BlockTuffHit { inner } => inner.0.clone(),
Self::BlockTuffPlace { inner } => inner.0.clone(),
Self::BlockTuffStep { inner } => inner.0.clone(),
Self::BlockVineBreak { inner } => inner.0.clone(),
Self::BlockVineFall { inner } => inner.0.clone(),
Self::BlockVineHit { inner } => inner.0.clone(),
Self::BlockVinePlace { inner } => inner.0.clone(),
Self::BlockVineStep { inner } => inner.0.clone(),
Self::BlockWartBlockBreak { inner } => inner.0.clone(),
Self::BlockWartBlockFall { inner } => inner.0.clone(),
Self::BlockWartBlockHit { inner } => inner.0.clone(),
Self::BlockWartBlockPlace { inner } => inner.0.clone(),
Self::BlockWartBlockStep { inner } => inner.0.clone(),
Self::BlockWaterAmbient { inner } => inner.0.clone(),
Self::BlockWeepingVinesBreak { inner } => inner.0.clone(),
Self::BlockWeepingVinesFall { inner } => inner.0.clone(),
Self::BlockWeepingVinesHit { inner } => inner.0.clone(),
Self::BlockWeepingVinesPlace { inner } => inner.0.clone(),
Self::BlockWeepingVinesStep { inner } => inner.0.clone(),
Self::BlockWetGrassBreak { inner } => inner.0.clone(),
Self::BlockWetGrassFall { inner } => inner.0.clone(),
Self::BlockWetGrassHit { inner } => inner.0.clone(),
Self::BlockWetGrassPlace { inner } => inner.0.clone(),
Self::BlockWetGrassStep { inner } => inner.0.clone(),
Self::BlockWetSpongeBreak { inner } => inner.0.clone(),
Self::BlockWetSpongeFall { inner } => inner.0.clone(),
Self::BlockWetSpongeHit { inner } => inner.0.clone(),
Self::BlockWetSpongePlace { inner } => inner.0.clone(),
Self::BlockWetSpongeStep { inner } => inner.0.clone(),
Self::BlockWoodenButtonClickOff { inner } => inner.0.clone(),
Self::BlockWoodenButtonClickOn { inner } => inner.0.clone(),
Self::BlockWoodenDoorClose { inner } => inner.0.clone(),
Self::BlockWoodenDoorOpen { inner } => inner.0.clone(),
Self::BlockWoodenPressurePlateClickOff { inner } => inner.0.clone(),
Self::BlockWoodenPressurePlateClickOn { inner } => inner.0.clone(),
Self::BlockWoodenTrapdoorClose { inner } => inner.0.clone(),
Self::BlockWoodenTrapdoorOpen { inner } => inner.0.clone(),
Self::BlockWoodBreak { inner } => inner.0.clone(),
Self::BlockWoodFall { inner } => inner.0.clone(),
Self::BlockWoodHit { inner } => inner.0.clone(),
Self::BlockWoodPlace { inner } => inner.0.clone(),
Self::BlockWoodStep { inner } => inner.0.clone(),
Self::BlockWoolBreak { inner } => inner.0.clone(),
Self::BlockWoolFall { inner } => inner.0.clone(),
Self::BlockWoolHit { inner } => inner.0.clone(),
Self::BlockWoolPlace { inner } => inner.0.clone(),
Self::BlockWoolStep { inner } => inner.0.clone(),
Self::EnchantThornsHit { inner } => inner.0.clone(),
Self::EntityAllayAmbientWithoutItem { inner } => inner.0.clone(),
Self::EntityAllayAmbientWithItem { inner } => inner.0.clone(),
Self::EntityAllayDeath { inner } => inner.0.clone(),
Self::EntityAllayHurt { inner } => inner.0.clone(),
Self::EntityAllayItemGiven { inner } => inner.0.clone(),
Self::EntityAllayItemTaken { inner } => inner.0.clone(),
Self::EntityAllayItemThrown { inner } => inner.0.clone(),
Self::EntityArmorStandBreak { inner } => inner.0.clone(),
Self::EntityArmorStandFall { inner } => inner.0.clone(),
Self::EntityArmorStandHit { inner } => inner.0.clone(),
Self::EntityArmorStandPlace { inner } => inner.0.clone(),
Self::EntityArrowHit { inner } => inner.0.clone(),
Self::EntityArrowHitPlayer { inner } => inner.0.clone(),
Self::EntityArrowShoot { inner } => inner.0.clone(),
Self::EntityAxolotlAttack { inner } => inner.0.clone(),
Self::EntityAxolotlDeath { inner } => inner.0.clone(),
Self::EntityAxolotlHurt { inner } => inner.0.clone(),
Self::EntityAxolotlIdleAir { inner } => inner.0.clone(),
Self::EntityAxolotlIdleWater { inner } => inner.0.clone(),
Self::EntityAxolotlSplash { inner } => inner.0.clone(),
Self::EntityAxolotlSwim { inner } => inner.0.clone(),
Self::EntityBatAmbient { inner } => inner.0.clone(),
Self::EntityBatDeath { inner } => inner.0.clone(),
Self::EntityBatHurt { inner } => inner.0.clone(),
Self::EntityBatLoop { inner } => inner.0.clone(),
Self::EntityBatTakeoff { inner } => inner.0.clone(),
Self::EntityBeeDeath { inner } => inner.0.clone(),
Self::EntityBeeHurt { inner } => inner.0.clone(),
Self::EntityBeeLoop { inner } => inner.0.clone(),
Self::EntityBeeLoopAggressive { inner } => inner.0.clone(),
Self::EntityBeePollinate { inner } => inner.0.clone(),
Self::EntityBeeSting { inner } => inner.0.clone(),
Self::EntityBlazeAmbient { inner } => inner.0.clone(),
Self::EntityBlazeBurn { inner } => inner.0.clone(),
Self::EntityBlazeDeath { inner } => inner.0.clone(),
Self::EntityBlazeHurt { inner } => inner.0.clone(),
Self::EntityBlazeShoot { inner } => inner.0.clone(),
Self::EntityBoatPaddleLand { inner } => inner.0.clone(),
Self::EntityBoatPaddleWater { inner } => inner.0.clone(),
Self::EntityBreezeDeath { inner } => inner.0.clone(),
Self::EntityBreezeHurt { inner } => inner.0.clone(),
Self::EntityBreezeIdleAir { inner } => inner.0.clone(),
Self::EntityBreezeIdleGround { inner } => inner.0.clone(),
Self::EntityBreezeInhale { inner } => inner.0.clone(),
Self::EntityBreezeJump { inner } => inner.0.clone(),
Self::EntityBreezeLand { inner } => inner.0.clone(),
Self::EntityBreezeShoot { inner } => inner.0.clone(),
Self::EntityBreezeSlide { inner } => inner.0.clone(),
Self::EntityCamelAmbient { inner } => inner.0.clone(),
Self::EntityCamelDash { inner } => inner.0.clone(),
Self::EntityCamelDashReady { inner } => inner.0.clone(),
Self::EntityCamelDeath { inner } => inner.0.clone(),
Self::EntityCamelEat { inner } => inner.0.clone(),
Self::EntityCamelHurt { inner } => inner.0.clone(),
Self::EntityCamelSaddle { inner } => inner.0.clone(),
Self::EntityCamelSit { inner } => inner.0.clone(),
Self::EntityCamelStand { inner } => inner.0.clone(),
Self::EntityCamelStep { inner } => inner.0.clone(),
Self::EntityCamelStepSand { inner } => inner.0.clone(),
Self::EntityCatAmbient { inner } => inner.0.clone(),
Self::EntityCatBegForFood { inner } => inner.0.clone(),
Self::EntityCatDeath { inner } => inner.0.clone(),
Self::EntityCatEat { inner } => inner.0.clone(),
Self::EntityCatHiss { inner } => inner.0.clone(),
Self::EntityCatHurt { inner } => inner.0.clone(),
Self::EntityCatPurr { inner } => inner.0.clone(),
Self::EntityCatPurreow { inner } => inner.0.clone(),
Self::EntityCatStrayAmbient { inner } => inner.0.clone(),
Self::EntityChickenAmbient { inner } => inner.0.clone(),
Self::EntityChickenDeath { inner } => inner.0.clone(),
Self::EntityChickenEgg { inner } => inner.0.clone(),
Self::EntityChickenHurt { inner } => inner.0.clone(),
Self::EntityChickenStep { inner } => inner.0.clone(),
Self::EntityCodAmbient { inner } => inner.0.clone(),
Self::EntityCodDeath { inner } => inner.0.clone(),
Self::EntityCodFlop { inner } => inner.0.clone(),
Self::EntityCodHurt { inner } => inner.0.clone(),
Self::EntityCowAmbient { inner } => inner.0.clone(),
Self::EntityCowDeath { inner } => inner.0.clone(),
Self::EntityCowHurt { inner } => inner.0.clone(),
Self::EntityCowMilk { inner } => inner.0.clone(),
Self::EntityCowStep { inner } => inner.0.clone(),
Self::EntityCreeperDeath { inner } => inner.0.clone(),
Self::EntityCreeperHurt { inner } => inner.0.clone(),
Self::EntityCreeperPrimed { inner } => inner.0.clone(),
Self::EntityDolphinAmbient { inner } => inner.0.clone(),
Self::EntityDolphinAmbientWater { inner } => inner.0.clone(),
Self::EntityDolphinAttack { inner } => inner.0.clone(),
Self::EntityDolphinDeath { inner } => inner.0.clone(),
Self::EntityDolphinEat { inner } => inner.0.clone(),
Self::EntityDolphinHurt { inner } => inner.0.clone(),
Self::EntityDolphinJump { inner } => inner.0.clone(),
Self::EntityDolphinPlay { inner } => inner.0.clone(),
Self::EntityDolphinSplash { inner } => inner.0.clone(),
Self::EntityDolphinSwim { inner } => inner.0.clone(),
Self::EntityDonkeyAmbient { inner } => inner.0.clone(),
Self::EntityDonkeyAngry { inner } => inner.0.clone(),
Self::EntityDonkeyChest { inner } => inner.0.clone(),
Self::EntityDonkeyDeath { inner } => inner.0.clone(),
Self::EntityDonkeyEat { inner } => inner.0.clone(),
Self::EntityDonkeyHurt { inner } => inner.0.clone(),
Self::EntityDragonFireballExplode { inner } => inner.0.clone(),
Self::EntityDrownedAmbient { inner } => inner.0.clone(),
Self::EntityDrownedAmbientWater { inner } => inner.0.clone(),
Self::EntityDrownedDeath { inner } => inner.0.clone(),
Self::EntityDrownedDeathWater { inner } => inner.0.clone(),
Self::EntityDrownedHurt { inner } => inner.0.clone(),
Self::EntityDrownedHurtWater { inner } => inner.0.clone(),
Self::EntityDrownedShoot { inner } => inner.0.clone(),
Self::EntityDrownedStep { inner } => inner.0.clone(),
Self::EntityDrownedSwim { inner } => inner.0.clone(),
Self::EntityEggThrow { inner } => inner.0.clone(),
Self::EntityElderGuardianAmbient { inner } => inner.0.clone(),
Self::EntityElderGuardianAmbientLand { inner } => inner.0.clone(),
Self::EntityElderGuardianCurse { inner } => inner.0.clone(),
Self::EntityElderGuardianDeath { inner } => inner.0.clone(),
Self::EntityElderGuardianDeathLand { inner } => inner.0.clone(),
Self::EntityElderGuardianFlop { inner } => inner.0.clone(),
Self::EntityElderGuardianHurt { inner } => inner.0.clone(),
Self::EntityElderGuardianHurtLand { inner } => inner.0.clone(),
Self::EntityEndermanAmbient { inner } => inner.0.clone(),
Self::EntityEndermanDeath { inner } => inner.0.clone(),
Self::EntityEndermanHurt { inner } => inner.0.clone(),
Self::EntityEndermanScream { inner } => inner.0.clone(),
Self::EntityEndermanStare { inner } => inner.0.clone(),
Self::EntityEndermanTeleport { inner } => inner.0.clone(),
Self::EntityEndermiteAmbient { inner } => inner.0.clone(),
Self::EntityEndermiteDeath { inner } => inner.0.clone(),
Self::EntityEndermiteHurt { inner } => inner.0.clone(),
Self::EntityEndermiteStep { inner } => inner.0.clone(),
Self::EntityEnderDragonAmbient { inner } => inner.0.clone(),
Self::EntityEnderDragonDeath { inner } => inner.0.clone(),
Self::EntityEnderDragonFlap { inner } => inner.0.clone(),
Self::EntityEnderDragonGrowl { inner } => inner.0.clone(),
Self::EntityEnderDragonHurt { inner } => inner.0.clone(),
Self::EntityEnderDragonShoot { inner } => inner.0.clone(),
Self::EntityEnderEyeDeath { inner } => inner.0.clone(),
Self::EntityEnderEyeLaunch { inner } => inner.0.clone(),
Self::EntityEnderPearlThrow { inner } => inner.0.clone(),
Self::EntityEvokerAmbient { inner } => inner.0.clone(),
Self::EntityEvokerCastSpell { inner } => inner.0.clone(),
Self::EntityEvokerCelebrate { inner } => inner.0.clone(),
Self::EntityEvokerDeath { inner } => inner.0.clone(),
Self::EntityEvokerFangsAttack { inner } => inner.0.clone(),
Self::EntityEvokerHurt { inner } => inner.0.clone(),
Self::EntityEvokerPrepareAttack { inner } => inner.0.clone(),
Self::EntityEvokerPrepareSummon { inner } => inner.0.clone(),
Self::EntityEvokerPrepareWololo { inner } => inner.0.clone(),
Self::EntityExperienceBottleThrow { inner } => inner.0.clone(),
Self::EntityExperienceOrbPickup { inner } => inner.0.clone(),
Self::EntityFireworkRocketBlast { inner } => inner.0.clone(),
Self::EntityFireworkRocketBlastFar { inner } => inner.0.clone(),
Self::EntityFireworkRocketLargeBlast { inner } => inner.0.clone(),
Self::EntityFireworkRocketLargeBlastFar { inner } => inner.0.clone(),
Self::EntityFireworkRocketLaunch { inner } => inner.0.clone(),
Self::EntityFireworkRocketShoot { inner } => inner.0.clone(),
Self::EntityFireworkRocketTwinkle { inner } => inner.0.clone(),
Self::EntityFireworkRocketTwinkleFar { inner } => inner.0.clone(),
Self::EntityFishingBobberRetrieve { inner } => inner.0.clone(),
Self::EntityFishingBobberSplash { inner } => inner.0.clone(),
Self::EntityFishingBobberThrow { inner } => inner.0.clone(),
Self::EntityFishSwim { inner } => inner.0.clone(),
Self::EntityFoxAggro { inner } => inner.0.clone(),
Self::EntityFoxAmbient { inner } => inner.0.clone(),
Self::EntityFoxBite { inner } => inner.0.clone(),
Self::EntityFoxDeath { inner } => inner.0.clone(),
Self::EntityFoxEat { inner } => inner.0.clone(),
Self::EntityFoxHurt { inner } => inner.0.clone(),
Self::EntityFoxScreech { inner } => inner.0.clone(),
Self::EntityFoxSleep { inner } => inner.0.clone(),
Self::EntityFoxSniff { inner } => inner.0.clone(),
Self::EntityFoxSpit { inner } => inner.0.clone(),
Self::EntityFoxTeleport { inner } => inner.0.clone(),
Self::EntityFrogAmbient { inner } => inner.0.clone(),
Self::EntityFrogDeath { inner } => inner.0.clone(),
Self::EntityFrogEat { inner } => inner.0.clone(),
Self::EntityFrogHurt { inner } => inner.0.clone(),
Self::EntityFrogLaySpawn { inner } => inner.0.clone(),
Self::EntityFrogLongJump { inner } => inner.0.clone(),
Self::EntityFrogStep { inner } => inner.0.clone(),
Self::EntityFrogTongue { inner } => inner.0.clone(),
Self::EntityGenericBigFall { inner } => inner.0.clone(),
Self::EntityGenericBurn { inner } => inner.0.clone(),
Self::EntityGenericDeath { inner } => inner.0.clone(),
Self::EntityGenericDrink { inner } => inner.0.clone(),
Self::EntityGenericEat { inner } => inner.0.clone(),
Self::EntityGenericExplode { inner } => inner.0.clone(),
Self::EntityGenericExtinguishFire { inner } => inner.0.clone(),
Self::EntityGenericHurt { inner } => inner.0.clone(),
Self::EntityGenericSmallFall { inner } => inner.0.clone(),
Self::EntityGenericSplash { inner } => inner.0.clone(),
Self::EntityGenericSwim { inner } => inner.0.clone(),
Self::EntityGenericWindBurst { inner } => inner.0.clone(),
Self::EntityGhastAmbient { inner } => inner.0.clone(),
Self::EntityGhastDeath { inner } => inner.0.clone(),
Self::EntityGhastHurt { inner } => inner.0.clone(),
Self::EntityGhastScream { inner } => inner.0.clone(),
Self::EntityGhastShoot { inner } => inner.0.clone(),
Self::EntityGhastWarn { inner } => inner.0.clone(),
Self::EntityGlowItemFrameAddItem { inner } => inner.0.clone(),
Self::EntityGlowItemFrameBreak { inner } => inner.0.clone(),
Self::EntityGlowItemFramePlace { inner } => inner.0.clone(),
Self::EntityGlowItemFrameRemoveItem { inner } => inner.0.clone(),
Self::EntityGlowItemFrameRotateItem { inner } => inner.0.clone(),
Self::EntityGlowSquidAmbient { inner } => inner.0.clone(),
Self::EntityGlowSquidDeath { inner } => inner.0.clone(),
Self::EntityGlowSquidHurt { inner } => inner.0.clone(),
Self::EntityGlowSquidSquirt { inner } => inner.0.clone(),
Self::EntityGoatAmbient { inner } => inner.0.clone(),
Self::EntityGoatDeath { inner } => inner.0.clone(),
Self::EntityGoatEat { inner } => inner.0.clone(),
Self::EntityGoatHornBreak { inner } => inner.0.clone(),
Self::EntityGoatHurt { inner } => inner.0.clone(),
Self::EntityGoatLongJump { inner } => inner.0.clone(),
Self::EntityGoatMilk { inner } => inner.0.clone(),
Self::EntityGoatPrepareRam { inner } => inner.0.clone(),
Self::EntityGoatRamImpact { inner } => inner.0.clone(),
Self::EntityGoatScreamingAmbient { inner } => inner.0.clone(),
Self::EntityGoatScreamingDeath { inner } => inner.0.clone(),
Self::EntityGoatScreamingEat { inner } => inner.0.clone(),
Self::EntityGoatScreamingHornBreak { inner } => inner.0.clone(),
Self::EntityGoatScreamingHurt { inner } => inner.0.clone(),
Self::EntityGoatScreamingLongJump { inner } => inner.0.clone(),
Self::EntityGoatScreamingMilk { inner } => inner.0.clone(),
Self::EntityGoatScreamingPrepareRam { inner } => inner.0.clone(),
Self::EntityGoatScreamingRamImpact { inner } => inner.0.clone(),
Self::EntityGoatStep { inner } => inner.0.clone(),
Self::EntityGuardianAmbient { inner } => inner.0.clone(),
Self::EntityGuardianAmbientLand { inner } => inner.0.clone(),
Self::EntityGuardianAttack { inner } => inner.0.clone(),
Self::EntityGuardianDeath { inner } => inner.0.clone(),
Self::EntityGuardianDeathLand { inner } => inner.0.clone(),
Self::EntityGuardianFlop { inner } => inner.0.clone(),
Self::EntityGuardianHurt { inner } => inner.0.clone(),
Self::EntityGuardianHurtLand { inner } => inner.0.clone(),
Self::EntityHoglinAmbient { inner } => inner.0.clone(),
Self::EntityHoglinAngry { inner } => inner.0.clone(),
Self::EntityHoglinAttack { inner } => inner.0.clone(),
Self::EntityHoglinConvertedToZombified { inner } => inner.0.clone(),
Self::EntityHoglinDeath { inner } => inner.0.clone(),
Self::EntityHoglinHurt { inner } => inner.0.clone(),
Self::EntityHoglinRetreat { inner } => inner.0.clone(),
Self::EntityHoglinStep { inner } => inner.0.clone(),
Self::EntityHorseAmbient { inner } => inner.0.clone(),
Self::EntityHorseAngry { inner } => inner.0.clone(),
Self::EntityHorseArmor { inner } => inner.0.clone(),
Self::EntityHorseBreathe { inner } => inner.0.clone(),
Self::EntityHorseDeath { inner } => inner.0.clone(),
Self::EntityHorseEat { inner } => inner.0.clone(),
Self::EntityHorseGallop { inner } => inner.0.clone(),
Self::EntityHorseHurt { inner } => inner.0.clone(),
Self::EntityHorseJump { inner } => inner.0.clone(),
Self::EntityHorseLand { inner } => inner.0.clone(),
Self::EntityHorseSaddle { inner } => inner.0.clone(),
Self::EntityHorseStep { inner } => inner.0.clone(),
Self::EntityHorseStepWood { inner } => inner.0.clone(),
Self::EntityHostileBigFall { inner } => inner.0.clone(),
Self::EntityHostileDeath { inner } => inner.0.clone(),
Self::EntityHostileHurt { inner } => inner.0.clone(),
Self::EntityHostileSmallFall { inner } => inner.0.clone(),
Self::EntityHostileSplash { inner } => inner.0.clone(),
Self::EntityHostileSwim { inner } => inner.0.clone(),
Self::EntityHuskAmbient { inner } => inner.0.clone(),
Self::EntityHuskConvertedToZombie { inner } => inner.0.clone(),
Self::EntityHuskDeath { inner } => inner.0.clone(),
Self::EntityHuskHurt { inner } => inner.0.clone(),
Self::EntityHuskStep { inner } => inner.0.clone(),
Self::EntityIllusionerAmbient { inner } => inner.0.clone(),
Self::EntityIllusionerCastSpell { inner } => inner.0.clone(),
Self::EntityIllusionerDeath { inner } => inner.0.clone(),
Self::EntityIllusionerHurt { inner } => inner.0.clone(),
Self::EntityIllusionerMirrorMove { inner } => inner.0.clone(),
Self::EntityIllusionerPrepareBlindness { inner } => inner.0.clone(),
Self::EntityIllusionerPrepareMirror { inner } => inner.0.clone(),
Self::EntityIronGolemAttack { inner } => inner.0.clone(),
Self::EntityIronGolemDamage { inner } => inner.0.clone(),
Self::EntityIronGolemDeath { inner } => inner.0.clone(),
Self::EntityIronGolemHurt { inner } => inner.0.clone(),
Self::EntityIronGolemRepair { inner } => inner.0.clone(),
Self::EntityIronGolemStep { inner } => inner.0.clone(),
Self::EntityItemBreak { inner } => inner.0.clone(),
Self::EntityItemFrameAddItem { inner } => inner.0.clone(),
Self::EntityItemFrameBreak { inner } => inner.0.clone(),
Self::EntityItemFramePlace { inner } => inner.0.clone(),
Self::EntityItemFrameRemoveItem { inner } => inner.0.clone(),
Self::EntityItemFrameRotateItem { inner } => inner.0.clone(),
Self::EntityItemPickup { inner } => inner.0.clone(),
Self::EntityLeashKnotBreak { inner } => inner.0.clone(),
Self::EntityLeashKnotPlace { inner } => inner.0.clone(),
Self::EntityLightningBoltImpact { inner } => inner.0.clone(),
Self::EntityLightningBoltThunder { inner } => inner.0.clone(),
Self::EntityLingeringPotionThrow { inner } => inner.0.clone(),
Self::EntityLlamaAmbient { inner } => inner.0.clone(),
Self::EntityLlamaAngry { inner } => inner.0.clone(),
Self::EntityLlamaChest { inner } => inner.0.clone(),
Self::EntityLlamaDeath { inner } => inner.0.clone(),
Self::EntityLlamaEat { inner } => inner.0.clone(),
Self::EntityLlamaHurt { inner } => inner.0.clone(),
Self::EntityLlamaSpit { inner } => inner.0.clone(),
Self::EntityLlamaStep { inner } => inner.0.clone(),
Self::EntityLlamaSwag { inner } => inner.0.clone(),
Self::EntityMagmaCubeDeath { inner } => inner.0.clone(),
Self::EntityMagmaCubeDeathSmall { inner } => inner.0.clone(),
Self::EntityMagmaCubeHurt { inner } => inner.0.clone(),
Self::EntityMagmaCubeHurtSmall { inner } => inner.0.clone(),
Self::EntityMagmaCubeJump { inner } => inner.0.clone(),
Self::EntityMagmaCubeSquish { inner } => inner.0.clone(),
Self::EntityMagmaCubeSquishSmall { inner } => inner.0.clone(),
Self::EntityMinecartInside { inner } => inner.0.clone(),
Self::EntityMinecartInsideUnderwater { inner } => inner.0.clone(),
Self::EntityMinecartRiding { inner } => inner.0.clone(),
Self::EntityMooshroomConvert { inner } => inner.0.clone(),
Self::EntityMooshroomEat { inner } => inner.0.clone(),
Self::EntityMooshroomMilk { inner } => inner.0.clone(),
Self::EntityMooshroomShear { inner } => inner.0.clone(),
Self::EntityMooshroomSuspiciousMilk { inner } => inner.0.clone(),
Self::EntityMuleAmbient { inner } => inner.0.clone(),
Self::EntityMuleAngry { inner } => inner.0.clone(),
Self::EntityMuleChest { inner } => inner.0.clone(),
Self::EntityMuleDeath { inner } => inner.0.clone(),
Self::EntityMuleEat { inner } => inner.0.clone(),
Self::EntityMuleHurt { inner } => inner.0.clone(),
Self::EntityOcelotAmbient { inner } => inner.0.clone(),
Self::EntityOcelotDeath { inner } => inner.0.clone(),
Self::EntityOcelotHurt { inner } => inner.0.clone(),
Self::EntityPaintingBreak { inner } => inner.0.clone(),
Self::EntityPaintingPlace { inner } => inner.0.clone(),
Self::EntityPandaAggressiveAmbient { inner } => inner.0.clone(),
Self::EntityPandaAmbient { inner } => inner.0.clone(),
Self::EntityPandaBite { inner } => inner.0.clone(),
Self::EntityPandaCantBreed { inner } => inner.0.clone(),
Self::EntityPandaDeath { inner } => inner.0.clone(),
Self::EntityPandaEat { inner } => inner.0.clone(),
Self::EntityPandaHurt { inner } => inner.0.clone(),
Self::EntityPandaPreSneeze { inner } => inner.0.clone(),
Self::EntityPandaSneeze { inner } => inner.0.clone(),
Self::EntityPandaStep { inner } => inner.0.clone(),
Self::EntityPandaWorriedAmbient { inner } => inner.0.clone(),
Self::EntityParrotAmbient { inner } => inner.0.clone(),
Self::EntityParrotDeath { inner } => inner.0.clone(),
Self::EntityParrotEat { inner } => inner.0.clone(),
Self::EntityParrotFly { inner } => inner.0.clone(),
Self::EntityParrotHurt { inner } => inner.0.clone(),
Self::EntityParrotImitateBlaze { inner } => inner.0.clone(),
Self::EntityParrotImitateBreeze { inner } => inner.0.clone(),
Self::EntityParrotImitateCreeper { inner } => inner.0.clone(),
Self::EntityParrotImitateDrowned { inner } => inner.0.clone(),
Self::EntityParrotImitateElderGuardian { inner } => inner.0.clone(),
Self::EntityParrotImitateEndermite { inner } => inner.0.clone(),
Self::EntityParrotImitateEnderDragon { inner } => inner.0.clone(),
Self::EntityParrotImitateEvoker { inner } => inner.0.clone(),
Self::EntityParrotImitateGhast { inner } => inner.0.clone(),
Self::EntityParrotImitateGuardian { inner } => inner.0.clone(),
Self::EntityParrotImitateHoglin { inner } => inner.0.clone(),
Self::EntityParrotImitateHusk { inner } => inner.0.clone(),
Self::EntityParrotImitateIllusioner { inner } => inner.0.clone(),
Self::EntityParrotImitateMagmaCube { inner } => inner.0.clone(),
Self::EntityParrotImitatePhantom { inner } => inner.0.clone(),
Self::EntityParrotImitatePiglin { inner } => inner.0.clone(),
Self::EntityParrotImitatePiglinBrute { inner } => inner.0.clone(),
Self::EntityParrotImitatePillager { inner } => inner.0.clone(),
Self::EntityParrotImitateRavager { inner } => inner.0.clone(),
Self::EntityParrotImitateShulker { inner } => inner.0.clone(),
Self::EntityParrotImitateSilverfish { inner } => inner.0.clone(),
Self::EntityParrotImitateSkeleton { inner } => inner.0.clone(),
Self::EntityParrotImitateSlime { inner } => inner.0.clone(),
Self::EntityParrotImitateSpider { inner } => inner.0.clone(),
Self::EntityParrotImitateStray { inner } => inner.0.clone(),
Self::EntityParrotImitateVex { inner } => inner.0.clone(),
Self::EntityParrotImitateVindicator { inner } => inner.0.clone(),
Self::EntityParrotImitateWarden { inner } => inner.0.clone(),
Self::EntityParrotImitateWitch { inner } => inner.0.clone(),
Self::EntityParrotImitateWither { inner } => inner.0.clone(),
Self::EntityParrotImitateWitherSkeleton { inner } => inner.0.clone(),
Self::EntityParrotImitateZoglin { inner } => inner.0.clone(),
Self::EntityParrotImitateZombie { inner } => inner.0.clone(),
Self::EntityParrotImitateZombieVillager { inner } => inner.0.clone(),
Self::EntityParrotStep { inner } => inner.0.clone(),
Self::EntityPhantomAmbient { inner } => inner.0.clone(),
Self::EntityPhantomBite { inner } => inner.0.clone(),
Self::EntityPhantomDeath { inner } => inner.0.clone(),
Self::EntityPhantomFlap { inner } => inner.0.clone(),
Self::EntityPhantomHurt { inner } => inner.0.clone(),
Self::EntityPhantomSwoop { inner } => inner.0.clone(),
Self::EntityPiglinAdmiringItem { inner } => inner.0.clone(),
Self::EntityPiglinAmbient { inner } => inner.0.clone(),
Self::EntityPiglinAngry { inner } => inner.0.clone(),
Self::EntityPiglinBruteAmbient { inner } => inner.0.clone(),
Self::EntityPiglinBruteAngry { inner } => inner.0.clone(),
Self::EntityPiglinBruteConvertedToZombified { inner } => inner.0.clone(),
Self::EntityPiglinBruteDeath { inner } => inner.0.clone(),
Self::EntityPiglinBruteHurt { inner } => inner.0.clone(),
Self::EntityPiglinBruteStep { inner } => inner.0.clone(),
Self::EntityPiglinCelebrate { inner } => inner.0.clone(),
Self::EntityPiglinConvertedToZombified { inner } => inner.0.clone(),
Self::EntityPiglinDeath { inner } => inner.0.clone(),
Self::EntityPiglinHurt { inner } => inner.0.clone(),
Self::EntityPiglinJealous { inner } => inner.0.clone(),
Self::EntityPiglinRetreat { inner } => inner.0.clone(),
Self::EntityPiglinStep { inner } => inner.0.clone(),
Self::EntityPigAmbient { inner } => inner.0.clone(),
Self::EntityPigDeath { inner } => inner.0.clone(),
Self::EntityPigHurt { inner } => inner.0.clone(),
Self::EntityPigSaddle { inner } => inner.0.clone(),
Self::EntityPigStep { inner } => inner.0.clone(),
Self::EntityPillagerAmbient { inner } => inner.0.clone(),
Self::EntityPillagerCelebrate { inner } => inner.0.clone(),
Self::EntityPillagerDeath { inner } => inner.0.clone(),
Self::EntityPillagerHurt { inner } => inner.0.clone(),
Self::EntityPlayerAttackCrit { inner } => inner.0.clone(),
Self::EntityPlayerAttackKnockback { inner } => inner.0.clone(),
Self::EntityPlayerAttackNodamage { inner } => inner.0.clone(),
Self::EntityPlayerAttackStrong { inner } => inner.0.clone(),
Self::EntityPlayerAttackSweep { inner } => inner.0.clone(),
Self::EntityPlayerAttackWeak { inner } => inner.0.clone(),
Self::EntityPlayerBigFall { inner } => inner.0.clone(),
Self::EntityPlayerBreath { inner } => inner.0.clone(),
Self::EntityPlayerBurp { inner } => inner.0.clone(),
Self::EntityPlayerDeath { inner } => inner.0.clone(),
Self::EntityPlayerHurt { inner } => inner.0.clone(),
Self::EntityPlayerHurtDrown { inner } => inner.0.clone(),
Self::EntityPlayerHurtFreeze { inner } => inner.0.clone(),
Self::EntityPlayerHurtOnFire { inner } => inner.0.clone(),
Self::EntityPlayerHurtSweetBerryBush { inner } => inner.0.clone(),
Self::EntityPlayerLevelup { inner } => inner.0.clone(),
Self::EntityPlayerSmallFall { inner } => inner.0.clone(),
Self::EntityPlayerSplash { inner } => inner.0.clone(),
Self::EntityPlayerSplashHighSpeed { inner } => inner.0.clone(),
Self::EntityPlayerSwim { inner } => inner.0.clone(),
Self::EntityPlayerTeleport { inner } => inner.0.clone(),
Self::EntityPolarBearAmbient { inner } => inner.0.clone(),
Self::EntityPolarBearAmbientBaby { inner } => inner.0.clone(),
Self::EntityPolarBearDeath { inner } => inner.0.clone(),
Self::EntityPolarBearHurt { inner } => inner.0.clone(),
Self::EntityPolarBearStep { inner } => inner.0.clone(),
Self::EntityPolarBearWarning { inner } => inner.0.clone(),
Self::EntityPufferFishAmbient { inner } => inner.0.clone(),
Self::EntityPufferFishBlowOut { inner } => inner.0.clone(),
Self::EntityPufferFishBlowUp { inner } => inner.0.clone(),
Self::EntityPufferFishDeath { inner } => inner.0.clone(),
Self::EntityPufferFishFlop { inner } => inner.0.clone(),
Self::EntityPufferFishHurt { inner } => inner.0.clone(),
Self::EntityPufferFishSting { inner } => inner.0.clone(),
Self::EntityRabbitAmbient { inner } => inner.0.clone(),
Self::EntityRabbitAttack { inner } => inner.0.clone(),
Self::EntityRabbitDeath { inner } => inner.0.clone(),
Self::EntityRabbitHurt { inner } => inner.0.clone(),
Self::EntityRabbitJump { inner } => inner.0.clone(),
Self::EntityRavagerAmbient { inner } => inner.0.clone(),
Self::EntityRavagerAttack { inner } => inner.0.clone(),
Self::EntityRavagerCelebrate { inner } => inner.0.clone(),
Self::EntityRavagerDeath { inner } => inner.0.clone(),
Self::EntityRavagerHurt { inner } => inner.0.clone(),
Self::EntityRavagerRoar { inner } => inner.0.clone(),
Self::EntityRavagerStep { inner } => inner.0.clone(),
Self::EntityRavagerStunned { inner } => inner.0.clone(),
Self::EntitySalmonAmbient { inner } => inner.0.clone(),
Self::EntitySalmonDeath { inner } => inner.0.clone(),
Self::EntitySalmonFlop { inner } => inner.0.clone(),
Self::EntitySalmonHurt { inner } => inner.0.clone(),
Self::EntitySheepAmbient { inner } => inner.0.clone(),
Self::EntitySheepDeath { inner } => inner.0.clone(),
Self::EntitySheepHurt { inner } => inner.0.clone(),
Self::EntitySheepShear { inner } => inner.0.clone(),
Self::EntitySheepStep { inner } => inner.0.clone(),
Self::EntityShulkerAmbient { inner } => inner.0.clone(),
Self::EntityShulkerBulletHit { inner } => inner.0.clone(),
Self::EntityShulkerBulletHurt { inner } => inner.0.clone(),
Self::EntityShulkerClose { inner } => inner.0.clone(),
Self::EntityShulkerDeath { inner } => inner.0.clone(),
Self::EntityShulkerHurt { inner } => inner.0.clone(),
Self::EntityShulkerHurtClosed { inner } => inner.0.clone(),
Self::EntityShulkerOpen { inner } => inner.0.clone(),
Self::EntityShulkerShoot { inner } => inner.0.clone(),
Self::EntityShulkerTeleport { inner } => inner.0.clone(),
Self::EntitySilverfishAmbient { inner } => inner.0.clone(),
Self::EntitySilverfishDeath { inner } => inner.0.clone(),
Self::EntitySilverfishHurt { inner } => inner.0.clone(),
Self::EntitySilverfishStep { inner } => inner.0.clone(),
Self::EntitySkeletonAmbient { inner } => inner.0.clone(),
Self::EntitySkeletonConvertedToStray { inner } => inner.0.clone(),
Self::EntitySkeletonDeath { inner } => inner.0.clone(),
Self::EntitySkeletonHorseAmbient { inner } => inner.0.clone(),
Self::EntitySkeletonHorseAmbientWater { inner } => inner.0.clone(),
Self::EntitySkeletonHorseDeath { inner } => inner.0.clone(),
Self::EntitySkeletonHorseGallopWater { inner } => inner.0.clone(),
Self::EntitySkeletonHorseHurt { inner } => inner.0.clone(),
Self::EntitySkeletonHorseJumpWater { inner } => inner.0.clone(),
Self::EntitySkeletonHorseStepWater { inner } => inner.0.clone(),
Self::EntitySkeletonHorseSwim { inner } => inner.0.clone(),
Self::EntitySkeletonHurt { inner } => inner.0.clone(),
Self::EntitySkeletonShoot { inner } => inner.0.clone(),
Self::EntitySkeletonStep { inner } => inner.0.clone(),
Self::EntitySlimeAttack { inner } => inner.0.clone(),
Self::EntitySlimeDeath { inner } => inner.0.clone(),
Self::EntitySlimeDeathSmall { inner } => inner.0.clone(),
Self::EntitySlimeHurt { inner } => inner.0.clone(),
Self::EntitySlimeHurtSmall { inner } => inner.0.clone(),
Self::EntitySlimeJump { inner } => inner.0.clone(),
Self::EntitySlimeJumpSmall { inner } => inner.0.clone(),
Self::EntitySlimeSquish { inner } => inner.0.clone(),
Self::EntitySlimeSquishSmall { inner } => inner.0.clone(),
Self::EntitySnifferDeath { inner } => inner.0.clone(),
Self::EntitySnifferDigging { inner } => inner.0.clone(),
Self::EntitySnifferDiggingStop { inner } => inner.0.clone(),
Self::EntitySnifferDropSeed { inner } => inner.0.clone(),
Self::EntitySnifferEat { inner } => inner.0.clone(),
Self::EntitySnifferHappy { inner } => inner.0.clone(),
Self::EntitySnifferHurt { inner } => inner.0.clone(),
Self::EntitySnifferIdle { inner } => inner.0.clone(),
Self::EntitySnifferScenting { inner } => inner.0.clone(),
Self::EntitySnifferSearching { inner } => inner.0.clone(),
Self::EntitySnifferSniffing { inner } => inner.0.clone(),
Self::EntitySnifferStep { inner } => inner.0.clone(),
Self::EntitySnowballThrow { inner } => inner.0.clone(),
Self::EntitySnowGolemAmbient { inner } => inner.0.clone(),
Self::EntitySnowGolemDeath { inner } => inner.0.clone(),
Self::EntitySnowGolemHurt { inner } => inner.0.clone(),
Self::EntitySnowGolemShear { inner } => inner.0.clone(),
Self::EntitySnowGolemShoot { inner } => inner.0.clone(),
Self::EntitySpiderAmbient { inner } => inner.0.clone(),
Self::EntitySpiderDeath { inner } => inner.0.clone(),
Self::EntitySpiderHurt { inner } => inner.0.clone(),
Self::EntitySpiderStep { inner } => inner.0.clone(),
Self::EntitySplashPotionBreak { inner } => inner.0.clone(),
Self::EntitySplashPotionThrow { inner } => inner.0.clone(),
Self::EntitySquidAmbient { inner } => inner.0.clone(),
Self::EntitySquidDeath { inner } => inner.0.clone(),
Self::EntitySquidHurt { inner } => inner.0.clone(),
Self::EntitySquidSquirt { inner } => inner.0.clone(),
Self::EntityStrayAmbient { inner } => inner.0.clone(),
Self::EntityStrayDeath { inner } => inner.0.clone(),
Self::EntityStrayHurt { inner } => inner.0.clone(),
Self::EntityStrayStep { inner } => inner.0.clone(),
Self::EntityStriderAmbient { inner } => inner.0.clone(),
Self::EntityStriderDeath { inner } => inner.0.clone(),
Self::EntityStriderEat { inner } => inner.0.clone(),
Self::EntityStriderHappy { inner } => inner.0.clone(),
Self::EntityStriderHurt { inner } => inner.0.clone(),
Self::EntityStriderRetreat { inner } => inner.0.clone(),
Self::EntityStriderSaddle { inner } => inner.0.clone(),
Self::EntityStriderStep { inner } => inner.0.clone(),
Self::EntityStriderStepLava { inner } => inner.0.clone(),
Self::EntityTadpoleDeath { inner } => inner.0.clone(),
Self::EntityTadpoleFlop { inner } => inner.0.clone(),
Self::EntityTadpoleGrowUp { inner } => inner.0.clone(),
Self::EntityTadpoleHurt { inner } => inner.0.clone(),
Self::EntityTntPrimed { inner } => inner.0.clone(),
Self::EntityTropicalFishAmbient { inner } => inner.0.clone(),
Self::EntityTropicalFishDeath { inner } => inner.0.clone(),
Self::EntityTropicalFishFlop { inner } => inner.0.clone(),
Self::EntityTropicalFishHurt { inner } => inner.0.clone(),
Self::EntityTurtleAmbientLand { inner } => inner.0.clone(),
Self::EntityTurtleDeath { inner } => inner.0.clone(),
Self::EntityTurtleDeathBaby { inner } => inner.0.clone(),
Self::EntityTurtleEggBreak { inner } => inner.0.clone(),
Self::EntityTurtleEggCrack { inner } => inner.0.clone(),
Self::EntityTurtleEggHatch { inner } => inner.0.clone(),
Self::EntityTurtleHurt { inner } => inner.0.clone(),
Self::EntityTurtleHurtBaby { inner } => inner.0.clone(),
Self::EntityTurtleLayEgg { inner } => inner.0.clone(),
Self::EntityTurtleShamble { inner } => inner.0.clone(),
Self::EntityTurtleShambleBaby { inner } => inner.0.clone(),
Self::EntityTurtleSwim { inner } => inner.0.clone(),
Self::EntityVexAmbient { inner } => inner.0.clone(),
Self::EntityVexCharge { inner } => inner.0.clone(),
Self::EntityVexDeath { inner } => inner.0.clone(),
Self::EntityVexHurt { inner } => inner.0.clone(),
Self::EntityVillagerAmbient { inner } => inner.0.clone(),
Self::EntityVillagerCelebrate { inner } => inner.0.clone(),
Self::EntityVillagerDeath { inner } => inner.0.clone(),
Self::EntityVillagerHurt { inner } => inner.0.clone(),
Self::EntityVillagerNo { inner } => inner.0.clone(),
Self::EntityVillagerTrade { inner } => inner.0.clone(),
Self::EntityVillagerWorkArmorer { inner } => inner.0.clone(),
Self::EntityVillagerWorkButcher { inner } => inner.0.clone(),
Self::EntityVillagerWorkCartographer { inner } => inner.0.clone(),
Self::EntityVillagerWorkCleric { inner } => inner.0.clone(),
Self::EntityVillagerWorkFarmer { inner } => inner.0.clone(),
Self::EntityVillagerWorkFisherman { inner } => inner.0.clone(),
Self::EntityVillagerWorkFletcher { inner } => inner.0.clone(),
Self::EntityVillagerWorkLeatherworker { inner } => inner.0.clone(),
Self::EntityVillagerWorkLibrarian { inner } => inner.0.clone(),
Self::EntityVillagerWorkMason { inner } => inner.0.clone(),
Self::EntityVillagerWorkShepherd { inner } => inner.0.clone(),
Self::EntityVillagerWorkToolsmith { inner } => inner.0.clone(),
Self::EntityVillagerWorkWeaponsmith { inner } => inner.0.clone(),
Self::EntityVillagerYes { inner } => inner.0.clone(),
Self::EntityVindicatorAmbient { inner } => inner.0.clone(),
Self::EntityVindicatorCelebrate { inner } => inner.0.clone(),
Self::EntityVindicatorDeath { inner } => inner.0.clone(),
Self::EntityVindicatorHurt { inner } => inner.0.clone(),
Self::EntityWanderingTraderAmbient { inner } => inner.0.clone(),
Self::EntityWanderingTraderDeath { inner } => inner.0.clone(),
Self::EntityWanderingTraderDisappeared { inner } => inner.0.clone(),
Self::EntityWanderingTraderDrinkMilk { inner } => inner.0.clone(),
Self::EntityWanderingTraderDrinkPotion { inner } => inner.0.clone(),
Self::EntityWanderingTraderHurt { inner } => inner.0.clone(),
Self::EntityWanderingTraderNo { inner } => inner.0.clone(),
Self::EntityWanderingTraderReappeared { inner } => inner.0.clone(),
Self::EntityWanderingTraderTrade { inner } => inner.0.clone(),
Self::EntityWanderingTraderYes { inner } => inner.0.clone(),
Self::EntityWardenAgitated { inner } => inner.0.clone(),
Self::EntityWardenAmbient { inner } => inner.0.clone(),
Self::EntityWardenAngry { inner } => inner.0.clone(),
Self::EntityWardenAttackImpact { inner } => inner.0.clone(),
Self::EntityWardenDeath { inner } => inner.0.clone(),
Self::EntityWardenDig { inner } => inner.0.clone(),
Self::EntityWardenEmerge { inner } => inner.0.clone(),
Self::EntityWardenHeartbeat { inner } => inner.0.clone(),
Self::EntityWardenHurt { inner } => inner.0.clone(),
Self::EntityWardenListening { inner } => inner.0.clone(),
Self::EntityWardenListeningAngry { inner } => inner.0.clone(),
Self::EntityWardenNearbyClose { inner } => inner.0.clone(),
Self::EntityWardenNearbyCloser { inner } => inner.0.clone(),
Self::EntityWardenNearbyClosest { inner } => inner.0.clone(),
Self::EntityWardenRoar { inner } => inner.0.clone(),
Self::EntityWardenSniff { inner } => inner.0.clone(),
Self::EntityWardenSonicBoom { inner } => inner.0.clone(),
Self::EntityWardenSonicCharge { inner } => inner.0.clone(),
Self::EntityWardenStep { inner } => inner.0.clone(),
Self::EntityWardenTendrilClicks { inner } => inner.0.clone(),
Self::EntityWitchAmbient { inner } => inner.0.clone(),
Self::EntityWitchCelebrate { inner } => inner.0.clone(),
Self::EntityWitchDeath { inner } => inner.0.clone(),
Self::EntityWitchDrink { inner } => inner.0.clone(),
Self::EntityWitchHurt { inner } => inner.0.clone(),
Self::EntityWitchThrow { inner } => inner.0.clone(),
Self::EntityWitherAmbient { inner } => inner.0.clone(),
Self::EntityWitherBreakBlock { inner } => inner.0.clone(),
Self::EntityWitherDeath { inner } => inner.0.clone(),
Self::EntityWitherHurt { inner } => inner.0.clone(),
Self::EntityWitherShoot { inner } => inner.0.clone(),
Self::EntityWitherSkeletonAmbient { inner } => inner.0.clone(),
Self::EntityWitherSkeletonDeath { inner } => inner.0.clone(),
Self::EntityWitherSkeletonHurt { inner } => inner.0.clone(),
Self::EntityWitherSkeletonStep { inner } => inner.0.clone(),
Self::EntityWitherSpawn { inner } => inner.0.clone(),
Self::EntityWolfAmbient { inner } => inner.0.clone(),
Self::EntityWolfDeath { inner } => inner.0.clone(),
Self::EntityWolfGrowl { inner } => inner.0.clone(),
Self::EntityWolfHowl { inner } => inner.0.clone(),
Self::EntityWolfHurt { inner } => inner.0.clone(),
Self::EntityWolfPant { inner } => inner.0.clone(),
Self::EntityWolfShake { inner } => inner.0.clone(),
Self::EntityWolfStep { inner } => inner.0.clone(),
Self::EntityWolfWhine { inner } => inner.0.clone(),
Self::EntityZoglinAmbient { inner } => inner.0.clone(),
Self::EntityZoglinAngry { inner } => inner.0.clone(),
Self::EntityZoglinAttack { inner } => inner.0.clone(),
Self::EntityZoglinDeath { inner } => inner.0.clone(),
Self::EntityZoglinHurt { inner } => inner.0.clone(),
Self::EntityZoglinStep { inner } => inner.0.clone(),
Self::EntityZombieAmbient { inner } => inner.0.clone(),
Self::EntityZombieAttackIronDoor { inner } => inner.0.clone(),
Self::EntityZombieAttackWoodenDoor { inner } => inner.0.clone(),
Self::EntityZombieBreakWoodenDoor { inner } => inner.0.clone(),
Self::EntityZombieConvertedToDrowned { inner } => inner.0.clone(),
Self::EntityZombieDeath { inner } => inner.0.clone(),
Self::EntityZombieDestroyEgg { inner } => inner.0.clone(),
Self::EntityZombieHorseAmbient { inner } => inner.0.clone(),
Self::EntityZombieHorseDeath { inner } => inner.0.clone(),
Self::EntityZombieHorseHurt { inner } => inner.0.clone(),
Self::EntityZombieHurt { inner } => inner.0.clone(),
Self::EntityZombieInfect { inner } => inner.0.clone(),
Self::EntityZombieStep { inner } => inner.0.clone(),
Self::EntityZombieVillagerAmbient { inner } => inner.0.clone(),
Self::EntityZombieVillagerConverted { inner } => inner.0.clone(),
Self::EntityZombieVillagerCure { inner } => inner.0.clone(),
Self::EntityZombieVillagerDeath { inner } => inner.0.clone(),
Self::EntityZombieVillagerHurt { inner } => inner.0.clone(),
Self::EntityZombieVillagerStep { inner } => inner.0.clone(),
Self::EntityZombifiedPiglinAmbient { inner } => inner.0.clone(),
Self::EntityZombifiedPiglinAngry { inner } => inner.0.clone(),
Self::EntityZombifiedPiglinDeath { inner } => inner.0.clone(),
Self::EntityZombifiedPiglinHurt { inner } => inner.0.clone(),
Self::EventRaidHorn { inner } => inner.0.clone(),
Self::IntentionallyEmpty { inner } => inner.0.clone(),
Self::ItemArmorEquipChain { inner } => inner.0.clone(),
Self::ItemArmorEquipDiamond { inner } => inner.0.clone(),
Self::ItemArmorEquipElytra { inner } => inner.0.clone(),
Self::ItemArmorEquipGeneric { inner } => inner.0.clone(),
Self::ItemArmorEquipGold { inner } => inner.0.clone(),
Self::ItemArmorEquipIron { inner } => inner.0.clone(),
Self::ItemArmorEquipLeather { inner } => inner.0.clone(),
Self::ItemArmorEquipNetherite { inner } => inner.0.clone(),
Self::ItemArmorEquipTurtle { inner } => inner.0.clone(),
Self::ItemAxeScrape { inner } => inner.0.clone(),
Self::ItemAxeStrip { inner } => inner.0.clone(),
Self::ItemAxeWaxOff { inner } => inner.0.clone(),
Self::ItemBoneMealUse { inner } => inner.0.clone(),
Self::ItemBookPageTurn { inner } => inner.0.clone(),
Self::ItemBookPut { inner } => inner.0.clone(),
Self::ItemBottleEmpty { inner } => inner.0.clone(),
Self::ItemBottleFill { inner } => inner.0.clone(),
Self::ItemBottleFillDragonbreath { inner } => inner.0.clone(),
Self::ItemBrushBrushingGeneric { inner } => inner.0.clone(),
Self::ItemBrushBrushingGravel { inner } => inner.0.clone(),
Self::ItemBrushBrushingGravelComplete { inner } => inner.0.clone(),
Self::ItemBrushBrushingSand { inner } => inner.0.clone(),
Self::ItemBrushBrushingSandComplete { inner } => inner.0.clone(),
Self::ItemBucketEmpty { inner } => inner.0.clone(),
Self::ItemBucketEmptyAxolotl { inner } => inner.0.clone(),
Self::ItemBucketEmptyFish { inner } => inner.0.clone(),
Self::ItemBucketEmptyLava { inner } => inner.0.clone(),
Self::ItemBucketEmptyPowderSnow { inner } => inner.0.clone(),
Self::ItemBucketEmptyTadpole { inner } => inner.0.clone(),
Self::ItemBucketFill { inner } => inner.0.clone(),
Self::ItemBucketFillAxolotl { inner } => inner.0.clone(),
Self::ItemBucketFillFish { inner } => inner.0.clone(),
Self::ItemBucketFillLava { inner } => inner.0.clone(),
Self::ItemBucketFillPowderSnow { inner } => inner.0.clone(),
Self::ItemBucketFillTadpole { inner } => inner.0.clone(),
Self::ItemBundleDropContents { inner } => inner.0.clone(),
Self::ItemBundleInsert { inner } => inner.0.clone(),
Self::ItemBundleRemoveOne { inner } => inner.0.clone(),
Self::ItemChorusFruitTeleport { inner } => inner.0.clone(),
Self::ItemCropPlant { inner } => inner.0.clone(),
Self::ItemCrossbowHit { inner } => inner.0.clone(),
Self::ItemCrossbowLoadingEnd { inner } => inner.0.clone(),
Self::ItemCrossbowLoadingMiddle { inner } => inner.0.clone(),
Self::ItemCrossbowLoadingStart { inner } => inner.0.clone(),
Self::ItemCrossbowQuickCharge1 { inner } => inner.0.clone(),
Self::ItemCrossbowQuickCharge2 { inner } => inner.0.clone(),
Self::ItemCrossbowQuickCharge3 { inner } => inner.0.clone(),
Self::ItemCrossbowShoot { inner } => inner.0.clone(),
Self::ItemDyeUse { inner } => inner.0.clone(),
Self::ItemElytraFlying { inner } => inner.0.clone(),
Self::ItemFirechargeUse { inner } => inner.0.clone(),
Self::ItemFlintandsteelUse { inner } => inner.0.clone(),
Self::ItemGlowInkSacUse { inner } => inner.0.clone(),
Self::ItemGoatHornPlay { inner } => inner.0.clone(),
Self::ItemGoatHornSound0 { inner } => inner.0.clone(),
Self::ItemGoatHornSound1 { inner } => inner.0.clone(),
Self::ItemGoatHornSound2 { inner } => inner.0.clone(),
Self::ItemGoatHornSound3 { inner } => inner.0.clone(),
Self::ItemGoatHornSound4 { inner } => inner.0.clone(),
Self::ItemGoatHornSound5 { inner } => inner.0.clone(),
Self::ItemGoatHornSound6 { inner } => inner.0.clone(),
Self::ItemGoatHornSound7 { inner } => inner.0.clone(),
Self::ItemHoeTill { inner } => inner.0.clone(),
Self::ItemHoneycombWaxOn { inner } => inner.0.clone(),
Self::ItemHoneyBottleDrink { inner } => inner.0.clone(),
Self::ItemInkSacUse { inner } => inner.0.clone(),
Self::ItemLodestoneCompassLock { inner } => inner.0.clone(),
Self::ItemNetherWartPlant { inner } => inner.0.clone(),
Self::ItemShieldBlock { inner } => inner.0.clone(),
Self::ItemShieldBreak { inner } => inner.0.clone(),
Self::ItemShovelFlatten { inner } => inner.0.clone(),
Self::ItemSpyglassStopUsing { inner } => inner.0.clone(),
Self::ItemSpyglassUse { inner } => inner.0.clone(),
Self::ItemTotemUse { inner } => inner.0.clone(),
Self::ItemTridentHit { inner } => inner.0.clone(),
Self::ItemTridentHitGround { inner } => inner.0.clone(),
Self::ItemTridentReturn { inner } => inner.0.clone(),
Self::ItemTridentRiptide1 { inner } => inner.0.clone(),
Self::ItemTridentRiptide2 { inner } => inner.0.clone(),
Self::ItemTridentRiptide3 { inner } => inner.0.clone(),
Self::ItemTridentThrow { inner } => inner.0.clone(),
Self::ItemTridentThunder { inner } => inner.0.clone(),
Self::MusicCreative { inner } => inner.0.clone(),
Self::MusicCredits { inner } => inner.0.clone(),
Self::MusicDisc11 { inner } => inner.0.clone(),
Self::MusicDisc13 { inner } => inner.0.clone(),
Self::MusicDisc5 { inner } => inner.0.clone(),
Self::MusicDiscBlocks { inner } => inner.0.clone(),
Self::MusicDiscCat { inner } => inner.0.clone(),
Self::MusicDiscChirp { inner } => inner.0.clone(),
Self::MusicDiscFar { inner } => inner.0.clone(),
Self::MusicDiscMall { inner } => inner.0.clone(),
Self::MusicDiscMellohi { inner } => inner.0.clone(),
Self::MusicDiscOtherside { inner } => inner.0.clone(),
Self::MusicDiscPigstep { inner } => inner.0.clone(),
Self::MusicDiscRelic { inner } => inner.0.clone(),
Self::MusicDiscStal { inner } => inner.0.clone(),
Self::MusicDiscStrad { inner } => inner.0.clone(),
Self::MusicDiscWait { inner } => inner.0.clone(),
Self::MusicDiscWard { inner } => inner.0.clone(),
Self::MusicDragon { inner } => inner.0.clone(),
Self::MusicEnd { inner } => inner.0.clone(),
Self::MusicGame { inner } => inner.0.clone(),
Self::MusicMenu { inner } => inner.0.clone(),
Self::MusicNetherBasaltDeltas { inner } => inner.0.clone(),
Self::MusicNetherCrimsonForest { inner } => inner.0.clone(),
Self::MusicNetherNetherWastes { inner } => inner.0.clone(),
Self::MusicNetherSoulSandValley { inner } => inner.0.clone(),
Self::MusicNetherWarpedForest { inner } => inner.0.clone(),
Self::MusicOverworldBadlands { inner } => inner.0.clone(),
Self::MusicOverworldBambooJungle { inner } => inner.0.clone(),
Self::MusicOverworldCherryGrove { inner } => inner.0.clone(),
Self::MusicOverworldDeepDark { inner } => inner.0.clone(),
Self::MusicOverworldDesert { inner } => inner.0.clone(),
Self::MusicOverworldDripstoneCaves { inner } => inner.0.clone(),
Self::MusicOverworldFlowerForest { inner } => inner.0.clone(),
Self::MusicOverworldForest { inner } => inner.0.clone(),
Self::MusicOverworldFrozenPeaks { inner } => inner.0.clone(),
Self::MusicOverworldGrove { inner } => inner.0.clone(),
Self::MusicOverworldJaggedPeaks { inner } => inner.0.clone(),
Self::MusicOverworldJungle { inner } => inner.0.clone(),
Self::MusicOverworldLushCaves { inner } => inner.0.clone(),
Self::MusicOverworldMeadow { inner } => inner.0.clone(),
Self::MusicOverworldOldGrowthTaiga { inner } => inner.0.clone(),
Self::MusicOverworldSnowySlopes { inner } => inner.0.clone(),
Self::MusicOverworldSparseJungle { inner } => inner.0.clone(),
Self::MusicOverworldStonyPeaks { inner } => inner.0.clone(),
Self::MusicOverworldSwamp { inner } => inner.0.clone(),
Self::MusicUnderWater { inner } => inner.0.clone(),
Self::ParticleSoulEscape { inner } => inner.0.clone(),
Self::UiButtonClick { inner } => inner.0.clone(),
Self::UiCartographyTableTakeResult { inner } => inner.0.clone(),
Self::UiLoomSelectPattern { inner } => inner.0.clone(),
Self::UiLoomTakeResult { inner } => inner.0.clone(),
Self::UiStonecutterSelectRecipe { inner } => inner.0.clone(),
Self::UiStonecutterTakeResult { inner } => inner.0.clone(),
Self::UiToastChallengeComplete { inner } => inner.0.clone(),
Self::UiToastIn { inner } => inner.0.clone(),
Self::UiToastOut { inner } => inner.0.clone(),
Self::WeatherRain { inner } => inner.0.clone(),
Self::WeatherRainAbove { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::AmbientBasaltDeltasAdditions { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientBasaltDeltasLoop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientBasaltDeltasMood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientCave { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientCrimsonForestAdditions { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientCrimsonForestLoop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientCrimsonForestMood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientNetherWastesAdditions { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientNetherWastesLoop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientNetherWastesMood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientSoulSandValleyAdditions { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientSoulSandValleyLoop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientSoulSandValleyMood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientUnderwaterEnter { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientUnderwaterExit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientUnderwaterLoop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientUnderwaterLoopAdditions { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientUnderwaterLoopAdditionsRare { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientUnderwaterLoopAdditionsUltraRare { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientWarpedForestAdditions { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientWarpedForestLoop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AmbientWarpedForestMood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystBlockBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystBlockChime { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystBlockFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystBlockHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystBlockPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystBlockResonate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystBlockStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystClusterBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystClusterFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystClusterHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystClusterPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAmethystClusterStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAncientDebrisBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAncientDebrisFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAncientDebrisHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAncientDebrisPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAncientDebrisStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAnvilBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAnvilDestroy { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAnvilFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAnvilHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAnvilLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAnvilPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAnvilStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAnvilUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAzaleaBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAzaleaFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAzaleaHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAzaleaLeavesBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAzaleaLeavesFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAzaleaLeavesHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAzaleaLeavesPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAzaleaLeavesStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAzaleaPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockAzaleaStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooSaplingBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooSaplingHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooSaplingPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodButtonClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodButtonClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodDoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodDoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodFenceGateClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodFenceGateOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodHangingSignBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodHangingSignFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodHangingSignHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodHangingSignPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodHangingSignStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodPressurePlateClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodPressurePlateClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodTrapdoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBambooWoodTrapdoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBarrelClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBarrelOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBasaltBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBasaltFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBasaltHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBasaltPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBasaltStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBeaconActivate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBeaconAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBeaconDeactivate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBeaconPowerSelect { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBeehiveDrip { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBeehiveEnter { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBeehiveExit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBeehiveShear { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBeehiveWork { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBellResonate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBellUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBigDripleafBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBigDripleafFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBigDripleafHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBigDripleafPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBigDripleafStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBigDripleafTiltDown { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBigDripleafTiltUp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBlastfurnaceFireCrackle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBoneBlockBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBoneBlockFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBoneBlockHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBoneBlockPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBoneBlockStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBrewingStandBrew { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBubbleColumnBubblePop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBubbleColumnUpwardsAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBubbleColumnUpwardsInside { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBubbleColumnWhirlpoolAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockBubbleColumnWhirlpoolInside { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCakeAddCandle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCalciteBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCalciteFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCalciteHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCalcitePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCalciteStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCampfireCrackle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCandleAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCandleBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCandleExtinguish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCandleFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCandleHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCandlePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCandleStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCaveVinesBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCaveVinesFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCaveVinesHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCaveVinesPickBerries { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCaveVinesPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCaveVinesStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChainBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChainFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChainHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChainPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChainStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryLeavesBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryLeavesFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryLeavesHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryLeavesPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryLeavesStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherrySaplingBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherrySaplingFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherrySaplingHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherrySaplingPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherrySaplingStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodButtonClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodButtonClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodDoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodDoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodFenceGateClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodFenceGateOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodHangingSignBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodHangingSignFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodHangingSignHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodHangingSignPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodHangingSignStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodPressurePlateClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodPressurePlateClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodTrapdoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCherryWoodTrapdoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChestClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChestLocked { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChestOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChiseledBookshelfBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChiseledBookshelfFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChiseledBookshelfHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChiseledBookshelfInsert { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChiseledBookshelfInsertEnchanted { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChiseledBookshelfPickup { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChiseledBookshelfPickupEnchanted { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChiseledBookshelfPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChiseledBookshelfStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChorusFlowerDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockChorusFlowerGrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockComparatorClick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockComposterEmpty { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockComposterFill { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockComposterFillSuccess { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockComposterReady { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockConduitActivate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockConduitAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockConduitAmbientShort { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockConduitAttackTarget { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockConduitDeactivate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperBulbBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperBulbFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperBulbHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperBulbPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperBulbStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperBulbTurnOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperBulbTurnOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperDoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperDoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperGrateBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperGrateFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperGrateHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperGratePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperGrateStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperTrapdoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCopperTrapdoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCoralBlockBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCoralBlockFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCoralBlockHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCoralBlockPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCoralBlockStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCrafterCraft { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCrafterFail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockCropBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDecoratedPotBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDecoratedPotFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDecoratedPotHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDecoratedPotInsert { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDecoratedPotInsertFail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDecoratedPotPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDecoratedPotShatter { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDecoratedPotStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateBricksBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateBricksFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateBricksHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateBricksPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateBricksStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslatePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateTilesBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateTilesFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateTilesHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateTilesPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDeepslateTilesStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDispenserDispense { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDispenserFail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDispenserLaunch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDripstoneBlockBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDripstoneBlockFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDripstoneBlockHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDripstoneBlockPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockDripstoneBlockStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockEnchantmentTableUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockEnderChestClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockEnderChestOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockEndGatewaySpawn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockEndPortalFrameFill { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockEndPortalSpawn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFenceGateClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFenceGateOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFireAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFireExtinguish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFloweringAzaleaBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFloweringAzaleaFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFloweringAzaleaHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFloweringAzaleaPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFloweringAzaleaStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFroglightBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFroglightFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFroglightHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFroglightPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFroglightStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFrogspawnBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFrogspawnFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFrogspawnHatch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFrogspawnHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFrogspawnPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFrogspawnStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFungusBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFungusFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFungusHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFungusPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFungusStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockFurnaceFireCrackle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGildedBlackstoneBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGildedBlackstoneFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGildedBlackstoneHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGildedBlackstonePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGildedBlackstoneStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGlassBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGlassFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGlassHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGlassPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGlassStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGrassBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGrassFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGrassHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGrassPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGrassStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGravelBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGravelFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGravelHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGravelPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGravelStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGrindstoneUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockGrowingPlantCrop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHangingRootsBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHangingRootsFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHangingRootsHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHangingRootsPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHangingRootsStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHangingSignBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHangingSignFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHangingSignHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHangingSignPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHangingSignStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHangingSignWaxedInteractFail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHoneyBlockBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHoneyBlockFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHoneyBlockHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHoneyBlockPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHoneyBlockSlide { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockHoneyBlockStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockIronDoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockIronDoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockIronTrapdoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockIronTrapdoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLadderBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLadderFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLadderHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLadderPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLadderStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLanternBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLanternFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLanternHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLanternPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLanternStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLargeAmethystBudBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLargeAmethystBudPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLavaAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLavaExtinguish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLavaPop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLeverClick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLilyPadPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLodestoneBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLodestoneFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLodestoneHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLodestonePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockLodestoneStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMangroveRootsBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMangroveRootsFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMangroveRootsHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMangroveRootsPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMangroveRootsStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMediumAmethystBudBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMediumAmethystBudPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMetalBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMetalFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMetalHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMetalPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMetalPressurePlateClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMetalPressurePlateClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMetalStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMossBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMossCarpetBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMossCarpetFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMossCarpetHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMossCarpetPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMossCarpetStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMossFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMossHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMossPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMossStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMuddyMangroveRootsBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMuddyMangroveRootsFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMuddyMangroveRootsHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMuddyMangroveRootsPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMuddyMangroveRootsStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMudBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMudBricksBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMudBricksFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMudBricksHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMudBricksPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMudBricksStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMudFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMudHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMudPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockMudStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetheriteBlockBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetheriteBlockFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetheriteBlockHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetheriteBlockPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetheriteBlockStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherrackBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherrackFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherrackHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherrackPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherrackStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherBricksBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherBricksFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherBricksHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherBricksPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherBricksStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherGoldOreBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherGoldOreFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherGoldOreHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherGoldOrePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherGoldOreStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherOreBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherOreFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherOreHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherOrePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherOreStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherSproutsBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherSproutsFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherSproutsHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherSproutsPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherSproutsStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWartBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodButtonClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodButtonClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodDoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodDoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodFenceGateClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodFenceGateOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodHangingSignBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodHangingSignFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodHangingSignHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodHangingSignPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodHangingSignStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodPressurePlateClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodPressurePlateClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodTrapdoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNetherWoodTrapdoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockBanjo { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockBasedrum { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockBass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockBell { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockBit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockChime { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockCowBell { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockDidgeridoo { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockFlute { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockGuitar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockHarp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockHat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockImitateCreeper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockImitateEnderDragon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockImitatePiglin { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockImitateSkeleton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockImitateWitherSkeleton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockImitateZombie { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockIronXylophone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockPling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockSnare { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNoteBlockXylophone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNyliumBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNyliumFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNyliumHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNyliumPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockNyliumStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPackedMudBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPackedMudFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPackedMudHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPackedMudPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPackedMudStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPinkPetalsBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPinkPetalsFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPinkPetalsHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPinkPetalsPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPinkPetalsStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPistonContract { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPistonExtend { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPointedDripstoneBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPointedDripstoneDripLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPointedDripstoneDripLavaIntoCauldron { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPointedDripstoneDripWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPointedDripstoneDripWaterIntoCauldron { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPointedDripstoneFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPointedDripstoneHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPointedDripstoneLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPointedDripstonePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPointedDripstoneStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPolishedDeepslateBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPolishedDeepslateFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPolishedDeepslateHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPolishedDeepslatePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPolishedDeepslateStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPolishedTuffBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPolishedTuffFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPolishedTuffHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPolishedTuffPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPolishedTuffStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPortalAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPortalTravel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPortalTrigger { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPowderSnowBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPowderSnowFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPowderSnowHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPowderSnowPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPowderSnowStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockPumpkinCarve { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRedstoneTorchBurnout { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRespawnAnchorAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRespawnAnchorCharge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRespawnAnchorDeplete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRespawnAnchorSetSpawn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRootedDirtBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRootedDirtFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRootedDirtHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRootedDirtPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRootedDirtStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRootsBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRootsFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRootsHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRootsPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockRootsStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSandBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSandFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSandHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSandPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSandStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockScaffoldingBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockScaffoldingFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockScaffoldingHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockScaffoldingPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockScaffoldingStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkCatalystBloom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkCatalystBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkCatalystFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkCatalystHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkCatalystPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkCatalystStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkCharge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkSensorBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkSensorClicking { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkSensorClickingStop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkSensorFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkSensorHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkSensorPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkSensorStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkShriekerBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkShriekerFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkShriekerHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkShriekerPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkShriekerShriek { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkShriekerStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkSpread { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkVeinBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkVeinFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkVeinHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkVeinPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSculkVeinStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockShroomlightBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockShroomlightFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockShroomlightHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockShroomlightPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockShroomlightStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockShulkerBoxClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockShulkerBoxOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSignWaxedInteractFail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSlimeBlockBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSlimeBlockFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSlimeBlockHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSlimeBlockPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSlimeBlockStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSmallAmethystBudBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSmallAmethystBudPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSmallDripleafBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSmallDripleafFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSmallDripleafHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSmallDripleafPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSmallDripleafStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSmithingTableUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSmokerSmoke { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSnifferEggCrack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSnifferEggHatch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSnifferEggPlop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSnowBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSnowFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSnowHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSnowPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSnowStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSoulSandBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSoulSandFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSoulSandHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSoulSandPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSoulSandStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSoulSoilBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSoulSoilFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSoulSoilHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSoulSoilPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSoulSoilStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSpongeAbsorb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSpongeBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSpongeFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSpongeHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSpongePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSpongeStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSporeBlossomBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSporeBlossomFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSporeBlossomHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSporeBlossomPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSporeBlossomStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStemBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStemFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStemHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStemPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStemStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStoneBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStoneButtonClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStoneButtonClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStoneFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStoneHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStonePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStonePressurePlateClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStonePressurePlateClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockStoneStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSuspiciousGravelBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSuspiciousGravelFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSuspiciousGravelHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSuspiciousGravelPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSuspiciousGravelStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSuspiciousSandBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSuspiciousSandFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSuspiciousSandHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSuspiciousSandPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSuspiciousSandStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSweetBerryBushBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSweetBerryBushPickBerries { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockSweetBerryBushPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTrialSpawnerAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTrialSpawnerBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTrialSpawnerCloseShutter { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTrialSpawnerDetectPlayer { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTrialSpawnerEjectItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTrialSpawnerFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTrialSpawnerHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTrialSpawnerOpenShutter { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTrialSpawnerPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTrialSpawnerSpawnMob { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTrialSpawnerStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTripwireAttach { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTripwireClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTripwireClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTripwireDetach { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTuffBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTuffBricksBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTuffBricksFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTuffBricksHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTuffBricksPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTuffBricksStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTuffFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTuffHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTuffPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockTuffStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockVineBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockVineFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockVineHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockVinePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockVineStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWartBlockBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWartBlockFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWartBlockHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWartBlockPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWartBlockStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWaterAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWeepingVinesBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWeepingVinesFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWeepingVinesHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWeepingVinesPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWeepingVinesStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWetGrassBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWetGrassFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWetGrassHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWetGrassPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWetGrassStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWetSpongeBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWetSpongeFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWetSpongeHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWetSpongePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWetSpongeStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodenButtonClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodenButtonClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodenDoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodenDoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodenPressurePlateClickOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodenPressurePlateClickOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodenTrapdoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodenTrapdoorOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoodStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoolBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoolFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoolHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoolPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlockWoolStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnchantThornsHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAllayAmbientWithoutItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAllayAmbientWithItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAllayDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAllayHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAllayItemGiven { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAllayItemTaken { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAllayItemThrown { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityArmorStandBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityArmorStandFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityArmorStandHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityArmorStandPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityArrowHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityArrowHitPlayer { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityArrowShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAxolotlAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAxolotlDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAxolotlHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAxolotlIdleAir { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAxolotlIdleWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAxolotlSplash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityAxolotlSwim { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBatAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBatDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBatHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBatLoop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBatTakeoff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBeeDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBeeHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBeeLoop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBeeLoopAggressive { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBeePollinate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBeeSting { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBlazeAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBlazeBurn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBlazeDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBlazeHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBlazeShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBoatPaddleLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBoatPaddleWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBreezeDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBreezeHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBreezeIdleAir { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBreezeIdleGround { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBreezeInhale { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBreezeJump { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBreezeLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBreezeShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityBreezeSlide { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCamelAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCamelDash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCamelDashReady { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCamelDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCamelEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCamelHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCamelSaddle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCamelSit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCamelStand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCamelStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCamelStepSand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCatAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCatBegForFood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCatDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCatEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCatHiss { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCatHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCatPurr { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCatPurreow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCatStrayAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityChickenAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityChickenDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityChickenEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityChickenHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityChickenStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCodAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCodDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCodFlop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCodHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCowAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCowDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCowHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCowMilk { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCowStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCreeperDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCreeperHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityCreeperPrimed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDolphinAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDolphinAmbientWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDolphinAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDolphinDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDolphinEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDolphinHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDolphinJump { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDolphinPlay { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDolphinSplash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDolphinSwim { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDonkeyAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDonkeyAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDonkeyChest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDonkeyDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDonkeyEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDonkeyHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDragonFireballExplode { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDrownedAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDrownedAmbientWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDrownedDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDrownedDeathWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDrownedHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDrownedHurtWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDrownedShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDrownedStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDrownedSwim { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEggThrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityElderGuardianAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityElderGuardianAmbientLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityElderGuardianCurse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityElderGuardianDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityElderGuardianDeathLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityElderGuardianFlop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityElderGuardianHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityElderGuardianHurtLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEndermanAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEndermanDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEndermanHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEndermanScream { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEndermanStare { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEndermanTeleport { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEndermiteAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEndermiteDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEndermiteHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEndermiteStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEnderDragonAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEnderDragonDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEnderDragonFlap { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEnderDragonGrowl { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEnderDragonHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEnderDragonShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEnderEyeDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEnderEyeLaunch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEnderPearlThrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEvokerAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEvokerCastSpell { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEvokerCelebrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEvokerDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEvokerFangsAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEvokerHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEvokerPrepareAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEvokerPrepareSummon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityEvokerPrepareWololo { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityExperienceBottleThrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityExperienceOrbPickup { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFireworkRocketBlast { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFireworkRocketBlastFar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFireworkRocketLargeBlast { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFireworkRocketLargeBlastFar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFireworkRocketLaunch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFireworkRocketShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFireworkRocketTwinkle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFireworkRocketTwinkleFar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFishingBobberRetrieve { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFishingBobberSplash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFishingBobberThrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFishSwim { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFoxAggro { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFoxAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFoxBite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFoxDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFoxEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFoxHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFoxScreech { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFoxSleep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFoxSniff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFoxSpit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFoxTeleport { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFrogAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFrogDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFrogEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFrogHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFrogLaySpawn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFrogLongJump { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFrogStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityFrogTongue { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericBigFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericBurn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericDrink { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericExplode { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericExtinguishFire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericSmallFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericSplash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericSwim { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGenericWindBurst { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGhastAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGhastDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGhastHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGhastScream { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGhastShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGhastWarn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGlowItemFrameAddItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGlowItemFrameBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGlowItemFramePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGlowItemFrameRemoveItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGlowItemFrameRotateItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGlowSquidAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGlowSquidDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGlowSquidHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGlowSquidSquirt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatHornBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatLongJump { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatMilk { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatPrepareRam { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatRamImpact { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatScreamingAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatScreamingDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatScreamingEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatScreamingHornBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatScreamingHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatScreamingLongJump { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatScreamingMilk { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatScreamingPrepareRam { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatScreamingRamImpact { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGoatStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGuardianAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGuardianAmbientLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGuardianAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGuardianDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGuardianDeathLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGuardianFlop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGuardianHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityGuardianHurtLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHoglinAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHoglinAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHoglinAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHoglinConvertedToZombified { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHoglinDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHoglinHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHoglinRetreat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHoglinStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseArmor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseBreathe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseGallop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseJump { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseSaddle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHorseStepWood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHostileBigFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHostileDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHostileHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHostileSmallFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHostileSplash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHostileSwim { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHuskAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHuskConvertedToZombie { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHuskDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHuskHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityHuskStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIllusionerAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIllusionerCastSpell { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIllusionerDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIllusionerHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIllusionerMirrorMove { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIllusionerPrepareBlindness { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIllusionerPrepareMirror { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIronGolemAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIronGolemDamage { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIronGolemDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIronGolemHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIronGolemRepair { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityIronGolemStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityItemBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityItemFrameAddItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityItemFrameBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityItemFramePlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityItemFrameRemoveItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityItemFrameRotateItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityItemPickup { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLeashKnotBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLeashKnotPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLightningBoltImpact { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLightningBoltThunder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLingeringPotionThrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLlamaAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLlamaAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLlamaChest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLlamaDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLlamaEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLlamaHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLlamaSpit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLlamaStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityLlamaSwag { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMagmaCubeDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMagmaCubeDeathSmall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMagmaCubeHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMagmaCubeHurtSmall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMagmaCubeJump { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMagmaCubeSquish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMagmaCubeSquishSmall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMinecartInside { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMinecartInsideUnderwater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMinecartRiding { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMooshroomConvert { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMooshroomEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMooshroomMilk { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMooshroomShear { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMooshroomSuspiciousMilk { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMuleAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMuleAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMuleChest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMuleDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMuleEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityMuleHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityOcelotAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityOcelotDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityOcelotHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPaintingBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPaintingPlace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPandaAggressiveAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPandaAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPandaBite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPandaCantBreed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPandaDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPandaEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPandaHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPandaPreSneeze { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPandaSneeze { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPandaStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPandaWorriedAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotFly { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateBlaze { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateBreeze { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateCreeper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateDrowned { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateElderGuardian { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateEndermite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateEnderDragon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateEvoker { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateGhast { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateGuardian { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateHoglin { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateHusk { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateIllusioner { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateMagmaCube { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitatePhantom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitatePiglin { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitatePiglinBrute { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitatePillager { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateRavager { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateShulker { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateSilverfish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateSkeleton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateSlime { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateSpider { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateStray { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateVex { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateVindicator { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateWarden { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateWitch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateWither { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateWitherSkeleton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateZoglin { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateZombie { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotImitateZombieVillager { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityParrotStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPhantomAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPhantomBite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPhantomDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPhantomFlap { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPhantomHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPhantomSwoop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinAdmiringItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinBruteAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinBruteAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinBruteConvertedToZombified { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinBruteDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinBruteHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinBruteStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinCelebrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinConvertedToZombified { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinJealous { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinRetreat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPiglinStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPigAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPigDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPigHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPigSaddle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPigStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPillagerAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPillagerCelebrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPillagerDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPillagerHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerAttackCrit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerAttackKnockback { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerAttackNodamage { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerAttackStrong { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerAttackSweep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerAttackWeak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerBigFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerBreath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerBurp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerHurtDrown { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerHurtFreeze { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerHurtOnFire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerHurtSweetBerryBush { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerLevelup { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerSmallFall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerSplash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerSplashHighSpeed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerSwim { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPlayerTeleport { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPolarBearAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPolarBearAmbientBaby { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPolarBearDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPolarBearHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPolarBearStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPolarBearWarning { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPufferFishAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPufferFishBlowOut { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPufferFishBlowUp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPufferFishDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPufferFishFlop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPufferFishHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPufferFishSting { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRabbitAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRabbitAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRabbitDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRabbitHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRabbitJump { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRavagerAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRavagerAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRavagerCelebrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRavagerDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRavagerHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRavagerRoar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRavagerStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityRavagerStunned { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySalmonAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySalmonDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySalmonFlop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySalmonHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySheepAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySheepDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySheepHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySheepShear { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySheepStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityShulkerAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityShulkerBulletHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityShulkerBulletHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityShulkerClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityShulkerDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityShulkerHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityShulkerHurtClosed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityShulkerOpen { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityShulkerShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityShulkerTeleport { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySilverfishAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySilverfishDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySilverfishHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySilverfishStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonConvertedToStray { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonHorseAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonHorseAmbientWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonHorseDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonHorseGallopWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonHorseHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonHorseJumpWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonHorseStepWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonHorseSwim { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySkeletonStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySlimeAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySlimeDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySlimeDeathSmall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySlimeHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySlimeHurtSmall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySlimeJump { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySlimeJumpSmall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySlimeSquish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySlimeSquishSmall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferDigging { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferDiggingStop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferDropSeed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferHappy { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferIdle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferScenting { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferSearching { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferSniffing { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnifferStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnowballThrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnowGolemAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnowGolemDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnowGolemHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnowGolemShear { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySnowGolemShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySpiderAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySpiderDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySpiderHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySpiderStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySplashPotionBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySplashPotionThrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySquidAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySquidDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySquidHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntitySquidSquirt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStrayAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStrayDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStrayHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStrayStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStriderAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStriderDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStriderEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStriderHappy { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStriderHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStriderRetreat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStriderSaddle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStriderStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityStriderStepLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTadpoleDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTadpoleFlop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTadpoleGrowUp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTadpoleHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTntPrimed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTropicalFishAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTropicalFishDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTropicalFishFlop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTropicalFishHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleAmbientLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleDeathBaby { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleEggBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleEggCrack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleEggHatch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleHurtBaby { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleLayEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleShamble { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleShambleBaby { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTurtleSwim { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVexAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVexCharge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVexDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVexHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerCelebrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerNo { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerTrade { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkArmorer { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkButcher { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkCartographer { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkCleric { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkFarmer { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkFisherman { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkFletcher { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkLeatherworker { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkLibrarian { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkMason { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkShepherd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkToolsmith { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerWorkWeaponsmith { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVillagerYes { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVindicatorAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVindicatorCelebrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVindicatorDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityVindicatorHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWanderingTraderAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWanderingTraderDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWanderingTraderDisappeared { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWanderingTraderDrinkMilk { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWanderingTraderDrinkPotion { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWanderingTraderHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWanderingTraderNo { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWanderingTraderReappeared { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWanderingTraderTrade { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWanderingTraderYes { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenAgitated { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenAttackImpact { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenDig { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenEmerge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenHeartbeat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenListening { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenListeningAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenNearbyClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenNearbyCloser { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenNearbyClosest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenRoar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenSniff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenSonicBoom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenSonicCharge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWardenTendrilClicks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitchAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitchCelebrate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitchDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitchDrink { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitchHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitchThrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitherAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitherBreakBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitherDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitherHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitherShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitherSkeletonAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitherSkeletonDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitherSkeletonHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitherSkeletonStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWitherSpawn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWolfAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWolfDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWolfGrowl { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWolfHowl { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWolfHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWolfPant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWolfShake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWolfStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityWolfWhine { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZoglinAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZoglinAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZoglinAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZoglinDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZoglinHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZoglinStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieAttackIronDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieAttackWoodenDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieBreakWoodenDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieConvertedToDrowned { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieDestroyEgg { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieHorseAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieHorseDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieHorseHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieInfect { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieVillagerAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieVillagerConverted { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieVillagerCure { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieVillagerDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieVillagerHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombieVillagerStep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombifiedPiglinAmbient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombifiedPiglinAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombifiedPiglinDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityZombifiedPiglinHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EventRaidHorn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IntentionallyEmpty { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemArmorEquipChain { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemArmorEquipDiamond { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemArmorEquipElytra { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemArmorEquipGeneric { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemArmorEquipGold { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemArmorEquipIron { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemArmorEquipLeather { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemArmorEquipNetherite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemArmorEquipTurtle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemAxeScrape { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemAxeStrip { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemAxeWaxOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBoneMealUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBookPageTurn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBookPut { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBottleEmpty { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBottleFill { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBottleFillDragonbreath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBrushBrushingGeneric { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBrushBrushingGravel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBrushBrushingGravelComplete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBrushBrushingSand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBrushBrushingSandComplete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketEmpty { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketEmptyAxolotl { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketEmptyFish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketEmptyLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketEmptyPowderSnow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketEmptyTadpole { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketFill { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketFillAxolotl { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketFillFish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketFillLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketFillPowderSnow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBucketFillTadpole { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBundleDropContents { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBundleInsert { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemBundleRemoveOne { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemChorusFruitTeleport { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemCropPlant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemCrossbowHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemCrossbowLoadingEnd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemCrossbowLoadingMiddle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemCrossbowLoadingStart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemCrossbowQuickCharge1 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemCrossbowQuickCharge2 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemCrossbowQuickCharge3 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemCrossbowShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemDyeUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemElytraFlying { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemFirechargeUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemFlintandsteelUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemGlowInkSacUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemGoatHornPlay { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemGoatHornSound0 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemGoatHornSound1 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemGoatHornSound2 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemGoatHornSound3 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemGoatHornSound4 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemGoatHornSound5 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemGoatHornSound6 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemGoatHornSound7 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemHoeTill { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemHoneycombWaxOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemHoneyBottleDrink { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemInkSacUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemLodestoneCompassLock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemNetherWartPlant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemShieldBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemShieldBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemShovelFlatten { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemSpyglassStopUsing { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemSpyglassUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemTotemUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemTridentHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemTridentHitGround { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemTridentReturn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemTridentRiptide1 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemTridentRiptide2 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemTridentRiptide3 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemTridentThrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemTridentThunder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicCreative { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicCredits { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDisc11 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDisc13 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDisc5 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscBlocks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscCat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscChirp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscFar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscMall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscMellohi { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscOtherside { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscPigstep { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscRelic { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscStal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscStrad { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscWait { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDiscWard { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicDragon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicEnd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicGame { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicMenu { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicNetherBasaltDeltas { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicNetherCrimsonForest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicNetherNetherWastes { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicNetherSoulSandValley { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicNetherWarpedForest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldBadlands { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldBambooJungle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldCherryGrove { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldDeepDark { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldDesert { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldDripstoneCaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldFlowerForest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldForest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldFrozenPeaks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldGrove { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldJaggedPeaks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldJungle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldLushCaves { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldMeadow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldOldGrowthTaiga { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldSnowySlopes { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldSparseJungle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldStonyPeaks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicOverworldSwamp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MusicUnderWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ParticleSoulEscape { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::UiButtonClick { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::UiCartographyTableTakeResult { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::UiLoomSelectPattern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::UiLoomTakeResult { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::UiStonecutterSelectRecipe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::UiStonecutterTakeResult { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::UiToastChallengeComplete { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::UiToastIn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::UiToastOut { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeatherRain { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WeatherRainAbove { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for Sound<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Sound from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Sound")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Sound object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "AMBIENT_BASALT_DELTAS_ADDITIONS" => Ok(Sound::AmbientBasaltDeltasAdditions { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_BASALT_DELTAS_LOOP" => Ok(Sound::AmbientBasaltDeltasLoop { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_BASALT_DELTAS_MOOD" => Ok(Sound::AmbientBasaltDeltasMood { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_CAVE" => Ok(Sound::AmbientCave { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_CRIMSON_FOREST_ADDITIONS" => Ok(Sound::AmbientCrimsonForestAdditions { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_CRIMSON_FOREST_LOOP" => Ok(Sound::AmbientCrimsonForestLoop { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_CRIMSON_FOREST_MOOD" => Ok(Sound::AmbientCrimsonForestMood { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_NETHER_WASTES_ADDITIONS" => Ok(Sound::AmbientNetherWastesAdditions { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_NETHER_WASTES_LOOP" => Ok(Sound::AmbientNetherWastesLoop { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_NETHER_WASTES_MOOD" => Ok(Sound::AmbientNetherWastesMood { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_SOUL_SAND_VALLEY_ADDITIONS" => Ok(Sound::AmbientSoulSandValleyAdditions { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_SOUL_SAND_VALLEY_LOOP" => Ok(Sound::AmbientSoulSandValleyLoop { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_SOUL_SAND_VALLEY_MOOD" => Ok(Sound::AmbientSoulSandValleyMood { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_UNDERWATER_ENTER" => Ok(Sound::AmbientUnderwaterEnter { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_UNDERWATER_EXIT" => Ok(Sound::AmbientUnderwaterExit { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_UNDERWATER_LOOP" => Ok(Sound::AmbientUnderwaterLoop { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_UNDERWATER_LOOP_ADDITIONS" => Ok(Sound::AmbientUnderwaterLoopAdditions { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE" => Ok(Sound::AmbientUnderwaterLoopAdditionsRare { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE" => Ok(Sound::AmbientUnderwaterLoopAdditionsUltraRare { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_WARPED_FOREST_ADDITIONS" => Ok(Sound::AmbientWarpedForestAdditions { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_WARPED_FOREST_LOOP" => Ok(Sound::AmbientWarpedForestLoop { inner: SoundStruct::from_raw(env,obj)?}),"AMBIENT_WARPED_FOREST_MOOD" => Ok(Sound::AmbientWarpedForestMood { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_BLOCK_BREAK" => Ok(Sound::BlockAmethystBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_BLOCK_CHIME" => Ok(Sound::BlockAmethystBlockChime { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_BLOCK_FALL" => Ok(Sound::BlockAmethystBlockFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_BLOCK_HIT" => Ok(Sound::BlockAmethystBlockHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_BLOCK_PLACE" => Ok(Sound::BlockAmethystBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_BLOCK_RESONATE" => Ok(Sound::BlockAmethystBlockResonate { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_BLOCK_STEP" => Ok(Sound::BlockAmethystBlockStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_CLUSTER_BREAK" => Ok(Sound::BlockAmethystClusterBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_CLUSTER_FALL" => Ok(Sound::BlockAmethystClusterFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_CLUSTER_HIT" => Ok(Sound::BlockAmethystClusterHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_CLUSTER_PLACE" => Ok(Sound::BlockAmethystClusterPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AMETHYST_CLUSTER_STEP" => Ok(Sound::BlockAmethystClusterStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANCIENT_DEBRIS_BREAK" => Ok(Sound::BlockAncientDebrisBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANCIENT_DEBRIS_FALL" => Ok(Sound::BlockAncientDebrisFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANCIENT_DEBRIS_HIT" => Ok(Sound::BlockAncientDebrisHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANCIENT_DEBRIS_PLACE" => Ok(Sound::BlockAncientDebrisPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANCIENT_DEBRIS_STEP" => Ok(Sound::BlockAncientDebrisStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANVIL_BREAK" => Ok(Sound::BlockAnvilBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANVIL_DESTROY" => Ok(Sound::BlockAnvilDestroy { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANVIL_FALL" => Ok(Sound::BlockAnvilFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANVIL_HIT" => Ok(Sound::BlockAnvilHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANVIL_LAND" => Ok(Sound::BlockAnvilLand { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANVIL_PLACE" => Ok(Sound::BlockAnvilPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANVIL_STEP" => Ok(Sound::BlockAnvilStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ANVIL_USE" => Ok(Sound::BlockAnvilUse { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AZALEA_BREAK" => Ok(Sound::BlockAzaleaBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AZALEA_FALL" => Ok(Sound::BlockAzaleaFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AZALEA_HIT" => Ok(Sound::BlockAzaleaHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AZALEA_LEAVES_BREAK" => Ok(Sound::BlockAzaleaLeavesBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AZALEA_LEAVES_FALL" => Ok(Sound::BlockAzaleaLeavesFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AZALEA_LEAVES_HIT" => Ok(Sound::BlockAzaleaLeavesHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AZALEA_LEAVES_PLACE" => Ok(Sound::BlockAzaleaLeavesPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AZALEA_LEAVES_STEP" => Ok(Sound::BlockAzaleaLeavesStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AZALEA_PLACE" => Ok(Sound::BlockAzaleaPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_AZALEA_STEP" => Ok(Sound::BlockAzaleaStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_BREAK" => Ok(Sound::BlockBambooBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_FALL" => Ok(Sound::BlockBambooFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_HIT" => Ok(Sound::BlockBambooHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_PLACE" => Ok(Sound::BlockBambooPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_SAPLING_BREAK" => Ok(Sound::BlockBambooSaplingBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_SAPLING_HIT" => Ok(Sound::BlockBambooSaplingHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_SAPLING_PLACE" => Ok(Sound::BlockBambooSaplingPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_STEP" => Ok(Sound::BlockBambooStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_BREAK" => Ok(Sound::BlockBambooWoodBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF" => Ok(Sound::BlockBambooWoodButtonClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON" => Ok(Sound::BlockBambooWoodButtonClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_DOOR_CLOSE" => Ok(Sound::BlockBambooWoodDoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_DOOR_OPEN" => Ok(Sound::BlockBambooWoodDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_FALL" => Ok(Sound::BlockBambooWoodFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE" => Ok(Sound::BlockBambooWoodFenceGateClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN" => Ok(Sound::BlockBambooWoodFenceGateOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK" => Ok(Sound::BlockBambooWoodHangingSignBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL" => Ok(Sound::BlockBambooWoodHangingSignFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT" => Ok(Sound::BlockBambooWoodHangingSignHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE" => Ok(Sound::BlockBambooWoodHangingSignPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP" => Ok(Sound::BlockBambooWoodHangingSignStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_HIT" => Ok(Sound::BlockBambooWoodHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_PLACE" => Ok(Sound::BlockBambooWoodPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockBambooWoodPressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockBambooWoodPressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_STEP" => Ok(Sound::BlockBambooWoodStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE" => Ok(Sound::BlockBambooWoodTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN" => Ok(Sound::BlockBambooWoodTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BARREL_CLOSE" => Ok(Sound::BlockBarrelClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BARREL_OPEN" => Ok(Sound::BlockBarrelOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BASALT_BREAK" => Ok(Sound::BlockBasaltBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BASALT_FALL" => Ok(Sound::BlockBasaltFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BASALT_HIT" => Ok(Sound::BlockBasaltHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BASALT_PLACE" => Ok(Sound::BlockBasaltPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BASALT_STEP" => Ok(Sound::BlockBasaltStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BEACON_ACTIVATE" => Ok(Sound::BlockBeaconActivate { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BEACON_AMBIENT" => Ok(Sound::BlockBeaconAmbient { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BEACON_DEACTIVATE" => Ok(Sound::BlockBeaconDeactivate { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BEACON_POWER_SELECT" => Ok(Sound::BlockBeaconPowerSelect { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BEEHIVE_DRIP" => Ok(Sound::BlockBeehiveDrip { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BEEHIVE_ENTER" => Ok(Sound::BlockBeehiveEnter { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BEEHIVE_EXIT" => Ok(Sound::BlockBeehiveExit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BEEHIVE_SHEAR" => Ok(Sound::BlockBeehiveShear { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BEEHIVE_WORK" => Ok(Sound::BlockBeehiveWork { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BELL_RESONATE" => Ok(Sound::BlockBellResonate { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BELL_USE" => Ok(Sound::BlockBellUse { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BIG_DRIPLEAF_BREAK" => Ok(Sound::BlockBigDripleafBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BIG_DRIPLEAF_FALL" => Ok(Sound::BlockBigDripleafFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BIG_DRIPLEAF_HIT" => Ok(Sound::BlockBigDripleafHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BIG_DRIPLEAF_PLACE" => Ok(Sound::BlockBigDripleafPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BIG_DRIPLEAF_STEP" => Ok(Sound::BlockBigDripleafStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BIG_DRIPLEAF_TILT_DOWN" => Ok(Sound::BlockBigDripleafTiltDown { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BIG_DRIPLEAF_TILT_UP" => Ok(Sound::BlockBigDripleafTiltUp { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BLASTFURNACE_FIRE_CRACKLE" => Ok(Sound::BlockBlastfurnaceFireCrackle { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BONE_BLOCK_BREAK" => Ok(Sound::BlockBoneBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BONE_BLOCK_FALL" => Ok(Sound::BlockBoneBlockFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BONE_BLOCK_HIT" => Ok(Sound::BlockBoneBlockHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BONE_BLOCK_PLACE" => Ok(Sound::BlockBoneBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BONE_BLOCK_STEP" => Ok(Sound::BlockBoneBlockStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BREWING_STAND_BREW" => Ok(Sound::BlockBrewingStandBrew { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BUBBLE_COLUMN_BUBBLE_POP" => Ok(Sound::BlockBubbleColumnBubblePop { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT" => Ok(Sound::BlockBubbleColumnUpwardsAmbient { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE" => Ok(Sound::BlockBubbleColumnUpwardsInside { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT" => Ok(Sound::BlockBubbleColumnWhirlpoolAmbient { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE" => Ok(Sound::BlockBubbleColumnWhirlpoolInside { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CAKE_ADD_CANDLE" => Ok(Sound::BlockCakeAddCandle { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CALCITE_BREAK" => Ok(Sound::BlockCalciteBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CALCITE_FALL" => Ok(Sound::BlockCalciteFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CALCITE_HIT" => Ok(Sound::BlockCalciteHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CALCITE_PLACE" => Ok(Sound::BlockCalcitePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CALCITE_STEP" => Ok(Sound::BlockCalciteStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CAMPFIRE_CRACKLE" => Ok(Sound::BlockCampfireCrackle { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CANDLE_AMBIENT" => Ok(Sound::BlockCandleAmbient { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CANDLE_BREAK" => Ok(Sound::BlockCandleBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CANDLE_EXTINGUISH" => Ok(Sound::BlockCandleExtinguish { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CANDLE_FALL" => Ok(Sound::BlockCandleFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CANDLE_HIT" => Ok(Sound::BlockCandleHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CANDLE_PLACE" => Ok(Sound::BlockCandlePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CANDLE_STEP" => Ok(Sound::BlockCandleStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CAVE_VINES_BREAK" => Ok(Sound::BlockCaveVinesBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CAVE_VINES_FALL" => Ok(Sound::BlockCaveVinesFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CAVE_VINES_HIT" => Ok(Sound::BlockCaveVinesHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CAVE_VINES_PICK_BERRIES" => Ok(Sound::BlockCaveVinesPickBerries { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CAVE_VINES_PLACE" => Ok(Sound::BlockCaveVinesPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CAVE_VINES_STEP" => Ok(Sound::BlockCaveVinesStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHAIN_BREAK" => Ok(Sound::BlockChainBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHAIN_FALL" => Ok(Sound::BlockChainFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHAIN_HIT" => Ok(Sound::BlockChainHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHAIN_PLACE" => Ok(Sound::BlockChainPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHAIN_STEP" => Ok(Sound::BlockChainStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_LEAVES_BREAK" => Ok(Sound::BlockCherryLeavesBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_LEAVES_FALL" => Ok(Sound::BlockCherryLeavesFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_LEAVES_HIT" => Ok(Sound::BlockCherryLeavesHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_LEAVES_PLACE" => Ok(Sound::BlockCherryLeavesPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_LEAVES_STEP" => Ok(Sound::BlockCherryLeavesStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_SAPLING_BREAK" => Ok(Sound::BlockCherrySaplingBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_SAPLING_FALL" => Ok(Sound::BlockCherrySaplingFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_SAPLING_HIT" => Ok(Sound::BlockCherrySaplingHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_SAPLING_PLACE" => Ok(Sound::BlockCherrySaplingPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_SAPLING_STEP" => Ok(Sound::BlockCherrySaplingStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_BREAK" => Ok(Sound::BlockCherryWoodBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF" => Ok(Sound::BlockCherryWoodButtonClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON" => Ok(Sound::BlockCherryWoodButtonClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_DOOR_CLOSE" => Ok(Sound::BlockCherryWoodDoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_DOOR_OPEN" => Ok(Sound::BlockCherryWoodDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_FALL" => Ok(Sound::BlockCherryWoodFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE" => Ok(Sound::BlockCherryWoodFenceGateClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN" => Ok(Sound::BlockCherryWoodFenceGateOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK" => Ok(Sound::BlockCherryWoodHangingSignBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL" => Ok(Sound::BlockCherryWoodHangingSignFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT" => Ok(Sound::BlockCherryWoodHangingSignHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE" => Ok(Sound::BlockCherryWoodHangingSignPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP" => Ok(Sound::BlockCherryWoodHangingSignStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_HIT" => Ok(Sound::BlockCherryWoodHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_PLACE" => Ok(Sound::BlockCherryWoodPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockCherryWoodPressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockCherryWoodPressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_STEP" => Ok(Sound::BlockCherryWoodStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE" => Ok(Sound::BlockCherryWoodTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN" => Ok(Sound::BlockCherryWoodTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHEST_CLOSE" => Ok(Sound::BlockChestClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHEST_LOCKED" => Ok(Sound::BlockChestLocked { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHEST_OPEN" => Ok(Sound::BlockChestOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHISELED_BOOKSHELF_BREAK" => Ok(Sound::BlockChiseledBookshelfBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHISELED_BOOKSHELF_FALL" => Ok(Sound::BlockChiseledBookshelfFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHISELED_BOOKSHELF_HIT" => Ok(Sound::BlockChiseledBookshelfHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHISELED_BOOKSHELF_INSERT" => Ok(Sound::BlockChiseledBookshelfInsert { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED" => Ok(Sound::BlockChiseledBookshelfInsertEnchanted { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHISELED_BOOKSHELF_PICKUP" => Ok(Sound::BlockChiseledBookshelfPickup { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED" => Ok(Sound::BlockChiseledBookshelfPickupEnchanted { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHISELED_BOOKSHELF_PLACE" => Ok(Sound::BlockChiseledBookshelfPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHISELED_BOOKSHELF_STEP" => Ok(Sound::BlockChiseledBookshelfStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHORUS_FLOWER_DEATH" => Ok(Sound::BlockChorusFlowerDeath { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CHORUS_FLOWER_GROW" => Ok(Sound::BlockChorusFlowerGrow { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COMPARATOR_CLICK" => Ok(Sound::BlockComparatorClick { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COMPOSTER_EMPTY" => Ok(Sound::BlockComposterEmpty { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COMPOSTER_FILL" => Ok(Sound::BlockComposterFill { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COMPOSTER_FILL_SUCCESS" => Ok(Sound::BlockComposterFillSuccess { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COMPOSTER_READY" => Ok(Sound::BlockComposterReady { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CONDUIT_ACTIVATE" => Ok(Sound::BlockConduitActivate { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CONDUIT_AMBIENT" => Ok(Sound::BlockConduitAmbient { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CONDUIT_AMBIENT_SHORT" => Ok(Sound::BlockConduitAmbientShort { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CONDUIT_ATTACK_TARGET" => Ok(Sound::BlockConduitAttackTarget { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CONDUIT_DEACTIVATE" => Ok(Sound::BlockConduitDeactivate { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_BREAK" => Ok(Sound::BlockCopperBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_BULB_BREAK" => Ok(Sound::BlockCopperBulbBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_BULB_FALL" => Ok(Sound::BlockCopperBulbFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_BULB_HIT" => Ok(Sound::BlockCopperBulbHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_BULB_PLACE" => Ok(Sound::BlockCopperBulbPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_BULB_STEP" => Ok(Sound::BlockCopperBulbStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_BULB_TURN_OFF" => Ok(Sound::BlockCopperBulbTurnOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_BULB_TURN_ON" => Ok(Sound::BlockCopperBulbTurnOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_DOOR_CLOSE" => Ok(Sound::BlockCopperDoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_DOOR_OPEN" => Ok(Sound::BlockCopperDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_FALL" => Ok(Sound::BlockCopperFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_GRATE_BREAK" => Ok(Sound::BlockCopperGrateBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_GRATE_FALL" => Ok(Sound::BlockCopperGrateFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_GRATE_HIT" => Ok(Sound::BlockCopperGrateHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_GRATE_PLACE" => Ok(Sound::BlockCopperGratePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_GRATE_STEP" => Ok(Sound::BlockCopperGrateStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_HIT" => Ok(Sound::BlockCopperHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_PLACE" => Ok(Sound::BlockCopperPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_STEP" => Ok(Sound::BlockCopperStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_TRAPDOOR_CLOSE" => Ok(Sound::BlockCopperTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_COPPER_TRAPDOOR_OPEN" => Ok(Sound::BlockCopperTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CORAL_BLOCK_BREAK" => Ok(Sound::BlockCoralBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CORAL_BLOCK_FALL" => Ok(Sound::BlockCoralBlockFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CORAL_BLOCK_HIT" => Ok(Sound::BlockCoralBlockHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CORAL_BLOCK_PLACE" => Ok(Sound::BlockCoralBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CORAL_BLOCK_STEP" => Ok(Sound::BlockCoralBlockStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CRAFTER_CRAFT" => Ok(Sound::BlockCrafterCraft { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CRAFTER_FAIL" => Ok(Sound::BlockCrafterFail { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_CROP_BREAK" => Ok(Sound::BlockCropBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DECORATED_POT_BREAK" => Ok(Sound::BlockDecoratedPotBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DECORATED_POT_FALL" => Ok(Sound::BlockDecoratedPotFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DECORATED_POT_HIT" => Ok(Sound::BlockDecoratedPotHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DECORATED_POT_INSERT" => Ok(Sound::BlockDecoratedPotInsert { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DECORATED_POT_INSERT_FAIL" => Ok(Sound::BlockDecoratedPotInsertFail { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DECORATED_POT_PLACE" => Ok(Sound::BlockDecoratedPotPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DECORATED_POT_SHATTER" => Ok(Sound::BlockDecoratedPotShatter { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DECORATED_POT_STEP" => Ok(Sound::BlockDecoratedPotStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_BREAK" => Ok(Sound::BlockDeepslateBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_BRICKS_BREAK" => Ok(Sound::BlockDeepslateBricksBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_BRICKS_FALL" => Ok(Sound::BlockDeepslateBricksFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_BRICKS_HIT" => Ok(Sound::BlockDeepslateBricksHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_BRICKS_PLACE" => Ok(Sound::BlockDeepslateBricksPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_BRICKS_STEP" => Ok(Sound::BlockDeepslateBricksStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_FALL" => Ok(Sound::BlockDeepslateFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_HIT" => Ok(Sound::BlockDeepslateHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_PLACE" => Ok(Sound::BlockDeepslatePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_STEP" => Ok(Sound::BlockDeepslateStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_TILES_BREAK" => Ok(Sound::BlockDeepslateTilesBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_TILES_FALL" => Ok(Sound::BlockDeepslateTilesFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_TILES_HIT" => Ok(Sound::BlockDeepslateTilesHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_TILES_PLACE" => Ok(Sound::BlockDeepslateTilesPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DEEPSLATE_TILES_STEP" => Ok(Sound::BlockDeepslateTilesStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DISPENSER_DISPENSE" => Ok(Sound::BlockDispenserDispense { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DISPENSER_FAIL" => Ok(Sound::BlockDispenserFail { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DISPENSER_LAUNCH" => Ok(Sound::BlockDispenserLaunch { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DRIPSTONE_BLOCK_BREAK" => Ok(Sound::BlockDripstoneBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DRIPSTONE_BLOCK_FALL" => Ok(Sound::BlockDripstoneBlockFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DRIPSTONE_BLOCK_HIT" => Ok(Sound::BlockDripstoneBlockHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DRIPSTONE_BLOCK_PLACE" => Ok(Sound::BlockDripstoneBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_DRIPSTONE_BLOCK_STEP" => Ok(Sound::BlockDripstoneBlockStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ENCHANTMENT_TABLE_USE" => Ok(Sound::BlockEnchantmentTableUse { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ENDER_CHEST_CLOSE" => Ok(Sound::BlockEnderChestClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ENDER_CHEST_OPEN" => Ok(Sound::BlockEnderChestOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_END_GATEWAY_SPAWN" => Ok(Sound::BlockEndGatewaySpawn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_END_PORTAL_FRAME_FILL" => Ok(Sound::BlockEndPortalFrameFill { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_END_PORTAL_SPAWN" => Ok(Sound::BlockEndPortalSpawn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FENCE_GATE_CLOSE" => Ok(Sound::BlockFenceGateClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FENCE_GATE_OPEN" => Ok(Sound::BlockFenceGateOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FIRE_AMBIENT" => Ok(Sound::BlockFireAmbient { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FIRE_EXTINGUISH" => Ok(Sound::BlockFireExtinguish { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FLOWERING_AZALEA_BREAK" => Ok(Sound::BlockFloweringAzaleaBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FLOWERING_AZALEA_FALL" => Ok(Sound::BlockFloweringAzaleaFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FLOWERING_AZALEA_HIT" => Ok(Sound::BlockFloweringAzaleaHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FLOWERING_AZALEA_PLACE" => Ok(Sound::BlockFloweringAzaleaPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FLOWERING_AZALEA_STEP" => Ok(Sound::BlockFloweringAzaleaStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FROGLIGHT_BREAK" => Ok(Sound::BlockFroglightBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FROGLIGHT_FALL" => Ok(Sound::BlockFroglightFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FROGLIGHT_HIT" => Ok(Sound::BlockFroglightHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FROGLIGHT_PLACE" => Ok(Sound::BlockFroglightPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FROGLIGHT_STEP" => Ok(Sound::BlockFroglightStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FROGSPAWN_BREAK" => Ok(Sound::BlockFrogspawnBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FROGSPAWN_FALL" => Ok(Sound::BlockFrogspawnFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FROGSPAWN_HATCH" => Ok(Sound::BlockFrogspawnHatch { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FROGSPAWN_HIT" => Ok(Sound::BlockFrogspawnHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FROGSPAWN_PLACE" => Ok(Sound::BlockFrogspawnPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FROGSPAWN_STEP" => Ok(Sound::BlockFrogspawnStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FUNGUS_BREAK" => Ok(Sound::BlockFungusBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FUNGUS_FALL" => Ok(Sound::BlockFungusFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FUNGUS_HIT" => Ok(Sound::BlockFungusHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FUNGUS_PLACE" => Ok(Sound::BlockFungusPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FUNGUS_STEP" => Ok(Sound::BlockFungusStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_FURNACE_FIRE_CRACKLE" => Ok(Sound::BlockFurnaceFireCrackle { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GILDED_BLACKSTONE_BREAK" => Ok(Sound::BlockGildedBlackstoneBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GILDED_BLACKSTONE_FALL" => Ok(Sound::BlockGildedBlackstoneFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GILDED_BLACKSTONE_HIT" => Ok(Sound::BlockGildedBlackstoneHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GILDED_BLACKSTONE_PLACE" => Ok(Sound::BlockGildedBlackstonePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GILDED_BLACKSTONE_STEP" => Ok(Sound::BlockGildedBlackstoneStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GLASS_BREAK" => Ok(Sound::BlockGlassBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GLASS_FALL" => Ok(Sound::BlockGlassFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GLASS_HIT" => Ok(Sound::BlockGlassHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GLASS_PLACE" => Ok(Sound::BlockGlassPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GLASS_STEP" => Ok(Sound::BlockGlassStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GRASS_BREAK" => Ok(Sound::BlockGrassBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GRASS_FALL" => Ok(Sound::BlockGrassFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GRASS_HIT" => Ok(Sound::BlockGrassHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GRASS_PLACE" => Ok(Sound::BlockGrassPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GRASS_STEP" => Ok(Sound::BlockGrassStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GRAVEL_BREAK" => Ok(Sound::BlockGravelBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GRAVEL_FALL" => Ok(Sound::BlockGravelFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GRAVEL_HIT" => Ok(Sound::BlockGravelHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GRAVEL_PLACE" => Ok(Sound::BlockGravelPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GRAVEL_STEP" => Ok(Sound::BlockGravelStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GRINDSTONE_USE" => Ok(Sound::BlockGrindstoneUse { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_GROWING_PLANT_CROP" => Ok(Sound::BlockGrowingPlantCrop { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HANGING_ROOTS_BREAK" => Ok(Sound::BlockHangingRootsBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HANGING_ROOTS_FALL" => Ok(Sound::BlockHangingRootsFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HANGING_ROOTS_HIT" => Ok(Sound::BlockHangingRootsHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HANGING_ROOTS_PLACE" => Ok(Sound::BlockHangingRootsPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HANGING_ROOTS_STEP" => Ok(Sound::BlockHangingRootsStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HANGING_SIGN_BREAK" => Ok(Sound::BlockHangingSignBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HANGING_SIGN_FALL" => Ok(Sound::BlockHangingSignFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HANGING_SIGN_HIT" => Ok(Sound::BlockHangingSignHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HANGING_SIGN_PLACE" => Ok(Sound::BlockHangingSignPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HANGING_SIGN_STEP" => Ok(Sound::BlockHangingSignStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HANGING_SIGN_WAXED_INTERACT_FAIL" => Ok(Sound::BlockHangingSignWaxedInteractFail { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HONEY_BLOCK_BREAK" => Ok(Sound::BlockHoneyBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HONEY_BLOCK_FALL" => Ok(Sound::BlockHoneyBlockFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HONEY_BLOCK_HIT" => Ok(Sound::BlockHoneyBlockHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HONEY_BLOCK_PLACE" => Ok(Sound::BlockHoneyBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HONEY_BLOCK_SLIDE" => Ok(Sound::BlockHoneyBlockSlide { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_HONEY_BLOCK_STEP" => Ok(Sound::BlockHoneyBlockStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_IRON_DOOR_CLOSE" => Ok(Sound::BlockIronDoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_IRON_DOOR_OPEN" => Ok(Sound::BlockIronDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_IRON_TRAPDOOR_CLOSE" => Ok(Sound::BlockIronTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_IRON_TRAPDOOR_OPEN" => Ok(Sound::BlockIronTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LADDER_BREAK" => Ok(Sound::BlockLadderBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LADDER_FALL" => Ok(Sound::BlockLadderFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LADDER_HIT" => Ok(Sound::BlockLadderHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LADDER_PLACE" => Ok(Sound::BlockLadderPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LADDER_STEP" => Ok(Sound::BlockLadderStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LANTERN_BREAK" => Ok(Sound::BlockLanternBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LANTERN_FALL" => Ok(Sound::BlockLanternFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LANTERN_HIT" => Ok(Sound::BlockLanternHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LANTERN_PLACE" => Ok(Sound::BlockLanternPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LANTERN_STEP" => Ok(Sound::BlockLanternStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LARGE_AMETHYST_BUD_BREAK" => Ok(Sound::BlockLargeAmethystBudBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LARGE_AMETHYST_BUD_PLACE" => Ok(Sound::BlockLargeAmethystBudPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LAVA_AMBIENT" => Ok(Sound::BlockLavaAmbient { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LAVA_EXTINGUISH" => Ok(Sound::BlockLavaExtinguish { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LAVA_POP" => Ok(Sound::BlockLavaPop { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LEVER_CLICK" => Ok(Sound::BlockLeverClick { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LILY_PAD_PLACE" => Ok(Sound::BlockLilyPadPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LODESTONE_BREAK" => Ok(Sound::BlockLodestoneBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LODESTONE_FALL" => Ok(Sound::BlockLodestoneFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LODESTONE_HIT" => Ok(Sound::BlockLodestoneHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LODESTONE_PLACE" => Ok(Sound::BlockLodestonePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_LODESTONE_STEP" => Ok(Sound::BlockLodestoneStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MANGROVE_ROOTS_BREAK" => Ok(Sound::BlockMangroveRootsBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MANGROVE_ROOTS_FALL" => Ok(Sound::BlockMangroveRootsFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MANGROVE_ROOTS_HIT" => Ok(Sound::BlockMangroveRootsHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MANGROVE_ROOTS_PLACE" => Ok(Sound::BlockMangroveRootsPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MANGROVE_ROOTS_STEP" => Ok(Sound::BlockMangroveRootsStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MEDIUM_AMETHYST_BUD_BREAK" => Ok(Sound::BlockMediumAmethystBudBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MEDIUM_AMETHYST_BUD_PLACE" => Ok(Sound::BlockMediumAmethystBudPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_METAL_BREAK" => Ok(Sound::BlockMetalBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_METAL_FALL" => Ok(Sound::BlockMetalFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_METAL_HIT" => Ok(Sound::BlockMetalHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_METAL_PLACE" => Ok(Sound::BlockMetalPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockMetalPressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_METAL_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockMetalPressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_METAL_STEP" => Ok(Sound::BlockMetalStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MOSS_BREAK" => Ok(Sound::BlockMossBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MOSS_CARPET_BREAK" => Ok(Sound::BlockMossCarpetBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MOSS_CARPET_FALL" => Ok(Sound::BlockMossCarpetFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MOSS_CARPET_HIT" => Ok(Sound::BlockMossCarpetHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MOSS_CARPET_PLACE" => Ok(Sound::BlockMossCarpetPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MOSS_CARPET_STEP" => Ok(Sound::BlockMossCarpetStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MOSS_FALL" => Ok(Sound::BlockMossFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MOSS_HIT" => Ok(Sound::BlockMossHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MOSS_PLACE" => Ok(Sound::BlockMossPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MOSS_STEP" => Ok(Sound::BlockMossStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUDDY_MANGROVE_ROOTS_BREAK" => Ok(Sound::BlockMuddyMangroveRootsBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUDDY_MANGROVE_ROOTS_FALL" => Ok(Sound::BlockMuddyMangroveRootsFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUDDY_MANGROVE_ROOTS_HIT" => Ok(Sound::BlockMuddyMangroveRootsHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUDDY_MANGROVE_ROOTS_PLACE" => Ok(Sound::BlockMuddyMangroveRootsPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUDDY_MANGROVE_ROOTS_STEP" => Ok(Sound::BlockMuddyMangroveRootsStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUD_BREAK" => Ok(Sound::BlockMudBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUD_BRICKS_BREAK" => Ok(Sound::BlockMudBricksBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUD_BRICKS_FALL" => Ok(Sound::BlockMudBricksFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUD_BRICKS_HIT" => Ok(Sound::BlockMudBricksHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUD_BRICKS_PLACE" => Ok(Sound::BlockMudBricksPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUD_BRICKS_STEP" => Ok(Sound::BlockMudBricksStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUD_FALL" => Ok(Sound::BlockMudFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUD_HIT" => Ok(Sound::BlockMudHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUD_PLACE" => Ok(Sound::BlockMudPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_MUD_STEP" => Ok(Sound::BlockMudStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHERITE_BLOCK_BREAK" => Ok(Sound::BlockNetheriteBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHERITE_BLOCK_FALL" => Ok(Sound::BlockNetheriteBlockFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHERITE_BLOCK_HIT" => Ok(Sound::BlockNetheriteBlockHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHERITE_BLOCK_PLACE" => Ok(Sound::BlockNetheriteBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHERITE_BLOCK_STEP" => Ok(Sound::BlockNetheriteBlockStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHERRACK_BREAK" => Ok(Sound::BlockNetherrackBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHERRACK_FALL" => Ok(Sound::BlockNetherrackFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHERRACK_HIT" => Ok(Sound::BlockNetherrackHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHERRACK_PLACE" => Ok(Sound::BlockNetherrackPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHERRACK_STEP" => Ok(Sound::BlockNetherrackStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_BRICKS_BREAK" => Ok(Sound::BlockNetherBricksBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_BRICKS_FALL" => Ok(Sound::BlockNetherBricksFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_BRICKS_HIT" => Ok(Sound::BlockNetherBricksHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_BRICKS_PLACE" => Ok(Sound::BlockNetherBricksPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_BRICKS_STEP" => Ok(Sound::BlockNetherBricksStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_GOLD_ORE_BREAK" => Ok(Sound::BlockNetherGoldOreBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_GOLD_ORE_FALL" => Ok(Sound::BlockNetherGoldOreFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_GOLD_ORE_HIT" => Ok(Sound::BlockNetherGoldOreHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_GOLD_ORE_PLACE" => Ok(Sound::BlockNetherGoldOrePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_GOLD_ORE_STEP" => Ok(Sound::BlockNetherGoldOreStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_ORE_BREAK" => Ok(Sound::BlockNetherOreBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_ORE_FALL" => Ok(Sound::BlockNetherOreFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_ORE_HIT" => Ok(Sound::BlockNetherOreHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_ORE_PLACE" => Ok(Sound::BlockNetherOrePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_ORE_STEP" => Ok(Sound::BlockNetherOreStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_SPROUTS_BREAK" => Ok(Sound::BlockNetherSproutsBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_SPROUTS_FALL" => Ok(Sound::BlockNetherSproutsFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_SPROUTS_HIT" => Ok(Sound::BlockNetherSproutsHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_SPROUTS_PLACE" => Ok(Sound::BlockNetherSproutsPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_SPROUTS_STEP" => Ok(Sound::BlockNetherSproutsStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WART_BREAK" => Ok(Sound::BlockNetherWartBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_BREAK" => Ok(Sound::BlockNetherWoodBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF" => Ok(Sound::BlockNetherWoodButtonClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_BUTTON_CLICK_ON" => Ok(Sound::BlockNetherWoodButtonClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_DOOR_CLOSE" => Ok(Sound::BlockNetherWoodDoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_DOOR_OPEN" => Ok(Sound::BlockNetherWoodDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_FALL" => Ok(Sound::BlockNetherWoodFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE" => Ok(Sound::BlockNetherWoodFenceGateClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_FENCE_GATE_OPEN" => Ok(Sound::BlockNetherWoodFenceGateOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK" => Ok(Sound::BlockNetherWoodHangingSignBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_HANGING_SIGN_FALL" => Ok(Sound::BlockNetherWoodHangingSignFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_HANGING_SIGN_HIT" => Ok(Sound::BlockNetherWoodHangingSignHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE" => Ok(Sound::BlockNetherWoodHangingSignPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_HANGING_SIGN_STEP" => Ok(Sound::BlockNetherWoodHangingSignStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_HIT" => Ok(Sound::BlockNetherWoodHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_PLACE" => Ok(Sound::BlockNetherWoodPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockNetherWoodPressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockNetherWoodPressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_STEP" => Ok(Sound::BlockNetherWoodStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE" => Ok(Sound::BlockNetherWoodTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NETHER_WOOD_TRAPDOOR_OPEN" => Ok(Sound::BlockNetherWoodTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_BANJO" => Ok(Sound::BlockNoteBlockBanjo { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_BASEDRUM" => Ok(Sound::BlockNoteBlockBasedrum { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_BASS" => Ok(Sound::BlockNoteBlockBass { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_BELL" => Ok(Sound::BlockNoteBlockBell { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_BIT" => Ok(Sound::BlockNoteBlockBit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_CHIME" => Ok(Sound::BlockNoteBlockChime { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_COW_BELL" => Ok(Sound::BlockNoteBlockCowBell { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_DIDGERIDOO" => Ok(Sound::BlockNoteBlockDidgeridoo { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_FLUTE" => Ok(Sound::BlockNoteBlockFlute { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_GUITAR" => Ok(Sound::BlockNoteBlockGuitar { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_HARP" => Ok(Sound::BlockNoteBlockHarp { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_HAT" => Ok(Sound::BlockNoteBlockHat { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_IMITATE_CREEPER" => Ok(Sound::BlockNoteBlockImitateCreeper { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON" => Ok(Sound::BlockNoteBlockImitateEnderDragon { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_IMITATE_PIGLIN" => Ok(Sound::BlockNoteBlockImitatePiglin { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_IMITATE_SKELETON" => Ok(Sound::BlockNoteBlockImitateSkeleton { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON" => Ok(Sound::BlockNoteBlockImitateWitherSkeleton { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE" => Ok(Sound::BlockNoteBlockImitateZombie { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_IRON_XYLOPHONE" => Ok(Sound::BlockNoteBlockIronXylophone { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_PLING" => Ok(Sound::BlockNoteBlockPling { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_SNARE" => Ok(Sound::BlockNoteBlockSnare { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NOTE_BLOCK_XYLOPHONE" => Ok(Sound::BlockNoteBlockXylophone { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NYLIUM_BREAK" => Ok(Sound::BlockNyliumBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NYLIUM_FALL" => Ok(Sound::BlockNyliumFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NYLIUM_HIT" => Ok(Sound::BlockNyliumHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NYLIUM_PLACE" => Ok(Sound::BlockNyliumPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_NYLIUM_STEP" => Ok(Sound::BlockNyliumStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PACKED_MUD_BREAK" => Ok(Sound::BlockPackedMudBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PACKED_MUD_FALL" => Ok(Sound::BlockPackedMudFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PACKED_MUD_HIT" => Ok(Sound::BlockPackedMudHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PACKED_MUD_PLACE" => Ok(Sound::BlockPackedMudPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PACKED_MUD_STEP" => Ok(Sound::BlockPackedMudStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PINK_PETALS_BREAK" => Ok(Sound::BlockPinkPetalsBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PINK_PETALS_FALL" => Ok(Sound::BlockPinkPetalsFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PINK_PETALS_HIT" => Ok(Sound::BlockPinkPetalsHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PINK_PETALS_PLACE" => Ok(Sound::BlockPinkPetalsPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PINK_PETALS_STEP" => Ok(Sound::BlockPinkPetalsStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PISTON_CONTRACT" => Ok(Sound::BlockPistonContract { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PISTON_EXTEND" => Ok(Sound::BlockPistonExtend { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POINTED_DRIPSTONE_BREAK" => Ok(Sound::BlockPointedDripstoneBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POINTED_DRIPSTONE_DRIP_LAVA" => Ok(Sound::BlockPointedDripstoneDripLava { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON" => Ok(Sound::BlockPointedDripstoneDripLavaIntoCauldron { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POINTED_DRIPSTONE_DRIP_WATER" => Ok(Sound::BlockPointedDripstoneDripWater { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON" => Ok(Sound::BlockPointedDripstoneDripWaterIntoCauldron { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POINTED_DRIPSTONE_FALL" => Ok(Sound::BlockPointedDripstoneFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POINTED_DRIPSTONE_HIT" => Ok(Sound::BlockPointedDripstoneHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POINTED_DRIPSTONE_LAND" => Ok(Sound::BlockPointedDripstoneLand { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POINTED_DRIPSTONE_PLACE" => Ok(Sound::BlockPointedDripstonePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POINTED_DRIPSTONE_STEP" => Ok(Sound::BlockPointedDripstoneStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POLISHED_DEEPSLATE_BREAK" => Ok(Sound::BlockPolishedDeepslateBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POLISHED_DEEPSLATE_FALL" => Ok(Sound::BlockPolishedDeepslateFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POLISHED_DEEPSLATE_HIT" => Ok(Sound::BlockPolishedDeepslateHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POLISHED_DEEPSLATE_PLACE" => Ok(Sound::BlockPolishedDeepslatePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POLISHED_DEEPSLATE_STEP" => Ok(Sound::BlockPolishedDeepslateStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POLISHED_TUFF_BREAK" => Ok(Sound::BlockPolishedTuffBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POLISHED_TUFF_FALL" => Ok(Sound::BlockPolishedTuffFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POLISHED_TUFF_HIT" => Ok(Sound::BlockPolishedTuffHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POLISHED_TUFF_PLACE" => Ok(Sound::BlockPolishedTuffPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POLISHED_TUFF_STEP" => Ok(Sound::BlockPolishedTuffStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PORTAL_AMBIENT" => Ok(Sound::BlockPortalAmbient { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PORTAL_TRAVEL" => Ok(Sound::BlockPortalTravel { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PORTAL_TRIGGER" => Ok(Sound::BlockPortalTrigger { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POWDER_SNOW_BREAK" => Ok(Sound::BlockPowderSnowBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POWDER_SNOW_FALL" => Ok(Sound::BlockPowderSnowFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POWDER_SNOW_HIT" => Ok(Sound::BlockPowderSnowHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POWDER_SNOW_PLACE" => Ok(Sound::BlockPowderSnowPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_POWDER_SNOW_STEP" => Ok(Sound::BlockPowderSnowStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_PUMPKIN_CARVE" => Ok(Sound::BlockPumpkinCarve { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_REDSTONE_TORCH_BURNOUT" => Ok(Sound::BlockRedstoneTorchBurnout { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_RESPAWN_ANCHOR_AMBIENT" => Ok(Sound::BlockRespawnAnchorAmbient { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_RESPAWN_ANCHOR_CHARGE" => Ok(Sound::BlockRespawnAnchorCharge { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_RESPAWN_ANCHOR_DEPLETE" => Ok(Sound::BlockRespawnAnchorDeplete { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_RESPAWN_ANCHOR_SET_SPAWN" => Ok(Sound::BlockRespawnAnchorSetSpawn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ROOTED_DIRT_BREAK" => Ok(Sound::BlockRootedDirtBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ROOTED_DIRT_FALL" => Ok(Sound::BlockRootedDirtFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ROOTED_DIRT_HIT" => Ok(Sound::BlockRootedDirtHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ROOTED_DIRT_PLACE" => Ok(Sound::BlockRootedDirtPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ROOTED_DIRT_STEP" => Ok(Sound::BlockRootedDirtStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ROOTS_BREAK" => Ok(Sound::BlockRootsBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ROOTS_FALL" => Ok(Sound::BlockRootsFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ROOTS_HIT" => Ok(Sound::BlockRootsHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ROOTS_PLACE" => Ok(Sound::BlockRootsPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_ROOTS_STEP" => Ok(Sound::BlockRootsStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SAND_BREAK" => Ok(Sound::BlockSandBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SAND_FALL" => Ok(Sound::BlockSandFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SAND_HIT" => Ok(Sound::BlockSandHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SAND_PLACE" => Ok(Sound::BlockSandPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SAND_STEP" => Ok(Sound::BlockSandStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCAFFOLDING_BREAK" => Ok(Sound::BlockScaffoldingBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCAFFOLDING_FALL" => Ok(Sound::BlockScaffoldingFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCAFFOLDING_HIT" => Ok(Sound::BlockScaffoldingHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCAFFOLDING_PLACE" => Ok(Sound::BlockScaffoldingPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCAFFOLDING_STEP" => Ok(Sound::BlockScaffoldingStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_BREAK" => Ok(Sound::BlockSculkBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_CATALYST_BLOOM" => Ok(Sound::BlockSculkCatalystBloom { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_CATALYST_BREAK" => Ok(Sound::BlockSculkCatalystBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_CATALYST_FALL" => Ok(Sound::BlockSculkCatalystFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_CATALYST_HIT" => Ok(Sound::BlockSculkCatalystHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_CATALYST_PLACE" => Ok(Sound::BlockSculkCatalystPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_CATALYST_STEP" => Ok(Sound::BlockSculkCatalystStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_CHARGE" => Ok(Sound::BlockSculkCharge { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_FALL" => Ok(Sound::BlockSculkFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_HIT" => Ok(Sound::BlockSculkHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_PLACE" => Ok(Sound::BlockSculkPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SENSOR_BREAK" => Ok(Sound::BlockSculkSensorBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SENSOR_CLICKING" => Ok(Sound::BlockSculkSensorClicking { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SENSOR_CLICKING_STOP" => Ok(Sound::BlockSculkSensorClickingStop { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SENSOR_FALL" => Ok(Sound::BlockSculkSensorFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SENSOR_HIT" => Ok(Sound::BlockSculkSensorHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SENSOR_PLACE" => Ok(Sound::BlockSculkSensorPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SENSOR_STEP" => Ok(Sound::BlockSculkSensorStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SHRIEKER_BREAK" => Ok(Sound::BlockSculkShriekerBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SHRIEKER_FALL" => Ok(Sound::BlockSculkShriekerFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SHRIEKER_HIT" => Ok(Sound::BlockSculkShriekerHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SHRIEKER_PLACE" => Ok(Sound::BlockSculkShriekerPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SHRIEKER_SHRIEK" => Ok(Sound::BlockSculkShriekerShriek { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SHRIEKER_STEP" => Ok(Sound::BlockSculkShriekerStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_SPREAD" => Ok(Sound::BlockSculkSpread { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_STEP" => Ok(Sound::BlockSculkStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_VEIN_BREAK" => Ok(Sound::BlockSculkVeinBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_VEIN_FALL" => Ok(Sound::BlockSculkVeinFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_VEIN_HIT" => Ok(Sound::BlockSculkVeinHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_VEIN_PLACE" => Ok(Sound::BlockSculkVeinPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SCULK_VEIN_STEP" => Ok(Sound::BlockSculkVeinStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SHROOMLIGHT_BREAK" => Ok(Sound::BlockShroomlightBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SHROOMLIGHT_FALL" => Ok(Sound::BlockShroomlightFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SHROOMLIGHT_HIT" => Ok(Sound::BlockShroomlightHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SHROOMLIGHT_PLACE" => Ok(Sound::BlockShroomlightPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SHROOMLIGHT_STEP" => Ok(Sound::BlockShroomlightStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SHULKER_BOX_CLOSE" => Ok(Sound::BlockShulkerBoxClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SHULKER_BOX_OPEN" => Ok(Sound::BlockShulkerBoxOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SIGN_WAXED_INTERACT_FAIL" => Ok(Sound::BlockSignWaxedInteractFail { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SLIME_BLOCK_BREAK" => Ok(Sound::BlockSlimeBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SLIME_BLOCK_FALL" => Ok(Sound::BlockSlimeBlockFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SLIME_BLOCK_HIT" => Ok(Sound::BlockSlimeBlockHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SLIME_BLOCK_PLACE" => Ok(Sound::BlockSlimeBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SLIME_BLOCK_STEP" => Ok(Sound::BlockSlimeBlockStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SMALL_AMETHYST_BUD_BREAK" => Ok(Sound::BlockSmallAmethystBudBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SMALL_AMETHYST_BUD_PLACE" => Ok(Sound::BlockSmallAmethystBudPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SMALL_DRIPLEAF_BREAK" => Ok(Sound::BlockSmallDripleafBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SMALL_DRIPLEAF_FALL" => Ok(Sound::BlockSmallDripleafFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SMALL_DRIPLEAF_HIT" => Ok(Sound::BlockSmallDripleafHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SMALL_DRIPLEAF_PLACE" => Ok(Sound::BlockSmallDripleafPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SMALL_DRIPLEAF_STEP" => Ok(Sound::BlockSmallDripleafStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SMITHING_TABLE_USE" => Ok(Sound::BlockSmithingTableUse { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SMOKER_SMOKE" => Ok(Sound::BlockSmokerSmoke { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SNIFFER_EGG_CRACK" => Ok(Sound::BlockSnifferEggCrack { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SNIFFER_EGG_HATCH" => Ok(Sound::BlockSnifferEggHatch { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SNIFFER_EGG_PLOP" => Ok(Sound::BlockSnifferEggPlop { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SNOW_BREAK" => Ok(Sound::BlockSnowBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SNOW_FALL" => Ok(Sound::BlockSnowFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SNOW_HIT" => Ok(Sound::BlockSnowHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SNOW_PLACE" => Ok(Sound::BlockSnowPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SNOW_STEP" => Ok(Sound::BlockSnowStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SOUL_SAND_BREAK" => Ok(Sound::BlockSoulSandBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SOUL_SAND_FALL" => Ok(Sound::BlockSoulSandFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SOUL_SAND_HIT" => Ok(Sound::BlockSoulSandHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SOUL_SAND_PLACE" => Ok(Sound::BlockSoulSandPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SOUL_SAND_STEP" => Ok(Sound::BlockSoulSandStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SOUL_SOIL_BREAK" => Ok(Sound::BlockSoulSoilBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SOUL_SOIL_FALL" => Ok(Sound::BlockSoulSoilFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SOUL_SOIL_HIT" => Ok(Sound::BlockSoulSoilHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SOUL_SOIL_PLACE" => Ok(Sound::BlockSoulSoilPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SOUL_SOIL_STEP" => Ok(Sound::BlockSoulSoilStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SPONGE_ABSORB" => Ok(Sound::BlockSpongeAbsorb { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SPONGE_BREAK" => Ok(Sound::BlockSpongeBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SPONGE_FALL" => Ok(Sound::BlockSpongeFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SPONGE_HIT" => Ok(Sound::BlockSpongeHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SPONGE_PLACE" => Ok(Sound::BlockSpongePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SPONGE_STEP" => Ok(Sound::BlockSpongeStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SPORE_BLOSSOM_BREAK" => Ok(Sound::BlockSporeBlossomBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SPORE_BLOSSOM_FALL" => Ok(Sound::BlockSporeBlossomFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SPORE_BLOSSOM_HIT" => Ok(Sound::BlockSporeBlossomHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SPORE_BLOSSOM_PLACE" => Ok(Sound::BlockSporeBlossomPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SPORE_BLOSSOM_STEP" => Ok(Sound::BlockSporeBlossomStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STEM_BREAK" => Ok(Sound::BlockStemBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STEM_FALL" => Ok(Sound::BlockStemFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STEM_HIT" => Ok(Sound::BlockStemHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STEM_PLACE" => Ok(Sound::BlockStemPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STEM_STEP" => Ok(Sound::BlockStemStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STONE_BREAK" => Ok(Sound::BlockStoneBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STONE_BUTTON_CLICK_OFF" => Ok(Sound::BlockStoneButtonClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STONE_BUTTON_CLICK_ON" => Ok(Sound::BlockStoneButtonClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STONE_FALL" => Ok(Sound::BlockStoneFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STONE_HIT" => Ok(Sound::BlockStoneHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STONE_PLACE" => Ok(Sound::BlockStonePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockStonePressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STONE_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockStonePressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_STONE_STEP" => Ok(Sound::BlockStoneStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SUSPICIOUS_GRAVEL_BREAK" => Ok(Sound::BlockSuspiciousGravelBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SUSPICIOUS_GRAVEL_FALL" => Ok(Sound::BlockSuspiciousGravelFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SUSPICIOUS_GRAVEL_HIT" => Ok(Sound::BlockSuspiciousGravelHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SUSPICIOUS_GRAVEL_PLACE" => Ok(Sound::BlockSuspiciousGravelPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SUSPICIOUS_GRAVEL_STEP" => Ok(Sound::BlockSuspiciousGravelStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SUSPICIOUS_SAND_BREAK" => Ok(Sound::BlockSuspiciousSandBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SUSPICIOUS_SAND_FALL" => Ok(Sound::BlockSuspiciousSandFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SUSPICIOUS_SAND_HIT" => Ok(Sound::BlockSuspiciousSandHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SUSPICIOUS_SAND_PLACE" => Ok(Sound::BlockSuspiciousSandPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SUSPICIOUS_SAND_STEP" => Ok(Sound::BlockSuspiciousSandStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SWEET_BERRY_BUSH_BREAK" => Ok(Sound::BlockSweetBerryBushBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES" => Ok(Sound::BlockSweetBerryBushPickBerries { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_SWEET_BERRY_BUSH_PLACE" => Ok(Sound::BlockSweetBerryBushPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIAL_SPAWNER_AMBIENT" => Ok(Sound::BlockTrialSpawnerAmbient { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIAL_SPAWNER_BREAK" => Ok(Sound::BlockTrialSpawnerBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIAL_SPAWNER_CLOSE_SHUTTER" => Ok(Sound::BlockTrialSpawnerCloseShutter { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIAL_SPAWNER_DETECT_PLAYER" => Ok(Sound::BlockTrialSpawnerDetectPlayer { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIAL_SPAWNER_EJECT_ITEM" => Ok(Sound::BlockTrialSpawnerEjectItem { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIAL_SPAWNER_FALL" => Ok(Sound::BlockTrialSpawnerFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIAL_SPAWNER_HIT" => Ok(Sound::BlockTrialSpawnerHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIAL_SPAWNER_OPEN_SHUTTER" => Ok(Sound::BlockTrialSpawnerOpenShutter { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIAL_SPAWNER_PLACE" => Ok(Sound::BlockTrialSpawnerPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIAL_SPAWNER_SPAWN_MOB" => Ok(Sound::BlockTrialSpawnerSpawnMob { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIAL_SPAWNER_STEP" => Ok(Sound::BlockTrialSpawnerStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIPWIRE_ATTACH" => Ok(Sound::BlockTripwireAttach { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIPWIRE_CLICK_OFF" => Ok(Sound::BlockTripwireClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIPWIRE_CLICK_ON" => Ok(Sound::BlockTripwireClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TRIPWIRE_DETACH" => Ok(Sound::BlockTripwireDetach { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TUFF_BREAK" => Ok(Sound::BlockTuffBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TUFF_BRICKS_BREAK" => Ok(Sound::BlockTuffBricksBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TUFF_BRICKS_FALL" => Ok(Sound::BlockTuffBricksFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TUFF_BRICKS_HIT" => Ok(Sound::BlockTuffBricksHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TUFF_BRICKS_PLACE" => Ok(Sound::BlockTuffBricksPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TUFF_BRICKS_STEP" => Ok(Sound::BlockTuffBricksStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TUFF_FALL" => Ok(Sound::BlockTuffFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TUFF_HIT" => Ok(Sound::BlockTuffHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TUFF_PLACE" => Ok(Sound::BlockTuffPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_TUFF_STEP" => Ok(Sound::BlockTuffStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_VINE_BREAK" => Ok(Sound::BlockVineBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_VINE_FALL" => Ok(Sound::BlockVineFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_VINE_HIT" => Ok(Sound::BlockVineHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_VINE_PLACE" => Ok(Sound::BlockVinePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_VINE_STEP" => Ok(Sound::BlockVineStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WART_BLOCK_BREAK" => Ok(Sound::BlockWartBlockBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WART_BLOCK_FALL" => Ok(Sound::BlockWartBlockFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WART_BLOCK_HIT" => Ok(Sound::BlockWartBlockHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WART_BLOCK_PLACE" => Ok(Sound::BlockWartBlockPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WART_BLOCK_STEP" => Ok(Sound::BlockWartBlockStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WATER_AMBIENT" => Ok(Sound::BlockWaterAmbient { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WEEPING_VINES_BREAK" => Ok(Sound::BlockWeepingVinesBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WEEPING_VINES_FALL" => Ok(Sound::BlockWeepingVinesFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WEEPING_VINES_HIT" => Ok(Sound::BlockWeepingVinesHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WEEPING_VINES_PLACE" => Ok(Sound::BlockWeepingVinesPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WEEPING_VINES_STEP" => Ok(Sound::BlockWeepingVinesStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WET_GRASS_BREAK" => Ok(Sound::BlockWetGrassBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WET_GRASS_FALL" => Ok(Sound::BlockWetGrassFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WET_GRASS_HIT" => Ok(Sound::BlockWetGrassHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WET_GRASS_PLACE" => Ok(Sound::BlockWetGrassPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WET_GRASS_STEP" => Ok(Sound::BlockWetGrassStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WET_SPONGE_BREAK" => Ok(Sound::BlockWetSpongeBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WET_SPONGE_FALL" => Ok(Sound::BlockWetSpongeFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WET_SPONGE_HIT" => Ok(Sound::BlockWetSpongeHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WET_SPONGE_PLACE" => Ok(Sound::BlockWetSpongePlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WET_SPONGE_STEP" => Ok(Sound::BlockWetSpongeStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOODEN_BUTTON_CLICK_OFF" => Ok(Sound::BlockWoodenButtonClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOODEN_BUTTON_CLICK_ON" => Ok(Sound::BlockWoodenButtonClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOODEN_DOOR_CLOSE" => Ok(Sound::BlockWoodenDoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOODEN_DOOR_OPEN" => Ok(Sound::BlockWoodenDoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF" => Ok(Sound::BlockWoodenPressurePlateClickOff { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON" => Ok(Sound::BlockWoodenPressurePlateClickOn { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOODEN_TRAPDOOR_CLOSE" => Ok(Sound::BlockWoodenTrapdoorClose { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOODEN_TRAPDOOR_OPEN" => Ok(Sound::BlockWoodenTrapdoorOpen { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOOD_BREAK" => Ok(Sound::BlockWoodBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOOD_FALL" => Ok(Sound::BlockWoodFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOOD_HIT" => Ok(Sound::BlockWoodHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOOD_PLACE" => Ok(Sound::BlockWoodPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOOD_STEP" => Ok(Sound::BlockWoodStep { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOOL_BREAK" => Ok(Sound::BlockWoolBreak { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOOL_FALL" => Ok(Sound::BlockWoolFall { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOOL_HIT" => Ok(Sound::BlockWoolHit { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOOL_PLACE" => Ok(Sound::BlockWoolPlace { inner: SoundStruct::from_raw(env,obj)?}),"BLOCK_WOOL_STEP" => Ok(Sound::BlockWoolStep { inner: SoundStruct::from_raw(env,obj)?}),"ENCHANT_THORNS_HIT" => Ok(Sound::EnchantThornsHit { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM" => Ok(Sound::EntityAllayAmbientWithoutItem { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ALLAY_AMBIENT_WITH_ITEM" => Ok(Sound::EntityAllayAmbientWithItem { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ALLAY_DEATH" => Ok(Sound::EntityAllayDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ALLAY_HURT" => Ok(Sound::EntityAllayHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ALLAY_ITEM_GIVEN" => Ok(Sound::EntityAllayItemGiven { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ALLAY_ITEM_TAKEN" => Ok(Sound::EntityAllayItemTaken { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ALLAY_ITEM_THROWN" => Ok(Sound::EntityAllayItemThrown { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ARMOR_STAND_BREAK" => Ok(Sound::EntityArmorStandBreak { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ARMOR_STAND_FALL" => Ok(Sound::EntityArmorStandFall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ARMOR_STAND_HIT" => Ok(Sound::EntityArmorStandHit { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ARMOR_STAND_PLACE" => Ok(Sound::EntityArmorStandPlace { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ARROW_HIT" => Ok(Sound::EntityArrowHit { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ARROW_HIT_PLAYER" => Ok(Sound::EntityArrowHitPlayer { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ARROW_SHOOT" => Ok(Sound::EntityArrowShoot { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_AXOLOTL_ATTACK" => Ok(Sound::EntityAxolotlAttack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_AXOLOTL_DEATH" => Ok(Sound::EntityAxolotlDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_AXOLOTL_HURT" => Ok(Sound::EntityAxolotlHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_AXOLOTL_IDLE_AIR" => Ok(Sound::EntityAxolotlIdleAir { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_AXOLOTL_IDLE_WATER" => Ok(Sound::EntityAxolotlIdleWater { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_AXOLOTL_SPLASH" => Ok(Sound::EntityAxolotlSplash { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_AXOLOTL_SWIM" => Ok(Sound::EntityAxolotlSwim { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BAT_AMBIENT" => Ok(Sound::EntityBatAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BAT_DEATH" => Ok(Sound::EntityBatDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BAT_HURT" => Ok(Sound::EntityBatHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BAT_LOOP" => Ok(Sound::EntityBatLoop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BAT_TAKEOFF" => Ok(Sound::EntityBatTakeoff { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BEE_DEATH" => Ok(Sound::EntityBeeDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BEE_HURT" => Ok(Sound::EntityBeeHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BEE_LOOP" => Ok(Sound::EntityBeeLoop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BEE_LOOP_AGGRESSIVE" => Ok(Sound::EntityBeeLoopAggressive { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BEE_POLLINATE" => Ok(Sound::EntityBeePollinate { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BEE_STING" => Ok(Sound::EntityBeeSting { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BLAZE_AMBIENT" => Ok(Sound::EntityBlazeAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BLAZE_BURN" => Ok(Sound::EntityBlazeBurn { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BLAZE_DEATH" => Ok(Sound::EntityBlazeDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BLAZE_HURT" => Ok(Sound::EntityBlazeHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BLAZE_SHOOT" => Ok(Sound::EntityBlazeShoot { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BOAT_PADDLE_LAND" => Ok(Sound::EntityBoatPaddleLand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BOAT_PADDLE_WATER" => Ok(Sound::EntityBoatPaddleWater { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BREEZE_DEATH" => Ok(Sound::EntityBreezeDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BREEZE_HURT" => Ok(Sound::EntityBreezeHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BREEZE_IDLE_AIR" => Ok(Sound::EntityBreezeIdleAir { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BREEZE_IDLE_GROUND" => Ok(Sound::EntityBreezeIdleGround { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BREEZE_INHALE" => Ok(Sound::EntityBreezeInhale { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BREEZE_JUMP" => Ok(Sound::EntityBreezeJump { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BREEZE_LAND" => Ok(Sound::EntityBreezeLand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BREEZE_SHOOT" => Ok(Sound::EntityBreezeShoot { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_BREEZE_SLIDE" => Ok(Sound::EntityBreezeSlide { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAMEL_AMBIENT" => Ok(Sound::EntityCamelAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAMEL_DASH" => Ok(Sound::EntityCamelDash { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAMEL_DASH_READY" => Ok(Sound::EntityCamelDashReady { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAMEL_DEATH" => Ok(Sound::EntityCamelDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAMEL_EAT" => Ok(Sound::EntityCamelEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAMEL_HURT" => Ok(Sound::EntityCamelHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAMEL_SADDLE" => Ok(Sound::EntityCamelSaddle { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAMEL_SIT" => Ok(Sound::EntityCamelSit { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAMEL_STAND" => Ok(Sound::EntityCamelStand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAMEL_STEP" => Ok(Sound::EntityCamelStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAMEL_STEP_SAND" => Ok(Sound::EntityCamelStepSand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAT_AMBIENT" => Ok(Sound::EntityCatAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAT_BEG_FOR_FOOD" => Ok(Sound::EntityCatBegForFood { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAT_DEATH" => Ok(Sound::EntityCatDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAT_EAT" => Ok(Sound::EntityCatEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAT_HISS" => Ok(Sound::EntityCatHiss { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAT_HURT" => Ok(Sound::EntityCatHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAT_PURR" => Ok(Sound::EntityCatPurr { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAT_PURREOW" => Ok(Sound::EntityCatPurreow { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CAT_STRAY_AMBIENT" => Ok(Sound::EntityCatStrayAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CHICKEN_AMBIENT" => Ok(Sound::EntityChickenAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CHICKEN_DEATH" => Ok(Sound::EntityChickenDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CHICKEN_EGG" => Ok(Sound::EntityChickenEgg { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CHICKEN_HURT" => Ok(Sound::EntityChickenHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CHICKEN_STEP" => Ok(Sound::EntityChickenStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_COD_AMBIENT" => Ok(Sound::EntityCodAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_COD_DEATH" => Ok(Sound::EntityCodDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_COD_FLOP" => Ok(Sound::EntityCodFlop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_COD_HURT" => Ok(Sound::EntityCodHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_COW_AMBIENT" => Ok(Sound::EntityCowAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_COW_DEATH" => Ok(Sound::EntityCowDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_COW_HURT" => Ok(Sound::EntityCowHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_COW_MILK" => Ok(Sound::EntityCowMilk { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_COW_STEP" => Ok(Sound::EntityCowStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CREEPER_DEATH" => Ok(Sound::EntityCreeperDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CREEPER_HURT" => Ok(Sound::EntityCreeperHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_CREEPER_PRIMED" => Ok(Sound::EntityCreeperPrimed { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DOLPHIN_AMBIENT" => Ok(Sound::EntityDolphinAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DOLPHIN_AMBIENT_WATER" => Ok(Sound::EntityDolphinAmbientWater { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DOLPHIN_ATTACK" => Ok(Sound::EntityDolphinAttack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DOLPHIN_DEATH" => Ok(Sound::EntityDolphinDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DOLPHIN_EAT" => Ok(Sound::EntityDolphinEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DOLPHIN_HURT" => Ok(Sound::EntityDolphinHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DOLPHIN_JUMP" => Ok(Sound::EntityDolphinJump { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DOLPHIN_PLAY" => Ok(Sound::EntityDolphinPlay { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DOLPHIN_SPLASH" => Ok(Sound::EntityDolphinSplash { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DOLPHIN_SWIM" => Ok(Sound::EntityDolphinSwim { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DONKEY_AMBIENT" => Ok(Sound::EntityDonkeyAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DONKEY_ANGRY" => Ok(Sound::EntityDonkeyAngry { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DONKEY_CHEST" => Ok(Sound::EntityDonkeyChest { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DONKEY_DEATH" => Ok(Sound::EntityDonkeyDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DONKEY_EAT" => Ok(Sound::EntityDonkeyEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DONKEY_HURT" => Ok(Sound::EntityDonkeyHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DRAGON_FIREBALL_EXPLODE" => Ok(Sound::EntityDragonFireballExplode { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DROWNED_AMBIENT" => Ok(Sound::EntityDrownedAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DROWNED_AMBIENT_WATER" => Ok(Sound::EntityDrownedAmbientWater { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DROWNED_DEATH" => Ok(Sound::EntityDrownedDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DROWNED_DEATH_WATER" => Ok(Sound::EntityDrownedDeathWater { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DROWNED_HURT" => Ok(Sound::EntityDrownedHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DROWNED_HURT_WATER" => Ok(Sound::EntityDrownedHurtWater { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DROWNED_SHOOT" => Ok(Sound::EntityDrownedShoot { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DROWNED_STEP" => Ok(Sound::EntityDrownedStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_DROWNED_SWIM" => Ok(Sound::EntityDrownedSwim { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EGG_THROW" => Ok(Sound::EntityEggThrow { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ELDER_GUARDIAN_AMBIENT" => Ok(Sound::EntityElderGuardianAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ELDER_GUARDIAN_AMBIENT_LAND" => Ok(Sound::EntityElderGuardianAmbientLand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ELDER_GUARDIAN_CURSE" => Ok(Sound::EntityElderGuardianCurse { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ELDER_GUARDIAN_DEATH" => Ok(Sound::EntityElderGuardianDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ELDER_GUARDIAN_DEATH_LAND" => Ok(Sound::EntityElderGuardianDeathLand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ELDER_GUARDIAN_FLOP" => Ok(Sound::EntityElderGuardianFlop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ELDER_GUARDIAN_HURT" => Ok(Sound::EntityElderGuardianHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ELDER_GUARDIAN_HURT_LAND" => Ok(Sound::EntityElderGuardianHurtLand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDERMAN_AMBIENT" => Ok(Sound::EntityEndermanAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDERMAN_DEATH" => Ok(Sound::EntityEndermanDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDERMAN_HURT" => Ok(Sound::EntityEndermanHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDERMAN_SCREAM" => Ok(Sound::EntityEndermanScream { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDERMAN_STARE" => Ok(Sound::EntityEndermanStare { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDERMAN_TELEPORT" => Ok(Sound::EntityEndermanTeleport { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDERMITE_AMBIENT" => Ok(Sound::EntityEndermiteAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDERMITE_DEATH" => Ok(Sound::EntityEndermiteDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDERMITE_HURT" => Ok(Sound::EntityEndermiteHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDERMITE_STEP" => Ok(Sound::EntityEndermiteStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDER_DRAGON_AMBIENT" => Ok(Sound::EntityEnderDragonAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDER_DRAGON_DEATH" => Ok(Sound::EntityEnderDragonDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDER_DRAGON_FLAP" => Ok(Sound::EntityEnderDragonFlap { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDER_DRAGON_GROWL" => Ok(Sound::EntityEnderDragonGrowl { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDER_DRAGON_HURT" => Ok(Sound::EntityEnderDragonHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDER_DRAGON_SHOOT" => Ok(Sound::EntityEnderDragonShoot { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDER_EYE_DEATH" => Ok(Sound::EntityEnderEyeDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDER_EYE_LAUNCH" => Ok(Sound::EntityEnderEyeLaunch { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ENDER_PEARL_THROW" => Ok(Sound::EntityEnderPearlThrow { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EVOKER_AMBIENT" => Ok(Sound::EntityEvokerAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EVOKER_CAST_SPELL" => Ok(Sound::EntityEvokerCastSpell { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EVOKER_CELEBRATE" => Ok(Sound::EntityEvokerCelebrate { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EVOKER_DEATH" => Ok(Sound::EntityEvokerDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EVOKER_FANGS_ATTACK" => Ok(Sound::EntityEvokerFangsAttack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EVOKER_HURT" => Ok(Sound::EntityEvokerHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EVOKER_PREPARE_ATTACK" => Ok(Sound::EntityEvokerPrepareAttack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EVOKER_PREPARE_SUMMON" => Ok(Sound::EntityEvokerPrepareSummon { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EVOKER_PREPARE_WOLOLO" => Ok(Sound::EntityEvokerPrepareWololo { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EXPERIENCE_BOTTLE_THROW" => Ok(Sound::EntityExperienceBottleThrow { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_EXPERIENCE_ORB_PICKUP" => Ok(Sound::EntityExperienceOrbPickup { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FIREWORK_ROCKET_BLAST" => Ok(Sound::EntityFireworkRocketBlast { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FIREWORK_ROCKET_BLAST_FAR" => Ok(Sound::EntityFireworkRocketBlastFar { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FIREWORK_ROCKET_LARGE_BLAST" => Ok(Sound::EntityFireworkRocketLargeBlast { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR" => Ok(Sound::EntityFireworkRocketLargeBlastFar { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FIREWORK_ROCKET_LAUNCH" => Ok(Sound::EntityFireworkRocketLaunch { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FIREWORK_ROCKET_SHOOT" => Ok(Sound::EntityFireworkRocketShoot { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FIREWORK_ROCKET_TWINKLE" => Ok(Sound::EntityFireworkRocketTwinkle { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FIREWORK_ROCKET_TWINKLE_FAR" => Ok(Sound::EntityFireworkRocketTwinkleFar { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FISHING_BOBBER_RETRIEVE" => Ok(Sound::EntityFishingBobberRetrieve { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FISHING_BOBBER_SPLASH" => Ok(Sound::EntityFishingBobberSplash { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FISHING_BOBBER_THROW" => Ok(Sound::EntityFishingBobberThrow { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FISH_SWIM" => Ok(Sound::EntityFishSwim { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FOX_AGGRO" => Ok(Sound::EntityFoxAggro { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FOX_AMBIENT" => Ok(Sound::EntityFoxAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FOX_BITE" => Ok(Sound::EntityFoxBite { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FOX_DEATH" => Ok(Sound::EntityFoxDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FOX_EAT" => Ok(Sound::EntityFoxEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FOX_HURT" => Ok(Sound::EntityFoxHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FOX_SCREECH" => Ok(Sound::EntityFoxScreech { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FOX_SLEEP" => Ok(Sound::EntityFoxSleep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FOX_SNIFF" => Ok(Sound::EntityFoxSniff { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FOX_SPIT" => Ok(Sound::EntityFoxSpit { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FOX_TELEPORT" => Ok(Sound::EntityFoxTeleport { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FROG_AMBIENT" => Ok(Sound::EntityFrogAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FROG_DEATH" => Ok(Sound::EntityFrogDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FROG_EAT" => Ok(Sound::EntityFrogEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FROG_HURT" => Ok(Sound::EntityFrogHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FROG_LAY_SPAWN" => Ok(Sound::EntityFrogLaySpawn { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FROG_LONG_JUMP" => Ok(Sound::EntityFrogLongJump { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FROG_STEP" => Ok(Sound::EntityFrogStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_FROG_TONGUE" => Ok(Sound::EntityFrogTongue { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_BIG_FALL" => Ok(Sound::EntityGenericBigFall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_BURN" => Ok(Sound::EntityGenericBurn { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_DEATH" => Ok(Sound::EntityGenericDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_DRINK" => Ok(Sound::EntityGenericDrink { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_EAT" => Ok(Sound::EntityGenericEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_EXPLODE" => Ok(Sound::EntityGenericExplode { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_EXTINGUISH_FIRE" => Ok(Sound::EntityGenericExtinguishFire { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_HURT" => Ok(Sound::EntityGenericHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_SMALL_FALL" => Ok(Sound::EntityGenericSmallFall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_SPLASH" => Ok(Sound::EntityGenericSplash { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_SWIM" => Ok(Sound::EntityGenericSwim { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GENERIC_WIND_BURST" => Ok(Sound::EntityGenericWindBurst { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GHAST_AMBIENT" => Ok(Sound::EntityGhastAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GHAST_DEATH" => Ok(Sound::EntityGhastDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GHAST_HURT" => Ok(Sound::EntityGhastHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GHAST_SCREAM" => Ok(Sound::EntityGhastScream { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GHAST_SHOOT" => Ok(Sound::EntityGhastShoot { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GHAST_WARN" => Ok(Sound::EntityGhastWarn { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GLOW_ITEM_FRAME_ADD_ITEM" => Ok(Sound::EntityGlowItemFrameAddItem { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GLOW_ITEM_FRAME_BREAK" => Ok(Sound::EntityGlowItemFrameBreak { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GLOW_ITEM_FRAME_PLACE" => Ok(Sound::EntityGlowItemFramePlace { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM" => Ok(Sound::EntityGlowItemFrameRemoveItem { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM" => Ok(Sound::EntityGlowItemFrameRotateItem { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GLOW_SQUID_AMBIENT" => Ok(Sound::EntityGlowSquidAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GLOW_SQUID_DEATH" => Ok(Sound::EntityGlowSquidDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GLOW_SQUID_HURT" => Ok(Sound::EntityGlowSquidHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GLOW_SQUID_SQUIRT" => Ok(Sound::EntityGlowSquidSquirt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_AMBIENT" => Ok(Sound::EntityGoatAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_DEATH" => Ok(Sound::EntityGoatDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_EAT" => Ok(Sound::EntityGoatEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_HORN_BREAK" => Ok(Sound::EntityGoatHornBreak { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_HURT" => Ok(Sound::EntityGoatHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_LONG_JUMP" => Ok(Sound::EntityGoatLongJump { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_MILK" => Ok(Sound::EntityGoatMilk { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_PREPARE_RAM" => Ok(Sound::EntityGoatPrepareRam { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_RAM_IMPACT" => Ok(Sound::EntityGoatRamImpact { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_SCREAMING_AMBIENT" => Ok(Sound::EntityGoatScreamingAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_SCREAMING_DEATH" => Ok(Sound::EntityGoatScreamingDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_SCREAMING_EAT" => Ok(Sound::EntityGoatScreamingEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_SCREAMING_HORN_BREAK" => Ok(Sound::EntityGoatScreamingHornBreak { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_SCREAMING_HURT" => Ok(Sound::EntityGoatScreamingHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_SCREAMING_LONG_JUMP" => Ok(Sound::EntityGoatScreamingLongJump { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_SCREAMING_MILK" => Ok(Sound::EntityGoatScreamingMilk { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_SCREAMING_PREPARE_RAM" => Ok(Sound::EntityGoatScreamingPrepareRam { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_SCREAMING_RAM_IMPACT" => Ok(Sound::EntityGoatScreamingRamImpact { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GOAT_STEP" => Ok(Sound::EntityGoatStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GUARDIAN_AMBIENT" => Ok(Sound::EntityGuardianAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GUARDIAN_AMBIENT_LAND" => Ok(Sound::EntityGuardianAmbientLand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GUARDIAN_ATTACK" => Ok(Sound::EntityGuardianAttack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GUARDIAN_DEATH" => Ok(Sound::EntityGuardianDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GUARDIAN_DEATH_LAND" => Ok(Sound::EntityGuardianDeathLand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GUARDIAN_FLOP" => Ok(Sound::EntityGuardianFlop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GUARDIAN_HURT" => Ok(Sound::EntityGuardianHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_GUARDIAN_HURT_LAND" => Ok(Sound::EntityGuardianHurtLand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOGLIN_AMBIENT" => Ok(Sound::EntityHoglinAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOGLIN_ANGRY" => Ok(Sound::EntityHoglinAngry { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOGLIN_ATTACK" => Ok(Sound::EntityHoglinAttack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED" => Ok(Sound::EntityHoglinConvertedToZombified { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOGLIN_DEATH" => Ok(Sound::EntityHoglinDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOGLIN_HURT" => Ok(Sound::EntityHoglinHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOGLIN_RETREAT" => Ok(Sound::EntityHoglinRetreat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOGLIN_STEP" => Ok(Sound::EntityHoglinStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_AMBIENT" => Ok(Sound::EntityHorseAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_ANGRY" => Ok(Sound::EntityHorseAngry { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_ARMOR" => Ok(Sound::EntityHorseArmor { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_BREATHE" => Ok(Sound::EntityHorseBreathe { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_DEATH" => Ok(Sound::EntityHorseDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_EAT" => Ok(Sound::EntityHorseEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_GALLOP" => Ok(Sound::EntityHorseGallop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_HURT" => Ok(Sound::EntityHorseHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_JUMP" => Ok(Sound::EntityHorseJump { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_LAND" => Ok(Sound::EntityHorseLand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_SADDLE" => Ok(Sound::EntityHorseSaddle { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_STEP" => Ok(Sound::EntityHorseStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HORSE_STEP_WOOD" => Ok(Sound::EntityHorseStepWood { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOSTILE_BIG_FALL" => Ok(Sound::EntityHostileBigFall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOSTILE_DEATH" => Ok(Sound::EntityHostileDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOSTILE_HURT" => Ok(Sound::EntityHostileHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOSTILE_SMALL_FALL" => Ok(Sound::EntityHostileSmallFall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOSTILE_SPLASH" => Ok(Sound::EntityHostileSplash { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HOSTILE_SWIM" => Ok(Sound::EntityHostileSwim { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HUSK_AMBIENT" => Ok(Sound::EntityHuskAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HUSK_CONVERTED_TO_ZOMBIE" => Ok(Sound::EntityHuskConvertedToZombie { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HUSK_DEATH" => Ok(Sound::EntityHuskDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HUSK_HURT" => Ok(Sound::EntityHuskHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_HUSK_STEP" => Ok(Sound::EntityHuskStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ILLUSIONER_AMBIENT" => Ok(Sound::EntityIllusionerAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ILLUSIONER_CAST_SPELL" => Ok(Sound::EntityIllusionerCastSpell { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ILLUSIONER_DEATH" => Ok(Sound::EntityIllusionerDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ILLUSIONER_HURT" => Ok(Sound::EntityIllusionerHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ILLUSIONER_MIRROR_MOVE" => Ok(Sound::EntityIllusionerMirrorMove { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ILLUSIONER_PREPARE_BLINDNESS" => Ok(Sound::EntityIllusionerPrepareBlindness { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ILLUSIONER_PREPARE_MIRROR" => Ok(Sound::EntityIllusionerPrepareMirror { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_IRON_GOLEM_ATTACK" => Ok(Sound::EntityIronGolemAttack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_IRON_GOLEM_DAMAGE" => Ok(Sound::EntityIronGolemDamage { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_IRON_GOLEM_DEATH" => Ok(Sound::EntityIronGolemDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_IRON_GOLEM_HURT" => Ok(Sound::EntityIronGolemHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_IRON_GOLEM_REPAIR" => Ok(Sound::EntityIronGolemRepair { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_IRON_GOLEM_STEP" => Ok(Sound::EntityIronGolemStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ITEM_BREAK" => Ok(Sound::EntityItemBreak { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ITEM_FRAME_ADD_ITEM" => Ok(Sound::EntityItemFrameAddItem { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ITEM_FRAME_BREAK" => Ok(Sound::EntityItemFrameBreak { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ITEM_FRAME_PLACE" => Ok(Sound::EntityItemFramePlace { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ITEM_FRAME_REMOVE_ITEM" => Ok(Sound::EntityItemFrameRemoveItem { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ITEM_FRAME_ROTATE_ITEM" => Ok(Sound::EntityItemFrameRotateItem { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ITEM_PICKUP" => Ok(Sound::EntityItemPickup { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LEASH_KNOT_BREAK" => Ok(Sound::EntityLeashKnotBreak { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LEASH_KNOT_PLACE" => Ok(Sound::EntityLeashKnotPlace { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LIGHTNING_BOLT_IMPACT" => Ok(Sound::EntityLightningBoltImpact { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LIGHTNING_BOLT_THUNDER" => Ok(Sound::EntityLightningBoltThunder { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LINGERING_POTION_THROW" => Ok(Sound::EntityLingeringPotionThrow { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LLAMA_AMBIENT" => Ok(Sound::EntityLlamaAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LLAMA_ANGRY" => Ok(Sound::EntityLlamaAngry { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LLAMA_CHEST" => Ok(Sound::EntityLlamaChest { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LLAMA_DEATH" => Ok(Sound::EntityLlamaDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LLAMA_EAT" => Ok(Sound::EntityLlamaEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LLAMA_HURT" => Ok(Sound::EntityLlamaHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LLAMA_SPIT" => Ok(Sound::EntityLlamaSpit { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LLAMA_STEP" => Ok(Sound::EntityLlamaStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_LLAMA_SWAG" => Ok(Sound::EntityLlamaSwag { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MAGMA_CUBE_DEATH" => Ok(Sound::EntityMagmaCubeDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MAGMA_CUBE_DEATH_SMALL" => Ok(Sound::EntityMagmaCubeDeathSmall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MAGMA_CUBE_HURT" => Ok(Sound::EntityMagmaCubeHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MAGMA_CUBE_HURT_SMALL" => Ok(Sound::EntityMagmaCubeHurtSmall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MAGMA_CUBE_JUMP" => Ok(Sound::EntityMagmaCubeJump { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MAGMA_CUBE_SQUISH" => Ok(Sound::EntityMagmaCubeSquish { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MAGMA_CUBE_SQUISH_SMALL" => Ok(Sound::EntityMagmaCubeSquishSmall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MINECART_INSIDE" => Ok(Sound::EntityMinecartInside { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MINECART_INSIDE_UNDERWATER" => Ok(Sound::EntityMinecartInsideUnderwater { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MINECART_RIDING" => Ok(Sound::EntityMinecartRiding { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MOOSHROOM_CONVERT" => Ok(Sound::EntityMooshroomConvert { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MOOSHROOM_EAT" => Ok(Sound::EntityMooshroomEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MOOSHROOM_MILK" => Ok(Sound::EntityMooshroomMilk { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MOOSHROOM_SHEAR" => Ok(Sound::EntityMooshroomShear { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MOOSHROOM_SUSPICIOUS_MILK" => Ok(Sound::EntityMooshroomSuspiciousMilk { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MULE_AMBIENT" => Ok(Sound::EntityMuleAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MULE_ANGRY" => Ok(Sound::EntityMuleAngry { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MULE_CHEST" => Ok(Sound::EntityMuleChest { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MULE_DEATH" => Ok(Sound::EntityMuleDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MULE_EAT" => Ok(Sound::EntityMuleEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_MULE_HURT" => Ok(Sound::EntityMuleHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_OCELOT_AMBIENT" => Ok(Sound::EntityOcelotAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_OCELOT_DEATH" => Ok(Sound::EntityOcelotDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_OCELOT_HURT" => Ok(Sound::EntityOcelotHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PAINTING_BREAK" => Ok(Sound::EntityPaintingBreak { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PAINTING_PLACE" => Ok(Sound::EntityPaintingPlace { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PANDA_AGGRESSIVE_AMBIENT" => Ok(Sound::EntityPandaAggressiveAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PANDA_AMBIENT" => Ok(Sound::EntityPandaAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PANDA_BITE" => Ok(Sound::EntityPandaBite { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PANDA_CANT_BREED" => Ok(Sound::EntityPandaCantBreed { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PANDA_DEATH" => Ok(Sound::EntityPandaDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PANDA_EAT" => Ok(Sound::EntityPandaEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PANDA_HURT" => Ok(Sound::EntityPandaHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PANDA_PRE_SNEEZE" => Ok(Sound::EntityPandaPreSneeze { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PANDA_SNEEZE" => Ok(Sound::EntityPandaSneeze { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PANDA_STEP" => Ok(Sound::EntityPandaStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PANDA_WORRIED_AMBIENT" => Ok(Sound::EntityPandaWorriedAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_AMBIENT" => Ok(Sound::EntityParrotAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_DEATH" => Ok(Sound::EntityParrotDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_EAT" => Ok(Sound::EntityParrotEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_FLY" => Ok(Sound::EntityParrotFly { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_HURT" => Ok(Sound::EntityParrotHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_BLAZE" => Ok(Sound::EntityParrotImitateBlaze { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_BREEZE" => Ok(Sound::EntityParrotImitateBreeze { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_CREEPER" => Ok(Sound::EntityParrotImitateCreeper { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_DROWNED" => Ok(Sound::EntityParrotImitateDrowned { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_ELDER_GUARDIAN" => Ok(Sound::EntityParrotImitateElderGuardian { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_ENDERMITE" => Ok(Sound::EntityParrotImitateEndermite { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_ENDER_DRAGON" => Ok(Sound::EntityParrotImitateEnderDragon { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_EVOKER" => Ok(Sound::EntityParrotImitateEvoker { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_GHAST" => Ok(Sound::EntityParrotImitateGhast { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_GUARDIAN" => Ok(Sound::EntityParrotImitateGuardian { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_HOGLIN" => Ok(Sound::EntityParrotImitateHoglin { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_HUSK" => Ok(Sound::EntityParrotImitateHusk { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_ILLUSIONER" => Ok(Sound::EntityParrotImitateIllusioner { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_MAGMA_CUBE" => Ok(Sound::EntityParrotImitateMagmaCube { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_PHANTOM" => Ok(Sound::EntityParrotImitatePhantom { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_PIGLIN" => Ok(Sound::EntityParrotImitatePiglin { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_PIGLIN_BRUTE" => Ok(Sound::EntityParrotImitatePiglinBrute { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_PILLAGER" => Ok(Sound::EntityParrotImitatePillager { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_RAVAGER" => Ok(Sound::EntityParrotImitateRavager { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_SHULKER" => Ok(Sound::EntityParrotImitateShulker { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_SILVERFISH" => Ok(Sound::EntityParrotImitateSilverfish { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_SKELETON" => Ok(Sound::EntityParrotImitateSkeleton { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_SLIME" => Ok(Sound::EntityParrotImitateSlime { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_SPIDER" => Ok(Sound::EntityParrotImitateSpider { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_STRAY" => Ok(Sound::EntityParrotImitateStray { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_VEX" => Ok(Sound::EntityParrotImitateVex { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_VINDICATOR" => Ok(Sound::EntityParrotImitateVindicator { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_WARDEN" => Ok(Sound::EntityParrotImitateWarden { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_WITCH" => Ok(Sound::EntityParrotImitateWitch { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_WITHER" => Ok(Sound::EntityParrotImitateWither { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_WITHER_SKELETON" => Ok(Sound::EntityParrotImitateWitherSkeleton { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_ZOGLIN" => Ok(Sound::EntityParrotImitateZoglin { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_ZOMBIE" => Ok(Sound::EntityParrotImitateZombie { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER" => Ok(Sound::EntityParrotImitateZombieVillager { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PARROT_STEP" => Ok(Sound::EntityParrotStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PHANTOM_AMBIENT" => Ok(Sound::EntityPhantomAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PHANTOM_BITE" => Ok(Sound::EntityPhantomBite { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PHANTOM_DEATH" => Ok(Sound::EntityPhantomDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PHANTOM_FLAP" => Ok(Sound::EntityPhantomFlap { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PHANTOM_HURT" => Ok(Sound::EntityPhantomHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PHANTOM_SWOOP" => Ok(Sound::EntityPhantomSwoop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_ADMIRING_ITEM" => Ok(Sound::EntityPiglinAdmiringItem { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_AMBIENT" => Ok(Sound::EntityPiglinAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_ANGRY" => Ok(Sound::EntityPiglinAngry { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_BRUTE_AMBIENT" => Ok(Sound::EntityPiglinBruteAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_BRUTE_ANGRY" => Ok(Sound::EntityPiglinBruteAngry { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED" => Ok(Sound::EntityPiglinBruteConvertedToZombified { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_BRUTE_DEATH" => Ok(Sound::EntityPiglinBruteDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_BRUTE_HURT" => Ok(Sound::EntityPiglinBruteHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_BRUTE_STEP" => Ok(Sound::EntityPiglinBruteStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_CELEBRATE" => Ok(Sound::EntityPiglinCelebrate { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED" => Ok(Sound::EntityPiglinConvertedToZombified { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_DEATH" => Ok(Sound::EntityPiglinDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_HURT" => Ok(Sound::EntityPiglinHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_JEALOUS" => Ok(Sound::EntityPiglinJealous { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_RETREAT" => Ok(Sound::EntityPiglinRetreat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIGLIN_STEP" => Ok(Sound::EntityPiglinStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIG_AMBIENT" => Ok(Sound::EntityPigAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIG_DEATH" => Ok(Sound::EntityPigDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIG_HURT" => Ok(Sound::EntityPigHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIG_SADDLE" => Ok(Sound::EntityPigSaddle { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PIG_STEP" => Ok(Sound::EntityPigStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PILLAGER_AMBIENT" => Ok(Sound::EntityPillagerAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PILLAGER_CELEBRATE" => Ok(Sound::EntityPillagerCelebrate { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PILLAGER_DEATH" => Ok(Sound::EntityPillagerDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PILLAGER_HURT" => Ok(Sound::EntityPillagerHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_ATTACK_CRIT" => Ok(Sound::EntityPlayerAttackCrit { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_ATTACK_KNOCKBACK" => Ok(Sound::EntityPlayerAttackKnockback { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_ATTACK_NODAMAGE" => Ok(Sound::EntityPlayerAttackNodamage { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_ATTACK_STRONG" => Ok(Sound::EntityPlayerAttackStrong { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_ATTACK_SWEEP" => Ok(Sound::EntityPlayerAttackSweep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_ATTACK_WEAK" => Ok(Sound::EntityPlayerAttackWeak { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_BIG_FALL" => Ok(Sound::EntityPlayerBigFall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_BREATH" => Ok(Sound::EntityPlayerBreath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_BURP" => Ok(Sound::EntityPlayerBurp { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_DEATH" => Ok(Sound::EntityPlayerDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_HURT" => Ok(Sound::EntityPlayerHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_HURT_DROWN" => Ok(Sound::EntityPlayerHurtDrown { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_HURT_FREEZE" => Ok(Sound::EntityPlayerHurtFreeze { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_HURT_ON_FIRE" => Ok(Sound::EntityPlayerHurtOnFire { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH" => Ok(Sound::EntityPlayerHurtSweetBerryBush { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_LEVELUP" => Ok(Sound::EntityPlayerLevelup { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_SMALL_FALL" => Ok(Sound::EntityPlayerSmallFall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_SPLASH" => Ok(Sound::EntityPlayerSplash { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_SPLASH_HIGH_SPEED" => Ok(Sound::EntityPlayerSplashHighSpeed { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_SWIM" => Ok(Sound::EntityPlayerSwim { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PLAYER_TELEPORT" => Ok(Sound::EntityPlayerTeleport { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_POLAR_BEAR_AMBIENT" => Ok(Sound::EntityPolarBearAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_POLAR_BEAR_AMBIENT_BABY" => Ok(Sound::EntityPolarBearAmbientBaby { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_POLAR_BEAR_DEATH" => Ok(Sound::EntityPolarBearDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_POLAR_BEAR_HURT" => Ok(Sound::EntityPolarBearHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_POLAR_BEAR_STEP" => Ok(Sound::EntityPolarBearStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_POLAR_BEAR_WARNING" => Ok(Sound::EntityPolarBearWarning { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PUFFER_FISH_AMBIENT" => Ok(Sound::EntityPufferFishAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PUFFER_FISH_BLOW_OUT" => Ok(Sound::EntityPufferFishBlowOut { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PUFFER_FISH_BLOW_UP" => Ok(Sound::EntityPufferFishBlowUp { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PUFFER_FISH_DEATH" => Ok(Sound::EntityPufferFishDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PUFFER_FISH_FLOP" => Ok(Sound::EntityPufferFishFlop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PUFFER_FISH_HURT" => Ok(Sound::EntityPufferFishHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_PUFFER_FISH_STING" => Ok(Sound::EntityPufferFishSting { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RABBIT_AMBIENT" => Ok(Sound::EntityRabbitAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RABBIT_ATTACK" => Ok(Sound::EntityRabbitAttack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RABBIT_DEATH" => Ok(Sound::EntityRabbitDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RABBIT_HURT" => Ok(Sound::EntityRabbitHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RABBIT_JUMP" => Ok(Sound::EntityRabbitJump { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RAVAGER_AMBIENT" => Ok(Sound::EntityRavagerAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RAVAGER_ATTACK" => Ok(Sound::EntityRavagerAttack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RAVAGER_CELEBRATE" => Ok(Sound::EntityRavagerCelebrate { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RAVAGER_DEATH" => Ok(Sound::EntityRavagerDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RAVAGER_HURT" => Ok(Sound::EntityRavagerHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RAVAGER_ROAR" => Ok(Sound::EntityRavagerRoar { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RAVAGER_STEP" => Ok(Sound::EntityRavagerStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_RAVAGER_STUNNED" => Ok(Sound::EntityRavagerStunned { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SALMON_AMBIENT" => Ok(Sound::EntitySalmonAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SALMON_DEATH" => Ok(Sound::EntitySalmonDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SALMON_FLOP" => Ok(Sound::EntitySalmonFlop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SALMON_HURT" => Ok(Sound::EntitySalmonHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHEEP_AMBIENT" => Ok(Sound::EntitySheepAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHEEP_DEATH" => Ok(Sound::EntitySheepDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHEEP_HURT" => Ok(Sound::EntitySheepHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHEEP_SHEAR" => Ok(Sound::EntitySheepShear { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHEEP_STEP" => Ok(Sound::EntitySheepStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHULKER_AMBIENT" => Ok(Sound::EntityShulkerAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHULKER_BULLET_HIT" => Ok(Sound::EntityShulkerBulletHit { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHULKER_BULLET_HURT" => Ok(Sound::EntityShulkerBulletHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHULKER_CLOSE" => Ok(Sound::EntityShulkerClose { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHULKER_DEATH" => Ok(Sound::EntityShulkerDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHULKER_HURT" => Ok(Sound::EntityShulkerHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHULKER_HURT_CLOSED" => Ok(Sound::EntityShulkerHurtClosed { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHULKER_OPEN" => Ok(Sound::EntityShulkerOpen { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHULKER_SHOOT" => Ok(Sound::EntityShulkerShoot { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SHULKER_TELEPORT" => Ok(Sound::EntityShulkerTeleport { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SILVERFISH_AMBIENT" => Ok(Sound::EntitySilverfishAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SILVERFISH_DEATH" => Ok(Sound::EntitySilverfishDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SILVERFISH_HURT" => Ok(Sound::EntitySilverfishHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SILVERFISH_STEP" => Ok(Sound::EntitySilverfishStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_AMBIENT" => Ok(Sound::EntitySkeletonAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_CONVERTED_TO_STRAY" => Ok(Sound::EntitySkeletonConvertedToStray { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_DEATH" => Ok(Sound::EntitySkeletonDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_HORSE_AMBIENT" => Ok(Sound::EntitySkeletonHorseAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_HORSE_AMBIENT_WATER" => Ok(Sound::EntitySkeletonHorseAmbientWater { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_HORSE_DEATH" => Ok(Sound::EntitySkeletonHorseDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_HORSE_GALLOP_WATER" => Ok(Sound::EntitySkeletonHorseGallopWater { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_HORSE_HURT" => Ok(Sound::EntitySkeletonHorseHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_HORSE_JUMP_WATER" => Ok(Sound::EntitySkeletonHorseJumpWater { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_HORSE_STEP_WATER" => Ok(Sound::EntitySkeletonHorseStepWater { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_HORSE_SWIM" => Ok(Sound::EntitySkeletonHorseSwim { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_HURT" => Ok(Sound::EntitySkeletonHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_SHOOT" => Ok(Sound::EntitySkeletonShoot { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SKELETON_STEP" => Ok(Sound::EntitySkeletonStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SLIME_ATTACK" => Ok(Sound::EntitySlimeAttack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SLIME_DEATH" => Ok(Sound::EntitySlimeDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SLIME_DEATH_SMALL" => Ok(Sound::EntitySlimeDeathSmall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SLIME_HURT" => Ok(Sound::EntitySlimeHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SLIME_HURT_SMALL" => Ok(Sound::EntitySlimeHurtSmall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SLIME_JUMP" => Ok(Sound::EntitySlimeJump { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SLIME_JUMP_SMALL" => Ok(Sound::EntitySlimeJumpSmall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SLIME_SQUISH" => Ok(Sound::EntitySlimeSquish { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SLIME_SQUISH_SMALL" => Ok(Sound::EntitySlimeSquishSmall { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_DEATH" => Ok(Sound::EntitySnifferDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_DIGGING" => Ok(Sound::EntitySnifferDigging { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_DIGGING_STOP" => Ok(Sound::EntitySnifferDiggingStop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_DROP_SEED" => Ok(Sound::EntitySnifferDropSeed { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_EAT" => Ok(Sound::EntitySnifferEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_HAPPY" => Ok(Sound::EntitySnifferHappy { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_HURT" => Ok(Sound::EntitySnifferHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_IDLE" => Ok(Sound::EntitySnifferIdle { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_SCENTING" => Ok(Sound::EntitySnifferScenting { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_SEARCHING" => Ok(Sound::EntitySnifferSearching { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_SNIFFING" => Ok(Sound::EntitySnifferSniffing { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNIFFER_STEP" => Ok(Sound::EntitySnifferStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNOWBALL_THROW" => Ok(Sound::EntitySnowballThrow { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNOW_GOLEM_AMBIENT" => Ok(Sound::EntitySnowGolemAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNOW_GOLEM_DEATH" => Ok(Sound::EntitySnowGolemDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNOW_GOLEM_HURT" => Ok(Sound::EntitySnowGolemHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNOW_GOLEM_SHEAR" => Ok(Sound::EntitySnowGolemShear { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SNOW_GOLEM_SHOOT" => Ok(Sound::EntitySnowGolemShoot { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SPIDER_AMBIENT" => Ok(Sound::EntitySpiderAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SPIDER_DEATH" => Ok(Sound::EntitySpiderDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SPIDER_HURT" => Ok(Sound::EntitySpiderHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SPIDER_STEP" => Ok(Sound::EntitySpiderStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SPLASH_POTION_BREAK" => Ok(Sound::EntitySplashPotionBreak { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SPLASH_POTION_THROW" => Ok(Sound::EntitySplashPotionThrow { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SQUID_AMBIENT" => Ok(Sound::EntitySquidAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SQUID_DEATH" => Ok(Sound::EntitySquidDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SQUID_HURT" => Ok(Sound::EntitySquidHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_SQUID_SQUIRT" => Ok(Sound::EntitySquidSquirt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRAY_AMBIENT" => Ok(Sound::EntityStrayAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRAY_DEATH" => Ok(Sound::EntityStrayDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRAY_HURT" => Ok(Sound::EntityStrayHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRAY_STEP" => Ok(Sound::EntityStrayStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRIDER_AMBIENT" => Ok(Sound::EntityStriderAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRIDER_DEATH" => Ok(Sound::EntityStriderDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRIDER_EAT" => Ok(Sound::EntityStriderEat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRIDER_HAPPY" => Ok(Sound::EntityStriderHappy { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRIDER_HURT" => Ok(Sound::EntityStriderHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRIDER_RETREAT" => Ok(Sound::EntityStriderRetreat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRIDER_SADDLE" => Ok(Sound::EntityStriderSaddle { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRIDER_STEP" => Ok(Sound::EntityStriderStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_STRIDER_STEP_LAVA" => Ok(Sound::EntityStriderStepLava { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TADPOLE_DEATH" => Ok(Sound::EntityTadpoleDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TADPOLE_FLOP" => Ok(Sound::EntityTadpoleFlop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TADPOLE_GROW_UP" => Ok(Sound::EntityTadpoleGrowUp { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TADPOLE_HURT" => Ok(Sound::EntityTadpoleHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TNT_PRIMED" => Ok(Sound::EntityTntPrimed { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TROPICAL_FISH_AMBIENT" => Ok(Sound::EntityTropicalFishAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TROPICAL_FISH_DEATH" => Ok(Sound::EntityTropicalFishDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TROPICAL_FISH_FLOP" => Ok(Sound::EntityTropicalFishFlop { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TROPICAL_FISH_HURT" => Ok(Sound::EntityTropicalFishHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_AMBIENT_LAND" => Ok(Sound::EntityTurtleAmbientLand { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_DEATH" => Ok(Sound::EntityTurtleDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_DEATH_BABY" => Ok(Sound::EntityTurtleDeathBaby { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_EGG_BREAK" => Ok(Sound::EntityTurtleEggBreak { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_EGG_CRACK" => Ok(Sound::EntityTurtleEggCrack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_EGG_HATCH" => Ok(Sound::EntityTurtleEggHatch { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_HURT" => Ok(Sound::EntityTurtleHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_HURT_BABY" => Ok(Sound::EntityTurtleHurtBaby { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_LAY_EGG" => Ok(Sound::EntityTurtleLayEgg { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_SHAMBLE" => Ok(Sound::EntityTurtleShamble { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_SHAMBLE_BABY" => Ok(Sound::EntityTurtleShambleBaby { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_TURTLE_SWIM" => Ok(Sound::EntityTurtleSwim { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VEX_AMBIENT" => Ok(Sound::EntityVexAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VEX_CHARGE" => Ok(Sound::EntityVexCharge { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VEX_DEATH" => Ok(Sound::EntityVexDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VEX_HURT" => Ok(Sound::EntityVexHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_AMBIENT" => Ok(Sound::EntityVillagerAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_CELEBRATE" => Ok(Sound::EntityVillagerCelebrate { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_DEATH" => Ok(Sound::EntityVillagerDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_HURT" => Ok(Sound::EntityVillagerHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_NO" => Ok(Sound::EntityVillagerNo { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_TRADE" => Ok(Sound::EntityVillagerTrade { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_ARMORER" => Ok(Sound::EntityVillagerWorkArmorer { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_BUTCHER" => Ok(Sound::EntityVillagerWorkButcher { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_CARTOGRAPHER" => Ok(Sound::EntityVillagerWorkCartographer { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_CLERIC" => Ok(Sound::EntityVillagerWorkCleric { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_FARMER" => Ok(Sound::EntityVillagerWorkFarmer { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_FISHERMAN" => Ok(Sound::EntityVillagerWorkFisherman { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_FLETCHER" => Ok(Sound::EntityVillagerWorkFletcher { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_LEATHERWORKER" => Ok(Sound::EntityVillagerWorkLeatherworker { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_LIBRARIAN" => Ok(Sound::EntityVillagerWorkLibrarian { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_MASON" => Ok(Sound::EntityVillagerWorkMason { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_SHEPHERD" => Ok(Sound::EntityVillagerWorkShepherd { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_TOOLSMITH" => Ok(Sound::EntityVillagerWorkToolsmith { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_WORK_WEAPONSMITH" => Ok(Sound::EntityVillagerWorkWeaponsmith { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VILLAGER_YES" => Ok(Sound::EntityVillagerYes { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VINDICATOR_AMBIENT" => Ok(Sound::EntityVindicatorAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VINDICATOR_CELEBRATE" => Ok(Sound::EntityVindicatorCelebrate { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VINDICATOR_DEATH" => Ok(Sound::EntityVindicatorDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_VINDICATOR_HURT" => Ok(Sound::EntityVindicatorHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WANDERING_TRADER_AMBIENT" => Ok(Sound::EntityWanderingTraderAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WANDERING_TRADER_DEATH" => Ok(Sound::EntityWanderingTraderDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WANDERING_TRADER_DISAPPEARED" => Ok(Sound::EntityWanderingTraderDisappeared { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WANDERING_TRADER_DRINK_MILK" => Ok(Sound::EntityWanderingTraderDrinkMilk { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WANDERING_TRADER_DRINK_POTION" => Ok(Sound::EntityWanderingTraderDrinkPotion { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WANDERING_TRADER_HURT" => Ok(Sound::EntityWanderingTraderHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WANDERING_TRADER_NO" => Ok(Sound::EntityWanderingTraderNo { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WANDERING_TRADER_REAPPEARED" => Ok(Sound::EntityWanderingTraderReappeared { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WANDERING_TRADER_TRADE" => Ok(Sound::EntityWanderingTraderTrade { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WANDERING_TRADER_YES" => Ok(Sound::EntityWanderingTraderYes { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_AGITATED" => Ok(Sound::EntityWardenAgitated { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_AMBIENT" => Ok(Sound::EntityWardenAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_ANGRY" => Ok(Sound::EntityWardenAngry { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_ATTACK_IMPACT" => Ok(Sound::EntityWardenAttackImpact { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_DEATH" => Ok(Sound::EntityWardenDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_DIG" => Ok(Sound::EntityWardenDig { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_EMERGE" => Ok(Sound::EntityWardenEmerge { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_HEARTBEAT" => Ok(Sound::EntityWardenHeartbeat { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_HURT" => Ok(Sound::EntityWardenHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_LISTENING" => Ok(Sound::EntityWardenListening { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_LISTENING_ANGRY" => Ok(Sound::EntityWardenListeningAngry { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_NEARBY_CLOSE" => Ok(Sound::EntityWardenNearbyClose { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_NEARBY_CLOSER" => Ok(Sound::EntityWardenNearbyCloser { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_NEARBY_CLOSEST" => Ok(Sound::EntityWardenNearbyClosest { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_ROAR" => Ok(Sound::EntityWardenRoar { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_SNIFF" => Ok(Sound::EntityWardenSniff { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_SONIC_BOOM" => Ok(Sound::EntityWardenSonicBoom { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_SONIC_CHARGE" => Ok(Sound::EntityWardenSonicCharge { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_STEP" => Ok(Sound::EntityWardenStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WARDEN_TENDRIL_CLICKS" => Ok(Sound::EntityWardenTendrilClicks { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITCH_AMBIENT" => Ok(Sound::EntityWitchAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITCH_CELEBRATE" => Ok(Sound::EntityWitchCelebrate { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITCH_DEATH" => Ok(Sound::EntityWitchDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITCH_DRINK" => Ok(Sound::EntityWitchDrink { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITCH_HURT" => Ok(Sound::EntityWitchHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITCH_THROW" => Ok(Sound::EntityWitchThrow { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITHER_AMBIENT" => Ok(Sound::EntityWitherAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITHER_BREAK_BLOCK" => Ok(Sound::EntityWitherBreakBlock { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITHER_DEATH" => Ok(Sound::EntityWitherDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITHER_HURT" => Ok(Sound::EntityWitherHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITHER_SHOOT" => Ok(Sound::EntityWitherShoot { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITHER_SKELETON_AMBIENT" => Ok(Sound::EntityWitherSkeletonAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITHER_SKELETON_DEATH" => Ok(Sound::EntityWitherSkeletonDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITHER_SKELETON_HURT" => Ok(Sound::EntityWitherSkeletonHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITHER_SKELETON_STEP" => Ok(Sound::EntityWitherSkeletonStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WITHER_SPAWN" => Ok(Sound::EntityWitherSpawn { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WOLF_AMBIENT" => Ok(Sound::EntityWolfAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WOLF_DEATH" => Ok(Sound::EntityWolfDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WOLF_GROWL" => Ok(Sound::EntityWolfGrowl { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WOLF_HOWL" => Ok(Sound::EntityWolfHowl { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WOLF_HURT" => Ok(Sound::EntityWolfHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WOLF_PANT" => Ok(Sound::EntityWolfPant { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WOLF_SHAKE" => Ok(Sound::EntityWolfShake { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WOLF_STEP" => Ok(Sound::EntityWolfStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_WOLF_WHINE" => Ok(Sound::EntityWolfWhine { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOGLIN_AMBIENT" => Ok(Sound::EntityZoglinAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOGLIN_ANGRY" => Ok(Sound::EntityZoglinAngry { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOGLIN_ATTACK" => Ok(Sound::EntityZoglinAttack { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOGLIN_DEATH" => Ok(Sound::EntityZoglinDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOGLIN_HURT" => Ok(Sound::EntityZoglinHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOGLIN_STEP" => Ok(Sound::EntityZoglinStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_AMBIENT" => Ok(Sound::EntityZombieAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_ATTACK_IRON_DOOR" => Ok(Sound::EntityZombieAttackIronDoor { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR" => Ok(Sound::EntityZombieAttackWoodenDoor { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_BREAK_WOODEN_DOOR" => Ok(Sound::EntityZombieBreakWoodenDoor { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_CONVERTED_TO_DROWNED" => Ok(Sound::EntityZombieConvertedToDrowned { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_DEATH" => Ok(Sound::EntityZombieDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_DESTROY_EGG" => Ok(Sound::EntityZombieDestroyEgg { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_HORSE_AMBIENT" => Ok(Sound::EntityZombieHorseAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_HORSE_DEATH" => Ok(Sound::EntityZombieHorseDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_HORSE_HURT" => Ok(Sound::EntityZombieHorseHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_HURT" => Ok(Sound::EntityZombieHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_INFECT" => Ok(Sound::EntityZombieInfect { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_STEP" => Ok(Sound::EntityZombieStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_VILLAGER_AMBIENT" => Ok(Sound::EntityZombieVillagerAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_VILLAGER_CONVERTED" => Ok(Sound::EntityZombieVillagerConverted { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_VILLAGER_CURE" => Ok(Sound::EntityZombieVillagerCure { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_VILLAGER_DEATH" => Ok(Sound::EntityZombieVillagerDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_VILLAGER_HURT" => Ok(Sound::EntityZombieVillagerHurt { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIE_VILLAGER_STEP" => Ok(Sound::EntityZombieVillagerStep { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIFIED_PIGLIN_AMBIENT" => Ok(Sound::EntityZombifiedPiglinAmbient { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIFIED_PIGLIN_ANGRY" => Ok(Sound::EntityZombifiedPiglinAngry { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIFIED_PIGLIN_DEATH" => Ok(Sound::EntityZombifiedPiglinDeath { inner: SoundStruct::from_raw(env,obj)?}),"ENTITY_ZOMBIFIED_PIGLIN_HURT" => Ok(Sound::EntityZombifiedPiglinHurt { inner: SoundStruct::from_raw(env,obj)?}),"EVENT_RAID_HORN" => Ok(Sound::EventRaidHorn { inner: SoundStruct::from_raw(env,obj)?}),"INTENTIONALLY_EMPTY" => Ok(Sound::IntentionallyEmpty { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_ARMOR_EQUIP_CHAIN" => Ok(Sound::ItemArmorEquipChain { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_ARMOR_EQUIP_DIAMOND" => Ok(Sound::ItemArmorEquipDiamond { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_ARMOR_EQUIP_ELYTRA" => Ok(Sound::ItemArmorEquipElytra { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_ARMOR_EQUIP_GENERIC" => Ok(Sound::ItemArmorEquipGeneric { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_ARMOR_EQUIP_GOLD" => Ok(Sound::ItemArmorEquipGold { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_ARMOR_EQUIP_IRON" => Ok(Sound::ItemArmorEquipIron { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_ARMOR_EQUIP_LEATHER" => Ok(Sound::ItemArmorEquipLeather { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_ARMOR_EQUIP_NETHERITE" => Ok(Sound::ItemArmorEquipNetherite { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_ARMOR_EQUIP_TURTLE" => Ok(Sound::ItemArmorEquipTurtle { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_AXE_SCRAPE" => Ok(Sound::ItemAxeScrape { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_AXE_STRIP" => Ok(Sound::ItemAxeStrip { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_AXE_WAX_OFF" => Ok(Sound::ItemAxeWaxOff { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BONE_MEAL_USE" => Ok(Sound::ItemBoneMealUse { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BOOK_PAGE_TURN" => Ok(Sound::ItemBookPageTurn { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BOOK_PUT" => Ok(Sound::ItemBookPut { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BOTTLE_EMPTY" => Ok(Sound::ItemBottleEmpty { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BOTTLE_FILL" => Ok(Sound::ItemBottleFill { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BOTTLE_FILL_DRAGONBREATH" => Ok(Sound::ItemBottleFillDragonbreath { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BRUSH_BRUSHING_GENERIC" => Ok(Sound::ItemBrushBrushingGeneric { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BRUSH_BRUSHING_GRAVEL" => Ok(Sound::ItemBrushBrushingGravel { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE" => Ok(Sound::ItemBrushBrushingGravelComplete { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BRUSH_BRUSHING_SAND" => Ok(Sound::ItemBrushBrushingSand { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BRUSH_BRUSHING_SAND_COMPLETE" => Ok(Sound::ItemBrushBrushingSandComplete { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_EMPTY" => Ok(Sound::ItemBucketEmpty { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_EMPTY_AXOLOTL" => Ok(Sound::ItemBucketEmptyAxolotl { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_EMPTY_FISH" => Ok(Sound::ItemBucketEmptyFish { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_EMPTY_LAVA" => Ok(Sound::ItemBucketEmptyLava { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_EMPTY_POWDER_SNOW" => Ok(Sound::ItemBucketEmptyPowderSnow { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_EMPTY_TADPOLE" => Ok(Sound::ItemBucketEmptyTadpole { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_FILL" => Ok(Sound::ItemBucketFill { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_FILL_AXOLOTL" => Ok(Sound::ItemBucketFillAxolotl { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_FILL_FISH" => Ok(Sound::ItemBucketFillFish { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_FILL_LAVA" => Ok(Sound::ItemBucketFillLava { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_FILL_POWDER_SNOW" => Ok(Sound::ItemBucketFillPowderSnow { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUCKET_FILL_TADPOLE" => Ok(Sound::ItemBucketFillTadpole { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUNDLE_DROP_CONTENTS" => Ok(Sound::ItemBundleDropContents { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUNDLE_INSERT" => Ok(Sound::ItemBundleInsert { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_BUNDLE_REMOVE_ONE" => Ok(Sound::ItemBundleRemoveOne { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_CHORUS_FRUIT_TELEPORT" => Ok(Sound::ItemChorusFruitTeleport { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_CROP_PLANT" => Ok(Sound::ItemCropPlant { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_CROSSBOW_HIT" => Ok(Sound::ItemCrossbowHit { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_CROSSBOW_LOADING_END" => Ok(Sound::ItemCrossbowLoadingEnd { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_CROSSBOW_LOADING_MIDDLE" => Ok(Sound::ItemCrossbowLoadingMiddle { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_CROSSBOW_LOADING_START" => Ok(Sound::ItemCrossbowLoadingStart { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_CROSSBOW_QUICK_CHARGE_1" => Ok(Sound::ItemCrossbowQuickCharge1 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_CROSSBOW_QUICK_CHARGE_2" => Ok(Sound::ItemCrossbowQuickCharge2 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_CROSSBOW_QUICK_CHARGE_3" => Ok(Sound::ItemCrossbowQuickCharge3 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_CROSSBOW_SHOOT" => Ok(Sound::ItemCrossbowShoot { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_DYE_USE" => Ok(Sound::ItemDyeUse { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_ELYTRA_FLYING" => Ok(Sound::ItemElytraFlying { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_FIRECHARGE_USE" => Ok(Sound::ItemFirechargeUse { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_FLINTANDSTEEL_USE" => Ok(Sound::ItemFlintandsteelUse { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_GLOW_INK_SAC_USE" => Ok(Sound::ItemGlowInkSacUse { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_GOAT_HORN_PLAY" => Ok(Sound::ItemGoatHornPlay { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_GOAT_HORN_SOUND_0" => Ok(Sound::ItemGoatHornSound0 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_GOAT_HORN_SOUND_1" => Ok(Sound::ItemGoatHornSound1 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_GOAT_HORN_SOUND_2" => Ok(Sound::ItemGoatHornSound2 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_GOAT_HORN_SOUND_3" => Ok(Sound::ItemGoatHornSound3 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_GOAT_HORN_SOUND_4" => Ok(Sound::ItemGoatHornSound4 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_GOAT_HORN_SOUND_5" => Ok(Sound::ItemGoatHornSound5 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_GOAT_HORN_SOUND_6" => Ok(Sound::ItemGoatHornSound6 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_GOAT_HORN_SOUND_7" => Ok(Sound::ItemGoatHornSound7 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_HOE_TILL" => Ok(Sound::ItemHoeTill { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_HONEYCOMB_WAX_ON" => Ok(Sound::ItemHoneycombWaxOn { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_HONEY_BOTTLE_DRINK" => Ok(Sound::ItemHoneyBottleDrink { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_INK_SAC_USE" => Ok(Sound::ItemInkSacUse { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_LODESTONE_COMPASS_LOCK" => Ok(Sound::ItemLodestoneCompassLock { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_NETHER_WART_PLANT" => Ok(Sound::ItemNetherWartPlant { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_SHIELD_BLOCK" => Ok(Sound::ItemShieldBlock { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_SHIELD_BREAK" => Ok(Sound::ItemShieldBreak { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_SHOVEL_FLATTEN" => Ok(Sound::ItemShovelFlatten { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_SPYGLASS_STOP_USING" => Ok(Sound::ItemSpyglassStopUsing { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_SPYGLASS_USE" => Ok(Sound::ItemSpyglassUse { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_TOTEM_USE" => Ok(Sound::ItemTotemUse { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_TRIDENT_HIT" => Ok(Sound::ItemTridentHit { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_TRIDENT_HIT_GROUND" => Ok(Sound::ItemTridentHitGround { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_TRIDENT_RETURN" => Ok(Sound::ItemTridentReturn { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_TRIDENT_RIPTIDE_1" => Ok(Sound::ItemTridentRiptide1 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_TRIDENT_RIPTIDE_2" => Ok(Sound::ItemTridentRiptide2 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_TRIDENT_RIPTIDE_3" => Ok(Sound::ItemTridentRiptide3 { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_TRIDENT_THROW" => Ok(Sound::ItemTridentThrow { inner: SoundStruct::from_raw(env,obj)?}),"ITEM_TRIDENT_THUNDER" => Ok(Sound::ItemTridentThunder { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_CREATIVE" => Ok(Sound::MusicCreative { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_CREDITS" => Ok(Sound::MusicCredits { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_11" => Ok(Sound::MusicDisc11 { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_13" => Ok(Sound::MusicDisc13 { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_5" => Ok(Sound::MusicDisc5 { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_BLOCKS" => Ok(Sound::MusicDiscBlocks { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_CAT" => Ok(Sound::MusicDiscCat { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_CHIRP" => Ok(Sound::MusicDiscChirp { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_FAR" => Ok(Sound::MusicDiscFar { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_MALL" => Ok(Sound::MusicDiscMall { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_MELLOHI" => Ok(Sound::MusicDiscMellohi { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_OTHERSIDE" => Ok(Sound::MusicDiscOtherside { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_PIGSTEP" => Ok(Sound::MusicDiscPigstep { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_RELIC" => Ok(Sound::MusicDiscRelic { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_STAL" => Ok(Sound::MusicDiscStal { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_STRAD" => Ok(Sound::MusicDiscStrad { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_WAIT" => Ok(Sound::MusicDiscWait { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DISC_WARD" => Ok(Sound::MusicDiscWard { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_DRAGON" => Ok(Sound::MusicDragon { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_END" => Ok(Sound::MusicEnd { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_GAME" => Ok(Sound::MusicGame { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_MENU" => Ok(Sound::MusicMenu { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_NETHER_BASALT_DELTAS" => Ok(Sound::MusicNetherBasaltDeltas { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_NETHER_CRIMSON_FOREST" => Ok(Sound::MusicNetherCrimsonForest { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_NETHER_NETHER_WASTES" => Ok(Sound::MusicNetherNetherWastes { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_NETHER_SOUL_SAND_VALLEY" => Ok(Sound::MusicNetherSoulSandValley { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_NETHER_WARPED_FOREST" => Ok(Sound::MusicNetherWarpedForest { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_BADLANDS" => Ok(Sound::MusicOverworldBadlands { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_BAMBOO_JUNGLE" => Ok(Sound::MusicOverworldBambooJungle { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_CHERRY_GROVE" => Ok(Sound::MusicOverworldCherryGrove { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_DEEP_DARK" => Ok(Sound::MusicOverworldDeepDark { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_DESERT" => Ok(Sound::MusicOverworldDesert { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_DRIPSTONE_CAVES" => Ok(Sound::MusicOverworldDripstoneCaves { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_FLOWER_FOREST" => Ok(Sound::MusicOverworldFlowerForest { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_FOREST" => Ok(Sound::MusicOverworldForest { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_FROZEN_PEAKS" => Ok(Sound::MusicOverworldFrozenPeaks { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_GROVE" => Ok(Sound::MusicOverworldGrove { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_JAGGED_PEAKS" => Ok(Sound::MusicOverworldJaggedPeaks { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_JUNGLE" => Ok(Sound::MusicOverworldJungle { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_LUSH_CAVES" => Ok(Sound::MusicOverworldLushCaves { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_MEADOW" => Ok(Sound::MusicOverworldMeadow { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_OLD_GROWTH_TAIGA" => Ok(Sound::MusicOverworldOldGrowthTaiga { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_SNOWY_SLOPES" => Ok(Sound::MusicOverworldSnowySlopes { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_SPARSE_JUNGLE" => Ok(Sound::MusicOverworldSparseJungle { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_STONY_PEAKS" => Ok(Sound::MusicOverworldStonyPeaks { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_OVERWORLD_SWAMP" => Ok(Sound::MusicOverworldSwamp { inner: SoundStruct::from_raw(env,obj)?}),"MUSIC_UNDER_WATER" => Ok(Sound::MusicUnderWater { inner: SoundStruct::from_raw(env,obj)?}),"PARTICLE_SOUL_ESCAPE" => Ok(Sound::ParticleSoulEscape { inner: SoundStruct::from_raw(env,obj)?}),"UI_BUTTON_CLICK" => Ok(Sound::UiButtonClick { inner: SoundStruct::from_raw(env,obj)?}),"UI_CARTOGRAPHY_TABLE_TAKE_RESULT" => Ok(Sound::UiCartographyTableTakeResult { inner: SoundStruct::from_raw(env,obj)?}),"UI_LOOM_SELECT_PATTERN" => Ok(Sound::UiLoomSelectPattern { inner: SoundStruct::from_raw(env,obj)?}),"UI_LOOM_TAKE_RESULT" => Ok(Sound::UiLoomTakeResult { inner: SoundStruct::from_raw(env,obj)?}),"UI_STONECUTTER_SELECT_RECIPE" => Ok(Sound::UiStonecutterSelectRecipe { inner: SoundStruct::from_raw(env,obj)?}),"UI_STONECUTTER_TAKE_RESULT" => Ok(Sound::UiStonecutterTakeResult { inner: SoundStruct::from_raw(env,obj)?}),"UI_TOAST_CHALLENGE_COMPLETE" => Ok(Sound::UiToastChallengeComplete { inner: SoundStruct::from_raw(env,obj)?}),"UI_TOAST_IN" => Ok(Sound::UiToastIn { inner: SoundStruct::from_raw(env,obj)?}),"UI_TOAST_OUT" => Ok(Sound::UiToastOut { inner: SoundStruct::from_raw(env,obj)?}),"WEATHER_RAIN" => Ok(Sound::WeatherRain { inner: SoundStruct::from_raw(env,obj)?}),"WEATHER_RAIN_ABOVE" => Ok(Sound::WeatherRainAbove { inner: SoundStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for SoundStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for SoundStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate SoundStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Sound")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a SoundStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> SoundStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Sound<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Sound;");
let cls = jni.find_class("org/bukkit/Sound"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Sound::from_raw(&jni,obj
)}

	fn key(&self) 
-> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/NamespacedKey;");
let res = self.jni_ref().call_method(&self.jni_object(),"getKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::NamespacedKey::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum FireworkEffectType<'mc> {
	Ball {inner: FireworkEffectTypeStruct<'mc>},
	BallLarge {inner: FireworkEffectTypeStruct<'mc>},
	Star {inner: FireworkEffectTypeStruct<'mc>},
	Burst {inner: FireworkEffectTypeStruct<'mc>},
	Creeper {inner: FireworkEffectTypeStruct<'mc>},
}
impl<'mc> std::fmt::Display for FireworkEffectType<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           FireworkEffectType::Ball { .. } => f.write_str("BALL"),
           FireworkEffectType::BallLarge { .. } => f.write_str("BALL_LARGE"),
           FireworkEffectType::Star { .. } => f.write_str("STAR"),
           FireworkEffectType::Burst { .. } => f.write_str("BURST"),
           FireworkEffectType::Creeper { .. } => f.write_str("CREEPER"),
       }
   }
}

        impl<'mc> FireworkEffectTypeTrait<'mc> for FireworkEffectType<'mc> {}
        
        pub trait FireworkEffectTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<FireworkEffectType<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/FireworkEffect/Type");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/FireworkEffect/Type;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"BALL" => Ok(FireworkEffectType::Ball { inner: FireworkEffectTypeStruct::from_raw(env,obj)?}),
"BALL_LARGE" => Ok(FireworkEffectType::BallLarge { inner: FireworkEffectTypeStruct::from_raw(env,obj)?}),
"STAR" => Ok(FireworkEffectType::Star { inner: FireworkEffectTypeStruct::from_raw(env,obj)?}),
"BURST" => Ok(FireworkEffectType::Burst { inner: FireworkEffectTypeStruct::from_raw(env,obj)?}),
"CREEPER" => Ok(FireworkEffectType::Creeper { inner: FireworkEffectTypeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct FireworkEffectTypeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for FireworkEffectType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Ball { inner } => inner.0.clone(),
Self::BallLarge { inner } => inner.0.clone(),
Self::Star { inner } => inner.0.clone(),
Self::Burst { inner } => inner.0.clone(),
Self::Creeper { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Ball { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BallLarge { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Star { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Burst { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Creeper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for FireworkEffectType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate FireworkEffectType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/FireworkEffect/Type")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a FireworkEffectType object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "BALL" => Ok(FireworkEffectType::Ball { inner: FireworkEffectTypeStruct::from_raw(env,obj)?}),"BALL_LARGE" => Ok(FireworkEffectType::BallLarge { inner: FireworkEffectTypeStruct::from_raw(env,obj)?}),"STAR" => Ok(FireworkEffectType::Star { inner: FireworkEffectTypeStruct::from_raw(env,obj)?}),"BURST" => Ok(FireworkEffectType::Burst { inner: FireworkEffectTypeStruct::from_raw(env,obj)?}),"CREEPER" => Ok(FireworkEffectType::Creeper { inner: FireworkEffectTypeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for FireworkEffectTypeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for FireworkEffectTypeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate FireworkEffectTypeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/FireworkEffect/Type")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a FireworkEffectTypeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> FireworkEffectTypeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::FireworkEffectType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/FireworkEffect/Type;");
let cls = jni.find_class("org/bukkit/FireworkEffect/Type"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::FireworkEffectType::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum WarningWarningState<'mc> {
	On {inner: WarningWarningStateStruct<'mc>},
	Off {inner: WarningWarningStateStruct<'mc>},
	Default {inner: WarningWarningStateStruct<'mc>},
}
impl<'mc> std::fmt::Display for WarningWarningState<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           WarningWarningState::On { .. } => f.write_str("ON"),
           WarningWarningState::Off { .. } => f.write_str("OFF"),
           WarningWarningState::Default { .. } => f.write_str("DEFAULT"),
       }
   }
}

        impl<'mc> WarningWarningStateTrait<'mc> for WarningWarningState<'mc> {}
        
        pub trait WarningWarningStateTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<WarningWarningState<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Warning/WarningState");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Warning/WarningState;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"ON" => Ok(WarningWarningState::On { inner: WarningWarningStateStruct::from_raw(env,obj)?}),
"OFF" => Ok(WarningWarningState::Off { inner: WarningWarningStateStruct::from_raw(env,obj)?}),
"DEFAULT" => Ok(WarningWarningState::Default { inner: WarningWarningStateStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct WarningWarningStateStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for WarningWarningState<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::On { inner } => inner.0.clone(),
Self::Off { inner } => inner.0.clone(),
Self::Default { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::On { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Off { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Default { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for WarningWarningState<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate WarningWarningState from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Warning/WarningState")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a WarningWarningState object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "ON" => Ok(WarningWarningState::On { inner: WarningWarningStateStruct::from_raw(env,obj)?}),"OFF" => Ok(WarningWarningState::Off { inner: WarningWarningStateStruct::from_raw(env,obj)?}),"DEFAULT" => Ok(WarningWarningState::Default { inner: WarningWarningStateStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for WarningWarningStateStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for WarningWarningStateStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate WarningWarningStateStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Warning/WarningState")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a WarningWarningStateStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> WarningWarningStateStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::WarningWarningState<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Warning/WarningState;");
let cls = jni.find_class("org/bukkit/Warning/WarningState"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::WarningWarningState::from_raw(&jni,obj
)}
/// This method checks the provided warning should be printed for this
/// state
	fn print_for(&self,warning: impl Into<crate::Warning<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Warning;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(warning.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"printFor",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// This method returns the corresponding warning state for the given
/// string value.
	fn value(jni: &blackboxmc_general::SharedJNIEnv<'mc>,value: impl Into<String>) 
-> Result<crate::WarningWarningState<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/Warning/WarningState;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(value.into())?));
let cls = jni.find_class("org/bukkit/Warning/WarningState"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"value",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::WarningWarningState::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct World<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for World<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for World<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate World from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/World")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a World object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> WorldTrait<'mc> for World<'mc> {}
pub trait WorldTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Gets the {@link Block} at the given coordinates
	fn get_block_at(&self,x: i32,y: std::option::Option<i32>,z: std::option::Option<i32>) 
-> Result<crate::block::Block<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
if let Some(a) = y {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")Lorg/bukkit/block/Block;";
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockAt",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::Block::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the highest block corresponding to the {@link HeightMap} at the
/// given coordinates.
	fn get_highest_block_at(&self,location: impl Into<crate::Location<'mc>>,height_map: std::option::Option<impl Into<crate::HeightMap<'mc>>>) 
-> Result<crate::block::Block<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_1);
if let Some(a) = height_map {
sig += "Lorg/bukkit/HeightMap;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_2);
}
sig += ")Lorg/bukkit/block/Block;";
let res = self.jni_ref().call_method(&self.jni_object(),"getHighestBlockAt",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::Block::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the {@link Chunk} at the given coordinates
	fn get_chunk_at(&self,x: i32,z: std::option::Option<i32>,generate: std::option::Option<bool>) 
-> Result<crate::Chunk<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
if let Some(a) = z {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = generate {
sig += "Z";
let val_3 = jni::objects::JValueGen::Bool(a.into());
args.push(val_3);
}
sig += ")Lorg/bukkit/Chunk;";
let res = self.jni_ref().call_method(&self.jni_object(),"getChunkAt",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::Chunk::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Checks if the {@link Chunk} at the specified coordinates is loaded
	fn is_chunk_loaded(&self,x: i32,z: std::option::Option<i32>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
if let Some(a) = z {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"isChunkLoaded",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets an array of all loaded {@link Chunk}s
	fn loaded_chunks(&self) 
-> Result<crate::Chunk<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Chunk;");
let res = self.jni_ref().call_method(&self.jni_object(),"getLoadedChunks",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Chunk::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Loads the {@link Chunk} at the specified coordinates.
/// 
/// <b>This method will keep the specified chunk loaded until one of the
/// unload methods is manually called. Callers are advised to instead use
/// getChunkAt which will only temporarily load the requested chunk.</b>
	fn load_chunk(&self,x: i32,z: std::option::Option<i32>,generate: std::option::Option<bool>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
if let Some(a) = z {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = generate {
sig += "Z";
let val_3 = jni::objects::JValueGen::Bool(a.into());
args.push(val_3);
}
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"loadChunk",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if the {@link Chunk} at the specified coordinates is generated
	fn is_chunk_generated(&self,x: i32,z: i32) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(II)Z");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"isChunkGenerated",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
#[deprecated]
/// Checks if the {@link Chunk} at the specified coordinates is loaded and in use by one or more players
	fn is_chunk_in_use(&self,x: i32,z: i32) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(II)Z");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"isChunkInUse",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Safely unloads and optionally saves the {@link Chunk} at the specified
/// coordinates.
	fn unload_chunk(&self,x: i32,z: std::option::Option<i32>,save: std::option::Option<bool>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
if let Some(a) = z {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = save {
sig += "Z";
let val_3 = jni::objects::JValueGen::Bool(a.into());
args.push(val_3);
}
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"unloadChunk",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Safely queues the {@link Chunk} at the specified coordinates for
/// unloading.
	fn unload_chunk_request(&self,x: i32,z: i32) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(II)Z");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"unloadChunkRequest",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
#[deprecated]
/// Regenerates the {@link Chunk} at the specified coordinates
	fn regenerate_chunk(&self,x: i32,z: i32) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(II)Z");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"regenerateChunk",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
#[deprecated]
/// Resends the {@link Chunk} to all clients
	fn refresh_chunk(&self,x: i32,z: i32) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(II)Z");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"refreshChunk",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the chunk at the specified chunk coordinates is force
/// loaded.
/// 
/// A force loaded chunk will not be unloaded due to lack of player activity.
	fn is_chunk_force_loaded(&self,x: i32,z: i32) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(II)Z");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"isChunkForceLoaded",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Sets whether the chunk at the specified chunk coordinates is force
/// loaded.
/// 
/// A force loaded chunk will not be unloaded due to lack of player activity.
	fn set_chunk_force_loaded(&self,x: i32,z: i32,forced: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(IIZ)V");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let val_3 = jni::objects::JValueGen::Bool(forced.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setChunkForceLoaded",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Returns all force loaded chunks in this world.
/// 
/// A force loaded chunk will not be unloaded due to lack of player activity.
	fn force_loaded_chunks(&self) 
-> Result<Vec<crate::Chunk<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Collection;");
let res = self.jni_ref().call_method(&self.jni_object(),"getForceLoadedChunks",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&self.jni_ref(),res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::Chunk::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Adds a plugin ticket for the specified chunk, loading the chunk if it is
/// not already loaded.
/// 
/// A plugin ticket will prevent a chunk from unloading until it is
/// explicitly removed. A plugin instance may only have one ticket per chunk,
/// but each chunk can have multiple plugin tickets.
/// 
	fn add_plugin_chunk_ticket(&self,x: i32,z: i32,plugin: impl Into<crate::plugin::Plugin<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(IILorg/bukkit/plugin/Plugin;)Z");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(plugin.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"addPluginChunkTicket",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Removes the specified plugin's ticket for the specified chunk
/// 
/// A plugin ticket will prevent a chunk from unloading until it is
/// explicitly removed. A plugin instance may only have one ticket per chunk,
/// but each chunk can have multiple plugin tickets.
/// 
	fn remove_plugin_chunk_ticket(&self,x: i32,z: i32,plugin: impl Into<crate::plugin::Plugin<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(IILorg/bukkit/plugin/Plugin;)Z");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(plugin.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"removePluginChunkTicket",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Removes all plugin tickets for the specified plugin
/// 
/// A plugin ticket will prevent a chunk from unloading until it is
/// explicitly removed. A plugin instance may only have one ticket per chunk,
/// but each chunk can have multiple plugin tickets.
/// 
	fn remove_plugin_chunk_tickets(&self,plugin: impl Into<crate::plugin::Plugin<'mc>>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/plugin/Plugin;)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(plugin.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"removePluginChunkTickets",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Returns a map of which plugins have tickets for what chunks. The returned
/// map is not updated when plugin tickets are added or removed to chunks. If
/// a plugin has no tickets, it will be absent from the map.
/// 
/// A plugin ticket will prevent a chunk from unloading until it is
/// explicitly removed. A plugin instance may only have one ticket per chunk,
/// but each chunk can have multiple plugin tickets.
/// 
	fn plugin_chunk_tickets(&self) 
-> Result<blackboxmc_java::util::JavaMap<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Map;");
let res = self.jni_ref().call_method(&self.jni_object(),"getPluginChunkTickets",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaMap::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets all Chunks intersecting the given BoundingBox.
	fn get_intersecting_chunks(&self,val_box: impl Into<crate::util::BoundingBox<'mc>>) 
-> Result<Vec<crate::Chunk<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/util/BoundingBox;)Ljava/util/Collection;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(val_box.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getIntersectingChunks",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&self.jni_ref(),res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::Chunk::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Drops an item at the specified {@link Location}
/// Note that functions will run before the entity is spawned
	fn drop_item(&self,location: impl Into<crate::Location<'mc>>,item: impl Into<crate::inventory::ItemStack<'mc>>,function: std::option::Option<impl Into<blackboxmc_java::util::function::JavaConsumer<'mc>>>) 
-> Result<crate::entity::Item<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/inventory/ItemStack;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(item.into().jni_object().clone())});
args.push(val_2);
if let Some(a) = function {
sig += "Ljava/util/function/Consumer;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_3);
}
sig += ")Lorg/bukkit/entity/Item;";
let res = self.jni_ref().call_method(&self.jni_object(),"dropItem",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::entity::Item::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Drops an item at the specified {@link Location} with a random offset
/// Note that functions will run before the entity is spawned
	fn drop_item_naturally(&self,location: impl Into<crate::Location<'mc>>,item: impl Into<crate::inventory::ItemStack<'mc>>,function: std::option::Option<impl Into<blackboxmc_java::util::function::JavaConsumer<'mc>>>) 
-> Result<crate::entity::Item<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/inventory/ItemStack;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(item.into().jni_object().clone())});
args.push(val_2);
if let Some(a) = function {
sig += "Ljava/util/function/Consumer;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_3);
}
sig += ")Lorg/bukkit/entity/Item;";
let res = self.jni_ref().call_method(&self.jni_object(),"dropItemNaturally",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::entity::Item::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Creates an arrow entity of the given class at the given {@link Location}
	fn spawn_arrow(&self,location: impl Into<crate::Location<'mc>>,direction: impl Into<crate::util::Vector<'mc>>,speed: f32,spread: f32,clazz: std::option::Option<jni::objects::JClass<'mc>>) 
-> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/util/Vector;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(direction.into().jni_object().clone())});
args.push(val_2);
sig += "F";
let val_3 = jni::objects::JValueGen::Float(speed);
args.push(val_3);
sig += "F";
let val_4 = jni::objects::JValueGen::Float(spread);
args.push(val_4);
if let Some(a) = clazz {
sig += "Ljava/lang/Class;";
let val_5 = jni::objects::JValueGen::Object(a.into());
args.push(val_5);
}
sig += ")LT;";
let res = self.jni_ref().call_method(&self.jni_object(),"spawnArrow",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.l()?
)}
#[deprecated]
/// Creates a tree at the given {@link Location}
	fn generate_tree(&self,loc: impl Into<crate::Location<'mc>>,val_type: impl Into<crate::TreeType<'mc>>,delegate: std::option::Option<impl Into<crate::BlockChangeDelegate<'mc>>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(loc.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/TreeType;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(val_type.into().jni_object().clone())});
args.push(val_2);
if let Some(a) = delegate {
sig += "Lorg/bukkit/BlockChangeDelegate;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_3);
}
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"generateTree",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Strikes lightning at the given {@link Location}
	fn strike_lightning(&self,loc: impl Into<crate::Location<'mc>>) 
-> Result<crate::entity::LightningStrike<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Location;)Lorg/bukkit/entity/LightningStrike;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(loc.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"strikeLightning",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::entity::LightningStrike::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Strikes lightning at the given {@link Location} without doing damage
	fn strike_lightning_effect(&self,loc: impl Into<crate::Location<'mc>>) 
-> Result<crate::entity::LightningStrike<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Location;)Lorg/bukkit/entity/LightningStrike;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(loc.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"strikeLightningEffect",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::entity::LightningStrike::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Get a list of all entities in this World
	fn entities(&self) 
-> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getEntities",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Get a list of all living entities in this World
	fn living_entities(&self) 
-> Result<Vec<crate::entity::LivingEntity<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getLivingEntities",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::LivingEntity::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Get a collection of all entities in this World matching the given
/// class/interface
	fn get_entities_by_class(&self,cls: jni::objects::JClass<'mc>) 
-> Result<Vec<jni::objects::JObject<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/lang/Class;";
let val_1 = jni::objects::JValueGen::Object(cls.into());
args.push(val_1);
sig += ")Ljava/util/Collection;";
let res = self.jni_ref().call_method(&self.jni_object(),"getEntitiesByClass",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&self.jni_ref(),res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(obj);
};
Ok(
new_vec
)}
/// Get a collection of all entities in this World matching any of the
/// given classes/interfaces
	fn get_entities_by_classes(&self,classes: jni::objects::JClass<'mc>) 
-> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Class;)Ljava/util/Collection;");
let val_1 = jni::objects::JValueGen::Object(classes.into());
let res = self.jni_ref().call_method(&self.jni_object(),"getEntitiesByClasses",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&self.jni_ref(),res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Get a list of all players in this World
	fn players(&self) 
-> Result<Vec<crate::entity::Player<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getPlayers",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Player::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Returns a list of entities within a bounding box centered around a
/// Location.
/// 
/// This may not consider entities in currently unloaded chunks. Some
/// implementations may impose artificial restrictions on the size of the
/// search bounding box.
	fn get_nearby_entities(&self,location: impl Into<crate::Location<'mc>>,x: std::option::Option<f64>,y: std::option::Option<f64>,z: std::option::Option<f64>,filter: std::option::Option<impl Into<blackboxmc_java::util::function::JavaPredicate<'mc>>>) 
-> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_1);
if let Some(a) = x {
sig += "D";
let val_2 = jni::objects::JValueGen::Double(a);
args.push(val_2);
}
if let Some(a) = y {
sig += "D";
let val_3 = jni::objects::JValueGen::Double(a);
args.push(val_3);
}
if let Some(a) = z {
sig += "D";
let val_4 = jni::objects::JValueGen::Double(a);
args.push(val_4);
}
if let Some(a) = filter {
sig += "Ljava/util/function/Predicate;";
let val_5 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_5);
}
sig += ")Ljava/util/Collection;";
let res = self.jni_ref().call_method(&self.jni_object(),"getNearbyEntities",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&self.jni_ref(),res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Performs a ray trace that checks for entity collisions.
/// 
/// This may not consider entities in currently unloaded chunks. Some
/// implementations may impose artificial restrictions on the maximum
/// distance.
	fn ray_trace_entities(&self,start: impl Into<crate::Location<'mc>>,direction: impl Into<crate::util::Vector<'mc>>,max_distance: f64,ray_size: std::option::Option<f64>,filter: std::option::Option<impl Into<blackboxmc_java::util::function::JavaPredicate<'mc>>>) 
-> Result<Option<crate::util::RayTraceResult<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(start.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/util/Vector;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(direction.into().jni_object().clone())});
args.push(val_2);
sig += "D";
let val_3 = jni::objects::JValueGen::Double(max_distance);
args.push(val_3);
if let Some(a) = ray_size {
sig += "D";
let val_4 = jni::objects::JValueGen::Double(a);
args.push(val_4);
}
if let Some(a) = filter {
sig += "Ljava/util/function/Predicate;";
let val_5 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_5);
}
sig += ")Lorg/bukkit/util/RayTraceResult;";
let res = self.jni_ref().call_method(&self.jni_object(),"rayTraceEntities",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::util::RayTraceResult::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Performs a ray trace that checks for block collisions using the blocks'
/// precise collision shapes.
/// 
/// If collisions with passable blocks are ignored, fluid collisions are
/// ignored as well regardless of the fluid collision mode.
/// 
/// Portal blocks are only considered passable if the ray starts within
/// them. Apart from that collisions with portal blocks will be considered
/// even if collisions with passable blocks are otherwise ignored.
/// 
/// This may cause loading of chunks! Some implementations may impose
/// artificial restrictions on the maximum distance.
	fn ray_trace_blocks(&self,start: impl Into<crate::Location<'mc>>,direction: impl Into<crate::util::Vector<'mc>>,max_distance: f64,fluid_collision_mode: std::option::Option<impl Into<crate::FluidCollisionMode<'mc>>>,ignore_passable_blocks: std::option::Option<bool>) 
-> Result<Option<crate::util::RayTraceResult<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(start.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/util/Vector;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(direction.into().jni_object().clone())});
args.push(val_2);
sig += "D";
let val_3 = jni::objects::JValueGen::Double(max_distance);
args.push(val_3);
if let Some(a) = fluid_collision_mode {
sig += "Lorg/bukkit/FluidCollisionMode;";
let val_4 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_4);
}
if let Some(a) = ignore_passable_blocks {
sig += "Z";
let val_5 = jni::objects::JValueGen::Bool(a.into());
args.push(val_5);
}
sig += ")Lorg/bukkit/util/RayTraceResult;";
let res = self.jni_ref().call_method(&self.jni_object(),"rayTraceBlocks",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::util::RayTraceResult::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Performs a ray trace that checks for both block and entity collisions.
/// 
/// Block collisions use the blocks' precise collision shapes. The
/// <code>raySize</code> parameter is only taken into account for entity
/// collision checks.
/// 
/// If collisions with passable blocks are ignored, fluid collisions are
/// ignored as well regardless of the fluid collision mode.
/// 
/// Portal blocks are only considered passable if the ray starts within them.
/// Apart from that collisions with portal blocks will be considered even if
/// collisions with passable blocks are otherwise ignored.
/// 
/// This may cause loading of chunks! Some implementations may impose
/// artificial restrictions on the maximum distance.
	fn ray_trace(&self,start: impl Into<crate::Location<'mc>>,direction: impl Into<crate::util::Vector<'mc>>,max_distance: f64,fluid_collision_mode: impl Into<crate::FluidCollisionMode<'mc>>,ignore_passable_blocks: bool,ray_size: f64,filter: impl Into<blackboxmc_java::util::function::JavaPredicate<'mc>>) 
-> Result<Option<crate::util::RayTraceResult<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Location;Lorg/bukkit/util/Vector;DLorg/bukkit/FluidCollisionMode;ZDLjava/util/function/Predicate;)Lorg/bukkit/util/RayTraceResult;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(start.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(direction.into().jni_object().clone())});
let val_3 = jni::objects::JValueGen::Double(max_distance);
let val_4 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(fluid_collision_mode.into().jni_object().clone())});
let val_5 = jni::objects::JValueGen::Bool(ignore_passable_blocks.into());
let val_6 = jni::objects::JValueGen::Double(ray_size);
let val_7 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(filter.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"rayTrace",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3),jni::objects::JValueGen::from(val_4),jni::objects::JValueGen::from(val_5),jni::objects::JValueGen::from(val_6),jni::objects::JValueGen::from(val_7)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::util::RayTraceResult::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Gets the default spawn {@link Location} of this world
	fn spawn_location(&self) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Location;");
let res = self.jni_ref().call_method(&self.jni_object(),"getSpawnLocation",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the spawn location of the world
	fn set_spawn_location(&self,x: i32,y: std::option::Option<i32>,z: std::option::Option<i32>,angle: std::option::Option<f32>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
if let Some(a) = y {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
if let Some(a) = angle {
sig += "F";
let val_4 = jni::objects::JValueGen::Float(a);
args.push(val_4);
}
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"setSpawnLocation",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the relative in-game time of this world.
/// 
/// The relative time is analogous to hours * 1000
	fn time(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getTime",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
/// Sets the relative in-game time on the server.
/// 
/// The relative time is analogous to hours * 1000
/// 
/// Note that setting the relative time below the current relative time
/// will actually move the clock forward a day. If you require to rewind
/// time, please see {@link #setFullTime(long)}
	fn set_time(&self,time: i64) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(J)V");
let val_1 = jni::objects::JValueGen::Long(time);
let res = self.jni_ref().call_method(&self.jni_object(),"setTime",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the full in-game time on this world
	fn full_time(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getFullTime",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
/// Sets the in-game time on the server
/// 
/// Note that this sets the full time of the world, which may cause adverse
/// effects such as breaking redstone clocks and any scheduled events
	fn set_full_time(&self,time: i64) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(J)V");
let val_1 = jni::objects::JValueGen::Long(time);
let res = self.jni_ref().call_method(&self.jni_object(),"setFullTime",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the full in-game time on this world since the world generation
	fn game_time(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getGameTime",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
/// Returns whether the world has an ongoing storm.
	fn has_storm(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"hasStorm",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Set whether there is a storm. A duration will be set for the new
/// current conditions.
/// This will implicitly call {@link #setClearWeatherDuration(int)} with 0
/// ticks to reset the world's clear weather.
	fn set_storm(&self,has_storm: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(has_storm.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setStorm",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Get the remaining time in ticks of the current conditions.
	fn weather_duration(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getWeatherDuration",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Set the remaining time in ticks of the current conditions.
	fn set_weather_duration(&self,duration: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(duration);
let res = self.jni_ref().call_method(&self.jni_object(),"setWeatherDuration",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Returns whether there is thunder.
	fn is_thundering(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isThundering",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Set whether it is thundering.
/// This will implicitly call {@link #setClearWeatherDuration(int)} with 0
/// ticks to reset the world's clear weather.
	fn set_thundering(&self,thundering: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(thundering.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setThundering",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Get the thundering duration.
	fn thunder_duration(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getThunderDuration",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Set the thundering duration.
	fn set_thunder_duration(&self,duration: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(duration);
let res = self.jni_ref().call_method(&self.jni_object(),"setThunderDuration",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Returns whether the world has clear weather.
/// This will be true such that {@link #isThundering()} and
/// {@link #hasStorm()} are both false.
	fn is_clear_weather(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isClearWeather",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Set the clear weather duration.
/// The clear weather ticks determine whether or not the world will be
/// allowed to rain or storm. If clear weather ticks are &gt; 0, the world will
/// not naturally do either until the duration has elapsed.
/// This method is equivalent to calling {@code /weather clear} with a set
/// amount of ticks.
	fn set_clear_weather_duration(&self,duration: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(duration);
let res = self.jni_ref().call_method(&self.jni_object(),"setClearWeatherDuration",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Get the clear weather duration.
	fn clear_weather_duration(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getClearWeatherDuration",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Creates explosion at given coordinates with given power and optionally
/// setting blocks on fire or breaking blocks.
	fn create_explosion(&self,loc: impl Into<crate::Location<'mc>>,power: f32,set_fire: std::option::Option<bool>,break_blocks: std::option::Option<bool>,source: std::option::Option<impl Into<crate::entity::Entity<'mc>>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(loc.into().jni_object().clone())});
args.push(val_1);
sig += "F";
let val_2 = jni::objects::JValueGen::Float(power);
args.push(val_2);
if let Some(a) = set_fire {
sig += "Z";
let val_3 = jni::objects::JValueGen::Bool(a.into());
args.push(val_3);
}
if let Some(a) = break_blocks {
sig += "Z";
let val_4 = jni::objects::JValueGen::Bool(a.into());
args.push(val_4);
}
if let Some(a) = source {
sig += "Lorg/bukkit/entity/Entity;";
let val_5 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_5);
}
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"createExplosion",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the current PVP setting for this world.
	fn pvp(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"getPVP",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Sets the PVP setting for this world.
	fn set_pvp(&self,pvp: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(pvp.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setPVP",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the chunk generator for this world
	fn generator(&self) 
-> Result<Option<crate::generator::ChunkGenerator<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/generator/ChunkGenerator;");
let res = self.jni_ref().call_method(&self.jni_object(),"getGenerator",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::generator::ChunkGenerator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Gets the biome provider for this world
	fn biome_provider(&self) 
-> Result<Option<crate::generator::BiomeProvider<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/generator/BiomeProvider;");
let res = self.jni_ref().call_method(&self.jni_object(),"getBiomeProvider",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::generator::BiomeProvider::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Saves world to disk
	fn save(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"save",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets a list of all applied {@link BlockPopulator}s for this World
	fn populators(&self) 
-> Result<Vec<crate::generator::BlockPopulator<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getPopulators",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::generator::BlockPopulator::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Creates a new entity at the given {@link Location} with the supplied
/// function run before the entity is added to the world.
/// 
/// Note that when the function is run, the entity will not be actually in
/// the world. Any operation involving such as teleporting the entity is undefined
/// until after this function returns.
/// The passed function however is run after the potential entity's spawn
/// randomization and hence already allows access to the values of the mob,
/// whether or not those were randomized, such as attributes or the entity
/// equipment.
	fn spawn(&self,location: impl Into<crate::Location<'mc>>,clazz: jni::objects::JClass<'mc>,spawn_reason: impl Into<crate::event::entity::CreatureSpawnEventSpawnReason<'mc>>,randomize_data: bool,function: impl Into<blackboxmc_java::util::function::JavaConsumer<'mc>>) 
-> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Location;Ljava/lang/Class;Lorg/bukkit/event/entity/CreatureSpawnEvent/SpawnReason;ZLjava/util/function/Consumer;)LT;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(clazz.into());
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(spawn_reason.into().jni_object().clone())});
let val_4 = jni::objects::JValueGen::Bool(randomize_data.into());
let val_5 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(function.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"spawn",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3),jni::objects::JValueGen::from(val_4),jni::objects::JValueGen::from(val_5)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.l()?
)}
#[deprecated]
/// Spawn a {@link FallingBlock} entity at the given {@link Location} of the specified {@link Material}. The material dictates what is falling. When the FallingBlock hits the ground, it will place that block.The Material must be a block type, check with {@link Material#isBlock() material.isBlock()}. The Material may not be air.
	fn spawn_falling_block(&self,location: impl Into<crate::Location<'mc>>,material: impl Into<crate::Material<'mc>>,data: std::option::Option<i8>) 
-> Result<crate::entity::FallingBlock<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/Material;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(material.into().jni_object().clone())});
args.push(val_2);
if let Some(a) = data {
sig += "B";
let val_3 = jni::objects::JValueGen::Byte(a);
args.push(val_3);
}
sig += ")Lorg/bukkit/entity/FallingBlock;";
let res = self.jni_ref().call_method(&self.jni_object(),"spawnFallingBlock",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::entity::FallingBlock::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Plays an effect to all players within a given radius around a location.
	fn play_effect(&self,location: impl Into<crate::Location<'mc>>,effect: impl Into<crate::Effect<'mc>>,data: jni::objects::JObject<'mc>,radius: std::option::Option<i32>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/Effect;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(effect.into().jni_object().clone())});
args.push(val_2);
sig += "LT;";
let val_3 = jni::objects::JValueGen::Object(data);
args.push(val_3);
if let Some(a) = radius {
sig += "I";
let val_4 = jni::objects::JValueGen::Int(a);
args.push(val_4);
}
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"playEffect",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Get empty chunk snapshot (equivalent to all air blocks), optionally
/// including valid biome data. Used for representing an ungenerated chunk,
/// or for fetching only biome data without loading a chunk.
	fn get_empty_chunk_snapshot(&self,x: i32,z: i32,include_biome: bool,include_biome_temp: bool) 
-> Result<crate::ChunkSnapshot<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(IIZZ)Lorg/bukkit/ChunkSnapshot;");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let val_3 = jni::objects::JValueGen::Bool(include_biome.into());
let val_4 = jni::objects::JValueGen::Bool(include_biome_temp.into());
let res = self.jni_ref().call_method(&self.jni_object(),"getEmptyChunkSnapshot",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3),jni::objects::JValueGen::from(val_4)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::ChunkSnapshot::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the spawn flags for this.
	fn set_spawn_flags(&self,allow_monsters: bool,allow_animals: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(ZZ)V");
let val_1 = jni::objects::JValueGen::Bool(allow_monsters.into());
let val_2 = jni::objects::JValueGen::Bool(allow_animals.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setSpawnFlags",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets whether animals can spawn in this world.
	fn allow_animals(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"getAllowAnimals",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether monsters can spawn in this world.
	fn allow_monsters(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"getAllowMonsters",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
#[deprecated]
/// Gets the biome for the given block coordinates.
	fn get_biome(&self,x: i32,z: i32) 
-> Result<crate::block::Biome<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(II)Lorg/bukkit/block/Biome;");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"getBiome",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::Biome::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
#[deprecated]
/// Sets the biome for the given block coordinates
	fn set_biome(&self,x: i32,z: i32,bio: impl Into<crate::block::Biome<'mc>>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(IILorg/bukkit/block/Biome;)V");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(bio.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"setBiome",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the temperature for the given block coordinates.
/// 
/// It is safe to run this method when the block does not exist, it will
/// not create the block.
/// 
/// This method will return the raw temperature without adjusting for block
/// height effects.
	fn get_temperature(&self,x: i32,y: i32,z: std::option::Option<i32>) 
-> Result<f64, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
sig += "I";
let val_2 = jni::objects::JValueGen::Int(y);
args.push(val_2);
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")D";
let res = self.jni_ref().call_method(&self.jni_object(),"getTemperature",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Gets the humidity for the given block coordinates.
/// 
/// It is safe to run this method when the block does not exist, it will
/// not create the block.
	fn get_humidity(&self,x: i32,y: i32,z: std::option::Option<i32>) 
-> Result<f64, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
sig += "I";
let val_2 = jni::objects::JValueGen::Int(y);
args.push(val_2);
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")D";
let res = self.jni_ref().call_method(&self.jni_object(),"getHumidity",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Gets the maximum height to which chorus fruits and nether portals can
/// bring players within this dimension.
/// This excludes portals that were already built above the limit as they
/// still connect normally. May not be greater than {@link #getMaxHeight()}.
	fn logical_height(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getLogicalHeight",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets if this world is natural.
/// When false, compasses spin randomly, and using a bed to set the respawn
/// point or sleep, is disabled. When true, nether portals can spawn
/// zombified piglins.
	fn is_natural(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isNatural",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets if beds work in this world.
/// A non-working bed will blow up when trying to sleep. {@link #isNatural()}
/// defines if a bed can be used to set spawn point.
	fn is_bed_works(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isBedWorks",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets if this world has skylight access.
	fn has_sky_light(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"hasSkyLight",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets if this world has a ceiling.
	fn has_ceiling(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"hasCeiling",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets if this world allow to piglins to survive without shaking and
/// transforming to zombified piglins.
	fn is_piglin_safe(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isPiglinSafe",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets if this world allows players to charge and use respawn anchors.
	fn is_respawn_anchor_works(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isRespawnAnchorWorks",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets if players with the bad omen effect in this world will trigger a
/// raid.
	fn has_raids(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"hasRaids",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets if various water/lava mechanics will be triggered in this world, eg:
/// 
/// <ul>
/// <li>Water is evaporated</li>
/// <li>Sponges dry</li>
/// <li>Lava spreads faster and further</li>
/// </ul>
	fn is_ultra_warm(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isUltraWarm",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the sea level for this world.
/// 
/// This is often half of {@link #getMaxHeight()}
	fn sea_level(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getSeaLevel",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets whether the world's spawn area should be kept loaded into memory
/// or not.
	fn keep_spawn_in_memory(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"getKeepSpawnInMemory",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Sets whether the world's spawn area should be kept loaded into memory
/// or not.
	fn set_keep_spawn_in_memory(&self,keep_loaded: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(keep_loaded.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setKeepSpawnInMemory",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets whether or not the world will automatically save
	fn is_auto_save(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isAutoSave",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Sets whether or not the world will automatically save
	fn set_auto_save(&self,value: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(value.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setAutoSave",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Sets the Difficulty of the world.
	fn set_difficulty(&self,difficulty: impl Into<crate::Difficulty<'mc>>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Difficulty;)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(difficulty.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"setDifficulty",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the Difficulty of the world.
	fn difficulty(&self) 
-> Result<crate::Difficulty<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Difficulty;");
let res = self.jni_ref().call_method(&self.jni_object(),"getDifficulty",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Difficulty::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Returns the view distance used for this world.
	fn view_distance(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getViewDistance",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Returns the simulation distance used for this world.
	fn simulation_distance(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getSimulationDistance",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the type of this world.
	fn world_type(&self) 
-> Result<Option<crate::WorldType<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/WorldType;");
let res = self.jni_ref().call_method(&self.jni_object(),"getWorldType",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::WorldType::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Gets whether or not structures are being generated.
	fn can_generate_structures(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"canGenerateStructures",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the world is hardcore or not.
/// In a hardcore world the difficulty is locked to hard.
	fn is_hardcore(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isHardcore",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Sets whether the world is hardcore or not.
/// In a hardcore world the difficulty is locked to hard.
	fn set_hardcore(&self,hardcore: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(hardcore.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setHardcore",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets the world's ticks per animal spawns valueThis value determines how many ticks there are between attempts to spawn animals.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn animals in this world every tick. <li>A value of 400 will mean the server will attempt to spawn animals in this world every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, animal spawning will be disabled for this world. We recommend using {@link #setSpawnFlags(boolean, boolean)} to control this instead.Minecraft default: 400.
	fn ticks_per_animal_spawns(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerAnimalSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
#[deprecated]
/// Sets the world's ticks per animal spawns valueThis value determines how many ticks there are between attempts to spawn animals.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn animals in this world every tick. <li>A value of 400 will mean the server will attempt to spawn animals in this world every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, animal spawning will be disabled for this world. We recommend using {@link #setSpawnFlags(boolean, boolean)} to control this instead.Minecraft default: 400.
	fn set_ticks_per_animal_spawns(&self,ticks_per_animal_spawns: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(ticks_per_animal_spawns);
let res = self.jni_ref().call_method(&self.jni_object(),"setTicksPerAnimalSpawns",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets the world's ticks per monster spawns valueThis value determines how many ticks there are between attempts to spawn monsters.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn monsters in this world every tick. <li>A value of 400 will mean the server will attempt to spawn monsters in this world every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, monsters spawning will be disabled for this world. We recommend using {@link #setSpawnFlags(boolean, boolean)} to control this instead.Minecraft default: 1.
	fn ticks_per_monster_spawns(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerMonsterSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
#[deprecated]
/// Sets the world's ticks per monster spawns valueThis value determines how many ticks there are between attempts to spawn monsters.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn monsters in this world on every tick. <li>A value of 400 will mean the server will attempt to spawn monsters in this world every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, monsters spawning will be disabled for this world. We recommend using {@link #setSpawnFlags(boolean, boolean)} to control this instead.Minecraft default: 1.
	fn set_ticks_per_monster_spawns(&self,ticks_per_monster_spawns: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(ticks_per_monster_spawns);
let res = self.jni_ref().call_method(&self.jni_object(),"setTicksPerMonsterSpawns",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets the world's ticks per water mob spawns valueThis value determines how many ticks there are between attempts to spawn water mobs.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water mobs in this world every tick. <li>A value of 400 will mean the server will attempt to spawn water mobs in this world every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, water mobs spawning will be disabled for this world.Minecraft default: 1.
	fn ticks_per_water_spawns(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerWaterSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
#[deprecated]
/// Sets the world's ticks per water mob spawns valueThis value determines how many ticks there are between attempts to spawn water mobs.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water mobs in this world on every tick. <li>A value of 400 will mean the server will attempt to spawn water mobs in this world every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, water mobs spawning will be disabled for this world.Minecraft default: 1.
	fn set_ticks_per_water_spawns(&self,ticks_per_water_spawns: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(ticks_per_water_spawns);
let res = self.jni_ref().call_method(&self.jni_object(),"setTicksPerWaterSpawns",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets the default ticks per water ambient mob spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water ambient mobs every tick. <li>A value of 400 will mean the server will attempt to spawn water ambient mobs every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, ambient mobs spawning will be disabled.Minecraft default: 1.
	fn ticks_per_water_ambient_spawns(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerWaterAmbientSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
#[deprecated]
/// Sets the world's ticks per water ambient mob spawns valueThis value determines how many ticks there are between attempts to spawn water ambient mobs.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water ambient mobs in this world on every tick. <li>A value of 400 will mean the server will attempt to spawn water ambient mobs in this world every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, water ambient mobs spawning will be disabled for this world.Minecraft default: 1.
	fn set_ticks_per_water_ambient_spawns(&self,ticks_per_ambient_spawns: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(ticks_per_ambient_spawns);
let res = self.jni_ref().call_method(&self.jni_object(),"setTicksPerWaterAmbientSpawns",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets the default ticks per water underground creature spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water underground creature every tick. <li>A value of 400 will mean the server will attempt to spawn water underground creature every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, water underground creature spawning will be disabled.Minecraft default: 1.
	fn ticks_per_water_underground_creature_spawns(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerWaterUndergroundCreatureSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
#[deprecated]
/// Sets the world's ticks per water underground creature spawns valueThis value determines how many ticks there are between attempts to spawn water underground creature.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water underground creature in this world on every tick. <li>A value of 400 will mean the server will attempt to spawn water underground creature in this world every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, water underground creature spawning will be disabled for this world.Minecraft default: 1.
	fn set_ticks_per_water_underground_creature_spawns(&self,ticks_per_water_underground_creature_spawns: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(ticks_per_water_underground_creature_spawns);
let res = self.jni_ref().call_method(&self.jni_object(),"setTicksPerWaterUndergroundCreatureSpawns",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets the world's ticks per ambient mob spawns valueThis value determines how many ticks there are between attempts to spawn ambient mobs.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn ambient mobs in this world every tick. <li>A value of 400 will mean the server will attempt to spawn ambient mobs in this world every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, ambient mobs spawning will be disabled for this world.Minecraft default: 1.
	fn ticks_per_ambient_spawns(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerAmbientSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
#[deprecated]
/// Sets the world's ticks per ambient mob spawns valueThis value determines how many ticks there are between attempts to spawn ambient mobs.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn ambient mobs in this world on every tick. <li>A value of 400 will mean the server will attempt to spawn ambient mobs in this world every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, ambient mobs spawning will be disabled for this world.Minecraft default: 1.
	fn set_ticks_per_ambient_spawns(&self,ticks_per_ambient_spawns: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(ticks_per_ambient_spawns);
let res = self.jni_ref().call_method(&self.jni_object(),"setTicksPerAmbientSpawns",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the world's ticks per {@link SpawnCategory} mob spawns value
/// 
/// This value determines how many ticks there are between attempts to
/// spawn {@link SpawnCategory} mobs.
/// 
/// <b>Example Usage:</b>
/// <ul>
/// <li>A value of 1 will mean the server will attempt to spawn {@link SpawnCategory} mobs in
/// this world every tick.
/// <li>A value of 400 will mean the server will attempt to spawn {@link SpawnCategory} mobs
/// in this world every 400th tick.
/// <li>A value below 0 will be reset back to Minecraft's default.
/// </ul>
/// 
/// <b>Note:</b>
/// If set to 0, {@link SpawnCategory} mobs spawning will be disabled for this world.
/// 
/// Minecraft default: 1.
	fn get_ticks_per_spawns(&self,spawn_category: impl Into<crate::entity::SpawnCategory<'mc>>) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)J");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(spawn_category.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerSpawns",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
/// Sets the world's ticks per {@link SpawnCategory} mob spawns value
/// 
/// This value determines how many ticks there are between attempts to
/// spawn {@link SpawnCategory} mobs.
/// 
/// <b>Example Usage:</b>
/// <ul>
/// <li>A value of 1 will mean the server will attempt to spawn {@link SpawnCategory} mobs in
/// this world on every tick.
/// <li>A value of 400 will mean the server will attempt to spawn {@link SpawnCategory} mobs
/// in this world every 400th tick.
/// <li>A value below 0 will be reset back to Minecraft's default.
/// </ul>
/// 
/// <b>Note:</b>
/// If set to 0, {@link SpawnCategory} mobs spawning will be disabled for this world.
/// 
/// Minecraft default: 1.
	fn set_ticks_per_spawns(&self,spawn_category: impl Into<crate::entity::SpawnCategory<'mc>>,ticks_per_category_spawn: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;I)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(spawn_category.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Int(ticks_per_category_spawn);
let res = self.jni_ref().call_method(&self.jni_object(),"setTicksPerSpawns",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets limit for number of monsters that can spawn in a chunk in this world
	fn monster_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getMonsterSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Sets the limit for number of monsters that can spawn in a chunk in this world<b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.
	fn set_monster_spawn_limit(&self,limit: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(limit);
let res = self.jni_ref().call_method(&self.jni_object(),"setMonsterSpawnLimit",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets the limit for number of animals that can spawn in a chunk in this world
	fn animal_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getAnimalSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Sets the limit for number of animals that can spawn in a chunk in this world<b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.
	fn set_animal_spawn_limit(&self,limit: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(limit);
let res = self.jni_ref().call_method(&self.jni_object(),"setAnimalSpawnLimit",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets the limit for number of water animals that can spawn in a chunk in this world
	fn water_animal_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getWaterAnimalSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Sets the limit for number of water animals that can spawn in a chunk in this world<b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.
	fn set_water_animal_spawn_limit(&self,limit: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(limit);
let res = self.jni_ref().call_method(&self.jni_object(),"setWaterAnimalSpawnLimit",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets the limit for number of water underground creature that can spawn in a chunk in this world
	fn water_underground_creature_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getWaterUndergroundCreatureSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Sets the limit for number of water underground creature that can spawn in a chunk in this world<b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.
	fn set_water_underground_creature_spawn_limit(&self,limit: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(limit);
let res = self.jni_ref().call_method(&self.jni_object(),"setWaterUndergroundCreatureSpawnLimit",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets user-specified limit for number of water ambient mobs that can spawn in a chunk.
	fn water_ambient_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getWaterAmbientSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Sets the limit for number of water ambient mobs that can spawn in a chunk in this world<b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.
	fn set_water_ambient_spawn_limit(&self,limit: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(limit);
let res = self.jni_ref().call_method(&self.jni_object(),"setWaterAmbientSpawnLimit",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets the limit for number of ambient mobs that can spawn in a chunk in this world
	fn ambient_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getAmbientSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Sets the limit for number of ambient mobs that can spawn in a chunk in this world<b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.
	fn set_ambient_spawn_limit(&self,limit: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(limit);
let res = self.jni_ref().call_method(&self.jni_object(),"setAmbientSpawnLimit",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the limit for number of {@link SpawnCategory} entities that can spawn in a chunk in
/// this world
	fn get_spawn_limit(&self,spawn_category: impl Into<crate::entity::SpawnCategory<'mc>>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)I");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(spawn_category.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getSpawnLimit",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Sets the limit for number of {@link SpawnCategory} entities that can spawn in a chunk in
/// this world
/// 
/// <b>Note:</b> If set to a negative number the world will use the
/// server-wide spawn limit instead.
	fn set_spawn_limit(&self,spawn_category: impl Into<crate::entity::SpawnCategory<'mc>>,limit: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;I)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(spawn_category.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Int(limit);
let res = self.jni_ref().call_method(&self.jni_object(),"setSpawnLimit",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Play a note at the provided Location in the World.
/// 
/// This <i>will</i> work with cake.
/// 
/// This method will fail silently when called with {@link Instrument#CUSTOM_HEAD}.
	fn play_note(&self,loc: impl Into<crate::Location<'mc>>,instrument: impl Into<crate::Instrument<'mc>>,note: impl Into<crate::Note<'mc>>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Location;Lorg/bukkit/Instrument;Lorg/bukkit/Note;)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(loc.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(instrument.into().jni_object().clone())});
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(note.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"playNote",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Play a Sound at the provided Location in the World. For sounds with multiple
/// variations passing the same seed will always play the same variation.
/// 
/// This function will fail silently if Location or Sound are null. No sound will
/// be heard by the players if their clients do not have the respective sound for
/// the value passed.
	fn play_sound(&self,location: impl Into<crate::Location<'mc>>,sound: impl Into<String>,category: impl Into<crate::SoundCategory<'mc>>,volume: f32,pitch: std::option::Option<f32>,seed: std::option::Option<i64>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_1);
sig += "Ljava/lang/String;";
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(sound.into())?));
args.push(val_2);
sig += "Lorg/bukkit/SoundCategory;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(category.into().jni_object().clone())});
args.push(val_3);
sig += "F";
let val_4 = jni::objects::JValueGen::Float(volume);
args.push(val_4);
if let Some(a) = pitch {
sig += "F";
let val_5 = jni::objects::JValueGen::Float(a);
args.push(val_5);
}
if let Some(a) = seed {
sig += "J";
let val_6 = jni::objects::JValueGen::Long(a);
args.push(val_6);
}
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"playSound",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Get an array containing the names of all the {@link GameRule}s.
	fn game_rules(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getGameRules",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Get the current value for a given {@link GameRule}.
	fn get_game_rule_value(&self,rule: impl Into<crate::GameRule<'mc>>) 
-> Result<Option<jni::objects::JObject<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/GameRule;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(rule.into().jni_object().clone())});
args.push(val_1);
sig += ")LT;";
let res = self.jni_ref().call_method(&self.jni_object(),"getGameRuleValue",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
res.l()?
)
)}
#[deprecated]
/// Set the specified gamerule to specified value.The rule may attempt to validate the value passed, will return true if value was set.If rule is null, the function will return false.
	fn set_game_rule_value(&self,rule: impl Into<String>,value: impl Into<String>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;Ljava/lang/String;)Z");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(rule.into())?));
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(value.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"setGameRuleValue",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if string is a valid game rule
	fn is_game_rule(&self,rule: impl Into<String>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Z");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(rule.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"isGameRule",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Get the default value for a given {@link GameRule}. This value is not
/// guaranteed to match the current value.
	fn get_game_rule_default(&self,rule: impl Into<crate::GameRule<'mc>>) 
-> Result<Option<jni::objects::JObject<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/GameRule;)LT;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(rule.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getGameRuleDefault",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
res.l()?
)
)}
/// Set the given {@link GameRule}'s new value.
	fn set_game_rule(&self,rule: impl Into<crate::GameRule<'mc>>,new_value: jni::objects::JObject<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/GameRule;LT;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(rule.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(new_value);
let res = self.jni_ref().call_method(&self.jni_object(),"setGameRule",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the world border for this world.
	fn world_border(&self) 
-> Result<crate::WorldBorder<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/WorldBorder;");
let res = self.jni_ref().call_method(&self.jni_object(),"getWorldBorder",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldBorder::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Spawns the particle (the number of times specified by count)
/// at the target location. The position of each particle will be
/// randomized positively and negatively by the offset parameters
/// on each axis.
	fn spawn_particle(&self,particle: impl Into<crate::Particle<'mc>>,x: f64,y: f64,z: std::option::Option<f64>,count: std::option::Option<i32>,offset_x: std::option::Option<f64>,offset_y: std::option::Option<f64>,offset_z: std::option::Option<f64>,extra: std::option::Option<f64>,data: std::option::Option<jni::objects::JObject<'mc>>,force: std::option::Option<bool>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Particle;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(particle.into().jni_object().clone())});
args.push(val_1);
sig += "D";
let val_2 = jni::objects::JValueGen::Double(x);
args.push(val_2);
sig += "D";
let val_3 = jni::objects::JValueGen::Double(y);
args.push(val_3);
if let Some(a) = z {
sig += "D";
let val_4 = jni::objects::JValueGen::Double(a);
args.push(val_4);
}
if let Some(a) = count {
sig += "I";
let val_5 = jni::objects::JValueGen::Int(a);
args.push(val_5);
}
if let Some(a) = offset_x {
sig += "D";
let val_6 = jni::objects::JValueGen::Double(a);
args.push(val_6);
}
if let Some(a) = offset_y {
sig += "D";
let val_7 = jni::objects::JValueGen::Double(a);
args.push(val_7);
}
if let Some(a) = offset_z {
sig += "D";
let val_8 = jni::objects::JValueGen::Double(a);
args.push(val_8);
}
if let Some(a) = extra {
sig += "D";
let val_9 = jni::objects::JValueGen::Double(a);
args.push(val_9);
}
if let Some(a) = data {
sig += "LT;";
let val_10 = jni::objects::JValueGen::Object(a);
args.push(val_10);
}
if let Some(a) = force {
sig += "Z";
let val_11 = jni::objects::JValueGen::Bool(a.into());
args.push(val_11);
}
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"spawnParticle",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Find the closest nearby structure of a given {@link Structure}. Finding
/// unexplored structures can, and will, block if the world is looking in
/// chunks that gave not generated yet. This can lead to the world
/// temporarily freezing while locating an unexplored structure.
/// 
/// The {@code radius} is not a rigid square radius. Each structure may alter
/// how many chunks to check for each iteration. Do not assume that only a
/// radius x radius chunk area will be checked. For example,
/// {@link Structure#MANSION} can potentially check up to 20,000 blocks away
/// (or more) regardless of the radius used.
/// 
/// This will <i>not</i> load or generate chunks. This can also lead to
/// instances where the server can hang if you are only looking for
/// unexplored structures. This is because it will keep looking further and
/// further out in order to find the structure.
/// 
/// The difference between searching for a {@link StructureType} and a
/// {@link Structure} is, that a {@link StructureType} can refer to multiple
/// {@link Structure Structures} while searching for a {@link Structure}
/// while only search for the given {@link Structure}.
	fn locate_nearest_structure(&self,origin: impl Into<crate::Location<'mc>>,structure: impl Into<crate::generator::structure::Structure<'mc>>,radius: i32,find_unexplored: bool) 
-> Result<Option<crate::util::StructureSearchResult<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(origin.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/generator/structure/Structure;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(structure.into().jni_object().clone())});
args.push(val_2);
sig += "I";
let val_3 = jni::objects::JValueGen::Int(radius);
args.push(val_3);
sig += "Z";
let val_4 = jni::objects::JValueGen::Bool(find_unexplored.into());
args.push(val_4);
sig += ")Lorg/bukkit/util/StructureSearchResult;";
let res = self.jni_ref().call_method(&self.jni_object(),"locateNearestStructure",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::util::StructureSearchResult::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Find the closest nearby location with a biome matching the provided
/// {@link Biome}(s). Finding biomes can, and will, block if the world is looking
/// in chunks that have not generated yet. This can lead to the world temporarily
/// freezing while locating a biome.
/// 
/// <b>Note:</b> This will <i>not</i> reflect changes made to the world after
/// generation, this method only sees the biome at the time of world generation.
/// This will <i>not</i> load or generate chunks.
/// 
/// If multiple biomes are provided {@link BiomeSearchResult#getBiome()} will
/// indicate which one was located. Higher values for {@code horizontalInterval}
/// and {@code verticalInterval} will result in faster searches, but may lead to
/// small biomes being missed.
	fn locate_nearest_biome(&self,origin: impl Into<crate::Location<'mc>>,radius: i32,horizontal_interval: i32,vertical_interval: std::option::Option<i32>,biomes: std::option::Option<impl Into<crate::block::Biome<'mc>>>) 
-> Result<Option<crate::util::BiomeSearchResult<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Location;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(origin.into().jni_object().clone())});
args.push(val_1);
sig += "I";
let val_2 = jni::objects::JValueGen::Int(radius);
args.push(val_2);
sig += "I";
let val_3 = jni::objects::JValueGen::Int(horizontal_interval);
args.push(val_3);
if let Some(a) = vertical_interval {
sig += "I";
let val_4 = jni::objects::JValueGen::Int(a);
args.push(val_4);
}
if let Some(a) = biomes {
sig += "Lorg/bukkit/block/Biome;";
let val_5 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_5);
}
sig += ")Lorg/bukkit/util/BiomeSearchResult;";
let res = self.jni_ref().call_method(&self.jni_object(),"locateNearestBiome",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::util::BiomeSearchResult::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Finds the nearest raid close to the given location.
	fn locate_nearest_raid(&self,location: impl Into<crate::Location<'mc>>,radius: i32) 
-> Result<Option<crate::Raid<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Location;I)Lorg/bukkit/Raid;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Int(radius);
let res = self.jni_ref().call_method(&self.jni_object(),"locateNearestRaid",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::Raid::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Gets all raids that are going on over this world.
	fn raids(&self) 
-> Result<Vec<crate::Raid<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getRaids",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::Raid::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Get the {@link DragonBattle} associated with this world.
/// If this world's environment is not {@link Environment#THE_END}, null will
/// be returned.
/// 
/// If an end world, a dragon battle instance will be returned regardless of
/// whether or not a dragon is present in the world or a fight sequence has
/// been activated. The dragon battle instance acts as a state holder.
	fn ender_dragon_battle(&self) 
-> Result<Option<crate::boss::DragonBattle<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/boss/DragonBattle;");
let res = self.jni_ref().call_method(&self.jni_object(),"getEnderDragonBattle",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::boss::DragonBattle::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Get all {@link FeatureFlag} enabled in this world.
	fn feature_flags(&self) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let res = self.jni_ref().call_method(&self.jni_object(),"getFeatureFlags",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaSet::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets all generated structures of a given {@link Structure} that intersect
/// the chunk at the given coordinates.
/// 
/// If no structures are present an empty collection will be returned.
	fn get_structures(&self,x: i32,z: i32,structure: std::option::Option<impl Into<crate::generator::structure::Structure<'mc>>>) 
-> Result<Vec<crate::generator::structure::GeneratedStructure<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
sig += "I";
let val_2 = jni::objects::JValueGen::Int(z);
args.push(val_2);
if let Some(a) = structure {
sig += "Lorg/bukkit/generator/structure/Structure;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_3);
}
sig += ")Ljava/util/Collection;";
let res = self.jni_ref().call_method(&self.jni_object(),"getStructures",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&self.jni_ref(),res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::generator::structure::GeneratedStructure::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::RegionAccessor<'mc>> for World<'mc>{

fn into(self) -> crate::RegionAccessor<'mc> {

crate::RegionAccessor::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting World into crate::RegionAccessor")

   }
}
impl<'mc> crate::RegionAccessorTrait<'mc> for World<'mc> {}
impl<'mc> Into<crate::generator::WorldInfo<'mc>> for World<'mc>{

fn into(self) -> crate::generator::WorldInfo<'mc> {

crate::generator::WorldInfo::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting World into crate::generator::WorldInfo")

   }
}
impl<'mc> crate::generator::WorldInfoTrait<'mc> for World<'mc> {}
impl<'mc> Into<crate::plugin::messaging::PluginMessageRecipient<'mc>> for World<'mc>{

fn into(self) -> crate::plugin::messaging::PluginMessageRecipient<'mc> {

crate::plugin::messaging::PluginMessageRecipient::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting World into crate::plugin::messaging::PluginMessageRecipient")

   }
}
impl<'mc> crate::plugin::messaging::PluginMessageRecipientTrait<'mc> for World<'mc> {}
impl<'mc> Into<crate::metadata::Metadatable<'mc>> for World<'mc>{

fn into(self) -> crate::metadata::Metadatable<'mc> {

crate::metadata::Metadatable::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting World into crate::metadata::Metadatable")

   }
}
impl<'mc> crate::metadata::MetadatableTrait<'mc> for World<'mc> {}
impl<'mc> Into<crate::persistence::PersistentDataHolder<'mc>> for World<'mc>{

fn into(self) -> crate::persistence::PersistentDataHolder<'mc> {

crate::persistence::PersistentDataHolder::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting World into crate::persistence::PersistentDataHolder")

   }
}
impl<'mc> crate::persistence::PersistentDataHolderTrait<'mc> for World<'mc> {}
impl<'mc> Into<crate::Keyed<'mc>> for World<'mc>{

fn into(self) -> crate::Keyed<'mc> {

crate::Keyed::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting World into crate::Keyed")

   }
}
impl<'mc> crate::KeyedTrait<'mc> for World<'mc> {}
#[repr(C)]
pub struct BanList<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for BanList<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for BanList<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate BanList from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/BanList")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a BanList object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> BanListTrait<'mc> for BanList<'mc> {}
pub trait BanListTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Gets a {@link BanEntry} by target.
	fn get_ban_entry(&self,target: jni::objects::JObject<'mc>) 
-> Result<Option<crate::BanEntry<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "LT;";
let val_1 = jni::objects::JValueGen::Object(target);
args.push(val_1);
sig += ")Lorg/bukkit/BanEntry;";
let res = self.jni_ref().call_method(&self.jni_object(),"getBanEntry",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::BanEntry::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Adds a ban to this list. If a previous ban exists, this will
/// update the previous entry.
	fn add_ban(&self,target: jni::objects::JObject<'mc>,reason: impl Into<String>,duration: jni::objects::JObject<'mc>,source: impl Into<String>) 
-> Result<Option<crate::BanEntry<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "LT;";
let val_1 = jni::objects::JValueGen::Object(target);
args.push(val_1);
sig += "Ljava/lang/String;";
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(reason.into())?));
args.push(val_2);
sig += "Ljava/time/Duration;";
let val_3 = jni::objects::JValueGen::Object(duration);
args.push(val_3);
sig += "Ljava/lang/String;";
let val_4 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(source.into())?));
args.push(val_4);
sig += ")Lorg/bukkit/BanEntry;";
let res = self.jni_ref().call_method(&self.jni_object(),"addBan",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::BanEntry::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
#[deprecated]
/// Gets a set containing every {@link BanEntry} in this list.
	fn ban_entries(&self) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let res = self.jni_ref().call_method(&self.jni_object(),"getBanEntries",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaSet::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets a set containing every {@link BanEntry} in this list.
	fn entries(&self) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let res = self.jni_ref().call_method(&self.jni_object(),"getEntries",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaSet::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
#[deprecated]
/// Gets if a {@link BanEntry} exists for the target, indicating an active ban status.
	fn is_banned(&self,target: impl Into<String>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(target.into())?));
args.push(val_1);
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"isBanned",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
#[deprecated]
/// Removes the specified target from this list, therefore indicating a "not banned" status.
	fn pardon(&self,target: impl Into<String>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(target.into())?));
args.push(val_1);
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"pardon",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum TreeType<'mc> {
	Tree {inner: TreeTypeStruct<'mc>},
	BigTree {inner: TreeTypeStruct<'mc>},
	Redwood {inner: TreeTypeStruct<'mc>},
	TallRedwood {inner: TreeTypeStruct<'mc>},
	Birch {inner: TreeTypeStruct<'mc>},
	Jungle {inner: TreeTypeStruct<'mc>},
	SmallJungle {inner: TreeTypeStruct<'mc>},
	CocoaTree {inner: TreeTypeStruct<'mc>},
	JungleBush {inner: TreeTypeStruct<'mc>},
	RedMushroom {inner: TreeTypeStruct<'mc>},
	BrownMushroom {inner: TreeTypeStruct<'mc>},
	Swamp {inner: TreeTypeStruct<'mc>},
	Acacia {inner: TreeTypeStruct<'mc>},
	DarkOak {inner: TreeTypeStruct<'mc>},
	MegaRedwood {inner: TreeTypeStruct<'mc>},
	TallBirch {inner: TreeTypeStruct<'mc>},
	ChorusPlant {inner: TreeTypeStruct<'mc>},
	CrimsonFungus {inner: TreeTypeStruct<'mc>},
	WarpedFungus {inner: TreeTypeStruct<'mc>},
	Azalea {inner: TreeTypeStruct<'mc>},
	Mangrove {inner: TreeTypeStruct<'mc>},
	TallMangrove {inner: TreeTypeStruct<'mc>},
	Cherry {inner: TreeTypeStruct<'mc>},
}
impl<'mc> std::fmt::Display for TreeType<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           TreeType::Tree { .. } => f.write_str("TREE"),
           TreeType::BigTree { .. } => f.write_str("BIG_TREE"),
           TreeType::Redwood { .. } => f.write_str("REDWOOD"),
           TreeType::TallRedwood { .. } => f.write_str("TALL_REDWOOD"),
           TreeType::Birch { .. } => f.write_str("BIRCH"),
           TreeType::Jungle { .. } => f.write_str("JUNGLE"),
           TreeType::SmallJungle { .. } => f.write_str("SMALL_JUNGLE"),
           TreeType::CocoaTree { .. } => f.write_str("COCOA_TREE"),
           TreeType::JungleBush { .. } => f.write_str("JUNGLE_BUSH"),
           TreeType::RedMushroom { .. } => f.write_str("RED_MUSHROOM"),
           TreeType::BrownMushroom { .. } => f.write_str("BROWN_MUSHROOM"),
           TreeType::Swamp { .. } => f.write_str("SWAMP"),
           TreeType::Acacia { .. } => f.write_str("ACACIA"),
           TreeType::DarkOak { .. } => f.write_str("DARK_OAK"),
           TreeType::MegaRedwood { .. } => f.write_str("MEGA_REDWOOD"),
           TreeType::TallBirch { .. } => f.write_str("TALL_BIRCH"),
           TreeType::ChorusPlant { .. } => f.write_str("CHORUS_PLANT"),
           TreeType::CrimsonFungus { .. } => f.write_str("CRIMSON_FUNGUS"),
           TreeType::WarpedFungus { .. } => f.write_str("WARPED_FUNGUS"),
           TreeType::Azalea { .. } => f.write_str("AZALEA"),
           TreeType::Mangrove { .. } => f.write_str("MANGROVE"),
           TreeType::TallMangrove { .. } => f.write_str("TALL_MANGROVE"),
           TreeType::Cherry { .. } => f.write_str("CHERRY"),
       }
   }
}

        impl<'mc> TreeTypeTrait<'mc> for TreeType<'mc> {}
        
        pub trait TreeTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<TreeType<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/TreeType");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/TreeType;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"TREE" => Ok(TreeType::Tree { inner: TreeTypeStruct::from_raw(env,obj)?}),
"BIG_TREE" => Ok(TreeType::BigTree { inner: TreeTypeStruct::from_raw(env,obj)?}),
"REDWOOD" => Ok(TreeType::Redwood { inner: TreeTypeStruct::from_raw(env,obj)?}),
"TALL_REDWOOD" => Ok(TreeType::TallRedwood { inner: TreeTypeStruct::from_raw(env,obj)?}),
"BIRCH" => Ok(TreeType::Birch { inner: TreeTypeStruct::from_raw(env,obj)?}),
"JUNGLE" => Ok(TreeType::Jungle { inner: TreeTypeStruct::from_raw(env,obj)?}),
"SMALL_JUNGLE" => Ok(TreeType::SmallJungle { inner: TreeTypeStruct::from_raw(env,obj)?}),
"COCOA_TREE" => Ok(TreeType::CocoaTree { inner: TreeTypeStruct::from_raw(env,obj)?}),
"JUNGLE_BUSH" => Ok(TreeType::JungleBush { inner: TreeTypeStruct::from_raw(env,obj)?}),
"RED_MUSHROOM" => Ok(TreeType::RedMushroom { inner: TreeTypeStruct::from_raw(env,obj)?}),
"BROWN_MUSHROOM" => Ok(TreeType::BrownMushroom { inner: TreeTypeStruct::from_raw(env,obj)?}),
"SWAMP" => Ok(TreeType::Swamp { inner: TreeTypeStruct::from_raw(env,obj)?}),
"ACACIA" => Ok(TreeType::Acacia { inner: TreeTypeStruct::from_raw(env,obj)?}),
"DARK_OAK" => Ok(TreeType::DarkOak { inner: TreeTypeStruct::from_raw(env,obj)?}),
"MEGA_REDWOOD" => Ok(TreeType::MegaRedwood { inner: TreeTypeStruct::from_raw(env,obj)?}),
"TALL_BIRCH" => Ok(TreeType::TallBirch { inner: TreeTypeStruct::from_raw(env,obj)?}),
"CHORUS_PLANT" => Ok(TreeType::ChorusPlant { inner: TreeTypeStruct::from_raw(env,obj)?}),
"CRIMSON_FUNGUS" => Ok(TreeType::CrimsonFungus { inner: TreeTypeStruct::from_raw(env,obj)?}),
"WARPED_FUNGUS" => Ok(TreeType::WarpedFungus { inner: TreeTypeStruct::from_raw(env,obj)?}),
"AZALEA" => Ok(TreeType::Azalea { inner: TreeTypeStruct::from_raw(env,obj)?}),
"MANGROVE" => Ok(TreeType::Mangrove { inner: TreeTypeStruct::from_raw(env,obj)?}),
"TALL_MANGROVE" => Ok(TreeType::TallMangrove { inner: TreeTypeStruct::from_raw(env,obj)?}),
"CHERRY" => Ok(TreeType::Cherry { inner: TreeTypeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct TreeTypeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for TreeType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Tree { inner } => inner.0.clone(),
Self::BigTree { inner } => inner.0.clone(),
Self::Redwood { inner } => inner.0.clone(),
Self::TallRedwood { inner } => inner.0.clone(),
Self::Birch { inner } => inner.0.clone(),
Self::Jungle { inner } => inner.0.clone(),
Self::SmallJungle { inner } => inner.0.clone(),
Self::CocoaTree { inner } => inner.0.clone(),
Self::JungleBush { inner } => inner.0.clone(),
Self::RedMushroom { inner } => inner.0.clone(),
Self::BrownMushroom { inner } => inner.0.clone(),
Self::Swamp { inner } => inner.0.clone(),
Self::Acacia { inner } => inner.0.clone(),
Self::DarkOak { inner } => inner.0.clone(),
Self::MegaRedwood { inner } => inner.0.clone(),
Self::TallBirch { inner } => inner.0.clone(),
Self::ChorusPlant { inner } => inner.0.clone(),
Self::CrimsonFungus { inner } => inner.0.clone(),
Self::WarpedFungus { inner } => inner.0.clone(),
Self::Azalea { inner } => inner.0.clone(),
Self::Mangrove { inner } => inner.0.clone(),
Self::TallMangrove { inner } => inner.0.clone(),
Self::Cherry { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Tree { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BigTree { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Redwood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TallRedwood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Birch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Jungle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmallJungle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CocoaTree { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::JungleBush { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedMushroom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrownMushroom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Swamp { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Acacia { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DarkOak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MegaRedwood { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TallBirch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChorusPlant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrimsonFungus { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WarpedFungus { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Azalea { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Mangrove { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TallMangrove { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Cherry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for TreeType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate TreeType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/TreeType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a TreeType object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "TREE" => Ok(TreeType::Tree { inner: TreeTypeStruct::from_raw(env,obj)?}),"BIG_TREE" => Ok(TreeType::BigTree { inner: TreeTypeStruct::from_raw(env,obj)?}),"REDWOOD" => Ok(TreeType::Redwood { inner: TreeTypeStruct::from_raw(env,obj)?}),"TALL_REDWOOD" => Ok(TreeType::TallRedwood { inner: TreeTypeStruct::from_raw(env,obj)?}),"BIRCH" => Ok(TreeType::Birch { inner: TreeTypeStruct::from_raw(env,obj)?}),"JUNGLE" => Ok(TreeType::Jungle { inner: TreeTypeStruct::from_raw(env,obj)?}),"SMALL_JUNGLE" => Ok(TreeType::SmallJungle { inner: TreeTypeStruct::from_raw(env,obj)?}),"COCOA_TREE" => Ok(TreeType::CocoaTree { inner: TreeTypeStruct::from_raw(env,obj)?}),"JUNGLE_BUSH" => Ok(TreeType::JungleBush { inner: TreeTypeStruct::from_raw(env,obj)?}),"RED_MUSHROOM" => Ok(TreeType::RedMushroom { inner: TreeTypeStruct::from_raw(env,obj)?}),"BROWN_MUSHROOM" => Ok(TreeType::BrownMushroom { inner: TreeTypeStruct::from_raw(env,obj)?}),"SWAMP" => Ok(TreeType::Swamp { inner: TreeTypeStruct::from_raw(env,obj)?}),"ACACIA" => Ok(TreeType::Acacia { inner: TreeTypeStruct::from_raw(env,obj)?}),"DARK_OAK" => Ok(TreeType::DarkOak { inner: TreeTypeStruct::from_raw(env,obj)?}),"MEGA_REDWOOD" => Ok(TreeType::MegaRedwood { inner: TreeTypeStruct::from_raw(env,obj)?}),"TALL_BIRCH" => Ok(TreeType::TallBirch { inner: TreeTypeStruct::from_raw(env,obj)?}),"CHORUS_PLANT" => Ok(TreeType::ChorusPlant { inner: TreeTypeStruct::from_raw(env,obj)?}),"CRIMSON_FUNGUS" => Ok(TreeType::CrimsonFungus { inner: TreeTypeStruct::from_raw(env,obj)?}),"WARPED_FUNGUS" => Ok(TreeType::WarpedFungus { inner: TreeTypeStruct::from_raw(env,obj)?}),"AZALEA" => Ok(TreeType::Azalea { inner: TreeTypeStruct::from_raw(env,obj)?}),"MANGROVE" => Ok(TreeType::Mangrove { inner: TreeTypeStruct::from_raw(env,obj)?}),"TALL_MANGROVE" => Ok(TreeType::TallMangrove { inner: TreeTypeStruct::from_raw(env,obj)?}),"CHERRY" => Ok(TreeType::Cherry { inner: TreeTypeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for TreeTypeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for TreeTypeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate TreeTypeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/TreeType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a TreeTypeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> TreeTypeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::TreeType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/TreeType;");
let cls = jni.find_class("org/bukkit/TreeType"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::TreeType::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum SoundCategory<'mc> {
	Master {inner: SoundCategoryStruct<'mc>},
	Music {inner: SoundCategoryStruct<'mc>},
	Records {inner: SoundCategoryStruct<'mc>},
	Weather {inner: SoundCategoryStruct<'mc>},
	Blocks {inner: SoundCategoryStruct<'mc>},
	Hostile {inner: SoundCategoryStruct<'mc>},
	Neutral {inner: SoundCategoryStruct<'mc>},
	Players {inner: SoundCategoryStruct<'mc>},
	Ambient {inner: SoundCategoryStruct<'mc>},
	Voice {inner: SoundCategoryStruct<'mc>},
}
impl<'mc> std::fmt::Display for SoundCategory<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           SoundCategory::Master { .. } => f.write_str("MASTER"),
           SoundCategory::Music { .. } => f.write_str("MUSIC"),
           SoundCategory::Records { .. } => f.write_str("RECORDS"),
           SoundCategory::Weather { .. } => f.write_str("WEATHER"),
           SoundCategory::Blocks { .. } => f.write_str("BLOCKS"),
           SoundCategory::Hostile { .. } => f.write_str("HOSTILE"),
           SoundCategory::Neutral { .. } => f.write_str("NEUTRAL"),
           SoundCategory::Players { .. } => f.write_str("PLAYERS"),
           SoundCategory::Ambient { .. } => f.write_str("AMBIENT"),
           SoundCategory::Voice { .. } => f.write_str("VOICE"),
       }
   }
}

        impl<'mc> SoundCategoryTrait<'mc> for SoundCategory<'mc> {}
        
        pub trait SoundCategoryTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<SoundCategory<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/SoundCategory");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/SoundCategory;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"MASTER" => Ok(SoundCategory::Master { inner: SoundCategoryStruct::from_raw(env,obj)?}),
"MUSIC" => Ok(SoundCategory::Music { inner: SoundCategoryStruct::from_raw(env,obj)?}),
"RECORDS" => Ok(SoundCategory::Records { inner: SoundCategoryStruct::from_raw(env,obj)?}),
"WEATHER" => Ok(SoundCategory::Weather { inner: SoundCategoryStruct::from_raw(env,obj)?}),
"BLOCKS" => Ok(SoundCategory::Blocks { inner: SoundCategoryStruct::from_raw(env,obj)?}),
"HOSTILE" => Ok(SoundCategory::Hostile { inner: SoundCategoryStruct::from_raw(env,obj)?}),
"NEUTRAL" => Ok(SoundCategory::Neutral { inner: SoundCategoryStruct::from_raw(env,obj)?}),
"PLAYERS" => Ok(SoundCategory::Players { inner: SoundCategoryStruct::from_raw(env,obj)?}),
"AMBIENT" => Ok(SoundCategory::Ambient { inner: SoundCategoryStruct::from_raw(env,obj)?}),
"VOICE" => Ok(SoundCategory::Voice { inner: SoundCategoryStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct SoundCategoryStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for SoundCategory<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Master { inner } => inner.0.clone(),
Self::Music { inner } => inner.0.clone(),
Self::Records { inner } => inner.0.clone(),
Self::Weather { inner } => inner.0.clone(),
Self::Blocks { inner } => inner.0.clone(),
Self::Hostile { inner } => inner.0.clone(),
Self::Neutral { inner } => inner.0.clone(),
Self::Players { inner } => inner.0.clone(),
Self::Ambient { inner } => inner.0.clone(),
Self::Voice { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Master { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Music { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Records { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Weather { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Blocks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Hostile { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Neutral { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Players { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Ambient { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Voice { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for SoundCategory<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate SoundCategory from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/SoundCategory")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a SoundCategory object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "MASTER" => Ok(SoundCategory::Master { inner: SoundCategoryStruct::from_raw(env,obj)?}),"MUSIC" => Ok(SoundCategory::Music { inner: SoundCategoryStruct::from_raw(env,obj)?}),"RECORDS" => Ok(SoundCategory::Records { inner: SoundCategoryStruct::from_raw(env,obj)?}),"WEATHER" => Ok(SoundCategory::Weather { inner: SoundCategoryStruct::from_raw(env,obj)?}),"BLOCKS" => Ok(SoundCategory::Blocks { inner: SoundCategoryStruct::from_raw(env,obj)?}),"HOSTILE" => Ok(SoundCategory::Hostile { inner: SoundCategoryStruct::from_raw(env,obj)?}),"NEUTRAL" => Ok(SoundCategory::Neutral { inner: SoundCategoryStruct::from_raw(env,obj)?}),"PLAYERS" => Ok(SoundCategory::Players { inner: SoundCategoryStruct::from_raw(env,obj)?}),"AMBIENT" => Ok(SoundCategory::Ambient { inner: SoundCategoryStruct::from_raw(env,obj)?}),"VOICE" => Ok(SoundCategory::Voice { inner: SoundCategoryStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for SoundCategoryStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for SoundCategoryStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate SoundCategoryStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/SoundCategory")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a SoundCategoryStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> SoundCategoryStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::SoundCategory<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/SoundCategory;");
let cls = jni.find_class("org/bukkit/SoundCategory"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::SoundCategory::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct MusicInstrument<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for MusicInstrument<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for MusicInstrument<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate MusicInstrument from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/MusicInstrument")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a MusicInstrument object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> MusicInstrumentTrait<'mc> for MusicInstrument<'mc> {}
pub trait MusicInstrumentTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

	fn new(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::MusicInstrument<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()V");
let cls = jni.find_class("org/bukkit/MusicInstrument"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.new_object(cls,
sig.as_str(),vec![]);
let res = 
jni.translate_error_no_gen(res)?;
crate::MusicInstrument::from_raw(&jni,res
)}
#[deprecated]
/// Returns a {@link MusicInstrument} by a {@link NamespacedKey}.
	fn get_by_key(jni: &blackboxmc_general::SharedJNIEnv<'mc>,namespaced_key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<crate::MusicInstrument<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/MusicInstrument;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(namespaced_key.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/MusicInstrument"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByKey",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::MusicInstrument::from_raw(&jni,obj
)?
)
)}
#[deprecated]
/// Returns all known MusicInstruments.
	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<Vec<crate::MusicInstrument<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Collection;");
let cls = jni.find_class("org/bukkit/MusicInstrument"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&jni,res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::MusicInstrument::from_raw(&jni,obj,)?);
};
Ok(
new_vec
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::Keyed<'mc>> for MusicInstrument<'mc>{

fn into(self) -> crate::Keyed<'mc> {

crate::Keyed::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting MusicInstrument into crate::Keyed")

   }
}
impl<'mc> crate::KeyedTrait<'mc> for MusicInstrument<'mc> {}
#[repr(C)]
pub struct ChunkSnapshot<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for ChunkSnapshot<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for ChunkSnapshot<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate ChunkSnapshot from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/ChunkSnapshot")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a ChunkSnapshot object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> ChunkSnapshotTrait<'mc> for ChunkSnapshot<'mc> {}
pub trait ChunkSnapshotTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Gets the X-coordinate of this chunk
	fn x(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getX",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the Z-coordinate of this chunk
	fn z(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getZ",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets name of the world containing this chunk
	fn world_name(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getWorldName",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Get block type for block at corresponding coordinate in the chunk
	fn get_block_type(&self,x: i32,y: i32,z: i32) 
-> Result<crate::Material<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(III)Lorg/bukkit/Material;");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(y);
let val_3 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockType",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Material::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Get block data for block at corresponding coordinate in the chunk
	fn get_block_data(&self,x: i32,y: i32,z: i32) 
-> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(III)Lorg/bukkit/block/data/BlockData;");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(y);
let val_3 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockData",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::data::BlockData::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
#[deprecated]
/// Get block data for block at corresponding coordinate in the chunk
	fn get_data(&self,x: i32,y: i32,z: i32) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(III)I");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(y);
let val_3 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"getData",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Get sky light level for block at corresponding coordinate in the chunk
	fn get_block_sky_light(&self,x: i32,y: i32,z: i32) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(III)I");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(y);
let val_3 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockSkyLight",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Get light level emitted by block at corresponding coordinate in the
/// chunk
	fn get_block_emitted_light(&self,x: i32,y: i32,z: i32) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(III)I");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(y);
let val_3 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockEmittedLight",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the highest non-air coordinate at the given coordinates
	fn get_highest_block_yat(&self,x: i32,z: i32) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(II)I");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"getHighestBlockYAt",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Get biome at given coordinates
	fn get_biome(&self,x: i32,y: i32,z: std::option::Option<i32>) 
-> Result<crate::block::Biome<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
sig += "I";
let val_2 = jni::objects::JValueGen::Int(y);
args.push(val_2);
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")Lorg/bukkit/block/Biome;";
let res = self.jni_ref().call_method(&self.jni_object(),"getBiome",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::Biome::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Get raw biome temperature at given coordinates
	fn get_raw_biome_temperature(&self,x: i32,y: i32,z: std::option::Option<i32>) 
-> Result<f64, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(x);
args.push(val_1);
sig += "I";
let val_2 = jni::objects::JValueGen::Int(y);
args.push(val_2);
if let Some(a) = z {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")D";
let res = self.jni_ref().call_method(&self.jni_object(),"getRawBiomeTemperature",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Get world full time when chunk snapshot was captured
	fn capture_full_time(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getCaptureFullTime",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
/// Test if section is empty
	fn is_section_empty(&self,sy: i32) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(I)Z");
let val_1 = jni::objects::JValueGen::Int(sy);
let res = self.jni_ref().call_method(&self.jni_object(),"isSectionEmpty",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Tests if this chunk contains the specified biome.
	fn contains(&self,biome: impl Into<crate::block::Biome<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/block/Biome;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(biome.into().jni_object().clone())});
args.push(val_1);
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"contains",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Location<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Location<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Location<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Location from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Location")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Location object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> LocationTrait<'mc> for Location<'mc> {}
pub trait LocationTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Constructs a new Location with the given coordinates and direction
	fn new(jni: &blackboxmc_general::SharedJNIEnv<'mc>,world: impl Into<crate::World<'mc>>,x: f64,y: f64,z: f64,yaw: std::option::Option<f32>,pitch: std::option::Option<f32>) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/World;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
args.push(val_1);
sig += "D";
let val_2 = jni::objects::JValueGen::Double(x);
args.push(val_2);
sig += "D";
let val_3 = jni::objects::JValueGen::Double(y);
args.push(val_3);
sig += "D";
let val_4 = jni::objects::JValueGen::Double(z);
args.push(val_4);
if let Some(a) = yaw {
sig += "F";
let val_5 = jni::objects::JValueGen::Float(a);
args.push(val_5);
}
if let Some(a) = pitch {
sig += "F";
let val_6 = jni::objects::JValueGen::Float(a);
args.push(val_6);
}
sig += ")V";
let cls = jni.find_class("org/bukkit/Location"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.new_object(cls,
sig.as_str(),args);
let res = 
jni.translate_error_no_gen(res)?;
crate::Location::from_raw(&jni,res
)}
/// Sets the world that this location resides in
	fn set_world(&self,world: impl Into<crate::World<'mc>>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/World;)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"setWorld",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Checks if world in this location is present and loaded.
	fn is_world_loaded(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isWorldLoaded",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the world that this location resides in
	fn world(&self) 
-> Result<Option<crate::World<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/World;");
let res = self.jni_ref().call_method(&self.jni_object(),"getWorld",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::World::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Gets the chunk at the represented location
	fn chunk(&self) 
-> Result<crate::Chunk<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Chunk;");
let res = self.jni_ref().call_method(&self.jni_object(),"getChunk",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Chunk::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the block at the represented location
	fn block(&self) 
-> Result<crate::block::Block<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/block/Block;");
let res = self.jni_ref().call_method(&self.jni_object(),"getBlock",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::Block::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the x-coordinate of this location
	fn set_x(&self,x: f64) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(D)V");
let val_1 = jni::objects::JValueGen::Double(x);
let res = self.jni_ref().call_method(&self.jni_object(),"setX",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the x-coordinate of this location
	fn x(&self) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("()D");
let res = self.jni_ref().call_method(&self.jni_object(),"getX",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Gets the floored value of the X component, indicating the block that
/// this location is contained with.
	fn block_x(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockX",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Sets the y-coordinate of this location
	fn set_y(&self,y: f64) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(D)V");
let val_1 = jni::objects::JValueGen::Double(y);
let res = self.jni_ref().call_method(&self.jni_object(),"setY",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the y-coordinate of this location
	fn y(&self) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("()D");
let res = self.jni_ref().call_method(&self.jni_object(),"getY",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Gets the floored value of the Y component, indicating the block that
/// this location is contained with.
	fn block_y(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockY",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Sets the z-coordinate of this location
	fn set_z(&self,z: f64) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(D)V");
let val_1 = jni::objects::JValueGen::Double(z);
let res = self.jni_ref().call_method(&self.jni_object(),"setZ",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the z-coordinate of this location
	fn z(&self) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("()D");
let res = self.jni_ref().call_method(&self.jni_object(),"getZ",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Gets the floored value of the Z component, indicating the block that
/// this location is contained with.
	fn block_z(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockZ",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Sets the yaw of this location, measured in degrees.
/// <ul>
/// <li>A yaw of 0 or 360 represents the positive z direction.
/// <li>A yaw of 180 represents the negative z direction.
/// <li>A yaw of 90 represents the negative x direction.
/// <li>A yaw of 270 represents the positive x direction.
/// </ul>
/// Increasing yaw values are the equivalent of turning to your
/// right-facing, increasing the scale of the next respective axis, and
/// decreasing the scale of the previous axis.
	fn set_yaw(&self,yaw: f32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(F)V");
let val_1 = jni::objects::JValueGen::Float(yaw);
let res = self.jni_ref().call_method(&self.jni_object(),"setYaw",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the yaw of this location, measured in degrees.
/// <ul>
/// <li>A yaw of 0 or 360 represents the positive z direction.
/// <li>A yaw of 180 represents the negative z direction.
/// <li>A yaw of 90 represents the negative x direction.
/// <li>A yaw of 270 represents the positive x direction.
/// </ul>
/// Increasing yaw values are the equivalent of turning to your
/// right-facing, increasing the scale of the next respective axis, and
/// decreasing the scale of the previous axis.
	fn yaw(&self) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("()F");
let res = self.jni_ref().call_method(&self.jni_object(),"getYaw",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.f()?
)}
/// Sets the pitch of this location, measured in degrees.
/// <ul>
/// <li>A pitch of 0 represents level forward facing.
/// <li>A pitch of 90 represents downward facing, or negative y
/// direction.
/// <li>A pitch of -90 represents upward facing, or positive y direction.
/// </ul>
/// Increasing pitch values the equivalent of looking down.
	fn set_pitch(&self,pitch: f32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(F)V");
let val_1 = jni::objects::JValueGen::Float(pitch);
let res = self.jni_ref().call_method(&self.jni_object(),"setPitch",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the pitch of this location, measured in degrees.
/// <ul>
/// <li>A pitch of 0 represents level forward facing.
/// <li>A pitch of 90 represents downward facing, or negative y
/// direction.
/// <li>A pitch of -90 represents upward facing, or positive y direction.
/// </ul>
/// Increasing pitch values the equivalent of looking down.
	fn pitch(&self) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("()F");
let res = self.jni_ref().call_method(&self.jni_object(),"getPitch",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.f()?
)}
/// Gets a unit-vector pointing in the direction that this Location is
/// facing.
	fn direction(&self) 
-> Result<crate::util::Vector<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/util/Vector;");
let res = self.jni_ref().call_method(&self.jni_object(),"getDirection",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::util::Vector::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the {@link #getYaw() yaw} and {@link #getPitch() pitch} to point
/// in the direction of the vector.
	fn set_direction(&self,vector: impl Into<crate::util::Vector<'mc>>) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/util/Vector;)Lorg/bukkit/Location;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(vector.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"setDirection",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Adds the location by another. Not world-aware.
	fn add(&self,x: f64,y: std::option::Option<f64>,z: std::option::Option<f64>) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "D";
let val_1 = jni::objects::JValueGen::Double(x);
args.push(val_1);
if let Some(a) = y {
sig += "D";
let val_2 = jni::objects::JValueGen::Double(a);
args.push(val_2);
}
if let Some(a) = z {
sig += "D";
let val_3 = jni::objects::JValueGen::Double(a);
args.push(val_3);
}
sig += ")Lorg/bukkit/Location;";
let res = self.jni_ref().call_method(&self.jni_object(),"add",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Subtracts the location by another. Not world-aware and
/// orientation independent.
	fn subtract(&self,x: f64,y: std::option::Option<f64>,z: std::option::Option<f64>) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "D";
let val_1 = jni::objects::JValueGen::Double(x);
args.push(val_1);
if let Some(a) = y {
sig += "D";
let val_2 = jni::objects::JValueGen::Double(a);
args.push(val_2);
}
if let Some(a) = z {
sig += "D";
let val_3 = jni::objects::JValueGen::Double(a);
args.push(val_3);
}
sig += ")Lorg/bukkit/Location;";
let res = self.jni_ref().call_method(&self.jni_object(),"subtract",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the magnitude of the location, defined as sqrt(x^2+y^2+z^2). The
/// value of this method is not cached and uses a costly square-root
/// function, so do not repeatedly call this method to get the location's
/// magnitude. NaN will be returned if the inner result of the sqrt()
/// function overflows, which will be caused if the length is too long. Not
/// world-aware and orientation independent.
	fn length(&self) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("()D");
let res = self.jni_ref().call_method(&self.jni_object(),"length",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Gets the magnitude of the location squared. Not world-aware and
/// orientation independent.
	fn length_squared(&self) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("()D");
let res = self.jni_ref().call_method(&self.jni_object(),"lengthSquared",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Get the distance between this location and another. The value of this
/// method is not cached and uses a costly square-root function, so do not
/// repeatedly call this method to get the location's magnitude. NaN will
/// be returned if the inner result of the sqrt() function overflows, which
/// will be caused if the distance is too long.
	fn distance(&self,o: impl Into<crate::Location<'mc>>) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Location;)D");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(o.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"distance",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Get the squared distance between this location and another.
	fn distance_squared(&self,o: impl Into<crate::Location<'mc>>) 
-> Result<f64, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Location;)D");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(o.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"distanceSquared",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.d()?
)}
/// Performs scalar multiplication, multiplying all components with a
/// scalar. Not world-aware.
	fn multiply(&self,m: f64) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(D)Lorg/bukkit/Location;");
let val_1 = jni::objects::JValueGen::Double(m);
let res = self.jni_ref().call_method(&self.jni_object(),"multiply",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Zero this location's components. Not world-aware.
	fn zero(&self) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Location;");
let res = self.jni_ref().call_method(&self.jni_object(),"zero",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn equals(&self,obj: jni::objects::JObject<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Object;)Z");
let val_1 = jni::objects::JValueGen::Object(obj);
let res = self.jni_ref().call_method(&self.jni_object(),"equals",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

	fn hash_code(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"hashCode",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}

#[doc(hidden)]
	fn internal_to_string(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"toString",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Constructs a new {@link Vector} based on this Location
	fn to_vector(&self) 
-> Result<crate::util::Vector<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/util/Vector;");
let res = self.jni_ref().call_method(&self.jni_object(),"toVector",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::util::Vector::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn clone(&self) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Location;");
let res = self.jni_ref().call_method(&self.jni_object(),"clone",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Check if each component of this Location is finite.
	fn check_finite(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"checkFinite",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Safely converts a double (location coordinate) to an int (block
/// coordinate)
	fn loc_to_block(jni: &blackboxmc_general::SharedJNIEnv<'mc>,loc: f64) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(D)I");
let val_1 = jni::objects::JValueGen::Double(loc);
let cls = jni.find_class("org/bukkit/Location"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"locToBlock",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}

	fn serialize(&self) 
-> Result<blackboxmc_java::util::JavaMap<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Map;");
let res = self.jni_ref().call_method(&self.jni_object(),"serialize",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaMap::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Required method for deserialization
	fn deserialize(jni: &blackboxmc_general::SharedJNIEnv<'mc>,val_args: impl Into<blackboxmc_java::util::JavaMap<'mc>>) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/util/Map;)Lorg/bukkit/Location;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(val_args.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Location"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"deserialize",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Location::from_raw(&jni,obj
)}
/// Normalizes the given yaw angle to a value between <code>+/-180</code>
/// degrees.
	fn normalize_yaw(jni: &blackboxmc_general::SharedJNIEnv<'mc>,yaw: f32) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("(F)F");
let val_1 = jni::objects::JValueGen::Float(yaw);
let cls = jni.find_class("org/bukkit/Location"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"normalizeYaw",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
Ok(
res.f()?
)}
/// Normalizes the given pitch angle to a value between <code>+/-90</code>
/// degrees.
	fn normalize_pitch(jni: &blackboxmc_general::SharedJNIEnv<'mc>,pitch: f32) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("(F)F");
let val_1 = jni::objects::JValueGen::Float(pitch);
let cls = jni.find_class("org/bukkit/Location"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"normalizePitch",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
Ok(
res.f()?
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}

        impl<'mc> std::string::ToString for Location<'mc> {
            fn to_string(&self) -> String {
                match LocationTrait::internal_to_string(self) {
                    Ok(a) => a.clone(),
                    Err(err) => format!(
                        "Error calling Location.toString: {}",
                        err
                    ),
                }
            }
        }
        
impl<'mc> Into<crate::configuration::serialization::ConfigurationSerializable<'mc>> for Location<'mc>{

fn into(self) -> crate::configuration::serialization::ConfigurationSerializable<'mc> {

crate::configuration::serialization::ConfigurationSerializable::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting Location into crate::configuration::serialization::ConfigurationSerializable")

   }
}
impl<'mc> crate::configuration::serialization::ConfigurationSerializableTrait<'mc> for Location<'mc> {}
#[repr(C)]
pub struct VibrationDestination<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for VibrationDestination<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for VibrationDestination<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate VibrationDestination from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Vibration/Destination")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a VibrationDestination object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> VibrationDestinationTrait<'mc> for VibrationDestination<'mc> {}
pub trait VibrationDestinationTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct ParticleDustOptions<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for ParticleDustOptions<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for ParticleDustOptions<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate ParticleDustOptions from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Particle/DustOptions")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a ParticleDustOptions object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> ParticleDustOptionsTrait<'mc> for ParticleDustOptions<'mc> {}
pub trait ParticleDustOptionsTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

	fn new(jni: &blackboxmc_general::SharedJNIEnv<'mc>,color: impl Into<crate::Color<'mc>>,size: f32) 
-> Result<crate::ParticleDustOptions<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Color;F)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(color.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Float(size);
let cls = jni.find_class("org/bukkit/Particle/DustOptions"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.new_object(cls,
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
jni.translate_error_no_gen(res)?;
crate::ParticleDustOptions::from_raw(&jni,res
)}
/// The color of the particles to be displayed.
	fn color(&self) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Color;");
let res = self.jni_ref().call_method(&self.jni_object(),"getColor",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Color::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Relative size of the particle.
	fn size(&self) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("()F");
let res = self.jni_ref().call_method(&self.jni_object(),"getSize",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.f()?
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct NamespacedKey<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for NamespacedKey<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for NamespacedKey<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate NamespacedKey from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/NamespacedKey")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a NamespacedKey object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> NamespacedKeyTrait<'mc> for NamespacedKey<'mc> {}
pub trait NamespacedKeyTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Create a key in the plugin's namespace.
/// 
/// Namespaces may only contain lowercase alphanumeric characters, periods,
/// underscores, and hyphens.
/// 
/// Keys may only contain lowercase alphanumeric characters, periods,
/// underscores, hyphens, and forward slashes.
	fn new(jni: &blackboxmc_general::SharedJNIEnv<'mc>,plugin: impl Into<crate::plugin::Plugin<'mc>>,key: impl Into<String>) 
-> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/plugin/Plugin;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(plugin.into().jni_object().clone())});
args.push(val_1);
sig += "Ljava/lang/String;";
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(key.into())?));
args.push(val_2);
sig += ")V";
let cls = jni.find_class("org/bukkit/NamespacedKey"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.new_object(cls,
sig.as_str(),args);
let res = 
jni.translate_error_no_gen(res)?;
crate::NamespacedKey::from_raw(&jni,res
)}

	fn namespace(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getNamespace",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}

	fn key(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}

	fn hash_code(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"hashCode",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}

	fn equals(&self,obj: jni::objects::JObject<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Object;)Z");
let val_1 = jni::objects::JValueGen::Object(obj);
let res = self.jni_ref().call_method(&self.jni_object(),"equals",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

#[doc(hidden)]
	fn internal_to_string(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"toString",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Return a new random key in the {@link #BUKKIT} namespace.
	fn random_key(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/NamespacedKey;");
let cls = jni.find_class("org/bukkit/NamespacedKey"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"randomKey",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::NamespacedKey::from_raw(&jni,obj
)}
/// Get a key in the Minecraft namespace.
	fn minecraft(jni: &blackboxmc_general::SharedJNIEnv<'mc>,key: impl Into<String>) 
-> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/NamespacedKey;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(key.into())?));
let cls = jni.find_class("org/bukkit/NamespacedKey"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"minecraft",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::NamespacedKey::from_raw(&jni,obj
)}
/// Get a NamespacedKey from the supplied string with a default namespace if
/// a namespace is not defined. This is a utility method meant to fetch a
/// NamespacedKey from user input. Please note that casing does matter and
/// any instance of uppercase characters will be considered invalid. The
/// input contract is as follows:
/// <pre>
/// fromString("foo", plugin) -{@literal >} "plugin:foo"
/// fromString("foo:bar", plugin) -{@literal >} "foo:bar"
/// fromString(":foo", null) -{@literal >} "minecraft:foo"
/// fromString("foo", null) -{@literal >} "minecraft:foo"
/// fromString("Foo", plugin) -{@literal >} null
/// fromString(":Foo", plugin) -{@literal >} null
/// fromString("foo:bar:bazz", plugin) -{@literal >} null
/// fromString("", plugin) -{@literal >} null
/// </pre>
	fn from_string(jni: &blackboxmc_general::SharedJNIEnv<'mc>,string: impl Into<String>,default_namespace: std::option::Option<impl Into<crate::plugin::Plugin<'mc>>>) 
-> Result<Option<crate::NamespacedKey<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(string.into())?));
args.push(val_1);
if let Some(a) = default_namespace {
sig += "Lorg/bukkit/plugin/Plugin;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_2);
}
sig += ")Lorg/bukkit/NamespacedKey;";
let cls = jni.find_class("org/bukkit/NamespacedKey"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"fromString",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::NamespacedKey::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}

        impl<'mc> std::string::ToString for NamespacedKey<'mc> {
            fn to_string(&self) -> String {
                match NamespacedKeyTrait::internal_to_string(self) {
                    Ok(a) => a.clone(),
                    Err(err) => format!(
                        "Error calling NamespacedKey.toString: {}",
                        err
                    ),
                }
            }
        }
        
pub enum GrassSpecies<'mc> {
	Dead {inner: GrassSpeciesStruct<'mc>},
	Normal {inner: GrassSpeciesStruct<'mc>},
	FernLike {inner: GrassSpeciesStruct<'mc>},
}
impl<'mc> std::fmt::Display for GrassSpecies<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           GrassSpecies::Dead { .. } => f.write_str("DEAD"),
           GrassSpecies::Normal { .. } => f.write_str("NORMAL"),
           GrassSpecies::FernLike { .. } => f.write_str("FERN_LIKE"),
       }
   }
}

        impl<'mc> GrassSpeciesTrait<'mc> for GrassSpecies<'mc> {}
        
        pub trait GrassSpeciesTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<GrassSpecies<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/GrassSpecies");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/GrassSpecies;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"DEAD" => Ok(GrassSpecies::Dead { inner: GrassSpeciesStruct::from_raw(env,obj)?}),
"NORMAL" => Ok(GrassSpecies::Normal { inner: GrassSpeciesStruct::from_raw(env,obj)?}),
"FERN_LIKE" => Ok(GrassSpecies::FernLike { inner: GrassSpeciesStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct GrassSpeciesStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for GrassSpecies<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Dead { inner } => inner.0.clone(),
Self::Normal { inner } => inner.0.clone(),
Self::FernLike { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Dead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Normal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FernLike { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for GrassSpecies<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate GrassSpecies from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/GrassSpecies")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a GrassSpecies object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "DEAD" => Ok(GrassSpecies::Dead { inner: GrassSpeciesStruct::from_raw(env,obj)?}),"NORMAL" => Ok(GrassSpecies::Normal { inner: GrassSpeciesStruct::from_raw(env,obj)?}),"FERN_LIKE" => Ok(GrassSpecies::FernLike { inner: GrassSpeciesStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for GrassSpeciesStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for GrassSpeciesStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate GrassSpeciesStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/GrassSpecies")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a GrassSpeciesStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> GrassSpeciesStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::GrassSpecies<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/GrassSpecies;");
let cls = jni.find_class("org/bukkit/GrassSpecies"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::GrassSpecies::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the associated data value representing this species
	fn data(&self) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("()B");
let res = self.jni_ref().call_method(&self.jni_object(),"getData",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
#[deprecated]
/// Gets the GrassSpecies with the given data value
	fn get_by_data(jni: &blackboxmc_general::SharedJNIEnv<'mc>,data: i8) 
-> Result<Option<crate::GrassSpecies<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(B)Lorg/bukkit/GrassSpecies;");
let val_1 = jni::objects::JValueGen::Byte(data);
let cls = jni.find_class("org/bukkit/GrassSpecies"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByData",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::GrassSpecies::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct GameEvent<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for GameEvent<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for GameEvent<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate GameEvent from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/GameEvent")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a GameEvent object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> GameEventTrait<'mc> for GameEvent<'mc> {}
pub trait GameEventTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

	fn new(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::GameEvent<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()V");
let cls = jni.find_class("org/bukkit/GameEvent"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.new_object(cls,
sig.as_str(),vec![]);
let res = 
jni.translate_error_no_gen(res)?;
crate::GameEvent::from_raw(&jni,res
)}
#[deprecated]
/// Returns a {@link GameEvent} by a {@link NamespacedKey}.
	fn get_by_key(jni: &blackboxmc_general::SharedJNIEnv<'mc>,namespaced_key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<crate::GameEvent<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/GameEvent;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(namespaced_key.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/GameEvent"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByKey",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::GameEvent::from_raw(&jni,obj
)?
)
)}
#[deprecated]
/// Returns the set of all GameEvents.
	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<Vec<crate::GameEvent<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Collection;");
let cls = jni.find_class("org/bukkit/GameEvent"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&jni,res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::GameEvent::from_raw(&jni,obj,)?);
};
Ok(
new_vec
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::Keyed<'mc>> for GameEvent<'mc>{

fn into(self) -> crate::Keyed<'mc> {

crate::Keyed::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting GameEvent into crate::Keyed")

   }
}
impl<'mc> crate::KeyedTrait<'mc> for GameEvent<'mc> {}
#[repr(C)]
pub struct Nameable<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Nameable<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Nameable<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Nameable from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Nameable")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Nameable object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> NameableTrait<'mc> for Nameable<'mc> {}
pub trait NameableTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Gets the custom name on a mob or block. If there is no name this method
/// will return null.
/// 
/// This value has no effect on players, they will always use their real
/// name.
	fn custom_name(&self) 
-> Result<Option<String>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getCustomName",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)
)}
/// Sets a custom name on a mob or block. This name will be used in death
/// messages and can be sent to the client as a nameplate over the mob.
/// 
/// Setting the name to null or an empty string will clear it.
/// 
/// This value has no effect on players, they will always use their real
/// name.
	fn set_custom_name(&self,name: impl Into<String>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)V");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(name.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"setCustomName",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum EntityEffect<'mc> {
	ArrowParticles {inner: EntityEffectStruct<'mc>},
	RabbitJump {inner: EntityEffectStruct<'mc>},
	ResetSpawnerMinecartDelay {inner: EntityEffectStruct<'mc>},
	Hurt {inner: EntityEffectStruct<'mc>},
	Death {inner: EntityEffectStruct<'mc>},
	EggBreak {inner: EntityEffectStruct<'mc>},
	SnowballBreak {inner: EntityEffectStruct<'mc>},
	EntityDeath {inner: EntityEffectStruct<'mc>},
	FangAttack {inner: EntityEffectStruct<'mc>},
	HoglinAttack {inner: EntityEffectStruct<'mc>},
	IronGolenAttack {inner: EntityEffectStruct<'mc>},
	RavagerAttack {inner: EntityEffectStruct<'mc>},
	WardenAttack {inner: EntityEffectStruct<'mc>},
	ZoglinAttack {inner: EntityEffectStruct<'mc>},
	WolfSmoke {inner: EntityEffectStruct<'mc>},
	WolfHearts {inner: EntityEffectStruct<'mc>},
	WolfShake {inner: EntityEffectStruct<'mc>},
	SheepEat {inner: EntityEffectStruct<'mc>},
	SheepEatGrass {inner: EntityEffectStruct<'mc>},
	TntMinecartIgnite {inner: EntityEffectStruct<'mc>},
	IronGolemRose {inner: EntityEffectStruct<'mc>},
	VillagerHeart {inner: EntityEffectStruct<'mc>},
	VillagerAngry {inner: EntityEffectStruct<'mc>},
	VillagerHappy {inner: EntityEffectStruct<'mc>},
	WitchMagic {inner: EntityEffectStruct<'mc>},
	ZombieTransform {inner: EntityEffectStruct<'mc>},
	FireworkExplode {inner: EntityEffectStruct<'mc>},
	LoveHearts {inner: EntityEffectStruct<'mc>},
	SquidRotate {inner: EntityEffectStruct<'mc>},
	EntityPoof {inner: EntityEffectStruct<'mc>},
	GuardianTarget {inner: EntityEffectStruct<'mc>},
	ShieldBlock {inner: EntityEffectStruct<'mc>},
	ShieldBreak {inner: EntityEffectStruct<'mc>},
	ArmorStandHit {inner: EntityEffectStruct<'mc>},
	ThornsHurt {inner: EntityEffectStruct<'mc>},
	IronGolemSheath {inner: EntityEffectStruct<'mc>},
	TotemResurrect {inner: EntityEffectStruct<'mc>},
	HurtDrown {inner: EntityEffectStruct<'mc>},
	HurtExplosion {inner: EntityEffectStruct<'mc>},
	DolphinFed {inner: EntityEffectStruct<'mc>},
	RavagerStunned {inner: EntityEffectStruct<'mc>},
	CatTameFail {inner: EntityEffectStruct<'mc>},
	CatTameSuccess {inner: EntityEffectStruct<'mc>},
	VillagerSplash {inner: EntityEffectStruct<'mc>},
	PlayerBadOmenRaid {inner: EntityEffectStruct<'mc>},
	HurtBerryBush {inner: EntityEffectStruct<'mc>},
	FoxChew {inner: EntityEffectStruct<'mc>},
	TeleportEnder {inner: EntityEffectStruct<'mc>},
	BreakEquipmentMainHand {inner: EntityEffectStruct<'mc>},
	BreakEquipmentOffHand {inner: EntityEffectStruct<'mc>},
	BreakEquipmentHelmet {inner: EntityEffectStruct<'mc>},
	BreakEquipmentChestplate {inner: EntityEffectStruct<'mc>},
	BreakEquipmentLeggings {inner: EntityEffectStruct<'mc>},
	BreakEquipmentBoots {inner: EntityEffectStruct<'mc>},
	HoneyBlockSlideParticles {inner: EntityEffectStruct<'mc>},
	HoneyBlockFallParticles {inner: EntityEffectStruct<'mc>},
	SwapHandItems {inner: EntityEffectStruct<'mc>},
	WolfShakeStop {inner: EntityEffectStruct<'mc>},
	GoatLowerHead {inner: EntityEffectStruct<'mc>},
	GoatRaiseHead {inner: EntityEffectStruct<'mc>},
	SpawnDeathSmoke {inner: EntityEffectStruct<'mc>},
	WardenTendrilShake {inner: EntityEffectStruct<'mc>},
	WardenSonicAttack {inner: EntityEffectStruct<'mc>},
	SnifferDig {inner: EntityEffectStruct<'mc>},
}
impl<'mc> std::fmt::Display for EntityEffect<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           EntityEffect::ArrowParticles { .. } => f.write_str("ARROW_PARTICLES"),
           EntityEffect::RabbitJump { .. } => f.write_str("RABBIT_JUMP"),
           EntityEffect::ResetSpawnerMinecartDelay { .. } => f.write_str("RESET_SPAWNER_MINECART_DELAY"),
           EntityEffect::Hurt { .. } => f.write_str("HURT"),
           EntityEffect::Death { .. } => f.write_str("DEATH"),
           EntityEffect::EggBreak { .. } => f.write_str("EGG_BREAK"),
           EntityEffect::SnowballBreak { .. } => f.write_str("SNOWBALL_BREAK"),
           EntityEffect::EntityDeath { .. } => f.write_str("ENTITY_DEATH"),
           EntityEffect::FangAttack { .. } => f.write_str("FANG_ATTACK"),
           EntityEffect::HoglinAttack { .. } => f.write_str("HOGLIN_ATTACK"),
           EntityEffect::IronGolenAttack { .. } => f.write_str("IRON_GOLEN_ATTACK"),
           EntityEffect::RavagerAttack { .. } => f.write_str("RAVAGER_ATTACK"),
           EntityEffect::WardenAttack { .. } => f.write_str("WARDEN_ATTACK"),
           EntityEffect::ZoglinAttack { .. } => f.write_str("ZOGLIN_ATTACK"),
           EntityEffect::WolfSmoke { .. } => f.write_str("WOLF_SMOKE"),
           EntityEffect::WolfHearts { .. } => f.write_str("WOLF_HEARTS"),
           EntityEffect::WolfShake { .. } => f.write_str("WOLF_SHAKE"),
           EntityEffect::SheepEat { .. } => f.write_str("SHEEP_EAT"),
           EntityEffect::SheepEatGrass { .. } => f.write_str("SHEEP_EAT_GRASS"),
           EntityEffect::TntMinecartIgnite { .. } => f.write_str("TNT_MINECART_IGNITE"),
           EntityEffect::IronGolemRose { .. } => f.write_str("IRON_GOLEM_ROSE"),
           EntityEffect::VillagerHeart { .. } => f.write_str("VILLAGER_HEART"),
           EntityEffect::VillagerAngry { .. } => f.write_str("VILLAGER_ANGRY"),
           EntityEffect::VillagerHappy { .. } => f.write_str("VILLAGER_HAPPY"),
           EntityEffect::WitchMagic { .. } => f.write_str("WITCH_MAGIC"),
           EntityEffect::ZombieTransform { .. } => f.write_str("ZOMBIE_TRANSFORM"),
           EntityEffect::FireworkExplode { .. } => f.write_str("FIREWORK_EXPLODE"),
           EntityEffect::LoveHearts { .. } => f.write_str("LOVE_HEARTS"),
           EntityEffect::SquidRotate { .. } => f.write_str("SQUID_ROTATE"),
           EntityEffect::EntityPoof { .. } => f.write_str("ENTITY_POOF"),
           EntityEffect::GuardianTarget { .. } => f.write_str("GUARDIAN_TARGET"),
           EntityEffect::ShieldBlock { .. } => f.write_str("SHIELD_BLOCK"),
           EntityEffect::ShieldBreak { .. } => f.write_str("SHIELD_BREAK"),
           EntityEffect::ArmorStandHit { .. } => f.write_str("ARMOR_STAND_HIT"),
           EntityEffect::ThornsHurt { .. } => f.write_str("THORNS_HURT"),
           EntityEffect::IronGolemSheath { .. } => f.write_str("IRON_GOLEM_SHEATH"),
           EntityEffect::TotemResurrect { .. } => f.write_str("TOTEM_RESURRECT"),
           EntityEffect::HurtDrown { .. } => f.write_str("HURT_DROWN"),
           EntityEffect::HurtExplosion { .. } => f.write_str("HURT_EXPLOSION"),
           EntityEffect::DolphinFed { .. } => f.write_str("DOLPHIN_FED"),
           EntityEffect::RavagerStunned { .. } => f.write_str("RAVAGER_STUNNED"),
           EntityEffect::CatTameFail { .. } => f.write_str("CAT_TAME_FAIL"),
           EntityEffect::CatTameSuccess { .. } => f.write_str("CAT_TAME_SUCCESS"),
           EntityEffect::VillagerSplash { .. } => f.write_str("VILLAGER_SPLASH"),
           EntityEffect::PlayerBadOmenRaid { .. } => f.write_str("PLAYER_BAD_OMEN_RAID"),
           EntityEffect::HurtBerryBush { .. } => f.write_str("HURT_BERRY_BUSH"),
           EntityEffect::FoxChew { .. } => f.write_str("FOX_CHEW"),
           EntityEffect::TeleportEnder { .. } => f.write_str("TELEPORT_ENDER"),
           EntityEffect::BreakEquipmentMainHand { .. } => f.write_str("BREAK_EQUIPMENT_MAIN_HAND"),
           EntityEffect::BreakEquipmentOffHand { .. } => f.write_str("BREAK_EQUIPMENT_OFF_HAND"),
           EntityEffect::BreakEquipmentHelmet { .. } => f.write_str("BREAK_EQUIPMENT_HELMET"),
           EntityEffect::BreakEquipmentChestplate { .. } => f.write_str("BREAK_EQUIPMENT_CHESTPLATE"),
           EntityEffect::BreakEquipmentLeggings { .. } => f.write_str("BREAK_EQUIPMENT_LEGGINGS"),
           EntityEffect::BreakEquipmentBoots { .. } => f.write_str("BREAK_EQUIPMENT_BOOTS"),
           EntityEffect::HoneyBlockSlideParticles { .. } => f.write_str("HONEY_BLOCK_SLIDE_PARTICLES"),
           EntityEffect::HoneyBlockFallParticles { .. } => f.write_str("HONEY_BLOCK_FALL_PARTICLES"),
           EntityEffect::SwapHandItems { .. } => f.write_str("SWAP_HAND_ITEMS"),
           EntityEffect::WolfShakeStop { .. } => f.write_str("WOLF_SHAKE_STOP"),
           EntityEffect::GoatLowerHead { .. } => f.write_str("GOAT_LOWER_HEAD"),
           EntityEffect::GoatRaiseHead { .. } => f.write_str("GOAT_RAISE_HEAD"),
           EntityEffect::SpawnDeathSmoke { .. } => f.write_str("SPAWN_DEATH_SMOKE"),
           EntityEffect::WardenTendrilShake { .. } => f.write_str("WARDEN_TENDRIL_SHAKE"),
           EntityEffect::WardenSonicAttack { .. } => f.write_str("WARDEN_SONIC_ATTACK"),
           EntityEffect::SnifferDig { .. } => f.write_str("SNIFFER_DIG"),
       }
   }
}

        impl<'mc> EntityEffectTrait<'mc> for EntityEffect<'mc> {}
        
        pub trait EntityEffectTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<EntityEffect<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/EntityEffect");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/EntityEffect;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"ARROW_PARTICLES" => Ok(EntityEffect::ArrowParticles { inner: EntityEffectStruct::from_raw(env,obj)?}),
"RABBIT_JUMP" => Ok(EntityEffect::RabbitJump { inner: EntityEffectStruct::from_raw(env,obj)?}),
"RESET_SPAWNER_MINECART_DELAY" => Ok(EntityEffect::ResetSpawnerMinecartDelay { inner: EntityEffectStruct::from_raw(env,obj)?}),
"HURT" => Ok(EntityEffect::Hurt { inner: EntityEffectStruct::from_raw(env,obj)?}),
"DEATH" => Ok(EntityEffect::Death { inner: EntityEffectStruct::from_raw(env,obj)?}),
"EGG_BREAK" => Ok(EntityEffect::EggBreak { inner: EntityEffectStruct::from_raw(env,obj)?}),
"SNOWBALL_BREAK" => Ok(EntityEffect::SnowballBreak { inner: EntityEffectStruct::from_raw(env,obj)?}),
"ENTITY_DEATH" => Ok(EntityEffect::EntityDeath { inner: EntityEffectStruct::from_raw(env,obj)?}),
"FANG_ATTACK" => Ok(EntityEffect::FangAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),
"HOGLIN_ATTACK" => Ok(EntityEffect::HoglinAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),
"IRON_GOLEN_ATTACK" => Ok(EntityEffect::IronGolenAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),
"RAVAGER_ATTACK" => Ok(EntityEffect::RavagerAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),
"WARDEN_ATTACK" => Ok(EntityEffect::WardenAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),
"ZOGLIN_ATTACK" => Ok(EntityEffect::ZoglinAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),
"WOLF_SMOKE" => Ok(EntityEffect::WolfSmoke { inner: EntityEffectStruct::from_raw(env,obj)?}),
"WOLF_HEARTS" => Ok(EntityEffect::WolfHearts { inner: EntityEffectStruct::from_raw(env,obj)?}),
"WOLF_SHAKE" => Ok(EntityEffect::WolfShake { inner: EntityEffectStruct::from_raw(env,obj)?}),
"SHEEP_EAT" => Ok(EntityEffect::SheepEat { inner: EntityEffectStruct::from_raw(env,obj)?}),
"SHEEP_EAT_GRASS" => Ok(EntityEffect::SheepEatGrass { inner: EntityEffectStruct::from_raw(env,obj)?}),
"TNT_MINECART_IGNITE" => Ok(EntityEffect::TntMinecartIgnite { inner: EntityEffectStruct::from_raw(env,obj)?}),
"IRON_GOLEM_ROSE" => Ok(EntityEffect::IronGolemRose { inner: EntityEffectStruct::from_raw(env,obj)?}),
"VILLAGER_HEART" => Ok(EntityEffect::VillagerHeart { inner: EntityEffectStruct::from_raw(env,obj)?}),
"VILLAGER_ANGRY" => Ok(EntityEffect::VillagerAngry { inner: EntityEffectStruct::from_raw(env,obj)?}),
"VILLAGER_HAPPY" => Ok(EntityEffect::VillagerHappy { inner: EntityEffectStruct::from_raw(env,obj)?}),
"WITCH_MAGIC" => Ok(EntityEffect::WitchMagic { inner: EntityEffectStruct::from_raw(env,obj)?}),
"ZOMBIE_TRANSFORM" => Ok(EntityEffect::ZombieTransform { inner: EntityEffectStruct::from_raw(env,obj)?}),
"FIREWORK_EXPLODE" => Ok(EntityEffect::FireworkExplode { inner: EntityEffectStruct::from_raw(env,obj)?}),
"LOVE_HEARTS" => Ok(EntityEffect::LoveHearts { inner: EntityEffectStruct::from_raw(env,obj)?}),
"SQUID_ROTATE" => Ok(EntityEffect::SquidRotate { inner: EntityEffectStruct::from_raw(env,obj)?}),
"ENTITY_POOF" => Ok(EntityEffect::EntityPoof { inner: EntityEffectStruct::from_raw(env,obj)?}),
"GUARDIAN_TARGET" => Ok(EntityEffect::GuardianTarget { inner: EntityEffectStruct::from_raw(env,obj)?}),
"SHIELD_BLOCK" => Ok(EntityEffect::ShieldBlock { inner: EntityEffectStruct::from_raw(env,obj)?}),
"SHIELD_BREAK" => Ok(EntityEffect::ShieldBreak { inner: EntityEffectStruct::from_raw(env,obj)?}),
"ARMOR_STAND_HIT" => Ok(EntityEffect::ArmorStandHit { inner: EntityEffectStruct::from_raw(env,obj)?}),
"THORNS_HURT" => Ok(EntityEffect::ThornsHurt { inner: EntityEffectStruct::from_raw(env,obj)?}),
"IRON_GOLEM_SHEATH" => Ok(EntityEffect::IronGolemSheath { inner: EntityEffectStruct::from_raw(env,obj)?}),
"TOTEM_RESURRECT" => Ok(EntityEffect::TotemResurrect { inner: EntityEffectStruct::from_raw(env,obj)?}),
"HURT_DROWN" => Ok(EntityEffect::HurtDrown { inner: EntityEffectStruct::from_raw(env,obj)?}),
"HURT_EXPLOSION" => Ok(EntityEffect::HurtExplosion { inner: EntityEffectStruct::from_raw(env,obj)?}),
"DOLPHIN_FED" => Ok(EntityEffect::DolphinFed { inner: EntityEffectStruct::from_raw(env,obj)?}),
"RAVAGER_STUNNED" => Ok(EntityEffect::RavagerStunned { inner: EntityEffectStruct::from_raw(env,obj)?}),
"CAT_TAME_FAIL" => Ok(EntityEffect::CatTameFail { inner: EntityEffectStruct::from_raw(env,obj)?}),
"CAT_TAME_SUCCESS" => Ok(EntityEffect::CatTameSuccess { inner: EntityEffectStruct::from_raw(env,obj)?}),
"VILLAGER_SPLASH" => Ok(EntityEffect::VillagerSplash { inner: EntityEffectStruct::from_raw(env,obj)?}),
"PLAYER_BAD_OMEN_RAID" => Ok(EntityEffect::PlayerBadOmenRaid { inner: EntityEffectStruct::from_raw(env,obj)?}),
"HURT_BERRY_BUSH" => Ok(EntityEffect::HurtBerryBush { inner: EntityEffectStruct::from_raw(env,obj)?}),
"FOX_CHEW" => Ok(EntityEffect::FoxChew { inner: EntityEffectStruct::from_raw(env,obj)?}),
"TELEPORT_ENDER" => Ok(EntityEffect::TeleportEnder { inner: EntityEffectStruct::from_raw(env,obj)?}),
"BREAK_EQUIPMENT_MAIN_HAND" => Ok(EntityEffect::BreakEquipmentMainHand { inner: EntityEffectStruct::from_raw(env,obj)?}),
"BREAK_EQUIPMENT_OFF_HAND" => Ok(EntityEffect::BreakEquipmentOffHand { inner: EntityEffectStruct::from_raw(env,obj)?}),
"BREAK_EQUIPMENT_HELMET" => Ok(EntityEffect::BreakEquipmentHelmet { inner: EntityEffectStruct::from_raw(env,obj)?}),
"BREAK_EQUIPMENT_CHESTPLATE" => Ok(EntityEffect::BreakEquipmentChestplate { inner: EntityEffectStruct::from_raw(env,obj)?}),
"BREAK_EQUIPMENT_LEGGINGS" => Ok(EntityEffect::BreakEquipmentLeggings { inner: EntityEffectStruct::from_raw(env,obj)?}),
"BREAK_EQUIPMENT_BOOTS" => Ok(EntityEffect::BreakEquipmentBoots { inner: EntityEffectStruct::from_raw(env,obj)?}),
"HONEY_BLOCK_SLIDE_PARTICLES" => Ok(EntityEffect::HoneyBlockSlideParticles { inner: EntityEffectStruct::from_raw(env,obj)?}),
"HONEY_BLOCK_FALL_PARTICLES" => Ok(EntityEffect::HoneyBlockFallParticles { inner: EntityEffectStruct::from_raw(env,obj)?}),
"SWAP_HAND_ITEMS" => Ok(EntityEffect::SwapHandItems { inner: EntityEffectStruct::from_raw(env,obj)?}),
"WOLF_SHAKE_STOP" => Ok(EntityEffect::WolfShakeStop { inner: EntityEffectStruct::from_raw(env,obj)?}),
"GOAT_LOWER_HEAD" => Ok(EntityEffect::GoatLowerHead { inner: EntityEffectStruct::from_raw(env,obj)?}),
"GOAT_RAISE_HEAD" => Ok(EntityEffect::GoatRaiseHead { inner: EntityEffectStruct::from_raw(env,obj)?}),
"SPAWN_DEATH_SMOKE" => Ok(EntityEffect::SpawnDeathSmoke { inner: EntityEffectStruct::from_raw(env,obj)?}),
"WARDEN_TENDRIL_SHAKE" => Ok(EntityEffect::WardenTendrilShake { inner: EntityEffectStruct::from_raw(env,obj)?}),
"WARDEN_SONIC_ATTACK" => Ok(EntityEffect::WardenSonicAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),
"SNIFFER_DIG" => Ok(EntityEffect::SnifferDig { inner: EntityEffectStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct EntityEffectStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for EntityEffect<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::ArrowParticles { inner } => inner.0.clone(),
Self::RabbitJump { inner } => inner.0.clone(),
Self::ResetSpawnerMinecartDelay { inner } => inner.0.clone(),
Self::Hurt { inner } => inner.0.clone(),
Self::Death { inner } => inner.0.clone(),
Self::EggBreak { inner } => inner.0.clone(),
Self::SnowballBreak { inner } => inner.0.clone(),
Self::EntityDeath { inner } => inner.0.clone(),
Self::FangAttack { inner } => inner.0.clone(),
Self::HoglinAttack { inner } => inner.0.clone(),
Self::IronGolenAttack { inner } => inner.0.clone(),
Self::RavagerAttack { inner } => inner.0.clone(),
Self::WardenAttack { inner } => inner.0.clone(),
Self::ZoglinAttack { inner } => inner.0.clone(),
Self::WolfSmoke { inner } => inner.0.clone(),
Self::WolfHearts { inner } => inner.0.clone(),
Self::WolfShake { inner } => inner.0.clone(),
Self::SheepEat { inner } => inner.0.clone(),
Self::SheepEatGrass { inner } => inner.0.clone(),
Self::TntMinecartIgnite { inner } => inner.0.clone(),
Self::IronGolemRose { inner } => inner.0.clone(),
Self::VillagerHeart { inner } => inner.0.clone(),
Self::VillagerAngry { inner } => inner.0.clone(),
Self::VillagerHappy { inner } => inner.0.clone(),
Self::WitchMagic { inner } => inner.0.clone(),
Self::ZombieTransform { inner } => inner.0.clone(),
Self::FireworkExplode { inner } => inner.0.clone(),
Self::LoveHearts { inner } => inner.0.clone(),
Self::SquidRotate { inner } => inner.0.clone(),
Self::EntityPoof { inner } => inner.0.clone(),
Self::GuardianTarget { inner } => inner.0.clone(),
Self::ShieldBlock { inner } => inner.0.clone(),
Self::ShieldBreak { inner } => inner.0.clone(),
Self::ArmorStandHit { inner } => inner.0.clone(),
Self::ThornsHurt { inner } => inner.0.clone(),
Self::IronGolemSheath { inner } => inner.0.clone(),
Self::TotemResurrect { inner } => inner.0.clone(),
Self::HurtDrown { inner } => inner.0.clone(),
Self::HurtExplosion { inner } => inner.0.clone(),
Self::DolphinFed { inner } => inner.0.clone(),
Self::RavagerStunned { inner } => inner.0.clone(),
Self::CatTameFail { inner } => inner.0.clone(),
Self::CatTameSuccess { inner } => inner.0.clone(),
Self::VillagerSplash { inner } => inner.0.clone(),
Self::PlayerBadOmenRaid { inner } => inner.0.clone(),
Self::HurtBerryBush { inner } => inner.0.clone(),
Self::FoxChew { inner } => inner.0.clone(),
Self::TeleportEnder { inner } => inner.0.clone(),
Self::BreakEquipmentMainHand { inner } => inner.0.clone(),
Self::BreakEquipmentOffHand { inner } => inner.0.clone(),
Self::BreakEquipmentHelmet { inner } => inner.0.clone(),
Self::BreakEquipmentChestplate { inner } => inner.0.clone(),
Self::BreakEquipmentLeggings { inner } => inner.0.clone(),
Self::BreakEquipmentBoots { inner } => inner.0.clone(),
Self::HoneyBlockSlideParticles { inner } => inner.0.clone(),
Self::HoneyBlockFallParticles { inner } => inner.0.clone(),
Self::SwapHandItems { inner } => inner.0.clone(),
Self::WolfShakeStop { inner } => inner.0.clone(),
Self::GoatLowerHead { inner } => inner.0.clone(),
Self::GoatRaiseHead { inner } => inner.0.clone(),
Self::SpawnDeathSmoke { inner } => inner.0.clone(),
Self::WardenTendrilShake { inner } => inner.0.clone(),
Self::WardenSonicAttack { inner } => inner.0.clone(),
Self::SnifferDig { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::ArrowParticles { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RabbitJump { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ResetSpawnerMinecartDelay { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Hurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Death { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EggBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SnowballBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FangAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HoglinAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronGolenAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RavagerAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WardenAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZoglinAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WolfSmoke { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WolfHearts { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WolfShake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SheepEat { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SheepEatGrass { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TntMinecartIgnite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronGolemRose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VillagerHeart { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VillagerAngry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VillagerHappy { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WitchMagic { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieTransform { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FireworkExplode { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LoveHearts { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SquidRotate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityPoof { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GuardianTarget { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ShieldBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ShieldBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ArmorStandHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ThornsHurt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronGolemSheath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TotemResurrect { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HurtDrown { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HurtExplosion { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DolphinFed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RavagerStunned { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CatTameFail { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CatTameSuccess { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VillagerSplash { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PlayerBadOmenRaid { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HurtBerryBush { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FoxChew { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TeleportEnder { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BreakEquipmentMainHand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BreakEquipmentOffHand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BreakEquipmentHelmet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BreakEquipmentChestplate { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BreakEquipmentLeggings { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BreakEquipmentBoots { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HoneyBlockSlideParticles { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HoneyBlockFallParticles { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SwapHandItems { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WolfShakeStop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoatLowerHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GoatRaiseHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpawnDeathSmoke { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WardenTendrilShake { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WardenSonicAttack { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SnifferDig { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for EntityEffect<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate EntityEffect from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/EntityEffect")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a EntityEffect object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "ARROW_PARTICLES" => Ok(EntityEffect::ArrowParticles { inner: EntityEffectStruct::from_raw(env,obj)?}),"RABBIT_JUMP" => Ok(EntityEffect::RabbitJump { inner: EntityEffectStruct::from_raw(env,obj)?}),"RESET_SPAWNER_MINECART_DELAY" => Ok(EntityEffect::ResetSpawnerMinecartDelay { inner: EntityEffectStruct::from_raw(env,obj)?}),"HURT" => Ok(EntityEffect::Hurt { inner: EntityEffectStruct::from_raw(env,obj)?}),"DEATH" => Ok(EntityEffect::Death { inner: EntityEffectStruct::from_raw(env,obj)?}),"EGG_BREAK" => Ok(EntityEffect::EggBreak { inner: EntityEffectStruct::from_raw(env,obj)?}),"SNOWBALL_BREAK" => Ok(EntityEffect::SnowballBreak { inner: EntityEffectStruct::from_raw(env,obj)?}),"ENTITY_DEATH" => Ok(EntityEffect::EntityDeath { inner: EntityEffectStruct::from_raw(env,obj)?}),"FANG_ATTACK" => Ok(EntityEffect::FangAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),"HOGLIN_ATTACK" => Ok(EntityEffect::HoglinAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),"IRON_GOLEN_ATTACK" => Ok(EntityEffect::IronGolenAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),"RAVAGER_ATTACK" => Ok(EntityEffect::RavagerAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),"WARDEN_ATTACK" => Ok(EntityEffect::WardenAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),"ZOGLIN_ATTACK" => Ok(EntityEffect::ZoglinAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),"WOLF_SMOKE" => Ok(EntityEffect::WolfSmoke { inner: EntityEffectStruct::from_raw(env,obj)?}),"WOLF_HEARTS" => Ok(EntityEffect::WolfHearts { inner: EntityEffectStruct::from_raw(env,obj)?}),"WOLF_SHAKE" => Ok(EntityEffect::WolfShake { inner: EntityEffectStruct::from_raw(env,obj)?}),"SHEEP_EAT" => Ok(EntityEffect::SheepEat { inner: EntityEffectStruct::from_raw(env,obj)?}),"SHEEP_EAT_GRASS" => Ok(EntityEffect::SheepEatGrass { inner: EntityEffectStruct::from_raw(env,obj)?}),"TNT_MINECART_IGNITE" => Ok(EntityEffect::TntMinecartIgnite { inner: EntityEffectStruct::from_raw(env,obj)?}),"IRON_GOLEM_ROSE" => Ok(EntityEffect::IronGolemRose { inner: EntityEffectStruct::from_raw(env,obj)?}),"VILLAGER_HEART" => Ok(EntityEffect::VillagerHeart { inner: EntityEffectStruct::from_raw(env,obj)?}),"VILLAGER_ANGRY" => Ok(EntityEffect::VillagerAngry { inner: EntityEffectStruct::from_raw(env,obj)?}),"VILLAGER_HAPPY" => Ok(EntityEffect::VillagerHappy { inner: EntityEffectStruct::from_raw(env,obj)?}),"WITCH_MAGIC" => Ok(EntityEffect::WitchMagic { inner: EntityEffectStruct::from_raw(env,obj)?}),"ZOMBIE_TRANSFORM" => Ok(EntityEffect::ZombieTransform { inner: EntityEffectStruct::from_raw(env,obj)?}),"FIREWORK_EXPLODE" => Ok(EntityEffect::FireworkExplode { inner: EntityEffectStruct::from_raw(env,obj)?}),"LOVE_HEARTS" => Ok(EntityEffect::LoveHearts { inner: EntityEffectStruct::from_raw(env,obj)?}),"SQUID_ROTATE" => Ok(EntityEffect::SquidRotate { inner: EntityEffectStruct::from_raw(env,obj)?}),"ENTITY_POOF" => Ok(EntityEffect::EntityPoof { inner: EntityEffectStruct::from_raw(env,obj)?}),"GUARDIAN_TARGET" => Ok(EntityEffect::GuardianTarget { inner: EntityEffectStruct::from_raw(env,obj)?}),"SHIELD_BLOCK" => Ok(EntityEffect::ShieldBlock { inner: EntityEffectStruct::from_raw(env,obj)?}),"SHIELD_BREAK" => Ok(EntityEffect::ShieldBreak { inner: EntityEffectStruct::from_raw(env,obj)?}),"ARMOR_STAND_HIT" => Ok(EntityEffect::ArmorStandHit { inner: EntityEffectStruct::from_raw(env,obj)?}),"THORNS_HURT" => Ok(EntityEffect::ThornsHurt { inner: EntityEffectStruct::from_raw(env,obj)?}),"IRON_GOLEM_SHEATH" => Ok(EntityEffect::IronGolemSheath { inner: EntityEffectStruct::from_raw(env,obj)?}),"TOTEM_RESURRECT" => Ok(EntityEffect::TotemResurrect { inner: EntityEffectStruct::from_raw(env,obj)?}),"HURT_DROWN" => Ok(EntityEffect::HurtDrown { inner: EntityEffectStruct::from_raw(env,obj)?}),"HURT_EXPLOSION" => Ok(EntityEffect::HurtExplosion { inner: EntityEffectStruct::from_raw(env,obj)?}),"DOLPHIN_FED" => Ok(EntityEffect::DolphinFed { inner: EntityEffectStruct::from_raw(env,obj)?}),"RAVAGER_STUNNED" => Ok(EntityEffect::RavagerStunned { inner: EntityEffectStruct::from_raw(env,obj)?}),"CAT_TAME_FAIL" => Ok(EntityEffect::CatTameFail { inner: EntityEffectStruct::from_raw(env,obj)?}),"CAT_TAME_SUCCESS" => Ok(EntityEffect::CatTameSuccess { inner: EntityEffectStruct::from_raw(env,obj)?}),"VILLAGER_SPLASH" => Ok(EntityEffect::VillagerSplash { inner: EntityEffectStruct::from_raw(env,obj)?}),"PLAYER_BAD_OMEN_RAID" => Ok(EntityEffect::PlayerBadOmenRaid { inner: EntityEffectStruct::from_raw(env,obj)?}),"HURT_BERRY_BUSH" => Ok(EntityEffect::HurtBerryBush { inner: EntityEffectStruct::from_raw(env,obj)?}),"FOX_CHEW" => Ok(EntityEffect::FoxChew { inner: EntityEffectStruct::from_raw(env,obj)?}),"TELEPORT_ENDER" => Ok(EntityEffect::TeleportEnder { inner: EntityEffectStruct::from_raw(env,obj)?}),"BREAK_EQUIPMENT_MAIN_HAND" => Ok(EntityEffect::BreakEquipmentMainHand { inner: EntityEffectStruct::from_raw(env,obj)?}),"BREAK_EQUIPMENT_OFF_HAND" => Ok(EntityEffect::BreakEquipmentOffHand { inner: EntityEffectStruct::from_raw(env,obj)?}),"BREAK_EQUIPMENT_HELMET" => Ok(EntityEffect::BreakEquipmentHelmet { inner: EntityEffectStruct::from_raw(env,obj)?}),"BREAK_EQUIPMENT_CHESTPLATE" => Ok(EntityEffect::BreakEquipmentChestplate { inner: EntityEffectStruct::from_raw(env,obj)?}),"BREAK_EQUIPMENT_LEGGINGS" => Ok(EntityEffect::BreakEquipmentLeggings { inner: EntityEffectStruct::from_raw(env,obj)?}),"BREAK_EQUIPMENT_BOOTS" => Ok(EntityEffect::BreakEquipmentBoots { inner: EntityEffectStruct::from_raw(env,obj)?}),"HONEY_BLOCK_SLIDE_PARTICLES" => Ok(EntityEffect::HoneyBlockSlideParticles { inner: EntityEffectStruct::from_raw(env,obj)?}),"HONEY_BLOCK_FALL_PARTICLES" => Ok(EntityEffect::HoneyBlockFallParticles { inner: EntityEffectStruct::from_raw(env,obj)?}),"SWAP_HAND_ITEMS" => Ok(EntityEffect::SwapHandItems { inner: EntityEffectStruct::from_raw(env,obj)?}),"WOLF_SHAKE_STOP" => Ok(EntityEffect::WolfShakeStop { inner: EntityEffectStruct::from_raw(env,obj)?}),"GOAT_LOWER_HEAD" => Ok(EntityEffect::GoatLowerHead { inner: EntityEffectStruct::from_raw(env,obj)?}),"GOAT_RAISE_HEAD" => Ok(EntityEffect::GoatRaiseHead { inner: EntityEffectStruct::from_raw(env,obj)?}),"SPAWN_DEATH_SMOKE" => Ok(EntityEffect::SpawnDeathSmoke { inner: EntityEffectStruct::from_raw(env,obj)?}),"WARDEN_TENDRIL_SHAKE" => Ok(EntityEffect::WardenTendrilShake { inner: EntityEffectStruct::from_raw(env,obj)?}),"WARDEN_SONIC_ATTACK" => Ok(EntityEffect::WardenSonicAttack { inner: EntityEffectStruct::from_raw(env,obj)?}),"SNIFFER_DIG" => Ok(EntityEffect::SnifferDig { inner: EntityEffectStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for EntityEffectStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for EntityEffectStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate EntityEffectStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/EntityEffect")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a EntityEffectStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> EntityEffectStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::EntityEffect<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/EntityEffect;");
let cls = jni.find_class("org/bukkit/EntityEffect"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::EntityEffect::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the data value of this EntityEffect, may not be unique.
	fn data(&self) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("()B");
let res = self.jni_ref().call_method(&self.jni_object(),"getData",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
/// Gets entity superclass which this affect is applicable to.
	fn applicable(&self) 
-> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/Class;");
let res = self.jni_ref().call_method(&self.jni_object(),"getApplicable",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
unsafe {jni::objects::JClass::from_raw(res.as_jni().l)}
)}
/// Checks if this effect is applicable to the given entity class.
	fn is_applicable_to(&self,clazz: jni::objects::JClass<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/lang/Class;";
let val_1 = jni::objects::JValueGen::Object(clazz.into());
args.push(val_1);
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"isApplicableTo",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct StructureType<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for StructureType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for StructureType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate StructureType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/StructureType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a StructureType object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> StructureTypeTrait<'mc> for StructureType<'mc> {}
pub trait StructureTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Get the name of this structure. This is case-sensitive when used in
/// commands.
	fn name(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getName",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Get the {@link org.bukkit.map.MapCursor.Type} that this structure can use on maps. If
/// this is null, this structure will not appear on explorer maps.
	fn map_icon(&self) 
-> Result<Option<crate::map::MapCursorType<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/map/MapCursor/Type;");
let res = self.jni_ref().call_method(&self.jni_object(),"getMapIcon",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::map::MapCursorType::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}

	fn equals(&self,other: jni::objects::JObject<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Object;)Z");
let val_1 = jni::objects::JValueGen::Object(other);
let res = self.jni_ref().call_method(&self.jni_object(),"equals",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

	fn hash_code(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"hashCode",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}

#[doc(hidden)]
	fn internal_to_string(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"toString",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Get all registered {@link StructureType}s.
	fn structure_types(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<blackboxmc_java::util::JavaMap<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Map;");
let cls = jni.find_class("org/bukkit/StructureType"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getStructureTypes",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
blackboxmc_java::util::JavaMap::from_raw(&jni,obj
)}

	fn key(&self) 
-> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/NamespacedKey;");
let res = self.jni_ref().call_method(&self.jni_object(),"getKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::NamespacedKey::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}

        impl<'mc> std::string::ToString for StructureType<'mc> {
            fn to_string(&self) -> String {
                match StructureTypeTrait::internal_to_string(self) {
                    Ok(a) => a.clone(),
                    Err(err) => format!(
                        "Error calling StructureType.toString: {}",
                        err
                    ),
                }
            }
        }
        
impl<'mc> Into<crate::Keyed<'mc>> for StructureType<'mc>{

fn into(self) -> crate::Keyed<'mc> {

crate::Keyed::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting StructureType into crate::Keyed")

   }
}
impl<'mc> crate::KeyedTrait<'mc> for StructureType<'mc> {}
#[repr(C)]
pub struct OfflinePlayer<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for OfflinePlayer<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for OfflinePlayer<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate OfflinePlayer from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/OfflinePlayer")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a OfflinePlayer object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> OfflinePlayerTrait<'mc> for OfflinePlayer<'mc> {}
pub trait OfflinePlayerTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Checks if this player is currently online
	fn is_online(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isOnline",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Returns the name of this player
/// 
/// Names are no longer unique past a single game session. For persistent storage
/// it is recommended that you use {@link #getUniqueId()} instead.
	fn name(&self) 
-> Result<Option<String>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getName",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)
)}
/// Returns the UUID of this player
	fn unique_id(&self) 
-> Result<blackboxmc_java::util::JavaUUID<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/UUID;");
let res = self.jni_ref().call_method(&self.jni_object(),"getUniqueId",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaUUID::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets a copy of the player's profile.
/// 
/// If the player is online, the returned profile will be complete.
/// Otherwise, only the unique id is guaranteed to be present. You can use
/// {@link PlayerProfile#update()} to complete the returned profile.
	fn player_profile(&self) 
-> Result<crate::profile::PlayerProfile<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/profile/PlayerProfile;");
let res = self.jni_ref().call_method(&self.jni_object(),"getPlayerProfile",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::profile::PlayerProfile::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Checks if this player has had their profile banned.
	fn is_banned(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isBanned",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Adds this user to the {@link ProfileBanList}. If a previous ban exists, this will
/// update the entry.
	fn ban(&self,reason: impl Into<String>,duration: jni::objects::JObject<'mc>,source: impl Into<String>) 
-> Result<Option<crate::BanEntry<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(reason.into())?));
args.push(val_1);
sig += "Ljava/time/Duration;";
let val_2 = jni::objects::JValueGen::Object(duration);
args.push(val_2);
sig += "Ljava/lang/String;";
let val_3 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(source.into())?));
args.push(val_3);
sig += ")Lorg/bukkit/BanEntry;";
let res = self.jni_ref().call_method(&self.jni_object(),"ban",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::BanEntry::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Checks if this player is whitelisted or not
	fn is_whitelisted(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isWhitelisted",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Sets if this player is whitelisted or not
	fn set_whitelisted(&self,value: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(value.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setWhitelisted",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets a {@link Player} object that this represents, if there is one
/// 
/// If the player is online, this will return that player. Otherwise,
/// it will return null.
	fn player(&self) 
-> Result<Option<crate::entity::Player<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/entity/Player;");
let res = self.jni_ref().call_method(&self.jni_object(),"getPlayer",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::entity::Player::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Gets the first date and time that this player was witnessed on this
/// server.
/// 
/// If the player has never played before, this will return 0. Otherwise,
/// it will be the amount of milliseconds since midnight, January 1, 1970
/// UTC.
	fn first_played(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getFirstPlayed",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
/// Gets the last date and time that this player was witnessed on this
/// server.
/// 
/// If the player has never played before, this will return 0. Otherwise,
/// it will be the amount of milliseconds since midnight, January 1, 1970
/// UTC.
	fn last_played(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getLastPlayed",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
/// Checks if this player has played on this server before.
	fn has_played_before(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"hasPlayedBefore",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
#[deprecated]
/// Gets the Location where the player will spawn at their bed, null if they have not slept in one or their current bed spawn is invalid.
	fn bed_spawn_location(&self) 
-> Result<Option<crate::Location<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Location;");
let res = self.jni_ref().call_method(&self.jni_object(),"getBedSpawnLocation",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Gets the Location where the player will spawn at, null if they
/// don't have a valid respawn point.
	fn respawn_location(&self) 
-> Result<Option<crate::Location<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Location;");
let res = self.jni_ref().call_method(&self.jni_object(),"getRespawnLocation",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Increments the given statistic for this player for the given entity.
	fn increment_statistic(&self,statistic: impl Into<crate::Statistic<'mc>>,entity_type: std::option::Option<impl Into<crate::entity::EntityType<'mc>>>,amount: std::option::Option<i32>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Statistic;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(statistic.into().jni_object().clone())});
args.push(val_1);
if let Some(a) = entity_type {
sig += "Lorg/bukkit/entity/EntityType;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_2);
}
if let Some(a) = amount {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"incrementStatistic",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Decrements the given statistic for this player for the given entity.
	fn decrement_statistic(&self,statistic: impl Into<crate::Statistic<'mc>>,entity_type: std::option::Option<impl Into<crate::entity::EntityType<'mc>>>,amount: std::option::Option<i32>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Statistic;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(statistic.into().jni_object().clone())});
args.push(val_1);
if let Some(a) = entity_type {
sig += "Lorg/bukkit/entity/EntityType;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_2);
}
if let Some(a) = amount {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"decrementStatistic",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Sets the given statistic for this player for the given entity.
	fn set_statistic(&self,statistic: impl Into<crate::Statistic<'mc>>,entity_type: impl Into<crate::entity::EntityType<'mc>>,new_value: std::option::Option<i32>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Statistic;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(statistic.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/entity/EntityType;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(entity_type.into().jni_object().clone())});
args.push(val_2);
if let Some(a) = new_value {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"setStatistic",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the value of the given statistic for this player.
	fn get_statistic(&self,statistic: impl Into<crate::Statistic<'mc>>,entity_type: std::option::Option<impl Into<crate::entity::EntityType<'mc>>>) 
-> Result<i32, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Statistic;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(statistic.into().jni_object().clone())});
args.push(val_1);
if let Some(a) = entity_type {
sig += "Lorg/bukkit/entity/EntityType;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_2);
}
sig += ")I";
let res = self.jni_ref().call_method(&self.jni_object(),"getStatistic",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the player's last death location.
	fn last_death_location(&self) 
-> Result<Option<crate::Location<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Location;");
let res = self.jni_ref().call_method(&self.jni_object(),"getLastDeathLocation",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Gets the player's current location.
	fn location(&self) 
-> Result<Option<crate::Location<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Location;");
let res = self.jni_ref().call_method(&self.jni_object(),"getLocation",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::permissions::ServerOperator<'mc>> for OfflinePlayer<'mc>{

fn into(self) -> crate::permissions::ServerOperator<'mc> {

crate::permissions::ServerOperator::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting OfflinePlayer into crate::permissions::ServerOperator")

   }
}
impl<'mc> crate::permissions::ServerOperatorTrait<'mc> for OfflinePlayer<'mc> {}
impl<'mc> Into<crate::entity::AnimalTamer<'mc>> for OfflinePlayer<'mc>{

fn into(self) -> crate::entity::AnimalTamer<'mc> {

crate::entity::AnimalTamer::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting OfflinePlayer into crate::entity::AnimalTamer")

   }
}
impl<'mc> crate::entity::AnimalTamerTrait<'mc> for OfflinePlayer<'mc> {}
impl<'mc> Into<crate::configuration::serialization::ConfigurationSerializable<'mc>> for OfflinePlayer<'mc>{

fn into(self) -> crate::configuration::serialization::ConfigurationSerializable<'mc> {

crate::configuration::serialization::ConfigurationSerializable::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting OfflinePlayer into crate::configuration::serialization::ConfigurationSerializable")

   }
}
impl<'mc> crate::configuration::serialization::ConfigurationSerializableTrait<'mc> for OfflinePlayer<'mc> {}
#[repr(C)]
pub struct SoundGroup<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for SoundGroup<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for SoundGroup<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate SoundGroup from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/SoundGroup")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a SoundGroup object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> SoundGroupTrait<'mc> for SoundGroup<'mc> {}
pub trait SoundGroupTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Get the volume these sounds are played at.
/// Note that this volume does not always represent the actual volume
/// received by the client.
	fn volume(&self) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("()F");
let res = self.jni_ref().call_method(&self.jni_object(),"getVolume",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.f()?
)}
/// Gets the pitch these sounds are played at.
/// Note that this pitch does not always represent the actual pitch received
/// by the client.
	fn pitch(&self) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("()F");
let res = self.jni_ref().call_method(&self.jni_object(),"getPitch",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.f()?
)}
/// Gets the corresponding breaking sound for this group.
	fn break_sound(&self) 
-> Result<crate::Sound<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Sound;");
let res = self.jni_ref().call_method(&self.jni_object(),"getBreakSound",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Sound::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the corresponding step sound for this group.
	fn step_sound(&self) 
-> Result<crate::Sound<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Sound;");
let res = self.jni_ref().call_method(&self.jni_object(),"getStepSound",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Sound::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the corresponding place sound for this group.
	fn place_sound(&self) 
-> Result<crate::Sound<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Sound;");
let res = self.jni_ref().call_method(&self.jni_object(),"getPlaceSound",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Sound::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the corresponding hit sound for this group.
	fn hit_sound(&self) 
-> Result<crate::Sound<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Sound;");
let res = self.jni_ref().call_method(&self.jni_object(),"getHitSound",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Sound::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the corresponding fall sound for this group.
	fn fall_sound(&self) 
-> Result<crate::Sound<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Sound;");
let res = self.jni_ref().call_method(&self.jni_object(),"getFallSound",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Sound::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct WorldCreator<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for WorldCreator<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for WorldCreator<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate WorldCreator from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/WorldCreator")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a WorldCreator object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> WorldCreatorTrait<'mc> for WorldCreator<'mc> {}
pub trait WorldCreatorTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Creates an empty WorldCreationOptions for the given world name
	fn new(jni: &blackboxmc_general::SharedJNIEnv<'mc>,name: impl Into<String>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)V");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
let cls = jni.find_class("org/bukkit/WorldCreator"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.new_object(cls,
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error_no_gen(res)?;
crate::WorldCreator::from_raw(&jni,res
)}
/// Copies the options from the specified {@link WorldCreator}
	fn copy(&self,creator: impl Into<crate::WorldCreator<'mc>>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/WorldCreator;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(creator.into().jni_object().clone())});
args.push(val_1);
sig += ")Lorg/bukkit/WorldCreator;";
let res = self.jni_ref().call_method(&self.jni_object(),"copy",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldCreator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Creates a new {@link WorldCreator} for the given world name
	fn name(jni: &blackboxmc_general::SharedJNIEnv<'mc>,name: std::option::Option<impl Into<String>>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = name {
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(a.into())?));
args.push(val_1);
}
sig += ")Lorg/bukkit/WorldCreator;";
let cls = jni.find_class("org/bukkit/WorldCreator"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"name",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::WorldCreator::from_raw(&jni,obj
)}
/// Sets the seed that will be used to create this world
	fn seed(&self,seed: std::option::Option<i64>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = seed {
sig += "J";
let val_1 = jni::objects::JValueGen::Long(a);
args.push(val_1);
}
sig += ")Lorg/bukkit/WorldCreator;";
let res = self.jni_ref().call_method(&self.jni_object(),"seed",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldCreator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the environment that will be used to create or load the world
	fn environment(&self,env: std::option::Option<impl Into<crate::WorldEnvironment<'mc>>>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = env {
sig += "Lorg/bukkit/World/Environment;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_1);
}
sig += ")Lorg/bukkit/WorldCreator;";
let res = self.jni_ref().call_method(&self.jni_object(),"environment",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldCreator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the type of the world that will be created or loaded
	fn get_type(&self,val_type: std::option::Option<impl Into<crate::WorldType<'mc>>>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = val_type {
sig += "Lorg/bukkit/WorldType;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_1);
}
sig += ")Lorg/bukkit/WorldCreator;";
let res = self.jni_ref().call_method(&self.jni_object(),"type",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldCreator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the generator that will be used to create or load the world.
/// 
/// This may be null, in which case the "natural" generator for this
/// environment will be used.
/// 
/// If the generator cannot be found for the given name, the natural
/// environment generator will be used instead and a warning will be
/// printed to the specified output
	fn generator(&self,generator: std::option::Option<impl Into<String>>,output: std::option::Option<impl Into<crate::command::CommandSender<'mc>>>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = generator {
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(a.into())?));
args.push(val_1);
}
if let Some(a) = output {
sig += "Lorg/bukkit/command/CommandSender;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_2);
}
sig += ")Lorg/bukkit/WorldCreator;";
let res = self.jni_ref().call_method(&self.jni_object(),"generator",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldCreator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the biome provider that will be used to create or load the world.
/// 
/// This may be null, in which case the biome provider from the
/// {@link ChunkGenerator} will be used. If no {@link ChunkGenerator} is
/// specific the "natural" biome provider for this environment will be used.
/// 
/// If the biome provider cannot be found for the given name and no
/// {@link ChunkGenerator} is specific, the natural environment biome
/// provider will be used instead and a warning will be printed to the
/// specified output
	fn biome_provider(&self,biome_provider: std::option::Option<impl Into<String>>,output: std::option::Option<impl Into<crate::command::CommandSender<'mc>>>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = biome_provider {
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(a.into())?));
args.push(val_1);
}
if let Some(a) = output {
sig += "Lorg/bukkit/command/CommandSender;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_2);
}
sig += ")Lorg/bukkit/WorldCreator;";
let res = self.jni_ref().call_method(&self.jni_object(),"biomeProvider",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldCreator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the generator settings of the world that will be created or loaded.
/// 
/// Currently only {@link WorldType#FLAT} uses these settings, and expects
/// them to be in JSON format with a valid biome (1.18.2 and
/// above) defined. An example valid configuration is as follows:
/// <code>{"layers": [{"block": "stone", "height": 1}, {"block": "grass_block", "height": 1}], "biome":"plains"}</code>
	fn generator_settings(&self,generator_settings: std::option::Option<impl Into<String>>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = generator_settings {
sig += "Ljava/lang/String;";
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(a.into())?));
args.push(val_1);
}
sig += ")Lorg/bukkit/WorldCreator;";
let res = self.jni_ref().call_method(&self.jni_object(),"generatorSettings",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldCreator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets whether or not worlds created or loaded with this creator will
/// have structures.
	fn generate_structures(&self,generate: std::option::Option<bool>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = generate {
sig += "Z";
let val_1 = jni::objects::JValueGen::Bool(a.into());
args.push(val_1);
}
sig += ")Lorg/bukkit/WorldCreator;";
let res = self.jni_ref().call_method(&self.jni_object(),"generateStructures",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldCreator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets whether the world will be hardcore or not.
/// In a hardcore world the difficulty will be locked to hard.
	fn hardcore(&self,hardcore: std::option::Option<bool>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = hardcore {
sig += "Z";
let val_1 = jni::objects::JValueGen::Bool(a.into());
args.push(val_1);
}
sig += ")Lorg/bukkit/WorldCreator;";
let res = self.jni_ref().call_method(&self.jni_object(),"hardcore",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldCreator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets whether the spawn chunks will be kept loaded.
/// 
/// Setting this to false will also stop the spawn chunks from being generated
/// when creating a new world.
/// 
/// Has little performance benefit unless paired with a {@link ChunkGenerator}
/// that overrides {@link ChunkGenerator#getFixedSpawnLocation(World, Random)}.
	fn keep_spawn_in_memory(&self,keep_spawn_in_memory: std::option::Option<bool>) 
-> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = keep_spawn_in_memory {
sig += "Z";
let val_1 = jni::objects::JValueGen::Bool(a.into());
args.push(val_1);
}
sig += ")Lorg/bukkit/WorldCreator;";
let res = self.jni_ref().call_method(&self.jni_object(),"keepSpawnInMemory",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldCreator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Creates a world with the specified options.
/// 
/// If the world already exists, it will be loaded from disk and some
/// options may be ignored.
	fn create_world(&self) 
-> Result<Option<crate::World<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/World;");
let res = self.jni_ref().call_method(&self.jni_object(),"createWorld",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::World::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Attempts to get the {@link ChunkGenerator} with the given name.
/// 
/// If the generator is not found, null will be returned and a message will
/// be printed to the specified {@link CommandSender} explaining why.
/// 
/// The name must be in the "plugin:id" notation, or optionally just
/// "plugin", where "plugin" is the safe-name of a plugin and "id" is an
/// optional unique identifier for the generator you wish to request from
/// the plugin.
	fn get_generator_for_name(jni: &blackboxmc_general::SharedJNIEnv<'mc>,world: impl Into<String>,name: impl Into<String>,output: impl Into<crate::command::CommandSender<'mc>>) 
-> Result<Option<crate::generator::ChunkGenerator<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;Ljava/lang/String;Lorg/bukkit/command/CommandSender;)Lorg/bukkit/generator/ChunkGenerator;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(world.into())?));
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(output.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/WorldCreator"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getGeneratorForName",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::generator::ChunkGenerator::from_raw(&jni,obj
)?
)
)}
/// Attempts to get the {@link BiomeProvider} with the given name.
/// 
/// If the biome provider is not found, null will be returned and a message
/// will be printed to the specified {@link CommandSender} explaining why.
/// 
/// The name must be in the "plugin:id" notation, or optionally just
/// "plugin", where "plugin" is the safe-name of a plugin and "id" is an
/// optional unique identifier for the biome provider you wish to request
/// from the plugin.
	fn get_biome_provider_for_name(jni: &blackboxmc_general::SharedJNIEnv<'mc>,world: impl Into<String>,name: impl Into<String>,output: impl Into<crate::command::CommandSender<'mc>>) 
-> Result<Option<crate::generator::BiomeProvider<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;Ljava/lang/String;Lorg/bukkit/command/CommandSender;)Lorg/bukkit/generator/BiomeProvider;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(world.into())?));
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(output.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/WorldCreator"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getBiomeProviderForName",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::generator::BiomeProvider::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum SandstoneType<'mc> {
	Cracked {inner: SandstoneTypeStruct<'mc>},
	Glyphed {inner: SandstoneTypeStruct<'mc>},
	Smooth {inner: SandstoneTypeStruct<'mc>},
}
impl<'mc> std::fmt::Display for SandstoneType<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           SandstoneType::Cracked { .. } => f.write_str("CRACKED"),
           SandstoneType::Glyphed { .. } => f.write_str("GLYPHED"),
           SandstoneType::Smooth { .. } => f.write_str("SMOOTH"),
       }
   }
}

        impl<'mc> SandstoneTypeTrait<'mc> for SandstoneType<'mc> {}
        
        pub trait SandstoneTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<SandstoneType<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/SandstoneType");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/SandstoneType;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"CRACKED" => Ok(SandstoneType::Cracked { inner: SandstoneTypeStruct::from_raw(env,obj)?}),
"GLYPHED" => Ok(SandstoneType::Glyphed { inner: SandstoneTypeStruct::from_raw(env,obj)?}),
"SMOOTH" => Ok(SandstoneType::Smooth { inner: SandstoneTypeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct SandstoneTypeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for SandstoneType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Cracked { inner } => inner.0.clone(),
Self::Glyphed { inner } => inner.0.clone(),
Self::Smooth { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Cracked { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Glyphed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Smooth { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for SandstoneType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate SandstoneType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/SandstoneType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a SandstoneType object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "CRACKED" => Ok(SandstoneType::Cracked { inner: SandstoneTypeStruct::from_raw(env,obj)?}),"GLYPHED" => Ok(SandstoneType::Glyphed { inner: SandstoneTypeStruct::from_raw(env,obj)?}),"SMOOTH" => Ok(SandstoneType::Smooth { inner: SandstoneTypeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for SandstoneTypeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for SandstoneTypeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate SandstoneTypeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/SandstoneType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a SandstoneTypeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> SandstoneTypeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::SandstoneType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/SandstoneType;");
let cls = jni.find_class("org/bukkit/SandstoneType"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::SandstoneType::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the associated data value representing this type of sandstone
	fn data(&self) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("()B");
let res = self.jni_ref().call_method(&self.jni_object(),"getData",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
#[deprecated]
/// Gets the type of sandstone with the given data value
	fn get_by_data(jni: &blackboxmc_general::SharedJNIEnv<'mc>,data: i8) 
-> Result<Option<crate::SandstoneType<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(B)Lorg/bukkit/SandstoneType;");
let val_1 = jni::objects::JValueGen::Byte(data);
let cls = jni.find_class("org/bukkit/SandstoneType"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByData",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::SandstoneType::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct MinecraftExperimental<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for MinecraftExperimental<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for MinecraftExperimental<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate MinecraftExperimental from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/MinecraftExperimental")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a MinecraftExperimental object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> MinecraftExperimentalTrait<'mc> for MinecraftExperimental<'mc> {}
pub trait MinecraftExperimentalTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Chunk<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Chunk<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Chunk<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Chunk from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Chunk")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Chunk object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> ChunkTrait<'mc> for Chunk<'mc> {}
pub trait ChunkTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Gets the X-coordinate of this chunk
	fn x(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getX",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the Z-coordinate of this chunk
	fn z(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getZ",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the world containing this chunk
	fn world(&self) 
-> Result<crate::World<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/World;");
let res = self.jni_ref().call_method(&self.jni_object(),"getWorld",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::World::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets a block from this chunk
	fn get_block(&self,x: i32,y: i32,z: i32) 
-> Result<crate::block::Block<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(III)Lorg/bukkit/block/Block;");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(y);
let val_3 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"getBlock",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::Block::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Capture thread-safe read-only snapshot of chunk data
	fn get_chunk_snapshot(&self,include_maxblocky: bool,include_biome: bool,include_biome_temp_rain: bool) 
-> Result<crate::ChunkSnapshot<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(ZZZ)Lorg/bukkit/ChunkSnapshot;");
let val_1 = jni::objects::JValueGen::Bool(include_maxblocky.into());
let val_2 = jni::objects::JValueGen::Bool(include_biome.into());
let val_3 = jni::objects::JValueGen::Bool(include_biome_temp_rain.into());
let res = self.jni_ref().call_method(&self.jni_object(),"getChunkSnapshot",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::ChunkSnapshot::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Checks if entities in this chunk are loaded.
	fn is_entities_loaded(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isEntitiesLoaded",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Get a list of all entities in the chunk.
/// This will force load any entities, which are not loaded.
	fn entities(&self) 
-> Result<crate::entity::Entity<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/entity/Entity;");
let res = self.jni_ref().call_method(&self.jni_object(),"getEntities",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::entity::Entity::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Get a list of all tile entities in the chunk.
	fn tile_entities(&self) 
-> Result<crate::block::BlockState<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/block/BlockState;");
let res = self.jni_ref().call_method(&self.jni_object(),"getTileEntities",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::BlockState::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Checks if the chunk is fully generated.
	fn is_generated(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isGenerated",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if the chunk is loaded.
	fn is_loaded(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isLoaded",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Loads the chunk.
	fn load(&self,generate: std::option::Option<bool>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = generate {
sig += "Z";
let val_1 = jni::objects::JValueGen::Bool(a.into());
args.push(val_1);
}
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"load",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Unloads and optionally saves the Chunk
	fn unload(&self,save: std::option::Option<bool>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
if let Some(a) = save {
sig += "Z";
let val_1 = jni::objects::JValueGen::Bool(a.into());
args.push(val_1);
}
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"unload",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if this chunk can spawn slimes without being a swamp biome.
	fn is_slime_chunk(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isSlimeChunk",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the chunk at the specified chunk coordinates is force
/// loaded.
/// 
/// A force loaded chunk will not be unloaded due to lack of player activity.
	fn is_force_loaded(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isForceLoaded",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Sets whether the chunk at the specified chunk coordinates is force
/// loaded.
/// 
/// A force loaded chunk will not be unloaded due to lack of player activity.
	fn set_force_loaded(&self,forced: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(forced.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setForceLoaded",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Adds a plugin ticket for this chunk, loading this chunk if it is not
/// already loaded.
/// 
/// A plugin ticket will prevent a chunk from unloading until it is
/// explicitly removed. A plugin instance may only have one ticket per chunk,
/// but each chunk can have multiple plugin tickets.
/// 
	fn add_plugin_chunk_ticket(&self,plugin: impl Into<crate::plugin::Plugin<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/plugin/Plugin;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(plugin.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"addPluginChunkTicket",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Removes the specified plugin's ticket for this chunk
/// 
/// A plugin ticket will prevent a chunk from unloading until it is
/// explicitly removed. A plugin instance may only have one ticket per chunk,
/// but each chunk can have multiple plugin tickets.
/// 
	fn remove_plugin_chunk_ticket(&self,plugin: impl Into<crate::plugin::Plugin<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/plugin/Plugin;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(plugin.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"removePluginChunkTicket",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Retrieves a collection specifying which plugins have tickets for this
/// chunk. This collection is not updated when plugin tickets are added or
/// removed to this chunk.
/// 
/// A plugin ticket will prevent a chunk from unloading until it is
/// explicitly removed. A plugin instance may only have one ticket per chunk,
/// but each chunk can have multiple plugin tickets.
/// 
	fn plugin_chunk_tickets(&self) 
-> Result<Vec<crate::plugin::Plugin<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Collection;");
let res = self.jni_ref().call_method(&self.jni_object(),"getPluginChunkTickets",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&self.jni_ref(),res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::plugin::Plugin::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Gets the amount of time in ticks that this chunk has been inhabited.
/// Note that the time is incremented once per tick per player within mob
/// spawning distance of this chunk.
	fn inhabited_time(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getInhabitedTime",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
/// Sets the amount of time in ticks that this chunk has been inhabited.
	fn set_inhabited_time(&self,ticks: i64) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(J)V");
let val_1 = jni::objects::JValueGen::Long(ticks);
let res = self.jni_ref().call_method(&self.jni_object(),"setInhabitedTime",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Tests if this chunk contains the specified biome.
	fn contains(&self,biome: impl Into<crate::block::Biome<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/block/Biome;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(biome.into().jni_object().clone())});
args.push(val_1);
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"contains",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the load level of this chunk, which determines what game logic is
/// processed.
	fn load_level(&self) 
-> Result<crate::ChunkLoadLevel<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Chunk/LoadLevel;");
let res = self.jni_ref().call_method(&self.jni_object(),"getLoadLevel",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::ChunkLoadLevel::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets all generated structures of a given {@link Structure} that intersect
/// this chunk.
/// 
/// If no structures are present an empty collection will be returned.
	fn get_structures(&self,structure: impl Into<crate::generator::structure::Structure<'mc>>) 
-> Result<Vec<crate::generator::structure::GeneratedStructure<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/generator/structure/Structure;)Ljava/util/Collection;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(structure.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getStructures",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&self.jni_ref(),res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::generator::structure::GeneratedStructure::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::persistence::PersistentDataHolder<'mc>> for Chunk<'mc>{

fn into(self) -> crate::persistence::PersistentDataHolder<'mc> {

crate::persistence::PersistentDataHolder::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting Chunk into crate::persistence::PersistentDataHolder")

   }
}
impl<'mc> crate::persistence::PersistentDataHolderTrait<'mc> for Chunk<'mc> {}
pub enum ChunkLoadLevel<'mc> {
	Inaccessible {inner: ChunkLoadLevelStruct<'mc>},
	Border {inner: ChunkLoadLevelStruct<'mc>},
	Ticking {inner: ChunkLoadLevelStruct<'mc>},
	EntityTicking {inner: ChunkLoadLevelStruct<'mc>},
	Unloaded {inner: ChunkLoadLevelStruct<'mc>},
}
impl<'mc> std::fmt::Display for ChunkLoadLevel<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           ChunkLoadLevel::Inaccessible { .. } => f.write_str("INACCESSIBLE"),
           ChunkLoadLevel::Border { .. } => f.write_str("BORDER"),
           ChunkLoadLevel::Ticking { .. } => f.write_str("TICKING"),
           ChunkLoadLevel::EntityTicking { .. } => f.write_str("ENTITY_TICKING"),
           ChunkLoadLevel::Unloaded { .. } => f.write_str("UNLOADED"),
       }
   }
}

        impl<'mc> ChunkLoadLevelTrait<'mc> for ChunkLoadLevel<'mc> {}
        
        pub trait ChunkLoadLevelTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<ChunkLoadLevel<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Chunk/LoadLevel");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Chunk/LoadLevel;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"INACCESSIBLE" => Ok(ChunkLoadLevel::Inaccessible { inner: ChunkLoadLevelStruct::from_raw(env,obj)?}),
"BORDER" => Ok(ChunkLoadLevel::Border { inner: ChunkLoadLevelStruct::from_raw(env,obj)?}),
"TICKING" => Ok(ChunkLoadLevel::Ticking { inner: ChunkLoadLevelStruct::from_raw(env,obj)?}),
"ENTITY_TICKING" => Ok(ChunkLoadLevel::EntityTicking { inner: ChunkLoadLevelStruct::from_raw(env,obj)?}),
"UNLOADED" => Ok(ChunkLoadLevel::Unloaded { inner: ChunkLoadLevelStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct ChunkLoadLevelStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for ChunkLoadLevel<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Inaccessible { inner } => inner.0.clone(),
Self::Border { inner } => inner.0.clone(),
Self::Ticking { inner } => inner.0.clone(),
Self::EntityTicking { inner } => inner.0.clone(),
Self::Unloaded { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Inaccessible { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Border { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Ticking { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityTicking { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Unloaded { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for ChunkLoadLevel<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate ChunkLoadLevel from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Chunk/LoadLevel")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a ChunkLoadLevel object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "INACCESSIBLE" => Ok(ChunkLoadLevel::Inaccessible { inner: ChunkLoadLevelStruct::from_raw(env,obj)?}),"BORDER" => Ok(ChunkLoadLevel::Border { inner: ChunkLoadLevelStruct::from_raw(env,obj)?}),"TICKING" => Ok(ChunkLoadLevel::Ticking { inner: ChunkLoadLevelStruct::from_raw(env,obj)?}),"ENTITY_TICKING" => Ok(ChunkLoadLevel::EntityTicking { inner: ChunkLoadLevelStruct::from_raw(env,obj)?}),"UNLOADED" => Ok(ChunkLoadLevel::Unloaded { inner: ChunkLoadLevelStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for ChunkLoadLevelStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for ChunkLoadLevelStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate ChunkLoadLevelStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Chunk/LoadLevel")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a ChunkLoadLevelStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> ChunkLoadLevelStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::ChunkLoadLevel<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Chunk/LoadLevel;");
let cls = jni.find_class("org/bukkit/Chunk/LoadLevel"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::ChunkLoadLevel::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum Statistic<'mc> {
	DamageDealt {inner: StatisticStruct<'mc>},
	DamageTaken {inner: StatisticStruct<'mc>},
	Deaths {inner: StatisticStruct<'mc>},
	MobKills {inner: StatisticStruct<'mc>},
	PlayerKills {inner: StatisticStruct<'mc>},
	FishCaught {inner: StatisticStruct<'mc>},
	AnimalsBred {inner: StatisticStruct<'mc>},
	LeaveGame {inner: StatisticStruct<'mc>},
	Jump {inner: StatisticStruct<'mc>},
	DropCount {inner: StatisticStruct<'mc>},
	Drop {inner: StatisticStruct<'mc>},
	Pickup {inner: StatisticStruct<'mc>},
	PlayOneMinute {inner: StatisticStruct<'mc>},
	TotalWorldTime {inner: StatisticStruct<'mc>},
	WalkOneCm {inner: StatisticStruct<'mc>},
	WalkOnWaterOneCm {inner: StatisticStruct<'mc>},
	FallOneCm {inner: StatisticStruct<'mc>},
	SneakTime {inner: StatisticStruct<'mc>},
	ClimbOneCm {inner: StatisticStruct<'mc>},
	FlyOneCm {inner: StatisticStruct<'mc>},
	WalkUnderWaterOneCm {inner: StatisticStruct<'mc>},
	MinecartOneCm {inner: StatisticStruct<'mc>},
	BoatOneCm {inner: StatisticStruct<'mc>},
	PigOneCm {inner: StatisticStruct<'mc>},
	HorseOneCm {inner: StatisticStruct<'mc>},
	SprintOneCm {inner: StatisticStruct<'mc>},
	CrouchOneCm {inner: StatisticStruct<'mc>},
	AviateOneCm {inner: StatisticStruct<'mc>},
	MineBlock {inner: StatisticStruct<'mc>},
	UseItem {inner: StatisticStruct<'mc>},
	BreakItem {inner: StatisticStruct<'mc>},
	CraftItem {inner: StatisticStruct<'mc>},
	KillEntity {inner: StatisticStruct<'mc>},
	EntityKilledBy {inner: StatisticStruct<'mc>},
	TimeSinceDeath {inner: StatisticStruct<'mc>},
	TalkedToVillager {inner: StatisticStruct<'mc>},
	TradedWithVillager {inner: StatisticStruct<'mc>},
	CakeSlicesEaten {inner: StatisticStruct<'mc>},
	CauldronFilled {inner: StatisticStruct<'mc>},
	CauldronUsed {inner: StatisticStruct<'mc>},
	ArmorCleaned {inner: StatisticStruct<'mc>},
	BannerCleaned {inner: StatisticStruct<'mc>},
	BrewingstandInteraction {inner: StatisticStruct<'mc>},
	BeaconInteraction {inner: StatisticStruct<'mc>},
	DropperInspected {inner: StatisticStruct<'mc>},
	HopperInspected {inner: StatisticStruct<'mc>},
	DispenserInspected {inner: StatisticStruct<'mc>},
	NoteblockPlayed {inner: StatisticStruct<'mc>},
	NoteblockTuned {inner: StatisticStruct<'mc>},
	FlowerPotted {inner: StatisticStruct<'mc>},
	TrappedChestTriggered {inner: StatisticStruct<'mc>},
	EnderchestOpened {inner: StatisticStruct<'mc>},
	ItemEnchanted {inner: StatisticStruct<'mc>},
	RecordPlayed {inner: StatisticStruct<'mc>},
	FurnaceInteraction {inner: StatisticStruct<'mc>},
	CraftingTableInteraction {inner: StatisticStruct<'mc>},
	ChestOpened {inner: StatisticStruct<'mc>},
	SleepInBed {inner: StatisticStruct<'mc>},
	ShulkerBoxOpened {inner: StatisticStruct<'mc>},
	TimeSinceRest {inner: StatisticStruct<'mc>},
	SwimOneCm {inner: StatisticStruct<'mc>},
	DamageDealtAbsorbed {inner: StatisticStruct<'mc>},
	DamageDealtResisted {inner: StatisticStruct<'mc>},
	DamageBlockedByShield {inner: StatisticStruct<'mc>},
	DamageAbsorbed {inner: StatisticStruct<'mc>},
	DamageResisted {inner: StatisticStruct<'mc>},
	CleanShulkerBox {inner: StatisticStruct<'mc>},
	OpenBarrel {inner: StatisticStruct<'mc>},
	InteractWithBlastFurnace {inner: StatisticStruct<'mc>},
	InteractWithSmoker {inner: StatisticStruct<'mc>},
	InteractWithLectern {inner: StatisticStruct<'mc>},
	InteractWithCampfire {inner: StatisticStruct<'mc>},
	InteractWithCartographyTable {inner: StatisticStruct<'mc>},
	InteractWithLoom {inner: StatisticStruct<'mc>},
	InteractWithStonecutter {inner: StatisticStruct<'mc>},
	BellRing {inner: StatisticStruct<'mc>},
	RaidTrigger {inner: StatisticStruct<'mc>},
	RaidWin {inner: StatisticStruct<'mc>},
	InteractWithAnvil {inner: StatisticStruct<'mc>},
	InteractWithGrindstone {inner: StatisticStruct<'mc>},
	TargetHit {inner: StatisticStruct<'mc>},
	InteractWithSmithingTable {inner: StatisticStruct<'mc>},
	StriderOneCm {inner: StatisticStruct<'mc>},
}
impl<'mc> std::fmt::Display for Statistic<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           Statistic::DamageDealt { .. } => f.write_str("DAMAGE_DEALT"),
           Statistic::DamageTaken { .. } => f.write_str("DAMAGE_TAKEN"),
           Statistic::Deaths { .. } => f.write_str("DEATHS"),
           Statistic::MobKills { .. } => f.write_str("MOB_KILLS"),
           Statistic::PlayerKills { .. } => f.write_str("PLAYER_KILLS"),
           Statistic::FishCaught { .. } => f.write_str("FISH_CAUGHT"),
           Statistic::AnimalsBred { .. } => f.write_str("ANIMALS_BRED"),
           Statistic::LeaveGame { .. } => f.write_str("LEAVE_GAME"),
           Statistic::Jump { .. } => f.write_str("JUMP"),
           Statistic::DropCount { .. } => f.write_str("DROP_COUNT"),
           Statistic::Drop { .. } => f.write_str("DROP"),
           Statistic::Pickup { .. } => f.write_str("PICKUP"),
           Statistic::PlayOneMinute { .. } => f.write_str("PLAY_ONE_MINUTE"),
           Statistic::TotalWorldTime { .. } => f.write_str("TOTAL_WORLD_TIME"),
           Statistic::WalkOneCm { .. } => f.write_str("WALK_ONE_CM"),
           Statistic::WalkOnWaterOneCm { .. } => f.write_str("WALK_ON_WATER_ONE_CM"),
           Statistic::FallOneCm { .. } => f.write_str("FALL_ONE_CM"),
           Statistic::SneakTime { .. } => f.write_str("SNEAK_TIME"),
           Statistic::ClimbOneCm { .. } => f.write_str("CLIMB_ONE_CM"),
           Statistic::FlyOneCm { .. } => f.write_str("FLY_ONE_CM"),
           Statistic::WalkUnderWaterOneCm { .. } => f.write_str("WALK_UNDER_WATER_ONE_CM"),
           Statistic::MinecartOneCm { .. } => f.write_str("MINECART_ONE_CM"),
           Statistic::BoatOneCm { .. } => f.write_str("BOAT_ONE_CM"),
           Statistic::PigOneCm { .. } => f.write_str("PIG_ONE_CM"),
           Statistic::HorseOneCm { .. } => f.write_str("HORSE_ONE_CM"),
           Statistic::SprintOneCm { .. } => f.write_str("SPRINT_ONE_CM"),
           Statistic::CrouchOneCm { .. } => f.write_str("CROUCH_ONE_CM"),
           Statistic::AviateOneCm { .. } => f.write_str("AVIATE_ONE_CM"),
           Statistic::MineBlock { .. } => f.write_str("MINE_BLOCK"),
           Statistic::UseItem { .. } => f.write_str("USE_ITEM"),
           Statistic::BreakItem { .. } => f.write_str("BREAK_ITEM"),
           Statistic::CraftItem { .. } => f.write_str("CRAFT_ITEM"),
           Statistic::KillEntity { .. } => f.write_str("KILL_ENTITY"),
           Statistic::EntityKilledBy { .. } => f.write_str("ENTITY_KILLED_BY"),
           Statistic::TimeSinceDeath { .. } => f.write_str("TIME_SINCE_DEATH"),
           Statistic::TalkedToVillager { .. } => f.write_str("TALKED_TO_VILLAGER"),
           Statistic::TradedWithVillager { .. } => f.write_str("TRADED_WITH_VILLAGER"),
           Statistic::CakeSlicesEaten { .. } => f.write_str("CAKE_SLICES_EATEN"),
           Statistic::CauldronFilled { .. } => f.write_str("CAULDRON_FILLED"),
           Statistic::CauldronUsed { .. } => f.write_str("CAULDRON_USED"),
           Statistic::ArmorCleaned { .. } => f.write_str("ARMOR_CLEANED"),
           Statistic::BannerCleaned { .. } => f.write_str("BANNER_CLEANED"),
           Statistic::BrewingstandInteraction { .. } => f.write_str("BREWINGSTAND_INTERACTION"),
           Statistic::BeaconInteraction { .. } => f.write_str("BEACON_INTERACTION"),
           Statistic::DropperInspected { .. } => f.write_str("DROPPER_INSPECTED"),
           Statistic::HopperInspected { .. } => f.write_str("HOPPER_INSPECTED"),
           Statistic::DispenserInspected { .. } => f.write_str("DISPENSER_INSPECTED"),
           Statistic::NoteblockPlayed { .. } => f.write_str("NOTEBLOCK_PLAYED"),
           Statistic::NoteblockTuned { .. } => f.write_str("NOTEBLOCK_TUNED"),
           Statistic::FlowerPotted { .. } => f.write_str("FLOWER_POTTED"),
           Statistic::TrappedChestTriggered { .. } => f.write_str("TRAPPED_CHEST_TRIGGERED"),
           Statistic::EnderchestOpened { .. } => f.write_str("ENDERCHEST_OPENED"),
           Statistic::ItemEnchanted { .. } => f.write_str("ITEM_ENCHANTED"),
           Statistic::RecordPlayed { .. } => f.write_str("RECORD_PLAYED"),
           Statistic::FurnaceInteraction { .. } => f.write_str("FURNACE_INTERACTION"),
           Statistic::CraftingTableInteraction { .. } => f.write_str("CRAFTING_TABLE_INTERACTION"),
           Statistic::ChestOpened { .. } => f.write_str("CHEST_OPENED"),
           Statistic::SleepInBed { .. } => f.write_str("SLEEP_IN_BED"),
           Statistic::ShulkerBoxOpened { .. } => f.write_str("SHULKER_BOX_OPENED"),
           Statistic::TimeSinceRest { .. } => f.write_str("TIME_SINCE_REST"),
           Statistic::SwimOneCm { .. } => f.write_str("SWIM_ONE_CM"),
           Statistic::DamageDealtAbsorbed { .. } => f.write_str("DAMAGE_DEALT_ABSORBED"),
           Statistic::DamageDealtResisted { .. } => f.write_str("DAMAGE_DEALT_RESISTED"),
           Statistic::DamageBlockedByShield { .. } => f.write_str("DAMAGE_BLOCKED_BY_SHIELD"),
           Statistic::DamageAbsorbed { .. } => f.write_str("DAMAGE_ABSORBED"),
           Statistic::DamageResisted { .. } => f.write_str("DAMAGE_RESISTED"),
           Statistic::CleanShulkerBox { .. } => f.write_str("CLEAN_SHULKER_BOX"),
           Statistic::OpenBarrel { .. } => f.write_str("OPEN_BARREL"),
           Statistic::InteractWithBlastFurnace { .. } => f.write_str("INTERACT_WITH_BLAST_FURNACE"),
           Statistic::InteractWithSmoker { .. } => f.write_str("INTERACT_WITH_SMOKER"),
           Statistic::InteractWithLectern { .. } => f.write_str("INTERACT_WITH_LECTERN"),
           Statistic::InteractWithCampfire { .. } => f.write_str("INTERACT_WITH_CAMPFIRE"),
           Statistic::InteractWithCartographyTable { .. } => f.write_str("INTERACT_WITH_CARTOGRAPHY_TABLE"),
           Statistic::InteractWithLoom { .. } => f.write_str("INTERACT_WITH_LOOM"),
           Statistic::InteractWithStonecutter { .. } => f.write_str("INTERACT_WITH_STONECUTTER"),
           Statistic::BellRing { .. } => f.write_str("BELL_RING"),
           Statistic::RaidTrigger { .. } => f.write_str("RAID_TRIGGER"),
           Statistic::RaidWin { .. } => f.write_str("RAID_WIN"),
           Statistic::InteractWithAnvil { .. } => f.write_str("INTERACT_WITH_ANVIL"),
           Statistic::InteractWithGrindstone { .. } => f.write_str("INTERACT_WITH_GRINDSTONE"),
           Statistic::TargetHit { .. } => f.write_str("TARGET_HIT"),
           Statistic::InteractWithSmithingTable { .. } => f.write_str("INTERACT_WITH_SMITHING_TABLE"),
           Statistic::StriderOneCm { .. } => f.write_str("STRIDER_ONE_CM"),
       }
   }
}

        impl<'mc> StatisticTrait<'mc> for Statistic<'mc> {}
        
        pub trait StatisticTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<Statistic<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Statistic");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Statistic;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"DAMAGE_DEALT" => Ok(Statistic::DamageDealt { inner: StatisticStruct::from_raw(env,obj)?}),
"DAMAGE_TAKEN" => Ok(Statistic::DamageTaken { inner: StatisticStruct::from_raw(env,obj)?}),
"DEATHS" => Ok(Statistic::Deaths { inner: StatisticStruct::from_raw(env,obj)?}),
"MOB_KILLS" => Ok(Statistic::MobKills { inner: StatisticStruct::from_raw(env,obj)?}),
"PLAYER_KILLS" => Ok(Statistic::PlayerKills { inner: StatisticStruct::from_raw(env,obj)?}),
"FISH_CAUGHT" => Ok(Statistic::FishCaught { inner: StatisticStruct::from_raw(env,obj)?}),
"ANIMALS_BRED" => Ok(Statistic::AnimalsBred { inner: StatisticStruct::from_raw(env,obj)?}),
"LEAVE_GAME" => Ok(Statistic::LeaveGame { inner: StatisticStruct::from_raw(env,obj)?}),
"JUMP" => Ok(Statistic::Jump { inner: StatisticStruct::from_raw(env,obj)?}),
"DROP_COUNT" => Ok(Statistic::DropCount { inner: StatisticStruct::from_raw(env,obj)?}),
"DROP" => Ok(Statistic::Drop { inner: StatisticStruct::from_raw(env,obj)?}),
"PICKUP" => Ok(Statistic::Pickup { inner: StatisticStruct::from_raw(env,obj)?}),
"PLAY_ONE_MINUTE" => Ok(Statistic::PlayOneMinute { inner: StatisticStruct::from_raw(env,obj)?}),
"TOTAL_WORLD_TIME" => Ok(Statistic::TotalWorldTime { inner: StatisticStruct::from_raw(env,obj)?}),
"WALK_ONE_CM" => Ok(Statistic::WalkOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"WALK_ON_WATER_ONE_CM" => Ok(Statistic::WalkOnWaterOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"FALL_ONE_CM" => Ok(Statistic::FallOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"SNEAK_TIME" => Ok(Statistic::SneakTime { inner: StatisticStruct::from_raw(env,obj)?}),
"CLIMB_ONE_CM" => Ok(Statistic::ClimbOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"FLY_ONE_CM" => Ok(Statistic::FlyOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"WALK_UNDER_WATER_ONE_CM" => Ok(Statistic::WalkUnderWaterOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"MINECART_ONE_CM" => Ok(Statistic::MinecartOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"BOAT_ONE_CM" => Ok(Statistic::BoatOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"PIG_ONE_CM" => Ok(Statistic::PigOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"HORSE_ONE_CM" => Ok(Statistic::HorseOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"SPRINT_ONE_CM" => Ok(Statistic::SprintOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"CROUCH_ONE_CM" => Ok(Statistic::CrouchOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"AVIATE_ONE_CM" => Ok(Statistic::AviateOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"MINE_BLOCK" => Ok(Statistic::MineBlock { inner: StatisticStruct::from_raw(env,obj)?}),
"USE_ITEM" => Ok(Statistic::UseItem { inner: StatisticStruct::from_raw(env,obj)?}),
"BREAK_ITEM" => Ok(Statistic::BreakItem { inner: StatisticStruct::from_raw(env,obj)?}),
"CRAFT_ITEM" => Ok(Statistic::CraftItem { inner: StatisticStruct::from_raw(env,obj)?}),
"KILL_ENTITY" => Ok(Statistic::KillEntity { inner: StatisticStruct::from_raw(env,obj)?}),
"ENTITY_KILLED_BY" => Ok(Statistic::EntityKilledBy { inner: StatisticStruct::from_raw(env,obj)?}),
"TIME_SINCE_DEATH" => Ok(Statistic::TimeSinceDeath { inner: StatisticStruct::from_raw(env,obj)?}),
"TALKED_TO_VILLAGER" => Ok(Statistic::TalkedToVillager { inner: StatisticStruct::from_raw(env,obj)?}),
"TRADED_WITH_VILLAGER" => Ok(Statistic::TradedWithVillager { inner: StatisticStruct::from_raw(env,obj)?}),
"CAKE_SLICES_EATEN" => Ok(Statistic::CakeSlicesEaten { inner: StatisticStruct::from_raw(env,obj)?}),
"CAULDRON_FILLED" => Ok(Statistic::CauldronFilled { inner: StatisticStruct::from_raw(env,obj)?}),
"CAULDRON_USED" => Ok(Statistic::CauldronUsed { inner: StatisticStruct::from_raw(env,obj)?}),
"ARMOR_CLEANED" => Ok(Statistic::ArmorCleaned { inner: StatisticStruct::from_raw(env,obj)?}),
"BANNER_CLEANED" => Ok(Statistic::BannerCleaned { inner: StatisticStruct::from_raw(env,obj)?}),
"BREWINGSTAND_INTERACTION" => Ok(Statistic::BrewingstandInteraction { inner: StatisticStruct::from_raw(env,obj)?}),
"BEACON_INTERACTION" => Ok(Statistic::BeaconInteraction { inner: StatisticStruct::from_raw(env,obj)?}),
"DROPPER_INSPECTED" => Ok(Statistic::DropperInspected { inner: StatisticStruct::from_raw(env,obj)?}),
"HOPPER_INSPECTED" => Ok(Statistic::HopperInspected { inner: StatisticStruct::from_raw(env,obj)?}),
"DISPENSER_INSPECTED" => Ok(Statistic::DispenserInspected { inner: StatisticStruct::from_raw(env,obj)?}),
"NOTEBLOCK_PLAYED" => Ok(Statistic::NoteblockPlayed { inner: StatisticStruct::from_raw(env,obj)?}),
"NOTEBLOCK_TUNED" => Ok(Statistic::NoteblockTuned { inner: StatisticStruct::from_raw(env,obj)?}),
"FLOWER_POTTED" => Ok(Statistic::FlowerPotted { inner: StatisticStruct::from_raw(env,obj)?}),
"TRAPPED_CHEST_TRIGGERED" => Ok(Statistic::TrappedChestTriggered { inner: StatisticStruct::from_raw(env,obj)?}),
"ENDERCHEST_OPENED" => Ok(Statistic::EnderchestOpened { inner: StatisticStruct::from_raw(env,obj)?}),
"ITEM_ENCHANTED" => Ok(Statistic::ItemEnchanted { inner: StatisticStruct::from_raw(env,obj)?}),
"RECORD_PLAYED" => Ok(Statistic::RecordPlayed { inner: StatisticStruct::from_raw(env,obj)?}),
"FURNACE_INTERACTION" => Ok(Statistic::FurnaceInteraction { inner: StatisticStruct::from_raw(env,obj)?}),
"CRAFTING_TABLE_INTERACTION" => Ok(Statistic::CraftingTableInteraction { inner: StatisticStruct::from_raw(env,obj)?}),
"CHEST_OPENED" => Ok(Statistic::ChestOpened { inner: StatisticStruct::from_raw(env,obj)?}),
"SLEEP_IN_BED" => Ok(Statistic::SleepInBed { inner: StatisticStruct::from_raw(env,obj)?}),
"SHULKER_BOX_OPENED" => Ok(Statistic::ShulkerBoxOpened { inner: StatisticStruct::from_raw(env,obj)?}),
"TIME_SINCE_REST" => Ok(Statistic::TimeSinceRest { inner: StatisticStruct::from_raw(env,obj)?}),
"SWIM_ONE_CM" => Ok(Statistic::SwimOneCm { inner: StatisticStruct::from_raw(env,obj)?}),
"DAMAGE_DEALT_ABSORBED" => Ok(Statistic::DamageDealtAbsorbed { inner: StatisticStruct::from_raw(env,obj)?}),
"DAMAGE_DEALT_RESISTED" => Ok(Statistic::DamageDealtResisted { inner: StatisticStruct::from_raw(env,obj)?}),
"DAMAGE_BLOCKED_BY_SHIELD" => Ok(Statistic::DamageBlockedByShield { inner: StatisticStruct::from_raw(env,obj)?}),
"DAMAGE_ABSORBED" => Ok(Statistic::DamageAbsorbed { inner: StatisticStruct::from_raw(env,obj)?}),
"DAMAGE_RESISTED" => Ok(Statistic::DamageResisted { inner: StatisticStruct::from_raw(env,obj)?}),
"CLEAN_SHULKER_BOX" => Ok(Statistic::CleanShulkerBox { inner: StatisticStruct::from_raw(env,obj)?}),
"OPEN_BARREL" => Ok(Statistic::OpenBarrel { inner: StatisticStruct::from_raw(env,obj)?}),
"INTERACT_WITH_BLAST_FURNACE" => Ok(Statistic::InteractWithBlastFurnace { inner: StatisticStruct::from_raw(env,obj)?}),
"INTERACT_WITH_SMOKER" => Ok(Statistic::InteractWithSmoker { inner: StatisticStruct::from_raw(env,obj)?}),
"INTERACT_WITH_LECTERN" => Ok(Statistic::InteractWithLectern { inner: StatisticStruct::from_raw(env,obj)?}),
"INTERACT_WITH_CAMPFIRE" => Ok(Statistic::InteractWithCampfire { inner: StatisticStruct::from_raw(env,obj)?}),
"INTERACT_WITH_CARTOGRAPHY_TABLE" => Ok(Statistic::InteractWithCartographyTable { inner: StatisticStruct::from_raw(env,obj)?}),
"INTERACT_WITH_LOOM" => Ok(Statistic::InteractWithLoom { inner: StatisticStruct::from_raw(env,obj)?}),
"INTERACT_WITH_STONECUTTER" => Ok(Statistic::InteractWithStonecutter { inner: StatisticStruct::from_raw(env,obj)?}),
"BELL_RING" => Ok(Statistic::BellRing { inner: StatisticStruct::from_raw(env,obj)?}),
"RAID_TRIGGER" => Ok(Statistic::RaidTrigger { inner: StatisticStruct::from_raw(env,obj)?}),
"RAID_WIN" => Ok(Statistic::RaidWin { inner: StatisticStruct::from_raw(env,obj)?}),
"INTERACT_WITH_ANVIL" => Ok(Statistic::InteractWithAnvil { inner: StatisticStruct::from_raw(env,obj)?}),
"INTERACT_WITH_GRINDSTONE" => Ok(Statistic::InteractWithGrindstone { inner: StatisticStruct::from_raw(env,obj)?}),
"TARGET_HIT" => Ok(Statistic::TargetHit { inner: StatisticStruct::from_raw(env,obj)?}),
"INTERACT_WITH_SMITHING_TABLE" => Ok(Statistic::InteractWithSmithingTable { inner: StatisticStruct::from_raw(env,obj)?}),
"STRIDER_ONE_CM" => Ok(Statistic::StriderOneCm { inner: StatisticStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct StatisticStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Statistic<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::DamageDealt { inner } => inner.0.clone(),
Self::DamageTaken { inner } => inner.0.clone(),
Self::Deaths { inner } => inner.0.clone(),
Self::MobKills { inner } => inner.0.clone(),
Self::PlayerKills { inner } => inner.0.clone(),
Self::FishCaught { inner } => inner.0.clone(),
Self::AnimalsBred { inner } => inner.0.clone(),
Self::LeaveGame { inner } => inner.0.clone(),
Self::Jump { inner } => inner.0.clone(),
Self::DropCount { inner } => inner.0.clone(),
Self::Drop { inner } => inner.0.clone(),
Self::Pickup { inner } => inner.0.clone(),
Self::PlayOneMinute { inner } => inner.0.clone(),
Self::TotalWorldTime { inner } => inner.0.clone(),
Self::WalkOneCm { inner } => inner.0.clone(),
Self::WalkOnWaterOneCm { inner } => inner.0.clone(),
Self::FallOneCm { inner } => inner.0.clone(),
Self::SneakTime { inner } => inner.0.clone(),
Self::ClimbOneCm { inner } => inner.0.clone(),
Self::FlyOneCm { inner } => inner.0.clone(),
Self::WalkUnderWaterOneCm { inner } => inner.0.clone(),
Self::MinecartOneCm { inner } => inner.0.clone(),
Self::BoatOneCm { inner } => inner.0.clone(),
Self::PigOneCm { inner } => inner.0.clone(),
Self::HorseOneCm { inner } => inner.0.clone(),
Self::SprintOneCm { inner } => inner.0.clone(),
Self::CrouchOneCm { inner } => inner.0.clone(),
Self::AviateOneCm { inner } => inner.0.clone(),
Self::MineBlock { inner } => inner.0.clone(),
Self::UseItem { inner } => inner.0.clone(),
Self::BreakItem { inner } => inner.0.clone(),
Self::CraftItem { inner } => inner.0.clone(),
Self::KillEntity { inner } => inner.0.clone(),
Self::EntityKilledBy { inner } => inner.0.clone(),
Self::TimeSinceDeath { inner } => inner.0.clone(),
Self::TalkedToVillager { inner } => inner.0.clone(),
Self::TradedWithVillager { inner } => inner.0.clone(),
Self::CakeSlicesEaten { inner } => inner.0.clone(),
Self::CauldronFilled { inner } => inner.0.clone(),
Self::CauldronUsed { inner } => inner.0.clone(),
Self::ArmorCleaned { inner } => inner.0.clone(),
Self::BannerCleaned { inner } => inner.0.clone(),
Self::BrewingstandInteraction { inner } => inner.0.clone(),
Self::BeaconInteraction { inner } => inner.0.clone(),
Self::DropperInspected { inner } => inner.0.clone(),
Self::HopperInspected { inner } => inner.0.clone(),
Self::DispenserInspected { inner } => inner.0.clone(),
Self::NoteblockPlayed { inner } => inner.0.clone(),
Self::NoteblockTuned { inner } => inner.0.clone(),
Self::FlowerPotted { inner } => inner.0.clone(),
Self::TrappedChestTriggered { inner } => inner.0.clone(),
Self::EnderchestOpened { inner } => inner.0.clone(),
Self::ItemEnchanted { inner } => inner.0.clone(),
Self::RecordPlayed { inner } => inner.0.clone(),
Self::FurnaceInteraction { inner } => inner.0.clone(),
Self::CraftingTableInteraction { inner } => inner.0.clone(),
Self::ChestOpened { inner } => inner.0.clone(),
Self::SleepInBed { inner } => inner.0.clone(),
Self::ShulkerBoxOpened { inner } => inner.0.clone(),
Self::TimeSinceRest { inner } => inner.0.clone(),
Self::SwimOneCm { inner } => inner.0.clone(),
Self::DamageDealtAbsorbed { inner } => inner.0.clone(),
Self::DamageDealtResisted { inner } => inner.0.clone(),
Self::DamageBlockedByShield { inner } => inner.0.clone(),
Self::DamageAbsorbed { inner } => inner.0.clone(),
Self::DamageResisted { inner } => inner.0.clone(),
Self::CleanShulkerBox { inner } => inner.0.clone(),
Self::OpenBarrel { inner } => inner.0.clone(),
Self::InteractWithBlastFurnace { inner } => inner.0.clone(),
Self::InteractWithSmoker { inner } => inner.0.clone(),
Self::InteractWithLectern { inner } => inner.0.clone(),
Self::InteractWithCampfire { inner } => inner.0.clone(),
Self::InteractWithCartographyTable { inner } => inner.0.clone(),
Self::InteractWithLoom { inner } => inner.0.clone(),
Self::InteractWithStonecutter { inner } => inner.0.clone(),
Self::BellRing { inner } => inner.0.clone(),
Self::RaidTrigger { inner } => inner.0.clone(),
Self::RaidWin { inner } => inner.0.clone(),
Self::InteractWithAnvil { inner } => inner.0.clone(),
Self::InteractWithGrindstone { inner } => inner.0.clone(),
Self::TargetHit { inner } => inner.0.clone(),
Self::InteractWithSmithingTable { inner } => inner.0.clone(),
Self::StriderOneCm { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::DamageDealt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DamageTaken { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Deaths { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MobKills { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PlayerKills { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FishCaught { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AnimalsBred { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LeaveGame { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Jump { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DropCount { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Drop { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Pickup { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PlayOneMinute { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TotalWorldTime { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WalkOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WalkOnWaterOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FallOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SneakTime { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ClimbOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FlyOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WalkUnderWaterOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MinecartOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BoatOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PigOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HorseOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SprintOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CrouchOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AviateOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MineBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::UseItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BreakItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CraftItem { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::KillEntity { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EntityKilledBy { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TimeSinceDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TalkedToVillager { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TradedWithVillager { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CakeSlicesEaten { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CauldronFilled { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CauldronUsed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ArmorCleaned { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BannerCleaned { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrewingstandInteraction { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BeaconInteraction { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DropperInspected { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HopperInspected { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DispenserInspected { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NoteblockPlayed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::NoteblockTuned { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FlowerPotted { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TrappedChestTriggered { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnderchestOpened { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ItemEnchanted { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RecordPlayed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FurnaceInteraction { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CraftingTableInteraction { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChestOpened { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SleepInBed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ShulkerBoxOpened { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TimeSinceRest { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SwimOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DamageDealtAbsorbed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DamageDealtResisted { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DamageBlockedByShield { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DamageAbsorbed { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DamageResisted { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CleanShulkerBox { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OpenBarrel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InteractWithBlastFurnace { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InteractWithSmoker { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InteractWithLectern { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InteractWithCampfire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InteractWithCartographyTable { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InteractWithLoom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InteractWithStonecutter { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BellRing { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RaidTrigger { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RaidWin { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InteractWithAnvil { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InteractWithGrindstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TargetHit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InteractWithSmithingTable { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StriderOneCm { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for Statistic<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Statistic from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Statistic")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Statistic object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "DAMAGE_DEALT" => Ok(Statistic::DamageDealt { inner: StatisticStruct::from_raw(env,obj)?}),"DAMAGE_TAKEN" => Ok(Statistic::DamageTaken { inner: StatisticStruct::from_raw(env,obj)?}),"DEATHS" => Ok(Statistic::Deaths { inner: StatisticStruct::from_raw(env,obj)?}),"MOB_KILLS" => Ok(Statistic::MobKills { inner: StatisticStruct::from_raw(env,obj)?}),"PLAYER_KILLS" => Ok(Statistic::PlayerKills { inner: StatisticStruct::from_raw(env,obj)?}),"FISH_CAUGHT" => Ok(Statistic::FishCaught { inner: StatisticStruct::from_raw(env,obj)?}),"ANIMALS_BRED" => Ok(Statistic::AnimalsBred { inner: StatisticStruct::from_raw(env,obj)?}),"LEAVE_GAME" => Ok(Statistic::LeaveGame { inner: StatisticStruct::from_raw(env,obj)?}),"JUMP" => Ok(Statistic::Jump { inner: StatisticStruct::from_raw(env,obj)?}),"DROP_COUNT" => Ok(Statistic::DropCount { inner: StatisticStruct::from_raw(env,obj)?}),"DROP" => Ok(Statistic::Drop { inner: StatisticStruct::from_raw(env,obj)?}),"PICKUP" => Ok(Statistic::Pickup { inner: StatisticStruct::from_raw(env,obj)?}),"PLAY_ONE_MINUTE" => Ok(Statistic::PlayOneMinute { inner: StatisticStruct::from_raw(env,obj)?}),"TOTAL_WORLD_TIME" => Ok(Statistic::TotalWorldTime { inner: StatisticStruct::from_raw(env,obj)?}),"WALK_ONE_CM" => Ok(Statistic::WalkOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"WALK_ON_WATER_ONE_CM" => Ok(Statistic::WalkOnWaterOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"FALL_ONE_CM" => Ok(Statistic::FallOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"SNEAK_TIME" => Ok(Statistic::SneakTime { inner: StatisticStruct::from_raw(env,obj)?}),"CLIMB_ONE_CM" => Ok(Statistic::ClimbOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"FLY_ONE_CM" => Ok(Statistic::FlyOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"WALK_UNDER_WATER_ONE_CM" => Ok(Statistic::WalkUnderWaterOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"MINECART_ONE_CM" => Ok(Statistic::MinecartOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"BOAT_ONE_CM" => Ok(Statistic::BoatOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"PIG_ONE_CM" => Ok(Statistic::PigOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"HORSE_ONE_CM" => Ok(Statistic::HorseOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"SPRINT_ONE_CM" => Ok(Statistic::SprintOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"CROUCH_ONE_CM" => Ok(Statistic::CrouchOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"AVIATE_ONE_CM" => Ok(Statistic::AviateOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"MINE_BLOCK" => Ok(Statistic::MineBlock { inner: StatisticStruct::from_raw(env,obj)?}),"USE_ITEM" => Ok(Statistic::UseItem { inner: StatisticStruct::from_raw(env,obj)?}),"BREAK_ITEM" => Ok(Statistic::BreakItem { inner: StatisticStruct::from_raw(env,obj)?}),"CRAFT_ITEM" => Ok(Statistic::CraftItem { inner: StatisticStruct::from_raw(env,obj)?}),"KILL_ENTITY" => Ok(Statistic::KillEntity { inner: StatisticStruct::from_raw(env,obj)?}),"ENTITY_KILLED_BY" => Ok(Statistic::EntityKilledBy { inner: StatisticStruct::from_raw(env,obj)?}),"TIME_SINCE_DEATH" => Ok(Statistic::TimeSinceDeath { inner: StatisticStruct::from_raw(env,obj)?}),"TALKED_TO_VILLAGER" => Ok(Statistic::TalkedToVillager { inner: StatisticStruct::from_raw(env,obj)?}),"TRADED_WITH_VILLAGER" => Ok(Statistic::TradedWithVillager { inner: StatisticStruct::from_raw(env,obj)?}),"CAKE_SLICES_EATEN" => Ok(Statistic::CakeSlicesEaten { inner: StatisticStruct::from_raw(env,obj)?}),"CAULDRON_FILLED" => Ok(Statistic::CauldronFilled { inner: StatisticStruct::from_raw(env,obj)?}),"CAULDRON_USED" => Ok(Statistic::CauldronUsed { inner: StatisticStruct::from_raw(env,obj)?}),"ARMOR_CLEANED" => Ok(Statistic::ArmorCleaned { inner: StatisticStruct::from_raw(env,obj)?}),"BANNER_CLEANED" => Ok(Statistic::BannerCleaned { inner: StatisticStruct::from_raw(env,obj)?}),"BREWINGSTAND_INTERACTION" => Ok(Statistic::BrewingstandInteraction { inner: StatisticStruct::from_raw(env,obj)?}),"BEACON_INTERACTION" => Ok(Statistic::BeaconInteraction { inner: StatisticStruct::from_raw(env,obj)?}),"DROPPER_INSPECTED" => Ok(Statistic::DropperInspected { inner: StatisticStruct::from_raw(env,obj)?}),"HOPPER_INSPECTED" => Ok(Statistic::HopperInspected { inner: StatisticStruct::from_raw(env,obj)?}),"DISPENSER_INSPECTED" => Ok(Statistic::DispenserInspected { inner: StatisticStruct::from_raw(env,obj)?}),"NOTEBLOCK_PLAYED" => Ok(Statistic::NoteblockPlayed { inner: StatisticStruct::from_raw(env,obj)?}),"NOTEBLOCK_TUNED" => Ok(Statistic::NoteblockTuned { inner: StatisticStruct::from_raw(env,obj)?}),"FLOWER_POTTED" => Ok(Statistic::FlowerPotted { inner: StatisticStruct::from_raw(env,obj)?}),"TRAPPED_CHEST_TRIGGERED" => Ok(Statistic::TrappedChestTriggered { inner: StatisticStruct::from_raw(env,obj)?}),"ENDERCHEST_OPENED" => Ok(Statistic::EnderchestOpened { inner: StatisticStruct::from_raw(env,obj)?}),"ITEM_ENCHANTED" => Ok(Statistic::ItemEnchanted { inner: StatisticStruct::from_raw(env,obj)?}),"RECORD_PLAYED" => Ok(Statistic::RecordPlayed { inner: StatisticStruct::from_raw(env,obj)?}),"FURNACE_INTERACTION" => Ok(Statistic::FurnaceInteraction { inner: StatisticStruct::from_raw(env,obj)?}),"CRAFTING_TABLE_INTERACTION" => Ok(Statistic::CraftingTableInteraction { inner: StatisticStruct::from_raw(env,obj)?}),"CHEST_OPENED" => Ok(Statistic::ChestOpened { inner: StatisticStruct::from_raw(env,obj)?}),"SLEEP_IN_BED" => Ok(Statistic::SleepInBed { inner: StatisticStruct::from_raw(env,obj)?}),"SHULKER_BOX_OPENED" => Ok(Statistic::ShulkerBoxOpened { inner: StatisticStruct::from_raw(env,obj)?}),"TIME_SINCE_REST" => Ok(Statistic::TimeSinceRest { inner: StatisticStruct::from_raw(env,obj)?}),"SWIM_ONE_CM" => Ok(Statistic::SwimOneCm { inner: StatisticStruct::from_raw(env,obj)?}),"DAMAGE_DEALT_ABSORBED" => Ok(Statistic::DamageDealtAbsorbed { inner: StatisticStruct::from_raw(env,obj)?}),"DAMAGE_DEALT_RESISTED" => Ok(Statistic::DamageDealtResisted { inner: StatisticStruct::from_raw(env,obj)?}),"DAMAGE_BLOCKED_BY_SHIELD" => Ok(Statistic::DamageBlockedByShield { inner: StatisticStruct::from_raw(env,obj)?}),"DAMAGE_ABSORBED" => Ok(Statistic::DamageAbsorbed { inner: StatisticStruct::from_raw(env,obj)?}),"DAMAGE_RESISTED" => Ok(Statistic::DamageResisted { inner: StatisticStruct::from_raw(env,obj)?}),"CLEAN_SHULKER_BOX" => Ok(Statistic::CleanShulkerBox { inner: StatisticStruct::from_raw(env,obj)?}),"OPEN_BARREL" => Ok(Statistic::OpenBarrel { inner: StatisticStruct::from_raw(env,obj)?}),"INTERACT_WITH_BLAST_FURNACE" => Ok(Statistic::InteractWithBlastFurnace { inner: StatisticStruct::from_raw(env,obj)?}),"INTERACT_WITH_SMOKER" => Ok(Statistic::InteractWithSmoker { inner: StatisticStruct::from_raw(env,obj)?}),"INTERACT_WITH_LECTERN" => Ok(Statistic::InteractWithLectern { inner: StatisticStruct::from_raw(env,obj)?}),"INTERACT_WITH_CAMPFIRE" => Ok(Statistic::InteractWithCampfire { inner: StatisticStruct::from_raw(env,obj)?}),"INTERACT_WITH_CARTOGRAPHY_TABLE" => Ok(Statistic::InteractWithCartographyTable { inner: StatisticStruct::from_raw(env,obj)?}),"INTERACT_WITH_LOOM" => Ok(Statistic::InteractWithLoom { inner: StatisticStruct::from_raw(env,obj)?}),"INTERACT_WITH_STONECUTTER" => Ok(Statistic::InteractWithStonecutter { inner: StatisticStruct::from_raw(env,obj)?}),"BELL_RING" => Ok(Statistic::BellRing { inner: StatisticStruct::from_raw(env,obj)?}),"RAID_TRIGGER" => Ok(Statistic::RaidTrigger { inner: StatisticStruct::from_raw(env,obj)?}),"RAID_WIN" => Ok(Statistic::RaidWin { inner: StatisticStruct::from_raw(env,obj)?}),"INTERACT_WITH_ANVIL" => Ok(Statistic::InteractWithAnvil { inner: StatisticStruct::from_raw(env,obj)?}),"INTERACT_WITH_GRINDSTONE" => Ok(Statistic::InteractWithGrindstone { inner: StatisticStruct::from_raw(env,obj)?}),"TARGET_HIT" => Ok(Statistic::TargetHit { inner: StatisticStruct::from_raw(env,obj)?}),"INTERACT_WITH_SMITHING_TABLE" => Ok(Statistic::InteractWithSmithingTable { inner: StatisticStruct::from_raw(env,obj)?}),"STRIDER_ONE_CM" => Ok(Statistic::StriderOneCm { inner: StatisticStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for StatisticStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for StatisticStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate StatisticStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Statistic")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a StatisticStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> StatisticStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Statistic<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Statistic;");
let cls = jni.find_class("org/bukkit/Statistic"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Statistic::from_raw(&jni,obj
)}
/// Gets the type of this statistic.
	fn get_type(&self) 
-> Result<crate::StatisticType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Statistic/Type;");
let res = self.jni_ref().call_method(&self.jni_object(),"getType",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::StatisticType::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Checks if this is a substatistic.
/// 
/// A substatistic exists en masse for each block, item, or entitytype, depending on
/// {@link #getType()}.
/// 
/// This is a redundant method and equivalent to checking
/// <code>getType() != Type.UNTYPED</code>
	fn is_substatistic(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isSubstatistic",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Checks if this is a substatistic dealing with blocks.
/// 
/// This is a redundant method and equivalent to checking
/// <code>getType() == Type.BLOCK</code>
	fn is_block(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isBlock",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

	fn key(&self) 
-> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/NamespacedKey;");
let res = self.jni_ref().call_method(&self.jni_object(),"getKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::NamespacedKey::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct BlockChangeDelegate<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for BlockChangeDelegate<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for BlockChangeDelegate<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate BlockChangeDelegate from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/BlockChangeDelegate")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a BlockChangeDelegate object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> BlockChangeDelegateTrait<'mc> for BlockChangeDelegate<'mc> {}
pub trait BlockChangeDelegateTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Set a block data at the specified coordinates.
	fn set_block_data(&self,x: i32,y: i32,z: i32,block_data: impl Into<crate::block::data::BlockData<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(IIILorg/bukkit/block/data/BlockData;)Z");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(y);
let val_3 = jni::objects::JValueGen::Int(z);
let val_4 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(block_data.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"setBlockData",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3),jni::objects::JValueGen::from(val_4)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Get the block data at the location.
	fn get_block_data(&self,x: i32,y: i32,z: i32) 
-> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(III)Lorg/bukkit/block/data/BlockData;");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(y);
let val_3 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockData",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::data::BlockData::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the height of the world.
	fn height(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getHeight",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Checks if the specified block is empty (air) or not.
	fn is_empty(&self,x: i32,y: i32,z: i32) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(III)Z");
let val_1 = jni::objects::JValueGen::Int(x);
let val_2 = jni::objects::JValueGen::Int(y);
let val_3 = jni::objects::JValueGen::Int(z);
let res = self.jni_ref().call_method(&self.jni_object(),"isEmpty",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum Effect<'mc> {
	Click2 {inner: EffectStruct<'mc>},
	Click1 {inner: EffectStruct<'mc>},
	BowFire {inner: EffectStruct<'mc>},
	DoorToggle {inner: EffectStruct<'mc>},
	IronDoorToggle {inner: EffectStruct<'mc>},
	TrapdoorToggle {inner: EffectStruct<'mc>},
	IronTrapdoorToggle {inner: EffectStruct<'mc>},
	FenceGateToggle {inner: EffectStruct<'mc>},
	DoorClose {inner: EffectStruct<'mc>},
	IronDoorClose {inner: EffectStruct<'mc>},
	TrapdoorClose {inner: EffectStruct<'mc>},
	IronTrapdoorClose {inner: EffectStruct<'mc>},
	FenceGateClose {inner: EffectStruct<'mc>},
	Extinguish {inner: EffectStruct<'mc>},
	RecordPlay {inner: EffectStruct<'mc>},
	GhastShriek {inner: EffectStruct<'mc>},
	GhastShoot {inner: EffectStruct<'mc>},
	BlazeShoot {inner: EffectStruct<'mc>},
	ZombieChewWoodenDoor {inner: EffectStruct<'mc>},
	ZombieChewIronDoor {inner: EffectStruct<'mc>},
	ZombieDestroyDoor {inner: EffectStruct<'mc>},
	Smoke {inner: EffectStruct<'mc>},
	StepSound {inner: EffectStruct<'mc>},
	PotionBreak {inner: EffectStruct<'mc>},
	InstantPotionBreak {inner: EffectStruct<'mc>},
	EnderSignal {inner: EffectStruct<'mc>},
	MobspawnerFlames {inner: EffectStruct<'mc>},
	BrewingStandBrew {inner: EffectStruct<'mc>},
	ChorusFlowerGrow {inner: EffectStruct<'mc>},
	ChorusFlowerDeath {inner: EffectStruct<'mc>},
	PortalTravel {inner: EffectStruct<'mc>},
	EndereyeLaunch {inner: EffectStruct<'mc>},
	FireworkShoot {inner: EffectStruct<'mc>},
	VillagerPlantGrow {inner: EffectStruct<'mc>},
	DragonBreath {inner: EffectStruct<'mc>},
	AnvilBreak {inner: EffectStruct<'mc>},
	AnvilUse {inner: EffectStruct<'mc>},
	AnvilLand {inner: EffectStruct<'mc>},
	EnderdragonShoot {inner: EffectStruct<'mc>},
	WitherBreakBlock {inner: EffectStruct<'mc>},
	WitherShoot {inner: EffectStruct<'mc>},
	ZombieInfect {inner: EffectStruct<'mc>},
	ZombieConvertedVillager {inner: EffectStruct<'mc>},
	BatTakeoff {inner: EffectStruct<'mc>},
	EndGatewaySpawn {inner: EffectStruct<'mc>},
	EnderdragonGrowl {inner: EffectStruct<'mc>},
	PhantomBite {inner: EffectStruct<'mc>},
	ZombieConvertedToDrowned {inner: EffectStruct<'mc>},
	HuskConvertedToZombie {inner: EffectStruct<'mc>},
	GrindstoneUse {inner: EffectStruct<'mc>},
	BookPageTurn {inner: EffectStruct<'mc>},
	SmithingTableUse {inner: EffectStruct<'mc>},
	PointedDripstoneLand {inner: EffectStruct<'mc>},
	PointedDripstoneDripLavaIntoCauldron {inner: EffectStruct<'mc>},
	PointedDripstoneDripWaterIntoCauldron {inner: EffectStruct<'mc>},
	SkeletonConvertedToStray {inner: EffectStruct<'mc>},
	ComposterFillAttempt {inner: EffectStruct<'mc>},
	LavaInteract {inner: EffectStruct<'mc>},
	RedstoneTorchBurnout {inner: EffectStruct<'mc>},
	EndPortalFrameFill {inner: EffectStruct<'mc>},
	DrippingDripstone {inner: EffectStruct<'mc>},
	BoneMealUse {inner: EffectStruct<'mc>},
	EnderDragonDestroyBlock {inner: EffectStruct<'mc>},
	SpongeDry {inner: EffectStruct<'mc>},
	ElectricSpark {inner: EffectStruct<'mc>},
	CopperWaxOn {inner: EffectStruct<'mc>},
	CopperWaxOff {inner: EffectStruct<'mc>},
	OxidisedCopperScrape {inner: EffectStruct<'mc>},
}
impl<'mc> std::fmt::Display for Effect<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           Effect::Click2 { .. } => f.write_str("CLICK2"),
           Effect::Click1 { .. } => f.write_str("CLICK1"),
           Effect::BowFire { .. } => f.write_str("BOW_FIRE"),
           Effect::DoorToggle { .. } => f.write_str("DOOR_TOGGLE"),
           Effect::IronDoorToggle { .. } => f.write_str("IRON_DOOR_TOGGLE"),
           Effect::TrapdoorToggle { .. } => f.write_str("TRAPDOOR_TOGGLE"),
           Effect::IronTrapdoorToggle { .. } => f.write_str("IRON_TRAPDOOR_TOGGLE"),
           Effect::FenceGateToggle { .. } => f.write_str("FENCE_GATE_TOGGLE"),
           Effect::DoorClose { .. } => f.write_str("DOOR_CLOSE"),
           Effect::IronDoorClose { .. } => f.write_str("IRON_DOOR_CLOSE"),
           Effect::TrapdoorClose { .. } => f.write_str("TRAPDOOR_CLOSE"),
           Effect::IronTrapdoorClose { .. } => f.write_str("IRON_TRAPDOOR_CLOSE"),
           Effect::FenceGateClose { .. } => f.write_str("FENCE_GATE_CLOSE"),
           Effect::Extinguish { .. } => f.write_str("EXTINGUISH"),
           Effect::RecordPlay { .. } => f.write_str("RECORD_PLAY"),
           Effect::GhastShriek { .. } => f.write_str("GHAST_SHRIEK"),
           Effect::GhastShoot { .. } => f.write_str("GHAST_SHOOT"),
           Effect::BlazeShoot { .. } => f.write_str("BLAZE_SHOOT"),
           Effect::ZombieChewWoodenDoor { .. } => f.write_str("ZOMBIE_CHEW_WOODEN_DOOR"),
           Effect::ZombieChewIronDoor { .. } => f.write_str("ZOMBIE_CHEW_IRON_DOOR"),
           Effect::ZombieDestroyDoor { .. } => f.write_str("ZOMBIE_DESTROY_DOOR"),
           Effect::Smoke { .. } => f.write_str("SMOKE"),
           Effect::StepSound { .. } => f.write_str("STEP_SOUND"),
           Effect::PotionBreak { .. } => f.write_str("POTION_BREAK"),
           Effect::InstantPotionBreak { .. } => f.write_str("INSTANT_POTION_BREAK"),
           Effect::EnderSignal { .. } => f.write_str("ENDER_SIGNAL"),
           Effect::MobspawnerFlames { .. } => f.write_str("MOBSPAWNER_FLAMES"),
           Effect::BrewingStandBrew { .. } => f.write_str("BREWING_STAND_BREW"),
           Effect::ChorusFlowerGrow { .. } => f.write_str("CHORUS_FLOWER_GROW"),
           Effect::ChorusFlowerDeath { .. } => f.write_str("CHORUS_FLOWER_DEATH"),
           Effect::PortalTravel { .. } => f.write_str("PORTAL_TRAVEL"),
           Effect::EndereyeLaunch { .. } => f.write_str("ENDEREYE_LAUNCH"),
           Effect::FireworkShoot { .. } => f.write_str("FIREWORK_SHOOT"),
           Effect::VillagerPlantGrow { .. } => f.write_str("VILLAGER_PLANT_GROW"),
           Effect::DragonBreath { .. } => f.write_str("DRAGON_BREATH"),
           Effect::AnvilBreak { .. } => f.write_str("ANVIL_BREAK"),
           Effect::AnvilUse { .. } => f.write_str("ANVIL_USE"),
           Effect::AnvilLand { .. } => f.write_str("ANVIL_LAND"),
           Effect::EnderdragonShoot { .. } => f.write_str("ENDERDRAGON_SHOOT"),
           Effect::WitherBreakBlock { .. } => f.write_str("WITHER_BREAK_BLOCK"),
           Effect::WitherShoot { .. } => f.write_str("WITHER_SHOOT"),
           Effect::ZombieInfect { .. } => f.write_str("ZOMBIE_INFECT"),
           Effect::ZombieConvertedVillager { .. } => f.write_str("ZOMBIE_CONVERTED_VILLAGER"),
           Effect::BatTakeoff { .. } => f.write_str("BAT_TAKEOFF"),
           Effect::EndGatewaySpawn { .. } => f.write_str("END_GATEWAY_SPAWN"),
           Effect::EnderdragonGrowl { .. } => f.write_str("ENDERDRAGON_GROWL"),
           Effect::PhantomBite { .. } => f.write_str("PHANTOM_BITE"),
           Effect::ZombieConvertedToDrowned { .. } => f.write_str("ZOMBIE_CONVERTED_TO_DROWNED"),
           Effect::HuskConvertedToZombie { .. } => f.write_str("HUSK_CONVERTED_TO_ZOMBIE"),
           Effect::GrindstoneUse { .. } => f.write_str("GRINDSTONE_USE"),
           Effect::BookPageTurn { .. } => f.write_str("BOOK_PAGE_TURN"),
           Effect::SmithingTableUse { .. } => f.write_str("SMITHING_TABLE_USE"),
           Effect::PointedDripstoneLand { .. } => f.write_str("POINTED_DRIPSTONE_LAND"),
           Effect::PointedDripstoneDripLavaIntoCauldron { .. } => f.write_str("POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON"),
           Effect::PointedDripstoneDripWaterIntoCauldron { .. } => f.write_str("POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON"),
           Effect::SkeletonConvertedToStray { .. } => f.write_str("SKELETON_CONVERTED_TO_STRAY"),
           Effect::ComposterFillAttempt { .. } => f.write_str("COMPOSTER_FILL_ATTEMPT"),
           Effect::LavaInteract { .. } => f.write_str("LAVA_INTERACT"),
           Effect::RedstoneTorchBurnout { .. } => f.write_str("REDSTONE_TORCH_BURNOUT"),
           Effect::EndPortalFrameFill { .. } => f.write_str("END_PORTAL_FRAME_FILL"),
           Effect::DrippingDripstone { .. } => f.write_str("DRIPPING_DRIPSTONE"),
           Effect::BoneMealUse { .. } => f.write_str("BONE_MEAL_USE"),
           Effect::EnderDragonDestroyBlock { .. } => f.write_str("ENDER_DRAGON_DESTROY_BLOCK"),
           Effect::SpongeDry { .. } => f.write_str("SPONGE_DRY"),
           Effect::ElectricSpark { .. } => f.write_str("ELECTRIC_SPARK"),
           Effect::CopperWaxOn { .. } => f.write_str("COPPER_WAX_ON"),
           Effect::CopperWaxOff { .. } => f.write_str("COPPER_WAX_OFF"),
           Effect::OxidisedCopperScrape { .. } => f.write_str("OXIDISED_COPPER_SCRAPE"),
       }
   }
}

        impl<'mc> EffectTrait<'mc> for Effect<'mc> {}
        
        pub trait EffectTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<Effect<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Effect");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Effect;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"CLICK2" => Ok(Effect::Click2 { inner: EffectStruct::from_raw(env,obj)?}),
"CLICK1" => Ok(Effect::Click1 { inner: EffectStruct::from_raw(env,obj)?}),
"BOW_FIRE" => Ok(Effect::BowFire { inner: EffectStruct::from_raw(env,obj)?}),
"DOOR_TOGGLE" => Ok(Effect::DoorToggle { inner: EffectStruct::from_raw(env,obj)?}),
"IRON_DOOR_TOGGLE" => Ok(Effect::IronDoorToggle { inner: EffectStruct::from_raw(env,obj)?}),
"TRAPDOOR_TOGGLE" => Ok(Effect::TrapdoorToggle { inner: EffectStruct::from_raw(env,obj)?}),
"IRON_TRAPDOOR_TOGGLE" => Ok(Effect::IronTrapdoorToggle { inner: EffectStruct::from_raw(env,obj)?}),
"FENCE_GATE_TOGGLE" => Ok(Effect::FenceGateToggle { inner: EffectStruct::from_raw(env,obj)?}),
"DOOR_CLOSE" => Ok(Effect::DoorClose { inner: EffectStruct::from_raw(env,obj)?}),
"IRON_DOOR_CLOSE" => Ok(Effect::IronDoorClose { inner: EffectStruct::from_raw(env,obj)?}),
"TRAPDOOR_CLOSE" => Ok(Effect::TrapdoorClose { inner: EffectStruct::from_raw(env,obj)?}),
"IRON_TRAPDOOR_CLOSE" => Ok(Effect::IronTrapdoorClose { inner: EffectStruct::from_raw(env,obj)?}),
"FENCE_GATE_CLOSE" => Ok(Effect::FenceGateClose { inner: EffectStruct::from_raw(env,obj)?}),
"EXTINGUISH" => Ok(Effect::Extinguish { inner: EffectStruct::from_raw(env,obj)?}),
"RECORD_PLAY" => Ok(Effect::RecordPlay { inner: EffectStruct::from_raw(env,obj)?}),
"GHAST_SHRIEK" => Ok(Effect::GhastShriek { inner: EffectStruct::from_raw(env,obj)?}),
"GHAST_SHOOT" => Ok(Effect::GhastShoot { inner: EffectStruct::from_raw(env,obj)?}),
"BLAZE_SHOOT" => Ok(Effect::BlazeShoot { inner: EffectStruct::from_raw(env,obj)?}),
"ZOMBIE_CHEW_WOODEN_DOOR" => Ok(Effect::ZombieChewWoodenDoor { inner: EffectStruct::from_raw(env,obj)?}),
"ZOMBIE_CHEW_IRON_DOOR" => Ok(Effect::ZombieChewIronDoor { inner: EffectStruct::from_raw(env,obj)?}),
"ZOMBIE_DESTROY_DOOR" => Ok(Effect::ZombieDestroyDoor { inner: EffectStruct::from_raw(env,obj)?}),
"SMOKE" => Ok(Effect::Smoke { inner: EffectStruct::from_raw(env,obj)?}),
"STEP_SOUND" => Ok(Effect::StepSound { inner: EffectStruct::from_raw(env,obj)?}),
"POTION_BREAK" => Ok(Effect::PotionBreak { inner: EffectStruct::from_raw(env,obj)?}),
"INSTANT_POTION_BREAK" => Ok(Effect::InstantPotionBreak { inner: EffectStruct::from_raw(env,obj)?}),
"ENDER_SIGNAL" => Ok(Effect::EnderSignal { inner: EffectStruct::from_raw(env,obj)?}),
"MOBSPAWNER_FLAMES" => Ok(Effect::MobspawnerFlames { inner: EffectStruct::from_raw(env,obj)?}),
"BREWING_STAND_BREW" => Ok(Effect::BrewingStandBrew { inner: EffectStruct::from_raw(env,obj)?}),
"CHORUS_FLOWER_GROW" => Ok(Effect::ChorusFlowerGrow { inner: EffectStruct::from_raw(env,obj)?}),
"CHORUS_FLOWER_DEATH" => Ok(Effect::ChorusFlowerDeath { inner: EffectStruct::from_raw(env,obj)?}),
"PORTAL_TRAVEL" => Ok(Effect::PortalTravel { inner: EffectStruct::from_raw(env,obj)?}),
"ENDEREYE_LAUNCH" => Ok(Effect::EndereyeLaunch { inner: EffectStruct::from_raw(env,obj)?}),
"FIREWORK_SHOOT" => Ok(Effect::FireworkShoot { inner: EffectStruct::from_raw(env,obj)?}),
"VILLAGER_PLANT_GROW" => Ok(Effect::VillagerPlantGrow { inner: EffectStruct::from_raw(env,obj)?}),
"DRAGON_BREATH" => Ok(Effect::DragonBreath { inner: EffectStruct::from_raw(env,obj)?}),
"ANVIL_BREAK" => Ok(Effect::AnvilBreak { inner: EffectStruct::from_raw(env,obj)?}),
"ANVIL_USE" => Ok(Effect::AnvilUse { inner: EffectStruct::from_raw(env,obj)?}),
"ANVIL_LAND" => Ok(Effect::AnvilLand { inner: EffectStruct::from_raw(env,obj)?}),
"ENDERDRAGON_SHOOT" => Ok(Effect::EnderdragonShoot { inner: EffectStruct::from_raw(env,obj)?}),
"WITHER_BREAK_BLOCK" => Ok(Effect::WitherBreakBlock { inner: EffectStruct::from_raw(env,obj)?}),
"WITHER_SHOOT" => Ok(Effect::WitherShoot { inner: EffectStruct::from_raw(env,obj)?}),
"ZOMBIE_INFECT" => Ok(Effect::ZombieInfect { inner: EffectStruct::from_raw(env,obj)?}),
"ZOMBIE_CONVERTED_VILLAGER" => Ok(Effect::ZombieConvertedVillager { inner: EffectStruct::from_raw(env,obj)?}),
"BAT_TAKEOFF" => Ok(Effect::BatTakeoff { inner: EffectStruct::from_raw(env,obj)?}),
"END_GATEWAY_SPAWN" => Ok(Effect::EndGatewaySpawn { inner: EffectStruct::from_raw(env,obj)?}),
"ENDERDRAGON_GROWL" => Ok(Effect::EnderdragonGrowl { inner: EffectStruct::from_raw(env,obj)?}),
"PHANTOM_BITE" => Ok(Effect::PhantomBite { inner: EffectStruct::from_raw(env,obj)?}),
"ZOMBIE_CONVERTED_TO_DROWNED" => Ok(Effect::ZombieConvertedToDrowned { inner: EffectStruct::from_raw(env,obj)?}),
"HUSK_CONVERTED_TO_ZOMBIE" => Ok(Effect::HuskConvertedToZombie { inner: EffectStruct::from_raw(env,obj)?}),
"GRINDSTONE_USE" => Ok(Effect::GrindstoneUse { inner: EffectStruct::from_raw(env,obj)?}),
"BOOK_PAGE_TURN" => Ok(Effect::BookPageTurn { inner: EffectStruct::from_raw(env,obj)?}),
"SMITHING_TABLE_USE" => Ok(Effect::SmithingTableUse { inner: EffectStruct::from_raw(env,obj)?}),
"POINTED_DRIPSTONE_LAND" => Ok(Effect::PointedDripstoneLand { inner: EffectStruct::from_raw(env,obj)?}),
"POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON" => Ok(Effect::PointedDripstoneDripLavaIntoCauldron { inner: EffectStruct::from_raw(env,obj)?}),
"POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON" => Ok(Effect::PointedDripstoneDripWaterIntoCauldron { inner: EffectStruct::from_raw(env,obj)?}),
"SKELETON_CONVERTED_TO_STRAY" => Ok(Effect::SkeletonConvertedToStray { inner: EffectStruct::from_raw(env,obj)?}),
"COMPOSTER_FILL_ATTEMPT" => Ok(Effect::ComposterFillAttempt { inner: EffectStruct::from_raw(env,obj)?}),
"LAVA_INTERACT" => Ok(Effect::LavaInteract { inner: EffectStruct::from_raw(env,obj)?}),
"REDSTONE_TORCH_BURNOUT" => Ok(Effect::RedstoneTorchBurnout { inner: EffectStruct::from_raw(env,obj)?}),
"END_PORTAL_FRAME_FILL" => Ok(Effect::EndPortalFrameFill { inner: EffectStruct::from_raw(env,obj)?}),
"DRIPPING_DRIPSTONE" => Ok(Effect::DrippingDripstone { inner: EffectStruct::from_raw(env,obj)?}),
"BONE_MEAL_USE" => Ok(Effect::BoneMealUse { inner: EffectStruct::from_raw(env,obj)?}),
"ENDER_DRAGON_DESTROY_BLOCK" => Ok(Effect::EnderDragonDestroyBlock { inner: EffectStruct::from_raw(env,obj)?}),
"SPONGE_DRY" => Ok(Effect::SpongeDry { inner: EffectStruct::from_raw(env,obj)?}),
"ELECTRIC_SPARK" => Ok(Effect::ElectricSpark { inner: EffectStruct::from_raw(env,obj)?}),
"COPPER_WAX_ON" => Ok(Effect::CopperWaxOn { inner: EffectStruct::from_raw(env,obj)?}),
"COPPER_WAX_OFF" => Ok(Effect::CopperWaxOff { inner: EffectStruct::from_raw(env,obj)?}),
"OXIDISED_COPPER_SCRAPE" => Ok(Effect::OxidisedCopperScrape { inner: EffectStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct EffectStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Effect<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Click2 { inner } => inner.0.clone(),
Self::Click1 { inner } => inner.0.clone(),
Self::BowFire { inner } => inner.0.clone(),
Self::DoorToggle { inner } => inner.0.clone(),
Self::IronDoorToggle { inner } => inner.0.clone(),
Self::TrapdoorToggle { inner } => inner.0.clone(),
Self::IronTrapdoorToggle { inner } => inner.0.clone(),
Self::FenceGateToggle { inner } => inner.0.clone(),
Self::DoorClose { inner } => inner.0.clone(),
Self::IronDoorClose { inner } => inner.0.clone(),
Self::TrapdoorClose { inner } => inner.0.clone(),
Self::IronTrapdoorClose { inner } => inner.0.clone(),
Self::FenceGateClose { inner } => inner.0.clone(),
Self::Extinguish { inner } => inner.0.clone(),
Self::RecordPlay { inner } => inner.0.clone(),
Self::GhastShriek { inner } => inner.0.clone(),
Self::GhastShoot { inner } => inner.0.clone(),
Self::BlazeShoot { inner } => inner.0.clone(),
Self::ZombieChewWoodenDoor { inner } => inner.0.clone(),
Self::ZombieChewIronDoor { inner } => inner.0.clone(),
Self::ZombieDestroyDoor { inner } => inner.0.clone(),
Self::Smoke { inner } => inner.0.clone(),
Self::StepSound { inner } => inner.0.clone(),
Self::PotionBreak { inner } => inner.0.clone(),
Self::InstantPotionBreak { inner } => inner.0.clone(),
Self::EnderSignal { inner } => inner.0.clone(),
Self::MobspawnerFlames { inner } => inner.0.clone(),
Self::BrewingStandBrew { inner } => inner.0.clone(),
Self::ChorusFlowerGrow { inner } => inner.0.clone(),
Self::ChorusFlowerDeath { inner } => inner.0.clone(),
Self::PortalTravel { inner } => inner.0.clone(),
Self::EndereyeLaunch { inner } => inner.0.clone(),
Self::FireworkShoot { inner } => inner.0.clone(),
Self::VillagerPlantGrow { inner } => inner.0.clone(),
Self::DragonBreath { inner } => inner.0.clone(),
Self::AnvilBreak { inner } => inner.0.clone(),
Self::AnvilUse { inner } => inner.0.clone(),
Self::AnvilLand { inner } => inner.0.clone(),
Self::EnderdragonShoot { inner } => inner.0.clone(),
Self::WitherBreakBlock { inner } => inner.0.clone(),
Self::WitherShoot { inner } => inner.0.clone(),
Self::ZombieInfect { inner } => inner.0.clone(),
Self::ZombieConvertedVillager { inner } => inner.0.clone(),
Self::BatTakeoff { inner } => inner.0.clone(),
Self::EndGatewaySpawn { inner } => inner.0.clone(),
Self::EnderdragonGrowl { inner } => inner.0.clone(),
Self::PhantomBite { inner } => inner.0.clone(),
Self::ZombieConvertedToDrowned { inner } => inner.0.clone(),
Self::HuskConvertedToZombie { inner } => inner.0.clone(),
Self::GrindstoneUse { inner } => inner.0.clone(),
Self::BookPageTurn { inner } => inner.0.clone(),
Self::SmithingTableUse { inner } => inner.0.clone(),
Self::PointedDripstoneLand { inner } => inner.0.clone(),
Self::PointedDripstoneDripLavaIntoCauldron { inner } => inner.0.clone(),
Self::PointedDripstoneDripWaterIntoCauldron { inner } => inner.0.clone(),
Self::SkeletonConvertedToStray { inner } => inner.0.clone(),
Self::ComposterFillAttempt { inner } => inner.0.clone(),
Self::LavaInteract { inner } => inner.0.clone(),
Self::RedstoneTorchBurnout { inner } => inner.0.clone(),
Self::EndPortalFrameFill { inner } => inner.0.clone(),
Self::DrippingDripstone { inner } => inner.0.clone(),
Self::BoneMealUse { inner } => inner.0.clone(),
Self::EnderDragonDestroyBlock { inner } => inner.0.clone(),
Self::SpongeDry { inner } => inner.0.clone(),
Self::ElectricSpark { inner } => inner.0.clone(),
Self::CopperWaxOn { inner } => inner.0.clone(),
Self::CopperWaxOff { inner } => inner.0.clone(),
Self::OxidisedCopperScrape { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Click2 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Click1 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BowFire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DoorToggle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronDoorToggle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TrapdoorToggle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronTrapdoorToggle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FenceGateToggle { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronDoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TrapdoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronTrapdoorClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FenceGateClose { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Extinguish { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RecordPlay { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GhastShriek { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GhastShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BlazeShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieChewWoodenDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieChewIronDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieDestroyDoor { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Smoke { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StepSound { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PotionBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::InstantPotionBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnderSignal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::MobspawnerFlames { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BrewingStandBrew { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChorusFlowerGrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ChorusFlowerDeath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PortalTravel { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndereyeLaunch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FireworkShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VillagerPlantGrow { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DragonBreath { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AnvilBreak { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AnvilUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::AnvilLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnderdragonShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WitherBreakBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WitherShoot { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieInfect { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieConvertedVillager { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BatTakeoff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndGatewaySpawn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnderdragonGrowl { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PhantomBite { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ZombieConvertedToDrowned { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::HuskConvertedToZombie { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::GrindstoneUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BookPageTurn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SmithingTableUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PointedDripstoneLand { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PointedDripstoneDripLavaIntoCauldron { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::PointedDripstoneDripWaterIntoCauldron { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SkeletonConvertedToStray { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ComposterFillAttempt { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::LavaInteract { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::RedstoneTorchBurnout { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EndPortalFrameFill { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DrippingDripstone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BoneMealUse { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::EnderDragonDestroyBlock { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SpongeDry { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::ElectricSpark { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CopperWaxOn { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CopperWaxOff { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::OxidisedCopperScrape { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for Effect<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Effect from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Effect")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Effect object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "CLICK2" => Ok(Effect::Click2 { inner: EffectStruct::from_raw(env,obj)?}),"CLICK1" => Ok(Effect::Click1 { inner: EffectStruct::from_raw(env,obj)?}),"BOW_FIRE" => Ok(Effect::BowFire { inner: EffectStruct::from_raw(env,obj)?}),"DOOR_TOGGLE" => Ok(Effect::DoorToggle { inner: EffectStruct::from_raw(env,obj)?}),"IRON_DOOR_TOGGLE" => Ok(Effect::IronDoorToggle { inner: EffectStruct::from_raw(env,obj)?}),"TRAPDOOR_TOGGLE" => Ok(Effect::TrapdoorToggle { inner: EffectStruct::from_raw(env,obj)?}),"IRON_TRAPDOOR_TOGGLE" => Ok(Effect::IronTrapdoorToggle { inner: EffectStruct::from_raw(env,obj)?}),"FENCE_GATE_TOGGLE" => Ok(Effect::FenceGateToggle { inner: EffectStruct::from_raw(env,obj)?}),"DOOR_CLOSE" => Ok(Effect::DoorClose { inner: EffectStruct::from_raw(env,obj)?}),"IRON_DOOR_CLOSE" => Ok(Effect::IronDoorClose { inner: EffectStruct::from_raw(env,obj)?}),"TRAPDOOR_CLOSE" => Ok(Effect::TrapdoorClose { inner: EffectStruct::from_raw(env,obj)?}),"IRON_TRAPDOOR_CLOSE" => Ok(Effect::IronTrapdoorClose { inner: EffectStruct::from_raw(env,obj)?}),"FENCE_GATE_CLOSE" => Ok(Effect::FenceGateClose { inner: EffectStruct::from_raw(env,obj)?}),"EXTINGUISH" => Ok(Effect::Extinguish { inner: EffectStruct::from_raw(env,obj)?}),"RECORD_PLAY" => Ok(Effect::RecordPlay { inner: EffectStruct::from_raw(env,obj)?}),"GHAST_SHRIEK" => Ok(Effect::GhastShriek { inner: EffectStruct::from_raw(env,obj)?}),"GHAST_SHOOT" => Ok(Effect::GhastShoot { inner: EffectStruct::from_raw(env,obj)?}),"BLAZE_SHOOT" => Ok(Effect::BlazeShoot { inner: EffectStruct::from_raw(env,obj)?}),"ZOMBIE_CHEW_WOODEN_DOOR" => Ok(Effect::ZombieChewWoodenDoor { inner: EffectStruct::from_raw(env,obj)?}),"ZOMBIE_CHEW_IRON_DOOR" => Ok(Effect::ZombieChewIronDoor { inner: EffectStruct::from_raw(env,obj)?}),"ZOMBIE_DESTROY_DOOR" => Ok(Effect::ZombieDestroyDoor { inner: EffectStruct::from_raw(env,obj)?}),"SMOKE" => Ok(Effect::Smoke { inner: EffectStruct::from_raw(env,obj)?}),"STEP_SOUND" => Ok(Effect::StepSound { inner: EffectStruct::from_raw(env,obj)?}),"POTION_BREAK" => Ok(Effect::PotionBreak { inner: EffectStruct::from_raw(env,obj)?}),"INSTANT_POTION_BREAK" => Ok(Effect::InstantPotionBreak { inner: EffectStruct::from_raw(env,obj)?}),"ENDER_SIGNAL" => Ok(Effect::EnderSignal { inner: EffectStruct::from_raw(env,obj)?}),"MOBSPAWNER_FLAMES" => Ok(Effect::MobspawnerFlames { inner: EffectStruct::from_raw(env,obj)?}),"BREWING_STAND_BREW" => Ok(Effect::BrewingStandBrew { inner: EffectStruct::from_raw(env,obj)?}),"CHORUS_FLOWER_GROW" => Ok(Effect::ChorusFlowerGrow { inner: EffectStruct::from_raw(env,obj)?}),"CHORUS_FLOWER_DEATH" => Ok(Effect::ChorusFlowerDeath { inner: EffectStruct::from_raw(env,obj)?}),"PORTAL_TRAVEL" => Ok(Effect::PortalTravel { inner: EffectStruct::from_raw(env,obj)?}),"ENDEREYE_LAUNCH" => Ok(Effect::EndereyeLaunch { inner: EffectStruct::from_raw(env,obj)?}),"FIREWORK_SHOOT" => Ok(Effect::FireworkShoot { inner: EffectStruct::from_raw(env,obj)?}),"VILLAGER_PLANT_GROW" => Ok(Effect::VillagerPlantGrow { inner: EffectStruct::from_raw(env,obj)?}),"DRAGON_BREATH" => Ok(Effect::DragonBreath { inner: EffectStruct::from_raw(env,obj)?}),"ANVIL_BREAK" => Ok(Effect::AnvilBreak { inner: EffectStruct::from_raw(env,obj)?}),"ANVIL_USE" => Ok(Effect::AnvilUse { inner: EffectStruct::from_raw(env,obj)?}),"ANVIL_LAND" => Ok(Effect::AnvilLand { inner: EffectStruct::from_raw(env,obj)?}),"ENDERDRAGON_SHOOT" => Ok(Effect::EnderdragonShoot { inner: EffectStruct::from_raw(env,obj)?}),"WITHER_BREAK_BLOCK" => Ok(Effect::WitherBreakBlock { inner: EffectStruct::from_raw(env,obj)?}),"WITHER_SHOOT" => Ok(Effect::WitherShoot { inner: EffectStruct::from_raw(env,obj)?}),"ZOMBIE_INFECT" => Ok(Effect::ZombieInfect { inner: EffectStruct::from_raw(env,obj)?}),"ZOMBIE_CONVERTED_VILLAGER" => Ok(Effect::ZombieConvertedVillager { inner: EffectStruct::from_raw(env,obj)?}),"BAT_TAKEOFF" => Ok(Effect::BatTakeoff { inner: EffectStruct::from_raw(env,obj)?}),"END_GATEWAY_SPAWN" => Ok(Effect::EndGatewaySpawn { inner: EffectStruct::from_raw(env,obj)?}),"ENDERDRAGON_GROWL" => Ok(Effect::EnderdragonGrowl { inner: EffectStruct::from_raw(env,obj)?}),"PHANTOM_BITE" => Ok(Effect::PhantomBite { inner: EffectStruct::from_raw(env,obj)?}),"ZOMBIE_CONVERTED_TO_DROWNED" => Ok(Effect::ZombieConvertedToDrowned { inner: EffectStruct::from_raw(env,obj)?}),"HUSK_CONVERTED_TO_ZOMBIE" => Ok(Effect::HuskConvertedToZombie { inner: EffectStruct::from_raw(env,obj)?}),"GRINDSTONE_USE" => Ok(Effect::GrindstoneUse { inner: EffectStruct::from_raw(env,obj)?}),"BOOK_PAGE_TURN" => Ok(Effect::BookPageTurn { inner: EffectStruct::from_raw(env,obj)?}),"SMITHING_TABLE_USE" => Ok(Effect::SmithingTableUse { inner: EffectStruct::from_raw(env,obj)?}),"POINTED_DRIPSTONE_LAND" => Ok(Effect::PointedDripstoneLand { inner: EffectStruct::from_raw(env,obj)?}),"POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON" => Ok(Effect::PointedDripstoneDripLavaIntoCauldron { inner: EffectStruct::from_raw(env,obj)?}),"POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON" => Ok(Effect::PointedDripstoneDripWaterIntoCauldron { inner: EffectStruct::from_raw(env,obj)?}),"SKELETON_CONVERTED_TO_STRAY" => Ok(Effect::SkeletonConvertedToStray { inner: EffectStruct::from_raw(env,obj)?}),"COMPOSTER_FILL_ATTEMPT" => Ok(Effect::ComposterFillAttempt { inner: EffectStruct::from_raw(env,obj)?}),"LAVA_INTERACT" => Ok(Effect::LavaInteract { inner: EffectStruct::from_raw(env,obj)?}),"REDSTONE_TORCH_BURNOUT" => Ok(Effect::RedstoneTorchBurnout { inner: EffectStruct::from_raw(env,obj)?}),"END_PORTAL_FRAME_FILL" => Ok(Effect::EndPortalFrameFill { inner: EffectStruct::from_raw(env,obj)?}),"DRIPPING_DRIPSTONE" => Ok(Effect::DrippingDripstone { inner: EffectStruct::from_raw(env,obj)?}),"BONE_MEAL_USE" => Ok(Effect::BoneMealUse { inner: EffectStruct::from_raw(env,obj)?}),"ENDER_DRAGON_DESTROY_BLOCK" => Ok(Effect::EnderDragonDestroyBlock { inner: EffectStruct::from_raw(env,obj)?}),"SPONGE_DRY" => Ok(Effect::SpongeDry { inner: EffectStruct::from_raw(env,obj)?}),"ELECTRIC_SPARK" => Ok(Effect::ElectricSpark { inner: EffectStruct::from_raw(env,obj)?}),"COPPER_WAX_ON" => Ok(Effect::CopperWaxOn { inner: EffectStruct::from_raw(env,obj)?}),"COPPER_WAX_OFF" => Ok(Effect::CopperWaxOff { inner: EffectStruct::from_raw(env,obj)?}),"OXIDISED_COPPER_SCRAPE" => Ok(Effect::OxidisedCopperScrape { inner: EffectStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for EffectStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for EffectStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate EffectStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Effect")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a EffectStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> EffectStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Effect<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Effect;");
let cls = jni.find_class("org/bukkit/Effect"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Effect::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the ID for this effect.
	fn id(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getId",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}

	fn get_type(&self) 
-> Result<crate::EffectType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Effect/Type;");
let res = self.jni_ref().call_method(&self.jni_object(),"getType",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::EffectType::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
#[deprecated]
/// Gets the Effect associated with the given ID.
	fn get_by_id(jni: &blackboxmc_general::SharedJNIEnv<'mc>,id: i32) 
-> Result<Option<crate::Effect<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(I)Lorg/bukkit/Effect;");
let val_1 = jni::objects::JValueGen::Int(id);
let cls = jni.find_class("org/bukkit/Effect"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getById",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::Effect::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum StatisticType<'mc> {
	Untyped {inner: StatisticTypeStruct<'mc>},
	Item {inner: StatisticTypeStruct<'mc>},
	Block {inner: StatisticTypeStruct<'mc>},
	Entity {inner: StatisticTypeStruct<'mc>},
}
impl<'mc> std::fmt::Display for StatisticType<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           StatisticType::Untyped { .. } => f.write_str("UNTYPED"),
           StatisticType::Item { .. } => f.write_str("ITEM"),
           StatisticType::Block { .. } => f.write_str("BLOCK"),
           StatisticType::Entity { .. } => f.write_str("ENTITY"),
       }
   }
}

        impl<'mc> StatisticTypeTrait<'mc> for StatisticType<'mc> {}
        
        pub trait StatisticTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<StatisticType<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Statistic/Type");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Statistic/Type;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"UNTYPED" => Ok(StatisticType::Untyped { inner: StatisticTypeStruct::from_raw(env,obj)?}),
"ITEM" => Ok(StatisticType::Item { inner: StatisticTypeStruct::from_raw(env,obj)?}),
"BLOCK" => Ok(StatisticType::Block { inner: StatisticTypeStruct::from_raw(env,obj)?}),
"ENTITY" => Ok(StatisticType::Entity { inner: StatisticTypeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct StatisticTypeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for StatisticType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Untyped { inner } => inner.0.clone(),
Self::Item { inner } => inner.0.clone(),
Self::Block { inner } => inner.0.clone(),
Self::Entity { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Untyped { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Item { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Block { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Entity { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for StatisticType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate StatisticType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Statistic/Type")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a StatisticType object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "UNTYPED" => Ok(StatisticType::Untyped { inner: StatisticTypeStruct::from_raw(env,obj)?}),"ITEM" => Ok(StatisticType::Item { inner: StatisticTypeStruct::from_raw(env,obj)?}),"BLOCK" => Ok(StatisticType::Block { inner: StatisticTypeStruct::from_raw(env,obj)?}),"ENTITY" => Ok(StatisticType::Entity { inner: StatisticTypeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for StatisticTypeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for StatisticTypeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate StatisticTypeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Statistic/Type")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a StatisticTypeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> StatisticTypeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::StatisticType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Statistic/Type;");
let cls = jni.find_class("org/bukkit/Statistic/Type"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::StatisticType::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Utility<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Utility<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Utility<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Utility from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Utility")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Utility object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> UtilityTrait<'mc> for Utility<'mc> {}
pub trait UtilityTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum RaidRaidStatus<'mc> {
	Ongoing {inner: RaidRaidStatusStruct<'mc>},
	Victory {inner: RaidRaidStatusStruct<'mc>},
	Loss {inner: RaidRaidStatusStruct<'mc>},
	Stopped {inner: RaidRaidStatusStruct<'mc>},
}
impl<'mc> std::fmt::Display for RaidRaidStatus<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           RaidRaidStatus::Ongoing { .. } => f.write_str("ONGOING"),
           RaidRaidStatus::Victory { .. } => f.write_str("VICTORY"),
           RaidRaidStatus::Loss { .. } => f.write_str("LOSS"),
           RaidRaidStatus::Stopped { .. } => f.write_str("STOPPED"),
       }
   }
}

        impl<'mc> RaidRaidStatusTrait<'mc> for RaidRaidStatus<'mc> {}
        
        pub trait RaidRaidStatusTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<RaidRaidStatus<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Raid/RaidStatus");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Raid/RaidStatus;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"ONGOING" => Ok(RaidRaidStatus::Ongoing { inner: RaidRaidStatusStruct::from_raw(env,obj)?}),
"VICTORY" => Ok(RaidRaidStatus::Victory { inner: RaidRaidStatusStruct::from_raw(env,obj)?}),
"LOSS" => Ok(RaidRaidStatus::Loss { inner: RaidRaidStatusStruct::from_raw(env,obj)?}),
"STOPPED" => Ok(RaidRaidStatus::Stopped { inner: RaidRaidStatusStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct RaidRaidStatusStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for RaidRaidStatus<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Ongoing { inner } => inner.0.clone(),
Self::Victory { inner } => inner.0.clone(),
Self::Loss { inner } => inner.0.clone(),
Self::Stopped { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Ongoing { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Victory { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Loss { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Stopped { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for RaidRaidStatus<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate RaidRaidStatus from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Raid/RaidStatus")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a RaidRaidStatus object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "ONGOING" => Ok(RaidRaidStatus::Ongoing { inner: RaidRaidStatusStruct::from_raw(env,obj)?}),"VICTORY" => Ok(RaidRaidStatus::Victory { inner: RaidRaidStatusStruct::from_raw(env,obj)?}),"LOSS" => Ok(RaidRaidStatus::Loss { inner: RaidRaidStatusStruct::from_raw(env,obj)?}),"STOPPED" => Ok(RaidRaidStatus::Stopped { inner: RaidRaidStatusStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for RaidRaidStatusStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for RaidRaidStatusStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate RaidRaidStatusStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Raid/RaidStatus")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a RaidRaidStatusStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> RaidRaidStatusStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::RaidRaidStatus<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Raid/RaidStatus;");
let cls = jni.find_class("org/bukkit/Raid/RaidStatus"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::RaidRaidStatus::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct ParticleDustTransition<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for ParticleDustTransition<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for ParticleDustTransition<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate ParticleDustTransition from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Particle/DustTransition")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a ParticleDustTransition object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> ParticleDustTransitionTrait<'mc> for ParticleDustTransition<'mc> {}
pub trait ParticleDustTransitionTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

	fn new(jni: &blackboxmc_general::SharedJNIEnv<'mc>,from_color: impl Into<crate::Color<'mc>>,to_color: impl Into<crate::Color<'mc>>,size: f32) 
-> Result<crate::ParticleDustTransition<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Color;Lorg/bukkit/Color;F)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(from_color.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(to_color.into().jni_object().clone())});
let val_3 = jni::objects::JValueGen::Float(size);
let cls = jni.find_class("org/bukkit/Particle/DustTransition"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.new_object(cls,
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
jni.translate_error_no_gen(res)?;
crate::ParticleDustTransition::from_raw(&jni,res
)}
/// The final of the particles to be displayed.
	fn to_color(&self) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Color;");
let res = self.jni_ref().call_method(&self.jni_object(),"getToColor",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Color::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::ParticleDustOptions<'mc>> for ParticleDustTransition<'mc>{

fn into(self) -> crate::ParticleDustOptions<'mc> {

crate::ParticleDustOptions::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting ParticleDustTransition into crate::ParticleDustOptions")

   }
}
impl<'mc> crate::ParticleDustOptionsTrait<'mc> for ParticleDustTransition<'mc> {}
#[repr(C)]
pub struct GameRule<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for GameRule<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for GameRule<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate GameRule from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/GameRule")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a GameRule object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> GameRuleTrait<'mc> for GameRule<'mc> {}
pub trait GameRuleTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Get the name of this GameRule.
	fn name(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getName",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Get the type of this rule.
	fn get_type(&self) 
-> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/Class;");
let res = self.jni_ref().call_method(&self.jni_object(),"getType",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
unsafe {jni::objects::JClass::from_raw(res.as_jni().l)}
)}

	fn equals(&self,obj: jni::objects::JObject<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Object;)Z");
let val_1 = jni::objects::JValueGen::Object(obj);
let res = self.jni_ref().call_method(&self.jni_object(),"equals",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

#[doc(hidden)]
	fn internal_to_string(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"toString",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}

        impl<'mc> std::string::ToString for GameRule<'mc> {
            fn to_string(&self) -> String {
                match GameRuleTrait::internal_to_string(self) {
                    Ok(a) => a.clone(),
                    Err(err) => format!(
                        "Error calling GameRule.toString: {}",
                        err
                    ),
                }
            }
        }
        
pub enum GameMode<'mc> {
	Creative {inner: GameModeStruct<'mc>},
	Survival {inner: GameModeStruct<'mc>},
	Adventure {inner: GameModeStruct<'mc>},
	Spectator {inner: GameModeStruct<'mc>},
}
impl<'mc> std::fmt::Display for GameMode<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           GameMode::Creative { .. } => f.write_str("CREATIVE"),
           GameMode::Survival { .. } => f.write_str("SURVIVAL"),
           GameMode::Adventure { .. } => f.write_str("ADVENTURE"),
           GameMode::Spectator { .. } => f.write_str("SPECTATOR"),
       }
   }
}

        impl<'mc> GameModeTrait<'mc> for GameMode<'mc> {}
        
        pub trait GameModeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<GameMode<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/GameMode");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/GameMode;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"CREATIVE" => Ok(GameMode::Creative { inner: GameModeStruct::from_raw(env,obj)?}),
"SURVIVAL" => Ok(GameMode::Survival { inner: GameModeStruct::from_raw(env,obj)?}),
"ADVENTURE" => Ok(GameMode::Adventure { inner: GameModeStruct::from_raw(env,obj)?}),
"SPECTATOR" => Ok(GameMode::Spectator { inner: GameModeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct GameModeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for GameMode<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Creative { inner } => inner.0.clone(),
Self::Survival { inner } => inner.0.clone(),
Self::Adventure { inner } => inner.0.clone(),
Self::Spectator { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Creative { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Survival { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Adventure { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Spectator { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for GameMode<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate GameMode from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/GameMode")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a GameMode object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "CREATIVE" => Ok(GameMode::Creative { inner: GameModeStruct::from_raw(env,obj)?}),"SURVIVAL" => Ok(GameMode::Survival { inner: GameModeStruct::from_raw(env,obj)?}),"ADVENTURE" => Ok(GameMode::Adventure { inner: GameModeStruct::from_raw(env,obj)?}),"SPECTATOR" => Ok(GameMode::Spectator { inner: GameModeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for GameModeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for GameModeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate GameModeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/GameMode")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a GameModeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> GameModeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::GameMode<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/GameMode;");
let cls = jni.find_class("org/bukkit/GameMode"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::GameMode::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the mode value associated with this GameMode
	fn value(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getValue",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the GameMode represented by the specified value
	fn get_by_value(jni: &blackboxmc_general::SharedJNIEnv<'mc>,value: i32) 
-> Result<Option<crate::GameMode<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(I)Lorg/bukkit/GameMode;");
let val_1 = jni::objects::JValueGen::Int(value);
let cls = jni.find_class("org/bukkit/GameMode"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByValue",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::GameMode::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct FireworkEffectBuilder<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for FireworkEffectBuilder<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for FireworkEffectBuilder<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate FireworkEffectBuilder from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/FireworkEffect/Builder")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a FireworkEffectBuilder object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> FireworkEffectBuilderTrait<'mc> for FireworkEffectBuilder<'mc> {}
pub trait FireworkEffectBuilderTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Specify the type of the firework effect.
	fn with(&self,val_type: impl Into<crate::FireworkEffectType<'mc>>) 
-> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/FireworkEffect/Type;)Lorg/bukkit/FireworkEffect/Builder;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(val_type.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"with",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::FireworkEffectBuilder::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Add a flicker to the firework effect.
	fn with_flicker(&self) 
-> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/FireworkEffect/Builder;");
let res = self.jni_ref().call_method(&self.jni_object(),"withFlicker",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::FireworkEffectBuilder::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Set whether the firework effect should flicker.
	fn flicker(&self,flicker: bool) 
-> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Z)Lorg/bukkit/FireworkEffect/Builder;");
let val_1 = jni::objects::JValueGen::Bool(flicker.into());
let res = self.jni_ref().call_method(&self.jni_object(),"flicker",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::FireworkEffectBuilder::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Add a trail to the firework effect.
	fn with_trail(&self) 
-> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/FireworkEffect/Builder;");
let res = self.jni_ref().call_method(&self.jni_object(),"withTrail",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::FireworkEffectBuilder::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Set whether the firework effect should have a trail.
	fn trail(&self,trail: bool) 
-> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Z)Lorg/bukkit/FireworkEffect/Builder;");
let val_1 = jni::objects::JValueGen::Bool(trail.into());
let res = self.jni_ref().call_method(&self.jni_object(),"trail",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::FireworkEffectBuilder::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Create a {@link FireworkEffect} from the current contents of this
/// builder.
/// 
/// To successfully build, you must have specified at least one color.
	fn build(&self) 
-> Result<crate::FireworkEffect<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/FireworkEffect;");
let res = self.jni_ref().call_method(&self.jni_object(),"build",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::FireworkEffect::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum Art<'mc> {
	Kebab {inner: ArtStruct<'mc>},
	Aztec {inner: ArtStruct<'mc>},
	Alban {inner: ArtStruct<'mc>},
	Aztec2 {inner: ArtStruct<'mc>},
	Bomb {inner: ArtStruct<'mc>},
	Plant {inner: ArtStruct<'mc>},
	Wasteland {inner: ArtStruct<'mc>},
	Pool {inner: ArtStruct<'mc>},
	Courbet {inner: ArtStruct<'mc>},
	Sea {inner: ArtStruct<'mc>},
	Sunset {inner: ArtStruct<'mc>},
	Creebet {inner: ArtStruct<'mc>},
	Wanderer {inner: ArtStruct<'mc>},
	Graham {inner: ArtStruct<'mc>},
	VariantMatch {inner: ArtStruct<'mc>},
	Bust {inner: ArtStruct<'mc>},
	Stage {inner: ArtStruct<'mc>},
	Void {inner: ArtStruct<'mc>},
	SkullAndRoses {inner: ArtStruct<'mc>},
	Wither {inner: ArtStruct<'mc>},
	Fighters {inner: ArtStruct<'mc>},
	Pointer {inner: ArtStruct<'mc>},
	Pigscene {inner: ArtStruct<'mc>},
	BurningSkull {inner: ArtStruct<'mc>},
	Skeleton {inner: ArtStruct<'mc>},
	DonkeyKong {inner: ArtStruct<'mc>},
	Earth {inner: ArtStruct<'mc>},
	Wind {inner: ArtStruct<'mc>},
	Water {inner: ArtStruct<'mc>},
	Fire {inner: ArtStruct<'mc>},
}
impl<'mc> std::fmt::Display for Art<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           Art::Kebab { .. } => f.write_str("KEBAB"),
           Art::Aztec { .. } => f.write_str("AZTEC"),
           Art::Alban { .. } => f.write_str("ALBAN"),
           Art::Aztec2 { .. } => f.write_str("AZTEC2"),
           Art::Bomb { .. } => f.write_str("BOMB"),
           Art::Plant { .. } => f.write_str("PLANT"),
           Art::Wasteland { .. } => f.write_str("WASTELAND"),
           Art::Pool { .. } => f.write_str("POOL"),
           Art::Courbet { .. } => f.write_str("COURBET"),
           Art::Sea { .. } => f.write_str("SEA"),
           Art::Sunset { .. } => f.write_str("SUNSET"),
           Art::Creebet { .. } => f.write_str("CREEBET"),
           Art::Wanderer { .. } => f.write_str("WANDERER"),
           Art::Graham { .. } => f.write_str("GRAHAM"),
           Art::VariantMatch { .. } => f.write_str("MATCH"),
           Art::Bust { .. } => f.write_str("BUST"),
           Art::Stage { .. } => f.write_str("STAGE"),
           Art::Void { .. } => f.write_str("VOID"),
           Art::SkullAndRoses { .. } => f.write_str("SKULL_AND_ROSES"),
           Art::Wither { .. } => f.write_str("WITHER"),
           Art::Fighters { .. } => f.write_str("FIGHTERS"),
           Art::Pointer { .. } => f.write_str("POINTER"),
           Art::Pigscene { .. } => f.write_str("PIGSCENE"),
           Art::BurningSkull { .. } => f.write_str("BURNING_SKULL"),
           Art::Skeleton { .. } => f.write_str("SKELETON"),
           Art::DonkeyKong { .. } => f.write_str("DONKEY_KONG"),
           Art::Earth { .. } => f.write_str("EARTH"),
           Art::Wind { .. } => f.write_str("WIND"),
           Art::Water { .. } => f.write_str("WATER"),
           Art::Fire { .. } => f.write_str("FIRE"),
       }
   }
}

        impl<'mc> ArtTrait<'mc> for Art<'mc> {}
        
        pub trait ArtTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<Art<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Art");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Art;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"KEBAB" => Ok(Art::Kebab { inner: ArtStruct::from_raw(env,obj)?}),
"AZTEC" => Ok(Art::Aztec { inner: ArtStruct::from_raw(env,obj)?}),
"ALBAN" => Ok(Art::Alban { inner: ArtStruct::from_raw(env,obj)?}),
"AZTEC2" => Ok(Art::Aztec2 { inner: ArtStruct::from_raw(env,obj)?}),
"BOMB" => Ok(Art::Bomb { inner: ArtStruct::from_raw(env,obj)?}),
"PLANT" => Ok(Art::Plant { inner: ArtStruct::from_raw(env,obj)?}),
"WASTELAND" => Ok(Art::Wasteland { inner: ArtStruct::from_raw(env,obj)?}),
"POOL" => Ok(Art::Pool { inner: ArtStruct::from_raw(env,obj)?}),
"COURBET" => Ok(Art::Courbet { inner: ArtStruct::from_raw(env,obj)?}),
"SEA" => Ok(Art::Sea { inner: ArtStruct::from_raw(env,obj)?}),
"SUNSET" => Ok(Art::Sunset { inner: ArtStruct::from_raw(env,obj)?}),
"CREEBET" => Ok(Art::Creebet { inner: ArtStruct::from_raw(env,obj)?}),
"WANDERER" => Ok(Art::Wanderer { inner: ArtStruct::from_raw(env,obj)?}),
"GRAHAM" => Ok(Art::Graham { inner: ArtStruct::from_raw(env,obj)?}),
"MATCH" => Ok(Art::VariantMatch { inner: ArtStruct::from_raw(env,obj)?}),
"BUST" => Ok(Art::Bust { inner: ArtStruct::from_raw(env,obj)?}),
"STAGE" => Ok(Art::Stage { inner: ArtStruct::from_raw(env,obj)?}),
"VOID" => Ok(Art::Void { inner: ArtStruct::from_raw(env,obj)?}),
"SKULL_AND_ROSES" => Ok(Art::SkullAndRoses { inner: ArtStruct::from_raw(env,obj)?}),
"WITHER" => Ok(Art::Wither { inner: ArtStruct::from_raw(env,obj)?}),
"FIGHTERS" => Ok(Art::Fighters { inner: ArtStruct::from_raw(env,obj)?}),
"POINTER" => Ok(Art::Pointer { inner: ArtStruct::from_raw(env,obj)?}),
"PIGSCENE" => Ok(Art::Pigscene { inner: ArtStruct::from_raw(env,obj)?}),
"BURNING_SKULL" => Ok(Art::BurningSkull { inner: ArtStruct::from_raw(env,obj)?}),
"SKELETON" => Ok(Art::Skeleton { inner: ArtStruct::from_raw(env,obj)?}),
"DONKEY_KONG" => Ok(Art::DonkeyKong { inner: ArtStruct::from_raw(env,obj)?}),
"EARTH" => Ok(Art::Earth { inner: ArtStruct::from_raw(env,obj)?}),
"WIND" => Ok(Art::Wind { inner: ArtStruct::from_raw(env,obj)?}),
"WATER" => Ok(Art::Water { inner: ArtStruct::from_raw(env,obj)?}),
"FIRE" => Ok(Art::Fire { inner: ArtStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct ArtStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Art<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Kebab { inner } => inner.0.clone(),
Self::Aztec { inner } => inner.0.clone(),
Self::Alban { inner } => inner.0.clone(),
Self::Aztec2 { inner } => inner.0.clone(),
Self::Bomb { inner } => inner.0.clone(),
Self::Plant { inner } => inner.0.clone(),
Self::Wasteland { inner } => inner.0.clone(),
Self::Pool { inner } => inner.0.clone(),
Self::Courbet { inner } => inner.0.clone(),
Self::Sea { inner } => inner.0.clone(),
Self::Sunset { inner } => inner.0.clone(),
Self::Creebet { inner } => inner.0.clone(),
Self::Wanderer { inner } => inner.0.clone(),
Self::Graham { inner } => inner.0.clone(),
Self::VariantMatch { inner } => inner.0.clone(),
Self::Bust { inner } => inner.0.clone(),
Self::Stage { inner } => inner.0.clone(),
Self::Void { inner } => inner.0.clone(),
Self::SkullAndRoses { inner } => inner.0.clone(),
Self::Wither { inner } => inner.0.clone(),
Self::Fighters { inner } => inner.0.clone(),
Self::Pointer { inner } => inner.0.clone(),
Self::Pigscene { inner } => inner.0.clone(),
Self::BurningSkull { inner } => inner.0.clone(),
Self::Skeleton { inner } => inner.0.clone(),
Self::DonkeyKong { inner } => inner.0.clone(),
Self::Earth { inner } => inner.0.clone(),
Self::Wind { inner } => inner.0.clone(),
Self::Water { inner } => inner.0.clone(),
Self::Fire { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Kebab { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Aztec { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Alban { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Aztec2 { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bomb { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Plant { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Wasteland { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Pool { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Courbet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Sea { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Sunset { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Creebet { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Wanderer { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Graham { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::VariantMatch { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bust { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Stage { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Void { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SkullAndRoses { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Wither { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Fighters { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Pointer { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Pigscene { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BurningSkull { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Skeleton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::DonkeyKong { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Earth { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Wind { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Water { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Fire { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for Art<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Art from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Art")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Art object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "KEBAB" => Ok(Art::Kebab { inner: ArtStruct::from_raw(env,obj)?}),"AZTEC" => Ok(Art::Aztec { inner: ArtStruct::from_raw(env,obj)?}),"ALBAN" => Ok(Art::Alban { inner: ArtStruct::from_raw(env,obj)?}),"AZTEC2" => Ok(Art::Aztec2 { inner: ArtStruct::from_raw(env,obj)?}),"BOMB" => Ok(Art::Bomb { inner: ArtStruct::from_raw(env,obj)?}),"PLANT" => Ok(Art::Plant { inner: ArtStruct::from_raw(env,obj)?}),"WASTELAND" => Ok(Art::Wasteland { inner: ArtStruct::from_raw(env,obj)?}),"POOL" => Ok(Art::Pool { inner: ArtStruct::from_raw(env,obj)?}),"COURBET" => Ok(Art::Courbet { inner: ArtStruct::from_raw(env,obj)?}),"SEA" => Ok(Art::Sea { inner: ArtStruct::from_raw(env,obj)?}),"SUNSET" => Ok(Art::Sunset { inner: ArtStruct::from_raw(env,obj)?}),"CREEBET" => Ok(Art::Creebet { inner: ArtStruct::from_raw(env,obj)?}),"WANDERER" => Ok(Art::Wanderer { inner: ArtStruct::from_raw(env,obj)?}),"GRAHAM" => Ok(Art::Graham { inner: ArtStruct::from_raw(env,obj)?}),"MATCH" => Ok(Art::VariantMatch { inner: ArtStruct::from_raw(env,obj)?}),"BUST" => Ok(Art::Bust { inner: ArtStruct::from_raw(env,obj)?}),"STAGE" => Ok(Art::Stage { inner: ArtStruct::from_raw(env,obj)?}),"VOID" => Ok(Art::Void { inner: ArtStruct::from_raw(env,obj)?}),"SKULL_AND_ROSES" => Ok(Art::SkullAndRoses { inner: ArtStruct::from_raw(env,obj)?}),"WITHER" => Ok(Art::Wither { inner: ArtStruct::from_raw(env,obj)?}),"FIGHTERS" => Ok(Art::Fighters { inner: ArtStruct::from_raw(env,obj)?}),"POINTER" => Ok(Art::Pointer { inner: ArtStruct::from_raw(env,obj)?}),"PIGSCENE" => Ok(Art::Pigscene { inner: ArtStruct::from_raw(env,obj)?}),"BURNING_SKULL" => Ok(Art::BurningSkull { inner: ArtStruct::from_raw(env,obj)?}),"SKELETON" => Ok(Art::Skeleton { inner: ArtStruct::from_raw(env,obj)?}),"DONKEY_KONG" => Ok(Art::DonkeyKong { inner: ArtStruct::from_raw(env,obj)?}),"EARTH" => Ok(Art::Earth { inner: ArtStruct::from_raw(env,obj)?}),"WIND" => Ok(Art::Wind { inner: ArtStruct::from_raw(env,obj)?}),"WATER" => Ok(Art::Water { inner: ArtStruct::from_raw(env,obj)?}),"FIRE" => Ok(Art::Fire { inner: ArtStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for ArtStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for ArtStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate ArtStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Art")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a ArtStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> ArtStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Art<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Art;");
let cls = jni.find_class("org/bukkit/Art"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Art::from_raw(&jni,obj
)}
/// Gets the width of the painting, in blocks
	fn block_width(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockWidth",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the height of the painting, in blocks
	fn block_height(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getBlockHeight",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Get the ID of this painting.
	fn id(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getId",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}

	fn key(&self) 
-> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/NamespacedKey;");
let res = self.jni_ref().call_method(&self.jni_object(),"getKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::NamespacedKey::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
#[deprecated]
/// Get a painting by its numeric ID
	fn get_by_id(jni: &blackboxmc_general::SharedJNIEnv<'mc>,id: i32) 
-> Result<Option<crate::Art<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(I)Lorg/bukkit/Art;");
let val_1 = jni::objects::JValueGen::Int(id);
let cls = jni.find_class("org/bukkit/Art"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getById",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::Art::from_raw(&jni,obj
)?
)
)}
/// Get a painting by its unique name
/// 
/// This ignores underscores and capitalization
	fn get_by_name(jni: &blackboxmc_general::SharedJNIEnv<'mc>,name: impl Into<String>) 
-> Result<Option<crate::Art<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/Art;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
let cls = jni.find_class("org/bukkit/Art"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByName",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::Art::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Color<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Color<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Color<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Color from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Color")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Color object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> ColorTrait<'mc> for Color<'mc> {}
pub trait ColorTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Creates a new Color object from an alpha, red, green, and blue
	fn from_argb(jni: &blackboxmc_general::SharedJNIEnv<'mc>,alpha: i32,red: std::option::Option<i32>,green: std::option::Option<i32>,blue: std::option::Option<i32>) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(alpha);
args.push(val_1);
if let Some(a) = red {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = green {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
if let Some(a) = blue {
sig += "I";
let val_4 = jni::objects::JValueGen::Int(a);
args.push(val_4);
}
sig += ")Lorg/bukkit/Color;";
let cls = jni.find_class("org/bukkit/Color"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"fromARGB",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Color::from_raw(&jni,obj
)}
/// Creates a new Color object from a red, green, and blue
	fn from_rgb(jni: &blackboxmc_general::SharedJNIEnv<'mc>,red: i32,green: std::option::Option<i32>,blue: std::option::Option<i32>) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(red);
args.push(val_1);
if let Some(a) = green {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = blue {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")Lorg/bukkit/Color;";
let cls = jni.find_class("org/bukkit/Color"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"fromRGB",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Color::from_raw(&jni,obj
)}
/// Creates a new Color object from a blue, green, and red
	fn from_bgr(jni: &blackboxmc_general::SharedJNIEnv<'mc>,blue: i32,green: std::option::Option<i32>,red: std::option::Option<i32>) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "I";
let val_1 = jni::objects::JValueGen::Int(blue);
args.push(val_1);
if let Some(a) = green {
sig += "I";
let val_2 = jni::objects::JValueGen::Int(a);
args.push(val_2);
}
if let Some(a) = red {
sig += "I";
let val_3 = jni::objects::JValueGen::Int(a);
args.push(val_3);
}
sig += ")Lorg/bukkit/Color;";
let cls = jni.find_class("org/bukkit/Color"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"fromBGR",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Color::from_raw(&jni,obj
)}
/// Gets the alpha component
	fn alpha(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getAlpha",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Creates a new Color object with specified component
	fn set_alpha(&self,alpha: i32) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(I)Lorg/bukkit/Color;");
let val_1 = jni::objects::JValueGen::Int(alpha);
let res = self.jni_ref().call_method(&self.jni_object(),"setAlpha",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Color::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the red component
	fn red(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getRed",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Creates a new Color object with specified component
	fn set_red(&self,red: i32) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(I)Lorg/bukkit/Color;");
let val_1 = jni::objects::JValueGen::Int(red);
let res = self.jni_ref().call_method(&self.jni_object(),"setRed",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Color::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the green component
	fn green(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getGreen",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Creates a new Color object with specified component
	fn set_green(&self,green: i32) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(I)Lorg/bukkit/Color;");
let val_1 = jni::objects::JValueGen::Int(green);
let res = self.jni_ref().call_method(&self.jni_object(),"setGreen",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Color::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the blue component
	fn blue(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getBlue",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Creates a new Color object with specified component
	fn set_blue(&self,blue: i32) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(I)Lorg/bukkit/Color;");
let val_1 = jni::objects::JValueGen::Int(blue);
let res = self.jni_ref().call_method(&self.jni_object(),"setBlue",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Color::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the color as an RGB integer.
	fn as_rgb(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"asRGB",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the color as an ARGB integer.
	fn as_argb(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"asARGB",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the color as an BGR integer.
	fn as_bgr(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"asBGR",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Creates a new color with its RGB components changed as if it was dyed
/// with the colors passed in, replicating vanilla workbench dyeing
	fn mix_dyes(&self,colors: impl Into<crate::DyeColor<'mc>>) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/DyeColor;)Lorg/bukkit/Color;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(colors.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"mixDyes",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Color::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Creates a new color with its RGB components changed as if it was dyed
/// with the colors passed in, replicating vanilla workbench dyeing.
/// <b>Note that this method does not currently take into account alpha
/// components.</b>
	fn mix_colors(&self,colors: impl Into<crate::Color<'mc>>) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Color;)Lorg/bukkit/Color;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(colors.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"mixColors",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Color::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn equals(&self,o: jni::objects::JObject<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Object;)Z");
let val_1 = jni::objects::JValueGen::Object(o);
let res = self.jni_ref().call_method(&self.jni_object(),"equals",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

	fn hash_code(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"hashCode",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}

	fn serialize(&self) 
-> Result<blackboxmc_java::util::JavaMap<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Map;");
let res = self.jni_ref().call_method(&self.jni_object(),"serialize",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaMap::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn deserialize(jni: &blackboxmc_general::SharedJNIEnv<'mc>,map: impl Into<blackboxmc_java::util::JavaMap<'mc>>) 
-> Result<crate::Color<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/util/Map;)Lorg/bukkit/Color;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(map.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Color"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"deserialize",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Color::from_raw(&jni,obj
)}

#[doc(hidden)]
	fn internal_to_string(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"toString",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}

        impl<'mc> std::string::ToString for Color<'mc> {
            fn to_string(&self) -> String {
                match ColorTrait::internal_to_string(self) {
                    Ok(a) => a.clone(),
                    Err(err) => format!(
                        "Error calling Color.toString: {}",
                        err
                    ),
                }
            }
        }
        
impl<'mc> Into<crate::configuration::serialization::ConfigurationSerializable<'mc>> for Color<'mc>{

fn into(self) -> crate::configuration::serialization::ConfigurationSerializable<'mc> {

crate::configuration::serialization::ConfigurationSerializable::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting Color into crate::configuration::serialization::ConfigurationSerializable")

   }
}
impl<'mc> crate::configuration::serialization::ConfigurationSerializableTrait<'mc> for Color<'mc> {}
#[repr(C)]
pub struct Server<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Server<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Server<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Server from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Server")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Server object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> ServerTrait<'mc> for Server<'mc> {}
pub trait ServerTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Gets the name of this server implementation.
	fn name(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getName",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the version string of this server implementation.
	fn version(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getVersion",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the Bukkit version that this server is running.
	fn bukkit_version(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getBukkitVersion",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets a view of all currently logged in players. This {@linkplain
/// Collections#unmodifiableCollection(Collection) view} is a reused
/// object, making some operations like {@link Collection#size()}
/// zero-allocation.
/// 
/// The collection is a view backed by the internal representation, such
/// that, changes to the internal state of the server will be reflected
/// immediately. However, the reuse of the returned collection (identity)
/// is not strictly guaranteed for future or all implementations. Casting
/// the collection, or relying on interface implementations (like {@link
/// Serializable} or {@link List}), is deprecated.
/// 
/// Iteration behavior is undefined outside of self-contained main-thread
/// uses. Normal and immediate iterator use without consequences that
/// affect the collection are fully supported. The effects following
/// (non-exhaustive) {@link Entity#teleport(Location) teleportation},
/// {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(
/// String) kicking} are undefined. Any use of this collection from
/// asynchronous threads is unsafe.
/// 
/// For safe consequential iteration or mimicking the old array behavior,
/// using {@link Collection#toArray(Object[])} is recommended. For making
/// snapshots, {@link ImmutableList#copyOf(Collection)} is recommended.
	fn online_players(&self) 
-> Result<Vec<crate::entity::Player<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Collection;");
let res = self.jni_ref().call_method(&self.jni_object(),"getOnlinePlayers",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&self.jni_ref(),res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Player::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Get the maximum amount of players which can login to this server.
	fn max_players(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getMaxPlayers",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Set the maximum amount of players allowed to be logged in at once.
	fn set_max_players(&self,max_players: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(max_players);
let res = self.jni_ref().call_method(&self.jni_object(),"setMaxPlayers",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Get the game port that the server runs on.
	fn port(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getPort",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Get the view distance from this server.
	fn view_distance(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getViewDistance",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Get the simulation distance from this server.
	fn simulation_distance(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getSimulationDistance",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Get the IP that this server is bound to, or empty string if not
/// specified.
	fn ip(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getIp",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Get world type (level-type setting) for default world.
	fn world_type(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getWorldType",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Get generate-structures setting.
	fn generate_structures(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"getGenerateStructures",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Get max world size.
	fn max_world_size(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getMaxWorldSize",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets whether this server allows the End or not.
	fn allow_end(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"getAllowEnd",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether this server allows the Nether or not.
	fn allow_nether(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"getAllowNether",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the server is logging the IP addresses of players.
	fn is_logging_ips(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isLoggingIPs",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets a list of packs to be enabled.
	fn initial_enabled_packs(&self) 
-> Result<Vec<String>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getInitialEnabledPacks",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(*obj) })?.to_string_lossy().to_string());
};
Ok(
new_vec
)}
/// Gets a list of packs that will not be enabled automatically.
	fn initial_disabled_packs(&self) 
-> Result<Vec<String>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getInitialDisabledPacks",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(*obj) })?.to_string_lossy().to_string());
};
Ok(
new_vec
)}
/// Get the DataPack Manager.
	fn data_pack_manager(&self) 
-> Result<crate::packs::DataPackManager<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/packs/DataPackManager;");
let res = self.jni_ref().call_method(&self.jni_object(),"getDataPackManager",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::packs::DataPackManager::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Get the ServerTick Manager.
	fn server_tick_manager(&self) 
-> Result<crate::ServerTickManager<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/ServerTickManager;");
let res = self.jni_ref().call_method(&self.jni_object(),"getServerTickManager",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::ServerTickManager::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the resource pack configured to be sent to clients by the server.
	fn server_resource_pack(&self) 
-> Result<Option<crate::packs::ResourcePack<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/packs/ResourcePack;");
let res = self.jni_ref().call_method(&self.jni_object(),"getServerResourcePack",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::packs::ResourcePack::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Gets the server resource pack uri, or empty string if not specified.
	fn resource_pack(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getResourcePack",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the SHA-1 digest of the server resource pack, or empty string if
/// not specified.
	fn resource_pack_hash(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getResourcePackHash",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the custom prompt message to be shown when the server resource
/// pack is required, or empty string if not specified.
	fn resource_pack_prompt(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getResourcePackPrompt",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets whether the server resource pack is enforced.
	fn is_resource_pack_required(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isResourcePackRequired",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether this server has a whitelist or not.
	fn has_whitelist(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"hasWhitelist",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Sets if the server is whitelisted.
	fn set_whitelist(&self,value: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(value.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setWhitelist",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets whether the server whitelist is enforced.
/// If the whitelist is enforced, non-whitelisted players will be
/// disconnected when the server whitelist is reloaded.
	fn is_whitelist_enforced(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isWhitelistEnforced",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Sets if the server whitelist is enforced.
/// If the whitelist is enforced, non-whitelisted players will be
/// disconnected when the server whitelist is reloaded.
	fn set_whitelist_enforced(&self,value: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(value.into());
let res = self.jni_ref().call_method(&self.jni_object(),"setWhitelistEnforced",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets a list of whitelisted players.
	fn whitelisted_players(&self) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let res = self.jni_ref().call_method(&self.jni_object(),"getWhitelistedPlayers",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaSet::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Reloads the whitelist from disk.
	fn reload_whitelist(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"reloadWhitelist",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Broadcast a message to all players.
/// 
/// This is the same as calling {@link #broadcast(java.lang.String,
/// java.lang.String)} to {@link #BROADCAST_CHANNEL_USERS}
	fn broadcast_message(&self,message: impl Into<String>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)I");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(message.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"broadcastMessage",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the name of the update folder. The update folder is used to safely
/// update plugins at the right moment on a plugin load.
/// 
/// The update folder name is relative to the plugins folder.
	fn update_folder(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getUpdateFolder",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the value of the connection throttle setting.
	fn connection_throttle(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getConnectionThrottle",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
#[deprecated]
/// Gets default ticks per animal spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn monsters every tick. <li>A value of 400 will mean the server will attempt to spawn monsters every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, animal spawning will be disabled. We recommend using spawn-animals to control this instead.Minecraft default: 400.
	fn ticks_per_animal_spawns(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerAnimalSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the default ticks per monster spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn monsters every tick. <li>A value of 400 will mean the server will attempt to spawn monsters every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, monsters spawning will be disabled. We recommend using spawn-monsters to control this instead.Minecraft default: 1.
	fn ticks_per_monster_spawns(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerMonsterSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the default ticks per water mob spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water mobs every tick. <li>A value of 400 will mean the server will attempt to spawn water mobs every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, water mobs spawning will be disabled.Minecraft default: 1.
	fn ticks_per_water_spawns(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerWaterSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the default ticks per water ambient mob spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water ambient mobs every tick. <li>A value of 400 will mean the server will attempt to spawn water ambient mobs every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, ambient mobs spawning will be disabled.Minecraft default: 1.
	fn ticks_per_water_ambient_spawns(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerWaterAmbientSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the default ticks per water underground creature spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water underground creature every tick. <li>A value of 400 will mean the server will attempt to spawn water underground creature every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, water underground creature spawning will be disabled.Minecraft default: 1.
	fn ticks_per_water_underground_creature_spawns(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerWaterUndergroundCreatureSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the default ticks per ambient mob spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn ambient mobs every tick. <li>A value of 400 will mean the server will attempt to spawn ambient mobs every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, ambient mobs spawning will be disabled.Minecraft default: 1.
	fn ticks_per_ambient_spawns(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerAmbientSpawns",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the default ticks per {@link SpawnCategory} spawns value.
/// 
/// <b>Example Usage:</b>
/// <ul>
/// <li>A value of 1 will mean the server will attempt to spawn {@link SpawnCategory} mobs
/// every tick.
/// <li>A value of 400 will mean the server will attempt to spawn {@link SpawnCategory} mobs
/// every 400th tick.
/// <li>A value below 0 will be reset back to Minecraft's default.
/// </ul>
/// 
/// <b>Note:</b> If set to 0, {@link SpawnCategory} mobs spawning will be disabled.
/// 
/// Minecraft default: 1.
/// 
/// <b>Note: </b> the {@link SpawnCategory#MISC} are not consider.
	fn get_ticks_per_spawns(&self,spawn_category: impl Into<crate::entity::SpawnCategory<'mc>>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)I");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(spawn_category.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getTicksPerSpawns",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the player with the given UUID.
	fn get_player(&self,id: impl Into<blackboxmc_java::util::JavaUUID<'mc>>) 
-> Result<Option<crate::entity::Player<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/util/UUID;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(id.into().jni_object().clone())});
args.push(val_1);
sig += ")Lorg/bukkit/entity/Player;";
let res = self.jni_ref().call_method(&self.jni_object(),"getPlayer",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::entity::Player::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Gets the player with the exact given name, case insensitive.
	fn get_player_exact(&self,name: impl Into<String>) 
-> Result<Option<crate::entity::Player<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/entity/Player;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(name.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"getPlayerExact",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::entity::Player::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Attempts to match any players with the given name, and returns a list
/// of all possibly matches.
/// 
/// This list is not sorted in any particular order. If an exact match is
/// found, the returned list will only contain a single result.
	fn match_player(&self,name: impl Into<String>) 
-> Result<Vec<crate::entity::Player<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Ljava/util/List;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(name.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"matchPlayer",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Player::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Gets the plugin manager for interfacing with plugins.
	fn plugin_manager(&self) 
-> Result<crate::plugin::PluginManager<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/plugin/PluginManager;");
let res = self.jni_ref().call_method(&self.jni_object(),"getPluginManager",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::plugin::PluginManager::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the scheduler for managing scheduled events.
	fn scheduler(&self) 
-> Result<crate::scheduler::BukkitScheduler<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/scheduler/BukkitScheduler;");
let res = self.jni_ref().call_method(&self.jni_object(),"getScheduler",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::scheduler::BukkitScheduler::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets a services manager.
	fn services_manager(&self) 
-> Result<crate::plugin::ServicesManager<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/plugin/ServicesManager;");
let res = self.jni_ref().call_method(&self.jni_object(),"getServicesManager",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::plugin::ServicesManager::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets a list of all worlds on this server.
	fn worlds(&self) 
-> Result<Vec<crate::World<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getWorlds",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::World::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Creates or loads a world with the given name using the specified
/// options.
/// 
/// If the world is already loaded, it will just return the equivalent of
/// getWorld(creator.name()).
	fn create_world(&self,creator: impl Into<crate::WorldCreator<'mc>>) 
-> Result<Option<crate::World<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/WorldCreator;)Lorg/bukkit/World;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(creator.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"createWorld",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::World::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Unloads the given world.
	fn unload_world(&self,world: impl Into<crate::World<'mc>>,save: bool) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/World;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
args.push(val_1);
sig += "Z";
let val_2 = jni::objects::JValueGen::Bool(save.into());
args.push(val_2);
sig += ")Z";
let res = self.jni_ref().call_method(&self.jni_object(),"unloadWorld",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the world from the given Unique ID.
	fn get_world(&self,uid: impl Into<blackboxmc_java::util::JavaUUID<'mc>>) 
-> Result<Option<crate::World<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/util/UUID;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(uid.into().jni_object().clone())});
args.push(val_1);
sig += ")Lorg/bukkit/World;";
let res = self.jni_ref().call_method(&self.jni_object(),"getWorld",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::World::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Create a new virtual {@link WorldBorder}.
/// 
/// Note that world borders created by the server will not respect any world
/// scaling effects (i.e. coordinates are not divided by 8 in the nether).
	fn create_world_border(&self) 
-> Result<crate::WorldBorder<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/WorldBorder;");
let res = self.jni_ref().call_method(&self.jni_object(),"createWorldBorder",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::WorldBorder::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
#[deprecated]
/// Gets the map from the given item ID.
	fn get_map(&self,id: i32) 
-> Result<Option<crate::map::MapView<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(I)Lorg/bukkit/map/MapView;");
let val_1 = jni::objects::JValueGen::Int(id);
let res = self.jni_ref().call_method(&self.jni_object(),"getMap",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::map::MapView::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Create a new map with an automatically assigned ID.
	fn create_map(&self,world: impl Into<crate::World<'mc>>) 
-> Result<crate::map::MapView<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/World;)Lorg/bukkit/map/MapView;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"createMap",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::map::MapView::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Create a new explorer map targeting the closest nearby structure of a
/// given {@link StructureType}.
/// 
/// This method uses implementation default values for radius and
/// findUnexplored (usually 100, true).
	fn create_explorer_map(&self,world: impl Into<crate::World<'mc>>,location: impl Into<crate::Location<'mc>>,structure_type: impl Into<crate::StructureType<'mc>>,radius: std::option::Option<i32>,find_unexplored: std::option::Option<bool>) 
-> Result<crate::inventory::ItemStack<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/World;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/Location;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_2);
sig += "Lorg/bukkit/StructureType;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(structure_type.into().jni_object().clone())});
args.push(val_3);
if let Some(a) = radius {
sig += "I";
let val_4 = jni::objects::JValueGen::Int(a);
args.push(val_4);
}
if let Some(a) = find_unexplored {
sig += "Z";
let val_5 = jni::objects::JValueGen::Bool(a.into());
args.push(val_5);
}
sig += ")Lorg/bukkit/inventory/ItemStack;";
let res = self.jni_ref().call_method(&self.jni_object(),"createExplorerMap",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::inventory::ItemStack::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Reloads the server, refreshing settings and plugin information.
	fn reload(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"reload",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Reload only the Minecraft data for the server. This includes custom
/// advancements and loot tables.
	fn reload_data(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"reloadData",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Returns the primary logger associated with this server instance.
	fn logger(&self) 
-> Result<blackboxmc_java::util::logging::JavaLogger<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/logging/Logger;");
let res = self.jni_ref().call_method(&self.jni_object(),"getLogger",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::logging::JavaLogger::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets a {@link PluginCommand} with the given name or alias.
	fn get_plugin_command(&self,name: impl Into<String>) 
-> Result<Option<crate::command::PluginCommand<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/command/PluginCommand;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(name.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"getPluginCommand",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::command::PluginCommand::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Writes loaded players to disk.
	fn save_players(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"savePlayers",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Dispatches a command on this server, and executes it if found.
	fn dispatch_command(&self,sender: impl Into<crate::command::CommandSender<'mc>>,command_line: impl Into<String>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/command/CommandSender;Ljava/lang/String;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(sender.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(command_line.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"dispatchCommand",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Adds a recipe to the crafting manager.
	fn add_recipe(&self,recipe: impl Into<crate::inventory::Recipe<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/inventory/Recipe;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(recipe.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"addRecipe",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Get a list of all recipes for a given item. The stack size is ignored
/// in comparisons. If the durability is -1, it will match any data value.
	fn get_recipes_for(&self,result: impl Into<crate::inventory::ItemStack<'mc>>) 
-> Result<Vec<crate::inventory::Recipe<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/inventory/ItemStack;)Ljava/util/List;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(result.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getRecipesFor",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::inventory::Recipe::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Get the {@link Recipe} for the given key.
	fn get_recipe(&self,recipe_key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<crate::inventory::Recipe<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/inventory/Recipe;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(recipe_key.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getRecipe",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::inventory::Recipe::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Get the {@link Recipe} for the list of ItemStacks provided.
/// The list is formatted as a crafting matrix where the index follow
/// the pattern below:
/// <pre>
/// [ 0 1 2 ]
/// [ 3 4 5 ]
/// [ 6 7 8 ]
/// </pre>
/// NOTE: This method will not modify the provided ItemStack array, for that, use
/// {@link #craftItem(ItemStack[], World, Player)}.
	fn get_crafting_recipe(&self,crafting_matrix: impl Into<crate::inventory::ItemStack<'mc>>,world: impl Into<crate::World<'mc>>) 
-> Result<Option<crate::inventory::Recipe<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/World;)Lorg/bukkit/inventory/Recipe;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(crafting_matrix.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getCraftingRecipe",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::inventory::Recipe::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Get the crafted item using the list of {@link ItemStack} provided.
/// The list is formatted as a crafting matrix where the index follow
/// the pattern below:
/// <pre>
/// [ 0 1 2 ]
/// [ 3 4 5 ]
/// [ 6 7 8 ]
/// </pre>
/// The {@link World} and {@link Player} arguments are required to fulfill the Bukkit Crafting
/// events.
/// Calls {@link org.bukkit.event.inventory.PrepareItemCraftEvent} to imitate the {@link Player}
/// initiating the crafting event.
	fn craft_item(&self,crafting_matrix: impl Into<crate::inventory::ItemStack<'mc>>,world: impl Into<crate::World<'mc>>,player: std::option::Option<impl Into<crate::entity::Player<'mc>>>) 
-> Result<crate::inventory::ItemStack<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/inventory/ItemStack;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(crafting_matrix.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/World;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
args.push(val_2);
if let Some(a) = player {
sig += "Lorg/bukkit/entity/Player;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_3);
}
sig += ")Lorg/bukkit/inventory/ItemStack;";
let res = self.jni_ref().call_method(&self.jni_object(),"craftItem",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::inventory::ItemStack::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Get the crafted item using the list of {@link ItemStack} provided.
/// The list is formatted as a crafting matrix where the index follow
/// the pattern below:
/// <pre>
/// [ 0 1 2 ]
/// [ 3 4 5 ]
/// [ 6 7 8 ]
/// </pre>
/// The {@link World} and {@link Player} arguments are required to fulfill the Bukkit Crafting
/// events.
/// Calls {@link org.bukkit.event.inventory.PrepareItemCraftEvent} to imitate the {@link Player}
/// initiating the crafting event.
	fn craft_item_result(&self,crafting_matrix: impl Into<crate::inventory::ItemStack<'mc>>,world: impl Into<crate::World<'mc>>,player: std::option::Option<impl Into<crate::entity::Player<'mc>>>) 
-> Result<crate::inventory::ItemCraftResult<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/inventory/ItemStack;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(crafting_matrix.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/World;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
args.push(val_2);
if let Some(a) = player {
sig += "Lorg/bukkit/entity/Player;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_3);
}
sig += ")Lorg/bukkit/inventory/ItemCraftResult;";
let res = self.jni_ref().call_method(&self.jni_object(),"craftItemResult",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::inventory::ItemCraftResult::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Get an iterator through the list of crafting recipes.
	fn recipe_iterator(&self) 
-> Result<blackboxmc_java::util::JavaIterator<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Iterator;");
let res = self.jni_ref().call_method(&self.jni_object(),"recipeIterator",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaIterator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Clears the list of crafting recipes.
	fn clear_recipes(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"clearRecipes",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Resets the list of crafting recipes to the default.
	fn reset_recipes(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"resetRecipes",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Remove a recipe from the server.
/// <b>Note that removing a recipe may cause permanent loss of data
/// associated with that recipe (eg whether it has been discovered by
/// players).</b>
	fn remove_recipe(&self,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"removeRecipe",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets a list of command aliases defined in the server properties.
	fn command_aliases(&self) 
-> Result<blackboxmc_java::util::JavaMap<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Map;");
let res = self.jni_ref().call_method(&self.jni_object(),"getCommandAliases",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaMap::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the radius, in blocks, around each worlds spawn point to protect.
	fn spawn_radius(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getSpawnRadius",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Sets the radius, in blocks, around each worlds spawn point to protect.
	fn set_spawn_radius(&self,value: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(value);
let res = self.jni_ref().call_method(&self.jni_object(),"setSpawnRadius",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets whether the server should send a preview of the player's chat message to the client when the player types a message
	fn should_send_chat_previews(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"shouldSendChatPreviews",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the server only allow players with Mojang-signed public key
/// to join
	fn is_enforcing_secure_profiles(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isEnforcingSecureProfiles",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the Server hide online players in server status.
	fn hide_online_players(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"getHideOnlinePlayers",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the Server is in online mode or not.
	fn online_mode(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"getOnlineMode",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether this server allows flying or not.
	fn allow_flight(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"getAllowFlight",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the server is in hardcore mode or not.
	fn is_hardcore(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isHardcore",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Shutdowns the server, stopping everything.
	fn shutdown(&self) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let res = self.jni_ref().call_method(&self.jni_object(),"shutdown",sig.as_str(),vec![]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Broadcasts the specified message to every user with the given
/// permission name.
	fn broadcast(&self,message: impl Into<String>,permission: impl Into<String>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;Ljava/lang/String;)I");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(message.into())?));
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(permission.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"broadcast",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the player by the given UUID, regardless if they are offline or
/// online.
/// 
/// This will return an object even if the player does not exist. To this
/// method, all players will exist.
	fn get_offline_player(&self,id: impl Into<blackboxmc_java::util::JavaUUID<'mc>>) 
-> Result<crate::OfflinePlayer<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/util/UUID;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(id.into().jni_object().clone())});
args.push(val_1);
sig += ")Lorg/bukkit/OfflinePlayer;";
let res = self.jni_ref().call_method(&self.jni_object(),"getOfflinePlayer",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::OfflinePlayer::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Creates a new {@link PlayerProfile}.
	fn create_player_profile(&self,unique_id: impl Into<blackboxmc_java::util::JavaUUID<'mc>>,name: std::option::Option<impl Into<String>>) 
-> Result<crate::profile::PlayerProfile<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/util/UUID;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(unique_id.into().jni_object().clone())});
args.push(val_1);
if let Some(a) = name {
sig += "Ljava/lang/String;";
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(a.into())?));
args.push(val_2);
}
sig += ")Lorg/bukkit/profile/PlayerProfile;";
let res = self.jni_ref().call_method(&self.jni_object(),"createPlayerProfile",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::profile::PlayerProfile::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets a set containing all current IPs that are banned.
	fn ipbans(&self) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let res = self.jni_ref().call_method(&self.jni_object(),"getIPBans",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaSet::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Bans the specified address from the server.
	fn ban_ip(&self,address: jni::objects::JObject<'mc>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/net/InetAddress;";
let val_1 = jni::objects::JValueGen::Object(address);
args.push(val_1);
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"banIP",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Unbans the specified address from the server.
	fn unban_ip(&self,address: jni::objects::JObject<'mc>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/net/InetAddress;";
let val_1 = jni::objects::JValueGen::Object(address);
args.push(val_1);
sig += ")V";
let res = self.jni_ref().call_method(&self.jni_object(),"unbanIP",sig.as_str(),args);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets a set containing all banned players.
	fn banned_players(&self) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let res = self.jni_ref().call_method(&self.jni_object(),"getBannedPlayers",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaSet::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets a ban list for the supplied type.
	fn get_ban_list(&self,val_type: impl Into<crate::BanListType<'mc>>) 
-> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/BanList/Type;)LT;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(val_type.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getBanList",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.l()?
)}
/// Gets a set containing all player operators.
	fn operators(&self) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let res = self.jni_ref().call_method(&self.jni_object(),"getOperators",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaSet::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the default {@link GameMode} for new players.
	fn default_game_mode(&self) 
-> Result<crate::GameMode<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/GameMode;");
let res = self.jni_ref().call_method(&self.jni_object(),"getDefaultGameMode",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::GameMode::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Sets the default {@link GameMode} for new players.
	fn set_default_game_mode(&self,mode: impl Into<crate::GameMode<'mc>>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/GameMode;)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(mode.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"setDefaultGameMode",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets a {@link ConsoleCommandSender} that may be used as an input source
/// for this server.
	fn console_sender(&self) 
-> Result<crate::command::ConsoleCommandSender<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/command/ConsoleCommandSender;");
let res = self.jni_ref().call_method(&self.jni_object(),"getConsoleSender",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::command::ConsoleCommandSender::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets every player that has ever played on this server.
	fn offline_players(&self) 
-> Result<crate::OfflinePlayer<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/OfflinePlayer;");
let res = self.jni_ref().call_method(&self.jni_object(),"getOfflinePlayers",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::OfflinePlayer::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the {@link Messenger} responsible for this server.
	fn messenger(&self) 
-> Result<crate::plugin::messaging::Messenger<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/plugin/messaging/Messenger;");
let res = self.jni_ref().call_method(&self.jni_object(),"getMessenger",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::plugin::messaging::Messenger::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the {@link HelpMap} providing help topics for this server.
	fn help_map(&self) 
-> Result<crate::help::HelpMap<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/help/HelpMap;");
let res = self.jni_ref().call_method(&self.jni_object(),"getHelpMap",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::help::HelpMap::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Creates an empty inventory of type {@link InventoryType#CHEST} with the
/// specified size and title.
	fn create_inventory(&self,owner: impl Into<crate::inventory::InventoryHolder<'mc>>,size: i32,title: std::option::Option<impl Into<String>>) 
-> Result<crate::inventory::Inventory<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/inventory/InventoryHolder;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(owner.into().jni_object().clone())});
args.push(val_1);
sig += "I";
let val_2 = jni::objects::JValueGen::Int(size);
args.push(val_2);
if let Some(a) = title {
sig += "Ljava/lang/String;";
let val_3 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(a.into())?));
args.push(val_3);
}
sig += ")Lorg/bukkit/inventory/Inventory;";
let res = self.jni_ref().call_method(&self.jni_object(),"createInventory",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::inventory::Inventory::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Creates an empty merchant.
	fn create_merchant(&self,title: impl Into<String>) 
-> Result<crate::inventory::Merchant<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/inventory/Merchant;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(title.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"createMerchant",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::inventory::Merchant::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the amount of consecutive neighbor updates before skipping
/// additional ones.
	fn max_chained_neighbor_updates(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getMaxChainedNeighborUpdates",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets user-specified limit for number of monsters that can spawn in a chunk.
	fn monster_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getMonsterSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets user-specified limit for number of animals that can spawn in a chunk.
	fn animal_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getAnimalSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets user-specified limit for number of water animals that can spawn in a chunk.
	fn water_animal_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getWaterAnimalSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets user-specified limit for number of water ambient mobs that can spawn in a chunk.
	fn water_ambient_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getWaterAmbientSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Get user-specified limit for number of water creature underground that can spawn in a chunk.
	fn water_underground_creature_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getWaterUndergroundCreatureSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets user-specified limit for number of ambient mobs that can spawn in a chunk.
	fn ambient_spawn_limit(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getAmbientSpawnLimit",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets user-specified limit for number of {@link SpawnCategory} mobs that can spawn in
/// a chunk.
/// <b>Note: the {@link SpawnCategory#MISC} are not consider.</b>
	fn get_spawn_limit(&self,spawn_category: impl Into<crate::entity::SpawnCategory<'mc>>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)I");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(spawn_category.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getSpawnLimit",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Checks the current thread against the expected primary thread for the
/// server.
/// 
/// <b>Note:</b> this method should not be used to indicate the current
/// synchronized state of the runtime. A current thread matching the main
/// thread indicates that it is synchronized, but a mismatch <b>does not
/// preclude</b> the same assumption.
	fn is_primary_thread(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isPrimaryThread",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the message that is displayed on the server list.
	fn motd(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getMotd",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Set the message that is displayed on the server list.
	fn set_motd(&self,motd: impl Into<String>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)V");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(motd.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"setMotd",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the default message that is displayed when the server is stopped.
	fn shutdown_message(&self) 
-> Result<Option<String>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"getShutdownMessage",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)
)}
/// Gets the current warning state for the server.
	fn warning_state(&self) 
-> Result<crate::WarningWarningState<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Warning/WarningState;");
let res = self.jni_ref().call_method(&self.jni_object(),"getWarningState",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::WarningWarningState::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the instance of the item factory (for {@link ItemMeta}).
	fn item_factory(&self) 
-> Result<crate::inventory::ItemFactory<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/inventory/ItemFactory;");
let res = self.jni_ref().call_method(&self.jni_object(),"getItemFactory",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::inventory::ItemFactory::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the instance of the scoreboard manager.
/// 
/// This will only exist after the first world has loaded.
	fn scoreboard_manager(&self) 
-> Result<Option<crate::scoreboard::ScoreboardManager<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/scoreboard/ScoreboardManager;");
let res = self.jni_ref().call_method(&self.jni_object(),"getScoreboardManager",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::scoreboard::ScoreboardManager::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Get (or create) a new {@link Criteria} by its name.
	fn get_scoreboard_criteria(&self,name: impl Into<String>) 
-> Result<crate::scoreboard::Criteria<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/scoreboard/Criteria;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(name.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"getScoreboardCriteria",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::scoreboard::Criteria::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets an instance of the server's default server-icon.
	fn server_icon(&self) 
-> Result<Option<crate::util::CachedServerIcon<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/util/CachedServerIcon;");
let res = self.jni_ref().call_method(&self.jni_object(),"getServerIcon",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::util::CachedServerIcon::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Creates a cached server-icon for the specific image.
/// 
/// Size and type are implementation defined. An incompatible file is
/// guaranteed to throw an implementation-defined {@link Exception}.
	fn load_server_icon(&self,image: jni::objects::JObject<'mc>) 
-> Result<crate::util::CachedServerIcon<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/awt/image/BufferedImage;";
let val_1 = jni::objects::JValueGen::Object(image);
args.push(val_1);
sig += ")Lorg/bukkit/util/CachedServerIcon;";
let res = self.jni_ref().call_method(&self.jni_object(),"loadServerIcon",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::util::CachedServerIcon::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Set the idle kick timeout. Any players idle for the specified amount of
/// time will be automatically kicked.
/// 
/// A value of 0 will disable the idle kick timeout.
	fn set_idle_timeout(&self,threshold: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(threshold);
let res = self.jni_ref().call_method(&self.jni_object(),"setIdleTimeout",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the idle kick timeout.
	fn idle_timeout(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getIdleTimeout",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Create a ChunkData for use in a generator.
/// See {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}
	fn create_chunk_data(&self,world: impl Into<crate::World<'mc>>) 
-> Result<crate::generator::ChunkGeneratorChunkData<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/World;)Lorg/bukkit/generator/ChunkGenerator/ChunkData;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"createChunkData",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
crate::generator::ChunkGeneratorChunkData::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Creates a boss bar instance to display to players. The progress defaults
/// to 1.0.
/// 
/// This instance is added to the persistent storage of the server and will
/// be editable by commands and restored after restart.
	fn create_boss_bar(&self,key: impl Into<crate::NamespacedKey<'mc>>,title: impl Into<String>,color: impl Into<crate::boss::BarColor<'mc>>,style: impl Into<crate::boss::BarStyle<'mc>>,flags: std::option::Option<impl Into<crate::boss::BarFlag<'mc>>>) 
-> Result<crate::boss::KeyedBossBar<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/NamespacedKey;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
args.push(val_1);
sig += "Ljava/lang/String;";
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(title.into())?));
args.push(val_2);
sig += "Lorg/bukkit/boss/BarColor;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(color.into().jni_object().clone())});
args.push(val_3);
sig += "Lorg/bukkit/boss/BarStyle;";
let val_4 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(style.into().jni_object().clone())});
args.push(val_4);
if let Some(a) = flags {
sig += "Lorg/bukkit/boss/BarFlag;";
let val_5 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_5);
}
sig += ")Lorg/bukkit/boss/KeyedBossBar;";
let res = self.jni_ref().call_method(&self.jni_object(),"createBossBar",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::boss::KeyedBossBar::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets an unmodifiable iterator through all persistent bossbars.
/// <ul>
/// <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
/// <li>
/// <b>not</b> created using
/// {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
/// </li>
/// </ul>
/// e.g. bossbars created using the bossbar command
	fn boss_bars(&self) 
-> Result<blackboxmc_java::util::JavaIterator<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Iterator;");
let res = self.jni_ref().call_method(&self.jni_object(),"getBossBars",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaIterator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the {@link KeyedBossBar} specified by this key.
/// <ul>
/// <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
/// <li>
/// <b>not</b> created using
/// {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
/// </li>
/// </ul>
/// e.g. bossbars created using the bossbar command
	fn get_boss_bar(&self,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<crate::boss::KeyedBossBar<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/boss/KeyedBossBar;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getBossBar",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::boss::KeyedBossBar::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Removes a {@link KeyedBossBar} specified by this key.
/// <ul>
/// <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
/// <li>
/// <b>not</b> created using
/// {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
/// </li>
/// </ul>
/// e.g. bossbars created using the bossbar command
	fn remove_boss_bar(&self,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"removeBossBar",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets an entity on the server by its UUID
	fn get_entity(&self,uuid: impl Into<blackboxmc_java::util::JavaUUID<'mc>>) 
-> Result<Option<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/util/UUID;)Lorg/bukkit/entity/Entity;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(uuid.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getEntity",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::entity::Entity::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Get the advancement specified by this key.
	fn get_advancement(&self,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<crate::advancement::Advancement<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/advancement/Advancement;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getAdvancement",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::advancement::Advancement::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Get an iterator through all advancements. Advancements cannot be removed
/// from this iterator,
	fn advancement_iterator(&self) 
-> Result<blackboxmc_java::util::JavaIterator<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Iterator;");
let res = self.jni_ref().call_method(&self.jni_object(),"advancementIterator",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaIterator::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Creates a new {@link BlockData} instance for the specified Material, with
/// all properties initialized to unspecified defaults, except for those
/// provided in data.
/// 
/// If <code>material</code> is specified, then the data string must not also
/// contain the material.
	fn create_block_data(&self,material: impl Into<crate::Material<'mc>>,data: std::option::Option<impl Into<String>>) 
-> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Material;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(material.into().jni_object().clone())});
args.push(val_1);
if let Some(a) = data {
sig += "Ljava/lang/String;";
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(a.into())?));
args.push(val_2);
}
sig += ")Lorg/bukkit/block/data/BlockData;";
let res = self.jni_ref().call_method(&self.jni_object(),"createBlockData",sig.as_str(),args);
let res = 
self.jni_ref().translate_error(res)?;
crate::block::data::BlockData::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets a tag which has already been defined within the server. Plugins are
/// suggested to use the concrete tags in {@link Tag} rather than this method
/// which makes no guarantees about which tags are available, and may also be
/// less performant due to lack of caching.
/// 
/// Tags will be searched for in an implementation specific manner, but a
/// path consisting of namespace/tags/registry/key is expected.
/// 
/// Server implementations are allowed to handle only the registries
/// indicated in {@link Tag}.
	fn get_tag(&self,registry: impl Into<String>,tag: impl Into<crate::NamespacedKey<'mc>>,clazz: jni::objects::JClass<'mc>) 
-> Result<Option<crate::Tag<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;Lorg/bukkit/NamespacedKey;Ljava/lang/Class;)Lorg/bukkit/Tag;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(registry.into())?));
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(tag.into().jni_object().clone())});
let val_3 = jni::objects::JValueGen::Object(clazz.into());
let res = self.jni_ref().call_method(&self.jni_object(),"getTag",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::Tag::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Gets the specified {@link LootTable}.
	fn get_loot_table(&self,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<crate::loot::LootTable<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/loot/LootTable;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let res = self.jni_ref().call_method(&self.jni_object(),"getLootTable",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::loot::LootTable::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
/// Selects entities using the given Vanilla selector.
/// 
/// No guarantees are made about the selector format, other than they match
/// the Vanilla format for the active Minecraft version.
/// 
/// Usually a selector will start with '@', unless selecting a Player in
/// which case it may simply be the Player's name or UUID.
/// 
/// Note that in Vanilla, elevated permissions are usually required to use
/// '@' selectors, but this method should not check such permissions from the
/// sender.
	fn select_entities(&self,sender: impl Into<crate::command::CommandSender<'mc>>,selector: impl Into<String>) 
-> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/command/CommandSender;Ljava/lang/String;)Ljava/util/List;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(sender.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(self.jni_ref().new_string(selector.into())?));
let res = self.jni_ref().call_method(&self.jni_object(),"selectEntities",sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Gets the structure manager for loading and saving structures.
	fn structure_manager(&self) 
-> Result<crate::structure::StructureManager<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/structure/StructureManager;");
let res = self.jni_ref().call_method(&self.jni_object(),"getStructureManager",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::structure::StructureManager::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Returns the registry for the given class.
/// 
/// If no registry is present for the given class null will be returned.
/// 
/// Depending on the implementation not every registry present in
/// {@link Registry} will be returned by this method.
	fn get_registry(&self,t_class: jni::objects::JClass<'mc>) 
-> Result<Option<crate::Registry<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Class;)Lorg/bukkit/Registry;");
let val_1 = jni::objects::JValueGen::Object(t_class.into());
let res = self.jni_ref().call_method(&self.jni_object(),"getRegistry",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::Registry::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
#[deprecated]

	fn get_unsafe(&self) 
-> Result<crate::UnsafeValues<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/UnsafeValues;");
let res = self.jni_ref().call_method(&self.jni_object(),"getUnsafe",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::UnsafeValues::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
impl<'mc> Into<crate::plugin::messaging::PluginMessageRecipient<'mc>> for Server<'mc>{

fn into(self) -> crate::plugin::messaging::PluginMessageRecipient<'mc> {

crate::plugin::messaging::PluginMessageRecipient::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting Server into crate::plugin::messaging::PluginMessageRecipient")

   }
}
impl<'mc> crate::plugin::messaging::PluginMessageRecipientTrait<'mc> for Server<'mc> {}
pub enum Axis<'mc> {
	X {inner: AxisStruct<'mc>},
	Y {inner: AxisStruct<'mc>},
	Z {inner: AxisStruct<'mc>},
}
impl<'mc> std::fmt::Display for Axis<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           Axis::X { .. } => f.write_str("X"),
           Axis::Y { .. } => f.write_str("Y"),
           Axis::Z { .. } => f.write_str("Z"),
       }
   }
}

        impl<'mc> AxisTrait<'mc> for Axis<'mc> {}
        
        pub trait AxisTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<Axis<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Axis");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Axis;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"X" => Ok(Axis::X { inner: AxisStruct::from_raw(env,obj)?}),
"Y" => Ok(Axis::Y { inner: AxisStruct::from_raw(env,obj)?}),
"Z" => Ok(Axis::Z { inner: AxisStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct AxisStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Axis<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::X { inner } => inner.0.clone(),
Self::Y { inner } => inner.0.clone(),
Self::Z { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::X { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Y { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Z { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for Axis<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Axis from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Axis")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Axis object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "X" => Ok(Axis::X { inner: AxisStruct::from_raw(env,obj)?}),"Y" => Ok(Axis::Y { inner: AxisStruct::from_raw(env,obj)?}),"Z" => Ok(Axis::Z { inner: AxisStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for AxisStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for AxisStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate AxisStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Axis")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a AxisStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> AxisStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Axis<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Axis;");
let cls = jni.find_class("org/bukkit/Axis"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Axis::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Vibration<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Vibration<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Vibration<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Vibration from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Vibration")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Vibration object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> VibrationTrait<'mc> for Vibration<'mc> {}
pub trait VibrationTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

	fn new(jni: &blackboxmc_general::SharedJNIEnv<'mc>,origin: impl Into<crate::Location<'mc>>,destination: impl Into<crate::VibrationDestination<'mc>>,arrival_time: i32) 
-> Result<crate::Vibration<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Location;Lorg/bukkit/Vibration/Destination;I)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(origin.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(destination.into().jni_object().clone())});
let val_3 = jni::objects::JValueGen::Int(arrival_time);
let cls = jni.find_class("org/bukkit/Vibration"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.new_object(cls,
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
jni.translate_error_no_gen(res)?;
crate::Vibration::from_raw(&jni,res
)}
/// Get the origin of the vibration.
	fn origin(&self) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Location;");
let res = self.jni_ref().call_method(&self.jni_object(),"getOrigin",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Get the vibration destination.
	fn destination(&self) 
-> Result<crate::VibrationDestination<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Vibration/Destination;");
let res = self.jni_ref().call_method(&self.jni_object(),"getDestination",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::VibrationDestination::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Get the vibration arrival time in ticks.
	fn arrival_time(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getArrivalTime",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum NetherWartsState<'mc> {
	Seeded {inner: NetherWartsStateStruct<'mc>},
	StageOne {inner: NetherWartsStateStruct<'mc>},
	StageTwo {inner: NetherWartsStateStruct<'mc>},
	Ripe {inner: NetherWartsStateStruct<'mc>},
}
impl<'mc> std::fmt::Display for NetherWartsState<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           NetherWartsState::Seeded { .. } => f.write_str("SEEDED"),
           NetherWartsState::StageOne { .. } => f.write_str("STAGE_ONE"),
           NetherWartsState::StageTwo { .. } => f.write_str("STAGE_TWO"),
           NetherWartsState::Ripe { .. } => f.write_str("RIPE"),
       }
   }
}

        impl<'mc> NetherWartsStateTrait<'mc> for NetherWartsState<'mc> {}
        
        pub trait NetherWartsStateTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<NetherWartsState<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/NetherWartsState");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/NetherWartsState;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"SEEDED" => Ok(NetherWartsState::Seeded { inner: NetherWartsStateStruct::from_raw(env,obj)?}),
"STAGE_ONE" => Ok(NetherWartsState::StageOne { inner: NetherWartsStateStruct::from_raw(env,obj)?}),
"STAGE_TWO" => Ok(NetherWartsState::StageTwo { inner: NetherWartsStateStruct::from_raw(env,obj)?}),
"RIPE" => Ok(NetherWartsState::Ripe { inner: NetherWartsStateStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct NetherWartsStateStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for NetherWartsState<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Seeded { inner } => inner.0.clone(),
Self::StageOne { inner } => inner.0.clone(),
Self::StageTwo { inner } => inner.0.clone(),
Self::Ripe { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Seeded { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StageOne { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::StageTwo { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Ripe { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for NetherWartsState<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate NetherWartsState from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/NetherWartsState")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a NetherWartsState object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "SEEDED" => Ok(NetherWartsState::Seeded { inner: NetherWartsStateStruct::from_raw(env,obj)?}),"STAGE_ONE" => Ok(NetherWartsState::StageOne { inner: NetherWartsStateStruct::from_raw(env,obj)?}),"STAGE_TWO" => Ok(NetherWartsState::StageTwo { inner: NetherWartsStateStruct::from_raw(env,obj)?}),"RIPE" => Ok(NetherWartsState::Ripe { inner: NetherWartsStateStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for NetherWartsStateStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for NetherWartsStateStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate NetherWartsStateStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/NetherWartsState")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a NetherWartsStateStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> NetherWartsStateStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::NetherWartsState<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/NetherWartsState;");
let cls = jni.find_class("org/bukkit/NetherWartsState"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::NetherWartsState::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Bukkit<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Bukkit<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Bukkit<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Bukkit from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Bukkit")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Bukkit object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> BukkitTrait<'mc> for Bukkit<'mc> {}
pub trait BukkitTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Gets the current {@link Server} singleton
	fn server(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Server<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Server;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getServer",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Server::from_raw(&jni,obj
)}
/// Attempts to set the {@link Server} singleton.
/// 
/// This cannot be done if the Server is already set.
	fn set_server(jni: &blackboxmc_general::SharedJNIEnv<'mc>,server: impl Into<crate::Server<'mc>>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/Server;)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(server.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"setServer",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
jni.translate_error(res)?;
Ok(
()
)}
/// Gets the name of this server implementation.
	fn name(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getName",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the version string of this server implementation.
	fn version(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getVersion",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the Bukkit version that this server is running.
	fn bukkit_version(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getBukkitVersion",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets a view of all currently logged in players. This {@linkplain
/// Collections#unmodifiableCollection(Collection) view} is a reused
/// object, making some operations like {@link Collection#size()}
/// zero-allocation.
/// 
/// The collection is a view backed by the internal representation, such
/// that, changes to the internal state of the server will be reflected
/// immediately. However, the reuse of the returned collection (identity)
/// is not strictly guaranteed for future or all implementations. Casting
/// the collection, or relying on interface implementations (like {@link
/// Serializable} or {@link List}), is deprecated.
/// 
/// Iteration behavior is undefined outside of self-contained main-thread
/// uses. Normal and immediate iterator use without consequences that
/// affect the collection are fully supported. The effects following
/// (non-exhaustive) {@link Entity#teleport(Location) teleportation},
/// {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(
/// String) kicking} are undefined. Any use of this collection from
/// asynchronous threads is unsafe.
/// 
/// For safe consequential iteration or mimicking the old array behavior,
/// using {@link Collection#toArray(Object[])} is recommended. For making
/// snapshots, {@link ImmutableList#copyOf(Collection)} is recommended.
	fn online_players(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<Vec<crate::entity::Player<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Collection;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getOnlinePlayers",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let mut new_vec = Vec::new();
let col = blackboxmc_java::util::JavaCollection::from_raw(&jni,res.l()?)?;let iter = col.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Player::from_raw(&jni,obj,)?);
};
Ok(
new_vec
)}
/// Get the maximum amount of players which can login to this server.
	fn max_players(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getMaxPlayers",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Set the maximum amount of players allowed to be logged in at once.
	fn set_max_players(jni: &blackboxmc_general::SharedJNIEnv<'mc>,max_players: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(max_players);
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"setMaxPlayers",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
jni.translate_error(res)?;
Ok(
()
)}
/// Get the game port that the server runs on.
	fn port(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getPort",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Get the view distance from this server.
	fn view_distance(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getViewDistance",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Get the simulation distance from this server.
	fn simulation_distance(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getSimulationDistance",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Get the IP that this server is bound to, or empty string if not
/// specified.
	fn ip(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getIp",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Get world type (level-type setting) for default world.
	fn world_type(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getWorldType",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Get generate-structures setting.
	fn generate_structures(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getGenerateStructures",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Get max world size.
	fn max_world_size(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getMaxWorldSize",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Gets whether this server allows the End or not.
	fn allow_end(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getAllowEnd",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether this server allows the Nether or not.
	fn allow_nether(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getAllowNether",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the server is logging the IP addresses of players.
	fn is_logging_ips(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"isLoggingIPs",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}

	fn initial_enabled_packs(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<Vec<String>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getInitialEnabledPacks",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&jni, res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(jni.get_string(unsafe { &jni::objects::JString::from_raw(*obj) })?.to_string_lossy().to_string());
};
Ok(
new_vec
)}

	fn initial_disabled_packs(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<Vec<String>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getInitialDisabledPacks",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&jni, res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(jni.get_string(unsafe { &jni::objects::JString::from_raw(*obj) })?.to_string_lossy().to_string());
};
Ok(
new_vec
)}
/// Get the DataPack Manager.
	fn data_pack_manager(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::packs::DataPackManager<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/packs/DataPackManager;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getDataPackManager",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::packs::DataPackManager::from_raw(&jni,obj
)}
/// Gets the resource pack configured to be sent to clients by the server.
	fn server_resource_pack(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<Option<crate::packs::ResourcePack<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/packs/ResourcePack;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getServerResourcePack",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::packs::ResourcePack::from_raw(&jni,obj
)?
)
)}
/// Get the ServerTick Manager.
	fn server_tick_manager(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::ServerTickManager<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/ServerTickManager;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getServerTickManager",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::ServerTickManager::from_raw(&jni,obj
)}
/// Gets the server resource pack uri, or empty string if not specified.
	fn resource_pack(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getResourcePack",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the SHA-1 digest of the server resource pack, or empty string if
/// not specified.
	fn resource_pack_hash(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getResourcePackHash",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the custom prompt message to be shown when the server resource
/// pack is required, or empty string if not specified.
	fn resource_pack_prompt(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getResourcePackPrompt",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets whether the server resource pack is enforced.
	fn is_resource_pack_required(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"isResourcePackRequired",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether this server has a whitelist or not.
	fn has_whitelist(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"hasWhitelist",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Sets if the server is whitelisted.
	fn set_whitelist(jni: &blackboxmc_general::SharedJNIEnv<'mc>,value: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(value.into());
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"setWhitelist",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
jni.translate_error(res)?;
Ok(
()
)}
/// Gets whether the server whitelist is enforced.
/// If the whitelist is enforced, non-whitelisted players will be
/// disconnected when the server whitelist is reloaded.
	fn is_whitelist_enforced(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"isWhitelistEnforced",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Sets if the server whitelist is enforced.
/// If the whitelist is enforced, non-whitelisted players will be
/// disconnected when the server whitelist is reloaded.
	fn set_whitelist_enforced(jni: &blackboxmc_general::SharedJNIEnv<'mc>,value: bool) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Z)V");
let val_1 = jni::objects::JValueGen::Bool(value.into());
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"setWhitelistEnforced",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
jni.translate_error(res)?;
Ok(
()
)}
/// Gets a list of whitelisted players.
	fn whitelisted_players(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getWhitelistedPlayers",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
blackboxmc_java::util::JavaSet::from_raw(&jni,obj
)}
/// Reloads the whitelist from disk.
	fn reload_whitelist(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"reloadWhitelist",
sig.as_str(),vec![]);
jni.translate_error(res)?;
Ok(
()
)}
/// Broadcast a message to all players.
/// 
/// This is the same as calling {@link #broadcast(java.lang.String,
/// java.lang.String)} to {@link Server#BROADCAST_CHANNEL_USERS}
	fn broadcast_message(jni: &blackboxmc_general::SharedJNIEnv<'mc>,message: impl Into<String>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)I");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(message.into())?));
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"broadcastMessage",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the name of the update folder. The update folder is used to safely
/// update plugins at the right moment on a plugin load.
/// 
/// The update folder name is relative to the plugins folder.
	fn update_folder(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getUpdateFolder",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Gets the value of the connection throttle setting.
	fn connection_throttle(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getConnectionThrottle",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.j()?
)}
#[deprecated]
/// Gets default ticks per animal spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn monsters every tick. <li>A value of 400 will mean the server will attempt to spawn monsters every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, animal spawning will be disabled. We recommend using spawn-animals to control this instead.Minecraft default: 400.
	fn ticks_per_animal_spawns(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getTicksPerAnimalSpawns",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the default ticks per monster spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn monsters every tick. <li>A value of 400 will mean the server will attempt to spawn monsters every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, monsters spawning will be disabled. We recommend using spawn-monsters to control this instead.Minecraft default: 1.
	fn ticks_per_monster_spawns(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getTicksPerMonsterSpawns",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the default ticks per water mob spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water mobs every tick. <li>A value of 400 will mean the server will attempt to spawn water mobs every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, water mobs spawning will be disabled.Minecraft default: 1.
	fn ticks_per_water_spawns(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getTicksPerWaterSpawns",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the default ticks per ambient mob spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn ambient mobs every tick. <li>A value of 400 will mean the server will attempt to spawn ambient mobs every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, ambient mobs spawning will be disabled.Minecraft default: 1.
	fn ticks_per_ambient_spawns(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getTicksPerAmbientSpawns",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the default ticks per water ambient mob spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water ambient mobs every tick. <li>A value of 400 will mean the server will attempt to spawn water ambient mobs every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, ambient mobs spawning will be disabled.Minecraft default: 1.
	fn ticks_per_water_ambient_spawns(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getTicksPerWaterAmbientSpawns",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets the default ticks per water underground creature spawns value.<b>Example Usage:</b> <ul> <li>A value of 1 will mean the server will attempt to spawn water underground creature every tick. <li>A value of 400 will mean the server will attempt to spawn water underground creature every 400th tick. <li>A value below 0 will be reset back to Minecraft's default. </ul><b>Note:</b> If set to 0, water underground creature spawning will be disabled.Minecraft default: 1.
	fn ticks_per_water_underground_creature_spawns(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getTicksPerWaterUndergroundCreatureSpawns",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the default ticks per {@link SpawnCategory} spawns value.
/// 
/// <b>Example Usage:</b>
/// <ul>
/// <li>A value of 1 will mean the server will attempt to spawn {@link SpawnCategory} mobs
/// every tick.
/// <li>A value of 400 will mean the server will attempt to spawn {@link SpawnCategory} mobs
/// every 400th tick.
/// <li>A value below 0 will be reset back to Minecraft's default.
/// </ul>
/// 
/// <b>Note:</b> If set to 0, {@link SpawnCategory} mobs spawning will be disabled.
/// 
/// Minecraft default: 1.
/// 
/// <b>Note: </b> the {@link SpawnCategory#MISC} are not consider.
	fn get_ticks_per_spawns(jni: &blackboxmc_general::SharedJNIEnv<'mc>,spawn_category: impl Into<crate::entity::SpawnCategory<'mc>>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)I");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(spawn_category.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getTicksPerSpawns",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the player with the given UUID.
	fn get_player(jni: &blackboxmc_general::SharedJNIEnv<'mc>,id: impl Into<blackboxmc_java::util::JavaUUID<'mc>>) 
-> Result<Option<crate::entity::Player<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/util/UUID;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(id.into().jni_object().clone())});
args.push(val_1);
sig += ")Lorg/bukkit/entity/Player;";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getPlayer",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::entity::Player::from_raw(&jni,obj
)?
)
)}
/// Gets the player with the exact given name, case insensitive.
	fn get_player_exact(jni: &blackboxmc_general::SharedJNIEnv<'mc>,name: impl Into<String>) 
-> Result<Option<crate::entity::Player<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/entity/Player;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getPlayerExact",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::entity::Player::from_raw(&jni,obj
)?
)
)}
/// Attempts to match any players with the given name, and returns a list
/// of all possibly matches.
/// 
/// This list is not sorted in any particular order. If an exact match is
/// found, the returned list will only contain a single result.
	fn match_player(jni: &blackboxmc_general::SharedJNIEnv<'mc>,name: impl Into<String>) 
-> Result<Vec<crate::entity::Player<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Ljava/util/List;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"matchPlayer",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&jni, res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Player::from_raw(&jni,obj,)?);
};
Ok(
new_vec
)}
/// Gets the plugin manager for interfacing with plugins.
	fn plugin_manager(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::plugin::PluginManager<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/plugin/PluginManager;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getPluginManager",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::plugin::PluginManager::from_raw(&jni,obj
)}
/// Gets the scheduler for managing scheduled events.
	fn scheduler(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::scheduler::BukkitScheduler<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/scheduler/BukkitScheduler;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getScheduler",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::scheduler::BukkitScheduler::from_raw(&jni,obj
)}
/// Gets a services manager.
	fn services_manager(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::plugin::ServicesManager<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/plugin/ServicesManager;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getServicesManager",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::plugin::ServicesManager::from_raw(&jni,obj
)}
/// Gets a list of all worlds on this server.
	fn worlds(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<Vec<crate::World<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getWorlds",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&jni, res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::World::from_raw(&jni,obj,)?);
};
Ok(
new_vec
)}
/// Creates or loads a world with the given name using the specified
/// options.
/// 
/// If the world is already loaded, it will just return the equivalent of
/// getWorld(creator.name()).
	fn create_world(jni: &blackboxmc_general::SharedJNIEnv<'mc>,creator: impl Into<crate::WorldCreator<'mc>>) 
-> Result<Option<crate::World<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/WorldCreator;)Lorg/bukkit/World;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(creator.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"createWorld",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::World::from_raw(&jni,obj
)?
)
)}
/// Unloads the given world.
	fn unload_world(jni: &blackboxmc_general::SharedJNIEnv<'mc>,world: impl Into<crate::World<'mc>>,save: bool) 
-> Result<bool, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/World;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
args.push(val_1);
sig += "Z";
let val_2 = jni::objects::JValueGen::Bool(save.into());
args.push(val_2);
sig += ")Z";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"unloadWorld",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the world from the given Unique ID.
	fn get_world(jni: &blackboxmc_general::SharedJNIEnv<'mc>,uid: impl Into<blackboxmc_java::util::JavaUUID<'mc>>) 
-> Result<Option<crate::World<'mc>>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/util/UUID;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(uid.into().jni_object().clone())});
args.push(val_1);
sig += ")Lorg/bukkit/World;";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getWorld",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::World::from_raw(&jni,obj
)?
)
)}
/// Create a new virtual {@link WorldBorder}.
	fn create_world_border(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::WorldBorder<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/WorldBorder;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"createWorldBorder",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::WorldBorder::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the map from the given item ID.
	fn get_map(jni: &blackboxmc_general::SharedJNIEnv<'mc>,id: i32) 
-> Result<Option<crate::map::MapView<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(I)Lorg/bukkit/map/MapView;");
let val_1 = jni::objects::JValueGen::Int(id);
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getMap",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::map::MapView::from_raw(&jni,obj
)?
)
)}
/// Create a new map with an automatically assigned ID.
	fn create_map(jni: &blackboxmc_general::SharedJNIEnv<'mc>,world: impl Into<crate::World<'mc>>) 
-> Result<crate::map::MapView<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/World;)Lorg/bukkit/map/MapView;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"createMap",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::map::MapView::from_raw(&jni,obj
)}
/// Create a new explorer map targeting the closest nearby structure of a
/// given {@link StructureType}.
/// 
/// This method uses implementation default values for radius and
/// findUnexplored (usually 100, true).
	fn create_explorer_map(jni: &blackboxmc_general::SharedJNIEnv<'mc>,world: impl Into<crate::World<'mc>>,location: impl Into<crate::Location<'mc>>,structure_type: impl Into<crate::StructureType<'mc>>,radius: std::option::Option<i32>,find_unexplored: std::option::Option<bool>) 
-> Result<crate::inventory::ItemStack<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/World;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/Location;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(location.into().jni_object().clone())});
args.push(val_2);
sig += "Lorg/bukkit/StructureType;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(structure_type.into().jni_object().clone())});
args.push(val_3);
if let Some(a) = radius {
sig += "I";
let val_4 = jni::objects::JValueGen::Int(a);
args.push(val_4);
}
if let Some(a) = find_unexplored {
sig += "Z";
let val_5 = jni::objects::JValueGen::Bool(a.into());
args.push(val_5);
}
sig += ")Lorg/bukkit/inventory/ItemStack;";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"createExplorerMap",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::inventory::ItemStack::from_raw(&jni,obj
)}
/// Reloads the server, refreshing settings and plugin information.
	fn reload(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"reload",
sig.as_str(),vec![]);
jni.translate_error(res)?;
Ok(
()
)}
/// Reload only the Minecraft data for the server. This includes custom
/// advancements and loot tables.
	fn reload_data(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"reloadData",
sig.as_str(),vec![]);
jni.translate_error(res)?;
Ok(
()
)}
/// Returns the primary logger associated with this server instance.
	fn logger(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<blackboxmc_java::util::logging::JavaLogger<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/logging/Logger;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getLogger",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
blackboxmc_java::util::logging::JavaLogger::from_raw(&jni,obj
)}
/// Gets a {@link PluginCommand} with the given name or alias.
	fn get_plugin_command(jni: &blackboxmc_general::SharedJNIEnv<'mc>,name: impl Into<String>) 
-> Result<Option<crate::command::PluginCommand<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/command/PluginCommand;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getPluginCommand",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::command::PluginCommand::from_raw(&jni,obj
)?
)
)}
/// Writes loaded players to disk.
	fn save_players(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"savePlayers",
sig.as_str(),vec![]);
jni.translate_error(res)?;
Ok(
()
)}
/// Dispatches a command on this server, and executes it if found.
	fn dispatch_command(jni: &blackboxmc_general::SharedJNIEnv<'mc>,sender: impl Into<crate::command::CommandSender<'mc>>,command_line: impl Into<String>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/command/CommandSender;Ljava/lang/String;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(sender.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(command_line.into())?));
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"dispatchCommand",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Adds a recipe to the crafting manager.
	fn add_recipe(jni: &blackboxmc_general::SharedJNIEnv<'mc>,recipe: impl Into<crate::inventory::Recipe<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/inventory/Recipe;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(recipe.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"addRecipe",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Get a list of all recipes for a given item. The stack size is ignored
/// in comparisons. If the durability is -1, it will match any data value.
	fn get_recipes_for(jni: &blackboxmc_general::SharedJNIEnv<'mc>,result: impl Into<crate::inventory::ItemStack<'mc>>) 
-> Result<Vec<crate::inventory::Recipe<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/inventory/ItemStack;)Ljava/util/List;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(result.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getRecipesFor",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&jni, res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::inventory::Recipe::from_raw(&jni,obj,)?);
};
Ok(
new_vec
)}
/// Get the {@link Recipe} for the given key.
	fn get_recipe(jni: &blackboxmc_general::SharedJNIEnv<'mc>,recipe_key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<crate::inventory::Recipe<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/inventory/Recipe;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(recipe_key.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getRecipe",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::inventory::Recipe::from_raw(&jni,obj
)?
)
)}
/// Get the {@link Recipe} for the list of ItemStacks provided.
/// The list is formatted as a crafting matrix where the index follow
/// the pattern below:
/// <pre>
/// [ 0 1 2 ]
/// [ 3 4 5 ]
/// [ 6 7 8 ]
/// </pre>
/// NOTE: This method will not modify the provided ItemStack array, for that, use
/// {@link #craftItem(ItemStack[], World, Player)}.
	fn get_crafting_recipe(jni: &blackboxmc_general::SharedJNIEnv<'mc>,crafting_matrix: impl Into<crate::inventory::ItemStack<'mc>>,world: impl Into<crate::World<'mc>>) 
-> Result<Option<crate::inventory::Recipe<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/World;)Lorg/bukkit/inventory/Recipe;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(crafting_matrix.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getCraftingRecipe",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::inventory::Recipe::from_raw(&jni,obj
)?
)
)}
/// Get the crafted item using the list of {@link ItemStack} provided.
/// The list is formatted as a crafting matrix where the index follow
/// the pattern below:
/// <pre>
/// [ 0 1 2 ]
/// [ 3 4 5 ]
/// [ 6 7 8 ]
/// </pre>
/// The {@link World} and {@link Player} arguments are required to fulfill the Bukkit Crafting
/// events.
/// Calls {@link org.bukkit.event.inventory.PrepareItemCraftEvent} to imitate the {@link Player}
/// initiating the crafting event.
	fn craft_item_result(jni: &blackboxmc_general::SharedJNIEnv<'mc>,crafting_matrix: impl Into<crate::inventory::ItemStack<'mc>>,world: impl Into<crate::World<'mc>>,player: std::option::Option<impl Into<crate::entity::Player<'mc>>>) 
-> Result<crate::inventory::ItemCraftResult<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/inventory/ItemStack;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(crafting_matrix.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/World;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
args.push(val_2);
if let Some(a) = player {
sig += "Lorg/bukkit/entity/Player;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_3);
}
sig += ")Lorg/bukkit/inventory/ItemCraftResult;";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"craftItemResult",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::inventory::ItemCraftResult::from_raw(&jni,obj
)}
/// Get the crafted item using the list of {@link ItemStack} provided.
/// The list is formatted as a crafting matrix where the index follow
/// the pattern below:
/// <pre>
/// [ 0 1 2 ]
/// [ 3 4 5 ]
/// [ 6 7 8 ]
/// </pre>
/// The {@link World} and {@link Player} arguments are required to fulfill the Bukkit Crafting
/// events.
/// Calls {@link org.bukkit.event.inventory.PrepareItemCraftEvent} to imitate the {@link Player}
/// initiating the crafting event.
	fn craft_item(jni: &blackboxmc_general::SharedJNIEnv<'mc>,crafting_matrix: impl Into<crate::inventory::ItemStack<'mc>>,world: impl Into<crate::World<'mc>>,player: std::option::Option<impl Into<crate::entity::Player<'mc>>>) 
-> Result<crate::inventory::ItemStack<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/inventory/ItemStack;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(crafting_matrix.into().jni_object().clone())});
args.push(val_1);
sig += "Lorg/bukkit/World;";
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
args.push(val_2);
if let Some(a) = player {
sig += "Lorg/bukkit/entity/Player;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_3);
}
sig += ")Lorg/bukkit/inventory/ItemStack;";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"craftItem",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::inventory::ItemStack::from_raw(&jni,obj
)}
/// Get an iterator through the list of crafting recipes.
	fn recipe_iterator(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<blackboxmc_java::util::JavaIterator<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Iterator;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"recipeIterator",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
blackboxmc_java::util::JavaIterator::from_raw(&jni,obj
)}
/// Clears the list of crafting recipes.
	fn clear_recipes(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"clearRecipes",
sig.as_str(),vec![]);
jni.translate_error(res)?;
Ok(
()
)}
/// Resets the list of crafting recipes to the default.
	fn reset_recipes(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"resetRecipes",
sig.as_str(),vec![]);
jni.translate_error(res)?;
Ok(
()
)}
/// Remove a recipe from the server.
/// <b>Note that removing a recipe may cause permanent loss of data
/// associated with that recipe (eg whether it has been discovered by
/// players).</b>
	fn remove_recipe(jni: &blackboxmc_general::SharedJNIEnv<'mc>,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"removeRecipe",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets a list of command aliases defined in the server properties.
	fn command_aliases(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<blackboxmc_java::util::JavaMap<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Map;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getCommandAliases",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
blackboxmc_java::util::JavaMap::from_raw(&jni,obj
)}
/// Gets the radius, in blocks, around each worlds spawn point to protect.
	fn spawn_radius(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getSpawnRadius",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Sets the radius, in blocks, around each worlds spawn point to protect.
	fn set_spawn_radius(jni: &blackboxmc_general::SharedJNIEnv<'mc>,value: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(value);
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"setSpawnRadius",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
jni.translate_error(res)?;
Ok(
()
)}
#[deprecated]
/// Gets whether the server should send a preview of the player's chat message to the client when the player sends a message
	fn should_send_chat_previews(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"shouldSendChatPreviews",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the server only allow players with Mojang-signed public key
/// to join
	fn is_enforcing_secure_profiles(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"isEnforcingSecureProfiles",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the Server hide online players in server status.
	fn hide_online_players(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getHideOnlinePlayers",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the Server is in online mode or not.
	fn online_mode(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getOnlineMode",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether this server allows flying or not.
	fn allow_flight(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getAllowFlight",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets whether the server is in hardcore mode or not.
	fn is_hardcore(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"isHardcore",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Shutdowns the server, stopping everything.
	fn shutdown(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("()V");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"shutdown",
sig.as_str(),vec![]);
jni.translate_error(res)?;
Ok(
()
)}
/// Broadcasts the specified message to every user with the given
/// permission name.
	fn broadcast(jni: &blackboxmc_general::SharedJNIEnv<'mc>,message: impl Into<String>,permission: impl Into<String>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;Ljava/lang/String;)I");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(message.into())?));
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(permission.into())?));
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"broadcast",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the player by the given UUID, regardless if they are offline or
/// online.
/// 
/// This will return an object even if the player does not exist. To this
/// method, all players will exist.
	fn get_offline_player(jni: &blackboxmc_general::SharedJNIEnv<'mc>,id: impl Into<blackboxmc_java::util::JavaUUID<'mc>>) 
-> Result<crate::OfflinePlayer<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/util/UUID;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(id.into().jni_object().clone())});
args.push(val_1);
sig += ")Lorg/bukkit/OfflinePlayer;";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getOfflinePlayer",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::OfflinePlayer::from_raw(&jni,obj
)}
/// Creates a new {@link PlayerProfile}.
	fn create_player_profile(jni: &blackboxmc_general::SharedJNIEnv<'mc>,unique_id: impl Into<blackboxmc_java::util::JavaUUID<'mc>>,name: std::option::Option<impl Into<String>>) 
-> Result<crate::profile::PlayerProfile<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/util/UUID;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(unique_id.into().jni_object().clone())});
args.push(val_1);
if let Some(a) = name {
sig += "Ljava/lang/String;";
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(a.into())?));
args.push(val_2);
}
sig += ")Lorg/bukkit/profile/PlayerProfile;";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"createPlayerProfile",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::profile::PlayerProfile::from_raw(&jni,obj
)}
/// Gets a set containing all current IPs that are banned.
	fn ipbans(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getIPBans",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
blackboxmc_java::util::JavaSet::from_raw(&jni,obj
)}
/// Bans the specified address from the server.
	fn ban_ip(jni: &blackboxmc_general::SharedJNIEnv<'mc>,address: jni::objects::JObject<'mc>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/net/InetAddress;";
let val_1 = jni::objects::JValueGen::Object(address);
args.push(val_1);
sig += ")V";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"banIP",
sig.as_str(),args);
jni.translate_error(res)?;
Ok(
()
)}
/// Unbans the specified address from the server.
	fn unban_ip(jni: &blackboxmc_general::SharedJNIEnv<'mc>,address: jni::objects::JObject<'mc>) 
-> Result<(), Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/net/InetAddress;";
let val_1 = jni::objects::JValueGen::Object(address);
args.push(val_1);
sig += ")V";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"unbanIP",
sig.as_str(),args);
jni.translate_error(res)?;
Ok(
()
)}
/// Gets a set containing all banned players.
	fn banned_players(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getBannedPlayers",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
blackboxmc_java::util::JavaSet::from_raw(&jni,obj
)}
/// Gets a ban list for the supplied type.
	fn get_ban_list(jni: &blackboxmc_general::SharedJNIEnv<'mc>,val_type: impl Into<crate::BanListType<'mc>>) 
-> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/BanList/Type;)LT;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(val_type.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getBanList",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
Ok(
res.l()?
)}
/// Gets a set containing all player operators.
	fn operators(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getOperators",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
blackboxmc_java::util::JavaSet::from_raw(&jni,obj
)}
/// Gets the default {@link GameMode} for new players.
	fn default_game_mode(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::GameMode<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/GameMode;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getDefaultGameMode",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::GameMode::from_raw(&jni,obj
)}
/// Sets the default {@link GameMode} for new players.
	fn set_default_game_mode(jni: &blackboxmc_general::SharedJNIEnv<'mc>,mode: impl Into<crate::GameMode<'mc>>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/GameMode;)V");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(mode.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"setDefaultGameMode",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
jni.translate_error(res)?;
Ok(
()
)}
/// Gets a {@link ConsoleCommandSender} that may be used as an input source
/// for this server.
	fn console_sender(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::command::ConsoleCommandSender<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/command/ConsoleCommandSender;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getConsoleSender",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::command::ConsoleCommandSender::from_raw(&jni,obj
)}
/// Gets every player that has ever played on this server.
	fn offline_players(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::OfflinePlayer<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/OfflinePlayer;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getOfflinePlayers",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::OfflinePlayer::from_raw(&jni,obj
)}
/// Gets the {@link Messenger} responsible for this server.
	fn messenger(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::plugin::messaging::Messenger<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/plugin/messaging/Messenger;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getMessenger",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::plugin::messaging::Messenger::from_raw(&jni,obj
)}
/// Gets the {@link HelpMap} providing help topics for this server.
	fn help_map(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::help::HelpMap<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/help/HelpMap;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getHelpMap",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::help::HelpMap::from_raw(&jni,obj
)}
/// Creates an empty inventory of type {@link InventoryType#CHEST} with the
/// specified size and title.
	fn create_inventory(jni: &blackboxmc_general::SharedJNIEnv<'mc>,owner: impl Into<crate::inventory::InventoryHolder<'mc>>,size: i32,title: std::option::Option<impl Into<String>>) 
-> Result<crate::inventory::Inventory<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/inventory/InventoryHolder;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(owner.into().jni_object().clone())});
args.push(val_1);
sig += "I";
let val_2 = jni::objects::JValueGen::Int(size);
args.push(val_2);
if let Some(a) = title {
sig += "Ljava/lang/String;";
let val_3 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(a.into())?));
args.push(val_3);
}
sig += ")Lorg/bukkit/inventory/Inventory;";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"createInventory",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::inventory::Inventory::from_raw(&jni,obj
)}
/// Creates an empty merchant.
	fn create_merchant(jni: &blackboxmc_general::SharedJNIEnv<'mc>,title: impl Into<String>) 
-> Result<crate::inventory::Merchant<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/inventory/Merchant;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(title.into())?));
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"createMerchant",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::inventory::Merchant::from_raw(&jni,obj
)}
/// Gets the amount of consecutive neighbor updates before skipping
/// additional ones.
	fn max_chained_neighbor_updates(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getMaxChainedNeighborUpdates",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets user-specified limit for number of monsters that can spawn in a chunk.
	fn monster_spawn_limit(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getMonsterSpawnLimit",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets user-specified limit for number of animals that can spawn in a chunk.
	fn animal_spawn_limit(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getAnimalSpawnLimit",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets user-specified limit for number of water animals that can spawn in a chunk.
	fn water_animal_spawn_limit(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getWaterAnimalSpawnLimit",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets user-specified limit for number of water ambient mobs that can spawn in a chunk.
	fn water_ambient_spawn_limit(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getWaterAmbientSpawnLimit",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Get user-specified limit for number of water creature underground that can spawn in a chunk.
	fn water_underground_creature_spawn_limit(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getWaterUndergroundCreatureSpawnLimit",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Gets user-specified limit for number of ambient mobs that can spawn in a chunk.
	fn ambient_spawn_limit(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getAmbientSpawnLimit",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Gets user-specified limit for number of {@link SpawnCategory} mobs that can spawn in
/// a chunk.
/// <b>Note: the {@link SpawnCategory#MISC} are not consider.</b>
	fn get_spawn_limit(jni: &blackboxmc_general::SharedJNIEnv<'mc>,spawn_category: impl Into<crate::entity::SpawnCategory<'mc>>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)I");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(spawn_category.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getSpawnLimit",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Checks the current thread against the expected primary thread for the
/// server.
/// 
/// <b>Note:</b> this method should not be used to indicate the current
/// synchronized state of the runtime. A current thread matching the main
/// thread indicates that it is synchronized, but a mismatch <b>does not
/// preclude</b> the same assumption.
	fn is_primary_thread(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"isPrimaryThread",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the message that is displayed on the server list.
	fn motd(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getMotd",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}
/// Set the message that is displayed on the server list.
	fn set_motd(jni: &blackboxmc_general::SharedJNIEnv<'mc>,motd: impl Into<String>) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)V");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(motd.into())?));
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"setMotd",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
jni.translate_error(res)?;
Ok(
()
)}
/// Gets the default message that is displayed when the server is stopped.
	fn shutdown_message(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<Option<String>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getShutdownMessage",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
jni.get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)
)}
/// Gets the current warning state for the server.
	fn warning_state(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::WarningWarningState<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Warning/WarningState;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getWarningState",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::WarningWarningState::from_raw(&jni,obj
)}
/// Gets the instance of the item factory (for {@link ItemMeta}).
	fn item_factory(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::inventory::ItemFactory<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/inventory/ItemFactory;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getItemFactory",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::inventory::ItemFactory::from_raw(&jni,obj
)}
/// Gets the instance of the scoreboard manager.
/// 
/// This will only exist after the first world has loaded.
	fn scoreboard_manager(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<Option<crate::scoreboard::ScoreboardManager<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/scoreboard/ScoreboardManager;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getScoreboardManager",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::scoreboard::ScoreboardManager::from_raw(&jni,obj
)?
)
)}
/// Get (or create) a new {@link Criteria} by its name.
	fn get_scoreboard_criteria(jni: &blackboxmc_general::SharedJNIEnv<'mc>,name: impl Into<String>) 
-> Result<crate::scoreboard::Criteria<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/scoreboard/Criteria;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(name.into())?));
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getScoreboardCriteria",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::scoreboard::Criteria::from_raw(&jni,obj
)}
/// Gets an instance of the server's default server-icon.
	fn server_icon(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<Option<crate::util::CachedServerIcon<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/util/CachedServerIcon;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getServerIcon",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::util::CachedServerIcon::from_raw(&jni,obj
)?
)
)}
/// Creates a cached server-icon for the specific image.
/// 
/// Size and type are implementation defined. An incompatible file is
/// guaranteed to throw an implementation-defined {@link Exception}.
	fn load_server_icon(jni: &blackboxmc_general::SharedJNIEnv<'mc>,image: jni::objects::JObject<'mc>) 
-> Result<crate::util::CachedServerIcon<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Ljava/awt/image/BufferedImage;";
let val_1 = jni::objects::JValueGen::Object(image);
args.push(val_1);
sig += ")Lorg/bukkit/util/CachedServerIcon;";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"loadServerIcon",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::util::CachedServerIcon::from_raw(&jni,obj
)}
/// Set the idle kick timeout. Any players idle for the specified amount of
/// time will be automatically kicked.
/// 
/// A value of 0 will disable the idle kick timeout.
	fn set_idle_timeout(jni: &blackboxmc_general::SharedJNIEnv<'mc>,threshold: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(threshold);
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"setIdleTimeout",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
jni.translate_error(res)?;
Ok(
()
)}
/// Gets the idle kick timeout.
	fn idle_timeout(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getIdleTimeout",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
Ok(
res.i()?
)}
/// Create a ChunkData for use in a generator.
/// See {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}
	fn create_chunk_data(jni: &blackboxmc_general::SharedJNIEnv<'mc>,world: impl Into<crate::World<'mc>>) 
-> Result<crate::generator::ChunkGeneratorChunkData<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/World;)Lorg/bukkit/generator/ChunkGenerator/ChunkData;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(world.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"createChunkData",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::generator::ChunkGeneratorChunkData::from_raw(&jni,obj
)}
/// Creates a boss bar instance to display to players. The progress defaults
/// to 1.0.
/// 
/// This instance is added to the persistent storage of the server and will
/// be editable by commands and restored after restart.
	fn create_boss_bar(jni: &blackboxmc_general::SharedJNIEnv<'mc>,key: impl Into<crate::NamespacedKey<'mc>>,title: impl Into<String>,color: impl Into<crate::boss::BarColor<'mc>>,style: impl Into<crate::boss::BarStyle<'mc>>,flags: std::option::Option<impl Into<crate::boss::BarFlag<'mc>>>) 
-> Result<crate::boss::KeyedBossBar<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/NamespacedKey;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
args.push(val_1);
sig += "Ljava/lang/String;";
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(title.into())?));
args.push(val_2);
sig += "Lorg/bukkit/boss/BarColor;";
let val_3 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(color.into().jni_object().clone())});
args.push(val_3);
sig += "Lorg/bukkit/boss/BarStyle;";
let val_4 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(style.into().jni_object().clone())});
args.push(val_4);
if let Some(a) = flags {
sig += "Lorg/bukkit/boss/BarFlag;";
let val_5 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(a.into().jni_object().clone())});
args.push(val_5);
}
sig += ")Lorg/bukkit/boss/KeyedBossBar;";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"createBossBar",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::boss::KeyedBossBar::from_raw(&jni,obj
)}
/// Gets an unmodifiable iterator through all persistent bossbars.
/// <ul>
/// <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
/// <li>
/// <b>not</b> created using
/// {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
/// </li>
/// </ul>
/// e.g. bossbars created using the bossbar command
	fn boss_bars(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<blackboxmc_java::util::JavaIterator<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Iterator;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getBossBars",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
blackboxmc_java::util::JavaIterator::from_raw(&jni,obj
)}
/// Gets the {@link KeyedBossBar} specified by this key.
/// <ul>
/// <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
/// <li>
/// <b>not</b> created using
/// {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
/// </li>
/// </ul>
/// e.g. bossbars created using the bossbar command
	fn get_boss_bar(jni: &blackboxmc_general::SharedJNIEnv<'mc>,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<crate::boss::KeyedBossBar<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/boss/KeyedBossBar;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getBossBar",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::boss::KeyedBossBar::from_raw(&jni,obj
)?
)
)}
/// Removes a {@link KeyedBossBar} specified by this key.
/// <ul>
/// <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
/// <li>
/// <b>not</b> created using
/// {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
/// </li>
/// </ul>
/// e.g. bossbars created using the bossbar command
	fn remove_boss_bar(jni: &blackboxmc_general::SharedJNIEnv<'mc>,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Z");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"removeBossBar",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
Ok(
res.z()?
)}
/// Gets an entity on the server by its UUID
	fn get_entity(jni: &blackboxmc_general::SharedJNIEnv<'mc>,uuid: impl Into<blackboxmc_java::util::JavaUUID<'mc>>) 
-> Result<Option<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/util/UUID;)Lorg/bukkit/entity/Entity;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(uuid.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getEntity",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::entity::Entity::from_raw(&jni,obj
)?
)
)}
/// Get the advancement specified by this key.
	fn get_advancement(jni: &blackboxmc_general::SharedJNIEnv<'mc>,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<crate::advancement::Advancement<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/advancement/Advancement;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getAdvancement",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::advancement::Advancement::from_raw(&jni,obj
)?
)
)}
/// Get an iterator through all advancements. Advancements cannot be removed
/// from this iterator,
	fn advancement_iterator(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<blackboxmc_java::util::JavaIterator<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Iterator;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"advancementIterator",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
blackboxmc_java::util::JavaIterator::from_raw(&jni,obj
)}
/// Creates a new {@link BlockData} instance for the specified Material, with
/// all properties initialized to unspecified defaults, except for those
/// provided in data.
	fn create_block_data(jni: &blackboxmc_general::SharedJNIEnv<'mc>,material: impl Into<crate::Material<'mc>>,data: std::option::Option<impl Into<String>>) 
-> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>>

{let mut args = Vec::new();
let mut sig = String::from("(");
sig += "Lorg/bukkit/Material;";
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(material.into().jni_object().clone())});
args.push(val_1);
if let Some(a) = data {
sig += "Ljava/lang/String;";
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(a.into())?));
args.push(val_2);
}
sig += ")Lorg/bukkit/block/data/BlockData;";
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"createBlockData",
sig.as_str(),args);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::block::data::BlockData::from_raw(&jni,obj
)}
/// Gets a tag which has already been defined within the server. Plugins are
/// suggested to use the concrete tags in {@link Tag} rather than this method
/// which makes no guarantees about which tags are available, and may also be
/// less performant due to lack of caching.
/// 
/// Tags will be searched for in an implementation specific manner, but a
/// path consisting of namespace/tags/registry/key is expected.
/// 
/// Server implementations are allowed to handle only the registries
/// indicated in {@link Tag}.
	fn get_tag(jni: &blackboxmc_general::SharedJNIEnv<'mc>,registry: impl Into<String>,tag: impl Into<crate::NamespacedKey<'mc>>,clazz: jni::objects::JClass<'mc>) 
-> Result<Option<crate::Tag<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/String;Lorg/bukkit/NamespacedKey;Ljava/lang/Class;)Lorg/bukkit/Tag;");
let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(registry.into())?));
let val_2 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(tag.into().jni_object().clone())});
let val_3 = jni::objects::JValueGen::Object(clazz.into());
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getTag",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2),jni::objects::JValueGen::from(val_3)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::Tag::from_raw(&jni,obj
)?
)
)}
/// Gets the specified {@link LootTable}.
	fn get_loot_table(jni: &blackboxmc_general::SharedJNIEnv<'mc>,key: impl Into<crate::NamespacedKey<'mc>>) 
-> Result<Option<crate::loot::LootTable<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/loot/LootTable;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(key.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getLootTable",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::loot::LootTable::from_raw(&jni,obj
)?
)
)}
/// Selects entities using the given Vanilla selector.
/// 
/// No guarantees are made about the selector format, other than they match
/// the Vanilla format for the active Minecraft version.
/// 
/// Usually a selector will start with '@', unless selecting a Player in
/// which case it may simply be the Player's name or UUID.
/// 
/// Note that in Vanilla, elevated permissions are usually required to use
/// '@' selectors, but this method should not check such permissions from the
/// sender.
	fn select_entities(jni: &blackboxmc_general::SharedJNIEnv<'mc>,sender: impl Into<crate::command::CommandSender<'mc>>,selector: impl Into<String>) 
-> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Lorg/bukkit/command/CommandSender;Ljava/lang/String;)Ljava/util/List;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(sender.into().jni_object().clone())});
let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(jni.new_string(selector.into())?));
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"selectEntities",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1),jni::objects::JValueGen::from(val_2)]);
let res = 
jni.translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&jni, res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Entity::from_raw(&jni,obj,)?);
};
Ok(
new_vec
)}
/// Gets the structure manager for loading and saving structures.
	fn structure_manager(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::structure::StructureManager<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/structure/StructureManager;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getStructureManager",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::structure::StructureManager::from_raw(&jni,obj
)}
/// Returns the registry for the given class.
/// 
/// If no registry is present for the given class null will be returned.
/// 
/// Depending on the implementation not every registry present in
/// {@link Registry} will be returned by this method.
	fn get_registry(jni: &blackboxmc_general::SharedJNIEnv<'mc>,t_class: jni::objects::JClass<'mc>) 
-> Result<Option<crate::Registry<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Class;)Lorg/bukkit/Registry;");
let val_1 = jni::objects::JValueGen::Object(t_class.into());
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getRegistry",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::Registry::from_raw(&jni,obj
)?
)
)}
#[deprecated]

	fn get_unsafe(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::UnsafeValues<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/UnsafeValues;");
let cls = jni.find_class("org/bukkit/Bukkit"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getUnsafe",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::UnsafeValues::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum Fluid<'mc> {
	Water {inner: FluidStruct<'mc>},
	FlowingWater {inner: FluidStruct<'mc>},
	Lava {inner: FluidStruct<'mc>},
	FlowingLava {inner: FluidStruct<'mc>},
}
impl<'mc> std::fmt::Display for Fluid<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           Fluid::Water { .. } => f.write_str("WATER"),
           Fluid::FlowingWater { .. } => f.write_str("FLOWING_WATER"),
           Fluid::Lava { .. } => f.write_str("LAVA"),
           Fluid::FlowingLava { .. } => f.write_str("FLOWING_LAVA"),
       }
   }
}

        impl<'mc> FluidTrait<'mc> for Fluid<'mc> {}
        
        pub trait FluidTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<Fluid<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Fluid");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Fluid;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"WATER" => Ok(Fluid::Water { inner: FluidStruct::from_raw(env,obj)?}),
"FLOWING_WATER" => Ok(Fluid::FlowingWater { inner: FluidStruct::from_raw(env,obj)?}),
"LAVA" => Ok(Fluid::Lava { inner: FluidStruct::from_raw(env,obj)?}),
"FLOWING_LAVA" => Ok(Fluid::FlowingLava { inner: FluidStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct FluidStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Fluid<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Water { inner } => inner.0.clone(),
Self::FlowingWater { inner } => inner.0.clone(),
Self::Lava { inner } => inner.0.clone(),
Self::FlowingLava { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Water { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FlowingWater { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Lava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::FlowingLava { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for Fluid<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Fluid from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Fluid")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Fluid object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "WATER" => Ok(Fluid::Water { inner: FluidStruct::from_raw(env,obj)?}),"FLOWING_WATER" => Ok(Fluid::FlowingWater { inner: FluidStruct::from_raw(env,obj)?}),"LAVA" => Ok(Fluid::Lava { inner: FluidStruct::from_raw(env,obj)?}),"FLOWING_LAVA" => Ok(Fluid::FlowingLava { inner: FluidStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for FluidStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for FluidStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate FluidStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Fluid")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a FluidStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> FluidStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Fluid<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Fluid;");
let cls = jni.find_class("org/bukkit/Fluid"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Fluid::from_raw(&jni,obj
)}

	fn key(&self) 
-> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/NamespacedKey;");
let res = self.jni_ref().call_method(&self.jni_object(),"getKey",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::NamespacedKey::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum WeatherType<'mc> {
	Downfall {inner: WeatherTypeStruct<'mc>},
	Clear {inner: WeatherTypeStruct<'mc>},
}
impl<'mc> std::fmt::Display for WeatherType<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           WeatherType::Downfall { .. } => f.write_str("DOWNFALL"),
           WeatherType::Clear { .. } => f.write_str("CLEAR"),
       }
   }
}

        impl<'mc> WeatherTypeTrait<'mc> for WeatherType<'mc> {}
        
        pub trait WeatherTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<WeatherType<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/WeatherType");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/WeatherType;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"DOWNFALL" => Ok(WeatherType::Downfall { inner: WeatherTypeStruct::from_raw(env,obj)?}),
"CLEAR" => Ok(WeatherType::Clear { inner: WeatherTypeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct WeatherTypeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for WeatherType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Downfall { inner } => inner.0.clone(),
Self::Clear { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Downfall { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Clear { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for WeatherType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate WeatherType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/WeatherType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a WeatherType object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "DOWNFALL" => Ok(WeatherType::Downfall { inner: WeatherTypeStruct::from_raw(env,obj)?}),"CLEAR" => Ok(WeatherType::Clear { inner: WeatherTypeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for WeatherTypeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for WeatherTypeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate WeatherTypeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/WeatherType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a WeatherTypeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> WeatherTypeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::WeatherType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/WeatherType;");
let cls = jni.find_class("org/bukkit/WeatherType"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::WeatherType::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum WorldEnvironment<'mc> {
	Normal {inner: WorldEnvironmentStruct<'mc>},
	Nether {inner: WorldEnvironmentStruct<'mc>},
	TheEnd {inner: WorldEnvironmentStruct<'mc>},
	Custom {inner: WorldEnvironmentStruct<'mc>},
}
impl<'mc> std::fmt::Display for WorldEnvironment<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           WorldEnvironment::Normal { .. } => f.write_str("NORMAL"),
           WorldEnvironment::Nether { .. } => f.write_str("NETHER"),
           WorldEnvironment::TheEnd { .. } => f.write_str("THE_END"),
           WorldEnvironment::Custom { .. } => f.write_str("CUSTOM"),
       }
   }
}

        impl<'mc> WorldEnvironmentTrait<'mc> for WorldEnvironment<'mc> {}
        
        pub trait WorldEnvironmentTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<WorldEnvironment<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/World/Environment");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/World/Environment;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"NORMAL" => Ok(WorldEnvironment::Normal { inner: WorldEnvironmentStruct::from_raw(env,obj)?}),
"NETHER" => Ok(WorldEnvironment::Nether { inner: WorldEnvironmentStruct::from_raw(env,obj)?}),
"THE_END" => Ok(WorldEnvironment::TheEnd { inner: WorldEnvironmentStruct::from_raw(env,obj)?}),
"CUSTOM" => Ok(WorldEnvironment::Custom { inner: WorldEnvironmentStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct WorldEnvironmentStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for WorldEnvironment<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Normal { inner } => inner.0.clone(),
Self::Nether { inner } => inner.0.clone(),
Self::TheEnd { inner } => inner.0.clone(),
Self::Custom { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Normal { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Nether { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::TheEnd { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Custom { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for WorldEnvironment<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate WorldEnvironment from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/World/Environment")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a WorldEnvironment object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "NORMAL" => Ok(WorldEnvironment::Normal { inner: WorldEnvironmentStruct::from_raw(env,obj)?}),"NETHER" => Ok(WorldEnvironment::Nether { inner: WorldEnvironmentStruct::from_raw(env,obj)?}),"THE_END" => Ok(WorldEnvironment::TheEnd { inner: WorldEnvironmentStruct::from_raw(env,obj)?}),"CUSTOM" => Ok(WorldEnvironment::Custom { inner: WorldEnvironmentStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for WorldEnvironmentStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for WorldEnvironmentStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate WorldEnvironmentStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/World/Environment")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a WorldEnvironmentStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> WorldEnvironmentStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::WorldEnvironment<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/World/Environment;");
let cls = jni.find_class("org/bukkit/World/Environment"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::WorldEnvironment::from_raw(&jni,obj
)}
#[deprecated]
/// Gets the dimension ID of this environment
	fn id(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getId",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
#[deprecated]
/// Get an environment by ID
	fn get_environment(jni: &blackboxmc_general::SharedJNIEnv<'mc>,id: i32) 
-> Result<Option<crate::WorldEnvironment<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(I)Lorg/bukkit/World/Environment;");
let val_1 = jni::objects::JValueGen::Int(id);
let cls = jni.find_class("org/bukkit/World/Environment"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getEnvironment",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::WorldEnvironment::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct Warning<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Warning<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Warning<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Warning from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Warning")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Warning object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> WarningTrait<'mc> for Warning<'mc> {}
pub trait WarningTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
#[repr(C)]
pub struct FireworkEffect<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for FireworkEffect<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for FireworkEffect<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate FireworkEffect from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/FireworkEffect")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a FireworkEffect object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> FireworkEffectTrait<'mc> for FireworkEffect<'mc> {}
pub trait FireworkEffectTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Construct a firework effect.
	fn builder(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/FireworkEffect/Builder;");
let cls = jni.find_class("org/bukkit/FireworkEffect"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"builder",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::FireworkEffectBuilder::from_raw(&jni,obj
)}
/// Get whether the firework effect flickers.
	fn has_flicker(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"hasFlicker",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Get whether the firework effect has a trail.
	fn has_trail(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"hasTrail",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Get the primary colors of the firework effect.
	fn colors(&self) 
-> Result<Vec<crate::Color<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getColors",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::Color::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Get the fade colors of the firework effect.
	fn fade_colors(&self) 
-> Result<Vec<crate::Color<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getFadeColors",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::Color::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}
/// Get the type of the firework effect.
	fn get_type(&self) 
-> Result<crate::FireworkEffectType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/FireworkEffect/Type;");
let res = self.jni_ref().call_method(&self.jni_object(),"getType",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::FireworkEffectType::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

	fn deserialize(jni: &blackboxmc_general::SharedJNIEnv<'mc>,map: impl Into<blackboxmc_java::util::JavaMap<'mc>>) 
-> Result<crate::configuration::serialization::ConfigurationSerializable<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/util/Map;)Lorg/bukkit/configuration/serialization/ConfigurationSerializable;");
let val_1 = jni::objects::JValueGen::Object(unsafe { jni::objects::JObject::from_raw(map.into().jni_object().clone())});
let cls = jni.find_class("org/bukkit/FireworkEffect"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"deserialize",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::configuration::serialization::ConfigurationSerializable::from_raw(&jni,obj
)}

	fn serialize(&self) 
-> Result<blackboxmc_java::util::JavaMap<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Map;");
let res = self.jni_ref().call_method(&self.jni_object(),"serialize",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaMap::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}

#[doc(hidden)]
	fn internal_to_string(&self) 
-> Result<String, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/lang/String;");
let res = self.jni_ref().call_method(&self.jni_object(),"toString",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
self.jni_ref().get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?.to_string_lossy().to_string()
)}

	fn hash_code(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"hashCode",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}

	fn equals(&self,obj: jni::objects::JObject<'mc>) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("(Ljava/lang/Object;)Z");
let val_1 = jni::objects::JValueGen::Object(obj);
let res = self.jni_ref().call_method(&self.jni_object(),"equals",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}

        impl<'mc> std::string::ToString for FireworkEffect<'mc> {
            fn to_string(&self) -> String {
                match FireworkEffectTrait::internal_to_string(self) {
                    Ok(a) => a.clone(),
                    Err(err) => format!(
                        "Error calling FireworkEffect.toString: {}",
                        err
                    ),
                }
            }
        }
        
impl<'mc> Into<crate::configuration::serialization::ConfigurationSerializable<'mc>> for FireworkEffect<'mc>{

fn into(self) -> crate::configuration::serialization::ConfigurationSerializable<'mc> {

crate::configuration::serialization::ConfigurationSerializable::from_raw(&self.jni_ref(), self.jni_object()).expect("Error converting FireworkEffect into crate::configuration::serialization::ConfigurationSerializable")

   }
}
impl<'mc> crate::configuration::serialization::ConfigurationSerializableTrait<'mc> for FireworkEffect<'mc> {}
#[repr(C)]
pub struct Raid<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Raid<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for Raid<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Raid from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Raid")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Raid object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> RaidTrait<'mc> for Raid<'mc> {}
pub trait RaidTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc> {
/// Get whether this raid started.
	fn is_started(&self) 
-> Result<bool, Box<dyn std::error::Error>>

{let sig = String::from("()Z");
let res = self.jni_ref().call_method(&self.jni_object(),"isStarted",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.z()?
)}
/// Gets the amount of ticks this raid has existed.
	fn active_ticks(&self) 
-> Result<i64, Box<dyn std::error::Error>>

{let sig = String::from("()J");
let res = self.jni_ref().call_method(&self.jni_object(),"getActiveTicks",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.j()?
)}
/// Gets the Bad Omen level of this raid.
	fn bad_omen_level(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getBadOmenLevel",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Sets the Bad Omen level.
/// 
/// If the level is higher than 1, there will be an additional wave that as
/// strong as the final wave.
	fn set_bad_omen_level(&self,bad_omen_level: i32) 
-> Result<(), Box<dyn std::error::Error>>

{let sig = String::from("(I)V");
let val_1 = jni::objects::JValueGen::Int(bad_omen_level);
let res = self.jni_ref().call_method(&self.jni_object(),"setBadOmenLevel",sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
self.jni_ref().translate_error(res)?;
Ok(
()
)}
/// Gets the center location where the raid occurs.
	fn location(&self) 
-> Result<crate::Location<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Location;");
let res = self.jni_ref().call_method(&self.jni_object(),"getLocation",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::Location::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the current status of the raid.
/// 
/// Do not use this method to check if the raid has been started, call
/// {@link #isStarted()} instead.
	fn status(&self) 
-> Result<crate::RaidRaidStatus<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Raid/RaidStatus;");
let res = self.jni_ref().call_method(&self.jni_object(),"getStatus",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
crate::RaidRaidStatus::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets the number of raider groups which have spawned.
	fn spawned_groups(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getSpawnedGroups",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the number of raider groups which would spawn.
/// 
/// This also includes the group which spawns in the additional wave (if
/// present).
	fn total_groups(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getTotalGroups",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the number of waves in this raid (exclude the additional wave).
	fn total_waves(&self) 
-> Result<i32, Box<dyn std::error::Error>>

{let sig = String::from("()I");
let res = self.jni_ref().call_method(&self.jni_object(),"getTotalWaves",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.i()?
)}
/// Gets the sum of all raider's health.
	fn total_health(&self) 
-> Result<f32, Box<dyn std::error::Error>>

{let sig = String::from("()F");
let res = self.jni_ref().call_method(&self.jni_object(),"getTotalHealth",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.f()?
)}
/// Get the UUID of all heroes in this raid.
	fn heroes(&self) 
-> Result<blackboxmc_java::util::JavaSet<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/Set;");
let res = self.jni_ref().call_method(&self.jni_object(),"getHeroes",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
blackboxmc_java::util::JavaSet::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)}
/// Gets all remaining {@link Raider} in the present wave.
	fn raiders(&self) 
-> Result<Vec<crate::entity::Raider<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Ljava/util/List;");
let res = self.jni_ref().call_method(&self.jni_object(),"getRaiders",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
let mut new_vec = Vec::new();
let list = blackboxmc_java::util::JavaList::from_raw(&self.jni_ref(), res.l()?)?;let iter = list.iterator()?;
while iter.has_next()? {            let obj = iter.next()?;
new_vec.push(crate::entity::Raider::from_raw(&self.jni_ref(),obj,)?);
};
Ok(
new_vec
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum FluidCollisionMode<'mc> {
	Never {inner: FluidCollisionModeStruct<'mc>},
	SourceOnly {inner: FluidCollisionModeStruct<'mc>},
	Always {inner: FluidCollisionModeStruct<'mc>},
}
impl<'mc> std::fmt::Display for FluidCollisionMode<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           FluidCollisionMode::Never { .. } => f.write_str("NEVER"),
           FluidCollisionMode::SourceOnly { .. } => f.write_str("SOURCE_ONLY"),
           FluidCollisionMode::Always { .. } => f.write_str("ALWAYS"),
       }
   }
}

        impl<'mc> FluidCollisionModeTrait<'mc> for FluidCollisionMode<'mc> {}
        
        pub trait FluidCollisionModeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<FluidCollisionMode<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/FluidCollisionMode");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/FluidCollisionMode;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"NEVER" => Ok(FluidCollisionMode::Never { inner: FluidCollisionModeStruct::from_raw(env,obj)?}),
"SOURCE_ONLY" => Ok(FluidCollisionMode::SourceOnly { inner: FluidCollisionModeStruct::from_raw(env,obj)?}),
"ALWAYS" => Ok(FluidCollisionMode::Always { inner: FluidCollisionModeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct FluidCollisionModeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for FluidCollisionMode<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Never { inner } => inner.0.clone(),
Self::SourceOnly { inner } => inner.0.clone(),
Self::Always { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Never { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SourceOnly { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Always { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for FluidCollisionMode<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate FluidCollisionMode from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/FluidCollisionMode")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a FluidCollisionMode object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "NEVER" => Ok(FluidCollisionMode::Never { inner: FluidCollisionModeStruct::from_raw(env,obj)?}),"SOURCE_ONLY" => Ok(FluidCollisionMode::SourceOnly { inner: FluidCollisionModeStruct::from_raw(env,obj)?}),"ALWAYS" => Ok(FluidCollisionMode::Always { inner: FluidCollisionModeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for FluidCollisionModeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for FluidCollisionModeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate FluidCollisionModeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/FluidCollisionMode")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a FluidCollisionModeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> FluidCollisionModeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::FluidCollisionMode<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/FluidCollisionMode;");
let cls = jni.find_class("org/bukkit/FluidCollisionMode"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::FluidCollisionMode::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum SkullType<'mc> {
	Skeleton {inner: SkullTypeStruct<'mc>},
	Wither {inner: SkullTypeStruct<'mc>},
	Zombie {inner: SkullTypeStruct<'mc>},
	Player {inner: SkullTypeStruct<'mc>},
	Creeper {inner: SkullTypeStruct<'mc>},
	Dragon {inner: SkullTypeStruct<'mc>},
	Piglin {inner: SkullTypeStruct<'mc>},
}
impl<'mc> std::fmt::Display for SkullType<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           SkullType::Skeleton { .. } => f.write_str("SKELETON"),
           SkullType::Wither { .. } => f.write_str("WITHER"),
           SkullType::Zombie { .. } => f.write_str("ZOMBIE"),
           SkullType::Player { .. } => f.write_str("PLAYER"),
           SkullType::Creeper { .. } => f.write_str("CREEPER"),
           SkullType::Dragon { .. } => f.write_str("DRAGON"),
           SkullType::Piglin { .. } => f.write_str("PIGLIN"),
       }
   }
}

        impl<'mc> SkullTypeTrait<'mc> for SkullType<'mc> {}
        
        pub trait SkullTypeTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<SkullType<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/SkullType");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/SkullType;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"SKELETON" => Ok(SkullType::Skeleton { inner: SkullTypeStruct::from_raw(env,obj)?}),
"WITHER" => Ok(SkullType::Wither { inner: SkullTypeStruct::from_raw(env,obj)?}),
"ZOMBIE" => Ok(SkullType::Zombie { inner: SkullTypeStruct::from_raw(env,obj)?}),
"PLAYER" => Ok(SkullType::Player { inner: SkullTypeStruct::from_raw(env,obj)?}),
"CREEPER" => Ok(SkullType::Creeper { inner: SkullTypeStruct::from_raw(env,obj)?}),
"DRAGON" => Ok(SkullType::Dragon { inner: SkullTypeStruct::from_raw(env,obj)?}),
"PIGLIN" => Ok(SkullType::Piglin { inner: SkullTypeStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct SkullTypeStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for SkullType<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Skeleton { inner } => inner.0.clone(),
Self::Wither { inner } => inner.0.clone(),
Self::Zombie { inner } => inner.0.clone(),
Self::Player { inner } => inner.0.clone(),
Self::Creeper { inner } => inner.0.clone(),
Self::Dragon { inner } => inner.0.clone(),
Self::Piglin { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Skeleton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Wither { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Zombie { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Player { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Creeper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Dragon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Piglin { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for SkullType<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate SkullType from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/SkullType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a SkullType object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "SKELETON" => Ok(SkullType::Skeleton { inner: SkullTypeStruct::from_raw(env,obj)?}),"WITHER" => Ok(SkullType::Wither { inner: SkullTypeStruct::from_raw(env,obj)?}),"ZOMBIE" => Ok(SkullType::Zombie { inner: SkullTypeStruct::from_raw(env,obj)?}),"PLAYER" => Ok(SkullType::Player { inner: SkullTypeStruct::from_raw(env,obj)?}),"CREEPER" => Ok(SkullType::Creeper { inner: SkullTypeStruct::from_raw(env,obj)?}),"DRAGON" => Ok(SkullType::Dragon { inner: SkullTypeStruct::from_raw(env,obj)?}),"PIGLIN" => Ok(SkullType::Piglin { inner: SkullTypeStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for SkullTypeStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for SkullTypeStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate SkullTypeStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/SkullType")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a SkullTypeStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> SkullTypeStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::SkullType<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/SkullType;");
let cls = jni.find_class("org/bukkit/SkullType"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::SkullType::from_raw(&jni,obj
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub enum Instrument<'mc> {
	Piano {inner: InstrumentStruct<'mc>},
	BassDrum {inner: InstrumentStruct<'mc>},
	SnareDrum {inner: InstrumentStruct<'mc>},
	Sticks {inner: InstrumentStruct<'mc>},
	BassGuitar {inner: InstrumentStruct<'mc>},
	Flute {inner: InstrumentStruct<'mc>},
	Bell {inner: InstrumentStruct<'mc>},
	Guitar {inner: InstrumentStruct<'mc>},
	Chime {inner: InstrumentStruct<'mc>},
	Xylophone {inner: InstrumentStruct<'mc>},
	IronXylophone {inner: InstrumentStruct<'mc>},
	CowBell {inner: InstrumentStruct<'mc>},
	Didgeridoo {inner: InstrumentStruct<'mc>},
	Bit {inner: InstrumentStruct<'mc>},
	Banjo {inner: InstrumentStruct<'mc>},
	Pling {inner: InstrumentStruct<'mc>},
	Zombie {inner: InstrumentStruct<'mc>},
	Skeleton {inner: InstrumentStruct<'mc>},
	Creeper {inner: InstrumentStruct<'mc>},
	Dragon {inner: InstrumentStruct<'mc>},
	WitherSkeleton {inner: InstrumentStruct<'mc>},
	Piglin {inner: InstrumentStruct<'mc>},
	CustomHead {inner: InstrumentStruct<'mc>},
}
impl<'mc> std::fmt::Display for Instrument<'mc> {
   fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
       match self {
           Instrument::Piano { .. } => f.write_str("PIANO"),
           Instrument::BassDrum { .. } => f.write_str("BASS_DRUM"),
           Instrument::SnareDrum { .. } => f.write_str("SNARE_DRUM"),
           Instrument::Sticks { .. } => f.write_str("STICKS"),
           Instrument::BassGuitar { .. } => f.write_str("BASS_GUITAR"),
           Instrument::Flute { .. } => f.write_str("FLUTE"),
           Instrument::Bell { .. } => f.write_str("BELL"),
           Instrument::Guitar { .. } => f.write_str("GUITAR"),
           Instrument::Chime { .. } => f.write_str("CHIME"),
           Instrument::Xylophone { .. } => f.write_str("XYLOPHONE"),
           Instrument::IronXylophone { .. } => f.write_str("IRON_XYLOPHONE"),
           Instrument::CowBell { .. } => f.write_str("COW_BELL"),
           Instrument::Didgeridoo { .. } => f.write_str("DIDGERIDOO"),
           Instrument::Bit { .. } => f.write_str("BIT"),
           Instrument::Banjo { .. } => f.write_str("BANJO"),
           Instrument::Pling { .. } => f.write_str("PLING"),
           Instrument::Zombie { .. } => f.write_str("ZOMBIE"),
           Instrument::Skeleton { .. } => f.write_str("SKELETON"),
           Instrument::Creeper { .. } => f.write_str("CREEPER"),
           Instrument::Dragon { .. } => f.write_str("DRAGON"),
           Instrument::WitherSkeleton { .. } => f.write_str("WITHER_SKELETON"),
           Instrument::Piglin { .. } => f.write_str("PIGLIN"),
           Instrument::CustomHead { .. } => f.write_str("CUSTOM_HEAD"),
       }
   }
}

        impl<'mc> InstrumentTrait<'mc> for Instrument<'mc> {}
        
        pub trait InstrumentTrait<'mc>: blackboxmc_general::JNIRaw<'mc> + blackboxmc_general::JNIInstantiatable<'mc>  {
            fn value_of(
                env: &blackboxmc_general::SharedJNIEnv<'mc>,
                arg0: impl Into<String>,
            ) -> Result<Instrument<'mc>, Box<dyn std::error::Error>> {
                let val_1 = jni::objects::JObject::from(env.new_string(arg0.into())?);
                let cls = env.find_class("org/bukkit/Instrument");
                let cls = env.translate_error_with_class(cls)?;
                let res = env.call_static_method(
                    cls,
                    "valueOf",
                    "(Ljava/lang/String;)Lorg/bukkit/Instrument;",
                    vec![jni::objects::JValueGen::from(val_1)],
                );
                let res = env.translate_error(res)?;
                let obj = res.l()?;
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    
"PIANO" => Ok(Instrument::Piano { inner: InstrumentStruct::from_raw(env,obj)?}),
"BASS_DRUM" => Ok(Instrument::BassDrum { inner: InstrumentStruct::from_raw(env,obj)?}),
"SNARE_DRUM" => Ok(Instrument::SnareDrum { inner: InstrumentStruct::from_raw(env,obj)?}),
"STICKS" => Ok(Instrument::Sticks { inner: InstrumentStruct::from_raw(env,obj)?}),
"BASS_GUITAR" => Ok(Instrument::BassGuitar { inner: InstrumentStruct::from_raw(env,obj)?}),
"FLUTE" => Ok(Instrument::Flute { inner: InstrumentStruct::from_raw(env,obj)?}),
"BELL" => Ok(Instrument::Bell { inner: InstrumentStruct::from_raw(env,obj)?}),
"GUITAR" => Ok(Instrument::Guitar { inner: InstrumentStruct::from_raw(env,obj)?}),
"CHIME" => Ok(Instrument::Chime { inner: InstrumentStruct::from_raw(env,obj)?}),
"XYLOPHONE" => Ok(Instrument::Xylophone { inner: InstrumentStruct::from_raw(env,obj)?}),
"IRON_XYLOPHONE" => Ok(Instrument::IronXylophone { inner: InstrumentStruct::from_raw(env,obj)?}),
"COW_BELL" => Ok(Instrument::CowBell { inner: InstrumentStruct::from_raw(env,obj)?}),
"DIDGERIDOO" => Ok(Instrument::Didgeridoo { inner: InstrumentStruct::from_raw(env,obj)?}),
"BIT" => Ok(Instrument::Bit { inner: InstrumentStruct::from_raw(env,obj)?}),
"BANJO" => Ok(Instrument::Banjo { inner: InstrumentStruct::from_raw(env,obj)?}),
"PLING" => Ok(Instrument::Pling { inner: InstrumentStruct::from_raw(env,obj)?}),
"ZOMBIE" => Ok(Instrument::Zombie { inner: InstrumentStruct::from_raw(env,obj)?}),
"SKELETON" => Ok(Instrument::Skeleton { inner: InstrumentStruct::from_raw(env,obj)?}),
"CREEPER" => Ok(Instrument::Creeper { inner: InstrumentStruct::from_raw(env,obj)?}),
"DRAGON" => Ok(Instrument::Dragon { inner: InstrumentStruct::from_raw(env,obj)?}),
"WITHER_SKELETON" => Ok(Instrument::WitherSkeleton { inner: InstrumentStruct::from_raw(env,obj)?}),
"PIGLIN" => Ok(Instrument::Piglin { inner: InstrumentStruct::from_raw(env,obj)?}),
"CUSTOM_HEAD" => Ok(Instrument::CustomHead { inner: InstrumentStruct::from_raw(env,obj)?}),

                    _ => Err(eyre::eyre!("String gaven for variant was invalid").into())
                }
            }
        }
        
#[repr(C)]
pub struct InstrumentStruct<'mc>(pub(crate) blackboxmc_general::SharedJNIEnv<'mc>, pub(crate) jni::objects::JObject<'mc>);

    impl<'mc> JNIRaw<'mc> for Instrument<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
match self {
Self::Piano { inner } => inner.0.clone(),
Self::BassDrum { inner } => inner.0.clone(),
Self::SnareDrum { inner } => inner.0.clone(),
Self::Sticks { inner } => inner.0.clone(),
Self::BassGuitar { inner } => inner.0.clone(),
Self::Flute { inner } => inner.0.clone(),
Self::Bell { inner } => inner.0.clone(),
Self::Guitar { inner } => inner.0.clone(),
Self::Chime { inner } => inner.0.clone(),
Self::Xylophone { inner } => inner.0.clone(),
Self::IronXylophone { inner } => inner.0.clone(),
Self::CowBell { inner } => inner.0.clone(),
Self::Didgeridoo { inner } => inner.0.clone(),
Self::Bit { inner } => inner.0.clone(),
Self::Banjo { inner } => inner.0.clone(),
Self::Pling { inner } => inner.0.clone(),
Self::Zombie { inner } => inner.0.clone(),
Self::Skeleton { inner } => inner.0.clone(),
Self::Creeper { inner } => inner.0.clone(),
Self::Dragon { inner } => inner.0.clone(),
Self::WitherSkeleton { inner } => inner.0.clone(),
Self::Piglin { inner } => inner.0.clone(),
Self::CustomHead { inner } => inner.0.clone(),
}
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
match self {
Self::Piano { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BassDrum { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::SnareDrum { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Sticks { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::BassGuitar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Flute { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bell { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Guitar { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Chime { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Xylophone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::IronXylophone { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CowBell { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Didgeridoo { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Bit { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Banjo { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Pling { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Zombie { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Skeleton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Creeper { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Dragon { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::WitherSkeleton { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::Piglin { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
Self::CustomHead { inner } => unsafe { jni::objects::JObject::from_raw(inner.1.clone()) },
}
}
}
impl<'mc> JNIInstantiatable<'mc> for Instrument<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate Instrument from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Instrument")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a Instrument object, got {}",
                    name
                )
                .into())
            } else {
    
                let variant = env.call_method(&obj, "toString", "()Ljava/lang/String;", vec![]);
                let variant = env.translate_error(variant)?;
                let variant_str = env
                    .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
                    .to_string_lossy()
                    .to_string();
                match variant_str.as_str() {
                    "PIANO" => Ok(Instrument::Piano { inner: InstrumentStruct::from_raw(env,obj)?}),"BASS_DRUM" => Ok(Instrument::BassDrum { inner: InstrumentStruct::from_raw(env,obj)?}),"SNARE_DRUM" => Ok(Instrument::SnareDrum { inner: InstrumentStruct::from_raw(env,obj)?}),"STICKS" => Ok(Instrument::Sticks { inner: InstrumentStruct::from_raw(env,obj)?}),"BASS_GUITAR" => Ok(Instrument::BassGuitar { inner: InstrumentStruct::from_raw(env,obj)?}),"FLUTE" => Ok(Instrument::Flute { inner: InstrumentStruct::from_raw(env,obj)?}),"BELL" => Ok(Instrument::Bell { inner: InstrumentStruct::from_raw(env,obj)?}),"GUITAR" => Ok(Instrument::Guitar { inner: InstrumentStruct::from_raw(env,obj)?}),"CHIME" => Ok(Instrument::Chime { inner: InstrumentStruct::from_raw(env,obj)?}),"XYLOPHONE" => Ok(Instrument::Xylophone { inner: InstrumentStruct::from_raw(env,obj)?}),"IRON_XYLOPHONE" => Ok(Instrument::IronXylophone { inner: InstrumentStruct::from_raw(env,obj)?}),"COW_BELL" => Ok(Instrument::CowBell { inner: InstrumentStruct::from_raw(env,obj)?}),"DIDGERIDOO" => Ok(Instrument::Didgeridoo { inner: InstrumentStruct::from_raw(env,obj)?}),"BIT" => Ok(Instrument::Bit { inner: InstrumentStruct::from_raw(env,obj)?}),"BANJO" => Ok(Instrument::Banjo { inner: InstrumentStruct::from_raw(env,obj)?}),"PLING" => Ok(Instrument::Pling { inner: InstrumentStruct::from_raw(env,obj)?}),"ZOMBIE" => Ok(Instrument::Zombie { inner: InstrumentStruct::from_raw(env,obj)?}),"SKELETON" => Ok(Instrument::Skeleton { inner: InstrumentStruct::from_raw(env,obj)?}),"CREEPER" => Ok(Instrument::Creeper { inner: InstrumentStruct::from_raw(env,obj)?}),"DRAGON" => Ok(Instrument::Dragon { inner: InstrumentStruct::from_raw(env,obj)?}),"WITHER_SKELETON" => Ok(Instrument::WitherSkeleton { inner: InstrumentStruct::from_raw(env,obj)?}),"PIGLIN" => Ok(Instrument::Piglin { inner: InstrumentStruct::from_raw(env,obj)?}),"CUSTOM_HEAD" => Ok(Instrument::CustomHead { inner: InstrumentStruct::from_raw(env,obj)?}),_ => Err(eyre::eyre!("String gaven for variant was invalid").into())}
            }
        }
    }
    

    impl<'mc> JNIRaw<'mc> for InstrumentStruct<'mc> {
        fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        
self.0.clone()
}
fn jni_object(&self) -> jni::objects::JObject<'mc> {
unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
}
}
impl<'mc> JNIInstantiatable<'mc> for InstrumentStruct<'mc> {
        fn from_raw(
            env: &blackboxmc_general::SharedJNIEnv<'mc>,
            obj: jni::objects::JObject<'mc>,
        ) -> Result<Self, Box<dyn std::error::Error>> {
            if obj.is_null() {
                return Err(eyre::eyre!(
                    "Tried to instantiate InstrumentStruct from null object.")
                .into());
            }
            let (valid, name) = env.validate_name(&obj, "org/bukkit/Instrument")?;
            if !valid {
                Err(eyre::eyre!(
                    "Invalid argument passed. Expected a InstrumentStruct object, got {}",
                    name
                )
                .into())
            } else {
    Ok(Self(env.clone(), obj))
            }
        }
    }
    
impl<'mc> InstrumentStruct<'mc> {

	fn values(jni: &blackboxmc_general::SharedJNIEnv<'mc>) 
-> Result<crate::Instrument<'mc>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Instrument;");
let cls = jni.find_class("org/bukkit/Instrument"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"values",
sig.as_str(),vec![]);
let res = 
jni.translate_error(res)?;
let obj = res.l()?;
crate::Instrument::from_raw(&jni,obj
)}
/// Gets the sound associated with this instrument.
/// 
/// Will be null for {@link Instrument#CUSTOM_HEAD}
	fn sound(&self) 
-> Result<Option<crate::Sound<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("()Lorg/bukkit/Sound;");
let res = self.jni_ref().call_method(&self.jni_object(),"getSound",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
Ok(
Some(
crate::Sound::from_raw(&self.jni_ref(),unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) }
)?
)
)}
#[deprecated]

	fn get_type(&self) 
-> Result<i8, Box<dyn std::error::Error>>

{let sig = String::from("()B");
let res = self.jni_ref().call_method(&self.jni_object(),"getType",sig.as_str(),vec![]);
let res = 
self.jni_ref().translate_error(res)?;
Ok(
res.b()?
)}
#[deprecated]
/// Get an instrument by its type ID.
	fn get_by_type(jni: &blackboxmc_general::SharedJNIEnv<'mc>,val_type: i8) 
-> Result<Option<crate::Instrument<'mc>>, Box<dyn std::error::Error>>

{let sig = String::from("(B)Lorg/bukkit/Instrument;");
let val_1 = jni::objects::JValueGen::Byte(val_type);
let cls = jni.find_class("org/bukkit/Instrument"); let cls = jni.translate_error_with_class(cls)?;
let res = jni.call_static_method(cls,"getByType",
sig.as_str(),vec![jni::objects::JValueGen::from(val_1)]);
let res = 
jni.translate_error(res)?;
if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {return Ok(None);}
let obj = res.l()?;
Ok(
Some(
crate::Instrument::from_raw(&jni,obj
)?
)
)}

    fn instance_of(&self, other: impl Into<String>) -> Result<bool, jni::errors::Error>  {
        let cls = &self.jni_ref().find_class(other.into().as_str())?;
        self.jni_ref().is_instance_of(&self.jni_object(), cls)
    }
    
}
pub mod inventory;
pub mod material;
pub mod profile;
pub mod permissions;
pub mod potion;
pub mod ban;
pub mod map;
pub mod help;
pub mod projectiles;
pub mod util;
pub mod generator;
pub mod block;
pub mod enchantments;
pub mod plugin;
pub mod boss;
pub mod loot;
pub mod metadata;
pub mod event;
pub mod attribute;
pub mod conversations;
pub mod entity;
pub mod scoreboard;
pub mod damage;
pub mod command;
pub mod structure;
pub mod persistence;
pub mod configuration;
pub mod packs;
pub mod advancement;
pub mod scheduler;
