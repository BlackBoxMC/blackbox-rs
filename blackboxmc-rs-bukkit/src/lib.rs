#![allow(deprecated)]
use blackboxmc_general::JNIInstantiatable;
use blackboxmc_general::JNIInstantiatableEnum;
use blackboxmc_general::JNIRaw;
use color_eyre::eyre::Result;
#[derive(PartialEq, Eq)]
pub enum WarningStateEnum {
    On,
    Off,
    Default,
}
impl std::fmt::Display for WarningStateEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            WarningStateEnum::On => f.write_str("ON"),
            WarningStateEnum::Off => f.write_str("OFF"),
            WarningStateEnum::Default => f.write_str("DEFAULT"),
        }
    }
}
impl<'mc> std::fmt::Display for WarningState<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct WarningState<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub WarningStateEnum,
);
impl<'mc> std::ops::Deref for WarningState<'mc> {
    type Target = WarningStateEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for WarningState<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for WarningState<'mc> {
    type Enum = WarningStateEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate WarningState from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/WarningState")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WarningState object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> WarningState<'mc> {
    pub const ON: WarningStateEnum = WarningStateEnum::On;
    pub const OFF: WarningStateEnum = WarningStateEnum::Off;
    pub const DEFAULT: WarningStateEnum = WarningStateEnum::Default;
    pub fn from_string(str: String) -> std::option::Option<WarningStateEnum> {
        match str.as_str() {
            "ON" => Some(WarningStateEnum::On),
            "OFF" => Some(WarningStateEnum::Off),
            "DEFAULT" => Some(WarningStateEnum::Default),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<WarningState<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/WarningState");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/WarningState;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        WarningState::from_raw(
            &jni,
            raw_obj,
            WarningState::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a server implementation.
///
/// This is a representation of an abstract class.
pub struct Server<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Server<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Server<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Server from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Server")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Server object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Server<'mc> {
    //

    pub fn reload(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "reload", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn get_tag(
        &self,
        arg0: impl Into<String>,
        arg1: impl Into<crate::NamespacedKey<'mc>>,
        arg2: jni::objects::JClass<'mc>,
    ) -> Result<crate::Tag<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from(
            "(Ljava/lang/String;Lorg/bukkit/NamespacedKey;Ljava/lang/Class;)Lorg/bukkit/Tag;",
        );
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let val_3 = jni::objects::JValueGen::Object(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTag",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Tag::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@Deprecated

    #[deprecated]
    //@Nullable

    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Magic value
    /// </div>
    /// Magic value
    ///
    /// Gets the map from the given item ID.
    pub fn get_map(
        &self,
        arg0: i32,
    ) -> Result<Option<crate::map::MapView<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(I)Lorg/bukkit/map/MapView;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMap",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {
            return Ok(None);
        }
        Ok(Some(crate::map::MapView::from_raw(
            &self.jni_ref(),
            unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) },
        )?))
    }
    //

    pub fn create_map(
        &self,
        arg0: impl Into<crate::World<'mc>>,
    ) -> Result<crate::map::MapView<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/World;)Lorg/bukkit/map/MapView;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createMap",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::map::MapView::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn world_container(
        &self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/io/File;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWorldContainer",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.l()?)
    }
    //

    pub fn version(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getVersion", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn get_world(
        &self,
        arg0: std::option::Option<impl Into<blackboxmc_java::JavaUUID<'mc>>>,
    ) -> Result<crate::World<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/util/UUID;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/World;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getWorld", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::World::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn generate_structures(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getGenerateStructures",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn initial_enabled_packs(&self) -> Result<Vec<String>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getInitialEnabledPacks",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(
                self.jni_ref()
                    .get_string(unsafe { &jni::objects::JString::from_raw(*obj) })?
                    .to_string_lossy()
                    .to_string(),
            );
        }
        Ok(new_vec)
    }
    //

    pub fn online_players(
        &self,
    ) -> Result<Vec<crate::entity::Player<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Collection;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getOnlinePlayers",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut col = blackboxmc_java::JavaCollection::from_raw(&self.jni_ref(), res.l()?)?;
        let mut iter = blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), col.iterator()?)?;
        while iter.has_next()? {
            let obj = iter.next()?;
            new_vec.push(crate::entity::Player::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn max_players(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getMaxPlayers", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Set the maximum amount of players allowed to be logged in at once.
    pub fn set_max_players(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setMaxPlayers",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn view_distance(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getViewDistance", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn initial_disabled_packs(&self) -> Result<Vec<String>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getInitialDisabledPacks",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(
                self.jni_ref()
                    .get_string(unsafe { &jni::objects::JString::from_raw(*obj) })?
                    .to_string_lossy()
                    .to_string(),
            );
        }
        Ok(new_vec)
    }
    //

    pub fn bukkit_version(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBukkitVersion",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn spigot(&self) -> Result<crate::ServerSpigot<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Server$Spigot;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "spigot", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::ServerSpigot::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn get_loot_table(
        &self,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::loot::LootTable<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/loot/LootTable;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getLootTable",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::loot::LootTable::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn simulation_distance(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getSimulationDistance",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_recipe(
        &self,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::inventory::Recipe<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/inventory/Recipe;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getRecipe",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::inventory::Recipe::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn get_boss_bar(
        &self,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::boss::KeyedBossBar<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/boss/KeyedBossBar;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBossBar",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::boss::KeyedBossBar::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn create_chunk_data(
        &self,
        arg0: impl Into<crate::World<'mc>>,
    ) -> Result<crate::generator::ChunkGeneratorChunkData<'mc>, Box<dyn std::error::Error>> {
        let sig =
            String::from("(Lorg/bukkit/World;)Lorg/bukkit/generator/ChunkGenerator$ChunkData;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createChunkData",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::generator::ChunkGeneratorChunkData::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn plugin_manager(
        &self,
    ) -> Result<crate::plugin::PluginManager<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/plugin/PluginManager;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPluginManager",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::plugin::PluginManager::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn item_factory(
        &self,
    ) -> Result<crate::inventory::ItemFactory<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/inventory/ItemFactory;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getItemFactory", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::inventory::ItemFactory::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn ip(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getIp", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn world_type(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getWorldType", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn max_world_size(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getMaxWorldSize", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn allow_end(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getAllowEnd", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn allow_nether(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getAllowNether", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn data_pack_manager(
        &self,
    ) -> Result<crate::packs::DataPackManager<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/packs/DataPackManager;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDataPackManager",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::packs::DataPackManager::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn resource_pack(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getResourcePack", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn resource_pack_hash(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getResourcePackHash",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn resource_pack_prompt(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getResourcePackPrompt",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn is_resource_pack_required(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isResourcePackRequired",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn has_whitelist(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "hasWhitelist", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets if the server is whitelisted.
    /// Sets if the server whitelist is enforced. If the whitelist is enforced, non-whitelisted players will be disconnected when the server whitelist is reloaded.
    pub fn set_whitelist(&self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setWhitelist",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn is_whitelist_enforced(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isWhitelistEnforced",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets if the server whitelist is enforced. If the whitelist is enforced, non-whitelisted players will be disconnected when the server whitelist is reloaded.
    pub fn set_whitelist_enforced(&self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setWhitelistEnforced",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn whitelisted_players(
        &self,
    ) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWhitelistedPlayers",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaSet::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn reload_whitelist(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "reloadWhitelist", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn broadcast_message(
        &self,
        arg0: impl Into<String>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)I");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "broadcastMessage",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn update_folder(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getUpdateFolder", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn update_folder_file(
        &self,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/io/File;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getUpdateFolderFile",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.l()?)
    }
    //

    pub fn connection_throttle(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getConnectionThrottle",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn ticks_per_animal_spawns(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerAnimalSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ticks_per_monster_spawns(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerMonsterSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ticks_per_water_spawns(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerWaterSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ticks_per_water_ambient_spawns(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerWaterAmbientSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ticks_per_water_underground_creature_spawns(
        &self,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerWaterUndergroundCreatureSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ticks_per_ambient_spawns(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerAmbientSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_ticks_per_spawns(
        &self,
        arg0: impl Into<crate::entity::SpawnCategory<'mc>>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)I");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerSpawns",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_player(
        &self,
        arg0: std::option::Option<impl Into<blackboxmc_java::JavaUUID<'mc>>>,
    ) -> Result<crate::entity::Player<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/util/UUID;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/entity/Player;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getPlayer", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::Player::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn get_player_exact(
        &self,
        arg0: impl Into<String>,
    ) -> Result<crate::entity::Player<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/entity/Player;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPlayerExact",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::Player::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn match_player(
        &self,
        arg0: impl Into<String>,
    ) -> Result<Vec<crate::entity::Player<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Ljava/util/List;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "matchPlayer",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::entity::Player::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn scheduler(
        &self,
    ) -> Result<crate::scheduler::BukkitScheduler<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/scheduler/BukkitScheduler;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getScheduler", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::scheduler::BukkitScheduler::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn services_manager(
        &self,
    ) -> Result<crate::plugin::ServicesManager<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/plugin/ServicesManager;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getServicesManager",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::plugin::ServicesManager::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn worlds(&self) -> Result<Vec<crate::World<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getWorlds", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::World::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn create_world(
        &self,
        arg0: impl Into<crate::WorldCreator<'mc>>,
    ) -> Result<crate::World<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/WorldCreator;)Lorg/bukkit/World;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createWorld",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::World::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn unload_world(
        &self,
        arg0: impl Into<String>,
        arg1: std::option::Option<bool>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Ljava/lang/String;";
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Z";
            // 1
            let val_2 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_2);
        }
        sig += ")Z";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "unloadWorld", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn create_world_border(
        &self,
    ) -> Result<crate::WorldBorder<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/WorldBorder;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createWorldBorder",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldBorder::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn create_explorer_map(
        &self,
        arg0: impl Into<crate::World<'mc>>,
        arg1: impl Into<crate::Location<'mc>>,
        arg2: std::option::Option<impl Into<crate::StructureType<'mc>>>,
        arg3: std::option::Option<i32>,
        arg4: std::option::Option<bool>,
    ) -> Result<crate::inventory::ItemStack<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/World;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/Location;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "Lorg/bukkit/StructureType;";
            let val_3 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "I";
            let val_4 = jni::objects::JValueGen::Int(a.into());
            args.push(val_4);
        }
        if let Some(a) = arg4 {
            sig += "Z";
            // 2
            let val_5 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_5);
        }
        sig += ")Lorg/bukkit/inventory/ItemStack;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "createExplorerMap", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::inventory::ItemStack::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn reload_data(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "reloadData", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn get_plugin_command(
        &self,
        arg0: impl Into<String>,
    ) -> Result<crate::command::PluginCommand<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/command/PluginCommand;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPluginCommand",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::command::PluginCommand::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn save_players(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "savePlayers", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn dispatch_command(
        &self,
        arg0: impl Into<crate::command::CommandSender<'mc>>,
        arg1: impl Into<String>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/command/CommandSender;Ljava/lang/String;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg1.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "dispatchCommand",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn add_recipe(
        &self,
        arg0: impl Into<crate::inventory::Recipe<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/inventory/Recipe;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "addRecipe",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn get_recipes_for(
        &self,
        arg0: impl Into<crate::inventory::ItemStack<'mc>>,
    ) -> Result<Vec<crate::inventory::Recipe<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/inventory/ItemStack;)Ljava/util/List;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getRecipesFor",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::inventory::Recipe::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn get_crafting_recipe(
        &self,
        arg0: Vec<impl Into<crate::inventory::ItemStack<'mc>>>,
        arg1: impl Into<crate::World<'mc>>,
    ) -> Result<crate::inventory::Recipe<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from(
            "(Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/World;)Lorg/bukkit/inventory/Recipe;",
        );
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getCraftingRecipe",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_2)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::inventory::Recipe::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn craft_item(
        &self,
        arg0: Vec<impl Into<crate::inventory::ItemStack<'mc>>>,
        arg1: impl Into<crate::World<'mc>>,
        arg2: impl Into<crate::entity::Player<'mc>>,
    ) -> Result<crate::inventory::ItemStack<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Lorg/bukkit/inventory/ItemStack;");
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let val_3 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg2.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "craftItem",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::inventory::ItemStack::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn recipe_iterator(
        &self,
    ) -> Result<blackboxmc_java::JavaIterator<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Iterator;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "recipeIterator", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn clear_recipes(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "clearRecipes", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn reset_recipes(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "resetRecipes", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn remove_recipe(
        &self,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removeRecipe",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn command_aliases(
        &self,
    ) -> Result<blackboxmc_java::JavaMap<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Map;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getCommandAliases",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaMap::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn spawn_radius(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getSpawnRadius", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Sets the radius, in blocks, around each worlds spawn point to protect.
    pub fn set_spawn_radius(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setSpawnRadius",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn should_send_chat_previews(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "shouldSendChatPreviews",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_enforcing_secure_profiles(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isEnforcingSecureProfiles",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn hide_online_players(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getHideOnlinePlayers",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn online_mode(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getOnlineMode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn allow_flight(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getAllowFlight", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_hardcore(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isHardcore", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn get_offline_player(
        &self,
        arg0: std::option::Option<impl Into<String>>,
    ) -> Result<crate::OfflinePlayer<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/String;";
            let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                self.jni_ref().new_string(a.into())?,
            ));
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/OfflinePlayer;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getOfflinePlayer", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::OfflinePlayer::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn create_player_profile(
        &self,
        arg0: impl Into<blackboxmc_java::JavaUUID<'mc>>,
        arg1: std::option::Option<impl Into<String>>,
    ) -> Result<crate::profile::PlayerProfile<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Ljava/util/UUID;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Ljava/lang/String;";
            let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                self.jni_ref().new_string(a.into())?,
            ));
            args.push(val_2);
        }
        sig += ")Lorg/bukkit/profile/PlayerProfile;";
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createPlayerProfile",
            sig.as_str(),
            args,
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::profile::PlayerProfile::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn ipbans(&self) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getIPBans", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaSet::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn ban_ip(
        &self,
        arg0: std::option::Option<jni::objects::JObject<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/net/InetAddress;";
            let val_1 = jni::objects::JValueGen::Object(a);
            args.push(val_1);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "banIP", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn unban_ip(
        &self,
        arg0: std::option::Option<jni::objects::JObject<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/net/InetAddress;";
            let val_1 = jni::objects::JValueGen::Object(a);
            args.push(val_1);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "unbanIP", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn banned_players(
        &self,
    ) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBannedPlayers",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaSet::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn get_ban_list(
        &self,
        arg0: impl Into<crate::BanListType<'mc>>,
    ) -> Result<crate::BanList<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/BanList$Type;)Lorg/bukkit/BanList;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBanList",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::BanList::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn operators(&self) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getOperators", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaSet::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn default_game_mode(&self) -> Result<crate::GameMode<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/GameMode;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDefaultGameMode",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::GameMode::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::GameMode::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn set_default_game_mode(
        &self,
        arg0: impl Into<crate::GameMode<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/GameMode;)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setDefaultGameMode",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn console_sender(
        &self,
    ) -> Result<crate::command::ConsoleCommandSender<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/command/ConsoleCommandSender;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getConsoleSender",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::command::ConsoleCommandSender::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    //

    pub fn messenger(
        &self,
    ) -> Result<crate::plugin::messaging::Messenger<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/plugin/messaging/Messenger;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getMessenger", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::plugin::messaging::Messenger::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn help_map(&self) -> Result<crate::help::HelpMap<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/help/HelpMap;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getHelpMap", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::help::HelpMap::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn create_inventory(
        &self,
        arg0: impl Into<crate::inventory::InventoryHolder<'mc>>,
        arg1: impl Into<crate::event::inventory::InventoryType<'mc>>,
        arg2: std::option::Option<impl Into<String>>,
    ) -> Result<crate::inventory::Inventory<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/inventory/InventoryHolder;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/event/inventory/InventoryType;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "Ljava/lang/String;";
            let val_3 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                self.jni_ref().new_string(a.into())?,
            ));
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/inventory/Inventory;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "createInventory", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::inventory::Inventory::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn create_merchant(
        &self,
        arg0: impl Into<String>,
    ) -> Result<crate::inventory::Merchant<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/inventory/Merchant;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "createMerchant",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::inventory::Merchant::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn max_chained_neighbor_updates(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMaxChainedNeighborUpdates",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn monster_spawn_limit(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMonsterSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn animal_spawn_limit(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getAnimalSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn water_animal_spawn_limit(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterAnimalSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn water_ambient_spawn_limit(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterAmbientSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn water_underground_creature_spawn_limit(
        &self,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterUndergroundCreatureSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ambient_spawn_limit(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getAmbientSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_spawn_limit(
        &self,
        arg0: impl Into<crate::entity::SpawnCategory<'mc>>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)I");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getSpawnLimit",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn is_primary_thread(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isPrimaryThread", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn motd(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getMotd", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn set_motd(&self, arg0: impl Into<String>) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)V");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setMotd",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn shutdown_message(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getShutdownMessage",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn warning_state(
        &self,
    ) -> Result<crate::WarningWarningState<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Warning$WarningState;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getWarningState", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::WarningWarningState::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::WarningWarningState::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn scoreboard_manager(
        &self,
    ) -> Result<crate::scoreboard::ScoreboardManager<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/scoreboard/ScoreboardManager;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getScoreboardManager",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::scoreboard::ScoreboardManager::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn get_scoreboard_criteria(
        &self,
        arg0: impl Into<String>,
    ) -> Result<crate::scoreboard::Criteria<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/scoreboard/Criteria;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getScoreboardCriteria",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::scoreboard::Criteria::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn server_icon(
        &self,
    ) -> Result<crate::util::CachedServerIcon<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/util/CachedServerIcon;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getServerIcon", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::util::CachedServerIcon::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn load_server_icon(
        &self,
        arg0: std::option::Option<jni::objects::JObject<'mc>>,
    ) -> Result<crate::util::CachedServerIcon<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/io/File;";
            let val_1 = jni::objects::JValueGen::Object(a);
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/util/CachedServerIcon;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "loadServerIcon", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::util::CachedServerIcon::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    /// Set the idle kick timeout. Any players idle for the specified amount of time will be automatically kicked.
    /// <p>A value of 0 will disable the idle kick timeout.</p>
    pub fn set_idle_timeout(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setIdleTimeout",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn idle_timeout(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getIdleTimeout", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn create_boss_bar(
        &self,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
        arg1: impl Into<String>,
        arg2: impl Into<crate::boss::BarColor<'mc>>,
        arg3: std::option::Option<impl Into<crate::boss::BarStyle<'mc>>>,
        arg4: std::option::Option<Vec<impl Into<crate::boss::BarFlag<'mc>>>>,
    ) -> Result<crate::boss::KeyedBossBar<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/NamespacedKey;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Ljava/lang/String;";
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg1.into())?,
        ));
        args.push(val_2);
        sig += "Lorg/bukkit/boss/BarColor;";
        let val_3 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg2.into().jni_object().clone())
        });
        args.push(val_3);
        if let Some(a) = arg3 {
            sig += "Lorg/bukkit/boss/BarStyle;";
            let val_4 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_4);
        }
        sig += ")Lorg/bukkit/boss/KeyedBossBar;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "createBossBar", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::boss::KeyedBossBar::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn boss_bars(
        &self,
    ) -> Result<blackboxmc_java::JavaIterator<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Iterator;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getBossBars", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn remove_boss_bar(
        &self,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removeBossBar",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn get_entity(
        &self,
        arg0: impl Into<blackboxmc_java::JavaUUID<'mc>>,
    ) -> Result<crate::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/util/UUID;)Lorg/bukkit/entity/Entity;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEntity",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::Entity::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn get_advancement(
        &self,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::advancement::Advancement<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/advancement/Advancement;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getAdvancement",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::advancement::Advancement::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn advancement_iterator(
        &self,
    ) -> Result<blackboxmc_java::JavaIterator<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Iterator;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "advancementIterator",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn create_block_data(
        &self,
        arg0: impl Into<crate::Material<'mc>>,
        arg1: std::option::Option<impl Into<String>>,
    ) -> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Material;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Ljava/lang/String;";
            let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                self.jni_ref().new_string(a.into())?,
            ));
            args.push(val_2);
        }
        sig += ")Lorg/bukkit/block/data/BlockData;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "createBlockData", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::block::data::BlockData::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn select_entities(
        &self,
        arg0: impl Into<crate::command::CommandSender<'mc>>,
        arg1: impl Into<String>,
    ) -> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>> {
        let sig =
            String::from("(Lorg/bukkit/command/CommandSender;Ljava/lang/String;)Ljava/util/List;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg1.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "selectEntities",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn structure_manager(
        &self,
    ) -> Result<crate::structure::StructureManager<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/structure/StructureManager;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getStructureManager",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::structure::StructureManager::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn get_registry(
        &self,
        arg0: jni::objects::JClass<'mc>,
    ) -> Result<crate::Registry<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Class;)Lorg/bukkit/Registry;");
        let val_1 = jni::objects::JValueGen::Object(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getRegistry",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Registry::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn name(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getName", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn shutdown(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "shutdown", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn get_unsafe(&self) -> Result<crate::UnsafeValues<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/UnsafeValues;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getUnsafe", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::UnsafeValues::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn logger(
        &self,
    ) -> Result<blackboxmc_java::logging::JavaLogger<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/logging/Logger;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getLogger", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::logging::JavaLogger::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn port(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getPort", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn broadcast(
        &self,
        arg0: impl Into<String>,
        arg1: impl Into<String>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;Ljava/lang/String;)I");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg1.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "broadcast",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn send_plugin_message(
        &self,
        arg0: impl Into<crate::plugin::Plugin<'mc>>,
        arg1: impl Into<String>,
        arg2: Vec<i8>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/plugin/Plugin;Ljava/lang/String;B)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg1.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "sendPluginMessage",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn listening_plugin_channels(
        &self,
    ) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getListeningPluginChannels",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaSet::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}
impl<'mc> Into<crate::plugin::messaging::PluginMessageRecipient<'mc>> for Server<'mc> {
    fn into(self) -> crate::plugin::messaging::PluginMessageRecipient<'mc> {
        crate::plugin::messaging::PluginMessageRecipient::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting Server into crate::plugin::messaging::PluginMessageRecipient")
    }
}

pub struct ServerSpigot<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for ServerSpigot<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for ServerSpigot<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate ServerSpigot from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Server$Spigot")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ServerSpigot object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> ServerSpigot<'mc> {
    pub fn new(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::ServerSpigot<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let cls = jni.find_class("org/bukkit/Server$Spigot");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.new_object(cls, sig.as_str(), vec![]);
        let res = jni.translate_error_no_gen(res)?;
        crate::ServerSpigot::from_raw(&jni, res)
    }
    //

    pub fn config(
        &self,
    ) -> Result<crate::configuration::file::YamlConfiguration<'mc>, Box<dyn std::error::Error>>
    {
        let sig = String::from("()Lorg/bukkit/configuration/file/YamlConfiguration;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getConfig", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::configuration::file::YamlConfiguration::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn restart(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "restart", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn broadcast(
        &self,
        arg0: std::option::Option<
            impl Into<blackboxmc_bungee::bungee::api::chat::BaseComponent<'mc>>,
        >,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lnet/md_5/bungee/api/chat/BaseComponent;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "broadcast", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for ServerSpigot<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling ServerSpigot.toString: {}", err),
        }
    }
}

#[derive(PartialEq, Eq)]
pub enum DifficultyEnum {
    Peaceful,
    Easy,
    Normal,
    Hard,
}
impl std::fmt::Display for DifficultyEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            DifficultyEnum::Peaceful => f.write_str("PEACEFUL"),
            DifficultyEnum::Easy => f.write_str("EASY"),
            DifficultyEnum::Normal => f.write_str("NORMAL"),
            DifficultyEnum::Hard => f.write_str("HARD"),
        }
    }
}
impl<'mc> std::fmt::Display for Difficulty<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Difficulty<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub DifficultyEnum,
);
impl<'mc> std::ops::Deref for Difficulty<'mc> {
    type Target = DifficultyEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for Difficulty<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Difficulty<'mc> {
    type Enum = DifficultyEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Difficulty from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Difficulty")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Difficulty object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Difficulty<'mc> {
    pub const PEACEFUL: DifficultyEnum = DifficultyEnum::Peaceful;
    pub const EASY: DifficultyEnum = DifficultyEnum::Easy;
    pub const NORMAL: DifficultyEnum = DifficultyEnum::Normal;
    pub const HARD: DifficultyEnum = DifficultyEnum::Hard;
    pub fn from_string(str: String) -> std::option::Option<DifficultyEnum> {
        match str.as_str() {
            "PEACEFUL" => Some(DifficultyEnum::Peaceful),
            "EASY" => Some(DifficultyEnum::Easy),
            "NORMAL" => Some(DifficultyEnum::Normal),
            "HARD" => Some(DifficultyEnum::Hard),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Difficulty<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Difficulty");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Difficulty;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Difficulty::from_raw(
            &jni,
            raw_obj,
            Difficulty::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// This represents a Feature Flag for a World.
///
/// This is a representation of an abstract class.
pub struct FeatureFlag<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for FeatureFlag<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for FeatureFlag<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate FeatureFlag from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/FeatureFlag")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a FeatureFlag object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> FeatureFlag<'mc> {
    //

    pub fn key(&self) -> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/NamespacedKey;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getKey", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::NamespacedKey::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}
impl<'mc> Into<crate::Keyed<'mc>> for FeatureFlag<'mc> {
    fn into(self) -> crate::Keyed<'mc> {
        crate::Keyed::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting FeatureFlag into crate::Keyed")
    }
}
#[derive(PartialEq, Eq)]
pub enum TreeSpeciesEnum {
    Generic,
    Redwood,
    Birch,
    Jungle,
    Acacia,
    DarkOak,
}
impl std::fmt::Display for TreeSpeciesEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            TreeSpeciesEnum::Generic => f.write_str("GENERIC"),
            TreeSpeciesEnum::Redwood => f.write_str("REDWOOD"),
            TreeSpeciesEnum::Birch => f.write_str("BIRCH"),
            TreeSpeciesEnum::Jungle => f.write_str("JUNGLE"),
            TreeSpeciesEnum::Acacia => f.write_str("ACACIA"),
            TreeSpeciesEnum::DarkOak => f.write_str("DARK_OAK"),
        }
    }
}
impl<'mc> std::fmt::Display for TreeSpecies<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct TreeSpecies<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub TreeSpeciesEnum,
);
impl<'mc> std::ops::Deref for TreeSpecies<'mc> {
    type Target = TreeSpeciesEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for TreeSpecies<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for TreeSpecies<'mc> {
    type Enum = TreeSpeciesEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate TreeSpecies from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/TreeSpecies")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a TreeSpecies object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> TreeSpecies<'mc> {
    pub const GENERIC: TreeSpeciesEnum = TreeSpeciesEnum::Generic;
    pub const REDWOOD: TreeSpeciesEnum = TreeSpeciesEnum::Redwood;
    pub const BIRCH: TreeSpeciesEnum = TreeSpeciesEnum::Birch;
    pub const JUNGLE: TreeSpeciesEnum = TreeSpeciesEnum::Jungle;
    pub const ACACIA: TreeSpeciesEnum = TreeSpeciesEnum::Acacia;
    pub const DARK_OAK: TreeSpeciesEnum = TreeSpeciesEnum::DarkOak;
    pub fn from_string(str: String) -> std::option::Option<TreeSpeciesEnum> {
        match str.as_str() {
            "GENERIC" => Some(TreeSpeciesEnum::Generic),
            "REDWOOD" => Some(TreeSpeciesEnum::Redwood),
            "BIRCH" => Some(TreeSpeciesEnum::Birch),
            "JUNGLE" => Some(TreeSpeciesEnum::Jungle),
            "ACACIA" => Some(TreeSpeciesEnum::Acacia),
            "DARK_OAK" => Some(TreeSpeciesEnum::DarkOak),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<TreeSpecies<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/TreeSpecies");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/TreeSpecies;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        TreeSpecies::from_raw(
            &jni,
            raw_obj,
            TreeSpecies::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a raid event.
///
/// This is a representation of an abstract class.
pub struct Raid<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Raid<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Raid<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Raid from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Raid")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Raid object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Raid<'mc> {
    //

    pub fn is_started(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isStarted", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn active_ticks(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getActiveTicks", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn bad_omen_level(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getBadOmenLevel", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Sets the Bad Omen level.
    ///
    /// If the level is higher than 1, there will be an additional wave that as strong as the final wave.
    pub fn set_bad_omen_level(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setBadOmenLevel",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn status(&self) -> Result<crate::RaidRaidStatus<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Raid$RaidStatus;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getStatus", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::RaidRaidStatus::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::RaidRaidStatus::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn spawned_groups(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getSpawnedGroups",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn total_groups(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getTotalGroups", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn total_waves(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getTotalWaves", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn total_health(&self) -> Result<f32, Box<dyn std::error::Error>> {
        let sig = String::from("()F");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getTotalHealth", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.f()?)
    }
    //

    pub fn heroes(&self) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getHeroes", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaSet::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn raiders(&self) -> Result<Vec<crate::entity::Raider<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getRaiders", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::entity::Raider::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn location(&self) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Location;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getLocation", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}
/// This interface provides value conversions that may be specific to a runtime, or have arbitrary meaning (read: magic values).
/// <p>Their existence and behavior is not guaranteed across future versions. They may be poorly named, throw exceptions, have misleading parameters, or any other bad programming practice.</p>
///
/// This is a representation of an abstract class.
pub struct UnsafeValues<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for UnsafeValues<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for UnsafeValues<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate UnsafeValues from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/UnsafeValues")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a UnsafeValues object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> UnsafeValues<'mc> {
    //

    pub fn get_material(
        &self,
        arg0: impl Into<String>,
        arg1: i32,
    ) -> Result<crate::Material<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;I)Lorg/bukkit/Material;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMaterial",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Material::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Material::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn get_translation_key(
        &self,
        arg0: std::option::Option<impl Into<crate::entity::EntityType<'mc>>>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/entity/EntityType;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Ljava/lang/String;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getTranslationKey", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn to_legacy(
        &self,
        arg0: impl Into<crate::Material<'mc>>,
    ) -> Result<crate::Material<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Material;)Lorg/bukkit/Material;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "toLegacy",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Material::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Material::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn from_legacy_with_material(
        &self,
        arg0: std::option::Option<impl Into<crate::material::MaterialData<'mc>>>,
    ) -> Result<crate::Material<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/material/MaterialData;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/Material;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "fromLegacy", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Material::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Material::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn from_legacy_with_material_data(
        &self,
        arg0: impl Into<crate::Material<'mc>>,
        arg1: std::option::Option<i8>,
    ) -> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Material;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "B";
            let val_2 = jni::objects::JValueGen::Byte(a.into());
            args.push(val_2);
        }
        sig += ")Lorg/bukkit/block/data/BlockData;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "fromLegacy", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::block::data::BlockData::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn data_version(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getDataVersion", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn check_supported(
        &self,
        arg0: impl Into<crate::plugin::PluginDescriptionFile<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/plugin/PluginDescriptionFile;)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "checkSupported",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn modify_item_stack(
        &self,
        arg0: impl Into<crate::inventory::ItemStack<'mc>>,
        arg1: impl Into<String>,
    ) -> Result<crate::inventory::ItemStack<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from(
            "(Lorg/bukkit/inventory/ItemStack;Ljava/lang/String;)Lorg/bukkit/inventory/ItemStack;",
        );
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg1.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "modifyItemStack",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::inventory::ItemStack::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    //

    pub fn load_advancement(
        &self,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
        arg1: impl Into<String>,
    ) -> Result<crate::advancement::Advancement<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from(
            "(Lorg/bukkit/NamespacedKey;Ljava/lang/String;)Lorg/bukkit/advancement/Advancement;",
        );
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg1.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "loadAdvancement",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::advancement::Advancement::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn remove_advancement(
        &self,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removeAdvancement",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn get_default_attribute_modifiers(
        &self,
        arg0: impl Into<crate::Material<'mc>>,
        arg1: impl Into<crate::inventory::EquipmentSlot<'mc>>,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Material;Lorg/bukkit/inventory/EquipmentSlot;)Lcom/google/common/collect/Multimap;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getDefaultAttributeModifiers",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.l()?)
    }
    //

    pub fn get_creative_category(
        &self,
        arg0: impl Into<crate::Material<'mc>>,
    ) -> Result<crate::inventory::CreativeCategory<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Material;)Lorg/bukkit/inventory/CreativeCategory;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getCreativeCategory",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::inventory::CreativeCategory::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::inventory::CreativeCategory::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn get_block_translation_key(
        &self,
        arg0: impl Into<crate::Material<'mc>>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Material;)Ljava/lang/String;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockTranslationKey",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn get_item_translation_key(
        &self,
        arg0: impl Into<crate::Material<'mc>>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Material;)Ljava/lang/String;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getItemTranslationKey",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn get_feature_flag(
        &self,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::FeatureFlag<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/FeatureFlag;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getFeatureFlag",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::FeatureFlag::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}
/// Represents a world, which may contain entities, chunks and blocks
///
/// This is a representation of an abstract class.
pub struct World<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for World<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for World<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate World from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/World")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a World object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> World<'mc> {
    //

    /// Sets the relative in-game time on the server.
    /// <p>The relative time is analogous to hours * 1000</p>
    /// <p>Note that setting the relative time below the current relative time will actually move the clock forward a day. If you require to rewind time, please see <a href="#setFullTime(long)"><code>setFullTime(long)</code></a></p>
    pub fn set_time(&self, arg0: i64) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(J)V");
        let val_1 = jni::objects::JValueGen::Long(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setTime",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn time(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getTime", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    ///
    /// Sets the world's ticks per water underground creature spawns value
    /// <p>This value determines how many ticks there are between attempts to spawn water underground creature.</p>
    /// <p><b>Example Usage:</b></p>
    /// <ul>
    /// <li>A value of 1 will mean the server will attempt to spawn water underground creature in this world on every tick.</li>
    /// <li>A value of 400 will mean the server will attempt to spawn water underground creature in this world every 400th tick.</li>
    /// <li>A value below 0 will be reset back to Minecraft's default.</li>
    /// </ul>
    /// <p><b>Note:</b> If set to 0, water underground creature spawning will be disabled for this world.</p>
    /// <p>Minecraft default: 1.</p>
    pub fn set_ticks_per_water_underground_creature_spawns(
        &self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerWaterUndergroundCreatureSpawns",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn view_distance(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getViewDistance", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_nearby_entities_with_bounding_box(
        &self,
        arg0: std::option::Option<impl Into<crate::Location<'mc>>>,
        arg1: std::option::Option<f64>,
        arg2: std::option::Option<f64>,
        arg3: std::option::Option<f64>,
    ) -> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/Location;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "D";
            let val_2 = jni::objects::JValueGen::Double(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "D";
            let val_3 = jni::objects::JValueGen::Double(a.into());
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "D";
            let val_4 = jni::objects::JValueGen::Double(a.into());
            args.push(val_4);
        }
        sig += ")Ljava/util/Collection;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getNearbyEntities", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut col = blackboxmc_java::JavaCollection::from_raw(&self.jni_ref(), res.l()?)?;
        let mut iter = blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), col.iterator()?)?;
        while iter.has_next()? {
            let obj = iter.next()?;
            new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn play_effect(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: impl Into<crate::Effect<'mc>>,
        arg2: jni::objects::JObject<'mc>,
        arg3: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/Effect;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        sig += "Ljava/lang/Object;";
        let val_3 = jni::objects::JValueGen::Object(arg2);
        args.push(val_3);
        if let Some(a) = arg3 {
            sig += "I";
            let val_4 = jni::objects::JValueGen::Int(a.into());
            args.push(val_4);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "playEffect", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn spigot(&self) -> Result<crate::WorldSpigot<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/World$Spigot;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "spigot", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldSpigot::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn get_chunk_at_with_block(
        &self,
        arg0: std::option::Option<impl Into<crate::Location<'mc>>>,
    ) -> Result<crate::Chunk<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/Location;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/Chunk;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getChunkAt", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::Chunk::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    /// Gets the <a href="Chunk.html" title="interface in org.bukkit"><code>Chunk</code></a> at the given coordinates
    pub fn get_chunk_at_with_int(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<bool>,
    ) -> Result<crate::Chunk<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "Z";
            // 1
            let val_3 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/Chunk;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getChunkAt", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::Chunk::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    /// Gets the <a title="interface in org.bukkit.block" href="block/Block.html"><code>Block</code></a> at the given coordinates
    pub fn get_block_at(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::block::Block<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/block/Block;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlockAt", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::block::Block::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn ray_trace_blocks(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: impl Into<crate::util::Vector<'mc>>,
        arg2: std::option::Option<f64>,
        arg3: std::option::Option<impl Into<crate::FluidCollisionMode<'mc>>>,
        arg4: std::option::Option<bool>,
    ) -> Result<crate::util::RayTraceResult<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/util/Vector;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "D";
            let val_3 = jni::objects::JValueGen::Double(a.into());
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "Lorg/bukkit/FluidCollisionMode;";
            let val_4 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_4);
        }
        if let Some(a) = arg4 {
            sig += "Z";
            // 2
            let val_5 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_5);
        }
        sig += ")Lorg/bukkit/util/RayTraceResult;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "rayTraceBlocks", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::util::RayTraceResult::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn simulation_distance(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getSimulationDistance",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //@NotNull

    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// biomes are now 3-dimensional
    /// </div>
    /// biomes are now 3-dimensional
    ///
    /// Gets the biome for the given block coordinates.
    pub fn get_biome_with_location(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
    ) -> Result<crate::block::Biome<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")Lorg/bukkit/block/Biome;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBiome", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::block::Biome::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::block::Biome::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //@NotNull

    pub fn get_biome_with_int(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::block::Biome<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        sig += "I";
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/block/Biome;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBiome", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::block::Biome::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::block::Biome::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn set_biome_with_location(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<impl Into<crate::block::Biome<'mc>>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "Lorg/bukkit/block/Biome;";
            let val_3 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_3);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "setBiome", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn set_biome_with_int(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
        arg3: std::option::Option<impl Into<crate::block::Biome<'mc>>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        sig += "I";
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        args.push(val_2);
        sig += "I";
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        args.push(val_3);
        if let Some(a) = arg3 {
            sig += "Lorg/bukkit/block/Biome;";
            let val_4 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_4);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "setBiome", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn entities(&self) -> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getEntities", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn living_entities(
        &self,
    ) -> Result<Vec<crate::entity::LivingEntity<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getLivingEntities",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::entity::LivingEntity::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn get_entities_by_class(
        &self,
        arg0: std::option::Option<Vec<jni::objects::JClass<'mc>>>,
    ) -> Result<Vec<jni::objects::JObject<'mc>>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += ")Ljava/util/Collection;";
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEntitiesByClass",
            sig.as_str(),
            args,
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut col = blackboxmc_java::JavaCollection::from_raw(&self.jni_ref(), res.l()?)?;
        let mut iter = blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), col.iterator()?)?;
        while iter.has_next()? {
            let obj = iter.next()?;
            new_vec.push(obj);
        }
        Ok(new_vec)
    }
    //

    pub fn get_entities_by_classes(
        &self,
        arg0: Vec<jni::objects::JClass<'mc>>,
    ) -> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Class;)Ljava/util/Collection;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEntitiesByClasses",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut col = blackboxmc_java::JavaCollection::from_raw(&self.jni_ref(), res.l()?)?;
        let mut iter = blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), col.iterator()?)?;
        while iter.has_next()? {
            let obj = iter.next()?;
            new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn add_plugin_chunk_ticket(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: impl Into<crate::plugin::Plugin<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(IILorg/bukkit/plugin/Plugin;)Z");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let val_3 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg2.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "addPluginChunkTicket",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn remove_plugin_chunk_ticket(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: impl Into<crate::plugin::Plugin<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(IILorg/bukkit/plugin/Plugin;)Z");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let val_3 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg2.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removePluginChunkTicket",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn plugin_chunk_tickets(
        &self,
    ) -> Result<blackboxmc_java::JavaMap<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Map;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPluginChunkTickets",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaMap::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn world_type(&self) -> Result<crate::WorldType<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/WorldType;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getWorldType", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::WorldType::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::WorldType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn ticks_per_animal_spawns(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerAnimalSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn ticks_per_monster_spawns(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerMonsterSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn ticks_per_water_spawns(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerWaterSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn ticks_per_water_ambient_spawns(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerWaterAmbientSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn ticks_per_water_underground_creature_spawns(
        &self,
    ) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerWaterUndergroundCreatureSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn ticks_per_ambient_spawns(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerAmbientSpawns",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn get_ticks_per_spawns(
        &self,
        arg0: impl Into<crate::entity::SpawnCategory<'mc>>,
    ) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)J");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTicksPerSpawns",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn is_hardcore(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isHardcore", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn monster_spawn_limit(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMonsterSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn animal_spawn_limit(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getAnimalSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn water_animal_spawn_limit(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterAnimalSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn water_ambient_spawn_limit(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterAmbientSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn water_underground_creature_spawn_limit(
        &self,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWaterUndergroundCreatureSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ambient_spawn_limit(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getAmbientSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_spawn_limit(
        &self,
        arg0: impl Into<crate::entity::SpawnCategory<'mc>>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)I");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getSpawnLimit",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Gets the temperature for the given block coordinates.
    /// <p>It is safe to run this method when the block does not exist, it will not create the block.</p>
    /// <p>This method will return the raw temperature without adjusting for block height effects.</p>
    pub fn get_temperature(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<f64, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")D";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getTemperature", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    /// Gets the humidity for the given block coordinates.
    /// <p>It is safe to run this method when the block does not exist, it will not create the block.</p>
    pub fn get_humidity(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<f64, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")D";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getHumidity", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    pub fn drop_item(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: std::option::Option<impl Into<crate::inventory::ItemStack<'mc>>>,
        arg2: std::option::Option<impl Into<crate::util::Consumer<'mc>>>,
    ) -> Result<crate::entity::Item<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Lorg/bukkit/inventory/ItemStack;";
            let val_2 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "Lorg/bukkit/util/Consumer;";
            let val_3 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/entity/Item;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "dropItem", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::Item::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn players(&self) -> Result<Vec<crate::entity::Player<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getPlayers", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::entity::Player::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn drop_item_naturally(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: std::option::Option<impl Into<crate::inventory::ItemStack<'mc>>>,
        arg2: std::option::Option<impl Into<crate::util::Consumer<'mc>>>,
    ) -> Result<crate::entity::Item<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Lorg/bukkit/inventory/ItemStack;";
            let val_2 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "Lorg/bukkit/util/Consumer;";
            let val_3 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/entity/Item;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "dropItemNaturally", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::Item::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn world_border(&self) -> Result<crate::WorldBorder<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/WorldBorder;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getWorldBorder", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldBorder::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn spawn_particle(
        &self,
        arg0: impl Into<crate::Particle<'mc>>,
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: i32,
        arg5: f64,
        arg6: f64,
        arg7: f64,
        arg8: f64,
        arg9: jni::objects::JObject<'mc>,
        arg10: std::option::Option<bool>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Particle;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "D";
        let val_2 = jni::objects::JValueGen::Double(arg1.into());
        args.push(val_2);
        sig += "D";
        let val_3 = jni::objects::JValueGen::Double(arg2.into());
        args.push(val_3);
        sig += "D";
        let val_4 = jni::objects::JValueGen::Double(arg3.into());
        args.push(val_4);
        sig += "I";
        let val_5 = jni::objects::JValueGen::Int(arg4.into());
        args.push(val_5);
        sig += "D";
        let val_6 = jni::objects::JValueGen::Double(arg5.into());
        args.push(val_6);
        sig += "D";
        let val_7 = jni::objects::JValueGen::Double(arg6.into());
        args.push(val_7);
        sig += "D";
        let val_8 = jni::objects::JValueGen::Double(arg7.into());
        args.push(val_8);
        sig += "D";
        let val_9 = jni::objects::JValueGen::Double(arg8.into());
        args.push(val_9);
        sig += "Ljava/lang/Object;";
        let val_10 = jni::objects::JValueGen::Object(arg9);
        args.push(val_10);
        if let Some(a) = arg10 {
            sig += "Z";
            // 10
            let val_11 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_11);
        }
        sig += ")V";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "spawnParticle", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn play_sound_with_entity(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: impl Into<crate::Sound<'mc>>,
        arg2: impl Into<crate::SoundCategory<'mc>>,
        arg3: f32,
        arg4: std::option::Option<f32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/Sound;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        sig += "Lorg/bukkit/SoundCategory;";
        let val_3 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg2.into().jni_object().clone())
        });
        args.push(val_3);
        sig += "F";
        let val_4 = jni::objects::JValueGen::Float(arg3.into());
        args.push(val_4);
        if let Some(a) = arg4 {
            sig += "F";
            let val_5 = jni::objects::JValueGen::Float(a.into());
            args.push(val_5);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "playSound", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn play_sound_with_location(
        &self,
        arg0: impl Into<crate::entity::Entity<'mc>>,
        arg1: impl Into<crate::Sound<'mc>>,
        arg2: impl Into<crate::SoundCategory<'mc>>,
        arg3: f32,
        arg4: std::option::Option<f32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/entity/Entity;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/Sound;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        sig += "Lorg/bukkit/SoundCategory;";
        let val_3 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg2.into().jni_object().clone())
        });
        args.push(val_3);
        sig += "F";
        let val_4 = jni::objects::JValueGen::Float(arg3.into());
        args.push(val_4);
        if let Some(a) = arg4 {
            sig += "F";
            let val_5 = jni::objects::JValueGen::Float(a.into());
            args.push(val_5);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "playSound", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn get_game_rule_value(
        &self,
        arg0: std::option::Option<impl Into<String>>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/String;";
            let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                self.jni_ref().new_string(a.into())?,
            ));
            args.push(val_1);
        }
        sig += ")Ljava/lang/String;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getGameRuleValue", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn generator(
        &self,
    ) -> Result<crate::generator::ChunkGenerator<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/generator/ChunkGenerator;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getGenerator", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::generator::ChunkGenerator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn biome_provider(
        &self,
    ) -> Result<crate::generator::BiomeProvider<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/generator/BiomeProvider;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBiomeProvider",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::generator::BiomeProvider::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn can_generate_structures(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "canGenerateStructures",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn get_highest_block_at(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<impl Into<crate::HeightMap<'mc>>>,
    ) -> Result<crate::block::Block<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "Lorg/bukkit/HeightMap;";
            let val_3 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/block/Block;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getHighestBlockAt", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::block::Block::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    /// Checks if the <a href="Chunk.html" title="interface in org.bukkit"><code>Chunk</code></a> at the specified coordinates is loaded
    pub fn is_chunk_loaded(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")Z";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isChunkLoaded", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    //

    /// Loads the <a title="interface in org.bukkit" href="Chunk.html"><code>Chunk</code></a> at the specified coordinates.
    /// <p><b>This method will keep the specified chunk loaded until one of the unload methods is manually called. Callers are advised to instead use getChunkAt which will only temporarily load the requested chunk.</b></p>
    /// <p>If the chunk does not exist, it will be generated.</p>
    /// <p>This method is analogous to <a href="#loadChunk(int,int,boolean)"><code>loadChunk(int, int, boolean)</code></a> where generate is true.</p>
    pub fn load_chunk_with_chunk(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "loadChunk", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    /// Loads the <a href="Chunk.html" title="interface in org.bukkit"><code>Chunk</code></a> at the specified coordinates.
    /// <p><b>This method will keep the specified chunk loaded until one of the unload methods is manually called. Callers are advised to instead use getChunkAt which will only temporarily load the requested chunk.</b></p>
    pub fn load_chunk_with_int(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: std::option::Option<bool>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        sig += "I";
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "Z";
            // 2
            let val_3 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_3);
        }
        sig += ")Z";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "loadChunk", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Checks if the <a href="Chunk.html" title="interface in org.bukkit"><code>Chunk</code></a> at the specified coordinates is generated
    pub fn is_chunk_generated(
        &self,
        arg0: i32,
        arg1: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(II)Z");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isChunkGenerated",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// This method was added to facilitate chunk garbage collection. As of the current Minecraft version chunks are now strictly managed and will not be loaded for more than 1 tick unless they are in use.
    /// </div>
    /// This method was added to facilitate chunk garbage collection. As of the current Minecraft version chunks are now strictly managed and will not be loaded for more than 1 tick unless they are in use.
    ///
    /// Checks if the <a href="Chunk.html" title="interface in org.bukkit"><code>Chunk</code></a> at the specified coordinates is loaded and in use by one or more players
    pub fn is_chunk_in_use(
        &self,
        arg0: i32,
        arg1: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(II)Z");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isChunkInUse",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Safely unloads and saves the <a href="Chunk.html" title="interface in org.bukkit"><code>Chunk</code></a> at the specified coordinates
    /// <p>This method is analogous to <a href="#unloadChunk(int,int,boolean)"><code>unloadChunk(int, int, boolean)</code></a> where save is true.</p>
    /// Safely queues the <a href="Chunk.html" title="interface in org.bukkit"><code>Chunk</code></a> at the specified coordinates for unloading.
    pub fn unload_chunk_with_chunk(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")Z";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "unloadChunk", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Safely unloads and optionally saves the <a href="Chunk.html" title="interface in org.bukkit"><code>Chunk</code></a> at the specified coordinates.
    pub fn unload_chunk_with_int(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: std::option::Option<bool>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        sig += "I";
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "Z";
            // 2
            let val_3 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_3);
        }
        sig += ")Z";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "unloadChunk", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Safely queues the <a title="interface in org.bukkit" href="Chunk.html"><code>Chunk</code></a> at the specified coordinates for unloading.
    pub fn unload_chunk_request(
        &self,
        arg0: i32,
        arg1: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(II)Z");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "unloadChunkRequest",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// regenerating a single chunk is not likely to produce the same chunk as before as terrain decoration may be spread across chunks. Use of this method should be avoided as it is known to produce buggy results.
    /// </div>
    /// regenerating a single chunk is not likely to produce the same chunk as before as terrain decoration may be spread across chunks. Use of this method should be avoided as it is known to produce buggy results.
    ///
    /// Regenerates the <a title="interface in org.bukkit" href="Chunk.html"><code>Chunk</code></a> at the specified coordinates
    pub fn regenerate_chunk(
        &self,
        arg0: i32,
        arg1: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(II)Z");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "regenerateChunk",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// This method is not guaranteed to work suitably across all client implementations.
    /// </div>
    /// This method is not guaranteed to work suitably across all client implementations.
    ///
    /// Resends the <a href="Chunk.html" title="interface in org.bukkit"><code>Chunk</code></a> to all clients
    pub fn refresh_chunk(&self, arg0: i32, arg1: i32) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(II)Z");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "refreshChunk",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Gets whether the chunk at the specified chunk coordinates is force loaded.
    /// <p>A force loaded chunk will not be unloaded due to lack of player activity.</p>
    pub fn is_chunk_force_loaded(
        &self,
        arg0: i32,
        arg1: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(II)Z");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isChunkForceLoaded",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets whether the chunk at the specified chunk coordinates is force loaded.
    /// <p>A force loaded chunk will not be unloaded due to lack of player activity.</p>
    pub fn set_chunk_force_loaded(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: bool,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(IIZ)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        // -2
        let val_3 = jni::objects::JValueGen::Bool(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setChunkForceLoaded",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn force_loaded_chunks(
        &self,
    ) -> Result<Vec<crate::Chunk<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Collection;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getForceLoadedChunks",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut col = blackboxmc_java::JavaCollection::from_raw(&self.jni_ref(), res.l()?)?;
        let mut iter = blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), col.iterator()?)?;
        while iter.has_next()? {
            let obj = iter.next()?;
            new_vec.push(crate::Chunk::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn remove_plugin_chunk_tickets(
        &self,
        arg0: impl Into<crate::plugin::Plugin<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/plugin/Plugin;)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removePluginChunkTickets",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn spawn_arrow(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: impl Into<crate::util::Vector<'mc>>,
        arg2: f32,
        arg3: std::option::Option<f32>,
        arg4: std::option::Option<jni::objects::JClass<'mc>>,
    ) -> Result<crate::entity::AbstractArrow<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/util/Vector;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        sig += "F";
        let val_3 = jni::objects::JValueGen::Float(arg2.into());
        args.push(val_3);
        if let Some(a) = arg3 {
            sig += "F";
            let val_4 = jni::objects::JValueGen::Float(a.into());
            args.push(val_4);
        }
        if let Some(a) = arg4 {
            sig += "Ljava/lang/Class;";
            let val_5 = jni::objects::JValueGen::Object(a.into());
            args.push(val_5);
        }
        sig += ")Lorg/bukkit/entity/AbstractArrow;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "spawnArrow", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::AbstractArrow::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn strike_lightning(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
    ) -> Result<crate::entity::LightningStrike<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Location;)Lorg/bukkit/entity/LightningStrike;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "strikeLightning",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::LightningStrike::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn strike_lightning_effect(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
    ) -> Result<crate::entity::LightningStrike<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Location;)Lorg/bukkit/entity/LightningStrike;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "strikeLightningEffect",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::LightningStrike::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn spawn_location(&self) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Location;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getSpawnLocation",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    /// Sets the spawn location of the world
    pub fn set_spawn_location_with_location(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Z";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "setSpawnLocation", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets the spawn location of the world
    pub fn set_spawn_location_with_int(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
        arg3: std::option::Option<f32>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        sig += "I";
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        args.push(val_2);
        sig += "I";
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        args.push(val_3);
        if let Some(a) = arg3 {
            sig += "F";
            let val_4 = jni::objects::JValueGen::Float(a.into());
            args.push(val_4);
        }
        sig += ")Z";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "setSpawnLocation", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn full_time(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getFullTime", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    /// Sets the in-game time on the server
    /// <p>Note that this sets the full time of the world, which may cause adverse effects such as breaking redstone clocks and any scheduled events</p>
    pub fn set_full_time(&self, arg0: i64) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(J)V");
        let val_1 = jni::objects::JValueGen::Long(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setFullTime",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn game_time(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getGameTime", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn has_storm(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasStorm", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Set whether there is a storm. A duration will be set for the new current conditions. This will implicitly call <a href="#setClearWeatherDuration(int)"><code>setClearWeatherDuration(int)</code></a> with 0 ticks to reset the world's clear weather.
    pub fn set_storm(&self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setStorm",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn weather_duration(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWeatherDuration",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Set the remaining time in ticks of the current conditions.
    pub fn set_weather_duration(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setWeatherDuration",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn is_thundering(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isThundering", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Set whether it is thundering. This will implicitly call <a href="#setClearWeatherDuration(int)"><code>setClearWeatherDuration(int)</code></a> with 0 ticks to reset the world's clear weather.
    pub fn set_thundering(&self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setThundering",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn thunder_duration(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getThunderDuration",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Set the thundering duration.
    pub fn set_thunder_duration(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setThunderDuration",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn is_clear_weather(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isClearWeather", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Set the clear weather duration. The clear weather ticks determine whether or not the world will be allowed to rain or storm. If clear weather ticks are &gt; 0, the world will not naturally do either until the duration has elapsed. This method is equivalent to calling <code>/weather clear</code> with a set amount of ticks.
    pub fn set_clear_weather_duration(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setClearWeatherDuration",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn clear_weather_duration(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getClearWeatherDuration",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Creates explosion at given coordinates with given power and optionally setting blocks on fire or breaking blocks.
    pub fn create_explosion_with_location(
        &self,
        arg0: f64,
        arg1: f64,
        arg2: f64,
        arg3: f32,
        arg4: std::option::Option<bool>,
        arg5: std::option::Option<bool>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "D";
        let val_1 = jni::objects::JValueGen::Double(arg0.into());
        args.push(val_1);
        sig += "D";
        let val_2 = jni::objects::JValueGen::Double(arg1.into());
        args.push(val_2);
        sig += "D";
        let val_3 = jni::objects::JValueGen::Double(arg2.into());
        args.push(val_3);
        sig += "F";
        let val_4 = jni::objects::JValueGen::Float(arg3.into());
        args.push(val_4);
        if let Some(a) = arg4 {
            sig += "Z";
            // 4
            let val_5 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_5);
        }
        if let Some(a) = arg5 {
            sig += "Z";
            // 4
            let val_6 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_6);
        }
        sig += ")Z";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "createExplosion", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn create_explosion_with_double(
        &self,
        arg0: f64,
        arg1: f64,
        arg2: f64,
        arg3: f32,
        arg4: bool,
        arg5: bool,
        arg6: std::option::Option<impl Into<crate::entity::Entity<'mc>>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "D";
        let val_1 = jni::objects::JValueGen::Double(arg0.into());
        args.push(val_1);
        sig += "D";
        let val_2 = jni::objects::JValueGen::Double(arg1.into());
        args.push(val_2);
        sig += "D";
        let val_3 = jni::objects::JValueGen::Double(arg2.into());
        args.push(val_3);
        sig += "F";
        let val_4 = jni::objects::JValueGen::Float(arg3.into());
        args.push(val_4);
        sig += "Z";
        // 6
        let val_5 = jni::objects::JValueGen::Bool(arg4.into());
        args.push(val_5);
        sig += "Z";
        // 6
        let val_6 = jni::objects::JValueGen::Bool(arg5.into());
        args.push(val_6);
        if let Some(a) = arg6 {
            sig += "Lorg/bukkit/entity/Entity;";
            let val_7 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_7);
        }
        sig += ")Z";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "createExplosion", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn pvp(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getPVP", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets the PVP setting for this world.
    pub fn set_pvp(&self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setPVP",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn populators(
        &self,
    ) -> Result<Vec<crate::generator::BlockPopulator<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getPopulators", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::generator::BlockPopulator::from_raw(
                &self.jni_ref(),
                obj,
            )?);
        }
        Ok(new_vec)
    }
    //

    pub fn spawn_falling_block(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: impl Into<crate::Material<'mc>>,
        arg2: std::option::Option<i8>,
    ) -> Result<crate::entity::FallingBlock<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/Material;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "B";
            let val_3 = jni::objects::JValueGen::Byte(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/entity/FallingBlock;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "spawnFallingBlock", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::FallingBlock::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    /// Get empty chunk snapshot (equivalent to all air blocks), optionally including valid biome data. Used for representing an ungenerated chunk, or for fetching only biome data without loading a chunk.
    pub fn get_empty_chunk_snapshot(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: bool,
        arg3: bool,
    ) -> Result<crate::ChunkSnapshot<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(IIZZ)Lorg/bukkit/ChunkSnapshot;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        // -2
        let val_3 = jni::objects::JValueGen::Bool(arg2.into());
        // -2
        let val_4 = jni::objects::JValueGen::Bool(arg3.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEmptyChunkSnapshot",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
                jni::objects::JValueGen::from(val_4),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::ChunkSnapshot::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    /// Sets the spawn flags for this.
    pub fn set_spawn_flags(
        &self,
        arg0: bool,
        arg1: bool,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(ZZ)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        // -2
        let val_2 = jni::objects::JValueGen::Bool(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setSpawnFlags",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn allow_animals(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getAllowAnimals", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn allow_monsters(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getAllowMonsters",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn logical_height(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getLogicalHeight",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn is_natural(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isNatural", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_bed_works(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isBedWorks", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn has_sky_light(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "hasSkyLight", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn has_ceiling(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "hasCeiling", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_piglin_safe(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isPiglinSafe", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_respawn_anchor_works(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isRespawnAnchorWorks",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn has_raids(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasRaids", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_ultra_warm(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isUltraWarm", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn sea_level(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getSeaLevel", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn keep_spawn_in_memory(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getKeepSpawnInMemory",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets whether the world's spawn area should be kept loaded into memory or not.
    pub fn set_keep_spawn_in_memory(&self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setKeepSpawnInMemory",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn is_auto_save(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isAutoSave", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets whether or not the world will automatically save
    pub fn set_auto_save(&self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setAutoSave",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn set_difficulty(
        &self,
        arg0: impl Into<crate::Difficulty<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Difficulty;)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setDifficulty",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn difficulty(&self) -> Result<crate::Difficulty<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Difficulty;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getDifficulty", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Difficulty::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Difficulty::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn world_folder(&self) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/io/File;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getWorldFolder", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.l()?)
    }
    //

    /// Sets whether the world is hardcore or not. In a hardcore world the difficulty is locked to hard.
    pub fn set_hardcore(&self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setHardcore",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    ///
    /// Sets the world's ticks per animal spawns value
    /// <p>This value determines how many ticks there are between attempts to spawn animals.</p>
    /// <p><b>Example Usage:</b></p>
    /// <ul>
    /// <li>A value of 1 will mean the server will attempt to spawn animals in this world every tick.</li>
    /// <li>A value of 400 will mean the server will attempt to spawn animals in this world every 400th tick.</li>
    /// <li>A value below 0 will be reset back to Minecraft's default.</li>
    /// </ul>
    /// <p><b>Note:</b> If set to 0, animal spawning will be disabled for this world. We recommend using <a href="#setSpawnFlags(boolean,boolean)"><code>setSpawnFlags(boolean, boolean)</code></a> to control this instead.</p>
    /// <p>Minecraft default: 400.</p>
    pub fn set_ticks_per_animal_spawns(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerAnimalSpawns",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    ///
    /// Sets the world's ticks per monster spawns value
    /// <p>This value determines how many ticks there are between attempts to spawn monsters.</p>
    /// <p><b>Example Usage:</b></p>
    /// <ul>
    /// <li>A value of 1 will mean the server will attempt to spawn monsters in this world on every tick.</li>
    /// <li>A value of 400 will mean the server will attempt to spawn monsters in this world every 400th tick.</li>
    /// <li>A value below 0 will be reset back to Minecraft's default.</li>
    /// </ul>
    /// <p><b>Note:</b> If set to 0, monsters spawning will be disabled for this world. We recommend using <a href="#setSpawnFlags(boolean,boolean)"><code>setSpawnFlags(boolean, boolean)</code></a> to control this instead.</p>
    /// <p>Minecraft default: 1.</p>
    pub fn set_ticks_per_monster_spawns(
        &self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerMonsterSpawns",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    ///
    /// Sets the world's ticks per water mob spawns value
    /// <p>This value determines how many ticks there are between attempts to spawn water mobs.</p>
    /// <p><b>Example Usage:</b></p>
    /// <ul>
    /// <li>A value of 1 will mean the server will attempt to spawn water mobs in this world on every tick.</li>
    /// <li>A value of 400 will mean the server will attempt to spawn water mobs in this world every 400th tick.</li>
    /// <li>A value below 0 will be reset back to Minecraft's default.</li>
    /// </ul>
    /// <p><b>Note:</b> If set to 0, water mobs spawning will be disabled for this world.</p>
    /// <p>Minecraft default: 1.</p>
    pub fn set_ticks_per_water_spawns(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerWaterSpawns",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    ///
    /// Sets the world's ticks per water ambient mob spawns value
    /// <p>This value determines how many ticks there are between attempts to spawn water ambient mobs.</p>
    /// <p><b>Example Usage:</b></p>
    /// <ul>
    /// <li>A value of 1 will mean the server will attempt to spawn water ambient mobs in this world on every tick.</li>
    /// <li>A value of 400 will mean the server will attempt to spawn water ambient mobs in this world every 400th tick.</li>
    /// <li>A value below 0 will be reset back to Minecraft's default.</li>
    /// </ul>
    /// <p><b>Note:</b> If set to 0, water ambient mobs spawning will be disabled for this world.</p>
    /// <p>Minecraft default: 1.</p>
    pub fn set_ticks_per_water_ambient_spawns(
        &self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerWaterAmbientSpawns",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#setTicksPerSpawns(org.bukkit.entity.SpawnCategory,int)"><code>setTicksPerSpawns(SpawnCategory, int)</code></a>
    ///
    /// Sets the world's ticks per ambient mob spawns value
    /// <p>This value determines how many ticks there are between attempts to spawn ambient mobs.</p>
    /// <p><b>Example Usage:</b></p>
    /// <ul>
    /// <li>A value of 1 will mean the server will attempt to spawn ambient mobs in this world on every tick.</li>
    /// <li>A value of 400 will mean the server will attempt to spawn ambient mobs in this world every 400th tick.</li>
    /// <li>A value below 0 will be reset back to Minecraft's default.</li>
    /// </ul>
    /// <p><b>Note:</b> If set to 0, ambient mobs spawning will be disabled for this world.</p>
    /// <p>Minecraft default: 1.</p>
    pub fn set_ticks_per_ambient_spawns(
        &self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerAmbientSpawns",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn set_ticks_per_spawns(
        &self,
        arg0: impl Into<crate::entity::SpawnCategory<'mc>>,
        arg1: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;I)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setTicksPerSpawns",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#setSpawnLimit(org.bukkit.entity.SpawnCategory,int)"><code>setSpawnLimit(SpawnCategory, int)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#setSpawnLimit(org.bukkit.entity.SpawnCategory,int)"><code>setSpawnLimit(SpawnCategory, int)</code></a>
    ///
    /// Sets the limit for number of monsters that can spawn in a chunk in this world
    /// <p><b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.</p>
    pub fn set_monster_spawn_limit(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setMonsterSpawnLimit",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#getSpawnLimit(org.bukkit.entity.SpawnCategory)"><code>getSpawnLimit(SpawnCategory)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#getSpawnLimit(org.bukkit.entity.SpawnCategory)"><code>getSpawnLimit(SpawnCategory)</code></a>
    ///
    /// Sets the limit for number of animals that can spawn in a chunk in this world
    /// <p><b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.</p>
    pub fn set_animal_spawn_limit(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setAnimalSpawnLimit",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#setSpawnLimit(org.bukkit.entity.SpawnCategory,int)"><code>setSpawnLimit(SpawnCategory, int)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#setSpawnLimit(org.bukkit.entity.SpawnCategory,int)"><code>setSpawnLimit(SpawnCategory, int)</code></a>
    ///
    /// Sets the limit for number of water animals that can spawn in a chunk in this world
    /// <p><b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.</p>
    pub fn set_water_animal_spawn_limit(
        &self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setWaterAnimalSpawnLimit",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#setSpawnLimit(org.bukkit.entity.SpawnCategory,int)"><code>setSpawnLimit(SpawnCategory, int)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#setSpawnLimit(org.bukkit.entity.SpawnCategory,int)"><code>setSpawnLimit(SpawnCategory, int)</code></a>
    ///
    /// Sets the limit for number of water underground creature that can spawn in a chunk in this world
    /// <p><b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.</p>
    pub fn set_water_underground_creature_spawn_limit(
        &self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setWaterUndergroundCreatureSpawnLimit",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#setSpawnLimit(org.bukkit.entity.SpawnCategory,int)"><code>setSpawnLimit(SpawnCategory, int)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#setSpawnLimit(org.bukkit.entity.SpawnCategory,int)"><code>setSpawnLimit(SpawnCategory, int)</code></a>
    ///
    /// Sets the limit for number of water ambient mobs that can spawn in a chunk in this world
    /// <p><b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.</p>
    pub fn set_water_ambient_spawn_limit(
        &self,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setWaterAmbientSpawnLimit",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Deprecated in favor of <a href="#setSpawnLimit(org.bukkit.entity.SpawnCategory,int)"><code>setSpawnLimit(SpawnCategory, int)</code></a>
    /// </div>
    /// Deprecated in favor of <a href="#setSpawnLimit(org.bukkit.entity.SpawnCategory,int)"><code>setSpawnLimit(SpawnCategory, int)</code></a>
    ///
    /// Sets the limit for number of ambient mobs that can spawn in a chunk in this world
    /// <p><b>Note:</b> If set to a negative number the world will use the server-wide spawn limit instead.</p>
    pub fn set_ambient_spawn_limit(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setAmbientSpawnLimit",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn set_spawn_limit(
        &self,
        arg0: impl Into<crate::entity::SpawnCategory<'mc>>,
        arg1: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;I)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setSpawnLimit",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    //

    pub fn set_game_rule_value(
        &self,
        arg0: impl Into<String>,
        arg1: impl Into<String>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;Ljava/lang/String;)Z");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg1.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setGameRuleValue",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_game_rule(
        &self,
        arg0: impl Into<String>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Z");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isGameRule",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn get_game_rule_default(
        &self,
        arg0: impl Into<crate::GameRule<'mc>>,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/GameRule;)Ljava/lang/Object;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getGameRuleDefault",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.l()?)
    }
    //

    pub fn set_game_rule(
        &self,
        arg0: impl Into<crate::GameRule<'mc>>,
        arg1: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/GameRule;Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(arg1);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setGameRule",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn locate_nearest_structure(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: impl Into<crate::StructureType<'mc>>,
        arg2: i32,
        arg3: std::option::Option<bool>,
    ) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/StructureType;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        sig += "I";
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        args.push(val_3);
        if let Some(a) = arg3 {
            sig += "Z";
            // 3
            let val_4 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_4);
        }
        sig += ")Lorg/bukkit/Location;";
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "locateNearestStructure",
            sig.as_str(),
            args,
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn locate_nearest_raid(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: i32,
    ) -> Result<crate::Raid<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Location;I)Lorg/bukkit/Raid;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "locateNearestRaid",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Raid::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn raids(&self) -> Result<Vec<crate::Raid<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getRaids", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::Raid::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn ender_dragon_battle(
        &self,
    ) -> Result<crate::boss::DragonBattle<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/boss/DragonBattle;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEnderDragonBattle",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::boss::DragonBattle::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn feature_flags(
        &self,
    ) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getFeatureFlags", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaSet::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn save(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "save", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn set_type(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
        arg3: std::option::Option<impl Into<crate::Material<'mc>>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "Lorg/bukkit/Material;";
            let val_4 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_4);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "setType", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@NotNull

    pub fn get_block_data(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/block/data/BlockData;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getBlockData", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::block::data::BlockData::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn set_block_data(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
        arg3: std::option::Option<impl Into<crate::block::data::BlockData<'mc>>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "Lorg/bukkit/block/data/BlockData;";
            let val_4 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_4);
        }
        sig += ")V";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "setBlockData", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn get_highest_block_yat_with_location(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")I";
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getHighestBlockYAt",
            sig.as_str(),
            args,
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_highest_block_yat_with_int(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: std::option::Option<impl Into<crate::HeightMap<'mc>>>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        sig += "I";
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "Lorg/bukkit/HeightMap;";
            let val_3 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_3);
        }
        sig += ")I";
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getHighestBlockYAt",
            sig.as_str(),
            args,
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //@NotNull

    pub fn get_block_state(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::block::BlockState<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/block/BlockState;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getBlockState", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::block::BlockState::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn spawn_entity(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: std::option::Option<impl Into<crate::entity::EntityType<'mc>>>,
        arg2: std::option::Option<bool>,
    ) -> Result<crate::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Lorg/bukkit/entity/EntityType;";
            let val_2 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "Z";
            // 1
            let val_3 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/entity/Entity;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "spawnEntity", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::Entity::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn spawn(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: std::option::Option<jni::objects::JClass<'mc>>,
        arg2: std::option::Option<bool>,
        arg3: std::option::Option<impl Into<crate::util::Consumer<'mc>>>,
    ) -> Result<crate::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Ljava/lang/Class;";
            let val_2 = jni::objects::JValueGen::Object(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "Z";
            // 1
            let val_3 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "Lorg/bukkit/util/Consumer;";
            let val_4 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_4);
        }
        sig += ")Lorg/bukkit/entity/Entity;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "spawn", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::Entity::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    //@NotNull

    pub fn get_type(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::Material<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/Material;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getType", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Material::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Material::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn seed(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSeed", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn uid(&self) -> Result<blackboxmc_java::JavaUUID<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/UUID;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getUID", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaUUID::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn environment(&self) -> Result<crate::WorldEnvironment<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/World$Environment;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getEnvironment", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::WorldEnvironment::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::WorldEnvironment::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn min_height(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getMinHeight", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn max_height(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getMaxHeight", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn name(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getName", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn send_plugin_message(
        &self,
        arg0: impl Into<crate::plugin::Plugin<'mc>>,
        arg1: impl Into<String>,
        arg2: Vec<i8>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/plugin/Plugin;Ljava/lang/String;B)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg1.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "sendPluginMessage",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn listening_plugin_channels(
        &self,
    ) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getListeningPluginChannels",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaSet::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn set_metadata(
        &self,
        arg0: impl Into<String>,
        arg1: impl Into<crate::metadata::MetadataValue<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;Lorg/bukkit/metadata/MetadataValue;)V");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setMetadata",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn get_metadata(
        &self,
        arg0: impl Into<String>,
    ) -> Result<Vec<crate::metadata::MetadataValue<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Ljava/util/List;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMetadata",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::metadata::MetadataValue::from_raw(
                &self.jni_ref(),
                obj,
            )?);
        }
        Ok(new_vec)
    }
    //

    pub fn has_metadata(
        &self,
        arg0: impl Into<String>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Z");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "hasMetadata",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn remove_metadata(
        &self,
        arg0: impl Into<String>,
        arg1: impl Into<crate::plugin::Plugin<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;Lorg/bukkit/plugin/Plugin;)V");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removeMetadata",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn persistent_data_container(
        &self,
    ) -> Result<crate::persistence::PersistentDataContainer<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/persistence/PersistentDataContainer;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPersistentDataContainer",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::persistence::PersistentDataContainer::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn key(&self) -> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/NamespacedKey;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getKey", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::NamespacedKey::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}
impl<'mc> Into<crate::RegionAccessor<'mc>> for World<'mc> {
    fn into(self) -> crate::RegionAccessor<'mc> {
        crate::RegionAccessor::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting World into crate::RegionAccessor")
    }
}
impl<'mc> Into<crate::generator::WorldInfo<'mc>> for World<'mc> {
    fn into(self) -> crate::generator::WorldInfo<'mc> {
        crate::generator::WorldInfo::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting World into crate::generator::WorldInfo")
    }
}
impl<'mc> Into<crate::plugin::messaging::PluginMessageRecipient<'mc>> for World<'mc> {
    fn into(self) -> crate::plugin::messaging::PluginMessageRecipient<'mc> {
        crate::plugin::messaging::PluginMessageRecipient::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting World into crate::plugin::messaging::PluginMessageRecipient")
    }
}
impl<'mc> Into<crate::metadata::Metadatable<'mc>> for World<'mc> {
    fn into(self) -> crate::metadata::Metadatable<'mc> {
        crate::metadata::Metadatable::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting World into crate::metadata::Metadatable")
    }
}
impl<'mc> Into<crate::persistence::PersistentDataHolder<'mc>> for World<'mc> {
    fn into(self) -> crate::persistence::PersistentDataHolder<'mc> {
        crate::persistence::PersistentDataHolder::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting World into crate::persistence::PersistentDataHolder")
    }
}
impl<'mc> Into<crate::Keyed<'mc>> for World<'mc> {
    fn into(self) -> crate::Keyed<'mc> {
        crate::Keyed::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting World into crate::Keyed")
    }
}
#[derive(PartialEq, Eq)]
pub enum FluidCollisionModeEnum {
    Never,
    SourceOnly,
    Always,
}
impl std::fmt::Display for FluidCollisionModeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            FluidCollisionModeEnum::Never => f.write_str("NEVER"),
            FluidCollisionModeEnum::SourceOnly => f.write_str("SOURCE_ONLY"),
            FluidCollisionModeEnum::Always => f.write_str("ALWAYS"),
        }
    }
}
impl<'mc> std::fmt::Display for FluidCollisionMode<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct FluidCollisionMode<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub FluidCollisionModeEnum,
);
impl<'mc> std::ops::Deref for FluidCollisionMode<'mc> {
    type Target = FluidCollisionModeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for FluidCollisionMode<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for FluidCollisionMode<'mc> {
    type Enum = FluidCollisionModeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate FluidCollisionMode from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/FluidCollisionMode")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a FluidCollisionMode object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> FluidCollisionMode<'mc> {
    pub const NEVER: FluidCollisionModeEnum = FluidCollisionModeEnum::Never;
    pub const SOURCE_ONLY: FluidCollisionModeEnum = FluidCollisionModeEnum::SourceOnly;
    pub const ALWAYS: FluidCollisionModeEnum = FluidCollisionModeEnum::Always;
    pub fn from_string(str: String) -> std::option::Option<FluidCollisionModeEnum> {
        match str.as_str() {
            "NEVER" => Some(FluidCollisionModeEnum::Never),
            "SOURCE_ONLY" => Some(FluidCollisionModeEnum::SourceOnly),
            "ALWAYS" => Some(FluidCollisionModeEnum::Always),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<FluidCollisionMode<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/FluidCollisionMode");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/FluidCollisionMode;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        FluidCollisionMode::from_raw(
            &jni,
            raw_obj,
            FluidCollisionMode::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a block, entity, or other object that may receive a custom name.
///
/// This is a representation of an abstract class.
pub struct Nameable<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Nameable<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Nameable<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Nameable from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Nameable")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Nameable object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Nameable<'mc> {
    //

    pub fn custom_name(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getCustomName", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn set_custom_name(
        &self,
        arg0: impl Into<String>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)V");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setCustomName",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}
#[derive(PartialEq, Eq)]
pub enum ParticleEnum {
    ExplosionNormal,
    ExplosionLarge,
    ExplosionHuge,
    FireworksSpark,
    WaterBubble,
    WaterSplash,
    WaterWake,
    Suspended,
    SuspendedDepth,
    Crit,
    CritMagic,
    SmokeNormal,
    SmokeLarge,
    Spell,
    SpellInstant,
    SpellMob,
    SpellMobAmbient,
    SpellWitch,
    DripWater,
    DripLava,
    VillagerAngry,
    VillagerHappy,
    TownAura,
    Note,
    Portal,
    EnchantmentTable,
    Flame,
    Lava,
    Cloud,
    Redstone,
    Snowball,
    SnowShovel,
    Slime,
    Heart,
    ItemCrack,
    BlockCrack,
    BlockDust,
    WaterDrop,
    MobAppearance,
    DragonBreath,
    EndRod,
    DamageIndicator,
    SweepAttack,
    FallingDust,
    Totem,
    Spit,
    SquidInk,
    BubblePop,
    CurrentDown,
    BubbleColumnUp,
    Nautilus,
    Dolphin,
    Sneeze,
    CampfireCosySmoke,
    CampfireSignalSmoke,
    Composter,
    Flash,
    FallingLava,
    LandingLava,
    FallingWater,
    DrippingHoney,
    FallingHoney,
    LandingHoney,
    FallingNectar,
    SoulFireFlame,
    Ash,
    CrimsonSpore,
    WarpedSpore,
    Soul,
    DrippingObsidianTear,
    FallingObsidianTear,
    LandingObsidianTear,
    ReversePortal,
    WhiteAsh,
    DustColorTransition,
    Vibration,
    FallingSporeBlossom,
    SporeBlossomAir,
    SmallFlame,
    Snowflake,
    DrippingDripstoneLava,
    FallingDripstoneLava,
    DrippingDripstoneWater,
    FallingDripstoneWater,
    GlowSquidInk,
    Glow,
    WaxOn,
    WaxOff,
    ElectricSpark,
    Scrape,
    SonicBoom,
    SculkSoul,
    SculkCharge,
    SculkChargePop,
    Shriek,
    CherryLeaves,
    EggCrack,
    BlockMarker,
    LegacyBlockCrack,
    LegacyBlockDust,
    LegacyFallingDust,
}
impl std::fmt::Display for ParticleEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ParticleEnum::ExplosionNormal => f.write_str("EXPLOSION_NORMAL"),
            ParticleEnum::ExplosionLarge => f.write_str("EXPLOSION_LARGE"),
            ParticleEnum::ExplosionHuge => f.write_str("EXPLOSION_HUGE"),
            ParticleEnum::FireworksSpark => f.write_str("FIREWORKS_SPARK"),
            ParticleEnum::WaterBubble => f.write_str("WATER_BUBBLE"),
            ParticleEnum::WaterSplash => f.write_str("WATER_SPLASH"),
            ParticleEnum::WaterWake => f.write_str("WATER_WAKE"),
            ParticleEnum::Suspended => f.write_str("SUSPENDED"),
            ParticleEnum::SuspendedDepth => f.write_str("SUSPENDED_DEPTH"),
            ParticleEnum::Crit => f.write_str("CRIT"),
            ParticleEnum::CritMagic => f.write_str("CRIT_MAGIC"),
            ParticleEnum::SmokeNormal => f.write_str("SMOKE_NORMAL"),
            ParticleEnum::SmokeLarge => f.write_str("SMOKE_LARGE"),
            ParticleEnum::Spell => f.write_str("SPELL"),
            ParticleEnum::SpellInstant => f.write_str("SPELL_INSTANT"),
            ParticleEnum::SpellMob => f.write_str("SPELL_MOB"),
            ParticleEnum::SpellMobAmbient => f.write_str("SPELL_MOB_AMBIENT"),
            ParticleEnum::SpellWitch => f.write_str("SPELL_WITCH"),
            ParticleEnum::DripWater => f.write_str("DRIP_WATER"),
            ParticleEnum::DripLava => f.write_str("DRIP_LAVA"),
            ParticleEnum::VillagerAngry => f.write_str("VILLAGER_ANGRY"),
            ParticleEnum::VillagerHappy => f.write_str("VILLAGER_HAPPY"),
            ParticleEnum::TownAura => f.write_str("TOWN_AURA"),
            ParticleEnum::Note => f.write_str("NOTE"),
            ParticleEnum::Portal => f.write_str("PORTAL"),
            ParticleEnum::EnchantmentTable => f.write_str("ENCHANTMENT_TABLE"),
            ParticleEnum::Flame => f.write_str("FLAME"),
            ParticleEnum::Lava => f.write_str("LAVA"),
            ParticleEnum::Cloud => f.write_str("CLOUD"),
            ParticleEnum::Redstone => f.write_str("REDSTONE"),
            ParticleEnum::Snowball => f.write_str("SNOWBALL"),
            ParticleEnum::SnowShovel => f.write_str("SNOW_SHOVEL"),
            ParticleEnum::Slime => f.write_str("SLIME"),
            ParticleEnum::Heart => f.write_str("HEART"),
            ParticleEnum::ItemCrack => f.write_str("ITEM_CRACK"),
            ParticleEnum::BlockCrack => f.write_str("BLOCK_CRACK"),
            ParticleEnum::BlockDust => f.write_str("BLOCK_DUST"),
            ParticleEnum::WaterDrop => f.write_str("WATER_DROP"),
            ParticleEnum::MobAppearance => f.write_str("MOB_APPEARANCE"),
            ParticleEnum::DragonBreath => f.write_str("DRAGON_BREATH"),
            ParticleEnum::EndRod => f.write_str("END_ROD"),
            ParticleEnum::DamageIndicator => f.write_str("DAMAGE_INDICATOR"),
            ParticleEnum::SweepAttack => f.write_str("SWEEP_ATTACK"),
            ParticleEnum::FallingDust => f.write_str("FALLING_DUST"),
            ParticleEnum::Totem => f.write_str("TOTEM"),
            ParticleEnum::Spit => f.write_str("SPIT"),
            ParticleEnum::SquidInk => f.write_str("SQUID_INK"),
            ParticleEnum::BubblePop => f.write_str("BUBBLE_POP"),
            ParticleEnum::CurrentDown => f.write_str("CURRENT_DOWN"),
            ParticleEnum::BubbleColumnUp => f.write_str("BUBBLE_COLUMN_UP"),
            ParticleEnum::Nautilus => f.write_str("NAUTILUS"),
            ParticleEnum::Dolphin => f.write_str("DOLPHIN"),
            ParticleEnum::Sneeze => f.write_str("SNEEZE"),
            ParticleEnum::CampfireCosySmoke => f.write_str("CAMPFIRE_COSY_SMOKE"),
            ParticleEnum::CampfireSignalSmoke => f.write_str("CAMPFIRE_SIGNAL_SMOKE"),
            ParticleEnum::Composter => f.write_str("COMPOSTER"),
            ParticleEnum::Flash => f.write_str("FLASH"),
            ParticleEnum::FallingLava => f.write_str("FALLING_LAVA"),
            ParticleEnum::LandingLava => f.write_str("LANDING_LAVA"),
            ParticleEnum::FallingWater => f.write_str("FALLING_WATER"),
            ParticleEnum::DrippingHoney => f.write_str("DRIPPING_HONEY"),
            ParticleEnum::FallingHoney => f.write_str("FALLING_HONEY"),
            ParticleEnum::LandingHoney => f.write_str("LANDING_HONEY"),
            ParticleEnum::FallingNectar => f.write_str("FALLING_NECTAR"),
            ParticleEnum::SoulFireFlame => f.write_str("SOUL_FIRE_FLAME"),
            ParticleEnum::Ash => f.write_str("ASH"),
            ParticleEnum::CrimsonSpore => f.write_str("CRIMSON_SPORE"),
            ParticleEnum::WarpedSpore => f.write_str("WARPED_SPORE"),
            ParticleEnum::Soul => f.write_str("SOUL"),
            ParticleEnum::DrippingObsidianTear => f.write_str("DRIPPING_OBSIDIAN_TEAR"),
            ParticleEnum::FallingObsidianTear => f.write_str("FALLING_OBSIDIAN_TEAR"),
            ParticleEnum::LandingObsidianTear => f.write_str("LANDING_OBSIDIAN_TEAR"),
            ParticleEnum::ReversePortal => f.write_str("REVERSE_PORTAL"),
            ParticleEnum::WhiteAsh => f.write_str("WHITE_ASH"),
            ParticleEnum::DustColorTransition => f.write_str("DUST_COLOR_TRANSITION"),
            ParticleEnum::Vibration => f.write_str("VIBRATION"),
            ParticleEnum::FallingSporeBlossom => f.write_str("FALLING_SPORE_BLOSSOM"),
            ParticleEnum::SporeBlossomAir => f.write_str("SPORE_BLOSSOM_AIR"),
            ParticleEnum::SmallFlame => f.write_str("SMALL_FLAME"),
            ParticleEnum::Snowflake => f.write_str("SNOWFLAKE"),
            ParticleEnum::DrippingDripstoneLava => f.write_str("DRIPPING_DRIPSTONE_LAVA"),
            ParticleEnum::FallingDripstoneLava => f.write_str("FALLING_DRIPSTONE_LAVA"),
            ParticleEnum::DrippingDripstoneWater => f.write_str("DRIPPING_DRIPSTONE_WATER"),
            ParticleEnum::FallingDripstoneWater => f.write_str("FALLING_DRIPSTONE_WATER"),
            ParticleEnum::GlowSquidInk => f.write_str("GLOW_SQUID_INK"),
            ParticleEnum::Glow => f.write_str("GLOW"),
            ParticleEnum::WaxOn => f.write_str("WAX_ON"),
            ParticleEnum::WaxOff => f.write_str("WAX_OFF"),
            ParticleEnum::ElectricSpark => f.write_str("ELECTRIC_SPARK"),
            ParticleEnum::Scrape => f.write_str("SCRAPE"),
            ParticleEnum::SonicBoom => f.write_str("SONIC_BOOM"),
            ParticleEnum::SculkSoul => f.write_str("SCULK_SOUL"),
            ParticleEnum::SculkCharge => f.write_str("SCULK_CHARGE"),
            ParticleEnum::SculkChargePop => f.write_str("SCULK_CHARGE_POP"),
            ParticleEnum::Shriek => f.write_str("SHRIEK"),
            ParticleEnum::CherryLeaves => f.write_str("CHERRY_LEAVES"),
            ParticleEnum::EggCrack => f.write_str("EGG_CRACK"),
            ParticleEnum::BlockMarker => f.write_str("BLOCK_MARKER"),
            ParticleEnum::LegacyBlockCrack => f.write_str("LEGACY_BLOCK_CRACK"),
            ParticleEnum::LegacyBlockDust => f.write_str("LEGACY_BLOCK_DUST"),
            ParticleEnum::LegacyFallingDust => f.write_str("LEGACY_FALLING_DUST"),
        }
    }
}
impl<'mc> std::fmt::Display for Particle<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Particle<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub ParticleEnum,
);
impl<'mc> std::ops::Deref for Particle<'mc> {
    type Target = ParticleEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
pub struct ParticleDustOptions<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for ParticleDustOptions<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for ParticleDustOptions<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate ParticleDustOptions from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Particle$DustOptions")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ParticleDustOptions object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> ParticleDustOptions<'mc> {
    pub fn new(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::Color<'mc>>,
        arg1: f32,
    ) -> Result<crate::ParticleDustOptions<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Color;F)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Float(arg1.into());
        let cls = jni.find_class("org/bukkit/Particle$DustOptions");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.new_object(
            cls,
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = jni.translate_error_no_gen(res)?;
        crate::ParticleDustOptions::from_raw(&jni, res)
    }
    //

    pub fn color(&self) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Color;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getColor", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Color::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn size(&self) -> Result<f32, Box<dyn std::error::Error>> {
        let sig = String::from("()F");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSize", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.f()?)
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for ParticleDustOptions<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling ParticleDustOptions.toString: {}", err),
        }
    }
}

pub struct ParticleDustTransition<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for ParticleDustTransition<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for ParticleDustTransition<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate ParticleDustTransition from null object."
            )
            .into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Particle$DustTransition")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ParticleDustTransition object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> ParticleDustTransition<'mc> {
    pub fn new(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::Color<'mc>>,
        arg1: impl Into<crate::Color<'mc>>,
        arg2: f32,
    ) -> Result<crate::ParticleDustTransition<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Color;Lorg/bukkit/Color;F)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let val_3 = jni::objects::JValueGen::Float(arg2.into());
        let cls = jni.find_class("org/bukkit/Particle$DustTransition");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.new_object(
            cls,
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = jni.translate_error_no_gen(res)?;
        crate::ParticleDustTransition::from_raw(&jni, res)
    }
    //

    pub fn to_color(&self) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Color;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getToColor", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Color::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn color(&self) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Color;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getColor", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Color::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn size(&self) -> Result<f32, Box<dyn std::error::Error>> {
        let sig = String::from("()F");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSize", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.f()?)
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for ParticleDustTransition<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling ParticleDustTransition.toString: {}", err),
        }
    }
}

impl<'mc> Into<crate::ParticleDustOptions<'mc>> for ParticleDustTransition<'mc> {
    fn into(self) -> crate::ParticleDustOptions<'mc> {
        crate::ParticleDustOptions::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting ParticleDustTransition into crate::ParticleDustOptions")
    }
}

impl<'mc> JNIRaw<'mc> for Particle<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Particle<'mc> {
    type Enum = ParticleEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Particle from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Particle")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Particle object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Particle<'mc> {
    pub const EXPLOSION_NORMAL: ParticleEnum = ParticleEnum::ExplosionNormal;
    pub const EXPLOSION_LARGE: ParticleEnum = ParticleEnum::ExplosionLarge;
    pub const EXPLOSION_HUGE: ParticleEnum = ParticleEnum::ExplosionHuge;
    pub const FIREWORKS_SPARK: ParticleEnum = ParticleEnum::FireworksSpark;
    pub const WATER_BUBBLE: ParticleEnum = ParticleEnum::WaterBubble;
    pub const WATER_SPLASH: ParticleEnum = ParticleEnum::WaterSplash;
    pub const WATER_WAKE: ParticleEnum = ParticleEnum::WaterWake;
    pub const SUSPENDED: ParticleEnum = ParticleEnum::Suspended;
    pub const SUSPENDED_DEPTH: ParticleEnum = ParticleEnum::SuspendedDepth;
    pub const CRIT: ParticleEnum = ParticleEnum::Crit;
    pub const CRIT_MAGIC: ParticleEnum = ParticleEnum::CritMagic;
    pub const SMOKE_NORMAL: ParticleEnum = ParticleEnum::SmokeNormal;
    pub const SMOKE_LARGE: ParticleEnum = ParticleEnum::SmokeLarge;
    pub const SPELL: ParticleEnum = ParticleEnum::Spell;
    pub const SPELL_INSTANT: ParticleEnum = ParticleEnum::SpellInstant;
    pub const SPELL_MOB: ParticleEnum = ParticleEnum::SpellMob;
    pub const SPELL_MOB_AMBIENT: ParticleEnum = ParticleEnum::SpellMobAmbient;
    pub const SPELL_WITCH: ParticleEnum = ParticleEnum::SpellWitch;
    pub const DRIP_WATER: ParticleEnum = ParticleEnum::DripWater;
    pub const DRIP_LAVA: ParticleEnum = ParticleEnum::DripLava;
    pub const VILLAGER_ANGRY: ParticleEnum = ParticleEnum::VillagerAngry;
    pub const VILLAGER_HAPPY: ParticleEnum = ParticleEnum::VillagerHappy;
    pub const TOWN_AURA: ParticleEnum = ParticleEnum::TownAura;
    pub const NOTE: ParticleEnum = ParticleEnum::Note;
    pub const PORTAL: ParticleEnum = ParticleEnum::Portal;
    pub const ENCHANTMENT_TABLE: ParticleEnum = ParticleEnum::EnchantmentTable;
    pub const FLAME: ParticleEnum = ParticleEnum::Flame;
    pub const LAVA: ParticleEnum = ParticleEnum::Lava;
    pub const CLOUD: ParticleEnum = ParticleEnum::Cloud;
    pub const REDSTONE: ParticleEnum = ParticleEnum::Redstone;
    pub const SNOWBALL: ParticleEnum = ParticleEnum::Snowball;
    pub const SNOW_SHOVEL: ParticleEnum = ParticleEnum::SnowShovel;
    pub const SLIME: ParticleEnum = ParticleEnum::Slime;
    pub const HEART: ParticleEnum = ParticleEnum::Heart;
    pub const ITEM_CRACK: ParticleEnum = ParticleEnum::ItemCrack;
    pub const BLOCK_CRACK: ParticleEnum = ParticleEnum::BlockCrack;
    pub const BLOCK_DUST: ParticleEnum = ParticleEnum::BlockDust;
    pub const WATER_DROP: ParticleEnum = ParticleEnum::WaterDrop;
    pub const MOB_APPEARANCE: ParticleEnum = ParticleEnum::MobAppearance;
    pub const DRAGON_BREATH: ParticleEnum = ParticleEnum::DragonBreath;
    pub const END_ROD: ParticleEnum = ParticleEnum::EndRod;
    pub const DAMAGE_INDICATOR: ParticleEnum = ParticleEnum::DamageIndicator;
    pub const SWEEP_ATTACK: ParticleEnum = ParticleEnum::SweepAttack;
    pub const FALLING_DUST: ParticleEnum = ParticleEnum::FallingDust;
    pub const TOTEM: ParticleEnum = ParticleEnum::Totem;
    pub const SPIT: ParticleEnum = ParticleEnum::Spit;
    pub const SQUID_INK: ParticleEnum = ParticleEnum::SquidInk;
    pub const BUBBLE_POP: ParticleEnum = ParticleEnum::BubblePop;
    pub const CURRENT_DOWN: ParticleEnum = ParticleEnum::CurrentDown;
    pub const BUBBLE_COLUMN_UP: ParticleEnum = ParticleEnum::BubbleColumnUp;
    pub const NAUTILUS: ParticleEnum = ParticleEnum::Nautilus;
    pub const DOLPHIN: ParticleEnum = ParticleEnum::Dolphin;
    pub const SNEEZE: ParticleEnum = ParticleEnum::Sneeze;
    pub const CAMPFIRE_COSY_SMOKE: ParticleEnum = ParticleEnum::CampfireCosySmoke;
    pub const CAMPFIRE_SIGNAL_SMOKE: ParticleEnum = ParticleEnum::CampfireSignalSmoke;
    pub const COMPOSTER: ParticleEnum = ParticleEnum::Composter;
    pub const FLASH: ParticleEnum = ParticleEnum::Flash;
    pub const FALLING_LAVA: ParticleEnum = ParticleEnum::FallingLava;
    pub const LANDING_LAVA: ParticleEnum = ParticleEnum::LandingLava;
    pub const FALLING_WATER: ParticleEnum = ParticleEnum::FallingWater;
    pub const DRIPPING_HONEY: ParticleEnum = ParticleEnum::DrippingHoney;
    pub const FALLING_HONEY: ParticleEnum = ParticleEnum::FallingHoney;
    pub const LANDING_HONEY: ParticleEnum = ParticleEnum::LandingHoney;
    pub const FALLING_NECTAR: ParticleEnum = ParticleEnum::FallingNectar;
    pub const SOUL_FIRE_FLAME: ParticleEnum = ParticleEnum::SoulFireFlame;
    pub const ASH: ParticleEnum = ParticleEnum::Ash;
    pub const CRIMSON_SPORE: ParticleEnum = ParticleEnum::CrimsonSpore;
    pub const WARPED_SPORE: ParticleEnum = ParticleEnum::WarpedSpore;
    pub const SOUL: ParticleEnum = ParticleEnum::Soul;
    pub const DRIPPING_OBSIDIAN_TEAR: ParticleEnum = ParticleEnum::DrippingObsidianTear;
    pub const FALLING_OBSIDIAN_TEAR: ParticleEnum = ParticleEnum::FallingObsidianTear;
    pub const LANDING_OBSIDIAN_TEAR: ParticleEnum = ParticleEnum::LandingObsidianTear;
    pub const REVERSE_PORTAL: ParticleEnum = ParticleEnum::ReversePortal;
    pub const WHITE_ASH: ParticleEnum = ParticleEnum::WhiteAsh;
    pub const DUST_COLOR_TRANSITION: ParticleEnum = ParticleEnum::DustColorTransition;
    pub const VIBRATION: ParticleEnum = ParticleEnum::Vibration;
    pub const FALLING_SPORE_BLOSSOM: ParticleEnum = ParticleEnum::FallingSporeBlossom;
    pub const SPORE_BLOSSOM_AIR: ParticleEnum = ParticleEnum::SporeBlossomAir;
    pub const SMALL_FLAME: ParticleEnum = ParticleEnum::SmallFlame;
    pub const SNOWFLAKE: ParticleEnum = ParticleEnum::Snowflake;
    pub const DRIPPING_DRIPSTONE_LAVA: ParticleEnum = ParticleEnum::DrippingDripstoneLava;
    pub const FALLING_DRIPSTONE_LAVA: ParticleEnum = ParticleEnum::FallingDripstoneLava;
    pub const DRIPPING_DRIPSTONE_WATER: ParticleEnum = ParticleEnum::DrippingDripstoneWater;
    pub const FALLING_DRIPSTONE_WATER: ParticleEnum = ParticleEnum::FallingDripstoneWater;
    pub const GLOW_SQUID_INK: ParticleEnum = ParticleEnum::GlowSquidInk;
    pub const GLOW: ParticleEnum = ParticleEnum::Glow;
    pub const WAX_ON: ParticleEnum = ParticleEnum::WaxOn;
    pub const WAX_OFF: ParticleEnum = ParticleEnum::WaxOff;
    pub const ELECTRIC_SPARK: ParticleEnum = ParticleEnum::ElectricSpark;
    pub const SCRAPE: ParticleEnum = ParticleEnum::Scrape;
    pub const SONIC_BOOM: ParticleEnum = ParticleEnum::SonicBoom;
    pub const SCULK_SOUL: ParticleEnum = ParticleEnum::SculkSoul;
    pub const SCULK_CHARGE: ParticleEnum = ParticleEnum::SculkCharge;
    pub const SCULK_CHARGE_POP: ParticleEnum = ParticleEnum::SculkChargePop;
    pub const SHRIEK: ParticleEnum = ParticleEnum::Shriek;
    pub const CHERRY_LEAVES: ParticleEnum = ParticleEnum::CherryLeaves;
    pub const EGG_CRACK: ParticleEnum = ParticleEnum::EggCrack;
    pub const BLOCK_MARKER: ParticleEnum = ParticleEnum::BlockMarker;
    pub const LEGACY_BLOCK_CRACK: ParticleEnum = ParticleEnum::LegacyBlockCrack;
    pub const LEGACY_BLOCK_DUST: ParticleEnum = ParticleEnum::LegacyBlockDust;
    pub const LEGACY_FALLING_DUST: ParticleEnum = ParticleEnum::LegacyFallingDust;
    pub fn from_string(str: String) -> std::option::Option<ParticleEnum> {
        match str.as_str() {
            "EXPLOSION_NORMAL" => Some(ParticleEnum::ExplosionNormal),
            "EXPLOSION_LARGE" => Some(ParticleEnum::ExplosionLarge),
            "EXPLOSION_HUGE" => Some(ParticleEnum::ExplosionHuge),
            "FIREWORKS_SPARK" => Some(ParticleEnum::FireworksSpark),
            "WATER_BUBBLE" => Some(ParticleEnum::WaterBubble),
            "WATER_SPLASH" => Some(ParticleEnum::WaterSplash),
            "WATER_WAKE" => Some(ParticleEnum::WaterWake),
            "SUSPENDED" => Some(ParticleEnum::Suspended),
            "SUSPENDED_DEPTH" => Some(ParticleEnum::SuspendedDepth),
            "CRIT" => Some(ParticleEnum::Crit),
            "CRIT_MAGIC" => Some(ParticleEnum::CritMagic),
            "SMOKE_NORMAL" => Some(ParticleEnum::SmokeNormal),
            "SMOKE_LARGE" => Some(ParticleEnum::SmokeLarge),
            "SPELL" => Some(ParticleEnum::Spell),
            "SPELL_INSTANT" => Some(ParticleEnum::SpellInstant),
            "SPELL_MOB" => Some(ParticleEnum::SpellMob),
            "SPELL_MOB_AMBIENT" => Some(ParticleEnum::SpellMobAmbient),
            "SPELL_WITCH" => Some(ParticleEnum::SpellWitch),
            "DRIP_WATER" => Some(ParticleEnum::DripWater),
            "DRIP_LAVA" => Some(ParticleEnum::DripLava),
            "VILLAGER_ANGRY" => Some(ParticleEnum::VillagerAngry),
            "VILLAGER_HAPPY" => Some(ParticleEnum::VillagerHappy),
            "TOWN_AURA" => Some(ParticleEnum::TownAura),
            "NOTE" => Some(ParticleEnum::Note),
            "PORTAL" => Some(ParticleEnum::Portal),
            "ENCHANTMENT_TABLE" => Some(ParticleEnum::EnchantmentTable),
            "FLAME" => Some(ParticleEnum::Flame),
            "LAVA" => Some(ParticleEnum::Lava),
            "CLOUD" => Some(ParticleEnum::Cloud),
            "REDSTONE" => Some(ParticleEnum::Redstone),
            "SNOWBALL" => Some(ParticleEnum::Snowball),
            "SNOW_SHOVEL" => Some(ParticleEnum::SnowShovel),
            "SLIME" => Some(ParticleEnum::Slime),
            "HEART" => Some(ParticleEnum::Heart),
            "ITEM_CRACK" => Some(ParticleEnum::ItemCrack),
            "BLOCK_CRACK" => Some(ParticleEnum::BlockCrack),
            "BLOCK_DUST" => Some(ParticleEnum::BlockDust),
            "WATER_DROP" => Some(ParticleEnum::WaterDrop),
            "MOB_APPEARANCE" => Some(ParticleEnum::MobAppearance),
            "DRAGON_BREATH" => Some(ParticleEnum::DragonBreath),
            "END_ROD" => Some(ParticleEnum::EndRod),
            "DAMAGE_INDICATOR" => Some(ParticleEnum::DamageIndicator),
            "SWEEP_ATTACK" => Some(ParticleEnum::SweepAttack),
            "FALLING_DUST" => Some(ParticleEnum::FallingDust),
            "TOTEM" => Some(ParticleEnum::Totem),
            "SPIT" => Some(ParticleEnum::Spit),
            "SQUID_INK" => Some(ParticleEnum::SquidInk),
            "BUBBLE_POP" => Some(ParticleEnum::BubblePop),
            "CURRENT_DOWN" => Some(ParticleEnum::CurrentDown),
            "BUBBLE_COLUMN_UP" => Some(ParticleEnum::BubbleColumnUp),
            "NAUTILUS" => Some(ParticleEnum::Nautilus),
            "DOLPHIN" => Some(ParticleEnum::Dolphin),
            "SNEEZE" => Some(ParticleEnum::Sneeze),
            "CAMPFIRE_COSY_SMOKE" => Some(ParticleEnum::CampfireCosySmoke),
            "CAMPFIRE_SIGNAL_SMOKE" => Some(ParticleEnum::CampfireSignalSmoke),
            "COMPOSTER" => Some(ParticleEnum::Composter),
            "FLASH" => Some(ParticleEnum::Flash),
            "FALLING_LAVA" => Some(ParticleEnum::FallingLava),
            "LANDING_LAVA" => Some(ParticleEnum::LandingLava),
            "FALLING_WATER" => Some(ParticleEnum::FallingWater),
            "DRIPPING_HONEY" => Some(ParticleEnum::DrippingHoney),
            "FALLING_HONEY" => Some(ParticleEnum::FallingHoney),
            "LANDING_HONEY" => Some(ParticleEnum::LandingHoney),
            "FALLING_NECTAR" => Some(ParticleEnum::FallingNectar),
            "SOUL_FIRE_FLAME" => Some(ParticleEnum::SoulFireFlame),
            "ASH" => Some(ParticleEnum::Ash),
            "CRIMSON_SPORE" => Some(ParticleEnum::CrimsonSpore),
            "WARPED_SPORE" => Some(ParticleEnum::WarpedSpore),
            "SOUL" => Some(ParticleEnum::Soul),
            "DRIPPING_OBSIDIAN_TEAR" => Some(ParticleEnum::DrippingObsidianTear),
            "FALLING_OBSIDIAN_TEAR" => Some(ParticleEnum::FallingObsidianTear),
            "LANDING_OBSIDIAN_TEAR" => Some(ParticleEnum::LandingObsidianTear),
            "REVERSE_PORTAL" => Some(ParticleEnum::ReversePortal),
            "WHITE_ASH" => Some(ParticleEnum::WhiteAsh),
            "DUST_COLOR_TRANSITION" => Some(ParticleEnum::DustColorTransition),
            "VIBRATION" => Some(ParticleEnum::Vibration),
            "FALLING_SPORE_BLOSSOM" => Some(ParticleEnum::FallingSporeBlossom),
            "SPORE_BLOSSOM_AIR" => Some(ParticleEnum::SporeBlossomAir),
            "SMALL_FLAME" => Some(ParticleEnum::SmallFlame),
            "SNOWFLAKE" => Some(ParticleEnum::Snowflake),
            "DRIPPING_DRIPSTONE_LAVA" => Some(ParticleEnum::DrippingDripstoneLava),
            "FALLING_DRIPSTONE_LAVA" => Some(ParticleEnum::FallingDripstoneLava),
            "DRIPPING_DRIPSTONE_WATER" => Some(ParticleEnum::DrippingDripstoneWater),
            "FALLING_DRIPSTONE_WATER" => Some(ParticleEnum::FallingDripstoneWater),
            "GLOW_SQUID_INK" => Some(ParticleEnum::GlowSquidInk),
            "GLOW" => Some(ParticleEnum::Glow),
            "WAX_ON" => Some(ParticleEnum::WaxOn),
            "WAX_OFF" => Some(ParticleEnum::WaxOff),
            "ELECTRIC_SPARK" => Some(ParticleEnum::ElectricSpark),
            "SCRAPE" => Some(ParticleEnum::Scrape),
            "SONIC_BOOM" => Some(ParticleEnum::SonicBoom),
            "SCULK_SOUL" => Some(ParticleEnum::SculkSoul),
            "SCULK_CHARGE" => Some(ParticleEnum::SculkCharge),
            "SCULK_CHARGE_POP" => Some(ParticleEnum::SculkChargePop),
            "SHRIEK" => Some(ParticleEnum::Shriek),
            "CHERRY_LEAVES" => Some(ParticleEnum::CherryLeaves),
            "EGG_CRACK" => Some(ParticleEnum::EggCrack),
            "BLOCK_MARKER" => Some(ParticleEnum::BlockMarker),
            "LEGACY_BLOCK_CRACK" => Some(ParticleEnum::LegacyBlockCrack),
            "LEGACY_BLOCK_DUST" => Some(ParticleEnum::LegacyBlockDust),
            "LEGACY_FALLING_DUST" => Some(ParticleEnum::LegacyFallingDust),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Particle<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Particle");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Particle;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Particle::from_raw(
            &jni,
            raw_obj,
            Particle::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum EntityEffectEnum {
    ArrowParticles,
    RabbitJump,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    Hurt,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    Death,
    WolfSmoke,
    WolfHearts,
    WolfShake,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    SheepEat,
    IronGolemRose,
    VillagerHeart,
    VillagerAngry,
    VillagerHappy,
    WitchMagic,
    ZombieTransform,
    FireworkExplode,
    LoveHearts,
    SquidRotate,
    EntityPoof,
    GuardianTarget,
    ShieldBlock,
    ShieldBreak,
    ArmorStandHit,
    ThornsHurt,
    IronGolemSheath,
    TotemResurrect,
    HurtDrown,
    HurtExplosion,
    DolphinFed,
    RavagerStunned,
    CatTameFail,
    CatTameSuccess,
    VillagerSplash,
    PlayerBadOmenRaid,
    HurtBerryBush,
    FoxChew,
    TeleportEnder,
    BreakEquipmentMainHand,
    BreakEquipmentOffHand,
    BreakEquipmentHelmet,
    BreakEquipmentChestplate,
    BreakEquipmentLeggings,
    BreakEquipmentBoots,
}
impl std::fmt::Display for EntityEffectEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            EntityEffectEnum::ArrowParticles => f.write_str("ARROW_PARTICLES"),
            EntityEffectEnum::RabbitJump => f.write_str("RABBIT_JUMP"),
            EntityEffectEnum::Hurt => f.write_str("HURT"),
            EntityEffectEnum::Death => f.write_str("DEATH"),
            EntityEffectEnum::WolfSmoke => f.write_str("WOLF_SMOKE"),
            EntityEffectEnum::WolfHearts => f.write_str("WOLF_HEARTS"),
            EntityEffectEnum::WolfShake => f.write_str("WOLF_SHAKE"),
            EntityEffectEnum::SheepEat => f.write_str("SHEEP_EAT"),
            EntityEffectEnum::IronGolemRose => f.write_str("IRON_GOLEM_ROSE"),
            EntityEffectEnum::VillagerHeart => f.write_str("VILLAGER_HEART"),
            EntityEffectEnum::VillagerAngry => f.write_str("VILLAGER_ANGRY"),
            EntityEffectEnum::VillagerHappy => f.write_str("VILLAGER_HAPPY"),
            EntityEffectEnum::WitchMagic => f.write_str("WITCH_MAGIC"),
            EntityEffectEnum::ZombieTransform => f.write_str("ZOMBIE_TRANSFORM"),
            EntityEffectEnum::FireworkExplode => f.write_str("FIREWORK_EXPLODE"),
            EntityEffectEnum::LoveHearts => f.write_str("LOVE_HEARTS"),
            EntityEffectEnum::SquidRotate => f.write_str("SQUID_ROTATE"),
            EntityEffectEnum::EntityPoof => f.write_str("ENTITY_POOF"),
            EntityEffectEnum::GuardianTarget => f.write_str("GUARDIAN_TARGET"),
            EntityEffectEnum::ShieldBlock => f.write_str("SHIELD_BLOCK"),
            EntityEffectEnum::ShieldBreak => f.write_str("SHIELD_BREAK"),
            EntityEffectEnum::ArmorStandHit => f.write_str("ARMOR_STAND_HIT"),
            EntityEffectEnum::ThornsHurt => f.write_str("THORNS_HURT"),
            EntityEffectEnum::IronGolemSheath => f.write_str("IRON_GOLEM_SHEATH"),
            EntityEffectEnum::TotemResurrect => f.write_str("TOTEM_RESURRECT"),
            EntityEffectEnum::HurtDrown => f.write_str("HURT_DROWN"),
            EntityEffectEnum::HurtExplosion => f.write_str("HURT_EXPLOSION"),
            EntityEffectEnum::DolphinFed => f.write_str("DOLPHIN_FED"),
            EntityEffectEnum::RavagerStunned => f.write_str("RAVAGER_STUNNED"),
            EntityEffectEnum::CatTameFail => f.write_str("CAT_TAME_FAIL"),
            EntityEffectEnum::CatTameSuccess => f.write_str("CAT_TAME_SUCCESS"),
            EntityEffectEnum::VillagerSplash => f.write_str("VILLAGER_SPLASH"),
            EntityEffectEnum::PlayerBadOmenRaid => f.write_str("PLAYER_BAD_OMEN_RAID"),
            EntityEffectEnum::HurtBerryBush => f.write_str("HURT_BERRY_BUSH"),
            EntityEffectEnum::FoxChew => f.write_str("FOX_CHEW"),
            EntityEffectEnum::TeleportEnder => f.write_str("TELEPORT_ENDER"),
            EntityEffectEnum::BreakEquipmentMainHand => f.write_str("BREAK_EQUIPMENT_MAIN_HAND"),
            EntityEffectEnum::BreakEquipmentOffHand => f.write_str("BREAK_EQUIPMENT_OFF_HAND"),
            EntityEffectEnum::BreakEquipmentHelmet => f.write_str("BREAK_EQUIPMENT_HELMET"),
            EntityEffectEnum::BreakEquipmentChestplate => f.write_str("BREAK_EQUIPMENT_CHESTPLATE"),
            EntityEffectEnum::BreakEquipmentLeggings => f.write_str("BREAK_EQUIPMENT_LEGGINGS"),
            EntityEffectEnum::BreakEquipmentBoots => f.write_str("BREAK_EQUIPMENT_BOOTS"),
        }
    }
}
impl<'mc> std::fmt::Display for EntityEffect<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct EntityEffect<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub EntityEffectEnum,
);
impl<'mc> std::ops::Deref for EntityEffect<'mc> {
    type Target = EntityEffectEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for EntityEffect<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for EntityEffect<'mc> {
    type Enum = EntityEffectEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate EntityEffect from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/EntityEffect")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a EntityEffect object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> EntityEffect<'mc> {
    pub const ARROW_PARTICLES: EntityEffectEnum = EntityEffectEnum::ArrowParticles;
    pub const RABBIT_JUMP: EntityEffectEnum = EntityEffectEnum::RabbitJump;
    pub const HURT: EntityEffectEnum = EntityEffectEnum::Hurt;
    pub const DEATH: EntityEffectEnum = EntityEffectEnum::Death;
    pub const WOLF_SMOKE: EntityEffectEnum = EntityEffectEnum::WolfSmoke;
    pub const WOLF_HEARTS: EntityEffectEnum = EntityEffectEnum::WolfHearts;
    pub const WOLF_SHAKE: EntityEffectEnum = EntityEffectEnum::WolfShake;
    pub const SHEEP_EAT: EntityEffectEnum = EntityEffectEnum::SheepEat;
    pub const IRON_GOLEM_ROSE: EntityEffectEnum = EntityEffectEnum::IronGolemRose;
    pub const VILLAGER_HEART: EntityEffectEnum = EntityEffectEnum::VillagerHeart;
    pub const VILLAGER_ANGRY: EntityEffectEnum = EntityEffectEnum::VillagerAngry;
    pub const VILLAGER_HAPPY: EntityEffectEnum = EntityEffectEnum::VillagerHappy;
    pub const WITCH_MAGIC: EntityEffectEnum = EntityEffectEnum::WitchMagic;
    pub const ZOMBIE_TRANSFORM: EntityEffectEnum = EntityEffectEnum::ZombieTransform;
    pub const FIREWORK_EXPLODE: EntityEffectEnum = EntityEffectEnum::FireworkExplode;
    pub const LOVE_HEARTS: EntityEffectEnum = EntityEffectEnum::LoveHearts;
    pub const SQUID_ROTATE: EntityEffectEnum = EntityEffectEnum::SquidRotate;
    pub const ENTITY_POOF: EntityEffectEnum = EntityEffectEnum::EntityPoof;
    pub const GUARDIAN_TARGET: EntityEffectEnum = EntityEffectEnum::GuardianTarget;
    pub const SHIELD_BLOCK: EntityEffectEnum = EntityEffectEnum::ShieldBlock;
    pub const SHIELD_BREAK: EntityEffectEnum = EntityEffectEnum::ShieldBreak;
    pub const ARMOR_STAND_HIT: EntityEffectEnum = EntityEffectEnum::ArmorStandHit;
    pub const THORNS_HURT: EntityEffectEnum = EntityEffectEnum::ThornsHurt;
    pub const IRON_GOLEM_SHEATH: EntityEffectEnum = EntityEffectEnum::IronGolemSheath;
    pub const TOTEM_RESURRECT: EntityEffectEnum = EntityEffectEnum::TotemResurrect;
    pub const HURT_DROWN: EntityEffectEnum = EntityEffectEnum::HurtDrown;
    pub const HURT_EXPLOSION: EntityEffectEnum = EntityEffectEnum::HurtExplosion;
    pub const DOLPHIN_FED: EntityEffectEnum = EntityEffectEnum::DolphinFed;
    pub const RAVAGER_STUNNED: EntityEffectEnum = EntityEffectEnum::RavagerStunned;
    pub const CAT_TAME_FAIL: EntityEffectEnum = EntityEffectEnum::CatTameFail;
    pub const CAT_TAME_SUCCESS: EntityEffectEnum = EntityEffectEnum::CatTameSuccess;
    pub const VILLAGER_SPLASH: EntityEffectEnum = EntityEffectEnum::VillagerSplash;
    pub const PLAYER_BAD_OMEN_RAID: EntityEffectEnum = EntityEffectEnum::PlayerBadOmenRaid;
    pub const HURT_BERRY_BUSH: EntityEffectEnum = EntityEffectEnum::HurtBerryBush;
    pub const FOX_CHEW: EntityEffectEnum = EntityEffectEnum::FoxChew;
    pub const TELEPORT_ENDER: EntityEffectEnum = EntityEffectEnum::TeleportEnder;
    pub const BREAK_EQUIPMENT_MAIN_HAND: EntityEffectEnum =
        EntityEffectEnum::BreakEquipmentMainHand;
    pub const BREAK_EQUIPMENT_OFF_HAND: EntityEffectEnum = EntityEffectEnum::BreakEquipmentOffHand;
    pub const BREAK_EQUIPMENT_HELMET: EntityEffectEnum = EntityEffectEnum::BreakEquipmentHelmet;
    pub const BREAK_EQUIPMENT_CHESTPLATE: EntityEffectEnum =
        EntityEffectEnum::BreakEquipmentChestplate;
    pub const BREAK_EQUIPMENT_LEGGINGS: EntityEffectEnum = EntityEffectEnum::BreakEquipmentLeggings;
    pub const BREAK_EQUIPMENT_BOOTS: EntityEffectEnum = EntityEffectEnum::BreakEquipmentBoots;
    pub fn from_string(str: String) -> std::option::Option<EntityEffectEnum> {
        match str.as_str() {
            "ARROW_PARTICLES" => Some(EntityEffectEnum::ArrowParticles),
            "RABBIT_JUMP" => Some(EntityEffectEnum::RabbitJump),
            "HURT" => Some(EntityEffectEnum::Hurt),
            "DEATH" => Some(EntityEffectEnum::Death),
            "WOLF_SMOKE" => Some(EntityEffectEnum::WolfSmoke),
            "WOLF_HEARTS" => Some(EntityEffectEnum::WolfHearts),
            "WOLF_SHAKE" => Some(EntityEffectEnum::WolfShake),
            "SHEEP_EAT" => Some(EntityEffectEnum::SheepEat),
            "IRON_GOLEM_ROSE" => Some(EntityEffectEnum::IronGolemRose),
            "VILLAGER_HEART" => Some(EntityEffectEnum::VillagerHeart),
            "VILLAGER_ANGRY" => Some(EntityEffectEnum::VillagerAngry),
            "VILLAGER_HAPPY" => Some(EntityEffectEnum::VillagerHappy),
            "WITCH_MAGIC" => Some(EntityEffectEnum::WitchMagic),
            "ZOMBIE_TRANSFORM" => Some(EntityEffectEnum::ZombieTransform),
            "FIREWORK_EXPLODE" => Some(EntityEffectEnum::FireworkExplode),
            "LOVE_HEARTS" => Some(EntityEffectEnum::LoveHearts),
            "SQUID_ROTATE" => Some(EntityEffectEnum::SquidRotate),
            "ENTITY_POOF" => Some(EntityEffectEnum::EntityPoof),
            "GUARDIAN_TARGET" => Some(EntityEffectEnum::GuardianTarget),
            "SHIELD_BLOCK" => Some(EntityEffectEnum::ShieldBlock),
            "SHIELD_BREAK" => Some(EntityEffectEnum::ShieldBreak),
            "ARMOR_STAND_HIT" => Some(EntityEffectEnum::ArmorStandHit),
            "THORNS_HURT" => Some(EntityEffectEnum::ThornsHurt),
            "IRON_GOLEM_SHEATH" => Some(EntityEffectEnum::IronGolemSheath),
            "TOTEM_RESURRECT" => Some(EntityEffectEnum::TotemResurrect),
            "HURT_DROWN" => Some(EntityEffectEnum::HurtDrown),
            "HURT_EXPLOSION" => Some(EntityEffectEnum::HurtExplosion),
            "DOLPHIN_FED" => Some(EntityEffectEnum::DolphinFed),
            "RAVAGER_STUNNED" => Some(EntityEffectEnum::RavagerStunned),
            "CAT_TAME_FAIL" => Some(EntityEffectEnum::CatTameFail),
            "CAT_TAME_SUCCESS" => Some(EntityEffectEnum::CatTameSuccess),
            "VILLAGER_SPLASH" => Some(EntityEffectEnum::VillagerSplash),
            "PLAYER_BAD_OMEN_RAID" => Some(EntityEffectEnum::PlayerBadOmenRaid),
            "HURT_BERRY_BUSH" => Some(EntityEffectEnum::HurtBerryBush),
            "FOX_CHEW" => Some(EntityEffectEnum::FoxChew),
            "TELEPORT_ENDER" => Some(EntityEffectEnum::TeleportEnder),
            "BREAK_EQUIPMENT_MAIN_HAND" => Some(EntityEffectEnum::BreakEquipmentMainHand),
            "BREAK_EQUIPMENT_OFF_HAND" => Some(EntityEffectEnum::BreakEquipmentOffHand),
            "BREAK_EQUIPMENT_HELMET" => Some(EntityEffectEnum::BreakEquipmentHelmet),
            "BREAK_EQUIPMENT_CHESTPLATE" => Some(EntityEffectEnum::BreakEquipmentChestplate),
            "BREAK_EQUIPMENT_LEGGINGS" => Some(EntityEffectEnum::BreakEquipmentLeggings),
            "BREAK_EQUIPMENT_BOOTS" => Some(EntityEffectEnum::BreakEquipmentBoots),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<EntityEffect<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/EntityEffect");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/EntityEffect;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        EntityEffect::from_raw(
            &jni,
            raw_obj,
            EntityEffect::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum GrassSpeciesEnum {
    Dead,
    Normal,
    FernLike,
}
impl std::fmt::Display for GrassSpeciesEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GrassSpeciesEnum::Dead => f.write_str("DEAD"),
            GrassSpeciesEnum::Normal => f.write_str("NORMAL"),
            GrassSpeciesEnum::FernLike => f.write_str("FERN_LIKE"),
        }
    }
}
impl<'mc> std::fmt::Display for GrassSpecies<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct GrassSpecies<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub GrassSpeciesEnum,
);
impl<'mc> std::ops::Deref for GrassSpecies<'mc> {
    type Target = GrassSpeciesEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for GrassSpecies<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for GrassSpecies<'mc> {
    type Enum = GrassSpeciesEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate GrassSpecies from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/GrassSpecies")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a GrassSpecies object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> GrassSpecies<'mc> {
    pub const DEAD: GrassSpeciesEnum = GrassSpeciesEnum::Dead;
    pub const NORMAL: GrassSpeciesEnum = GrassSpeciesEnum::Normal;
    pub const FERN_LIKE: GrassSpeciesEnum = GrassSpeciesEnum::FernLike;
    pub fn from_string(str: String) -> std::option::Option<GrassSpeciesEnum> {
        match str.as_str() {
            "DEAD" => Some(GrassSpeciesEnum::Dead),
            "NORMAL" => Some(GrassSpeciesEnum::Normal),
            "FERN_LIKE" => Some(GrassSpeciesEnum::FernLike),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<GrassSpecies<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/GrassSpecies");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/GrassSpecies;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        GrassSpecies::from_raw(
            &jni,
            raw_obj,
            GrassSpecies::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// This annotation indicates a method (and sometimes constructor) will chain its internal operations.
/// <p>This is solely meant for identifying methods that don't need to be overridden / handled manually.</p>
///
/// This is a representation of an abstract class.
pub struct Utility<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Utility<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Utility<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Utility from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Utility")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Utility object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Utility<'mc> {
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn annotation_type(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "annotationType", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
}

impl<'mc> std::string::ToString for Utility<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling Utility.toString: {}", err),
        }
    }
}

#[derive(PartialEq, Eq)]
pub enum ArtArtEnum {
    Kebab,
    Aztec,
    Alban,
    Aztec2,
    Bomb,
    Plant,
    Wasteland,
    Pool,
    Courbet,
    Sea,
    Sunset,
    Creebet,
    Wanderer,
    Graham,
    VariantMatch,
    Bust,
    Stage,
    Void,
    SkullAndRoses,
    Wither,
    Fighters,
    Pointer,
    Pigscene,
    BurningSkull,
    Skeleton,
    DonkeyKong,
    Earth,
    Wind,
    Water,
    Fire,
}
impl std::fmt::Display for ArtArtEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ArtArtEnum::Kebab => f.write_str("KEBAB"),
            ArtArtEnum::Aztec => f.write_str("AZTEC"),
            ArtArtEnum::Alban => f.write_str("ALBAN"),
            ArtArtEnum::Aztec2 => f.write_str("AZTEC2"),
            ArtArtEnum::Bomb => f.write_str("BOMB"),
            ArtArtEnum::Plant => f.write_str("PLANT"),
            ArtArtEnum::Wasteland => f.write_str("WASTELAND"),
            ArtArtEnum::Pool => f.write_str("POOL"),
            ArtArtEnum::Courbet => f.write_str("COURBET"),
            ArtArtEnum::Sea => f.write_str("SEA"),
            ArtArtEnum::Sunset => f.write_str("SUNSET"),
            ArtArtEnum::Creebet => f.write_str("CREEBET"),
            ArtArtEnum::Wanderer => f.write_str("WANDERER"),
            ArtArtEnum::Graham => f.write_str("GRAHAM"),
            ArtArtEnum::VariantMatch => f.write_str("MATCH"),
            ArtArtEnum::Bust => f.write_str("BUST"),
            ArtArtEnum::Stage => f.write_str("STAGE"),
            ArtArtEnum::Void => f.write_str("VOID"),
            ArtArtEnum::SkullAndRoses => f.write_str("SKULL_AND_ROSES"),
            ArtArtEnum::Wither => f.write_str("WITHER"),
            ArtArtEnum::Fighters => f.write_str("FIGHTERS"),
            ArtArtEnum::Pointer => f.write_str("POINTER"),
            ArtArtEnum::Pigscene => f.write_str("PIGSCENE"),
            ArtArtEnum::BurningSkull => f.write_str("BURNING_SKULL"),
            ArtArtEnum::Skeleton => f.write_str("SKELETON"),
            ArtArtEnum::DonkeyKong => f.write_str("DONKEY_KONG"),
            ArtArtEnum::Earth => f.write_str("EARTH"),
            ArtArtEnum::Wind => f.write_str("WIND"),
            ArtArtEnum::Water => f.write_str("WATER"),
            ArtArtEnum::Fire => f.write_str("FIRE"),
        }
    }
}
impl<'mc> std::fmt::Display for ArtArt<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct ArtArt<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub ArtArtEnum,
);
impl<'mc> std::ops::Deref for ArtArt<'mc> {
    type Target = ArtArtEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for ArtArt<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for ArtArt<'mc> {
    type Enum = ArtArtEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate ArtArt from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Art$Art")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ArtArt object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> ArtArt<'mc> {
    pub const KEBAB: ArtArtEnum = ArtArtEnum::Kebab;
    pub const AZTEC: ArtArtEnum = ArtArtEnum::Aztec;
    pub const ALBAN: ArtArtEnum = ArtArtEnum::Alban;
    pub const AZTEC2: ArtArtEnum = ArtArtEnum::Aztec2;
    pub const BOMB: ArtArtEnum = ArtArtEnum::Bomb;
    pub const PLANT: ArtArtEnum = ArtArtEnum::Plant;
    pub const WASTELAND: ArtArtEnum = ArtArtEnum::Wasteland;
    pub const POOL: ArtArtEnum = ArtArtEnum::Pool;
    pub const COURBET: ArtArtEnum = ArtArtEnum::Courbet;
    pub const SEA: ArtArtEnum = ArtArtEnum::Sea;
    pub const SUNSET: ArtArtEnum = ArtArtEnum::Sunset;
    pub const CREEBET: ArtArtEnum = ArtArtEnum::Creebet;
    pub const WANDERER: ArtArtEnum = ArtArtEnum::Wanderer;
    pub const GRAHAM: ArtArtEnum = ArtArtEnum::Graham;
    pub const MATCH: ArtArtEnum = ArtArtEnum::VariantMatch;
    pub const BUST: ArtArtEnum = ArtArtEnum::Bust;
    pub const STAGE: ArtArtEnum = ArtArtEnum::Stage;
    pub const VOID: ArtArtEnum = ArtArtEnum::Void;
    pub const SKULL_AND_ROSES: ArtArtEnum = ArtArtEnum::SkullAndRoses;
    pub const WITHER: ArtArtEnum = ArtArtEnum::Wither;
    pub const FIGHTERS: ArtArtEnum = ArtArtEnum::Fighters;
    pub const POINTER: ArtArtEnum = ArtArtEnum::Pointer;
    pub const PIGSCENE: ArtArtEnum = ArtArtEnum::Pigscene;
    pub const BURNING_SKULL: ArtArtEnum = ArtArtEnum::BurningSkull;
    pub const SKELETON: ArtArtEnum = ArtArtEnum::Skeleton;
    pub const DONKEY_KONG: ArtArtEnum = ArtArtEnum::DonkeyKong;
    pub const EARTH: ArtArtEnum = ArtArtEnum::Earth;
    pub const WIND: ArtArtEnum = ArtArtEnum::Wind;
    pub const WATER: ArtArtEnum = ArtArtEnum::Water;
    pub const FIRE: ArtArtEnum = ArtArtEnum::Fire;
    pub fn from_string(str: String) -> std::option::Option<ArtArtEnum> {
        match str.as_str() {
            "KEBAB" => Some(ArtArtEnum::Kebab),
            "AZTEC" => Some(ArtArtEnum::Aztec),
            "ALBAN" => Some(ArtArtEnum::Alban),
            "AZTEC2" => Some(ArtArtEnum::Aztec2),
            "BOMB" => Some(ArtArtEnum::Bomb),
            "PLANT" => Some(ArtArtEnum::Plant),
            "WASTELAND" => Some(ArtArtEnum::Wasteland),
            "POOL" => Some(ArtArtEnum::Pool),
            "COURBET" => Some(ArtArtEnum::Courbet),
            "SEA" => Some(ArtArtEnum::Sea),
            "SUNSET" => Some(ArtArtEnum::Sunset),
            "CREEBET" => Some(ArtArtEnum::Creebet),
            "WANDERER" => Some(ArtArtEnum::Wanderer),
            "GRAHAM" => Some(ArtArtEnum::Graham),
            "MATCH" => Some(ArtArtEnum::VariantMatch),
            "BUST" => Some(ArtArtEnum::Bust),
            "STAGE" => Some(ArtArtEnum::Stage),
            "VOID" => Some(ArtArtEnum::Void),
            "SKULL_AND_ROSES" => Some(ArtArtEnum::SkullAndRoses),
            "WITHER" => Some(ArtArtEnum::Wither),
            "FIGHTERS" => Some(ArtArtEnum::Fighters),
            "POINTER" => Some(ArtArtEnum::Pointer),
            "PIGSCENE" => Some(ArtArtEnum::Pigscene),
            "BURNING_SKULL" => Some(ArtArtEnum::BurningSkull),
            "SKELETON" => Some(ArtArtEnum::Skeleton),
            "DONKEY_KONG" => Some(ArtArtEnum::DonkeyKong),
            "EARTH" => Some(ArtArtEnum::Earth),
            "WIND" => Some(ArtArtEnum::Wind),
            "WATER" => Some(ArtArtEnum::Water),
            "FIRE" => Some(ArtArtEnum::Fire),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<ArtArt<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Art$Art");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Art$Art;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        ArtArt::from_raw(
            &jni,
            raw_obj,
            ArtArt::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum WorldTypeEnum {
    Normal,
    Flat,
    LargeBiomes,
    Amplified,
}
impl std::fmt::Display for WorldTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            WorldTypeEnum::Normal => f.write_str("NORMAL"),
            WorldTypeEnum::Flat => f.write_str("FLAT"),
            WorldTypeEnum::LargeBiomes => f.write_str("LARGE_BIOMES"),
            WorldTypeEnum::Amplified => f.write_str("AMPLIFIED"),
        }
    }
}
impl<'mc> std::fmt::Display for WorldType<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct WorldType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub WorldTypeEnum,
);
impl<'mc> std::ops::Deref for WorldType<'mc> {
    type Target = WorldTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for WorldType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for WorldType<'mc> {
    type Enum = WorldTypeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate WorldType from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/WorldType")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WorldType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> WorldType<'mc> {
    pub const NORMAL: WorldTypeEnum = WorldTypeEnum::Normal;
    pub const FLAT: WorldTypeEnum = WorldTypeEnum::Flat;
    pub const LARGE_BIOMES: WorldTypeEnum = WorldTypeEnum::LargeBiomes;
    pub const AMPLIFIED: WorldTypeEnum = WorldTypeEnum::Amplified;
    pub fn from_string(str: String) -> std::option::Option<WorldTypeEnum> {
        match str.as_str() {
            "NORMAL" => Some(WorldTypeEnum::Normal),
            "FLAT" => Some(WorldTypeEnum::Flat),
            "LARGE_BIOMES" => Some(WorldTypeEnum::LargeBiomes),
            "AMPLIFIED" => Some(WorldTypeEnum::Amplified),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<WorldType<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/WorldType");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/WorldType;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        WorldType::from_raw(
            &jni,
            raw_obj,
            WorldType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a generic Mojang game event.
pub struct GameEvent<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for GameEvent<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for GameEvent<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate GameEvent from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/GameEvent")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a GameEvent object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> GameEvent<'mc> {
    //

    pub fn get_by_key(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::GameEvent<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/GameEvent;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/GameEvent");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getByKey",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::GameEvent::from_raw(&jni, obj)
    }
    //

    pub fn values(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<Vec<crate::GameEvent<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Collection;");
        let cls = jni.find_class("java/util/Collection");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "values", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut col = blackboxmc_java::JavaCollection::from_raw(&jni, res.l()?)?;
        let mut iter = blackboxmc_java::JavaIterator::from_raw(&jni, col.iterator()?)?;
        while iter.has_next()? {
            let obj = iter.next()?;
            new_vec.push(crate::GameEvent::from_raw(&jni, obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn key(&self) -> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/NamespacedKey;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getKey", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::NamespacedKey::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for GameEvent<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling GameEvent.toString: {}", err),
        }
    }
}

impl<'mc> Into<crate::Keyed<'mc>> for GameEvent<'mc> {
    fn into(self) -> crate::Keyed<'mc> {
        crate::Keyed::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting GameEvent into crate::Keyed")
    }
}
/// Represents a reference to a player identity and the data belonging to a player that is stored on the disk and can, thus, be retrieved without the player needing to be online.
///
/// This is a representation of an abstract class.
pub struct OfflinePlayer<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for OfflinePlayer<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for OfflinePlayer<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate OfflinePlayer from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/OfflinePlayer")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a OfflinePlayer object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> OfflinePlayer<'mc> {
    //

    pub fn unique_id(&self) -> Result<blackboxmc_java::JavaUUID<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/UUID;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getUniqueId", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaUUID::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn is_banned(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isBanned", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn player(&self) -> Result<crate::entity::Player<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/entity/Player;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getPlayer", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::Player::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn last_death_location(&self) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Location;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getLastDeathLocation",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn bed_spawn_location(&self) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Location;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBedSpawnLocation",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn is_online(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isOnline", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn player_profile(
        &self,
    ) -> Result<crate::profile::PlayerProfile<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/profile/PlayerProfile;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPlayerProfile",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::profile::PlayerProfile::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn ban(
        &self,
        arg0: impl Into<String>,
        arg1: jni::objects::JObject<'mc>,
        arg2: std::option::Option<impl Into<String>>,
    ) -> Result<crate::BanEntry<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Ljava/lang/String;";
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        args.push(val_1);
        sig += "Ljava/time/Duration;";
        let val_2 = jni::objects::JValueGen::Object(arg1);
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "Ljava/lang/String;";
            let val_3 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                self.jni_ref().new_string(a.into())?,
            ));
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/BanEntry;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "ban", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::BanEntry::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn is_whitelisted(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isWhitelisted", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets if this player is whitelisted or not
    pub fn set_whitelisted(&self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setWhitelisted",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn first_played(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getFirstPlayed", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn last_played(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getLastPlayed", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn has_played_before(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "hasPlayedBefore", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn increment_statistic(
        &self,
        arg0: impl Into<crate::Statistic<'mc>>,
        arg1: impl Into<crate::entity::EntityType<'mc>>,
        arg2: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Statistic;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/entity/EntityType;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")V";
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "incrementStatistic",
            sig.as_str(),
            args,
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn decrement_statistic(
        &self,
        arg0: impl Into<crate::Statistic<'mc>>,
        arg1: impl Into<crate::Material<'mc>>,
        arg2: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Statistic;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/Material;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")V";
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "decrementStatistic",
            sig.as_str(),
            args,
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn set_statistic(
        &self,
        arg0: impl Into<crate::Statistic<'mc>>,
        arg1: impl Into<crate::Material<'mc>>,
        arg2: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Statistic;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/Material;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")V";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "setStatistic", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn get_statistic(
        &self,
        arg0: std::option::Option<impl Into<crate::Statistic<'mc>>>,
        arg1: std::option::Option<impl Into<crate::entity::EntityType<'mc>>>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/Statistic;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "Lorg/bukkit/entity/EntityType;";
            let val_2 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_2);
        }
        sig += ")I";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getStatistic", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn name(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getName", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn is_op(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isOp", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn set_op(&self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setOp",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn serialize(&self) -> Result<blackboxmc_java::JavaMap<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Map;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "serialize", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaMap::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}
impl<'mc> Into<crate::permissions::ServerOperator<'mc>> for OfflinePlayer<'mc> {
    fn into(self) -> crate::permissions::ServerOperator<'mc> {
        crate::permissions::ServerOperator::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting OfflinePlayer into crate::permissions::ServerOperator")
    }
}
impl<'mc> Into<crate::entity::AnimalTamer<'mc>> for OfflinePlayer<'mc> {
    fn into(self) -> crate::entity::AnimalTamer<'mc> {
        crate::entity::AnimalTamer::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting OfflinePlayer into crate::entity::AnimalTamer")
    }
}
impl<'mc> Into<crate::configuration::serialization::ConfigurationSerializable<'mc>>
    for OfflinePlayer<'mc>
{
    fn into(self) -> crate::configuration::serialization::ConfigurationSerializable<'mc> {
        crate::configuration::serialization::ConfigurationSerializable::from_raw(&self.jni_ref(), self.1).expect("Error converting OfflinePlayer into crate::configuration::serialization::ConfigurationSerializable")
    }
}

pub struct WorldSpigot<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for WorldSpigot<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for WorldSpigot<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate WorldSpigot from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/World$Spigot")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WorldSpigot object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> WorldSpigot<'mc> {
    pub fn new(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::WorldSpigot<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let cls = jni.find_class("org/bukkit/World$Spigot");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.new_object(cls, sig.as_str(), vec![]);
        let res = jni.translate_error_no_gen(res)?;
        crate::WorldSpigot::from_raw(&jni, res)
    }
    //

    pub fn strike_lightning(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: bool,
    ) -> Result<crate::entity::LightningStrike<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Location;Z)Lorg/bukkit/entity/LightningStrike;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        // -2
        let val_2 = jni::objects::JValueGen::Bool(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "strikeLightning",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::LightningStrike::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn strike_lightning_effect(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: bool,
    ) -> Result<crate::entity::LightningStrike<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Location;Z)Lorg/bukkit/entity/LightningStrike;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        // -2
        let val_2 = jni::objects::JValueGen::Bool(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "strikeLightningEffect",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::LightningStrike::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for WorldSpigot<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling WorldSpigot.toString: {}", err),
        }
    }
}

#[derive(PartialEq, Eq)]
pub enum FluidFluidEnum {
    Water,
    FlowingWater,
    Lava,
    FlowingLava,
}
impl std::fmt::Display for FluidFluidEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            FluidFluidEnum::Water => f.write_str("WATER"),
            FluidFluidEnum::FlowingWater => f.write_str("FLOWING_WATER"),
            FluidFluidEnum::Lava => f.write_str("LAVA"),
            FluidFluidEnum::FlowingLava => f.write_str("FLOWING_LAVA"),
        }
    }
}
impl<'mc> std::fmt::Display for FluidFluid<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct FluidFluid<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub FluidFluidEnum,
);
impl<'mc> std::ops::Deref for FluidFluid<'mc> {
    type Target = FluidFluidEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for FluidFluid<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for FluidFluid<'mc> {
    type Enum = FluidFluidEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate FluidFluid from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Fluid$Fluid")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a FluidFluid object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> FluidFluid<'mc> {
    pub const WATER: FluidFluidEnum = FluidFluidEnum::Water;
    pub const FLOWING_WATER: FluidFluidEnum = FluidFluidEnum::FlowingWater;
    pub const LAVA: FluidFluidEnum = FluidFluidEnum::Lava;
    pub const FLOWING_LAVA: FluidFluidEnum = FluidFluidEnum::FlowingLava;
    pub fn from_string(str: String) -> std::option::Option<FluidFluidEnum> {
        match str.as_str() {
            "WATER" => Some(FluidFluidEnum::Water),
            "FLOWING_WATER" => Some(FluidFluidEnum::FlowingWater),
            "LAVA" => Some(FluidFluidEnum::Lava),
            "FLOWING_LAVA" => Some(FluidFluidEnum::FlowingLava),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<FluidFluid<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Fluid$Fluid");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Fluid$Fluid;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        FluidFluid::from_raw(
            &jni,
            raw_obj,
            FluidFluid::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// This represents the states that server verbose for warnings may be.
#[derive(PartialEq, Eq)]
pub enum WarningWarningStateEnum {
    On,
    Off,
    Default,
}
impl std::fmt::Display for WarningWarningStateEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            WarningWarningStateEnum::On => f.write_str("ON"),
            WarningWarningStateEnum::Off => f.write_str("OFF"),
            WarningWarningStateEnum::Default => f.write_str("DEFAULT"),
        }
    }
}
impl<'mc> std::fmt::Display for WarningWarningState<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct WarningWarningState<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub WarningWarningStateEnum,
);
impl<'mc> std::ops::Deref for WarningWarningState<'mc> {
    type Target = WarningWarningStateEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for WarningWarningState<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for WarningWarningState<'mc> {
    type Enum = WarningWarningStateEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate WarningWarningState from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Warning$WarningState")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WarningWarningState object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> WarningWarningState<'mc> {
    pub const ON: WarningWarningStateEnum = WarningWarningStateEnum::On;
    pub const OFF: WarningWarningStateEnum = WarningWarningStateEnum::Off;
    pub const DEFAULT: WarningWarningStateEnum = WarningWarningStateEnum::Default;
    pub fn from_string(str: String) -> std::option::Option<WarningWarningStateEnum> {
        match str.as_str() {
            "ON" => Some(WarningWarningStateEnum::On),
            "OFF" => Some(WarningWarningStateEnum::Off),
            "DEFAULT" => Some(WarningWarningStateEnum::Default),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<WarningWarningState<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Warning$WarningState");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Warning$WarningState;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        WarningWarningState::from_raw(
            &jni,
            raw_obj,
            WarningWarningState::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }

    //

    pub fn print_for(
        &self,
        arg0: impl Into<crate::Warning<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Warning;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "printFor",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn value(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<crate::WarningWarningState<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/Warning$WarningState;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("org/bukkit/Warning$WarningState");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "value",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::WarningWarningState::from_raw(
            &jni,
            raw_obj,
            crate::WarningWarningState::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //
}
#[derive(PartialEq, Eq)]
pub enum SoundCategoryEnum {
    Master,
    Music,
    Records,
    Weather,
    Blocks,
    Hostile,
    Neutral,
    Players,
    Ambient,
    Voice,
}
impl std::fmt::Display for SoundCategoryEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            SoundCategoryEnum::Master => f.write_str("MASTER"),
            SoundCategoryEnum::Music => f.write_str("MUSIC"),
            SoundCategoryEnum::Records => f.write_str("RECORDS"),
            SoundCategoryEnum::Weather => f.write_str("WEATHER"),
            SoundCategoryEnum::Blocks => f.write_str("BLOCKS"),
            SoundCategoryEnum::Hostile => f.write_str("HOSTILE"),
            SoundCategoryEnum::Neutral => f.write_str("NEUTRAL"),
            SoundCategoryEnum::Players => f.write_str("PLAYERS"),
            SoundCategoryEnum::Ambient => f.write_str("AMBIENT"),
            SoundCategoryEnum::Voice => f.write_str("VOICE"),
        }
    }
}
impl<'mc> std::fmt::Display for SoundCategory<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct SoundCategory<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub SoundCategoryEnum,
);
impl<'mc> std::ops::Deref for SoundCategory<'mc> {
    type Target = SoundCategoryEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for SoundCategory<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for SoundCategory<'mc> {
    type Enum = SoundCategoryEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate SoundCategory from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/SoundCategory")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a SoundCategory object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> SoundCategory<'mc> {
    pub const MASTER: SoundCategoryEnum = SoundCategoryEnum::Master;
    pub const MUSIC: SoundCategoryEnum = SoundCategoryEnum::Music;
    pub const RECORDS: SoundCategoryEnum = SoundCategoryEnum::Records;
    pub const WEATHER: SoundCategoryEnum = SoundCategoryEnum::Weather;
    pub const BLOCKS: SoundCategoryEnum = SoundCategoryEnum::Blocks;
    pub const HOSTILE: SoundCategoryEnum = SoundCategoryEnum::Hostile;
    pub const NEUTRAL: SoundCategoryEnum = SoundCategoryEnum::Neutral;
    pub const PLAYERS: SoundCategoryEnum = SoundCategoryEnum::Players;
    pub const AMBIENT: SoundCategoryEnum = SoundCategoryEnum::Ambient;
    pub const VOICE: SoundCategoryEnum = SoundCategoryEnum::Voice;
    pub fn from_string(str: String) -> std::option::Option<SoundCategoryEnum> {
        match str.as_str() {
            "MASTER" => Some(SoundCategoryEnum::Master),
            "MUSIC" => Some(SoundCategoryEnum::Music),
            "RECORDS" => Some(SoundCategoryEnum::Records),
            "WEATHER" => Some(SoundCategoryEnum::Weather),
            "BLOCKS" => Some(SoundCategoryEnum::Blocks),
            "HOSTILE" => Some(SoundCategoryEnum::Hostile),
            "NEUTRAL" => Some(SoundCategoryEnum::Neutral),
            "PLAYERS" => Some(SoundCategoryEnum::Players),
            "AMBIENT" => Some(SoundCategoryEnum::Ambient),
            "VOICE" => Some(SoundCategoryEnum::Voice),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<SoundCategory<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/SoundCategory");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/SoundCategory;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        SoundCategory::from_raw(
            &jni,
            raw_obj,
            SoundCategory::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum HeightMapEnum {
    MotionBlocking,
    MotionBlockingNoLeaves,
    OceanFloor,
    OceanFloorWg,
    WorldSurface,
    WorldSurfaceWg,
}
impl std::fmt::Display for HeightMapEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            HeightMapEnum::MotionBlocking => f.write_str("MOTION_BLOCKING"),
            HeightMapEnum::MotionBlockingNoLeaves => f.write_str("MOTION_BLOCKING_NO_LEAVES"),
            HeightMapEnum::OceanFloor => f.write_str("OCEAN_FLOOR"),
            HeightMapEnum::OceanFloorWg => f.write_str("OCEAN_FLOOR_WG"),
            HeightMapEnum::WorldSurface => f.write_str("WORLD_SURFACE"),
            HeightMapEnum::WorldSurfaceWg => f.write_str("WORLD_SURFACE_WG"),
        }
    }
}
impl<'mc> std::fmt::Display for HeightMap<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct HeightMap<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub HeightMapEnum,
);
impl<'mc> std::ops::Deref for HeightMap<'mc> {
    type Target = HeightMapEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for HeightMap<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for HeightMap<'mc> {
    type Enum = HeightMapEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate HeightMap from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/HeightMap")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a HeightMap object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> HeightMap<'mc> {
    pub const MOTION_BLOCKING: HeightMapEnum = HeightMapEnum::MotionBlocking;
    pub const MOTION_BLOCKING_NO_LEAVES: HeightMapEnum = HeightMapEnum::MotionBlockingNoLeaves;
    pub const OCEAN_FLOOR: HeightMapEnum = HeightMapEnum::OceanFloor;
    pub const OCEAN_FLOOR_WG: HeightMapEnum = HeightMapEnum::OceanFloorWg;
    pub const WORLD_SURFACE: HeightMapEnum = HeightMapEnum::WorldSurface;
    pub const WORLD_SURFACE_WG: HeightMapEnum = HeightMapEnum::WorldSurfaceWg;
    pub fn from_string(str: String) -> std::option::Option<HeightMapEnum> {
        match str.as_str() {
            "MOTION_BLOCKING" => Some(HeightMapEnum::MotionBlocking),
            "MOTION_BLOCKING_NO_LEAVES" => Some(HeightMapEnum::MotionBlockingNoLeaves),
            "OCEAN_FLOOR" => Some(HeightMapEnum::OceanFloor),
            "OCEAN_FLOOR_WG" => Some(HeightMapEnum::OceanFloorWg),
            "WORLD_SURFACE" => Some(HeightMapEnum::WorldSurface),
            "WORLD_SURFACE_WG" => Some(HeightMapEnum::WorldSurfaceWg),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<HeightMap<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/HeightMap");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/HeightMap;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        HeightMap::from_raw(
            &jni,
            raw_obj,
            HeightMap::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// A container for a color palette. This class is immutable; the set methods return a new color. The color names listed as fields are HTML4 standards, but subject to change.
pub struct Color<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Color<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Color<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Color from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Color")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Color object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Color<'mc> {
    //

    pub fn serialize(&self) -> Result<blackboxmc_java::JavaMap<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Map;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "serialize", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaMap::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn deserialize(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<blackboxmc_java::JavaMap<'mc>>,
    ) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/util/Map;)Lorg/bukkit/Color;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/Color");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "deserialize",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::Color::from_raw(&jni, obj)
    }
    //@NotNull

    /// Creates a new Color object from a red, green, and blue
    pub fn from_rgb(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/Color;";
        let cls = jni.find_class("org/bukkit/Color");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "fromRGB", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::Color::from_raw(&jni, obj)
    }
    //@NotNull

    /// Creates a new Color object from an alpha, red, green, and blue
    pub fn from_argb(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
        arg3: std::option::Option<i32>,
    ) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "I";
            let val_4 = jni::objects::JValueGen::Int(a.into());
            args.push(val_4);
        }
        sig += ")Lorg/bukkit/Color;";
        let cls = jni.find_class("org/bukkit/Color");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "fromARGB", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::Color::from_raw(&jni, obj)
    }
    //@NotNull

    /// Creates a new Color object from a blue, green, and red
    pub fn from_bgr(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/Color;";
        let cls = jni.find_class("org/bukkit/Color");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "fromBGR", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::Color::from_raw(&jni, obj)
    }
    //

    pub fn alpha(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getAlpha", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //@NotNull

    /// Creates a new Color object with specified component
    pub fn set_alpha(&self, arg0: i32) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(I)Lorg/bukkit/Color;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setAlpha",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Color::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn red(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getRed", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn green(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getGreen", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn blue(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlue", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //@NotNull

    /// Creates a new Color object with specified component
    pub fn set_red(&self, arg0: i32) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(I)Lorg/bukkit/Color;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setRed",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Color::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    /// Creates a new Color object with specified component
    pub fn set_green(&self, arg0: i32) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(I)Lorg/bukkit/Color;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setGreen",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Color::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    /// Creates a new Color object with specified component
    pub fn set_blue(&self, arg0: i32) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(I)Lorg/bukkit/Color;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setBlue",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Color::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn as_rgb(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "asRGB", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn as_argb(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "asARGB", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn as_bgr(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "asBGR", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn mix_dyes(
        &self,
        arg0: Vec<impl Into<crate::DyeColor<'mc>>>,
    ) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/DyeColor;)Lorg/bukkit/Color;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "mixDyes", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Color::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn mix_colors(
        &self,
        arg0: Vec<impl Into<crate::Color<'mc>>>,
    ) -> Result<crate::Color<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Color;)Lorg/bukkit/Color;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "mixColors", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Color::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for Color<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling Color.toString: {}", err),
        }
    }
}

impl<'mc> Into<crate::configuration::serialization::ConfigurationSerializable<'mc>> for Color<'mc> {
    fn into(self) -> crate::configuration::serialization::ConfigurationSerializable<'mc> {
        crate::configuration::serialization::ConfigurationSerializable::from_raw(&self.jni_ref(), self.1).expect("Error converting Color into crate::configuration::serialization::ConfigurationSerializable")
    }
}
#[derive(PartialEq, Eq)]
pub enum FluidEnum {
    Water,
    FlowingWater,
    Lava,
    FlowingLava,
}
impl std::fmt::Display for FluidEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            FluidEnum::Water => f.write_str("WATER"),
            FluidEnum::FlowingWater => f.write_str("FLOWING_WATER"),
            FluidEnum::Lava => f.write_str("LAVA"),
            FluidEnum::FlowingLava => f.write_str("FLOWING_LAVA"),
        }
    }
}
impl<'mc> std::fmt::Display for Fluid<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Fluid<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub FluidEnum,
);
impl<'mc> std::ops::Deref for Fluid<'mc> {
    type Target = FluidEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for Fluid<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Fluid<'mc> {
    type Enum = FluidEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Fluid from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Fluid")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Fluid object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Fluid<'mc> {
    pub const WATER: FluidEnum = FluidEnum::Water;
    pub const FLOWING_WATER: FluidEnum = FluidEnum::FlowingWater;
    pub const LAVA: FluidEnum = FluidEnum::Lava;
    pub const FLOWING_LAVA: FluidEnum = FluidEnum::FlowingLava;
    pub fn from_string(str: String) -> std::option::Option<FluidEnum> {
        match str.as_str() {
            "WATER" => Some(FluidEnum::Water),
            "FLOWING_WATER" => Some(FluidEnum::FlowingWater),
            "LAVA" => Some(FluidEnum::Lava),
            "FLOWING_LAVA" => Some(FluidEnum::FlowingLava),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Fluid<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Fluid");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Fluid;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Fluid::from_raw(
            &jni,
            raw_obj,
            Fluid::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum CropStateEnum {
    Seeded,
    Germinated,
    VerySmall,
    Small,
    Medium,
    Tall,
    VeryTall,
    Ripe,
}
impl std::fmt::Display for CropStateEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            CropStateEnum::Seeded => f.write_str("SEEDED"),
            CropStateEnum::Germinated => f.write_str("GERMINATED"),
            CropStateEnum::VerySmall => f.write_str("VERY_SMALL"),
            CropStateEnum::Small => f.write_str("SMALL"),
            CropStateEnum::Medium => f.write_str("MEDIUM"),
            CropStateEnum::Tall => f.write_str("TALL"),
            CropStateEnum::VeryTall => f.write_str("VERY_TALL"),
            CropStateEnum::Ripe => f.write_str("RIPE"),
        }
    }
}
impl<'mc> std::fmt::Display for CropState<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct CropState<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub CropStateEnum,
);
impl<'mc> std::ops::Deref for CropState<'mc> {
    type Target = CropStateEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for CropState<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for CropState<'mc> {
    type Enum = CropStateEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate CropState from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/CropState")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a CropState object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> CropState<'mc> {
    pub const SEEDED: CropStateEnum = CropStateEnum::Seeded;
    pub const GERMINATED: CropStateEnum = CropStateEnum::Germinated;
    pub const VERY_SMALL: CropStateEnum = CropStateEnum::VerySmall;
    pub const SMALL: CropStateEnum = CropStateEnum::Small;
    pub const MEDIUM: CropStateEnum = CropStateEnum::Medium;
    pub const TALL: CropStateEnum = CropStateEnum::Tall;
    pub const VERY_TALL: CropStateEnum = CropStateEnum::VeryTall;
    pub const RIPE: CropStateEnum = CropStateEnum::Ripe;
    pub fn from_string(str: String) -> std::option::Option<CropStateEnum> {
        match str.as_str() {
            "SEEDED" => Some(CropStateEnum::Seeded),
            "GERMINATED" => Some(CropStateEnum::Germinated),
            "VERY_SMALL" => Some(CropStateEnum::VerySmall),
            "SMALL" => Some(CropStateEnum::Small),
            "MEDIUM" => Some(CropStateEnum::Medium),
            "TALL" => Some(CropStateEnum::Tall),
            "VERY_TALL" => Some(CropStateEnum::VeryTall),
            "RIPE" => Some(CropStateEnum::Ripe),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<CropState<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/CropState");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/CropState;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        CropState::from_raw(
            &jni,
            raw_obj,
            CropState::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum NetherWartsStateEnum {
    Seeded,
    StageOne,
    StageTwo,
    Ripe,
}
impl std::fmt::Display for NetherWartsStateEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            NetherWartsStateEnum::Seeded => f.write_str("SEEDED"),
            NetherWartsStateEnum::StageOne => f.write_str("STAGE_ONE"),
            NetherWartsStateEnum::StageTwo => f.write_str("STAGE_TWO"),
            NetherWartsStateEnum::Ripe => f.write_str("RIPE"),
        }
    }
}
impl<'mc> std::fmt::Display for NetherWartsState<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct NetherWartsState<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub NetherWartsStateEnum,
);
impl<'mc> std::ops::Deref for NetherWartsState<'mc> {
    type Target = NetherWartsStateEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for NetherWartsState<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for NetherWartsState<'mc> {
    type Enum = NetherWartsStateEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate NetherWartsState from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/NetherWartsState")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a NetherWartsState object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> NetherWartsState<'mc> {
    pub const SEEDED: NetherWartsStateEnum = NetherWartsStateEnum::Seeded;
    pub const STAGE_ONE: NetherWartsStateEnum = NetherWartsStateEnum::StageOne;
    pub const STAGE_TWO: NetherWartsStateEnum = NetherWartsStateEnum::StageTwo;
    pub const RIPE: NetherWartsStateEnum = NetherWartsStateEnum::Ripe;
    pub fn from_string(str: String) -> std::option::Option<NetherWartsStateEnum> {
        match str.as_str() {
            "SEEDED" => Some(NetherWartsStateEnum::Seeded),
            "STAGE_ONE" => Some(NetherWartsStateEnum::StageOne),
            "STAGE_TWO" => Some(NetherWartsStateEnum::StageTwo),
            "RIPE" => Some(NetherWartsStateEnum::Ripe),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<NetherWartsState<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/NetherWartsState");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/NetherWartsState;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        NetherWartsState::from_raw(
            &jni,
            raw_obj,
            NetherWartsState::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum SoundEnum {
    AmbientBasaltDeltasAdditions,
    AmbientBasaltDeltasLoop,
    AmbientBasaltDeltasMood,
    AmbientCave,
    AmbientCrimsonForestAdditions,
    AmbientCrimsonForestLoop,
    AmbientCrimsonForestMood,
    AmbientNetherWastesAdditions,
    AmbientNetherWastesLoop,
    AmbientNetherWastesMood,
    AmbientSoulSandValleyAdditions,
    AmbientSoulSandValleyLoop,
    AmbientSoulSandValleyMood,
    AmbientUnderwaterEnter,
    AmbientUnderwaterExit,
    AmbientUnderwaterLoop,
    AmbientUnderwaterLoopAdditions,
    AmbientUnderwaterLoopAdditionsRare,
    AmbientUnderwaterLoopAdditionsUltraRare,
    AmbientWarpedForestAdditions,
    AmbientWarpedForestLoop,
    AmbientWarpedForestMood,
    BlockAmethystBlockBreak,
    BlockAmethystBlockChime,
    BlockAmethystBlockFall,
    BlockAmethystBlockHit,
    BlockAmethystBlockPlace,
    BlockAmethystBlockResonate,
    BlockAmethystBlockStep,
    BlockAmethystClusterBreak,
    BlockAmethystClusterFall,
    BlockAmethystClusterHit,
    BlockAmethystClusterPlace,
    BlockAmethystClusterStep,
    BlockAncientDebrisBreak,
    BlockAncientDebrisFall,
    BlockAncientDebrisHit,
    BlockAncientDebrisPlace,
    BlockAncientDebrisStep,
    BlockAnvilBreak,
    BlockAnvilDestroy,
    BlockAnvilFall,
    BlockAnvilHit,
    BlockAnvilLand,
    BlockAnvilPlace,
    BlockAnvilStep,
    BlockAnvilUse,
    BlockAzaleaBreak,
    BlockAzaleaFall,
    BlockAzaleaHit,
    BlockAzaleaLeavesBreak,
    BlockAzaleaLeavesFall,
    BlockAzaleaLeavesHit,
    BlockAzaleaLeavesPlace,
    BlockAzaleaLeavesStep,
    BlockAzaleaPlace,
    BlockAzaleaStep,
    BlockBambooBreak,
    BlockBambooFall,
    BlockBambooHit,
    BlockBambooPlace,
    BlockBambooSaplingBreak,
    BlockBambooSaplingHit,
    BlockBambooSaplingPlace,
    BlockBambooStep,
    BlockBambooWoodBreak,
    BlockBambooWoodButtonClickOff,
    BlockBambooWoodButtonClickOn,
    BlockBambooWoodDoorClose,
    BlockBambooWoodDoorOpen,
    BlockBambooWoodFall,
    BlockBambooWoodFenceGateClose,
    BlockBambooWoodFenceGateOpen,
    BlockBambooWoodHangingSignBreak,
    BlockBambooWoodHangingSignFall,
    BlockBambooWoodHangingSignHit,
    BlockBambooWoodHangingSignPlace,
    BlockBambooWoodHangingSignStep,
    BlockBambooWoodHit,
    BlockBambooWoodPlace,
    BlockBambooWoodPressurePlateClickOff,
    BlockBambooWoodPressurePlateClickOn,
    BlockBambooWoodStep,
    BlockBambooWoodTrapdoorClose,
    BlockBambooWoodTrapdoorOpen,
    BlockBarrelClose,
    BlockBarrelOpen,
    BlockBasaltBreak,
    BlockBasaltFall,
    BlockBasaltHit,
    BlockBasaltPlace,
    BlockBasaltStep,
    BlockBeaconActivate,
    BlockBeaconAmbient,
    BlockBeaconDeactivate,
    BlockBeaconPowerSelect,
    BlockBeehiveDrip,
    BlockBeehiveEnter,
    BlockBeehiveExit,
    BlockBeehiveShear,
    BlockBeehiveWork,
    BlockBellResonate,
    BlockBellUse,
    BlockBigDripleafBreak,
    BlockBigDripleafFall,
    BlockBigDripleafHit,
    BlockBigDripleafPlace,
    BlockBigDripleafStep,
    BlockBigDripleafTiltDown,
    BlockBigDripleafTiltUp,
    BlockBlastfurnaceFireCrackle,
    BlockBoneBlockBreak,
    BlockBoneBlockFall,
    BlockBoneBlockHit,
    BlockBoneBlockPlace,
    BlockBoneBlockStep,
    BlockBrewingStandBrew,
    BlockBubbleColumnBubblePop,
    BlockBubbleColumnUpwardsAmbient,
    BlockBubbleColumnUpwardsInside,
    BlockBubbleColumnWhirlpoolAmbient,
    BlockBubbleColumnWhirlpoolInside,
    BlockCakeAddCandle,
    BlockCalciteBreak,
    BlockCalciteFall,
    BlockCalciteHit,
    BlockCalcitePlace,
    BlockCalciteStep,
    BlockCampfireCrackle,
    BlockCandleAmbient,
    BlockCandleBreak,
    BlockCandleExtinguish,
    BlockCandleFall,
    BlockCandleHit,
    BlockCandlePlace,
    BlockCandleStep,
    BlockCaveVinesBreak,
    BlockCaveVinesFall,
    BlockCaveVinesHit,
    BlockCaveVinesPickBerries,
    BlockCaveVinesPlace,
    BlockCaveVinesStep,
    BlockChainBreak,
    BlockChainFall,
    BlockChainHit,
    BlockChainPlace,
    BlockChainStep,
    BlockCherryLeavesBreak,
    BlockCherryLeavesFall,
    BlockCherryLeavesHit,
    BlockCherryLeavesPlace,
    BlockCherryLeavesStep,
    BlockCherrySaplingBreak,
    BlockCherrySaplingFall,
    BlockCherrySaplingHit,
    BlockCherrySaplingPlace,
    BlockCherrySaplingStep,
    BlockCherryWoodBreak,
    BlockCherryWoodButtonClickOff,
    BlockCherryWoodButtonClickOn,
    BlockCherryWoodDoorClose,
    BlockCherryWoodDoorOpen,
    BlockCherryWoodFall,
    BlockCherryWoodFenceGateClose,
    BlockCherryWoodFenceGateOpen,
    BlockCherryWoodHangingSignBreak,
    BlockCherryWoodHangingSignFall,
    BlockCherryWoodHangingSignHit,
    BlockCherryWoodHangingSignPlace,
    BlockCherryWoodHangingSignStep,
    BlockCherryWoodHit,
    BlockCherryWoodPlace,
    BlockCherryWoodPressurePlateClickOff,
    BlockCherryWoodPressurePlateClickOn,
    BlockCherryWoodStep,
    BlockCherryWoodTrapdoorClose,
    BlockCherryWoodTrapdoorOpen,
    BlockChestClose,
    BlockChestLocked,
    BlockChestOpen,
    BlockChiseledBookshelfBreak,
    BlockChiseledBookshelfFall,
    BlockChiseledBookshelfHit,
    BlockChiseledBookshelfInsert,
    BlockChiseledBookshelfInsertEnchanted,
    BlockChiseledBookshelfPickup,
    BlockChiseledBookshelfPickupEnchanted,
    BlockChiseledBookshelfPlace,
    BlockChiseledBookshelfStep,
    BlockChorusFlowerDeath,
    BlockChorusFlowerGrow,
    BlockComparatorClick,
    BlockComposterEmpty,
    BlockComposterFill,
    BlockComposterFillSuccess,
    BlockComposterReady,
    BlockConduitActivate,
    BlockConduitAmbient,
    BlockConduitAmbientShort,
    BlockConduitAttackTarget,
    BlockConduitDeactivate,
    BlockCopperBreak,
    BlockCopperFall,
    BlockCopperHit,
    BlockCopperPlace,
    BlockCopperStep,
    BlockCoralBlockBreak,
    BlockCoralBlockFall,
    BlockCoralBlockHit,
    BlockCoralBlockPlace,
    BlockCoralBlockStep,
    BlockCropBreak,
    BlockDecoratedPotBreak,
    BlockDecoratedPotFall,
    BlockDecoratedPotHit,
    BlockDecoratedPotPlace,
    BlockDecoratedPotShatter,
    BlockDecoratedPotStep,
    BlockDeepslateBreak,
    BlockDeepslateBricksBreak,
    BlockDeepslateBricksFall,
    BlockDeepslateBricksHit,
    BlockDeepslateBricksPlace,
    BlockDeepslateBricksStep,
    BlockDeepslateFall,
    BlockDeepslateHit,
    BlockDeepslatePlace,
    BlockDeepslateStep,
    BlockDeepslateTilesBreak,
    BlockDeepslateTilesFall,
    BlockDeepslateTilesHit,
    BlockDeepslateTilesPlace,
    BlockDeepslateTilesStep,
    BlockDispenserDispense,
    BlockDispenserFail,
    BlockDispenserLaunch,
    BlockDripstoneBlockBreak,
    BlockDripstoneBlockFall,
    BlockDripstoneBlockHit,
    BlockDripstoneBlockPlace,
    BlockDripstoneBlockStep,
    BlockEnchantmentTableUse,
    BlockEnderChestClose,
    BlockEnderChestOpen,
    BlockEndGatewaySpawn,
    BlockEndPortalFrameFill,
    BlockEndPortalSpawn,
    BlockFenceGateClose,
    BlockFenceGateOpen,
    BlockFireAmbient,
    BlockFireExtinguish,
    BlockFloweringAzaleaBreak,
    BlockFloweringAzaleaFall,
    BlockFloweringAzaleaHit,
    BlockFloweringAzaleaPlace,
    BlockFloweringAzaleaStep,
    BlockFroglightBreak,
    BlockFroglightFall,
    BlockFroglightHit,
    BlockFroglightPlace,
    BlockFroglightStep,
    BlockFrogspawnBreak,
    BlockFrogspawnFall,
    BlockFrogspawnHatch,
    BlockFrogspawnHit,
    BlockFrogspawnPlace,
    BlockFrogspawnStep,
    BlockFungusBreak,
    BlockFungusFall,
    BlockFungusHit,
    BlockFungusPlace,
    BlockFungusStep,
    BlockFurnaceFireCrackle,
    BlockGildedBlackstoneBreak,
    BlockGildedBlackstoneFall,
    BlockGildedBlackstoneHit,
    BlockGildedBlackstonePlace,
    BlockGildedBlackstoneStep,
    BlockGlassBreak,
    BlockGlassFall,
    BlockGlassHit,
    BlockGlassPlace,
    BlockGlassStep,
    BlockGrassBreak,
    BlockGrassFall,
    BlockGrassHit,
    BlockGrassPlace,
    BlockGrassStep,
    BlockGravelBreak,
    BlockGravelFall,
    BlockGravelHit,
    BlockGravelPlace,
    BlockGravelStep,
    BlockGrindstoneUse,
    BlockGrowingPlantCrop,
    BlockHangingRootsBreak,
    BlockHangingRootsFall,
    BlockHangingRootsHit,
    BlockHangingRootsPlace,
    BlockHangingRootsStep,
    BlockHangingSignBreak,
    BlockHangingSignFall,
    BlockHangingSignHit,
    BlockHangingSignPlace,
    BlockHangingSignStep,
    BlockHoneyBlockBreak,
    BlockHoneyBlockFall,
    BlockHoneyBlockHit,
    BlockHoneyBlockPlace,
    BlockHoneyBlockSlide,
    BlockHoneyBlockStep,
    BlockIronDoorClose,
    BlockIronDoorOpen,
    BlockIronTrapdoorClose,
    BlockIronTrapdoorOpen,
    BlockLadderBreak,
    BlockLadderFall,
    BlockLadderHit,
    BlockLadderPlace,
    BlockLadderStep,
    BlockLanternBreak,
    BlockLanternFall,
    BlockLanternHit,
    BlockLanternPlace,
    BlockLanternStep,
    BlockLargeAmethystBudBreak,
    BlockLargeAmethystBudPlace,
    BlockLavaAmbient,
    BlockLavaExtinguish,
    BlockLavaPop,
    BlockLeverClick,
    BlockLilyPadPlace,
    BlockLodestoneBreak,
    BlockLodestoneFall,
    BlockLodestoneHit,
    BlockLodestonePlace,
    BlockLodestoneStep,
    BlockMangroveRootsBreak,
    BlockMangroveRootsFall,
    BlockMangroveRootsHit,
    BlockMangroveRootsPlace,
    BlockMangroveRootsStep,
    BlockMediumAmethystBudBreak,
    BlockMediumAmethystBudPlace,
    BlockMetalBreak,
    BlockMetalFall,
    BlockMetalHit,
    BlockMetalPlace,
    BlockMetalPressurePlateClickOff,
    BlockMetalPressurePlateClickOn,
    BlockMetalStep,
    BlockMossBreak,
    BlockMossCarpetBreak,
    BlockMossCarpetFall,
    BlockMossCarpetHit,
    BlockMossCarpetPlace,
    BlockMossCarpetStep,
    BlockMossFall,
    BlockMossHit,
    BlockMossPlace,
    BlockMossStep,
    BlockMuddyMangroveRootsBreak,
    BlockMuddyMangroveRootsFall,
    BlockMuddyMangroveRootsHit,
    BlockMuddyMangroveRootsPlace,
    BlockMuddyMangroveRootsStep,
    BlockMudBreak,
    BlockMudBricksBreak,
    BlockMudBricksFall,
    BlockMudBricksHit,
    BlockMudBricksPlace,
    BlockMudBricksStep,
    BlockMudFall,
    BlockMudHit,
    BlockMudPlace,
    BlockMudStep,
    BlockNetheriteBlockBreak,
    BlockNetheriteBlockFall,
    BlockNetheriteBlockHit,
    BlockNetheriteBlockPlace,
    BlockNetheriteBlockStep,
    BlockNetherrackBreak,
    BlockNetherrackFall,
    BlockNetherrackHit,
    BlockNetherrackPlace,
    BlockNetherrackStep,
    BlockNetherBricksBreak,
    BlockNetherBricksFall,
    BlockNetherBricksHit,
    BlockNetherBricksPlace,
    BlockNetherBricksStep,
    BlockNetherGoldOreBreak,
    BlockNetherGoldOreFall,
    BlockNetherGoldOreHit,
    BlockNetherGoldOrePlace,
    BlockNetherGoldOreStep,
    BlockNetherOreBreak,
    BlockNetherOreFall,
    BlockNetherOreHit,
    BlockNetherOrePlace,
    BlockNetherOreStep,
    BlockNetherSproutsBreak,
    BlockNetherSproutsFall,
    BlockNetherSproutsHit,
    BlockNetherSproutsPlace,
    BlockNetherSproutsStep,
    BlockNetherWartBreak,
    BlockNetherWoodBreak,
    BlockNetherWoodButtonClickOff,
    BlockNetherWoodButtonClickOn,
    BlockNetherWoodDoorClose,
    BlockNetherWoodDoorOpen,
    BlockNetherWoodFall,
    BlockNetherWoodFenceGateClose,
    BlockNetherWoodFenceGateOpen,
    BlockNetherWoodHangingSignBreak,
    BlockNetherWoodHangingSignFall,
    BlockNetherWoodHangingSignHit,
    BlockNetherWoodHangingSignPlace,
    BlockNetherWoodHangingSignStep,
    BlockNetherWoodHit,
    BlockNetherWoodPlace,
    BlockNetherWoodPressurePlateClickOff,
    BlockNetherWoodPressurePlateClickOn,
    BlockNetherWoodStep,
    BlockNetherWoodTrapdoorClose,
    BlockNetherWoodTrapdoorOpen,
    BlockNoteBlockBanjo,
    BlockNoteBlockBasedrum,
    BlockNoteBlockBass,
    BlockNoteBlockBell,
    BlockNoteBlockBit,
    BlockNoteBlockChime,
    BlockNoteBlockCowBell,
    BlockNoteBlockDidgeridoo,
    BlockNoteBlockFlute,
    BlockNoteBlockGuitar,
    BlockNoteBlockHarp,
    BlockNoteBlockHat,
    BlockNoteBlockImitateCreeper,
    BlockNoteBlockImitateEnderDragon,
    BlockNoteBlockImitatePiglin,
    BlockNoteBlockImitateSkeleton,
    BlockNoteBlockImitateWitherSkeleton,
    BlockNoteBlockImitateZombie,
    BlockNoteBlockIronXylophone,
    BlockNoteBlockPling,
    BlockNoteBlockSnare,
    BlockNoteBlockXylophone,
    BlockNyliumBreak,
    BlockNyliumFall,
    BlockNyliumHit,
    BlockNyliumPlace,
    BlockNyliumStep,
    BlockPackedMudBreak,
    BlockPackedMudFall,
    BlockPackedMudHit,
    BlockPackedMudPlace,
    BlockPackedMudStep,
    BlockPinkPetalsBreak,
    BlockPinkPetalsFall,
    BlockPinkPetalsHit,
    BlockPinkPetalsPlace,
    BlockPinkPetalsStep,
    BlockPistonContract,
    BlockPistonExtend,
    BlockPointedDripstoneBreak,
    BlockPointedDripstoneDripLava,
    BlockPointedDripstoneDripLavaIntoCauldron,
    BlockPointedDripstoneDripWater,
    BlockPointedDripstoneDripWaterIntoCauldron,
    BlockPointedDripstoneFall,
    BlockPointedDripstoneHit,
    BlockPointedDripstoneLand,
    BlockPointedDripstonePlace,
    BlockPointedDripstoneStep,
    BlockPolishedDeepslateBreak,
    BlockPolishedDeepslateFall,
    BlockPolishedDeepslateHit,
    BlockPolishedDeepslatePlace,
    BlockPolishedDeepslateStep,
    BlockPortalAmbient,
    BlockPortalTravel,
    BlockPortalTrigger,
    BlockPowderSnowBreak,
    BlockPowderSnowFall,
    BlockPowderSnowHit,
    BlockPowderSnowPlace,
    BlockPowderSnowStep,
    BlockPumpkinCarve,
    BlockRedstoneTorchBurnout,
    BlockRespawnAnchorAmbient,
    BlockRespawnAnchorCharge,
    BlockRespawnAnchorDeplete,
    BlockRespawnAnchorSetSpawn,
    BlockRootedDirtBreak,
    BlockRootedDirtFall,
    BlockRootedDirtHit,
    BlockRootedDirtPlace,
    BlockRootedDirtStep,
    BlockRootsBreak,
    BlockRootsFall,
    BlockRootsHit,
    BlockRootsPlace,
    BlockRootsStep,
    BlockSandBreak,
    BlockSandFall,
    BlockSandHit,
    BlockSandPlace,
    BlockSandStep,
    BlockScaffoldingBreak,
    BlockScaffoldingFall,
    BlockScaffoldingHit,
    BlockScaffoldingPlace,
    BlockScaffoldingStep,
    BlockSculkBreak,
    BlockSculkCatalystBloom,
    BlockSculkCatalystBreak,
    BlockSculkCatalystFall,
    BlockSculkCatalystHit,
    BlockSculkCatalystPlace,
    BlockSculkCatalystStep,
    BlockSculkCharge,
    BlockSculkFall,
    BlockSculkHit,
    BlockSculkPlace,
    BlockSculkSensorBreak,
    BlockSculkSensorClicking,
    BlockSculkSensorClickingStop,
    BlockSculkSensorFall,
    BlockSculkSensorHit,
    BlockSculkSensorPlace,
    BlockSculkSensorStep,
    BlockSculkShriekerBreak,
    BlockSculkShriekerFall,
    BlockSculkShriekerHit,
    BlockSculkShriekerPlace,
    BlockSculkShriekerShriek,
    BlockSculkShriekerStep,
    BlockSculkSpread,
    BlockSculkStep,
    BlockSculkVeinBreak,
    BlockSculkVeinFall,
    BlockSculkVeinHit,
    BlockSculkVeinPlace,
    BlockSculkVeinStep,
    BlockShroomlightBreak,
    BlockShroomlightFall,
    BlockShroomlightHit,
    BlockShroomlightPlace,
    BlockShroomlightStep,
    BlockShulkerBoxClose,
    BlockShulkerBoxOpen,
    BlockSignWaxedInteractFail,
    BlockSlimeBlockBreak,
    BlockSlimeBlockFall,
    BlockSlimeBlockHit,
    BlockSlimeBlockPlace,
    BlockSlimeBlockStep,
    BlockSmallAmethystBudBreak,
    BlockSmallAmethystBudPlace,
    BlockSmallDripleafBreak,
    BlockSmallDripleafFall,
    BlockSmallDripleafHit,
    BlockSmallDripleafPlace,
    BlockSmallDripleafStep,
    BlockSmithingTableUse,
    BlockSmokerSmoke,
    BlockSnifferEggCrack,
    BlockSnifferEggHatch,
    BlockSnifferEggPlop,
    BlockSnowBreak,
    BlockSnowFall,
    BlockSnowHit,
    BlockSnowPlace,
    BlockSnowStep,
    BlockSoulSandBreak,
    BlockSoulSandFall,
    BlockSoulSandHit,
    BlockSoulSandPlace,
    BlockSoulSandStep,
    BlockSoulSoilBreak,
    BlockSoulSoilFall,
    BlockSoulSoilHit,
    BlockSoulSoilPlace,
    BlockSoulSoilStep,
    BlockSporeBlossomBreak,
    BlockSporeBlossomFall,
    BlockSporeBlossomHit,
    BlockSporeBlossomPlace,
    BlockSporeBlossomStep,
    BlockStemBreak,
    BlockStemFall,
    BlockStemHit,
    BlockStemPlace,
    BlockStemStep,
    BlockStoneBreak,
    BlockStoneButtonClickOff,
    BlockStoneButtonClickOn,
    BlockStoneFall,
    BlockStoneHit,
    BlockStonePlace,
    BlockStonePressurePlateClickOff,
    BlockStonePressurePlateClickOn,
    BlockStoneStep,
    BlockSuspiciousGravelBreak,
    BlockSuspiciousGravelFall,
    BlockSuspiciousGravelHit,
    BlockSuspiciousGravelPlace,
    BlockSuspiciousGravelStep,
    BlockSuspiciousSandBreak,
    BlockSuspiciousSandFall,
    BlockSuspiciousSandHit,
    BlockSuspiciousSandPlace,
    BlockSuspiciousSandStep,
    BlockSweetBerryBushBreak,
    BlockSweetBerryBushPickBerries,
    BlockSweetBerryBushPlace,
    BlockTripwireAttach,
    BlockTripwireClickOff,
    BlockTripwireClickOn,
    BlockTripwireDetach,
    BlockTuffBreak,
    BlockTuffFall,
    BlockTuffHit,
    BlockTuffPlace,
    BlockTuffStep,
    BlockVineBreak,
    BlockVineFall,
    BlockVineHit,
    BlockVinePlace,
    BlockVineStep,
    BlockWartBlockBreak,
    BlockWartBlockFall,
    BlockWartBlockHit,
    BlockWartBlockPlace,
    BlockWartBlockStep,
    BlockWaterAmbient,
    BlockWeepingVinesBreak,
    BlockWeepingVinesFall,
    BlockWeepingVinesHit,
    BlockWeepingVinesPlace,
    BlockWeepingVinesStep,
    BlockWetGrassBreak,
    BlockWetGrassFall,
    BlockWetGrassHit,
    BlockWetGrassPlace,
    BlockWetGrassStep,
    BlockWoodenButtonClickOff,
    BlockWoodenButtonClickOn,
    BlockWoodenDoorClose,
    BlockWoodenDoorOpen,
    BlockWoodenPressurePlateClickOff,
    BlockWoodenPressurePlateClickOn,
    BlockWoodenTrapdoorClose,
    BlockWoodenTrapdoorOpen,
    BlockWoodBreak,
    BlockWoodFall,
    BlockWoodHit,
    BlockWoodPlace,
    BlockWoodStep,
    BlockWoolBreak,
    BlockWoolFall,
    BlockWoolHit,
    BlockWoolPlace,
    BlockWoolStep,
    EnchantThornsHit,
    EntityAllayAmbientWithoutItem,
    EntityAllayAmbientWithItem,
    EntityAllayDeath,
    EntityAllayHurt,
    EntityAllayItemGiven,
    EntityAllayItemTaken,
    EntityAllayItemThrown,
    EntityArmorStandBreak,
    EntityArmorStandFall,
    EntityArmorStandHit,
    EntityArmorStandPlace,
    EntityArrowHit,
    EntityArrowHitPlayer,
    EntityArrowShoot,
    EntityAxolotlAttack,
    EntityAxolotlDeath,
    EntityAxolotlHurt,
    EntityAxolotlIdleAir,
    EntityAxolotlIdleWater,
    EntityAxolotlSplash,
    EntityAxolotlSwim,
    EntityBatAmbient,
    EntityBatDeath,
    EntityBatHurt,
    EntityBatLoop,
    EntityBatTakeoff,
    EntityBeeDeath,
    EntityBeeHurt,
    EntityBeeLoop,
    EntityBeeLoopAggressive,
    EntityBeePollinate,
    EntityBeeSting,
    EntityBlazeAmbient,
    EntityBlazeBurn,
    EntityBlazeDeath,
    EntityBlazeHurt,
    EntityBlazeShoot,
    EntityBoatPaddleLand,
    EntityBoatPaddleWater,
    EntityCamelAmbient,
    EntityCamelDash,
    EntityCamelDashReady,
    EntityCamelDeath,
    EntityCamelEat,
    EntityCamelHurt,
    EntityCamelSaddle,
    EntityCamelSit,
    EntityCamelStand,
    EntityCamelStep,
    EntityCamelStepSand,
    EntityCatAmbient,
    EntityCatBegForFood,
    EntityCatDeath,
    EntityCatEat,
    EntityCatHiss,
    EntityCatHurt,
    EntityCatPurr,
    EntityCatPurreow,
    EntityCatStrayAmbient,
    EntityChickenAmbient,
    EntityChickenDeath,
    EntityChickenEgg,
    EntityChickenHurt,
    EntityChickenStep,
    EntityCodAmbient,
    EntityCodDeath,
    EntityCodFlop,
    EntityCodHurt,
    EntityCowAmbient,
    EntityCowDeath,
    EntityCowHurt,
    EntityCowMilk,
    EntityCowStep,
    EntityCreeperDeath,
    EntityCreeperHurt,
    EntityCreeperPrimed,
    EntityDolphinAmbient,
    EntityDolphinAmbientWater,
    EntityDolphinAttack,
    EntityDolphinDeath,
    EntityDolphinEat,
    EntityDolphinHurt,
    EntityDolphinJump,
    EntityDolphinPlay,
    EntityDolphinSplash,
    EntityDolphinSwim,
    EntityDonkeyAmbient,
    EntityDonkeyAngry,
    EntityDonkeyChest,
    EntityDonkeyDeath,
    EntityDonkeyEat,
    EntityDonkeyHurt,
    EntityDragonFireballExplode,
    EntityDrownedAmbient,
    EntityDrownedAmbientWater,
    EntityDrownedDeath,
    EntityDrownedDeathWater,
    EntityDrownedHurt,
    EntityDrownedHurtWater,
    EntityDrownedShoot,
    EntityDrownedStep,
    EntityDrownedSwim,
    EntityEggThrow,
    EntityElderGuardianAmbient,
    EntityElderGuardianAmbientLand,
    EntityElderGuardianCurse,
    EntityElderGuardianDeath,
    EntityElderGuardianDeathLand,
    EntityElderGuardianFlop,
    EntityElderGuardianHurt,
    EntityElderGuardianHurtLand,
    EntityEndermanAmbient,
    EntityEndermanDeath,
    EntityEndermanHurt,
    EntityEndermanScream,
    EntityEndermanStare,
    EntityEndermanTeleport,
    EntityEndermiteAmbient,
    EntityEndermiteDeath,
    EntityEndermiteHurt,
    EntityEndermiteStep,
    EntityEnderDragonAmbient,
    EntityEnderDragonDeath,
    EntityEnderDragonFlap,
    EntityEnderDragonGrowl,
    EntityEnderDragonHurt,
    EntityEnderDragonShoot,
    EntityEnderEyeDeath,
    EntityEnderEyeLaunch,
    EntityEnderPearlThrow,
    EntityEvokerAmbient,
    EntityEvokerCastSpell,
    EntityEvokerCelebrate,
    EntityEvokerDeath,
    EntityEvokerFangsAttack,
    EntityEvokerHurt,
    EntityEvokerPrepareAttack,
    EntityEvokerPrepareSummon,
    EntityEvokerPrepareWololo,
    EntityExperienceBottleThrow,
    EntityExperienceOrbPickup,
    EntityFireworkRocketBlast,
    EntityFireworkRocketBlastFar,
    EntityFireworkRocketLargeBlast,
    EntityFireworkRocketLargeBlastFar,
    EntityFireworkRocketLaunch,
    EntityFireworkRocketShoot,
    EntityFireworkRocketTwinkle,
    EntityFireworkRocketTwinkleFar,
    EntityFishingBobberRetrieve,
    EntityFishingBobberSplash,
    EntityFishingBobberThrow,
    EntityFishSwim,
    EntityFoxAggro,
    EntityFoxAmbient,
    EntityFoxBite,
    EntityFoxDeath,
    EntityFoxEat,
    EntityFoxHurt,
    EntityFoxScreech,
    EntityFoxSleep,
    EntityFoxSniff,
    EntityFoxSpit,
    EntityFoxTeleport,
    EntityFrogAmbient,
    EntityFrogDeath,
    EntityFrogEat,
    EntityFrogHurt,
    EntityFrogLaySpawn,
    EntityFrogLongJump,
    EntityFrogStep,
    EntityFrogTongue,
    EntityGenericBigFall,
    EntityGenericBurn,
    EntityGenericDeath,
    EntityGenericDrink,
    EntityGenericEat,
    EntityGenericExplode,
    EntityGenericExtinguishFire,
    EntityGenericHurt,
    EntityGenericSmallFall,
    EntityGenericSplash,
    EntityGenericSwim,
    EntityGhastAmbient,
    EntityGhastDeath,
    EntityGhastHurt,
    EntityGhastScream,
    EntityGhastShoot,
    EntityGhastWarn,
    EntityGlowItemFrameAddItem,
    EntityGlowItemFrameBreak,
    EntityGlowItemFramePlace,
    EntityGlowItemFrameRemoveItem,
    EntityGlowItemFrameRotateItem,
    EntityGlowSquidAmbient,
    EntityGlowSquidDeath,
    EntityGlowSquidHurt,
    EntityGlowSquidSquirt,
    EntityGoatAmbient,
    EntityGoatDeath,
    EntityGoatEat,
    EntityGoatHornBreak,
    EntityGoatHurt,
    EntityGoatLongJump,
    EntityGoatMilk,
    EntityGoatPrepareRam,
    EntityGoatRamImpact,
    EntityGoatScreamingAmbient,
    EntityGoatScreamingDeath,
    EntityGoatScreamingEat,
    EntityGoatScreamingHornBreak,
    EntityGoatScreamingHurt,
    EntityGoatScreamingLongJump,
    EntityGoatScreamingMilk,
    EntityGoatScreamingPrepareRam,
    EntityGoatScreamingRamImpact,
    EntityGoatStep,
    EntityGuardianAmbient,
    EntityGuardianAmbientLand,
    EntityGuardianAttack,
    EntityGuardianDeath,
    EntityGuardianDeathLand,
    EntityGuardianFlop,
    EntityGuardianHurt,
    EntityGuardianHurtLand,
    EntityHoglinAmbient,
    EntityHoglinAngry,
    EntityHoglinAttack,
    EntityHoglinConvertedToZombified,
    EntityHoglinDeath,
    EntityHoglinHurt,
    EntityHoglinRetreat,
    EntityHoglinStep,
    EntityHorseAmbient,
    EntityHorseAngry,
    EntityHorseArmor,
    EntityHorseBreathe,
    EntityHorseDeath,
    EntityHorseEat,
    EntityHorseGallop,
    EntityHorseHurt,
    EntityHorseJump,
    EntityHorseLand,
    EntityHorseSaddle,
    EntityHorseStep,
    EntityHorseStepWood,
    EntityHostileBigFall,
    EntityHostileDeath,
    EntityHostileHurt,
    EntityHostileSmallFall,
    EntityHostileSplash,
    EntityHostileSwim,
    EntityHuskAmbient,
    EntityHuskConvertedToZombie,
    EntityHuskDeath,
    EntityHuskHurt,
    EntityHuskStep,
    EntityIllusionerAmbient,
    EntityIllusionerCastSpell,
    EntityIllusionerDeath,
    EntityIllusionerHurt,
    EntityIllusionerMirrorMove,
    EntityIllusionerPrepareBlindness,
    EntityIllusionerPrepareMirror,
    EntityIronGolemAttack,
    EntityIronGolemDamage,
    EntityIronGolemDeath,
    EntityIronGolemHurt,
    EntityIronGolemRepair,
    EntityIronGolemStep,
    EntityItemBreak,
    EntityItemFrameAddItem,
    EntityItemFrameBreak,
    EntityItemFramePlace,
    EntityItemFrameRemoveItem,
    EntityItemFrameRotateItem,
    EntityItemPickup,
    EntityLeashKnotBreak,
    EntityLeashKnotPlace,
    EntityLightningBoltImpact,
    EntityLightningBoltThunder,
    EntityLingeringPotionThrow,
    EntityLlamaAmbient,
    EntityLlamaAngry,
    EntityLlamaChest,
    EntityLlamaDeath,
    EntityLlamaEat,
    EntityLlamaHurt,
    EntityLlamaSpit,
    EntityLlamaStep,
    EntityLlamaSwag,
    EntityMagmaCubeDeath,
    EntityMagmaCubeDeathSmall,
    EntityMagmaCubeHurt,
    EntityMagmaCubeHurtSmall,
    EntityMagmaCubeJump,
    EntityMagmaCubeSquish,
    EntityMagmaCubeSquishSmall,
    EntityMinecartInside,
    EntityMinecartInsideUnderwater,
    EntityMinecartRiding,
    EntityMooshroomConvert,
    EntityMooshroomEat,
    EntityMooshroomMilk,
    EntityMooshroomShear,
    EntityMooshroomSuspiciousMilk,
    EntityMuleAmbient,
    EntityMuleAngry,
    EntityMuleChest,
    EntityMuleDeath,
    EntityMuleEat,
    EntityMuleHurt,
    EntityOcelotAmbient,
    EntityOcelotDeath,
    EntityOcelotHurt,
    EntityPaintingBreak,
    EntityPaintingPlace,
    EntityPandaAggressiveAmbient,
    EntityPandaAmbient,
    EntityPandaBite,
    EntityPandaCantBreed,
    EntityPandaDeath,
    EntityPandaEat,
    EntityPandaHurt,
    EntityPandaPreSneeze,
    EntityPandaSneeze,
    EntityPandaStep,
    EntityPandaWorriedAmbient,
    EntityParrotAmbient,
    EntityParrotDeath,
    EntityParrotEat,
    EntityParrotFly,
    EntityParrotHurt,
    EntityParrotImitateBlaze,
    EntityParrotImitateCreeper,
    EntityParrotImitateDrowned,
    EntityParrotImitateElderGuardian,
    EntityParrotImitateEndermite,
    EntityParrotImitateEnderDragon,
    EntityParrotImitateEvoker,
    EntityParrotImitateGhast,
    EntityParrotImitateGuardian,
    EntityParrotImitateHoglin,
    EntityParrotImitateHusk,
    EntityParrotImitateIllusioner,
    EntityParrotImitateMagmaCube,
    EntityParrotImitatePhantom,
    EntityParrotImitatePiglin,
    EntityParrotImitatePiglinBrute,
    EntityParrotImitatePillager,
    EntityParrotImitateRavager,
    EntityParrotImitateShulker,
    EntityParrotImitateSilverfish,
    EntityParrotImitateSkeleton,
    EntityParrotImitateSlime,
    EntityParrotImitateSpider,
    EntityParrotImitateStray,
    EntityParrotImitateVex,
    EntityParrotImitateVindicator,
    EntityParrotImitateWarden,
    EntityParrotImitateWitch,
    EntityParrotImitateWither,
    EntityParrotImitateWitherSkeleton,
    EntityParrotImitateZoglin,
    EntityParrotImitateZombie,
    EntityParrotImitateZombieVillager,
    EntityParrotStep,
    EntityPhantomAmbient,
    EntityPhantomBite,
    EntityPhantomDeath,
    EntityPhantomFlap,
    EntityPhantomHurt,
    EntityPhantomSwoop,
    EntityPiglinAdmiringItem,
    EntityPiglinAmbient,
    EntityPiglinAngry,
    EntityPiglinBruteAmbient,
    EntityPiglinBruteAngry,
    EntityPiglinBruteConvertedToZombified,
    EntityPiglinBruteDeath,
    EntityPiglinBruteHurt,
    EntityPiglinBruteStep,
    EntityPiglinCelebrate,
    EntityPiglinConvertedToZombified,
    EntityPiglinDeath,
    EntityPiglinHurt,
    EntityPiglinJealous,
    EntityPiglinRetreat,
    EntityPiglinStep,
    EntityPigAmbient,
    EntityPigDeath,
    EntityPigHurt,
    EntityPigSaddle,
    EntityPigStep,
    EntityPillagerAmbient,
    EntityPillagerCelebrate,
    EntityPillagerDeath,
    EntityPillagerHurt,
    EntityPlayerAttackCrit,
    EntityPlayerAttackKnockback,
    EntityPlayerAttackNodamage,
    EntityPlayerAttackStrong,
    EntityPlayerAttackSweep,
    EntityPlayerAttackWeak,
    EntityPlayerBigFall,
    EntityPlayerBreath,
    EntityPlayerBurp,
    EntityPlayerDeath,
    EntityPlayerHurt,
    EntityPlayerHurtDrown,
    EntityPlayerHurtFreeze,
    EntityPlayerHurtOnFire,
    EntityPlayerHurtSweetBerryBush,
    EntityPlayerLevelup,
    EntityPlayerSmallFall,
    EntityPlayerSplash,
    EntityPlayerSplashHighSpeed,
    EntityPlayerSwim,
    EntityPolarBearAmbient,
    EntityPolarBearAmbientBaby,
    EntityPolarBearDeath,
    EntityPolarBearHurt,
    EntityPolarBearStep,
    EntityPolarBearWarning,
    EntityPufferFishAmbient,
    EntityPufferFishBlowOut,
    EntityPufferFishBlowUp,
    EntityPufferFishDeath,
    EntityPufferFishFlop,
    EntityPufferFishHurt,
    EntityPufferFishSting,
    EntityRabbitAmbient,
    EntityRabbitAttack,
    EntityRabbitDeath,
    EntityRabbitHurt,
    EntityRabbitJump,
    EntityRavagerAmbient,
    EntityRavagerAttack,
    EntityRavagerCelebrate,
    EntityRavagerDeath,
    EntityRavagerHurt,
    EntityRavagerRoar,
    EntityRavagerStep,
    EntityRavagerStunned,
    EntitySalmonAmbient,
    EntitySalmonDeath,
    EntitySalmonFlop,
    EntitySalmonHurt,
    EntitySheepAmbient,
    EntitySheepDeath,
    EntitySheepHurt,
    EntitySheepShear,
    EntitySheepStep,
    EntityShulkerAmbient,
    EntityShulkerBulletHit,
    EntityShulkerBulletHurt,
    EntityShulkerClose,
    EntityShulkerDeath,
    EntityShulkerHurt,
    EntityShulkerHurtClosed,
    EntityShulkerOpen,
    EntityShulkerShoot,
    EntityShulkerTeleport,
    EntitySilverfishAmbient,
    EntitySilverfishDeath,
    EntitySilverfishHurt,
    EntitySilverfishStep,
    EntitySkeletonAmbient,
    EntitySkeletonConvertedToStray,
    EntitySkeletonDeath,
    EntitySkeletonHorseAmbient,
    EntitySkeletonHorseAmbientWater,
    EntitySkeletonHorseDeath,
    EntitySkeletonHorseGallopWater,
    EntitySkeletonHorseHurt,
    EntitySkeletonHorseJumpWater,
    EntitySkeletonHorseStepWater,
    EntitySkeletonHorseSwim,
    EntitySkeletonHurt,
    EntitySkeletonShoot,
    EntitySkeletonStep,
    EntitySlimeAttack,
    EntitySlimeDeath,
    EntitySlimeDeathSmall,
    EntitySlimeHurt,
    EntitySlimeHurtSmall,
    EntitySlimeJump,
    EntitySlimeJumpSmall,
    EntitySlimeSquish,
    EntitySlimeSquishSmall,
    EntitySnifferDeath,
    EntitySnifferDigging,
    EntitySnifferDiggingStop,
    EntitySnifferDropSeed,
    EntitySnifferEat,
    EntitySnifferHappy,
    EntitySnifferHurt,
    EntitySnifferIdle,
    EntitySnifferScenting,
    EntitySnifferSearching,
    EntitySnifferSniffing,
    EntitySnifferStep,
    EntitySnowballThrow,
    EntitySnowGolemAmbient,
    EntitySnowGolemDeath,
    EntitySnowGolemHurt,
    EntitySnowGolemShear,
    EntitySnowGolemShoot,
    EntitySpiderAmbient,
    EntitySpiderDeath,
    EntitySpiderHurt,
    EntitySpiderStep,
    EntitySplashPotionBreak,
    EntitySplashPotionThrow,
    EntitySquidAmbient,
    EntitySquidDeath,
    EntitySquidHurt,
    EntitySquidSquirt,
    EntityStrayAmbient,
    EntityStrayDeath,
    EntityStrayHurt,
    EntityStrayStep,
    EntityStriderAmbient,
    EntityStriderDeath,
    EntityStriderEat,
    EntityStriderHappy,
    EntityStriderHurt,
    EntityStriderRetreat,
    EntityStriderSaddle,
    EntityStriderStep,
    EntityStriderStepLava,
    EntityTadpoleDeath,
    EntityTadpoleFlop,
    EntityTadpoleGrowUp,
    EntityTadpoleHurt,
    EntityTntPrimed,
    EntityTropicalFishAmbient,
    EntityTropicalFishDeath,
    EntityTropicalFishFlop,
    EntityTropicalFishHurt,
    EntityTurtleAmbientLand,
    EntityTurtleDeath,
    EntityTurtleDeathBaby,
    EntityTurtleEggBreak,
    EntityTurtleEggCrack,
    EntityTurtleEggHatch,
    EntityTurtleHurt,
    EntityTurtleHurtBaby,
    EntityTurtleLayEgg,
    EntityTurtleShamble,
    EntityTurtleShambleBaby,
    EntityTurtleSwim,
    EntityVexAmbient,
    EntityVexCharge,
    EntityVexDeath,
    EntityVexHurt,
    EntityVillagerAmbient,
    EntityVillagerCelebrate,
    EntityVillagerDeath,
    EntityVillagerHurt,
    EntityVillagerNo,
    EntityVillagerTrade,
    EntityVillagerWorkArmorer,
    EntityVillagerWorkButcher,
    EntityVillagerWorkCartographer,
    EntityVillagerWorkCleric,
    EntityVillagerWorkFarmer,
    EntityVillagerWorkFisherman,
    EntityVillagerWorkFletcher,
    EntityVillagerWorkLeatherworker,
    EntityVillagerWorkLibrarian,
    EntityVillagerWorkMason,
    EntityVillagerWorkShepherd,
    EntityVillagerWorkToolsmith,
    EntityVillagerWorkWeaponsmith,
    EntityVillagerYes,
    EntityVindicatorAmbient,
    EntityVindicatorCelebrate,
    EntityVindicatorDeath,
    EntityVindicatorHurt,
    EntityWanderingTraderAmbient,
    EntityWanderingTraderDeath,
    EntityWanderingTraderDisappeared,
    EntityWanderingTraderDrinkMilk,
    EntityWanderingTraderDrinkPotion,
    EntityWanderingTraderHurt,
    EntityWanderingTraderNo,
    EntityWanderingTraderReappeared,
    EntityWanderingTraderTrade,
    EntityWanderingTraderYes,
    EntityWardenAgitated,
    EntityWardenAmbient,
    EntityWardenAngry,
    EntityWardenAttackImpact,
    EntityWardenDeath,
    EntityWardenDig,
    EntityWardenEmerge,
    EntityWardenHeartbeat,
    EntityWardenHurt,
    EntityWardenListening,
    EntityWardenListeningAngry,
    EntityWardenNearbyClose,
    EntityWardenNearbyCloser,
    EntityWardenNearbyClosest,
    EntityWardenRoar,
    EntityWardenSniff,
    EntityWardenSonicBoom,
    EntityWardenSonicCharge,
    EntityWardenStep,
    EntityWardenTendrilClicks,
    EntityWitchAmbient,
    EntityWitchCelebrate,
    EntityWitchDeath,
    EntityWitchDrink,
    EntityWitchHurt,
    EntityWitchThrow,
    EntityWitherAmbient,
    EntityWitherBreakBlock,
    EntityWitherDeath,
    EntityWitherHurt,
    EntityWitherShoot,
    EntityWitherSkeletonAmbient,
    EntityWitherSkeletonDeath,
    EntityWitherSkeletonHurt,
    EntityWitherSkeletonStep,
    EntityWitherSpawn,
    EntityWolfAmbient,
    EntityWolfDeath,
    EntityWolfGrowl,
    EntityWolfHowl,
    EntityWolfHurt,
    EntityWolfPant,
    EntityWolfShake,
    EntityWolfStep,
    EntityWolfWhine,
    EntityZoglinAmbient,
    EntityZoglinAngry,
    EntityZoglinAttack,
    EntityZoglinDeath,
    EntityZoglinHurt,
    EntityZoglinStep,
    EntityZombieAmbient,
    EntityZombieAttackIronDoor,
    EntityZombieAttackWoodenDoor,
    EntityZombieBreakWoodenDoor,
    EntityZombieConvertedToDrowned,
    EntityZombieDeath,
    EntityZombieDestroyEgg,
    EntityZombieHorseAmbient,
    EntityZombieHorseDeath,
    EntityZombieHorseHurt,
    EntityZombieHurt,
    EntityZombieInfect,
    EntityZombieStep,
    EntityZombieVillagerAmbient,
    EntityZombieVillagerConverted,
    EntityZombieVillagerCure,
    EntityZombieVillagerDeath,
    EntityZombieVillagerHurt,
    EntityZombieVillagerStep,
    EntityZombifiedPiglinAmbient,
    EntityZombifiedPiglinAngry,
    EntityZombifiedPiglinDeath,
    EntityZombifiedPiglinHurt,
    EventRaidHorn,
    IntentionallyEmpty,
    ItemArmorEquipChain,
    ItemArmorEquipDiamond,
    ItemArmorEquipElytra,
    ItemArmorEquipGeneric,
    ItemArmorEquipGold,
    ItemArmorEquipIron,
    ItemArmorEquipLeather,
    ItemArmorEquipNetherite,
    ItemArmorEquipTurtle,
    ItemAxeScrape,
    ItemAxeStrip,
    ItemAxeWaxOff,
    ItemBoneMealUse,
    ItemBookPageTurn,
    ItemBookPut,
    ItemBottleEmpty,
    ItemBottleFill,
    ItemBottleFillDragonbreath,
    ItemBrushBrushingGeneric,
    ItemBrushBrushingGravel,
    ItemBrushBrushingGravelComplete,
    ItemBrushBrushingSand,
    ItemBrushBrushingSandComplete,
    ItemBucketEmpty,
    ItemBucketEmptyAxolotl,
    ItemBucketEmptyFish,
    ItemBucketEmptyLava,
    ItemBucketEmptyPowderSnow,
    ItemBucketEmptyTadpole,
    ItemBucketFill,
    ItemBucketFillAxolotl,
    ItemBucketFillFish,
    ItemBucketFillLava,
    ItemBucketFillPowderSnow,
    ItemBucketFillTadpole,
    ItemBundleDropContents,
    ItemBundleInsert,
    ItemBundleRemoveOne,
    ItemChorusFruitTeleport,
    ItemCropPlant,
    ItemCrossbowHit,
    ItemCrossbowLoadingEnd,
    ItemCrossbowLoadingMiddle,
    ItemCrossbowLoadingStart,
    ItemCrossbowQuickCharge1,
    ItemCrossbowQuickCharge2,
    ItemCrossbowQuickCharge3,
    ItemCrossbowShoot,
    ItemDyeUse,
    ItemElytraFlying,
    ItemFirechargeUse,
    ItemFlintandsteelUse,
    ItemGlowInkSacUse,
    ItemGoatHornPlay,
    ItemGoatHornSound0,
    ItemGoatHornSound1,
    ItemGoatHornSound2,
    ItemGoatHornSound3,
    ItemGoatHornSound4,
    ItemGoatHornSound5,
    ItemGoatHornSound6,
    ItemGoatHornSound7,
    ItemHoeTill,
    ItemHoneycombWaxOn,
    ItemHoneyBottleDrink,
    ItemInkSacUse,
    ItemLodestoneCompassLock,
    ItemNetherWartPlant,
    ItemShieldBlock,
    ItemShieldBreak,
    ItemShovelFlatten,
    ItemSpyglassStopUsing,
    ItemSpyglassUse,
    ItemTotemUse,
    ItemTridentHit,
    ItemTridentHitGround,
    ItemTridentReturn,
    ItemTridentRiptide1,
    ItemTridentRiptide2,
    ItemTridentRiptide3,
    ItemTridentThrow,
    ItemTridentThunder,
    MusicCreative,
    MusicCredits,
    MusicDisc11,
    MusicDisc13,
    MusicDisc5,
    MusicDiscBlocks,
    MusicDiscCat,
    MusicDiscChirp,
    MusicDiscFar,
    MusicDiscMall,
    MusicDiscMellohi,
    MusicDiscOtherside,
    MusicDiscPigstep,
    MusicDiscRelic,
    MusicDiscStal,
    MusicDiscStrad,
    MusicDiscWait,
    MusicDiscWard,
    MusicDragon,
    MusicEnd,
    MusicGame,
    MusicMenu,
    MusicNetherBasaltDeltas,
    MusicNetherCrimsonForest,
    MusicNetherNetherWastes,
    MusicNetherSoulSandValley,
    MusicNetherWarpedForest,
    MusicOverworldBadlands,
    MusicOverworldBambooJungle,
    MusicOverworldCherryGrove,
    MusicOverworldDeepDark,
    MusicOverworldDesert,
    MusicOverworldDripstoneCaves,
    MusicOverworldFlowerForest,
    MusicOverworldForest,
    MusicOverworldFrozenPeaks,
    MusicOverworldGrove,
    MusicOverworldJaggedPeaks,
    MusicOverworldJungle,
    MusicOverworldLushCaves,
    MusicOverworldMeadow,
    MusicOverworldOldGrowthTaiga,
    MusicOverworldSnowySlopes,
    MusicOverworldSparseJungle,
    MusicOverworldStonyPeaks,
    MusicOverworldSwamp,
    MusicUnderWater,
    ParticleSoulEscape,
    UiButtonClick,
    UiCartographyTableTakeResult,
    UiLoomSelectPattern,
    UiLoomTakeResult,
    UiStonecutterSelectRecipe,
    UiStonecutterTakeResult,
    UiToastChallengeComplete,
    UiToastIn,
    UiToastOut,
    WeatherRain,
    WeatherRainAbove,
}
impl std::fmt::Display for SoundEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            SoundEnum::AmbientBasaltDeltasAdditions => {
                f.write_str("AMBIENT_BASALT_DELTAS_ADDITIONS")
            }
            SoundEnum::AmbientBasaltDeltasLoop => f.write_str("AMBIENT_BASALT_DELTAS_LOOP"),
            SoundEnum::AmbientBasaltDeltasMood => f.write_str("AMBIENT_BASALT_DELTAS_MOOD"),
            SoundEnum::AmbientCave => f.write_str("AMBIENT_CAVE"),
            SoundEnum::AmbientCrimsonForestAdditions => {
                f.write_str("AMBIENT_CRIMSON_FOREST_ADDITIONS")
            }
            SoundEnum::AmbientCrimsonForestLoop => f.write_str("AMBIENT_CRIMSON_FOREST_LOOP"),
            SoundEnum::AmbientCrimsonForestMood => f.write_str("AMBIENT_CRIMSON_FOREST_MOOD"),
            SoundEnum::AmbientNetherWastesAdditions => {
                f.write_str("AMBIENT_NETHER_WASTES_ADDITIONS")
            }
            SoundEnum::AmbientNetherWastesLoop => f.write_str("AMBIENT_NETHER_WASTES_LOOP"),
            SoundEnum::AmbientNetherWastesMood => f.write_str("AMBIENT_NETHER_WASTES_MOOD"),
            SoundEnum::AmbientSoulSandValleyAdditions => {
                f.write_str("AMBIENT_SOUL_SAND_VALLEY_ADDITIONS")
            }
            SoundEnum::AmbientSoulSandValleyLoop => f.write_str("AMBIENT_SOUL_SAND_VALLEY_LOOP"),
            SoundEnum::AmbientSoulSandValleyMood => f.write_str("AMBIENT_SOUL_SAND_VALLEY_MOOD"),
            SoundEnum::AmbientUnderwaterEnter => f.write_str("AMBIENT_UNDERWATER_ENTER"),
            SoundEnum::AmbientUnderwaterExit => f.write_str("AMBIENT_UNDERWATER_EXIT"),
            SoundEnum::AmbientUnderwaterLoop => f.write_str("AMBIENT_UNDERWATER_LOOP"),
            SoundEnum::AmbientUnderwaterLoopAdditions => {
                f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS")
            }
            SoundEnum::AmbientUnderwaterLoopAdditionsRare => {
                f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE")
            }
            SoundEnum::AmbientUnderwaterLoopAdditionsUltraRare => {
                f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE")
            }
            SoundEnum::AmbientWarpedForestAdditions => {
                f.write_str("AMBIENT_WARPED_FOREST_ADDITIONS")
            }
            SoundEnum::AmbientWarpedForestLoop => f.write_str("AMBIENT_WARPED_FOREST_LOOP"),
            SoundEnum::AmbientWarpedForestMood => f.write_str("AMBIENT_WARPED_FOREST_MOOD"),
            SoundEnum::BlockAmethystBlockBreak => f.write_str("BLOCK_AMETHYST_BLOCK_BREAK"),
            SoundEnum::BlockAmethystBlockChime => f.write_str("BLOCK_AMETHYST_BLOCK_CHIME"),
            SoundEnum::BlockAmethystBlockFall => f.write_str("BLOCK_AMETHYST_BLOCK_FALL"),
            SoundEnum::BlockAmethystBlockHit => f.write_str("BLOCK_AMETHYST_BLOCK_HIT"),
            SoundEnum::BlockAmethystBlockPlace => f.write_str("BLOCK_AMETHYST_BLOCK_PLACE"),
            SoundEnum::BlockAmethystBlockResonate => f.write_str("BLOCK_AMETHYST_BLOCK_RESONATE"),
            SoundEnum::BlockAmethystBlockStep => f.write_str("BLOCK_AMETHYST_BLOCK_STEP"),
            SoundEnum::BlockAmethystClusterBreak => f.write_str("BLOCK_AMETHYST_CLUSTER_BREAK"),
            SoundEnum::BlockAmethystClusterFall => f.write_str("BLOCK_AMETHYST_CLUSTER_FALL"),
            SoundEnum::BlockAmethystClusterHit => f.write_str("BLOCK_AMETHYST_CLUSTER_HIT"),
            SoundEnum::BlockAmethystClusterPlace => f.write_str("BLOCK_AMETHYST_CLUSTER_PLACE"),
            SoundEnum::BlockAmethystClusterStep => f.write_str("BLOCK_AMETHYST_CLUSTER_STEP"),
            SoundEnum::BlockAncientDebrisBreak => f.write_str("BLOCK_ANCIENT_DEBRIS_BREAK"),
            SoundEnum::BlockAncientDebrisFall => f.write_str("BLOCK_ANCIENT_DEBRIS_FALL"),
            SoundEnum::BlockAncientDebrisHit => f.write_str("BLOCK_ANCIENT_DEBRIS_HIT"),
            SoundEnum::BlockAncientDebrisPlace => f.write_str("BLOCK_ANCIENT_DEBRIS_PLACE"),
            SoundEnum::BlockAncientDebrisStep => f.write_str("BLOCK_ANCIENT_DEBRIS_STEP"),
            SoundEnum::BlockAnvilBreak => f.write_str("BLOCK_ANVIL_BREAK"),
            SoundEnum::BlockAnvilDestroy => f.write_str("BLOCK_ANVIL_DESTROY"),
            SoundEnum::BlockAnvilFall => f.write_str("BLOCK_ANVIL_FALL"),
            SoundEnum::BlockAnvilHit => f.write_str("BLOCK_ANVIL_HIT"),
            SoundEnum::BlockAnvilLand => f.write_str("BLOCK_ANVIL_LAND"),
            SoundEnum::BlockAnvilPlace => f.write_str("BLOCK_ANVIL_PLACE"),
            SoundEnum::BlockAnvilStep => f.write_str("BLOCK_ANVIL_STEP"),
            SoundEnum::BlockAnvilUse => f.write_str("BLOCK_ANVIL_USE"),
            SoundEnum::BlockAzaleaBreak => f.write_str("BLOCK_AZALEA_BREAK"),
            SoundEnum::BlockAzaleaFall => f.write_str("BLOCK_AZALEA_FALL"),
            SoundEnum::BlockAzaleaHit => f.write_str("BLOCK_AZALEA_HIT"),
            SoundEnum::BlockAzaleaLeavesBreak => f.write_str("BLOCK_AZALEA_LEAVES_BREAK"),
            SoundEnum::BlockAzaleaLeavesFall => f.write_str("BLOCK_AZALEA_LEAVES_FALL"),
            SoundEnum::BlockAzaleaLeavesHit => f.write_str("BLOCK_AZALEA_LEAVES_HIT"),
            SoundEnum::BlockAzaleaLeavesPlace => f.write_str("BLOCK_AZALEA_LEAVES_PLACE"),
            SoundEnum::BlockAzaleaLeavesStep => f.write_str("BLOCK_AZALEA_LEAVES_STEP"),
            SoundEnum::BlockAzaleaPlace => f.write_str("BLOCK_AZALEA_PLACE"),
            SoundEnum::BlockAzaleaStep => f.write_str("BLOCK_AZALEA_STEP"),
            SoundEnum::BlockBambooBreak => f.write_str("BLOCK_BAMBOO_BREAK"),
            SoundEnum::BlockBambooFall => f.write_str("BLOCK_BAMBOO_FALL"),
            SoundEnum::BlockBambooHit => f.write_str("BLOCK_BAMBOO_HIT"),
            SoundEnum::BlockBambooPlace => f.write_str("BLOCK_BAMBOO_PLACE"),
            SoundEnum::BlockBambooSaplingBreak => f.write_str("BLOCK_BAMBOO_SAPLING_BREAK"),
            SoundEnum::BlockBambooSaplingHit => f.write_str("BLOCK_BAMBOO_SAPLING_HIT"),
            SoundEnum::BlockBambooSaplingPlace => f.write_str("BLOCK_BAMBOO_SAPLING_PLACE"),
            SoundEnum::BlockBambooStep => f.write_str("BLOCK_BAMBOO_STEP"),
            SoundEnum::BlockBambooWoodBreak => f.write_str("BLOCK_BAMBOO_WOOD_BREAK"),
            SoundEnum::BlockBambooWoodButtonClickOff => {
                f.write_str("BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF")
            }
            SoundEnum::BlockBambooWoodButtonClickOn => {
                f.write_str("BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON")
            }
            SoundEnum::BlockBambooWoodDoorClose => f.write_str("BLOCK_BAMBOO_WOOD_DOOR_CLOSE"),
            SoundEnum::BlockBambooWoodDoorOpen => f.write_str("BLOCK_BAMBOO_WOOD_DOOR_OPEN"),
            SoundEnum::BlockBambooWoodFall => f.write_str("BLOCK_BAMBOO_WOOD_FALL"),
            SoundEnum::BlockBambooWoodFenceGateClose => {
                f.write_str("BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE")
            }
            SoundEnum::BlockBambooWoodFenceGateOpen => {
                f.write_str("BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN")
            }
            SoundEnum::BlockBambooWoodHangingSignBreak => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK")
            }
            SoundEnum::BlockBambooWoodHangingSignFall => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL")
            }
            SoundEnum::BlockBambooWoodHangingSignHit => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT")
            }
            SoundEnum::BlockBambooWoodHangingSignPlace => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE")
            }
            SoundEnum::BlockBambooWoodHangingSignStep => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP")
            }
            SoundEnum::BlockBambooWoodHit => f.write_str("BLOCK_BAMBOO_WOOD_HIT"),
            SoundEnum::BlockBambooWoodPlace => f.write_str("BLOCK_BAMBOO_WOOD_PLACE"),
            SoundEnum::BlockBambooWoodPressurePlateClickOff => {
                f.write_str("BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockBambooWoodPressurePlateClickOn => {
                f.write_str("BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockBambooWoodStep => f.write_str("BLOCK_BAMBOO_WOOD_STEP"),
            SoundEnum::BlockBambooWoodTrapdoorClose => {
                f.write_str("BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE")
            }
            SoundEnum::BlockBambooWoodTrapdoorOpen => {
                f.write_str("BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN")
            }
            SoundEnum::BlockBarrelClose => f.write_str("BLOCK_BARREL_CLOSE"),
            SoundEnum::BlockBarrelOpen => f.write_str("BLOCK_BARREL_OPEN"),
            SoundEnum::BlockBasaltBreak => f.write_str("BLOCK_BASALT_BREAK"),
            SoundEnum::BlockBasaltFall => f.write_str("BLOCK_BASALT_FALL"),
            SoundEnum::BlockBasaltHit => f.write_str("BLOCK_BASALT_HIT"),
            SoundEnum::BlockBasaltPlace => f.write_str("BLOCK_BASALT_PLACE"),
            SoundEnum::BlockBasaltStep => f.write_str("BLOCK_BASALT_STEP"),
            SoundEnum::BlockBeaconActivate => f.write_str("BLOCK_BEACON_ACTIVATE"),
            SoundEnum::BlockBeaconAmbient => f.write_str("BLOCK_BEACON_AMBIENT"),
            SoundEnum::BlockBeaconDeactivate => f.write_str("BLOCK_BEACON_DEACTIVATE"),
            SoundEnum::BlockBeaconPowerSelect => f.write_str("BLOCK_BEACON_POWER_SELECT"),
            SoundEnum::BlockBeehiveDrip => f.write_str("BLOCK_BEEHIVE_DRIP"),
            SoundEnum::BlockBeehiveEnter => f.write_str("BLOCK_BEEHIVE_ENTER"),
            SoundEnum::BlockBeehiveExit => f.write_str("BLOCK_BEEHIVE_EXIT"),
            SoundEnum::BlockBeehiveShear => f.write_str("BLOCK_BEEHIVE_SHEAR"),
            SoundEnum::BlockBeehiveWork => f.write_str("BLOCK_BEEHIVE_WORK"),
            SoundEnum::BlockBellResonate => f.write_str("BLOCK_BELL_RESONATE"),
            SoundEnum::BlockBellUse => f.write_str("BLOCK_BELL_USE"),
            SoundEnum::BlockBigDripleafBreak => f.write_str("BLOCK_BIG_DRIPLEAF_BREAK"),
            SoundEnum::BlockBigDripleafFall => f.write_str("BLOCK_BIG_DRIPLEAF_FALL"),
            SoundEnum::BlockBigDripleafHit => f.write_str("BLOCK_BIG_DRIPLEAF_HIT"),
            SoundEnum::BlockBigDripleafPlace => f.write_str("BLOCK_BIG_DRIPLEAF_PLACE"),
            SoundEnum::BlockBigDripleafStep => f.write_str("BLOCK_BIG_DRIPLEAF_STEP"),
            SoundEnum::BlockBigDripleafTiltDown => f.write_str("BLOCK_BIG_DRIPLEAF_TILT_DOWN"),
            SoundEnum::BlockBigDripleafTiltUp => f.write_str("BLOCK_BIG_DRIPLEAF_TILT_UP"),
            SoundEnum::BlockBlastfurnaceFireCrackle => {
                f.write_str("BLOCK_BLASTFURNACE_FIRE_CRACKLE")
            }
            SoundEnum::BlockBoneBlockBreak => f.write_str("BLOCK_BONE_BLOCK_BREAK"),
            SoundEnum::BlockBoneBlockFall => f.write_str("BLOCK_BONE_BLOCK_FALL"),
            SoundEnum::BlockBoneBlockHit => f.write_str("BLOCK_BONE_BLOCK_HIT"),
            SoundEnum::BlockBoneBlockPlace => f.write_str("BLOCK_BONE_BLOCK_PLACE"),
            SoundEnum::BlockBoneBlockStep => f.write_str("BLOCK_BONE_BLOCK_STEP"),
            SoundEnum::BlockBrewingStandBrew => f.write_str("BLOCK_BREWING_STAND_BREW"),
            SoundEnum::BlockBubbleColumnBubblePop => f.write_str("BLOCK_BUBBLE_COLUMN_BUBBLE_POP"),
            SoundEnum::BlockBubbleColumnUpwardsAmbient => {
                f.write_str("BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT")
            }
            SoundEnum::BlockBubbleColumnUpwardsInside => {
                f.write_str("BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE")
            }
            SoundEnum::BlockBubbleColumnWhirlpoolAmbient => {
                f.write_str("BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT")
            }
            SoundEnum::BlockBubbleColumnWhirlpoolInside => {
                f.write_str("BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE")
            }
            SoundEnum::BlockCakeAddCandle => f.write_str("BLOCK_CAKE_ADD_CANDLE"),
            SoundEnum::BlockCalciteBreak => f.write_str("BLOCK_CALCITE_BREAK"),
            SoundEnum::BlockCalciteFall => f.write_str("BLOCK_CALCITE_FALL"),
            SoundEnum::BlockCalciteHit => f.write_str("BLOCK_CALCITE_HIT"),
            SoundEnum::BlockCalcitePlace => f.write_str("BLOCK_CALCITE_PLACE"),
            SoundEnum::BlockCalciteStep => f.write_str("BLOCK_CALCITE_STEP"),
            SoundEnum::BlockCampfireCrackle => f.write_str("BLOCK_CAMPFIRE_CRACKLE"),
            SoundEnum::BlockCandleAmbient => f.write_str("BLOCK_CANDLE_AMBIENT"),
            SoundEnum::BlockCandleBreak => f.write_str("BLOCK_CANDLE_BREAK"),
            SoundEnum::BlockCandleExtinguish => f.write_str("BLOCK_CANDLE_EXTINGUISH"),
            SoundEnum::BlockCandleFall => f.write_str("BLOCK_CANDLE_FALL"),
            SoundEnum::BlockCandleHit => f.write_str("BLOCK_CANDLE_HIT"),
            SoundEnum::BlockCandlePlace => f.write_str("BLOCK_CANDLE_PLACE"),
            SoundEnum::BlockCandleStep => f.write_str("BLOCK_CANDLE_STEP"),
            SoundEnum::BlockCaveVinesBreak => f.write_str("BLOCK_CAVE_VINES_BREAK"),
            SoundEnum::BlockCaveVinesFall => f.write_str("BLOCK_CAVE_VINES_FALL"),
            SoundEnum::BlockCaveVinesHit => f.write_str("BLOCK_CAVE_VINES_HIT"),
            SoundEnum::BlockCaveVinesPickBerries => f.write_str("BLOCK_CAVE_VINES_PICK_BERRIES"),
            SoundEnum::BlockCaveVinesPlace => f.write_str("BLOCK_CAVE_VINES_PLACE"),
            SoundEnum::BlockCaveVinesStep => f.write_str("BLOCK_CAVE_VINES_STEP"),
            SoundEnum::BlockChainBreak => f.write_str("BLOCK_CHAIN_BREAK"),
            SoundEnum::BlockChainFall => f.write_str("BLOCK_CHAIN_FALL"),
            SoundEnum::BlockChainHit => f.write_str("BLOCK_CHAIN_HIT"),
            SoundEnum::BlockChainPlace => f.write_str("BLOCK_CHAIN_PLACE"),
            SoundEnum::BlockChainStep => f.write_str("BLOCK_CHAIN_STEP"),
            SoundEnum::BlockCherryLeavesBreak => f.write_str("BLOCK_CHERRY_LEAVES_BREAK"),
            SoundEnum::BlockCherryLeavesFall => f.write_str("BLOCK_CHERRY_LEAVES_FALL"),
            SoundEnum::BlockCherryLeavesHit => f.write_str("BLOCK_CHERRY_LEAVES_HIT"),
            SoundEnum::BlockCherryLeavesPlace => f.write_str("BLOCK_CHERRY_LEAVES_PLACE"),
            SoundEnum::BlockCherryLeavesStep => f.write_str("BLOCK_CHERRY_LEAVES_STEP"),
            SoundEnum::BlockCherrySaplingBreak => f.write_str("BLOCK_CHERRY_SAPLING_BREAK"),
            SoundEnum::BlockCherrySaplingFall => f.write_str("BLOCK_CHERRY_SAPLING_FALL"),
            SoundEnum::BlockCherrySaplingHit => f.write_str("BLOCK_CHERRY_SAPLING_HIT"),
            SoundEnum::BlockCherrySaplingPlace => f.write_str("BLOCK_CHERRY_SAPLING_PLACE"),
            SoundEnum::BlockCherrySaplingStep => f.write_str("BLOCK_CHERRY_SAPLING_STEP"),
            SoundEnum::BlockCherryWoodBreak => f.write_str("BLOCK_CHERRY_WOOD_BREAK"),
            SoundEnum::BlockCherryWoodButtonClickOff => {
                f.write_str("BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF")
            }
            SoundEnum::BlockCherryWoodButtonClickOn => {
                f.write_str("BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON")
            }
            SoundEnum::BlockCherryWoodDoorClose => f.write_str("BLOCK_CHERRY_WOOD_DOOR_CLOSE"),
            SoundEnum::BlockCherryWoodDoorOpen => f.write_str("BLOCK_CHERRY_WOOD_DOOR_OPEN"),
            SoundEnum::BlockCherryWoodFall => f.write_str("BLOCK_CHERRY_WOOD_FALL"),
            SoundEnum::BlockCherryWoodFenceGateClose => {
                f.write_str("BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE")
            }
            SoundEnum::BlockCherryWoodFenceGateOpen => {
                f.write_str("BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN")
            }
            SoundEnum::BlockCherryWoodHangingSignBreak => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK")
            }
            SoundEnum::BlockCherryWoodHangingSignFall => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL")
            }
            SoundEnum::BlockCherryWoodHangingSignHit => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT")
            }
            SoundEnum::BlockCherryWoodHangingSignPlace => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE")
            }
            SoundEnum::BlockCherryWoodHangingSignStep => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP")
            }
            SoundEnum::BlockCherryWoodHit => f.write_str("BLOCK_CHERRY_WOOD_HIT"),
            SoundEnum::BlockCherryWoodPlace => f.write_str("BLOCK_CHERRY_WOOD_PLACE"),
            SoundEnum::BlockCherryWoodPressurePlateClickOff => {
                f.write_str("BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockCherryWoodPressurePlateClickOn => {
                f.write_str("BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockCherryWoodStep => f.write_str("BLOCK_CHERRY_WOOD_STEP"),
            SoundEnum::BlockCherryWoodTrapdoorClose => {
                f.write_str("BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE")
            }
            SoundEnum::BlockCherryWoodTrapdoorOpen => {
                f.write_str("BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN")
            }
            SoundEnum::BlockChestClose => f.write_str("BLOCK_CHEST_CLOSE"),
            SoundEnum::BlockChestLocked => f.write_str("BLOCK_CHEST_LOCKED"),
            SoundEnum::BlockChestOpen => f.write_str("BLOCK_CHEST_OPEN"),
            SoundEnum::BlockChiseledBookshelfBreak => f.write_str("BLOCK_CHISELED_BOOKSHELF_BREAK"),
            SoundEnum::BlockChiseledBookshelfFall => f.write_str("BLOCK_CHISELED_BOOKSHELF_FALL"),
            SoundEnum::BlockChiseledBookshelfHit => f.write_str("BLOCK_CHISELED_BOOKSHELF_HIT"),
            SoundEnum::BlockChiseledBookshelfInsert => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_INSERT")
            }
            SoundEnum::BlockChiseledBookshelfInsertEnchanted => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED")
            }
            SoundEnum::BlockChiseledBookshelfPickup => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_PICKUP")
            }
            SoundEnum::BlockChiseledBookshelfPickupEnchanted => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED")
            }
            SoundEnum::BlockChiseledBookshelfPlace => f.write_str("BLOCK_CHISELED_BOOKSHELF_PLACE"),
            SoundEnum::BlockChiseledBookshelfStep => f.write_str("BLOCK_CHISELED_BOOKSHELF_STEP"),
            SoundEnum::BlockChorusFlowerDeath => f.write_str("BLOCK_CHORUS_FLOWER_DEATH"),
            SoundEnum::BlockChorusFlowerGrow => f.write_str("BLOCK_CHORUS_FLOWER_GROW"),
            SoundEnum::BlockComparatorClick => f.write_str("BLOCK_COMPARATOR_CLICK"),
            SoundEnum::BlockComposterEmpty => f.write_str("BLOCK_COMPOSTER_EMPTY"),
            SoundEnum::BlockComposterFill => f.write_str("BLOCK_COMPOSTER_FILL"),
            SoundEnum::BlockComposterFillSuccess => f.write_str("BLOCK_COMPOSTER_FILL_SUCCESS"),
            SoundEnum::BlockComposterReady => f.write_str("BLOCK_COMPOSTER_READY"),
            SoundEnum::BlockConduitActivate => f.write_str("BLOCK_CONDUIT_ACTIVATE"),
            SoundEnum::BlockConduitAmbient => f.write_str("BLOCK_CONDUIT_AMBIENT"),
            SoundEnum::BlockConduitAmbientShort => f.write_str("BLOCK_CONDUIT_AMBIENT_SHORT"),
            SoundEnum::BlockConduitAttackTarget => f.write_str("BLOCK_CONDUIT_ATTACK_TARGET"),
            SoundEnum::BlockConduitDeactivate => f.write_str("BLOCK_CONDUIT_DEACTIVATE"),
            SoundEnum::BlockCopperBreak => f.write_str("BLOCK_COPPER_BREAK"),
            SoundEnum::BlockCopperFall => f.write_str("BLOCK_COPPER_FALL"),
            SoundEnum::BlockCopperHit => f.write_str("BLOCK_COPPER_HIT"),
            SoundEnum::BlockCopperPlace => f.write_str("BLOCK_COPPER_PLACE"),
            SoundEnum::BlockCopperStep => f.write_str("BLOCK_COPPER_STEP"),
            SoundEnum::BlockCoralBlockBreak => f.write_str("BLOCK_CORAL_BLOCK_BREAK"),
            SoundEnum::BlockCoralBlockFall => f.write_str("BLOCK_CORAL_BLOCK_FALL"),
            SoundEnum::BlockCoralBlockHit => f.write_str("BLOCK_CORAL_BLOCK_HIT"),
            SoundEnum::BlockCoralBlockPlace => f.write_str("BLOCK_CORAL_BLOCK_PLACE"),
            SoundEnum::BlockCoralBlockStep => f.write_str("BLOCK_CORAL_BLOCK_STEP"),
            SoundEnum::BlockCropBreak => f.write_str("BLOCK_CROP_BREAK"),
            SoundEnum::BlockDecoratedPotBreak => f.write_str("BLOCK_DECORATED_POT_BREAK"),
            SoundEnum::BlockDecoratedPotFall => f.write_str("BLOCK_DECORATED_POT_FALL"),
            SoundEnum::BlockDecoratedPotHit => f.write_str("BLOCK_DECORATED_POT_HIT"),
            SoundEnum::BlockDecoratedPotPlace => f.write_str("BLOCK_DECORATED_POT_PLACE"),
            SoundEnum::BlockDecoratedPotShatter => f.write_str("BLOCK_DECORATED_POT_SHATTER"),
            SoundEnum::BlockDecoratedPotStep => f.write_str("BLOCK_DECORATED_POT_STEP"),
            SoundEnum::BlockDeepslateBreak => f.write_str("BLOCK_DEEPSLATE_BREAK"),
            SoundEnum::BlockDeepslateBricksBreak => f.write_str("BLOCK_DEEPSLATE_BRICKS_BREAK"),
            SoundEnum::BlockDeepslateBricksFall => f.write_str("BLOCK_DEEPSLATE_BRICKS_FALL"),
            SoundEnum::BlockDeepslateBricksHit => f.write_str("BLOCK_DEEPSLATE_BRICKS_HIT"),
            SoundEnum::BlockDeepslateBricksPlace => f.write_str("BLOCK_DEEPSLATE_BRICKS_PLACE"),
            SoundEnum::BlockDeepslateBricksStep => f.write_str("BLOCK_DEEPSLATE_BRICKS_STEP"),
            SoundEnum::BlockDeepslateFall => f.write_str("BLOCK_DEEPSLATE_FALL"),
            SoundEnum::BlockDeepslateHit => f.write_str("BLOCK_DEEPSLATE_HIT"),
            SoundEnum::BlockDeepslatePlace => f.write_str("BLOCK_DEEPSLATE_PLACE"),
            SoundEnum::BlockDeepslateStep => f.write_str("BLOCK_DEEPSLATE_STEP"),
            SoundEnum::BlockDeepslateTilesBreak => f.write_str("BLOCK_DEEPSLATE_TILES_BREAK"),
            SoundEnum::BlockDeepslateTilesFall => f.write_str("BLOCK_DEEPSLATE_TILES_FALL"),
            SoundEnum::BlockDeepslateTilesHit => f.write_str("BLOCK_DEEPSLATE_TILES_HIT"),
            SoundEnum::BlockDeepslateTilesPlace => f.write_str("BLOCK_DEEPSLATE_TILES_PLACE"),
            SoundEnum::BlockDeepslateTilesStep => f.write_str("BLOCK_DEEPSLATE_TILES_STEP"),
            SoundEnum::BlockDispenserDispense => f.write_str("BLOCK_DISPENSER_DISPENSE"),
            SoundEnum::BlockDispenserFail => f.write_str("BLOCK_DISPENSER_FAIL"),
            SoundEnum::BlockDispenserLaunch => f.write_str("BLOCK_DISPENSER_LAUNCH"),
            SoundEnum::BlockDripstoneBlockBreak => f.write_str("BLOCK_DRIPSTONE_BLOCK_BREAK"),
            SoundEnum::BlockDripstoneBlockFall => f.write_str("BLOCK_DRIPSTONE_BLOCK_FALL"),
            SoundEnum::BlockDripstoneBlockHit => f.write_str("BLOCK_DRIPSTONE_BLOCK_HIT"),
            SoundEnum::BlockDripstoneBlockPlace => f.write_str("BLOCK_DRIPSTONE_BLOCK_PLACE"),
            SoundEnum::BlockDripstoneBlockStep => f.write_str("BLOCK_DRIPSTONE_BLOCK_STEP"),
            SoundEnum::BlockEnchantmentTableUse => f.write_str("BLOCK_ENCHANTMENT_TABLE_USE"),
            SoundEnum::BlockEnderChestClose => f.write_str("BLOCK_ENDER_CHEST_CLOSE"),
            SoundEnum::BlockEnderChestOpen => f.write_str("BLOCK_ENDER_CHEST_OPEN"),
            SoundEnum::BlockEndGatewaySpawn => f.write_str("BLOCK_END_GATEWAY_SPAWN"),
            SoundEnum::BlockEndPortalFrameFill => f.write_str("BLOCK_END_PORTAL_FRAME_FILL"),
            SoundEnum::BlockEndPortalSpawn => f.write_str("BLOCK_END_PORTAL_SPAWN"),
            SoundEnum::BlockFenceGateClose => f.write_str("BLOCK_FENCE_GATE_CLOSE"),
            SoundEnum::BlockFenceGateOpen => f.write_str("BLOCK_FENCE_GATE_OPEN"),
            SoundEnum::BlockFireAmbient => f.write_str("BLOCK_FIRE_AMBIENT"),
            SoundEnum::BlockFireExtinguish => f.write_str("BLOCK_FIRE_EXTINGUISH"),
            SoundEnum::BlockFloweringAzaleaBreak => f.write_str("BLOCK_FLOWERING_AZALEA_BREAK"),
            SoundEnum::BlockFloweringAzaleaFall => f.write_str("BLOCK_FLOWERING_AZALEA_FALL"),
            SoundEnum::BlockFloweringAzaleaHit => f.write_str("BLOCK_FLOWERING_AZALEA_HIT"),
            SoundEnum::BlockFloweringAzaleaPlace => f.write_str("BLOCK_FLOWERING_AZALEA_PLACE"),
            SoundEnum::BlockFloweringAzaleaStep => f.write_str("BLOCK_FLOWERING_AZALEA_STEP"),
            SoundEnum::BlockFroglightBreak => f.write_str("BLOCK_FROGLIGHT_BREAK"),
            SoundEnum::BlockFroglightFall => f.write_str("BLOCK_FROGLIGHT_FALL"),
            SoundEnum::BlockFroglightHit => f.write_str("BLOCK_FROGLIGHT_HIT"),
            SoundEnum::BlockFroglightPlace => f.write_str("BLOCK_FROGLIGHT_PLACE"),
            SoundEnum::BlockFroglightStep => f.write_str("BLOCK_FROGLIGHT_STEP"),
            SoundEnum::BlockFrogspawnBreak => f.write_str("BLOCK_FROGSPAWN_BREAK"),
            SoundEnum::BlockFrogspawnFall => f.write_str("BLOCK_FROGSPAWN_FALL"),
            SoundEnum::BlockFrogspawnHatch => f.write_str("BLOCK_FROGSPAWN_HATCH"),
            SoundEnum::BlockFrogspawnHit => f.write_str("BLOCK_FROGSPAWN_HIT"),
            SoundEnum::BlockFrogspawnPlace => f.write_str("BLOCK_FROGSPAWN_PLACE"),
            SoundEnum::BlockFrogspawnStep => f.write_str("BLOCK_FROGSPAWN_STEP"),
            SoundEnum::BlockFungusBreak => f.write_str("BLOCK_FUNGUS_BREAK"),
            SoundEnum::BlockFungusFall => f.write_str("BLOCK_FUNGUS_FALL"),
            SoundEnum::BlockFungusHit => f.write_str("BLOCK_FUNGUS_HIT"),
            SoundEnum::BlockFungusPlace => f.write_str("BLOCK_FUNGUS_PLACE"),
            SoundEnum::BlockFungusStep => f.write_str("BLOCK_FUNGUS_STEP"),
            SoundEnum::BlockFurnaceFireCrackle => f.write_str("BLOCK_FURNACE_FIRE_CRACKLE"),
            SoundEnum::BlockGildedBlackstoneBreak => f.write_str("BLOCK_GILDED_BLACKSTONE_BREAK"),
            SoundEnum::BlockGildedBlackstoneFall => f.write_str("BLOCK_GILDED_BLACKSTONE_FALL"),
            SoundEnum::BlockGildedBlackstoneHit => f.write_str("BLOCK_GILDED_BLACKSTONE_HIT"),
            SoundEnum::BlockGildedBlackstonePlace => f.write_str("BLOCK_GILDED_BLACKSTONE_PLACE"),
            SoundEnum::BlockGildedBlackstoneStep => f.write_str("BLOCK_GILDED_BLACKSTONE_STEP"),
            SoundEnum::BlockGlassBreak => f.write_str("BLOCK_GLASS_BREAK"),
            SoundEnum::BlockGlassFall => f.write_str("BLOCK_GLASS_FALL"),
            SoundEnum::BlockGlassHit => f.write_str("BLOCK_GLASS_HIT"),
            SoundEnum::BlockGlassPlace => f.write_str("BLOCK_GLASS_PLACE"),
            SoundEnum::BlockGlassStep => f.write_str("BLOCK_GLASS_STEP"),
            SoundEnum::BlockGrassBreak => f.write_str("BLOCK_GRASS_BREAK"),
            SoundEnum::BlockGrassFall => f.write_str("BLOCK_GRASS_FALL"),
            SoundEnum::BlockGrassHit => f.write_str("BLOCK_GRASS_HIT"),
            SoundEnum::BlockGrassPlace => f.write_str("BLOCK_GRASS_PLACE"),
            SoundEnum::BlockGrassStep => f.write_str("BLOCK_GRASS_STEP"),
            SoundEnum::BlockGravelBreak => f.write_str("BLOCK_GRAVEL_BREAK"),
            SoundEnum::BlockGravelFall => f.write_str("BLOCK_GRAVEL_FALL"),
            SoundEnum::BlockGravelHit => f.write_str("BLOCK_GRAVEL_HIT"),
            SoundEnum::BlockGravelPlace => f.write_str("BLOCK_GRAVEL_PLACE"),
            SoundEnum::BlockGravelStep => f.write_str("BLOCK_GRAVEL_STEP"),
            SoundEnum::BlockGrindstoneUse => f.write_str("BLOCK_GRINDSTONE_USE"),
            SoundEnum::BlockGrowingPlantCrop => f.write_str("BLOCK_GROWING_PLANT_CROP"),
            SoundEnum::BlockHangingRootsBreak => f.write_str("BLOCK_HANGING_ROOTS_BREAK"),
            SoundEnum::BlockHangingRootsFall => f.write_str("BLOCK_HANGING_ROOTS_FALL"),
            SoundEnum::BlockHangingRootsHit => f.write_str("BLOCK_HANGING_ROOTS_HIT"),
            SoundEnum::BlockHangingRootsPlace => f.write_str("BLOCK_HANGING_ROOTS_PLACE"),
            SoundEnum::BlockHangingRootsStep => f.write_str("BLOCK_HANGING_ROOTS_STEP"),
            SoundEnum::BlockHangingSignBreak => f.write_str("BLOCK_HANGING_SIGN_BREAK"),
            SoundEnum::BlockHangingSignFall => f.write_str("BLOCK_HANGING_SIGN_FALL"),
            SoundEnum::BlockHangingSignHit => f.write_str("BLOCK_HANGING_SIGN_HIT"),
            SoundEnum::BlockHangingSignPlace => f.write_str("BLOCK_HANGING_SIGN_PLACE"),
            SoundEnum::BlockHangingSignStep => f.write_str("BLOCK_HANGING_SIGN_STEP"),
            SoundEnum::BlockHoneyBlockBreak => f.write_str("BLOCK_HONEY_BLOCK_BREAK"),
            SoundEnum::BlockHoneyBlockFall => f.write_str("BLOCK_HONEY_BLOCK_FALL"),
            SoundEnum::BlockHoneyBlockHit => f.write_str("BLOCK_HONEY_BLOCK_HIT"),
            SoundEnum::BlockHoneyBlockPlace => f.write_str("BLOCK_HONEY_BLOCK_PLACE"),
            SoundEnum::BlockHoneyBlockSlide => f.write_str("BLOCK_HONEY_BLOCK_SLIDE"),
            SoundEnum::BlockHoneyBlockStep => f.write_str("BLOCK_HONEY_BLOCK_STEP"),
            SoundEnum::BlockIronDoorClose => f.write_str("BLOCK_IRON_DOOR_CLOSE"),
            SoundEnum::BlockIronDoorOpen => f.write_str("BLOCK_IRON_DOOR_OPEN"),
            SoundEnum::BlockIronTrapdoorClose => f.write_str("BLOCK_IRON_TRAPDOOR_CLOSE"),
            SoundEnum::BlockIronTrapdoorOpen => f.write_str("BLOCK_IRON_TRAPDOOR_OPEN"),
            SoundEnum::BlockLadderBreak => f.write_str("BLOCK_LADDER_BREAK"),
            SoundEnum::BlockLadderFall => f.write_str("BLOCK_LADDER_FALL"),
            SoundEnum::BlockLadderHit => f.write_str("BLOCK_LADDER_HIT"),
            SoundEnum::BlockLadderPlace => f.write_str("BLOCK_LADDER_PLACE"),
            SoundEnum::BlockLadderStep => f.write_str("BLOCK_LADDER_STEP"),
            SoundEnum::BlockLanternBreak => f.write_str("BLOCK_LANTERN_BREAK"),
            SoundEnum::BlockLanternFall => f.write_str("BLOCK_LANTERN_FALL"),
            SoundEnum::BlockLanternHit => f.write_str("BLOCK_LANTERN_HIT"),
            SoundEnum::BlockLanternPlace => f.write_str("BLOCK_LANTERN_PLACE"),
            SoundEnum::BlockLanternStep => f.write_str("BLOCK_LANTERN_STEP"),
            SoundEnum::BlockLargeAmethystBudBreak => f.write_str("BLOCK_LARGE_AMETHYST_BUD_BREAK"),
            SoundEnum::BlockLargeAmethystBudPlace => f.write_str("BLOCK_LARGE_AMETHYST_BUD_PLACE"),
            SoundEnum::BlockLavaAmbient => f.write_str("BLOCK_LAVA_AMBIENT"),
            SoundEnum::BlockLavaExtinguish => f.write_str("BLOCK_LAVA_EXTINGUISH"),
            SoundEnum::BlockLavaPop => f.write_str("BLOCK_LAVA_POP"),
            SoundEnum::BlockLeverClick => f.write_str("BLOCK_LEVER_CLICK"),
            SoundEnum::BlockLilyPadPlace => f.write_str("BLOCK_LILY_PAD_PLACE"),
            SoundEnum::BlockLodestoneBreak => f.write_str("BLOCK_LODESTONE_BREAK"),
            SoundEnum::BlockLodestoneFall => f.write_str("BLOCK_LODESTONE_FALL"),
            SoundEnum::BlockLodestoneHit => f.write_str("BLOCK_LODESTONE_HIT"),
            SoundEnum::BlockLodestonePlace => f.write_str("BLOCK_LODESTONE_PLACE"),
            SoundEnum::BlockLodestoneStep => f.write_str("BLOCK_LODESTONE_STEP"),
            SoundEnum::BlockMangroveRootsBreak => f.write_str("BLOCK_MANGROVE_ROOTS_BREAK"),
            SoundEnum::BlockMangroveRootsFall => f.write_str("BLOCK_MANGROVE_ROOTS_FALL"),
            SoundEnum::BlockMangroveRootsHit => f.write_str("BLOCK_MANGROVE_ROOTS_HIT"),
            SoundEnum::BlockMangroveRootsPlace => f.write_str("BLOCK_MANGROVE_ROOTS_PLACE"),
            SoundEnum::BlockMangroveRootsStep => f.write_str("BLOCK_MANGROVE_ROOTS_STEP"),
            SoundEnum::BlockMediumAmethystBudBreak => {
                f.write_str("BLOCK_MEDIUM_AMETHYST_BUD_BREAK")
            }
            SoundEnum::BlockMediumAmethystBudPlace => {
                f.write_str("BLOCK_MEDIUM_AMETHYST_BUD_PLACE")
            }
            SoundEnum::BlockMetalBreak => f.write_str("BLOCK_METAL_BREAK"),
            SoundEnum::BlockMetalFall => f.write_str("BLOCK_METAL_FALL"),
            SoundEnum::BlockMetalHit => f.write_str("BLOCK_METAL_HIT"),
            SoundEnum::BlockMetalPlace => f.write_str("BLOCK_METAL_PLACE"),
            SoundEnum::BlockMetalPressurePlateClickOff => {
                f.write_str("BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockMetalPressurePlateClickOn => {
                f.write_str("BLOCK_METAL_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockMetalStep => f.write_str("BLOCK_METAL_STEP"),
            SoundEnum::BlockMossBreak => f.write_str("BLOCK_MOSS_BREAK"),
            SoundEnum::BlockMossCarpetBreak => f.write_str("BLOCK_MOSS_CARPET_BREAK"),
            SoundEnum::BlockMossCarpetFall => f.write_str("BLOCK_MOSS_CARPET_FALL"),
            SoundEnum::BlockMossCarpetHit => f.write_str("BLOCK_MOSS_CARPET_HIT"),
            SoundEnum::BlockMossCarpetPlace => f.write_str("BLOCK_MOSS_CARPET_PLACE"),
            SoundEnum::BlockMossCarpetStep => f.write_str("BLOCK_MOSS_CARPET_STEP"),
            SoundEnum::BlockMossFall => f.write_str("BLOCK_MOSS_FALL"),
            SoundEnum::BlockMossHit => f.write_str("BLOCK_MOSS_HIT"),
            SoundEnum::BlockMossPlace => f.write_str("BLOCK_MOSS_PLACE"),
            SoundEnum::BlockMossStep => f.write_str("BLOCK_MOSS_STEP"),
            SoundEnum::BlockMuddyMangroveRootsBreak => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_BREAK")
            }
            SoundEnum::BlockMuddyMangroveRootsFall => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_FALL")
            }
            SoundEnum::BlockMuddyMangroveRootsHit => f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_HIT"),
            SoundEnum::BlockMuddyMangroveRootsPlace => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_PLACE")
            }
            SoundEnum::BlockMuddyMangroveRootsStep => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_STEP")
            }
            SoundEnum::BlockMudBreak => f.write_str("BLOCK_MUD_BREAK"),
            SoundEnum::BlockMudBricksBreak => f.write_str("BLOCK_MUD_BRICKS_BREAK"),
            SoundEnum::BlockMudBricksFall => f.write_str("BLOCK_MUD_BRICKS_FALL"),
            SoundEnum::BlockMudBricksHit => f.write_str("BLOCK_MUD_BRICKS_HIT"),
            SoundEnum::BlockMudBricksPlace => f.write_str("BLOCK_MUD_BRICKS_PLACE"),
            SoundEnum::BlockMudBricksStep => f.write_str("BLOCK_MUD_BRICKS_STEP"),
            SoundEnum::BlockMudFall => f.write_str("BLOCK_MUD_FALL"),
            SoundEnum::BlockMudHit => f.write_str("BLOCK_MUD_HIT"),
            SoundEnum::BlockMudPlace => f.write_str("BLOCK_MUD_PLACE"),
            SoundEnum::BlockMudStep => f.write_str("BLOCK_MUD_STEP"),
            SoundEnum::BlockNetheriteBlockBreak => f.write_str("BLOCK_NETHERITE_BLOCK_BREAK"),
            SoundEnum::BlockNetheriteBlockFall => f.write_str("BLOCK_NETHERITE_BLOCK_FALL"),
            SoundEnum::BlockNetheriteBlockHit => f.write_str("BLOCK_NETHERITE_BLOCK_HIT"),
            SoundEnum::BlockNetheriteBlockPlace => f.write_str("BLOCK_NETHERITE_BLOCK_PLACE"),
            SoundEnum::BlockNetheriteBlockStep => f.write_str("BLOCK_NETHERITE_BLOCK_STEP"),
            SoundEnum::BlockNetherrackBreak => f.write_str("BLOCK_NETHERRACK_BREAK"),
            SoundEnum::BlockNetherrackFall => f.write_str("BLOCK_NETHERRACK_FALL"),
            SoundEnum::BlockNetherrackHit => f.write_str("BLOCK_NETHERRACK_HIT"),
            SoundEnum::BlockNetherrackPlace => f.write_str("BLOCK_NETHERRACK_PLACE"),
            SoundEnum::BlockNetherrackStep => f.write_str("BLOCK_NETHERRACK_STEP"),
            SoundEnum::BlockNetherBricksBreak => f.write_str("BLOCK_NETHER_BRICKS_BREAK"),
            SoundEnum::BlockNetherBricksFall => f.write_str("BLOCK_NETHER_BRICKS_FALL"),
            SoundEnum::BlockNetherBricksHit => f.write_str("BLOCK_NETHER_BRICKS_HIT"),
            SoundEnum::BlockNetherBricksPlace => f.write_str("BLOCK_NETHER_BRICKS_PLACE"),
            SoundEnum::BlockNetherBricksStep => f.write_str("BLOCK_NETHER_BRICKS_STEP"),
            SoundEnum::BlockNetherGoldOreBreak => f.write_str("BLOCK_NETHER_GOLD_ORE_BREAK"),
            SoundEnum::BlockNetherGoldOreFall => f.write_str("BLOCK_NETHER_GOLD_ORE_FALL"),
            SoundEnum::BlockNetherGoldOreHit => f.write_str("BLOCK_NETHER_GOLD_ORE_HIT"),
            SoundEnum::BlockNetherGoldOrePlace => f.write_str("BLOCK_NETHER_GOLD_ORE_PLACE"),
            SoundEnum::BlockNetherGoldOreStep => f.write_str("BLOCK_NETHER_GOLD_ORE_STEP"),
            SoundEnum::BlockNetherOreBreak => f.write_str("BLOCK_NETHER_ORE_BREAK"),
            SoundEnum::BlockNetherOreFall => f.write_str("BLOCK_NETHER_ORE_FALL"),
            SoundEnum::BlockNetherOreHit => f.write_str("BLOCK_NETHER_ORE_HIT"),
            SoundEnum::BlockNetherOrePlace => f.write_str("BLOCK_NETHER_ORE_PLACE"),
            SoundEnum::BlockNetherOreStep => f.write_str("BLOCK_NETHER_ORE_STEP"),
            SoundEnum::BlockNetherSproutsBreak => f.write_str("BLOCK_NETHER_SPROUTS_BREAK"),
            SoundEnum::BlockNetherSproutsFall => f.write_str("BLOCK_NETHER_SPROUTS_FALL"),
            SoundEnum::BlockNetherSproutsHit => f.write_str("BLOCK_NETHER_SPROUTS_HIT"),
            SoundEnum::BlockNetherSproutsPlace => f.write_str("BLOCK_NETHER_SPROUTS_PLACE"),
            SoundEnum::BlockNetherSproutsStep => f.write_str("BLOCK_NETHER_SPROUTS_STEP"),
            SoundEnum::BlockNetherWartBreak => f.write_str("BLOCK_NETHER_WART_BREAK"),
            SoundEnum::BlockNetherWoodBreak => f.write_str("BLOCK_NETHER_WOOD_BREAK"),
            SoundEnum::BlockNetherWoodButtonClickOff => {
                f.write_str("BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF")
            }
            SoundEnum::BlockNetherWoodButtonClickOn => {
                f.write_str("BLOCK_NETHER_WOOD_BUTTON_CLICK_ON")
            }
            SoundEnum::BlockNetherWoodDoorClose => f.write_str("BLOCK_NETHER_WOOD_DOOR_CLOSE"),
            SoundEnum::BlockNetherWoodDoorOpen => f.write_str("BLOCK_NETHER_WOOD_DOOR_OPEN"),
            SoundEnum::BlockNetherWoodFall => f.write_str("BLOCK_NETHER_WOOD_FALL"),
            SoundEnum::BlockNetherWoodFenceGateClose => {
                f.write_str("BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE")
            }
            SoundEnum::BlockNetherWoodFenceGateOpen => {
                f.write_str("BLOCK_NETHER_WOOD_FENCE_GATE_OPEN")
            }
            SoundEnum::BlockNetherWoodHangingSignBreak => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK")
            }
            SoundEnum::BlockNetherWoodHangingSignFall => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_FALL")
            }
            SoundEnum::BlockNetherWoodHangingSignHit => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_HIT")
            }
            SoundEnum::BlockNetherWoodHangingSignPlace => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE")
            }
            SoundEnum::BlockNetherWoodHangingSignStep => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_STEP")
            }
            SoundEnum::BlockNetherWoodHit => f.write_str("BLOCK_NETHER_WOOD_HIT"),
            SoundEnum::BlockNetherWoodPlace => f.write_str("BLOCK_NETHER_WOOD_PLACE"),
            SoundEnum::BlockNetherWoodPressurePlateClickOff => {
                f.write_str("BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockNetherWoodPressurePlateClickOn => {
                f.write_str("BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockNetherWoodStep => f.write_str("BLOCK_NETHER_WOOD_STEP"),
            SoundEnum::BlockNetherWoodTrapdoorClose => {
                f.write_str("BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE")
            }
            SoundEnum::BlockNetherWoodTrapdoorOpen => {
                f.write_str("BLOCK_NETHER_WOOD_TRAPDOOR_OPEN")
            }
            SoundEnum::BlockNoteBlockBanjo => f.write_str("BLOCK_NOTE_BLOCK_BANJO"),
            SoundEnum::BlockNoteBlockBasedrum => f.write_str("BLOCK_NOTE_BLOCK_BASEDRUM"),
            SoundEnum::BlockNoteBlockBass => f.write_str("BLOCK_NOTE_BLOCK_BASS"),
            SoundEnum::BlockNoteBlockBell => f.write_str("BLOCK_NOTE_BLOCK_BELL"),
            SoundEnum::BlockNoteBlockBit => f.write_str("BLOCK_NOTE_BLOCK_BIT"),
            SoundEnum::BlockNoteBlockChime => f.write_str("BLOCK_NOTE_BLOCK_CHIME"),
            SoundEnum::BlockNoteBlockCowBell => f.write_str("BLOCK_NOTE_BLOCK_COW_BELL"),
            SoundEnum::BlockNoteBlockDidgeridoo => f.write_str("BLOCK_NOTE_BLOCK_DIDGERIDOO"),
            SoundEnum::BlockNoteBlockFlute => f.write_str("BLOCK_NOTE_BLOCK_FLUTE"),
            SoundEnum::BlockNoteBlockGuitar => f.write_str("BLOCK_NOTE_BLOCK_GUITAR"),
            SoundEnum::BlockNoteBlockHarp => f.write_str("BLOCK_NOTE_BLOCK_HARP"),
            SoundEnum::BlockNoteBlockHat => f.write_str("BLOCK_NOTE_BLOCK_HAT"),
            SoundEnum::BlockNoteBlockImitateCreeper => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_CREEPER")
            }
            SoundEnum::BlockNoteBlockImitateEnderDragon => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON")
            }
            SoundEnum::BlockNoteBlockImitatePiglin => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_PIGLIN")
            }
            SoundEnum::BlockNoteBlockImitateSkeleton => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_SKELETON")
            }
            SoundEnum::BlockNoteBlockImitateWitherSkeleton => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON")
            }
            SoundEnum::BlockNoteBlockImitateZombie => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE")
            }
            SoundEnum::BlockNoteBlockIronXylophone => {
                f.write_str("BLOCK_NOTE_BLOCK_IRON_XYLOPHONE")
            }
            SoundEnum::BlockNoteBlockPling => f.write_str("BLOCK_NOTE_BLOCK_PLING"),
            SoundEnum::BlockNoteBlockSnare => f.write_str("BLOCK_NOTE_BLOCK_SNARE"),
            SoundEnum::BlockNoteBlockXylophone => f.write_str("BLOCK_NOTE_BLOCK_XYLOPHONE"),
            SoundEnum::BlockNyliumBreak => f.write_str("BLOCK_NYLIUM_BREAK"),
            SoundEnum::BlockNyliumFall => f.write_str("BLOCK_NYLIUM_FALL"),
            SoundEnum::BlockNyliumHit => f.write_str("BLOCK_NYLIUM_HIT"),
            SoundEnum::BlockNyliumPlace => f.write_str("BLOCK_NYLIUM_PLACE"),
            SoundEnum::BlockNyliumStep => f.write_str("BLOCK_NYLIUM_STEP"),
            SoundEnum::BlockPackedMudBreak => f.write_str("BLOCK_PACKED_MUD_BREAK"),
            SoundEnum::BlockPackedMudFall => f.write_str("BLOCK_PACKED_MUD_FALL"),
            SoundEnum::BlockPackedMudHit => f.write_str("BLOCK_PACKED_MUD_HIT"),
            SoundEnum::BlockPackedMudPlace => f.write_str("BLOCK_PACKED_MUD_PLACE"),
            SoundEnum::BlockPackedMudStep => f.write_str("BLOCK_PACKED_MUD_STEP"),
            SoundEnum::BlockPinkPetalsBreak => f.write_str("BLOCK_PINK_PETALS_BREAK"),
            SoundEnum::BlockPinkPetalsFall => f.write_str("BLOCK_PINK_PETALS_FALL"),
            SoundEnum::BlockPinkPetalsHit => f.write_str("BLOCK_PINK_PETALS_HIT"),
            SoundEnum::BlockPinkPetalsPlace => f.write_str("BLOCK_PINK_PETALS_PLACE"),
            SoundEnum::BlockPinkPetalsStep => f.write_str("BLOCK_PINK_PETALS_STEP"),
            SoundEnum::BlockPistonContract => f.write_str("BLOCK_PISTON_CONTRACT"),
            SoundEnum::BlockPistonExtend => f.write_str("BLOCK_PISTON_EXTEND"),
            SoundEnum::BlockPointedDripstoneBreak => f.write_str("BLOCK_POINTED_DRIPSTONE_BREAK"),
            SoundEnum::BlockPointedDripstoneDripLava => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_LAVA")
            }
            SoundEnum::BlockPointedDripstoneDripLavaIntoCauldron => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON")
            }
            SoundEnum::BlockPointedDripstoneDripWater => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_WATER")
            }
            SoundEnum::BlockPointedDripstoneDripWaterIntoCauldron => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON")
            }
            SoundEnum::BlockPointedDripstoneFall => f.write_str("BLOCK_POINTED_DRIPSTONE_FALL"),
            SoundEnum::BlockPointedDripstoneHit => f.write_str("BLOCK_POINTED_DRIPSTONE_HIT"),
            SoundEnum::BlockPointedDripstoneLand => f.write_str("BLOCK_POINTED_DRIPSTONE_LAND"),
            SoundEnum::BlockPointedDripstonePlace => f.write_str("BLOCK_POINTED_DRIPSTONE_PLACE"),
            SoundEnum::BlockPointedDripstoneStep => f.write_str("BLOCK_POINTED_DRIPSTONE_STEP"),
            SoundEnum::BlockPolishedDeepslateBreak => f.write_str("BLOCK_POLISHED_DEEPSLATE_BREAK"),
            SoundEnum::BlockPolishedDeepslateFall => f.write_str("BLOCK_POLISHED_DEEPSLATE_FALL"),
            SoundEnum::BlockPolishedDeepslateHit => f.write_str("BLOCK_POLISHED_DEEPSLATE_HIT"),
            SoundEnum::BlockPolishedDeepslatePlace => f.write_str("BLOCK_POLISHED_DEEPSLATE_PLACE"),
            SoundEnum::BlockPolishedDeepslateStep => f.write_str("BLOCK_POLISHED_DEEPSLATE_STEP"),
            SoundEnum::BlockPortalAmbient => f.write_str("BLOCK_PORTAL_AMBIENT"),
            SoundEnum::BlockPortalTravel => f.write_str("BLOCK_PORTAL_TRAVEL"),
            SoundEnum::BlockPortalTrigger => f.write_str("BLOCK_PORTAL_TRIGGER"),
            SoundEnum::BlockPowderSnowBreak => f.write_str("BLOCK_POWDER_SNOW_BREAK"),
            SoundEnum::BlockPowderSnowFall => f.write_str("BLOCK_POWDER_SNOW_FALL"),
            SoundEnum::BlockPowderSnowHit => f.write_str("BLOCK_POWDER_SNOW_HIT"),
            SoundEnum::BlockPowderSnowPlace => f.write_str("BLOCK_POWDER_SNOW_PLACE"),
            SoundEnum::BlockPowderSnowStep => f.write_str("BLOCK_POWDER_SNOW_STEP"),
            SoundEnum::BlockPumpkinCarve => f.write_str("BLOCK_PUMPKIN_CARVE"),
            SoundEnum::BlockRedstoneTorchBurnout => f.write_str("BLOCK_REDSTONE_TORCH_BURNOUT"),
            SoundEnum::BlockRespawnAnchorAmbient => f.write_str("BLOCK_RESPAWN_ANCHOR_AMBIENT"),
            SoundEnum::BlockRespawnAnchorCharge => f.write_str("BLOCK_RESPAWN_ANCHOR_CHARGE"),
            SoundEnum::BlockRespawnAnchorDeplete => f.write_str("BLOCK_RESPAWN_ANCHOR_DEPLETE"),
            SoundEnum::BlockRespawnAnchorSetSpawn => f.write_str("BLOCK_RESPAWN_ANCHOR_SET_SPAWN"),
            SoundEnum::BlockRootedDirtBreak => f.write_str("BLOCK_ROOTED_DIRT_BREAK"),
            SoundEnum::BlockRootedDirtFall => f.write_str("BLOCK_ROOTED_DIRT_FALL"),
            SoundEnum::BlockRootedDirtHit => f.write_str("BLOCK_ROOTED_DIRT_HIT"),
            SoundEnum::BlockRootedDirtPlace => f.write_str("BLOCK_ROOTED_DIRT_PLACE"),
            SoundEnum::BlockRootedDirtStep => f.write_str("BLOCK_ROOTED_DIRT_STEP"),
            SoundEnum::BlockRootsBreak => f.write_str("BLOCK_ROOTS_BREAK"),
            SoundEnum::BlockRootsFall => f.write_str("BLOCK_ROOTS_FALL"),
            SoundEnum::BlockRootsHit => f.write_str("BLOCK_ROOTS_HIT"),
            SoundEnum::BlockRootsPlace => f.write_str("BLOCK_ROOTS_PLACE"),
            SoundEnum::BlockRootsStep => f.write_str("BLOCK_ROOTS_STEP"),
            SoundEnum::BlockSandBreak => f.write_str("BLOCK_SAND_BREAK"),
            SoundEnum::BlockSandFall => f.write_str("BLOCK_SAND_FALL"),
            SoundEnum::BlockSandHit => f.write_str("BLOCK_SAND_HIT"),
            SoundEnum::BlockSandPlace => f.write_str("BLOCK_SAND_PLACE"),
            SoundEnum::BlockSandStep => f.write_str("BLOCK_SAND_STEP"),
            SoundEnum::BlockScaffoldingBreak => f.write_str("BLOCK_SCAFFOLDING_BREAK"),
            SoundEnum::BlockScaffoldingFall => f.write_str("BLOCK_SCAFFOLDING_FALL"),
            SoundEnum::BlockScaffoldingHit => f.write_str("BLOCK_SCAFFOLDING_HIT"),
            SoundEnum::BlockScaffoldingPlace => f.write_str("BLOCK_SCAFFOLDING_PLACE"),
            SoundEnum::BlockScaffoldingStep => f.write_str("BLOCK_SCAFFOLDING_STEP"),
            SoundEnum::BlockSculkBreak => f.write_str("BLOCK_SCULK_BREAK"),
            SoundEnum::BlockSculkCatalystBloom => f.write_str("BLOCK_SCULK_CATALYST_BLOOM"),
            SoundEnum::BlockSculkCatalystBreak => f.write_str("BLOCK_SCULK_CATALYST_BREAK"),
            SoundEnum::BlockSculkCatalystFall => f.write_str("BLOCK_SCULK_CATALYST_FALL"),
            SoundEnum::BlockSculkCatalystHit => f.write_str("BLOCK_SCULK_CATALYST_HIT"),
            SoundEnum::BlockSculkCatalystPlace => f.write_str("BLOCK_SCULK_CATALYST_PLACE"),
            SoundEnum::BlockSculkCatalystStep => f.write_str("BLOCK_SCULK_CATALYST_STEP"),
            SoundEnum::BlockSculkCharge => f.write_str("BLOCK_SCULK_CHARGE"),
            SoundEnum::BlockSculkFall => f.write_str("BLOCK_SCULK_FALL"),
            SoundEnum::BlockSculkHit => f.write_str("BLOCK_SCULK_HIT"),
            SoundEnum::BlockSculkPlace => f.write_str("BLOCK_SCULK_PLACE"),
            SoundEnum::BlockSculkSensorBreak => f.write_str("BLOCK_SCULK_SENSOR_BREAK"),
            SoundEnum::BlockSculkSensorClicking => f.write_str("BLOCK_SCULK_SENSOR_CLICKING"),
            SoundEnum::BlockSculkSensorClickingStop => {
                f.write_str("BLOCK_SCULK_SENSOR_CLICKING_STOP")
            }
            SoundEnum::BlockSculkSensorFall => f.write_str("BLOCK_SCULK_SENSOR_FALL"),
            SoundEnum::BlockSculkSensorHit => f.write_str("BLOCK_SCULK_SENSOR_HIT"),
            SoundEnum::BlockSculkSensorPlace => f.write_str("BLOCK_SCULK_SENSOR_PLACE"),
            SoundEnum::BlockSculkSensorStep => f.write_str("BLOCK_SCULK_SENSOR_STEP"),
            SoundEnum::BlockSculkShriekerBreak => f.write_str("BLOCK_SCULK_SHRIEKER_BREAK"),
            SoundEnum::BlockSculkShriekerFall => f.write_str("BLOCK_SCULK_SHRIEKER_FALL"),
            SoundEnum::BlockSculkShriekerHit => f.write_str("BLOCK_SCULK_SHRIEKER_HIT"),
            SoundEnum::BlockSculkShriekerPlace => f.write_str("BLOCK_SCULK_SHRIEKER_PLACE"),
            SoundEnum::BlockSculkShriekerShriek => f.write_str("BLOCK_SCULK_SHRIEKER_SHRIEK"),
            SoundEnum::BlockSculkShriekerStep => f.write_str("BLOCK_SCULK_SHRIEKER_STEP"),
            SoundEnum::BlockSculkSpread => f.write_str("BLOCK_SCULK_SPREAD"),
            SoundEnum::BlockSculkStep => f.write_str("BLOCK_SCULK_STEP"),
            SoundEnum::BlockSculkVeinBreak => f.write_str("BLOCK_SCULK_VEIN_BREAK"),
            SoundEnum::BlockSculkVeinFall => f.write_str("BLOCK_SCULK_VEIN_FALL"),
            SoundEnum::BlockSculkVeinHit => f.write_str("BLOCK_SCULK_VEIN_HIT"),
            SoundEnum::BlockSculkVeinPlace => f.write_str("BLOCK_SCULK_VEIN_PLACE"),
            SoundEnum::BlockSculkVeinStep => f.write_str("BLOCK_SCULK_VEIN_STEP"),
            SoundEnum::BlockShroomlightBreak => f.write_str("BLOCK_SHROOMLIGHT_BREAK"),
            SoundEnum::BlockShroomlightFall => f.write_str("BLOCK_SHROOMLIGHT_FALL"),
            SoundEnum::BlockShroomlightHit => f.write_str("BLOCK_SHROOMLIGHT_HIT"),
            SoundEnum::BlockShroomlightPlace => f.write_str("BLOCK_SHROOMLIGHT_PLACE"),
            SoundEnum::BlockShroomlightStep => f.write_str("BLOCK_SHROOMLIGHT_STEP"),
            SoundEnum::BlockShulkerBoxClose => f.write_str("BLOCK_SHULKER_BOX_CLOSE"),
            SoundEnum::BlockShulkerBoxOpen => f.write_str("BLOCK_SHULKER_BOX_OPEN"),
            SoundEnum::BlockSignWaxedInteractFail => f.write_str("BLOCK_SIGN_WAXED_INTERACT_FAIL"),
            SoundEnum::BlockSlimeBlockBreak => f.write_str("BLOCK_SLIME_BLOCK_BREAK"),
            SoundEnum::BlockSlimeBlockFall => f.write_str("BLOCK_SLIME_BLOCK_FALL"),
            SoundEnum::BlockSlimeBlockHit => f.write_str("BLOCK_SLIME_BLOCK_HIT"),
            SoundEnum::BlockSlimeBlockPlace => f.write_str("BLOCK_SLIME_BLOCK_PLACE"),
            SoundEnum::BlockSlimeBlockStep => f.write_str("BLOCK_SLIME_BLOCK_STEP"),
            SoundEnum::BlockSmallAmethystBudBreak => f.write_str("BLOCK_SMALL_AMETHYST_BUD_BREAK"),
            SoundEnum::BlockSmallAmethystBudPlace => f.write_str("BLOCK_SMALL_AMETHYST_BUD_PLACE"),
            SoundEnum::BlockSmallDripleafBreak => f.write_str("BLOCK_SMALL_DRIPLEAF_BREAK"),
            SoundEnum::BlockSmallDripleafFall => f.write_str("BLOCK_SMALL_DRIPLEAF_FALL"),
            SoundEnum::BlockSmallDripleafHit => f.write_str("BLOCK_SMALL_DRIPLEAF_HIT"),
            SoundEnum::BlockSmallDripleafPlace => f.write_str("BLOCK_SMALL_DRIPLEAF_PLACE"),
            SoundEnum::BlockSmallDripleafStep => f.write_str("BLOCK_SMALL_DRIPLEAF_STEP"),
            SoundEnum::BlockSmithingTableUse => f.write_str("BLOCK_SMITHING_TABLE_USE"),
            SoundEnum::BlockSmokerSmoke => f.write_str("BLOCK_SMOKER_SMOKE"),
            SoundEnum::BlockSnifferEggCrack => f.write_str("BLOCK_SNIFFER_EGG_CRACK"),
            SoundEnum::BlockSnifferEggHatch => f.write_str("BLOCK_SNIFFER_EGG_HATCH"),
            SoundEnum::BlockSnifferEggPlop => f.write_str("BLOCK_SNIFFER_EGG_PLOP"),
            SoundEnum::BlockSnowBreak => f.write_str("BLOCK_SNOW_BREAK"),
            SoundEnum::BlockSnowFall => f.write_str("BLOCK_SNOW_FALL"),
            SoundEnum::BlockSnowHit => f.write_str("BLOCK_SNOW_HIT"),
            SoundEnum::BlockSnowPlace => f.write_str("BLOCK_SNOW_PLACE"),
            SoundEnum::BlockSnowStep => f.write_str("BLOCK_SNOW_STEP"),
            SoundEnum::BlockSoulSandBreak => f.write_str("BLOCK_SOUL_SAND_BREAK"),
            SoundEnum::BlockSoulSandFall => f.write_str("BLOCK_SOUL_SAND_FALL"),
            SoundEnum::BlockSoulSandHit => f.write_str("BLOCK_SOUL_SAND_HIT"),
            SoundEnum::BlockSoulSandPlace => f.write_str("BLOCK_SOUL_SAND_PLACE"),
            SoundEnum::BlockSoulSandStep => f.write_str("BLOCK_SOUL_SAND_STEP"),
            SoundEnum::BlockSoulSoilBreak => f.write_str("BLOCK_SOUL_SOIL_BREAK"),
            SoundEnum::BlockSoulSoilFall => f.write_str("BLOCK_SOUL_SOIL_FALL"),
            SoundEnum::BlockSoulSoilHit => f.write_str("BLOCK_SOUL_SOIL_HIT"),
            SoundEnum::BlockSoulSoilPlace => f.write_str("BLOCK_SOUL_SOIL_PLACE"),
            SoundEnum::BlockSoulSoilStep => f.write_str("BLOCK_SOUL_SOIL_STEP"),
            SoundEnum::BlockSporeBlossomBreak => f.write_str("BLOCK_SPORE_BLOSSOM_BREAK"),
            SoundEnum::BlockSporeBlossomFall => f.write_str("BLOCK_SPORE_BLOSSOM_FALL"),
            SoundEnum::BlockSporeBlossomHit => f.write_str("BLOCK_SPORE_BLOSSOM_HIT"),
            SoundEnum::BlockSporeBlossomPlace => f.write_str("BLOCK_SPORE_BLOSSOM_PLACE"),
            SoundEnum::BlockSporeBlossomStep => f.write_str("BLOCK_SPORE_BLOSSOM_STEP"),
            SoundEnum::BlockStemBreak => f.write_str("BLOCK_STEM_BREAK"),
            SoundEnum::BlockStemFall => f.write_str("BLOCK_STEM_FALL"),
            SoundEnum::BlockStemHit => f.write_str("BLOCK_STEM_HIT"),
            SoundEnum::BlockStemPlace => f.write_str("BLOCK_STEM_PLACE"),
            SoundEnum::BlockStemStep => f.write_str("BLOCK_STEM_STEP"),
            SoundEnum::BlockStoneBreak => f.write_str("BLOCK_STONE_BREAK"),
            SoundEnum::BlockStoneButtonClickOff => f.write_str("BLOCK_STONE_BUTTON_CLICK_OFF"),
            SoundEnum::BlockStoneButtonClickOn => f.write_str("BLOCK_STONE_BUTTON_CLICK_ON"),
            SoundEnum::BlockStoneFall => f.write_str("BLOCK_STONE_FALL"),
            SoundEnum::BlockStoneHit => f.write_str("BLOCK_STONE_HIT"),
            SoundEnum::BlockStonePlace => f.write_str("BLOCK_STONE_PLACE"),
            SoundEnum::BlockStonePressurePlateClickOff => {
                f.write_str("BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockStonePressurePlateClickOn => {
                f.write_str("BLOCK_STONE_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockStoneStep => f.write_str("BLOCK_STONE_STEP"),
            SoundEnum::BlockSuspiciousGravelBreak => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_BREAK"),
            SoundEnum::BlockSuspiciousGravelFall => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_FALL"),
            SoundEnum::BlockSuspiciousGravelHit => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_HIT"),
            SoundEnum::BlockSuspiciousGravelPlace => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_PLACE"),
            SoundEnum::BlockSuspiciousGravelStep => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_STEP"),
            SoundEnum::BlockSuspiciousSandBreak => f.write_str("BLOCK_SUSPICIOUS_SAND_BREAK"),
            SoundEnum::BlockSuspiciousSandFall => f.write_str("BLOCK_SUSPICIOUS_SAND_FALL"),
            SoundEnum::BlockSuspiciousSandHit => f.write_str("BLOCK_SUSPICIOUS_SAND_HIT"),
            SoundEnum::BlockSuspiciousSandPlace => f.write_str("BLOCK_SUSPICIOUS_SAND_PLACE"),
            SoundEnum::BlockSuspiciousSandStep => f.write_str("BLOCK_SUSPICIOUS_SAND_STEP"),
            SoundEnum::BlockSweetBerryBushBreak => f.write_str("BLOCK_SWEET_BERRY_BUSH_BREAK"),
            SoundEnum::BlockSweetBerryBushPickBerries => {
                f.write_str("BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES")
            }
            SoundEnum::BlockSweetBerryBushPlace => f.write_str("BLOCK_SWEET_BERRY_BUSH_PLACE"),
            SoundEnum::BlockTripwireAttach => f.write_str("BLOCK_TRIPWIRE_ATTACH"),
            SoundEnum::BlockTripwireClickOff => f.write_str("BLOCK_TRIPWIRE_CLICK_OFF"),
            SoundEnum::BlockTripwireClickOn => f.write_str("BLOCK_TRIPWIRE_CLICK_ON"),
            SoundEnum::BlockTripwireDetach => f.write_str("BLOCK_TRIPWIRE_DETACH"),
            SoundEnum::BlockTuffBreak => f.write_str("BLOCK_TUFF_BREAK"),
            SoundEnum::BlockTuffFall => f.write_str("BLOCK_TUFF_FALL"),
            SoundEnum::BlockTuffHit => f.write_str("BLOCK_TUFF_HIT"),
            SoundEnum::BlockTuffPlace => f.write_str("BLOCK_TUFF_PLACE"),
            SoundEnum::BlockTuffStep => f.write_str("BLOCK_TUFF_STEP"),
            SoundEnum::BlockVineBreak => f.write_str("BLOCK_VINE_BREAK"),
            SoundEnum::BlockVineFall => f.write_str("BLOCK_VINE_FALL"),
            SoundEnum::BlockVineHit => f.write_str("BLOCK_VINE_HIT"),
            SoundEnum::BlockVinePlace => f.write_str("BLOCK_VINE_PLACE"),
            SoundEnum::BlockVineStep => f.write_str("BLOCK_VINE_STEP"),
            SoundEnum::BlockWartBlockBreak => f.write_str("BLOCK_WART_BLOCK_BREAK"),
            SoundEnum::BlockWartBlockFall => f.write_str("BLOCK_WART_BLOCK_FALL"),
            SoundEnum::BlockWartBlockHit => f.write_str("BLOCK_WART_BLOCK_HIT"),
            SoundEnum::BlockWartBlockPlace => f.write_str("BLOCK_WART_BLOCK_PLACE"),
            SoundEnum::BlockWartBlockStep => f.write_str("BLOCK_WART_BLOCK_STEP"),
            SoundEnum::BlockWaterAmbient => f.write_str("BLOCK_WATER_AMBIENT"),
            SoundEnum::BlockWeepingVinesBreak => f.write_str("BLOCK_WEEPING_VINES_BREAK"),
            SoundEnum::BlockWeepingVinesFall => f.write_str("BLOCK_WEEPING_VINES_FALL"),
            SoundEnum::BlockWeepingVinesHit => f.write_str("BLOCK_WEEPING_VINES_HIT"),
            SoundEnum::BlockWeepingVinesPlace => f.write_str("BLOCK_WEEPING_VINES_PLACE"),
            SoundEnum::BlockWeepingVinesStep => f.write_str("BLOCK_WEEPING_VINES_STEP"),
            SoundEnum::BlockWetGrassBreak => f.write_str("BLOCK_WET_GRASS_BREAK"),
            SoundEnum::BlockWetGrassFall => f.write_str("BLOCK_WET_GRASS_FALL"),
            SoundEnum::BlockWetGrassHit => f.write_str("BLOCK_WET_GRASS_HIT"),
            SoundEnum::BlockWetGrassPlace => f.write_str("BLOCK_WET_GRASS_PLACE"),
            SoundEnum::BlockWetGrassStep => f.write_str("BLOCK_WET_GRASS_STEP"),
            SoundEnum::BlockWoodenButtonClickOff => f.write_str("BLOCK_WOODEN_BUTTON_CLICK_OFF"),
            SoundEnum::BlockWoodenButtonClickOn => f.write_str("BLOCK_WOODEN_BUTTON_CLICK_ON"),
            SoundEnum::BlockWoodenDoorClose => f.write_str("BLOCK_WOODEN_DOOR_CLOSE"),
            SoundEnum::BlockWoodenDoorOpen => f.write_str("BLOCK_WOODEN_DOOR_OPEN"),
            SoundEnum::BlockWoodenPressurePlateClickOff => {
                f.write_str("BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundEnum::BlockWoodenPressurePlateClickOn => {
                f.write_str("BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON")
            }
            SoundEnum::BlockWoodenTrapdoorClose => f.write_str("BLOCK_WOODEN_TRAPDOOR_CLOSE"),
            SoundEnum::BlockWoodenTrapdoorOpen => f.write_str("BLOCK_WOODEN_TRAPDOOR_OPEN"),
            SoundEnum::BlockWoodBreak => f.write_str("BLOCK_WOOD_BREAK"),
            SoundEnum::BlockWoodFall => f.write_str("BLOCK_WOOD_FALL"),
            SoundEnum::BlockWoodHit => f.write_str("BLOCK_WOOD_HIT"),
            SoundEnum::BlockWoodPlace => f.write_str("BLOCK_WOOD_PLACE"),
            SoundEnum::BlockWoodStep => f.write_str("BLOCK_WOOD_STEP"),
            SoundEnum::BlockWoolBreak => f.write_str("BLOCK_WOOL_BREAK"),
            SoundEnum::BlockWoolFall => f.write_str("BLOCK_WOOL_FALL"),
            SoundEnum::BlockWoolHit => f.write_str("BLOCK_WOOL_HIT"),
            SoundEnum::BlockWoolPlace => f.write_str("BLOCK_WOOL_PLACE"),
            SoundEnum::BlockWoolStep => f.write_str("BLOCK_WOOL_STEP"),
            SoundEnum::EnchantThornsHit => f.write_str("ENCHANT_THORNS_HIT"),
            SoundEnum::EntityAllayAmbientWithoutItem => {
                f.write_str("ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM")
            }
            SoundEnum::EntityAllayAmbientWithItem => f.write_str("ENTITY_ALLAY_AMBIENT_WITH_ITEM"),
            SoundEnum::EntityAllayDeath => f.write_str("ENTITY_ALLAY_DEATH"),
            SoundEnum::EntityAllayHurt => f.write_str("ENTITY_ALLAY_HURT"),
            SoundEnum::EntityAllayItemGiven => f.write_str("ENTITY_ALLAY_ITEM_GIVEN"),
            SoundEnum::EntityAllayItemTaken => f.write_str("ENTITY_ALLAY_ITEM_TAKEN"),
            SoundEnum::EntityAllayItemThrown => f.write_str("ENTITY_ALLAY_ITEM_THROWN"),
            SoundEnum::EntityArmorStandBreak => f.write_str("ENTITY_ARMOR_STAND_BREAK"),
            SoundEnum::EntityArmorStandFall => f.write_str("ENTITY_ARMOR_STAND_FALL"),
            SoundEnum::EntityArmorStandHit => f.write_str("ENTITY_ARMOR_STAND_HIT"),
            SoundEnum::EntityArmorStandPlace => f.write_str("ENTITY_ARMOR_STAND_PLACE"),
            SoundEnum::EntityArrowHit => f.write_str("ENTITY_ARROW_HIT"),
            SoundEnum::EntityArrowHitPlayer => f.write_str("ENTITY_ARROW_HIT_PLAYER"),
            SoundEnum::EntityArrowShoot => f.write_str("ENTITY_ARROW_SHOOT"),
            SoundEnum::EntityAxolotlAttack => f.write_str("ENTITY_AXOLOTL_ATTACK"),
            SoundEnum::EntityAxolotlDeath => f.write_str("ENTITY_AXOLOTL_DEATH"),
            SoundEnum::EntityAxolotlHurt => f.write_str("ENTITY_AXOLOTL_HURT"),
            SoundEnum::EntityAxolotlIdleAir => f.write_str("ENTITY_AXOLOTL_IDLE_AIR"),
            SoundEnum::EntityAxolotlIdleWater => f.write_str("ENTITY_AXOLOTL_IDLE_WATER"),
            SoundEnum::EntityAxolotlSplash => f.write_str("ENTITY_AXOLOTL_SPLASH"),
            SoundEnum::EntityAxolotlSwim => f.write_str("ENTITY_AXOLOTL_SWIM"),
            SoundEnum::EntityBatAmbient => f.write_str("ENTITY_BAT_AMBIENT"),
            SoundEnum::EntityBatDeath => f.write_str("ENTITY_BAT_DEATH"),
            SoundEnum::EntityBatHurt => f.write_str("ENTITY_BAT_HURT"),
            SoundEnum::EntityBatLoop => f.write_str("ENTITY_BAT_LOOP"),
            SoundEnum::EntityBatTakeoff => f.write_str("ENTITY_BAT_TAKEOFF"),
            SoundEnum::EntityBeeDeath => f.write_str("ENTITY_BEE_DEATH"),
            SoundEnum::EntityBeeHurt => f.write_str("ENTITY_BEE_HURT"),
            SoundEnum::EntityBeeLoop => f.write_str("ENTITY_BEE_LOOP"),
            SoundEnum::EntityBeeLoopAggressive => f.write_str("ENTITY_BEE_LOOP_AGGRESSIVE"),
            SoundEnum::EntityBeePollinate => f.write_str("ENTITY_BEE_POLLINATE"),
            SoundEnum::EntityBeeSting => f.write_str("ENTITY_BEE_STING"),
            SoundEnum::EntityBlazeAmbient => f.write_str("ENTITY_BLAZE_AMBIENT"),
            SoundEnum::EntityBlazeBurn => f.write_str("ENTITY_BLAZE_BURN"),
            SoundEnum::EntityBlazeDeath => f.write_str("ENTITY_BLAZE_DEATH"),
            SoundEnum::EntityBlazeHurt => f.write_str("ENTITY_BLAZE_HURT"),
            SoundEnum::EntityBlazeShoot => f.write_str("ENTITY_BLAZE_SHOOT"),
            SoundEnum::EntityBoatPaddleLand => f.write_str("ENTITY_BOAT_PADDLE_LAND"),
            SoundEnum::EntityBoatPaddleWater => f.write_str("ENTITY_BOAT_PADDLE_WATER"),
            SoundEnum::EntityCamelAmbient => f.write_str("ENTITY_CAMEL_AMBIENT"),
            SoundEnum::EntityCamelDash => f.write_str("ENTITY_CAMEL_DASH"),
            SoundEnum::EntityCamelDashReady => f.write_str("ENTITY_CAMEL_DASH_READY"),
            SoundEnum::EntityCamelDeath => f.write_str("ENTITY_CAMEL_DEATH"),
            SoundEnum::EntityCamelEat => f.write_str("ENTITY_CAMEL_EAT"),
            SoundEnum::EntityCamelHurt => f.write_str("ENTITY_CAMEL_HURT"),
            SoundEnum::EntityCamelSaddle => f.write_str("ENTITY_CAMEL_SADDLE"),
            SoundEnum::EntityCamelSit => f.write_str("ENTITY_CAMEL_SIT"),
            SoundEnum::EntityCamelStand => f.write_str("ENTITY_CAMEL_STAND"),
            SoundEnum::EntityCamelStep => f.write_str("ENTITY_CAMEL_STEP"),
            SoundEnum::EntityCamelStepSand => f.write_str("ENTITY_CAMEL_STEP_SAND"),
            SoundEnum::EntityCatAmbient => f.write_str("ENTITY_CAT_AMBIENT"),
            SoundEnum::EntityCatBegForFood => f.write_str("ENTITY_CAT_BEG_FOR_FOOD"),
            SoundEnum::EntityCatDeath => f.write_str("ENTITY_CAT_DEATH"),
            SoundEnum::EntityCatEat => f.write_str("ENTITY_CAT_EAT"),
            SoundEnum::EntityCatHiss => f.write_str("ENTITY_CAT_HISS"),
            SoundEnum::EntityCatHurt => f.write_str("ENTITY_CAT_HURT"),
            SoundEnum::EntityCatPurr => f.write_str("ENTITY_CAT_PURR"),
            SoundEnum::EntityCatPurreow => f.write_str("ENTITY_CAT_PURREOW"),
            SoundEnum::EntityCatStrayAmbient => f.write_str("ENTITY_CAT_STRAY_AMBIENT"),
            SoundEnum::EntityChickenAmbient => f.write_str("ENTITY_CHICKEN_AMBIENT"),
            SoundEnum::EntityChickenDeath => f.write_str("ENTITY_CHICKEN_DEATH"),
            SoundEnum::EntityChickenEgg => f.write_str("ENTITY_CHICKEN_EGG"),
            SoundEnum::EntityChickenHurt => f.write_str("ENTITY_CHICKEN_HURT"),
            SoundEnum::EntityChickenStep => f.write_str("ENTITY_CHICKEN_STEP"),
            SoundEnum::EntityCodAmbient => f.write_str("ENTITY_COD_AMBIENT"),
            SoundEnum::EntityCodDeath => f.write_str("ENTITY_COD_DEATH"),
            SoundEnum::EntityCodFlop => f.write_str("ENTITY_COD_FLOP"),
            SoundEnum::EntityCodHurt => f.write_str("ENTITY_COD_HURT"),
            SoundEnum::EntityCowAmbient => f.write_str("ENTITY_COW_AMBIENT"),
            SoundEnum::EntityCowDeath => f.write_str("ENTITY_COW_DEATH"),
            SoundEnum::EntityCowHurt => f.write_str("ENTITY_COW_HURT"),
            SoundEnum::EntityCowMilk => f.write_str("ENTITY_COW_MILK"),
            SoundEnum::EntityCowStep => f.write_str("ENTITY_COW_STEP"),
            SoundEnum::EntityCreeperDeath => f.write_str("ENTITY_CREEPER_DEATH"),
            SoundEnum::EntityCreeperHurt => f.write_str("ENTITY_CREEPER_HURT"),
            SoundEnum::EntityCreeperPrimed => f.write_str("ENTITY_CREEPER_PRIMED"),
            SoundEnum::EntityDolphinAmbient => f.write_str("ENTITY_DOLPHIN_AMBIENT"),
            SoundEnum::EntityDolphinAmbientWater => f.write_str("ENTITY_DOLPHIN_AMBIENT_WATER"),
            SoundEnum::EntityDolphinAttack => f.write_str("ENTITY_DOLPHIN_ATTACK"),
            SoundEnum::EntityDolphinDeath => f.write_str("ENTITY_DOLPHIN_DEATH"),
            SoundEnum::EntityDolphinEat => f.write_str("ENTITY_DOLPHIN_EAT"),
            SoundEnum::EntityDolphinHurt => f.write_str("ENTITY_DOLPHIN_HURT"),
            SoundEnum::EntityDolphinJump => f.write_str("ENTITY_DOLPHIN_JUMP"),
            SoundEnum::EntityDolphinPlay => f.write_str("ENTITY_DOLPHIN_PLAY"),
            SoundEnum::EntityDolphinSplash => f.write_str("ENTITY_DOLPHIN_SPLASH"),
            SoundEnum::EntityDolphinSwim => f.write_str("ENTITY_DOLPHIN_SWIM"),
            SoundEnum::EntityDonkeyAmbient => f.write_str("ENTITY_DONKEY_AMBIENT"),
            SoundEnum::EntityDonkeyAngry => f.write_str("ENTITY_DONKEY_ANGRY"),
            SoundEnum::EntityDonkeyChest => f.write_str("ENTITY_DONKEY_CHEST"),
            SoundEnum::EntityDonkeyDeath => f.write_str("ENTITY_DONKEY_DEATH"),
            SoundEnum::EntityDonkeyEat => f.write_str("ENTITY_DONKEY_EAT"),
            SoundEnum::EntityDonkeyHurt => f.write_str("ENTITY_DONKEY_HURT"),
            SoundEnum::EntityDragonFireballExplode => f.write_str("ENTITY_DRAGON_FIREBALL_EXPLODE"),
            SoundEnum::EntityDrownedAmbient => f.write_str("ENTITY_DROWNED_AMBIENT"),
            SoundEnum::EntityDrownedAmbientWater => f.write_str("ENTITY_DROWNED_AMBIENT_WATER"),
            SoundEnum::EntityDrownedDeath => f.write_str("ENTITY_DROWNED_DEATH"),
            SoundEnum::EntityDrownedDeathWater => f.write_str("ENTITY_DROWNED_DEATH_WATER"),
            SoundEnum::EntityDrownedHurt => f.write_str("ENTITY_DROWNED_HURT"),
            SoundEnum::EntityDrownedHurtWater => f.write_str("ENTITY_DROWNED_HURT_WATER"),
            SoundEnum::EntityDrownedShoot => f.write_str("ENTITY_DROWNED_SHOOT"),
            SoundEnum::EntityDrownedStep => f.write_str("ENTITY_DROWNED_STEP"),
            SoundEnum::EntityDrownedSwim => f.write_str("ENTITY_DROWNED_SWIM"),
            SoundEnum::EntityEggThrow => f.write_str("ENTITY_EGG_THROW"),
            SoundEnum::EntityElderGuardianAmbient => f.write_str("ENTITY_ELDER_GUARDIAN_AMBIENT"),
            SoundEnum::EntityElderGuardianAmbientLand => {
                f.write_str("ENTITY_ELDER_GUARDIAN_AMBIENT_LAND")
            }
            SoundEnum::EntityElderGuardianCurse => f.write_str("ENTITY_ELDER_GUARDIAN_CURSE"),
            SoundEnum::EntityElderGuardianDeath => f.write_str("ENTITY_ELDER_GUARDIAN_DEATH"),
            SoundEnum::EntityElderGuardianDeathLand => {
                f.write_str("ENTITY_ELDER_GUARDIAN_DEATH_LAND")
            }
            SoundEnum::EntityElderGuardianFlop => f.write_str("ENTITY_ELDER_GUARDIAN_FLOP"),
            SoundEnum::EntityElderGuardianHurt => f.write_str("ENTITY_ELDER_GUARDIAN_HURT"),
            SoundEnum::EntityElderGuardianHurtLand => {
                f.write_str("ENTITY_ELDER_GUARDIAN_HURT_LAND")
            }
            SoundEnum::EntityEndermanAmbient => f.write_str("ENTITY_ENDERMAN_AMBIENT"),
            SoundEnum::EntityEndermanDeath => f.write_str("ENTITY_ENDERMAN_DEATH"),
            SoundEnum::EntityEndermanHurt => f.write_str("ENTITY_ENDERMAN_HURT"),
            SoundEnum::EntityEndermanScream => f.write_str("ENTITY_ENDERMAN_SCREAM"),
            SoundEnum::EntityEndermanStare => f.write_str("ENTITY_ENDERMAN_STARE"),
            SoundEnum::EntityEndermanTeleport => f.write_str("ENTITY_ENDERMAN_TELEPORT"),
            SoundEnum::EntityEndermiteAmbient => f.write_str("ENTITY_ENDERMITE_AMBIENT"),
            SoundEnum::EntityEndermiteDeath => f.write_str("ENTITY_ENDERMITE_DEATH"),
            SoundEnum::EntityEndermiteHurt => f.write_str("ENTITY_ENDERMITE_HURT"),
            SoundEnum::EntityEndermiteStep => f.write_str("ENTITY_ENDERMITE_STEP"),
            SoundEnum::EntityEnderDragonAmbient => f.write_str("ENTITY_ENDER_DRAGON_AMBIENT"),
            SoundEnum::EntityEnderDragonDeath => f.write_str("ENTITY_ENDER_DRAGON_DEATH"),
            SoundEnum::EntityEnderDragonFlap => f.write_str("ENTITY_ENDER_DRAGON_FLAP"),
            SoundEnum::EntityEnderDragonGrowl => f.write_str("ENTITY_ENDER_DRAGON_GROWL"),
            SoundEnum::EntityEnderDragonHurt => f.write_str("ENTITY_ENDER_DRAGON_HURT"),
            SoundEnum::EntityEnderDragonShoot => f.write_str("ENTITY_ENDER_DRAGON_SHOOT"),
            SoundEnum::EntityEnderEyeDeath => f.write_str("ENTITY_ENDER_EYE_DEATH"),
            SoundEnum::EntityEnderEyeLaunch => f.write_str("ENTITY_ENDER_EYE_LAUNCH"),
            SoundEnum::EntityEnderPearlThrow => f.write_str("ENTITY_ENDER_PEARL_THROW"),
            SoundEnum::EntityEvokerAmbient => f.write_str("ENTITY_EVOKER_AMBIENT"),
            SoundEnum::EntityEvokerCastSpell => f.write_str("ENTITY_EVOKER_CAST_SPELL"),
            SoundEnum::EntityEvokerCelebrate => f.write_str("ENTITY_EVOKER_CELEBRATE"),
            SoundEnum::EntityEvokerDeath => f.write_str("ENTITY_EVOKER_DEATH"),
            SoundEnum::EntityEvokerFangsAttack => f.write_str("ENTITY_EVOKER_FANGS_ATTACK"),
            SoundEnum::EntityEvokerHurt => f.write_str("ENTITY_EVOKER_HURT"),
            SoundEnum::EntityEvokerPrepareAttack => f.write_str("ENTITY_EVOKER_PREPARE_ATTACK"),
            SoundEnum::EntityEvokerPrepareSummon => f.write_str("ENTITY_EVOKER_PREPARE_SUMMON"),
            SoundEnum::EntityEvokerPrepareWololo => f.write_str("ENTITY_EVOKER_PREPARE_WOLOLO"),
            SoundEnum::EntityExperienceBottleThrow => f.write_str("ENTITY_EXPERIENCE_BOTTLE_THROW"),
            SoundEnum::EntityExperienceOrbPickup => f.write_str("ENTITY_EXPERIENCE_ORB_PICKUP"),
            SoundEnum::EntityFireworkRocketBlast => f.write_str("ENTITY_FIREWORK_ROCKET_BLAST"),
            SoundEnum::EntityFireworkRocketBlastFar => {
                f.write_str("ENTITY_FIREWORK_ROCKET_BLAST_FAR")
            }
            SoundEnum::EntityFireworkRocketLargeBlast => {
                f.write_str("ENTITY_FIREWORK_ROCKET_LARGE_BLAST")
            }
            SoundEnum::EntityFireworkRocketLargeBlastFar => {
                f.write_str("ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR")
            }
            SoundEnum::EntityFireworkRocketLaunch => f.write_str("ENTITY_FIREWORK_ROCKET_LAUNCH"),
            SoundEnum::EntityFireworkRocketShoot => f.write_str("ENTITY_FIREWORK_ROCKET_SHOOT"),
            SoundEnum::EntityFireworkRocketTwinkle => f.write_str("ENTITY_FIREWORK_ROCKET_TWINKLE"),
            SoundEnum::EntityFireworkRocketTwinkleFar => {
                f.write_str("ENTITY_FIREWORK_ROCKET_TWINKLE_FAR")
            }
            SoundEnum::EntityFishingBobberRetrieve => f.write_str("ENTITY_FISHING_BOBBER_RETRIEVE"),
            SoundEnum::EntityFishingBobberSplash => f.write_str("ENTITY_FISHING_BOBBER_SPLASH"),
            SoundEnum::EntityFishingBobberThrow => f.write_str("ENTITY_FISHING_BOBBER_THROW"),
            SoundEnum::EntityFishSwim => f.write_str("ENTITY_FISH_SWIM"),
            SoundEnum::EntityFoxAggro => f.write_str("ENTITY_FOX_AGGRO"),
            SoundEnum::EntityFoxAmbient => f.write_str("ENTITY_FOX_AMBIENT"),
            SoundEnum::EntityFoxBite => f.write_str("ENTITY_FOX_BITE"),
            SoundEnum::EntityFoxDeath => f.write_str("ENTITY_FOX_DEATH"),
            SoundEnum::EntityFoxEat => f.write_str("ENTITY_FOX_EAT"),
            SoundEnum::EntityFoxHurt => f.write_str("ENTITY_FOX_HURT"),
            SoundEnum::EntityFoxScreech => f.write_str("ENTITY_FOX_SCREECH"),
            SoundEnum::EntityFoxSleep => f.write_str("ENTITY_FOX_SLEEP"),
            SoundEnum::EntityFoxSniff => f.write_str("ENTITY_FOX_SNIFF"),
            SoundEnum::EntityFoxSpit => f.write_str("ENTITY_FOX_SPIT"),
            SoundEnum::EntityFoxTeleport => f.write_str("ENTITY_FOX_TELEPORT"),
            SoundEnum::EntityFrogAmbient => f.write_str("ENTITY_FROG_AMBIENT"),
            SoundEnum::EntityFrogDeath => f.write_str("ENTITY_FROG_DEATH"),
            SoundEnum::EntityFrogEat => f.write_str("ENTITY_FROG_EAT"),
            SoundEnum::EntityFrogHurt => f.write_str("ENTITY_FROG_HURT"),
            SoundEnum::EntityFrogLaySpawn => f.write_str("ENTITY_FROG_LAY_SPAWN"),
            SoundEnum::EntityFrogLongJump => f.write_str("ENTITY_FROG_LONG_JUMP"),
            SoundEnum::EntityFrogStep => f.write_str("ENTITY_FROG_STEP"),
            SoundEnum::EntityFrogTongue => f.write_str("ENTITY_FROG_TONGUE"),
            SoundEnum::EntityGenericBigFall => f.write_str("ENTITY_GENERIC_BIG_FALL"),
            SoundEnum::EntityGenericBurn => f.write_str("ENTITY_GENERIC_BURN"),
            SoundEnum::EntityGenericDeath => f.write_str("ENTITY_GENERIC_DEATH"),
            SoundEnum::EntityGenericDrink => f.write_str("ENTITY_GENERIC_DRINK"),
            SoundEnum::EntityGenericEat => f.write_str("ENTITY_GENERIC_EAT"),
            SoundEnum::EntityGenericExplode => f.write_str("ENTITY_GENERIC_EXPLODE"),
            SoundEnum::EntityGenericExtinguishFire => f.write_str("ENTITY_GENERIC_EXTINGUISH_FIRE"),
            SoundEnum::EntityGenericHurt => f.write_str("ENTITY_GENERIC_HURT"),
            SoundEnum::EntityGenericSmallFall => f.write_str("ENTITY_GENERIC_SMALL_FALL"),
            SoundEnum::EntityGenericSplash => f.write_str("ENTITY_GENERIC_SPLASH"),
            SoundEnum::EntityGenericSwim => f.write_str("ENTITY_GENERIC_SWIM"),
            SoundEnum::EntityGhastAmbient => f.write_str("ENTITY_GHAST_AMBIENT"),
            SoundEnum::EntityGhastDeath => f.write_str("ENTITY_GHAST_DEATH"),
            SoundEnum::EntityGhastHurt => f.write_str("ENTITY_GHAST_HURT"),
            SoundEnum::EntityGhastScream => f.write_str("ENTITY_GHAST_SCREAM"),
            SoundEnum::EntityGhastShoot => f.write_str("ENTITY_GHAST_SHOOT"),
            SoundEnum::EntityGhastWarn => f.write_str("ENTITY_GHAST_WARN"),
            SoundEnum::EntityGlowItemFrameAddItem => f.write_str("ENTITY_GLOW_ITEM_FRAME_ADD_ITEM"),
            SoundEnum::EntityGlowItemFrameBreak => f.write_str("ENTITY_GLOW_ITEM_FRAME_BREAK"),
            SoundEnum::EntityGlowItemFramePlace => f.write_str("ENTITY_GLOW_ITEM_FRAME_PLACE"),
            SoundEnum::EntityGlowItemFrameRemoveItem => {
                f.write_str("ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM")
            }
            SoundEnum::EntityGlowItemFrameRotateItem => {
                f.write_str("ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM")
            }
            SoundEnum::EntityGlowSquidAmbient => f.write_str("ENTITY_GLOW_SQUID_AMBIENT"),
            SoundEnum::EntityGlowSquidDeath => f.write_str("ENTITY_GLOW_SQUID_DEATH"),
            SoundEnum::EntityGlowSquidHurt => f.write_str("ENTITY_GLOW_SQUID_HURT"),
            SoundEnum::EntityGlowSquidSquirt => f.write_str("ENTITY_GLOW_SQUID_SQUIRT"),
            SoundEnum::EntityGoatAmbient => f.write_str("ENTITY_GOAT_AMBIENT"),
            SoundEnum::EntityGoatDeath => f.write_str("ENTITY_GOAT_DEATH"),
            SoundEnum::EntityGoatEat => f.write_str("ENTITY_GOAT_EAT"),
            SoundEnum::EntityGoatHornBreak => f.write_str("ENTITY_GOAT_HORN_BREAK"),
            SoundEnum::EntityGoatHurt => f.write_str("ENTITY_GOAT_HURT"),
            SoundEnum::EntityGoatLongJump => f.write_str("ENTITY_GOAT_LONG_JUMP"),
            SoundEnum::EntityGoatMilk => f.write_str("ENTITY_GOAT_MILK"),
            SoundEnum::EntityGoatPrepareRam => f.write_str("ENTITY_GOAT_PREPARE_RAM"),
            SoundEnum::EntityGoatRamImpact => f.write_str("ENTITY_GOAT_RAM_IMPACT"),
            SoundEnum::EntityGoatScreamingAmbient => f.write_str("ENTITY_GOAT_SCREAMING_AMBIENT"),
            SoundEnum::EntityGoatScreamingDeath => f.write_str("ENTITY_GOAT_SCREAMING_DEATH"),
            SoundEnum::EntityGoatScreamingEat => f.write_str("ENTITY_GOAT_SCREAMING_EAT"),
            SoundEnum::EntityGoatScreamingHornBreak => {
                f.write_str("ENTITY_GOAT_SCREAMING_HORN_BREAK")
            }
            SoundEnum::EntityGoatScreamingHurt => f.write_str("ENTITY_GOAT_SCREAMING_HURT"),
            SoundEnum::EntityGoatScreamingLongJump => {
                f.write_str("ENTITY_GOAT_SCREAMING_LONG_JUMP")
            }
            SoundEnum::EntityGoatScreamingMilk => f.write_str("ENTITY_GOAT_SCREAMING_MILK"),
            SoundEnum::EntityGoatScreamingPrepareRam => {
                f.write_str("ENTITY_GOAT_SCREAMING_PREPARE_RAM")
            }
            SoundEnum::EntityGoatScreamingRamImpact => {
                f.write_str("ENTITY_GOAT_SCREAMING_RAM_IMPACT")
            }
            SoundEnum::EntityGoatStep => f.write_str("ENTITY_GOAT_STEP"),
            SoundEnum::EntityGuardianAmbient => f.write_str("ENTITY_GUARDIAN_AMBIENT"),
            SoundEnum::EntityGuardianAmbientLand => f.write_str("ENTITY_GUARDIAN_AMBIENT_LAND"),
            SoundEnum::EntityGuardianAttack => f.write_str("ENTITY_GUARDIAN_ATTACK"),
            SoundEnum::EntityGuardianDeath => f.write_str("ENTITY_GUARDIAN_DEATH"),
            SoundEnum::EntityGuardianDeathLand => f.write_str("ENTITY_GUARDIAN_DEATH_LAND"),
            SoundEnum::EntityGuardianFlop => f.write_str("ENTITY_GUARDIAN_FLOP"),
            SoundEnum::EntityGuardianHurt => f.write_str("ENTITY_GUARDIAN_HURT"),
            SoundEnum::EntityGuardianHurtLand => f.write_str("ENTITY_GUARDIAN_HURT_LAND"),
            SoundEnum::EntityHoglinAmbient => f.write_str("ENTITY_HOGLIN_AMBIENT"),
            SoundEnum::EntityHoglinAngry => f.write_str("ENTITY_HOGLIN_ANGRY"),
            SoundEnum::EntityHoglinAttack => f.write_str("ENTITY_HOGLIN_ATTACK"),
            SoundEnum::EntityHoglinConvertedToZombified => {
                f.write_str("ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED")
            }
            SoundEnum::EntityHoglinDeath => f.write_str("ENTITY_HOGLIN_DEATH"),
            SoundEnum::EntityHoglinHurt => f.write_str("ENTITY_HOGLIN_HURT"),
            SoundEnum::EntityHoglinRetreat => f.write_str("ENTITY_HOGLIN_RETREAT"),
            SoundEnum::EntityHoglinStep => f.write_str("ENTITY_HOGLIN_STEP"),
            SoundEnum::EntityHorseAmbient => f.write_str("ENTITY_HORSE_AMBIENT"),
            SoundEnum::EntityHorseAngry => f.write_str("ENTITY_HORSE_ANGRY"),
            SoundEnum::EntityHorseArmor => f.write_str("ENTITY_HORSE_ARMOR"),
            SoundEnum::EntityHorseBreathe => f.write_str("ENTITY_HORSE_BREATHE"),
            SoundEnum::EntityHorseDeath => f.write_str("ENTITY_HORSE_DEATH"),
            SoundEnum::EntityHorseEat => f.write_str("ENTITY_HORSE_EAT"),
            SoundEnum::EntityHorseGallop => f.write_str("ENTITY_HORSE_GALLOP"),
            SoundEnum::EntityHorseHurt => f.write_str("ENTITY_HORSE_HURT"),
            SoundEnum::EntityHorseJump => f.write_str("ENTITY_HORSE_JUMP"),
            SoundEnum::EntityHorseLand => f.write_str("ENTITY_HORSE_LAND"),
            SoundEnum::EntityHorseSaddle => f.write_str("ENTITY_HORSE_SADDLE"),
            SoundEnum::EntityHorseStep => f.write_str("ENTITY_HORSE_STEP"),
            SoundEnum::EntityHorseStepWood => f.write_str("ENTITY_HORSE_STEP_WOOD"),
            SoundEnum::EntityHostileBigFall => f.write_str("ENTITY_HOSTILE_BIG_FALL"),
            SoundEnum::EntityHostileDeath => f.write_str("ENTITY_HOSTILE_DEATH"),
            SoundEnum::EntityHostileHurt => f.write_str("ENTITY_HOSTILE_HURT"),
            SoundEnum::EntityHostileSmallFall => f.write_str("ENTITY_HOSTILE_SMALL_FALL"),
            SoundEnum::EntityHostileSplash => f.write_str("ENTITY_HOSTILE_SPLASH"),
            SoundEnum::EntityHostileSwim => f.write_str("ENTITY_HOSTILE_SWIM"),
            SoundEnum::EntityHuskAmbient => f.write_str("ENTITY_HUSK_AMBIENT"),
            SoundEnum::EntityHuskConvertedToZombie => {
                f.write_str("ENTITY_HUSK_CONVERTED_TO_ZOMBIE")
            }
            SoundEnum::EntityHuskDeath => f.write_str("ENTITY_HUSK_DEATH"),
            SoundEnum::EntityHuskHurt => f.write_str("ENTITY_HUSK_HURT"),
            SoundEnum::EntityHuskStep => f.write_str("ENTITY_HUSK_STEP"),
            SoundEnum::EntityIllusionerAmbient => f.write_str("ENTITY_ILLUSIONER_AMBIENT"),
            SoundEnum::EntityIllusionerCastSpell => f.write_str("ENTITY_ILLUSIONER_CAST_SPELL"),
            SoundEnum::EntityIllusionerDeath => f.write_str("ENTITY_ILLUSIONER_DEATH"),
            SoundEnum::EntityIllusionerHurt => f.write_str("ENTITY_ILLUSIONER_HURT"),
            SoundEnum::EntityIllusionerMirrorMove => f.write_str("ENTITY_ILLUSIONER_MIRROR_MOVE"),
            SoundEnum::EntityIllusionerPrepareBlindness => {
                f.write_str("ENTITY_ILLUSIONER_PREPARE_BLINDNESS")
            }
            SoundEnum::EntityIllusionerPrepareMirror => {
                f.write_str("ENTITY_ILLUSIONER_PREPARE_MIRROR")
            }
            SoundEnum::EntityIronGolemAttack => f.write_str("ENTITY_IRON_GOLEM_ATTACK"),
            SoundEnum::EntityIronGolemDamage => f.write_str("ENTITY_IRON_GOLEM_DAMAGE"),
            SoundEnum::EntityIronGolemDeath => f.write_str("ENTITY_IRON_GOLEM_DEATH"),
            SoundEnum::EntityIronGolemHurt => f.write_str("ENTITY_IRON_GOLEM_HURT"),
            SoundEnum::EntityIronGolemRepair => f.write_str("ENTITY_IRON_GOLEM_REPAIR"),
            SoundEnum::EntityIronGolemStep => f.write_str("ENTITY_IRON_GOLEM_STEP"),
            SoundEnum::EntityItemBreak => f.write_str("ENTITY_ITEM_BREAK"),
            SoundEnum::EntityItemFrameAddItem => f.write_str("ENTITY_ITEM_FRAME_ADD_ITEM"),
            SoundEnum::EntityItemFrameBreak => f.write_str("ENTITY_ITEM_FRAME_BREAK"),
            SoundEnum::EntityItemFramePlace => f.write_str("ENTITY_ITEM_FRAME_PLACE"),
            SoundEnum::EntityItemFrameRemoveItem => f.write_str("ENTITY_ITEM_FRAME_REMOVE_ITEM"),
            SoundEnum::EntityItemFrameRotateItem => f.write_str("ENTITY_ITEM_FRAME_ROTATE_ITEM"),
            SoundEnum::EntityItemPickup => f.write_str("ENTITY_ITEM_PICKUP"),
            SoundEnum::EntityLeashKnotBreak => f.write_str("ENTITY_LEASH_KNOT_BREAK"),
            SoundEnum::EntityLeashKnotPlace => f.write_str("ENTITY_LEASH_KNOT_PLACE"),
            SoundEnum::EntityLightningBoltImpact => f.write_str("ENTITY_LIGHTNING_BOLT_IMPACT"),
            SoundEnum::EntityLightningBoltThunder => f.write_str("ENTITY_LIGHTNING_BOLT_THUNDER"),
            SoundEnum::EntityLingeringPotionThrow => f.write_str("ENTITY_LINGERING_POTION_THROW"),
            SoundEnum::EntityLlamaAmbient => f.write_str("ENTITY_LLAMA_AMBIENT"),
            SoundEnum::EntityLlamaAngry => f.write_str("ENTITY_LLAMA_ANGRY"),
            SoundEnum::EntityLlamaChest => f.write_str("ENTITY_LLAMA_CHEST"),
            SoundEnum::EntityLlamaDeath => f.write_str("ENTITY_LLAMA_DEATH"),
            SoundEnum::EntityLlamaEat => f.write_str("ENTITY_LLAMA_EAT"),
            SoundEnum::EntityLlamaHurt => f.write_str("ENTITY_LLAMA_HURT"),
            SoundEnum::EntityLlamaSpit => f.write_str("ENTITY_LLAMA_SPIT"),
            SoundEnum::EntityLlamaStep => f.write_str("ENTITY_LLAMA_STEP"),
            SoundEnum::EntityLlamaSwag => f.write_str("ENTITY_LLAMA_SWAG"),
            SoundEnum::EntityMagmaCubeDeath => f.write_str("ENTITY_MAGMA_CUBE_DEATH"),
            SoundEnum::EntityMagmaCubeDeathSmall => f.write_str("ENTITY_MAGMA_CUBE_DEATH_SMALL"),
            SoundEnum::EntityMagmaCubeHurt => f.write_str("ENTITY_MAGMA_CUBE_HURT"),
            SoundEnum::EntityMagmaCubeHurtSmall => f.write_str("ENTITY_MAGMA_CUBE_HURT_SMALL"),
            SoundEnum::EntityMagmaCubeJump => f.write_str("ENTITY_MAGMA_CUBE_JUMP"),
            SoundEnum::EntityMagmaCubeSquish => f.write_str("ENTITY_MAGMA_CUBE_SQUISH"),
            SoundEnum::EntityMagmaCubeSquishSmall => f.write_str("ENTITY_MAGMA_CUBE_SQUISH_SMALL"),
            SoundEnum::EntityMinecartInside => f.write_str("ENTITY_MINECART_INSIDE"),
            SoundEnum::EntityMinecartInsideUnderwater => {
                f.write_str("ENTITY_MINECART_INSIDE_UNDERWATER")
            }
            SoundEnum::EntityMinecartRiding => f.write_str("ENTITY_MINECART_RIDING"),
            SoundEnum::EntityMooshroomConvert => f.write_str("ENTITY_MOOSHROOM_CONVERT"),
            SoundEnum::EntityMooshroomEat => f.write_str("ENTITY_MOOSHROOM_EAT"),
            SoundEnum::EntityMooshroomMilk => f.write_str("ENTITY_MOOSHROOM_MILK"),
            SoundEnum::EntityMooshroomShear => f.write_str("ENTITY_MOOSHROOM_SHEAR"),
            SoundEnum::EntityMooshroomSuspiciousMilk => {
                f.write_str("ENTITY_MOOSHROOM_SUSPICIOUS_MILK")
            }
            SoundEnum::EntityMuleAmbient => f.write_str("ENTITY_MULE_AMBIENT"),
            SoundEnum::EntityMuleAngry => f.write_str("ENTITY_MULE_ANGRY"),
            SoundEnum::EntityMuleChest => f.write_str("ENTITY_MULE_CHEST"),
            SoundEnum::EntityMuleDeath => f.write_str("ENTITY_MULE_DEATH"),
            SoundEnum::EntityMuleEat => f.write_str("ENTITY_MULE_EAT"),
            SoundEnum::EntityMuleHurt => f.write_str("ENTITY_MULE_HURT"),
            SoundEnum::EntityOcelotAmbient => f.write_str("ENTITY_OCELOT_AMBIENT"),
            SoundEnum::EntityOcelotDeath => f.write_str("ENTITY_OCELOT_DEATH"),
            SoundEnum::EntityOcelotHurt => f.write_str("ENTITY_OCELOT_HURT"),
            SoundEnum::EntityPaintingBreak => f.write_str("ENTITY_PAINTING_BREAK"),
            SoundEnum::EntityPaintingPlace => f.write_str("ENTITY_PAINTING_PLACE"),
            SoundEnum::EntityPandaAggressiveAmbient => {
                f.write_str("ENTITY_PANDA_AGGRESSIVE_AMBIENT")
            }
            SoundEnum::EntityPandaAmbient => f.write_str("ENTITY_PANDA_AMBIENT"),
            SoundEnum::EntityPandaBite => f.write_str("ENTITY_PANDA_BITE"),
            SoundEnum::EntityPandaCantBreed => f.write_str("ENTITY_PANDA_CANT_BREED"),
            SoundEnum::EntityPandaDeath => f.write_str("ENTITY_PANDA_DEATH"),
            SoundEnum::EntityPandaEat => f.write_str("ENTITY_PANDA_EAT"),
            SoundEnum::EntityPandaHurt => f.write_str("ENTITY_PANDA_HURT"),
            SoundEnum::EntityPandaPreSneeze => f.write_str("ENTITY_PANDA_PRE_SNEEZE"),
            SoundEnum::EntityPandaSneeze => f.write_str("ENTITY_PANDA_SNEEZE"),
            SoundEnum::EntityPandaStep => f.write_str("ENTITY_PANDA_STEP"),
            SoundEnum::EntityPandaWorriedAmbient => f.write_str("ENTITY_PANDA_WORRIED_AMBIENT"),
            SoundEnum::EntityParrotAmbient => f.write_str("ENTITY_PARROT_AMBIENT"),
            SoundEnum::EntityParrotDeath => f.write_str("ENTITY_PARROT_DEATH"),
            SoundEnum::EntityParrotEat => f.write_str("ENTITY_PARROT_EAT"),
            SoundEnum::EntityParrotFly => f.write_str("ENTITY_PARROT_FLY"),
            SoundEnum::EntityParrotHurt => f.write_str("ENTITY_PARROT_HURT"),
            SoundEnum::EntityParrotImitateBlaze => f.write_str("ENTITY_PARROT_IMITATE_BLAZE"),
            SoundEnum::EntityParrotImitateCreeper => f.write_str("ENTITY_PARROT_IMITATE_CREEPER"),
            SoundEnum::EntityParrotImitateDrowned => f.write_str("ENTITY_PARROT_IMITATE_DROWNED"),
            SoundEnum::EntityParrotImitateElderGuardian => {
                f.write_str("ENTITY_PARROT_IMITATE_ELDER_GUARDIAN")
            }
            SoundEnum::EntityParrotImitateEndermite => {
                f.write_str("ENTITY_PARROT_IMITATE_ENDERMITE")
            }
            SoundEnum::EntityParrotImitateEnderDragon => {
                f.write_str("ENTITY_PARROT_IMITATE_ENDER_DRAGON")
            }
            SoundEnum::EntityParrotImitateEvoker => f.write_str("ENTITY_PARROT_IMITATE_EVOKER"),
            SoundEnum::EntityParrotImitateGhast => f.write_str("ENTITY_PARROT_IMITATE_GHAST"),
            SoundEnum::EntityParrotImitateGuardian => f.write_str("ENTITY_PARROT_IMITATE_GUARDIAN"),
            SoundEnum::EntityParrotImitateHoglin => f.write_str("ENTITY_PARROT_IMITATE_HOGLIN"),
            SoundEnum::EntityParrotImitateHusk => f.write_str("ENTITY_PARROT_IMITATE_HUSK"),
            SoundEnum::EntityParrotImitateIllusioner => {
                f.write_str("ENTITY_PARROT_IMITATE_ILLUSIONER")
            }
            SoundEnum::EntityParrotImitateMagmaCube => {
                f.write_str("ENTITY_PARROT_IMITATE_MAGMA_CUBE")
            }
            SoundEnum::EntityParrotImitatePhantom => f.write_str("ENTITY_PARROT_IMITATE_PHANTOM"),
            SoundEnum::EntityParrotImitatePiglin => f.write_str("ENTITY_PARROT_IMITATE_PIGLIN"),
            SoundEnum::EntityParrotImitatePiglinBrute => {
                f.write_str("ENTITY_PARROT_IMITATE_PIGLIN_BRUTE")
            }
            SoundEnum::EntityParrotImitatePillager => f.write_str("ENTITY_PARROT_IMITATE_PILLAGER"),
            SoundEnum::EntityParrotImitateRavager => f.write_str("ENTITY_PARROT_IMITATE_RAVAGER"),
            SoundEnum::EntityParrotImitateShulker => f.write_str("ENTITY_PARROT_IMITATE_SHULKER"),
            SoundEnum::EntityParrotImitateSilverfish => {
                f.write_str("ENTITY_PARROT_IMITATE_SILVERFISH")
            }
            SoundEnum::EntityParrotImitateSkeleton => f.write_str("ENTITY_PARROT_IMITATE_SKELETON"),
            SoundEnum::EntityParrotImitateSlime => f.write_str("ENTITY_PARROT_IMITATE_SLIME"),
            SoundEnum::EntityParrotImitateSpider => f.write_str("ENTITY_PARROT_IMITATE_SPIDER"),
            SoundEnum::EntityParrotImitateStray => f.write_str("ENTITY_PARROT_IMITATE_STRAY"),
            SoundEnum::EntityParrotImitateVex => f.write_str("ENTITY_PARROT_IMITATE_VEX"),
            SoundEnum::EntityParrotImitateVindicator => {
                f.write_str("ENTITY_PARROT_IMITATE_VINDICATOR")
            }
            SoundEnum::EntityParrotImitateWarden => f.write_str("ENTITY_PARROT_IMITATE_WARDEN"),
            SoundEnum::EntityParrotImitateWitch => f.write_str("ENTITY_PARROT_IMITATE_WITCH"),
            SoundEnum::EntityParrotImitateWither => f.write_str("ENTITY_PARROT_IMITATE_WITHER"),
            SoundEnum::EntityParrotImitateWitherSkeleton => {
                f.write_str("ENTITY_PARROT_IMITATE_WITHER_SKELETON")
            }
            SoundEnum::EntityParrotImitateZoglin => f.write_str("ENTITY_PARROT_IMITATE_ZOGLIN"),
            SoundEnum::EntityParrotImitateZombie => f.write_str("ENTITY_PARROT_IMITATE_ZOMBIE"),
            SoundEnum::EntityParrotImitateZombieVillager => {
                f.write_str("ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER")
            }
            SoundEnum::EntityParrotStep => f.write_str("ENTITY_PARROT_STEP"),
            SoundEnum::EntityPhantomAmbient => f.write_str("ENTITY_PHANTOM_AMBIENT"),
            SoundEnum::EntityPhantomBite => f.write_str("ENTITY_PHANTOM_BITE"),
            SoundEnum::EntityPhantomDeath => f.write_str("ENTITY_PHANTOM_DEATH"),
            SoundEnum::EntityPhantomFlap => f.write_str("ENTITY_PHANTOM_FLAP"),
            SoundEnum::EntityPhantomHurt => f.write_str("ENTITY_PHANTOM_HURT"),
            SoundEnum::EntityPhantomSwoop => f.write_str("ENTITY_PHANTOM_SWOOP"),
            SoundEnum::EntityPiglinAdmiringItem => f.write_str("ENTITY_PIGLIN_ADMIRING_ITEM"),
            SoundEnum::EntityPiglinAmbient => f.write_str("ENTITY_PIGLIN_AMBIENT"),
            SoundEnum::EntityPiglinAngry => f.write_str("ENTITY_PIGLIN_ANGRY"),
            SoundEnum::EntityPiglinBruteAmbient => f.write_str("ENTITY_PIGLIN_BRUTE_AMBIENT"),
            SoundEnum::EntityPiglinBruteAngry => f.write_str("ENTITY_PIGLIN_BRUTE_ANGRY"),
            SoundEnum::EntityPiglinBruteConvertedToZombified => {
                f.write_str("ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED")
            }
            SoundEnum::EntityPiglinBruteDeath => f.write_str("ENTITY_PIGLIN_BRUTE_DEATH"),
            SoundEnum::EntityPiglinBruteHurt => f.write_str("ENTITY_PIGLIN_BRUTE_HURT"),
            SoundEnum::EntityPiglinBruteStep => f.write_str("ENTITY_PIGLIN_BRUTE_STEP"),
            SoundEnum::EntityPiglinCelebrate => f.write_str("ENTITY_PIGLIN_CELEBRATE"),
            SoundEnum::EntityPiglinConvertedToZombified => {
                f.write_str("ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED")
            }
            SoundEnum::EntityPiglinDeath => f.write_str("ENTITY_PIGLIN_DEATH"),
            SoundEnum::EntityPiglinHurt => f.write_str("ENTITY_PIGLIN_HURT"),
            SoundEnum::EntityPiglinJealous => f.write_str("ENTITY_PIGLIN_JEALOUS"),
            SoundEnum::EntityPiglinRetreat => f.write_str("ENTITY_PIGLIN_RETREAT"),
            SoundEnum::EntityPiglinStep => f.write_str("ENTITY_PIGLIN_STEP"),
            SoundEnum::EntityPigAmbient => f.write_str("ENTITY_PIG_AMBIENT"),
            SoundEnum::EntityPigDeath => f.write_str("ENTITY_PIG_DEATH"),
            SoundEnum::EntityPigHurt => f.write_str("ENTITY_PIG_HURT"),
            SoundEnum::EntityPigSaddle => f.write_str("ENTITY_PIG_SADDLE"),
            SoundEnum::EntityPigStep => f.write_str("ENTITY_PIG_STEP"),
            SoundEnum::EntityPillagerAmbient => f.write_str("ENTITY_PILLAGER_AMBIENT"),
            SoundEnum::EntityPillagerCelebrate => f.write_str("ENTITY_PILLAGER_CELEBRATE"),
            SoundEnum::EntityPillagerDeath => f.write_str("ENTITY_PILLAGER_DEATH"),
            SoundEnum::EntityPillagerHurt => f.write_str("ENTITY_PILLAGER_HURT"),
            SoundEnum::EntityPlayerAttackCrit => f.write_str("ENTITY_PLAYER_ATTACK_CRIT"),
            SoundEnum::EntityPlayerAttackKnockback => f.write_str("ENTITY_PLAYER_ATTACK_KNOCKBACK"),
            SoundEnum::EntityPlayerAttackNodamage => f.write_str("ENTITY_PLAYER_ATTACK_NODAMAGE"),
            SoundEnum::EntityPlayerAttackStrong => f.write_str("ENTITY_PLAYER_ATTACK_STRONG"),
            SoundEnum::EntityPlayerAttackSweep => f.write_str("ENTITY_PLAYER_ATTACK_SWEEP"),
            SoundEnum::EntityPlayerAttackWeak => f.write_str("ENTITY_PLAYER_ATTACK_WEAK"),
            SoundEnum::EntityPlayerBigFall => f.write_str("ENTITY_PLAYER_BIG_FALL"),
            SoundEnum::EntityPlayerBreath => f.write_str("ENTITY_PLAYER_BREATH"),
            SoundEnum::EntityPlayerBurp => f.write_str("ENTITY_PLAYER_BURP"),
            SoundEnum::EntityPlayerDeath => f.write_str("ENTITY_PLAYER_DEATH"),
            SoundEnum::EntityPlayerHurt => f.write_str("ENTITY_PLAYER_HURT"),
            SoundEnum::EntityPlayerHurtDrown => f.write_str("ENTITY_PLAYER_HURT_DROWN"),
            SoundEnum::EntityPlayerHurtFreeze => f.write_str("ENTITY_PLAYER_HURT_FREEZE"),
            SoundEnum::EntityPlayerHurtOnFire => f.write_str("ENTITY_PLAYER_HURT_ON_FIRE"),
            SoundEnum::EntityPlayerHurtSweetBerryBush => {
                f.write_str("ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH")
            }
            SoundEnum::EntityPlayerLevelup => f.write_str("ENTITY_PLAYER_LEVELUP"),
            SoundEnum::EntityPlayerSmallFall => f.write_str("ENTITY_PLAYER_SMALL_FALL"),
            SoundEnum::EntityPlayerSplash => f.write_str("ENTITY_PLAYER_SPLASH"),
            SoundEnum::EntityPlayerSplashHighSpeed => {
                f.write_str("ENTITY_PLAYER_SPLASH_HIGH_SPEED")
            }
            SoundEnum::EntityPlayerSwim => f.write_str("ENTITY_PLAYER_SWIM"),
            SoundEnum::EntityPolarBearAmbient => f.write_str("ENTITY_POLAR_BEAR_AMBIENT"),
            SoundEnum::EntityPolarBearAmbientBaby => f.write_str("ENTITY_POLAR_BEAR_AMBIENT_BABY"),
            SoundEnum::EntityPolarBearDeath => f.write_str("ENTITY_POLAR_BEAR_DEATH"),
            SoundEnum::EntityPolarBearHurt => f.write_str("ENTITY_POLAR_BEAR_HURT"),
            SoundEnum::EntityPolarBearStep => f.write_str("ENTITY_POLAR_BEAR_STEP"),
            SoundEnum::EntityPolarBearWarning => f.write_str("ENTITY_POLAR_BEAR_WARNING"),
            SoundEnum::EntityPufferFishAmbient => f.write_str("ENTITY_PUFFER_FISH_AMBIENT"),
            SoundEnum::EntityPufferFishBlowOut => f.write_str("ENTITY_PUFFER_FISH_BLOW_OUT"),
            SoundEnum::EntityPufferFishBlowUp => f.write_str("ENTITY_PUFFER_FISH_BLOW_UP"),
            SoundEnum::EntityPufferFishDeath => f.write_str("ENTITY_PUFFER_FISH_DEATH"),
            SoundEnum::EntityPufferFishFlop => f.write_str("ENTITY_PUFFER_FISH_FLOP"),
            SoundEnum::EntityPufferFishHurt => f.write_str("ENTITY_PUFFER_FISH_HURT"),
            SoundEnum::EntityPufferFishSting => f.write_str("ENTITY_PUFFER_FISH_STING"),
            SoundEnum::EntityRabbitAmbient => f.write_str("ENTITY_RABBIT_AMBIENT"),
            SoundEnum::EntityRabbitAttack => f.write_str("ENTITY_RABBIT_ATTACK"),
            SoundEnum::EntityRabbitDeath => f.write_str("ENTITY_RABBIT_DEATH"),
            SoundEnum::EntityRabbitHurt => f.write_str("ENTITY_RABBIT_HURT"),
            SoundEnum::EntityRabbitJump => f.write_str("ENTITY_RABBIT_JUMP"),
            SoundEnum::EntityRavagerAmbient => f.write_str("ENTITY_RAVAGER_AMBIENT"),
            SoundEnum::EntityRavagerAttack => f.write_str("ENTITY_RAVAGER_ATTACK"),
            SoundEnum::EntityRavagerCelebrate => f.write_str("ENTITY_RAVAGER_CELEBRATE"),
            SoundEnum::EntityRavagerDeath => f.write_str("ENTITY_RAVAGER_DEATH"),
            SoundEnum::EntityRavagerHurt => f.write_str("ENTITY_RAVAGER_HURT"),
            SoundEnum::EntityRavagerRoar => f.write_str("ENTITY_RAVAGER_ROAR"),
            SoundEnum::EntityRavagerStep => f.write_str("ENTITY_RAVAGER_STEP"),
            SoundEnum::EntityRavagerStunned => f.write_str("ENTITY_RAVAGER_STUNNED"),
            SoundEnum::EntitySalmonAmbient => f.write_str("ENTITY_SALMON_AMBIENT"),
            SoundEnum::EntitySalmonDeath => f.write_str("ENTITY_SALMON_DEATH"),
            SoundEnum::EntitySalmonFlop => f.write_str("ENTITY_SALMON_FLOP"),
            SoundEnum::EntitySalmonHurt => f.write_str("ENTITY_SALMON_HURT"),
            SoundEnum::EntitySheepAmbient => f.write_str("ENTITY_SHEEP_AMBIENT"),
            SoundEnum::EntitySheepDeath => f.write_str("ENTITY_SHEEP_DEATH"),
            SoundEnum::EntitySheepHurt => f.write_str("ENTITY_SHEEP_HURT"),
            SoundEnum::EntitySheepShear => f.write_str("ENTITY_SHEEP_SHEAR"),
            SoundEnum::EntitySheepStep => f.write_str("ENTITY_SHEEP_STEP"),
            SoundEnum::EntityShulkerAmbient => f.write_str("ENTITY_SHULKER_AMBIENT"),
            SoundEnum::EntityShulkerBulletHit => f.write_str("ENTITY_SHULKER_BULLET_HIT"),
            SoundEnum::EntityShulkerBulletHurt => f.write_str("ENTITY_SHULKER_BULLET_HURT"),
            SoundEnum::EntityShulkerClose => f.write_str("ENTITY_SHULKER_CLOSE"),
            SoundEnum::EntityShulkerDeath => f.write_str("ENTITY_SHULKER_DEATH"),
            SoundEnum::EntityShulkerHurt => f.write_str("ENTITY_SHULKER_HURT"),
            SoundEnum::EntityShulkerHurtClosed => f.write_str("ENTITY_SHULKER_HURT_CLOSED"),
            SoundEnum::EntityShulkerOpen => f.write_str("ENTITY_SHULKER_OPEN"),
            SoundEnum::EntityShulkerShoot => f.write_str("ENTITY_SHULKER_SHOOT"),
            SoundEnum::EntityShulkerTeleport => f.write_str("ENTITY_SHULKER_TELEPORT"),
            SoundEnum::EntitySilverfishAmbient => f.write_str("ENTITY_SILVERFISH_AMBIENT"),
            SoundEnum::EntitySilverfishDeath => f.write_str("ENTITY_SILVERFISH_DEATH"),
            SoundEnum::EntitySilverfishHurt => f.write_str("ENTITY_SILVERFISH_HURT"),
            SoundEnum::EntitySilverfishStep => f.write_str("ENTITY_SILVERFISH_STEP"),
            SoundEnum::EntitySkeletonAmbient => f.write_str("ENTITY_SKELETON_AMBIENT"),
            SoundEnum::EntitySkeletonConvertedToStray => {
                f.write_str("ENTITY_SKELETON_CONVERTED_TO_STRAY")
            }
            SoundEnum::EntitySkeletonDeath => f.write_str("ENTITY_SKELETON_DEATH"),
            SoundEnum::EntitySkeletonHorseAmbient => f.write_str("ENTITY_SKELETON_HORSE_AMBIENT"),
            SoundEnum::EntitySkeletonHorseAmbientWater => {
                f.write_str("ENTITY_SKELETON_HORSE_AMBIENT_WATER")
            }
            SoundEnum::EntitySkeletonHorseDeath => f.write_str("ENTITY_SKELETON_HORSE_DEATH"),
            SoundEnum::EntitySkeletonHorseGallopWater => {
                f.write_str("ENTITY_SKELETON_HORSE_GALLOP_WATER")
            }
            SoundEnum::EntitySkeletonHorseHurt => f.write_str("ENTITY_SKELETON_HORSE_HURT"),
            SoundEnum::EntitySkeletonHorseJumpWater => {
                f.write_str("ENTITY_SKELETON_HORSE_JUMP_WATER")
            }
            SoundEnum::EntitySkeletonHorseStepWater => {
                f.write_str("ENTITY_SKELETON_HORSE_STEP_WATER")
            }
            SoundEnum::EntitySkeletonHorseSwim => f.write_str("ENTITY_SKELETON_HORSE_SWIM"),
            SoundEnum::EntitySkeletonHurt => f.write_str("ENTITY_SKELETON_HURT"),
            SoundEnum::EntitySkeletonShoot => f.write_str("ENTITY_SKELETON_SHOOT"),
            SoundEnum::EntitySkeletonStep => f.write_str("ENTITY_SKELETON_STEP"),
            SoundEnum::EntitySlimeAttack => f.write_str("ENTITY_SLIME_ATTACK"),
            SoundEnum::EntitySlimeDeath => f.write_str("ENTITY_SLIME_DEATH"),
            SoundEnum::EntitySlimeDeathSmall => f.write_str("ENTITY_SLIME_DEATH_SMALL"),
            SoundEnum::EntitySlimeHurt => f.write_str("ENTITY_SLIME_HURT"),
            SoundEnum::EntitySlimeHurtSmall => f.write_str("ENTITY_SLIME_HURT_SMALL"),
            SoundEnum::EntitySlimeJump => f.write_str("ENTITY_SLIME_JUMP"),
            SoundEnum::EntitySlimeJumpSmall => f.write_str("ENTITY_SLIME_JUMP_SMALL"),
            SoundEnum::EntitySlimeSquish => f.write_str("ENTITY_SLIME_SQUISH"),
            SoundEnum::EntitySlimeSquishSmall => f.write_str("ENTITY_SLIME_SQUISH_SMALL"),
            SoundEnum::EntitySnifferDeath => f.write_str("ENTITY_SNIFFER_DEATH"),
            SoundEnum::EntitySnifferDigging => f.write_str("ENTITY_SNIFFER_DIGGING"),
            SoundEnum::EntitySnifferDiggingStop => f.write_str("ENTITY_SNIFFER_DIGGING_STOP"),
            SoundEnum::EntitySnifferDropSeed => f.write_str("ENTITY_SNIFFER_DROP_SEED"),
            SoundEnum::EntitySnifferEat => f.write_str("ENTITY_SNIFFER_EAT"),
            SoundEnum::EntitySnifferHappy => f.write_str("ENTITY_SNIFFER_HAPPY"),
            SoundEnum::EntitySnifferHurt => f.write_str("ENTITY_SNIFFER_HURT"),
            SoundEnum::EntitySnifferIdle => f.write_str("ENTITY_SNIFFER_IDLE"),
            SoundEnum::EntitySnifferScenting => f.write_str("ENTITY_SNIFFER_SCENTING"),
            SoundEnum::EntitySnifferSearching => f.write_str("ENTITY_SNIFFER_SEARCHING"),
            SoundEnum::EntitySnifferSniffing => f.write_str("ENTITY_SNIFFER_SNIFFING"),
            SoundEnum::EntitySnifferStep => f.write_str("ENTITY_SNIFFER_STEP"),
            SoundEnum::EntitySnowballThrow => f.write_str("ENTITY_SNOWBALL_THROW"),
            SoundEnum::EntitySnowGolemAmbient => f.write_str("ENTITY_SNOW_GOLEM_AMBIENT"),
            SoundEnum::EntitySnowGolemDeath => f.write_str("ENTITY_SNOW_GOLEM_DEATH"),
            SoundEnum::EntitySnowGolemHurt => f.write_str("ENTITY_SNOW_GOLEM_HURT"),
            SoundEnum::EntitySnowGolemShear => f.write_str("ENTITY_SNOW_GOLEM_SHEAR"),
            SoundEnum::EntitySnowGolemShoot => f.write_str("ENTITY_SNOW_GOLEM_SHOOT"),
            SoundEnum::EntitySpiderAmbient => f.write_str("ENTITY_SPIDER_AMBIENT"),
            SoundEnum::EntitySpiderDeath => f.write_str("ENTITY_SPIDER_DEATH"),
            SoundEnum::EntitySpiderHurt => f.write_str("ENTITY_SPIDER_HURT"),
            SoundEnum::EntitySpiderStep => f.write_str("ENTITY_SPIDER_STEP"),
            SoundEnum::EntitySplashPotionBreak => f.write_str("ENTITY_SPLASH_POTION_BREAK"),
            SoundEnum::EntitySplashPotionThrow => f.write_str("ENTITY_SPLASH_POTION_THROW"),
            SoundEnum::EntitySquidAmbient => f.write_str("ENTITY_SQUID_AMBIENT"),
            SoundEnum::EntitySquidDeath => f.write_str("ENTITY_SQUID_DEATH"),
            SoundEnum::EntitySquidHurt => f.write_str("ENTITY_SQUID_HURT"),
            SoundEnum::EntitySquidSquirt => f.write_str("ENTITY_SQUID_SQUIRT"),
            SoundEnum::EntityStrayAmbient => f.write_str("ENTITY_STRAY_AMBIENT"),
            SoundEnum::EntityStrayDeath => f.write_str("ENTITY_STRAY_DEATH"),
            SoundEnum::EntityStrayHurt => f.write_str("ENTITY_STRAY_HURT"),
            SoundEnum::EntityStrayStep => f.write_str("ENTITY_STRAY_STEP"),
            SoundEnum::EntityStriderAmbient => f.write_str("ENTITY_STRIDER_AMBIENT"),
            SoundEnum::EntityStriderDeath => f.write_str("ENTITY_STRIDER_DEATH"),
            SoundEnum::EntityStriderEat => f.write_str("ENTITY_STRIDER_EAT"),
            SoundEnum::EntityStriderHappy => f.write_str("ENTITY_STRIDER_HAPPY"),
            SoundEnum::EntityStriderHurt => f.write_str("ENTITY_STRIDER_HURT"),
            SoundEnum::EntityStriderRetreat => f.write_str("ENTITY_STRIDER_RETREAT"),
            SoundEnum::EntityStriderSaddle => f.write_str("ENTITY_STRIDER_SADDLE"),
            SoundEnum::EntityStriderStep => f.write_str("ENTITY_STRIDER_STEP"),
            SoundEnum::EntityStriderStepLava => f.write_str("ENTITY_STRIDER_STEP_LAVA"),
            SoundEnum::EntityTadpoleDeath => f.write_str("ENTITY_TADPOLE_DEATH"),
            SoundEnum::EntityTadpoleFlop => f.write_str("ENTITY_TADPOLE_FLOP"),
            SoundEnum::EntityTadpoleGrowUp => f.write_str("ENTITY_TADPOLE_GROW_UP"),
            SoundEnum::EntityTadpoleHurt => f.write_str("ENTITY_TADPOLE_HURT"),
            SoundEnum::EntityTntPrimed => f.write_str("ENTITY_TNT_PRIMED"),
            SoundEnum::EntityTropicalFishAmbient => f.write_str("ENTITY_TROPICAL_FISH_AMBIENT"),
            SoundEnum::EntityTropicalFishDeath => f.write_str("ENTITY_TROPICAL_FISH_DEATH"),
            SoundEnum::EntityTropicalFishFlop => f.write_str("ENTITY_TROPICAL_FISH_FLOP"),
            SoundEnum::EntityTropicalFishHurt => f.write_str("ENTITY_TROPICAL_FISH_HURT"),
            SoundEnum::EntityTurtleAmbientLand => f.write_str("ENTITY_TURTLE_AMBIENT_LAND"),
            SoundEnum::EntityTurtleDeath => f.write_str("ENTITY_TURTLE_DEATH"),
            SoundEnum::EntityTurtleDeathBaby => f.write_str("ENTITY_TURTLE_DEATH_BABY"),
            SoundEnum::EntityTurtleEggBreak => f.write_str("ENTITY_TURTLE_EGG_BREAK"),
            SoundEnum::EntityTurtleEggCrack => f.write_str("ENTITY_TURTLE_EGG_CRACK"),
            SoundEnum::EntityTurtleEggHatch => f.write_str("ENTITY_TURTLE_EGG_HATCH"),
            SoundEnum::EntityTurtleHurt => f.write_str("ENTITY_TURTLE_HURT"),
            SoundEnum::EntityTurtleHurtBaby => f.write_str("ENTITY_TURTLE_HURT_BABY"),
            SoundEnum::EntityTurtleLayEgg => f.write_str("ENTITY_TURTLE_LAY_EGG"),
            SoundEnum::EntityTurtleShamble => f.write_str("ENTITY_TURTLE_SHAMBLE"),
            SoundEnum::EntityTurtleShambleBaby => f.write_str("ENTITY_TURTLE_SHAMBLE_BABY"),
            SoundEnum::EntityTurtleSwim => f.write_str("ENTITY_TURTLE_SWIM"),
            SoundEnum::EntityVexAmbient => f.write_str("ENTITY_VEX_AMBIENT"),
            SoundEnum::EntityVexCharge => f.write_str("ENTITY_VEX_CHARGE"),
            SoundEnum::EntityVexDeath => f.write_str("ENTITY_VEX_DEATH"),
            SoundEnum::EntityVexHurt => f.write_str("ENTITY_VEX_HURT"),
            SoundEnum::EntityVillagerAmbient => f.write_str("ENTITY_VILLAGER_AMBIENT"),
            SoundEnum::EntityVillagerCelebrate => f.write_str("ENTITY_VILLAGER_CELEBRATE"),
            SoundEnum::EntityVillagerDeath => f.write_str("ENTITY_VILLAGER_DEATH"),
            SoundEnum::EntityVillagerHurt => f.write_str("ENTITY_VILLAGER_HURT"),
            SoundEnum::EntityVillagerNo => f.write_str("ENTITY_VILLAGER_NO"),
            SoundEnum::EntityVillagerTrade => f.write_str("ENTITY_VILLAGER_TRADE"),
            SoundEnum::EntityVillagerWorkArmorer => f.write_str("ENTITY_VILLAGER_WORK_ARMORER"),
            SoundEnum::EntityVillagerWorkButcher => f.write_str("ENTITY_VILLAGER_WORK_BUTCHER"),
            SoundEnum::EntityVillagerWorkCartographer => {
                f.write_str("ENTITY_VILLAGER_WORK_CARTOGRAPHER")
            }
            SoundEnum::EntityVillagerWorkCleric => f.write_str("ENTITY_VILLAGER_WORK_CLERIC"),
            SoundEnum::EntityVillagerWorkFarmer => f.write_str("ENTITY_VILLAGER_WORK_FARMER"),
            SoundEnum::EntityVillagerWorkFisherman => f.write_str("ENTITY_VILLAGER_WORK_FISHERMAN"),
            SoundEnum::EntityVillagerWorkFletcher => f.write_str("ENTITY_VILLAGER_WORK_FLETCHER"),
            SoundEnum::EntityVillagerWorkLeatherworker => {
                f.write_str("ENTITY_VILLAGER_WORK_LEATHERWORKER")
            }
            SoundEnum::EntityVillagerWorkLibrarian => f.write_str("ENTITY_VILLAGER_WORK_LIBRARIAN"),
            SoundEnum::EntityVillagerWorkMason => f.write_str("ENTITY_VILLAGER_WORK_MASON"),
            SoundEnum::EntityVillagerWorkShepherd => f.write_str("ENTITY_VILLAGER_WORK_SHEPHERD"),
            SoundEnum::EntityVillagerWorkToolsmith => f.write_str("ENTITY_VILLAGER_WORK_TOOLSMITH"),
            SoundEnum::EntityVillagerWorkWeaponsmith => {
                f.write_str("ENTITY_VILLAGER_WORK_WEAPONSMITH")
            }
            SoundEnum::EntityVillagerYes => f.write_str("ENTITY_VILLAGER_YES"),
            SoundEnum::EntityVindicatorAmbient => f.write_str("ENTITY_VINDICATOR_AMBIENT"),
            SoundEnum::EntityVindicatorCelebrate => f.write_str("ENTITY_VINDICATOR_CELEBRATE"),
            SoundEnum::EntityVindicatorDeath => f.write_str("ENTITY_VINDICATOR_DEATH"),
            SoundEnum::EntityVindicatorHurt => f.write_str("ENTITY_VINDICATOR_HURT"),
            SoundEnum::EntityWanderingTraderAmbient => {
                f.write_str("ENTITY_WANDERING_TRADER_AMBIENT")
            }
            SoundEnum::EntityWanderingTraderDeath => f.write_str("ENTITY_WANDERING_TRADER_DEATH"),
            SoundEnum::EntityWanderingTraderDisappeared => {
                f.write_str("ENTITY_WANDERING_TRADER_DISAPPEARED")
            }
            SoundEnum::EntityWanderingTraderDrinkMilk => {
                f.write_str("ENTITY_WANDERING_TRADER_DRINK_MILK")
            }
            SoundEnum::EntityWanderingTraderDrinkPotion => {
                f.write_str("ENTITY_WANDERING_TRADER_DRINK_POTION")
            }
            SoundEnum::EntityWanderingTraderHurt => f.write_str("ENTITY_WANDERING_TRADER_HURT"),
            SoundEnum::EntityWanderingTraderNo => f.write_str("ENTITY_WANDERING_TRADER_NO"),
            SoundEnum::EntityWanderingTraderReappeared => {
                f.write_str("ENTITY_WANDERING_TRADER_REAPPEARED")
            }
            SoundEnum::EntityWanderingTraderTrade => f.write_str("ENTITY_WANDERING_TRADER_TRADE"),
            SoundEnum::EntityWanderingTraderYes => f.write_str("ENTITY_WANDERING_TRADER_YES"),
            SoundEnum::EntityWardenAgitated => f.write_str("ENTITY_WARDEN_AGITATED"),
            SoundEnum::EntityWardenAmbient => f.write_str("ENTITY_WARDEN_AMBIENT"),
            SoundEnum::EntityWardenAngry => f.write_str("ENTITY_WARDEN_ANGRY"),
            SoundEnum::EntityWardenAttackImpact => f.write_str("ENTITY_WARDEN_ATTACK_IMPACT"),
            SoundEnum::EntityWardenDeath => f.write_str("ENTITY_WARDEN_DEATH"),
            SoundEnum::EntityWardenDig => f.write_str("ENTITY_WARDEN_DIG"),
            SoundEnum::EntityWardenEmerge => f.write_str("ENTITY_WARDEN_EMERGE"),
            SoundEnum::EntityWardenHeartbeat => f.write_str("ENTITY_WARDEN_HEARTBEAT"),
            SoundEnum::EntityWardenHurt => f.write_str("ENTITY_WARDEN_HURT"),
            SoundEnum::EntityWardenListening => f.write_str("ENTITY_WARDEN_LISTENING"),
            SoundEnum::EntityWardenListeningAngry => f.write_str("ENTITY_WARDEN_LISTENING_ANGRY"),
            SoundEnum::EntityWardenNearbyClose => f.write_str("ENTITY_WARDEN_NEARBY_CLOSE"),
            SoundEnum::EntityWardenNearbyCloser => f.write_str("ENTITY_WARDEN_NEARBY_CLOSER"),
            SoundEnum::EntityWardenNearbyClosest => f.write_str("ENTITY_WARDEN_NEARBY_CLOSEST"),
            SoundEnum::EntityWardenRoar => f.write_str("ENTITY_WARDEN_ROAR"),
            SoundEnum::EntityWardenSniff => f.write_str("ENTITY_WARDEN_SNIFF"),
            SoundEnum::EntityWardenSonicBoom => f.write_str("ENTITY_WARDEN_SONIC_BOOM"),
            SoundEnum::EntityWardenSonicCharge => f.write_str("ENTITY_WARDEN_SONIC_CHARGE"),
            SoundEnum::EntityWardenStep => f.write_str("ENTITY_WARDEN_STEP"),
            SoundEnum::EntityWardenTendrilClicks => f.write_str("ENTITY_WARDEN_TENDRIL_CLICKS"),
            SoundEnum::EntityWitchAmbient => f.write_str("ENTITY_WITCH_AMBIENT"),
            SoundEnum::EntityWitchCelebrate => f.write_str("ENTITY_WITCH_CELEBRATE"),
            SoundEnum::EntityWitchDeath => f.write_str("ENTITY_WITCH_DEATH"),
            SoundEnum::EntityWitchDrink => f.write_str("ENTITY_WITCH_DRINK"),
            SoundEnum::EntityWitchHurt => f.write_str("ENTITY_WITCH_HURT"),
            SoundEnum::EntityWitchThrow => f.write_str("ENTITY_WITCH_THROW"),
            SoundEnum::EntityWitherAmbient => f.write_str("ENTITY_WITHER_AMBIENT"),
            SoundEnum::EntityWitherBreakBlock => f.write_str("ENTITY_WITHER_BREAK_BLOCK"),
            SoundEnum::EntityWitherDeath => f.write_str("ENTITY_WITHER_DEATH"),
            SoundEnum::EntityWitherHurt => f.write_str("ENTITY_WITHER_HURT"),
            SoundEnum::EntityWitherShoot => f.write_str("ENTITY_WITHER_SHOOT"),
            SoundEnum::EntityWitherSkeletonAmbient => f.write_str("ENTITY_WITHER_SKELETON_AMBIENT"),
            SoundEnum::EntityWitherSkeletonDeath => f.write_str("ENTITY_WITHER_SKELETON_DEATH"),
            SoundEnum::EntityWitherSkeletonHurt => f.write_str("ENTITY_WITHER_SKELETON_HURT"),
            SoundEnum::EntityWitherSkeletonStep => f.write_str("ENTITY_WITHER_SKELETON_STEP"),
            SoundEnum::EntityWitherSpawn => f.write_str("ENTITY_WITHER_SPAWN"),
            SoundEnum::EntityWolfAmbient => f.write_str("ENTITY_WOLF_AMBIENT"),
            SoundEnum::EntityWolfDeath => f.write_str("ENTITY_WOLF_DEATH"),
            SoundEnum::EntityWolfGrowl => f.write_str("ENTITY_WOLF_GROWL"),
            SoundEnum::EntityWolfHowl => f.write_str("ENTITY_WOLF_HOWL"),
            SoundEnum::EntityWolfHurt => f.write_str("ENTITY_WOLF_HURT"),
            SoundEnum::EntityWolfPant => f.write_str("ENTITY_WOLF_PANT"),
            SoundEnum::EntityWolfShake => f.write_str("ENTITY_WOLF_SHAKE"),
            SoundEnum::EntityWolfStep => f.write_str("ENTITY_WOLF_STEP"),
            SoundEnum::EntityWolfWhine => f.write_str("ENTITY_WOLF_WHINE"),
            SoundEnum::EntityZoglinAmbient => f.write_str("ENTITY_ZOGLIN_AMBIENT"),
            SoundEnum::EntityZoglinAngry => f.write_str("ENTITY_ZOGLIN_ANGRY"),
            SoundEnum::EntityZoglinAttack => f.write_str("ENTITY_ZOGLIN_ATTACK"),
            SoundEnum::EntityZoglinDeath => f.write_str("ENTITY_ZOGLIN_DEATH"),
            SoundEnum::EntityZoglinHurt => f.write_str("ENTITY_ZOGLIN_HURT"),
            SoundEnum::EntityZoglinStep => f.write_str("ENTITY_ZOGLIN_STEP"),
            SoundEnum::EntityZombieAmbient => f.write_str("ENTITY_ZOMBIE_AMBIENT"),
            SoundEnum::EntityZombieAttackIronDoor => f.write_str("ENTITY_ZOMBIE_ATTACK_IRON_DOOR"),
            SoundEnum::EntityZombieAttackWoodenDoor => {
                f.write_str("ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR")
            }
            SoundEnum::EntityZombieBreakWoodenDoor => {
                f.write_str("ENTITY_ZOMBIE_BREAK_WOODEN_DOOR")
            }
            SoundEnum::EntityZombieConvertedToDrowned => {
                f.write_str("ENTITY_ZOMBIE_CONVERTED_TO_DROWNED")
            }
            SoundEnum::EntityZombieDeath => f.write_str("ENTITY_ZOMBIE_DEATH"),
            SoundEnum::EntityZombieDestroyEgg => f.write_str("ENTITY_ZOMBIE_DESTROY_EGG"),
            SoundEnum::EntityZombieHorseAmbient => f.write_str("ENTITY_ZOMBIE_HORSE_AMBIENT"),
            SoundEnum::EntityZombieHorseDeath => f.write_str("ENTITY_ZOMBIE_HORSE_DEATH"),
            SoundEnum::EntityZombieHorseHurt => f.write_str("ENTITY_ZOMBIE_HORSE_HURT"),
            SoundEnum::EntityZombieHurt => f.write_str("ENTITY_ZOMBIE_HURT"),
            SoundEnum::EntityZombieInfect => f.write_str("ENTITY_ZOMBIE_INFECT"),
            SoundEnum::EntityZombieStep => f.write_str("ENTITY_ZOMBIE_STEP"),
            SoundEnum::EntityZombieVillagerAmbient => f.write_str("ENTITY_ZOMBIE_VILLAGER_AMBIENT"),
            SoundEnum::EntityZombieVillagerConverted => {
                f.write_str("ENTITY_ZOMBIE_VILLAGER_CONVERTED")
            }
            SoundEnum::EntityZombieVillagerCure => f.write_str("ENTITY_ZOMBIE_VILLAGER_CURE"),
            SoundEnum::EntityZombieVillagerDeath => f.write_str("ENTITY_ZOMBIE_VILLAGER_DEATH"),
            SoundEnum::EntityZombieVillagerHurt => f.write_str("ENTITY_ZOMBIE_VILLAGER_HURT"),
            SoundEnum::EntityZombieVillagerStep => f.write_str("ENTITY_ZOMBIE_VILLAGER_STEP"),
            SoundEnum::EntityZombifiedPiglinAmbient => {
                f.write_str("ENTITY_ZOMBIFIED_PIGLIN_AMBIENT")
            }
            SoundEnum::EntityZombifiedPiglinAngry => f.write_str("ENTITY_ZOMBIFIED_PIGLIN_ANGRY"),
            SoundEnum::EntityZombifiedPiglinDeath => f.write_str("ENTITY_ZOMBIFIED_PIGLIN_DEATH"),
            SoundEnum::EntityZombifiedPiglinHurt => f.write_str("ENTITY_ZOMBIFIED_PIGLIN_HURT"),
            SoundEnum::EventRaidHorn => f.write_str("EVENT_RAID_HORN"),
            SoundEnum::IntentionallyEmpty => f.write_str("INTENTIONALLY_EMPTY"),
            SoundEnum::ItemArmorEquipChain => f.write_str("ITEM_ARMOR_EQUIP_CHAIN"),
            SoundEnum::ItemArmorEquipDiamond => f.write_str("ITEM_ARMOR_EQUIP_DIAMOND"),
            SoundEnum::ItemArmorEquipElytra => f.write_str("ITEM_ARMOR_EQUIP_ELYTRA"),
            SoundEnum::ItemArmorEquipGeneric => f.write_str("ITEM_ARMOR_EQUIP_GENERIC"),
            SoundEnum::ItemArmorEquipGold => f.write_str("ITEM_ARMOR_EQUIP_GOLD"),
            SoundEnum::ItemArmorEquipIron => f.write_str("ITEM_ARMOR_EQUIP_IRON"),
            SoundEnum::ItemArmorEquipLeather => f.write_str("ITEM_ARMOR_EQUIP_LEATHER"),
            SoundEnum::ItemArmorEquipNetherite => f.write_str("ITEM_ARMOR_EQUIP_NETHERITE"),
            SoundEnum::ItemArmorEquipTurtle => f.write_str("ITEM_ARMOR_EQUIP_TURTLE"),
            SoundEnum::ItemAxeScrape => f.write_str("ITEM_AXE_SCRAPE"),
            SoundEnum::ItemAxeStrip => f.write_str("ITEM_AXE_STRIP"),
            SoundEnum::ItemAxeWaxOff => f.write_str("ITEM_AXE_WAX_OFF"),
            SoundEnum::ItemBoneMealUse => f.write_str("ITEM_BONE_MEAL_USE"),
            SoundEnum::ItemBookPageTurn => f.write_str("ITEM_BOOK_PAGE_TURN"),
            SoundEnum::ItemBookPut => f.write_str("ITEM_BOOK_PUT"),
            SoundEnum::ItemBottleEmpty => f.write_str("ITEM_BOTTLE_EMPTY"),
            SoundEnum::ItemBottleFill => f.write_str("ITEM_BOTTLE_FILL"),
            SoundEnum::ItemBottleFillDragonbreath => f.write_str("ITEM_BOTTLE_FILL_DRAGONBREATH"),
            SoundEnum::ItemBrushBrushingGeneric => f.write_str("ITEM_BRUSH_BRUSHING_GENERIC"),
            SoundEnum::ItemBrushBrushingGravel => f.write_str("ITEM_BRUSH_BRUSHING_GRAVEL"),
            SoundEnum::ItemBrushBrushingGravelComplete => {
                f.write_str("ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE")
            }
            SoundEnum::ItemBrushBrushingSand => f.write_str("ITEM_BRUSH_BRUSHING_SAND"),
            SoundEnum::ItemBrushBrushingSandComplete => {
                f.write_str("ITEM_BRUSH_BRUSHING_SAND_COMPLETE")
            }
            SoundEnum::ItemBucketEmpty => f.write_str("ITEM_BUCKET_EMPTY"),
            SoundEnum::ItemBucketEmptyAxolotl => f.write_str("ITEM_BUCKET_EMPTY_AXOLOTL"),
            SoundEnum::ItemBucketEmptyFish => f.write_str("ITEM_BUCKET_EMPTY_FISH"),
            SoundEnum::ItemBucketEmptyLava => f.write_str("ITEM_BUCKET_EMPTY_LAVA"),
            SoundEnum::ItemBucketEmptyPowderSnow => f.write_str("ITEM_BUCKET_EMPTY_POWDER_SNOW"),
            SoundEnum::ItemBucketEmptyTadpole => f.write_str("ITEM_BUCKET_EMPTY_TADPOLE"),
            SoundEnum::ItemBucketFill => f.write_str("ITEM_BUCKET_FILL"),
            SoundEnum::ItemBucketFillAxolotl => f.write_str("ITEM_BUCKET_FILL_AXOLOTL"),
            SoundEnum::ItemBucketFillFish => f.write_str("ITEM_BUCKET_FILL_FISH"),
            SoundEnum::ItemBucketFillLava => f.write_str("ITEM_BUCKET_FILL_LAVA"),
            SoundEnum::ItemBucketFillPowderSnow => f.write_str("ITEM_BUCKET_FILL_POWDER_SNOW"),
            SoundEnum::ItemBucketFillTadpole => f.write_str("ITEM_BUCKET_FILL_TADPOLE"),
            SoundEnum::ItemBundleDropContents => f.write_str("ITEM_BUNDLE_DROP_CONTENTS"),
            SoundEnum::ItemBundleInsert => f.write_str("ITEM_BUNDLE_INSERT"),
            SoundEnum::ItemBundleRemoveOne => f.write_str("ITEM_BUNDLE_REMOVE_ONE"),
            SoundEnum::ItemChorusFruitTeleport => f.write_str("ITEM_CHORUS_FRUIT_TELEPORT"),
            SoundEnum::ItemCropPlant => f.write_str("ITEM_CROP_PLANT"),
            SoundEnum::ItemCrossbowHit => f.write_str("ITEM_CROSSBOW_HIT"),
            SoundEnum::ItemCrossbowLoadingEnd => f.write_str("ITEM_CROSSBOW_LOADING_END"),
            SoundEnum::ItemCrossbowLoadingMiddle => f.write_str("ITEM_CROSSBOW_LOADING_MIDDLE"),
            SoundEnum::ItemCrossbowLoadingStart => f.write_str("ITEM_CROSSBOW_LOADING_START"),
            SoundEnum::ItemCrossbowQuickCharge1 => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_1"),
            SoundEnum::ItemCrossbowQuickCharge2 => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_2"),
            SoundEnum::ItemCrossbowQuickCharge3 => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_3"),
            SoundEnum::ItemCrossbowShoot => f.write_str("ITEM_CROSSBOW_SHOOT"),
            SoundEnum::ItemDyeUse => f.write_str("ITEM_DYE_USE"),
            SoundEnum::ItemElytraFlying => f.write_str("ITEM_ELYTRA_FLYING"),
            SoundEnum::ItemFirechargeUse => f.write_str("ITEM_FIRECHARGE_USE"),
            SoundEnum::ItemFlintandsteelUse => f.write_str("ITEM_FLINTANDSTEEL_USE"),
            SoundEnum::ItemGlowInkSacUse => f.write_str("ITEM_GLOW_INK_SAC_USE"),
            SoundEnum::ItemGoatHornPlay => f.write_str("ITEM_GOAT_HORN_PLAY"),
            SoundEnum::ItemGoatHornSound0 => f.write_str("ITEM_GOAT_HORN_SOUND_0"),
            SoundEnum::ItemGoatHornSound1 => f.write_str("ITEM_GOAT_HORN_SOUND_1"),
            SoundEnum::ItemGoatHornSound2 => f.write_str("ITEM_GOAT_HORN_SOUND_2"),
            SoundEnum::ItemGoatHornSound3 => f.write_str("ITEM_GOAT_HORN_SOUND_3"),
            SoundEnum::ItemGoatHornSound4 => f.write_str("ITEM_GOAT_HORN_SOUND_4"),
            SoundEnum::ItemGoatHornSound5 => f.write_str("ITEM_GOAT_HORN_SOUND_5"),
            SoundEnum::ItemGoatHornSound6 => f.write_str("ITEM_GOAT_HORN_SOUND_6"),
            SoundEnum::ItemGoatHornSound7 => f.write_str("ITEM_GOAT_HORN_SOUND_7"),
            SoundEnum::ItemHoeTill => f.write_str("ITEM_HOE_TILL"),
            SoundEnum::ItemHoneycombWaxOn => f.write_str("ITEM_HONEYCOMB_WAX_ON"),
            SoundEnum::ItemHoneyBottleDrink => f.write_str("ITEM_HONEY_BOTTLE_DRINK"),
            SoundEnum::ItemInkSacUse => f.write_str("ITEM_INK_SAC_USE"),
            SoundEnum::ItemLodestoneCompassLock => f.write_str("ITEM_LODESTONE_COMPASS_LOCK"),
            SoundEnum::ItemNetherWartPlant => f.write_str("ITEM_NETHER_WART_PLANT"),
            SoundEnum::ItemShieldBlock => f.write_str("ITEM_SHIELD_BLOCK"),
            SoundEnum::ItemShieldBreak => f.write_str("ITEM_SHIELD_BREAK"),
            SoundEnum::ItemShovelFlatten => f.write_str("ITEM_SHOVEL_FLATTEN"),
            SoundEnum::ItemSpyglassStopUsing => f.write_str("ITEM_SPYGLASS_STOP_USING"),
            SoundEnum::ItemSpyglassUse => f.write_str("ITEM_SPYGLASS_USE"),
            SoundEnum::ItemTotemUse => f.write_str("ITEM_TOTEM_USE"),
            SoundEnum::ItemTridentHit => f.write_str("ITEM_TRIDENT_HIT"),
            SoundEnum::ItemTridentHitGround => f.write_str("ITEM_TRIDENT_HIT_GROUND"),
            SoundEnum::ItemTridentReturn => f.write_str("ITEM_TRIDENT_RETURN"),
            SoundEnum::ItemTridentRiptide1 => f.write_str("ITEM_TRIDENT_RIPTIDE_1"),
            SoundEnum::ItemTridentRiptide2 => f.write_str("ITEM_TRIDENT_RIPTIDE_2"),
            SoundEnum::ItemTridentRiptide3 => f.write_str("ITEM_TRIDENT_RIPTIDE_3"),
            SoundEnum::ItemTridentThrow => f.write_str("ITEM_TRIDENT_THROW"),
            SoundEnum::ItemTridentThunder => f.write_str("ITEM_TRIDENT_THUNDER"),
            SoundEnum::MusicCreative => f.write_str("MUSIC_CREATIVE"),
            SoundEnum::MusicCredits => f.write_str("MUSIC_CREDITS"),
            SoundEnum::MusicDisc11 => f.write_str("MUSIC_DISC_11"),
            SoundEnum::MusicDisc13 => f.write_str("MUSIC_DISC_13"),
            SoundEnum::MusicDisc5 => f.write_str("MUSIC_DISC_5"),
            SoundEnum::MusicDiscBlocks => f.write_str("MUSIC_DISC_BLOCKS"),
            SoundEnum::MusicDiscCat => f.write_str("MUSIC_DISC_CAT"),
            SoundEnum::MusicDiscChirp => f.write_str("MUSIC_DISC_CHIRP"),
            SoundEnum::MusicDiscFar => f.write_str("MUSIC_DISC_FAR"),
            SoundEnum::MusicDiscMall => f.write_str("MUSIC_DISC_MALL"),
            SoundEnum::MusicDiscMellohi => f.write_str("MUSIC_DISC_MELLOHI"),
            SoundEnum::MusicDiscOtherside => f.write_str("MUSIC_DISC_OTHERSIDE"),
            SoundEnum::MusicDiscPigstep => f.write_str("MUSIC_DISC_PIGSTEP"),
            SoundEnum::MusicDiscRelic => f.write_str("MUSIC_DISC_RELIC"),
            SoundEnum::MusicDiscStal => f.write_str("MUSIC_DISC_STAL"),
            SoundEnum::MusicDiscStrad => f.write_str("MUSIC_DISC_STRAD"),
            SoundEnum::MusicDiscWait => f.write_str("MUSIC_DISC_WAIT"),
            SoundEnum::MusicDiscWard => f.write_str("MUSIC_DISC_WARD"),
            SoundEnum::MusicDragon => f.write_str("MUSIC_DRAGON"),
            SoundEnum::MusicEnd => f.write_str("MUSIC_END"),
            SoundEnum::MusicGame => f.write_str("MUSIC_GAME"),
            SoundEnum::MusicMenu => f.write_str("MUSIC_MENU"),
            SoundEnum::MusicNetherBasaltDeltas => f.write_str("MUSIC_NETHER_BASALT_DELTAS"),
            SoundEnum::MusicNetherCrimsonForest => f.write_str("MUSIC_NETHER_CRIMSON_FOREST"),
            SoundEnum::MusicNetherNetherWastes => f.write_str("MUSIC_NETHER_NETHER_WASTES"),
            SoundEnum::MusicNetherSoulSandValley => f.write_str("MUSIC_NETHER_SOUL_SAND_VALLEY"),
            SoundEnum::MusicNetherWarpedForest => f.write_str("MUSIC_NETHER_WARPED_FOREST"),
            SoundEnum::MusicOverworldBadlands => f.write_str("MUSIC_OVERWORLD_BADLANDS"),
            SoundEnum::MusicOverworldBambooJungle => f.write_str("MUSIC_OVERWORLD_BAMBOO_JUNGLE"),
            SoundEnum::MusicOverworldCherryGrove => f.write_str("MUSIC_OVERWORLD_CHERRY_GROVE"),
            SoundEnum::MusicOverworldDeepDark => f.write_str("MUSIC_OVERWORLD_DEEP_DARK"),
            SoundEnum::MusicOverworldDesert => f.write_str("MUSIC_OVERWORLD_DESERT"),
            SoundEnum::MusicOverworldDripstoneCaves => {
                f.write_str("MUSIC_OVERWORLD_DRIPSTONE_CAVES")
            }
            SoundEnum::MusicOverworldFlowerForest => f.write_str("MUSIC_OVERWORLD_FLOWER_FOREST"),
            SoundEnum::MusicOverworldForest => f.write_str("MUSIC_OVERWORLD_FOREST"),
            SoundEnum::MusicOverworldFrozenPeaks => f.write_str("MUSIC_OVERWORLD_FROZEN_PEAKS"),
            SoundEnum::MusicOverworldGrove => f.write_str("MUSIC_OVERWORLD_GROVE"),
            SoundEnum::MusicOverworldJaggedPeaks => f.write_str("MUSIC_OVERWORLD_JAGGED_PEAKS"),
            SoundEnum::MusicOverworldJungle => f.write_str("MUSIC_OVERWORLD_JUNGLE"),
            SoundEnum::MusicOverworldLushCaves => f.write_str("MUSIC_OVERWORLD_LUSH_CAVES"),
            SoundEnum::MusicOverworldMeadow => f.write_str("MUSIC_OVERWORLD_MEADOW"),
            SoundEnum::MusicOverworldOldGrowthTaiga => {
                f.write_str("MUSIC_OVERWORLD_OLD_GROWTH_TAIGA")
            }
            SoundEnum::MusicOverworldSnowySlopes => f.write_str("MUSIC_OVERWORLD_SNOWY_SLOPES"),
            SoundEnum::MusicOverworldSparseJungle => f.write_str("MUSIC_OVERWORLD_SPARSE_JUNGLE"),
            SoundEnum::MusicOverworldStonyPeaks => f.write_str("MUSIC_OVERWORLD_STONY_PEAKS"),
            SoundEnum::MusicOverworldSwamp => f.write_str("MUSIC_OVERWORLD_SWAMP"),
            SoundEnum::MusicUnderWater => f.write_str("MUSIC_UNDER_WATER"),
            SoundEnum::ParticleSoulEscape => f.write_str("PARTICLE_SOUL_ESCAPE"),
            SoundEnum::UiButtonClick => f.write_str("UI_BUTTON_CLICK"),
            SoundEnum::UiCartographyTableTakeResult => {
                f.write_str("UI_CARTOGRAPHY_TABLE_TAKE_RESULT")
            }
            SoundEnum::UiLoomSelectPattern => f.write_str("UI_LOOM_SELECT_PATTERN"),
            SoundEnum::UiLoomTakeResult => f.write_str("UI_LOOM_TAKE_RESULT"),
            SoundEnum::UiStonecutterSelectRecipe => f.write_str("UI_STONECUTTER_SELECT_RECIPE"),
            SoundEnum::UiStonecutterTakeResult => f.write_str("UI_STONECUTTER_TAKE_RESULT"),
            SoundEnum::UiToastChallengeComplete => f.write_str("UI_TOAST_CHALLENGE_COMPLETE"),
            SoundEnum::UiToastIn => f.write_str("UI_TOAST_IN"),
            SoundEnum::UiToastOut => f.write_str("UI_TOAST_OUT"),
            SoundEnum::WeatherRain => f.write_str("WEATHER_RAIN"),
            SoundEnum::WeatherRainAbove => f.write_str("WEATHER_RAIN_ABOVE"),
        }
    }
}
impl<'mc> std::fmt::Display for Sound<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Sound<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub SoundEnum,
);
impl<'mc> std::ops::Deref for Sound<'mc> {
    type Target = SoundEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for Sound<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Sound<'mc> {
    type Enum = SoundEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Sound from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Sound")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Sound object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Sound<'mc> {
    pub const AMBIENT_BASALT_DELTAS_ADDITIONS: SoundEnum = SoundEnum::AmbientBasaltDeltasAdditions;
    pub const AMBIENT_BASALT_DELTAS_LOOP: SoundEnum = SoundEnum::AmbientBasaltDeltasLoop;
    pub const AMBIENT_BASALT_DELTAS_MOOD: SoundEnum = SoundEnum::AmbientBasaltDeltasMood;
    pub const AMBIENT_CAVE: SoundEnum = SoundEnum::AmbientCave;
    pub const AMBIENT_CRIMSON_FOREST_ADDITIONS: SoundEnum =
        SoundEnum::AmbientCrimsonForestAdditions;
    pub const AMBIENT_CRIMSON_FOREST_LOOP: SoundEnum = SoundEnum::AmbientCrimsonForestLoop;
    pub const AMBIENT_CRIMSON_FOREST_MOOD: SoundEnum = SoundEnum::AmbientCrimsonForestMood;
    pub const AMBIENT_NETHER_WASTES_ADDITIONS: SoundEnum = SoundEnum::AmbientNetherWastesAdditions;
    pub const AMBIENT_NETHER_WASTES_LOOP: SoundEnum = SoundEnum::AmbientNetherWastesLoop;
    pub const AMBIENT_NETHER_WASTES_MOOD: SoundEnum = SoundEnum::AmbientNetherWastesMood;
    pub const AMBIENT_SOUL_SAND_VALLEY_ADDITIONS: SoundEnum =
        SoundEnum::AmbientSoulSandValleyAdditions;
    pub const AMBIENT_SOUL_SAND_VALLEY_LOOP: SoundEnum = SoundEnum::AmbientSoulSandValleyLoop;
    pub const AMBIENT_SOUL_SAND_VALLEY_MOOD: SoundEnum = SoundEnum::AmbientSoulSandValleyMood;
    pub const AMBIENT_UNDERWATER_ENTER: SoundEnum = SoundEnum::AmbientUnderwaterEnter;
    pub const AMBIENT_UNDERWATER_EXIT: SoundEnum = SoundEnum::AmbientUnderwaterExit;
    pub const AMBIENT_UNDERWATER_LOOP: SoundEnum = SoundEnum::AmbientUnderwaterLoop;
    pub const AMBIENT_UNDERWATER_LOOP_ADDITIONS: SoundEnum =
        SoundEnum::AmbientUnderwaterLoopAdditions;
    pub const AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE: SoundEnum =
        SoundEnum::AmbientUnderwaterLoopAdditionsRare;
    pub const AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE: SoundEnum =
        SoundEnum::AmbientUnderwaterLoopAdditionsUltraRare;
    pub const AMBIENT_WARPED_FOREST_ADDITIONS: SoundEnum = SoundEnum::AmbientWarpedForestAdditions;
    pub const AMBIENT_WARPED_FOREST_LOOP: SoundEnum = SoundEnum::AmbientWarpedForestLoop;
    pub const AMBIENT_WARPED_FOREST_MOOD: SoundEnum = SoundEnum::AmbientWarpedForestMood;
    pub const BLOCK_AMETHYST_BLOCK_BREAK: SoundEnum = SoundEnum::BlockAmethystBlockBreak;
    pub const BLOCK_AMETHYST_BLOCK_CHIME: SoundEnum = SoundEnum::BlockAmethystBlockChime;
    pub const BLOCK_AMETHYST_BLOCK_FALL: SoundEnum = SoundEnum::BlockAmethystBlockFall;
    pub const BLOCK_AMETHYST_BLOCK_HIT: SoundEnum = SoundEnum::BlockAmethystBlockHit;
    pub const BLOCK_AMETHYST_BLOCK_PLACE: SoundEnum = SoundEnum::BlockAmethystBlockPlace;
    pub const BLOCK_AMETHYST_BLOCK_RESONATE: SoundEnum = SoundEnum::BlockAmethystBlockResonate;
    pub const BLOCK_AMETHYST_BLOCK_STEP: SoundEnum = SoundEnum::BlockAmethystBlockStep;
    pub const BLOCK_AMETHYST_CLUSTER_BREAK: SoundEnum = SoundEnum::BlockAmethystClusterBreak;
    pub const BLOCK_AMETHYST_CLUSTER_FALL: SoundEnum = SoundEnum::BlockAmethystClusterFall;
    pub const BLOCK_AMETHYST_CLUSTER_HIT: SoundEnum = SoundEnum::BlockAmethystClusterHit;
    pub const BLOCK_AMETHYST_CLUSTER_PLACE: SoundEnum = SoundEnum::BlockAmethystClusterPlace;
    pub const BLOCK_AMETHYST_CLUSTER_STEP: SoundEnum = SoundEnum::BlockAmethystClusterStep;
    pub const BLOCK_ANCIENT_DEBRIS_BREAK: SoundEnum = SoundEnum::BlockAncientDebrisBreak;
    pub const BLOCK_ANCIENT_DEBRIS_FALL: SoundEnum = SoundEnum::BlockAncientDebrisFall;
    pub const BLOCK_ANCIENT_DEBRIS_HIT: SoundEnum = SoundEnum::BlockAncientDebrisHit;
    pub const BLOCK_ANCIENT_DEBRIS_PLACE: SoundEnum = SoundEnum::BlockAncientDebrisPlace;
    pub const BLOCK_ANCIENT_DEBRIS_STEP: SoundEnum = SoundEnum::BlockAncientDebrisStep;
    pub const BLOCK_ANVIL_BREAK: SoundEnum = SoundEnum::BlockAnvilBreak;
    pub const BLOCK_ANVIL_DESTROY: SoundEnum = SoundEnum::BlockAnvilDestroy;
    pub const BLOCK_ANVIL_FALL: SoundEnum = SoundEnum::BlockAnvilFall;
    pub const BLOCK_ANVIL_HIT: SoundEnum = SoundEnum::BlockAnvilHit;
    pub const BLOCK_ANVIL_LAND: SoundEnum = SoundEnum::BlockAnvilLand;
    pub const BLOCK_ANVIL_PLACE: SoundEnum = SoundEnum::BlockAnvilPlace;
    pub const BLOCK_ANVIL_STEP: SoundEnum = SoundEnum::BlockAnvilStep;
    pub const BLOCK_ANVIL_USE: SoundEnum = SoundEnum::BlockAnvilUse;
    pub const BLOCK_AZALEA_BREAK: SoundEnum = SoundEnum::BlockAzaleaBreak;
    pub const BLOCK_AZALEA_FALL: SoundEnum = SoundEnum::BlockAzaleaFall;
    pub const BLOCK_AZALEA_HIT: SoundEnum = SoundEnum::BlockAzaleaHit;
    pub const BLOCK_AZALEA_LEAVES_BREAK: SoundEnum = SoundEnum::BlockAzaleaLeavesBreak;
    pub const BLOCK_AZALEA_LEAVES_FALL: SoundEnum = SoundEnum::BlockAzaleaLeavesFall;
    pub const BLOCK_AZALEA_LEAVES_HIT: SoundEnum = SoundEnum::BlockAzaleaLeavesHit;
    pub const BLOCK_AZALEA_LEAVES_PLACE: SoundEnum = SoundEnum::BlockAzaleaLeavesPlace;
    pub const BLOCK_AZALEA_LEAVES_STEP: SoundEnum = SoundEnum::BlockAzaleaLeavesStep;
    pub const BLOCK_AZALEA_PLACE: SoundEnum = SoundEnum::BlockAzaleaPlace;
    pub const BLOCK_AZALEA_STEP: SoundEnum = SoundEnum::BlockAzaleaStep;
    pub const BLOCK_BAMBOO_BREAK: SoundEnum = SoundEnum::BlockBambooBreak;
    pub const BLOCK_BAMBOO_FALL: SoundEnum = SoundEnum::BlockBambooFall;
    pub const BLOCK_BAMBOO_HIT: SoundEnum = SoundEnum::BlockBambooHit;
    pub const BLOCK_BAMBOO_PLACE: SoundEnum = SoundEnum::BlockBambooPlace;
    pub const BLOCK_BAMBOO_SAPLING_BREAK: SoundEnum = SoundEnum::BlockBambooSaplingBreak;
    pub const BLOCK_BAMBOO_SAPLING_HIT: SoundEnum = SoundEnum::BlockBambooSaplingHit;
    pub const BLOCK_BAMBOO_SAPLING_PLACE: SoundEnum = SoundEnum::BlockBambooSaplingPlace;
    pub const BLOCK_BAMBOO_STEP: SoundEnum = SoundEnum::BlockBambooStep;
    pub const BLOCK_BAMBOO_WOOD_BREAK: SoundEnum = SoundEnum::BlockBambooWoodBreak;
    pub const BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF: SoundEnum =
        SoundEnum::BlockBambooWoodButtonClickOff;
    pub const BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON: SoundEnum =
        SoundEnum::BlockBambooWoodButtonClickOn;
    pub const BLOCK_BAMBOO_WOOD_DOOR_CLOSE: SoundEnum = SoundEnum::BlockBambooWoodDoorClose;
    pub const BLOCK_BAMBOO_WOOD_DOOR_OPEN: SoundEnum = SoundEnum::BlockBambooWoodDoorOpen;
    pub const BLOCK_BAMBOO_WOOD_FALL: SoundEnum = SoundEnum::BlockBambooWoodFall;
    pub const BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE: SoundEnum =
        SoundEnum::BlockBambooWoodFenceGateClose;
    pub const BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN: SoundEnum =
        SoundEnum::BlockBambooWoodFenceGateOpen;
    pub const BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK: SoundEnum =
        SoundEnum::BlockBambooWoodHangingSignBreak;
    pub const BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL: SoundEnum =
        SoundEnum::BlockBambooWoodHangingSignFall;
    pub const BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT: SoundEnum =
        SoundEnum::BlockBambooWoodHangingSignHit;
    pub const BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE: SoundEnum =
        SoundEnum::BlockBambooWoodHangingSignPlace;
    pub const BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP: SoundEnum =
        SoundEnum::BlockBambooWoodHangingSignStep;
    pub const BLOCK_BAMBOO_WOOD_HIT: SoundEnum = SoundEnum::BlockBambooWoodHit;
    pub const BLOCK_BAMBOO_WOOD_PLACE: SoundEnum = SoundEnum::BlockBambooWoodPlace;
    pub const BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF: SoundEnum =
        SoundEnum::BlockBambooWoodPressurePlateClickOff;
    pub const BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON: SoundEnum =
        SoundEnum::BlockBambooWoodPressurePlateClickOn;
    pub const BLOCK_BAMBOO_WOOD_STEP: SoundEnum = SoundEnum::BlockBambooWoodStep;
    pub const BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE: SoundEnum = SoundEnum::BlockBambooWoodTrapdoorClose;
    pub const BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN: SoundEnum = SoundEnum::BlockBambooWoodTrapdoorOpen;
    pub const BLOCK_BARREL_CLOSE: SoundEnum = SoundEnum::BlockBarrelClose;
    pub const BLOCK_BARREL_OPEN: SoundEnum = SoundEnum::BlockBarrelOpen;
    pub const BLOCK_BASALT_BREAK: SoundEnum = SoundEnum::BlockBasaltBreak;
    pub const BLOCK_BASALT_FALL: SoundEnum = SoundEnum::BlockBasaltFall;
    pub const BLOCK_BASALT_HIT: SoundEnum = SoundEnum::BlockBasaltHit;
    pub const BLOCK_BASALT_PLACE: SoundEnum = SoundEnum::BlockBasaltPlace;
    pub const BLOCK_BASALT_STEP: SoundEnum = SoundEnum::BlockBasaltStep;
    pub const BLOCK_BEACON_ACTIVATE: SoundEnum = SoundEnum::BlockBeaconActivate;
    pub const BLOCK_BEACON_AMBIENT: SoundEnum = SoundEnum::BlockBeaconAmbient;
    pub const BLOCK_BEACON_DEACTIVATE: SoundEnum = SoundEnum::BlockBeaconDeactivate;
    pub const BLOCK_BEACON_POWER_SELECT: SoundEnum = SoundEnum::BlockBeaconPowerSelect;
    pub const BLOCK_BEEHIVE_DRIP: SoundEnum = SoundEnum::BlockBeehiveDrip;
    pub const BLOCK_BEEHIVE_ENTER: SoundEnum = SoundEnum::BlockBeehiveEnter;
    pub const BLOCK_BEEHIVE_EXIT: SoundEnum = SoundEnum::BlockBeehiveExit;
    pub const BLOCK_BEEHIVE_SHEAR: SoundEnum = SoundEnum::BlockBeehiveShear;
    pub const BLOCK_BEEHIVE_WORK: SoundEnum = SoundEnum::BlockBeehiveWork;
    pub const BLOCK_BELL_RESONATE: SoundEnum = SoundEnum::BlockBellResonate;
    pub const BLOCK_BELL_USE: SoundEnum = SoundEnum::BlockBellUse;
    pub const BLOCK_BIG_DRIPLEAF_BREAK: SoundEnum = SoundEnum::BlockBigDripleafBreak;
    pub const BLOCK_BIG_DRIPLEAF_FALL: SoundEnum = SoundEnum::BlockBigDripleafFall;
    pub const BLOCK_BIG_DRIPLEAF_HIT: SoundEnum = SoundEnum::BlockBigDripleafHit;
    pub const BLOCK_BIG_DRIPLEAF_PLACE: SoundEnum = SoundEnum::BlockBigDripleafPlace;
    pub const BLOCK_BIG_DRIPLEAF_STEP: SoundEnum = SoundEnum::BlockBigDripleafStep;
    pub const BLOCK_BIG_DRIPLEAF_TILT_DOWN: SoundEnum = SoundEnum::BlockBigDripleafTiltDown;
    pub const BLOCK_BIG_DRIPLEAF_TILT_UP: SoundEnum = SoundEnum::BlockBigDripleafTiltUp;
    pub const BLOCK_BLASTFURNACE_FIRE_CRACKLE: SoundEnum = SoundEnum::BlockBlastfurnaceFireCrackle;
    pub const BLOCK_BONE_BLOCK_BREAK: SoundEnum = SoundEnum::BlockBoneBlockBreak;
    pub const BLOCK_BONE_BLOCK_FALL: SoundEnum = SoundEnum::BlockBoneBlockFall;
    pub const BLOCK_BONE_BLOCK_HIT: SoundEnum = SoundEnum::BlockBoneBlockHit;
    pub const BLOCK_BONE_BLOCK_PLACE: SoundEnum = SoundEnum::BlockBoneBlockPlace;
    pub const BLOCK_BONE_BLOCK_STEP: SoundEnum = SoundEnum::BlockBoneBlockStep;
    pub const BLOCK_BREWING_STAND_BREW: SoundEnum = SoundEnum::BlockBrewingStandBrew;
    pub const BLOCK_BUBBLE_COLUMN_BUBBLE_POP: SoundEnum = SoundEnum::BlockBubbleColumnBubblePop;
    pub const BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT: SoundEnum =
        SoundEnum::BlockBubbleColumnUpwardsAmbient;
    pub const BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE: SoundEnum =
        SoundEnum::BlockBubbleColumnUpwardsInside;
    pub const BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT: SoundEnum =
        SoundEnum::BlockBubbleColumnWhirlpoolAmbient;
    pub const BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE: SoundEnum =
        SoundEnum::BlockBubbleColumnWhirlpoolInside;
    pub const BLOCK_CAKE_ADD_CANDLE: SoundEnum = SoundEnum::BlockCakeAddCandle;
    pub const BLOCK_CALCITE_BREAK: SoundEnum = SoundEnum::BlockCalciteBreak;
    pub const BLOCK_CALCITE_FALL: SoundEnum = SoundEnum::BlockCalciteFall;
    pub const BLOCK_CALCITE_HIT: SoundEnum = SoundEnum::BlockCalciteHit;
    pub const BLOCK_CALCITE_PLACE: SoundEnum = SoundEnum::BlockCalcitePlace;
    pub const BLOCK_CALCITE_STEP: SoundEnum = SoundEnum::BlockCalciteStep;
    pub const BLOCK_CAMPFIRE_CRACKLE: SoundEnum = SoundEnum::BlockCampfireCrackle;
    pub const BLOCK_CANDLE_AMBIENT: SoundEnum = SoundEnum::BlockCandleAmbient;
    pub const BLOCK_CANDLE_BREAK: SoundEnum = SoundEnum::BlockCandleBreak;
    pub const BLOCK_CANDLE_EXTINGUISH: SoundEnum = SoundEnum::BlockCandleExtinguish;
    pub const BLOCK_CANDLE_FALL: SoundEnum = SoundEnum::BlockCandleFall;
    pub const BLOCK_CANDLE_HIT: SoundEnum = SoundEnum::BlockCandleHit;
    pub const BLOCK_CANDLE_PLACE: SoundEnum = SoundEnum::BlockCandlePlace;
    pub const BLOCK_CANDLE_STEP: SoundEnum = SoundEnum::BlockCandleStep;
    pub const BLOCK_CAVE_VINES_BREAK: SoundEnum = SoundEnum::BlockCaveVinesBreak;
    pub const BLOCK_CAVE_VINES_FALL: SoundEnum = SoundEnum::BlockCaveVinesFall;
    pub const BLOCK_CAVE_VINES_HIT: SoundEnum = SoundEnum::BlockCaveVinesHit;
    pub const BLOCK_CAVE_VINES_PICK_BERRIES: SoundEnum = SoundEnum::BlockCaveVinesPickBerries;
    pub const BLOCK_CAVE_VINES_PLACE: SoundEnum = SoundEnum::BlockCaveVinesPlace;
    pub const BLOCK_CAVE_VINES_STEP: SoundEnum = SoundEnum::BlockCaveVinesStep;
    pub const BLOCK_CHAIN_BREAK: SoundEnum = SoundEnum::BlockChainBreak;
    pub const BLOCK_CHAIN_FALL: SoundEnum = SoundEnum::BlockChainFall;
    pub const BLOCK_CHAIN_HIT: SoundEnum = SoundEnum::BlockChainHit;
    pub const BLOCK_CHAIN_PLACE: SoundEnum = SoundEnum::BlockChainPlace;
    pub const BLOCK_CHAIN_STEP: SoundEnum = SoundEnum::BlockChainStep;
    pub const BLOCK_CHERRY_LEAVES_BREAK: SoundEnum = SoundEnum::BlockCherryLeavesBreak;
    pub const BLOCK_CHERRY_LEAVES_FALL: SoundEnum = SoundEnum::BlockCherryLeavesFall;
    pub const BLOCK_CHERRY_LEAVES_HIT: SoundEnum = SoundEnum::BlockCherryLeavesHit;
    pub const BLOCK_CHERRY_LEAVES_PLACE: SoundEnum = SoundEnum::BlockCherryLeavesPlace;
    pub const BLOCK_CHERRY_LEAVES_STEP: SoundEnum = SoundEnum::BlockCherryLeavesStep;
    pub const BLOCK_CHERRY_SAPLING_BREAK: SoundEnum = SoundEnum::BlockCherrySaplingBreak;
    pub const BLOCK_CHERRY_SAPLING_FALL: SoundEnum = SoundEnum::BlockCherrySaplingFall;
    pub const BLOCK_CHERRY_SAPLING_HIT: SoundEnum = SoundEnum::BlockCherrySaplingHit;
    pub const BLOCK_CHERRY_SAPLING_PLACE: SoundEnum = SoundEnum::BlockCherrySaplingPlace;
    pub const BLOCK_CHERRY_SAPLING_STEP: SoundEnum = SoundEnum::BlockCherrySaplingStep;
    pub const BLOCK_CHERRY_WOOD_BREAK: SoundEnum = SoundEnum::BlockCherryWoodBreak;
    pub const BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF: SoundEnum =
        SoundEnum::BlockCherryWoodButtonClickOff;
    pub const BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON: SoundEnum =
        SoundEnum::BlockCherryWoodButtonClickOn;
    pub const BLOCK_CHERRY_WOOD_DOOR_CLOSE: SoundEnum = SoundEnum::BlockCherryWoodDoorClose;
    pub const BLOCK_CHERRY_WOOD_DOOR_OPEN: SoundEnum = SoundEnum::BlockCherryWoodDoorOpen;
    pub const BLOCK_CHERRY_WOOD_FALL: SoundEnum = SoundEnum::BlockCherryWoodFall;
    pub const BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE: SoundEnum =
        SoundEnum::BlockCherryWoodFenceGateClose;
    pub const BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN: SoundEnum =
        SoundEnum::BlockCherryWoodFenceGateOpen;
    pub const BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK: SoundEnum =
        SoundEnum::BlockCherryWoodHangingSignBreak;
    pub const BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL: SoundEnum =
        SoundEnum::BlockCherryWoodHangingSignFall;
    pub const BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT: SoundEnum =
        SoundEnum::BlockCherryWoodHangingSignHit;
    pub const BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE: SoundEnum =
        SoundEnum::BlockCherryWoodHangingSignPlace;
    pub const BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP: SoundEnum =
        SoundEnum::BlockCherryWoodHangingSignStep;
    pub const BLOCK_CHERRY_WOOD_HIT: SoundEnum = SoundEnum::BlockCherryWoodHit;
    pub const BLOCK_CHERRY_WOOD_PLACE: SoundEnum = SoundEnum::BlockCherryWoodPlace;
    pub const BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF: SoundEnum =
        SoundEnum::BlockCherryWoodPressurePlateClickOff;
    pub const BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON: SoundEnum =
        SoundEnum::BlockCherryWoodPressurePlateClickOn;
    pub const BLOCK_CHERRY_WOOD_STEP: SoundEnum = SoundEnum::BlockCherryWoodStep;
    pub const BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE: SoundEnum = SoundEnum::BlockCherryWoodTrapdoorClose;
    pub const BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN: SoundEnum = SoundEnum::BlockCherryWoodTrapdoorOpen;
    pub const BLOCK_CHEST_CLOSE: SoundEnum = SoundEnum::BlockChestClose;
    pub const BLOCK_CHEST_LOCKED: SoundEnum = SoundEnum::BlockChestLocked;
    pub const BLOCK_CHEST_OPEN: SoundEnum = SoundEnum::BlockChestOpen;
    pub const BLOCK_CHISELED_BOOKSHELF_BREAK: SoundEnum = SoundEnum::BlockChiseledBookshelfBreak;
    pub const BLOCK_CHISELED_BOOKSHELF_FALL: SoundEnum = SoundEnum::BlockChiseledBookshelfFall;
    pub const BLOCK_CHISELED_BOOKSHELF_HIT: SoundEnum = SoundEnum::BlockChiseledBookshelfHit;
    pub const BLOCK_CHISELED_BOOKSHELF_INSERT: SoundEnum = SoundEnum::BlockChiseledBookshelfInsert;
    pub const BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED: SoundEnum =
        SoundEnum::BlockChiseledBookshelfInsertEnchanted;
    pub const BLOCK_CHISELED_BOOKSHELF_PICKUP: SoundEnum = SoundEnum::BlockChiseledBookshelfPickup;
    pub const BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED: SoundEnum =
        SoundEnum::BlockChiseledBookshelfPickupEnchanted;
    pub const BLOCK_CHISELED_BOOKSHELF_PLACE: SoundEnum = SoundEnum::BlockChiseledBookshelfPlace;
    pub const BLOCK_CHISELED_BOOKSHELF_STEP: SoundEnum = SoundEnum::BlockChiseledBookshelfStep;
    pub const BLOCK_CHORUS_FLOWER_DEATH: SoundEnum = SoundEnum::BlockChorusFlowerDeath;
    pub const BLOCK_CHORUS_FLOWER_GROW: SoundEnum = SoundEnum::BlockChorusFlowerGrow;
    pub const BLOCK_COMPARATOR_CLICK: SoundEnum = SoundEnum::BlockComparatorClick;
    pub const BLOCK_COMPOSTER_EMPTY: SoundEnum = SoundEnum::BlockComposterEmpty;
    pub const BLOCK_COMPOSTER_FILL: SoundEnum = SoundEnum::BlockComposterFill;
    pub const BLOCK_COMPOSTER_FILL_SUCCESS: SoundEnum = SoundEnum::BlockComposterFillSuccess;
    pub const BLOCK_COMPOSTER_READY: SoundEnum = SoundEnum::BlockComposterReady;
    pub const BLOCK_CONDUIT_ACTIVATE: SoundEnum = SoundEnum::BlockConduitActivate;
    pub const BLOCK_CONDUIT_AMBIENT: SoundEnum = SoundEnum::BlockConduitAmbient;
    pub const BLOCK_CONDUIT_AMBIENT_SHORT: SoundEnum = SoundEnum::BlockConduitAmbientShort;
    pub const BLOCK_CONDUIT_ATTACK_TARGET: SoundEnum = SoundEnum::BlockConduitAttackTarget;
    pub const BLOCK_CONDUIT_DEACTIVATE: SoundEnum = SoundEnum::BlockConduitDeactivate;
    pub const BLOCK_COPPER_BREAK: SoundEnum = SoundEnum::BlockCopperBreak;
    pub const BLOCK_COPPER_FALL: SoundEnum = SoundEnum::BlockCopperFall;
    pub const BLOCK_COPPER_HIT: SoundEnum = SoundEnum::BlockCopperHit;
    pub const BLOCK_COPPER_PLACE: SoundEnum = SoundEnum::BlockCopperPlace;
    pub const BLOCK_COPPER_STEP: SoundEnum = SoundEnum::BlockCopperStep;
    pub const BLOCK_CORAL_BLOCK_BREAK: SoundEnum = SoundEnum::BlockCoralBlockBreak;
    pub const BLOCK_CORAL_BLOCK_FALL: SoundEnum = SoundEnum::BlockCoralBlockFall;
    pub const BLOCK_CORAL_BLOCK_HIT: SoundEnum = SoundEnum::BlockCoralBlockHit;
    pub const BLOCK_CORAL_BLOCK_PLACE: SoundEnum = SoundEnum::BlockCoralBlockPlace;
    pub const BLOCK_CORAL_BLOCK_STEP: SoundEnum = SoundEnum::BlockCoralBlockStep;
    pub const BLOCK_CROP_BREAK: SoundEnum = SoundEnum::BlockCropBreak;
    pub const BLOCK_DECORATED_POT_BREAK: SoundEnum = SoundEnum::BlockDecoratedPotBreak;
    pub const BLOCK_DECORATED_POT_FALL: SoundEnum = SoundEnum::BlockDecoratedPotFall;
    pub const BLOCK_DECORATED_POT_HIT: SoundEnum = SoundEnum::BlockDecoratedPotHit;
    pub const BLOCK_DECORATED_POT_PLACE: SoundEnum = SoundEnum::BlockDecoratedPotPlace;
    pub const BLOCK_DECORATED_POT_SHATTER: SoundEnum = SoundEnum::BlockDecoratedPotShatter;
    pub const BLOCK_DECORATED_POT_STEP: SoundEnum = SoundEnum::BlockDecoratedPotStep;
    pub const BLOCK_DEEPSLATE_BREAK: SoundEnum = SoundEnum::BlockDeepslateBreak;
    pub const BLOCK_DEEPSLATE_BRICKS_BREAK: SoundEnum = SoundEnum::BlockDeepslateBricksBreak;
    pub const BLOCK_DEEPSLATE_BRICKS_FALL: SoundEnum = SoundEnum::BlockDeepslateBricksFall;
    pub const BLOCK_DEEPSLATE_BRICKS_HIT: SoundEnum = SoundEnum::BlockDeepslateBricksHit;
    pub const BLOCK_DEEPSLATE_BRICKS_PLACE: SoundEnum = SoundEnum::BlockDeepslateBricksPlace;
    pub const BLOCK_DEEPSLATE_BRICKS_STEP: SoundEnum = SoundEnum::BlockDeepslateBricksStep;
    pub const BLOCK_DEEPSLATE_FALL: SoundEnum = SoundEnum::BlockDeepslateFall;
    pub const BLOCK_DEEPSLATE_HIT: SoundEnum = SoundEnum::BlockDeepslateHit;
    pub const BLOCK_DEEPSLATE_PLACE: SoundEnum = SoundEnum::BlockDeepslatePlace;
    pub const BLOCK_DEEPSLATE_STEP: SoundEnum = SoundEnum::BlockDeepslateStep;
    pub const BLOCK_DEEPSLATE_TILES_BREAK: SoundEnum = SoundEnum::BlockDeepslateTilesBreak;
    pub const BLOCK_DEEPSLATE_TILES_FALL: SoundEnum = SoundEnum::BlockDeepslateTilesFall;
    pub const BLOCK_DEEPSLATE_TILES_HIT: SoundEnum = SoundEnum::BlockDeepslateTilesHit;
    pub const BLOCK_DEEPSLATE_TILES_PLACE: SoundEnum = SoundEnum::BlockDeepslateTilesPlace;
    pub const BLOCK_DEEPSLATE_TILES_STEP: SoundEnum = SoundEnum::BlockDeepslateTilesStep;
    pub const BLOCK_DISPENSER_DISPENSE: SoundEnum = SoundEnum::BlockDispenserDispense;
    pub const BLOCK_DISPENSER_FAIL: SoundEnum = SoundEnum::BlockDispenserFail;
    pub const BLOCK_DISPENSER_LAUNCH: SoundEnum = SoundEnum::BlockDispenserLaunch;
    pub const BLOCK_DRIPSTONE_BLOCK_BREAK: SoundEnum = SoundEnum::BlockDripstoneBlockBreak;
    pub const BLOCK_DRIPSTONE_BLOCK_FALL: SoundEnum = SoundEnum::BlockDripstoneBlockFall;
    pub const BLOCK_DRIPSTONE_BLOCK_HIT: SoundEnum = SoundEnum::BlockDripstoneBlockHit;
    pub const BLOCK_DRIPSTONE_BLOCK_PLACE: SoundEnum = SoundEnum::BlockDripstoneBlockPlace;
    pub const BLOCK_DRIPSTONE_BLOCK_STEP: SoundEnum = SoundEnum::BlockDripstoneBlockStep;
    pub const BLOCK_ENCHANTMENT_TABLE_USE: SoundEnum = SoundEnum::BlockEnchantmentTableUse;
    pub const BLOCK_ENDER_CHEST_CLOSE: SoundEnum = SoundEnum::BlockEnderChestClose;
    pub const BLOCK_ENDER_CHEST_OPEN: SoundEnum = SoundEnum::BlockEnderChestOpen;
    pub const BLOCK_END_GATEWAY_SPAWN: SoundEnum = SoundEnum::BlockEndGatewaySpawn;
    pub const BLOCK_END_PORTAL_FRAME_FILL: SoundEnum = SoundEnum::BlockEndPortalFrameFill;
    pub const BLOCK_END_PORTAL_SPAWN: SoundEnum = SoundEnum::BlockEndPortalSpawn;
    pub const BLOCK_FENCE_GATE_CLOSE: SoundEnum = SoundEnum::BlockFenceGateClose;
    pub const BLOCK_FENCE_GATE_OPEN: SoundEnum = SoundEnum::BlockFenceGateOpen;
    pub const BLOCK_FIRE_AMBIENT: SoundEnum = SoundEnum::BlockFireAmbient;
    pub const BLOCK_FIRE_EXTINGUISH: SoundEnum = SoundEnum::BlockFireExtinguish;
    pub const BLOCK_FLOWERING_AZALEA_BREAK: SoundEnum = SoundEnum::BlockFloweringAzaleaBreak;
    pub const BLOCK_FLOWERING_AZALEA_FALL: SoundEnum = SoundEnum::BlockFloweringAzaleaFall;
    pub const BLOCK_FLOWERING_AZALEA_HIT: SoundEnum = SoundEnum::BlockFloweringAzaleaHit;
    pub const BLOCK_FLOWERING_AZALEA_PLACE: SoundEnum = SoundEnum::BlockFloweringAzaleaPlace;
    pub const BLOCK_FLOWERING_AZALEA_STEP: SoundEnum = SoundEnum::BlockFloweringAzaleaStep;
    pub const BLOCK_FROGLIGHT_BREAK: SoundEnum = SoundEnum::BlockFroglightBreak;
    pub const BLOCK_FROGLIGHT_FALL: SoundEnum = SoundEnum::BlockFroglightFall;
    pub const BLOCK_FROGLIGHT_HIT: SoundEnum = SoundEnum::BlockFroglightHit;
    pub const BLOCK_FROGLIGHT_PLACE: SoundEnum = SoundEnum::BlockFroglightPlace;
    pub const BLOCK_FROGLIGHT_STEP: SoundEnum = SoundEnum::BlockFroglightStep;
    pub const BLOCK_FROGSPAWN_BREAK: SoundEnum = SoundEnum::BlockFrogspawnBreak;
    pub const BLOCK_FROGSPAWN_FALL: SoundEnum = SoundEnum::BlockFrogspawnFall;
    pub const BLOCK_FROGSPAWN_HATCH: SoundEnum = SoundEnum::BlockFrogspawnHatch;
    pub const BLOCK_FROGSPAWN_HIT: SoundEnum = SoundEnum::BlockFrogspawnHit;
    pub const BLOCK_FROGSPAWN_PLACE: SoundEnum = SoundEnum::BlockFrogspawnPlace;
    pub const BLOCK_FROGSPAWN_STEP: SoundEnum = SoundEnum::BlockFrogspawnStep;
    pub const BLOCK_FUNGUS_BREAK: SoundEnum = SoundEnum::BlockFungusBreak;
    pub const BLOCK_FUNGUS_FALL: SoundEnum = SoundEnum::BlockFungusFall;
    pub const BLOCK_FUNGUS_HIT: SoundEnum = SoundEnum::BlockFungusHit;
    pub const BLOCK_FUNGUS_PLACE: SoundEnum = SoundEnum::BlockFungusPlace;
    pub const BLOCK_FUNGUS_STEP: SoundEnum = SoundEnum::BlockFungusStep;
    pub const BLOCK_FURNACE_FIRE_CRACKLE: SoundEnum = SoundEnum::BlockFurnaceFireCrackle;
    pub const BLOCK_GILDED_BLACKSTONE_BREAK: SoundEnum = SoundEnum::BlockGildedBlackstoneBreak;
    pub const BLOCK_GILDED_BLACKSTONE_FALL: SoundEnum = SoundEnum::BlockGildedBlackstoneFall;
    pub const BLOCK_GILDED_BLACKSTONE_HIT: SoundEnum = SoundEnum::BlockGildedBlackstoneHit;
    pub const BLOCK_GILDED_BLACKSTONE_PLACE: SoundEnum = SoundEnum::BlockGildedBlackstonePlace;
    pub const BLOCK_GILDED_BLACKSTONE_STEP: SoundEnum = SoundEnum::BlockGildedBlackstoneStep;
    pub const BLOCK_GLASS_BREAK: SoundEnum = SoundEnum::BlockGlassBreak;
    pub const BLOCK_GLASS_FALL: SoundEnum = SoundEnum::BlockGlassFall;
    pub const BLOCK_GLASS_HIT: SoundEnum = SoundEnum::BlockGlassHit;
    pub const BLOCK_GLASS_PLACE: SoundEnum = SoundEnum::BlockGlassPlace;
    pub const BLOCK_GLASS_STEP: SoundEnum = SoundEnum::BlockGlassStep;
    pub const BLOCK_GRASS_BREAK: SoundEnum = SoundEnum::BlockGrassBreak;
    pub const BLOCK_GRASS_FALL: SoundEnum = SoundEnum::BlockGrassFall;
    pub const BLOCK_GRASS_HIT: SoundEnum = SoundEnum::BlockGrassHit;
    pub const BLOCK_GRASS_PLACE: SoundEnum = SoundEnum::BlockGrassPlace;
    pub const BLOCK_GRASS_STEP: SoundEnum = SoundEnum::BlockGrassStep;
    pub const BLOCK_GRAVEL_BREAK: SoundEnum = SoundEnum::BlockGravelBreak;
    pub const BLOCK_GRAVEL_FALL: SoundEnum = SoundEnum::BlockGravelFall;
    pub const BLOCK_GRAVEL_HIT: SoundEnum = SoundEnum::BlockGravelHit;
    pub const BLOCK_GRAVEL_PLACE: SoundEnum = SoundEnum::BlockGravelPlace;
    pub const BLOCK_GRAVEL_STEP: SoundEnum = SoundEnum::BlockGravelStep;
    pub const BLOCK_GRINDSTONE_USE: SoundEnum = SoundEnum::BlockGrindstoneUse;
    pub const BLOCK_GROWING_PLANT_CROP: SoundEnum = SoundEnum::BlockGrowingPlantCrop;
    pub const BLOCK_HANGING_ROOTS_BREAK: SoundEnum = SoundEnum::BlockHangingRootsBreak;
    pub const BLOCK_HANGING_ROOTS_FALL: SoundEnum = SoundEnum::BlockHangingRootsFall;
    pub const BLOCK_HANGING_ROOTS_HIT: SoundEnum = SoundEnum::BlockHangingRootsHit;
    pub const BLOCK_HANGING_ROOTS_PLACE: SoundEnum = SoundEnum::BlockHangingRootsPlace;
    pub const BLOCK_HANGING_ROOTS_STEP: SoundEnum = SoundEnum::BlockHangingRootsStep;
    pub const BLOCK_HANGING_SIGN_BREAK: SoundEnum = SoundEnum::BlockHangingSignBreak;
    pub const BLOCK_HANGING_SIGN_FALL: SoundEnum = SoundEnum::BlockHangingSignFall;
    pub const BLOCK_HANGING_SIGN_HIT: SoundEnum = SoundEnum::BlockHangingSignHit;
    pub const BLOCK_HANGING_SIGN_PLACE: SoundEnum = SoundEnum::BlockHangingSignPlace;
    pub const BLOCK_HANGING_SIGN_STEP: SoundEnum = SoundEnum::BlockHangingSignStep;
    pub const BLOCK_HONEY_BLOCK_BREAK: SoundEnum = SoundEnum::BlockHoneyBlockBreak;
    pub const BLOCK_HONEY_BLOCK_FALL: SoundEnum = SoundEnum::BlockHoneyBlockFall;
    pub const BLOCK_HONEY_BLOCK_HIT: SoundEnum = SoundEnum::BlockHoneyBlockHit;
    pub const BLOCK_HONEY_BLOCK_PLACE: SoundEnum = SoundEnum::BlockHoneyBlockPlace;
    pub const BLOCK_HONEY_BLOCK_SLIDE: SoundEnum = SoundEnum::BlockHoneyBlockSlide;
    pub const BLOCK_HONEY_BLOCK_STEP: SoundEnum = SoundEnum::BlockHoneyBlockStep;
    pub const BLOCK_IRON_DOOR_CLOSE: SoundEnum = SoundEnum::BlockIronDoorClose;
    pub const BLOCK_IRON_DOOR_OPEN: SoundEnum = SoundEnum::BlockIronDoorOpen;
    pub const BLOCK_IRON_TRAPDOOR_CLOSE: SoundEnum = SoundEnum::BlockIronTrapdoorClose;
    pub const BLOCK_IRON_TRAPDOOR_OPEN: SoundEnum = SoundEnum::BlockIronTrapdoorOpen;
    pub const BLOCK_LADDER_BREAK: SoundEnum = SoundEnum::BlockLadderBreak;
    pub const BLOCK_LADDER_FALL: SoundEnum = SoundEnum::BlockLadderFall;
    pub const BLOCK_LADDER_HIT: SoundEnum = SoundEnum::BlockLadderHit;
    pub const BLOCK_LADDER_PLACE: SoundEnum = SoundEnum::BlockLadderPlace;
    pub const BLOCK_LADDER_STEP: SoundEnum = SoundEnum::BlockLadderStep;
    pub const BLOCK_LANTERN_BREAK: SoundEnum = SoundEnum::BlockLanternBreak;
    pub const BLOCK_LANTERN_FALL: SoundEnum = SoundEnum::BlockLanternFall;
    pub const BLOCK_LANTERN_HIT: SoundEnum = SoundEnum::BlockLanternHit;
    pub const BLOCK_LANTERN_PLACE: SoundEnum = SoundEnum::BlockLanternPlace;
    pub const BLOCK_LANTERN_STEP: SoundEnum = SoundEnum::BlockLanternStep;
    pub const BLOCK_LARGE_AMETHYST_BUD_BREAK: SoundEnum = SoundEnum::BlockLargeAmethystBudBreak;
    pub const BLOCK_LARGE_AMETHYST_BUD_PLACE: SoundEnum = SoundEnum::BlockLargeAmethystBudPlace;
    pub const BLOCK_LAVA_AMBIENT: SoundEnum = SoundEnum::BlockLavaAmbient;
    pub const BLOCK_LAVA_EXTINGUISH: SoundEnum = SoundEnum::BlockLavaExtinguish;
    pub const BLOCK_LAVA_POP: SoundEnum = SoundEnum::BlockLavaPop;
    pub const BLOCK_LEVER_CLICK: SoundEnum = SoundEnum::BlockLeverClick;
    pub const BLOCK_LILY_PAD_PLACE: SoundEnum = SoundEnum::BlockLilyPadPlace;
    pub const BLOCK_LODESTONE_BREAK: SoundEnum = SoundEnum::BlockLodestoneBreak;
    pub const BLOCK_LODESTONE_FALL: SoundEnum = SoundEnum::BlockLodestoneFall;
    pub const BLOCK_LODESTONE_HIT: SoundEnum = SoundEnum::BlockLodestoneHit;
    pub const BLOCK_LODESTONE_PLACE: SoundEnum = SoundEnum::BlockLodestonePlace;
    pub const BLOCK_LODESTONE_STEP: SoundEnum = SoundEnum::BlockLodestoneStep;
    pub const BLOCK_MANGROVE_ROOTS_BREAK: SoundEnum = SoundEnum::BlockMangroveRootsBreak;
    pub const BLOCK_MANGROVE_ROOTS_FALL: SoundEnum = SoundEnum::BlockMangroveRootsFall;
    pub const BLOCK_MANGROVE_ROOTS_HIT: SoundEnum = SoundEnum::BlockMangroveRootsHit;
    pub const BLOCK_MANGROVE_ROOTS_PLACE: SoundEnum = SoundEnum::BlockMangroveRootsPlace;
    pub const BLOCK_MANGROVE_ROOTS_STEP: SoundEnum = SoundEnum::BlockMangroveRootsStep;
    pub const BLOCK_MEDIUM_AMETHYST_BUD_BREAK: SoundEnum = SoundEnum::BlockMediumAmethystBudBreak;
    pub const BLOCK_MEDIUM_AMETHYST_BUD_PLACE: SoundEnum = SoundEnum::BlockMediumAmethystBudPlace;
    pub const BLOCK_METAL_BREAK: SoundEnum = SoundEnum::BlockMetalBreak;
    pub const BLOCK_METAL_FALL: SoundEnum = SoundEnum::BlockMetalFall;
    pub const BLOCK_METAL_HIT: SoundEnum = SoundEnum::BlockMetalHit;
    pub const BLOCK_METAL_PLACE: SoundEnum = SoundEnum::BlockMetalPlace;
    pub const BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF: SoundEnum =
        SoundEnum::BlockMetalPressurePlateClickOff;
    pub const BLOCK_METAL_PRESSURE_PLATE_CLICK_ON: SoundEnum =
        SoundEnum::BlockMetalPressurePlateClickOn;
    pub const BLOCK_METAL_STEP: SoundEnum = SoundEnum::BlockMetalStep;
    pub const BLOCK_MOSS_BREAK: SoundEnum = SoundEnum::BlockMossBreak;
    pub const BLOCK_MOSS_CARPET_BREAK: SoundEnum = SoundEnum::BlockMossCarpetBreak;
    pub const BLOCK_MOSS_CARPET_FALL: SoundEnum = SoundEnum::BlockMossCarpetFall;
    pub const BLOCK_MOSS_CARPET_HIT: SoundEnum = SoundEnum::BlockMossCarpetHit;
    pub const BLOCK_MOSS_CARPET_PLACE: SoundEnum = SoundEnum::BlockMossCarpetPlace;
    pub const BLOCK_MOSS_CARPET_STEP: SoundEnum = SoundEnum::BlockMossCarpetStep;
    pub const BLOCK_MOSS_FALL: SoundEnum = SoundEnum::BlockMossFall;
    pub const BLOCK_MOSS_HIT: SoundEnum = SoundEnum::BlockMossHit;
    pub const BLOCK_MOSS_PLACE: SoundEnum = SoundEnum::BlockMossPlace;
    pub const BLOCK_MOSS_STEP: SoundEnum = SoundEnum::BlockMossStep;
    pub const BLOCK_MUDDY_MANGROVE_ROOTS_BREAK: SoundEnum = SoundEnum::BlockMuddyMangroveRootsBreak;
    pub const BLOCK_MUDDY_MANGROVE_ROOTS_FALL: SoundEnum = SoundEnum::BlockMuddyMangroveRootsFall;
    pub const BLOCK_MUDDY_MANGROVE_ROOTS_HIT: SoundEnum = SoundEnum::BlockMuddyMangroveRootsHit;
    pub const BLOCK_MUDDY_MANGROVE_ROOTS_PLACE: SoundEnum = SoundEnum::BlockMuddyMangroveRootsPlace;
    pub const BLOCK_MUDDY_MANGROVE_ROOTS_STEP: SoundEnum = SoundEnum::BlockMuddyMangroveRootsStep;
    pub const BLOCK_MUD_BREAK: SoundEnum = SoundEnum::BlockMudBreak;
    pub const BLOCK_MUD_BRICKS_BREAK: SoundEnum = SoundEnum::BlockMudBricksBreak;
    pub const BLOCK_MUD_BRICKS_FALL: SoundEnum = SoundEnum::BlockMudBricksFall;
    pub const BLOCK_MUD_BRICKS_HIT: SoundEnum = SoundEnum::BlockMudBricksHit;
    pub const BLOCK_MUD_BRICKS_PLACE: SoundEnum = SoundEnum::BlockMudBricksPlace;
    pub const BLOCK_MUD_BRICKS_STEP: SoundEnum = SoundEnum::BlockMudBricksStep;
    pub const BLOCK_MUD_FALL: SoundEnum = SoundEnum::BlockMudFall;
    pub const BLOCK_MUD_HIT: SoundEnum = SoundEnum::BlockMudHit;
    pub const BLOCK_MUD_PLACE: SoundEnum = SoundEnum::BlockMudPlace;
    pub const BLOCK_MUD_STEP: SoundEnum = SoundEnum::BlockMudStep;
    pub const BLOCK_NETHERITE_BLOCK_BREAK: SoundEnum = SoundEnum::BlockNetheriteBlockBreak;
    pub const BLOCK_NETHERITE_BLOCK_FALL: SoundEnum = SoundEnum::BlockNetheriteBlockFall;
    pub const BLOCK_NETHERITE_BLOCK_HIT: SoundEnum = SoundEnum::BlockNetheriteBlockHit;
    pub const BLOCK_NETHERITE_BLOCK_PLACE: SoundEnum = SoundEnum::BlockNetheriteBlockPlace;
    pub const BLOCK_NETHERITE_BLOCK_STEP: SoundEnum = SoundEnum::BlockNetheriteBlockStep;
    pub const BLOCK_NETHERRACK_BREAK: SoundEnum = SoundEnum::BlockNetherrackBreak;
    pub const BLOCK_NETHERRACK_FALL: SoundEnum = SoundEnum::BlockNetherrackFall;
    pub const BLOCK_NETHERRACK_HIT: SoundEnum = SoundEnum::BlockNetherrackHit;
    pub const BLOCK_NETHERRACK_PLACE: SoundEnum = SoundEnum::BlockNetherrackPlace;
    pub const BLOCK_NETHERRACK_STEP: SoundEnum = SoundEnum::BlockNetherrackStep;
    pub const BLOCK_NETHER_BRICKS_BREAK: SoundEnum = SoundEnum::BlockNetherBricksBreak;
    pub const BLOCK_NETHER_BRICKS_FALL: SoundEnum = SoundEnum::BlockNetherBricksFall;
    pub const BLOCK_NETHER_BRICKS_HIT: SoundEnum = SoundEnum::BlockNetherBricksHit;
    pub const BLOCK_NETHER_BRICKS_PLACE: SoundEnum = SoundEnum::BlockNetherBricksPlace;
    pub const BLOCK_NETHER_BRICKS_STEP: SoundEnum = SoundEnum::BlockNetherBricksStep;
    pub const BLOCK_NETHER_GOLD_ORE_BREAK: SoundEnum = SoundEnum::BlockNetherGoldOreBreak;
    pub const BLOCK_NETHER_GOLD_ORE_FALL: SoundEnum = SoundEnum::BlockNetherGoldOreFall;
    pub const BLOCK_NETHER_GOLD_ORE_HIT: SoundEnum = SoundEnum::BlockNetherGoldOreHit;
    pub const BLOCK_NETHER_GOLD_ORE_PLACE: SoundEnum = SoundEnum::BlockNetherGoldOrePlace;
    pub const BLOCK_NETHER_GOLD_ORE_STEP: SoundEnum = SoundEnum::BlockNetherGoldOreStep;
    pub const BLOCK_NETHER_ORE_BREAK: SoundEnum = SoundEnum::BlockNetherOreBreak;
    pub const BLOCK_NETHER_ORE_FALL: SoundEnum = SoundEnum::BlockNetherOreFall;
    pub const BLOCK_NETHER_ORE_HIT: SoundEnum = SoundEnum::BlockNetherOreHit;
    pub const BLOCK_NETHER_ORE_PLACE: SoundEnum = SoundEnum::BlockNetherOrePlace;
    pub const BLOCK_NETHER_ORE_STEP: SoundEnum = SoundEnum::BlockNetherOreStep;
    pub const BLOCK_NETHER_SPROUTS_BREAK: SoundEnum = SoundEnum::BlockNetherSproutsBreak;
    pub const BLOCK_NETHER_SPROUTS_FALL: SoundEnum = SoundEnum::BlockNetherSproutsFall;
    pub const BLOCK_NETHER_SPROUTS_HIT: SoundEnum = SoundEnum::BlockNetherSproutsHit;
    pub const BLOCK_NETHER_SPROUTS_PLACE: SoundEnum = SoundEnum::BlockNetherSproutsPlace;
    pub const BLOCK_NETHER_SPROUTS_STEP: SoundEnum = SoundEnum::BlockNetherSproutsStep;
    pub const BLOCK_NETHER_WART_BREAK: SoundEnum = SoundEnum::BlockNetherWartBreak;
    pub const BLOCK_NETHER_WOOD_BREAK: SoundEnum = SoundEnum::BlockNetherWoodBreak;
    pub const BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF: SoundEnum =
        SoundEnum::BlockNetherWoodButtonClickOff;
    pub const BLOCK_NETHER_WOOD_BUTTON_CLICK_ON: SoundEnum =
        SoundEnum::BlockNetherWoodButtonClickOn;
    pub const BLOCK_NETHER_WOOD_DOOR_CLOSE: SoundEnum = SoundEnum::BlockNetherWoodDoorClose;
    pub const BLOCK_NETHER_WOOD_DOOR_OPEN: SoundEnum = SoundEnum::BlockNetherWoodDoorOpen;
    pub const BLOCK_NETHER_WOOD_FALL: SoundEnum = SoundEnum::BlockNetherWoodFall;
    pub const BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE: SoundEnum =
        SoundEnum::BlockNetherWoodFenceGateClose;
    pub const BLOCK_NETHER_WOOD_FENCE_GATE_OPEN: SoundEnum =
        SoundEnum::BlockNetherWoodFenceGateOpen;
    pub const BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK: SoundEnum =
        SoundEnum::BlockNetherWoodHangingSignBreak;
    pub const BLOCK_NETHER_WOOD_HANGING_SIGN_FALL: SoundEnum =
        SoundEnum::BlockNetherWoodHangingSignFall;
    pub const BLOCK_NETHER_WOOD_HANGING_SIGN_HIT: SoundEnum =
        SoundEnum::BlockNetherWoodHangingSignHit;
    pub const BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE: SoundEnum =
        SoundEnum::BlockNetherWoodHangingSignPlace;
    pub const BLOCK_NETHER_WOOD_HANGING_SIGN_STEP: SoundEnum =
        SoundEnum::BlockNetherWoodHangingSignStep;
    pub const BLOCK_NETHER_WOOD_HIT: SoundEnum = SoundEnum::BlockNetherWoodHit;
    pub const BLOCK_NETHER_WOOD_PLACE: SoundEnum = SoundEnum::BlockNetherWoodPlace;
    pub const BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF: SoundEnum =
        SoundEnum::BlockNetherWoodPressurePlateClickOff;
    pub const BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON: SoundEnum =
        SoundEnum::BlockNetherWoodPressurePlateClickOn;
    pub const BLOCK_NETHER_WOOD_STEP: SoundEnum = SoundEnum::BlockNetherWoodStep;
    pub const BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE: SoundEnum = SoundEnum::BlockNetherWoodTrapdoorClose;
    pub const BLOCK_NETHER_WOOD_TRAPDOOR_OPEN: SoundEnum = SoundEnum::BlockNetherWoodTrapdoorOpen;
    pub const BLOCK_NOTE_BLOCK_BANJO: SoundEnum = SoundEnum::BlockNoteBlockBanjo;
    pub const BLOCK_NOTE_BLOCK_BASEDRUM: SoundEnum = SoundEnum::BlockNoteBlockBasedrum;
    pub const BLOCK_NOTE_BLOCK_BASS: SoundEnum = SoundEnum::BlockNoteBlockBass;
    pub const BLOCK_NOTE_BLOCK_BELL: SoundEnum = SoundEnum::BlockNoteBlockBell;
    pub const BLOCK_NOTE_BLOCK_BIT: SoundEnum = SoundEnum::BlockNoteBlockBit;
    pub const BLOCK_NOTE_BLOCK_CHIME: SoundEnum = SoundEnum::BlockNoteBlockChime;
    pub const BLOCK_NOTE_BLOCK_COW_BELL: SoundEnum = SoundEnum::BlockNoteBlockCowBell;
    pub const BLOCK_NOTE_BLOCK_DIDGERIDOO: SoundEnum = SoundEnum::BlockNoteBlockDidgeridoo;
    pub const BLOCK_NOTE_BLOCK_FLUTE: SoundEnum = SoundEnum::BlockNoteBlockFlute;
    pub const BLOCK_NOTE_BLOCK_GUITAR: SoundEnum = SoundEnum::BlockNoteBlockGuitar;
    pub const BLOCK_NOTE_BLOCK_HARP: SoundEnum = SoundEnum::BlockNoteBlockHarp;
    pub const BLOCK_NOTE_BLOCK_HAT: SoundEnum = SoundEnum::BlockNoteBlockHat;
    pub const BLOCK_NOTE_BLOCK_IMITATE_CREEPER: SoundEnum = SoundEnum::BlockNoteBlockImitateCreeper;
    pub const BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON: SoundEnum =
        SoundEnum::BlockNoteBlockImitateEnderDragon;
    pub const BLOCK_NOTE_BLOCK_IMITATE_PIGLIN: SoundEnum = SoundEnum::BlockNoteBlockImitatePiglin;
    pub const BLOCK_NOTE_BLOCK_IMITATE_SKELETON: SoundEnum =
        SoundEnum::BlockNoteBlockImitateSkeleton;
    pub const BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON: SoundEnum =
        SoundEnum::BlockNoteBlockImitateWitherSkeleton;
    pub const BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE: SoundEnum = SoundEnum::BlockNoteBlockImitateZombie;
    pub const BLOCK_NOTE_BLOCK_IRON_XYLOPHONE: SoundEnum = SoundEnum::BlockNoteBlockIronXylophone;
    pub const BLOCK_NOTE_BLOCK_PLING: SoundEnum = SoundEnum::BlockNoteBlockPling;
    pub const BLOCK_NOTE_BLOCK_SNARE: SoundEnum = SoundEnum::BlockNoteBlockSnare;
    pub const BLOCK_NOTE_BLOCK_XYLOPHONE: SoundEnum = SoundEnum::BlockNoteBlockXylophone;
    pub const BLOCK_NYLIUM_BREAK: SoundEnum = SoundEnum::BlockNyliumBreak;
    pub const BLOCK_NYLIUM_FALL: SoundEnum = SoundEnum::BlockNyliumFall;
    pub const BLOCK_NYLIUM_HIT: SoundEnum = SoundEnum::BlockNyliumHit;
    pub const BLOCK_NYLIUM_PLACE: SoundEnum = SoundEnum::BlockNyliumPlace;
    pub const BLOCK_NYLIUM_STEP: SoundEnum = SoundEnum::BlockNyliumStep;
    pub const BLOCK_PACKED_MUD_BREAK: SoundEnum = SoundEnum::BlockPackedMudBreak;
    pub const BLOCK_PACKED_MUD_FALL: SoundEnum = SoundEnum::BlockPackedMudFall;
    pub const BLOCK_PACKED_MUD_HIT: SoundEnum = SoundEnum::BlockPackedMudHit;
    pub const BLOCK_PACKED_MUD_PLACE: SoundEnum = SoundEnum::BlockPackedMudPlace;
    pub const BLOCK_PACKED_MUD_STEP: SoundEnum = SoundEnum::BlockPackedMudStep;
    pub const BLOCK_PINK_PETALS_BREAK: SoundEnum = SoundEnum::BlockPinkPetalsBreak;
    pub const BLOCK_PINK_PETALS_FALL: SoundEnum = SoundEnum::BlockPinkPetalsFall;
    pub const BLOCK_PINK_PETALS_HIT: SoundEnum = SoundEnum::BlockPinkPetalsHit;
    pub const BLOCK_PINK_PETALS_PLACE: SoundEnum = SoundEnum::BlockPinkPetalsPlace;
    pub const BLOCK_PINK_PETALS_STEP: SoundEnum = SoundEnum::BlockPinkPetalsStep;
    pub const BLOCK_PISTON_CONTRACT: SoundEnum = SoundEnum::BlockPistonContract;
    pub const BLOCK_PISTON_EXTEND: SoundEnum = SoundEnum::BlockPistonExtend;
    pub const BLOCK_POINTED_DRIPSTONE_BREAK: SoundEnum = SoundEnum::BlockPointedDripstoneBreak;
    pub const BLOCK_POINTED_DRIPSTONE_DRIP_LAVA: SoundEnum =
        SoundEnum::BlockPointedDripstoneDripLava;
    pub const BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON: SoundEnum =
        SoundEnum::BlockPointedDripstoneDripLavaIntoCauldron;
    pub const BLOCK_POINTED_DRIPSTONE_DRIP_WATER: SoundEnum =
        SoundEnum::BlockPointedDripstoneDripWater;
    pub const BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON: SoundEnum =
        SoundEnum::BlockPointedDripstoneDripWaterIntoCauldron;
    pub const BLOCK_POINTED_DRIPSTONE_FALL: SoundEnum = SoundEnum::BlockPointedDripstoneFall;
    pub const BLOCK_POINTED_DRIPSTONE_HIT: SoundEnum = SoundEnum::BlockPointedDripstoneHit;
    pub const BLOCK_POINTED_DRIPSTONE_LAND: SoundEnum = SoundEnum::BlockPointedDripstoneLand;
    pub const BLOCK_POINTED_DRIPSTONE_PLACE: SoundEnum = SoundEnum::BlockPointedDripstonePlace;
    pub const BLOCK_POINTED_DRIPSTONE_STEP: SoundEnum = SoundEnum::BlockPointedDripstoneStep;
    pub const BLOCK_POLISHED_DEEPSLATE_BREAK: SoundEnum = SoundEnum::BlockPolishedDeepslateBreak;
    pub const BLOCK_POLISHED_DEEPSLATE_FALL: SoundEnum = SoundEnum::BlockPolishedDeepslateFall;
    pub const BLOCK_POLISHED_DEEPSLATE_HIT: SoundEnum = SoundEnum::BlockPolishedDeepslateHit;
    pub const BLOCK_POLISHED_DEEPSLATE_PLACE: SoundEnum = SoundEnum::BlockPolishedDeepslatePlace;
    pub const BLOCK_POLISHED_DEEPSLATE_STEP: SoundEnum = SoundEnum::BlockPolishedDeepslateStep;
    pub const BLOCK_PORTAL_AMBIENT: SoundEnum = SoundEnum::BlockPortalAmbient;
    pub const BLOCK_PORTAL_TRAVEL: SoundEnum = SoundEnum::BlockPortalTravel;
    pub const BLOCK_PORTAL_TRIGGER: SoundEnum = SoundEnum::BlockPortalTrigger;
    pub const BLOCK_POWDER_SNOW_BREAK: SoundEnum = SoundEnum::BlockPowderSnowBreak;
    pub const BLOCK_POWDER_SNOW_FALL: SoundEnum = SoundEnum::BlockPowderSnowFall;
    pub const BLOCK_POWDER_SNOW_HIT: SoundEnum = SoundEnum::BlockPowderSnowHit;
    pub const BLOCK_POWDER_SNOW_PLACE: SoundEnum = SoundEnum::BlockPowderSnowPlace;
    pub const BLOCK_POWDER_SNOW_STEP: SoundEnum = SoundEnum::BlockPowderSnowStep;
    pub const BLOCK_PUMPKIN_CARVE: SoundEnum = SoundEnum::BlockPumpkinCarve;
    pub const BLOCK_REDSTONE_TORCH_BURNOUT: SoundEnum = SoundEnum::BlockRedstoneTorchBurnout;
    pub const BLOCK_RESPAWN_ANCHOR_AMBIENT: SoundEnum = SoundEnum::BlockRespawnAnchorAmbient;
    pub const BLOCK_RESPAWN_ANCHOR_CHARGE: SoundEnum = SoundEnum::BlockRespawnAnchorCharge;
    pub const BLOCK_RESPAWN_ANCHOR_DEPLETE: SoundEnum = SoundEnum::BlockRespawnAnchorDeplete;
    pub const BLOCK_RESPAWN_ANCHOR_SET_SPAWN: SoundEnum = SoundEnum::BlockRespawnAnchorSetSpawn;
    pub const BLOCK_ROOTED_DIRT_BREAK: SoundEnum = SoundEnum::BlockRootedDirtBreak;
    pub const BLOCK_ROOTED_DIRT_FALL: SoundEnum = SoundEnum::BlockRootedDirtFall;
    pub const BLOCK_ROOTED_DIRT_HIT: SoundEnum = SoundEnum::BlockRootedDirtHit;
    pub const BLOCK_ROOTED_DIRT_PLACE: SoundEnum = SoundEnum::BlockRootedDirtPlace;
    pub const BLOCK_ROOTED_DIRT_STEP: SoundEnum = SoundEnum::BlockRootedDirtStep;
    pub const BLOCK_ROOTS_BREAK: SoundEnum = SoundEnum::BlockRootsBreak;
    pub const BLOCK_ROOTS_FALL: SoundEnum = SoundEnum::BlockRootsFall;
    pub const BLOCK_ROOTS_HIT: SoundEnum = SoundEnum::BlockRootsHit;
    pub const BLOCK_ROOTS_PLACE: SoundEnum = SoundEnum::BlockRootsPlace;
    pub const BLOCK_ROOTS_STEP: SoundEnum = SoundEnum::BlockRootsStep;
    pub const BLOCK_SAND_BREAK: SoundEnum = SoundEnum::BlockSandBreak;
    pub const BLOCK_SAND_FALL: SoundEnum = SoundEnum::BlockSandFall;
    pub const BLOCK_SAND_HIT: SoundEnum = SoundEnum::BlockSandHit;
    pub const BLOCK_SAND_PLACE: SoundEnum = SoundEnum::BlockSandPlace;
    pub const BLOCK_SAND_STEP: SoundEnum = SoundEnum::BlockSandStep;
    pub const BLOCK_SCAFFOLDING_BREAK: SoundEnum = SoundEnum::BlockScaffoldingBreak;
    pub const BLOCK_SCAFFOLDING_FALL: SoundEnum = SoundEnum::BlockScaffoldingFall;
    pub const BLOCK_SCAFFOLDING_HIT: SoundEnum = SoundEnum::BlockScaffoldingHit;
    pub const BLOCK_SCAFFOLDING_PLACE: SoundEnum = SoundEnum::BlockScaffoldingPlace;
    pub const BLOCK_SCAFFOLDING_STEP: SoundEnum = SoundEnum::BlockScaffoldingStep;
    pub const BLOCK_SCULK_BREAK: SoundEnum = SoundEnum::BlockSculkBreak;
    pub const BLOCK_SCULK_CATALYST_BLOOM: SoundEnum = SoundEnum::BlockSculkCatalystBloom;
    pub const BLOCK_SCULK_CATALYST_BREAK: SoundEnum = SoundEnum::BlockSculkCatalystBreak;
    pub const BLOCK_SCULK_CATALYST_FALL: SoundEnum = SoundEnum::BlockSculkCatalystFall;
    pub const BLOCK_SCULK_CATALYST_HIT: SoundEnum = SoundEnum::BlockSculkCatalystHit;
    pub const BLOCK_SCULK_CATALYST_PLACE: SoundEnum = SoundEnum::BlockSculkCatalystPlace;
    pub const BLOCK_SCULK_CATALYST_STEP: SoundEnum = SoundEnum::BlockSculkCatalystStep;
    pub const BLOCK_SCULK_CHARGE: SoundEnum = SoundEnum::BlockSculkCharge;
    pub const BLOCK_SCULK_FALL: SoundEnum = SoundEnum::BlockSculkFall;
    pub const BLOCK_SCULK_HIT: SoundEnum = SoundEnum::BlockSculkHit;
    pub const BLOCK_SCULK_PLACE: SoundEnum = SoundEnum::BlockSculkPlace;
    pub const BLOCK_SCULK_SENSOR_BREAK: SoundEnum = SoundEnum::BlockSculkSensorBreak;
    pub const BLOCK_SCULK_SENSOR_CLICKING: SoundEnum = SoundEnum::BlockSculkSensorClicking;
    pub const BLOCK_SCULK_SENSOR_CLICKING_STOP: SoundEnum = SoundEnum::BlockSculkSensorClickingStop;
    pub const BLOCK_SCULK_SENSOR_FALL: SoundEnum = SoundEnum::BlockSculkSensorFall;
    pub const BLOCK_SCULK_SENSOR_HIT: SoundEnum = SoundEnum::BlockSculkSensorHit;
    pub const BLOCK_SCULK_SENSOR_PLACE: SoundEnum = SoundEnum::BlockSculkSensorPlace;
    pub const BLOCK_SCULK_SENSOR_STEP: SoundEnum = SoundEnum::BlockSculkSensorStep;
    pub const BLOCK_SCULK_SHRIEKER_BREAK: SoundEnum = SoundEnum::BlockSculkShriekerBreak;
    pub const BLOCK_SCULK_SHRIEKER_FALL: SoundEnum = SoundEnum::BlockSculkShriekerFall;
    pub const BLOCK_SCULK_SHRIEKER_HIT: SoundEnum = SoundEnum::BlockSculkShriekerHit;
    pub const BLOCK_SCULK_SHRIEKER_PLACE: SoundEnum = SoundEnum::BlockSculkShriekerPlace;
    pub const BLOCK_SCULK_SHRIEKER_SHRIEK: SoundEnum = SoundEnum::BlockSculkShriekerShriek;
    pub const BLOCK_SCULK_SHRIEKER_STEP: SoundEnum = SoundEnum::BlockSculkShriekerStep;
    pub const BLOCK_SCULK_SPREAD: SoundEnum = SoundEnum::BlockSculkSpread;
    pub const BLOCK_SCULK_STEP: SoundEnum = SoundEnum::BlockSculkStep;
    pub const BLOCK_SCULK_VEIN_BREAK: SoundEnum = SoundEnum::BlockSculkVeinBreak;
    pub const BLOCK_SCULK_VEIN_FALL: SoundEnum = SoundEnum::BlockSculkVeinFall;
    pub const BLOCK_SCULK_VEIN_HIT: SoundEnum = SoundEnum::BlockSculkVeinHit;
    pub const BLOCK_SCULK_VEIN_PLACE: SoundEnum = SoundEnum::BlockSculkVeinPlace;
    pub const BLOCK_SCULK_VEIN_STEP: SoundEnum = SoundEnum::BlockSculkVeinStep;
    pub const BLOCK_SHROOMLIGHT_BREAK: SoundEnum = SoundEnum::BlockShroomlightBreak;
    pub const BLOCK_SHROOMLIGHT_FALL: SoundEnum = SoundEnum::BlockShroomlightFall;
    pub const BLOCK_SHROOMLIGHT_HIT: SoundEnum = SoundEnum::BlockShroomlightHit;
    pub const BLOCK_SHROOMLIGHT_PLACE: SoundEnum = SoundEnum::BlockShroomlightPlace;
    pub const BLOCK_SHROOMLIGHT_STEP: SoundEnum = SoundEnum::BlockShroomlightStep;
    pub const BLOCK_SHULKER_BOX_CLOSE: SoundEnum = SoundEnum::BlockShulkerBoxClose;
    pub const BLOCK_SHULKER_BOX_OPEN: SoundEnum = SoundEnum::BlockShulkerBoxOpen;
    pub const BLOCK_SIGN_WAXED_INTERACT_FAIL: SoundEnum = SoundEnum::BlockSignWaxedInteractFail;
    pub const BLOCK_SLIME_BLOCK_BREAK: SoundEnum = SoundEnum::BlockSlimeBlockBreak;
    pub const BLOCK_SLIME_BLOCK_FALL: SoundEnum = SoundEnum::BlockSlimeBlockFall;
    pub const BLOCK_SLIME_BLOCK_HIT: SoundEnum = SoundEnum::BlockSlimeBlockHit;
    pub const BLOCK_SLIME_BLOCK_PLACE: SoundEnum = SoundEnum::BlockSlimeBlockPlace;
    pub const BLOCK_SLIME_BLOCK_STEP: SoundEnum = SoundEnum::BlockSlimeBlockStep;
    pub const BLOCK_SMALL_AMETHYST_BUD_BREAK: SoundEnum = SoundEnum::BlockSmallAmethystBudBreak;
    pub const BLOCK_SMALL_AMETHYST_BUD_PLACE: SoundEnum = SoundEnum::BlockSmallAmethystBudPlace;
    pub const BLOCK_SMALL_DRIPLEAF_BREAK: SoundEnum = SoundEnum::BlockSmallDripleafBreak;
    pub const BLOCK_SMALL_DRIPLEAF_FALL: SoundEnum = SoundEnum::BlockSmallDripleafFall;
    pub const BLOCK_SMALL_DRIPLEAF_HIT: SoundEnum = SoundEnum::BlockSmallDripleafHit;
    pub const BLOCK_SMALL_DRIPLEAF_PLACE: SoundEnum = SoundEnum::BlockSmallDripleafPlace;
    pub const BLOCK_SMALL_DRIPLEAF_STEP: SoundEnum = SoundEnum::BlockSmallDripleafStep;
    pub const BLOCK_SMITHING_TABLE_USE: SoundEnum = SoundEnum::BlockSmithingTableUse;
    pub const BLOCK_SMOKER_SMOKE: SoundEnum = SoundEnum::BlockSmokerSmoke;
    pub const BLOCK_SNIFFER_EGG_CRACK: SoundEnum = SoundEnum::BlockSnifferEggCrack;
    pub const BLOCK_SNIFFER_EGG_HATCH: SoundEnum = SoundEnum::BlockSnifferEggHatch;
    pub const BLOCK_SNIFFER_EGG_PLOP: SoundEnum = SoundEnum::BlockSnifferEggPlop;
    pub const BLOCK_SNOW_BREAK: SoundEnum = SoundEnum::BlockSnowBreak;
    pub const BLOCK_SNOW_FALL: SoundEnum = SoundEnum::BlockSnowFall;
    pub const BLOCK_SNOW_HIT: SoundEnum = SoundEnum::BlockSnowHit;
    pub const BLOCK_SNOW_PLACE: SoundEnum = SoundEnum::BlockSnowPlace;
    pub const BLOCK_SNOW_STEP: SoundEnum = SoundEnum::BlockSnowStep;
    pub const BLOCK_SOUL_SAND_BREAK: SoundEnum = SoundEnum::BlockSoulSandBreak;
    pub const BLOCK_SOUL_SAND_FALL: SoundEnum = SoundEnum::BlockSoulSandFall;
    pub const BLOCK_SOUL_SAND_HIT: SoundEnum = SoundEnum::BlockSoulSandHit;
    pub const BLOCK_SOUL_SAND_PLACE: SoundEnum = SoundEnum::BlockSoulSandPlace;
    pub const BLOCK_SOUL_SAND_STEP: SoundEnum = SoundEnum::BlockSoulSandStep;
    pub const BLOCK_SOUL_SOIL_BREAK: SoundEnum = SoundEnum::BlockSoulSoilBreak;
    pub const BLOCK_SOUL_SOIL_FALL: SoundEnum = SoundEnum::BlockSoulSoilFall;
    pub const BLOCK_SOUL_SOIL_HIT: SoundEnum = SoundEnum::BlockSoulSoilHit;
    pub const BLOCK_SOUL_SOIL_PLACE: SoundEnum = SoundEnum::BlockSoulSoilPlace;
    pub const BLOCK_SOUL_SOIL_STEP: SoundEnum = SoundEnum::BlockSoulSoilStep;
    pub const BLOCK_SPORE_BLOSSOM_BREAK: SoundEnum = SoundEnum::BlockSporeBlossomBreak;
    pub const BLOCK_SPORE_BLOSSOM_FALL: SoundEnum = SoundEnum::BlockSporeBlossomFall;
    pub const BLOCK_SPORE_BLOSSOM_HIT: SoundEnum = SoundEnum::BlockSporeBlossomHit;
    pub const BLOCK_SPORE_BLOSSOM_PLACE: SoundEnum = SoundEnum::BlockSporeBlossomPlace;
    pub const BLOCK_SPORE_BLOSSOM_STEP: SoundEnum = SoundEnum::BlockSporeBlossomStep;
    pub const BLOCK_STEM_BREAK: SoundEnum = SoundEnum::BlockStemBreak;
    pub const BLOCK_STEM_FALL: SoundEnum = SoundEnum::BlockStemFall;
    pub const BLOCK_STEM_HIT: SoundEnum = SoundEnum::BlockStemHit;
    pub const BLOCK_STEM_PLACE: SoundEnum = SoundEnum::BlockStemPlace;
    pub const BLOCK_STEM_STEP: SoundEnum = SoundEnum::BlockStemStep;
    pub const BLOCK_STONE_BREAK: SoundEnum = SoundEnum::BlockStoneBreak;
    pub const BLOCK_STONE_BUTTON_CLICK_OFF: SoundEnum = SoundEnum::BlockStoneButtonClickOff;
    pub const BLOCK_STONE_BUTTON_CLICK_ON: SoundEnum = SoundEnum::BlockStoneButtonClickOn;
    pub const BLOCK_STONE_FALL: SoundEnum = SoundEnum::BlockStoneFall;
    pub const BLOCK_STONE_HIT: SoundEnum = SoundEnum::BlockStoneHit;
    pub const BLOCK_STONE_PLACE: SoundEnum = SoundEnum::BlockStonePlace;
    pub const BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF: SoundEnum =
        SoundEnum::BlockStonePressurePlateClickOff;
    pub const BLOCK_STONE_PRESSURE_PLATE_CLICK_ON: SoundEnum =
        SoundEnum::BlockStonePressurePlateClickOn;
    pub const BLOCK_STONE_STEP: SoundEnum = SoundEnum::BlockStoneStep;
    pub const BLOCK_SUSPICIOUS_GRAVEL_BREAK: SoundEnum = SoundEnum::BlockSuspiciousGravelBreak;
    pub const BLOCK_SUSPICIOUS_GRAVEL_FALL: SoundEnum = SoundEnum::BlockSuspiciousGravelFall;
    pub const BLOCK_SUSPICIOUS_GRAVEL_HIT: SoundEnum = SoundEnum::BlockSuspiciousGravelHit;
    pub const BLOCK_SUSPICIOUS_GRAVEL_PLACE: SoundEnum = SoundEnum::BlockSuspiciousGravelPlace;
    pub const BLOCK_SUSPICIOUS_GRAVEL_STEP: SoundEnum = SoundEnum::BlockSuspiciousGravelStep;
    pub const BLOCK_SUSPICIOUS_SAND_BREAK: SoundEnum = SoundEnum::BlockSuspiciousSandBreak;
    pub const BLOCK_SUSPICIOUS_SAND_FALL: SoundEnum = SoundEnum::BlockSuspiciousSandFall;
    pub const BLOCK_SUSPICIOUS_SAND_HIT: SoundEnum = SoundEnum::BlockSuspiciousSandHit;
    pub const BLOCK_SUSPICIOUS_SAND_PLACE: SoundEnum = SoundEnum::BlockSuspiciousSandPlace;
    pub const BLOCK_SUSPICIOUS_SAND_STEP: SoundEnum = SoundEnum::BlockSuspiciousSandStep;
    pub const BLOCK_SWEET_BERRY_BUSH_BREAK: SoundEnum = SoundEnum::BlockSweetBerryBushBreak;
    pub const BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES: SoundEnum =
        SoundEnum::BlockSweetBerryBushPickBerries;
    pub const BLOCK_SWEET_BERRY_BUSH_PLACE: SoundEnum = SoundEnum::BlockSweetBerryBushPlace;
    pub const BLOCK_TRIPWIRE_ATTACH: SoundEnum = SoundEnum::BlockTripwireAttach;
    pub const BLOCK_TRIPWIRE_CLICK_OFF: SoundEnum = SoundEnum::BlockTripwireClickOff;
    pub const BLOCK_TRIPWIRE_CLICK_ON: SoundEnum = SoundEnum::BlockTripwireClickOn;
    pub const BLOCK_TRIPWIRE_DETACH: SoundEnum = SoundEnum::BlockTripwireDetach;
    pub const BLOCK_TUFF_BREAK: SoundEnum = SoundEnum::BlockTuffBreak;
    pub const BLOCK_TUFF_FALL: SoundEnum = SoundEnum::BlockTuffFall;
    pub const BLOCK_TUFF_HIT: SoundEnum = SoundEnum::BlockTuffHit;
    pub const BLOCK_TUFF_PLACE: SoundEnum = SoundEnum::BlockTuffPlace;
    pub const BLOCK_TUFF_STEP: SoundEnum = SoundEnum::BlockTuffStep;
    pub const BLOCK_VINE_BREAK: SoundEnum = SoundEnum::BlockVineBreak;
    pub const BLOCK_VINE_FALL: SoundEnum = SoundEnum::BlockVineFall;
    pub const BLOCK_VINE_HIT: SoundEnum = SoundEnum::BlockVineHit;
    pub const BLOCK_VINE_PLACE: SoundEnum = SoundEnum::BlockVinePlace;
    pub const BLOCK_VINE_STEP: SoundEnum = SoundEnum::BlockVineStep;
    pub const BLOCK_WART_BLOCK_BREAK: SoundEnum = SoundEnum::BlockWartBlockBreak;
    pub const BLOCK_WART_BLOCK_FALL: SoundEnum = SoundEnum::BlockWartBlockFall;
    pub const BLOCK_WART_BLOCK_HIT: SoundEnum = SoundEnum::BlockWartBlockHit;
    pub const BLOCK_WART_BLOCK_PLACE: SoundEnum = SoundEnum::BlockWartBlockPlace;
    pub const BLOCK_WART_BLOCK_STEP: SoundEnum = SoundEnum::BlockWartBlockStep;
    pub const BLOCK_WATER_AMBIENT: SoundEnum = SoundEnum::BlockWaterAmbient;
    pub const BLOCK_WEEPING_VINES_BREAK: SoundEnum = SoundEnum::BlockWeepingVinesBreak;
    pub const BLOCK_WEEPING_VINES_FALL: SoundEnum = SoundEnum::BlockWeepingVinesFall;
    pub const BLOCK_WEEPING_VINES_HIT: SoundEnum = SoundEnum::BlockWeepingVinesHit;
    pub const BLOCK_WEEPING_VINES_PLACE: SoundEnum = SoundEnum::BlockWeepingVinesPlace;
    pub const BLOCK_WEEPING_VINES_STEP: SoundEnum = SoundEnum::BlockWeepingVinesStep;
    pub const BLOCK_WET_GRASS_BREAK: SoundEnum = SoundEnum::BlockWetGrassBreak;
    pub const BLOCK_WET_GRASS_FALL: SoundEnum = SoundEnum::BlockWetGrassFall;
    pub const BLOCK_WET_GRASS_HIT: SoundEnum = SoundEnum::BlockWetGrassHit;
    pub const BLOCK_WET_GRASS_PLACE: SoundEnum = SoundEnum::BlockWetGrassPlace;
    pub const BLOCK_WET_GRASS_STEP: SoundEnum = SoundEnum::BlockWetGrassStep;
    pub const BLOCK_WOODEN_BUTTON_CLICK_OFF: SoundEnum = SoundEnum::BlockWoodenButtonClickOff;
    pub const BLOCK_WOODEN_BUTTON_CLICK_ON: SoundEnum = SoundEnum::BlockWoodenButtonClickOn;
    pub const BLOCK_WOODEN_DOOR_CLOSE: SoundEnum = SoundEnum::BlockWoodenDoorClose;
    pub const BLOCK_WOODEN_DOOR_OPEN: SoundEnum = SoundEnum::BlockWoodenDoorOpen;
    pub const BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF: SoundEnum =
        SoundEnum::BlockWoodenPressurePlateClickOff;
    pub const BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON: SoundEnum =
        SoundEnum::BlockWoodenPressurePlateClickOn;
    pub const BLOCK_WOODEN_TRAPDOOR_CLOSE: SoundEnum = SoundEnum::BlockWoodenTrapdoorClose;
    pub const BLOCK_WOODEN_TRAPDOOR_OPEN: SoundEnum = SoundEnum::BlockWoodenTrapdoorOpen;
    pub const BLOCK_WOOD_BREAK: SoundEnum = SoundEnum::BlockWoodBreak;
    pub const BLOCK_WOOD_FALL: SoundEnum = SoundEnum::BlockWoodFall;
    pub const BLOCK_WOOD_HIT: SoundEnum = SoundEnum::BlockWoodHit;
    pub const BLOCK_WOOD_PLACE: SoundEnum = SoundEnum::BlockWoodPlace;
    pub const BLOCK_WOOD_STEP: SoundEnum = SoundEnum::BlockWoodStep;
    pub const BLOCK_WOOL_BREAK: SoundEnum = SoundEnum::BlockWoolBreak;
    pub const BLOCK_WOOL_FALL: SoundEnum = SoundEnum::BlockWoolFall;
    pub const BLOCK_WOOL_HIT: SoundEnum = SoundEnum::BlockWoolHit;
    pub const BLOCK_WOOL_PLACE: SoundEnum = SoundEnum::BlockWoolPlace;
    pub const BLOCK_WOOL_STEP: SoundEnum = SoundEnum::BlockWoolStep;
    pub const ENCHANT_THORNS_HIT: SoundEnum = SoundEnum::EnchantThornsHit;
    pub const ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM: SoundEnum =
        SoundEnum::EntityAllayAmbientWithoutItem;
    pub const ENTITY_ALLAY_AMBIENT_WITH_ITEM: SoundEnum = SoundEnum::EntityAllayAmbientWithItem;
    pub const ENTITY_ALLAY_DEATH: SoundEnum = SoundEnum::EntityAllayDeath;
    pub const ENTITY_ALLAY_HURT: SoundEnum = SoundEnum::EntityAllayHurt;
    pub const ENTITY_ALLAY_ITEM_GIVEN: SoundEnum = SoundEnum::EntityAllayItemGiven;
    pub const ENTITY_ALLAY_ITEM_TAKEN: SoundEnum = SoundEnum::EntityAllayItemTaken;
    pub const ENTITY_ALLAY_ITEM_THROWN: SoundEnum = SoundEnum::EntityAllayItemThrown;
    pub const ENTITY_ARMOR_STAND_BREAK: SoundEnum = SoundEnum::EntityArmorStandBreak;
    pub const ENTITY_ARMOR_STAND_FALL: SoundEnum = SoundEnum::EntityArmorStandFall;
    pub const ENTITY_ARMOR_STAND_HIT: SoundEnum = SoundEnum::EntityArmorStandHit;
    pub const ENTITY_ARMOR_STAND_PLACE: SoundEnum = SoundEnum::EntityArmorStandPlace;
    pub const ENTITY_ARROW_HIT: SoundEnum = SoundEnum::EntityArrowHit;
    pub const ENTITY_ARROW_HIT_PLAYER: SoundEnum = SoundEnum::EntityArrowHitPlayer;
    pub const ENTITY_ARROW_SHOOT: SoundEnum = SoundEnum::EntityArrowShoot;
    pub const ENTITY_AXOLOTL_ATTACK: SoundEnum = SoundEnum::EntityAxolotlAttack;
    pub const ENTITY_AXOLOTL_DEATH: SoundEnum = SoundEnum::EntityAxolotlDeath;
    pub const ENTITY_AXOLOTL_HURT: SoundEnum = SoundEnum::EntityAxolotlHurt;
    pub const ENTITY_AXOLOTL_IDLE_AIR: SoundEnum = SoundEnum::EntityAxolotlIdleAir;
    pub const ENTITY_AXOLOTL_IDLE_WATER: SoundEnum = SoundEnum::EntityAxolotlIdleWater;
    pub const ENTITY_AXOLOTL_SPLASH: SoundEnum = SoundEnum::EntityAxolotlSplash;
    pub const ENTITY_AXOLOTL_SWIM: SoundEnum = SoundEnum::EntityAxolotlSwim;
    pub const ENTITY_BAT_AMBIENT: SoundEnum = SoundEnum::EntityBatAmbient;
    pub const ENTITY_BAT_DEATH: SoundEnum = SoundEnum::EntityBatDeath;
    pub const ENTITY_BAT_HURT: SoundEnum = SoundEnum::EntityBatHurt;
    pub const ENTITY_BAT_LOOP: SoundEnum = SoundEnum::EntityBatLoop;
    pub const ENTITY_BAT_TAKEOFF: SoundEnum = SoundEnum::EntityBatTakeoff;
    pub const ENTITY_BEE_DEATH: SoundEnum = SoundEnum::EntityBeeDeath;
    pub const ENTITY_BEE_HURT: SoundEnum = SoundEnum::EntityBeeHurt;
    pub const ENTITY_BEE_LOOP: SoundEnum = SoundEnum::EntityBeeLoop;
    pub const ENTITY_BEE_LOOP_AGGRESSIVE: SoundEnum = SoundEnum::EntityBeeLoopAggressive;
    pub const ENTITY_BEE_POLLINATE: SoundEnum = SoundEnum::EntityBeePollinate;
    pub const ENTITY_BEE_STING: SoundEnum = SoundEnum::EntityBeeSting;
    pub const ENTITY_BLAZE_AMBIENT: SoundEnum = SoundEnum::EntityBlazeAmbient;
    pub const ENTITY_BLAZE_BURN: SoundEnum = SoundEnum::EntityBlazeBurn;
    pub const ENTITY_BLAZE_DEATH: SoundEnum = SoundEnum::EntityBlazeDeath;
    pub const ENTITY_BLAZE_HURT: SoundEnum = SoundEnum::EntityBlazeHurt;
    pub const ENTITY_BLAZE_SHOOT: SoundEnum = SoundEnum::EntityBlazeShoot;
    pub const ENTITY_BOAT_PADDLE_LAND: SoundEnum = SoundEnum::EntityBoatPaddleLand;
    pub const ENTITY_BOAT_PADDLE_WATER: SoundEnum = SoundEnum::EntityBoatPaddleWater;
    pub const ENTITY_CAMEL_AMBIENT: SoundEnum = SoundEnum::EntityCamelAmbient;
    pub const ENTITY_CAMEL_DASH: SoundEnum = SoundEnum::EntityCamelDash;
    pub const ENTITY_CAMEL_DASH_READY: SoundEnum = SoundEnum::EntityCamelDashReady;
    pub const ENTITY_CAMEL_DEATH: SoundEnum = SoundEnum::EntityCamelDeath;
    pub const ENTITY_CAMEL_EAT: SoundEnum = SoundEnum::EntityCamelEat;
    pub const ENTITY_CAMEL_HURT: SoundEnum = SoundEnum::EntityCamelHurt;
    pub const ENTITY_CAMEL_SADDLE: SoundEnum = SoundEnum::EntityCamelSaddle;
    pub const ENTITY_CAMEL_SIT: SoundEnum = SoundEnum::EntityCamelSit;
    pub const ENTITY_CAMEL_STAND: SoundEnum = SoundEnum::EntityCamelStand;
    pub const ENTITY_CAMEL_STEP: SoundEnum = SoundEnum::EntityCamelStep;
    pub const ENTITY_CAMEL_STEP_SAND: SoundEnum = SoundEnum::EntityCamelStepSand;
    pub const ENTITY_CAT_AMBIENT: SoundEnum = SoundEnum::EntityCatAmbient;
    pub const ENTITY_CAT_BEG_FOR_FOOD: SoundEnum = SoundEnum::EntityCatBegForFood;
    pub const ENTITY_CAT_DEATH: SoundEnum = SoundEnum::EntityCatDeath;
    pub const ENTITY_CAT_EAT: SoundEnum = SoundEnum::EntityCatEat;
    pub const ENTITY_CAT_HISS: SoundEnum = SoundEnum::EntityCatHiss;
    pub const ENTITY_CAT_HURT: SoundEnum = SoundEnum::EntityCatHurt;
    pub const ENTITY_CAT_PURR: SoundEnum = SoundEnum::EntityCatPurr;
    pub const ENTITY_CAT_PURREOW: SoundEnum = SoundEnum::EntityCatPurreow;
    pub const ENTITY_CAT_STRAY_AMBIENT: SoundEnum = SoundEnum::EntityCatStrayAmbient;
    pub const ENTITY_CHICKEN_AMBIENT: SoundEnum = SoundEnum::EntityChickenAmbient;
    pub const ENTITY_CHICKEN_DEATH: SoundEnum = SoundEnum::EntityChickenDeath;
    pub const ENTITY_CHICKEN_EGG: SoundEnum = SoundEnum::EntityChickenEgg;
    pub const ENTITY_CHICKEN_HURT: SoundEnum = SoundEnum::EntityChickenHurt;
    pub const ENTITY_CHICKEN_STEP: SoundEnum = SoundEnum::EntityChickenStep;
    pub const ENTITY_COD_AMBIENT: SoundEnum = SoundEnum::EntityCodAmbient;
    pub const ENTITY_COD_DEATH: SoundEnum = SoundEnum::EntityCodDeath;
    pub const ENTITY_COD_FLOP: SoundEnum = SoundEnum::EntityCodFlop;
    pub const ENTITY_COD_HURT: SoundEnum = SoundEnum::EntityCodHurt;
    pub const ENTITY_COW_AMBIENT: SoundEnum = SoundEnum::EntityCowAmbient;
    pub const ENTITY_COW_DEATH: SoundEnum = SoundEnum::EntityCowDeath;
    pub const ENTITY_COW_HURT: SoundEnum = SoundEnum::EntityCowHurt;
    pub const ENTITY_COW_MILK: SoundEnum = SoundEnum::EntityCowMilk;
    pub const ENTITY_COW_STEP: SoundEnum = SoundEnum::EntityCowStep;
    pub const ENTITY_CREEPER_DEATH: SoundEnum = SoundEnum::EntityCreeperDeath;
    pub const ENTITY_CREEPER_HURT: SoundEnum = SoundEnum::EntityCreeperHurt;
    pub const ENTITY_CREEPER_PRIMED: SoundEnum = SoundEnum::EntityCreeperPrimed;
    pub const ENTITY_DOLPHIN_AMBIENT: SoundEnum = SoundEnum::EntityDolphinAmbient;
    pub const ENTITY_DOLPHIN_AMBIENT_WATER: SoundEnum = SoundEnum::EntityDolphinAmbientWater;
    pub const ENTITY_DOLPHIN_ATTACK: SoundEnum = SoundEnum::EntityDolphinAttack;
    pub const ENTITY_DOLPHIN_DEATH: SoundEnum = SoundEnum::EntityDolphinDeath;
    pub const ENTITY_DOLPHIN_EAT: SoundEnum = SoundEnum::EntityDolphinEat;
    pub const ENTITY_DOLPHIN_HURT: SoundEnum = SoundEnum::EntityDolphinHurt;
    pub const ENTITY_DOLPHIN_JUMP: SoundEnum = SoundEnum::EntityDolphinJump;
    pub const ENTITY_DOLPHIN_PLAY: SoundEnum = SoundEnum::EntityDolphinPlay;
    pub const ENTITY_DOLPHIN_SPLASH: SoundEnum = SoundEnum::EntityDolphinSplash;
    pub const ENTITY_DOLPHIN_SWIM: SoundEnum = SoundEnum::EntityDolphinSwim;
    pub const ENTITY_DONKEY_AMBIENT: SoundEnum = SoundEnum::EntityDonkeyAmbient;
    pub const ENTITY_DONKEY_ANGRY: SoundEnum = SoundEnum::EntityDonkeyAngry;
    pub const ENTITY_DONKEY_CHEST: SoundEnum = SoundEnum::EntityDonkeyChest;
    pub const ENTITY_DONKEY_DEATH: SoundEnum = SoundEnum::EntityDonkeyDeath;
    pub const ENTITY_DONKEY_EAT: SoundEnum = SoundEnum::EntityDonkeyEat;
    pub const ENTITY_DONKEY_HURT: SoundEnum = SoundEnum::EntityDonkeyHurt;
    pub const ENTITY_DRAGON_FIREBALL_EXPLODE: SoundEnum = SoundEnum::EntityDragonFireballExplode;
    pub const ENTITY_DROWNED_AMBIENT: SoundEnum = SoundEnum::EntityDrownedAmbient;
    pub const ENTITY_DROWNED_AMBIENT_WATER: SoundEnum = SoundEnum::EntityDrownedAmbientWater;
    pub const ENTITY_DROWNED_DEATH: SoundEnum = SoundEnum::EntityDrownedDeath;
    pub const ENTITY_DROWNED_DEATH_WATER: SoundEnum = SoundEnum::EntityDrownedDeathWater;
    pub const ENTITY_DROWNED_HURT: SoundEnum = SoundEnum::EntityDrownedHurt;
    pub const ENTITY_DROWNED_HURT_WATER: SoundEnum = SoundEnum::EntityDrownedHurtWater;
    pub const ENTITY_DROWNED_SHOOT: SoundEnum = SoundEnum::EntityDrownedShoot;
    pub const ENTITY_DROWNED_STEP: SoundEnum = SoundEnum::EntityDrownedStep;
    pub const ENTITY_DROWNED_SWIM: SoundEnum = SoundEnum::EntityDrownedSwim;
    pub const ENTITY_EGG_THROW: SoundEnum = SoundEnum::EntityEggThrow;
    pub const ENTITY_ELDER_GUARDIAN_AMBIENT: SoundEnum = SoundEnum::EntityElderGuardianAmbient;
    pub const ENTITY_ELDER_GUARDIAN_AMBIENT_LAND: SoundEnum =
        SoundEnum::EntityElderGuardianAmbientLand;
    pub const ENTITY_ELDER_GUARDIAN_CURSE: SoundEnum = SoundEnum::EntityElderGuardianCurse;
    pub const ENTITY_ELDER_GUARDIAN_DEATH: SoundEnum = SoundEnum::EntityElderGuardianDeath;
    pub const ENTITY_ELDER_GUARDIAN_DEATH_LAND: SoundEnum = SoundEnum::EntityElderGuardianDeathLand;
    pub const ENTITY_ELDER_GUARDIAN_FLOP: SoundEnum = SoundEnum::EntityElderGuardianFlop;
    pub const ENTITY_ELDER_GUARDIAN_HURT: SoundEnum = SoundEnum::EntityElderGuardianHurt;
    pub const ENTITY_ELDER_GUARDIAN_HURT_LAND: SoundEnum = SoundEnum::EntityElderGuardianHurtLand;
    pub const ENTITY_ENDERMAN_AMBIENT: SoundEnum = SoundEnum::EntityEndermanAmbient;
    pub const ENTITY_ENDERMAN_DEATH: SoundEnum = SoundEnum::EntityEndermanDeath;
    pub const ENTITY_ENDERMAN_HURT: SoundEnum = SoundEnum::EntityEndermanHurt;
    pub const ENTITY_ENDERMAN_SCREAM: SoundEnum = SoundEnum::EntityEndermanScream;
    pub const ENTITY_ENDERMAN_STARE: SoundEnum = SoundEnum::EntityEndermanStare;
    pub const ENTITY_ENDERMAN_TELEPORT: SoundEnum = SoundEnum::EntityEndermanTeleport;
    pub const ENTITY_ENDERMITE_AMBIENT: SoundEnum = SoundEnum::EntityEndermiteAmbient;
    pub const ENTITY_ENDERMITE_DEATH: SoundEnum = SoundEnum::EntityEndermiteDeath;
    pub const ENTITY_ENDERMITE_HURT: SoundEnum = SoundEnum::EntityEndermiteHurt;
    pub const ENTITY_ENDERMITE_STEP: SoundEnum = SoundEnum::EntityEndermiteStep;
    pub const ENTITY_ENDER_DRAGON_AMBIENT: SoundEnum = SoundEnum::EntityEnderDragonAmbient;
    pub const ENTITY_ENDER_DRAGON_DEATH: SoundEnum = SoundEnum::EntityEnderDragonDeath;
    pub const ENTITY_ENDER_DRAGON_FLAP: SoundEnum = SoundEnum::EntityEnderDragonFlap;
    pub const ENTITY_ENDER_DRAGON_GROWL: SoundEnum = SoundEnum::EntityEnderDragonGrowl;
    pub const ENTITY_ENDER_DRAGON_HURT: SoundEnum = SoundEnum::EntityEnderDragonHurt;
    pub const ENTITY_ENDER_DRAGON_SHOOT: SoundEnum = SoundEnum::EntityEnderDragonShoot;
    pub const ENTITY_ENDER_EYE_DEATH: SoundEnum = SoundEnum::EntityEnderEyeDeath;
    pub const ENTITY_ENDER_EYE_LAUNCH: SoundEnum = SoundEnum::EntityEnderEyeLaunch;
    pub const ENTITY_ENDER_PEARL_THROW: SoundEnum = SoundEnum::EntityEnderPearlThrow;
    pub const ENTITY_EVOKER_AMBIENT: SoundEnum = SoundEnum::EntityEvokerAmbient;
    pub const ENTITY_EVOKER_CAST_SPELL: SoundEnum = SoundEnum::EntityEvokerCastSpell;
    pub const ENTITY_EVOKER_CELEBRATE: SoundEnum = SoundEnum::EntityEvokerCelebrate;
    pub const ENTITY_EVOKER_DEATH: SoundEnum = SoundEnum::EntityEvokerDeath;
    pub const ENTITY_EVOKER_FANGS_ATTACK: SoundEnum = SoundEnum::EntityEvokerFangsAttack;
    pub const ENTITY_EVOKER_HURT: SoundEnum = SoundEnum::EntityEvokerHurt;
    pub const ENTITY_EVOKER_PREPARE_ATTACK: SoundEnum = SoundEnum::EntityEvokerPrepareAttack;
    pub const ENTITY_EVOKER_PREPARE_SUMMON: SoundEnum = SoundEnum::EntityEvokerPrepareSummon;
    pub const ENTITY_EVOKER_PREPARE_WOLOLO: SoundEnum = SoundEnum::EntityEvokerPrepareWololo;
    pub const ENTITY_EXPERIENCE_BOTTLE_THROW: SoundEnum = SoundEnum::EntityExperienceBottleThrow;
    pub const ENTITY_EXPERIENCE_ORB_PICKUP: SoundEnum = SoundEnum::EntityExperienceOrbPickup;
    pub const ENTITY_FIREWORK_ROCKET_BLAST: SoundEnum = SoundEnum::EntityFireworkRocketBlast;
    pub const ENTITY_FIREWORK_ROCKET_BLAST_FAR: SoundEnum = SoundEnum::EntityFireworkRocketBlastFar;
    pub const ENTITY_FIREWORK_ROCKET_LARGE_BLAST: SoundEnum =
        SoundEnum::EntityFireworkRocketLargeBlast;
    pub const ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR: SoundEnum =
        SoundEnum::EntityFireworkRocketLargeBlastFar;
    pub const ENTITY_FIREWORK_ROCKET_LAUNCH: SoundEnum = SoundEnum::EntityFireworkRocketLaunch;
    pub const ENTITY_FIREWORK_ROCKET_SHOOT: SoundEnum = SoundEnum::EntityFireworkRocketShoot;
    pub const ENTITY_FIREWORK_ROCKET_TWINKLE: SoundEnum = SoundEnum::EntityFireworkRocketTwinkle;
    pub const ENTITY_FIREWORK_ROCKET_TWINKLE_FAR: SoundEnum =
        SoundEnum::EntityFireworkRocketTwinkleFar;
    pub const ENTITY_FISHING_BOBBER_RETRIEVE: SoundEnum = SoundEnum::EntityFishingBobberRetrieve;
    pub const ENTITY_FISHING_BOBBER_SPLASH: SoundEnum = SoundEnum::EntityFishingBobberSplash;
    pub const ENTITY_FISHING_BOBBER_THROW: SoundEnum = SoundEnum::EntityFishingBobberThrow;
    pub const ENTITY_FISH_SWIM: SoundEnum = SoundEnum::EntityFishSwim;
    pub const ENTITY_FOX_AGGRO: SoundEnum = SoundEnum::EntityFoxAggro;
    pub const ENTITY_FOX_AMBIENT: SoundEnum = SoundEnum::EntityFoxAmbient;
    pub const ENTITY_FOX_BITE: SoundEnum = SoundEnum::EntityFoxBite;
    pub const ENTITY_FOX_DEATH: SoundEnum = SoundEnum::EntityFoxDeath;
    pub const ENTITY_FOX_EAT: SoundEnum = SoundEnum::EntityFoxEat;
    pub const ENTITY_FOX_HURT: SoundEnum = SoundEnum::EntityFoxHurt;
    pub const ENTITY_FOX_SCREECH: SoundEnum = SoundEnum::EntityFoxScreech;
    pub const ENTITY_FOX_SLEEP: SoundEnum = SoundEnum::EntityFoxSleep;
    pub const ENTITY_FOX_SNIFF: SoundEnum = SoundEnum::EntityFoxSniff;
    pub const ENTITY_FOX_SPIT: SoundEnum = SoundEnum::EntityFoxSpit;
    pub const ENTITY_FOX_TELEPORT: SoundEnum = SoundEnum::EntityFoxTeleport;
    pub const ENTITY_FROG_AMBIENT: SoundEnum = SoundEnum::EntityFrogAmbient;
    pub const ENTITY_FROG_DEATH: SoundEnum = SoundEnum::EntityFrogDeath;
    pub const ENTITY_FROG_EAT: SoundEnum = SoundEnum::EntityFrogEat;
    pub const ENTITY_FROG_HURT: SoundEnum = SoundEnum::EntityFrogHurt;
    pub const ENTITY_FROG_LAY_SPAWN: SoundEnum = SoundEnum::EntityFrogLaySpawn;
    pub const ENTITY_FROG_LONG_JUMP: SoundEnum = SoundEnum::EntityFrogLongJump;
    pub const ENTITY_FROG_STEP: SoundEnum = SoundEnum::EntityFrogStep;
    pub const ENTITY_FROG_TONGUE: SoundEnum = SoundEnum::EntityFrogTongue;
    pub const ENTITY_GENERIC_BIG_FALL: SoundEnum = SoundEnum::EntityGenericBigFall;
    pub const ENTITY_GENERIC_BURN: SoundEnum = SoundEnum::EntityGenericBurn;
    pub const ENTITY_GENERIC_DEATH: SoundEnum = SoundEnum::EntityGenericDeath;
    pub const ENTITY_GENERIC_DRINK: SoundEnum = SoundEnum::EntityGenericDrink;
    pub const ENTITY_GENERIC_EAT: SoundEnum = SoundEnum::EntityGenericEat;
    pub const ENTITY_GENERIC_EXPLODE: SoundEnum = SoundEnum::EntityGenericExplode;
    pub const ENTITY_GENERIC_EXTINGUISH_FIRE: SoundEnum = SoundEnum::EntityGenericExtinguishFire;
    pub const ENTITY_GENERIC_HURT: SoundEnum = SoundEnum::EntityGenericHurt;
    pub const ENTITY_GENERIC_SMALL_FALL: SoundEnum = SoundEnum::EntityGenericSmallFall;
    pub const ENTITY_GENERIC_SPLASH: SoundEnum = SoundEnum::EntityGenericSplash;
    pub const ENTITY_GENERIC_SWIM: SoundEnum = SoundEnum::EntityGenericSwim;
    pub const ENTITY_GHAST_AMBIENT: SoundEnum = SoundEnum::EntityGhastAmbient;
    pub const ENTITY_GHAST_DEATH: SoundEnum = SoundEnum::EntityGhastDeath;
    pub const ENTITY_GHAST_HURT: SoundEnum = SoundEnum::EntityGhastHurt;
    pub const ENTITY_GHAST_SCREAM: SoundEnum = SoundEnum::EntityGhastScream;
    pub const ENTITY_GHAST_SHOOT: SoundEnum = SoundEnum::EntityGhastShoot;
    pub const ENTITY_GHAST_WARN: SoundEnum = SoundEnum::EntityGhastWarn;
    pub const ENTITY_GLOW_ITEM_FRAME_ADD_ITEM: SoundEnum = SoundEnum::EntityGlowItemFrameAddItem;
    pub const ENTITY_GLOW_ITEM_FRAME_BREAK: SoundEnum = SoundEnum::EntityGlowItemFrameBreak;
    pub const ENTITY_GLOW_ITEM_FRAME_PLACE: SoundEnum = SoundEnum::EntityGlowItemFramePlace;
    pub const ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM: SoundEnum =
        SoundEnum::EntityGlowItemFrameRemoveItem;
    pub const ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM: SoundEnum =
        SoundEnum::EntityGlowItemFrameRotateItem;
    pub const ENTITY_GLOW_SQUID_AMBIENT: SoundEnum = SoundEnum::EntityGlowSquidAmbient;
    pub const ENTITY_GLOW_SQUID_DEATH: SoundEnum = SoundEnum::EntityGlowSquidDeath;
    pub const ENTITY_GLOW_SQUID_HURT: SoundEnum = SoundEnum::EntityGlowSquidHurt;
    pub const ENTITY_GLOW_SQUID_SQUIRT: SoundEnum = SoundEnum::EntityGlowSquidSquirt;
    pub const ENTITY_GOAT_AMBIENT: SoundEnum = SoundEnum::EntityGoatAmbient;
    pub const ENTITY_GOAT_DEATH: SoundEnum = SoundEnum::EntityGoatDeath;
    pub const ENTITY_GOAT_EAT: SoundEnum = SoundEnum::EntityGoatEat;
    pub const ENTITY_GOAT_HORN_BREAK: SoundEnum = SoundEnum::EntityGoatHornBreak;
    pub const ENTITY_GOAT_HURT: SoundEnum = SoundEnum::EntityGoatHurt;
    pub const ENTITY_GOAT_LONG_JUMP: SoundEnum = SoundEnum::EntityGoatLongJump;
    pub const ENTITY_GOAT_MILK: SoundEnum = SoundEnum::EntityGoatMilk;
    pub const ENTITY_GOAT_PREPARE_RAM: SoundEnum = SoundEnum::EntityGoatPrepareRam;
    pub const ENTITY_GOAT_RAM_IMPACT: SoundEnum = SoundEnum::EntityGoatRamImpact;
    pub const ENTITY_GOAT_SCREAMING_AMBIENT: SoundEnum = SoundEnum::EntityGoatScreamingAmbient;
    pub const ENTITY_GOAT_SCREAMING_DEATH: SoundEnum = SoundEnum::EntityGoatScreamingDeath;
    pub const ENTITY_GOAT_SCREAMING_EAT: SoundEnum = SoundEnum::EntityGoatScreamingEat;
    pub const ENTITY_GOAT_SCREAMING_HORN_BREAK: SoundEnum = SoundEnum::EntityGoatScreamingHornBreak;
    pub const ENTITY_GOAT_SCREAMING_HURT: SoundEnum = SoundEnum::EntityGoatScreamingHurt;
    pub const ENTITY_GOAT_SCREAMING_LONG_JUMP: SoundEnum = SoundEnum::EntityGoatScreamingLongJump;
    pub const ENTITY_GOAT_SCREAMING_MILK: SoundEnum = SoundEnum::EntityGoatScreamingMilk;
    pub const ENTITY_GOAT_SCREAMING_PREPARE_RAM: SoundEnum =
        SoundEnum::EntityGoatScreamingPrepareRam;
    pub const ENTITY_GOAT_SCREAMING_RAM_IMPACT: SoundEnum = SoundEnum::EntityGoatScreamingRamImpact;
    pub const ENTITY_GOAT_STEP: SoundEnum = SoundEnum::EntityGoatStep;
    pub const ENTITY_GUARDIAN_AMBIENT: SoundEnum = SoundEnum::EntityGuardianAmbient;
    pub const ENTITY_GUARDIAN_AMBIENT_LAND: SoundEnum = SoundEnum::EntityGuardianAmbientLand;
    pub const ENTITY_GUARDIAN_ATTACK: SoundEnum = SoundEnum::EntityGuardianAttack;
    pub const ENTITY_GUARDIAN_DEATH: SoundEnum = SoundEnum::EntityGuardianDeath;
    pub const ENTITY_GUARDIAN_DEATH_LAND: SoundEnum = SoundEnum::EntityGuardianDeathLand;
    pub const ENTITY_GUARDIAN_FLOP: SoundEnum = SoundEnum::EntityGuardianFlop;
    pub const ENTITY_GUARDIAN_HURT: SoundEnum = SoundEnum::EntityGuardianHurt;
    pub const ENTITY_GUARDIAN_HURT_LAND: SoundEnum = SoundEnum::EntityGuardianHurtLand;
    pub const ENTITY_HOGLIN_AMBIENT: SoundEnum = SoundEnum::EntityHoglinAmbient;
    pub const ENTITY_HOGLIN_ANGRY: SoundEnum = SoundEnum::EntityHoglinAngry;
    pub const ENTITY_HOGLIN_ATTACK: SoundEnum = SoundEnum::EntityHoglinAttack;
    pub const ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED: SoundEnum =
        SoundEnum::EntityHoglinConvertedToZombified;
    pub const ENTITY_HOGLIN_DEATH: SoundEnum = SoundEnum::EntityHoglinDeath;
    pub const ENTITY_HOGLIN_HURT: SoundEnum = SoundEnum::EntityHoglinHurt;
    pub const ENTITY_HOGLIN_RETREAT: SoundEnum = SoundEnum::EntityHoglinRetreat;
    pub const ENTITY_HOGLIN_STEP: SoundEnum = SoundEnum::EntityHoglinStep;
    pub const ENTITY_HORSE_AMBIENT: SoundEnum = SoundEnum::EntityHorseAmbient;
    pub const ENTITY_HORSE_ANGRY: SoundEnum = SoundEnum::EntityHorseAngry;
    pub const ENTITY_HORSE_ARMOR: SoundEnum = SoundEnum::EntityHorseArmor;
    pub const ENTITY_HORSE_BREATHE: SoundEnum = SoundEnum::EntityHorseBreathe;
    pub const ENTITY_HORSE_DEATH: SoundEnum = SoundEnum::EntityHorseDeath;
    pub const ENTITY_HORSE_EAT: SoundEnum = SoundEnum::EntityHorseEat;
    pub const ENTITY_HORSE_GALLOP: SoundEnum = SoundEnum::EntityHorseGallop;
    pub const ENTITY_HORSE_HURT: SoundEnum = SoundEnum::EntityHorseHurt;
    pub const ENTITY_HORSE_JUMP: SoundEnum = SoundEnum::EntityHorseJump;
    pub const ENTITY_HORSE_LAND: SoundEnum = SoundEnum::EntityHorseLand;
    pub const ENTITY_HORSE_SADDLE: SoundEnum = SoundEnum::EntityHorseSaddle;
    pub const ENTITY_HORSE_STEP: SoundEnum = SoundEnum::EntityHorseStep;
    pub const ENTITY_HORSE_STEP_WOOD: SoundEnum = SoundEnum::EntityHorseStepWood;
    pub const ENTITY_HOSTILE_BIG_FALL: SoundEnum = SoundEnum::EntityHostileBigFall;
    pub const ENTITY_HOSTILE_DEATH: SoundEnum = SoundEnum::EntityHostileDeath;
    pub const ENTITY_HOSTILE_HURT: SoundEnum = SoundEnum::EntityHostileHurt;
    pub const ENTITY_HOSTILE_SMALL_FALL: SoundEnum = SoundEnum::EntityHostileSmallFall;
    pub const ENTITY_HOSTILE_SPLASH: SoundEnum = SoundEnum::EntityHostileSplash;
    pub const ENTITY_HOSTILE_SWIM: SoundEnum = SoundEnum::EntityHostileSwim;
    pub const ENTITY_HUSK_AMBIENT: SoundEnum = SoundEnum::EntityHuskAmbient;
    pub const ENTITY_HUSK_CONVERTED_TO_ZOMBIE: SoundEnum = SoundEnum::EntityHuskConvertedToZombie;
    pub const ENTITY_HUSK_DEATH: SoundEnum = SoundEnum::EntityHuskDeath;
    pub const ENTITY_HUSK_HURT: SoundEnum = SoundEnum::EntityHuskHurt;
    pub const ENTITY_HUSK_STEP: SoundEnum = SoundEnum::EntityHuskStep;
    pub const ENTITY_ILLUSIONER_AMBIENT: SoundEnum = SoundEnum::EntityIllusionerAmbient;
    pub const ENTITY_ILLUSIONER_CAST_SPELL: SoundEnum = SoundEnum::EntityIllusionerCastSpell;
    pub const ENTITY_ILLUSIONER_DEATH: SoundEnum = SoundEnum::EntityIllusionerDeath;
    pub const ENTITY_ILLUSIONER_HURT: SoundEnum = SoundEnum::EntityIllusionerHurt;
    pub const ENTITY_ILLUSIONER_MIRROR_MOVE: SoundEnum = SoundEnum::EntityIllusionerMirrorMove;
    pub const ENTITY_ILLUSIONER_PREPARE_BLINDNESS: SoundEnum =
        SoundEnum::EntityIllusionerPrepareBlindness;
    pub const ENTITY_ILLUSIONER_PREPARE_MIRROR: SoundEnum =
        SoundEnum::EntityIllusionerPrepareMirror;
    pub const ENTITY_IRON_GOLEM_ATTACK: SoundEnum = SoundEnum::EntityIronGolemAttack;
    pub const ENTITY_IRON_GOLEM_DAMAGE: SoundEnum = SoundEnum::EntityIronGolemDamage;
    pub const ENTITY_IRON_GOLEM_DEATH: SoundEnum = SoundEnum::EntityIronGolemDeath;
    pub const ENTITY_IRON_GOLEM_HURT: SoundEnum = SoundEnum::EntityIronGolemHurt;
    pub const ENTITY_IRON_GOLEM_REPAIR: SoundEnum = SoundEnum::EntityIronGolemRepair;
    pub const ENTITY_IRON_GOLEM_STEP: SoundEnum = SoundEnum::EntityIronGolemStep;
    pub const ENTITY_ITEM_BREAK: SoundEnum = SoundEnum::EntityItemBreak;
    pub const ENTITY_ITEM_FRAME_ADD_ITEM: SoundEnum = SoundEnum::EntityItemFrameAddItem;
    pub const ENTITY_ITEM_FRAME_BREAK: SoundEnum = SoundEnum::EntityItemFrameBreak;
    pub const ENTITY_ITEM_FRAME_PLACE: SoundEnum = SoundEnum::EntityItemFramePlace;
    pub const ENTITY_ITEM_FRAME_REMOVE_ITEM: SoundEnum = SoundEnum::EntityItemFrameRemoveItem;
    pub const ENTITY_ITEM_FRAME_ROTATE_ITEM: SoundEnum = SoundEnum::EntityItemFrameRotateItem;
    pub const ENTITY_ITEM_PICKUP: SoundEnum = SoundEnum::EntityItemPickup;
    pub const ENTITY_LEASH_KNOT_BREAK: SoundEnum = SoundEnum::EntityLeashKnotBreak;
    pub const ENTITY_LEASH_KNOT_PLACE: SoundEnum = SoundEnum::EntityLeashKnotPlace;
    pub const ENTITY_LIGHTNING_BOLT_IMPACT: SoundEnum = SoundEnum::EntityLightningBoltImpact;
    pub const ENTITY_LIGHTNING_BOLT_THUNDER: SoundEnum = SoundEnum::EntityLightningBoltThunder;
    pub const ENTITY_LINGERING_POTION_THROW: SoundEnum = SoundEnum::EntityLingeringPotionThrow;
    pub const ENTITY_LLAMA_AMBIENT: SoundEnum = SoundEnum::EntityLlamaAmbient;
    pub const ENTITY_LLAMA_ANGRY: SoundEnum = SoundEnum::EntityLlamaAngry;
    pub const ENTITY_LLAMA_CHEST: SoundEnum = SoundEnum::EntityLlamaChest;
    pub const ENTITY_LLAMA_DEATH: SoundEnum = SoundEnum::EntityLlamaDeath;
    pub const ENTITY_LLAMA_EAT: SoundEnum = SoundEnum::EntityLlamaEat;
    pub const ENTITY_LLAMA_HURT: SoundEnum = SoundEnum::EntityLlamaHurt;
    pub const ENTITY_LLAMA_SPIT: SoundEnum = SoundEnum::EntityLlamaSpit;
    pub const ENTITY_LLAMA_STEP: SoundEnum = SoundEnum::EntityLlamaStep;
    pub const ENTITY_LLAMA_SWAG: SoundEnum = SoundEnum::EntityLlamaSwag;
    pub const ENTITY_MAGMA_CUBE_DEATH: SoundEnum = SoundEnum::EntityMagmaCubeDeath;
    pub const ENTITY_MAGMA_CUBE_DEATH_SMALL: SoundEnum = SoundEnum::EntityMagmaCubeDeathSmall;
    pub const ENTITY_MAGMA_CUBE_HURT: SoundEnum = SoundEnum::EntityMagmaCubeHurt;
    pub const ENTITY_MAGMA_CUBE_HURT_SMALL: SoundEnum = SoundEnum::EntityMagmaCubeHurtSmall;
    pub const ENTITY_MAGMA_CUBE_JUMP: SoundEnum = SoundEnum::EntityMagmaCubeJump;
    pub const ENTITY_MAGMA_CUBE_SQUISH: SoundEnum = SoundEnum::EntityMagmaCubeSquish;
    pub const ENTITY_MAGMA_CUBE_SQUISH_SMALL: SoundEnum = SoundEnum::EntityMagmaCubeSquishSmall;
    pub const ENTITY_MINECART_INSIDE: SoundEnum = SoundEnum::EntityMinecartInside;
    pub const ENTITY_MINECART_INSIDE_UNDERWATER: SoundEnum =
        SoundEnum::EntityMinecartInsideUnderwater;
    pub const ENTITY_MINECART_RIDING: SoundEnum = SoundEnum::EntityMinecartRiding;
    pub const ENTITY_MOOSHROOM_CONVERT: SoundEnum = SoundEnum::EntityMooshroomConvert;
    pub const ENTITY_MOOSHROOM_EAT: SoundEnum = SoundEnum::EntityMooshroomEat;
    pub const ENTITY_MOOSHROOM_MILK: SoundEnum = SoundEnum::EntityMooshroomMilk;
    pub const ENTITY_MOOSHROOM_SHEAR: SoundEnum = SoundEnum::EntityMooshroomShear;
    pub const ENTITY_MOOSHROOM_SUSPICIOUS_MILK: SoundEnum =
        SoundEnum::EntityMooshroomSuspiciousMilk;
    pub const ENTITY_MULE_AMBIENT: SoundEnum = SoundEnum::EntityMuleAmbient;
    pub const ENTITY_MULE_ANGRY: SoundEnum = SoundEnum::EntityMuleAngry;
    pub const ENTITY_MULE_CHEST: SoundEnum = SoundEnum::EntityMuleChest;
    pub const ENTITY_MULE_DEATH: SoundEnum = SoundEnum::EntityMuleDeath;
    pub const ENTITY_MULE_EAT: SoundEnum = SoundEnum::EntityMuleEat;
    pub const ENTITY_MULE_HURT: SoundEnum = SoundEnum::EntityMuleHurt;
    pub const ENTITY_OCELOT_AMBIENT: SoundEnum = SoundEnum::EntityOcelotAmbient;
    pub const ENTITY_OCELOT_DEATH: SoundEnum = SoundEnum::EntityOcelotDeath;
    pub const ENTITY_OCELOT_HURT: SoundEnum = SoundEnum::EntityOcelotHurt;
    pub const ENTITY_PAINTING_BREAK: SoundEnum = SoundEnum::EntityPaintingBreak;
    pub const ENTITY_PAINTING_PLACE: SoundEnum = SoundEnum::EntityPaintingPlace;
    pub const ENTITY_PANDA_AGGRESSIVE_AMBIENT: SoundEnum = SoundEnum::EntityPandaAggressiveAmbient;
    pub const ENTITY_PANDA_AMBIENT: SoundEnum = SoundEnum::EntityPandaAmbient;
    pub const ENTITY_PANDA_BITE: SoundEnum = SoundEnum::EntityPandaBite;
    pub const ENTITY_PANDA_CANT_BREED: SoundEnum = SoundEnum::EntityPandaCantBreed;
    pub const ENTITY_PANDA_DEATH: SoundEnum = SoundEnum::EntityPandaDeath;
    pub const ENTITY_PANDA_EAT: SoundEnum = SoundEnum::EntityPandaEat;
    pub const ENTITY_PANDA_HURT: SoundEnum = SoundEnum::EntityPandaHurt;
    pub const ENTITY_PANDA_PRE_SNEEZE: SoundEnum = SoundEnum::EntityPandaPreSneeze;
    pub const ENTITY_PANDA_SNEEZE: SoundEnum = SoundEnum::EntityPandaSneeze;
    pub const ENTITY_PANDA_STEP: SoundEnum = SoundEnum::EntityPandaStep;
    pub const ENTITY_PANDA_WORRIED_AMBIENT: SoundEnum = SoundEnum::EntityPandaWorriedAmbient;
    pub const ENTITY_PARROT_AMBIENT: SoundEnum = SoundEnum::EntityParrotAmbient;
    pub const ENTITY_PARROT_DEATH: SoundEnum = SoundEnum::EntityParrotDeath;
    pub const ENTITY_PARROT_EAT: SoundEnum = SoundEnum::EntityParrotEat;
    pub const ENTITY_PARROT_FLY: SoundEnum = SoundEnum::EntityParrotFly;
    pub const ENTITY_PARROT_HURT: SoundEnum = SoundEnum::EntityParrotHurt;
    pub const ENTITY_PARROT_IMITATE_BLAZE: SoundEnum = SoundEnum::EntityParrotImitateBlaze;
    pub const ENTITY_PARROT_IMITATE_CREEPER: SoundEnum = SoundEnum::EntityParrotImitateCreeper;
    pub const ENTITY_PARROT_IMITATE_DROWNED: SoundEnum = SoundEnum::EntityParrotImitateDrowned;
    pub const ENTITY_PARROT_IMITATE_ELDER_GUARDIAN: SoundEnum =
        SoundEnum::EntityParrotImitateElderGuardian;
    pub const ENTITY_PARROT_IMITATE_ENDERMITE: SoundEnum = SoundEnum::EntityParrotImitateEndermite;
    pub const ENTITY_PARROT_IMITATE_ENDER_DRAGON: SoundEnum =
        SoundEnum::EntityParrotImitateEnderDragon;
    pub const ENTITY_PARROT_IMITATE_EVOKER: SoundEnum = SoundEnum::EntityParrotImitateEvoker;
    pub const ENTITY_PARROT_IMITATE_GHAST: SoundEnum = SoundEnum::EntityParrotImitateGhast;
    pub const ENTITY_PARROT_IMITATE_GUARDIAN: SoundEnum = SoundEnum::EntityParrotImitateGuardian;
    pub const ENTITY_PARROT_IMITATE_HOGLIN: SoundEnum = SoundEnum::EntityParrotImitateHoglin;
    pub const ENTITY_PARROT_IMITATE_HUSK: SoundEnum = SoundEnum::EntityParrotImitateHusk;
    pub const ENTITY_PARROT_IMITATE_ILLUSIONER: SoundEnum =
        SoundEnum::EntityParrotImitateIllusioner;
    pub const ENTITY_PARROT_IMITATE_MAGMA_CUBE: SoundEnum = SoundEnum::EntityParrotImitateMagmaCube;
    pub const ENTITY_PARROT_IMITATE_PHANTOM: SoundEnum = SoundEnum::EntityParrotImitatePhantom;
    pub const ENTITY_PARROT_IMITATE_PIGLIN: SoundEnum = SoundEnum::EntityParrotImitatePiglin;
    pub const ENTITY_PARROT_IMITATE_PIGLIN_BRUTE: SoundEnum =
        SoundEnum::EntityParrotImitatePiglinBrute;
    pub const ENTITY_PARROT_IMITATE_PILLAGER: SoundEnum = SoundEnum::EntityParrotImitatePillager;
    pub const ENTITY_PARROT_IMITATE_RAVAGER: SoundEnum = SoundEnum::EntityParrotImitateRavager;
    pub const ENTITY_PARROT_IMITATE_SHULKER: SoundEnum = SoundEnum::EntityParrotImitateShulker;
    pub const ENTITY_PARROT_IMITATE_SILVERFISH: SoundEnum =
        SoundEnum::EntityParrotImitateSilverfish;
    pub const ENTITY_PARROT_IMITATE_SKELETON: SoundEnum = SoundEnum::EntityParrotImitateSkeleton;
    pub const ENTITY_PARROT_IMITATE_SLIME: SoundEnum = SoundEnum::EntityParrotImitateSlime;
    pub const ENTITY_PARROT_IMITATE_SPIDER: SoundEnum = SoundEnum::EntityParrotImitateSpider;
    pub const ENTITY_PARROT_IMITATE_STRAY: SoundEnum = SoundEnum::EntityParrotImitateStray;
    pub const ENTITY_PARROT_IMITATE_VEX: SoundEnum = SoundEnum::EntityParrotImitateVex;
    pub const ENTITY_PARROT_IMITATE_VINDICATOR: SoundEnum =
        SoundEnum::EntityParrotImitateVindicator;
    pub const ENTITY_PARROT_IMITATE_WARDEN: SoundEnum = SoundEnum::EntityParrotImitateWarden;
    pub const ENTITY_PARROT_IMITATE_WITCH: SoundEnum = SoundEnum::EntityParrotImitateWitch;
    pub const ENTITY_PARROT_IMITATE_WITHER: SoundEnum = SoundEnum::EntityParrotImitateWither;
    pub const ENTITY_PARROT_IMITATE_WITHER_SKELETON: SoundEnum =
        SoundEnum::EntityParrotImitateWitherSkeleton;
    pub const ENTITY_PARROT_IMITATE_ZOGLIN: SoundEnum = SoundEnum::EntityParrotImitateZoglin;
    pub const ENTITY_PARROT_IMITATE_ZOMBIE: SoundEnum = SoundEnum::EntityParrotImitateZombie;
    pub const ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER: SoundEnum =
        SoundEnum::EntityParrotImitateZombieVillager;
    pub const ENTITY_PARROT_STEP: SoundEnum = SoundEnum::EntityParrotStep;
    pub const ENTITY_PHANTOM_AMBIENT: SoundEnum = SoundEnum::EntityPhantomAmbient;
    pub const ENTITY_PHANTOM_BITE: SoundEnum = SoundEnum::EntityPhantomBite;
    pub const ENTITY_PHANTOM_DEATH: SoundEnum = SoundEnum::EntityPhantomDeath;
    pub const ENTITY_PHANTOM_FLAP: SoundEnum = SoundEnum::EntityPhantomFlap;
    pub const ENTITY_PHANTOM_HURT: SoundEnum = SoundEnum::EntityPhantomHurt;
    pub const ENTITY_PHANTOM_SWOOP: SoundEnum = SoundEnum::EntityPhantomSwoop;
    pub const ENTITY_PIGLIN_ADMIRING_ITEM: SoundEnum = SoundEnum::EntityPiglinAdmiringItem;
    pub const ENTITY_PIGLIN_AMBIENT: SoundEnum = SoundEnum::EntityPiglinAmbient;
    pub const ENTITY_PIGLIN_ANGRY: SoundEnum = SoundEnum::EntityPiglinAngry;
    pub const ENTITY_PIGLIN_BRUTE_AMBIENT: SoundEnum = SoundEnum::EntityPiglinBruteAmbient;
    pub const ENTITY_PIGLIN_BRUTE_ANGRY: SoundEnum = SoundEnum::EntityPiglinBruteAngry;
    pub const ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED: SoundEnum =
        SoundEnum::EntityPiglinBruteConvertedToZombified;
    pub const ENTITY_PIGLIN_BRUTE_DEATH: SoundEnum = SoundEnum::EntityPiglinBruteDeath;
    pub const ENTITY_PIGLIN_BRUTE_HURT: SoundEnum = SoundEnum::EntityPiglinBruteHurt;
    pub const ENTITY_PIGLIN_BRUTE_STEP: SoundEnum = SoundEnum::EntityPiglinBruteStep;
    pub const ENTITY_PIGLIN_CELEBRATE: SoundEnum = SoundEnum::EntityPiglinCelebrate;
    pub const ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED: SoundEnum =
        SoundEnum::EntityPiglinConvertedToZombified;
    pub const ENTITY_PIGLIN_DEATH: SoundEnum = SoundEnum::EntityPiglinDeath;
    pub const ENTITY_PIGLIN_HURT: SoundEnum = SoundEnum::EntityPiglinHurt;
    pub const ENTITY_PIGLIN_JEALOUS: SoundEnum = SoundEnum::EntityPiglinJealous;
    pub const ENTITY_PIGLIN_RETREAT: SoundEnum = SoundEnum::EntityPiglinRetreat;
    pub const ENTITY_PIGLIN_STEP: SoundEnum = SoundEnum::EntityPiglinStep;
    pub const ENTITY_PIG_AMBIENT: SoundEnum = SoundEnum::EntityPigAmbient;
    pub const ENTITY_PIG_DEATH: SoundEnum = SoundEnum::EntityPigDeath;
    pub const ENTITY_PIG_HURT: SoundEnum = SoundEnum::EntityPigHurt;
    pub const ENTITY_PIG_SADDLE: SoundEnum = SoundEnum::EntityPigSaddle;
    pub const ENTITY_PIG_STEP: SoundEnum = SoundEnum::EntityPigStep;
    pub const ENTITY_PILLAGER_AMBIENT: SoundEnum = SoundEnum::EntityPillagerAmbient;
    pub const ENTITY_PILLAGER_CELEBRATE: SoundEnum = SoundEnum::EntityPillagerCelebrate;
    pub const ENTITY_PILLAGER_DEATH: SoundEnum = SoundEnum::EntityPillagerDeath;
    pub const ENTITY_PILLAGER_HURT: SoundEnum = SoundEnum::EntityPillagerHurt;
    pub const ENTITY_PLAYER_ATTACK_CRIT: SoundEnum = SoundEnum::EntityPlayerAttackCrit;
    pub const ENTITY_PLAYER_ATTACK_KNOCKBACK: SoundEnum = SoundEnum::EntityPlayerAttackKnockback;
    pub const ENTITY_PLAYER_ATTACK_NODAMAGE: SoundEnum = SoundEnum::EntityPlayerAttackNodamage;
    pub const ENTITY_PLAYER_ATTACK_STRONG: SoundEnum = SoundEnum::EntityPlayerAttackStrong;
    pub const ENTITY_PLAYER_ATTACK_SWEEP: SoundEnum = SoundEnum::EntityPlayerAttackSweep;
    pub const ENTITY_PLAYER_ATTACK_WEAK: SoundEnum = SoundEnum::EntityPlayerAttackWeak;
    pub const ENTITY_PLAYER_BIG_FALL: SoundEnum = SoundEnum::EntityPlayerBigFall;
    pub const ENTITY_PLAYER_BREATH: SoundEnum = SoundEnum::EntityPlayerBreath;
    pub const ENTITY_PLAYER_BURP: SoundEnum = SoundEnum::EntityPlayerBurp;
    pub const ENTITY_PLAYER_DEATH: SoundEnum = SoundEnum::EntityPlayerDeath;
    pub const ENTITY_PLAYER_HURT: SoundEnum = SoundEnum::EntityPlayerHurt;
    pub const ENTITY_PLAYER_HURT_DROWN: SoundEnum = SoundEnum::EntityPlayerHurtDrown;
    pub const ENTITY_PLAYER_HURT_FREEZE: SoundEnum = SoundEnum::EntityPlayerHurtFreeze;
    pub const ENTITY_PLAYER_HURT_ON_FIRE: SoundEnum = SoundEnum::EntityPlayerHurtOnFire;
    pub const ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH: SoundEnum =
        SoundEnum::EntityPlayerHurtSweetBerryBush;
    pub const ENTITY_PLAYER_LEVELUP: SoundEnum = SoundEnum::EntityPlayerLevelup;
    pub const ENTITY_PLAYER_SMALL_FALL: SoundEnum = SoundEnum::EntityPlayerSmallFall;
    pub const ENTITY_PLAYER_SPLASH: SoundEnum = SoundEnum::EntityPlayerSplash;
    pub const ENTITY_PLAYER_SPLASH_HIGH_SPEED: SoundEnum = SoundEnum::EntityPlayerSplashHighSpeed;
    pub const ENTITY_PLAYER_SWIM: SoundEnum = SoundEnum::EntityPlayerSwim;
    pub const ENTITY_POLAR_BEAR_AMBIENT: SoundEnum = SoundEnum::EntityPolarBearAmbient;
    pub const ENTITY_POLAR_BEAR_AMBIENT_BABY: SoundEnum = SoundEnum::EntityPolarBearAmbientBaby;
    pub const ENTITY_POLAR_BEAR_DEATH: SoundEnum = SoundEnum::EntityPolarBearDeath;
    pub const ENTITY_POLAR_BEAR_HURT: SoundEnum = SoundEnum::EntityPolarBearHurt;
    pub const ENTITY_POLAR_BEAR_STEP: SoundEnum = SoundEnum::EntityPolarBearStep;
    pub const ENTITY_POLAR_BEAR_WARNING: SoundEnum = SoundEnum::EntityPolarBearWarning;
    pub const ENTITY_PUFFER_FISH_AMBIENT: SoundEnum = SoundEnum::EntityPufferFishAmbient;
    pub const ENTITY_PUFFER_FISH_BLOW_OUT: SoundEnum = SoundEnum::EntityPufferFishBlowOut;
    pub const ENTITY_PUFFER_FISH_BLOW_UP: SoundEnum = SoundEnum::EntityPufferFishBlowUp;
    pub const ENTITY_PUFFER_FISH_DEATH: SoundEnum = SoundEnum::EntityPufferFishDeath;
    pub const ENTITY_PUFFER_FISH_FLOP: SoundEnum = SoundEnum::EntityPufferFishFlop;
    pub const ENTITY_PUFFER_FISH_HURT: SoundEnum = SoundEnum::EntityPufferFishHurt;
    pub const ENTITY_PUFFER_FISH_STING: SoundEnum = SoundEnum::EntityPufferFishSting;
    pub const ENTITY_RABBIT_AMBIENT: SoundEnum = SoundEnum::EntityRabbitAmbient;
    pub const ENTITY_RABBIT_ATTACK: SoundEnum = SoundEnum::EntityRabbitAttack;
    pub const ENTITY_RABBIT_DEATH: SoundEnum = SoundEnum::EntityRabbitDeath;
    pub const ENTITY_RABBIT_HURT: SoundEnum = SoundEnum::EntityRabbitHurt;
    pub const ENTITY_RABBIT_JUMP: SoundEnum = SoundEnum::EntityRabbitJump;
    pub const ENTITY_RAVAGER_AMBIENT: SoundEnum = SoundEnum::EntityRavagerAmbient;
    pub const ENTITY_RAVAGER_ATTACK: SoundEnum = SoundEnum::EntityRavagerAttack;
    pub const ENTITY_RAVAGER_CELEBRATE: SoundEnum = SoundEnum::EntityRavagerCelebrate;
    pub const ENTITY_RAVAGER_DEATH: SoundEnum = SoundEnum::EntityRavagerDeath;
    pub const ENTITY_RAVAGER_HURT: SoundEnum = SoundEnum::EntityRavagerHurt;
    pub const ENTITY_RAVAGER_ROAR: SoundEnum = SoundEnum::EntityRavagerRoar;
    pub const ENTITY_RAVAGER_STEP: SoundEnum = SoundEnum::EntityRavagerStep;
    pub const ENTITY_RAVAGER_STUNNED: SoundEnum = SoundEnum::EntityRavagerStunned;
    pub const ENTITY_SALMON_AMBIENT: SoundEnum = SoundEnum::EntitySalmonAmbient;
    pub const ENTITY_SALMON_DEATH: SoundEnum = SoundEnum::EntitySalmonDeath;
    pub const ENTITY_SALMON_FLOP: SoundEnum = SoundEnum::EntitySalmonFlop;
    pub const ENTITY_SALMON_HURT: SoundEnum = SoundEnum::EntitySalmonHurt;
    pub const ENTITY_SHEEP_AMBIENT: SoundEnum = SoundEnum::EntitySheepAmbient;
    pub const ENTITY_SHEEP_DEATH: SoundEnum = SoundEnum::EntitySheepDeath;
    pub const ENTITY_SHEEP_HURT: SoundEnum = SoundEnum::EntitySheepHurt;
    pub const ENTITY_SHEEP_SHEAR: SoundEnum = SoundEnum::EntitySheepShear;
    pub const ENTITY_SHEEP_STEP: SoundEnum = SoundEnum::EntitySheepStep;
    pub const ENTITY_SHULKER_AMBIENT: SoundEnum = SoundEnum::EntityShulkerAmbient;
    pub const ENTITY_SHULKER_BULLET_HIT: SoundEnum = SoundEnum::EntityShulkerBulletHit;
    pub const ENTITY_SHULKER_BULLET_HURT: SoundEnum = SoundEnum::EntityShulkerBulletHurt;
    pub const ENTITY_SHULKER_CLOSE: SoundEnum = SoundEnum::EntityShulkerClose;
    pub const ENTITY_SHULKER_DEATH: SoundEnum = SoundEnum::EntityShulkerDeath;
    pub const ENTITY_SHULKER_HURT: SoundEnum = SoundEnum::EntityShulkerHurt;
    pub const ENTITY_SHULKER_HURT_CLOSED: SoundEnum = SoundEnum::EntityShulkerHurtClosed;
    pub const ENTITY_SHULKER_OPEN: SoundEnum = SoundEnum::EntityShulkerOpen;
    pub const ENTITY_SHULKER_SHOOT: SoundEnum = SoundEnum::EntityShulkerShoot;
    pub const ENTITY_SHULKER_TELEPORT: SoundEnum = SoundEnum::EntityShulkerTeleport;
    pub const ENTITY_SILVERFISH_AMBIENT: SoundEnum = SoundEnum::EntitySilverfishAmbient;
    pub const ENTITY_SILVERFISH_DEATH: SoundEnum = SoundEnum::EntitySilverfishDeath;
    pub const ENTITY_SILVERFISH_HURT: SoundEnum = SoundEnum::EntitySilverfishHurt;
    pub const ENTITY_SILVERFISH_STEP: SoundEnum = SoundEnum::EntitySilverfishStep;
    pub const ENTITY_SKELETON_AMBIENT: SoundEnum = SoundEnum::EntitySkeletonAmbient;
    pub const ENTITY_SKELETON_CONVERTED_TO_STRAY: SoundEnum =
        SoundEnum::EntitySkeletonConvertedToStray;
    pub const ENTITY_SKELETON_DEATH: SoundEnum = SoundEnum::EntitySkeletonDeath;
    pub const ENTITY_SKELETON_HORSE_AMBIENT: SoundEnum = SoundEnum::EntitySkeletonHorseAmbient;
    pub const ENTITY_SKELETON_HORSE_AMBIENT_WATER: SoundEnum =
        SoundEnum::EntitySkeletonHorseAmbientWater;
    pub const ENTITY_SKELETON_HORSE_DEATH: SoundEnum = SoundEnum::EntitySkeletonHorseDeath;
    pub const ENTITY_SKELETON_HORSE_GALLOP_WATER: SoundEnum =
        SoundEnum::EntitySkeletonHorseGallopWater;
    pub const ENTITY_SKELETON_HORSE_HURT: SoundEnum = SoundEnum::EntitySkeletonHorseHurt;
    pub const ENTITY_SKELETON_HORSE_JUMP_WATER: SoundEnum = SoundEnum::EntitySkeletonHorseJumpWater;
    pub const ENTITY_SKELETON_HORSE_STEP_WATER: SoundEnum = SoundEnum::EntitySkeletonHorseStepWater;
    pub const ENTITY_SKELETON_HORSE_SWIM: SoundEnum = SoundEnum::EntitySkeletonHorseSwim;
    pub const ENTITY_SKELETON_HURT: SoundEnum = SoundEnum::EntitySkeletonHurt;
    pub const ENTITY_SKELETON_SHOOT: SoundEnum = SoundEnum::EntitySkeletonShoot;
    pub const ENTITY_SKELETON_STEP: SoundEnum = SoundEnum::EntitySkeletonStep;
    pub const ENTITY_SLIME_ATTACK: SoundEnum = SoundEnum::EntitySlimeAttack;
    pub const ENTITY_SLIME_DEATH: SoundEnum = SoundEnum::EntitySlimeDeath;
    pub const ENTITY_SLIME_DEATH_SMALL: SoundEnum = SoundEnum::EntitySlimeDeathSmall;
    pub const ENTITY_SLIME_HURT: SoundEnum = SoundEnum::EntitySlimeHurt;
    pub const ENTITY_SLIME_HURT_SMALL: SoundEnum = SoundEnum::EntitySlimeHurtSmall;
    pub const ENTITY_SLIME_JUMP: SoundEnum = SoundEnum::EntitySlimeJump;
    pub const ENTITY_SLIME_JUMP_SMALL: SoundEnum = SoundEnum::EntitySlimeJumpSmall;
    pub const ENTITY_SLIME_SQUISH: SoundEnum = SoundEnum::EntitySlimeSquish;
    pub const ENTITY_SLIME_SQUISH_SMALL: SoundEnum = SoundEnum::EntitySlimeSquishSmall;
    pub const ENTITY_SNIFFER_DEATH: SoundEnum = SoundEnum::EntitySnifferDeath;
    pub const ENTITY_SNIFFER_DIGGING: SoundEnum = SoundEnum::EntitySnifferDigging;
    pub const ENTITY_SNIFFER_DIGGING_STOP: SoundEnum = SoundEnum::EntitySnifferDiggingStop;
    pub const ENTITY_SNIFFER_DROP_SEED: SoundEnum = SoundEnum::EntitySnifferDropSeed;
    pub const ENTITY_SNIFFER_EAT: SoundEnum = SoundEnum::EntitySnifferEat;
    pub const ENTITY_SNIFFER_HAPPY: SoundEnum = SoundEnum::EntitySnifferHappy;
    pub const ENTITY_SNIFFER_HURT: SoundEnum = SoundEnum::EntitySnifferHurt;
    pub const ENTITY_SNIFFER_IDLE: SoundEnum = SoundEnum::EntitySnifferIdle;
    pub const ENTITY_SNIFFER_SCENTING: SoundEnum = SoundEnum::EntitySnifferScenting;
    pub const ENTITY_SNIFFER_SEARCHING: SoundEnum = SoundEnum::EntitySnifferSearching;
    pub const ENTITY_SNIFFER_SNIFFING: SoundEnum = SoundEnum::EntitySnifferSniffing;
    pub const ENTITY_SNIFFER_STEP: SoundEnum = SoundEnum::EntitySnifferStep;
    pub const ENTITY_SNOWBALL_THROW: SoundEnum = SoundEnum::EntitySnowballThrow;
    pub const ENTITY_SNOW_GOLEM_AMBIENT: SoundEnum = SoundEnum::EntitySnowGolemAmbient;
    pub const ENTITY_SNOW_GOLEM_DEATH: SoundEnum = SoundEnum::EntitySnowGolemDeath;
    pub const ENTITY_SNOW_GOLEM_HURT: SoundEnum = SoundEnum::EntitySnowGolemHurt;
    pub const ENTITY_SNOW_GOLEM_SHEAR: SoundEnum = SoundEnum::EntitySnowGolemShear;
    pub const ENTITY_SNOW_GOLEM_SHOOT: SoundEnum = SoundEnum::EntitySnowGolemShoot;
    pub const ENTITY_SPIDER_AMBIENT: SoundEnum = SoundEnum::EntitySpiderAmbient;
    pub const ENTITY_SPIDER_DEATH: SoundEnum = SoundEnum::EntitySpiderDeath;
    pub const ENTITY_SPIDER_HURT: SoundEnum = SoundEnum::EntitySpiderHurt;
    pub const ENTITY_SPIDER_STEP: SoundEnum = SoundEnum::EntitySpiderStep;
    pub const ENTITY_SPLASH_POTION_BREAK: SoundEnum = SoundEnum::EntitySplashPotionBreak;
    pub const ENTITY_SPLASH_POTION_THROW: SoundEnum = SoundEnum::EntitySplashPotionThrow;
    pub const ENTITY_SQUID_AMBIENT: SoundEnum = SoundEnum::EntitySquidAmbient;
    pub const ENTITY_SQUID_DEATH: SoundEnum = SoundEnum::EntitySquidDeath;
    pub const ENTITY_SQUID_HURT: SoundEnum = SoundEnum::EntitySquidHurt;
    pub const ENTITY_SQUID_SQUIRT: SoundEnum = SoundEnum::EntitySquidSquirt;
    pub const ENTITY_STRAY_AMBIENT: SoundEnum = SoundEnum::EntityStrayAmbient;
    pub const ENTITY_STRAY_DEATH: SoundEnum = SoundEnum::EntityStrayDeath;
    pub const ENTITY_STRAY_HURT: SoundEnum = SoundEnum::EntityStrayHurt;
    pub const ENTITY_STRAY_STEP: SoundEnum = SoundEnum::EntityStrayStep;
    pub const ENTITY_STRIDER_AMBIENT: SoundEnum = SoundEnum::EntityStriderAmbient;
    pub const ENTITY_STRIDER_DEATH: SoundEnum = SoundEnum::EntityStriderDeath;
    pub const ENTITY_STRIDER_EAT: SoundEnum = SoundEnum::EntityStriderEat;
    pub const ENTITY_STRIDER_HAPPY: SoundEnum = SoundEnum::EntityStriderHappy;
    pub const ENTITY_STRIDER_HURT: SoundEnum = SoundEnum::EntityStriderHurt;
    pub const ENTITY_STRIDER_RETREAT: SoundEnum = SoundEnum::EntityStriderRetreat;
    pub const ENTITY_STRIDER_SADDLE: SoundEnum = SoundEnum::EntityStriderSaddle;
    pub const ENTITY_STRIDER_STEP: SoundEnum = SoundEnum::EntityStriderStep;
    pub const ENTITY_STRIDER_STEP_LAVA: SoundEnum = SoundEnum::EntityStriderStepLava;
    pub const ENTITY_TADPOLE_DEATH: SoundEnum = SoundEnum::EntityTadpoleDeath;
    pub const ENTITY_TADPOLE_FLOP: SoundEnum = SoundEnum::EntityTadpoleFlop;
    pub const ENTITY_TADPOLE_GROW_UP: SoundEnum = SoundEnum::EntityTadpoleGrowUp;
    pub const ENTITY_TADPOLE_HURT: SoundEnum = SoundEnum::EntityTadpoleHurt;
    pub const ENTITY_TNT_PRIMED: SoundEnum = SoundEnum::EntityTntPrimed;
    pub const ENTITY_TROPICAL_FISH_AMBIENT: SoundEnum = SoundEnum::EntityTropicalFishAmbient;
    pub const ENTITY_TROPICAL_FISH_DEATH: SoundEnum = SoundEnum::EntityTropicalFishDeath;
    pub const ENTITY_TROPICAL_FISH_FLOP: SoundEnum = SoundEnum::EntityTropicalFishFlop;
    pub const ENTITY_TROPICAL_FISH_HURT: SoundEnum = SoundEnum::EntityTropicalFishHurt;
    pub const ENTITY_TURTLE_AMBIENT_LAND: SoundEnum = SoundEnum::EntityTurtleAmbientLand;
    pub const ENTITY_TURTLE_DEATH: SoundEnum = SoundEnum::EntityTurtleDeath;
    pub const ENTITY_TURTLE_DEATH_BABY: SoundEnum = SoundEnum::EntityTurtleDeathBaby;
    pub const ENTITY_TURTLE_EGG_BREAK: SoundEnum = SoundEnum::EntityTurtleEggBreak;
    pub const ENTITY_TURTLE_EGG_CRACK: SoundEnum = SoundEnum::EntityTurtleEggCrack;
    pub const ENTITY_TURTLE_EGG_HATCH: SoundEnum = SoundEnum::EntityTurtleEggHatch;
    pub const ENTITY_TURTLE_HURT: SoundEnum = SoundEnum::EntityTurtleHurt;
    pub const ENTITY_TURTLE_HURT_BABY: SoundEnum = SoundEnum::EntityTurtleHurtBaby;
    pub const ENTITY_TURTLE_LAY_EGG: SoundEnum = SoundEnum::EntityTurtleLayEgg;
    pub const ENTITY_TURTLE_SHAMBLE: SoundEnum = SoundEnum::EntityTurtleShamble;
    pub const ENTITY_TURTLE_SHAMBLE_BABY: SoundEnum = SoundEnum::EntityTurtleShambleBaby;
    pub const ENTITY_TURTLE_SWIM: SoundEnum = SoundEnum::EntityTurtleSwim;
    pub const ENTITY_VEX_AMBIENT: SoundEnum = SoundEnum::EntityVexAmbient;
    pub const ENTITY_VEX_CHARGE: SoundEnum = SoundEnum::EntityVexCharge;
    pub const ENTITY_VEX_DEATH: SoundEnum = SoundEnum::EntityVexDeath;
    pub const ENTITY_VEX_HURT: SoundEnum = SoundEnum::EntityVexHurt;
    pub const ENTITY_VILLAGER_AMBIENT: SoundEnum = SoundEnum::EntityVillagerAmbient;
    pub const ENTITY_VILLAGER_CELEBRATE: SoundEnum = SoundEnum::EntityVillagerCelebrate;
    pub const ENTITY_VILLAGER_DEATH: SoundEnum = SoundEnum::EntityVillagerDeath;
    pub const ENTITY_VILLAGER_HURT: SoundEnum = SoundEnum::EntityVillagerHurt;
    pub const ENTITY_VILLAGER_NO: SoundEnum = SoundEnum::EntityVillagerNo;
    pub const ENTITY_VILLAGER_TRADE: SoundEnum = SoundEnum::EntityVillagerTrade;
    pub const ENTITY_VILLAGER_WORK_ARMORER: SoundEnum = SoundEnum::EntityVillagerWorkArmorer;
    pub const ENTITY_VILLAGER_WORK_BUTCHER: SoundEnum = SoundEnum::EntityVillagerWorkButcher;
    pub const ENTITY_VILLAGER_WORK_CARTOGRAPHER: SoundEnum =
        SoundEnum::EntityVillagerWorkCartographer;
    pub const ENTITY_VILLAGER_WORK_CLERIC: SoundEnum = SoundEnum::EntityVillagerWorkCleric;
    pub const ENTITY_VILLAGER_WORK_FARMER: SoundEnum = SoundEnum::EntityVillagerWorkFarmer;
    pub const ENTITY_VILLAGER_WORK_FISHERMAN: SoundEnum = SoundEnum::EntityVillagerWorkFisherman;
    pub const ENTITY_VILLAGER_WORK_FLETCHER: SoundEnum = SoundEnum::EntityVillagerWorkFletcher;
    pub const ENTITY_VILLAGER_WORK_LEATHERWORKER: SoundEnum =
        SoundEnum::EntityVillagerWorkLeatherworker;
    pub const ENTITY_VILLAGER_WORK_LIBRARIAN: SoundEnum = SoundEnum::EntityVillagerWorkLibrarian;
    pub const ENTITY_VILLAGER_WORK_MASON: SoundEnum = SoundEnum::EntityVillagerWorkMason;
    pub const ENTITY_VILLAGER_WORK_SHEPHERD: SoundEnum = SoundEnum::EntityVillagerWorkShepherd;
    pub const ENTITY_VILLAGER_WORK_TOOLSMITH: SoundEnum = SoundEnum::EntityVillagerWorkToolsmith;
    pub const ENTITY_VILLAGER_WORK_WEAPONSMITH: SoundEnum =
        SoundEnum::EntityVillagerWorkWeaponsmith;
    pub const ENTITY_VILLAGER_YES: SoundEnum = SoundEnum::EntityVillagerYes;
    pub const ENTITY_VINDICATOR_AMBIENT: SoundEnum = SoundEnum::EntityVindicatorAmbient;
    pub const ENTITY_VINDICATOR_CELEBRATE: SoundEnum = SoundEnum::EntityVindicatorCelebrate;
    pub const ENTITY_VINDICATOR_DEATH: SoundEnum = SoundEnum::EntityVindicatorDeath;
    pub const ENTITY_VINDICATOR_HURT: SoundEnum = SoundEnum::EntityVindicatorHurt;
    pub const ENTITY_WANDERING_TRADER_AMBIENT: SoundEnum = SoundEnum::EntityWanderingTraderAmbient;
    pub const ENTITY_WANDERING_TRADER_DEATH: SoundEnum = SoundEnum::EntityWanderingTraderDeath;
    pub const ENTITY_WANDERING_TRADER_DISAPPEARED: SoundEnum =
        SoundEnum::EntityWanderingTraderDisappeared;
    pub const ENTITY_WANDERING_TRADER_DRINK_MILK: SoundEnum =
        SoundEnum::EntityWanderingTraderDrinkMilk;
    pub const ENTITY_WANDERING_TRADER_DRINK_POTION: SoundEnum =
        SoundEnum::EntityWanderingTraderDrinkPotion;
    pub const ENTITY_WANDERING_TRADER_HURT: SoundEnum = SoundEnum::EntityWanderingTraderHurt;
    pub const ENTITY_WANDERING_TRADER_NO: SoundEnum = SoundEnum::EntityWanderingTraderNo;
    pub const ENTITY_WANDERING_TRADER_REAPPEARED: SoundEnum =
        SoundEnum::EntityWanderingTraderReappeared;
    pub const ENTITY_WANDERING_TRADER_TRADE: SoundEnum = SoundEnum::EntityWanderingTraderTrade;
    pub const ENTITY_WANDERING_TRADER_YES: SoundEnum = SoundEnum::EntityWanderingTraderYes;
    pub const ENTITY_WARDEN_AGITATED: SoundEnum = SoundEnum::EntityWardenAgitated;
    pub const ENTITY_WARDEN_AMBIENT: SoundEnum = SoundEnum::EntityWardenAmbient;
    pub const ENTITY_WARDEN_ANGRY: SoundEnum = SoundEnum::EntityWardenAngry;
    pub const ENTITY_WARDEN_ATTACK_IMPACT: SoundEnum = SoundEnum::EntityWardenAttackImpact;
    pub const ENTITY_WARDEN_DEATH: SoundEnum = SoundEnum::EntityWardenDeath;
    pub const ENTITY_WARDEN_DIG: SoundEnum = SoundEnum::EntityWardenDig;
    pub const ENTITY_WARDEN_EMERGE: SoundEnum = SoundEnum::EntityWardenEmerge;
    pub const ENTITY_WARDEN_HEARTBEAT: SoundEnum = SoundEnum::EntityWardenHeartbeat;
    pub const ENTITY_WARDEN_HURT: SoundEnum = SoundEnum::EntityWardenHurt;
    pub const ENTITY_WARDEN_LISTENING: SoundEnum = SoundEnum::EntityWardenListening;
    pub const ENTITY_WARDEN_LISTENING_ANGRY: SoundEnum = SoundEnum::EntityWardenListeningAngry;
    pub const ENTITY_WARDEN_NEARBY_CLOSE: SoundEnum = SoundEnum::EntityWardenNearbyClose;
    pub const ENTITY_WARDEN_NEARBY_CLOSER: SoundEnum = SoundEnum::EntityWardenNearbyCloser;
    pub const ENTITY_WARDEN_NEARBY_CLOSEST: SoundEnum = SoundEnum::EntityWardenNearbyClosest;
    pub const ENTITY_WARDEN_ROAR: SoundEnum = SoundEnum::EntityWardenRoar;
    pub const ENTITY_WARDEN_SNIFF: SoundEnum = SoundEnum::EntityWardenSniff;
    pub const ENTITY_WARDEN_SONIC_BOOM: SoundEnum = SoundEnum::EntityWardenSonicBoom;
    pub const ENTITY_WARDEN_SONIC_CHARGE: SoundEnum = SoundEnum::EntityWardenSonicCharge;
    pub const ENTITY_WARDEN_STEP: SoundEnum = SoundEnum::EntityWardenStep;
    pub const ENTITY_WARDEN_TENDRIL_CLICKS: SoundEnum = SoundEnum::EntityWardenTendrilClicks;
    pub const ENTITY_WITCH_AMBIENT: SoundEnum = SoundEnum::EntityWitchAmbient;
    pub const ENTITY_WITCH_CELEBRATE: SoundEnum = SoundEnum::EntityWitchCelebrate;
    pub const ENTITY_WITCH_DEATH: SoundEnum = SoundEnum::EntityWitchDeath;
    pub const ENTITY_WITCH_DRINK: SoundEnum = SoundEnum::EntityWitchDrink;
    pub const ENTITY_WITCH_HURT: SoundEnum = SoundEnum::EntityWitchHurt;
    pub const ENTITY_WITCH_THROW: SoundEnum = SoundEnum::EntityWitchThrow;
    pub const ENTITY_WITHER_AMBIENT: SoundEnum = SoundEnum::EntityWitherAmbient;
    pub const ENTITY_WITHER_BREAK_BLOCK: SoundEnum = SoundEnum::EntityWitherBreakBlock;
    pub const ENTITY_WITHER_DEATH: SoundEnum = SoundEnum::EntityWitherDeath;
    pub const ENTITY_WITHER_HURT: SoundEnum = SoundEnum::EntityWitherHurt;
    pub const ENTITY_WITHER_SHOOT: SoundEnum = SoundEnum::EntityWitherShoot;
    pub const ENTITY_WITHER_SKELETON_AMBIENT: SoundEnum = SoundEnum::EntityWitherSkeletonAmbient;
    pub const ENTITY_WITHER_SKELETON_DEATH: SoundEnum = SoundEnum::EntityWitherSkeletonDeath;
    pub const ENTITY_WITHER_SKELETON_HURT: SoundEnum = SoundEnum::EntityWitherSkeletonHurt;
    pub const ENTITY_WITHER_SKELETON_STEP: SoundEnum = SoundEnum::EntityWitherSkeletonStep;
    pub const ENTITY_WITHER_SPAWN: SoundEnum = SoundEnum::EntityWitherSpawn;
    pub const ENTITY_WOLF_AMBIENT: SoundEnum = SoundEnum::EntityWolfAmbient;
    pub const ENTITY_WOLF_DEATH: SoundEnum = SoundEnum::EntityWolfDeath;
    pub const ENTITY_WOLF_GROWL: SoundEnum = SoundEnum::EntityWolfGrowl;
    pub const ENTITY_WOLF_HOWL: SoundEnum = SoundEnum::EntityWolfHowl;
    pub const ENTITY_WOLF_HURT: SoundEnum = SoundEnum::EntityWolfHurt;
    pub const ENTITY_WOLF_PANT: SoundEnum = SoundEnum::EntityWolfPant;
    pub const ENTITY_WOLF_SHAKE: SoundEnum = SoundEnum::EntityWolfShake;
    pub const ENTITY_WOLF_STEP: SoundEnum = SoundEnum::EntityWolfStep;
    pub const ENTITY_WOLF_WHINE: SoundEnum = SoundEnum::EntityWolfWhine;
    pub const ENTITY_ZOGLIN_AMBIENT: SoundEnum = SoundEnum::EntityZoglinAmbient;
    pub const ENTITY_ZOGLIN_ANGRY: SoundEnum = SoundEnum::EntityZoglinAngry;
    pub const ENTITY_ZOGLIN_ATTACK: SoundEnum = SoundEnum::EntityZoglinAttack;
    pub const ENTITY_ZOGLIN_DEATH: SoundEnum = SoundEnum::EntityZoglinDeath;
    pub const ENTITY_ZOGLIN_HURT: SoundEnum = SoundEnum::EntityZoglinHurt;
    pub const ENTITY_ZOGLIN_STEP: SoundEnum = SoundEnum::EntityZoglinStep;
    pub const ENTITY_ZOMBIE_AMBIENT: SoundEnum = SoundEnum::EntityZombieAmbient;
    pub const ENTITY_ZOMBIE_ATTACK_IRON_DOOR: SoundEnum = SoundEnum::EntityZombieAttackIronDoor;
    pub const ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR: SoundEnum = SoundEnum::EntityZombieAttackWoodenDoor;
    pub const ENTITY_ZOMBIE_BREAK_WOODEN_DOOR: SoundEnum = SoundEnum::EntityZombieBreakWoodenDoor;
    pub const ENTITY_ZOMBIE_CONVERTED_TO_DROWNED: SoundEnum =
        SoundEnum::EntityZombieConvertedToDrowned;
    pub const ENTITY_ZOMBIE_DEATH: SoundEnum = SoundEnum::EntityZombieDeath;
    pub const ENTITY_ZOMBIE_DESTROY_EGG: SoundEnum = SoundEnum::EntityZombieDestroyEgg;
    pub const ENTITY_ZOMBIE_HORSE_AMBIENT: SoundEnum = SoundEnum::EntityZombieHorseAmbient;
    pub const ENTITY_ZOMBIE_HORSE_DEATH: SoundEnum = SoundEnum::EntityZombieHorseDeath;
    pub const ENTITY_ZOMBIE_HORSE_HURT: SoundEnum = SoundEnum::EntityZombieHorseHurt;
    pub const ENTITY_ZOMBIE_HURT: SoundEnum = SoundEnum::EntityZombieHurt;
    pub const ENTITY_ZOMBIE_INFECT: SoundEnum = SoundEnum::EntityZombieInfect;
    pub const ENTITY_ZOMBIE_STEP: SoundEnum = SoundEnum::EntityZombieStep;
    pub const ENTITY_ZOMBIE_VILLAGER_AMBIENT: SoundEnum = SoundEnum::EntityZombieVillagerAmbient;
    pub const ENTITY_ZOMBIE_VILLAGER_CONVERTED: SoundEnum =
        SoundEnum::EntityZombieVillagerConverted;
    pub const ENTITY_ZOMBIE_VILLAGER_CURE: SoundEnum = SoundEnum::EntityZombieVillagerCure;
    pub const ENTITY_ZOMBIE_VILLAGER_DEATH: SoundEnum = SoundEnum::EntityZombieVillagerDeath;
    pub const ENTITY_ZOMBIE_VILLAGER_HURT: SoundEnum = SoundEnum::EntityZombieVillagerHurt;
    pub const ENTITY_ZOMBIE_VILLAGER_STEP: SoundEnum = SoundEnum::EntityZombieVillagerStep;
    pub const ENTITY_ZOMBIFIED_PIGLIN_AMBIENT: SoundEnum = SoundEnum::EntityZombifiedPiglinAmbient;
    pub const ENTITY_ZOMBIFIED_PIGLIN_ANGRY: SoundEnum = SoundEnum::EntityZombifiedPiglinAngry;
    pub const ENTITY_ZOMBIFIED_PIGLIN_DEATH: SoundEnum = SoundEnum::EntityZombifiedPiglinDeath;
    pub const ENTITY_ZOMBIFIED_PIGLIN_HURT: SoundEnum = SoundEnum::EntityZombifiedPiglinHurt;
    pub const EVENT_RAID_HORN: SoundEnum = SoundEnum::EventRaidHorn;
    pub const INTENTIONALLY_EMPTY: SoundEnum = SoundEnum::IntentionallyEmpty;
    pub const ITEM_ARMOR_EQUIP_CHAIN: SoundEnum = SoundEnum::ItemArmorEquipChain;
    pub const ITEM_ARMOR_EQUIP_DIAMOND: SoundEnum = SoundEnum::ItemArmorEquipDiamond;
    pub const ITEM_ARMOR_EQUIP_ELYTRA: SoundEnum = SoundEnum::ItemArmorEquipElytra;
    pub const ITEM_ARMOR_EQUIP_GENERIC: SoundEnum = SoundEnum::ItemArmorEquipGeneric;
    pub const ITEM_ARMOR_EQUIP_GOLD: SoundEnum = SoundEnum::ItemArmorEquipGold;
    pub const ITEM_ARMOR_EQUIP_IRON: SoundEnum = SoundEnum::ItemArmorEquipIron;
    pub const ITEM_ARMOR_EQUIP_LEATHER: SoundEnum = SoundEnum::ItemArmorEquipLeather;
    pub const ITEM_ARMOR_EQUIP_NETHERITE: SoundEnum = SoundEnum::ItemArmorEquipNetherite;
    pub const ITEM_ARMOR_EQUIP_TURTLE: SoundEnum = SoundEnum::ItemArmorEquipTurtle;
    pub const ITEM_AXE_SCRAPE: SoundEnum = SoundEnum::ItemAxeScrape;
    pub const ITEM_AXE_STRIP: SoundEnum = SoundEnum::ItemAxeStrip;
    pub const ITEM_AXE_WAX_OFF: SoundEnum = SoundEnum::ItemAxeWaxOff;
    pub const ITEM_BONE_MEAL_USE: SoundEnum = SoundEnum::ItemBoneMealUse;
    pub const ITEM_BOOK_PAGE_TURN: SoundEnum = SoundEnum::ItemBookPageTurn;
    pub const ITEM_BOOK_PUT: SoundEnum = SoundEnum::ItemBookPut;
    pub const ITEM_BOTTLE_EMPTY: SoundEnum = SoundEnum::ItemBottleEmpty;
    pub const ITEM_BOTTLE_FILL: SoundEnum = SoundEnum::ItemBottleFill;
    pub const ITEM_BOTTLE_FILL_DRAGONBREATH: SoundEnum = SoundEnum::ItemBottleFillDragonbreath;
    pub const ITEM_BRUSH_BRUSHING_GENERIC: SoundEnum = SoundEnum::ItemBrushBrushingGeneric;
    pub const ITEM_BRUSH_BRUSHING_GRAVEL: SoundEnum = SoundEnum::ItemBrushBrushingGravel;
    pub const ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE: SoundEnum =
        SoundEnum::ItemBrushBrushingGravelComplete;
    pub const ITEM_BRUSH_BRUSHING_SAND: SoundEnum = SoundEnum::ItemBrushBrushingSand;
    pub const ITEM_BRUSH_BRUSHING_SAND_COMPLETE: SoundEnum =
        SoundEnum::ItemBrushBrushingSandComplete;
    pub const ITEM_BUCKET_EMPTY: SoundEnum = SoundEnum::ItemBucketEmpty;
    pub const ITEM_BUCKET_EMPTY_AXOLOTL: SoundEnum = SoundEnum::ItemBucketEmptyAxolotl;
    pub const ITEM_BUCKET_EMPTY_FISH: SoundEnum = SoundEnum::ItemBucketEmptyFish;
    pub const ITEM_BUCKET_EMPTY_LAVA: SoundEnum = SoundEnum::ItemBucketEmptyLava;
    pub const ITEM_BUCKET_EMPTY_POWDER_SNOW: SoundEnum = SoundEnum::ItemBucketEmptyPowderSnow;
    pub const ITEM_BUCKET_EMPTY_TADPOLE: SoundEnum = SoundEnum::ItemBucketEmptyTadpole;
    pub const ITEM_BUCKET_FILL: SoundEnum = SoundEnum::ItemBucketFill;
    pub const ITEM_BUCKET_FILL_AXOLOTL: SoundEnum = SoundEnum::ItemBucketFillAxolotl;
    pub const ITEM_BUCKET_FILL_FISH: SoundEnum = SoundEnum::ItemBucketFillFish;
    pub const ITEM_BUCKET_FILL_LAVA: SoundEnum = SoundEnum::ItemBucketFillLava;
    pub const ITEM_BUCKET_FILL_POWDER_SNOW: SoundEnum = SoundEnum::ItemBucketFillPowderSnow;
    pub const ITEM_BUCKET_FILL_TADPOLE: SoundEnum = SoundEnum::ItemBucketFillTadpole;
    pub const ITEM_BUNDLE_DROP_CONTENTS: SoundEnum = SoundEnum::ItemBundleDropContents;
    pub const ITEM_BUNDLE_INSERT: SoundEnum = SoundEnum::ItemBundleInsert;
    pub const ITEM_BUNDLE_REMOVE_ONE: SoundEnum = SoundEnum::ItemBundleRemoveOne;
    pub const ITEM_CHORUS_FRUIT_TELEPORT: SoundEnum = SoundEnum::ItemChorusFruitTeleport;
    pub const ITEM_CROP_PLANT: SoundEnum = SoundEnum::ItemCropPlant;
    pub const ITEM_CROSSBOW_HIT: SoundEnum = SoundEnum::ItemCrossbowHit;
    pub const ITEM_CROSSBOW_LOADING_END: SoundEnum = SoundEnum::ItemCrossbowLoadingEnd;
    pub const ITEM_CROSSBOW_LOADING_MIDDLE: SoundEnum = SoundEnum::ItemCrossbowLoadingMiddle;
    pub const ITEM_CROSSBOW_LOADING_START: SoundEnum = SoundEnum::ItemCrossbowLoadingStart;
    pub const ITEM_CROSSBOW_QUICK_CHARGE_1: SoundEnum = SoundEnum::ItemCrossbowQuickCharge1;
    pub const ITEM_CROSSBOW_QUICK_CHARGE_2: SoundEnum = SoundEnum::ItemCrossbowQuickCharge2;
    pub const ITEM_CROSSBOW_QUICK_CHARGE_3: SoundEnum = SoundEnum::ItemCrossbowQuickCharge3;
    pub const ITEM_CROSSBOW_SHOOT: SoundEnum = SoundEnum::ItemCrossbowShoot;
    pub const ITEM_DYE_USE: SoundEnum = SoundEnum::ItemDyeUse;
    pub const ITEM_ELYTRA_FLYING: SoundEnum = SoundEnum::ItemElytraFlying;
    pub const ITEM_FIRECHARGE_USE: SoundEnum = SoundEnum::ItemFirechargeUse;
    pub const ITEM_FLINTANDSTEEL_USE: SoundEnum = SoundEnum::ItemFlintandsteelUse;
    pub const ITEM_GLOW_INK_SAC_USE: SoundEnum = SoundEnum::ItemGlowInkSacUse;
    pub const ITEM_GOAT_HORN_PLAY: SoundEnum = SoundEnum::ItemGoatHornPlay;
    pub const ITEM_GOAT_HORN_SOUND_0: SoundEnum = SoundEnum::ItemGoatHornSound0;
    pub const ITEM_GOAT_HORN_SOUND_1: SoundEnum = SoundEnum::ItemGoatHornSound1;
    pub const ITEM_GOAT_HORN_SOUND_2: SoundEnum = SoundEnum::ItemGoatHornSound2;
    pub const ITEM_GOAT_HORN_SOUND_3: SoundEnum = SoundEnum::ItemGoatHornSound3;
    pub const ITEM_GOAT_HORN_SOUND_4: SoundEnum = SoundEnum::ItemGoatHornSound4;
    pub const ITEM_GOAT_HORN_SOUND_5: SoundEnum = SoundEnum::ItemGoatHornSound5;
    pub const ITEM_GOAT_HORN_SOUND_6: SoundEnum = SoundEnum::ItemGoatHornSound6;
    pub const ITEM_GOAT_HORN_SOUND_7: SoundEnum = SoundEnum::ItemGoatHornSound7;
    pub const ITEM_HOE_TILL: SoundEnum = SoundEnum::ItemHoeTill;
    pub const ITEM_HONEYCOMB_WAX_ON: SoundEnum = SoundEnum::ItemHoneycombWaxOn;
    pub const ITEM_HONEY_BOTTLE_DRINK: SoundEnum = SoundEnum::ItemHoneyBottleDrink;
    pub const ITEM_INK_SAC_USE: SoundEnum = SoundEnum::ItemInkSacUse;
    pub const ITEM_LODESTONE_COMPASS_LOCK: SoundEnum = SoundEnum::ItemLodestoneCompassLock;
    pub const ITEM_NETHER_WART_PLANT: SoundEnum = SoundEnum::ItemNetherWartPlant;
    pub const ITEM_SHIELD_BLOCK: SoundEnum = SoundEnum::ItemShieldBlock;
    pub const ITEM_SHIELD_BREAK: SoundEnum = SoundEnum::ItemShieldBreak;
    pub const ITEM_SHOVEL_FLATTEN: SoundEnum = SoundEnum::ItemShovelFlatten;
    pub const ITEM_SPYGLASS_STOP_USING: SoundEnum = SoundEnum::ItemSpyglassStopUsing;
    pub const ITEM_SPYGLASS_USE: SoundEnum = SoundEnum::ItemSpyglassUse;
    pub const ITEM_TOTEM_USE: SoundEnum = SoundEnum::ItemTotemUse;
    pub const ITEM_TRIDENT_HIT: SoundEnum = SoundEnum::ItemTridentHit;
    pub const ITEM_TRIDENT_HIT_GROUND: SoundEnum = SoundEnum::ItemTridentHitGround;
    pub const ITEM_TRIDENT_RETURN: SoundEnum = SoundEnum::ItemTridentReturn;
    pub const ITEM_TRIDENT_RIPTIDE_1: SoundEnum = SoundEnum::ItemTridentRiptide1;
    pub const ITEM_TRIDENT_RIPTIDE_2: SoundEnum = SoundEnum::ItemTridentRiptide2;
    pub const ITEM_TRIDENT_RIPTIDE_3: SoundEnum = SoundEnum::ItemTridentRiptide3;
    pub const ITEM_TRIDENT_THROW: SoundEnum = SoundEnum::ItemTridentThrow;
    pub const ITEM_TRIDENT_THUNDER: SoundEnum = SoundEnum::ItemTridentThunder;
    pub const MUSIC_CREATIVE: SoundEnum = SoundEnum::MusicCreative;
    pub const MUSIC_CREDITS: SoundEnum = SoundEnum::MusicCredits;
    pub const MUSIC_DISC_11: SoundEnum = SoundEnum::MusicDisc11;
    pub const MUSIC_DISC_13: SoundEnum = SoundEnum::MusicDisc13;
    pub const MUSIC_DISC_5: SoundEnum = SoundEnum::MusicDisc5;
    pub const MUSIC_DISC_BLOCKS: SoundEnum = SoundEnum::MusicDiscBlocks;
    pub const MUSIC_DISC_CAT: SoundEnum = SoundEnum::MusicDiscCat;
    pub const MUSIC_DISC_CHIRP: SoundEnum = SoundEnum::MusicDiscChirp;
    pub const MUSIC_DISC_FAR: SoundEnum = SoundEnum::MusicDiscFar;
    pub const MUSIC_DISC_MALL: SoundEnum = SoundEnum::MusicDiscMall;
    pub const MUSIC_DISC_MELLOHI: SoundEnum = SoundEnum::MusicDiscMellohi;
    pub const MUSIC_DISC_OTHERSIDE: SoundEnum = SoundEnum::MusicDiscOtherside;
    pub const MUSIC_DISC_PIGSTEP: SoundEnum = SoundEnum::MusicDiscPigstep;
    pub const MUSIC_DISC_RELIC: SoundEnum = SoundEnum::MusicDiscRelic;
    pub const MUSIC_DISC_STAL: SoundEnum = SoundEnum::MusicDiscStal;
    pub const MUSIC_DISC_STRAD: SoundEnum = SoundEnum::MusicDiscStrad;
    pub const MUSIC_DISC_WAIT: SoundEnum = SoundEnum::MusicDiscWait;
    pub const MUSIC_DISC_WARD: SoundEnum = SoundEnum::MusicDiscWard;
    pub const MUSIC_DRAGON: SoundEnum = SoundEnum::MusicDragon;
    pub const MUSIC_END: SoundEnum = SoundEnum::MusicEnd;
    pub const MUSIC_GAME: SoundEnum = SoundEnum::MusicGame;
    pub const MUSIC_MENU: SoundEnum = SoundEnum::MusicMenu;
    pub const MUSIC_NETHER_BASALT_DELTAS: SoundEnum = SoundEnum::MusicNetherBasaltDeltas;
    pub const MUSIC_NETHER_CRIMSON_FOREST: SoundEnum = SoundEnum::MusicNetherCrimsonForest;
    pub const MUSIC_NETHER_NETHER_WASTES: SoundEnum = SoundEnum::MusicNetherNetherWastes;
    pub const MUSIC_NETHER_SOUL_SAND_VALLEY: SoundEnum = SoundEnum::MusicNetherSoulSandValley;
    pub const MUSIC_NETHER_WARPED_FOREST: SoundEnum = SoundEnum::MusicNetherWarpedForest;
    pub const MUSIC_OVERWORLD_BADLANDS: SoundEnum = SoundEnum::MusicOverworldBadlands;
    pub const MUSIC_OVERWORLD_BAMBOO_JUNGLE: SoundEnum = SoundEnum::MusicOverworldBambooJungle;
    pub const MUSIC_OVERWORLD_CHERRY_GROVE: SoundEnum = SoundEnum::MusicOverworldCherryGrove;
    pub const MUSIC_OVERWORLD_DEEP_DARK: SoundEnum = SoundEnum::MusicOverworldDeepDark;
    pub const MUSIC_OVERWORLD_DESERT: SoundEnum = SoundEnum::MusicOverworldDesert;
    pub const MUSIC_OVERWORLD_DRIPSTONE_CAVES: SoundEnum = SoundEnum::MusicOverworldDripstoneCaves;
    pub const MUSIC_OVERWORLD_FLOWER_FOREST: SoundEnum = SoundEnum::MusicOverworldFlowerForest;
    pub const MUSIC_OVERWORLD_FOREST: SoundEnum = SoundEnum::MusicOverworldForest;
    pub const MUSIC_OVERWORLD_FROZEN_PEAKS: SoundEnum = SoundEnum::MusicOverworldFrozenPeaks;
    pub const MUSIC_OVERWORLD_GROVE: SoundEnum = SoundEnum::MusicOverworldGrove;
    pub const MUSIC_OVERWORLD_JAGGED_PEAKS: SoundEnum = SoundEnum::MusicOverworldJaggedPeaks;
    pub const MUSIC_OVERWORLD_JUNGLE: SoundEnum = SoundEnum::MusicOverworldJungle;
    pub const MUSIC_OVERWORLD_LUSH_CAVES: SoundEnum = SoundEnum::MusicOverworldLushCaves;
    pub const MUSIC_OVERWORLD_MEADOW: SoundEnum = SoundEnum::MusicOverworldMeadow;
    pub const MUSIC_OVERWORLD_OLD_GROWTH_TAIGA: SoundEnum = SoundEnum::MusicOverworldOldGrowthTaiga;
    pub const MUSIC_OVERWORLD_SNOWY_SLOPES: SoundEnum = SoundEnum::MusicOverworldSnowySlopes;
    pub const MUSIC_OVERWORLD_SPARSE_JUNGLE: SoundEnum = SoundEnum::MusicOverworldSparseJungle;
    pub const MUSIC_OVERWORLD_STONY_PEAKS: SoundEnum = SoundEnum::MusicOverworldStonyPeaks;
    pub const MUSIC_OVERWORLD_SWAMP: SoundEnum = SoundEnum::MusicOverworldSwamp;
    pub const MUSIC_UNDER_WATER: SoundEnum = SoundEnum::MusicUnderWater;
    pub const PARTICLE_SOUL_ESCAPE: SoundEnum = SoundEnum::ParticleSoulEscape;
    pub const UI_BUTTON_CLICK: SoundEnum = SoundEnum::UiButtonClick;
    pub const UI_CARTOGRAPHY_TABLE_TAKE_RESULT: SoundEnum = SoundEnum::UiCartographyTableTakeResult;
    pub const UI_LOOM_SELECT_PATTERN: SoundEnum = SoundEnum::UiLoomSelectPattern;
    pub const UI_LOOM_TAKE_RESULT: SoundEnum = SoundEnum::UiLoomTakeResult;
    pub const UI_STONECUTTER_SELECT_RECIPE: SoundEnum = SoundEnum::UiStonecutterSelectRecipe;
    pub const UI_STONECUTTER_TAKE_RESULT: SoundEnum = SoundEnum::UiStonecutterTakeResult;
    pub const UI_TOAST_CHALLENGE_COMPLETE: SoundEnum = SoundEnum::UiToastChallengeComplete;
    pub const UI_TOAST_IN: SoundEnum = SoundEnum::UiToastIn;
    pub const UI_TOAST_OUT: SoundEnum = SoundEnum::UiToastOut;
    pub const WEATHER_RAIN: SoundEnum = SoundEnum::WeatherRain;
    pub const WEATHER_RAIN_ABOVE: SoundEnum = SoundEnum::WeatherRainAbove;
    pub fn from_string(str: String) -> std::option::Option<SoundEnum> {
        match str.as_str() {
            "AMBIENT_BASALT_DELTAS_ADDITIONS" => Some(SoundEnum::AmbientBasaltDeltasAdditions),
            "AMBIENT_BASALT_DELTAS_LOOP" => Some(SoundEnum::AmbientBasaltDeltasLoop),
            "AMBIENT_BASALT_DELTAS_MOOD" => Some(SoundEnum::AmbientBasaltDeltasMood),
            "AMBIENT_CAVE" => Some(SoundEnum::AmbientCave),
            "AMBIENT_CRIMSON_FOREST_ADDITIONS" => Some(SoundEnum::AmbientCrimsonForestAdditions),
            "AMBIENT_CRIMSON_FOREST_LOOP" => Some(SoundEnum::AmbientCrimsonForestLoop),
            "AMBIENT_CRIMSON_FOREST_MOOD" => Some(SoundEnum::AmbientCrimsonForestMood),
            "AMBIENT_NETHER_WASTES_ADDITIONS" => Some(SoundEnum::AmbientNetherWastesAdditions),
            "AMBIENT_NETHER_WASTES_LOOP" => Some(SoundEnum::AmbientNetherWastesLoop),
            "AMBIENT_NETHER_WASTES_MOOD" => Some(SoundEnum::AmbientNetherWastesMood),
            "AMBIENT_SOUL_SAND_VALLEY_ADDITIONS" => Some(SoundEnum::AmbientSoulSandValleyAdditions),
            "AMBIENT_SOUL_SAND_VALLEY_LOOP" => Some(SoundEnum::AmbientSoulSandValleyLoop),
            "AMBIENT_SOUL_SAND_VALLEY_MOOD" => Some(SoundEnum::AmbientSoulSandValleyMood),
            "AMBIENT_UNDERWATER_ENTER" => Some(SoundEnum::AmbientUnderwaterEnter),
            "AMBIENT_UNDERWATER_EXIT" => Some(SoundEnum::AmbientUnderwaterExit),
            "AMBIENT_UNDERWATER_LOOP" => Some(SoundEnum::AmbientUnderwaterLoop),
            "AMBIENT_UNDERWATER_LOOP_ADDITIONS" => Some(SoundEnum::AmbientUnderwaterLoopAdditions),
            "AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE" => {
                Some(SoundEnum::AmbientUnderwaterLoopAdditionsRare)
            }
            "AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE" => {
                Some(SoundEnum::AmbientUnderwaterLoopAdditionsUltraRare)
            }
            "AMBIENT_WARPED_FOREST_ADDITIONS" => Some(SoundEnum::AmbientWarpedForestAdditions),
            "AMBIENT_WARPED_FOREST_LOOP" => Some(SoundEnum::AmbientWarpedForestLoop),
            "AMBIENT_WARPED_FOREST_MOOD" => Some(SoundEnum::AmbientWarpedForestMood),
            "BLOCK_AMETHYST_BLOCK_BREAK" => Some(SoundEnum::BlockAmethystBlockBreak),
            "BLOCK_AMETHYST_BLOCK_CHIME" => Some(SoundEnum::BlockAmethystBlockChime),
            "BLOCK_AMETHYST_BLOCK_FALL" => Some(SoundEnum::BlockAmethystBlockFall),
            "BLOCK_AMETHYST_BLOCK_HIT" => Some(SoundEnum::BlockAmethystBlockHit),
            "BLOCK_AMETHYST_BLOCK_PLACE" => Some(SoundEnum::BlockAmethystBlockPlace),
            "BLOCK_AMETHYST_BLOCK_RESONATE" => Some(SoundEnum::BlockAmethystBlockResonate),
            "BLOCK_AMETHYST_BLOCK_STEP" => Some(SoundEnum::BlockAmethystBlockStep),
            "BLOCK_AMETHYST_CLUSTER_BREAK" => Some(SoundEnum::BlockAmethystClusterBreak),
            "BLOCK_AMETHYST_CLUSTER_FALL" => Some(SoundEnum::BlockAmethystClusterFall),
            "BLOCK_AMETHYST_CLUSTER_HIT" => Some(SoundEnum::BlockAmethystClusterHit),
            "BLOCK_AMETHYST_CLUSTER_PLACE" => Some(SoundEnum::BlockAmethystClusterPlace),
            "BLOCK_AMETHYST_CLUSTER_STEP" => Some(SoundEnum::BlockAmethystClusterStep),
            "BLOCK_ANCIENT_DEBRIS_BREAK" => Some(SoundEnum::BlockAncientDebrisBreak),
            "BLOCK_ANCIENT_DEBRIS_FALL" => Some(SoundEnum::BlockAncientDebrisFall),
            "BLOCK_ANCIENT_DEBRIS_HIT" => Some(SoundEnum::BlockAncientDebrisHit),
            "BLOCK_ANCIENT_DEBRIS_PLACE" => Some(SoundEnum::BlockAncientDebrisPlace),
            "BLOCK_ANCIENT_DEBRIS_STEP" => Some(SoundEnum::BlockAncientDebrisStep),
            "BLOCK_ANVIL_BREAK" => Some(SoundEnum::BlockAnvilBreak),
            "BLOCK_ANVIL_DESTROY" => Some(SoundEnum::BlockAnvilDestroy),
            "BLOCK_ANVIL_FALL" => Some(SoundEnum::BlockAnvilFall),
            "BLOCK_ANVIL_HIT" => Some(SoundEnum::BlockAnvilHit),
            "BLOCK_ANVIL_LAND" => Some(SoundEnum::BlockAnvilLand),
            "BLOCK_ANVIL_PLACE" => Some(SoundEnum::BlockAnvilPlace),
            "BLOCK_ANVIL_STEP" => Some(SoundEnum::BlockAnvilStep),
            "BLOCK_ANVIL_USE" => Some(SoundEnum::BlockAnvilUse),
            "BLOCK_AZALEA_BREAK" => Some(SoundEnum::BlockAzaleaBreak),
            "BLOCK_AZALEA_FALL" => Some(SoundEnum::BlockAzaleaFall),
            "BLOCK_AZALEA_HIT" => Some(SoundEnum::BlockAzaleaHit),
            "BLOCK_AZALEA_LEAVES_BREAK" => Some(SoundEnum::BlockAzaleaLeavesBreak),
            "BLOCK_AZALEA_LEAVES_FALL" => Some(SoundEnum::BlockAzaleaLeavesFall),
            "BLOCK_AZALEA_LEAVES_HIT" => Some(SoundEnum::BlockAzaleaLeavesHit),
            "BLOCK_AZALEA_LEAVES_PLACE" => Some(SoundEnum::BlockAzaleaLeavesPlace),
            "BLOCK_AZALEA_LEAVES_STEP" => Some(SoundEnum::BlockAzaleaLeavesStep),
            "BLOCK_AZALEA_PLACE" => Some(SoundEnum::BlockAzaleaPlace),
            "BLOCK_AZALEA_STEP" => Some(SoundEnum::BlockAzaleaStep),
            "BLOCK_BAMBOO_BREAK" => Some(SoundEnum::BlockBambooBreak),
            "BLOCK_BAMBOO_FALL" => Some(SoundEnum::BlockBambooFall),
            "BLOCK_BAMBOO_HIT" => Some(SoundEnum::BlockBambooHit),
            "BLOCK_BAMBOO_PLACE" => Some(SoundEnum::BlockBambooPlace),
            "BLOCK_BAMBOO_SAPLING_BREAK" => Some(SoundEnum::BlockBambooSaplingBreak),
            "BLOCK_BAMBOO_SAPLING_HIT" => Some(SoundEnum::BlockBambooSaplingHit),
            "BLOCK_BAMBOO_SAPLING_PLACE" => Some(SoundEnum::BlockBambooSaplingPlace),
            "BLOCK_BAMBOO_STEP" => Some(SoundEnum::BlockBambooStep),
            "BLOCK_BAMBOO_WOOD_BREAK" => Some(SoundEnum::BlockBambooWoodBreak),
            "BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF" => Some(SoundEnum::BlockBambooWoodButtonClickOff),
            "BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON" => Some(SoundEnum::BlockBambooWoodButtonClickOn),
            "BLOCK_BAMBOO_WOOD_DOOR_CLOSE" => Some(SoundEnum::BlockBambooWoodDoorClose),
            "BLOCK_BAMBOO_WOOD_DOOR_OPEN" => Some(SoundEnum::BlockBambooWoodDoorOpen),
            "BLOCK_BAMBOO_WOOD_FALL" => Some(SoundEnum::BlockBambooWoodFall),
            "BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE" => Some(SoundEnum::BlockBambooWoodFenceGateClose),
            "BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN" => Some(SoundEnum::BlockBambooWoodFenceGateOpen),
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK" => {
                Some(SoundEnum::BlockBambooWoodHangingSignBreak)
            }
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL" => {
                Some(SoundEnum::BlockBambooWoodHangingSignFall)
            }
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT" => Some(SoundEnum::BlockBambooWoodHangingSignHit),
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE" => {
                Some(SoundEnum::BlockBambooWoodHangingSignPlace)
            }
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP" => {
                Some(SoundEnum::BlockBambooWoodHangingSignStep)
            }
            "BLOCK_BAMBOO_WOOD_HIT" => Some(SoundEnum::BlockBambooWoodHit),
            "BLOCK_BAMBOO_WOOD_PLACE" => Some(SoundEnum::BlockBambooWoodPlace),
            "BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockBambooWoodPressurePlateClickOff)
            }
            "BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockBambooWoodPressurePlateClickOn)
            }
            "BLOCK_BAMBOO_WOOD_STEP" => Some(SoundEnum::BlockBambooWoodStep),
            "BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE" => Some(SoundEnum::BlockBambooWoodTrapdoorClose),
            "BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN" => Some(SoundEnum::BlockBambooWoodTrapdoorOpen),
            "BLOCK_BARREL_CLOSE" => Some(SoundEnum::BlockBarrelClose),
            "BLOCK_BARREL_OPEN" => Some(SoundEnum::BlockBarrelOpen),
            "BLOCK_BASALT_BREAK" => Some(SoundEnum::BlockBasaltBreak),
            "BLOCK_BASALT_FALL" => Some(SoundEnum::BlockBasaltFall),
            "BLOCK_BASALT_HIT" => Some(SoundEnum::BlockBasaltHit),
            "BLOCK_BASALT_PLACE" => Some(SoundEnum::BlockBasaltPlace),
            "BLOCK_BASALT_STEP" => Some(SoundEnum::BlockBasaltStep),
            "BLOCK_BEACON_ACTIVATE" => Some(SoundEnum::BlockBeaconActivate),
            "BLOCK_BEACON_AMBIENT" => Some(SoundEnum::BlockBeaconAmbient),
            "BLOCK_BEACON_DEACTIVATE" => Some(SoundEnum::BlockBeaconDeactivate),
            "BLOCK_BEACON_POWER_SELECT" => Some(SoundEnum::BlockBeaconPowerSelect),
            "BLOCK_BEEHIVE_DRIP" => Some(SoundEnum::BlockBeehiveDrip),
            "BLOCK_BEEHIVE_ENTER" => Some(SoundEnum::BlockBeehiveEnter),
            "BLOCK_BEEHIVE_EXIT" => Some(SoundEnum::BlockBeehiveExit),
            "BLOCK_BEEHIVE_SHEAR" => Some(SoundEnum::BlockBeehiveShear),
            "BLOCK_BEEHIVE_WORK" => Some(SoundEnum::BlockBeehiveWork),
            "BLOCK_BELL_RESONATE" => Some(SoundEnum::BlockBellResonate),
            "BLOCK_BELL_USE" => Some(SoundEnum::BlockBellUse),
            "BLOCK_BIG_DRIPLEAF_BREAK" => Some(SoundEnum::BlockBigDripleafBreak),
            "BLOCK_BIG_DRIPLEAF_FALL" => Some(SoundEnum::BlockBigDripleafFall),
            "BLOCK_BIG_DRIPLEAF_HIT" => Some(SoundEnum::BlockBigDripleafHit),
            "BLOCK_BIG_DRIPLEAF_PLACE" => Some(SoundEnum::BlockBigDripleafPlace),
            "BLOCK_BIG_DRIPLEAF_STEP" => Some(SoundEnum::BlockBigDripleafStep),
            "BLOCK_BIG_DRIPLEAF_TILT_DOWN" => Some(SoundEnum::BlockBigDripleafTiltDown),
            "BLOCK_BIG_DRIPLEAF_TILT_UP" => Some(SoundEnum::BlockBigDripleafTiltUp),
            "BLOCK_BLASTFURNACE_FIRE_CRACKLE" => Some(SoundEnum::BlockBlastfurnaceFireCrackle),
            "BLOCK_BONE_BLOCK_BREAK" => Some(SoundEnum::BlockBoneBlockBreak),
            "BLOCK_BONE_BLOCK_FALL" => Some(SoundEnum::BlockBoneBlockFall),
            "BLOCK_BONE_BLOCK_HIT" => Some(SoundEnum::BlockBoneBlockHit),
            "BLOCK_BONE_BLOCK_PLACE" => Some(SoundEnum::BlockBoneBlockPlace),
            "BLOCK_BONE_BLOCK_STEP" => Some(SoundEnum::BlockBoneBlockStep),
            "BLOCK_BREWING_STAND_BREW" => Some(SoundEnum::BlockBrewingStandBrew),
            "BLOCK_BUBBLE_COLUMN_BUBBLE_POP" => Some(SoundEnum::BlockBubbleColumnBubblePop),
            "BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT" => {
                Some(SoundEnum::BlockBubbleColumnUpwardsAmbient)
            }
            "BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE" => Some(SoundEnum::BlockBubbleColumnUpwardsInside),
            "BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT" => {
                Some(SoundEnum::BlockBubbleColumnWhirlpoolAmbient)
            }
            "BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE" => {
                Some(SoundEnum::BlockBubbleColumnWhirlpoolInside)
            }
            "BLOCK_CAKE_ADD_CANDLE" => Some(SoundEnum::BlockCakeAddCandle),
            "BLOCK_CALCITE_BREAK" => Some(SoundEnum::BlockCalciteBreak),
            "BLOCK_CALCITE_FALL" => Some(SoundEnum::BlockCalciteFall),
            "BLOCK_CALCITE_HIT" => Some(SoundEnum::BlockCalciteHit),
            "BLOCK_CALCITE_PLACE" => Some(SoundEnum::BlockCalcitePlace),
            "BLOCK_CALCITE_STEP" => Some(SoundEnum::BlockCalciteStep),
            "BLOCK_CAMPFIRE_CRACKLE" => Some(SoundEnum::BlockCampfireCrackle),
            "BLOCK_CANDLE_AMBIENT" => Some(SoundEnum::BlockCandleAmbient),
            "BLOCK_CANDLE_BREAK" => Some(SoundEnum::BlockCandleBreak),
            "BLOCK_CANDLE_EXTINGUISH" => Some(SoundEnum::BlockCandleExtinguish),
            "BLOCK_CANDLE_FALL" => Some(SoundEnum::BlockCandleFall),
            "BLOCK_CANDLE_HIT" => Some(SoundEnum::BlockCandleHit),
            "BLOCK_CANDLE_PLACE" => Some(SoundEnum::BlockCandlePlace),
            "BLOCK_CANDLE_STEP" => Some(SoundEnum::BlockCandleStep),
            "BLOCK_CAVE_VINES_BREAK" => Some(SoundEnum::BlockCaveVinesBreak),
            "BLOCK_CAVE_VINES_FALL" => Some(SoundEnum::BlockCaveVinesFall),
            "BLOCK_CAVE_VINES_HIT" => Some(SoundEnum::BlockCaveVinesHit),
            "BLOCK_CAVE_VINES_PICK_BERRIES" => Some(SoundEnum::BlockCaveVinesPickBerries),
            "BLOCK_CAVE_VINES_PLACE" => Some(SoundEnum::BlockCaveVinesPlace),
            "BLOCK_CAVE_VINES_STEP" => Some(SoundEnum::BlockCaveVinesStep),
            "BLOCK_CHAIN_BREAK" => Some(SoundEnum::BlockChainBreak),
            "BLOCK_CHAIN_FALL" => Some(SoundEnum::BlockChainFall),
            "BLOCK_CHAIN_HIT" => Some(SoundEnum::BlockChainHit),
            "BLOCK_CHAIN_PLACE" => Some(SoundEnum::BlockChainPlace),
            "BLOCK_CHAIN_STEP" => Some(SoundEnum::BlockChainStep),
            "BLOCK_CHERRY_LEAVES_BREAK" => Some(SoundEnum::BlockCherryLeavesBreak),
            "BLOCK_CHERRY_LEAVES_FALL" => Some(SoundEnum::BlockCherryLeavesFall),
            "BLOCK_CHERRY_LEAVES_HIT" => Some(SoundEnum::BlockCherryLeavesHit),
            "BLOCK_CHERRY_LEAVES_PLACE" => Some(SoundEnum::BlockCherryLeavesPlace),
            "BLOCK_CHERRY_LEAVES_STEP" => Some(SoundEnum::BlockCherryLeavesStep),
            "BLOCK_CHERRY_SAPLING_BREAK" => Some(SoundEnum::BlockCherrySaplingBreak),
            "BLOCK_CHERRY_SAPLING_FALL" => Some(SoundEnum::BlockCherrySaplingFall),
            "BLOCK_CHERRY_SAPLING_HIT" => Some(SoundEnum::BlockCherrySaplingHit),
            "BLOCK_CHERRY_SAPLING_PLACE" => Some(SoundEnum::BlockCherrySaplingPlace),
            "BLOCK_CHERRY_SAPLING_STEP" => Some(SoundEnum::BlockCherrySaplingStep),
            "BLOCK_CHERRY_WOOD_BREAK" => Some(SoundEnum::BlockCherryWoodBreak),
            "BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF" => Some(SoundEnum::BlockCherryWoodButtonClickOff),
            "BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON" => Some(SoundEnum::BlockCherryWoodButtonClickOn),
            "BLOCK_CHERRY_WOOD_DOOR_CLOSE" => Some(SoundEnum::BlockCherryWoodDoorClose),
            "BLOCK_CHERRY_WOOD_DOOR_OPEN" => Some(SoundEnum::BlockCherryWoodDoorOpen),
            "BLOCK_CHERRY_WOOD_FALL" => Some(SoundEnum::BlockCherryWoodFall),
            "BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE" => Some(SoundEnum::BlockCherryWoodFenceGateClose),
            "BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN" => Some(SoundEnum::BlockCherryWoodFenceGateOpen),
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK" => {
                Some(SoundEnum::BlockCherryWoodHangingSignBreak)
            }
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL" => {
                Some(SoundEnum::BlockCherryWoodHangingSignFall)
            }
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT" => Some(SoundEnum::BlockCherryWoodHangingSignHit),
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE" => {
                Some(SoundEnum::BlockCherryWoodHangingSignPlace)
            }
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP" => {
                Some(SoundEnum::BlockCherryWoodHangingSignStep)
            }
            "BLOCK_CHERRY_WOOD_HIT" => Some(SoundEnum::BlockCherryWoodHit),
            "BLOCK_CHERRY_WOOD_PLACE" => Some(SoundEnum::BlockCherryWoodPlace),
            "BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockCherryWoodPressurePlateClickOff)
            }
            "BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockCherryWoodPressurePlateClickOn)
            }
            "BLOCK_CHERRY_WOOD_STEP" => Some(SoundEnum::BlockCherryWoodStep),
            "BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE" => Some(SoundEnum::BlockCherryWoodTrapdoorClose),
            "BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN" => Some(SoundEnum::BlockCherryWoodTrapdoorOpen),
            "BLOCK_CHEST_CLOSE" => Some(SoundEnum::BlockChestClose),
            "BLOCK_CHEST_LOCKED" => Some(SoundEnum::BlockChestLocked),
            "BLOCK_CHEST_OPEN" => Some(SoundEnum::BlockChestOpen),
            "BLOCK_CHISELED_BOOKSHELF_BREAK" => Some(SoundEnum::BlockChiseledBookshelfBreak),
            "BLOCK_CHISELED_BOOKSHELF_FALL" => Some(SoundEnum::BlockChiseledBookshelfFall),
            "BLOCK_CHISELED_BOOKSHELF_HIT" => Some(SoundEnum::BlockChiseledBookshelfHit),
            "BLOCK_CHISELED_BOOKSHELF_INSERT" => Some(SoundEnum::BlockChiseledBookshelfInsert),
            "BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED" => {
                Some(SoundEnum::BlockChiseledBookshelfInsertEnchanted)
            }
            "BLOCK_CHISELED_BOOKSHELF_PICKUP" => Some(SoundEnum::BlockChiseledBookshelfPickup),
            "BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED" => {
                Some(SoundEnum::BlockChiseledBookshelfPickupEnchanted)
            }
            "BLOCK_CHISELED_BOOKSHELF_PLACE" => Some(SoundEnum::BlockChiseledBookshelfPlace),
            "BLOCK_CHISELED_BOOKSHELF_STEP" => Some(SoundEnum::BlockChiseledBookshelfStep),
            "BLOCK_CHORUS_FLOWER_DEATH" => Some(SoundEnum::BlockChorusFlowerDeath),
            "BLOCK_CHORUS_FLOWER_GROW" => Some(SoundEnum::BlockChorusFlowerGrow),
            "BLOCK_COMPARATOR_CLICK" => Some(SoundEnum::BlockComparatorClick),
            "BLOCK_COMPOSTER_EMPTY" => Some(SoundEnum::BlockComposterEmpty),
            "BLOCK_COMPOSTER_FILL" => Some(SoundEnum::BlockComposterFill),
            "BLOCK_COMPOSTER_FILL_SUCCESS" => Some(SoundEnum::BlockComposterFillSuccess),
            "BLOCK_COMPOSTER_READY" => Some(SoundEnum::BlockComposterReady),
            "BLOCK_CONDUIT_ACTIVATE" => Some(SoundEnum::BlockConduitActivate),
            "BLOCK_CONDUIT_AMBIENT" => Some(SoundEnum::BlockConduitAmbient),
            "BLOCK_CONDUIT_AMBIENT_SHORT" => Some(SoundEnum::BlockConduitAmbientShort),
            "BLOCK_CONDUIT_ATTACK_TARGET" => Some(SoundEnum::BlockConduitAttackTarget),
            "BLOCK_CONDUIT_DEACTIVATE" => Some(SoundEnum::BlockConduitDeactivate),
            "BLOCK_COPPER_BREAK" => Some(SoundEnum::BlockCopperBreak),
            "BLOCK_COPPER_FALL" => Some(SoundEnum::BlockCopperFall),
            "BLOCK_COPPER_HIT" => Some(SoundEnum::BlockCopperHit),
            "BLOCK_COPPER_PLACE" => Some(SoundEnum::BlockCopperPlace),
            "BLOCK_COPPER_STEP" => Some(SoundEnum::BlockCopperStep),
            "BLOCK_CORAL_BLOCK_BREAK" => Some(SoundEnum::BlockCoralBlockBreak),
            "BLOCK_CORAL_BLOCK_FALL" => Some(SoundEnum::BlockCoralBlockFall),
            "BLOCK_CORAL_BLOCK_HIT" => Some(SoundEnum::BlockCoralBlockHit),
            "BLOCK_CORAL_BLOCK_PLACE" => Some(SoundEnum::BlockCoralBlockPlace),
            "BLOCK_CORAL_BLOCK_STEP" => Some(SoundEnum::BlockCoralBlockStep),
            "BLOCK_CROP_BREAK" => Some(SoundEnum::BlockCropBreak),
            "BLOCK_DECORATED_POT_BREAK" => Some(SoundEnum::BlockDecoratedPotBreak),
            "BLOCK_DECORATED_POT_FALL" => Some(SoundEnum::BlockDecoratedPotFall),
            "BLOCK_DECORATED_POT_HIT" => Some(SoundEnum::BlockDecoratedPotHit),
            "BLOCK_DECORATED_POT_PLACE" => Some(SoundEnum::BlockDecoratedPotPlace),
            "BLOCK_DECORATED_POT_SHATTER" => Some(SoundEnum::BlockDecoratedPotShatter),
            "BLOCK_DECORATED_POT_STEP" => Some(SoundEnum::BlockDecoratedPotStep),
            "BLOCK_DEEPSLATE_BREAK" => Some(SoundEnum::BlockDeepslateBreak),
            "BLOCK_DEEPSLATE_BRICKS_BREAK" => Some(SoundEnum::BlockDeepslateBricksBreak),
            "BLOCK_DEEPSLATE_BRICKS_FALL" => Some(SoundEnum::BlockDeepslateBricksFall),
            "BLOCK_DEEPSLATE_BRICKS_HIT" => Some(SoundEnum::BlockDeepslateBricksHit),
            "BLOCK_DEEPSLATE_BRICKS_PLACE" => Some(SoundEnum::BlockDeepslateBricksPlace),
            "BLOCK_DEEPSLATE_BRICKS_STEP" => Some(SoundEnum::BlockDeepslateBricksStep),
            "BLOCK_DEEPSLATE_FALL" => Some(SoundEnum::BlockDeepslateFall),
            "BLOCK_DEEPSLATE_HIT" => Some(SoundEnum::BlockDeepslateHit),
            "BLOCK_DEEPSLATE_PLACE" => Some(SoundEnum::BlockDeepslatePlace),
            "BLOCK_DEEPSLATE_STEP" => Some(SoundEnum::BlockDeepslateStep),
            "BLOCK_DEEPSLATE_TILES_BREAK" => Some(SoundEnum::BlockDeepslateTilesBreak),
            "BLOCK_DEEPSLATE_TILES_FALL" => Some(SoundEnum::BlockDeepslateTilesFall),
            "BLOCK_DEEPSLATE_TILES_HIT" => Some(SoundEnum::BlockDeepslateTilesHit),
            "BLOCK_DEEPSLATE_TILES_PLACE" => Some(SoundEnum::BlockDeepslateTilesPlace),
            "BLOCK_DEEPSLATE_TILES_STEP" => Some(SoundEnum::BlockDeepslateTilesStep),
            "BLOCK_DISPENSER_DISPENSE" => Some(SoundEnum::BlockDispenserDispense),
            "BLOCK_DISPENSER_FAIL" => Some(SoundEnum::BlockDispenserFail),
            "BLOCK_DISPENSER_LAUNCH" => Some(SoundEnum::BlockDispenserLaunch),
            "BLOCK_DRIPSTONE_BLOCK_BREAK" => Some(SoundEnum::BlockDripstoneBlockBreak),
            "BLOCK_DRIPSTONE_BLOCK_FALL" => Some(SoundEnum::BlockDripstoneBlockFall),
            "BLOCK_DRIPSTONE_BLOCK_HIT" => Some(SoundEnum::BlockDripstoneBlockHit),
            "BLOCK_DRIPSTONE_BLOCK_PLACE" => Some(SoundEnum::BlockDripstoneBlockPlace),
            "BLOCK_DRIPSTONE_BLOCK_STEP" => Some(SoundEnum::BlockDripstoneBlockStep),
            "BLOCK_ENCHANTMENT_TABLE_USE" => Some(SoundEnum::BlockEnchantmentTableUse),
            "BLOCK_ENDER_CHEST_CLOSE" => Some(SoundEnum::BlockEnderChestClose),
            "BLOCK_ENDER_CHEST_OPEN" => Some(SoundEnum::BlockEnderChestOpen),
            "BLOCK_END_GATEWAY_SPAWN" => Some(SoundEnum::BlockEndGatewaySpawn),
            "BLOCK_END_PORTAL_FRAME_FILL" => Some(SoundEnum::BlockEndPortalFrameFill),
            "BLOCK_END_PORTAL_SPAWN" => Some(SoundEnum::BlockEndPortalSpawn),
            "BLOCK_FENCE_GATE_CLOSE" => Some(SoundEnum::BlockFenceGateClose),
            "BLOCK_FENCE_GATE_OPEN" => Some(SoundEnum::BlockFenceGateOpen),
            "BLOCK_FIRE_AMBIENT" => Some(SoundEnum::BlockFireAmbient),
            "BLOCK_FIRE_EXTINGUISH" => Some(SoundEnum::BlockFireExtinguish),
            "BLOCK_FLOWERING_AZALEA_BREAK" => Some(SoundEnum::BlockFloweringAzaleaBreak),
            "BLOCK_FLOWERING_AZALEA_FALL" => Some(SoundEnum::BlockFloweringAzaleaFall),
            "BLOCK_FLOWERING_AZALEA_HIT" => Some(SoundEnum::BlockFloweringAzaleaHit),
            "BLOCK_FLOWERING_AZALEA_PLACE" => Some(SoundEnum::BlockFloweringAzaleaPlace),
            "BLOCK_FLOWERING_AZALEA_STEP" => Some(SoundEnum::BlockFloweringAzaleaStep),
            "BLOCK_FROGLIGHT_BREAK" => Some(SoundEnum::BlockFroglightBreak),
            "BLOCK_FROGLIGHT_FALL" => Some(SoundEnum::BlockFroglightFall),
            "BLOCK_FROGLIGHT_HIT" => Some(SoundEnum::BlockFroglightHit),
            "BLOCK_FROGLIGHT_PLACE" => Some(SoundEnum::BlockFroglightPlace),
            "BLOCK_FROGLIGHT_STEP" => Some(SoundEnum::BlockFroglightStep),
            "BLOCK_FROGSPAWN_BREAK" => Some(SoundEnum::BlockFrogspawnBreak),
            "BLOCK_FROGSPAWN_FALL" => Some(SoundEnum::BlockFrogspawnFall),
            "BLOCK_FROGSPAWN_HATCH" => Some(SoundEnum::BlockFrogspawnHatch),
            "BLOCK_FROGSPAWN_HIT" => Some(SoundEnum::BlockFrogspawnHit),
            "BLOCK_FROGSPAWN_PLACE" => Some(SoundEnum::BlockFrogspawnPlace),
            "BLOCK_FROGSPAWN_STEP" => Some(SoundEnum::BlockFrogspawnStep),
            "BLOCK_FUNGUS_BREAK" => Some(SoundEnum::BlockFungusBreak),
            "BLOCK_FUNGUS_FALL" => Some(SoundEnum::BlockFungusFall),
            "BLOCK_FUNGUS_HIT" => Some(SoundEnum::BlockFungusHit),
            "BLOCK_FUNGUS_PLACE" => Some(SoundEnum::BlockFungusPlace),
            "BLOCK_FUNGUS_STEP" => Some(SoundEnum::BlockFungusStep),
            "BLOCK_FURNACE_FIRE_CRACKLE" => Some(SoundEnum::BlockFurnaceFireCrackle),
            "BLOCK_GILDED_BLACKSTONE_BREAK" => Some(SoundEnum::BlockGildedBlackstoneBreak),
            "BLOCK_GILDED_BLACKSTONE_FALL" => Some(SoundEnum::BlockGildedBlackstoneFall),
            "BLOCK_GILDED_BLACKSTONE_HIT" => Some(SoundEnum::BlockGildedBlackstoneHit),
            "BLOCK_GILDED_BLACKSTONE_PLACE" => Some(SoundEnum::BlockGildedBlackstonePlace),
            "BLOCK_GILDED_BLACKSTONE_STEP" => Some(SoundEnum::BlockGildedBlackstoneStep),
            "BLOCK_GLASS_BREAK" => Some(SoundEnum::BlockGlassBreak),
            "BLOCK_GLASS_FALL" => Some(SoundEnum::BlockGlassFall),
            "BLOCK_GLASS_HIT" => Some(SoundEnum::BlockGlassHit),
            "BLOCK_GLASS_PLACE" => Some(SoundEnum::BlockGlassPlace),
            "BLOCK_GLASS_STEP" => Some(SoundEnum::BlockGlassStep),
            "BLOCK_GRASS_BREAK" => Some(SoundEnum::BlockGrassBreak),
            "BLOCK_GRASS_FALL" => Some(SoundEnum::BlockGrassFall),
            "BLOCK_GRASS_HIT" => Some(SoundEnum::BlockGrassHit),
            "BLOCK_GRASS_PLACE" => Some(SoundEnum::BlockGrassPlace),
            "BLOCK_GRASS_STEP" => Some(SoundEnum::BlockGrassStep),
            "BLOCK_GRAVEL_BREAK" => Some(SoundEnum::BlockGravelBreak),
            "BLOCK_GRAVEL_FALL" => Some(SoundEnum::BlockGravelFall),
            "BLOCK_GRAVEL_HIT" => Some(SoundEnum::BlockGravelHit),
            "BLOCK_GRAVEL_PLACE" => Some(SoundEnum::BlockGravelPlace),
            "BLOCK_GRAVEL_STEP" => Some(SoundEnum::BlockGravelStep),
            "BLOCK_GRINDSTONE_USE" => Some(SoundEnum::BlockGrindstoneUse),
            "BLOCK_GROWING_PLANT_CROP" => Some(SoundEnum::BlockGrowingPlantCrop),
            "BLOCK_HANGING_ROOTS_BREAK" => Some(SoundEnum::BlockHangingRootsBreak),
            "BLOCK_HANGING_ROOTS_FALL" => Some(SoundEnum::BlockHangingRootsFall),
            "BLOCK_HANGING_ROOTS_HIT" => Some(SoundEnum::BlockHangingRootsHit),
            "BLOCK_HANGING_ROOTS_PLACE" => Some(SoundEnum::BlockHangingRootsPlace),
            "BLOCK_HANGING_ROOTS_STEP" => Some(SoundEnum::BlockHangingRootsStep),
            "BLOCK_HANGING_SIGN_BREAK" => Some(SoundEnum::BlockHangingSignBreak),
            "BLOCK_HANGING_SIGN_FALL" => Some(SoundEnum::BlockHangingSignFall),
            "BLOCK_HANGING_SIGN_HIT" => Some(SoundEnum::BlockHangingSignHit),
            "BLOCK_HANGING_SIGN_PLACE" => Some(SoundEnum::BlockHangingSignPlace),
            "BLOCK_HANGING_SIGN_STEP" => Some(SoundEnum::BlockHangingSignStep),
            "BLOCK_HONEY_BLOCK_BREAK" => Some(SoundEnum::BlockHoneyBlockBreak),
            "BLOCK_HONEY_BLOCK_FALL" => Some(SoundEnum::BlockHoneyBlockFall),
            "BLOCK_HONEY_BLOCK_HIT" => Some(SoundEnum::BlockHoneyBlockHit),
            "BLOCK_HONEY_BLOCK_PLACE" => Some(SoundEnum::BlockHoneyBlockPlace),
            "BLOCK_HONEY_BLOCK_SLIDE" => Some(SoundEnum::BlockHoneyBlockSlide),
            "BLOCK_HONEY_BLOCK_STEP" => Some(SoundEnum::BlockHoneyBlockStep),
            "BLOCK_IRON_DOOR_CLOSE" => Some(SoundEnum::BlockIronDoorClose),
            "BLOCK_IRON_DOOR_OPEN" => Some(SoundEnum::BlockIronDoorOpen),
            "BLOCK_IRON_TRAPDOOR_CLOSE" => Some(SoundEnum::BlockIronTrapdoorClose),
            "BLOCK_IRON_TRAPDOOR_OPEN" => Some(SoundEnum::BlockIronTrapdoorOpen),
            "BLOCK_LADDER_BREAK" => Some(SoundEnum::BlockLadderBreak),
            "BLOCK_LADDER_FALL" => Some(SoundEnum::BlockLadderFall),
            "BLOCK_LADDER_HIT" => Some(SoundEnum::BlockLadderHit),
            "BLOCK_LADDER_PLACE" => Some(SoundEnum::BlockLadderPlace),
            "BLOCK_LADDER_STEP" => Some(SoundEnum::BlockLadderStep),
            "BLOCK_LANTERN_BREAK" => Some(SoundEnum::BlockLanternBreak),
            "BLOCK_LANTERN_FALL" => Some(SoundEnum::BlockLanternFall),
            "BLOCK_LANTERN_HIT" => Some(SoundEnum::BlockLanternHit),
            "BLOCK_LANTERN_PLACE" => Some(SoundEnum::BlockLanternPlace),
            "BLOCK_LANTERN_STEP" => Some(SoundEnum::BlockLanternStep),
            "BLOCK_LARGE_AMETHYST_BUD_BREAK" => Some(SoundEnum::BlockLargeAmethystBudBreak),
            "BLOCK_LARGE_AMETHYST_BUD_PLACE" => Some(SoundEnum::BlockLargeAmethystBudPlace),
            "BLOCK_LAVA_AMBIENT" => Some(SoundEnum::BlockLavaAmbient),
            "BLOCK_LAVA_EXTINGUISH" => Some(SoundEnum::BlockLavaExtinguish),
            "BLOCK_LAVA_POP" => Some(SoundEnum::BlockLavaPop),
            "BLOCK_LEVER_CLICK" => Some(SoundEnum::BlockLeverClick),
            "BLOCK_LILY_PAD_PLACE" => Some(SoundEnum::BlockLilyPadPlace),
            "BLOCK_LODESTONE_BREAK" => Some(SoundEnum::BlockLodestoneBreak),
            "BLOCK_LODESTONE_FALL" => Some(SoundEnum::BlockLodestoneFall),
            "BLOCK_LODESTONE_HIT" => Some(SoundEnum::BlockLodestoneHit),
            "BLOCK_LODESTONE_PLACE" => Some(SoundEnum::BlockLodestonePlace),
            "BLOCK_LODESTONE_STEP" => Some(SoundEnum::BlockLodestoneStep),
            "BLOCK_MANGROVE_ROOTS_BREAK" => Some(SoundEnum::BlockMangroveRootsBreak),
            "BLOCK_MANGROVE_ROOTS_FALL" => Some(SoundEnum::BlockMangroveRootsFall),
            "BLOCK_MANGROVE_ROOTS_HIT" => Some(SoundEnum::BlockMangroveRootsHit),
            "BLOCK_MANGROVE_ROOTS_PLACE" => Some(SoundEnum::BlockMangroveRootsPlace),
            "BLOCK_MANGROVE_ROOTS_STEP" => Some(SoundEnum::BlockMangroveRootsStep),
            "BLOCK_MEDIUM_AMETHYST_BUD_BREAK" => Some(SoundEnum::BlockMediumAmethystBudBreak),
            "BLOCK_MEDIUM_AMETHYST_BUD_PLACE" => Some(SoundEnum::BlockMediumAmethystBudPlace),
            "BLOCK_METAL_BREAK" => Some(SoundEnum::BlockMetalBreak),
            "BLOCK_METAL_FALL" => Some(SoundEnum::BlockMetalFall),
            "BLOCK_METAL_HIT" => Some(SoundEnum::BlockMetalHit),
            "BLOCK_METAL_PLACE" => Some(SoundEnum::BlockMetalPlace),
            "BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockMetalPressurePlateClickOff)
            }
            "BLOCK_METAL_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockMetalPressurePlateClickOn)
            }
            "BLOCK_METAL_STEP" => Some(SoundEnum::BlockMetalStep),
            "BLOCK_MOSS_BREAK" => Some(SoundEnum::BlockMossBreak),
            "BLOCK_MOSS_CARPET_BREAK" => Some(SoundEnum::BlockMossCarpetBreak),
            "BLOCK_MOSS_CARPET_FALL" => Some(SoundEnum::BlockMossCarpetFall),
            "BLOCK_MOSS_CARPET_HIT" => Some(SoundEnum::BlockMossCarpetHit),
            "BLOCK_MOSS_CARPET_PLACE" => Some(SoundEnum::BlockMossCarpetPlace),
            "BLOCK_MOSS_CARPET_STEP" => Some(SoundEnum::BlockMossCarpetStep),
            "BLOCK_MOSS_FALL" => Some(SoundEnum::BlockMossFall),
            "BLOCK_MOSS_HIT" => Some(SoundEnum::BlockMossHit),
            "BLOCK_MOSS_PLACE" => Some(SoundEnum::BlockMossPlace),
            "BLOCK_MOSS_STEP" => Some(SoundEnum::BlockMossStep),
            "BLOCK_MUDDY_MANGROVE_ROOTS_BREAK" => Some(SoundEnum::BlockMuddyMangroveRootsBreak),
            "BLOCK_MUDDY_MANGROVE_ROOTS_FALL" => Some(SoundEnum::BlockMuddyMangroveRootsFall),
            "BLOCK_MUDDY_MANGROVE_ROOTS_HIT" => Some(SoundEnum::BlockMuddyMangroveRootsHit),
            "BLOCK_MUDDY_MANGROVE_ROOTS_PLACE" => Some(SoundEnum::BlockMuddyMangroveRootsPlace),
            "BLOCK_MUDDY_MANGROVE_ROOTS_STEP" => Some(SoundEnum::BlockMuddyMangroveRootsStep),
            "BLOCK_MUD_BREAK" => Some(SoundEnum::BlockMudBreak),
            "BLOCK_MUD_BRICKS_BREAK" => Some(SoundEnum::BlockMudBricksBreak),
            "BLOCK_MUD_BRICKS_FALL" => Some(SoundEnum::BlockMudBricksFall),
            "BLOCK_MUD_BRICKS_HIT" => Some(SoundEnum::BlockMudBricksHit),
            "BLOCK_MUD_BRICKS_PLACE" => Some(SoundEnum::BlockMudBricksPlace),
            "BLOCK_MUD_BRICKS_STEP" => Some(SoundEnum::BlockMudBricksStep),
            "BLOCK_MUD_FALL" => Some(SoundEnum::BlockMudFall),
            "BLOCK_MUD_HIT" => Some(SoundEnum::BlockMudHit),
            "BLOCK_MUD_PLACE" => Some(SoundEnum::BlockMudPlace),
            "BLOCK_MUD_STEP" => Some(SoundEnum::BlockMudStep),
            "BLOCK_NETHERITE_BLOCK_BREAK" => Some(SoundEnum::BlockNetheriteBlockBreak),
            "BLOCK_NETHERITE_BLOCK_FALL" => Some(SoundEnum::BlockNetheriteBlockFall),
            "BLOCK_NETHERITE_BLOCK_HIT" => Some(SoundEnum::BlockNetheriteBlockHit),
            "BLOCK_NETHERITE_BLOCK_PLACE" => Some(SoundEnum::BlockNetheriteBlockPlace),
            "BLOCK_NETHERITE_BLOCK_STEP" => Some(SoundEnum::BlockNetheriteBlockStep),
            "BLOCK_NETHERRACK_BREAK" => Some(SoundEnum::BlockNetherrackBreak),
            "BLOCK_NETHERRACK_FALL" => Some(SoundEnum::BlockNetherrackFall),
            "BLOCK_NETHERRACK_HIT" => Some(SoundEnum::BlockNetherrackHit),
            "BLOCK_NETHERRACK_PLACE" => Some(SoundEnum::BlockNetherrackPlace),
            "BLOCK_NETHERRACK_STEP" => Some(SoundEnum::BlockNetherrackStep),
            "BLOCK_NETHER_BRICKS_BREAK" => Some(SoundEnum::BlockNetherBricksBreak),
            "BLOCK_NETHER_BRICKS_FALL" => Some(SoundEnum::BlockNetherBricksFall),
            "BLOCK_NETHER_BRICKS_HIT" => Some(SoundEnum::BlockNetherBricksHit),
            "BLOCK_NETHER_BRICKS_PLACE" => Some(SoundEnum::BlockNetherBricksPlace),
            "BLOCK_NETHER_BRICKS_STEP" => Some(SoundEnum::BlockNetherBricksStep),
            "BLOCK_NETHER_GOLD_ORE_BREAK" => Some(SoundEnum::BlockNetherGoldOreBreak),
            "BLOCK_NETHER_GOLD_ORE_FALL" => Some(SoundEnum::BlockNetherGoldOreFall),
            "BLOCK_NETHER_GOLD_ORE_HIT" => Some(SoundEnum::BlockNetherGoldOreHit),
            "BLOCK_NETHER_GOLD_ORE_PLACE" => Some(SoundEnum::BlockNetherGoldOrePlace),
            "BLOCK_NETHER_GOLD_ORE_STEP" => Some(SoundEnum::BlockNetherGoldOreStep),
            "BLOCK_NETHER_ORE_BREAK" => Some(SoundEnum::BlockNetherOreBreak),
            "BLOCK_NETHER_ORE_FALL" => Some(SoundEnum::BlockNetherOreFall),
            "BLOCK_NETHER_ORE_HIT" => Some(SoundEnum::BlockNetherOreHit),
            "BLOCK_NETHER_ORE_PLACE" => Some(SoundEnum::BlockNetherOrePlace),
            "BLOCK_NETHER_ORE_STEP" => Some(SoundEnum::BlockNetherOreStep),
            "BLOCK_NETHER_SPROUTS_BREAK" => Some(SoundEnum::BlockNetherSproutsBreak),
            "BLOCK_NETHER_SPROUTS_FALL" => Some(SoundEnum::BlockNetherSproutsFall),
            "BLOCK_NETHER_SPROUTS_HIT" => Some(SoundEnum::BlockNetherSproutsHit),
            "BLOCK_NETHER_SPROUTS_PLACE" => Some(SoundEnum::BlockNetherSproutsPlace),
            "BLOCK_NETHER_SPROUTS_STEP" => Some(SoundEnum::BlockNetherSproutsStep),
            "BLOCK_NETHER_WART_BREAK" => Some(SoundEnum::BlockNetherWartBreak),
            "BLOCK_NETHER_WOOD_BREAK" => Some(SoundEnum::BlockNetherWoodBreak),
            "BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF" => Some(SoundEnum::BlockNetherWoodButtonClickOff),
            "BLOCK_NETHER_WOOD_BUTTON_CLICK_ON" => Some(SoundEnum::BlockNetherWoodButtonClickOn),
            "BLOCK_NETHER_WOOD_DOOR_CLOSE" => Some(SoundEnum::BlockNetherWoodDoorClose),
            "BLOCK_NETHER_WOOD_DOOR_OPEN" => Some(SoundEnum::BlockNetherWoodDoorOpen),
            "BLOCK_NETHER_WOOD_FALL" => Some(SoundEnum::BlockNetherWoodFall),
            "BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE" => Some(SoundEnum::BlockNetherWoodFenceGateClose),
            "BLOCK_NETHER_WOOD_FENCE_GATE_OPEN" => Some(SoundEnum::BlockNetherWoodFenceGateOpen),
            "BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK" => {
                Some(SoundEnum::BlockNetherWoodHangingSignBreak)
            }
            "BLOCK_NETHER_WOOD_HANGING_SIGN_FALL" => {
                Some(SoundEnum::BlockNetherWoodHangingSignFall)
            }
            "BLOCK_NETHER_WOOD_HANGING_SIGN_HIT" => Some(SoundEnum::BlockNetherWoodHangingSignHit),
            "BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE" => {
                Some(SoundEnum::BlockNetherWoodHangingSignPlace)
            }
            "BLOCK_NETHER_WOOD_HANGING_SIGN_STEP" => {
                Some(SoundEnum::BlockNetherWoodHangingSignStep)
            }
            "BLOCK_NETHER_WOOD_HIT" => Some(SoundEnum::BlockNetherWoodHit),
            "BLOCK_NETHER_WOOD_PLACE" => Some(SoundEnum::BlockNetherWoodPlace),
            "BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockNetherWoodPressurePlateClickOff)
            }
            "BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockNetherWoodPressurePlateClickOn)
            }
            "BLOCK_NETHER_WOOD_STEP" => Some(SoundEnum::BlockNetherWoodStep),
            "BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE" => Some(SoundEnum::BlockNetherWoodTrapdoorClose),
            "BLOCK_NETHER_WOOD_TRAPDOOR_OPEN" => Some(SoundEnum::BlockNetherWoodTrapdoorOpen),
            "BLOCK_NOTE_BLOCK_BANJO" => Some(SoundEnum::BlockNoteBlockBanjo),
            "BLOCK_NOTE_BLOCK_BASEDRUM" => Some(SoundEnum::BlockNoteBlockBasedrum),
            "BLOCK_NOTE_BLOCK_BASS" => Some(SoundEnum::BlockNoteBlockBass),
            "BLOCK_NOTE_BLOCK_BELL" => Some(SoundEnum::BlockNoteBlockBell),
            "BLOCK_NOTE_BLOCK_BIT" => Some(SoundEnum::BlockNoteBlockBit),
            "BLOCK_NOTE_BLOCK_CHIME" => Some(SoundEnum::BlockNoteBlockChime),
            "BLOCK_NOTE_BLOCK_COW_BELL" => Some(SoundEnum::BlockNoteBlockCowBell),
            "BLOCK_NOTE_BLOCK_DIDGERIDOO" => Some(SoundEnum::BlockNoteBlockDidgeridoo),
            "BLOCK_NOTE_BLOCK_FLUTE" => Some(SoundEnum::BlockNoteBlockFlute),
            "BLOCK_NOTE_BLOCK_GUITAR" => Some(SoundEnum::BlockNoteBlockGuitar),
            "BLOCK_NOTE_BLOCK_HARP" => Some(SoundEnum::BlockNoteBlockHarp),
            "BLOCK_NOTE_BLOCK_HAT" => Some(SoundEnum::BlockNoteBlockHat),
            "BLOCK_NOTE_BLOCK_IMITATE_CREEPER" => Some(SoundEnum::BlockNoteBlockImitateCreeper),
            "BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON" => {
                Some(SoundEnum::BlockNoteBlockImitateEnderDragon)
            }
            "BLOCK_NOTE_BLOCK_IMITATE_PIGLIN" => Some(SoundEnum::BlockNoteBlockImitatePiglin),
            "BLOCK_NOTE_BLOCK_IMITATE_SKELETON" => Some(SoundEnum::BlockNoteBlockImitateSkeleton),
            "BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON" => {
                Some(SoundEnum::BlockNoteBlockImitateWitherSkeleton)
            }
            "BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE" => Some(SoundEnum::BlockNoteBlockImitateZombie),
            "BLOCK_NOTE_BLOCK_IRON_XYLOPHONE" => Some(SoundEnum::BlockNoteBlockIronXylophone),
            "BLOCK_NOTE_BLOCK_PLING" => Some(SoundEnum::BlockNoteBlockPling),
            "BLOCK_NOTE_BLOCK_SNARE" => Some(SoundEnum::BlockNoteBlockSnare),
            "BLOCK_NOTE_BLOCK_XYLOPHONE" => Some(SoundEnum::BlockNoteBlockXylophone),
            "BLOCK_NYLIUM_BREAK" => Some(SoundEnum::BlockNyliumBreak),
            "BLOCK_NYLIUM_FALL" => Some(SoundEnum::BlockNyliumFall),
            "BLOCK_NYLIUM_HIT" => Some(SoundEnum::BlockNyliumHit),
            "BLOCK_NYLIUM_PLACE" => Some(SoundEnum::BlockNyliumPlace),
            "BLOCK_NYLIUM_STEP" => Some(SoundEnum::BlockNyliumStep),
            "BLOCK_PACKED_MUD_BREAK" => Some(SoundEnum::BlockPackedMudBreak),
            "BLOCK_PACKED_MUD_FALL" => Some(SoundEnum::BlockPackedMudFall),
            "BLOCK_PACKED_MUD_HIT" => Some(SoundEnum::BlockPackedMudHit),
            "BLOCK_PACKED_MUD_PLACE" => Some(SoundEnum::BlockPackedMudPlace),
            "BLOCK_PACKED_MUD_STEP" => Some(SoundEnum::BlockPackedMudStep),
            "BLOCK_PINK_PETALS_BREAK" => Some(SoundEnum::BlockPinkPetalsBreak),
            "BLOCK_PINK_PETALS_FALL" => Some(SoundEnum::BlockPinkPetalsFall),
            "BLOCK_PINK_PETALS_HIT" => Some(SoundEnum::BlockPinkPetalsHit),
            "BLOCK_PINK_PETALS_PLACE" => Some(SoundEnum::BlockPinkPetalsPlace),
            "BLOCK_PINK_PETALS_STEP" => Some(SoundEnum::BlockPinkPetalsStep),
            "BLOCK_PISTON_CONTRACT" => Some(SoundEnum::BlockPistonContract),
            "BLOCK_PISTON_EXTEND" => Some(SoundEnum::BlockPistonExtend),
            "BLOCK_POINTED_DRIPSTONE_BREAK" => Some(SoundEnum::BlockPointedDripstoneBreak),
            "BLOCK_POINTED_DRIPSTONE_DRIP_LAVA" => Some(SoundEnum::BlockPointedDripstoneDripLava),
            "BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON" => {
                Some(SoundEnum::BlockPointedDripstoneDripLavaIntoCauldron)
            }
            "BLOCK_POINTED_DRIPSTONE_DRIP_WATER" => Some(SoundEnum::BlockPointedDripstoneDripWater),
            "BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON" => {
                Some(SoundEnum::BlockPointedDripstoneDripWaterIntoCauldron)
            }
            "BLOCK_POINTED_DRIPSTONE_FALL" => Some(SoundEnum::BlockPointedDripstoneFall),
            "BLOCK_POINTED_DRIPSTONE_HIT" => Some(SoundEnum::BlockPointedDripstoneHit),
            "BLOCK_POINTED_DRIPSTONE_LAND" => Some(SoundEnum::BlockPointedDripstoneLand),
            "BLOCK_POINTED_DRIPSTONE_PLACE" => Some(SoundEnum::BlockPointedDripstonePlace),
            "BLOCK_POINTED_DRIPSTONE_STEP" => Some(SoundEnum::BlockPointedDripstoneStep),
            "BLOCK_POLISHED_DEEPSLATE_BREAK" => Some(SoundEnum::BlockPolishedDeepslateBreak),
            "BLOCK_POLISHED_DEEPSLATE_FALL" => Some(SoundEnum::BlockPolishedDeepslateFall),
            "BLOCK_POLISHED_DEEPSLATE_HIT" => Some(SoundEnum::BlockPolishedDeepslateHit),
            "BLOCK_POLISHED_DEEPSLATE_PLACE" => Some(SoundEnum::BlockPolishedDeepslatePlace),
            "BLOCK_POLISHED_DEEPSLATE_STEP" => Some(SoundEnum::BlockPolishedDeepslateStep),
            "BLOCK_PORTAL_AMBIENT" => Some(SoundEnum::BlockPortalAmbient),
            "BLOCK_PORTAL_TRAVEL" => Some(SoundEnum::BlockPortalTravel),
            "BLOCK_PORTAL_TRIGGER" => Some(SoundEnum::BlockPortalTrigger),
            "BLOCK_POWDER_SNOW_BREAK" => Some(SoundEnum::BlockPowderSnowBreak),
            "BLOCK_POWDER_SNOW_FALL" => Some(SoundEnum::BlockPowderSnowFall),
            "BLOCK_POWDER_SNOW_HIT" => Some(SoundEnum::BlockPowderSnowHit),
            "BLOCK_POWDER_SNOW_PLACE" => Some(SoundEnum::BlockPowderSnowPlace),
            "BLOCK_POWDER_SNOW_STEP" => Some(SoundEnum::BlockPowderSnowStep),
            "BLOCK_PUMPKIN_CARVE" => Some(SoundEnum::BlockPumpkinCarve),
            "BLOCK_REDSTONE_TORCH_BURNOUT" => Some(SoundEnum::BlockRedstoneTorchBurnout),
            "BLOCK_RESPAWN_ANCHOR_AMBIENT" => Some(SoundEnum::BlockRespawnAnchorAmbient),
            "BLOCK_RESPAWN_ANCHOR_CHARGE" => Some(SoundEnum::BlockRespawnAnchorCharge),
            "BLOCK_RESPAWN_ANCHOR_DEPLETE" => Some(SoundEnum::BlockRespawnAnchorDeplete),
            "BLOCK_RESPAWN_ANCHOR_SET_SPAWN" => Some(SoundEnum::BlockRespawnAnchorSetSpawn),
            "BLOCK_ROOTED_DIRT_BREAK" => Some(SoundEnum::BlockRootedDirtBreak),
            "BLOCK_ROOTED_DIRT_FALL" => Some(SoundEnum::BlockRootedDirtFall),
            "BLOCK_ROOTED_DIRT_HIT" => Some(SoundEnum::BlockRootedDirtHit),
            "BLOCK_ROOTED_DIRT_PLACE" => Some(SoundEnum::BlockRootedDirtPlace),
            "BLOCK_ROOTED_DIRT_STEP" => Some(SoundEnum::BlockRootedDirtStep),
            "BLOCK_ROOTS_BREAK" => Some(SoundEnum::BlockRootsBreak),
            "BLOCK_ROOTS_FALL" => Some(SoundEnum::BlockRootsFall),
            "BLOCK_ROOTS_HIT" => Some(SoundEnum::BlockRootsHit),
            "BLOCK_ROOTS_PLACE" => Some(SoundEnum::BlockRootsPlace),
            "BLOCK_ROOTS_STEP" => Some(SoundEnum::BlockRootsStep),
            "BLOCK_SAND_BREAK" => Some(SoundEnum::BlockSandBreak),
            "BLOCK_SAND_FALL" => Some(SoundEnum::BlockSandFall),
            "BLOCK_SAND_HIT" => Some(SoundEnum::BlockSandHit),
            "BLOCK_SAND_PLACE" => Some(SoundEnum::BlockSandPlace),
            "BLOCK_SAND_STEP" => Some(SoundEnum::BlockSandStep),
            "BLOCK_SCAFFOLDING_BREAK" => Some(SoundEnum::BlockScaffoldingBreak),
            "BLOCK_SCAFFOLDING_FALL" => Some(SoundEnum::BlockScaffoldingFall),
            "BLOCK_SCAFFOLDING_HIT" => Some(SoundEnum::BlockScaffoldingHit),
            "BLOCK_SCAFFOLDING_PLACE" => Some(SoundEnum::BlockScaffoldingPlace),
            "BLOCK_SCAFFOLDING_STEP" => Some(SoundEnum::BlockScaffoldingStep),
            "BLOCK_SCULK_BREAK" => Some(SoundEnum::BlockSculkBreak),
            "BLOCK_SCULK_CATALYST_BLOOM" => Some(SoundEnum::BlockSculkCatalystBloom),
            "BLOCK_SCULK_CATALYST_BREAK" => Some(SoundEnum::BlockSculkCatalystBreak),
            "BLOCK_SCULK_CATALYST_FALL" => Some(SoundEnum::BlockSculkCatalystFall),
            "BLOCK_SCULK_CATALYST_HIT" => Some(SoundEnum::BlockSculkCatalystHit),
            "BLOCK_SCULK_CATALYST_PLACE" => Some(SoundEnum::BlockSculkCatalystPlace),
            "BLOCK_SCULK_CATALYST_STEP" => Some(SoundEnum::BlockSculkCatalystStep),
            "BLOCK_SCULK_CHARGE" => Some(SoundEnum::BlockSculkCharge),
            "BLOCK_SCULK_FALL" => Some(SoundEnum::BlockSculkFall),
            "BLOCK_SCULK_HIT" => Some(SoundEnum::BlockSculkHit),
            "BLOCK_SCULK_PLACE" => Some(SoundEnum::BlockSculkPlace),
            "BLOCK_SCULK_SENSOR_BREAK" => Some(SoundEnum::BlockSculkSensorBreak),
            "BLOCK_SCULK_SENSOR_CLICKING" => Some(SoundEnum::BlockSculkSensorClicking),
            "BLOCK_SCULK_SENSOR_CLICKING_STOP" => Some(SoundEnum::BlockSculkSensorClickingStop),
            "BLOCK_SCULK_SENSOR_FALL" => Some(SoundEnum::BlockSculkSensorFall),
            "BLOCK_SCULK_SENSOR_HIT" => Some(SoundEnum::BlockSculkSensorHit),
            "BLOCK_SCULK_SENSOR_PLACE" => Some(SoundEnum::BlockSculkSensorPlace),
            "BLOCK_SCULK_SENSOR_STEP" => Some(SoundEnum::BlockSculkSensorStep),
            "BLOCK_SCULK_SHRIEKER_BREAK" => Some(SoundEnum::BlockSculkShriekerBreak),
            "BLOCK_SCULK_SHRIEKER_FALL" => Some(SoundEnum::BlockSculkShriekerFall),
            "BLOCK_SCULK_SHRIEKER_HIT" => Some(SoundEnum::BlockSculkShriekerHit),
            "BLOCK_SCULK_SHRIEKER_PLACE" => Some(SoundEnum::BlockSculkShriekerPlace),
            "BLOCK_SCULK_SHRIEKER_SHRIEK" => Some(SoundEnum::BlockSculkShriekerShriek),
            "BLOCK_SCULK_SHRIEKER_STEP" => Some(SoundEnum::BlockSculkShriekerStep),
            "BLOCK_SCULK_SPREAD" => Some(SoundEnum::BlockSculkSpread),
            "BLOCK_SCULK_STEP" => Some(SoundEnum::BlockSculkStep),
            "BLOCK_SCULK_VEIN_BREAK" => Some(SoundEnum::BlockSculkVeinBreak),
            "BLOCK_SCULK_VEIN_FALL" => Some(SoundEnum::BlockSculkVeinFall),
            "BLOCK_SCULK_VEIN_HIT" => Some(SoundEnum::BlockSculkVeinHit),
            "BLOCK_SCULK_VEIN_PLACE" => Some(SoundEnum::BlockSculkVeinPlace),
            "BLOCK_SCULK_VEIN_STEP" => Some(SoundEnum::BlockSculkVeinStep),
            "BLOCK_SHROOMLIGHT_BREAK" => Some(SoundEnum::BlockShroomlightBreak),
            "BLOCK_SHROOMLIGHT_FALL" => Some(SoundEnum::BlockShroomlightFall),
            "BLOCK_SHROOMLIGHT_HIT" => Some(SoundEnum::BlockShroomlightHit),
            "BLOCK_SHROOMLIGHT_PLACE" => Some(SoundEnum::BlockShroomlightPlace),
            "BLOCK_SHROOMLIGHT_STEP" => Some(SoundEnum::BlockShroomlightStep),
            "BLOCK_SHULKER_BOX_CLOSE" => Some(SoundEnum::BlockShulkerBoxClose),
            "BLOCK_SHULKER_BOX_OPEN" => Some(SoundEnum::BlockShulkerBoxOpen),
            "BLOCK_SIGN_WAXED_INTERACT_FAIL" => Some(SoundEnum::BlockSignWaxedInteractFail),
            "BLOCK_SLIME_BLOCK_BREAK" => Some(SoundEnum::BlockSlimeBlockBreak),
            "BLOCK_SLIME_BLOCK_FALL" => Some(SoundEnum::BlockSlimeBlockFall),
            "BLOCK_SLIME_BLOCK_HIT" => Some(SoundEnum::BlockSlimeBlockHit),
            "BLOCK_SLIME_BLOCK_PLACE" => Some(SoundEnum::BlockSlimeBlockPlace),
            "BLOCK_SLIME_BLOCK_STEP" => Some(SoundEnum::BlockSlimeBlockStep),
            "BLOCK_SMALL_AMETHYST_BUD_BREAK" => Some(SoundEnum::BlockSmallAmethystBudBreak),
            "BLOCK_SMALL_AMETHYST_BUD_PLACE" => Some(SoundEnum::BlockSmallAmethystBudPlace),
            "BLOCK_SMALL_DRIPLEAF_BREAK" => Some(SoundEnum::BlockSmallDripleafBreak),
            "BLOCK_SMALL_DRIPLEAF_FALL" => Some(SoundEnum::BlockSmallDripleafFall),
            "BLOCK_SMALL_DRIPLEAF_HIT" => Some(SoundEnum::BlockSmallDripleafHit),
            "BLOCK_SMALL_DRIPLEAF_PLACE" => Some(SoundEnum::BlockSmallDripleafPlace),
            "BLOCK_SMALL_DRIPLEAF_STEP" => Some(SoundEnum::BlockSmallDripleafStep),
            "BLOCK_SMITHING_TABLE_USE" => Some(SoundEnum::BlockSmithingTableUse),
            "BLOCK_SMOKER_SMOKE" => Some(SoundEnum::BlockSmokerSmoke),
            "BLOCK_SNIFFER_EGG_CRACK" => Some(SoundEnum::BlockSnifferEggCrack),
            "BLOCK_SNIFFER_EGG_HATCH" => Some(SoundEnum::BlockSnifferEggHatch),
            "BLOCK_SNIFFER_EGG_PLOP" => Some(SoundEnum::BlockSnifferEggPlop),
            "BLOCK_SNOW_BREAK" => Some(SoundEnum::BlockSnowBreak),
            "BLOCK_SNOW_FALL" => Some(SoundEnum::BlockSnowFall),
            "BLOCK_SNOW_HIT" => Some(SoundEnum::BlockSnowHit),
            "BLOCK_SNOW_PLACE" => Some(SoundEnum::BlockSnowPlace),
            "BLOCK_SNOW_STEP" => Some(SoundEnum::BlockSnowStep),
            "BLOCK_SOUL_SAND_BREAK" => Some(SoundEnum::BlockSoulSandBreak),
            "BLOCK_SOUL_SAND_FALL" => Some(SoundEnum::BlockSoulSandFall),
            "BLOCK_SOUL_SAND_HIT" => Some(SoundEnum::BlockSoulSandHit),
            "BLOCK_SOUL_SAND_PLACE" => Some(SoundEnum::BlockSoulSandPlace),
            "BLOCK_SOUL_SAND_STEP" => Some(SoundEnum::BlockSoulSandStep),
            "BLOCK_SOUL_SOIL_BREAK" => Some(SoundEnum::BlockSoulSoilBreak),
            "BLOCK_SOUL_SOIL_FALL" => Some(SoundEnum::BlockSoulSoilFall),
            "BLOCK_SOUL_SOIL_HIT" => Some(SoundEnum::BlockSoulSoilHit),
            "BLOCK_SOUL_SOIL_PLACE" => Some(SoundEnum::BlockSoulSoilPlace),
            "BLOCK_SOUL_SOIL_STEP" => Some(SoundEnum::BlockSoulSoilStep),
            "BLOCK_SPORE_BLOSSOM_BREAK" => Some(SoundEnum::BlockSporeBlossomBreak),
            "BLOCK_SPORE_BLOSSOM_FALL" => Some(SoundEnum::BlockSporeBlossomFall),
            "BLOCK_SPORE_BLOSSOM_HIT" => Some(SoundEnum::BlockSporeBlossomHit),
            "BLOCK_SPORE_BLOSSOM_PLACE" => Some(SoundEnum::BlockSporeBlossomPlace),
            "BLOCK_SPORE_BLOSSOM_STEP" => Some(SoundEnum::BlockSporeBlossomStep),
            "BLOCK_STEM_BREAK" => Some(SoundEnum::BlockStemBreak),
            "BLOCK_STEM_FALL" => Some(SoundEnum::BlockStemFall),
            "BLOCK_STEM_HIT" => Some(SoundEnum::BlockStemHit),
            "BLOCK_STEM_PLACE" => Some(SoundEnum::BlockStemPlace),
            "BLOCK_STEM_STEP" => Some(SoundEnum::BlockStemStep),
            "BLOCK_STONE_BREAK" => Some(SoundEnum::BlockStoneBreak),
            "BLOCK_STONE_BUTTON_CLICK_OFF" => Some(SoundEnum::BlockStoneButtonClickOff),
            "BLOCK_STONE_BUTTON_CLICK_ON" => Some(SoundEnum::BlockStoneButtonClickOn),
            "BLOCK_STONE_FALL" => Some(SoundEnum::BlockStoneFall),
            "BLOCK_STONE_HIT" => Some(SoundEnum::BlockStoneHit),
            "BLOCK_STONE_PLACE" => Some(SoundEnum::BlockStonePlace),
            "BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockStonePressurePlateClickOff)
            }
            "BLOCK_STONE_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockStonePressurePlateClickOn)
            }
            "BLOCK_STONE_STEP" => Some(SoundEnum::BlockStoneStep),
            "BLOCK_SUSPICIOUS_GRAVEL_BREAK" => Some(SoundEnum::BlockSuspiciousGravelBreak),
            "BLOCK_SUSPICIOUS_GRAVEL_FALL" => Some(SoundEnum::BlockSuspiciousGravelFall),
            "BLOCK_SUSPICIOUS_GRAVEL_HIT" => Some(SoundEnum::BlockSuspiciousGravelHit),
            "BLOCK_SUSPICIOUS_GRAVEL_PLACE" => Some(SoundEnum::BlockSuspiciousGravelPlace),
            "BLOCK_SUSPICIOUS_GRAVEL_STEP" => Some(SoundEnum::BlockSuspiciousGravelStep),
            "BLOCK_SUSPICIOUS_SAND_BREAK" => Some(SoundEnum::BlockSuspiciousSandBreak),
            "BLOCK_SUSPICIOUS_SAND_FALL" => Some(SoundEnum::BlockSuspiciousSandFall),
            "BLOCK_SUSPICIOUS_SAND_HIT" => Some(SoundEnum::BlockSuspiciousSandHit),
            "BLOCK_SUSPICIOUS_SAND_PLACE" => Some(SoundEnum::BlockSuspiciousSandPlace),
            "BLOCK_SUSPICIOUS_SAND_STEP" => Some(SoundEnum::BlockSuspiciousSandStep),
            "BLOCK_SWEET_BERRY_BUSH_BREAK" => Some(SoundEnum::BlockSweetBerryBushBreak),
            "BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES" => {
                Some(SoundEnum::BlockSweetBerryBushPickBerries)
            }
            "BLOCK_SWEET_BERRY_BUSH_PLACE" => Some(SoundEnum::BlockSweetBerryBushPlace),
            "BLOCK_TRIPWIRE_ATTACH" => Some(SoundEnum::BlockTripwireAttach),
            "BLOCK_TRIPWIRE_CLICK_OFF" => Some(SoundEnum::BlockTripwireClickOff),
            "BLOCK_TRIPWIRE_CLICK_ON" => Some(SoundEnum::BlockTripwireClickOn),
            "BLOCK_TRIPWIRE_DETACH" => Some(SoundEnum::BlockTripwireDetach),
            "BLOCK_TUFF_BREAK" => Some(SoundEnum::BlockTuffBreak),
            "BLOCK_TUFF_FALL" => Some(SoundEnum::BlockTuffFall),
            "BLOCK_TUFF_HIT" => Some(SoundEnum::BlockTuffHit),
            "BLOCK_TUFF_PLACE" => Some(SoundEnum::BlockTuffPlace),
            "BLOCK_TUFF_STEP" => Some(SoundEnum::BlockTuffStep),
            "BLOCK_VINE_BREAK" => Some(SoundEnum::BlockVineBreak),
            "BLOCK_VINE_FALL" => Some(SoundEnum::BlockVineFall),
            "BLOCK_VINE_HIT" => Some(SoundEnum::BlockVineHit),
            "BLOCK_VINE_PLACE" => Some(SoundEnum::BlockVinePlace),
            "BLOCK_VINE_STEP" => Some(SoundEnum::BlockVineStep),
            "BLOCK_WART_BLOCK_BREAK" => Some(SoundEnum::BlockWartBlockBreak),
            "BLOCK_WART_BLOCK_FALL" => Some(SoundEnum::BlockWartBlockFall),
            "BLOCK_WART_BLOCK_HIT" => Some(SoundEnum::BlockWartBlockHit),
            "BLOCK_WART_BLOCK_PLACE" => Some(SoundEnum::BlockWartBlockPlace),
            "BLOCK_WART_BLOCK_STEP" => Some(SoundEnum::BlockWartBlockStep),
            "BLOCK_WATER_AMBIENT" => Some(SoundEnum::BlockWaterAmbient),
            "BLOCK_WEEPING_VINES_BREAK" => Some(SoundEnum::BlockWeepingVinesBreak),
            "BLOCK_WEEPING_VINES_FALL" => Some(SoundEnum::BlockWeepingVinesFall),
            "BLOCK_WEEPING_VINES_HIT" => Some(SoundEnum::BlockWeepingVinesHit),
            "BLOCK_WEEPING_VINES_PLACE" => Some(SoundEnum::BlockWeepingVinesPlace),
            "BLOCK_WEEPING_VINES_STEP" => Some(SoundEnum::BlockWeepingVinesStep),
            "BLOCK_WET_GRASS_BREAK" => Some(SoundEnum::BlockWetGrassBreak),
            "BLOCK_WET_GRASS_FALL" => Some(SoundEnum::BlockWetGrassFall),
            "BLOCK_WET_GRASS_HIT" => Some(SoundEnum::BlockWetGrassHit),
            "BLOCK_WET_GRASS_PLACE" => Some(SoundEnum::BlockWetGrassPlace),
            "BLOCK_WET_GRASS_STEP" => Some(SoundEnum::BlockWetGrassStep),
            "BLOCK_WOODEN_BUTTON_CLICK_OFF" => Some(SoundEnum::BlockWoodenButtonClickOff),
            "BLOCK_WOODEN_BUTTON_CLICK_ON" => Some(SoundEnum::BlockWoodenButtonClickOn),
            "BLOCK_WOODEN_DOOR_CLOSE" => Some(SoundEnum::BlockWoodenDoorClose),
            "BLOCK_WOODEN_DOOR_OPEN" => Some(SoundEnum::BlockWoodenDoorOpen),
            "BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundEnum::BlockWoodenPressurePlateClickOff)
            }
            "BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundEnum::BlockWoodenPressurePlateClickOn)
            }
            "BLOCK_WOODEN_TRAPDOOR_CLOSE" => Some(SoundEnum::BlockWoodenTrapdoorClose),
            "BLOCK_WOODEN_TRAPDOOR_OPEN" => Some(SoundEnum::BlockWoodenTrapdoorOpen),
            "BLOCK_WOOD_BREAK" => Some(SoundEnum::BlockWoodBreak),
            "BLOCK_WOOD_FALL" => Some(SoundEnum::BlockWoodFall),
            "BLOCK_WOOD_HIT" => Some(SoundEnum::BlockWoodHit),
            "BLOCK_WOOD_PLACE" => Some(SoundEnum::BlockWoodPlace),
            "BLOCK_WOOD_STEP" => Some(SoundEnum::BlockWoodStep),
            "BLOCK_WOOL_BREAK" => Some(SoundEnum::BlockWoolBreak),
            "BLOCK_WOOL_FALL" => Some(SoundEnum::BlockWoolFall),
            "BLOCK_WOOL_HIT" => Some(SoundEnum::BlockWoolHit),
            "BLOCK_WOOL_PLACE" => Some(SoundEnum::BlockWoolPlace),
            "BLOCK_WOOL_STEP" => Some(SoundEnum::BlockWoolStep),
            "ENCHANT_THORNS_HIT" => Some(SoundEnum::EnchantThornsHit),
            "ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM" => Some(SoundEnum::EntityAllayAmbientWithoutItem),
            "ENTITY_ALLAY_AMBIENT_WITH_ITEM" => Some(SoundEnum::EntityAllayAmbientWithItem),
            "ENTITY_ALLAY_DEATH" => Some(SoundEnum::EntityAllayDeath),
            "ENTITY_ALLAY_HURT" => Some(SoundEnum::EntityAllayHurt),
            "ENTITY_ALLAY_ITEM_GIVEN" => Some(SoundEnum::EntityAllayItemGiven),
            "ENTITY_ALLAY_ITEM_TAKEN" => Some(SoundEnum::EntityAllayItemTaken),
            "ENTITY_ALLAY_ITEM_THROWN" => Some(SoundEnum::EntityAllayItemThrown),
            "ENTITY_ARMOR_STAND_BREAK" => Some(SoundEnum::EntityArmorStandBreak),
            "ENTITY_ARMOR_STAND_FALL" => Some(SoundEnum::EntityArmorStandFall),
            "ENTITY_ARMOR_STAND_HIT" => Some(SoundEnum::EntityArmorStandHit),
            "ENTITY_ARMOR_STAND_PLACE" => Some(SoundEnum::EntityArmorStandPlace),
            "ENTITY_ARROW_HIT" => Some(SoundEnum::EntityArrowHit),
            "ENTITY_ARROW_HIT_PLAYER" => Some(SoundEnum::EntityArrowHitPlayer),
            "ENTITY_ARROW_SHOOT" => Some(SoundEnum::EntityArrowShoot),
            "ENTITY_AXOLOTL_ATTACK" => Some(SoundEnum::EntityAxolotlAttack),
            "ENTITY_AXOLOTL_DEATH" => Some(SoundEnum::EntityAxolotlDeath),
            "ENTITY_AXOLOTL_HURT" => Some(SoundEnum::EntityAxolotlHurt),
            "ENTITY_AXOLOTL_IDLE_AIR" => Some(SoundEnum::EntityAxolotlIdleAir),
            "ENTITY_AXOLOTL_IDLE_WATER" => Some(SoundEnum::EntityAxolotlIdleWater),
            "ENTITY_AXOLOTL_SPLASH" => Some(SoundEnum::EntityAxolotlSplash),
            "ENTITY_AXOLOTL_SWIM" => Some(SoundEnum::EntityAxolotlSwim),
            "ENTITY_BAT_AMBIENT" => Some(SoundEnum::EntityBatAmbient),
            "ENTITY_BAT_DEATH" => Some(SoundEnum::EntityBatDeath),
            "ENTITY_BAT_HURT" => Some(SoundEnum::EntityBatHurt),
            "ENTITY_BAT_LOOP" => Some(SoundEnum::EntityBatLoop),
            "ENTITY_BAT_TAKEOFF" => Some(SoundEnum::EntityBatTakeoff),
            "ENTITY_BEE_DEATH" => Some(SoundEnum::EntityBeeDeath),
            "ENTITY_BEE_HURT" => Some(SoundEnum::EntityBeeHurt),
            "ENTITY_BEE_LOOP" => Some(SoundEnum::EntityBeeLoop),
            "ENTITY_BEE_LOOP_AGGRESSIVE" => Some(SoundEnum::EntityBeeLoopAggressive),
            "ENTITY_BEE_POLLINATE" => Some(SoundEnum::EntityBeePollinate),
            "ENTITY_BEE_STING" => Some(SoundEnum::EntityBeeSting),
            "ENTITY_BLAZE_AMBIENT" => Some(SoundEnum::EntityBlazeAmbient),
            "ENTITY_BLAZE_BURN" => Some(SoundEnum::EntityBlazeBurn),
            "ENTITY_BLAZE_DEATH" => Some(SoundEnum::EntityBlazeDeath),
            "ENTITY_BLAZE_HURT" => Some(SoundEnum::EntityBlazeHurt),
            "ENTITY_BLAZE_SHOOT" => Some(SoundEnum::EntityBlazeShoot),
            "ENTITY_BOAT_PADDLE_LAND" => Some(SoundEnum::EntityBoatPaddleLand),
            "ENTITY_BOAT_PADDLE_WATER" => Some(SoundEnum::EntityBoatPaddleWater),
            "ENTITY_CAMEL_AMBIENT" => Some(SoundEnum::EntityCamelAmbient),
            "ENTITY_CAMEL_DASH" => Some(SoundEnum::EntityCamelDash),
            "ENTITY_CAMEL_DASH_READY" => Some(SoundEnum::EntityCamelDashReady),
            "ENTITY_CAMEL_DEATH" => Some(SoundEnum::EntityCamelDeath),
            "ENTITY_CAMEL_EAT" => Some(SoundEnum::EntityCamelEat),
            "ENTITY_CAMEL_HURT" => Some(SoundEnum::EntityCamelHurt),
            "ENTITY_CAMEL_SADDLE" => Some(SoundEnum::EntityCamelSaddle),
            "ENTITY_CAMEL_SIT" => Some(SoundEnum::EntityCamelSit),
            "ENTITY_CAMEL_STAND" => Some(SoundEnum::EntityCamelStand),
            "ENTITY_CAMEL_STEP" => Some(SoundEnum::EntityCamelStep),
            "ENTITY_CAMEL_STEP_SAND" => Some(SoundEnum::EntityCamelStepSand),
            "ENTITY_CAT_AMBIENT" => Some(SoundEnum::EntityCatAmbient),
            "ENTITY_CAT_BEG_FOR_FOOD" => Some(SoundEnum::EntityCatBegForFood),
            "ENTITY_CAT_DEATH" => Some(SoundEnum::EntityCatDeath),
            "ENTITY_CAT_EAT" => Some(SoundEnum::EntityCatEat),
            "ENTITY_CAT_HISS" => Some(SoundEnum::EntityCatHiss),
            "ENTITY_CAT_HURT" => Some(SoundEnum::EntityCatHurt),
            "ENTITY_CAT_PURR" => Some(SoundEnum::EntityCatPurr),
            "ENTITY_CAT_PURREOW" => Some(SoundEnum::EntityCatPurreow),
            "ENTITY_CAT_STRAY_AMBIENT" => Some(SoundEnum::EntityCatStrayAmbient),
            "ENTITY_CHICKEN_AMBIENT" => Some(SoundEnum::EntityChickenAmbient),
            "ENTITY_CHICKEN_DEATH" => Some(SoundEnum::EntityChickenDeath),
            "ENTITY_CHICKEN_EGG" => Some(SoundEnum::EntityChickenEgg),
            "ENTITY_CHICKEN_HURT" => Some(SoundEnum::EntityChickenHurt),
            "ENTITY_CHICKEN_STEP" => Some(SoundEnum::EntityChickenStep),
            "ENTITY_COD_AMBIENT" => Some(SoundEnum::EntityCodAmbient),
            "ENTITY_COD_DEATH" => Some(SoundEnum::EntityCodDeath),
            "ENTITY_COD_FLOP" => Some(SoundEnum::EntityCodFlop),
            "ENTITY_COD_HURT" => Some(SoundEnum::EntityCodHurt),
            "ENTITY_COW_AMBIENT" => Some(SoundEnum::EntityCowAmbient),
            "ENTITY_COW_DEATH" => Some(SoundEnum::EntityCowDeath),
            "ENTITY_COW_HURT" => Some(SoundEnum::EntityCowHurt),
            "ENTITY_COW_MILK" => Some(SoundEnum::EntityCowMilk),
            "ENTITY_COW_STEP" => Some(SoundEnum::EntityCowStep),
            "ENTITY_CREEPER_DEATH" => Some(SoundEnum::EntityCreeperDeath),
            "ENTITY_CREEPER_HURT" => Some(SoundEnum::EntityCreeperHurt),
            "ENTITY_CREEPER_PRIMED" => Some(SoundEnum::EntityCreeperPrimed),
            "ENTITY_DOLPHIN_AMBIENT" => Some(SoundEnum::EntityDolphinAmbient),
            "ENTITY_DOLPHIN_AMBIENT_WATER" => Some(SoundEnum::EntityDolphinAmbientWater),
            "ENTITY_DOLPHIN_ATTACK" => Some(SoundEnum::EntityDolphinAttack),
            "ENTITY_DOLPHIN_DEATH" => Some(SoundEnum::EntityDolphinDeath),
            "ENTITY_DOLPHIN_EAT" => Some(SoundEnum::EntityDolphinEat),
            "ENTITY_DOLPHIN_HURT" => Some(SoundEnum::EntityDolphinHurt),
            "ENTITY_DOLPHIN_JUMP" => Some(SoundEnum::EntityDolphinJump),
            "ENTITY_DOLPHIN_PLAY" => Some(SoundEnum::EntityDolphinPlay),
            "ENTITY_DOLPHIN_SPLASH" => Some(SoundEnum::EntityDolphinSplash),
            "ENTITY_DOLPHIN_SWIM" => Some(SoundEnum::EntityDolphinSwim),
            "ENTITY_DONKEY_AMBIENT" => Some(SoundEnum::EntityDonkeyAmbient),
            "ENTITY_DONKEY_ANGRY" => Some(SoundEnum::EntityDonkeyAngry),
            "ENTITY_DONKEY_CHEST" => Some(SoundEnum::EntityDonkeyChest),
            "ENTITY_DONKEY_DEATH" => Some(SoundEnum::EntityDonkeyDeath),
            "ENTITY_DONKEY_EAT" => Some(SoundEnum::EntityDonkeyEat),
            "ENTITY_DONKEY_HURT" => Some(SoundEnum::EntityDonkeyHurt),
            "ENTITY_DRAGON_FIREBALL_EXPLODE" => Some(SoundEnum::EntityDragonFireballExplode),
            "ENTITY_DROWNED_AMBIENT" => Some(SoundEnum::EntityDrownedAmbient),
            "ENTITY_DROWNED_AMBIENT_WATER" => Some(SoundEnum::EntityDrownedAmbientWater),
            "ENTITY_DROWNED_DEATH" => Some(SoundEnum::EntityDrownedDeath),
            "ENTITY_DROWNED_DEATH_WATER" => Some(SoundEnum::EntityDrownedDeathWater),
            "ENTITY_DROWNED_HURT" => Some(SoundEnum::EntityDrownedHurt),
            "ENTITY_DROWNED_HURT_WATER" => Some(SoundEnum::EntityDrownedHurtWater),
            "ENTITY_DROWNED_SHOOT" => Some(SoundEnum::EntityDrownedShoot),
            "ENTITY_DROWNED_STEP" => Some(SoundEnum::EntityDrownedStep),
            "ENTITY_DROWNED_SWIM" => Some(SoundEnum::EntityDrownedSwim),
            "ENTITY_EGG_THROW" => Some(SoundEnum::EntityEggThrow),
            "ENTITY_ELDER_GUARDIAN_AMBIENT" => Some(SoundEnum::EntityElderGuardianAmbient),
            "ENTITY_ELDER_GUARDIAN_AMBIENT_LAND" => Some(SoundEnum::EntityElderGuardianAmbientLand),
            "ENTITY_ELDER_GUARDIAN_CURSE" => Some(SoundEnum::EntityElderGuardianCurse),
            "ENTITY_ELDER_GUARDIAN_DEATH" => Some(SoundEnum::EntityElderGuardianDeath),
            "ENTITY_ELDER_GUARDIAN_DEATH_LAND" => Some(SoundEnum::EntityElderGuardianDeathLand),
            "ENTITY_ELDER_GUARDIAN_FLOP" => Some(SoundEnum::EntityElderGuardianFlop),
            "ENTITY_ELDER_GUARDIAN_HURT" => Some(SoundEnum::EntityElderGuardianHurt),
            "ENTITY_ELDER_GUARDIAN_HURT_LAND" => Some(SoundEnum::EntityElderGuardianHurtLand),
            "ENTITY_ENDERMAN_AMBIENT" => Some(SoundEnum::EntityEndermanAmbient),
            "ENTITY_ENDERMAN_DEATH" => Some(SoundEnum::EntityEndermanDeath),
            "ENTITY_ENDERMAN_HURT" => Some(SoundEnum::EntityEndermanHurt),
            "ENTITY_ENDERMAN_SCREAM" => Some(SoundEnum::EntityEndermanScream),
            "ENTITY_ENDERMAN_STARE" => Some(SoundEnum::EntityEndermanStare),
            "ENTITY_ENDERMAN_TELEPORT" => Some(SoundEnum::EntityEndermanTeleport),
            "ENTITY_ENDERMITE_AMBIENT" => Some(SoundEnum::EntityEndermiteAmbient),
            "ENTITY_ENDERMITE_DEATH" => Some(SoundEnum::EntityEndermiteDeath),
            "ENTITY_ENDERMITE_HURT" => Some(SoundEnum::EntityEndermiteHurt),
            "ENTITY_ENDERMITE_STEP" => Some(SoundEnum::EntityEndermiteStep),
            "ENTITY_ENDER_DRAGON_AMBIENT" => Some(SoundEnum::EntityEnderDragonAmbient),
            "ENTITY_ENDER_DRAGON_DEATH" => Some(SoundEnum::EntityEnderDragonDeath),
            "ENTITY_ENDER_DRAGON_FLAP" => Some(SoundEnum::EntityEnderDragonFlap),
            "ENTITY_ENDER_DRAGON_GROWL" => Some(SoundEnum::EntityEnderDragonGrowl),
            "ENTITY_ENDER_DRAGON_HURT" => Some(SoundEnum::EntityEnderDragonHurt),
            "ENTITY_ENDER_DRAGON_SHOOT" => Some(SoundEnum::EntityEnderDragonShoot),
            "ENTITY_ENDER_EYE_DEATH" => Some(SoundEnum::EntityEnderEyeDeath),
            "ENTITY_ENDER_EYE_LAUNCH" => Some(SoundEnum::EntityEnderEyeLaunch),
            "ENTITY_ENDER_PEARL_THROW" => Some(SoundEnum::EntityEnderPearlThrow),
            "ENTITY_EVOKER_AMBIENT" => Some(SoundEnum::EntityEvokerAmbient),
            "ENTITY_EVOKER_CAST_SPELL" => Some(SoundEnum::EntityEvokerCastSpell),
            "ENTITY_EVOKER_CELEBRATE" => Some(SoundEnum::EntityEvokerCelebrate),
            "ENTITY_EVOKER_DEATH" => Some(SoundEnum::EntityEvokerDeath),
            "ENTITY_EVOKER_FANGS_ATTACK" => Some(SoundEnum::EntityEvokerFangsAttack),
            "ENTITY_EVOKER_HURT" => Some(SoundEnum::EntityEvokerHurt),
            "ENTITY_EVOKER_PREPARE_ATTACK" => Some(SoundEnum::EntityEvokerPrepareAttack),
            "ENTITY_EVOKER_PREPARE_SUMMON" => Some(SoundEnum::EntityEvokerPrepareSummon),
            "ENTITY_EVOKER_PREPARE_WOLOLO" => Some(SoundEnum::EntityEvokerPrepareWololo),
            "ENTITY_EXPERIENCE_BOTTLE_THROW" => Some(SoundEnum::EntityExperienceBottleThrow),
            "ENTITY_EXPERIENCE_ORB_PICKUP" => Some(SoundEnum::EntityExperienceOrbPickup),
            "ENTITY_FIREWORK_ROCKET_BLAST" => Some(SoundEnum::EntityFireworkRocketBlast),
            "ENTITY_FIREWORK_ROCKET_BLAST_FAR" => Some(SoundEnum::EntityFireworkRocketBlastFar),
            "ENTITY_FIREWORK_ROCKET_LARGE_BLAST" => Some(SoundEnum::EntityFireworkRocketLargeBlast),
            "ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR" => {
                Some(SoundEnum::EntityFireworkRocketLargeBlastFar)
            }
            "ENTITY_FIREWORK_ROCKET_LAUNCH" => Some(SoundEnum::EntityFireworkRocketLaunch),
            "ENTITY_FIREWORK_ROCKET_SHOOT" => Some(SoundEnum::EntityFireworkRocketShoot),
            "ENTITY_FIREWORK_ROCKET_TWINKLE" => Some(SoundEnum::EntityFireworkRocketTwinkle),
            "ENTITY_FIREWORK_ROCKET_TWINKLE_FAR" => Some(SoundEnum::EntityFireworkRocketTwinkleFar),
            "ENTITY_FISHING_BOBBER_RETRIEVE" => Some(SoundEnum::EntityFishingBobberRetrieve),
            "ENTITY_FISHING_BOBBER_SPLASH" => Some(SoundEnum::EntityFishingBobberSplash),
            "ENTITY_FISHING_BOBBER_THROW" => Some(SoundEnum::EntityFishingBobberThrow),
            "ENTITY_FISH_SWIM" => Some(SoundEnum::EntityFishSwim),
            "ENTITY_FOX_AGGRO" => Some(SoundEnum::EntityFoxAggro),
            "ENTITY_FOX_AMBIENT" => Some(SoundEnum::EntityFoxAmbient),
            "ENTITY_FOX_BITE" => Some(SoundEnum::EntityFoxBite),
            "ENTITY_FOX_DEATH" => Some(SoundEnum::EntityFoxDeath),
            "ENTITY_FOX_EAT" => Some(SoundEnum::EntityFoxEat),
            "ENTITY_FOX_HURT" => Some(SoundEnum::EntityFoxHurt),
            "ENTITY_FOX_SCREECH" => Some(SoundEnum::EntityFoxScreech),
            "ENTITY_FOX_SLEEP" => Some(SoundEnum::EntityFoxSleep),
            "ENTITY_FOX_SNIFF" => Some(SoundEnum::EntityFoxSniff),
            "ENTITY_FOX_SPIT" => Some(SoundEnum::EntityFoxSpit),
            "ENTITY_FOX_TELEPORT" => Some(SoundEnum::EntityFoxTeleport),
            "ENTITY_FROG_AMBIENT" => Some(SoundEnum::EntityFrogAmbient),
            "ENTITY_FROG_DEATH" => Some(SoundEnum::EntityFrogDeath),
            "ENTITY_FROG_EAT" => Some(SoundEnum::EntityFrogEat),
            "ENTITY_FROG_HURT" => Some(SoundEnum::EntityFrogHurt),
            "ENTITY_FROG_LAY_SPAWN" => Some(SoundEnum::EntityFrogLaySpawn),
            "ENTITY_FROG_LONG_JUMP" => Some(SoundEnum::EntityFrogLongJump),
            "ENTITY_FROG_STEP" => Some(SoundEnum::EntityFrogStep),
            "ENTITY_FROG_TONGUE" => Some(SoundEnum::EntityFrogTongue),
            "ENTITY_GENERIC_BIG_FALL" => Some(SoundEnum::EntityGenericBigFall),
            "ENTITY_GENERIC_BURN" => Some(SoundEnum::EntityGenericBurn),
            "ENTITY_GENERIC_DEATH" => Some(SoundEnum::EntityGenericDeath),
            "ENTITY_GENERIC_DRINK" => Some(SoundEnum::EntityGenericDrink),
            "ENTITY_GENERIC_EAT" => Some(SoundEnum::EntityGenericEat),
            "ENTITY_GENERIC_EXPLODE" => Some(SoundEnum::EntityGenericExplode),
            "ENTITY_GENERIC_EXTINGUISH_FIRE" => Some(SoundEnum::EntityGenericExtinguishFire),
            "ENTITY_GENERIC_HURT" => Some(SoundEnum::EntityGenericHurt),
            "ENTITY_GENERIC_SMALL_FALL" => Some(SoundEnum::EntityGenericSmallFall),
            "ENTITY_GENERIC_SPLASH" => Some(SoundEnum::EntityGenericSplash),
            "ENTITY_GENERIC_SWIM" => Some(SoundEnum::EntityGenericSwim),
            "ENTITY_GHAST_AMBIENT" => Some(SoundEnum::EntityGhastAmbient),
            "ENTITY_GHAST_DEATH" => Some(SoundEnum::EntityGhastDeath),
            "ENTITY_GHAST_HURT" => Some(SoundEnum::EntityGhastHurt),
            "ENTITY_GHAST_SCREAM" => Some(SoundEnum::EntityGhastScream),
            "ENTITY_GHAST_SHOOT" => Some(SoundEnum::EntityGhastShoot),
            "ENTITY_GHAST_WARN" => Some(SoundEnum::EntityGhastWarn),
            "ENTITY_GLOW_ITEM_FRAME_ADD_ITEM" => Some(SoundEnum::EntityGlowItemFrameAddItem),
            "ENTITY_GLOW_ITEM_FRAME_BREAK" => Some(SoundEnum::EntityGlowItemFrameBreak),
            "ENTITY_GLOW_ITEM_FRAME_PLACE" => Some(SoundEnum::EntityGlowItemFramePlace),
            "ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM" => Some(SoundEnum::EntityGlowItemFrameRemoveItem),
            "ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM" => Some(SoundEnum::EntityGlowItemFrameRotateItem),
            "ENTITY_GLOW_SQUID_AMBIENT" => Some(SoundEnum::EntityGlowSquidAmbient),
            "ENTITY_GLOW_SQUID_DEATH" => Some(SoundEnum::EntityGlowSquidDeath),
            "ENTITY_GLOW_SQUID_HURT" => Some(SoundEnum::EntityGlowSquidHurt),
            "ENTITY_GLOW_SQUID_SQUIRT" => Some(SoundEnum::EntityGlowSquidSquirt),
            "ENTITY_GOAT_AMBIENT" => Some(SoundEnum::EntityGoatAmbient),
            "ENTITY_GOAT_DEATH" => Some(SoundEnum::EntityGoatDeath),
            "ENTITY_GOAT_EAT" => Some(SoundEnum::EntityGoatEat),
            "ENTITY_GOAT_HORN_BREAK" => Some(SoundEnum::EntityGoatHornBreak),
            "ENTITY_GOAT_HURT" => Some(SoundEnum::EntityGoatHurt),
            "ENTITY_GOAT_LONG_JUMP" => Some(SoundEnum::EntityGoatLongJump),
            "ENTITY_GOAT_MILK" => Some(SoundEnum::EntityGoatMilk),
            "ENTITY_GOAT_PREPARE_RAM" => Some(SoundEnum::EntityGoatPrepareRam),
            "ENTITY_GOAT_RAM_IMPACT" => Some(SoundEnum::EntityGoatRamImpact),
            "ENTITY_GOAT_SCREAMING_AMBIENT" => Some(SoundEnum::EntityGoatScreamingAmbient),
            "ENTITY_GOAT_SCREAMING_DEATH" => Some(SoundEnum::EntityGoatScreamingDeath),
            "ENTITY_GOAT_SCREAMING_EAT" => Some(SoundEnum::EntityGoatScreamingEat),
            "ENTITY_GOAT_SCREAMING_HORN_BREAK" => Some(SoundEnum::EntityGoatScreamingHornBreak),
            "ENTITY_GOAT_SCREAMING_HURT" => Some(SoundEnum::EntityGoatScreamingHurt),
            "ENTITY_GOAT_SCREAMING_LONG_JUMP" => Some(SoundEnum::EntityGoatScreamingLongJump),
            "ENTITY_GOAT_SCREAMING_MILK" => Some(SoundEnum::EntityGoatScreamingMilk),
            "ENTITY_GOAT_SCREAMING_PREPARE_RAM" => Some(SoundEnum::EntityGoatScreamingPrepareRam),
            "ENTITY_GOAT_SCREAMING_RAM_IMPACT" => Some(SoundEnum::EntityGoatScreamingRamImpact),
            "ENTITY_GOAT_STEP" => Some(SoundEnum::EntityGoatStep),
            "ENTITY_GUARDIAN_AMBIENT" => Some(SoundEnum::EntityGuardianAmbient),
            "ENTITY_GUARDIAN_AMBIENT_LAND" => Some(SoundEnum::EntityGuardianAmbientLand),
            "ENTITY_GUARDIAN_ATTACK" => Some(SoundEnum::EntityGuardianAttack),
            "ENTITY_GUARDIAN_DEATH" => Some(SoundEnum::EntityGuardianDeath),
            "ENTITY_GUARDIAN_DEATH_LAND" => Some(SoundEnum::EntityGuardianDeathLand),
            "ENTITY_GUARDIAN_FLOP" => Some(SoundEnum::EntityGuardianFlop),
            "ENTITY_GUARDIAN_HURT" => Some(SoundEnum::EntityGuardianHurt),
            "ENTITY_GUARDIAN_HURT_LAND" => Some(SoundEnum::EntityGuardianHurtLand),
            "ENTITY_HOGLIN_AMBIENT" => Some(SoundEnum::EntityHoglinAmbient),
            "ENTITY_HOGLIN_ANGRY" => Some(SoundEnum::EntityHoglinAngry),
            "ENTITY_HOGLIN_ATTACK" => Some(SoundEnum::EntityHoglinAttack),
            "ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED" => {
                Some(SoundEnum::EntityHoglinConvertedToZombified)
            }
            "ENTITY_HOGLIN_DEATH" => Some(SoundEnum::EntityHoglinDeath),
            "ENTITY_HOGLIN_HURT" => Some(SoundEnum::EntityHoglinHurt),
            "ENTITY_HOGLIN_RETREAT" => Some(SoundEnum::EntityHoglinRetreat),
            "ENTITY_HOGLIN_STEP" => Some(SoundEnum::EntityHoglinStep),
            "ENTITY_HORSE_AMBIENT" => Some(SoundEnum::EntityHorseAmbient),
            "ENTITY_HORSE_ANGRY" => Some(SoundEnum::EntityHorseAngry),
            "ENTITY_HORSE_ARMOR" => Some(SoundEnum::EntityHorseArmor),
            "ENTITY_HORSE_BREATHE" => Some(SoundEnum::EntityHorseBreathe),
            "ENTITY_HORSE_DEATH" => Some(SoundEnum::EntityHorseDeath),
            "ENTITY_HORSE_EAT" => Some(SoundEnum::EntityHorseEat),
            "ENTITY_HORSE_GALLOP" => Some(SoundEnum::EntityHorseGallop),
            "ENTITY_HORSE_HURT" => Some(SoundEnum::EntityHorseHurt),
            "ENTITY_HORSE_JUMP" => Some(SoundEnum::EntityHorseJump),
            "ENTITY_HORSE_LAND" => Some(SoundEnum::EntityHorseLand),
            "ENTITY_HORSE_SADDLE" => Some(SoundEnum::EntityHorseSaddle),
            "ENTITY_HORSE_STEP" => Some(SoundEnum::EntityHorseStep),
            "ENTITY_HORSE_STEP_WOOD" => Some(SoundEnum::EntityHorseStepWood),
            "ENTITY_HOSTILE_BIG_FALL" => Some(SoundEnum::EntityHostileBigFall),
            "ENTITY_HOSTILE_DEATH" => Some(SoundEnum::EntityHostileDeath),
            "ENTITY_HOSTILE_HURT" => Some(SoundEnum::EntityHostileHurt),
            "ENTITY_HOSTILE_SMALL_FALL" => Some(SoundEnum::EntityHostileSmallFall),
            "ENTITY_HOSTILE_SPLASH" => Some(SoundEnum::EntityHostileSplash),
            "ENTITY_HOSTILE_SWIM" => Some(SoundEnum::EntityHostileSwim),
            "ENTITY_HUSK_AMBIENT" => Some(SoundEnum::EntityHuskAmbient),
            "ENTITY_HUSK_CONVERTED_TO_ZOMBIE" => Some(SoundEnum::EntityHuskConvertedToZombie),
            "ENTITY_HUSK_DEATH" => Some(SoundEnum::EntityHuskDeath),
            "ENTITY_HUSK_HURT" => Some(SoundEnum::EntityHuskHurt),
            "ENTITY_HUSK_STEP" => Some(SoundEnum::EntityHuskStep),
            "ENTITY_ILLUSIONER_AMBIENT" => Some(SoundEnum::EntityIllusionerAmbient),
            "ENTITY_ILLUSIONER_CAST_SPELL" => Some(SoundEnum::EntityIllusionerCastSpell),
            "ENTITY_ILLUSIONER_DEATH" => Some(SoundEnum::EntityIllusionerDeath),
            "ENTITY_ILLUSIONER_HURT" => Some(SoundEnum::EntityIllusionerHurt),
            "ENTITY_ILLUSIONER_MIRROR_MOVE" => Some(SoundEnum::EntityIllusionerMirrorMove),
            "ENTITY_ILLUSIONER_PREPARE_BLINDNESS" => {
                Some(SoundEnum::EntityIllusionerPrepareBlindness)
            }
            "ENTITY_ILLUSIONER_PREPARE_MIRROR" => Some(SoundEnum::EntityIllusionerPrepareMirror),
            "ENTITY_IRON_GOLEM_ATTACK" => Some(SoundEnum::EntityIronGolemAttack),
            "ENTITY_IRON_GOLEM_DAMAGE" => Some(SoundEnum::EntityIronGolemDamage),
            "ENTITY_IRON_GOLEM_DEATH" => Some(SoundEnum::EntityIronGolemDeath),
            "ENTITY_IRON_GOLEM_HURT" => Some(SoundEnum::EntityIronGolemHurt),
            "ENTITY_IRON_GOLEM_REPAIR" => Some(SoundEnum::EntityIronGolemRepair),
            "ENTITY_IRON_GOLEM_STEP" => Some(SoundEnum::EntityIronGolemStep),
            "ENTITY_ITEM_BREAK" => Some(SoundEnum::EntityItemBreak),
            "ENTITY_ITEM_FRAME_ADD_ITEM" => Some(SoundEnum::EntityItemFrameAddItem),
            "ENTITY_ITEM_FRAME_BREAK" => Some(SoundEnum::EntityItemFrameBreak),
            "ENTITY_ITEM_FRAME_PLACE" => Some(SoundEnum::EntityItemFramePlace),
            "ENTITY_ITEM_FRAME_REMOVE_ITEM" => Some(SoundEnum::EntityItemFrameRemoveItem),
            "ENTITY_ITEM_FRAME_ROTATE_ITEM" => Some(SoundEnum::EntityItemFrameRotateItem),
            "ENTITY_ITEM_PICKUP" => Some(SoundEnum::EntityItemPickup),
            "ENTITY_LEASH_KNOT_BREAK" => Some(SoundEnum::EntityLeashKnotBreak),
            "ENTITY_LEASH_KNOT_PLACE" => Some(SoundEnum::EntityLeashKnotPlace),
            "ENTITY_LIGHTNING_BOLT_IMPACT" => Some(SoundEnum::EntityLightningBoltImpact),
            "ENTITY_LIGHTNING_BOLT_THUNDER" => Some(SoundEnum::EntityLightningBoltThunder),
            "ENTITY_LINGERING_POTION_THROW" => Some(SoundEnum::EntityLingeringPotionThrow),
            "ENTITY_LLAMA_AMBIENT" => Some(SoundEnum::EntityLlamaAmbient),
            "ENTITY_LLAMA_ANGRY" => Some(SoundEnum::EntityLlamaAngry),
            "ENTITY_LLAMA_CHEST" => Some(SoundEnum::EntityLlamaChest),
            "ENTITY_LLAMA_DEATH" => Some(SoundEnum::EntityLlamaDeath),
            "ENTITY_LLAMA_EAT" => Some(SoundEnum::EntityLlamaEat),
            "ENTITY_LLAMA_HURT" => Some(SoundEnum::EntityLlamaHurt),
            "ENTITY_LLAMA_SPIT" => Some(SoundEnum::EntityLlamaSpit),
            "ENTITY_LLAMA_STEP" => Some(SoundEnum::EntityLlamaStep),
            "ENTITY_LLAMA_SWAG" => Some(SoundEnum::EntityLlamaSwag),
            "ENTITY_MAGMA_CUBE_DEATH" => Some(SoundEnum::EntityMagmaCubeDeath),
            "ENTITY_MAGMA_CUBE_DEATH_SMALL" => Some(SoundEnum::EntityMagmaCubeDeathSmall),
            "ENTITY_MAGMA_CUBE_HURT" => Some(SoundEnum::EntityMagmaCubeHurt),
            "ENTITY_MAGMA_CUBE_HURT_SMALL" => Some(SoundEnum::EntityMagmaCubeHurtSmall),
            "ENTITY_MAGMA_CUBE_JUMP" => Some(SoundEnum::EntityMagmaCubeJump),
            "ENTITY_MAGMA_CUBE_SQUISH" => Some(SoundEnum::EntityMagmaCubeSquish),
            "ENTITY_MAGMA_CUBE_SQUISH_SMALL" => Some(SoundEnum::EntityMagmaCubeSquishSmall),
            "ENTITY_MINECART_INSIDE" => Some(SoundEnum::EntityMinecartInside),
            "ENTITY_MINECART_INSIDE_UNDERWATER" => Some(SoundEnum::EntityMinecartInsideUnderwater),
            "ENTITY_MINECART_RIDING" => Some(SoundEnum::EntityMinecartRiding),
            "ENTITY_MOOSHROOM_CONVERT" => Some(SoundEnum::EntityMooshroomConvert),
            "ENTITY_MOOSHROOM_EAT" => Some(SoundEnum::EntityMooshroomEat),
            "ENTITY_MOOSHROOM_MILK" => Some(SoundEnum::EntityMooshroomMilk),
            "ENTITY_MOOSHROOM_SHEAR" => Some(SoundEnum::EntityMooshroomShear),
            "ENTITY_MOOSHROOM_SUSPICIOUS_MILK" => Some(SoundEnum::EntityMooshroomSuspiciousMilk),
            "ENTITY_MULE_AMBIENT" => Some(SoundEnum::EntityMuleAmbient),
            "ENTITY_MULE_ANGRY" => Some(SoundEnum::EntityMuleAngry),
            "ENTITY_MULE_CHEST" => Some(SoundEnum::EntityMuleChest),
            "ENTITY_MULE_DEATH" => Some(SoundEnum::EntityMuleDeath),
            "ENTITY_MULE_EAT" => Some(SoundEnum::EntityMuleEat),
            "ENTITY_MULE_HURT" => Some(SoundEnum::EntityMuleHurt),
            "ENTITY_OCELOT_AMBIENT" => Some(SoundEnum::EntityOcelotAmbient),
            "ENTITY_OCELOT_DEATH" => Some(SoundEnum::EntityOcelotDeath),
            "ENTITY_OCELOT_HURT" => Some(SoundEnum::EntityOcelotHurt),
            "ENTITY_PAINTING_BREAK" => Some(SoundEnum::EntityPaintingBreak),
            "ENTITY_PAINTING_PLACE" => Some(SoundEnum::EntityPaintingPlace),
            "ENTITY_PANDA_AGGRESSIVE_AMBIENT" => Some(SoundEnum::EntityPandaAggressiveAmbient),
            "ENTITY_PANDA_AMBIENT" => Some(SoundEnum::EntityPandaAmbient),
            "ENTITY_PANDA_BITE" => Some(SoundEnum::EntityPandaBite),
            "ENTITY_PANDA_CANT_BREED" => Some(SoundEnum::EntityPandaCantBreed),
            "ENTITY_PANDA_DEATH" => Some(SoundEnum::EntityPandaDeath),
            "ENTITY_PANDA_EAT" => Some(SoundEnum::EntityPandaEat),
            "ENTITY_PANDA_HURT" => Some(SoundEnum::EntityPandaHurt),
            "ENTITY_PANDA_PRE_SNEEZE" => Some(SoundEnum::EntityPandaPreSneeze),
            "ENTITY_PANDA_SNEEZE" => Some(SoundEnum::EntityPandaSneeze),
            "ENTITY_PANDA_STEP" => Some(SoundEnum::EntityPandaStep),
            "ENTITY_PANDA_WORRIED_AMBIENT" => Some(SoundEnum::EntityPandaWorriedAmbient),
            "ENTITY_PARROT_AMBIENT" => Some(SoundEnum::EntityParrotAmbient),
            "ENTITY_PARROT_DEATH" => Some(SoundEnum::EntityParrotDeath),
            "ENTITY_PARROT_EAT" => Some(SoundEnum::EntityParrotEat),
            "ENTITY_PARROT_FLY" => Some(SoundEnum::EntityParrotFly),
            "ENTITY_PARROT_HURT" => Some(SoundEnum::EntityParrotHurt),
            "ENTITY_PARROT_IMITATE_BLAZE" => Some(SoundEnum::EntityParrotImitateBlaze),
            "ENTITY_PARROT_IMITATE_CREEPER" => Some(SoundEnum::EntityParrotImitateCreeper),
            "ENTITY_PARROT_IMITATE_DROWNED" => Some(SoundEnum::EntityParrotImitateDrowned),
            "ENTITY_PARROT_IMITATE_ELDER_GUARDIAN" => {
                Some(SoundEnum::EntityParrotImitateElderGuardian)
            }
            "ENTITY_PARROT_IMITATE_ENDERMITE" => Some(SoundEnum::EntityParrotImitateEndermite),
            "ENTITY_PARROT_IMITATE_ENDER_DRAGON" => Some(SoundEnum::EntityParrotImitateEnderDragon),
            "ENTITY_PARROT_IMITATE_EVOKER" => Some(SoundEnum::EntityParrotImitateEvoker),
            "ENTITY_PARROT_IMITATE_GHAST" => Some(SoundEnum::EntityParrotImitateGhast),
            "ENTITY_PARROT_IMITATE_GUARDIAN" => Some(SoundEnum::EntityParrotImitateGuardian),
            "ENTITY_PARROT_IMITATE_HOGLIN" => Some(SoundEnum::EntityParrotImitateHoglin),
            "ENTITY_PARROT_IMITATE_HUSK" => Some(SoundEnum::EntityParrotImitateHusk),
            "ENTITY_PARROT_IMITATE_ILLUSIONER" => Some(SoundEnum::EntityParrotImitateIllusioner),
            "ENTITY_PARROT_IMITATE_MAGMA_CUBE" => Some(SoundEnum::EntityParrotImitateMagmaCube),
            "ENTITY_PARROT_IMITATE_PHANTOM" => Some(SoundEnum::EntityParrotImitatePhantom),
            "ENTITY_PARROT_IMITATE_PIGLIN" => Some(SoundEnum::EntityParrotImitatePiglin),
            "ENTITY_PARROT_IMITATE_PIGLIN_BRUTE" => Some(SoundEnum::EntityParrotImitatePiglinBrute),
            "ENTITY_PARROT_IMITATE_PILLAGER" => Some(SoundEnum::EntityParrotImitatePillager),
            "ENTITY_PARROT_IMITATE_RAVAGER" => Some(SoundEnum::EntityParrotImitateRavager),
            "ENTITY_PARROT_IMITATE_SHULKER" => Some(SoundEnum::EntityParrotImitateShulker),
            "ENTITY_PARROT_IMITATE_SILVERFISH" => Some(SoundEnum::EntityParrotImitateSilverfish),
            "ENTITY_PARROT_IMITATE_SKELETON" => Some(SoundEnum::EntityParrotImitateSkeleton),
            "ENTITY_PARROT_IMITATE_SLIME" => Some(SoundEnum::EntityParrotImitateSlime),
            "ENTITY_PARROT_IMITATE_SPIDER" => Some(SoundEnum::EntityParrotImitateSpider),
            "ENTITY_PARROT_IMITATE_STRAY" => Some(SoundEnum::EntityParrotImitateStray),
            "ENTITY_PARROT_IMITATE_VEX" => Some(SoundEnum::EntityParrotImitateVex),
            "ENTITY_PARROT_IMITATE_VINDICATOR" => Some(SoundEnum::EntityParrotImitateVindicator),
            "ENTITY_PARROT_IMITATE_WARDEN" => Some(SoundEnum::EntityParrotImitateWarden),
            "ENTITY_PARROT_IMITATE_WITCH" => Some(SoundEnum::EntityParrotImitateWitch),
            "ENTITY_PARROT_IMITATE_WITHER" => Some(SoundEnum::EntityParrotImitateWither),
            "ENTITY_PARROT_IMITATE_WITHER_SKELETON" => {
                Some(SoundEnum::EntityParrotImitateWitherSkeleton)
            }
            "ENTITY_PARROT_IMITATE_ZOGLIN" => Some(SoundEnum::EntityParrotImitateZoglin),
            "ENTITY_PARROT_IMITATE_ZOMBIE" => Some(SoundEnum::EntityParrotImitateZombie),
            "ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER" => {
                Some(SoundEnum::EntityParrotImitateZombieVillager)
            }
            "ENTITY_PARROT_STEP" => Some(SoundEnum::EntityParrotStep),
            "ENTITY_PHANTOM_AMBIENT" => Some(SoundEnum::EntityPhantomAmbient),
            "ENTITY_PHANTOM_BITE" => Some(SoundEnum::EntityPhantomBite),
            "ENTITY_PHANTOM_DEATH" => Some(SoundEnum::EntityPhantomDeath),
            "ENTITY_PHANTOM_FLAP" => Some(SoundEnum::EntityPhantomFlap),
            "ENTITY_PHANTOM_HURT" => Some(SoundEnum::EntityPhantomHurt),
            "ENTITY_PHANTOM_SWOOP" => Some(SoundEnum::EntityPhantomSwoop),
            "ENTITY_PIGLIN_ADMIRING_ITEM" => Some(SoundEnum::EntityPiglinAdmiringItem),
            "ENTITY_PIGLIN_AMBIENT" => Some(SoundEnum::EntityPiglinAmbient),
            "ENTITY_PIGLIN_ANGRY" => Some(SoundEnum::EntityPiglinAngry),
            "ENTITY_PIGLIN_BRUTE_AMBIENT" => Some(SoundEnum::EntityPiglinBruteAmbient),
            "ENTITY_PIGLIN_BRUTE_ANGRY" => Some(SoundEnum::EntityPiglinBruteAngry),
            "ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED" => {
                Some(SoundEnum::EntityPiglinBruteConvertedToZombified)
            }
            "ENTITY_PIGLIN_BRUTE_DEATH" => Some(SoundEnum::EntityPiglinBruteDeath),
            "ENTITY_PIGLIN_BRUTE_HURT" => Some(SoundEnum::EntityPiglinBruteHurt),
            "ENTITY_PIGLIN_BRUTE_STEP" => Some(SoundEnum::EntityPiglinBruteStep),
            "ENTITY_PIGLIN_CELEBRATE" => Some(SoundEnum::EntityPiglinCelebrate),
            "ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED" => {
                Some(SoundEnum::EntityPiglinConvertedToZombified)
            }
            "ENTITY_PIGLIN_DEATH" => Some(SoundEnum::EntityPiglinDeath),
            "ENTITY_PIGLIN_HURT" => Some(SoundEnum::EntityPiglinHurt),
            "ENTITY_PIGLIN_JEALOUS" => Some(SoundEnum::EntityPiglinJealous),
            "ENTITY_PIGLIN_RETREAT" => Some(SoundEnum::EntityPiglinRetreat),
            "ENTITY_PIGLIN_STEP" => Some(SoundEnum::EntityPiglinStep),
            "ENTITY_PIG_AMBIENT" => Some(SoundEnum::EntityPigAmbient),
            "ENTITY_PIG_DEATH" => Some(SoundEnum::EntityPigDeath),
            "ENTITY_PIG_HURT" => Some(SoundEnum::EntityPigHurt),
            "ENTITY_PIG_SADDLE" => Some(SoundEnum::EntityPigSaddle),
            "ENTITY_PIG_STEP" => Some(SoundEnum::EntityPigStep),
            "ENTITY_PILLAGER_AMBIENT" => Some(SoundEnum::EntityPillagerAmbient),
            "ENTITY_PILLAGER_CELEBRATE" => Some(SoundEnum::EntityPillagerCelebrate),
            "ENTITY_PILLAGER_DEATH" => Some(SoundEnum::EntityPillagerDeath),
            "ENTITY_PILLAGER_HURT" => Some(SoundEnum::EntityPillagerHurt),
            "ENTITY_PLAYER_ATTACK_CRIT" => Some(SoundEnum::EntityPlayerAttackCrit),
            "ENTITY_PLAYER_ATTACK_KNOCKBACK" => Some(SoundEnum::EntityPlayerAttackKnockback),
            "ENTITY_PLAYER_ATTACK_NODAMAGE" => Some(SoundEnum::EntityPlayerAttackNodamage),
            "ENTITY_PLAYER_ATTACK_STRONG" => Some(SoundEnum::EntityPlayerAttackStrong),
            "ENTITY_PLAYER_ATTACK_SWEEP" => Some(SoundEnum::EntityPlayerAttackSweep),
            "ENTITY_PLAYER_ATTACK_WEAK" => Some(SoundEnum::EntityPlayerAttackWeak),
            "ENTITY_PLAYER_BIG_FALL" => Some(SoundEnum::EntityPlayerBigFall),
            "ENTITY_PLAYER_BREATH" => Some(SoundEnum::EntityPlayerBreath),
            "ENTITY_PLAYER_BURP" => Some(SoundEnum::EntityPlayerBurp),
            "ENTITY_PLAYER_DEATH" => Some(SoundEnum::EntityPlayerDeath),
            "ENTITY_PLAYER_HURT" => Some(SoundEnum::EntityPlayerHurt),
            "ENTITY_PLAYER_HURT_DROWN" => Some(SoundEnum::EntityPlayerHurtDrown),
            "ENTITY_PLAYER_HURT_FREEZE" => Some(SoundEnum::EntityPlayerHurtFreeze),
            "ENTITY_PLAYER_HURT_ON_FIRE" => Some(SoundEnum::EntityPlayerHurtOnFire),
            "ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH" => {
                Some(SoundEnum::EntityPlayerHurtSweetBerryBush)
            }
            "ENTITY_PLAYER_LEVELUP" => Some(SoundEnum::EntityPlayerLevelup),
            "ENTITY_PLAYER_SMALL_FALL" => Some(SoundEnum::EntityPlayerSmallFall),
            "ENTITY_PLAYER_SPLASH" => Some(SoundEnum::EntityPlayerSplash),
            "ENTITY_PLAYER_SPLASH_HIGH_SPEED" => Some(SoundEnum::EntityPlayerSplashHighSpeed),
            "ENTITY_PLAYER_SWIM" => Some(SoundEnum::EntityPlayerSwim),
            "ENTITY_POLAR_BEAR_AMBIENT" => Some(SoundEnum::EntityPolarBearAmbient),
            "ENTITY_POLAR_BEAR_AMBIENT_BABY" => Some(SoundEnum::EntityPolarBearAmbientBaby),
            "ENTITY_POLAR_BEAR_DEATH" => Some(SoundEnum::EntityPolarBearDeath),
            "ENTITY_POLAR_BEAR_HURT" => Some(SoundEnum::EntityPolarBearHurt),
            "ENTITY_POLAR_BEAR_STEP" => Some(SoundEnum::EntityPolarBearStep),
            "ENTITY_POLAR_BEAR_WARNING" => Some(SoundEnum::EntityPolarBearWarning),
            "ENTITY_PUFFER_FISH_AMBIENT" => Some(SoundEnum::EntityPufferFishAmbient),
            "ENTITY_PUFFER_FISH_BLOW_OUT" => Some(SoundEnum::EntityPufferFishBlowOut),
            "ENTITY_PUFFER_FISH_BLOW_UP" => Some(SoundEnum::EntityPufferFishBlowUp),
            "ENTITY_PUFFER_FISH_DEATH" => Some(SoundEnum::EntityPufferFishDeath),
            "ENTITY_PUFFER_FISH_FLOP" => Some(SoundEnum::EntityPufferFishFlop),
            "ENTITY_PUFFER_FISH_HURT" => Some(SoundEnum::EntityPufferFishHurt),
            "ENTITY_PUFFER_FISH_STING" => Some(SoundEnum::EntityPufferFishSting),
            "ENTITY_RABBIT_AMBIENT" => Some(SoundEnum::EntityRabbitAmbient),
            "ENTITY_RABBIT_ATTACK" => Some(SoundEnum::EntityRabbitAttack),
            "ENTITY_RABBIT_DEATH" => Some(SoundEnum::EntityRabbitDeath),
            "ENTITY_RABBIT_HURT" => Some(SoundEnum::EntityRabbitHurt),
            "ENTITY_RABBIT_JUMP" => Some(SoundEnum::EntityRabbitJump),
            "ENTITY_RAVAGER_AMBIENT" => Some(SoundEnum::EntityRavagerAmbient),
            "ENTITY_RAVAGER_ATTACK" => Some(SoundEnum::EntityRavagerAttack),
            "ENTITY_RAVAGER_CELEBRATE" => Some(SoundEnum::EntityRavagerCelebrate),
            "ENTITY_RAVAGER_DEATH" => Some(SoundEnum::EntityRavagerDeath),
            "ENTITY_RAVAGER_HURT" => Some(SoundEnum::EntityRavagerHurt),
            "ENTITY_RAVAGER_ROAR" => Some(SoundEnum::EntityRavagerRoar),
            "ENTITY_RAVAGER_STEP" => Some(SoundEnum::EntityRavagerStep),
            "ENTITY_RAVAGER_STUNNED" => Some(SoundEnum::EntityRavagerStunned),
            "ENTITY_SALMON_AMBIENT" => Some(SoundEnum::EntitySalmonAmbient),
            "ENTITY_SALMON_DEATH" => Some(SoundEnum::EntitySalmonDeath),
            "ENTITY_SALMON_FLOP" => Some(SoundEnum::EntitySalmonFlop),
            "ENTITY_SALMON_HURT" => Some(SoundEnum::EntitySalmonHurt),
            "ENTITY_SHEEP_AMBIENT" => Some(SoundEnum::EntitySheepAmbient),
            "ENTITY_SHEEP_DEATH" => Some(SoundEnum::EntitySheepDeath),
            "ENTITY_SHEEP_HURT" => Some(SoundEnum::EntitySheepHurt),
            "ENTITY_SHEEP_SHEAR" => Some(SoundEnum::EntitySheepShear),
            "ENTITY_SHEEP_STEP" => Some(SoundEnum::EntitySheepStep),
            "ENTITY_SHULKER_AMBIENT" => Some(SoundEnum::EntityShulkerAmbient),
            "ENTITY_SHULKER_BULLET_HIT" => Some(SoundEnum::EntityShulkerBulletHit),
            "ENTITY_SHULKER_BULLET_HURT" => Some(SoundEnum::EntityShulkerBulletHurt),
            "ENTITY_SHULKER_CLOSE" => Some(SoundEnum::EntityShulkerClose),
            "ENTITY_SHULKER_DEATH" => Some(SoundEnum::EntityShulkerDeath),
            "ENTITY_SHULKER_HURT" => Some(SoundEnum::EntityShulkerHurt),
            "ENTITY_SHULKER_HURT_CLOSED" => Some(SoundEnum::EntityShulkerHurtClosed),
            "ENTITY_SHULKER_OPEN" => Some(SoundEnum::EntityShulkerOpen),
            "ENTITY_SHULKER_SHOOT" => Some(SoundEnum::EntityShulkerShoot),
            "ENTITY_SHULKER_TELEPORT" => Some(SoundEnum::EntityShulkerTeleport),
            "ENTITY_SILVERFISH_AMBIENT" => Some(SoundEnum::EntitySilverfishAmbient),
            "ENTITY_SILVERFISH_DEATH" => Some(SoundEnum::EntitySilverfishDeath),
            "ENTITY_SILVERFISH_HURT" => Some(SoundEnum::EntitySilverfishHurt),
            "ENTITY_SILVERFISH_STEP" => Some(SoundEnum::EntitySilverfishStep),
            "ENTITY_SKELETON_AMBIENT" => Some(SoundEnum::EntitySkeletonAmbient),
            "ENTITY_SKELETON_CONVERTED_TO_STRAY" => Some(SoundEnum::EntitySkeletonConvertedToStray),
            "ENTITY_SKELETON_DEATH" => Some(SoundEnum::EntitySkeletonDeath),
            "ENTITY_SKELETON_HORSE_AMBIENT" => Some(SoundEnum::EntitySkeletonHorseAmbient),
            "ENTITY_SKELETON_HORSE_AMBIENT_WATER" => {
                Some(SoundEnum::EntitySkeletonHorseAmbientWater)
            }
            "ENTITY_SKELETON_HORSE_DEATH" => Some(SoundEnum::EntitySkeletonHorseDeath),
            "ENTITY_SKELETON_HORSE_GALLOP_WATER" => Some(SoundEnum::EntitySkeletonHorseGallopWater),
            "ENTITY_SKELETON_HORSE_HURT" => Some(SoundEnum::EntitySkeletonHorseHurt),
            "ENTITY_SKELETON_HORSE_JUMP_WATER" => Some(SoundEnum::EntitySkeletonHorseJumpWater),
            "ENTITY_SKELETON_HORSE_STEP_WATER" => Some(SoundEnum::EntitySkeletonHorseStepWater),
            "ENTITY_SKELETON_HORSE_SWIM" => Some(SoundEnum::EntitySkeletonHorseSwim),
            "ENTITY_SKELETON_HURT" => Some(SoundEnum::EntitySkeletonHurt),
            "ENTITY_SKELETON_SHOOT" => Some(SoundEnum::EntitySkeletonShoot),
            "ENTITY_SKELETON_STEP" => Some(SoundEnum::EntitySkeletonStep),
            "ENTITY_SLIME_ATTACK" => Some(SoundEnum::EntitySlimeAttack),
            "ENTITY_SLIME_DEATH" => Some(SoundEnum::EntitySlimeDeath),
            "ENTITY_SLIME_DEATH_SMALL" => Some(SoundEnum::EntitySlimeDeathSmall),
            "ENTITY_SLIME_HURT" => Some(SoundEnum::EntitySlimeHurt),
            "ENTITY_SLIME_HURT_SMALL" => Some(SoundEnum::EntitySlimeHurtSmall),
            "ENTITY_SLIME_JUMP" => Some(SoundEnum::EntitySlimeJump),
            "ENTITY_SLIME_JUMP_SMALL" => Some(SoundEnum::EntitySlimeJumpSmall),
            "ENTITY_SLIME_SQUISH" => Some(SoundEnum::EntitySlimeSquish),
            "ENTITY_SLIME_SQUISH_SMALL" => Some(SoundEnum::EntitySlimeSquishSmall),
            "ENTITY_SNIFFER_DEATH" => Some(SoundEnum::EntitySnifferDeath),
            "ENTITY_SNIFFER_DIGGING" => Some(SoundEnum::EntitySnifferDigging),
            "ENTITY_SNIFFER_DIGGING_STOP" => Some(SoundEnum::EntitySnifferDiggingStop),
            "ENTITY_SNIFFER_DROP_SEED" => Some(SoundEnum::EntitySnifferDropSeed),
            "ENTITY_SNIFFER_EAT" => Some(SoundEnum::EntitySnifferEat),
            "ENTITY_SNIFFER_HAPPY" => Some(SoundEnum::EntitySnifferHappy),
            "ENTITY_SNIFFER_HURT" => Some(SoundEnum::EntitySnifferHurt),
            "ENTITY_SNIFFER_IDLE" => Some(SoundEnum::EntitySnifferIdle),
            "ENTITY_SNIFFER_SCENTING" => Some(SoundEnum::EntitySnifferScenting),
            "ENTITY_SNIFFER_SEARCHING" => Some(SoundEnum::EntitySnifferSearching),
            "ENTITY_SNIFFER_SNIFFING" => Some(SoundEnum::EntitySnifferSniffing),
            "ENTITY_SNIFFER_STEP" => Some(SoundEnum::EntitySnifferStep),
            "ENTITY_SNOWBALL_THROW" => Some(SoundEnum::EntitySnowballThrow),
            "ENTITY_SNOW_GOLEM_AMBIENT" => Some(SoundEnum::EntitySnowGolemAmbient),
            "ENTITY_SNOW_GOLEM_DEATH" => Some(SoundEnum::EntitySnowGolemDeath),
            "ENTITY_SNOW_GOLEM_HURT" => Some(SoundEnum::EntitySnowGolemHurt),
            "ENTITY_SNOW_GOLEM_SHEAR" => Some(SoundEnum::EntitySnowGolemShear),
            "ENTITY_SNOW_GOLEM_SHOOT" => Some(SoundEnum::EntitySnowGolemShoot),
            "ENTITY_SPIDER_AMBIENT" => Some(SoundEnum::EntitySpiderAmbient),
            "ENTITY_SPIDER_DEATH" => Some(SoundEnum::EntitySpiderDeath),
            "ENTITY_SPIDER_HURT" => Some(SoundEnum::EntitySpiderHurt),
            "ENTITY_SPIDER_STEP" => Some(SoundEnum::EntitySpiderStep),
            "ENTITY_SPLASH_POTION_BREAK" => Some(SoundEnum::EntitySplashPotionBreak),
            "ENTITY_SPLASH_POTION_THROW" => Some(SoundEnum::EntitySplashPotionThrow),
            "ENTITY_SQUID_AMBIENT" => Some(SoundEnum::EntitySquidAmbient),
            "ENTITY_SQUID_DEATH" => Some(SoundEnum::EntitySquidDeath),
            "ENTITY_SQUID_HURT" => Some(SoundEnum::EntitySquidHurt),
            "ENTITY_SQUID_SQUIRT" => Some(SoundEnum::EntitySquidSquirt),
            "ENTITY_STRAY_AMBIENT" => Some(SoundEnum::EntityStrayAmbient),
            "ENTITY_STRAY_DEATH" => Some(SoundEnum::EntityStrayDeath),
            "ENTITY_STRAY_HURT" => Some(SoundEnum::EntityStrayHurt),
            "ENTITY_STRAY_STEP" => Some(SoundEnum::EntityStrayStep),
            "ENTITY_STRIDER_AMBIENT" => Some(SoundEnum::EntityStriderAmbient),
            "ENTITY_STRIDER_DEATH" => Some(SoundEnum::EntityStriderDeath),
            "ENTITY_STRIDER_EAT" => Some(SoundEnum::EntityStriderEat),
            "ENTITY_STRIDER_HAPPY" => Some(SoundEnum::EntityStriderHappy),
            "ENTITY_STRIDER_HURT" => Some(SoundEnum::EntityStriderHurt),
            "ENTITY_STRIDER_RETREAT" => Some(SoundEnum::EntityStriderRetreat),
            "ENTITY_STRIDER_SADDLE" => Some(SoundEnum::EntityStriderSaddle),
            "ENTITY_STRIDER_STEP" => Some(SoundEnum::EntityStriderStep),
            "ENTITY_STRIDER_STEP_LAVA" => Some(SoundEnum::EntityStriderStepLava),
            "ENTITY_TADPOLE_DEATH" => Some(SoundEnum::EntityTadpoleDeath),
            "ENTITY_TADPOLE_FLOP" => Some(SoundEnum::EntityTadpoleFlop),
            "ENTITY_TADPOLE_GROW_UP" => Some(SoundEnum::EntityTadpoleGrowUp),
            "ENTITY_TADPOLE_HURT" => Some(SoundEnum::EntityTadpoleHurt),
            "ENTITY_TNT_PRIMED" => Some(SoundEnum::EntityTntPrimed),
            "ENTITY_TROPICAL_FISH_AMBIENT" => Some(SoundEnum::EntityTropicalFishAmbient),
            "ENTITY_TROPICAL_FISH_DEATH" => Some(SoundEnum::EntityTropicalFishDeath),
            "ENTITY_TROPICAL_FISH_FLOP" => Some(SoundEnum::EntityTropicalFishFlop),
            "ENTITY_TROPICAL_FISH_HURT" => Some(SoundEnum::EntityTropicalFishHurt),
            "ENTITY_TURTLE_AMBIENT_LAND" => Some(SoundEnum::EntityTurtleAmbientLand),
            "ENTITY_TURTLE_DEATH" => Some(SoundEnum::EntityTurtleDeath),
            "ENTITY_TURTLE_DEATH_BABY" => Some(SoundEnum::EntityTurtleDeathBaby),
            "ENTITY_TURTLE_EGG_BREAK" => Some(SoundEnum::EntityTurtleEggBreak),
            "ENTITY_TURTLE_EGG_CRACK" => Some(SoundEnum::EntityTurtleEggCrack),
            "ENTITY_TURTLE_EGG_HATCH" => Some(SoundEnum::EntityTurtleEggHatch),
            "ENTITY_TURTLE_HURT" => Some(SoundEnum::EntityTurtleHurt),
            "ENTITY_TURTLE_HURT_BABY" => Some(SoundEnum::EntityTurtleHurtBaby),
            "ENTITY_TURTLE_LAY_EGG" => Some(SoundEnum::EntityTurtleLayEgg),
            "ENTITY_TURTLE_SHAMBLE" => Some(SoundEnum::EntityTurtleShamble),
            "ENTITY_TURTLE_SHAMBLE_BABY" => Some(SoundEnum::EntityTurtleShambleBaby),
            "ENTITY_TURTLE_SWIM" => Some(SoundEnum::EntityTurtleSwim),
            "ENTITY_VEX_AMBIENT" => Some(SoundEnum::EntityVexAmbient),
            "ENTITY_VEX_CHARGE" => Some(SoundEnum::EntityVexCharge),
            "ENTITY_VEX_DEATH" => Some(SoundEnum::EntityVexDeath),
            "ENTITY_VEX_HURT" => Some(SoundEnum::EntityVexHurt),
            "ENTITY_VILLAGER_AMBIENT" => Some(SoundEnum::EntityVillagerAmbient),
            "ENTITY_VILLAGER_CELEBRATE" => Some(SoundEnum::EntityVillagerCelebrate),
            "ENTITY_VILLAGER_DEATH" => Some(SoundEnum::EntityVillagerDeath),
            "ENTITY_VILLAGER_HURT" => Some(SoundEnum::EntityVillagerHurt),
            "ENTITY_VILLAGER_NO" => Some(SoundEnum::EntityVillagerNo),
            "ENTITY_VILLAGER_TRADE" => Some(SoundEnum::EntityVillagerTrade),
            "ENTITY_VILLAGER_WORK_ARMORER" => Some(SoundEnum::EntityVillagerWorkArmorer),
            "ENTITY_VILLAGER_WORK_BUTCHER" => Some(SoundEnum::EntityVillagerWorkButcher),
            "ENTITY_VILLAGER_WORK_CARTOGRAPHER" => Some(SoundEnum::EntityVillagerWorkCartographer),
            "ENTITY_VILLAGER_WORK_CLERIC" => Some(SoundEnum::EntityVillagerWorkCleric),
            "ENTITY_VILLAGER_WORK_FARMER" => Some(SoundEnum::EntityVillagerWorkFarmer),
            "ENTITY_VILLAGER_WORK_FISHERMAN" => Some(SoundEnum::EntityVillagerWorkFisherman),
            "ENTITY_VILLAGER_WORK_FLETCHER" => Some(SoundEnum::EntityVillagerWorkFletcher),
            "ENTITY_VILLAGER_WORK_LEATHERWORKER" => {
                Some(SoundEnum::EntityVillagerWorkLeatherworker)
            }
            "ENTITY_VILLAGER_WORK_LIBRARIAN" => Some(SoundEnum::EntityVillagerWorkLibrarian),
            "ENTITY_VILLAGER_WORK_MASON" => Some(SoundEnum::EntityVillagerWorkMason),
            "ENTITY_VILLAGER_WORK_SHEPHERD" => Some(SoundEnum::EntityVillagerWorkShepherd),
            "ENTITY_VILLAGER_WORK_TOOLSMITH" => Some(SoundEnum::EntityVillagerWorkToolsmith),
            "ENTITY_VILLAGER_WORK_WEAPONSMITH" => Some(SoundEnum::EntityVillagerWorkWeaponsmith),
            "ENTITY_VILLAGER_YES" => Some(SoundEnum::EntityVillagerYes),
            "ENTITY_VINDICATOR_AMBIENT" => Some(SoundEnum::EntityVindicatorAmbient),
            "ENTITY_VINDICATOR_CELEBRATE" => Some(SoundEnum::EntityVindicatorCelebrate),
            "ENTITY_VINDICATOR_DEATH" => Some(SoundEnum::EntityVindicatorDeath),
            "ENTITY_VINDICATOR_HURT" => Some(SoundEnum::EntityVindicatorHurt),
            "ENTITY_WANDERING_TRADER_AMBIENT" => Some(SoundEnum::EntityWanderingTraderAmbient),
            "ENTITY_WANDERING_TRADER_DEATH" => Some(SoundEnum::EntityWanderingTraderDeath),
            "ENTITY_WANDERING_TRADER_DISAPPEARED" => {
                Some(SoundEnum::EntityWanderingTraderDisappeared)
            }
            "ENTITY_WANDERING_TRADER_DRINK_MILK" => Some(SoundEnum::EntityWanderingTraderDrinkMilk),
            "ENTITY_WANDERING_TRADER_DRINK_POTION" => {
                Some(SoundEnum::EntityWanderingTraderDrinkPotion)
            }
            "ENTITY_WANDERING_TRADER_HURT" => Some(SoundEnum::EntityWanderingTraderHurt),
            "ENTITY_WANDERING_TRADER_NO" => Some(SoundEnum::EntityWanderingTraderNo),
            "ENTITY_WANDERING_TRADER_REAPPEARED" => {
                Some(SoundEnum::EntityWanderingTraderReappeared)
            }
            "ENTITY_WANDERING_TRADER_TRADE" => Some(SoundEnum::EntityWanderingTraderTrade),
            "ENTITY_WANDERING_TRADER_YES" => Some(SoundEnum::EntityWanderingTraderYes),
            "ENTITY_WARDEN_AGITATED" => Some(SoundEnum::EntityWardenAgitated),
            "ENTITY_WARDEN_AMBIENT" => Some(SoundEnum::EntityWardenAmbient),
            "ENTITY_WARDEN_ANGRY" => Some(SoundEnum::EntityWardenAngry),
            "ENTITY_WARDEN_ATTACK_IMPACT" => Some(SoundEnum::EntityWardenAttackImpact),
            "ENTITY_WARDEN_DEATH" => Some(SoundEnum::EntityWardenDeath),
            "ENTITY_WARDEN_DIG" => Some(SoundEnum::EntityWardenDig),
            "ENTITY_WARDEN_EMERGE" => Some(SoundEnum::EntityWardenEmerge),
            "ENTITY_WARDEN_HEARTBEAT" => Some(SoundEnum::EntityWardenHeartbeat),
            "ENTITY_WARDEN_HURT" => Some(SoundEnum::EntityWardenHurt),
            "ENTITY_WARDEN_LISTENING" => Some(SoundEnum::EntityWardenListening),
            "ENTITY_WARDEN_LISTENING_ANGRY" => Some(SoundEnum::EntityWardenListeningAngry),
            "ENTITY_WARDEN_NEARBY_CLOSE" => Some(SoundEnum::EntityWardenNearbyClose),
            "ENTITY_WARDEN_NEARBY_CLOSER" => Some(SoundEnum::EntityWardenNearbyCloser),
            "ENTITY_WARDEN_NEARBY_CLOSEST" => Some(SoundEnum::EntityWardenNearbyClosest),
            "ENTITY_WARDEN_ROAR" => Some(SoundEnum::EntityWardenRoar),
            "ENTITY_WARDEN_SNIFF" => Some(SoundEnum::EntityWardenSniff),
            "ENTITY_WARDEN_SONIC_BOOM" => Some(SoundEnum::EntityWardenSonicBoom),
            "ENTITY_WARDEN_SONIC_CHARGE" => Some(SoundEnum::EntityWardenSonicCharge),
            "ENTITY_WARDEN_STEP" => Some(SoundEnum::EntityWardenStep),
            "ENTITY_WARDEN_TENDRIL_CLICKS" => Some(SoundEnum::EntityWardenTendrilClicks),
            "ENTITY_WITCH_AMBIENT" => Some(SoundEnum::EntityWitchAmbient),
            "ENTITY_WITCH_CELEBRATE" => Some(SoundEnum::EntityWitchCelebrate),
            "ENTITY_WITCH_DEATH" => Some(SoundEnum::EntityWitchDeath),
            "ENTITY_WITCH_DRINK" => Some(SoundEnum::EntityWitchDrink),
            "ENTITY_WITCH_HURT" => Some(SoundEnum::EntityWitchHurt),
            "ENTITY_WITCH_THROW" => Some(SoundEnum::EntityWitchThrow),
            "ENTITY_WITHER_AMBIENT" => Some(SoundEnum::EntityWitherAmbient),
            "ENTITY_WITHER_BREAK_BLOCK" => Some(SoundEnum::EntityWitherBreakBlock),
            "ENTITY_WITHER_DEATH" => Some(SoundEnum::EntityWitherDeath),
            "ENTITY_WITHER_HURT" => Some(SoundEnum::EntityWitherHurt),
            "ENTITY_WITHER_SHOOT" => Some(SoundEnum::EntityWitherShoot),
            "ENTITY_WITHER_SKELETON_AMBIENT" => Some(SoundEnum::EntityWitherSkeletonAmbient),
            "ENTITY_WITHER_SKELETON_DEATH" => Some(SoundEnum::EntityWitherSkeletonDeath),
            "ENTITY_WITHER_SKELETON_HURT" => Some(SoundEnum::EntityWitherSkeletonHurt),
            "ENTITY_WITHER_SKELETON_STEP" => Some(SoundEnum::EntityWitherSkeletonStep),
            "ENTITY_WITHER_SPAWN" => Some(SoundEnum::EntityWitherSpawn),
            "ENTITY_WOLF_AMBIENT" => Some(SoundEnum::EntityWolfAmbient),
            "ENTITY_WOLF_DEATH" => Some(SoundEnum::EntityWolfDeath),
            "ENTITY_WOLF_GROWL" => Some(SoundEnum::EntityWolfGrowl),
            "ENTITY_WOLF_HOWL" => Some(SoundEnum::EntityWolfHowl),
            "ENTITY_WOLF_HURT" => Some(SoundEnum::EntityWolfHurt),
            "ENTITY_WOLF_PANT" => Some(SoundEnum::EntityWolfPant),
            "ENTITY_WOLF_SHAKE" => Some(SoundEnum::EntityWolfShake),
            "ENTITY_WOLF_STEP" => Some(SoundEnum::EntityWolfStep),
            "ENTITY_WOLF_WHINE" => Some(SoundEnum::EntityWolfWhine),
            "ENTITY_ZOGLIN_AMBIENT" => Some(SoundEnum::EntityZoglinAmbient),
            "ENTITY_ZOGLIN_ANGRY" => Some(SoundEnum::EntityZoglinAngry),
            "ENTITY_ZOGLIN_ATTACK" => Some(SoundEnum::EntityZoglinAttack),
            "ENTITY_ZOGLIN_DEATH" => Some(SoundEnum::EntityZoglinDeath),
            "ENTITY_ZOGLIN_HURT" => Some(SoundEnum::EntityZoglinHurt),
            "ENTITY_ZOGLIN_STEP" => Some(SoundEnum::EntityZoglinStep),
            "ENTITY_ZOMBIE_AMBIENT" => Some(SoundEnum::EntityZombieAmbient),
            "ENTITY_ZOMBIE_ATTACK_IRON_DOOR" => Some(SoundEnum::EntityZombieAttackIronDoor),
            "ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR" => Some(SoundEnum::EntityZombieAttackWoodenDoor),
            "ENTITY_ZOMBIE_BREAK_WOODEN_DOOR" => Some(SoundEnum::EntityZombieBreakWoodenDoor),
            "ENTITY_ZOMBIE_CONVERTED_TO_DROWNED" => Some(SoundEnum::EntityZombieConvertedToDrowned),
            "ENTITY_ZOMBIE_DEATH" => Some(SoundEnum::EntityZombieDeath),
            "ENTITY_ZOMBIE_DESTROY_EGG" => Some(SoundEnum::EntityZombieDestroyEgg),
            "ENTITY_ZOMBIE_HORSE_AMBIENT" => Some(SoundEnum::EntityZombieHorseAmbient),
            "ENTITY_ZOMBIE_HORSE_DEATH" => Some(SoundEnum::EntityZombieHorseDeath),
            "ENTITY_ZOMBIE_HORSE_HURT" => Some(SoundEnum::EntityZombieHorseHurt),
            "ENTITY_ZOMBIE_HURT" => Some(SoundEnum::EntityZombieHurt),
            "ENTITY_ZOMBIE_INFECT" => Some(SoundEnum::EntityZombieInfect),
            "ENTITY_ZOMBIE_STEP" => Some(SoundEnum::EntityZombieStep),
            "ENTITY_ZOMBIE_VILLAGER_AMBIENT" => Some(SoundEnum::EntityZombieVillagerAmbient),
            "ENTITY_ZOMBIE_VILLAGER_CONVERTED" => Some(SoundEnum::EntityZombieVillagerConverted),
            "ENTITY_ZOMBIE_VILLAGER_CURE" => Some(SoundEnum::EntityZombieVillagerCure),
            "ENTITY_ZOMBIE_VILLAGER_DEATH" => Some(SoundEnum::EntityZombieVillagerDeath),
            "ENTITY_ZOMBIE_VILLAGER_HURT" => Some(SoundEnum::EntityZombieVillagerHurt),
            "ENTITY_ZOMBIE_VILLAGER_STEP" => Some(SoundEnum::EntityZombieVillagerStep),
            "ENTITY_ZOMBIFIED_PIGLIN_AMBIENT" => Some(SoundEnum::EntityZombifiedPiglinAmbient),
            "ENTITY_ZOMBIFIED_PIGLIN_ANGRY" => Some(SoundEnum::EntityZombifiedPiglinAngry),
            "ENTITY_ZOMBIFIED_PIGLIN_DEATH" => Some(SoundEnum::EntityZombifiedPiglinDeath),
            "ENTITY_ZOMBIFIED_PIGLIN_HURT" => Some(SoundEnum::EntityZombifiedPiglinHurt),
            "EVENT_RAID_HORN" => Some(SoundEnum::EventRaidHorn),
            "INTENTIONALLY_EMPTY" => Some(SoundEnum::IntentionallyEmpty),
            "ITEM_ARMOR_EQUIP_CHAIN" => Some(SoundEnum::ItemArmorEquipChain),
            "ITEM_ARMOR_EQUIP_DIAMOND" => Some(SoundEnum::ItemArmorEquipDiamond),
            "ITEM_ARMOR_EQUIP_ELYTRA" => Some(SoundEnum::ItemArmorEquipElytra),
            "ITEM_ARMOR_EQUIP_GENERIC" => Some(SoundEnum::ItemArmorEquipGeneric),
            "ITEM_ARMOR_EQUIP_GOLD" => Some(SoundEnum::ItemArmorEquipGold),
            "ITEM_ARMOR_EQUIP_IRON" => Some(SoundEnum::ItemArmorEquipIron),
            "ITEM_ARMOR_EQUIP_LEATHER" => Some(SoundEnum::ItemArmorEquipLeather),
            "ITEM_ARMOR_EQUIP_NETHERITE" => Some(SoundEnum::ItemArmorEquipNetherite),
            "ITEM_ARMOR_EQUIP_TURTLE" => Some(SoundEnum::ItemArmorEquipTurtle),
            "ITEM_AXE_SCRAPE" => Some(SoundEnum::ItemAxeScrape),
            "ITEM_AXE_STRIP" => Some(SoundEnum::ItemAxeStrip),
            "ITEM_AXE_WAX_OFF" => Some(SoundEnum::ItemAxeWaxOff),
            "ITEM_BONE_MEAL_USE" => Some(SoundEnum::ItemBoneMealUse),
            "ITEM_BOOK_PAGE_TURN" => Some(SoundEnum::ItemBookPageTurn),
            "ITEM_BOOK_PUT" => Some(SoundEnum::ItemBookPut),
            "ITEM_BOTTLE_EMPTY" => Some(SoundEnum::ItemBottleEmpty),
            "ITEM_BOTTLE_FILL" => Some(SoundEnum::ItemBottleFill),
            "ITEM_BOTTLE_FILL_DRAGONBREATH" => Some(SoundEnum::ItemBottleFillDragonbreath),
            "ITEM_BRUSH_BRUSHING_GENERIC" => Some(SoundEnum::ItemBrushBrushingGeneric),
            "ITEM_BRUSH_BRUSHING_GRAVEL" => Some(SoundEnum::ItemBrushBrushingGravel),
            "ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE" => {
                Some(SoundEnum::ItemBrushBrushingGravelComplete)
            }
            "ITEM_BRUSH_BRUSHING_SAND" => Some(SoundEnum::ItemBrushBrushingSand),
            "ITEM_BRUSH_BRUSHING_SAND_COMPLETE" => Some(SoundEnum::ItemBrushBrushingSandComplete),
            "ITEM_BUCKET_EMPTY" => Some(SoundEnum::ItemBucketEmpty),
            "ITEM_BUCKET_EMPTY_AXOLOTL" => Some(SoundEnum::ItemBucketEmptyAxolotl),
            "ITEM_BUCKET_EMPTY_FISH" => Some(SoundEnum::ItemBucketEmptyFish),
            "ITEM_BUCKET_EMPTY_LAVA" => Some(SoundEnum::ItemBucketEmptyLava),
            "ITEM_BUCKET_EMPTY_POWDER_SNOW" => Some(SoundEnum::ItemBucketEmptyPowderSnow),
            "ITEM_BUCKET_EMPTY_TADPOLE" => Some(SoundEnum::ItemBucketEmptyTadpole),
            "ITEM_BUCKET_FILL" => Some(SoundEnum::ItemBucketFill),
            "ITEM_BUCKET_FILL_AXOLOTL" => Some(SoundEnum::ItemBucketFillAxolotl),
            "ITEM_BUCKET_FILL_FISH" => Some(SoundEnum::ItemBucketFillFish),
            "ITEM_BUCKET_FILL_LAVA" => Some(SoundEnum::ItemBucketFillLava),
            "ITEM_BUCKET_FILL_POWDER_SNOW" => Some(SoundEnum::ItemBucketFillPowderSnow),
            "ITEM_BUCKET_FILL_TADPOLE" => Some(SoundEnum::ItemBucketFillTadpole),
            "ITEM_BUNDLE_DROP_CONTENTS" => Some(SoundEnum::ItemBundleDropContents),
            "ITEM_BUNDLE_INSERT" => Some(SoundEnum::ItemBundleInsert),
            "ITEM_BUNDLE_REMOVE_ONE" => Some(SoundEnum::ItemBundleRemoveOne),
            "ITEM_CHORUS_FRUIT_TELEPORT" => Some(SoundEnum::ItemChorusFruitTeleport),
            "ITEM_CROP_PLANT" => Some(SoundEnum::ItemCropPlant),
            "ITEM_CROSSBOW_HIT" => Some(SoundEnum::ItemCrossbowHit),
            "ITEM_CROSSBOW_LOADING_END" => Some(SoundEnum::ItemCrossbowLoadingEnd),
            "ITEM_CROSSBOW_LOADING_MIDDLE" => Some(SoundEnum::ItemCrossbowLoadingMiddle),
            "ITEM_CROSSBOW_LOADING_START" => Some(SoundEnum::ItemCrossbowLoadingStart),
            "ITEM_CROSSBOW_QUICK_CHARGE_1" => Some(SoundEnum::ItemCrossbowQuickCharge1),
            "ITEM_CROSSBOW_QUICK_CHARGE_2" => Some(SoundEnum::ItemCrossbowQuickCharge2),
            "ITEM_CROSSBOW_QUICK_CHARGE_3" => Some(SoundEnum::ItemCrossbowQuickCharge3),
            "ITEM_CROSSBOW_SHOOT" => Some(SoundEnum::ItemCrossbowShoot),
            "ITEM_DYE_USE" => Some(SoundEnum::ItemDyeUse),
            "ITEM_ELYTRA_FLYING" => Some(SoundEnum::ItemElytraFlying),
            "ITEM_FIRECHARGE_USE" => Some(SoundEnum::ItemFirechargeUse),
            "ITEM_FLINTANDSTEEL_USE" => Some(SoundEnum::ItemFlintandsteelUse),
            "ITEM_GLOW_INK_SAC_USE" => Some(SoundEnum::ItemGlowInkSacUse),
            "ITEM_GOAT_HORN_PLAY" => Some(SoundEnum::ItemGoatHornPlay),
            "ITEM_GOAT_HORN_SOUND_0" => Some(SoundEnum::ItemGoatHornSound0),
            "ITEM_GOAT_HORN_SOUND_1" => Some(SoundEnum::ItemGoatHornSound1),
            "ITEM_GOAT_HORN_SOUND_2" => Some(SoundEnum::ItemGoatHornSound2),
            "ITEM_GOAT_HORN_SOUND_3" => Some(SoundEnum::ItemGoatHornSound3),
            "ITEM_GOAT_HORN_SOUND_4" => Some(SoundEnum::ItemGoatHornSound4),
            "ITEM_GOAT_HORN_SOUND_5" => Some(SoundEnum::ItemGoatHornSound5),
            "ITEM_GOAT_HORN_SOUND_6" => Some(SoundEnum::ItemGoatHornSound6),
            "ITEM_GOAT_HORN_SOUND_7" => Some(SoundEnum::ItemGoatHornSound7),
            "ITEM_HOE_TILL" => Some(SoundEnum::ItemHoeTill),
            "ITEM_HONEYCOMB_WAX_ON" => Some(SoundEnum::ItemHoneycombWaxOn),
            "ITEM_HONEY_BOTTLE_DRINK" => Some(SoundEnum::ItemHoneyBottleDrink),
            "ITEM_INK_SAC_USE" => Some(SoundEnum::ItemInkSacUse),
            "ITEM_LODESTONE_COMPASS_LOCK" => Some(SoundEnum::ItemLodestoneCompassLock),
            "ITEM_NETHER_WART_PLANT" => Some(SoundEnum::ItemNetherWartPlant),
            "ITEM_SHIELD_BLOCK" => Some(SoundEnum::ItemShieldBlock),
            "ITEM_SHIELD_BREAK" => Some(SoundEnum::ItemShieldBreak),
            "ITEM_SHOVEL_FLATTEN" => Some(SoundEnum::ItemShovelFlatten),
            "ITEM_SPYGLASS_STOP_USING" => Some(SoundEnum::ItemSpyglassStopUsing),
            "ITEM_SPYGLASS_USE" => Some(SoundEnum::ItemSpyglassUse),
            "ITEM_TOTEM_USE" => Some(SoundEnum::ItemTotemUse),
            "ITEM_TRIDENT_HIT" => Some(SoundEnum::ItemTridentHit),
            "ITEM_TRIDENT_HIT_GROUND" => Some(SoundEnum::ItemTridentHitGround),
            "ITEM_TRIDENT_RETURN" => Some(SoundEnum::ItemTridentReturn),
            "ITEM_TRIDENT_RIPTIDE_1" => Some(SoundEnum::ItemTridentRiptide1),
            "ITEM_TRIDENT_RIPTIDE_2" => Some(SoundEnum::ItemTridentRiptide2),
            "ITEM_TRIDENT_RIPTIDE_3" => Some(SoundEnum::ItemTridentRiptide3),
            "ITEM_TRIDENT_THROW" => Some(SoundEnum::ItemTridentThrow),
            "ITEM_TRIDENT_THUNDER" => Some(SoundEnum::ItemTridentThunder),
            "MUSIC_CREATIVE" => Some(SoundEnum::MusicCreative),
            "MUSIC_CREDITS" => Some(SoundEnum::MusicCredits),
            "MUSIC_DISC_11" => Some(SoundEnum::MusicDisc11),
            "MUSIC_DISC_13" => Some(SoundEnum::MusicDisc13),
            "MUSIC_DISC_5" => Some(SoundEnum::MusicDisc5),
            "MUSIC_DISC_BLOCKS" => Some(SoundEnum::MusicDiscBlocks),
            "MUSIC_DISC_CAT" => Some(SoundEnum::MusicDiscCat),
            "MUSIC_DISC_CHIRP" => Some(SoundEnum::MusicDiscChirp),
            "MUSIC_DISC_FAR" => Some(SoundEnum::MusicDiscFar),
            "MUSIC_DISC_MALL" => Some(SoundEnum::MusicDiscMall),
            "MUSIC_DISC_MELLOHI" => Some(SoundEnum::MusicDiscMellohi),
            "MUSIC_DISC_OTHERSIDE" => Some(SoundEnum::MusicDiscOtherside),
            "MUSIC_DISC_PIGSTEP" => Some(SoundEnum::MusicDiscPigstep),
            "MUSIC_DISC_RELIC" => Some(SoundEnum::MusicDiscRelic),
            "MUSIC_DISC_STAL" => Some(SoundEnum::MusicDiscStal),
            "MUSIC_DISC_STRAD" => Some(SoundEnum::MusicDiscStrad),
            "MUSIC_DISC_WAIT" => Some(SoundEnum::MusicDiscWait),
            "MUSIC_DISC_WARD" => Some(SoundEnum::MusicDiscWard),
            "MUSIC_DRAGON" => Some(SoundEnum::MusicDragon),
            "MUSIC_END" => Some(SoundEnum::MusicEnd),
            "MUSIC_GAME" => Some(SoundEnum::MusicGame),
            "MUSIC_MENU" => Some(SoundEnum::MusicMenu),
            "MUSIC_NETHER_BASALT_DELTAS" => Some(SoundEnum::MusicNetherBasaltDeltas),
            "MUSIC_NETHER_CRIMSON_FOREST" => Some(SoundEnum::MusicNetherCrimsonForest),
            "MUSIC_NETHER_NETHER_WASTES" => Some(SoundEnum::MusicNetherNetherWastes),
            "MUSIC_NETHER_SOUL_SAND_VALLEY" => Some(SoundEnum::MusicNetherSoulSandValley),
            "MUSIC_NETHER_WARPED_FOREST" => Some(SoundEnum::MusicNetherWarpedForest),
            "MUSIC_OVERWORLD_BADLANDS" => Some(SoundEnum::MusicOverworldBadlands),
            "MUSIC_OVERWORLD_BAMBOO_JUNGLE" => Some(SoundEnum::MusicOverworldBambooJungle),
            "MUSIC_OVERWORLD_CHERRY_GROVE" => Some(SoundEnum::MusicOverworldCherryGrove),
            "MUSIC_OVERWORLD_DEEP_DARK" => Some(SoundEnum::MusicOverworldDeepDark),
            "MUSIC_OVERWORLD_DESERT" => Some(SoundEnum::MusicOverworldDesert),
            "MUSIC_OVERWORLD_DRIPSTONE_CAVES" => Some(SoundEnum::MusicOverworldDripstoneCaves),
            "MUSIC_OVERWORLD_FLOWER_FOREST" => Some(SoundEnum::MusicOverworldFlowerForest),
            "MUSIC_OVERWORLD_FOREST" => Some(SoundEnum::MusicOverworldForest),
            "MUSIC_OVERWORLD_FROZEN_PEAKS" => Some(SoundEnum::MusicOverworldFrozenPeaks),
            "MUSIC_OVERWORLD_GROVE" => Some(SoundEnum::MusicOverworldGrove),
            "MUSIC_OVERWORLD_JAGGED_PEAKS" => Some(SoundEnum::MusicOverworldJaggedPeaks),
            "MUSIC_OVERWORLD_JUNGLE" => Some(SoundEnum::MusicOverworldJungle),
            "MUSIC_OVERWORLD_LUSH_CAVES" => Some(SoundEnum::MusicOverworldLushCaves),
            "MUSIC_OVERWORLD_MEADOW" => Some(SoundEnum::MusicOverworldMeadow),
            "MUSIC_OVERWORLD_OLD_GROWTH_TAIGA" => Some(SoundEnum::MusicOverworldOldGrowthTaiga),
            "MUSIC_OVERWORLD_SNOWY_SLOPES" => Some(SoundEnum::MusicOverworldSnowySlopes),
            "MUSIC_OVERWORLD_SPARSE_JUNGLE" => Some(SoundEnum::MusicOverworldSparseJungle),
            "MUSIC_OVERWORLD_STONY_PEAKS" => Some(SoundEnum::MusicOverworldStonyPeaks),
            "MUSIC_OVERWORLD_SWAMP" => Some(SoundEnum::MusicOverworldSwamp),
            "MUSIC_UNDER_WATER" => Some(SoundEnum::MusicUnderWater),
            "PARTICLE_SOUL_ESCAPE" => Some(SoundEnum::ParticleSoulEscape),
            "UI_BUTTON_CLICK" => Some(SoundEnum::UiButtonClick),
            "UI_CARTOGRAPHY_TABLE_TAKE_RESULT" => Some(SoundEnum::UiCartographyTableTakeResult),
            "UI_LOOM_SELECT_PATTERN" => Some(SoundEnum::UiLoomSelectPattern),
            "UI_LOOM_TAKE_RESULT" => Some(SoundEnum::UiLoomTakeResult),
            "UI_STONECUTTER_SELECT_RECIPE" => Some(SoundEnum::UiStonecutterSelectRecipe),
            "UI_STONECUTTER_TAKE_RESULT" => Some(SoundEnum::UiStonecutterTakeResult),
            "UI_TOAST_CHALLENGE_COMPLETE" => Some(SoundEnum::UiToastChallengeComplete),
            "UI_TOAST_IN" => Some(SoundEnum::UiToastIn),
            "UI_TOAST_OUT" => Some(SoundEnum::UiToastOut),
            "WEATHER_RAIN" => Some(SoundEnum::WeatherRain),
            "WEATHER_RAIN_ABOVE" => Some(SoundEnum::WeatherRainAbove),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Sound<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Sound");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Sound;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Sound::from_raw(
            &jni,
            raw_obj,
            Sound::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a chunk of blocks. If the chunk is not yet fully generated and data is requested from the chunk, then the chunk will only be generated as far as it needs to provide the requested data.
///
/// This is a representation of an abstract class.
pub struct Chunk<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Chunk<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Chunk<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Chunk from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Chunk")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Chunk object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Chunk<'mc> {
    //

    pub fn is_loaded(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isLoaded", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Unloads and optionally saves the Chunk
    pub fn unload(
        &self,
        arg0: std::option::Option<bool>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Z";
            // -1
            let val_1 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_1);
        }
        sig += ")Z";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "unload", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn world(&self) -> Result<crate::World<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/World;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getWorld", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::World::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    /// Gets a block from this chunk
    pub fn get_block(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<crate::block::Block<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(III)Lorg/bukkit/block/Block;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlock",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::block::Block::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn x(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getX", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn z(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getZ", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    //

    //@NotNull

    /// Capture thread-safe read-only snapshot of chunk data
    pub fn get_chunk_snapshot(
        &self,
        arg0: bool,
        arg1: bool,
        arg2: bool,
    ) -> Result<crate::ChunkSnapshot<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(ZZZ)Lorg/bukkit/ChunkSnapshot;");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        // -2
        let val_2 = jni::objects::JValueGen::Bool(arg1.into());
        // -2
        let val_3 = jni::objects::JValueGen::Bool(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getChunkSnapshot",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::ChunkSnapshot::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn is_entities_loaded(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isEntitiesLoaded",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_generated(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isGenerated", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_slime_chunk(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isSlimeChunk", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_force_loaded(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isForceLoaded", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets whether the chunk at the specified chunk coordinates is force loaded.
    /// <p>A force loaded chunk will not be unloaded due to lack of player activity.</p>
    pub fn set_force_loaded(&self, arg0: bool) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setForceLoaded",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn add_plugin_chunk_ticket(
        &self,
        arg0: impl Into<crate::plugin::Plugin<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/plugin/Plugin;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "addPluginChunkTicket",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn remove_plugin_chunk_ticket(
        &self,
        arg0: impl Into<crate::plugin::Plugin<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/plugin/Plugin;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "removePluginChunkTicket",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn plugin_chunk_tickets(
        &self,
    ) -> Result<Vec<crate::plugin::Plugin<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Collection;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPluginChunkTickets",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut col = blackboxmc_java::JavaCollection::from_raw(&self.jni_ref(), res.l()?)?;
        let mut iter = blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), col.iterator()?)?;
        while iter.has_next()? {
            let obj = iter.next()?;
            new_vec.push(crate::plugin::Plugin::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn inhabited_time(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getInhabitedTime",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //

    /// Sets the amount of time in ticks that this chunk has been inhabited.
    pub fn set_inhabited_time(&self, arg0: i64) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(J)V");
        let val_1 = jni::objects::JValueGen::Long(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setInhabitedTime",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn load_level(&self) -> Result<crate::ChunkLoadLevel<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Chunk$LoadLevel;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getLoadLevel", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::ChunkLoadLevel::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::ChunkLoadLevel::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    /// Loads the chunk.
    pub fn load(
        &self,
        arg0: std::option::Option<bool>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Z";
            // -1
            let val_1 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_1);
        }
        sig += ")Z";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "load", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn contains(
        &self,
        arg0: std::option::Option<impl Into<crate::block::data::BlockData<'mc>>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/block/data/BlockData;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Z";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "contains", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn persistent_data_container(
        &self,
    ) -> Result<crate::persistence::PersistentDataContainer<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/persistence/PersistentDataContainer;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getPersistentDataContainer",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::persistence::PersistentDataContainer::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}
impl<'mc> Into<crate::persistence::PersistentDataHolder<'mc>> for Chunk<'mc> {
    fn into(self) -> crate::persistence::PersistentDataHolder<'mc> {
        crate::persistence::PersistentDataHolder::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting Chunk into crate::persistence::PersistentDataHolder")
    }
}
#[derive(PartialEq, Eq)]
pub enum DyeColorEnum {
    White,
    Orange,
    Magenta,
    LightBlue,
    Yellow,
    Lime,
    Pink,
    Gray,
    LightGray,
    Cyan,
    Purple,
    Blue,
    Brown,
    Green,
    Red,
    Black,
}
impl std::fmt::Display for DyeColorEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            DyeColorEnum::White => f.write_str("WHITE"),
            DyeColorEnum::Orange => f.write_str("ORANGE"),
            DyeColorEnum::Magenta => f.write_str("MAGENTA"),
            DyeColorEnum::LightBlue => f.write_str("LIGHT_BLUE"),
            DyeColorEnum::Yellow => f.write_str("YELLOW"),
            DyeColorEnum::Lime => f.write_str("LIME"),
            DyeColorEnum::Pink => f.write_str("PINK"),
            DyeColorEnum::Gray => f.write_str("GRAY"),
            DyeColorEnum::LightGray => f.write_str("LIGHT_GRAY"),
            DyeColorEnum::Cyan => f.write_str("CYAN"),
            DyeColorEnum::Purple => f.write_str("PURPLE"),
            DyeColorEnum::Blue => f.write_str("BLUE"),
            DyeColorEnum::Brown => f.write_str("BROWN"),
            DyeColorEnum::Green => f.write_str("GREEN"),
            DyeColorEnum::Red => f.write_str("RED"),
            DyeColorEnum::Black => f.write_str("BLACK"),
        }
    }
}
impl<'mc> std::fmt::Display for DyeColor<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct DyeColor<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub DyeColorEnum,
);
impl<'mc> std::ops::Deref for DyeColor<'mc> {
    type Target = DyeColorEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for DyeColor<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for DyeColor<'mc> {
    type Enum = DyeColorEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate DyeColor from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/DyeColor")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a DyeColor object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> DyeColor<'mc> {
    pub const WHITE: DyeColorEnum = DyeColorEnum::White;
    pub const ORANGE: DyeColorEnum = DyeColorEnum::Orange;
    pub const MAGENTA: DyeColorEnum = DyeColorEnum::Magenta;
    pub const LIGHT_BLUE: DyeColorEnum = DyeColorEnum::LightBlue;
    pub const YELLOW: DyeColorEnum = DyeColorEnum::Yellow;
    pub const LIME: DyeColorEnum = DyeColorEnum::Lime;
    pub const PINK: DyeColorEnum = DyeColorEnum::Pink;
    pub const GRAY: DyeColorEnum = DyeColorEnum::Gray;
    pub const LIGHT_GRAY: DyeColorEnum = DyeColorEnum::LightGray;
    pub const CYAN: DyeColorEnum = DyeColorEnum::Cyan;
    pub const PURPLE: DyeColorEnum = DyeColorEnum::Purple;
    pub const BLUE: DyeColorEnum = DyeColorEnum::Blue;
    pub const BROWN: DyeColorEnum = DyeColorEnum::Brown;
    pub const GREEN: DyeColorEnum = DyeColorEnum::Green;
    pub const RED: DyeColorEnum = DyeColorEnum::Red;
    pub const BLACK: DyeColorEnum = DyeColorEnum::Black;
    pub fn from_string(str: String) -> std::option::Option<DyeColorEnum> {
        match str.as_str() {
            "WHITE" => Some(DyeColorEnum::White),
            "ORANGE" => Some(DyeColorEnum::Orange),
            "MAGENTA" => Some(DyeColorEnum::Magenta),
            "LIGHT_BLUE" => Some(DyeColorEnum::LightBlue),
            "YELLOW" => Some(DyeColorEnum::Yellow),
            "LIME" => Some(DyeColorEnum::Lime),
            "PINK" => Some(DyeColorEnum::Pink),
            "GRAY" => Some(DyeColorEnum::Gray),
            "LIGHT_GRAY" => Some(DyeColorEnum::LightGray),
            "CYAN" => Some(DyeColorEnum::Cyan),
            "PURPLE" => Some(DyeColorEnum::Purple),
            "BLUE" => Some(DyeColorEnum::Blue),
            "BROWN" => Some(DyeColorEnum::Brown),
            "GREEN" => Some(DyeColorEnum::Green),
            "RED" => Some(DyeColorEnum::Red),
            "BLACK" => Some(DyeColorEnum::Black),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<DyeColor<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/DyeColor");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/DyeColor;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        DyeColor::from_raw(
            &jni,
            raw_obj,
            DyeColor::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum LoadLevelEnum {
    Inaccessible,
    Border,
    Ticking,
    EntityTicking,
    Unloaded,
}
impl std::fmt::Display for LoadLevelEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            LoadLevelEnum::Inaccessible => f.write_str("INACCESSIBLE"),
            LoadLevelEnum::Border => f.write_str("BORDER"),
            LoadLevelEnum::Ticking => f.write_str("TICKING"),
            LoadLevelEnum::EntityTicking => f.write_str("ENTITY_TICKING"),
            LoadLevelEnum::Unloaded => f.write_str("UNLOADED"),
        }
    }
}
impl<'mc> std::fmt::Display for LoadLevel<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct LoadLevel<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub LoadLevelEnum,
);
impl<'mc> std::ops::Deref for LoadLevel<'mc> {
    type Target = LoadLevelEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for LoadLevel<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for LoadLevel<'mc> {
    type Enum = LoadLevelEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate LoadLevel from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/LoadLevel")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a LoadLevel object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> LoadLevel<'mc> {
    pub const INACCESSIBLE: LoadLevelEnum = LoadLevelEnum::Inaccessible;
    pub const BORDER: LoadLevelEnum = LoadLevelEnum::Border;
    pub const TICKING: LoadLevelEnum = LoadLevelEnum::Ticking;
    pub const ENTITY_TICKING: LoadLevelEnum = LoadLevelEnum::EntityTicking;
    pub const UNLOADED: LoadLevelEnum = LoadLevelEnum::Unloaded;
    pub fn from_string(str: String) -> std::option::Option<LoadLevelEnum> {
        match str.as_str() {
            "INACCESSIBLE" => Some(LoadLevelEnum::Inaccessible),
            "BORDER" => Some(LoadLevelEnum::Border),
            "TICKING" => Some(LoadLevelEnum::Ticking),
            "ENTITY_TICKING" => Some(LoadLevelEnum::EntityTicking),
            "UNLOADED" => Some(LoadLevelEnum::Unloaded),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<LoadLevel<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/LoadLevel");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/LoadLevel;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        LoadLevel::from_raw(
            &jni,
            raw_obj,
            LoadLevel::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}

pub struct VibrationDestinationBlockDestination<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for VibrationDestinationBlockDestination<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for VibrationDestinationBlockDestination<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate VibrationDestinationBlockDestination from null object."
            )
            .into());
        }
        let (valid, name) =
            env.validate_name(&obj, "org/bukkit/Vibration$Destination$BlockDestination")?;
        if !valid {
            Err(eyre::eyre!(
                    "Invalid argument passed. Expected a VibrationDestinationBlockDestination object, got {}",
                    name
                )
                .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> VibrationDestinationBlockDestination<'mc> {
    pub fn new(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<impl Into<crate::block::Block<'mc>>>,
    ) -> Result<crate::VibrationDestinationBlockDestination<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/block/Block;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")V";
        let cls = jni.find_class("org/bukkit/Vibration$Destination$BlockDestination");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.new_object(cls, sig.as_str(), args);
        let res = jni.translate_error_no_gen(res)?;
        crate::VibrationDestinationBlockDestination::from_raw(&jni, res)
    }
    //

    pub fn block(&self) -> Result<crate::block::Block<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/block/Block;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlock", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::block::Block::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn location(&self) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Location;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getLocation", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for VibrationDestinationBlockDestination<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!(
                "Error calling VibrationDestinationBlockDestination.toString: {}",
                err
            ),
        }
    }
}

#[derive(PartialEq, Eq)]
pub enum GameModeEnum {
    Creative,
    Survival,
    Adventure,
    Spectator,
}
impl std::fmt::Display for GameModeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            GameModeEnum::Creative => f.write_str("CREATIVE"),
            GameModeEnum::Survival => f.write_str("SURVIVAL"),
            GameModeEnum::Adventure => f.write_str("ADVENTURE"),
            GameModeEnum::Spectator => f.write_str("SPECTATOR"),
        }
    }
}
impl<'mc> std::fmt::Display for GameMode<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct GameMode<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub GameModeEnum,
);
impl<'mc> std::ops::Deref for GameMode<'mc> {
    type Target = GameModeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for GameMode<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for GameMode<'mc> {
    type Enum = GameModeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate GameMode from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/GameMode")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a GameMode object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> GameMode<'mc> {
    pub const CREATIVE: GameModeEnum = GameModeEnum::Creative;
    pub const SURVIVAL: GameModeEnum = GameModeEnum::Survival;
    pub const ADVENTURE: GameModeEnum = GameModeEnum::Adventure;
    pub const SPECTATOR: GameModeEnum = GameModeEnum::Spectator;
    pub fn from_string(str: String) -> std::option::Option<GameModeEnum> {
        match str.as_str() {
            "CREATIVE" => Some(GameModeEnum::Creative),
            "SURVIVAL" => Some(GameModeEnum::Survival),
            "ADVENTURE" => Some(GameModeEnum::Adventure),
            "SPECTATOR" => Some(GameModeEnum::Spectator),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<GameMode<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/GameMode");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/GameMode;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        GameMode::from_raw(
            &jni,
            raw_obj,
            GameMode::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum ToneEnum {
    G,
    A,
    B,
    C,
    D,
    E,
    F,
}
impl std::fmt::Display for ToneEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ToneEnum::G => f.write_str("G"),
            ToneEnum::A => f.write_str("A"),
            ToneEnum::B => f.write_str("B"),
            ToneEnum::C => f.write_str("C"),
            ToneEnum::D => f.write_str("D"),
            ToneEnum::E => f.write_str("E"),
            ToneEnum::F => f.write_str("F"),
        }
    }
}
impl<'mc> std::fmt::Display for Tone<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Tone<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub ToneEnum,
);
impl<'mc> std::ops::Deref for Tone<'mc> {
    type Target = ToneEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for Tone<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Tone<'mc> {
    type Enum = ToneEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Tone from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Tone")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Tone object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Tone<'mc> {
    pub const G: ToneEnum = ToneEnum::G;
    pub const A: ToneEnum = ToneEnum::A;
    pub const B: ToneEnum = ToneEnum::B;
    pub const C: ToneEnum = ToneEnum::C;
    pub const D: ToneEnum = ToneEnum::D;
    pub const E: ToneEnum = ToneEnum::E;
    pub const F: ToneEnum = ToneEnum::F;
    pub fn from_string(str: String) -> std::option::Option<ToneEnum> {
        match str.as_str() {
            "G" => Some(ToneEnum::G),
            "A" => Some(ToneEnum::A),
            "B" => Some(ToneEnum::B),
            "C" => Some(ToneEnum::C),
            "D" => Some(ToneEnum::D),
            "E" => Some(ToneEnum::E),
            "F" => Some(ToneEnum::F),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Tone<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Tone");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Tone;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Tone::from_raw(
            &jni,
            raw_obj,
            Tone::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}

///
/// This is a representation of an abstract class.
pub struct VibrationDestination<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for VibrationDestination<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for VibrationDestination<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate VibrationDestination from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Vibration$Destination")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a VibrationDestination object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> VibrationDestination<'mc> {}
/// A note class to store a specific note.
pub struct Note<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
#[derive(PartialEq, Eq)]
pub enum NoteToneEnum {
    G,
    A,
    B,
    C,
    D,
    E,
    F,
}
impl std::fmt::Display for NoteToneEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            NoteToneEnum::G => f.write_str("G"),
            NoteToneEnum::A => f.write_str("A"),
            NoteToneEnum::B => f.write_str("B"),
            NoteToneEnum::C => f.write_str("C"),
            NoteToneEnum::D => f.write_str("D"),
            NoteToneEnum::E => f.write_str("E"),
            NoteToneEnum::F => f.write_str("F"),
        }
    }
}
impl<'mc> std::fmt::Display for NoteTone<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct NoteTone<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub NoteToneEnum,
);
impl<'mc> std::ops::Deref for NoteTone<'mc> {
    type Target = NoteToneEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for NoteTone<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for NoteTone<'mc> {
    type Enum = NoteToneEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate NoteTone from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Note$Tone")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a NoteTone object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> NoteTone<'mc> {
    pub const G: NoteToneEnum = NoteToneEnum::G;
    pub const A: NoteToneEnum = NoteToneEnum::A;
    pub const B: NoteToneEnum = NoteToneEnum::B;
    pub const C: NoteToneEnum = NoteToneEnum::C;
    pub const D: NoteToneEnum = NoteToneEnum::D;
    pub const E: NoteToneEnum = NoteToneEnum::E;
    pub const F: NoteToneEnum = NoteToneEnum::F;
    pub fn from_string(str: String) -> std::option::Option<NoteToneEnum> {
        match str.as_str() {
            "G" => Some(NoteToneEnum::G),
            "A" => Some(NoteToneEnum::A),
            "B" => Some(NoteToneEnum::B),
            "C" => Some(NoteToneEnum::C),
            "D" => Some(NoteToneEnum::D),
            "E" => Some(NoteToneEnum::E),
            "F" => Some(NoteToneEnum::F),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<NoteTone<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Note$Tone");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Note$Tone;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        NoteTone::from_raw(
            &jni,
            raw_obj,
            NoteTone::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }

    //@Deprecated

    #[deprecated]
    pub fn is_sharped(&self, arg0: i8) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(B)Z");
        let val_1 = jni::objects::JValueGen::Byte(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isSharped",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //@Deprecated

    #[deprecated]
    //@Nullable

    pub fn get_by_id(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: i8,
    ) -> Result<Option<crate::NoteTone<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(B)Lorg/bukkit/Note$Tone;");
        let val_1 = jni::objects::JValueGen::Byte(arg0.into());
        let cls = jni.find_class("org/bukkit/Note$Tone");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getById",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {
            return Ok(None);
        }
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Ok(Some(crate::NoteTone::from_raw(
            &jni,
            raw_obj,
            crate::NoteTone::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )?))
    }
    //

    pub fn is_sharpable(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isSharpable", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    //@Deprecated

    #[deprecated]
    pub fn get_id(&self, arg0: bool) -> Result<i8, Box<dyn std::error::Error>> {
        let sig = String::from("(Z)B");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getId",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.b()?)
    }
}

impl<'mc> JNIRaw<'mc> for Note<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Note<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Note from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Note")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Note object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Note<'mc> {
    pub fn new(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<impl Into<crate::NoteTone<'mc>>>,
        arg2: std::option::Option<bool>,
    ) -> Result<crate::Note<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "Lorg/bukkit/Note$Tone;";
            let val_2 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "Z";
            // 0
            let val_3 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_3);
        }
        sig += ")V";
        let cls = jni.find_class("org/bukkit/Note");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.new_object(cls, sig.as_str(), args);
        let res = jni.translate_error_no_gen(res)?;
        crate::Note::from_raw(&jni, res)
    }
    //

    pub fn is_sharped(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isSharped", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn sharped(&self) -> Result<crate::Note<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Note;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "sharped", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Note::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn flat(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: i32,
        arg1: impl Into<crate::NoteTone<'mc>>,
    ) -> Result<crate::Note<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(ILorg/bukkit/Note$Tone;)Lorg/bukkit/Note;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/Note");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "flat",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::Note::from_raw(&jni, obj)
    }
    //

    pub fn sharp(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: i32,
        arg1: impl Into<crate::NoteTone<'mc>>,
    ) -> Result<crate::Note<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(ILorg/bukkit/Note$Tone;)Lorg/bukkit/Note;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/Note");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "sharp",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::Note::from_raw(&jni, obj)
    }
    //

    pub fn natural(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: i32,
        arg1: impl Into<crate::NoteTone<'mc>>,
    ) -> Result<crate::Note<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(ILorg/bukkit/Note$Tone;)Lorg/bukkit/Note;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/Note");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "natural",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::Note::from_raw(&jni, obj)
    }
    //

    pub fn flattened(&self) -> Result<crate::Note<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Note;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "flattened", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Note::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn octave(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getOctave", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn tone(&self) -> Result<crate::NoteTone<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Note$Tone;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getTone", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant = self
            .0
            .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .0
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::NoteTone::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::NoteTone::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn id(&self) -> Result<i8, Box<dyn std::error::Error>> {
        let sig = String::from("()B");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getId", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.b()?)
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for Note<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling Note.toString: {}", err),
        }
    }
}

#[derive(PartialEq, Eq)]
pub enum EnvironmentEnum {
    Normal,
    Nether,
    TheEnd,
    Custom,
}
impl std::fmt::Display for EnvironmentEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            EnvironmentEnum::Normal => f.write_str("NORMAL"),
            EnvironmentEnum::Nether => f.write_str("NETHER"),
            EnvironmentEnum::TheEnd => f.write_str("THE_END"),
            EnvironmentEnum::Custom => f.write_str("CUSTOM"),
        }
    }
}
impl<'mc> std::fmt::Display for Environment<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Environment<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub EnvironmentEnum,
);
impl<'mc> std::ops::Deref for Environment<'mc> {
    type Target = EnvironmentEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for Environment<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Environment<'mc> {
    type Enum = EnvironmentEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Environment from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Environment")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Environment object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Environment<'mc> {
    pub const NORMAL: EnvironmentEnum = EnvironmentEnum::Normal;
    pub const NETHER: EnvironmentEnum = EnvironmentEnum::Nether;
    pub const THE_END: EnvironmentEnum = EnvironmentEnum::TheEnd;
    pub const CUSTOM: EnvironmentEnum = EnvironmentEnum::Custom;
    pub fn from_string(str: String) -> std::option::Option<EnvironmentEnum> {
        match str.as_str() {
            "NORMAL" => Some(EnvironmentEnum::Normal),
            "NETHER" => Some(EnvironmentEnum::Nether),
            "THE_END" => Some(EnvironmentEnum::TheEnd),
            "CUSTOM" => Some(EnvironmentEnum::Custom),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Environment<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Environment");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Environment;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Environment::from_raw(
            &jni,
            raw_obj,
            Environment::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum EffectEnum {
    Click2,
    Click1,
    BowFire,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    DoorToggle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    IronDoorToggle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    TrapdoorToggle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    IronTrapdoorToggle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    FenceGateToggle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    DoorClose,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    IronDoorClose,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    TrapdoorClose,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    IronTrapdoorClose,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    FenceGateClose,
    Extinguish,
    RecordPlay,
    GhastShriek,
    GhastShoot,
    BlazeShoot,
    ZombieChewWoodenDoor,
    ZombieChewIronDoor,
    ZombieDestroyDoor,
    Smoke,
    StepSound,
    PotionBreak,
    InstantPotionBreak,
    EnderSignal,
    MobspawnerFlames,
    BrewingStandBrew,
    ChorusFlowerGrow,
    ChorusFlowerDeath,
    PortalTravel,
    EndereyeLaunch,
    FireworkShoot,
    VillagerPlantGrow,
    DragonBreath,
    AnvilBreak,
    AnvilUse,
    AnvilLand,
    EnderdragonShoot,
    WitherBreakBlock,
    WitherShoot,
    ZombieInfect,
    ZombieConvertedVillager,
    BatTakeoff,
    EndGatewaySpawn,
    EnderdragonGrowl,
    PhantomBite,
    ZombieConvertedToDrowned,
    HuskConvertedToZombie,
    GrindstoneUse,
    BookPageTurn,
    SmithingTableUse,
    PointedDripstoneLand,
    PointedDripstoneDripLavaIntoCauldron,
    PointedDripstoneDripWaterIntoCauldron,
    SkeletonConvertedToStray,
    ComposterFillAttempt,
    LavaInteract,
    RedstoneTorchBurnout,
    EndPortalFrameFill,
    DrippingDripstone,
    BoneMealUse,
    EnderDragonDestroyBlock,
    SpongeDry,
    ElectricSpark,
    CopperWaxOn,
    CopperWaxOff,
    OxidisedCopperScrape,
}
impl std::fmt::Display for EffectEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            EffectEnum::Click2 => f.write_str("CLICK2"),
            EffectEnum::Click1 => f.write_str("CLICK1"),
            EffectEnum::BowFire => f.write_str("BOW_FIRE"),
            EffectEnum::DoorToggle => f.write_str("DOOR_TOGGLE"),
            EffectEnum::IronDoorToggle => f.write_str("IRON_DOOR_TOGGLE"),
            EffectEnum::TrapdoorToggle => f.write_str("TRAPDOOR_TOGGLE"),
            EffectEnum::IronTrapdoorToggle => f.write_str("IRON_TRAPDOOR_TOGGLE"),
            EffectEnum::FenceGateToggle => f.write_str("FENCE_GATE_TOGGLE"),
            EffectEnum::DoorClose => f.write_str("DOOR_CLOSE"),
            EffectEnum::IronDoorClose => f.write_str("IRON_DOOR_CLOSE"),
            EffectEnum::TrapdoorClose => f.write_str("TRAPDOOR_CLOSE"),
            EffectEnum::IronTrapdoorClose => f.write_str("IRON_TRAPDOOR_CLOSE"),
            EffectEnum::FenceGateClose => f.write_str("FENCE_GATE_CLOSE"),
            EffectEnum::Extinguish => f.write_str("EXTINGUISH"),
            EffectEnum::RecordPlay => f.write_str("RECORD_PLAY"),
            EffectEnum::GhastShriek => f.write_str("GHAST_SHRIEK"),
            EffectEnum::GhastShoot => f.write_str("GHAST_SHOOT"),
            EffectEnum::BlazeShoot => f.write_str("BLAZE_SHOOT"),
            EffectEnum::ZombieChewWoodenDoor => f.write_str("ZOMBIE_CHEW_WOODEN_DOOR"),
            EffectEnum::ZombieChewIronDoor => f.write_str("ZOMBIE_CHEW_IRON_DOOR"),
            EffectEnum::ZombieDestroyDoor => f.write_str("ZOMBIE_DESTROY_DOOR"),
            EffectEnum::Smoke => f.write_str("SMOKE"),
            EffectEnum::StepSound => f.write_str("STEP_SOUND"),
            EffectEnum::PotionBreak => f.write_str("POTION_BREAK"),
            EffectEnum::InstantPotionBreak => f.write_str("INSTANT_POTION_BREAK"),
            EffectEnum::EnderSignal => f.write_str("ENDER_SIGNAL"),
            EffectEnum::MobspawnerFlames => f.write_str("MOBSPAWNER_FLAMES"),
            EffectEnum::BrewingStandBrew => f.write_str("BREWING_STAND_BREW"),
            EffectEnum::ChorusFlowerGrow => f.write_str("CHORUS_FLOWER_GROW"),
            EffectEnum::ChorusFlowerDeath => f.write_str("CHORUS_FLOWER_DEATH"),
            EffectEnum::PortalTravel => f.write_str("PORTAL_TRAVEL"),
            EffectEnum::EndereyeLaunch => f.write_str("ENDEREYE_LAUNCH"),
            EffectEnum::FireworkShoot => f.write_str("FIREWORK_SHOOT"),
            EffectEnum::VillagerPlantGrow => f.write_str("VILLAGER_PLANT_GROW"),
            EffectEnum::DragonBreath => f.write_str("DRAGON_BREATH"),
            EffectEnum::AnvilBreak => f.write_str("ANVIL_BREAK"),
            EffectEnum::AnvilUse => f.write_str("ANVIL_USE"),
            EffectEnum::AnvilLand => f.write_str("ANVIL_LAND"),
            EffectEnum::EnderdragonShoot => f.write_str("ENDERDRAGON_SHOOT"),
            EffectEnum::WitherBreakBlock => f.write_str("WITHER_BREAK_BLOCK"),
            EffectEnum::WitherShoot => f.write_str("WITHER_SHOOT"),
            EffectEnum::ZombieInfect => f.write_str("ZOMBIE_INFECT"),
            EffectEnum::ZombieConvertedVillager => f.write_str("ZOMBIE_CONVERTED_VILLAGER"),
            EffectEnum::BatTakeoff => f.write_str("BAT_TAKEOFF"),
            EffectEnum::EndGatewaySpawn => f.write_str("END_GATEWAY_SPAWN"),
            EffectEnum::EnderdragonGrowl => f.write_str("ENDERDRAGON_GROWL"),
            EffectEnum::PhantomBite => f.write_str("PHANTOM_BITE"),
            EffectEnum::ZombieConvertedToDrowned => f.write_str("ZOMBIE_CONVERTED_TO_DROWNED"),
            EffectEnum::HuskConvertedToZombie => f.write_str("HUSK_CONVERTED_TO_ZOMBIE"),
            EffectEnum::GrindstoneUse => f.write_str("GRINDSTONE_USE"),
            EffectEnum::BookPageTurn => f.write_str("BOOK_PAGE_TURN"),
            EffectEnum::SmithingTableUse => f.write_str("SMITHING_TABLE_USE"),
            EffectEnum::PointedDripstoneLand => f.write_str("POINTED_DRIPSTONE_LAND"),
            EffectEnum::PointedDripstoneDripLavaIntoCauldron => {
                f.write_str("POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON")
            }
            EffectEnum::PointedDripstoneDripWaterIntoCauldron => {
                f.write_str("POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON")
            }
            EffectEnum::SkeletonConvertedToStray => f.write_str("SKELETON_CONVERTED_TO_STRAY"),
            EffectEnum::ComposterFillAttempt => f.write_str("COMPOSTER_FILL_ATTEMPT"),
            EffectEnum::LavaInteract => f.write_str("LAVA_INTERACT"),
            EffectEnum::RedstoneTorchBurnout => f.write_str("REDSTONE_TORCH_BURNOUT"),
            EffectEnum::EndPortalFrameFill => f.write_str("END_PORTAL_FRAME_FILL"),
            EffectEnum::DrippingDripstone => f.write_str("DRIPPING_DRIPSTONE"),
            EffectEnum::BoneMealUse => f.write_str("BONE_MEAL_USE"),
            EffectEnum::EnderDragonDestroyBlock => f.write_str("ENDER_DRAGON_DESTROY_BLOCK"),
            EffectEnum::SpongeDry => f.write_str("SPONGE_DRY"),
            EffectEnum::ElectricSpark => f.write_str("ELECTRIC_SPARK"),
            EffectEnum::CopperWaxOn => f.write_str("COPPER_WAX_ON"),
            EffectEnum::CopperWaxOff => f.write_str("COPPER_WAX_OFF"),
            EffectEnum::OxidisedCopperScrape => f.write_str("OXIDISED_COPPER_SCRAPE"),
        }
    }
}
impl<'mc> std::fmt::Display for Effect<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Effect<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub EffectEnum,
);
impl<'mc> std::ops::Deref for Effect<'mc> {
    type Target = EffectEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
#[derive(PartialEq, Eq)]
pub enum EffectTypeEnum {
    Sound,
    Visual,
}
impl std::fmt::Display for EffectTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            EffectTypeEnum::Sound => f.write_str("SOUND"),
            EffectTypeEnum::Visual => f.write_str("VISUAL"),
        }
    }
}
impl<'mc> std::fmt::Display for EffectType<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct EffectType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub EffectTypeEnum,
);
impl<'mc> std::ops::Deref for EffectType<'mc> {
    type Target = EffectTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for EffectType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for EffectType<'mc> {
    type Enum = EffectTypeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate EffectType from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Effect$Type")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a EffectType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> EffectType<'mc> {
    pub const SOUND: EffectTypeEnum = EffectTypeEnum::Sound;
    pub const VISUAL: EffectTypeEnum = EffectTypeEnum::Visual;
    pub fn from_string(str: String) -> std::option::Option<EffectTypeEnum> {
        match str.as_str() {
            "SOUND" => Some(EffectTypeEnum::Sound),
            "VISUAL" => Some(EffectTypeEnum::Visual),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<EffectType<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Effect$Type");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Effect$Type;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        EffectType::from_raw(
            &jni,
            raw_obj,
            EffectType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }

    //
}

impl<'mc> JNIRaw<'mc> for Effect<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Effect<'mc> {
    type Enum = EffectEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Effect from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Effect")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Effect object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Effect<'mc> {
    pub const CLICK2: EffectEnum = EffectEnum::Click2;
    pub const CLICK1: EffectEnum = EffectEnum::Click1;
    pub const BOW_FIRE: EffectEnum = EffectEnum::BowFire;
    pub const DOOR_TOGGLE: EffectEnum = EffectEnum::DoorToggle;
    pub const IRON_DOOR_TOGGLE: EffectEnum = EffectEnum::IronDoorToggle;
    pub const TRAPDOOR_TOGGLE: EffectEnum = EffectEnum::TrapdoorToggle;
    pub const IRON_TRAPDOOR_TOGGLE: EffectEnum = EffectEnum::IronTrapdoorToggle;
    pub const FENCE_GATE_TOGGLE: EffectEnum = EffectEnum::FenceGateToggle;
    pub const DOOR_CLOSE: EffectEnum = EffectEnum::DoorClose;
    pub const IRON_DOOR_CLOSE: EffectEnum = EffectEnum::IronDoorClose;
    pub const TRAPDOOR_CLOSE: EffectEnum = EffectEnum::TrapdoorClose;
    pub const IRON_TRAPDOOR_CLOSE: EffectEnum = EffectEnum::IronTrapdoorClose;
    pub const FENCE_GATE_CLOSE: EffectEnum = EffectEnum::FenceGateClose;
    pub const EXTINGUISH: EffectEnum = EffectEnum::Extinguish;
    pub const RECORD_PLAY: EffectEnum = EffectEnum::RecordPlay;
    pub const GHAST_SHRIEK: EffectEnum = EffectEnum::GhastShriek;
    pub const GHAST_SHOOT: EffectEnum = EffectEnum::GhastShoot;
    pub const BLAZE_SHOOT: EffectEnum = EffectEnum::BlazeShoot;
    pub const ZOMBIE_CHEW_WOODEN_DOOR: EffectEnum = EffectEnum::ZombieChewWoodenDoor;
    pub const ZOMBIE_CHEW_IRON_DOOR: EffectEnum = EffectEnum::ZombieChewIronDoor;
    pub const ZOMBIE_DESTROY_DOOR: EffectEnum = EffectEnum::ZombieDestroyDoor;
    pub const SMOKE: EffectEnum = EffectEnum::Smoke;
    pub const STEP_SOUND: EffectEnum = EffectEnum::StepSound;
    pub const POTION_BREAK: EffectEnum = EffectEnum::PotionBreak;
    pub const INSTANT_POTION_BREAK: EffectEnum = EffectEnum::InstantPotionBreak;
    pub const ENDER_SIGNAL: EffectEnum = EffectEnum::EnderSignal;
    pub const MOBSPAWNER_FLAMES: EffectEnum = EffectEnum::MobspawnerFlames;
    pub const BREWING_STAND_BREW: EffectEnum = EffectEnum::BrewingStandBrew;
    pub const CHORUS_FLOWER_GROW: EffectEnum = EffectEnum::ChorusFlowerGrow;
    pub const CHORUS_FLOWER_DEATH: EffectEnum = EffectEnum::ChorusFlowerDeath;
    pub const PORTAL_TRAVEL: EffectEnum = EffectEnum::PortalTravel;
    pub const ENDEREYE_LAUNCH: EffectEnum = EffectEnum::EndereyeLaunch;
    pub const FIREWORK_SHOOT: EffectEnum = EffectEnum::FireworkShoot;
    pub const VILLAGER_PLANT_GROW: EffectEnum = EffectEnum::VillagerPlantGrow;
    pub const DRAGON_BREATH: EffectEnum = EffectEnum::DragonBreath;
    pub const ANVIL_BREAK: EffectEnum = EffectEnum::AnvilBreak;
    pub const ANVIL_USE: EffectEnum = EffectEnum::AnvilUse;
    pub const ANVIL_LAND: EffectEnum = EffectEnum::AnvilLand;
    pub const ENDERDRAGON_SHOOT: EffectEnum = EffectEnum::EnderdragonShoot;
    pub const WITHER_BREAK_BLOCK: EffectEnum = EffectEnum::WitherBreakBlock;
    pub const WITHER_SHOOT: EffectEnum = EffectEnum::WitherShoot;
    pub const ZOMBIE_INFECT: EffectEnum = EffectEnum::ZombieInfect;
    pub const ZOMBIE_CONVERTED_VILLAGER: EffectEnum = EffectEnum::ZombieConvertedVillager;
    pub const BAT_TAKEOFF: EffectEnum = EffectEnum::BatTakeoff;
    pub const END_GATEWAY_SPAWN: EffectEnum = EffectEnum::EndGatewaySpawn;
    pub const ENDERDRAGON_GROWL: EffectEnum = EffectEnum::EnderdragonGrowl;
    pub const PHANTOM_BITE: EffectEnum = EffectEnum::PhantomBite;
    pub const ZOMBIE_CONVERTED_TO_DROWNED: EffectEnum = EffectEnum::ZombieConvertedToDrowned;
    pub const HUSK_CONVERTED_TO_ZOMBIE: EffectEnum = EffectEnum::HuskConvertedToZombie;
    pub const GRINDSTONE_USE: EffectEnum = EffectEnum::GrindstoneUse;
    pub const BOOK_PAGE_TURN: EffectEnum = EffectEnum::BookPageTurn;
    pub const SMITHING_TABLE_USE: EffectEnum = EffectEnum::SmithingTableUse;
    pub const POINTED_DRIPSTONE_LAND: EffectEnum = EffectEnum::PointedDripstoneLand;
    pub const POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON: EffectEnum =
        EffectEnum::PointedDripstoneDripLavaIntoCauldron;
    pub const POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON: EffectEnum =
        EffectEnum::PointedDripstoneDripWaterIntoCauldron;
    pub const SKELETON_CONVERTED_TO_STRAY: EffectEnum = EffectEnum::SkeletonConvertedToStray;
    pub const COMPOSTER_FILL_ATTEMPT: EffectEnum = EffectEnum::ComposterFillAttempt;
    pub const LAVA_INTERACT: EffectEnum = EffectEnum::LavaInteract;
    pub const REDSTONE_TORCH_BURNOUT: EffectEnum = EffectEnum::RedstoneTorchBurnout;
    pub const END_PORTAL_FRAME_FILL: EffectEnum = EffectEnum::EndPortalFrameFill;
    pub const DRIPPING_DRIPSTONE: EffectEnum = EffectEnum::DrippingDripstone;
    pub const BONE_MEAL_USE: EffectEnum = EffectEnum::BoneMealUse;
    pub const ENDER_DRAGON_DESTROY_BLOCK: EffectEnum = EffectEnum::EnderDragonDestroyBlock;
    pub const SPONGE_DRY: EffectEnum = EffectEnum::SpongeDry;
    pub const ELECTRIC_SPARK: EffectEnum = EffectEnum::ElectricSpark;
    pub const COPPER_WAX_ON: EffectEnum = EffectEnum::CopperWaxOn;
    pub const COPPER_WAX_OFF: EffectEnum = EffectEnum::CopperWaxOff;
    pub const OXIDISED_COPPER_SCRAPE: EffectEnum = EffectEnum::OxidisedCopperScrape;
    pub fn from_string(str: String) -> std::option::Option<EffectEnum> {
        match str.as_str() {
            "CLICK2" => Some(EffectEnum::Click2),
            "CLICK1" => Some(EffectEnum::Click1),
            "BOW_FIRE" => Some(EffectEnum::BowFire),
            "DOOR_TOGGLE" => Some(EffectEnum::DoorToggle),
            "IRON_DOOR_TOGGLE" => Some(EffectEnum::IronDoorToggle),
            "TRAPDOOR_TOGGLE" => Some(EffectEnum::TrapdoorToggle),
            "IRON_TRAPDOOR_TOGGLE" => Some(EffectEnum::IronTrapdoorToggle),
            "FENCE_GATE_TOGGLE" => Some(EffectEnum::FenceGateToggle),
            "DOOR_CLOSE" => Some(EffectEnum::DoorClose),
            "IRON_DOOR_CLOSE" => Some(EffectEnum::IronDoorClose),
            "TRAPDOOR_CLOSE" => Some(EffectEnum::TrapdoorClose),
            "IRON_TRAPDOOR_CLOSE" => Some(EffectEnum::IronTrapdoorClose),
            "FENCE_GATE_CLOSE" => Some(EffectEnum::FenceGateClose),
            "EXTINGUISH" => Some(EffectEnum::Extinguish),
            "RECORD_PLAY" => Some(EffectEnum::RecordPlay),
            "GHAST_SHRIEK" => Some(EffectEnum::GhastShriek),
            "GHAST_SHOOT" => Some(EffectEnum::GhastShoot),
            "BLAZE_SHOOT" => Some(EffectEnum::BlazeShoot),
            "ZOMBIE_CHEW_WOODEN_DOOR" => Some(EffectEnum::ZombieChewWoodenDoor),
            "ZOMBIE_CHEW_IRON_DOOR" => Some(EffectEnum::ZombieChewIronDoor),
            "ZOMBIE_DESTROY_DOOR" => Some(EffectEnum::ZombieDestroyDoor),
            "SMOKE" => Some(EffectEnum::Smoke),
            "STEP_SOUND" => Some(EffectEnum::StepSound),
            "POTION_BREAK" => Some(EffectEnum::PotionBreak),
            "INSTANT_POTION_BREAK" => Some(EffectEnum::InstantPotionBreak),
            "ENDER_SIGNAL" => Some(EffectEnum::EnderSignal),
            "MOBSPAWNER_FLAMES" => Some(EffectEnum::MobspawnerFlames),
            "BREWING_STAND_BREW" => Some(EffectEnum::BrewingStandBrew),
            "CHORUS_FLOWER_GROW" => Some(EffectEnum::ChorusFlowerGrow),
            "CHORUS_FLOWER_DEATH" => Some(EffectEnum::ChorusFlowerDeath),
            "PORTAL_TRAVEL" => Some(EffectEnum::PortalTravel),
            "ENDEREYE_LAUNCH" => Some(EffectEnum::EndereyeLaunch),
            "FIREWORK_SHOOT" => Some(EffectEnum::FireworkShoot),
            "VILLAGER_PLANT_GROW" => Some(EffectEnum::VillagerPlantGrow),
            "DRAGON_BREATH" => Some(EffectEnum::DragonBreath),
            "ANVIL_BREAK" => Some(EffectEnum::AnvilBreak),
            "ANVIL_USE" => Some(EffectEnum::AnvilUse),
            "ANVIL_LAND" => Some(EffectEnum::AnvilLand),
            "ENDERDRAGON_SHOOT" => Some(EffectEnum::EnderdragonShoot),
            "WITHER_BREAK_BLOCK" => Some(EffectEnum::WitherBreakBlock),
            "WITHER_SHOOT" => Some(EffectEnum::WitherShoot),
            "ZOMBIE_INFECT" => Some(EffectEnum::ZombieInfect),
            "ZOMBIE_CONVERTED_VILLAGER" => Some(EffectEnum::ZombieConvertedVillager),
            "BAT_TAKEOFF" => Some(EffectEnum::BatTakeoff),
            "END_GATEWAY_SPAWN" => Some(EffectEnum::EndGatewaySpawn),
            "ENDERDRAGON_GROWL" => Some(EffectEnum::EnderdragonGrowl),
            "PHANTOM_BITE" => Some(EffectEnum::PhantomBite),
            "ZOMBIE_CONVERTED_TO_DROWNED" => Some(EffectEnum::ZombieConvertedToDrowned),
            "HUSK_CONVERTED_TO_ZOMBIE" => Some(EffectEnum::HuskConvertedToZombie),
            "GRINDSTONE_USE" => Some(EffectEnum::GrindstoneUse),
            "BOOK_PAGE_TURN" => Some(EffectEnum::BookPageTurn),
            "SMITHING_TABLE_USE" => Some(EffectEnum::SmithingTableUse),
            "POINTED_DRIPSTONE_LAND" => Some(EffectEnum::PointedDripstoneLand),
            "POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON" => {
                Some(EffectEnum::PointedDripstoneDripLavaIntoCauldron)
            }
            "POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON" => {
                Some(EffectEnum::PointedDripstoneDripWaterIntoCauldron)
            }
            "SKELETON_CONVERTED_TO_STRAY" => Some(EffectEnum::SkeletonConvertedToStray),
            "COMPOSTER_FILL_ATTEMPT" => Some(EffectEnum::ComposterFillAttempt),
            "LAVA_INTERACT" => Some(EffectEnum::LavaInteract),
            "REDSTONE_TORCH_BURNOUT" => Some(EffectEnum::RedstoneTorchBurnout),
            "END_PORTAL_FRAME_FILL" => Some(EffectEnum::EndPortalFrameFill),
            "DRIPPING_DRIPSTONE" => Some(EffectEnum::DrippingDripstone),
            "BONE_MEAL_USE" => Some(EffectEnum::BoneMealUse),
            "ENDER_DRAGON_DESTROY_BLOCK" => Some(EffectEnum::EnderDragonDestroyBlock),
            "SPONGE_DRY" => Some(EffectEnum::SpongeDry),
            "ELECTRIC_SPARK" => Some(EffectEnum::ElectricSpark),
            "COPPER_WAX_ON" => Some(EffectEnum::CopperWaxOn),
            "COPPER_WAX_OFF" => Some(EffectEnum::CopperWaxOff),
            "OXIDISED_COPPER_SCRAPE" => Some(EffectEnum::OxidisedCopperScrape),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Effect<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Effect");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Effect;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Effect::from_raw(
            &jni,
            raw_obj,
            Effect::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// A single entry from a ban list. This may represent either a player ban or an IP ban.
/// <p>Ban entries include the following properties:</p>
/// <table border="1">
/// <caption>
/// Property information
/// </caption>
/// <tbody>
/// <tr>
/// <th>Property</th>
/// <th>Description</th>
/// </tr>
/// <tr>
/// <td>Target Profile / IP Address</td>
/// <td>The target profile or IP address</td>
/// </tr>
/// <tr>
/// <td>Creation Date</td>
/// <td>The creation date of the ban</td>
/// </tr>
/// <tr>
/// <td>Source</td>
/// <td>The source of the ban, such as a player, console, plugin, etc</td>
/// </tr>
/// <tr>
/// <td>Expiration Date</td>
/// <td>The expiration date of the ban</td>
/// </tr>
/// <tr>
/// <td>Reason</td>
/// <td>The reason for the ban</td>
/// </tr>
/// </tbody>
/// </table>
/// <p>Unsaved information is not automatically written to the implementation's ban list, instead, the <a href="#save()"><code>save()</code></a> method must be called to write the changes to the ban list. If this ban entry has expired (such as from an unban) and is no longer found in the list, the <a href="#save()"><code>save()</code></a> call will re-add it to the list, therefore banning the victim specified.</p>
/// <p>Likewise, changes to the associated <a href="BanList.html" title="interface in org.bukkit"><code>BanList</code></a> or other entries may or may not be reflected in this entry.</p>
///
/// This is a representation of an abstract class.
pub struct BanEntry<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for BanEntry<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for BanEntry<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate BanEntry from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/BanEntry")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a BanEntry object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> BanEntry<'mc> {
    //

    pub fn reason(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getReason", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn expiration(&self) -> Result<blackboxmc_java::JavaDate<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Date;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getExpiration", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaDate::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn source(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSource", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn ban_target(&self) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Object;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getBanTarget", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.l()?)
    }
    //

    pub fn created(&self) -> Result<blackboxmc_java::JavaDate<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Date;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getCreated", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaDate::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn set_created(
        &self,
        arg0: impl Into<blackboxmc_java::JavaDate<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/util/Date;)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setCreated",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn set_source(&self, arg0: impl Into<String>) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)V");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setSource",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn set_expiration(
        &self,
        arg0: impl Into<blackboxmc_java::JavaDate<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/util/Date;)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setExpiration",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn set_reason(&self, arg0: impl Into<String>) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)V");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setReason",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn remove(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "remove", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn save(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "save", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn target(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getTarget", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
}
/// Represents the Bukkit core, for version and Server singleton handling
pub struct Bukkit<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Bukkit<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Bukkit<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Bukkit from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Bukkit")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Bukkit object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Bukkit<'mc> {
    //

    pub fn reload(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "reload", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn get_tag(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
        arg1: impl Into<crate::NamespacedKey<'mc>>,
        arg2: jni::objects::JClass<'mc>,
    ) -> Result<crate::Tag<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from(
            "(Ljava/lang/String;Lorg/bukkit/NamespacedKey;Ljava/lang/Class;)Lorg/bukkit/Tag;",
        );
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let val_3 = jni::objects::JValueGen::Object(arg2.into());
        let cls = jni.find_class("org/bukkit/Tag");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getTag",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::Tag::from_raw(&jni, obj)
    }
    //@Deprecated

    #[deprecated]
    //@Nullable

    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Magic value
    /// </div>
    /// Magic value
    ///
    /// Gets the map from the given item ID.
    pub fn get_map(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<Option<crate::map::MapView<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(I)Lorg/bukkit/map/MapView;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let cls = jni.find_class("org/bukkit/map/MapView");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getMap",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {
            return Ok(None);
        }
        let obj = res.l()?;
        Ok(Some(crate::map::MapView::from_raw(&jni, obj)?))
    }
    //

    pub fn create_map(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::World<'mc>>,
    ) -> Result<crate::map::MapView<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/World;)Lorg/bukkit/map/MapView;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/map/MapView");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "createMap",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::map::MapView::from_raw(&jni, obj)
    }
    //

    pub fn world_container(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/io/File;");
        let cls = jni.find_class("java/io/File");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getWorldContainer", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.l()?)
    }
    //

    pub fn version(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getVersion", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn get_world(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<impl Into<String>>,
    ) -> Result<crate::World<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/String;";
            let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                jni.new_string(a.into())?,
            ));
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/World;";
        let cls = jni.find_class("org/bukkit/World");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getWorld", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::World::from_raw(&jni, obj)
    }
    //

    pub fn generate_structures(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getGenerateStructures", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn initial_enabled_packs(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<Vec<String>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let cls = jni.find_class("java/util/List");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getInitialEnabledPacks", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&jni, res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(
                jni.get_string(unsafe { &jni::objects::JString::from_raw(*obj) })?
                    .to_string_lossy()
                    .to_string(),
            );
        }
        Ok(new_vec)
    }
    //

    pub fn online_players(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<Vec<crate::entity::Player<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Collection;");
        let cls = jni.find_class("java/util/Collection");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getOnlinePlayers", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut col = blackboxmc_java::JavaCollection::from_raw(&jni, res.l()?)?;
        let mut iter = blackboxmc_java::JavaIterator::from_raw(&jni, col.iterator()?)?;
        while iter.has_next()? {
            let obj = iter.next()?;
            new_vec.push(crate::entity::Player::from_raw(&jni, obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn max_players(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getMaxPlayers", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Set the maximum amount of players allowed to be logged in at once.
    pub fn set_max_players(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "setMaxPlayers",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn view_distance(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getViewDistance", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn initial_disabled_packs(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<Vec<String>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let cls = jni.find_class("java/util/List");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getInitialDisabledPacks", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&jni, res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(
                jni.get_string(unsafe { &jni::objects::JString::from_raw(*obj) })?
                    .to_string_lossy()
                    .to_string(),
            );
        }
        Ok(new_vec)
    }
    //

    pub fn bukkit_version(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getBukkitVersion", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn server(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::Server<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Server;");
        let cls = jni.find_class("org/bukkit/Server");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getServer", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::Server::from_raw(&jni, obj)
    }
    //

    pub fn spigot(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::ServerSpigot<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Server$Spigot;");
        let cls = jni.find_class("org/bukkit/Server$Spigot");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "spigot", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::ServerSpigot::from_raw(&jni, obj)
    }
    //

    pub fn get_loot_table(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::loot::LootTable<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/loot/LootTable;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/loot/LootTable");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getLootTable",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::loot::LootTable::from_raw(&jni, obj)
    }
    //

    pub fn simulation_distance(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getSimulationDistance", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_recipe(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::inventory::Recipe<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/inventory/Recipe;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/inventory/Recipe");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getRecipe",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::inventory::Recipe::from_raw(&jni, obj)
    }
    //

    pub fn get_boss_bar(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::boss::KeyedBossBar<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/boss/KeyedBossBar;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/boss/KeyedBossBar");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getBossBar",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::boss::KeyedBossBar::from_raw(&jni, obj)
    }
    //

    pub fn create_chunk_data(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::World<'mc>>,
    ) -> Result<crate::generator::ChunkGeneratorChunkData<'mc>, Box<dyn std::error::Error>> {
        let sig =
            String::from("(Lorg/bukkit/World;)Lorg/bukkit/generator/ChunkGenerator$ChunkData;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/generator/ChunkGenerator$ChunkData");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "createChunkData",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::generator::ChunkGeneratorChunkData::from_raw(&jni, obj)
    }
    //

    pub fn plugin_manager(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::plugin::PluginManager<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/plugin/PluginManager;");
        let cls = jni.find_class("org/bukkit/plugin/PluginManager");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getPluginManager", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::plugin::PluginManager::from_raw(&jni, obj)
    }
    //

    pub fn item_factory(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::inventory::ItemFactory<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/inventory/ItemFactory;");
        let cls = jni.find_class("org/bukkit/inventory/ItemFactory");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getItemFactory", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::inventory::ItemFactory::from_raw(&jni, obj)
    }
    //

    pub fn ip(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getIp", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn world_type(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getWorldType", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn max_world_size(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getMaxWorldSize", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn allow_end(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getAllowEnd", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn allow_nether(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getAllowNether", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn data_pack_manager(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::packs::DataPackManager<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/packs/DataPackManager;");
        let cls = jni.find_class("org/bukkit/packs/DataPackManager");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getDataPackManager", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::packs::DataPackManager::from_raw(&jni, obj)
    }
    //

    pub fn resource_pack(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getResourcePack", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn resource_pack_hash(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getResourcePackHash", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn resource_pack_prompt(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getResourcePackPrompt", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn is_resource_pack_required(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "isResourcePackRequired", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn has_whitelist(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "hasWhitelist", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets if the server is whitelisted.
    /// Sets if the server whitelist is enforced. If the whitelist is enforced, non-whitelisted players will be disconnected when the server whitelist is reloaded.
    pub fn set_whitelist(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: bool,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "setWhitelist",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn is_whitelist_enforced(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "isWhitelistEnforced", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets if the server whitelist is enforced. If the whitelist is enforced, non-whitelisted players will be disconnected when the server whitelist is reloaded.
    pub fn set_whitelist_enforced(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: bool,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Z)V");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "setWhitelistEnforced",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn whitelisted_players(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let cls = jni.find_class("java/util/Set");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getWhitelistedPlayers", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        blackboxmc_java::JavaSet::from_raw(&jni, obj)
    }
    //

    pub fn reload_whitelist(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "reloadWhitelist", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn broadcast_message(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)I");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "broadcastMessage",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn update_folder(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getUpdateFolder", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn update_folder_file(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/io/File;");
        let cls = jni.find_class("java/io/File");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getUpdateFolderFile", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.l()?)
    }
    //

    pub fn connection_throttle(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let cls = jni.find_class("long");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getConnectionThrottle", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.j()?)
    }
    //

    pub fn ticks_per_animal_spawns(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getTicksPerAnimalSpawns", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ticks_per_monster_spawns(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getTicksPerMonsterSpawns", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ticks_per_water_spawns(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getTicksPerWaterSpawns", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ticks_per_water_ambient_spawns(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res =
            jni.call_static_method(cls, "getTicksPerWaterAmbientSpawns", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ticks_per_water_underground_creature_spawns(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getTicksPerWaterUndergroundCreatureSpawns",
            sig.as_str(),
            vec![],
        );
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ticks_per_ambient_spawns(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getTicksPerAmbientSpawns", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_ticks_per_spawns(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::entity::SpawnCategory<'mc>>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)I");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getTicksPerSpawns",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_player(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<impl Into<blackboxmc_java::JavaUUID<'mc>>>,
    ) -> Result<crate::entity::Player<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/util/UUID;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/entity/Player;";
        let cls = jni.find_class("org/bukkit/entity/Player");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getPlayer", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::entity::Player::from_raw(&jni, obj)
    }
    //

    pub fn get_player_exact(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<crate::entity::Player<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/entity/Player;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("org/bukkit/entity/Player");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getPlayerExact",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::entity::Player::from_raw(&jni, obj)
    }
    //

    pub fn match_player(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Vec<crate::entity::Player<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Ljava/util/List;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("java/util/List");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "matchPlayer",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&jni, res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::entity::Player::from_raw(&jni, obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn scheduler(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::scheduler::BukkitScheduler<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/scheduler/BukkitScheduler;");
        let cls = jni.find_class("org/bukkit/scheduler/BukkitScheduler");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getScheduler", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::scheduler::BukkitScheduler::from_raw(&jni, obj)
    }
    //

    pub fn services_manager(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::plugin::ServicesManager<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/plugin/ServicesManager;");
        let cls = jni.find_class("org/bukkit/plugin/ServicesManager");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getServicesManager", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::plugin::ServicesManager::from_raw(&jni, obj)
    }
    //

    pub fn worlds(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<Vec<crate::World<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let cls = jni.find_class("java/util/List");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getWorlds", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&jni, res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::World::from_raw(&jni, obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn create_world(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::WorldCreator<'mc>>,
    ) -> Result<crate::World<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/WorldCreator;)Lorg/bukkit/World;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/World");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "createWorld",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::World::from_raw(&jni, obj)
    }
    //

    pub fn unload_world(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
        arg1: std::option::Option<bool>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Ljava/lang/String;";
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Z";
            // 1
            let val_2 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_2);
        }
        sig += ")Z";
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "unloadWorld", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn create_world_border(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::WorldBorder<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/WorldBorder;");
        let cls = jni.find_class("org/bukkit/WorldBorder");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "createWorldBorder", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::WorldBorder::from_raw(&jni, obj)
    }
    //

    pub fn create_explorer_map(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::World<'mc>>,
        arg1: impl Into<crate::Location<'mc>>,
        arg2: std::option::Option<impl Into<crate::StructureType<'mc>>>,
        arg3: std::option::Option<i32>,
        arg4: std::option::Option<bool>,
    ) -> Result<crate::inventory::ItemStack<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/World;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Lorg/bukkit/Location;";
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "Lorg/bukkit/StructureType;";
            let val_3 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "I";
            let val_4 = jni::objects::JValueGen::Int(a.into());
            args.push(val_4);
        }
        if let Some(a) = arg4 {
            sig += "Z";
            // 2
            let val_5 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_5);
        }
        sig += ")Lorg/bukkit/inventory/ItemStack;";
        let cls = jni.find_class("org/bukkit/inventory/ItemStack");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "createExplorerMap", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::inventory::ItemStack::from_raw(&jni, obj)
    }
    //

    pub fn reload_data(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "reloadData", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn get_plugin_command(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<crate::command::PluginCommand<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/command/PluginCommand;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("org/bukkit/command/PluginCommand");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getPluginCommand",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::command::PluginCommand::from_raw(&jni, obj)
    }
    //

    pub fn save_players(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "savePlayers", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn dispatch_command(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::command::CommandSender<'mc>>,
        arg1: impl Into<String>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/command/CommandSender;Ljava/lang/String;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg1.into())?,
        ));
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "dispatchCommand",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn add_recipe(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::inventory::Recipe<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/inventory/Recipe;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "addRecipe",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn get_recipes_for(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::inventory::ItemStack<'mc>>,
    ) -> Result<Vec<crate::inventory::Recipe<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/inventory/ItemStack;)Ljava/util/List;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("java/util/List");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getRecipesFor",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&jni, res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::inventory::Recipe::from_raw(&jni, obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn get_crafting_recipe(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: Vec<impl Into<crate::inventory::ItemStack<'mc>>>,
        arg1: impl Into<crate::World<'mc>>,
    ) -> Result<crate::inventory::Recipe<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from(
            "(Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/World;)Lorg/bukkit/inventory/Recipe;",
        );
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/inventory/Recipe");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getCraftingRecipe",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_2)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::inventory::Recipe::from_raw(&jni, obj)
    }
    //

    pub fn craft_item(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: Vec<impl Into<crate::inventory::ItemStack<'mc>>>,
        arg1: impl Into<crate::World<'mc>>,
        arg2: impl Into<crate::entity::Player<'mc>>,
    ) -> Result<crate::inventory::ItemStack<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/inventory/ItemStack;Lorg/bukkit/World;Lorg/bukkit/entity/Player;)Lorg/bukkit/inventory/ItemStack;");
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let val_3 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg2.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/inventory/ItemStack");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "craftItem",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::inventory::ItemStack::from_raw(&jni, obj)
    }
    //

    pub fn recipe_iterator(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<blackboxmc_java::JavaIterator<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Iterator;");
        let cls = jni.find_class("java/util/Iterator");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "recipeIterator", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        blackboxmc_java::JavaIterator::from_raw(&jni, obj)
    }
    //

    pub fn clear_recipes(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "clearRecipes", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn reset_recipes(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "resetRecipes", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn remove_recipe(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "removeRecipe",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn command_aliases(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<blackboxmc_java::JavaMap<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Map;");
        let cls = jni.find_class("java/util/Map");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getCommandAliases", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        blackboxmc_java::JavaMap::from_raw(&jni, obj)
    }
    //

    pub fn spawn_radius(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getSpawnRadius", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Sets the radius, in blocks, around each worlds spawn point to protect.
    pub fn set_spawn_radius(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "setSpawnRadius",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn should_send_chat_previews(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "shouldSendChatPreviews", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_enforcing_secure_profiles(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "isEnforcingSecureProfiles", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn hide_online_players(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getHideOnlinePlayers", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn online_mode(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getOnlineMode", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn allow_flight(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getAllowFlight", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_hardcore(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "isHardcore", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn get_offline_player(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<impl Into<String>>,
    ) -> Result<crate::OfflinePlayer<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/String;";
            let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                jni.new_string(a.into())?,
            ));
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/OfflinePlayer;";
        let cls = jni.find_class("org/bukkit/OfflinePlayer");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getOfflinePlayer", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::OfflinePlayer::from_raw(&jni, obj)
    }
    //

    pub fn create_player_profile_with_string(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<impl Into<blackboxmc_java::JavaUUID<'mc>>>,
    ) -> Result<crate::profile::PlayerProfile<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/util/UUID;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/profile/PlayerProfile;";
        let cls = jni.find_class("org/bukkit/profile/PlayerProfile");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "createPlayerProfile", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::profile::PlayerProfile::from_raw(&jni, obj)
    }
    //

    pub fn create_player_profile_with_uuid(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<blackboxmc_java::JavaUUID<'mc>>,
        arg1: std::option::Option<impl Into<String>>,
    ) -> Result<crate::profile::PlayerProfile<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Ljava/util/UUID;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Ljava/lang/String;";
            let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                jni.new_string(a.into())?,
            ));
            args.push(val_2);
        }
        sig += ")Lorg/bukkit/profile/PlayerProfile;";
        let cls = jni.find_class("org/bukkit/profile/PlayerProfile");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "createPlayerProfile", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::profile::PlayerProfile::from_raw(&jni, obj)
    }
    //

    pub fn ipbans(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let cls = jni.find_class("java/util/Set");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getIPBans", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        blackboxmc_java::JavaSet::from_raw(&jni, obj)
    }
    //

    pub fn ban_ip(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<impl Into<String>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/String;";
            let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                jni.new_string(a.into())?,
            ));
            args.push(val_1);
        }
        sig += ")V";
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "banIP", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn unban_ip(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<impl Into<String>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/String;";
            let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                jni.new_string(a.into())?,
            ));
            args.push(val_1);
        }
        sig += ")V";
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "unbanIP", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn banned_players(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let cls = jni.find_class("java/util/Set");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getBannedPlayers", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        blackboxmc_java::JavaSet::from_raw(&jni, obj)
    }
    //

    pub fn get_ban_list(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::BanListType<'mc>>,
    ) -> Result<crate::BanList<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/BanList$Type;)Lorg/bukkit/BanList;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/BanList");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getBanList",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::BanList::from_raw(&jni, obj)
    }
    //

    pub fn operators(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let cls = jni.find_class("java/util/Set");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getOperators", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        blackboxmc_java::JavaSet::from_raw(&jni, obj)
    }
    //

    pub fn default_game_mode(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::GameMode<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/GameMode;");
        let cls = jni.find_class("org/bukkit/GameMode");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getDefaultGameMode", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::GameMode::from_raw(
            &jni,
            raw_obj,
            crate::GameMode::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn set_default_game_mode(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::GameMode<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/GameMode;)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "setDefaultGameMode",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn console_sender(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::command::ConsoleCommandSender<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/command/ConsoleCommandSender;");
        let cls = jni.find_class("org/bukkit/command/ConsoleCommandSender");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getConsoleSender", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::command::ConsoleCommandSender::from_raw(&jni, obj)
    }
    //

    //

    pub fn messenger(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::plugin::messaging::Messenger<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/plugin/messaging/Messenger;");
        let cls = jni.find_class("org/bukkit/plugin/messaging/Messenger");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getMessenger", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::plugin::messaging::Messenger::from_raw(&jni, obj)
    }
    //

    pub fn help_map(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::help::HelpMap<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/help/HelpMap;");
        let cls = jni.find_class("org/bukkit/help/HelpMap");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getHelpMap", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::help::HelpMap::from_raw(&jni, obj)
    }
    //

    pub fn create_inventory(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::inventory::InventoryHolder<'mc>>,
        arg1: i32,
        arg2: std::option::Option<impl Into<String>>,
    ) -> Result<crate::inventory::Inventory<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/inventory/InventoryHolder;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "I";
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "Ljava/lang/String;";
            let val_3 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                jni.new_string(a.into())?,
            ));
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/inventory/Inventory;";
        let cls = jni.find_class("org/bukkit/inventory/Inventory");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "createInventory", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::inventory::Inventory::from_raw(&jni, obj)
    }
    //

    pub fn create_merchant(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<crate::inventory::Merchant<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/inventory/Merchant;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("org/bukkit/inventory/Merchant");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "createMerchant",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::inventory::Merchant::from_raw(&jni, obj)
    }
    //

    pub fn max_chained_neighbor_updates(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getMaxChainedNeighborUpdates", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn monster_spawn_limit(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getMonsterSpawnLimit", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn animal_spawn_limit(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getAnimalSpawnLimit", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn water_animal_spawn_limit(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getWaterAnimalSpawnLimit", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn water_ambient_spawn_limit(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getWaterAmbientSpawnLimit", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn water_underground_creature_spawn_limit(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getWaterUndergroundCreatureSpawnLimit",
            sig.as_str(),
            vec![],
        );
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn ambient_spawn_limit(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getAmbientSpawnLimit", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_spawn_limit(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::entity::SpawnCategory<'mc>>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/entity/SpawnCategory;)I");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getSpawnLimit",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn is_primary_thread(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "isPrimaryThread", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn motd(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getMotd", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn set_motd(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)V");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "setMotd",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn shutdown_message(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getShutdownMessage", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn warning_state(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::WarningWarningState<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Warning$WarningState;");
        let cls = jni.find_class("org/bukkit/Warning$WarningState");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getWarningState", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::WarningWarningState::from_raw(
            &jni,
            raw_obj,
            crate::WarningWarningState::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn scoreboard_manager(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::scoreboard::ScoreboardManager<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/scoreboard/ScoreboardManager;");
        let cls = jni.find_class("org/bukkit/scoreboard/ScoreboardManager");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getScoreboardManager", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::scoreboard::ScoreboardManager::from_raw(&jni, obj)
    }
    //

    pub fn get_scoreboard_criteria(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<crate::scoreboard::Criteria<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/scoreboard/Criteria;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("org/bukkit/scoreboard/Criteria");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getScoreboardCriteria",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::scoreboard::Criteria::from_raw(&jni, obj)
    }
    //

    pub fn server_icon(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::util::CachedServerIcon<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/util/CachedServerIcon;");
        let cls = jni.find_class("org/bukkit/util/CachedServerIcon");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getServerIcon", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::util::CachedServerIcon::from_raw(&jni, obj)
    }
    //

    pub fn load_server_icon(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<jni::objects::JObject<'mc>>,
    ) -> Result<crate::util::CachedServerIcon<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/awt/image/BufferedImage;";
            let val_1 = jni::objects::JValueGen::Object(a);
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/util/CachedServerIcon;";
        let cls = jni.find_class("org/bukkit/util/CachedServerIcon");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "loadServerIcon", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::util::CachedServerIcon::from_raw(&jni, obj)
    }
    //

    /// Set the idle kick timeout. Any players idle for the specified amount of time will be automatically kicked.
    /// <p>A value of 0 will disable the idle kick timeout.</p>
    pub fn set_idle_timeout(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "setIdleTimeout",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn idle_timeout(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getIdleTimeout", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn create_boss_bar(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
        arg1: impl Into<String>,
        arg2: impl Into<crate::boss::BarColor<'mc>>,
        arg3: std::option::Option<impl Into<crate::boss::BarStyle<'mc>>>,
        arg4: std::option::Option<Vec<impl Into<crate::boss::BarFlag<'mc>>>>,
    ) -> Result<crate::boss::KeyedBossBar<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/NamespacedKey;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "Ljava/lang/String;";
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg1.into())?,
        ));
        args.push(val_2);
        sig += "Lorg/bukkit/boss/BarColor;";
        let val_3 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg2.into().jni_object().clone())
        });
        args.push(val_3);
        if let Some(a) = arg3 {
            sig += "Lorg/bukkit/boss/BarStyle;";
            let val_4 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_4);
        }
        sig += ")Lorg/bukkit/boss/KeyedBossBar;";
        let cls = jni.find_class("org/bukkit/boss/KeyedBossBar");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "createBossBar", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::boss::KeyedBossBar::from_raw(&jni, obj)
    }
    //

    pub fn boss_bars(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<blackboxmc_java::JavaIterator<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Iterator;");
        let cls = jni.find_class("java/util/Iterator");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getBossBars", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        blackboxmc_java::JavaIterator::from_raw(&jni, obj)
    }
    //

    pub fn remove_boss_bar(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("boolean");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "removeBossBar",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn get_entity(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<blackboxmc_java::JavaUUID<'mc>>,
    ) -> Result<crate::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/util/UUID;)Lorg/bukkit/entity/Entity;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/entity/Entity");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getEntity",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::entity::Entity::from_raw(&jni, obj)
    }
    //

    pub fn get_advancement(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::advancement::Advancement<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/advancement/Advancement;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/advancement/Advancement");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getAdvancement",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::advancement::Advancement::from_raw(&jni, obj)
    }
    //

    pub fn advancement_iterator(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<blackboxmc_java::JavaIterator<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Iterator;");
        let cls = jni.find_class("java/util/Iterator");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "advancementIterator", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        blackboxmc_java::JavaIterator::from_raw(&jni, obj)
    }
    //

    pub fn create_block_data(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::Material<'mc>>,
        arg1: std::option::Option<impl Into<String>>,
    ) -> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Material;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Ljava/lang/String;";
            let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                jni.new_string(a.into())?,
            ));
            args.push(val_2);
        }
        sig += ")Lorg/bukkit/block/data/BlockData;";
        let cls = jni.find_class("org/bukkit/block/data/BlockData");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "createBlockData", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::block::data::BlockData::from_raw(&jni, obj)
    }
    //

    pub fn select_entities(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::command::CommandSender<'mc>>,
        arg1: impl Into<String>,
    ) -> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>> {
        let sig =
            String::from("(Lorg/bukkit/command/CommandSender;Ljava/lang/String;)Ljava/util/List;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg1.into())?,
        ));
        let cls = jni.find_class("java/util/List");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "selectEntities",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = jni.translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&jni, res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::entity::Entity::from_raw(&jni, obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn structure_manager(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::structure::StructureManager<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/structure/StructureManager;");
        let cls = jni.find_class("org/bukkit/structure/StructureManager");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getStructureManager", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::structure::StructureManager::from_raw(&jni, obj)
    }
    //

    pub fn get_registry(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: jni::objects::JClass<'mc>,
    ) -> Result<crate::Registry<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Class;)Lorg/bukkit/Registry;");
        let val_1 = jni::objects::JValueGen::Object(arg0.into());
        let cls = jni.find_class("org/bukkit/Registry");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getRegistry",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::Registry::from_raw(&jni, obj)
    }
    //

    pub fn set_server(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::Server<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Server;)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "setServer",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn name(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getName", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn shutdown(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let cls = jni.find_class("void");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "shutdown", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(())
    }
    //

    pub fn get_unsafe(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::UnsafeValues<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/UnsafeValues;");
        let cls = jni.find_class("org/bukkit/UnsafeValues");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getUnsafe", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::UnsafeValues::from_raw(&jni, obj)
    }
    //

    pub fn logger(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<blackboxmc_java::logging::JavaLogger<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/logging/Logger;");
        let cls = jni.find_class("java/util/logging/Logger");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getLogger", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        blackboxmc_java::logging::JavaLogger::from_raw(&jni, obj)
    }
    //

    pub fn port(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getPort", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn broadcast(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
        arg1: impl Into<String>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;Ljava/lang/String;)I");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg1.into())?,
        ));
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "broadcast",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for Bukkit<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling Bukkit.toString: {}", err),
        }
    }
}

/// All supported color values for chat
pub struct ChatColor<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for ChatColor<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for ChatColor<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate ChatColor from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/ChatColor")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ChatColor object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> ChatColor<'mc> {
    //@Nullable

    /// Gets the color represented by the specified color code
    pub fn get_by_char(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<u16>,
    ) -> Result<Option<crate::ChatColor<'mc>>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "C";
            let val_1 = jni::objects::JValueGen::Char(a.into());
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/ChatColor;";
        let cls = jni.find_class("org/bukkit/ChatColor");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getByChar", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {
            return Ok(None);
        }
        let obj = res.l()?;
        Ok(Some(crate::ChatColor::from_raw(&jni, obj)?))
    }
    //

    pub fn get_last_colors(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Ljava/lang/String;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getLastColors",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn is_color(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isColor", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn is_format(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isFormat", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn as_bungee(
        &self,
    ) -> Result<blackboxmc_bungee::bungee::api::ChatColor<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lnet/md_5/bungee/api/ChatColor;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "asBungee", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_bungee::bungee::api::ChatColor::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn strip_color(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Ljava/lang/String;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "stripColor",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn translate_alternate_color_codes(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: u16,
        arg1: impl Into<String>,
    ) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("(CLjava/lang/String;)Ljava/lang/String;");
        let val_1 = jni::objects::JValueGen::Char(arg0.into());
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg1.into())?,
        ));
        let cls = jni.find_class("java/lang/String");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "translateAlternateColorCodes",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = jni.translate_error(res)?;
        Ok(jni
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    //

    pub fn char(&self) -> Result<u16, Box<dyn std::error::Error>> {
        let sig = String::from("()C");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getChar", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.c()?)
    }
}

impl<'mc> std::string::ToString for ChatColor<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling ChatColor.toString: {}", err),
        }
    }
}

/// A ban list, containing bans of some <a title="enum in org.bukkit" href="BanList.Type.html"><code>BanList.Type</code></a>.
///
/// This is a representation of an abstract class.
pub struct BanList<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for BanList<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for BanList<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate BanList from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/BanList")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a BanList object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> BanList<'mc> {
    //

    pub fn get_ban_entry(
        &self,
        arg0: std::option::Option<jni::objects::JObject<'mc>>,
    ) -> Result<crate::BanEntry<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/Object;";
            let val_1 = jni::objects::JValueGen::Object(a);
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/BanEntry;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBanEntry", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::BanEntry::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn add_ban(
        &self,
        arg0: impl Into<String>,
        arg1: impl Into<String>,
        arg2: impl Into<blackboxmc_java::JavaDate<'mc>>,
        arg3: std::option::Option<impl Into<String>>,
    ) -> Result<crate::BanEntry<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Ljava/lang/String;";
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        args.push(val_1);
        sig += "Ljava/lang/String;";
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg1.into())?,
        ));
        args.push(val_2);
        sig += "Ljava/util/Date;";
        let val_3 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg2.into().jni_object().clone())
        });
        args.push(val_3);
        if let Some(a) = arg3 {
            sig += "Ljava/lang/String;";
            let val_4 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                self.jni_ref().new_string(a.into())?,
            ));
            args.push(val_4);
        }
        sig += ")Lorg/bukkit/BanEntry;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "addBan", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::BanEntry::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn ban_entries(&self) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getBanEntries", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaSet::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn is_banned(
        &self,
        arg0: std::option::Option<jni::objects::JObject<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/Object;";
            let val_1 = jni::objects::JValueGen::Object(a);
            args.push(val_1);
        }
        sig += ")Z";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "isBanned", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn pardon(
        &self,
        arg0: std::option::Option<impl Into<String>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/String;";
            let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                self.jni_ref().new_string(a.into())?,
            ));
            args.push(val_1);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "pardon", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn entries(&self) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getEntries", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaSet::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}
#[derive(PartialEq, Eq)]
pub enum PortalTypeEnum {
    Nether,
    Ender,
    Custom,
}
impl std::fmt::Display for PortalTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            PortalTypeEnum::Nether => f.write_str("NETHER"),
            PortalTypeEnum::Ender => f.write_str("ENDER"),
            PortalTypeEnum::Custom => f.write_str("CUSTOM"),
        }
    }
}
impl<'mc> std::fmt::Display for PortalType<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct PortalType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub PortalTypeEnum,
);
impl<'mc> std::ops::Deref for PortalType<'mc> {
    type Target = PortalTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for PortalType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for PortalType<'mc> {
    type Enum = PortalTypeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate PortalType from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/PortalType")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a PortalType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> PortalType<'mc> {
    pub const NETHER: PortalTypeEnum = PortalTypeEnum::Nether;
    pub const ENDER: PortalTypeEnum = PortalTypeEnum::Ender;
    pub const CUSTOM: PortalTypeEnum = PortalTypeEnum::Custom;
    pub fn from_string(str: String) -> std::option::Option<PortalTypeEnum> {
        match str.as_str() {
            "NETHER" => Some(PortalTypeEnum::Nether),
            "ENDER" => Some(PortalTypeEnum::Ender),
            "CUSTOM" => Some(PortalTypeEnum::Custom),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<PortalType<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/PortalType");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/PortalType;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        PortalType::from_raw(
            &jni,
            raw_obj,
            PortalType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a ban-type that a <a href="BanList.html" title="interface in org.bukkit"><code>BanList</code></a> may track.
#[derive(PartialEq, Eq)]
pub enum BanListTypeEnum {
    Name,
    Ip,
    Profile,
}
impl std::fmt::Display for BanListTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            BanListTypeEnum::Name => f.write_str("NAME"),
            BanListTypeEnum::Ip => f.write_str("IP"),
            BanListTypeEnum::Profile => f.write_str("PROFILE"),
        }
    }
}
impl<'mc> std::fmt::Display for BanListType<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct BanListType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub BanListTypeEnum,
);
impl<'mc> std::ops::Deref for BanListType<'mc> {
    type Target = BanListTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for BanListType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for BanListType<'mc> {
    type Enum = BanListTypeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate BanListType from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/BanList$Type")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a BanListType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> BanListType<'mc> {
    pub const NAME: BanListTypeEnum = BanListTypeEnum::Name;
    pub const IP: BanListTypeEnum = BanListTypeEnum::Ip;
    pub const PROFILE: BanListTypeEnum = BanListTypeEnum::Profile;
    pub fn from_string(str: String) -> std::option::Option<BanListTypeEnum> {
        match str.as_str() {
            "NAME" => Some(BanListTypeEnum::Name),
            "IP" => Some(BanListTypeEnum::Ip),
            "PROFILE" => Some(BanListTypeEnum::Profile),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<BanListType<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/BanList$Type");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/BanList$Type;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        BanListType::from_raw(
            &jni,
            raw_obj,
            BanListType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }

    //
}
/// This designates the warning state for a specific item.
/// <p>When the server settings dictate 'default' warnings, warnings are printed if the <a href="#value()"><code>value()</code></a> is true.</p>
///
/// This is a representation of an abstract class.
pub struct Warning<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Warning<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Warning<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Warning from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Warning")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Warning object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Warning<'mc> {
    //

    pub fn reason(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "reason", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn value(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "value", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn annotation_type(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "annotationType", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
}

impl<'mc> std::string::ToString for Warning<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling Warning.toString: {}", err),
        }
    }
}

/// Represents various types of options that may be used to create a world.
pub struct WorldCreator<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for WorldCreator<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for WorldCreator<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate WorldCreator from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/WorldCreator")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WorldCreator object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> WorldCreator<'mc> {
    pub fn new(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)V");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("org/bukkit/WorldCreator");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.new_object(
            cls,
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error_no_gen(res)?;
        crate::WorldCreator::from_raw(&jni, res)
    }
    //

    pub fn environment(
        &self,
        arg0: std::option::Option<impl Into<crate::WorldEnvironment<'mc>>>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/World$Environment;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "environment", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldCreator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn create_world(&self) -> Result<crate::World<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/World;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "createWorld", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::World::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn biome_provider(
        &self,
        arg0: std::option::Option<impl Into<crate::generator::BiomeProvider<'mc>>>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/generator/BiomeProvider;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "biomeProvider", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldCreator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn biome_provider_with_string(
        &self,
        arg0: impl Into<String>,
        arg1: std::option::Option<impl Into<crate::command::CommandSender<'mc>>>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Ljava/lang/String;";
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Lorg/bukkit/command/CommandSender;";
            let val_2 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_2);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "biomeProvider", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldCreator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    /// Sets whether or not worlds created or loaded with this creator will have structures.
    pub fn generate_structures(
        &self,
        arg0: std::option::Option<bool>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Z";
            // -1
            let val_1 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "generateStructures",
            sig.as_str(),
            args,
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldCreator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn generator_settings(
        &self,
        arg0: std::option::Option<impl Into<String>>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/String;";
            let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                self.jni_ref().new_string(a.into())?,
            ));
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "generatorSettings", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldCreator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    /// Sets whether the world will be hardcore or not. In a hardcore world the difficulty will be locked to hard.
    pub fn hardcore(
        &self,
        arg0: std::option::Option<bool>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Z";
            // -1
            let val_1 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hardcore", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldCreator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn get_generator_for_name(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
        arg1: impl Into<String>,
        arg2: impl Into<crate::command::CommandSender<'mc>>,
    ) -> Result<crate::generator::ChunkGenerator<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;Ljava/lang/String;Lorg/bukkit/command/CommandSender;)Lorg/bukkit/generator/ChunkGenerator;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg1.into())?,
        ));
        let val_3 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg2.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/generator/ChunkGenerator");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getGeneratorForName",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::generator::ChunkGenerator::from_raw(&jni, obj)
    }
    //

    pub fn get_biome_provider_for_name(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
        arg1: impl Into<String>,
        arg2: impl Into<crate::command::CommandSender<'mc>>,
    ) -> Result<crate::generator::BiomeProvider<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;Ljava/lang/String;Lorg/bukkit/command/CommandSender;)Lorg/bukkit/generator/BiomeProvider;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg1.into())?,
        ));
        let val_3 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg2.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/generator/BiomeProvider");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getBiomeProviderForName",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::generator::BiomeProvider::from_raw(&jni, obj)
    }
    //

    pub fn name(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<impl Into<String>>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/String;";
            let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                jni.new_string(a.into())?,
            ));
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let cls = jni.find_class("org/bukkit/WorldCreator");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "name", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::WorldCreator::from_raw(&jni, obj)
    }
    //

    pub fn get_type(
        &self,
        arg0: std::option::Option<impl Into<crate::WorldType<'mc>>>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/WorldType;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "type", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldCreator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn copy(
        &self,
        arg0: std::option::Option<impl Into<crate::World<'mc>>>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/World;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "copy", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldCreator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn generator(
        &self,
        arg0: std::option::Option<impl Into<crate::generator::ChunkGenerator<'mc>>>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/generator/ChunkGenerator;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "generator", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldCreator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn generator_with_string(
        &self,
        arg0: impl Into<String>,
        arg1: std::option::Option<impl Into<crate::command::CommandSender<'mc>>>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Ljava/lang/String;";
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Lorg/bukkit/command/CommandSender;";
            let val_2 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_2);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "generator", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldCreator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    /// Sets the seed that will be used to create this world
    pub fn seed(
        &self,
        arg0: std::option::Option<i64>,
    ) -> Result<crate::WorldCreator<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/WorldCreator;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "seed", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::WorldCreator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for WorldCreator<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling WorldCreator.toString: {}", err),
        }
    }
}

#[derive(PartialEq, Eq)]
pub enum ArtEnum {
    Kebab,
    Aztec,
    Alban,
    Aztec2,
    Bomb,
    Plant,
    Wasteland,
    Pool,
    Courbet,
    Sea,
    Sunset,
    Creebet,
    Wanderer,
    Graham,
    VariantMatch,
    Bust,
    Stage,
    Void,
    SkullAndRoses,
    Wither,
    Fighters,
    Pointer,
    Pigscene,
    BurningSkull,
    Skeleton,
    DonkeyKong,
    Earth,
    Wind,
    Water,
    Fire,
}
impl std::fmt::Display for ArtEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ArtEnum::Kebab => f.write_str("KEBAB"),
            ArtEnum::Aztec => f.write_str("AZTEC"),
            ArtEnum::Alban => f.write_str("ALBAN"),
            ArtEnum::Aztec2 => f.write_str("AZTEC2"),
            ArtEnum::Bomb => f.write_str("BOMB"),
            ArtEnum::Plant => f.write_str("PLANT"),
            ArtEnum::Wasteland => f.write_str("WASTELAND"),
            ArtEnum::Pool => f.write_str("POOL"),
            ArtEnum::Courbet => f.write_str("COURBET"),
            ArtEnum::Sea => f.write_str("SEA"),
            ArtEnum::Sunset => f.write_str("SUNSET"),
            ArtEnum::Creebet => f.write_str("CREEBET"),
            ArtEnum::Wanderer => f.write_str("WANDERER"),
            ArtEnum::Graham => f.write_str("GRAHAM"),
            ArtEnum::VariantMatch => f.write_str("MATCH"),
            ArtEnum::Bust => f.write_str("BUST"),
            ArtEnum::Stage => f.write_str("STAGE"),
            ArtEnum::Void => f.write_str("VOID"),
            ArtEnum::SkullAndRoses => f.write_str("SKULL_AND_ROSES"),
            ArtEnum::Wither => f.write_str("WITHER"),
            ArtEnum::Fighters => f.write_str("FIGHTERS"),
            ArtEnum::Pointer => f.write_str("POINTER"),
            ArtEnum::Pigscene => f.write_str("PIGSCENE"),
            ArtEnum::BurningSkull => f.write_str("BURNING_SKULL"),
            ArtEnum::Skeleton => f.write_str("SKELETON"),
            ArtEnum::DonkeyKong => f.write_str("DONKEY_KONG"),
            ArtEnum::Earth => f.write_str("EARTH"),
            ArtEnum::Wind => f.write_str("WIND"),
            ArtEnum::Water => f.write_str("WATER"),
            ArtEnum::Fire => f.write_str("FIRE"),
        }
    }
}
impl<'mc> std::fmt::Display for Art<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Art<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub ArtEnum,
);
impl<'mc> std::ops::Deref for Art<'mc> {
    type Target = ArtEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for Art<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Art<'mc> {
    type Enum = ArtEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Art from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Art")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Art object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Art<'mc> {
    pub const KEBAB: ArtEnum = ArtEnum::Kebab;
    pub const AZTEC: ArtEnum = ArtEnum::Aztec;
    pub const ALBAN: ArtEnum = ArtEnum::Alban;
    pub const AZTEC2: ArtEnum = ArtEnum::Aztec2;
    pub const BOMB: ArtEnum = ArtEnum::Bomb;
    pub const PLANT: ArtEnum = ArtEnum::Plant;
    pub const WASTELAND: ArtEnum = ArtEnum::Wasteland;
    pub const POOL: ArtEnum = ArtEnum::Pool;
    pub const COURBET: ArtEnum = ArtEnum::Courbet;
    pub const SEA: ArtEnum = ArtEnum::Sea;
    pub const SUNSET: ArtEnum = ArtEnum::Sunset;
    pub const CREEBET: ArtEnum = ArtEnum::Creebet;
    pub const WANDERER: ArtEnum = ArtEnum::Wanderer;
    pub const GRAHAM: ArtEnum = ArtEnum::Graham;
    pub const MATCH: ArtEnum = ArtEnum::VariantMatch;
    pub const BUST: ArtEnum = ArtEnum::Bust;
    pub const STAGE: ArtEnum = ArtEnum::Stage;
    pub const VOID: ArtEnum = ArtEnum::Void;
    pub const SKULL_AND_ROSES: ArtEnum = ArtEnum::SkullAndRoses;
    pub const WITHER: ArtEnum = ArtEnum::Wither;
    pub const FIGHTERS: ArtEnum = ArtEnum::Fighters;
    pub const POINTER: ArtEnum = ArtEnum::Pointer;
    pub const PIGSCENE: ArtEnum = ArtEnum::Pigscene;
    pub const BURNING_SKULL: ArtEnum = ArtEnum::BurningSkull;
    pub const SKELETON: ArtEnum = ArtEnum::Skeleton;
    pub const DONKEY_KONG: ArtEnum = ArtEnum::DonkeyKong;
    pub const EARTH: ArtEnum = ArtEnum::Earth;
    pub const WIND: ArtEnum = ArtEnum::Wind;
    pub const WATER: ArtEnum = ArtEnum::Water;
    pub const FIRE: ArtEnum = ArtEnum::Fire;
    pub fn from_string(str: String) -> std::option::Option<ArtEnum> {
        match str.as_str() {
            "KEBAB" => Some(ArtEnum::Kebab),
            "AZTEC" => Some(ArtEnum::Aztec),
            "ALBAN" => Some(ArtEnum::Alban),
            "AZTEC2" => Some(ArtEnum::Aztec2),
            "BOMB" => Some(ArtEnum::Bomb),
            "PLANT" => Some(ArtEnum::Plant),
            "WASTELAND" => Some(ArtEnum::Wasteland),
            "POOL" => Some(ArtEnum::Pool),
            "COURBET" => Some(ArtEnum::Courbet),
            "SEA" => Some(ArtEnum::Sea),
            "SUNSET" => Some(ArtEnum::Sunset),
            "CREEBET" => Some(ArtEnum::Creebet),
            "WANDERER" => Some(ArtEnum::Wanderer),
            "GRAHAM" => Some(ArtEnum::Graham),
            "MATCH" => Some(ArtEnum::VariantMatch),
            "BUST" => Some(ArtEnum::Bust),
            "STAGE" => Some(ArtEnum::Stage),
            "VOID" => Some(ArtEnum::Void),
            "SKULL_AND_ROSES" => Some(ArtEnum::SkullAndRoses),
            "WITHER" => Some(ArtEnum::Wither),
            "FIGHTERS" => Some(ArtEnum::Fighters),
            "POINTER" => Some(ArtEnum::Pointer),
            "PIGSCENE" => Some(ArtEnum::Pigscene),
            "BURNING_SKULL" => Some(ArtEnum::BurningSkull),
            "SKELETON" => Some(ArtEnum::Skeleton),
            "DONKEY_KONG" => Some(ArtEnum::DonkeyKong),
            "EARTH" => Some(ArtEnum::Earth),
            "WIND" => Some(ArtEnum::Wind),
            "WATER" => Some(ArtEnum::Water),
            "FIRE" => Some(ArtEnum::Fire),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Art<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Art");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Art;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Art::from_raw(
            &jni,
            raw_obj,
            Art::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a group of sounds for blocks that are played when various actions happen (ie stepping, breaking, hitting, etc).
///
/// This is a representation of an abstract class.
pub struct SoundGroup<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for SoundGroup<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for SoundGroup<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate SoundGroup from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/SoundGroup")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a SoundGroup object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> SoundGroup<'mc> {
    //

    pub fn pitch(&self) -> Result<f32, Box<dyn std::error::Error>> {
        let sig = String::from("()F");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getPitch", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.f()?)
    }
    //

    pub fn volume(&self) -> Result<f32, Box<dyn std::error::Error>> {
        let sig = String::from("()F");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getVolume", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.f()?)
    }
    //

    pub fn break_sound(&self) -> Result<crate::Sound<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Sound;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getBreakSound", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Sound::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Sound::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn step_sound(&self) -> Result<crate::Sound<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Sound;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getStepSound", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Sound::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Sound::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn place_sound(&self) -> Result<crate::Sound<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Sound;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getPlaceSound", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Sound::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Sound::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn hit_sound(&self) -> Result<crate::Sound<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Sound;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getHitSound", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Sound::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Sound::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn fall_sound(&self) -> Result<crate::Sound<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Sound;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getFallSound", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Sound::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Sound::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// GameRules dictate certain behavior within Minecraft itself
///
/// For more information please visit the <a href="https://minecraft.gamepedia.com/Commands/gamerule">Minecraft Wiki</a>
pub struct GameRule<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for GameRule<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for GameRule<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate GameRule from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/GameRule")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a GameRule object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> GameRule<'mc> {
    //

    pub fn name(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getName", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    //

    pub fn get_type(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getType", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn get_by_name(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<crate::GameRule<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/GameRule;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("org/bukkit/GameRule");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getByName",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::GameRule::from_raw(&jni, obj)
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for GameRule<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling GameRule.toString: {}", err),
        }
    }
}

/// Represents a static, thread-safe snapshot of chunk of blocks.
/// <p>Purpose is to allow clean, efficient copy of a chunk data to be made, and then handed off for processing in another thread (e.g. map rendering)</p>
///
/// This is a representation of an abstract class.
pub struct ChunkSnapshot<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for ChunkSnapshot<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for ChunkSnapshot<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate ChunkSnapshot from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/ChunkSnapshot")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ChunkSnapshot object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> ChunkSnapshot<'mc> {
    //

    pub fn capture_full_time(&self) -> Result<i64, Box<dyn std::error::Error>> {
        let sig = String::from("()J");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getCaptureFullTime",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.j()?)
    }
    //@Deprecated

    #[deprecated]
    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Magic value
    /// </div>
    /// Magic value
    ///
    /// Get block data for block at corresponding coordinate in the chunk
    pub fn get_data(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(III)I");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getData",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //@NotNull

    /// Get block data for block at corresponding coordinate in the chunk
    pub fn get_block_data(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(III)Lorg/bukkit/block/data/BlockData;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockData",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::block::data::BlockData::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn x(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getX", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn z(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getZ", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Gets the highest non-air coordinate at the given coordinates
    pub fn get_highest_block_yat(
        &self,
        arg0: i32,
        arg1: i32,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(II)I");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getHighestBlockYAt",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //@NotNull

    /// Get biome at given coordinates
    pub fn get_biome(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::block::Biome<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/block/Biome;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBiome", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::block::Biome::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::block::Biome::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    /// Get light level emitted by block at corresponding coordinate in the chunk
    pub fn get_block_emitted_light(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(III)I");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockEmittedLight",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn world_name(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getWorldName", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //@NotNull

    /// Get block type for block at corresponding coordinate in the chunk
    pub fn get_block_type(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<crate::Material<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(III)Lorg/bukkit/Material;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockType",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Material::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Material::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    /// Get sky light level for block at corresponding coordinate in the chunk
    pub fn get_block_sky_light(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(III)I");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockSkyLight",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Get raw biome temperature at given coordinates
    pub fn get_raw_biome_temperature(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<f64, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")D";
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getRawBiomeTemperature",
            sig.as_str(),
            args,
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    /// Test if section is empty
    pub fn is_section_empty(&self, arg0: i32) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(I)Z");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isSectionEmpty",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn contains(
        &self,
        arg0: std::option::Option<impl Into<crate::block::data::BlockData<'mc>>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/block/data/BlockData;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Z";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "contains", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
}

pub struct MusicInstrument<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for MusicInstrument<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for MusicInstrument<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate MusicInstrument from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/MusicInstrument")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a MusicInstrument object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> MusicInstrument<'mc> {
    //

    pub fn get_by_key(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::MusicInstrument<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/MusicInstrument;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/MusicInstrument");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getByKey",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::MusicInstrument::from_raw(&jni, obj)
    }
    //

    pub fn values(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<Vec<crate::MusicInstrument<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Collection;");
        let cls = jni.find_class("java/util/Collection");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "values", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut col = blackboxmc_java::JavaCollection::from_raw(&jni, res.l()?)?;
        let mut iter = blackboxmc_java::JavaIterator::from_raw(&jni, col.iterator()?)?;
        while iter.has_next()? {
            let obj = iter.next()?;
            new_vec.push(crate::MusicInstrument::from_raw(&jni, obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn key(&self) -> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/NamespacedKey;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getKey", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::NamespacedKey::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for MusicInstrument<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling MusicInstrument.toString: {}", err),
        }
    }
}

impl<'mc> Into<crate::Keyed<'mc>> for MusicInstrument<'mc> {
    fn into(self) -> crate::Keyed<'mc> {
        crate::Keyed::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting MusicInstrument into crate::Keyed")
    }
}
/// Represents an object with a text representation that can be translated by the Minecraft client.
///
/// This is a representation of an abstract class.
pub struct Translatable<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Translatable<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Translatable<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Translatable from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Translatable")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Translatable object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Translatable<'mc> {
    //

    pub fn translation_key(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getTranslationKey",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
}
/// Represents a single firework effect.
pub struct FireworkEffect<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);
pub struct FireworkEffectBuilder<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for FireworkEffectBuilder<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for FireworkEffectBuilder<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate FireworkEffectBuilder from null object."
            )
            .into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/FireworkEffect$Builder")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a FireworkEffectBuilder object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> FireworkEffectBuilder<'mc> {
    //@NotNull

    pub fn trail(
        &self,
        arg0: bool,
    ) -> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Z)Lorg/bukkit/FireworkEffect$Builder;");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "trail",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::FireworkEffectBuilder::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn build(&self) -> Result<crate::FireworkEffect<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/FireworkEffect;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "build", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::FireworkEffect::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn with_trail(
        &self,
    ) -> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/FireworkEffect$Builder;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "withTrail", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::FireworkEffectBuilder::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn with(
        &self,
        arg0: impl Into<crate::FireworkEffectType<'mc>>,
    ) -> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let sig =
            String::from("(Lorg/bukkit/FireworkEffect$Type;)Lorg/bukkit/FireworkEffect$Builder;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "with",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::FireworkEffectBuilder::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    pub fn flicker(
        &self,
        arg0: bool,
    ) -> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Z)Lorg/bukkit/FireworkEffect$Builder;");
        // -2
        let val_1 = jni::objects::JValueGen::Bool(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "flicker",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::FireworkEffectBuilder::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn with_flicker(
        &self,
    ) -> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/FireworkEffect$Builder;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "withFlicker", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::FireworkEffectBuilder::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn with_color_with_iterable(
        &self,
        arg0: std::option::Option<Vec<impl Into<crate::Color<'mc>>>>,
    ) -> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += ")Lorg/bukkit/FireworkEffect$Builder;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "withColor", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::FireworkEffectBuilder::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn with_color_with_color(
        &self,
        arg0: std::option::Option<impl Into<crate::Color<'mc>>>,
    ) -> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/Color;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/FireworkEffect$Builder;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "withColor", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::FireworkEffectBuilder::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn with_fade_with_iterable(
        &self,
        arg0: std::option::Option<Vec<impl Into<crate::Color<'mc>>>>,
    ) -> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += ")Lorg/bukkit/FireworkEffect$Builder;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "withFade", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::FireworkEffectBuilder::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn with_fade_with_color(
        &self,
        arg0: std::option::Option<impl Into<crate::Color<'mc>>>,
    ) -> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/Color;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/FireworkEffect$Builder;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "withFade", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::FireworkEffectBuilder::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for FireworkEffectBuilder<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling FireworkEffectBuilder.toString: {}", err),
        }
    }
}

#[derive(PartialEq, Eq)]
pub enum FireworkEffectTypeEnum {
    Ball,
    BallLarge,
    Star,
    Burst,
    Creeper,
}
impl std::fmt::Display for FireworkEffectTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            FireworkEffectTypeEnum::Ball => f.write_str("BALL"),
            FireworkEffectTypeEnum::BallLarge => f.write_str("BALL_LARGE"),
            FireworkEffectTypeEnum::Star => f.write_str("STAR"),
            FireworkEffectTypeEnum::Burst => f.write_str("BURST"),
            FireworkEffectTypeEnum::Creeper => f.write_str("CREEPER"),
        }
    }
}
impl<'mc> std::fmt::Display for FireworkEffectType<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct FireworkEffectType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub FireworkEffectTypeEnum,
);
impl<'mc> std::ops::Deref for FireworkEffectType<'mc> {
    type Target = FireworkEffectTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for FireworkEffectType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for FireworkEffectType<'mc> {
    type Enum = FireworkEffectTypeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate FireworkEffectType from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/FireworkEffect$Type")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a FireworkEffectType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> FireworkEffectType<'mc> {
    pub const BALL: FireworkEffectTypeEnum = FireworkEffectTypeEnum::Ball;
    pub const BALL_LARGE: FireworkEffectTypeEnum = FireworkEffectTypeEnum::BallLarge;
    pub const STAR: FireworkEffectTypeEnum = FireworkEffectTypeEnum::Star;
    pub const BURST: FireworkEffectTypeEnum = FireworkEffectTypeEnum::Burst;
    pub const CREEPER: FireworkEffectTypeEnum = FireworkEffectTypeEnum::Creeper;
    pub fn from_string(str: String) -> std::option::Option<FireworkEffectTypeEnum> {
        match str.as_str() {
            "BALL" => Some(FireworkEffectTypeEnum::Ball),
            "BALL_LARGE" => Some(FireworkEffectTypeEnum::BallLarge),
            "STAR" => Some(FireworkEffectTypeEnum::Star),
            "BURST" => Some(FireworkEffectTypeEnum::Burst),
            "CREEPER" => Some(FireworkEffectTypeEnum::Creeper),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<FireworkEffectType<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/FireworkEffect$Type");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/FireworkEffect$Type;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        FireworkEffectType::from_raw(
            &jni,
            raw_obj,
            FireworkEffectType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }

    //
}

impl<'mc> JNIRaw<'mc> for FireworkEffect<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for FireworkEffect<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate FireworkEffect from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/FireworkEffect")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a FireworkEffect object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> FireworkEffect<'mc> {
    //

    pub fn serialize(&self) -> Result<blackboxmc_java::JavaMap<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Map;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "serialize", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaMap::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn deserialize(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<blackboxmc_java::JavaMap<'mc>>,
    ) -> Result<
        crate::configuration::serialization::ConfigurationSerializable<'mc>,
        Box<dyn std::error::Error>,
    > {
        let sig = String::from(
            "(Ljava/util/Map;)Lorg/bukkit/configuration/serialization/ConfigurationSerializable;",
        );
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls =
            jni.find_class("org/bukkit/configuration/serialization/ConfigurationSerializable");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "deserialize",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::configuration::serialization::ConfigurationSerializable::from_raw(&jni, obj)
    }
    //

    pub fn has_flicker(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "hasFlicker", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn has_trail(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hasTrail", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn colors(&self) -> Result<Vec<crate::Color<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getColors", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.0, res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::Color::from_raw(&self.0, obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn fade_colors(&self) -> Result<Vec<crate::Color<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getFadeColors", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.0, res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::Color::from_raw(&self.0, obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn builder(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::FireworkEffectBuilder<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/FireworkEffect$Builder;");
        let cls = jni.find_class("org/bukkit/FireworkEffect$Builder");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "builder", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::FireworkEffectBuilder::from_raw(&jni, obj)
    }
    //

    pub fn get_type(&self) -> Result<crate::FireworkEffectType<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/FireworkEffect$Type;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getType", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant = self
            .0
            .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .0
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::FireworkEffectType::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::FireworkEffectType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for FireworkEffect<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling FireworkEffect.toString: {}", err),
        }
    }
}

impl<'mc> Into<crate::configuration::serialization::ConfigurationSerializable<'mc>>
    for FireworkEffect<'mc>
{
    fn into(self) -> crate::configuration::serialization::ConfigurationSerializable<'mc> {
        crate::configuration::serialization::ConfigurationSerializable::from_raw(&self.jni_ref(), self.1).expect("Error converting FireworkEffect into crate::configuration::serialization::ConfigurationSerializable")
    }
}
#[derive(PartialEq, Eq)]
pub enum RaidStatusEnum {
    Ongoing,
    Victory,
    Loss,
    Stopped,
}
impl std::fmt::Display for RaidStatusEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            RaidStatusEnum::Ongoing => f.write_str("ONGOING"),
            RaidStatusEnum::Victory => f.write_str("VICTORY"),
            RaidStatusEnum::Loss => f.write_str("LOSS"),
            RaidStatusEnum::Stopped => f.write_str("STOPPED"),
        }
    }
}
impl<'mc> std::fmt::Display for RaidStatus<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct RaidStatus<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub RaidStatusEnum,
);
impl<'mc> std::ops::Deref for RaidStatus<'mc> {
    type Target = RaidStatusEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for RaidStatus<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for RaidStatus<'mc> {
    type Enum = RaidStatusEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate RaidStatus from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/RaidStatus")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a RaidStatus object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> RaidStatus<'mc> {
    pub const ONGOING: RaidStatusEnum = RaidStatusEnum::Ongoing;
    pub const VICTORY: RaidStatusEnum = RaidStatusEnum::Victory;
    pub const LOSS: RaidStatusEnum = RaidStatusEnum::Loss;
    pub const STOPPED: RaidStatusEnum = RaidStatusEnum::Stopped;
    pub fn from_string(str: String) -> std::option::Option<RaidStatusEnum> {
        match str.as_str() {
            "ONGOING" => Some(RaidStatusEnum::Ongoing),
            "VICTORY" => Some(RaidStatusEnum::Victory),
            "LOSS" => Some(RaidStatusEnum::Loss),
            "STOPPED" => Some(RaidStatusEnum::Stopped),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<RaidStatus<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/RaidStatus");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/RaidStatus;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        RaidStatus::from_raw(
            &jni,
            raw_obj,
            RaidStatus::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Indicates that the annotated element (class, method, field, etc.) is part of a <a href="https://minecraft.fandom.com/wiki/Experimental_Gameplay">minecraft experimental feature</a> and is subject to changes by Mojang.
/// <p><b>Note:</b> Elements marked with this annotation require the use of a datapack or otherwise non-standard feature to be enabled on the server.</p>
///
/// This is a representation of an abstract class.
pub struct MinecraftExperimental<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for MinecraftExperimental<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for MinecraftExperimental<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate MinecraftExperimental from null object."
            )
            .into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/MinecraftExperimental")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a MinecraftExperimental object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> MinecraftExperimental<'mc> {
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn annotation_type(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "annotationType", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
}

impl<'mc> std::string::ToString for MinecraftExperimental<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling MinecraftExperimental.toString: {}", err),
        }
    }
}

/// Represents an object which has a <a title="class in org.bukkit" href="NamespacedKey.html"><code>NamespacedKey</code></a> attached to it.
///
/// This is a representation of an abstract class.
pub struct Keyed<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Keyed<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Keyed<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Keyed from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Keyed")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Keyed object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Keyed<'mc> {
    //

    pub fn key(&self) -> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/NamespacedKey;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getKey", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::NamespacedKey::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}
#[derive(PartialEq, Eq)]
pub enum SoundSoundEnum {
    AmbientBasaltDeltasAdditions,
    AmbientBasaltDeltasLoop,
    AmbientBasaltDeltasMood,
    AmbientCave,
    AmbientCrimsonForestAdditions,
    AmbientCrimsonForestLoop,
    AmbientCrimsonForestMood,
    AmbientNetherWastesAdditions,
    AmbientNetherWastesLoop,
    AmbientNetherWastesMood,
    AmbientSoulSandValleyAdditions,
    AmbientSoulSandValleyLoop,
    AmbientSoulSandValleyMood,
    AmbientUnderwaterEnter,
    AmbientUnderwaterExit,
    AmbientUnderwaterLoop,
    AmbientUnderwaterLoopAdditions,
    AmbientUnderwaterLoopAdditionsRare,
    AmbientUnderwaterLoopAdditionsUltraRare,
    AmbientWarpedForestAdditions,
    AmbientWarpedForestLoop,
    AmbientWarpedForestMood,
    BlockAmethystBlockBreak,
    BlockAmethystBlockChime,
    BlockAmethystBlockFall,
    BlockAmethystBlockHit,
    BlockAmethystBlockPlace,
    BlockAmethystBlockResonate,
    BlockAmethystBlockStep,
    BlockAmethystClusterBreak,
    BlockAmethystClusterFall,
    BlockAmethystClusterHit,
    BlockAmethystClusterPlace,
    BlockAmethystClusterStep,
    BlockAncientDebrisBreak,
    BlockAncientDebrisFall,
    BlockAncientDebrisHit,
    BlockAncientDebrisPlace,
    BlockAncientDebrisStep,
    BlockAnvilBreak,
    BlockAnvilDestroy,
    BlockAnvilFall,
    BlockAnvilHit,
    BlockAnvilLand,
    BlockAnvilPlace,
    BlockAnvilStep,
    BlockAnvilUse,
    BlockAzaleaBreak,
    BlockAzaleaFall,
    BlockAzaleaHit,
    BlockAzaleaLeavesBreak,
    BlockAzaleaLeavesFall,
    BlockAzaleaLeavesHit,
    BlockAzaleaLeavesPlace,
    BlockAzaleaLeavesStep,
    BlockAzaleaPlace,
    BlockAzaleaStep,
    BlockBambooBreak,
    BlockBambooFall,
    BlockBambooHit,
    BlockBambooPlace,
    BlockBambooSaplingBreak,
    BlockBambooSaplingHit,
    BlockBambooSaplingPlace,
    BlockBambooStep,
    BlockBambooWoodBreak,
    BlockBambooWoodButtonClickOff,
    BlockBambooWoodButtonClickOn,
    BlockBambooWoodDoorClose,
    BlockBambooWoodDoorOpen,
    BlockBambooWoodFall,
    BlockBambooWoodFenceGateClose,
    BlockBambooWoodFenceGateOpen,
    BlockBambooWoodHangingSignBreak,
    BlockBambooWoodHangingSignFall,
    BlockBambooWoodHangingSignHit,
    BlockBambooWoodHangingSignPlace,
    BlockBambooWoodHangingSignStep,
    BlockBambooWoodHit,
    BlockBambooWoodPlace,
    BlockBambooWoodPressurePlateClickOff,
    BlockBambooWoodPressurePlateClickOn,
    BlockBambooWoodStep,
    BlockBambooWoodTrapdoorClose,
    BlockBambooWoodTrapdoorOpen,
    BlockBarrelClose,
    BlockBarrelOpen,
    BlockBasaltBreak,
    BlockBasaltFall,
    BlockBasaltHit,
    BlockBasaltPlace,
    BlockBasaltStep,
    BlockBeaconActivate,
    BlockBeaconAmbient,
    BlockBeaconDeactivate,
    BlockBeaconPowerSelect,
    BlockBeehiveDrip,
    BlockBeehiveEnter,
    BlockBeehiveExit,
    BlockBeehiveShear,
    BlockBeehiveWork,
    BlockBellResonate,
    BlockBellUse,
    BlockBigDripleafBreak,
    BlockBigDripleafFall,
    BlockBigDripleafHit,
    BlockBigDripleafPlace,
    BlockBigDripleafStep,
    BlockBigDripleafTiltDown,
    BlockBigDripleafTiltUp,
    BlockBlastfurnaceFireCrackle,
    BlockBoneBlockBreak,
    BlockBoneBlockFall,
    BlockBoneBlockHit,
    BlockBoneBlockPlace,
    BlockBoneBlockStep,
    BlockBrewingStandBrew,
    BlockBubbleColumnBubblePop,
    BlockBubbleColumnUpwardsAmbient,
    BlockBubbleColumnUpwardsInside,
    BlockBubbleColumnWhirlpoolAmbient,
    BlockBubbleColumnWhirlpoolInside,
    BlockCakeAddCandle,
    BlockCalciteBreak,
    BlockCalciteFall,
    BlockCalciteHit,
    BlockCalcitePlace,
    BlockCalciteStep,
    BlockCampfireCrackle,
    BlockCandleAmbient,
    BlockCandleBreak,
    BlockCandleExtinguish,
    BlockCandleFall,
    BlockCandleHit,
    BlockCandlePlace,
    BlockCandleStep,
    BlockCaveVinesBreak,
    BlockCaveVinesFall,
    BlockCaveVinesHit,
    BlockCaveVinesPickBerries,
    BlockCaveVinesPlace,
    BlockCaveVinesStep,
    BlockChainBreak,
    BlockChainFall,
    BlockChainHit,
    BlockChainPlace,
    BlockChainStep,
    BlockCherryLeavesBreak,
    BlockCherryLeavesFall,
    BlockCherryLeavesHit,
    BlockCherryLeavesPlace,
    BlockCherryLeavesStep,
    BlockCherrySaplingBreak,
    BlockCherrySaplingFall,
    BlockCherrySaplingHit,
    BlockCherrySaplingPlace,
    BlockCherrySaplingStep,
    BlockCherryWoodBreak,
    BlockCherryWoodButtonClickOff,
    BlockCherryWoodButtonClickOn,
    BlockCherryWoodDoorClose,
    BlockCherryWoodDoorOpen,
    BlockCherryWoodFall,
    BlockCherryWoodFenceGateClose,
    BlockCherryWoodFenceGateOpen,
    BlockCherryWoodHangingSignBreak,
    BlockCherryWoodHangingSignFall,
    BlockCherryWoodHangingSignHit,
    BlockCherryWoodHangingSignPlace,
    BlockCherryWoodHangingSignStep,
    BlockCherryWoodHit,
    BlockCherryWoodPlace,
    BlockCherryWoodPressurePlateClickOff,
    BlockCherryWoodPressurePlateClickOn,
    BlockCherryWoodStep,
    BlockCherryWoodTrapdoorClose,
    BlockCherryWoodTrapdoorOpen,
    BlockChestClose,
    BlockChestLocked,
    BlockChestOpen,
    BlockChiseledBookshelfBreak,
    BlockChiseledBookshelfFall,
    BlockChiseledBookshelfHit,
    BlockChiseledBookshelfInsert,
    BlockChiseledBookshelfInsertEnchanted,
    BlockChiseledBookshelfPickup,
    BlockChiseledBookshelfPickupEnchanted,
    BlockChiseledBookshelfPlace,
    BlockChiseledBookshelfStep,
    BlockChorusFlowerDeath,
    BlockChorusFlowerGrow,
    BlockComparatorClick,
    BlockComposterEmpty,
    BlockComposterFill,
    BlockComposterFillSuccess,
    BlockComposterReady,
    BlockConduitActivate,
    BlockConduitAmbient,
    BlockConduitAmbientShort,
    BlockConduitAttackTarget,
    BlockConduitDeactivate,
    BlockCopperBreak,
    BlockCopperFall,
    BlockCopperHit,
    BlockCopperPlace,
    BlockCopperStep,
    BlockCoralBlockBreak,
    BlockCoralBlockFall,
    BlockCoralBlockHit,
    BlockCoralBlockPlace,
    BlockCoralBlockStep,
    BlockCropBreak,
    BlockDecoratedPotBreak,
    BlockDecoratedPotFall,
    BlockDecoratedPotHit,
    BlockDecoratedPotPlace,
    BlockDecoratedPotShatter,
    BlockDecoratedPotStep,
    BlockDeepslateBreak,
    BlockDeepslateBricksBreak,
    BlockDeepslateBricksFall,
    BlockDeepslateBricksHit,
    BlockDeepslateBricksPlace,
    BlockDeepslateBricksStep,
    BlockDeepslateFall,
    BlockDeepslateHit,
    BlockDeepslatePlace,
    BlockDeepslateStep,
    BlockDeepslateTilesBreak,
    BlockDeepslateTilesFall,
    BlockDeepslateTilesHit,
    BlockDeepslateTilesPlace,
    BlockDeepslateTilesStep,
    BlockDispenserDispense,
    BlockDispenserFail,
    BlockDispenserLaunch,
    BlockDripstoneBlockBreak,
    BlockDripstoneBlockFall,
    BlockDripstoneBlockHit,
    BlockDripstoneBlockPlace,
    BlockDripstoneBlockStep,
    BlockEnchantmentTableUse,
    BlockEnderChestClose,
    BlockEnderChestOpen,
    BlockEndGatewaySpawn,
    BlockEndPortalFrameFill,
    BlockEndPortalSpawn,
    BlockFenceGateClose,
    BlockFenceGateOpen,
    BlockFireAmbient,
    BlockFireExtinguish,
    BlockFloweringAzaleaBreak,
    BlockFloweringAzaleaFall,
    BlockFloweringAzaleaHit,
    BlockFloweringAzaleaPlace,
    BlockFloweringAzaleaStep,
    BlockFroglightBreak,
    BlockFroglightFall,
    BlockFroglightHit,
    BlockFroglightPlace,
    BlockFroglightStep,
    BlockFrogspawnBreak,
    BlockFrogspawnFall,
    BlockFrogspawnHatch,
    BlockFrogspawnHit,
    BlockFrogspawnPlace,
    BlockFrogspawnStep,
    BlockFungusBreak,
    BlockFungusFall,
    BlockFungusHit,
    BlockFungusPlace,
    BlockFungusStep,
    BlockFurnaceFireCrackle,
    BlockGildedBlackstoneBreak,
    BlockGildedBlackstoneFall,
    BlockGildedBlackstoneHit,
    BlockGildedBlackstonePlace,
    BlockGildedBlackstoneStep,
    BlockGlassBreak,
    BlockGlassFall,
    BlockGlassHit,
    BlockGlassPlace,
    BlockGlassStep,
    BlockGrassBreak,
    BlockGrassFall,
    BlockGrassHit,
    BlockGrassPlace,
    BlockGrassStep,
    BlockGravelBreak,
    BlockGravelFall,
    BlockGravelHit,
    BlockGravelPlace,
    BlockGravelStep,
    BlockGrindstoneUse,
    BlockGrowingPlantCrop,
    BlockHangingRootsBreak,
    BlockHangingRootsFall,
    BlockHangingRootsHit,
    BlockHangingRootsPlace,
    BlockHangingRootsStep,
    BlockHangingSignBreak,
    BlockHangingSignFall,
    BlockHangingSignHit,
    BlockHangingSignPlace,
    BlockHangingSignStep,
    BlockHoneyBlockBreak,
    BlockHoneyBlockFall,
    BlockHoneyBlockHit,
    BlockHoneyBlockPlace,
    BlockHoneyBlockSlide,
    BlockHoneyBlockStep,
    BlockIronDoorClose,
    BlockIronDoorOpen,
    BlockIronTrapdoorClose,
    BlockIronTrapdoorOpen,
    BlockLadderBreak,
    BlockLadderFall,
    BlockLadderHit,
    BlockLadderPlace,
    BlockLadderStep,
    BlockLanternBreak,
    BlockLanternFall,
    BlockLanternHit,
    BlockLanternPlace,
    BlockLanternStep,
    BlockLargeAmethystBudBreak,
    BlockLargeAmethystBudPlace,
    BlockLavaAmbient,
    BlockLavaExtinguish,
    BlockLavaPop,
    BlockLeverClick,
    BlockLilyPadPlace,
    BlockLodestoneBreak,
    BlockLodestoneFall,
    BlockLodestoneHit,
    BlockLodestonePlace,
    BlockLodestoneStep,
    BlockMangroveRootsBreak,
    BlockMangroveRootsFall,
    BlockMangroveRootsHit,
    BlockMangroveRootsPlace,
    BlockMangroveRootsStep,
    BlockMediumAmethystBudBreak,
    BlockMediumAmethystBudPlace,
    BlockMetalBreak,
    BlockMetalFall,
    BlockMetalHit,
    BlockMetalPlace,
    BlockMetalPressurePlateClickOff,
    BlockMetalPressurePlateClickOn,
    BlockMetalStep,
    BlockMossBreak,
    BlockMossCarpetBreak,
    BlockMossCarpetFall,
    BlockMossCarpetHit,
    BlockMossCarpetPlace,
    BlockMossCarpetStep,
    BlockMossFall,
    BlockMossHit,
    BlockMossPlace,
    BlockMossStep,
    BlockMuddyMangroveRootsBreak,
    BlockMuddyMangroveRootsFall,
    BlockMuddyMangroveRootsHit,
    BlockMuddyMangroveRootsPlace,
    BlockMuddyMangroveRootsStep,
    BlockMudBreak,
    BlockMudBricksBreak,
    BlockMudBricksFall,
    BlockMudBricksHit,
    BlockMudBricksPlace,
    BlockMudBricksStep,
    BlockMudFall,
    BlockMudHit,
    BlockMudPlace,
    BlockMudStep,
    BlockNetheriteBlockBreak,
    BlockNetheriteBlockFall,
    BlockNetheriteBlockHit,
    BlockNetheriteBlockPlace,
    BlockNetheriteBlockStep,
    BlockNetherrackBreak,
    BlockNetherrackFall,
    BlockNetherrackHit,
    BlockNetherrackPlace,
    BlockNetherrackStep,
    BlockNetherBricksBreak,
    BlockNetherBricksFall,
    BlockNetherBricksHit,
    BlockNetherBricksPlace,
    BlockNetherBricksStep,
    BlockNetherGoldOreBreak,
    BlockNetherGoldOreFall,
    BlockNetherGoldOreHit,
    BlockNetherGoldOrePlace,
    BlockNetherGoldOreStep,
    BlockNetherOreBreak,
    BlockNetherOreFall,
    BlockNetherOreHit,
    BlockNetherOrePlace,
    BlockNetherOreStep,
    BlockNetherSproutsBreak,
    BlockNetherSproutsFall,
    BlockNetherSproutsHit,
    BlockNetherSproutsPlace,
    BlockNetherSproutsStep,
    BlockNetherWartBreak,
    BlockNetherWoodBreak,
    BlockNetherWoodButtonClickOff,
    BlockNetherWoodButtonClickOn,
    BlockNetherWoodDoorClose,
    BlockNetherWoodDoorOpen,
    BlockNetherWoodFall,
    BlockNetherWoodFenceGateClose,
    BlockNetherWoodFenceGateOpen,
    BlockNetherWoodHangingSignBreak,
    BlockNetherWoodHangingSignFall,
    BlockNetherWoodHangingSignHit,
    BlockNetherWoodHangingSignPlace,
    BlockNetherWoodHangingSignStep,
    BlockNetherWoodHit,
    BlockNetherWoodPlace,
    BlockNetherWoodPressurePlateClickOff,
    BlockNetherWoodPressurePlateClickOn,
    BlockNetherWoodStep,
    BlockNetherWoodTrapdoorClose,
    BlockNetherWoodTrapdoorOpen,
    BlockNoteBlockBanjo,
    BlockNoteBlockBasedrum,
    BlockNoteBlockBass,
    BlockNoteBlockBell,
    BlockNoteBlockBit,
    BlockNoteBlockChime,
    BlockNoteBlockCowBell,
    BlockNoteBlockDidgeridoo,
    BlockNoteBlockFlute,
    BlockNoteBlockGuitar,
    BlockNoteBlockHarp,
    BlockNoteBlockHat,
    BlockNoteBlockImitateCreeper,
    BlockNoteBlockImitateEnderDragon,
    BlockNoteBlockImitatePiglin,
    BlockNoteBlockImitateSkeleton,
    BlockNoteBlockImitateWitherSkeleton,
    BlockNoteBlockImitateZombie,
    BlockNoteBlockIronXylophone,
    BlockNoteBlockPling,
    BlockNoteBlockSnare,
    BlockNoteBlockXylophone,
    BlockNyliumBreak,
    BlockNyliumFall,
    BlockNyliumHit,
    BlockNyliumPlace,
    BlockNyliumStep,
    BlockPackedMudBreak,
    BlockPackedMudFall,
    BlockPackedMudHit,
    BlockPackedMudPlace,
    BlockPackedMudStep,
    BlockPinkPetalsBreak,
    BlockPinkPetalsFall,
    BlockPinkPetalsHit,
    BlockPinkPetalsPlace,
    BlockPinkPetalsStep,
    BlockPistonContract,
    BlockPistonExtend,
    BlockPointedDripstoneBreak,
    BlockPointedDripstoneDripLava,
    BlockPointedDripstoneDripLavaIntoCauldron,
    BlockPointedDripstoneDripWater,
    BlockPointedDripstoneDripWaterIntoCauldron,
    BlockPointedDripstoneFall,
    BlockPointedDripstoneHit,
    BlockPointedDripstoneLand,
    BlockPointedDripstonePlace,
    BlockPointedDripstoneStep,
    BlockPolishedDeepslateBreak,
    BlockPolishedDeepslateFall,
    BlockPolishedDeepslateHit,
    BlockPolishedDeepslatePlace,
    BlockPolishedDeepslateStep,
    BlockPortalAmbient,
    BlockPortalTravel,
    BlockPortalTrigger,
    BlockPowderSnowBreak,
    BlockPowderSnowFall,
    BlockPowderSnowHit,
    BlockPowderSnowPlace,
    BlockPowderSnowStep,
    BlockPumpkinCarve,
    BlockRedstoneTorchBurnout,
    BlockRespawnAnchorAmbient,
    BlockRespawnAnchorCharge,
    BlockRespawnAnchorDeplete,
    BlockRespawnAnchorSetSpawn,
    BlockRootedDirtBreak,
    BlockRootedDirtFall,
    BlockRootedDirtHit,
    BlockRootedDirtPlace,
    BlockRootedDirtStep,
    BlockRootsBreak,
    BlockRootsFall,
    BlockRootsHit,
    BlockRootsPlace,
    BlockRootsStep,
    BlockSandBreak,
    BlockSandFall,
    BlockSandHit,
    BlockSandPlace,
    BlockSandStep,
    BlockScaffoldingBreak,
    BlockScaffoldingFall,
    BlockScaffoldingHit,
    BlockScaffoldingPlace,
    BlockScaffoldingStep,
    BlockSculkBreak,
    BlockSculkCatalystBloom,
    BlockSculkCatalystBreak,
    BlockSculkCatalystFall,
    BlockSculkCatalystHit,
    BlockSculkCatalystPlace,
    BlockSculkCatalystStep,
    BlockSculkCharge,
    BlockSculkFall,
    BlockSculkHit,
    BlockSculkPlace,
    BlockSculkSensorBreak,
    BlockSculkSensorClicking,
    BlockSculkSensorClickingStop,
    BlockSculkSensorFall,
    BlockSculkSensorHit,
    BlockSculkSensorPlace,
    BlockSculkSensorStep,
    BlockSculkShriekerBreak,
    BlockSculkShriekerFall,
    BlockSculkShriekerHit,
    BlockSculkShriekerPlace,
    BlockSculkShriekerShriek,
    BlockSculkShriekerStep,
    BlockSculkSpread,
    BlockSculkStep,
    BlockSculkVeinBreak,
    BlockSculkVeinFall,
    BlockSculkVeinHit,
    BlockSculkVeinPlace,
    BlockSculkVeinStep,
    BlockShroomlightBreak,
    BlockShroomlightFall,
    BlockShroomlightHit,
    BlockShroomlightPlace,
    BlockShroomlightStep,
    BlockShulkerBoxClose,
    BlockShulkerBoxOpen,
    BlockSignWaxedInteractFail,
    BlockSlimeBlockBreak,
    BlockSlimeBlockFall,
    BlockSlimeBlockHit,
    BlockSlimeBlockPlace,
    BlockSlimeBlockStep,
    BlockSmallAmethystBudBreak,
    BlockSmallAmethystBudPlace,
    BlockSmallDripleafBreak,
    BlockSmallDripleafFall,
    BlockSmallDripleafHit,
    BlockSmallDripleafPlace,
    BlockSmallDripleafStep,
    BlockSmithingTableUse,
    BlockSmokerSmoke,
    BlockSnifferEggCrack,
    BlockSnifferEggHatch,
    BlockSnifferEggPlop,
    BlockSnowBreak,
    BlockSnowFall,
    BlockSnowHit,
    BlockSnowPlace,
    BlockSnowStep,
    BlockSoulSandBreak,
    BlockSoulSandFall,
    BlockSoulSandHit,
    BlockSoulSandPlace,
    BlockSoulSandStep,
    BlockSoulSoilBreak,
    BlockSoulSoilFall,
    BlockSoulSoilHit,
    BlockSoulSoilPlace,
    BlockSoulSoilStep,
    BlockSporeBlossomBreak,
    BlockSporeBlossomFall,
    BlockSporeBlossomHit,
    BlockSporeBlossomPlace,
    BlockSporeBlossomStep,
    BlockStemBreak,
    BlockStemFall,
    BlockStemHit,
    BlockStemPlace,
    BlockStemStep,
    BlockStoneBreak,
    BlockStoneButtonClickOff,
    BlockStoneButtonClickOn,
    BlockStoneFall,
    BlockStoneHit,
    BlockStonePlace,
    BlockStonePressurePlateClickOff,
    BlockStonePressurePlateClickOn,
    BlockStoneStep,
    BlockSuspiciousGravelBreak,
    BlockSuspiciousGravelFall,
    BlockSuspiciousGravelHit,
    BlockSuspiciousGravelPlace,
    BlockSuspiciousGravelStep,
    BlockSuspiciousSandBreak,
    BlockSuspiciousSandFall,
    BlockSuspiciousSandHit,
    BlockSuspiciousSandPlace,
    BlockSuspiciousSandStep,
    BlockSweetBerryBushBreak,
    BlockSweetBerryBushPickBerries,
    BlockSweetBerryBushPlace,
    BlockTripwireAttach,
    BlockTripwireClickOff,
    BlockTripwireClickOn,
    BlockTripwireDetach,
    BlockTuffBreak,
    BlockTuffFall,
    BlockTuffHit,
    BlockTuffPlace,
    BlockTuffStep,
    BlockVineBreak,
    BlockVineFall,
    BlockVineHit,
    BlockVinePlace,
    BlockVineStep,
    BlockWartBlockBreak,
    BlockWartBlockFall,
    BlockWartBlockHit,
    BlockWartBlockPlace,
    BlockWartBlockStep,
    BlockWaterAmbient,
    BlockWeepingVinesBreak,
    BlockWeepingVinesFall,
    BlockWeepingVinesHit,
    BlockWeepingVinesPlace,
    BlockWeepingVinesStep,
    BlockWetGrassBreak,
    BlockWetGrassFall,
    BlockWetGrassHit,
    BlockWetGrassPlace,
    BlockWetGrassStep,
    BlockWoodenButtonClickOff,
    BlockWoodenButtonClickOn,
    BlockWoodenDoorClose,
    BlockWoodenDoorOpen,
    BlockWoodenPressurePlateClickOff,
    BlockWoodenPressurePlateClickOn,
    BlockWoodenTrapdoorClose,
    BlockWoodenTrapdoorOpen,
    BlockWoodBreak,
    BlockWoodFall,
    BlockWoodHit,
    BlockWoodPlace,
    BlockWoodStep,
    BlockWoolBreak,
    BlockWoolFall,
    BlockWoolHit,
    BlockWoolPlace,
    BlockWoolStep,
    EnchantThornsHit,
    EntityAllayAmbientWithoutItem,
    EntityAllayAmbientWithItem,
    EntityAllayDeath,
    EntityAllayHurt,
    EntityAllayItemGiven,
    EntityAllayItemTaken,
    EntityAllayItemThrown,
    EntityArmorStandBreak,
    EntityArmorStandFall,
    EntityArmorStandHit,
    EntityArmorStandPlace,
    EntityArrowHit,
    EntityArrowHitPlayer,
    EntityArrowShoot,
    EntityAxolotlAttack,
    EntityAxolotlDeath,
    EntityAxolotlHurt,
    EntityAxolotlIdleAir,
    EntityAxolotlIdleWater,
    EntityAxolotlSplash,
    EntityAxolotlSwim,
    EntityBatAmbient,
    EntityBatDeath,
    EntityBatHurt,
    EntityBatLoop,
    EntityBatTakeoff,
    EntityBeeDeath,
    EntityBeeHurt,
    EntityBeeLoop,
    EntityBeeLoopAggressive,
    EntityBeePollinate,
    EntityBeeSting,
    EntityBlazeAmbient,
    EntityBlazeBurn,
    EntityBlazeDeath,
    EntityBlazeHurt,
    EntityBlazeShoot,
    EntityBoatPaddleLand,
    EntityBoatPaddleWater,
    EntityCamelAmbient,
    EntityCamelDash,
    EntityCamelDashReady,
    EntityCamelDeath,
    EntityCamelEat,
    EntityCamelHurt,
    EntityCamelSaddle,
    EntityCamelSit,
    EntityCamelStand,
    EntityCamelStep,
    EntityCamelStepSand,
    EntityCatAmbient,
    EntityCatBegForFood,
    EntityCatDeath,
    EntityCatEat,
    EntityCatHiss,
    EntityCatHurt,
    EntityCatPurr,
    EntityCatPurreow,
    EntityCatStrayAmbient,
    EntityChickenAmbient,
    EntityChickenDeath,
    EntityChickenEgg,
    EntityChickenHurt,
    EntityChickenStep,
    EntityCodAmbient,
    EntityCodDeath,
    EntityCodFlop,
    EntityCodHurt,
    EntityCowAmbient,
    EntityCowDeath,
    EntityCowHurt,
    EntityCowMilk,
    EntityCowStep,
    EntityCreeperDeath,
    EntityCreeperHurt,
    EntityCreeperPrimed,
    EntityDolphinAmbient,
    EntityDolphinAmbientWater,
    EntityDolphinAttack,
    EntityDolphinDeath,
    EntityDolphinEat,
    EntityDolphinHurt,
    EntityDolphinJump,
    EntityDolphinPlay,
    EntityDolphinSplash,
    EntityDolphinSwim,
    EntityDonkeyAmbient,
    EntityDonkeyAngry,
    EntityDonkeyChest,
    EntityDonkeyDeath,
    EntityDonkeyEat,
    EntityDonkeyHurt,
    EntityDragonFireballExplode,
    EntityDrownedAmbient,
    EntityDrownedAmbientWater,
    EntityDrownedDeath,
    EntityDrownedDeathWater,
    EntityDrownedHurt,
    EntityDrownedHurtWater,
    EntityDrownedShoot,
    EntityDrownedStep,
    EntityDrownedSwim,
    EntityEggThrow,
    EntityElderGuardianAmbient,
    EntityElderGuardianAmbientLand,
    EntityElderGuardianCurse,
    EntityElderGuardianDeath,
    EntityElderGuardianDeathLand,
    EntityElderGuardianFlop,
    EntityElderGuardianHurt,
    EntityElderGuardianHurtLand,
    EntityEndermanAmbient,
    EntityEndermanDeath,
    EntityEndermanHurt,
    EntityEndermanScream,
    EntityEndermanStare,
    EntityEndermanTeleport,
    EntityEndermiteAmbient,
    EntityEndermiteDeath,
    EntityEndermiteHurt,
    EntityEndermiteStep,
    EntityEnderDragonAmbient,
    EntityEnderDragonDeath,
    EntityEnderDragonFlap,
    EntityEnderDragonGrowl,
    EntityEnderDragonHurt,
    EntityEnderDragonShoot,
    EntityEnderEyeDeath,
    EntityEnderEyeLaunch,
    EntityEnderPearlThrow,
    EntityEvokerAmbient,
    EntityEvokerCastSpell,
    EntityEvokerCelebrate,
    EntityEvokerDeath,
    EntityEvokerFangsAttack,
    EntityEvokerHurt,
    EntityEvokerPrepareAttack,
    EntityEvokerPrepareSummon,
    EntityEvokerPrepareWololo,
    EntityExperienceBottleThrow,
    EntityExperienceOrbPickup,
    EntityFireworkRocketBlast,
    EntityFireworkRocketBlastFar,
    EntityFireworkRocketLargeBlast,
    EntityFireworkRocketLargeBlastFar,
    EntityFireworkRocketLaunch,
    EntityFireworkRocketShoot,
    EntityFireworkRocketTwinkle,
    EntityFireworkRocketTwinkleFar,
    EntityFishingBobberRetrieve,
    EntityFishingBobberSplash,
    EntityFishingBobberThrow,
    EntityFishSwim,
    EntityFoxAggro,
    EntityFoxAmbient,
    EntityFoxBite,
    EntityFoxDeath,
    EntityFoxEat,
    EntityFoxHurt,
    EntityFoxScreech,
    EntityFoxSleep,
    EntityFoxSniff,
    EntityFoxSpit,
    EntityFoxTeleport,
    EntityFrogAmbient,
    EntityFrogDeath,
    EntityFrogEat,
    EntityFrogHurt,
    EntityFrogLaySpawn,
    EntityFrogLongJump,
    EntityFrogStep,
    EntityFrogTongue,
    EntityGenericBigFall,
    EntityGenericBurn,
    EntityGenericDeath,
    EntityGenericDrink,
    EntityGenericEat,
    EntityGenericExplode,
    EntityGenericExtinguishFire,
    EntityGenericHurt,
    EntityGenericSmallFall,
    EntityGenericSplash,
    EntityGenericSwim,
    EntityGhastAmbient,
    EntityGhastDeath,
    EntityGhastHurt,
    EntityGhastScream,
    EntityGhastShoot,
    EntityGhastWarn,
    EntityGlowItemFrameAddItem,
    EntityGlowItemFrameBreak,
    EntityGlowItemFramePlace,
    EntityGlowItemFrameRemoveItem,
    EntityGlowItemFrameRotateItem,
    EntityGlowSquidAmbient,
    EntityGlowSquidDeath,
    EntityGlowSquidHurt,
    EntityGlowSquidSquirt,
    EntityGoatAmbient,
    EntityGoatDeath,
    EntityGoatEat,
    EntityGoatHornBreak,
    EntityGoatHurt,
    EntityGoatLongJump,
    EntityGoatMilk,
    EntityGoatPrepareRam,
    EntityGoatRamImpact,
    EntityGoatScreamingAmbient,
    EntityGoatScreamingDeath,
    EntityGoatScreamingEat,
    EntityGoatScreamingHornBreak,
    EntityGoatScreamingHurt,
    EntityGoatScreamingLongJump,
    EntityGoatScreamingMilk,
    EntityGoatScreamingPrepareRam,
    EntityGoatScreamingRamImpact,
    EntityGoatStep,
    EntityGuardianAmbient,
    EntityGuardianAmbientLand,
    EntityGuardianAttack,
    EntityGuardianDeath,
    EntityGuardianDeathLand,
    EntityGuardianFlop,
    EntityGuardianHurt,
    EntityGuardianHurtLand,
    EntityHoglinAmbient,
    EntityHoglinAngry,
    EntityHoglinAttack,
    EntityHoglinConvertedToZombified,
    EntityHoglinDeath,
    EntityHoglinHurt,
    EntityHoglinRetreat,
    EntityHoglinStep,
    EntityHorseAmbient,
    EntityHorseAngry,
    EntityHorseArmor,
    EntityHorseBreathe,
    EntityHorseDeath,
    EntityHorseEat,
    EntityHorseGallop,
    EntityHorseHurt,
    EntityHorseJump,
    EntityHorseLand,
    EntityHorseSaddle,
    EntityHorseStep,
    EntityHorseStepWood,
    EntityHostileBigFall,
    EntityHostileDeath,
    EntityHostileHurt,
    EntityHostileSmallFall,
    EntityHostileSplash,
    EntityHostileSwim,
    EntityHuskAmbient,
    EntityHuskConvertedToZombie,
    EntityHuskDeath,
    EntityHuskHurt,
    EntityHuskStep,
    EntityIllusionerAmbient,
    EntityIllusionerCastSpell,
    EntityIllusionerDeath,
    EntityIllusionerHurt,
    EntityIllusionerMirrorMove,
    EntityIllusionerPrepareBlindness,
    EntityIllusionerPrepareMirror,
    EntityIronGolemAttack,
    EntityIronGolemDamage,
    EntityIronGolemDeath,
    EntityIronGolemHurt,
    EntityIronGolemRepair,
    EntityIronGolemStep,
    EntityItemBreak,
    EntityItemFrameAddItem,
    EntityItemFrameBreak,
    EntityItemFramePlace,
    EntityItemFrameRemoveItem,
    EntityItemFrameRotateItem,
    EntityItemPickup,
    EntityLeashKnotBreak,
    EntityLeashKnotPlace,
    EntityLightningBoltImpact,
    EntityLightningBoltThunder,
    EntityLingeringPotionThrow,
    EntityLlamaAmbient,
    EntityLlamaAngry,
    EntityLlamaChest,
    EntityLlamaDeath,
    EntityLlamaEat,
    EntityLlamaHurt,
    EntityLlamaSpit,
    EntityLlamaStep,
    EntityLlamaSwag,
    EntityMagmaCubeDeath,
    EntityMagmaCubeDeathSmall,
    EntityMagmaCubeHurt,
    EntityMagmaCubeHurtSmall,
    EntityMagmaCubeJump,
    EntityMagmaCubeSquish,
    EntityMagmaCubeSquishSmall,
    EntityMinecartInside,
    EntityMinecartInsideUnderwater,
    EntityMinecartRiding,
    EntityMooshroomConvert,
    EntityMooshroomEat,
    EntityMooshroomMilk,
    EntityMooshroomShear,
    EntityMooshroomSuspiciousMilk,
    EntityMuleAmbient,
    EntityMuleAngry,
    EntityMuleChest,
    EntityMuleDeath,
    EntityMuleEat,
    EntityMuleHurt,
    EntityOcelotAmbient,
    EntityOcelotDeath,
    EntityOcelotHurt,
    EntityPaintingBreak,
    EntityPaintingPlace,
    EntityPandaAggressiveAmbient,
    EntityPandaAmbient,
    EntityPandaBite,
    EntityPandaCantBreed,
    EntityPandaDeath,
    EntityPandaEat,
    EntityPandaHurt,
    EntityPandaPreSneeze,
    EntityPandaSneeze,
    EntityPandaStep,
    EntityPandaWorriedAmbient,
    EntityParrotAmbient,
    EntityParrotDeath,
    EntityParrotEat,
    EntityParrotFly,
    EntityParrotHurt,
    EntityParrotImitateBlaze,
    EntityParrotImitateCreeper,
    EntityParrotImitateDrowned,
    EntityParrotImitateElderGuardian,
    EntityParrotImitateEndermite,
    EntityParrotImitateEnderDragon,
    EntityParrotImitateEvoker,
    EntityParrotImitateGhast,
    EntityParrotImitateGuardian,
    EntityParrotImitateHoglin,
    EntityParrotImitateHusk,
    EntityParrotImitateIllusioner,
    EntityParrotImitateMagmaCube,
    EntityParrotImitatePhantom,
    EntityParrotImitatePiglin,
    EntityParrotImitatePiglinBrute,
    EntityParrotImitatePillager,
    EntityParrotImitateRavager,
    EntityParrotImitateShulker,
    EntityParrotImitateSilverfish,
    EntityParrotImitateSkeleton,
    EntityParrotImitateSlime,
    EntityParrotImitateSpider,
    EntityParrotImitateStray,
    EntityParrotImitateVex,
    EntityParrotImitateVindicator,
    EntityParrotImitateWarden,
    EntityParrotImitateWitch,
    EntityParrotImitateWither,
    EntityParrotImitateWitherSkeleton,
    EntityParrotImitateZoglin,
    EntityParrotImitateZombie,
    EntityParrotImitateZombieVillager,
    EntityParrotStep,
    EntityPhantomAmbient,
    EntityPhantomBite,
    EntityPhantomDeath,
    EntityPhantomFlap,
    EntityPhantomHurt,
    EntityPhantomSwoop,
    EntityPiglinAdmiringItem,
    EntityPiglinAmbient,
    EntityPiglinAngry,
    EntityPiglinBruteAmbient,
    EntityPiglinBruteAngry,
    EntityPiglinBruteConvertedToZombified,
    EntityPiglinBruteDeath,
    EntityPiglinBruteHurt,
    EntityPiglinBruteStep,
    EntityPiglinCelebrate,
    EntityPiglinConvertedToZombified,
    EntityPiglinDeath,
    EntityPiglinHurt,
    EntityPiglinJealous,
    EntityPiglinRetreat,
    EntityPiglinStep,
    EntityPigAmbient,
    EntityPigDeath,
    EntityPigHurt,
    EntityPigSaddle,
    EntityPigStep,
    EntityPillagerAmbient,
    EntityPillagerCelebrate,
    EntityPillagerDeath,
    EntityPillagerHurt,
    EntityPlayerAttackCrit,
    EntityPlayerAttackKnockback,
    EntityPlayerAttackNodamage,
    EntityPlayerAttackStrong,
    EntityPlayerAttackSweep,
    EntityPlayerAttackWeak,
    EntityPlayerBigFall,
    EntityPlayerBreath,
    EntityPlayerBurp,
    EntityPlayerDeath,
    EntityPlayerHurt,
    EntityPlayerHurtDrown,
    EntityPlayerHurtFreeze,
    EntityPlayerHurtOnFire,
    EntityPlayerHurtSweetBerryBush,
    EntityPlayerLevelup,
    EntityPlayerSmallFall,
    EntityPlayerSplash,
    EntityPlayerSplashHighSpeed,
    EntityPlayerSwim,
    EntityPolarBearAmbient,
    EntityPolarBearAmbientBaby,
    EntityPolarBearDeath,
    EntityPolarBearHurt,
    EntityPolarBearStep,
    EntityPolarBearWarning,
    EntityPufferFishAmbient,
    EntityPufferFishBlowOut,
    EntityPufferFishBlowUp,
    EntityPufferFishDeath,
    EntityPufferFishFlop,
    EntityPufferFishHurt,
    EntityPufferFishSting,
    EntityRabbitAmbient,
    EntityRabbitAttack,
    EntityRabbitDeath,
    EntityRabbitHurt,
    EntityRabbitJump,
    EntityRavagerAmbient,
    EntityRavagerAttack,
    EntityRavagerCelebrate,
    EntityRavagerDeath,
    EntityRavagerHurt,
    EntityRavagerRoar,
    EntityRavagerStep,
    EntityRavagerStunned,
    EntitySalmonAmbient,
    EntitySalmonDeath,
    EntitySalmonFlop,
    EntitySalmonHurt,
    EntitySheepAmbient,
    EntitySheepDeath,
    EntitySheepHurt,
    EntitySheepShear,
    EntitySheepStep,
    EntityShulkerAmbient,
    EntityShulkerBulletHit,
    EntityShulkerBulletHurt,
    EntityShulkerClose,
    EntityShulkerDeath,
    EntityShulkerHurt,
    EntityShulkerHurtClosed,
    EntityShulkerOpen,
    EntityShulkerShoot,
    EntityShulkerTeleport,
    EntitySilverfishAmbient,
    EntitySilverfishDeath,
    EntitySilverfishHurt,
    EntitySilverfishStep,
    EntitySkeletonAmbient,
    EntitySkeletonConvertedToStray,
    EntitySkeletonDeath,
    EntitySkeletonHorseAmbient,
    EntitySkeletonHorseAmbientWater,
    EntitySkeletonHorseDeath,
    EntitySkeletonHorseGallopWater,
    EntitySkeletonHorseHurt,
    EntitySkeletonHorseJumpWater,
    EntitySkeletonHorseStepWater,
    EntitySkeletonHorseSwim,
    EntitySkeletonHurt,
    EntitySkeletonShoot,
    EntitySkeletonStep,
    EntitySlimeAttack,
    EntitySlimeDeath,
    EntitySlimeDeathSmall,
    EntitySlimeHurt,
    EntitySlimeHurtSmall,
    EntitySlimeJump,
    EntitySlimeJumpSmall,
    EntitySlimeSquish,
    EntitySlimeSquishSmall,
    EntitySnifferDeath,
    EntitySnifferDigging,
    EntitySnifferDiggingStop,
    EntitySnifferDropSeed,
    EntitySnifferEat,
    EntitySnifferHappy,
    EntitySnifferHurt,
    EntitySnifferIdle,
    EntitySnifferScenting,
    EntitySnifferSearching,
    EntitySnifferSniffing,
    EntitySnifferStep,
    EntitySnowballThrow,
    EntitySnowGolemAmbient,
    EntitySnowGolemDeath,
    EntitySnowGolemHurt,
    EntitySnowGolemShear,
    EntitySnowGolemShoot,
    EntitySpiderAmbient,
    EntitySpiderDeath,
    EntitySpiderHurt,
    EntitySpiderStep,
    EntitySplashPotionBreak,
    EntitySplashPotionThrow,
    EntitySquidAmbient,
    EntitySquidDeath,
    EntitySquidHurt,
    EntitySquidSquirt,
    EntityStrayAmbient,
    EntityStrayDeath,
    EntityStrayHurt,
    EntityStrayStep,
    EntityStriderAmbient,
    EntityStriderDeath,
    EntityStriderEat,
    EntityStriderHappy,
    EntityStriderHurt,
    EntityStriderRetreat,
    EntityStriderSaddle,
    EntityStriderStep,
    EntityStriderStepLava,
    EntityTadpoleDeath,
    EntityTadpoleFlop,
    EntityTadpoleGrowUp,
    EntityTadpoleHurt,
    EntityTntPrimed,
    EntityTropicalFishAmbient,
    EntityTropicalFishDeath,
    EntityTropicalFishFlop,
    EntityTropicalFishHurt,
    EntityTurtleAmbientLand,
    EntityTurtleDeath,
    EntityTurtleDeathBaby,
    EntityTurtleEggBreak,
    EntityTurtleEggCrack,
    EntityTurtleEggHatch,
    EntityTurtleHurt,
    EntityTurtleHurtBaby,
    EntityTurtleLayEgg,
    EntityTurtleShamble,
    EntityTurtleShambleBaby,
    EntityTurtleSwim,
    EntityVexAmbient,
    EntityVexCharge,
    EntityVexDeath,
    EntityVexHurt,
    EntityVillagerAmbient,
    EntityVillagerCelebrate,
    EntityVillagerDeath,
    EntityVillagerHurt,
    EntityVillagerNo,
    EntityVillagerTrade,
    EntityVillagerWorkArmorer,
    EntityVillagerWorkButcher,
    EntityVillagerWorkCartographer,
    EntityVillagerWorkCleric,
    EntityVillagerWorkFarmer,
    EntityVillagerWorkFisherman,
    EntityVillagerWorkFletcher,
    EntityVillagerWorkLeatherworker,
    EntityVillagerWorkLibrarian,
    EntityVillagerWorkMason,
    EntityVillagerWorkShepherd,
    EntityVillagerWorkToolsmith,
    EntityVillagerWorkWeaponsmith,
    EntityVillagerYes,
    EntityVindicatorAmbient,
    EntityVindicatorCelebrate,
    EntityVindicatorDeath,
    EntityVindicatorHurt,
    EntityWanderingTraderAmbient,
    EntityWanderingTraderDeath,
    EntityWanderingTraderDisappeared,
    EntityWanderingTraderDrinkMilk,
    EntityWanderingTraderDrinkPotion,
    EntityWanderingTraderHurt,
    EntityWanderingTraderNo,
    EntityWanderingTraderReappeared,
    EntityWanderingTraderTrade,
    EntityWanderingTraderYes,
    EntityWardenAgitated,
    EntityWardenAmbient,
    EntityWardenAngry,
    EntityWardenAttackImpact,
    EntityWardenDeath,
    EntityWardenDig,
    EntityWardenEmerge,
    EntityWardenHeartbeat,
    EntityWardenHurt,
    EntityWardenListening,
    EntityWardenListeningAngry,
    EntityWardenNearbyClose,
    EntityWardenNearbyCloser,
    EntityWardenNearbyClosest,
    EntityWardenRoar,
    EntityWardenSniff,
    EntityWardenSonicBoom,
    EntityWardenSonicCharge,
    EntityWardenStep,
    EntityWardenTendrilClicks,
    EntityWitchAmbient,
    EntityWitchCelebrate,
    EntityWitchDeath,
    EntityWitchDrink,
    EntityWitchHurt,
    EntityWitchThrow,
    EntityWitherAmbient,
    EntityWitherBreakBlock,
    EntityWitherDeath,
    EntityWitherHurt,
    EntityWitherShoot,
    EntityWitherSkeletonAmbient,
    EntityWitherSkeletonDeath,
    EntityWitherSkeletonHurt,
    EntityWitherSkeletonStep,
    EntityWitherSpawn,
    EntityWolfAmbient,
    EntityWolfDeath,
    EntityWolfGrowl,
    EntityWolfHowl,
    EntityWolfHurt,
    EntityWolfPant,
    EntityWolfShake,
    EntityWolfStep,
    EntityWolfWhine,
    EntityZoglinAmbient,
    EntityZoglinAngry,
    EntityZoglinAttack,
    EntityZoglinDeath,
    EntityZoglinHurt,
    EntityZoglinStep,
    EntityZombieAmbient,
    EntityZombieAttackIronDoor,
    EntityZombieAttackWoodenDoor,
    EntityZombieBreakWoodenDoor,
    EntityZombieConvertedToDrowned,
    EntityZombieDeath,
    EntityZombieDestroyEgg,
    EntityZombieHorseAmbient,
    EntityZombieHorseDeath,
    EntityZombieHorseHurt,
    EntityZombieHurt,
    EntityZombieInfect,
    EntityZombieStep,
    EntityZombieVillagerAmbient,
    EntityZombieVillagerConverted,
    EntityZombieVillagerCure,
    EntityZombieVillagerDeath,
    EntityZombieVillagerHurt,
    EntityZombieVillagerStep,
    EntityZombifiedPiglinAmbient,
    EntityZombifiedPiglinAngry,
    EntityZombifiedPiglinDeath,
    EntityZombifiedPiglinHurt,
    EventRaidHorn,
    IntentionallyEmpty,
    ItemArmorEquipChain,
    ItemArmorEquipDiamond,
    ItemArmorEquipElytra,
    ItemArmorEquipGeneric,
    ItemArmorEquipGold,
    ItemArmorEquipIron,
    ItemArmorEquipLeather,
    ItemArmorEquipNetherite,
    ItemArmorEquipTurtle,
    ItemAxeScrape,
    ItemAxeStrip,
    ItemAxeWaxOff,
    ItemBoneMealUse,
    ItemBookPageTurn,
    ItemBookPut,
    ItemBottleEmpty,
    ItemBottleFill,
    ItemBottleFillDragonbreath,
    ItemBrushBrushingGeneric,
    ItemBrushBrushingGravel,
    ItemBrushBrushingGravelComplete,
    ItemBrushBrushingSand,
    ItemBrushBrushingSandComplete,
    ItemBucketEmpty,
    ItemBucketEmptyAxolotl,
    ItemBucketEmptyFish,
    ItemBucketEmptyLava,
    ItemBucketEmptyPowderSnow,
    ItemBucketEmptyTadpole,
    ItemBucketFill,
    ItemBucketFillAxolotl,
    ItemBucketFillFish,
    ItemBucketFillLava,
    ItemBucketFillPowderSnow,
    ItemBucketFillTadpole,
    ItemBundleDropContents,
    ItemBundleInsert,
    ItemBundleRemoveOne,
    ItemChorusFruitTeleport,
    ItemCropPlant,
    ItemCrossbowHit,
    ItemCrossbowLoadingEnd,
    ItemCrossbowLoadingMiddle,
    ItemCrossbowLoadingStart,
    ItemCrossbowQuickCharge1,
    ItemCrossbowQuickCharge2,
    ItemCrossbowQuickCharge3,
    ItemCrossbowShoot,
    ItemDyeUse,
    ItemElytraFlying,
    ItemFirechargeUse,
    ItemFlintandsteelUse,
    ItemGlowInkSacUse,
    ItemGoatHornPlay,
    ItemGoatHornSound0,
    ItemGoatHornSound1,
    ItemGoatHornSound2,
    ItemGoatHornSound3,
    ItemGoatHornSound4,
    ItemGoatHornSound5,
    ItemGoatHornSound6,
    ItemGoatHornSound7,
    ItemHoeTill,
    ItemHoneycombWaxOn,
    ItemHoneyBottleDrink,
    ItemInkSacUse,
    ItemLodestoneCompassLock,
    ItemNetherWartPlant,
    ItemShieldBlock,
    ItemShieldBreak,
    ItemShovelFlatten,
    ItemSpyglassStopUsing,
    ItemSpyglassUse,
    ItemTotemUse,
    ItemTridentHit,
    ItemTridentHitGround,
    ItemTridentReturn,
    ItemTridentRiptide1,
    ItemTridentRiptide2,
    ItemTridentRiptide3,
    ItemTridentThrow,
    ItemTridentThunder,
    MusicCreative,
    MusicCredits,
    MusicDisc11,
    MusicDisc13,
    MusicDisc5,
    MusicDiscBlocks,
    MusicDiscCat,
    MusicDiscChirp,
    MusicDiscFar,
    MusicDiscMall,
    MusicDiscMellohi,
    MusicDiscOtherside,
    MusicDiscPigstep,
    MusicDiscRelic,
    MusicDiscStal,
    MusicDiscStrad,
    MusicDiscWait,
    MusicDiscWard,
    MusicDragon,
    MusicEnd,
    MusicGame,
    MusicMenu,
    MusicNetherBasaltDeltas,
    MusicNetherCrimsonForest,
    MusicNetherNetherWastes,
    MusicNetherSoulSandValley,
    MusicNetherWarpedForest,
    MusicOverworldBadlands,
    MusicOverworldBambooJungle,
    MusicOverworldCherryGrove,
    MusicOverworldDeepDark,
    MusicOverworldDesert,
    MusicOverworldDripstoneCaves,
    MusicOverworldFlowerForest,
    MusicOverworldForest,
    MusicOverworldFrozenPeaks,
    MusicOverworldGrove,
    MusicOverworldJaggedPeaks,
    MusicOverworldJungle,
    MusicOverworldLushCaves,
    MusicOverworldMeadow,
    MusicOverworldOldGrowthTaiga,
    MusicOverworldSnowySlopes,
    MusicOverworldSparseJungle,
    MusicOverworldStonyPeaks,
    MusicOverworldSwamp,
    MusicUnderWater,
    ParticleSoulEscape,
    UiButtonClick,
    UiCartographyTableTakeResult,
    UiLoomSelectPattern,
    UiLoomTakeResult,
    UiStonecutterSelectRecipe,
    UiStonecutterTakeResult,
    UiToastChallengeComplete,
    UiToastIn,
    UiToastOut,
    WeatherRain,
    WeatherRainAbove,
}
impl std::fmt::Display for SoundSoundEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            SoundSoundEnum::AmbientBasaltDeltasAdditions => {
                f.write_str("AMBIENT_BASALT_DELTAS_ADDITIONS")
            }
            SoundSoundEnum::AmbientBasaltDeltasLoop => f.write_str("AMBIENT_BASALT_DELTAS_LOOP"),
            SoundSoundEnum::AmbientBasaltDeltasMood => f.write_str("AMBIENT_BASALT_DELTAS_MOOD"),
            SoundSoundEnum::AmbientCave => f.write_str("AMBIENT_CAVE"),
            SoundSoundEnum::AmbientCrimsonForestAdditions => {
                f.write_str("AMBIENT_CRIMSON_FOREST_ADDITIONS")
            }
            SoundSoundEnum::AmbientCrimsonForestLoop => f.write_str("AMBIENT_CRIMSON_FOREST_LOOP"),
            SoundSoundEnum::AmbientCrimsonForestMood => f.write_str("AMBIENT_CRIMSON_FOREST_MOOD"),
            SoundSoundEnum::AmbientNetherWastesAdditions => {
                f.write_str("AMBIENT_NETHER_WASTES_ADDITIONS")
            }
            SoundSoundEnum::AmbientNetherWastesLoop => f.write_str("AMBIENT_NETHER_WASTES_LOOP"),
            SoundSoundEnum::AmbientNetherWastesMood => f.write_str("AMBIENT_NETHER_WASTES_MOOD"),
            SoundSoundEnum::AmbientSoulSandValleyAdditions => {
                f.write_str("AMBIENT_SOUL_SAND_VALLEY_ADDITIONS")
            }
            SoundSoundEnum::AmbientSoulSandValleyLoop => {
                f.write_str("AMBIENT_SOUL_SAND_VALLEY_LOOP")
            }
            SoundSoundEnum::AmbientSoulSandValleyMood => {
                f.write_str("AMBIENT_SOUL_SAND_VALLEY_MOOD")
            }
            SoundSoundEnum::AmbientUnderwaterEnter => f.write_str("AMBIENT_UNDERWATER_ENTER"),
            SoundSoundEnum::AmbientUnderwaterExit => f.write_str("AMBIENT_UNDERWATER_EXIT"),
            SoundSoundEnum::AmbientUnderwaterLoop => f.write_str("AMBIENT_UNDERWATER_LOOP"),
            SoundSoundEnum::AmbientUnderwaterLoopAdditions => {
                f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS")
            }
            SoundSoundEnum::AmbientUnderwaterLoopAdditionsRare => {
                f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE")
            }
            SoundSoundEnum::AmbientUnderwaterLoopAdditionsUltraRare => {
                f.write_str("AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE")
            }
            SoundSoundEnum::AmbientWarpedForestAdditions => {
                f.write_str("AMBIENT_WARPED_FOREST_ADDITIONS")
            }
            SoundSoundEnum::AmbientWarpedForestLoop => f.write_str("AMBIENT_WARPED_FOREST_LOOP"),
            SoundSoundEnum::AmbientWarpedForestMood => f.write_str("AMBIENT_WARPED_FOREST_MOOD"),
            SoundSoundEnum::BlockAmethystBlockBreak => f.write_str("BLOCK_AMETHYST_BLOCK_BREAK"),
            SoundSoundEnum::BlockAmethystBlockChime => f.write_str("BLOCK_AMETHYST_BLOCK_CHIME"),
            SoundSoundEnum::BlockAmethystBlockFall => f.write_str("BLOCK_AMETHYST_BLOCK_FALL"),
            SoundSoundEnum::BlockAmethystBlockHit => f.write_str("BLOCK_AMETHYST_BLOCK_HIT"),
            SoundSoundEnum::BlockAmethystBlockPlace => f.write_str("BLOCK_AMETHYST_BLOCK_PLACE"),
            SoundSoundEnum::BlockAmethystBlockResonate => {
                f.write_str("BLOCK_AMETHYST_BLOCK_RESONATE")
            }
            SoundSoundEnum::BlockAmethystBlockStep => f.write_str("BLOCK_AMETHYST_BLOCK_STEP"),
            SoundSoundEnum::BlockAmethystClusterBreak => {
                f.write_str("BLOCK_AMETHYST_CLUSTER_BREAK")
            }
            SoundSoundEnum::BlockAmethystClusterFall => f.write_str("BLOCK_AMETHYST_CLUSTER_FALL"),
            SoundSoundEnum::BlockAmethystClusterHit => f.write_str("BLOCK_AMETHYST_CLUSTER_HIT"),
            SoundSoundEnum::BlockAmethystClusterPlace => {
                f.write_str("BLOCK_AMETHYST_CLUSTER_PLACE")
            }
            SoundSoundEnum::BlockAmethystClusterStep => f.write_str("BLOCK_AMETHYST_CLUSTER_STEP"),
            SoundSoundEnum::BlockAncientDebrisBreak => f.write_str("BLOCK_ANCIENT_DEBRIS_BREAK"),
            SoundSoundEnum::BlockAncientDebrisFall => f.write_str("BLOCK_ANCIENT_DEBRIS_FALL"),
            SoundSoundEnum::BlockAncientDebrisHit => f.write_str("BLOCK_ANCIENT_DEBRIS_HIT"),
            SoundSoundEnum::BlockAncientDebrisPlace => f.write_str("BLOCK_ANCIENT_DEBRIS_PLACE"),
            SoundSoundEnum::BlockAncientDebrisStep => f.write_str("BLOCK_ANCIENT_DEBRIS_STEP"),
            SoundSoundEnum::BlockAnvilBreak => f.write_str("BLOCK_ANVIL_BREAK"),
            SoundSoundEnum::BlockAnvilDestroy => f.write_str("BLOCK_ANVIL_DESTROY"),
            SoundSoundEnum::BlockAnvilFall => f.write_str("BLOCK_ANVIL_FALL"),
            SoundSoundEnum::BlockAnvilHit => f.write_str("BLOCK_ANVIL_HIT"),
            SoundSoundEnum::BlockAnvilLand => f.write_str("BLOCK_ANVIL_LAND"),
            SoundSoundEnum::BlockAnvilPlace => f.write_str("BLOCK_ANVIL_PLACE"),
            SoundSoundEnum::BlockAnvilStep => f.write_str("BLOCK_ANVIL_STEP"),
            SoundSoundEnum::BlockAnvilUse => f.write_str("BLOCK_ANVIL_USE"),
            SoundSoundEnum::BlockAzaleaBreak => f.write_str("BLOCK_AZALEA_BREAK"),
            SoundSoundEnum::BlockAzaleaFall => f.write_str("BLOCK_AZALEA_FALL"),
            SoundSoundEnum::BlockAzaleaHit => f.write_str("BLOCK_AZALEA_HIT"),
            SoundSoundEnum::BlockAzaleaLeavesBreak => f.write_str("BLOCK_AZALEA_LEAVES_BREAK"),
            SoundSoundEnum::BlockAzaleaLeavesFall => f.write_str("BLOCK_AZALEA_LEAVES_FALL"),
            SoundSoundEnum::BlockAzaleaLeavesHit => f.write_str("BLOCK_AZALEA_LEAVES_HIT"),
            SoundSoundEnum::BlockAzaleaLeavesPlace => f.write_str("BLOCK_AZALEA_LEAVES_PLACE"),
            SoundSoundEnum::BlockAzaleaLeavesStep => f.write_str("BLOCK_AZALEA_LEAVES_STEP"),
            SoundSoundEnum::BlockAzaleaPlace => f.write_str("BLOCK_AZALEA_PLACE"),
            SoundSoundEnum::BlockAzaleaStep => f.write_str("BLOCK_AZALEA_STEP"),
            SoundSoundEnum::BlockBambooBreak => f.write_str("BLOCK_BAMBOO_BREAK"),
            SoundSoundEnum::BlockBambooFall => f.write_str("BLOCK_BAMBOO_FALL"),
            SoundSoundEnum::BlockBambooHit => f.write_str("BLOCK_BAMBOO_HIT"),
            SoundSoundEnum::BlockBambooPlace => f.write_str("BLOCK_BAMBOO_PLACE"),
            SoundSoundEnum::BlockBambooSaplingBreak => f.write_str("BLOCK_BAMBOO_SAPLING_BREAK"),
            SoundSoundEnum::BlockBambooSaplingHit => f.write_str("BLOCK_BAMBOO_SAPLING_HIT"),
            SoundSoundEnum::BlockBambooSaplingPlace => f.write_str("BLOCK_BAMBOO_SAPLING_PLACE"),
            SoundSoundEnum::BlockBambooStep => f.write_str("BLOCK_BAMBOO_STEP"),
            SoundSoundEnum::BlockBambooWoodBreak => f.write_str("BLOCK_BAMBOO_WOOD_BREAK"),
            SoundSoundEnum::BlockBambooWoodButtonClickOff => {
                f.write_str("BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF")
            }
            SoundSoundEnum::BlockBambooWoodButtonClickOn => {
                f.write_str("BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON")
            }
            SoundSoundEnum::BlockBambooWoodDoorClose => f.write_str("BLOCK_BAMBOO_WOOD_DOOR_CLOSE"),
            SoundSoundEnum::BlockBambooWoodDoorOpen => f.write_str("BLOCK_BAMBOO_WOOD_DOOR_OPEN"),
            SoundSoundEnum::BlockBambooWoodFall => f.write_str("BLOCK_BAMBOO_WOOD_FALL"),
            SoundSoundEnum::BlockBambooWoodFenceGateClose => {
                f.write_str("BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE")
            }
            SoundSoundEnum::BlockBambooWoodFenceGateOpen => {
                f.write_str("BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN")
            }
            SoundSoundEnum::BlockBambooWoodHangingSignBreak => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK")
            }
            SoundSoundEnum::BlockBambooWoodHangingSignFall => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL")
            }
            SoundSoundEnum::BlockBambooWoodHangingSignHit => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT")
            }
            SoundSoundEnum::BlockBambooWoodHangingSignPlace => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE")
            }
            SoundSoundEnum::BlockBambooWoodHangingSignStep => {
                f.write_str("BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP")
            }
            SoundSoundEnum::BlockBambooWoodHit => f.write_str("BLOCK_BAMBOO_WOOD_HIT"),
            SoundSoundEnum::BlockBambooWoodPlace => f.write_str("BLOCK_BAMBOO_WOOD_PLACE"),
            SoundSoundEnum::BlockBambooWoodPressurePlateClickOff => {
                f.write_str("BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundSoundEnum::BlockBambooWoodPressurePlateClickOn => {
                f.write_str("BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON")
            }
            SoundSoundEnum::BlockBambooWoodStep => f.write_str("BLOCK_BAMBOO_WOOD_STEP"),
            SoundSoundEnum::BlockBambooWoodTrapdoorClose => {
                f.write_str("BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE")
            }
            SoundSoundEnum::BlockBambooWoodTrapdoorOpen => {
                f.write_str("BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN")
            }
            SoundSoundEnum::BlockBarrelClose => f.write_str("BLOCK_BARREL_CLOSE"),
            SoundSoundEnum::BlockBarrelOpen => f.write_str("BLOCK_BARREL_OPEN"),
            SoundSoundEnum::BlockBasaltBreak => f.write_str("BLOCK_BASALT_BREAK"),
            SoundSoundEnum::BlockBasaltFall => f.write_str("BLOCK_BASALT_FALL"),
            SoundSoundEnum::BlockBasaltHit => f.write_str("BLOCK_BASALT_HIT"),
            SoundSoundEnum::BlockBasaltPlace => f.write_str("BLOCK_BASALT_PLACE"),
            SoundSoundEnum::BlockBasaltStep => f.write_str("BLOCK_BASALT_STEP"),
            SoundSoundEnum::BlockBeaconActivate => f.write_str("BLOCK_BEACON_ACTIVATE"),
            SoundSoundEnum::BlockBeaconAmbient => f.write_str("BLOCK_BEACON_AMBIENT"),
            SoundSoundEnum::BlockBeaconDeactivate => f.write_str("BLOCK_BEACON_DEACTIVATE"),
            SoundSoundEnum::BlockBeaconPowerSelect => f.write_str("BLOCK_BEACON_POWER_SELECT"),
            SoundSoundEnum::BlockBeehiveDrip => f.write_str("BLOCK_BEEHIVE_DRIP"),
            SoundSoundEnum::BlockBeehiveEnter => f.write_str("BLOCK_BEEHIVE_ENTER"),
            SoundSoundEnum::BlockBeehiveExit => f.write_str("BLOCK_BEEHIVE_EXIT"),
            SoundSoundEnum::BlockBeehiveShear => f.write_str("BLOCK_BEEHIVE_SHEAR"),
            SoundSoundEnum::BlockBeehiveWork => f.write_str("BLOCK_BEEHIVE_WORK"),
            SoundSoundEnum::BlockBellResonate => f.write_str("BLOCK_BELL_RESONATE"),
            SoundSoundEnum::BlockBellUse => f.write_str("BLOCK_BELL_USE"),
            SoundSoundEnum::BlockBigDripleafBreak => f.write_str("BLOCK_BIG_DRIPLEAF_BREAK"),
            SoundSoundEnum::BlockBigDripleafFall => f.write_str("BLOCK_BIG_DRIPLEAF_FALL"),
            SoundSoundEnum::BlockBigDripleafHit => f.write_str("BLOCK_BIG_DRIPLEAF_HIT"),
            SoundSoundEnum::BlockBigDripleafPlace => f.write_str("BLOCK_BIG_DRIPLEAF_PLACE"),
            SoundSoundEnum::BlockBigDripleafStep => f.write_str("BLOCK_BIG_DRIPLEAF_STEP"),
            SoundSoundEnum::BlockBigDripleafTiltDown => f.write_str("BLOCK_BIG_DRIPLEAF_TILT_DOWN"),
            SoundSoundEnum::BlockBigDripleafTiltUp => f.write_str("BLOCK_BIG_DRIPLEAF_TILT_UP"),
            SoundSoundEnum::BlockBlastfurnaceFireCrackle => {
                f.write_str("BLOCK_BLASTFURNACE_FIRE_CRACKLE")
            }
            SoundSoundEnum::BlockBoneBlockBreak => f.write_str("BLOCK_BONE_BLOCK_BREAK"),
            SoundSoundEnum::BlockBoneBlockFall => f.write_str("BLOCK_BONE_BLOCK_FALL"),
            SoundSoundEnum::BlockBoneBlockHit => f.write_str("BLOCK_BONE_BLOCK_HIT"),
            SoundSoundEnum::BlockBoneBlockPlace => f.write_str("BLOCK_BONE_BLOCK_PLACE"),
            SoundSoundEnum::BlockBoneBlockStep => f.write_str("BLOCK_BONE_BLOCK_STEP"),
            SoundSoundEnum::BlockBrewingStandBrew => f.write_str("BLOCK_BREWING_STAND_BREW"),
            SoundSoundEnum::BlockBubbleColumnBubblePop => {
                f.write_str("BLOCK_BUBBLE_COLUMN_BUBBLE_POP")
            }
            SoundSoundEnum::BlockBubbleColumnUpwardsAmbient => {
                f.write_str("BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT")
            }
            SoundSoundEnum::BlockBubbleColumnUpwardsInside => {
                f.write_str("BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE")
            }
            SoundSoundEnum::BlockBubbleColumnWhirlpoolAmbient => {
                f.write_str("BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT")
            }
            SoundSoundEnum::BlockBubbleColumnWhirlpoolInside => {
                f.write_str("BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE")
            }
            SoundSoundEnum::BlockCakeAddCandle => f.write_str("BLOCK_CAKE_ADD_CANDLE"),
            SoundSoundEnum::BlockCalciteBreak => f.write_str("BLOCK_CALCITE_BREAK"),
            SoundSoundEnum::BlockCalciteFall => f.write_str("BLOCK_CALCITE_FALL"),
            SoundSoundEnum::BlockCalciteHit => f.write_str("BLOCK_CALCITE_HIT"),
            SoundSoundEnum::BlockCalcitePlace => f.write_str("BLOCK_CALCITE_PLACE"),
            SoundSoundEnum::BlockCalciteStep => f.write_str("BLOCK_CALCITE_STEP"),
            SoundSoundEnum::BlockCampfireCrackle => f.write_str("BLOCK_CAMPFIRE_CRACKLE"),
            SoundSoundEnum::BlockCandleAmbient => f.write_str("BLOCK_CANDLE_AMBIENT"),
            SoundSoundEnum::BlockCandleBreak => f.write_str("BLOCK_CANDLE_BREAK"),
            SoundSoundEnum::BlockCandleExtinguish => f.write_str("BLOCK_CANDLE_EXTINGUISH"),
            SoundSoundEnum::BlockCandleFall => f.write_str("BLOCK_CANDLE_FALL"),
            SoundSoundEnum::BlockCandleHit => f.write_str("BLOCK_CANDLE_HIT"),
            SoundSoundEnum::BlockCandlePlace => f.write_str("BLOCK_CANDLE_PLACE"),
            SoundSoundEnum::BlockCandleStep => f.write_str("BLOCK_CANDLE_STEP"),
            SoundSoundEnum::BlockCaveVinesBreak => f.write_str("BLOCK_CAVE_VINES_BREAK"),
            SoundSoundEnum::BlockCaveVinesFall => f.write_str("BLOCK_CAVE_VINES_FALL"),
            SoundSoundEnum::BlockCaveVinesHit => f.write_str("BLOCK_CAVE_VINES_HIT"),
            SoundSoundEnum::BlockCaveVinesPickBerries => {
                f.write_str("BLOCK_CAVE_VINES_PICK_BERRIES")
            }
            SoundSoundEnum::BlockCaveVinesPlace => f.write_str("BLOCK_CAVE_VINES_PLACE"),
            SoundSoundEnum::BlockCaveVinesStep => f.write_str("BLOCK_CAVE_VINES_STEP"),
            SoundSoundEnum::BlockChainBreak => f.write_str("BLOCK_CHAIN_BREAK"),
            SoundSoundEnum::BlockChainFall => f.write_str("BLOCK_CHAIN_FALL"),
            SoundSoundEnum::BlockChainHit => f.write_str("BLOCK_CHAIN_HIT"),
            SoundSoundEnum::BlockChainPlace => f.write_str("BLOCK_CHAIN_PLACE"),
            SoundSoundEnum::BlockChainStep => f.write_str("BLOCK_CHAIN_STEP"),
            SoundSoundEnum::BlockCherryLeavesBreak => f.write_str("BLOCK_CHERRY_LEAVES_BREAK"),
            SoundSoundEnum::BlockCherryLeavesFall => f.write_str("BLOCK_CHERRY_LEAVES_FALL"),
            SoundSoundEnum::BlockCherryLeavesHit => f.write_str("BLOCK_CHERRY_LEAVES_HIT"),
            SoundSoundEnum::BlockCherryLeavesPlace => f.write_str("BLOCK_CHERRY_LEAVES_PLACE"),
            SoundSoundEnum::BlockCherryLeavesStep => f.write_str("BLOCK_CHERRY_LEAVES_STEP"),
            SoundSoundEnum::BlockCherrySaplingBreak => f.write_str("BLOCK_CHERRY_SAPLING_BREAK"),
            SoundSoundEnum::BlockCherrySaplingFall => f.write_str("BLOCK_CHERRY_SAPLING_FALL"),
            SoundSoundEnum::BlockCherrySaplingHit => f.write_str("BLOCK_CHERRY_SAPLING_HIT"),
            SoundSoundEnum::BlockCherrySaplingPlace => f.write_str("BLOCK_CHERRY_SAPLING_PLACE"),
            SoundSoundEnum::BlockCherrySaplingStep => f.write_str("BLOCK_CHERRY_SAPLING_STEP"),
            SoundSoundEnum::BlockCherryWoodBreak => f.write_str("BLOCK_CHERRY_WOOD_BREAK"),
            SoundSoundEnum::BlockCherryWoodButtonClickOff => {
                f.write_str("BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF")
            }
            SoundSoundEnum::BlockCherryWoodButtonClickOn => {
                f.write_str("BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON")
            }
            SoundSoundEnum::BlockCherryWoodDoorClose => f.write_str("BLOCK_CHERRY_WOOD_DOOR_CLOSE"),
            SoundSoundEnum::BlockCherryWoodDoorOpen => f.write_str("BLOCK_CHERRY_WOOD_DOOR_OPEN"),
            SoundSoundEnum::BlockCherryWoodFall => f.write_str("BLOCK_CHERRY_WOOD_FALL"),
            SoundSoundEnum::BlockCherryWoodFenceGateClose => {
                f.write_str("BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE")
            }
            SoundSoundEnum::BlockCherryWoodFenceGateOpen => {
                f.write_str("BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN")
            }
            SoundSoundEnum::BlockCherryWoodHangingSignBreak => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK")
            }
            SoundSoundEnum::BlockCherryWoodHangingSignFall => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL")
            }
            SoundSoundEnum::BlockCherryWoodHangingSignHit => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT")
            }
            SoundSoundEnum::BlockCherryWoodHangingSignPlace => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE")
            }
            SoundSoundEnum::BlockCherryWoodHangingSignStep => {
                f.write_str("BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP")
            }
            SoundSoundEnum::BlockCherryWoodHit => f.write_str("BLOCK_CHERRY_WOOD_HIT"),
            SoundSoundEnum::BlockCherryWoodPlace => f.write_str("BLOCK_CHERRY_WOOD_PLACE"),
            SoundSoundEnum::BlockCherryWoodPressurePlateClickOff => {
                f.write_str("BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundSoundEnum::BlockCherryWoodPressurePlateClickOn => {
                f.write_str("BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON")
            }
            SoundSoundEnum::BlockCherryWoodStep => f.write_str("BLOCK_CHERRY_WOOD_STEP"),
            SoundSoundEnum::BlockCherryWoodTrapdoorClose => {
                f.write_str("BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE")
            }
            SoundSoundEnum::BlockCherryWoodTrapdoorOpen => {
                f.write_str("BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN")
            }
            SoundSoundEnum::BlockChestClose => f.write_str("BLOCK_CHEST_CLOSE"),
            SoundSoundEnum::BlockChestLocked => f.write_str("BLOCK_CHEST_LOCKED"),
            SoundSoundEnum::BlockChestOpen => f.write_str("BLOCK_CHEST_OPEN"),
            SoundSoundEnum::BlockChiseledBookshelfBreak => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_BREAK")
            }
            SoundSoundEnum::BlockChiseledBookshelfFall => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_FALL")
            }
            SoundSoundEnum::BlockChiseledBookshelfHit => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_HIT")
            }
            SoundSoundEnum::BlockChiseledBookshelfInsert => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_INSERT")
            }
            SoundSoundEnum::BlockChiseledBookshelfInsertEnchanted => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED")
            }
            SoundSoundEnum::BlockChiseledBookshelfPickup => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_PICKUP")
            }
            SoundSoundEnum::BlockChiseledBookshelfPickupEnchanted => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED")
            }
            SoundSoundEnum::BlockChiseledBookshelfPlace => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_PLACE")
            }
            SoundSoundEnum::BlockChiseledBookshelfStep => {
                f.write_str("BLOCK_CHISELED_BOOKSHELF_STEP")
            }
            SoundSoundEnum::BlockChorusFlowerDeath => f.write_str("BLOCK_CHORUS_FLOWER_DEATH"),
            SoundSoundEnum::BlockChorusFlowerGrow => f.write_str("BLOCK_CHORUS_FLOWER_GROW"),
            SoundSoundEnum::BlockComparatorClick => f.write_str("BLOCK_COMPARATOR_CLICK"),
            SoundSoundEnum::BlockComposterEmpty => f.write_str("BLOCK_COMPOSTER_EMPTY"),
            SoundSoundEnum::BlockComposterFill => f.write_str("BLOCK_COMPOSTER_FILL"),
            SoundSoundEnum::BlockComposterFillSuccess => {
                f.write_str("BLOCK_COMPOSTER_FILL_SUCCESS")
            }
            SoundSoundEnum::BlockComposterReady => f.write_str("BLOCK_COMPOSTER_READY"),
            SoundSoundEnum::BlockConduitActivate => f.write_str("BLOCK_CONDUIT_ACTIVATE"),
            SoundSoundEnum::BlockConduitAmbient => f.write_str("BLOCK_CONDUIT_AMBIENT"),
            SoundSoundEnum::BlockConduitAmbientShort => f.write_str("BLOCK_CONDUIT_AMBIENT_SHORT"),
            SoundSoundEnum::BlockConduitAttackTarget => f.write_str("BLOCK_CONDUIT_ATTACK_TARGET"),
            SoundSoundEnum::BlockConduitDeactivate => f.write_str("BLOCK_CONDUIT_DEACTIVATE"),
            SoundSoundEnum::BlockCopperBreak => f.write_str("BLOCK_COPPER_BREAK"),
            SoundSoundEnum::BlockCopperFall => f.write_str("BLOCK_COPPER_FALL"),
            SoundSoundEnum::BlockCopperHit => f.write_str("BLOCK_COPPER_HIT"),
            SoundSoundEnum::BlockCopperPlace => f.write_str("BLOCK_COPPER_PLACE"),
            SoundSoundEnum::BlockCopperStep => f.write_str("BLOCK_COPPER_STEP"),
            SoundSoundEnum::BlockCoralBlockBreak => f.write_str("BLOCK_CORAL_BLOCK_BREAK"),
            SoundSoundEnum::BlockCoralBlockFall => f.write_str("BLOCK_CORAL_BLOCK_FALL"),
            SoundSoundEnum::BlockCoralBlockHit => f.write_str("BLOCK_CORAL_BLOCK_HIT"),
            SoundSoundEnum::BlockCoralBlockPlace => f.write_str("BLOCK_CORAL_BLOCK_PLACE"),
            SoundSoundEnum::BlockCoralBlockStep => f.write_str("BLOCK_CORAL_BLOCK_STEP"),
            SoundSoundEnum::BlockCropBreak => f.write_str("BLOCK_CROP_BREAK"),
            SoundSoundEnum::BlockDecoratedPotBreak => f.write_str("BLOCK_DECORATED_POT_BREAK"),
            SoundSoundEnum::BlockDecoratedPotFall => f.write_str("BLOCK_DECORATED_POT_FALL"),
            SoundSoundEnum::BlockDecoratedPotHit => f.write_str("BLOCK_DECORATED_POT_HIT"),
            SoundSoundEnum::BlockDecoratedPotPlace => f.write_str("BLOCK_DECORATED_POT_PLACE"),
            SoundSoundEnum::BlockDecoratedPotShatter => f.write_str("BLOCK_DECORATED_POT_SHATTER"),
            SoundSoundEnum::BlockDecoratedPotStep => f.write_str("BLOCK_DECORATED_POT_STEP"),
            SoundSoundEnum::BlockDeepslateBreak => f.write_str("BLOCK_DEEPSLATE_BREAK"),
            SoundSoundEnum::BlockDeepslateBricksBreak => {
                f.write_str("BLOCK_DEEPSLATE_BRICKS_BREAK")
            }
            SoundSoundEnum::BlockDeepslateBricksFall => f.write_str("BLOCK_DEEPSLATE_BRICKS_FALL"),
            SoundSoundEnum::BlockDeepslateBricksHit => f.write_str("BLOCK_DEEPSLATE_BRICKS_HIT"),
            SoundSoundEnum::BlockDeepslateBricksPlace => {
                f.write_str("BLOCK_DEEPSLATE_BRICKS_PLACE")
            }
            SoundSoundEnum::BlockDeepslateBricksStep => f.write_str("BLOCK_DEEPSLATE_BRICKS_STEP"),
            SoundSoundEnum::BlockDeepslateFall => f.write_str("BLOCK_DEEPSLATE_FALL"),
            SoundSoundEnum::BlockDeepslateHit => f.write_str("BLOCK_DEEPSLATE_HIT"),
            SoundSoundEnum::BlockDeepslatePlace => f.write_str("BLOCK_DEEPSLATE_PLACE"),
            SoundSoundEnum::BlockDeepslateStep => f.write_str("BLOCK_DEEPSLATE_STEP"),
            SoundSoundEnum::BlockDeepslateTilesBreak => f.write_str("BLOCK_DEEPSLATE_TILES_BREAK"),
            SoundSoundEnum::BlockDeepslateTilesFall => f.write_str("BLOCK_DEEPSLATE_TILES_FALL"),
            SoundSoundEnum::BlockDeepslateTilesHit => f.write_str("BLOCK_DEEPSLATE_TILES_HIT"),
            SoundSoundEnum::BlockDeepslateTilesPlace => f.write_str("BLOCK_DEEPSLATE_TILES_PLACE"),
            SoundSoundEnum::BlockDeepslateTilesStep => f.write_str("BLOCK_DEEPSLATE_TILES_STEP"),
            SoundSoundEnum::BlockDispenserDispense => f.write_str("BLOCK_DISPENSER_DISPENSE"),
            SoundSoundEnum::BlockDispenserFail => f.write_str("BLOCK_DISPENSER_FAIL"),
            SoundSoundEnum::BlockDispenserLaunch => f.write_str("BLOCK_DISPENSER_LAUNCH"),
            SoundSoundEnum::BlockDripstoneBlockBreak => f.write_str("BLOCK_DRIPSTONE_BLOCK_BREAK"),
            SoundSoundEnum::BlockDripstoneBlockFall => f.write_str("BLOCK_DRIPSTONE_BLOCK_FALL"),
            SoundSoundEnum::BlockDripstoneBlockHit => f.write_str("BLOCK_DRIPSTONE_BLOCK_HIT"),
            SoundSoundEnum::BlockDripstoneBlockPlace => f.write_str("BLOCK_DRIPSTONE_BLOCK_PLACE"),
            SoundSoundEnum::BlockDripstoneBlockStep => f.write_str("BLOCK_DRIPSTONE_BLOCK_STEP"),
            SoundSoundEnum::BlockEnchantmentTableUse => f.write_str("BLOCK_ENCHANTMENT_TABLE_USE"),
            SoundSoundEnum::BlockEnderChestClose => f.write_str("BLOCK_ENDER_CHEST_CLOSE"),
            SoundSoundEnum::BlockEnderChestOpen => f.write_str("BLOCK_ENDER_CHEST_OPEN"),
            SoundSoundEnum::BlockEndGatewaySpawn => f.write_str("BLOCK_END_GATEWAY_SPAWN"),
            SoundSoundEnum::BlockEndPortalFrameFill => f.write_str("BLOCK_END_PORTAL_FRAME_FILL"),
            SoundSoundEnum::BlockEndPortalSpawn => f.write_str("BLOCK_END_PORTAL_SPAWN"),
            SoundSoundEnum::BlockFenceGateClose => f.write_str("BLOCK_FENCE_GATE_CLOSE"),
            SoundSoundEnum::BlockFenceGateOpen => f.write_str("BLOCK_FENCE_GATE_OPEN"),
            SoundSoundEnum::BlockFireAmbient => f.write_str("BLOCK_FIRE_AMBIENT"),
            SoundSoundEnum::BlockFireExtinguish => f.write_str("BLOCK_FIRE_EXTINGUISH"),
            SoundSoundEnum::BlockFloweringAzaleaBreak => {
                f.write_str("BLOCK_FLOWERING_AZALEA_BREAK")
            }
            SoundSoundEnum::BlockFloweringAzaleaFall => f.write_str("BLOCK_FLOWERING_AZALEA_FALL"),
            SoundSoundEnum::BlockFloweringAzaleaHit => f.write_str("BLOCK_FLOWERING_AZALEA_HIT"),
            SoundSoundEnum::BlockFloweringAzaleaPlace => {
                f.write_str("BLOCK_FLOWERING_AZALEA_PLACE")
            }
            SoundSoundEnum::BlockFloweringAzaleaStep => f.write_str("BLOCK_FLOWERING_AZALEA_STEP"),
            SoundSoundEnum::BlockFroglightBreak => f.write_str("BLOCK_FROGLIGHT_BREAK"),
            SoundSoundEnum::BlockFroglightFall => f.write_str("BLOCK_FROGLIGHT_FALL"),
            SoundSoundEnum::BlockFroglightHit => f.write_str("BLOCK_FROGLIGHT_HIT"),
            SoundSoundEnum::BlockFroglightPlace => f.write_str("BLOCK_FROGLIGHT_PLACE"),
            SoundSoundEnum::BlockFroglightStep => f.write_str("BLOCK_FROGLIGHT_STEP"),
            SoundSoundEnum::BlockFrogspawnBreak => f.write_str("BLOCK_FROGSPAWN_BREAK"),
            SoundSoundEnum::BlockFrogspawnFall => f.write_str("BLOCK_FROGSPAWN_FALL"),
            SoundSoundEnum::BlockFrogspawnHatch => f.write_str("BLOCK_FROGSPAWN_HATCH"),
            SoundSoundEnum::BlockFrogspawnHit => f.write_str("BLOCK_FROGSPAWN_HIT"),
            SoundSoundEnum::BlockFrogspawnPlace => f.write_str("BLOCK_FROGSPAWN_PLACE"),
            SoundSoundEnum::BlockFrogspawnStep => f.write_str("BLOCK_FROGSPAWN_STEP"),
            SoundSoundEnum::BlockFungusBreak => f.write_str("BLOCK_FUNGUS_BREAK"),
            SoundSoundEnum::BlockFungusFall => f.write_str("BLOCK_FUNGUS_FALL"),
            SoundSoundEnum::BlockFungusHit => f.write_str("BLOCK_FUNGUS_HIT"),
            SoundSoundEnum::BlockFungusPlace => f.write_str("BLOCK_FUNGUS_PLACE"),
            SoundSoundEnum::BlockFungusStep => f.write_str("BLOCK_FUNGUS_STEP"),
            SoundSoundEnum::BlockFurnaceFireCrackle => f.write_str("BLOCK_FURNACE_FIRE_CRACKLE"),
            SoundSoundEnum::BlockGildedBlackstoneBreak => {
                f.write_str("BLOCK_GILDED_BLACKSTONE_BREAK")
            }
            SoundSoundEnum::BlockGildedBlackstoneFall => {
                f.write_str("BLOCK_GILDED_BLACKSTONE_FALL")
            }
            SoundSoundEnum::BlockGildedBlackstoneHit => f.write_str("BLOCK_GILDED_BLACKSTONE_HIT"),
            SoundSoundEnum::BlockGildedBlackstonePlace => {
                f.write_str("BLOCK_GILDED_BLACKSTONE_PLACE")
            }
            SoundSoundEnum::BlockGildedBlackstoneStep => {
                f.write_str("BLOCK_GILDED_BLACKSTONE_STEP")
            }
            SoundSoundEnum::BlockGlassBreak => f.write_str("BLOCK_GLASS_BREAK"),
            SoundSoundEnum::BlockGlassFall => f.write_str("BLOCK_GLASS_FALL"),
            SoundSoundEnum::BlockGlassHit => f.write_str("BLOCK_GLASS_HIT"),
            SoundSoundEnum::BlockGlassPlace => f.write_str("BLOCK_GLASS_PLACE"),
            SoundSoundEnum::BlockGlassStep => f.write_str("BLOCK_GLASS_STEP"),
            SoundSoundEnum::BlockGrassBreak => f.write_str("BLOCK_GRASS_BREAK"),
            SoundSoundEnum::BlockGrassFall => f.write_str("BLOCK_GRASS_FALL"),
            SoundSoundEnum::BlockGrassHit => f.write_str("BLOCK_GRASS_HIT"),
            SoundSoundEnum::BlockGrassPlace => f.write_str("BLOCK_GRASS_PLACE"),
            SoundSoundEnum::BlockGrassStep => f.write_str("BLOCK_GRASS_STEP"),
            SoundSoundEnum::BlockGravelBreak => f.write_str("BLOCK_GRAVEL_BREAK"),
            SoundSoundEnum::BlockGravelFall => f.write_str("BLOCK_GRAVEL_FALL"),
            SoundSoundEnum::BlockGravelHit => f.write_str("BLOCK_GRAVEL_HIT"),
            SoundSoundEnum::BlockGravelPlace => f.write_str("BLOCK_GRAVEL_PLACE"),
            SoundSoundEnum::BlockGravelStep => f.write_str("BLOCK_GRAVEL_STEP"),
            SoundSoundEnum::BlockGrindstoneUse => f.write_str("BLOCK_GRINDSTONE_USE"),
            SoundSoundEnum::BlockGrowingPlantCrop => f.write_str("BLOCK_GROWING_PLANT_CROP"),
            SoundSoundEnum::BlockHangingRootsBreak => f.write_str("BLOCK_HANGING_ROOTS_BREAK"),
            SoundSoundEnum::BlockHangingRootsFall => f.write_str("BLOCK_HANGING_ROOTS_FALL"),
            SoundSoundEnum::BlockHangingRootsHit => f.write_str("BLOCK_HANGING_ROOTS_HIT"),
            SoundSoundEnum::BlockHangingRootsPlace => f.write_str("BLOCK_HANGING_ROOTS_PLACE"),
            SoundSoundEnum::BlockHangingRootsStep => f.write_str("BLOCK_HANGING_ROOTS_STEP"),
            SoundSoundEnum::BlockHangingSignBreak => f.write_str("BLOCK_HANGING_SIGN_BREAK"),
            SoundSoundEnum::BlockHangingSignFall => f.write_str("BLOCK_HANGING_SIGN_FALL"),
            SoundSoundEnum::BlockHangingSignHit => f.write_str("BLOCK_HANGING_SIGN_HIT"),
            SoundSoundEnum::BlockHangingSignPlace => f.write_str("BLOCK_HANGING_SIGN_PLACE"),
            SoundSoundEnum::BlockHangingSignStep => f.write_str("BLOCK_HANGING_SIGN_STEP"),
            SoundSoundEnum::BlockHoneyBlockBreak => f.write_str("BLOCK_HONEY_BLOCK_BREAK"),
            SoundSoundEnum::BlockHoneyBlockFall => f.write_str("BLOCK_HONEY_BLOCK_FALL"),
            SoundSoundEnum::BlockHoneyBlockHit => f.write_str("BLOCK_HONEY_BLOCK_HIT"),
            SoundSoundEnum::BlockHoneyBlockPlace => f.write_str("BLOCK_HONEY_BLOCK_PLACE"),
            SoundSoundEnum::BlockHoneyBlockSlide => f.write_str("BLOCK_HONEY_BLOCK_SLIDE"),
            SoundSoundEnum::BlockHoneyBlockStep => f.write_str("BLOCK_HONEY_BLOCK_STEP"),
            SoundSoundEnum::BlockIronDoorClose => f.write_str("BLOCK_IRON_DOOR_CLOSE"),
            SoundSoundEnum::BlockIronDoorOpen => f.write_str("BLOCK_IRON_DOOR_OPEN"),
            SoundSoundEnum::BlockIronTrapdoorClose => f.write_str("BLOCK_IRON_TRAPDOOR_CLOSE"),
            SoundSoundEnum::BlockIronTrapdoorOpen => f.write_str("BLOCK_IRON_TRAPDOOR_OPEN"),
            SoundSoundEnum::BlockLadderBreak => f.write_str("BLOCK_LADDER_BREAK"),
            SoundSoundEnum::BlockLadderFall => f.write_str("BLOCK_LADDER_FALL"),
            SoundSoundEnum::BlockLadderHit => f.write_str("BLOCK_LADDER_HIT"),
            SoundSoundEnum::BlockLadderPlace => f.write_str("BLOCK_LADDER_PLACE"),
            SoundSoundEnum::BlockLadderStep => f.write_str("BLOCK_LADDER_STEP"),
            SoundSoundEnum::BlockLanternBreak => f.write_str("BLOCK_LANTERN_BREAK"),
            SoundSoundEnum::BlockLanternFall => f.write_str("BLOCK_LANTERN_FALL"),
            SoundSoundEnum::BlockLanternHit => f.write_str("BLOCK_LANTERN_HIT"),
            SoundSoundEnum::BlockLanternPlace => f.write_str("BLOCK_LANTERN_PLACE"),
            SoundSoundEnum::BlockLanternStep => f.write_str("BLOCK_LANTERN_STEP"),
            SoundSoundEnum::BlockLargeAmethystBudBreak => {
                f.write_str("BLOCK_LARGE_AMETHYST_BUD_BREAK")
            }
            SoundSoundEnum::BlockLargeAmethystBudPlace => {
                f.write_str("BLOCK_LARGE_AMETHYST_BUD_PLACE")
            }
            SoundSoundEnum::BlockLavaAmbient => f.write_str("BLOCK_LAVA_AMBIENT"),
            SoundSoundEnum::BlockLavaExtinguish => f.write_str("BLOCK_LAVA_EXTINGUISH"),
            SoundSoundEnum::BlockLavaPop => f.write_str("BLOCK_LAVA_POP"),
            SoundSoundEnum::BlockLeverClick => f.write_str("BLOCK_LEVER_CLICK"),
            SoundSoundEnum::BlockLilyPadPlace => f.write_str("BLOCK_LILY_PAD_PLACE"),
            SoundSoundEnum::BlockLodestoneBreak => f.write_str("BLOCK_LODESTONE_BREAK"),
            SoundSoundEnum::BlockLodestoneFall => f.write_str("BLOCK_LODESTONE_FALL"),
            SoundSoundEnum::BlockLodestoneHit => f.write_str("BLOCK_LODESTONE_HIT"),
            SoundSoundEnum::BlockLodestonePlace => f.write_str("BLOCK_LODESTONE_PLACE"),
            SoundSoundEnum::BlockLodestoneStep => f.write_str("BLOCK_LODESTONE_STEP"),
            SoundSoundEnum::BlockMangroveRootsBreak => f.write_str("BLOCK_MANGROVE_ROOTS_BREAK"),
            SoundSoundEnum::BlockMangroveRootsFall => f.write_str("BLOCK_MANGROVE_ROOTS_FALL"),
            SoundSoundEnum::BlockMangroveRootsHit => f.write_str("BLOCK_MANGROVE_ROOTS_HIT"),
            SoundSoundEnum::BlockMangroveRootsPlace => f.write_str("BLOCK_MANGROVE_ROOTS_PLACE"),
            SoundSoundEnum::BlockMangroveRootsStep => f.write_str("BLOCK_MANGROVE_ROOTS_STEP"),
            SoundSoundEnum::BlockMediumAmethystBudBreak => {
                f.write_str("BLOCK_MEDIUM_AMETHYST_BUD_BREAK")
            }
            SoundSoundEnum::BlockMediumAmethystBudPlace => {
                f.write_str("BLOCK_MEDIUM_AMETHYST_BUD_PLACE")
            }
            SoundSoundEnum::BlockMetalBreak => f.write_str("BLOCK_METAL_BREAK"),
            SoundSoundEnum::BlockMetalFall => f.write_str("BLOCK_METAL_FALL"),
            SoundSoundEnum::BlockMetalHit => f.write_str("BLOCK_METAL_HIT"),
            SoundSoundEnum::BlockMetalPlace => f.write_str("BLOCK_METAL_PLACE"),
            SoundSoundEnum::BlockMetalPressurePlateClickOff => {
                f.write_str("BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundSoundEnum::BlockMetalPressurePlateClickOn => {
                f.write_str("BLOCK_METAL_PRESSURE_PLATE_CLICK_ON")
            }
            SoundSoundEnum::BlockMetalStep => f.write_str("BLOCK_METAL_STEP"),
            SoundSoundEnum::BlockMossBreak => f.write_str("BLOCK_MOSS_BREAK"),
            SoundSoundEnum::BlockMossCarpetBreak => f.write_str("BLOCK_MOSS_CARPET_BREAK"),
            SoundSoundEnum::BlockMossCarpetFall => f.write_str("BLOCK_MOSS_CARPET_FALL"),
            SoundSoundEnum::BlockMossCarpetHit => f.write_str("BLOCK_MOSS_CARPET_HIT"),
            SoundSoundEnum::BlockMossCarpetPlace => f.write_str("BLOCK_MOSS_CARPET_PLACE"),
            SoundSoundEnum::BlockMossCarpetStep => f.write_str("BLOCK_MOSS_CARPET_STEP"),
            SoundSoundEnum::BlockMossFall => f.write_str("BLOCK_MOSS_FALL"),
            SoundSoundEnum::BlockMossHit => f.write_str("BLOCK_MOSS_HIT"),
            SoundSoundEnum::BlockMossPlace => f.write_str("BLOCK_MOSS_PLACE"),
            SoundSoundEnum::BlockMossStep => f.write_str("BLOCK_MOSS_STEP"),
            SoundSoundEnum::BlockMuddyMangroveRootsBreak => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_BREAK")
            }
            SoundSoundEnum::BlockMuddyMangroveRootsFall => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_FALL")
            }
            SoundSoundEnum::BlockMuddyMangroveRootsHit => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_HIT")
            }
            SoundSoundEnum::BlockMuddyMangroveRootsPlace => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_PLACE")
            }
            SoundSoundEnum::BlockMuddyMangroveRootsStep => {
                f.write_str("BLOCK_MUDDY_MANGROVE_ROOTS_STEP")
            }
            SoundSoundEnum::BlockMudBreak => f.write_str("BLOCK_MUD_BREAK"),
            SoundSoundEnum::BlockMudBricksBreak => f.write_str("BLOCK_MUD_BRICKS_BREAK"),
            SoundSoundEnum::BlockMudBricksFall => f.write_str("BLOCK_MUD_BRICKS_FALL"),
            SoundSoundEnum::BlockMudBricksHit => f.write_str("BLOCK_MUD_BRICKS_HIT"),
            SoundSoundEnum::BlockMudBricksPlace => f.write_str("BLOCK_MUD_BRICKS_PLACE"),
            SoundSoundEnum::BlockMudBricksStep => f.write_str("BLOCK_MUD_BRICKS_STEP"),
            SoundSoundEnum::BlockMudFall => f.write_str("BLOCK_MUD_FALL"),
            SoundSoundEnum::BlockMudHit => f.write_str("BLOCK_MUD_HIT"),
            SoundSoundEnum::BlockMudPlace => f.write_str("BLOCK_MUD_PLACE"),
            SoundSoundEnum::BlockMudStep => f.write_str("BLOCK_MUD_STEP"),
            SoundSoundEnum::BlockNetheriteBlockBreak => f.write_str("BLOCK_NETHERITE_BLOCK_BREAK"),
            SoundSoundEnum::BlockNetheriteBlockFall => f.write_str("BLOCK_NETHERITE_BLOCK_FALL"),
            SoundSoundEnum::BlockNetheriteBlockHit => f.write_str("BLOCK_NETHERITE_BLOCK_HIT"),
            SoundSoundEnum::BlockNetheriteBlockPlace => f.write_str("BLOCK_NETHERITE_BLOCK_PLACE"),
            SoundSoundEnum::BlockNetheriteBlockStep => f.write_str("BLOCK_NETHERITE_BLOCK_STEP"),
            SoundSoundEnum::BlockNetherrackBreak => f.write_str("BLOCK_NETHERRACK_BREAK"),
            SoundSoundEnum::BlockNetherrackFall => f.write_str("BLOCK_NETHERRACK_FALL"),
            SoundSoundEnum::BlockNetherrackHit => f.write_str("BLOCK_NETHERRACK_HIT"),
            SoundSoundEnum::BlockNetherrackPlace => f.write_str("BLOCK_NETHERRACK_PLACE"),
            SoundSoundEnum::BlockNetherrackStep => f.write_str("BLOCK_NETHERRACK_STEP"),
            SoundSoundEnum::BlockNetherBricksBreak => f.write_str("BLOCK_NETHER_BRICKS_BREAK"),
            SoundSoundEnum::BlockNetherBricksFall => f.write_str("BLOCK_NETHER_BRICKS_FALL"),
            SoundSoundEnum::BlockNetherBricksHit => f.write_str("BLOCK_NETHER_BRICKS_HIT"),
            SoundSoundEnum::BlockNetherBricksPlace => f.write_str("BLOCK_NETHER_BRICKS_PLACE"),
            SoundSoundEnum::BlockNetherBricksStep => f.write_str("BLOCK_NETHER_BRICKS_STEP"),
            SoundSoundEnum::BlockNetherGoldOreBreak => f.write_str("BLOCK_NETHER_GOLD_ORE_BREAK"),
            SoundSoundEnum::BlockNetherGoldOreFall => f.write_str("BLOCK_NETHER_GOLD_ORE_FALL"),
            SoundSoundEnum::BlockNetherGoldOreHit => f.write_str("BLOCK_NETHER_GOLD_ORE_HIT"),
            SoundSoundEnum::BlockNetherGoldOrePlace => f.write_str("BLOCK_NETHER_GOLD_ORE_PLACE"),
            SoundSoundEnum::BlockNetherGoldOreStep => f.write_str("BLOCK_NETHER_GOLD_ORE_STEP"),
            SoundSoundEnum::BlockNetherOreBreak => f.write_str("BLOCK_NETHER_ORE_BREAK"),
            SoundSoundEnum::BlockNetherOreFall => f.write_str("BLOCK_NETHER_ORE_FALL"),
            SoundSoundEnum::BlockNetherOreHit => f.write_str("BLOCK_NETHER_ORE_HIT"),
            SoundSoundEnum::BlockNetherOrePlace => f.write_str("BLOCK_NETHER_ORE_PLACE"),
            SoundSoundEnum::BlockNetherOreStep => f.write_str("BLOCK_NETHER_ORE_STEP"),
            SoundSoundEnum::BlockNetherSproutsBreak => f.write_str("BLOCK_NETHER_SPROUTS_BREAK"),
            SoundSoundEnum::BlockNetherSproutsFall => f.write_str("BLOCK_NETHER_SPROUTS_FALL"),
            SoundSoundEnum::BlockNetherSproutsHit => f.write_str("BLOCK_NETHER_SPROUTS_HIT"),
            SoundSoundEnum::BlockNetherSproutsPlace => f.write_str("BLOCK_NETHER_SPROUTS_PLACE"),
            SoundSoundEnum::BlockNetherSproutsStep => f.write_str("BLOCK_NETHER_SPROUTS_STEP"),
            SoundSoundEnum::BlockNetherWartBreak => f.write_str("BLOCK_NETHER_WART_BREAK"),
            SoundSoundEnum::BlockNetherWoodBreak => f.write_str("BLOCK_NETHER_WOOD_BREAK"),
            SoundSoundEnum::BlockNetherWoodButtonClickOff => {
                f.write_str("BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF")
            }
            SoundSoundEnum::BlockNetherWoodButtonClickOn => {
                f.write_str("BLOCK_NETHER_WOOD_BUTTON_CLICK_ON")
            }
            SoundSoundEnum::BlockNetherWoodDoorClose => f.write_str("BLOCK_NETHER_WOOD_DOOR_CLOSE"),
            SoundSoundEnum::BlockNetherWoodDoorOpen => f.write_str("BLOCK_NETHER_WOOD_DOOR_OPEN"),
            SoundSoundEnum::BlockNetherWoodFall => f.write_str("BLOCK_NETHER_WOOD_FALL"),
            SoundSoundEnum::BlockNetherWoodFenceGateClose => {
                f.write_str("BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE")
            }
            SoundSoundEnum::BlockNetherWoodFenceGateOpen => {
                f.write_str("BLOCK_NETHER_WOOD_FENCE_GATE_OPEN")
            }
            SoundSoundEnum::BlockNetherWoodHangingSignBreak => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK")
            }
            SoundSoundEnum::BlockNetherWoodHangingSignFall => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_FALL")
            }
            SoundSoundEnum::BlockNetherWoodHangingSignHit => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_HIT")
            }
            SoundSoundEnum::BlockNetherWoodHangingSignPlace => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE")
            }
            SoundSoundEnum::BlockNetherWoodHangingSignStep => {
                f.write_str("BLOCK_NETHER_WOOD_HANGING_SIGN_STEP")
            }
            SoundSoundEnum::BlockNetherWoodHit => f.write_str("BLOCK_NETHER_WOOD_HIT"),
            SoundSoundEnum::BlockNetherWoodPlace => f.write_str("BLOCK_NETHER_WOOD_PLACE"),
            SoundSoundEnum::BlockNetherWoodPressurePlateClickOff => {
                f.write_str("BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundSoundEnum::BlockNetherWoodPressurePlateClickOn => {
                f.write_str("BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON")
            }
            SoundSoundEnum::BlockNetherWoodStep => f.write_str("BLOCK_NETHER_WOOD_STEP"),
            SoundSoundEnum::BlockNetherWoodTrapdoorClose => {
                f.write_str("BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE")
            }
            SoundSoundEnum::BlockNetherWoodTrapdoorOpen => {
                f.write_str("BLOCK_NETHER_WOOD_TRAPDOOR_OPEN")
            }
            SoundSoundEnum::BlockNoteBlockBanjo => f.write_str("BLOCK_NOTE_BLOCK_BANJO"),
            SoundSoundEnum::BlockNoteBlockBasedrum => f.write_str("BLOCK_NOTE_BLOCK_BASEDRUM"),
            SoundSoundEnum::BlockNoteBlockBass => f.write_str("BLOCK_NOTE_BLOCK_BASS"),
            SoundSoundEnum::BlockNoteBlockBell => f.write_str("BLOCK_NOTE_BLOCK_BELL"),
            SoundSoundEnum::BlockNoteBlockBit => f.write_str("BLOCK_NOTE_BLOCK_BIT"),
            SoundSoundEnum::BlockNoteBlockChime => f.write_str("BLOCK_NOTE_BLOCK_CHIME"),
            SoundSoundEnum::BlockNoteBlockCowBell => f.write_str("BLOCK_NOTE_BLOCK_COW_BELL"),
            SoundSoundEnum::BlockNoteBlockDidgeridoo => f.write_str("BLOCK_NOTE_BLOCK_DIDGERIDOO"),
            SoundSoundEnum::BlockNoteBlockFlute => f.write_str("BLOCK_NOTE_BLOCK_FLUTE"),
            SoundSoundEnum::BlockNoteBlockGuitar => f.write_str("BLOCK_NOTE_BLOCK_GUITAR"),
            SoundSoundEnum::BlockNoteBlockHarp => f.write_str("BLOCK_NOTE_BLOCK_HARP"),
            SoundSoundEnum::BlockNoteBlockHat => f.write_str("BLOCK_NOTE_BLOCK_HAT"),
            SoundSoundEnum::BlockNoteBlockImitateCreeper => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_CREEPER")
            }
            SoundSoundEnum::BlockNoteBlockImitateEnderDragon => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON")
            }
            SoundSoundEnum::BlockNoteBlockImitatePiglin => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_PIGLIN")
            }
            SoundSoundEnum::BlockNoteBlockImitateSkeleton => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_SKELETON")
            }
            SoundSoundEnum::BlockNoteBlockImitateWitherSkeleton => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON")
            }
            SoundSoundEnum::BlockNoteBlockImitateZombie => {
                f.write_str("BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE")
            }
            SoundSoundEnum::BlockNoteBlockIronXylophone => {
                f.write_str("BLOCK_NOTE_BLOCK_IRON_XYLOPHONE")
            }
            SoundSoundEnum::BlockNoteBlockPling => f.write_str("BLOCK_NOTE_BLOCK_PLING"),
            SoundSoundEnum::BlockNoteBlockSnare => f.write_str("BLOCK_NOTE_BLOCK_SNARE"),
            SoundSoundEnum::BlockNoteBlockXylophone => f.write_str("BLOCK_NOTE_BLOCK_XYLOPHONE"),
            SoundSoundEnum::BlockNyliumBreak => f.write_str("BLOCK_NYLIUM_BREAK"),
            SoundSoundEnum::BlockNyliumFall => f.write_str("BLOCK_NYLIUM_FALL"),
            SoundSoundEnum::BlockNyliumHit => f.write_str("BLOCK_NYLIUM_HIT"),
            SoundSoundEnum::BlockNyliumPlace => f.write_str("BLOCK_NYLIUM_PLACE"),
            SoundSoundEnum::BlockNyliumStep => f.write_str("BLOCK_NYLIUM_STEP"),
            SoundSoundEnum::BlockPackedMudBreak => f.write_str("BLOCK_PACKED_MUD_BREAK"),
            SoundSoundEnum::BlockPackedMudFall => f.write_str("BLOCK_PACKED_MUD_FALL"),
            SoundSoundEnum::BlockPackedMudHit => f.write_str("BLOCK_PACKED_MUD_HIT"),
            SoundSoundEnum::BlockPackedMudPlace => f.write_str("BLOCK_PACKED_MUD_PLACE"),
            SoundSoundEnum::BlockPackedMudStep => f.write_str("BLOCK_PACKED_MUD_STEP"),
            SoundSoundEnum::BlockPinkPetalsBreak => f.write_str("BLOCK_PINK_PETALS_BREAK"),
            SoundSoundEnum::BlockPinkPetalsFall => f.write_str("BLOCK_PINK_PETALS_FALL"),
            SoundSoundEnum::BlockPinkPetalsHit => f.write_str("BLOCK_PINK_PETALS_HIT"),
            SoundSoundEnum::BlockPinkPetalsPlace => f.write_str("BLOCK_PINK_PETALS_PLACE"),
            SoundSoundEnum::BlockPinkPetalsStep => f.write_str("BLOCK_PINK_PETALS_STEP"),
            SoundSoundEnum::BlockPistonContract => f.write_str("BLOCK_PISTON_CONTRACT"),
            SoundSoundEnum::BlockPistonExtend => f.write_str("BLOCK_PISTON_EXTEND"),
            SoundSoundEnum::BlockPointedDripstoneBreak => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_BREAK")
            }
            SoundSoundEnum::BlockPointedDripstoneDripLava => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_LAVA")
            }
            SoundSoundEnum::BlockPointedDripstoneDripLavaIntoCauldron => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON")
            }
            SoundSoundEnum::BlockPointedDripstoneDripWater => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_WATER")
            }
            SoundSoundEnum::BlockPointedDripstoneDripWaterIntoCauldron => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON")
            }
            SoundSoundEnum::BlockPointedDripstoneFall => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_FALL")
            }
            SoundSoundEnum::BlockPointedDripstoneHit => f.write_str("BLOCK_POINTED_DRIPSTONE_HIT"),
            SoundSoundEnum::BlockPointedDripstoneLand => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_LAND")
            }
            SoundSoundEnum::BlockPointedDripstonePlace => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_PLACE")
            }
            SoundSoundEnum::BlockPointedDripstoneStep => {
                f.write_str("BLOCK_POINTED_DRIPSTONE_STEP")
            }
            SoundSoundEnum::BlockPolishedDeepslateBreak => {
                f.write_str("BLOCK_POLISHED_DEEPSLATE_BREAK")
            }
            SoundSoundEnum::BlockPolishedDeepslateFall => {
                f.write_str("BLOCK_POLISHED_DEEPSLATE_FALL")
            }
            SoundSoundEnum::BlockPolishedDeepslateHit => {
                f.write_str("BLOCK_POLISHED_DEEPSLATE_HIT")
            }
            SoundSoundEnum::BlockPolishedDeepslatePlace => {
                f.write_str("BLOCK_POLISHED_DEEPSLATE_PLACE")
            }
            SoundSoundEnum::BlockPolishedDeepslateStep => {
                f.write_str("BLOCK_POLISHED_DEEPSLATE_STEP")
            }
            SoundSoundEnum::BlockPortalAmbient => f.write_str("BLOCK_PORTAL_AMBIENT"),
            SoundSoundEnum::BlockPortalTravel => f.write_str("BLOCK_PORTAL_TRAVEL"),
            SoundSoundEnum::BlockPortalTrigger => f.write_str("BLOCK_PORTAL_TRIGGER"),
            SoundSoundEnum::BlockPowderSnowBreak => f.write_str("BLOCK_POWDER_SNOW_BREAK"),
            SoundSoundEnum::BlockPowderSnowFall => f.write_str("BLOCK_POWDER_SNOW_FALL"),
            SoundSoundEnum::BlockPowderSnowHit => f.write_str("BLOCK_POWDER_SNOW_HIT"),
            SoundSoundEnum::BlockPowderSnowPlace => f.write_str("BLOCK_POWDER_SNOW_PLACE"),
            SoundSoundEnum::BlockPowderSnowStep => f.write_str("BLOCK_POWDER_SNOW_STEP"),
            SoundSoundEnum::BlockPumpkinCarve => f.write_str("BLOCK_PUMPKIN_CARVE"),
            SoundSoundEnum::BlockRedstoneTorchBurnout => {
                f.write_str("BLOCK_REDSTONE_TORCH_BURNOUT")
            }
            SoundSoundEnum::BlockRespawnAnchorAmbient => {
                f.write_str("BLOCK_RESPAWN_ANCHOR_AMBIENT")
            }
            SoundSoundEnum::BlockRespawnAnchorCharge => f.write_str("BLOCK_RESPAWN_ANCHOR_CHARGE"),
            SoundSoundEnum::BlockRespawnAnchorDeplete => {
                f.write_str("BLOCK_RESPAWN_ANCHOR_DEPLETE")
            }
            SoundSoundEnum::BlockRespawnAnchorSetSpawn => {
                f.write_str("BLOCK_RESPAWN_ANCHOR_SET_SPAWN")
            }
            SoundSoundEnum::BlockRootedDirtBreak => f.write_str("BLOCK_ROOTED_DIRT_BREAK"),
            SoundSoundEnum::BlockRootedDirtFall => f.write_str("BLOCK_ROOTED_DIRT_FALL"),
            SoundSoundEnum::BlockRootedDirtHit => f.write_str("BLOCK_ROOTED_DIRT_HIT"),
            SoundSoundEnum::BlockRootedDirtPlace => f.write_str("BLOCK_ROOTED_DIRT_PLACE"),
            SoundSoundEnum::BlockRootedDirtStep => f.write_str("BLOCK_ROOTED_DIRT_STEP"),
            SoundSoundEnum::BlockRootsBreak => f.write_str("BLOCK_ROOTS_BREAK"),
            SoundSoundEnum::BlockRootsFall => f.write_str("BLOCK_ROOTS_FALL"),
            SoundSoundEnum::BlockRootsHit => f.write_str("BLOCK_ROOTS_HIT"),
            SoundSoundEnum::BlockRootsPlace => f.write_str("BLOCK_ROOTS_PLACE"),
            SoundSoundEnum::BlockRootsStep => f.write_str("BLOCK_ROOTS_STEP"),
            SoundSoundEnum::BlockSandBreak => f.write_str("BLOCK_SAND_BREAK"),
            SoundSoundEnum::BlockSandFall => f.write_str("BLOCK_SAND_FALL"),
            SoundSoundEnum::BlockSandHit => f.write_str("BLOCK_SAND_HIT"),
            SoundSoundEnum::BlockSandPlace => f.write_str("BLOCK_SAND_PLACE"),
            SoundSoundEnum::BlockSandStep => f.write_str("BLOCK_SAND_STEP"),
            SoundSoundEnum::BlockScaffoldingBreak => f.write_str("BLOCK_SCAFFOLDING_BREAK"),
            SoundSoundEnum::BlockScaffoldingFall => f.write_str("BLOCK_SCAFFOLDING_FALL"),
            SoundSoundEnum::BlockScaffoldingHit => f.write_str("BLOCK_SCAFFOLDING_HIT"),
            SoundSoundEnum::BlockScaffoldingPlace => f.write_str("BLOCK_SCAFFOLDING_PLACE"),
            SoundSoundEnum::BlockScaffoldingStep => f.write_str("BLOCK_SCAFFOLDING_STEP"),
            SoundSoundEnum::BlockSculkBreak => f.write_str("BLOCK_SCULK_BREAK"),
            SoundSoundEnum::BlockSculkCatalystBloom => f.write_str("BLOCK_SCULK_CATALYST_BLOOM"),
            SoundSoundEnum::BlockSculkCatalystBreak => f.write_str("BLOCK_SCULK_CATALYST_BREAK"),
            SoundSoundEnum::BlockSculkCatalystFall => f.write_str("BLOCK_SCULK_CATALYST_FALL"),
            SoundSoundEnum::BlockSculkCatalystHit => f.write_str("BLOCK_SCULK_CATALYST_HIT"),
            SoundSoundEnum::BlockSculkCatalystPlace => f.write_str("BLOCK_SCULK_CATALYST_PLACE"),
            SoundSoundEnum::BlockSculkCatalystStep => f.write_str("BLOCK_SCULK_CATALYST_STEP"),
            SoundSoundEnum::BlockSculkCharge => f.write_str("BLOCK_SCULK_CHARGE"),
            SoundSoundEnum::BlockSculkFall => f.write_str("BLOCK_SCULK_FALL"),
            SoundSoundEnum::BlockSculkHit => f.write_str("BLOCK_SCULK_HIT"),
            SoundSoundEnum::BlockSculkPlace => f.write_str("BLOCK_SCULK_PLACE"),
            SoundSoundEnum::BlockSculkSensorBreak => f.write_str("BLOCK_SCULK_SENSOR_BREAK"),
            SoundSoundEnum::BlockSculkSensorClicking => f.write_str("BLOCK_SCULK_SENSOR_CLICKING"),
            SoundSoundEnum::BlockSculkSensorClickingStop => {
                f.write_str("BLOCK_SCULK_SENSOR_CLICKING_STOP")
            }
            SoundSoundEnum::BlockSculkSensorFall => f.write_str("BLOCK_SCULK_SENSOR_FALL"),
            SoundSoundEnum::BlockSculkSensorHit => f.write_str("BLOCK_SCULK_SENSOR_HIT"),
            SoundSoundEnum::BlockSculkSensorPlace => f.write_str("BLOCK_SCULK_SENSOR_PLACE"),
            SoundSoundEnum::BlockSculkSensorStep => f.write_str("BLOCK_SCULK_SENSOR_STEP"),
            SoundSoundEnum::BlockSculkShriekerBreak => f.write_str("BLOCK_SCULK_SHRIEKER_BREAK"),
            SoundSoundEnum::BlockSculkShriekerFall => f.write_str("BLOCK_SCULK_SHRIEKER_FALL"),
            SoundSoundEnum::BlockSculkShriekerHit => f.write_str("BLOCK_SCULK_SHRIEKER_HIT"),
            SoundSoundEnum::BlockSculkShriekerPlace => f.write_str("BLOCK_SCULK_SHRIEKER_PLACE"),
            SoundSoundEnum::BlockSculkShriekerShriek => f.write_str("BLOCK_SCULK_SHRIEKER_SHRIEK"),
            SoundSoundEnum::BlockSculkShriekerStep => f.write_str("BLOCK_SCULK_SHRIEKER_STEP"),
            SoundSoundEnum::BlockSculkSpread => f.write_str("BLOCK_SCULK_SPREAD"),
            SoundSoundEnum::BlockSculkStep => f.write_str("BLOCK_SCULK_STEP"),
            SoundSoundEnum::BlockSculkVeinBreak => f.write_str("BLOCK_SCULK_VEIN_BREAK"),
            SoundSoundEnum::BlockSculkVeinFall => f.write_str("BLOCK_SCULK_VEIN_FALL"),
            SoundSoundEnum::BlockSculkVeinHit => f.write_str("BLOCK_SCULK_VEIN_HIT"),
            SoundSoundEnum::BlockSculkVeinPlace => f.write_str("BLOCK_SCULK_VEIN_PLACE"),
            SoundSoundEnum::BlockSculkVeinStep => f.write_str("BLOCK_SCULK_VEIN_STEP"),
            SoundSoundEnum::BlockShroomlightBreak => f.write_str("BLOCK_SHROOMLIGHT_BREAK"),
            SoundSoundEnum::BlockShroomlightFall => f.write_str("BLOCK_SHROOMLIGHT_FALL"),
            SoundSoundEnum::BlockShroomlightHit => f.write_str("BLOCK_SHROOMLIGHT_HIT"),
            SoundSoundEnum::BlockShroomlightPlace => f.write_str("BLOCK_SHROOMLIGHT_PLACE"),
            SoundSoundEnum::BlockShroomlightStep => f.write_str("BLOCK_SHROOMLIGHT_STEP"),
            SoundSoundEnum::BlockShulkerBoxClose => f.write_str("BLOCK_SHULKER_BOX_CLOSE"),
            SoundSoundEnum::BlockShulkerBoxOpen => f.write_str("BLOCK_SHULKER_BOX_OPEN"),
            SoundSoundEnum::BlockSignWaxedInteractFail => {
                f.write_str("BLOCK_SIGN_WAXED_INTERACT_FAIL")
            }
            SoundSoundEnum::BlockSlimeBlockBreak => f.write_str("BLOCK_SLIME_BLOCK_BREAK"),
            SoundSoundEnum::BlockSlimeBlockFall => f.write_str("BLOCK_SLIME_BLOCK_FALL"),
            SoundSoundEnum::BlockSlimeBlockHit => f.write_str("BLOCK_SLIME_BLOCK_HIT"),
            SoundSoundEnum::BlockSlimeBlockPlace => f.write_str("BLOCK_SLIME_BLOCK_PLACE"),
            SoundSoundEnum::BlockSlimeBlockStep => f.write_str("BLOCK_SLIME_BLOCK_STEP"),
            SoundSoundEnum::BlockSmallAmethystBudBreak => {
                f.write_str("BLOCK_SMALL_AMETHYST_BUD_BREAK")
            }
            SoundSoundEnum::BlockSmallAmethystBudPlace => {
                f.write_str("BLOCK_SMALL_AMETHYST_BUD_PLACE")
            }
            SoundSoundEnum::BlockSmallDripleafBreak => f.write_str("BLOCK_SMALL_DRIPLEAF_BREAK"),
            SoundSoundEnum::BlockSmallDripleafFall => f.write_str("BLOCK_SMALL_DRIPLEAF_FALL"),
            SoundSoundEnum::BlockSmallDripleafHit => f.write_str("BLOCK_SMALL_DRIPLEAF_HIT"),
            SoundSoundEnum::BlockSmallDripleafPlace => f.write_str("BLOCK_SMALL_DRIPLEAF_PLACE"),
            SoundSoundEnum::BlockSmallDripleafStep => f.write_str("BLOCK_SMALL_DRIPLEAF_STEP"),
            SoundSoundEnum::BlockSmithingTableUse => f.write_str("BLOCK_SMITHING_TABLE_USE"),
            SoundSoundEnum::BlockSmokerSmoke => f.write_str("BLOCK_SMOKER_SMOKE"),
            SoundSoundEnum::BlockSnifferEggCrack => f.write_str("BLOCK_SNIFFER_EGG_CRACK"),
            SoundSoundEnum::BlockSnifferEggHatch => f.write_str("BLOCK_SNIFFER_EGG_HATCH"),
            SoundSoundEnum::BlockSnifferEggPlop => f.write_str("BLOCK_SNIFFER_EGG_PLOP"),
            SoundSoundEnum::BlockSnowBreak => f.write_str("BLOCK_SNOW_BREAK"),
            SoundSoundEnum::BlockSnowFall => f.write_str("BLOCK_SNOW_FALL"),
            SoundSoundEnum::BlockSnowHit => f.write_str("BLOCK_SNOW_HIT"),
            SoundSoundEnum::BlockSnowPlace => f.write_str("BLOCK_SNOW_PLACE"),
            SoundSoundEnum::BlockSnowStep => f.write_str("BLOCK_SNOW_STEP"),
            SoundSoundEnum::BlockSoulSandBreak => f.write_str("BLOCK_SOUL_SAND_BREAK"),
            SoundSoundEnum::BlockSoulSandFall => f.write_str("BLOCK_SOUL_SAND_FALL"),
            SoundSoundEnum::BlockSoulSandHit => f.write_str("BLOCK_SOUL_SAND_HIT"),
            SoundSoundEnum::BlockSoulSandPlace => f.write_str("BLOCK_SOUL_SAND_PLACE"),
            SoundSoundEnum::BlockSoulSandStep => f.write_str("BLOCK_SOUL_SAND_STEP"),
            SoundSoundEnum::BlockSoulSoilBreak => f.write_str("BLOCK_SOUL_SOIL_BREAK"),
            SoundSoundEnum::BlockSoulSoilFall => f.write_str("BLOCK_SOUL_SOIL_FALL"),
            SoundSoundEnum::BlockSoulSoilHit => f.write_str("BLOCK_SOUL_SOIL_HIT"),
            SoundSoundEnum::BlockSoulSoilPlace => f.write_str("BLOCK_SOUL_SOIL_PLACE"),
            SoundSoundEnum::BlockSoulSoilStep => f.write_str("BLOCK_SOUL_SOIL_STEP"),
            SoundSoundEnum::BlockSporeBlossomBreak => f.write_str("BLOCK_SPORE_BLOSSOM_BREAK"),
            SoundSoundEnum::BlockSporeBlossomFall => f.write_str("BLOCK_SPORE_BLOSSOM_FALL"),
            SoundSoundEnum::BlockSporeBlossomHit => f.write_str("BLOCK_SPORE_BLOSSOM_HIT"),
            SoundSoundEnum::BlockSporeBlossomPlace => f.write_str("BLOCK_SPORE_BLOSSOM_PLACE"),
            SoundSoundEnum::BlockSporeBlossomStep => f.write_str("BLOCK_SPORE_BLOSSOM_STEP"),
            SoundSoundEnum::BlockStemBreak => f.write_str("BLOCK_STEM_BREAK"),
            SoundSoundEnum::BlockStemFall => f.write_str("BLOCK_STEM_FALL"),
            SoundSoundEnum::BlockStemHit => f.write_str("BLOCK_STEM_HIT"),
            SoundSoundEnum::BlockStemPlace => f.write_str("BLOCK_STEM_PLACE"),
            SoundSoundEnum::BlockStemStep => f.write_str("BLOCK_STEM_STEP"),
            SoundSoundEnum::BlockStoneBreak => f.write_str("BLOCK_STONE_BREAK"),
            SoundSoundEnum::BlockStoneButtonClickOff => f.write_str("BLOCK_STONE_BUTTON_CLICK_OFF"),
            SoundSoundEnum::BlockStoneButtonClickOn => f.write_str("BLOCK_STONE_BUTTON_CLICK_ON"),
            SoundSoundEnum::BlockStoneFall => f.write_str("BLOCK_STONE_FALL"),
            SoundSoundEnum::BlockStoneHit => f.write_str("BLOCK_STONE_HIT"),
            SoundSoundEnum::BlockStonePlace => f.write_str("BLOCK_STONE_PLACE"),
            SoundSoundEnum::BlockStonePressurePlateClickOff => {
                f.write_str("BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundSoundEnum::BlockStonePressurePlateClickOn => {
                f.write_str("BLOCK_STONE_PRESSURE_PLATE_CLICK_ON")
            }
            SoundSoundEnum::BlockStoneStep => f.write_str("BLOCK_STONE_STEP"),
            SoundSoundEnum::BlockSuspiciousGravelBreak => {
                f.write_str("BLOCK_SUSPICIOUS_GRAVEL_BREAK")
            }
            SoundSoundEnum::BlockSuspiciousGravelFall => {
                f.write_str("BLOCK_SUSPICIOUS_GRAVEL_FALL")
            }
            SoundSoundEnum::BlockSuspiciousGravelHit => f.write_str("BLOCK_SUSPICIOUS_GRAVEL_HIT"),
            SoundSoundEnum::BlockSuspiciousGravelPlace => {
                f.write_str("BLOCK_SUSPICIOUS_GRAVEL_PLACE")
            }
            SoundSoundEnum::BlockSuspiciousGravelStep => {
                f.write_str("BLOCK_SUSPICIOUS_GRAVEL_STEP")
            }
            SoundSoundEnum::BlockSuspiciousSandBreak => f.write_str("BLOCK_SUSPICIOUS_SAND_BREAK"),
            SoundSoundEnum::BlockSuspiciousSandFall => f.write_str("BLOCK_SUSPICIOUS_SAND_FALL"),
            SoundSoundEnum::BlockSuspiciousSandHit => f.write_str("BLOCK_SUSPICIOUS_SAND_HIT"),
            SoundSoundEnum::BlockSuspiciousSandPlace => f.write_str("BLOCK_SUSPICIOUS_SAND_PLACE"),
            SoundSoundEnum::BlockSuspiciousSandStep => f.write_str("BLOCK_SUSPICIOUS_SAND_STEP"),
            SoundSoundEnum::BlockSweetBerryBushBreak => f.write_str("BLOCK_SWEET_BERRY_BUSH_BREAK"),
            SoundSoundEnum::BlockSweetBerryBushPickBerries => {
                f.write_str("BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES")
            }
            SoundSoundEnum::BlockSweetBerryBushPlace => f.write_str("BLOCK_SWEET_BERRY_BUSH_PLACE"),
            SoundSoundEnum::BlockTripwireAttach => f.write_str("BLOCK_TRIPWIRE_ATTACH"),
            SoundSoundEnum::BlockTripwireClickOff => f.write_str("BLOCK_TRIPWIRE_CLICK_OFF"),
            SoundSoundEnum::BlockTripwireClickOn => f.write_str("BLOCK_TRIPWIRE_CLICK_ON"),
            SoundSoundEnum::BlockTripwireDetach => f.write_str("BLOCK_TRIPWIRE_DETACH"),
            SoundSoundEnum::BlockTuffBreak => f.write_str("BLOCK_TUFF_BREAK"),
            SoundSoundEnum::BlockTuffFall => f.write_str("BLOCK_TUFF_FALL"),
            SoundSoundEnum::BlockTuffHit => f.write_str("BLOCK_TUFF_HIT"),
            SoundSoundEnum::BlockTuffPlace => f.write_str("BLOCK_TUFF_PLACE"),
            SoundSoundEnum::BlockTuffStep => f.write_str("BLOCK_TUFF_STEP"),
            SoundSoundEnum::BlockVineBreak => f.write_str("BLOCK_VINE_BREAK"),
            SoundSoundEnum::BlockVineFall => f.write_str("BLOCK_VINE_FALL"),
            SoundSoundEnum::BlockVineHit => f.write_str("BLOCK_VINE_HIT"),
            SoundSoundEnum::BlockVinePlace => f.write_str("BLOCK_VINE_PLACE"),
            SoundSoundEnum::BlockVineStep => f.write_str("BLOCK_VINE_STEP"),
            SoundSoundEnum::BlockWartBlockBreak => f.write_str("BLOCK_WART_BLOCK_BREAK"),
            SoundSoundEnum::BlockWartBlockFall => f.write_str("BLOCK_WART_BLOCK_FALL"),
            SoundSoundEnum::BlockWartBlockHit => f.write_str("BLOCK_WART_BLOCK_HIT"),
            SoundSoundEnum::BlockWartBlockPlace => f.write_str("BLOCK_WART_BLOCK_PLACE"),
            SoundSoundEnum::BlockWartBlockStep => f.write_str("BLOCK_WART_BLOCK_STEP"),
            SoundSoundEnum::BlockWaterAmbient => f.write_str("BLOCK_WATER_AMBIENT"),
            SoundSoundEnum::BlockWeepingVinesBreak => f.write_str("BLOCK_WEEPING_VINES_BREAK"),
            SoundSoundEnum::BlockWeepingVinesFall => f.write_str("BLOCK_WEEPING_VINES_FALL"),
            SoundSoundEnum::BlockWeepingVinesHit => f.write_str("BLOCK_WEEPING_VINES_HIT"),
            SoundSoundEnum::BlockWeepingVinesPlace => f.write_str("BLOCK_WEEPING_VINES_PLACE"),
            SoundSoundEnum::BlockWeepingVinesStep => f.write_str("BLOCK_WEEPING_VINES_STEP"),
            SoundSoundEnum::BlockWetGrassBreak => f.write_str("BLOCK_WET_GRASS_BREAK"),
            SoundSoundEnum::BlockWetGrassFall => f.write_str("BLOCK_WET_GRASS_FALL"),
            SoundSoundEnum::BlockWetGrassHit => f.write_str("BLOCK_WET_GRASS_HIT"),
            SoundSoundEnum::BlockWetGrassPlace => f.write_str("BLOCK_WET_GRASS_PLACE"),
            SoundSoundEnum::BlockWetGrassStep => f.write_str("BLOCK_WET_GRASS_STEP"),
            SoundSoundEnum::BlockWoodenButtonClickOff => {
                f.write_str("BLOCK_WOODEN_BUTTON_CLICK_OFF")
            }
            SoundSoundEnum::BlockWoodenButtonClickOn => f.write_str("BLOCK_WOODEN_BUTTON_CLICK_ON"),
            SoundSoundEnum::BlockWoodenDoorClose => f.write_str("BLOCK_WOODEN_DOOR_CLOSE"),
            SoundSoundEnum::BlockWoodenDoorOpen => f.write_str("BLOCK_WOODEN_DOOR_OPEN"),
            SoundSoundEnum::BlockWoodenPressurePlateClickOff => {
                f.write_str("BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF")
            }
            SoundSoundEnum::BlockWoodenPressurePlateClickOn => {
                f.write_str("BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON")
            }
            SoundSoundEnum::BlockWoodenTrapdoorClose => f.write_str("BLOCK_WOODEN_TRAPDOOR_CLOSE"),
            SoundSoundEnum::BlockWoodenTrapdoorOpen => f.write_str("BLOCK_WOODEN_TRAPDOOR_OPEN"),
            SoundSoundEnum::BlockWoodBreak => f.write_str("BLOCK_WOOD_BREAK"),
            SoundSoundEnum::BlockWoodFall => f.write_str("BLOCK_WOOD_FALL"),
            SoundSoundEnum::BlockWoodHit => f.write_str("BLOCK_WOOD_HIT"),
            SoundSoundEnum::BlockWoodPlace => f.write_str("BLOCK_WOOD_PLACE"),
            SoundSoundEnum::BlockWoodStep => f.write_str("BLOCK_WOOD_STEP"),
            SoundSoundEnum::BlockWoolBreak => f.write_str("BLOCK_WOOL_BREAK"),
            SoundSoundEnum::BlockWoolFall => f.write_str("BLOCK_WOOL_FALL"),
            SoundSoundEnum::BlockWoolHit => f.write_str("BLOCK_WOOL_HIT"),
            SoundSoundEnum::BlockWoolPlace => f.write_str("BLOCK_WOOL_PLACE"),
            SoundSoundEnum::BlockWoolStep => f.write_str("BLOCK_WOOL_STEP"),
            SoundSoundEnum::EnchantThornsHit => f.write_str("ENCHANT_THORNS_HIT"),
            SoundSoundEnum::EntityAllayAmbientWithoutItem => {
                f.write_str("ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM")
            }
            SoundSoundEnum::EntityAllayAmbientWithItem => {
                f.write_str("ENTITY_ALLAY_AMBIENT_WITH_ITEM")
            }
            SoundSoundEnum::EntityAllayDeath => f.write_str("ENTITY_ALLAY_DEATH"),
            SoundSoundEnum::EntityAllayHurt => f.write_str("ENTITY_ALLAY_HURT"),
            SoundSoundEnum::EntityAllayItemGiven => f.write_str("ENTITY_ALLAY_ITEM_GIVEN"),
            SoundSoundEnum::EntityAllayItemTaken => f.write_str("ENTITY_ALLAY_ITEM_TAKEN"),
            SoundSoundEnum::EntityAllayItemThrown => f.write_str("ENTITY_ALLAY_ITEM_THROWN"),
            SoundSoundEnum::EntityArmorStandBreak => f.write_str("ENTITY_ARMOR_STAND_BREAK"),
            SoundSoundEnum::EntityArmorStandFall => f.write_str("ENTITY_ARMOR_STAND_FALL"),
            SoundSoundEnum::EntityArmorStandHit => f.write_str("ENTITY_ARMOR_STAND_HIT"),
            SoundSoundEnum::EntityArmorStandPlace => f.write_str("ENTITY_ARMOR_STAND_PLACE"),
            SoundSoundEnum::EntityArrowHit => f.write_str("ENTITY_ARROW_HIT"),
            SoundSoundEnum::EntityArrowHitPlayer => f.write_str("ENTITY_ARROW_HIT_PLAYER"),
            SoundSoundEnum::EntityArrowShoot => f.write_str("ENTITY_ARROW_SHOOT"),
            SoundSoundEnum::EntityAxolotlAttack => f.write_str("ENTITY_AXOLOTL_ATTACK"),
            SoundSoundEnum::EntityAxolotlDeath => f.write_str("ENTITY_AXOLOTL_DEATH"),
            SoundSoundEnum::EntityAxolotlHurt => f.write_str("ENTITY_AXOLOTL_HURT"),
            SoundSoundEnum::EntityAxolotlIdleAir => f.write_str("ENTITY_AXOLOTL_IDLE_AIR"),
            SoundSoundEnum::EntityAxolotlIdleWater => f.write_str("ENTITY_AXOLOTL_IDLE_WATER"),
            SoundSoundEnum::EntityAxolotlSplash => f.write_str("ENTITY_AXOLOTL_SPLASH"),
            SoundSoundEnum::EntityAxolotlSwim => f.write_str("ENTITY_AXOLOTL_SWIM"),
            SoundSoundEnum::EntityBatAmbient => f.write_str("ENTITY_BAT_AMBIENT"),
            SoundSoundEnum::EntityBatDeath => f.write_str("ENTITY_BAT_DEATH"),
            SoundSoundEnum::EntityBatHurt => f.write_str("ENTITY_BAT_HURT"),
            SoundSoundEnum::EntityBatLoop => f.write_str("ENTITY_BAT_LOOP"),
            SoundSoundEnum::EntityBatTakeoff => f.write_str("ENTITY_BAT_TAKEOFF"),
            SoundSoundEnum::EntityBeeDeath => f.write_str("ENTITY_BEE_DEATH"),
            SoundSoundEnum::EntityBeeHurt => f.write_str("ENTITY_BEE_HURT"),
            SoundSoundEnum::EntityBeeLoop => f.write_str("ENTITY_BEE_LOOP"),
            SoundSoundEnum::EntityBeeLoopAggressive => f.write_str("ENTITY_BEE_LOOP_AGGRESSIVE"),
            SoundSoundEnum::EntityBeePollinate => f.write_str("ENTITY_BEE_POLLINATE"),
            SoundSoundEnum::EntityBeeSting => f.write_str("ENTITY_BEE_STING"),
            SoundSoundEnum::EntityBlazeAmbient => f.write_str("ENTITY_BLAZE_AMBIENT"),
            SoundSoundEnum::EntityBlazeBurn => f.write_str("ENTITY_BLAZE_BURN"),
            SoundSoundEnum::EntityBlazeDeath => f.write_str("ENTITY_BLAZE_DEATH"),
            SoundSoundEnum::EntityBlazeHurt => f.write_str("ENTITY_BLAZE_HURT"),
            SoundSoundEnum::EntityBlazeShoot => f.write_str("ENTITY_BLAZE_SHOOT"),
            SoundSoundEnum::EntityBoatPaddleLand => f.write_str("ENTITY_BOAT_PADDLE_LAND"),
            SoundSoundEnum::EntityBoatPaddleWater => f.write_str("ENTITY_BOAT_PADDLE_WATER"),
            SoundSoundEnum::EntityCamelAmbient => f.write_str("ENTITY_CAMEL_AMBIENT"),
            SoundSoundEnum::EntityCamelDash => f.write_str("ENTITY_CAMEL_DASH"),
            SoundSoundEnum::EntityCamelDashReady => f.write_str("ENTITY_CAMEL_DASH_READY"),
            SoundSoundEnum::EntityCamelDeath => f.write_str("ENTITY_CAMEL_DEATH"),
            SoundSoundEnum::EntityCamelEat => f.write_str("ENTITY_CAMEL_EAT"),
            SoundSoundEnum::EntityCamelHurt => f.write_str("ENTITY_CAMEL_HURT"),
            SoundSoundEnum::EntityCamelSaddle => f.write_str("ENTITY_CAMEL_SADDLE"),
            SoundSoundEnum::EntityCamelSit => f.write_str("ENTITY_CAMEL_SIT"),
            SoundSoundEnum::EntityCamelStand => f.write_str("ENTITY_CAMEL_STAND"),
            SoundSoundEnum::EntityCamelStep => f.write_str("ENTITY_CAMEL_STEP"),
            SoundSoundEnum::EntityCamelStepSand => f.write_str("ENTITY_CAMEL_STEP_SAND"),
            SoundSoundEnum::EntityCatAmbient => f.write_str("ENTITY_CAT_AMBIENT"),
            SoundSoundEnum::EntityCatBegForFood => f.write_str("ENTITY_CAT_BEG_FOR_FOOD"),
            SoundSoundEnum::EntityCatDeath => f.write_str("ENTITY_CAT_DEATH"),
            SoundSoundEnum::EntityCatEat => f.write_str("ENTITY_CAT_EAT"),
            SoundSoundEnum::EntityCatHiss => f.write_str("ENTITY_CAT_HISS"),
            SoundSoundEnum::EntityCatHurt => f.write_str("ENTITY_CAT_HURT"),
            SoundSoundEnum::EntityCatPurr => f.write_str("ENTITY_CAT_PURR"),
            SoundSoundEnum::EntityCatPurreow => f.write_str("ENTITY_CAT_PURREOW"),
            SoundSoundEnum::EntityCatStrayAmbient => f.write_str("ENTITY_CAT_STRAY_AMBIENT"),
            SoundSoundEnum::EntityChickenAmbient => f.write_str("ENTITY_CHICKEN_AMBIENT"),
            SoundSoundEnum::EntityChickenDeath => f.write_str("ENTITY_CHICKEN_DEATH"),
            SoundSoundEnum::EntityChickenEgg => f.write_str("ENTITY_CHICKEN_EGG"),
            SoundSoundEnum::EntityChickenHurt => f.write_str("ENTITY_CHICKEN_HURT"),
            SoundSoundEnum::EntityChickenStep => f.write_str("ENTITY_CHICKEN_STEP"),
            SoundSoundEnum::EntityCodAmbient => f.write_str("ENTITY_COD_AMBIENT"),
            SoundSoundEnum::EntityCodDeath => f.write_str("ENTITY_COD_DEATH"),
            SoundSoundEnum::EntityCodFlop => f.write_str("ENTITY_COD_FLOP"),
            SoundSoundEnum::EntityCodHurt => f.write_str("ENTITY_COD_HURT"),
            SoundSoundEnum::EntityCowAmbient => f.write_str("ENTITY_COW_AMBIENT"),
            SoundSoundEnum::EntityCowDeath => f.write_str("ENTITY_COW_DEATH"),
            SoundSoundEnum::EntityCowHurt => f.write_str("ENTITY_COW_HURT"),
            SoundSoundEnum::EntityCowMilk => f.write_str("ENTITY_COW_MILK"),
            SoundSoundEnum::EntityCowStep => f.write_str("ENTITY_COW_STEP"),
            SoundSoundEnum::EntityCreeperDeath => f.write_str("ENTITY_CREEPER_DEATH"),
            SoundSoundEnum::EntityCreeperHurt => f.write_str("ENTITY_CREEPER_HURT"),
            SoundSoundEnum::EntityCreeperPrimed => f.write_str("ENTITY_CREEPER_PRIMED"),
            SoundSoundEnum::EntityDolphinAmbient => f.write_str("ENTITY_DOLPHIN_AMBIENT"),
            SoundSoundEnum::EntityDolphinAmbientWater => {
                f.write_str("ENTITY_DOLPHIN_AMBIENT_WATER")
            }
            SoundSoundEnum::EntityDolphinAttack => f.write_str("ENTITY_DOLPHIN_ATTACK"),
            SoundSoundEnum::EntityDolphinDeath => f.write_str("ENTITY_DOLPHIN_DEATH"),
            SoundSoundEnum::EntityDolphinEat => f.write_str("ENTITY_DOLPHIN_EAT"),
            SoundSoundEnum::EntityDolphinHurt => f.write_str("ENTITY_DOLPHIN_HURT"),
            SoundSoundEnum::EntityDolphinJump => f.write_str("ENTITY_DOLPHIN_JUMP"),
            SoundSoundEnum::EntityDolphinPlay => f.write_str("ENTITY_DOLPHIN_PLAY"),
            SoundSoundEnum::EntityDolphinSplash => f.write_str("ENTITY_DOLPHIN_SPLASH"),
            SoundSoundEnum::EntityDolphinSwim => f.write_str("ENTITY_DOLPHIN_SWIM"),
            SoundSoundEnum::EntityDonkeyAmbient => f.write_str("ENTITY_DONKEY_AMBIENT"),
            SoundSoundEnum::EntityDonkeyAngry => f.write_str("ENTITY_DONKEY_ANGRY"),
            SoundSoundEnum::EntityDonkeyChest => f.write_str("ENTITY_DONKEY_CHEST"),
            SoundSoundEnum::EntityDonkeyDeath => f.write_str("ENTITY_DONKEY_DEATH"),
            SoundSoundEnum::EntityDonkeyEat => f.write_str("ENTITY_DONKEY_EAT"),
            SoundSoundEnum::EntityDonkeyHurt => f.write_str("ENTITY_DONKEY_HURT"),
            SoundSoundEnum::EntityDragonFireballExplode => {
                f.write_str("ENTITY_DRAGON_FIREBALL_EXPLODE")
            }
            SoundSoundEnum::EntityDrownedAmbient => f.write_str("ENTITY_DROWNED_AMBIENT"),
            SoundSoundEnum::EntityDrownedAmbientWater => {
                f.write_str("ENTITY_DROWNED_AMBIENT_WATER")
            }
            SoundSoundEnum::EntityDrownedDeath => f.write_str("ENTITY_DROWNED_DEATH"),
            SoundSoundEnum::EntityDrownedDeathWater => f.write_str("ENTITY_DROWNED_DEATH_WATER"),
            SoundSoundEnum::EntityDrownedHurt => f.write_str("ENTITY_DROWNED_HURT"),
            SoundSoundEnum::EntityDrownedHurtWater => f.write_str("ENTITY_DROWNED_HURT_WATER"),
            SoundSoundEnum::EntityDrownedShoot => f.write_str("ENTITY_DROWNED_SHOOT"),
            SoundSoundEnum::EntityDrownedStep => f.write_str("ENTITY_DROWNED_STEP"),
            SoundSoundEnum::EntityDrownedSwim => f.write_str("ENTITY_DROWNED_SWIM"),
            SoundSoundEnum::EntityEggThrow => f.write_str("ENTITY_EGG_THROW"),
            SoundSoundEnum::EntityElderGuardianAmbient => {
                f.write_str("ENTITY_ELDER_GUARDIAN_AMBIENT")
            }
            SoundSoundEnum::EntityElderGuardianAmbientLand => {
                f.write_str("ENTITY_ELDER_GUARDIAN_AMBIENT_LAND")
            }
            SoundSoundEnum::EntityElderGuardianCurse => f.write_str("ENTITY_ELDER_GUARDIAN_CURSE"),
            SoundSoundEnum::EntityElderGuardianDeath => f.write_str("ENTITY_ELDER_GUARDIAN_DEATH"),
            SoundSoundEnum::EntityElderGuardianDeathLand => {
                f.write_str("ENTITY_ELDER_GUARDIAN_DEATH_LAND")
            }
            SoundSoundEnum::EntityElderGuardianFlop => f.write_str("ENTITY_ELDER_GUARDIAN_FLOP"),
            SoundSoundEnum::EntityElderGuardianHurt => f.write_str("ENTITY_ELDER_GUARDIAN_HURT"),
            SoundSoundEnum::EntityElderGuardianHurtLand => {
                f.write_str("ENTITY_ELDER_GUARDIAN_HURT_LAND")
            }
            SoundSoundEnum::EntityEndermanAmbient => f.write_str("ENTITY_ENDERMAN_AMBIENT"),
            SoundSoundEnum::EntityEndermanDeath => f.write_str("ENTITY_ENDERMAN_DEATH"),
            SoundSoundEnum::EntityEndermanHurt => f.write_str("ENTITY_ENDERMAN_HURT"),
            SoundSoundEnum::EntityEndermanScream => f.write_str("ENTITY_ENDERMAN_SCREAM"),
            SoundSoundEnum::EntityEndermanStare => f.write_str("ENTITY_ENDERMAN_STARE"),
            SoundSoundEnum::EntityEndermanTeleport => f.write_str("ENTITY_ENDERMAN_TELEPORT"),
            SoundSoundEnum::EntityEndermiteAmbient => f.write_str("ENTITY_ENDERMITE_AMBIENT"),
            SoundSoundEnum::EntityEndermiteDeath => f.write_str("ENTITY_ENDERMITE_DEATH"),
            SoundSoundEnum::EntityEndermiteHurt => f.write_str("ENTITY_ENDERMITE_HURT"),
            SoundSoundEnum::EntityEndermiteStep => f.write_str("ENTITY_ENDERMITE_STEP"),
            SoundSoundEnum::EntityEnderDragonAmbient => f.write_str("ENTITY_ENDER_DRAGON_AMBIENT"),
            SoundSoundEnum::EntityEnderDragonDeath => f.write_str("ENTITY_ENDER_DRAGON_DEATH"),
            SoundSoundEnum::EntityEnderDragonFlap => f.write_str("ENTITY_ENDER_DRAGON_FLAP"),
            SoundSoundEnum::EntityEnderDragonGrowl => f.write_str("ENTITY_ENDER_DRAGON_GROWL"),
            SoundSoundEnum::EntityEnderDragonHurt => f.write_str("ENTITY_ENDER_DRAGON_HURT"),
            SoundSoundEnum::EntityEnderDragonShoot => f.write_str("ENTITY_ENDER_DRAGON_SHOOT"),
            SoundSoundEnum::EntityEnderEyeDeath => f.write_str("ENTITY_ENDER_EYE_DEATH"),
            SoundSoundEnum::EntityEnderEyeLaunch => f.write_str("ENTITY_ENDER_EYE_LAUNCH"),
            SoundSoundEnum::EntityEnderPearlThrow => f.write_str("ENTITY_ENDER_PEARL_THROW"),
            SoundSoundEnum::EntityEvokerAmbient => f.write_str("ENTITY_EVOKER_AMBIENT"),
            SoundSoundEnum::EntityEvokerCastSpell => f.write_str("ENTITY_EVOKER_CAST_SPELL"),
            SoundSoundEnum::EntityEvokerCelebrate => f.write_str("ENTITY_EVOKER_CELEBRATE"),
            SoundSoundEnum::EntityEvokerDeath => f.write_str("ENTITY_EVOKER_DEATH"),
            SoundSoundEnum::EntityEvokerFangsAttack => f.write_str("ENTITY_EVOKER_FANGS_ATTACK"),
            SoundSoundEnum::EntityEvokerHurt => f.write_str("ENTITY_EVOKER_HURT"),
            SoundSoundEnum::EntityEvokerPrepareAttack => {
                f.write_str("ENTITY_EVOKER_PREPARE_ATTACK")
            }
            SoundSoundEnum::EntityEvokerPrepareSummon => {
                f.write_str("ENTITY_EVOKER_PREPARE_SUMMON")
            }
            SoundSoundEnum::EntityEvokerPrepareWololo => {
                f.write_str("ENTITY_EVOKER_PREPARE_WOLOLO")
            }
            SoundSoundEnum::EntityExperienceBottleThrow => {
                f.write_str("ENTITY_EXPERIENCE_BOTTLE_THROW")
            }
            SoundSoundEnum::EntityExperienceOrbPickup => {
                f.write_str("ENTITY_EXPERIENCE_ORB_PICKUP")
            }
            SoundSoundEnum::EntityFireworkRocketBlast => {
                f.write_str("ENTITY_FIREWORK_ROCKET_BLAST")
            }
            SoundSoundEnum::EntityFireworkRocketBlastFar => {
                f.write_str("ENTITY_FIREWORK_ROCKET_BLAST_FAR")
            }
            SoundSoundEnum::EntityFireworkRocketLargeBlast => {
                f.write_str("ENTITY_FIREWORK_ROCKET_LARGE_BLAST")
            }
            SoundSoundEnum::EntityFireworkRocketLargeBlastFar => {
                f.write_str("ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR")
            }
            SoundSoundEnum::EntityFireworkRocketLaunch => {
                f.write_str("ENTITY_FIREWORK_ROCKET_LAUNCH")
            }
            SoundSoundEnum::EntityFireworkRocketShoot => {
                f.write_str("ENTITY_FIREWORK_ROCKET_SHOOT")
            }
            SoundSoundEnum::EntityFireworkRocketTwinkle => {
                f.write_str("ENTITY_FIREWORK_ROCKET_TWINKLE")
            }
            SoundSoundEnum::EntityFireworkRocketTwinkleFar => {
                f.write_str("ENTITY_FIREWORK_ROCKET_TWINKLE_FAR")
            }
            SoundSoundEnum::EntityFishingBobberRetrieve => {
                f.write_str("ENTITY_FISHING_BOBBER_RETRIEVE")
            }
            SoundSoundEnum::EntityFishingBobberSplash => {
                f.write_str("ENTITY_FISHING_BOBBER_SPLASH")
            }
            SoundSoundEnum::EntityFishingBobberThrow => f.write_str("ENTITY_FISHING_BOBBER_THROW"),
            SoundSoundEnum::EntityFishSwim => f.write_str("ENTITY_FISH_SWIM"),
            SoundSoundEnum::EntityFoxAggro => f.write_str("ENTITY_FOX_AGGRO"),
            SoundSoundEnum::EntityFoxAmbient => f.write_str("ENTITY_FOX_AMBIENT"),
            SoundSoundEnum::EntityFoxBite => f.write_str("ENTITY_FOX_BITE"),
            SoundSoundEnum::EntityFoxDeath => f.write_str("ENTITY_FOX_DEATH"),
            SoundSoundEnum::EntityFoxEat => f.write_str("ENTITY_FOX_EAT"),
            SoundSoundEnum::EntityFoxHurt => f.write_str("ENTITY_FOX_HURT"),
            SoundSoundEnum::EntityFoxScreech => f.write_str("ENTITY_FOX_SCREECH"),
            SoundSoundEnum::EntityFoxSleep => f.write_str("ENTITY_FOX_SLEEP"),
            SoundSoundEnum::EntityFoxSniff => f.write_str("ENTITY_FOX_SNIFF"),
            SoundSoundEnum::EntityFoxSpit => f.write_str("ENTITY_FOX_SPIT"),
            SoundSoundEnum::EntityFoxTeleport => f.write_str("ENTITY_FOX_TELEPORT"),
            SoundSoundEnum::EntityFrogAmbient => f.write_str("ENTITY_FROG_AMBIENT"),
            SoundSoundEnum::EntityFrogDeath => f.write_str("ENTITY_FROG_DEATH"),
            SoundSoundEnum::EntityFrogEat => f.write_str("ENTITY_FROG_EAT"),
            SoundSoundEnum::EntityFrogHurt => f.write_str("ENTITY_FROG_HURT"),
            SoundSoundEnum::EntityFrogLaySpawn => f.write_str("ENTITY_FROG_LAY_SPAWN"),
            SoundSoundEnum::EntityFrogLongJump => f.write_str("ENTITY_FROG_LONG_JUMP"),
            SoundSoundEnum::EntityFrogStep => f.write_str("ENTITY_FROG_STEP"),
            SoundSoundEnum::EntityFrogTongue => f.write_str("ENTITY_FROG_TONGUE"),
            SoundSoundEnum::EntityGenericBigFall => f.write_str("ENTITY_GENERIC_BIG_FALL"),
            SoundSoundEnum::EntityGenericBurn => f.write_str("ENTITY_GENERIC_BURN"),
            SoundSoundEnum::EntityGenericDeath => f.write_str("ENTITY_GENERIC_DEATH"),
            SoundSoundEnum::EntityGenericDrink => f.write_str("ENTITY_GENERIC_DRINK"),
            SoundSoundEnum::EntityGenericEat => f.write_str("ENTITY_GENERIC_EAT"),
            SoundSoundEnum::EntityGenericExplode => f.write_str("ENTITY_GENERIC_EXPLODE"),
            SoundSoundEnum::EntityGenericExtinguishFire => {
                f.write_str("ENTITY_GENERIC_EXTINGUISH_FIRE")
            }
            SoundSoundEnum::EntityGenericHurt => f.write_str("ENTITY_GENERIC_HURT"),
            SoundSoundEnum::EntityGenericSmallFall => f.write_str("ENTITY_GENERIC_SMALL_FALL"),
            SoundSoundEnum::EntityGenericSplash => f.write_str("ENTITY_GENERIC_SPLASH"),
            SoundSoundEnum::EntityGenericSwim => f.write_str("ENTITY_GENERIC_SWIM"),
            SoundSoundEnum::EntityGhastAmbient => f.write_str("ENTITY_GHAST_AMBIENT"),
            SoundSoundEnum::EntityGhastDeath => f.write_str("ENTITY_GHAST_DEATH"),
            SoundSoundEnum::EntityGhastHurt => f.write_str("ENTITY_GHAST_HURT"),
            SoundSoundEnum::EntityGhastScream => f.write_str("ENTITY_GHAST_SCREAM"),
            SoundSoundEnum::EntityGhastShoot => f.write_str("ENTITY_GHAST_SHOOT"),
            SoundSoundEnum::EntityGhastWarn => f.write_str("ENTITY_GHAST_WARN"),
            SoundSoundEnum::EntityGlowItemFrameAddItem => {
                f.write_str("ENTITY_GLOW_ITEM_FRAME_ADD_ITEM")
            }
            SoundSoundEnum::EntityGlowItemFrameBreak => f.write_str("ENTITY_GLOW_ITEM_FRAME_BREAK"),
            SoundSoundEnum::EntityGlowItemFramePlace => f.write_str("ENTITY_GLOW_ITEM_FRAME_PLACE"),
            SoundSoundEnum::EntityGlowItemFrameRemoveItem => {
                f.write_str("ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM")
            }
            SoundSoundEnum::EntityGlowItemFrameRotateItem => {
                f.write_str("ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM")
            }
            SoundSoundEnum::EntityGlowSquidAmbient => f.write_str("ENTITY_GLOW_SQUID_AMBIENT"),
            SoundSoundEnum::EntityGlowSquidDeath => f.write_str("ENTITY_GLOW_SQUID_DEATH"),
            SoundSoundEnum::EntityGlowSquidHurt => f.write_str("ENTITY_GLOW_SQUID_HURT"),
            SoundSoundEnum::EntityGlowSquidSquirt => f.write_str("ENTITY_GLOW_SQUID_SQUIRT"),
            SoundSoundEnum::EntityGoatAmbient => f.write_str("ENTITY_GOAT_AMBIENT"),
            SoundSoundEnum::EntityGoatDeath => f.write_str("ENTITY_GOAT_DEATH"),
            SoundSoundEnum::EntityGoatEat => f.write_str("ENTITY_GOAT_EAT"),
            SoundSoundEnum::EntityGoatHornBreak => f.write_str("ENTITY_GOAT_HORN_BREAK"),
            SoundSoundEnum::EntityGoatHurt => f.write_str("ENTITY_GOAT_HURT"),
            SoundSoundEnum::EntityGoatLongJump => f.write_str("ENTITY_GOAT_LONG_JUMP"),
            SoundSoundEnum::EntityGoatMilk => f.write_str("ENTITY_GOAT_MILK"),
            SoundSoundEnum::EntityGoatPrepareRam => f.write_str("ENTITY_GOAT_PREPARE_RAM"),
            SoundSoundEnum::EntityGoatRamImpact => f.write_str("ENTITY_GOAT_RAM_IMPACT"),
            SoundSoundEnum::EntityGoatScreamingAmbient => {
                f.write_str("ENTITY_GOAT_SCREAMING_AMBIENT")
            }
            SoundSoundEnum::EntityGoatScreamingDeath => f.write_str("ENTITY_GOAT_SCREAMING_DEATH"),
            SoundSoundEnum::EntityGoatScreamingEat => f.write_str("ENTITY_GOAT_SCREAMING_EAT"),
            SoundSoundEnum::EntityGoatScreamingHornBreak => {
                f.write_str("ENTITY_GOAT_SCREAMING_HORN_BREAK")
            }
            SoundSoundEnum::EntityGoatScreamingHurt => f.write_str("ENTITY_GOAT_SCREAMING_HURT"),
            SoundSoundEnum::EntityGoatScreamingLongJump => {
                f.write_str("ENTITY_GOAT_SCREAMING_LONG_JUMP")
            }
            SoundSoundEnum::EntityGoatScreamingMilk => f.write_str("ENTITY_GOAT_SCREAMING_MILK"),
            SoundSoundEnum::EntityGoatScreamingPrepareRam => {
                f.write_str("ENTITY_GOAT_SCREAMING_PREPARE_RAM")
            }
            SoundSoundEnum::EntityGoatScreamingRamImpact => {
                f.write_str("ENTITY_GOAT_SCREAMING_RAM_IMPACT")
            }
            SoundSoundEnum::EntityGoatStep => f.write_str("ENTITY_GOAT_STEP"),
            SoundSoundEnum::EntityGuardianAmbient => f.write_str("ENTITY_GUARDIAN_AMBIENT"),
            SoundSoundEnum::EntityGuardianAmbientLand => {
                f.write_str("ENTITY_GUARDIAN_AMBIENT_LAND")
            }
            SoundSoundEnum::EntityGuardianAttack => f.write_str("ENTITY_GUARDIAN_ATTACK"),
            SoundSoundEnum::EntityGuardianDeath => f.write_str("ENTITY_GUARDIAN_DEATH"),
            SoundSoundEnum::EntityGuardianDeathLand => f.write_str("ENTITY_GUARDIAN_DEATH_LAND"),
            SoundSoundEnum::EntityGuardianFlop => f.write_str("ENTITY_GUARDIAN_FLOP"),
            SoundSoundEnum::EntityGuardianHurt => f.write_str("ENTITY_GUARDIAN_HURT"),
            SoundSoundEnum::EntityGuardianHurtLand => f.write_str("ENTITY_GUARDIAN_HURT_LAND"),
            SoundSoundEnum::EntityHoglinAmbient => f.write_str("ENTITY_HOGLIN_AMBIENT"),
            SoundSoundEnum::EntityHoglinAngry => f.write_str("ENTITY_HOGLIN_ANGRY"),
            SoundSoundEnum::EntityHoglinAttack => f.write_str("ENTITY_HOGLIN_ATTACK"),
            SoundSoundEnum::EntityHoglinConvertedToZombified => {
                f.write_str("ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED")
            }
            SoundSoundEnum::EntityHoglinDeath => f.write_str("ENTITY_HOGLIN_DEATH"),
            SoundSoundEnum::EntityHoglinHurt => f.write_str("ENTITY_HOGLIN_HURT"),
            SoundSoundEnum::EntityHoglinRetreat => f.write_str("ENTITY_HOGLIN_RETREAT"),
            SoundSoundEnum::EntityHoglinStep => f.write_str("ENTITY_HOGLIN_STEP"),
            SoundSoundEnum::EntityHorseAmbient => f.write_str("ENTITY_HORSE_AMBIENT"),
            SoundSoundEnum::EntityHorseAngry => f.write_str("ENTITY_HORSE_ANGRY"),
            SoundSoundEnum::EntityHorseArmor => f.write_str("ENTITY_HORSE_ARMOR"),
            SoundSoundEnum::EntityHorseBreathe => f.write_str("ENTITY_HORSE_BREATHE"),
            SoundSoundEnum::EntityHorseDeath => f.write_str("ENTITY_HORSE_DEATH"),
            SoundSoundEnum::EntityHorseEat => f.write_str("ENTITY_HORSE_EAT"),
            SoundSoundEnum::EntityHorseGallop => f.write_str("ENTITY_HORSE_GALLOP"),
            SoundSoundEnum::EntityHorseHurt => f.write_str("ENTITY_HORSE_HURT"),
            SoundSoundEnum::EntityHorseJump => f.write_str("ENTITY_HORSE_JUMP"),
            SoundSoundEnum::EntityHorseLand => f.write_str("ENTITY_HORSE_LAND"),
            SoundSoundEnum::EntityHorseSaddle => f.write_str("ENTITY_HORSE_SADDLE"),
            SoundSoundEnum::EntityHorseStep => f.write_str("ENTITY_HORSE_STEP"),
            SoundSoundEnum::EntityHorseStepWood => f.write_str("ENTITY_HORSE_STEP_WOOD"),
            SoundSoundEnum::EntityHostileBigFall => f.write_str("ENTITY_HOSTILE_BIG_FALL"),
            SoundSoundEnum::EntityHostileDeath => f.write_str("ENTITY_HOSTILE_DEATH"),
            SoundSoundEnum::EntityHostileHurt => f.write_str("ENTITY_HOSTILE_HURT"),
            SoundSoundEnum::EntityHostileSmallFall => f.write_str("ENTITY_HOSTILE_SMALL_FALL"),
            SoundSoundEnum::EntityHostileSplash => f.write_str("ENTITY_HOSTILE_SPLASH"),
            SoundSoundEnum::EntityHostileSwim => f.write_str("ENTITY_HOSTILE_SWIM"),
            SoundSoundEnum::EntityHuskAmbient => f.write_str("ENTITY_HUSK_AMBIENT"),
            SoundSoundEnum::EntityHuskConvertedToZombie => {
                f.write_str("ENTITY_HUSK_CONVERTED_TO_ZOMBIE")
            }
            SoundSoundEnum::EntityHuskDeath => f.write_str("ENTITY_HUSK_DEATH"),
            SoundSoundEnum::EntityHuskHurt => f.write_str("ENTITY_HUSK_HURT"),
            SoundSoundEnum::EntityHuskStep => f.write_str("ENTITY_HUSK_STEP"),
            SoundSoundEnum::EntityIllusionerAmbient => f.write_str("ENTITY_ILLUSIONER_AMBIENT"),
            SoundSoundEnum::EntityIllusionerCastSpell => {
                f.write_str("ENTITY_ILLUSIONER_CAST_SPELL")
            }
            SoundSoundEnum::EntityIllusionerDeath => f.write_str("ENTITY_ILLUSIONER_DEATH"),
            SoundSoundEnum::EntityIllusionerHurt => f.write_str("ENTITY_ILLUSIONER_HURT"),
            SoundSoundEnum::EntityIllusionerMirrorMove => {
                f.write_str("ENTITY_ILLUSIONER_MIRROR_MOVE")
            }
            SoundSoundEnum::EntityIllusionerPrepareBlindness => {
                f.write_str("ENTITY_ILLUSIONER_PREPARE_BLINDNESS")
            }
            SoundSoundEnum::EntityIllusionerPrepareMirror => {
                f.write_str("ENTITY_ILLUSIONER_PREPARE_MIRROR")
            }
            SoundSoundEnum::EntityIronGolemAttack => f.write_str("ENTITY_IRON_GOLEM_ATTACK"),
            SoundSoundEnum::EntityIronGolemDamage => f.write_str("ENTITY_IRON_GOLEM_DAMAGE"),
            SoundSoundEnum::EntityIronGolemDeath => f.write_str("ENTITY_IRON_GOLEM_DEATH"),
            SoundSoundEnum::EntityIronGolemHurt => f.write_str("ENTITY_IRON_GOLEM_HURT"),
            SoundSoundEnum::EntityIronGolemRepair => f.write_str("ENTITY_IRON_GOLEM_REPAIR"),
            SoundSoundEnum::EntityIronGolemStep => f.write_str("ENTITY_IRON_GOLEM_STEP"),
            SoundSoundEnum::EntityItemBreak => f.write_str("ENTITY_ITEM_BREAK"),
            SoundSoundEnum::EntityItemFrameAddItem => f.write_str("ENTITY_ITEM_FRAME_ADD_ITEM"),
            SoundSoundEnum::EntityItemFrameBreak => f.write_str("ENTITY_ITEM_FRAME_BREAK"),
            SoundSoundEnum::EntityItemFramePlace => f.write_str("ENTITY_ITEM_FRAME_PLACE"),
            SoundSoundEnum::EntityItemFrameRemoveItem => {
                f.write_str("ENTITY_ITEM_FRAME_REMOVE_ITEM")
            }
            SoundSoundEnum::EntityItemFrameRotateItem => {
                f.write_str("ENTITY_ITEM_FRAME_ROTATE_ITEM")
            }
            SoundSoundEnum::EntityItemPickup => f.write_str("ENTITY_ITEM_PICKUP"),
            SoundSoundEnum::EntityLeashKnotBreak => f.write_str("ENTITY_LEASH_KNOT_BREAK"),
            SoundSoundEnum::EntityLeashKnotPlace => f.write_str("ENTITY_LEASH_KNOT_PLACE"),
            SoundSoundEnum::EntityLightningBoltImpact => {
                f.write_str("ENTITY_LIGHTNING_BOLT_IMPACT")
            }
            SoundSoundEnum::EntityLightningBoltThunder => {
                f.write_str("ENTITY_LIGHTNING_BOLT_THUNDER")
            }
            SoundSoundEnum::EntityLingeringPotionThrow => {
                f.write_str("ENTITY_LINGERING_POTION_THROW")
            }
            SoundSoundEnum::EntityLlamaAmbient => f.write_str("ENTITY_LLAMA_AMBIENT"),
            SoundSoundEnum::EntityLlamaAngry => f.write_str("ENTITY_LLAMA_ANGRY"),
            SoundSoundEnum::EntityLlamaChest => f.write_str("ENTITY_LLAMA_CHEST"),
            SoundSoundEnum::EntityLlamaDeath => f.write_str("ENTITY_LLAMA_DEATH"),
            SoundSoundEnum::EntityLlamaEat => f.write_str("ENTITY_LLAMA_EAT"),
            SoundSoundEnum::EntityLlamaHurt => f.write_str("ENTITY_LLAMA_HURT"),
            SoundSoundEnum::EntityLlamaSpit => f.write_str("ENTITY_LLAMA_SPIT"),
            SoundSoundEnum::EntityLlamaStep => f.write_str("ENTITY_LLAMA_STEP"),
            SoundSoundEnum::EntityLlamaSwag => f.write_str("ENTITY_LLAMA_SWAG"),
            SoundSoundEnum::EntityMagmaCubeDeath => f.write_str("ENTITY_MAGMA_CUBE_DEATH"),
            SoundSoundEnum::EntityMagmaCubeDeathSmall => {
                f.write_str("ENTITY_MAGMA_CUBE_DEATH_SMALL")
            }
            SoundSoundEnum::EntityMagmaCubeHurt => f.write_str("ENTITY_MAGMA_CUBE_HURT"),
            SoundSoundEnum::EntityMagmaCubeHurtSmall => f.write_str("ENTITY_MAGMA_CUBE_HURT_SMALL"),
            SoundSoundEnum::EntityMagmaCubeJump => f.write_str("ENTITY_MAGMA_CUBE_JUMP"),
            SoundSoundEnum::EntityMagmaCubeSquish => f.write_str("ENTITY_MAGMA_CUBE_SQUISH"),
            SoundSoundEnum::EntityMagmaCubeSquishSmall => {
                f.write_str("ENTITY_MAGMA_CUBE_SQUISH_SMALL")
            }
            SoundSoundEnum::EntityMinecartInside => f.write_str("ENTITY_MINECART_INSIDE"),
            SoundSoundEnum::EntityMinecartInsideUnderwater => {
                f.write_str("ENTITY_MINECART_INSIDE_UNDERWATER")
            }
            SoundSoundEnum::EntityMinecartRiding => f.write_str("ENTITY_MINECART_RIDING"),
            SoundSoundEnum::EntityMooshroomConvert => f.write_str("ENTITY_MOOSHROOM_CONVERT"),
            SoundSoundEnum::EntityMooshroomEat => f.write_str("ENTITY_MOOSHROOM_EAT"),
            SoundSoundEnum::EntityMooshroomMilk => f.write_str("ENTITY_MOOSHROOM_MILK"),
            SoundSoundEnum::EntityMooshroomShear => f.write_str("ENTITY_MOOSHROOM_SHEAR"),
            SoundSoundEnum::EntityMooshroomSuspiciousMilk => {
                f.write_str("ENTITY_MOOSHROOM_SUSPICIOUS_MILK")
            }
            SoundSoundEnum::EntityMuleAmbient => f.write_str("ENTITY_MULE_AMBIENT"),
            SoundSoundEnum::EntityMuleAngry => f.write_str("ENTITY_MULE_ANGRY"),
            SoundSoundEnum::EntityMuleChest => f.write_str("ENTITY_MULE_CHEST"),
            SoundSoundEnum::EntityMuleDeath => f.write_str("ENTITY_MULE_DEATH"),
            SoundSoundEnum::EntityMuleEat => f.write_str("ENTITY_MULE_EAT"),
            SoundSoundEnum::EntityMuleHurt => f.write_str("ENTITY_MULE_HURT"),
            SoundSoundEnum::EntityOcelotAmbient => f.write_str("ENTITY_OCELOT_AMBIENT"),
            SoundSoundEnum::EntityOcelotDeath => f.write_str("ENTITY_OCELOT_DEATH"),
            SoundSoundEnum::EntityOcelotHurt => f.write_str("ENTITY_OCELOT_HURT"),
            SoundSoundEnum::EntityPaintingBreak => f.write_str("ENTITY_PAINTING_BREAK"),
            SoundSoundEnum::EntityPaintingPlace => f.write_str("ENTITY_PAINTING_PLACE"),
            SoundSoundEnum::EntityPandaAggressiveAmbient => {
                f.write_str("ENTITY_PANDA_AGGRESSIVE_AMBIENT")
            }
            SoundSoundEnum::EntityPandaAmbient => f.write_str("ENTITY_PANDA_AMBIENT"),
            SoundSoundEnum::EntityPandaBite => f.write_str("ENTITY_PANDA_BITE"),
            SoundSoundEnum::EntityPandaCantBreed => f.write_str("ENTITY_PANDA_CANT_BREED"),
            SoundSoundEnum::EntityPandaDeath => f.write_str("ENTITY_PANDA_DEATH"),
            SoundSoundEnum::EntityPandaEat => f.write_str("ENTITY_PANDA_EAT"),
            SoundSoundEnum::EntityPandaHurt => f.write_str("ENTITY_PANDA_HURT"),
            SoundSoundEnum::EntityPandaPreSneeze => f.write_str("ENTITY_PANDA_PRE_SNEEZE"),
            SoundSoundEnum::EntityPandaSneeze => f.write_str("ENTITY_PANDA_SNEEZE"),
            SoundSoundEnum::EntityPandaStep => f.write_str("ENTITY_PANDA_STEP"),
            SoundSoundEnum::EntityPandaWorriedAmbient => {
                f.write_str("ENTITY_PANDA_WORRIED_AMBIENT")
            }
            SoundSoundEnum::EntityParrotAmbient => f.write_str("ENTITY_PARROT_AMBIENT"),
            SoundSoundEnum::EntityParrotDeath => f.write_str("ENTITY_PARROT_DEATH"),
            SoundSoundEnum::EntityParrotEat => f.write_str("ENTITY_PARROT_EAT"),
            SoundSoundEnum::EntityParrotFly => f.write_str("ENTITY_PARROT_FLY"),
            SoundSoundEnum::EntityParrotHurt => f.write_str("ENTITY_PARROT_HURT"),
            SoundSoundEnum::EntityParrotImitateBlaze => f.write_str("ENTITY_PARROT_IMITATE_BLAZE"),
            SoundSoundEnum::EntityParrotImitateCreeper => {
                f.write_str("ENTITY_PARROT_IMITATE_CREEPER")
            }
            SoundSoundEnum::EntityParrotImitateDrowned => {
                f.write_str("ENTITY_PARROT_IMITATE_DROWNED")
            }
            SoundSoundEnum::EntityParrotImitateElderGuardian => {
                f.write_str("ENTITY_PARROT_IMITATE_ELDER_GUARDIAN")
            }
            SoundSoundEnum::EntityParrotImitateEndermite => {
                f.write_str("ENTITY_PARROT_IMITATE_ENDERMITE")
            }
            SoundSoundEnum::EntityParrotImitateEnderDragon => {
                f.write_str("ENTITY_PARROT_IMITATE_ENDER_DRAGON")
            }
            SoundSoundEnum::EntityParrotImitateEvoker => {
                f.write_str("ENTITY_PARROT_IMITATE_EVOKER")
            }
            SoundSoundEnum::EntityParrotImitateGhast => f.write_str("ENTITY_PARROT_IMITATE_GHAST"),
            SoundSoundEnum::EntityParrotImitateGuardian => {
                f.write_str("ENTITY_PARROT_IMITATE_GUARDIAN")
            }
            SoundSoundEnum::EntityParrotImitateHoglin => {
                f.write_str("ENTITY_PARROT_IMITATE_HOGLIN")
            }
            SoundSoundEnum::EntityParrotImitateHusk => f.write_str("ENTITY_PARROT_IMITATE_HUSK"),
            SoundSoundEnum::EntityParrotImitateIllusioner => {
                f.write_str("ENTITY_PARROT_IMITATE_ILLUSIONER")
            }
            SoundSoundEnum::EntityParrotImitateMagmaCube => {
                f.write_str("ENTITY_PARROT_IMITATE_MAGMA_CUBE")
            }
            SoundSoundEnum::EntityParrotImitatePhantom => {
                f.write_str("ENTITY_PARROT_IMITATE_PHANTOM")
            }
            SoundSoundEnum::EntityParrotImitatePiglin => {
                f.write_str("ENTITY_PARROT_IMITATE_PIGLIN")
            }
            SoundSoundEnum::EntityParrotImitatePiglinBrute => {
                f.write_str("ENTITY_PARROT_IMITATE_PIGLIN_BRUTE")
            }
            SoundSoundEnum::EntityParrotImitatePillager => {
                f.write_str("ENTITY_PARROT_IMITATE_PILLAGER")
            }
            SoundSoundEnum::EntityParrotImitateRavager => {
                f.write_str("ENTITY_PARROT_IMITATE_RAVAGER")
            }
            SoundSoundEnum::EntityParrotImitateShulker => {
                f.write_str("ENTITY_PARROT_IMITATE_SHULKER")
            }
            SoundSoundEnum::EntityParrotImitateSilverfish => {
                f.write_str("ENTITY_PARROT_IMITATE_SILVERFISH")
            }
            SoundSoundEnum::EntityParrotImitateSkeleton => {
                f.write_str("ENTITY_PARROT_IMITATE_SKELETON")
            }
            SoundSoundEnum::EntityParrotImitateSlime => f.write_str("ENTITY_PARROT_IMITATE_SLIME"),
            SoundSoundEnum::EntityParrotImitateSpider => {
                f.write_str("ENTITY_PARROT_IMITATE_SPIDER")
            }
            SoundSoundEnum::EntityParrotImitateStray => f.write_str("ENTITY_PARROT_IMITATE_STRAY"),
            SoundSoundEnum::EntityParrotImitateVex => f.write_str("ENTITY_PARROT_IMITATE_VEX"),
            SoundSoundEnum::EntityParrotImitateVindicator => {
                f.write_str("ENTITY_PARROT_IMITATE_VINDICATOR")
            }
            SoundSoundEnum::EntityParrotImitateWarden => {
                f.write_str("ENTITY_PARROT_IMITATE_WARDEN")
            }
            SoundSoundEnum::EntityParrotImitateWitch => f.write_str("ENTITY_PARROT_IMITATE_WITCH"),
            SoundSoundEnum::EntityParrotImitateWither => {
                f.write_str("ENTITY_PARROT_IMITATE_WITHER")
            }
            SoundSoundEnum::EntityParrotImitateWitherSkeleton => {
                f.write_str("ENTITY_PARROT_IMITATE_WITHER_SKELETON")
            }
            SoundSoundEnum::EntityParrotImitateZoglin => {
                f.write_str("ENTITY_PARROT_IMITATE_ZOGLIN")
            }
            SoundSoundEnum::EntityParrotImitateZombie => {
                f.write_str("ENTITY_PARROT_IMITATE_ZOMBIE")
            }
            SoundSoundEnum::EntityParrotImitateZombieVillager => {
                f.write_str("ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER")
            }
            SoundSoundEnum::EntityParrotStep => f.write_str("ENTITY_PARROT_STEP"),
            SoundSoundEnum::EntityPhantomAmbient => f.write_str("ENTITY_PHANTOM_AMBIENT"),
            SoundSoundEnum::EntityPhantomBite => f.write_str("ENTITY_PHANTOM_BITE"),
            SoundSoundEnum::EntityPhantomDeath => f.write_str("ENTITY_PHANTOM_DEATH"),
            SoundSoundEnum::EntityPhantomFlap => f.write_str("ENTITY_PHANTOM_FLAP"),
            SoundSoundEnum::EntityPhantomHurt => f.write_str("ENTITY_PHANTOM_HURT"),
            SoundSoundEnum::EntityPhantomSwoop => f.write_str("ENTITY_PHANTOM_SWOOP"),
            SoundSoundEnum::EntityPiglinAdmiringItem => f.write_str("ENTITY_PIGLIN_ADMIRING_ITEM"),
            SoundSoundEnum::EntityPiglinAmbient => f.write_str("ENTITY_PIGLIN_AMBIENT"),
            SoundSoundEnum::EntityPiglinAngry => f.write_str("ENTITY_PIGLIN_ANGRY"),
            SoundSoundEnum::EntityPiglinBruteAmbient => f.write_str("ENTITY_PIGLIN_BRUTE_AMBIENT"),
            SoundSoundEnum::EntityPiglinBruteAngry => f.write_str("ENTITY_PIGLIN_BRUTE_ANGRY"),
            SoundSoundEnum::EntityPiglinBruteConvertedToZombified => {
                f.write_str("ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED")
            }
            SoundSoundEnum::EntityPiglinBruteDeath => f.write_str("ENTITY_PIGLIN_BRUTE_DEATH"),
            SoundSoundEnum::EntityPiglinBruteHurt => f.write_str("ENTITY_PIGLIN_BRUTE_HURT"),
            SoundSoundEnum::EntityPiglinBruteStep => f.write_str("ENTITY_PIGLIN_BRUTE_STEP"),
            SoundSoundEnum::EntityPiglinCelebrate => f.write_str("ENTITY_PIGLIN_CELEBRATE"),
            SoundSoundEnum::EntityPiglinConvertedToZombified => {
                f.write_str("ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED")
            }
            SoundSoundEnum::EntityPiglinDeath => f.write_str("ENTITY_PIGLIN_DEATH"),
            SoundSoundEnum::EntityPiglinHurt => f.write_str("ENTITY_PIGLIN_HURT"),
            SoundSoundEnum::EntityPiglinJealous => f.write_str("ENTITY_PIGLIN_JEALOUS"),
            SoundSoundEnum::EntityPiglinRetreat => f.write_str("ENTITY_PIGLIN_RETREAT"),
            SoundSoundEnum::EntityPiglinStep => f.write_str("ENTITY_PIGLIN_STEP"),
            SoundSoundEnum::EntityPigAmbient => f.write_str("ENTITY_PIG_AMBIENT"),
            SoundSoundEnum::EntityPigDeath => f.write_str("ENTITY_PIG_DEATH"),
            SoundSoundEnum::EntityPigHurt => f.write_str("ENTITY_PIG_HURT"),
            SoundSoundEnum::EntityPigSaddle => f.write_str("ENTITY_PIG_SADDLE"),
            SoundSoundEnum::EntityPigStep => f.write_str("ENTITY_PIG_STEP"),
            SoundSoundEnum::EntityPillagerAmbient => f.write_str("ENTITY_PILLAGER_AMBIENT"),
            SoundSoundEnum::EntityPillagerCelebrate => f.write_str("ENTITY_PILLAGER_CELEBRATE"),
            SoundSoundEnum::EntityPillagerDeath => f.write_str("ENTITY_PILLAGER_DEATH"),
            SoundSoundEnum::EntityPillagerHurt => f.write_str("ENTITY_PILLAGER_HURT"),
            SoundSoundEnum::EntityPlayerAttackCrit => f.write_str("ENTITY_PLAYER_ATTACK_CRIT"),
            SoundSoundEnum::EntityPlayerAttackKnockback => {
                f.write_str("ENTITY_PLAYER_ATTACK_KNOCKBACK")
            }
            SoundSoundEnum::EntityPlayerAttackNodamage => {
                f.write_str("ENTITY_PLAYER_ATTACK_NODAMAGE")
            }
            SoundSoundEnum::EntityPlayerAttackStrong => f.write_str("ENTITY_PLAYER_ATTACK_STRONG"),
            SoundSoundEnum::EntityPlayerAttackSweep => f.write_str("ENTITY_PLAYER_ATTACK_SWEEP"),
            SoundSoundEnum::EntityPlayerAttackWeak => f.write_str("ENTITY_PLAYER_ATTACK_WEAK"),
            SoundSoundEnum::EntityPlayerBigFall => f.write_str("ENTITY_PLAYER_BIG_FALL"),
            SoundSoundEnum::EntityPlayerBreath => f.write_str("ENTITY_PLAYER_BREATH"),
            SoundSoundEnum::EntityPlayerBurp => f.write_str("ENTITY_PLAYER_BURP"),
            SoundSoundEnum::EntityPlayerDeath => f.write_str("ENTITY_PLAYER_DEATH"),
            SoundSoundEnum::EntityPlayerHurt => f.write_str("ENTITY_PLAYER_HURT"),
            SoundSoundEnum::EntityPlayerHurtDrown => f.write_str("ENTITY_PLAYER_HURT_DROWN"),
            SoundSoundEnum::EntityPlayerHurtFreeze => f.write_str("ENTITY_PLAYER_HURT_FREEZE"),
            SoundSoundEnum::EntityPlayerHurtOnFire => f.write_str("ENTITY_PLAYER_HURT_ON_FIRE"),
            SoundSoundEnum::EntityPlayerHurtSweetBerryBush => {
                f.write_str("ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH")
            }
            SoundSoundEnum::EntityPlayerLevelup => f.write_str("ENTITY_PLAYER_LEVELUP"),
            SoundSoundEnum::EntityPlayerSmallFall => f.write_str("ENTITY_PLAYER_SMALL_FALL"),
            SoundSoundEnum::EntityPlayerSplash => f.write_str("ENTITY_PLAYER_SPLASH"),
            SoundSoundEnum::EntityPlayerSplashHighSpeed => {
                f.write_str("ENTITY_PLAYER_SPLASH_HIGH_SPEED")
            }
            SoundSoundEnum::EntityPlayerSwim => f.write_str("ENTITY_PLAYER_SWIM"),
            SoundSoundEnum::EntityPolarBearAmbient => f.write_str("ENTITY_POLAR_BEAR_AMBIENT"),
            SoundSoundEnum::EntityPolarBearAmbientBaby => {
                f.write_str("ENTITY_POLAR_BEAR_AMBIENT_BABY")
            }
            SoundSoundEnum::EntityPolarBearDeath => f.write_str("ENTITY_POLAR_BEAR_DEATH"),
            SoundSoundEnum::EntityPolarBearHurt => f.write_str("ENTITY_POLAR_BEAR_HURT"),
            SoundSoundEnum::EntityPolarBearStep => f.write_str("ENTITY_POLAR_BEAR_STEP"),
            SoundSoundEnum::EntityPolarBearWarning => f.write_str("ENTITY_POLAR_BEAR_WARNING"),
            SoundSoundEnum::EntityPufferFishAmbient => f.write_str("ENTITY_PUFFER_FISH_AMBIENT"),
            SoundSoundEnum::EntityPufferFishBlowOut => f.write_str("ENTITY_PUFFER_FISH_BLOW_OUT"),
            SoundSoundEnum::EntityPufferFishBlowUp => f.write_str("ENTITY_PUFFER_FISH_BLOW_UP"),
            SoundSoundEnum::EntityPufferFishDeath => f.write_str("ENTITY_PUFFER_FISH_DEATH"),
            SoundSoundEnum::EntityPufferFishFlop => f.write_str("ENTITY_PUFFER_FISH_FLOP"),
            SoundSoundEnum::EntityPufferFishHurt => f.write_str("ENTITY_PUFFER_FISH_HURT"),
            SoundSoundEnum::EntityPufferFishSting => f.write_str("ENTITY_PUFFER_FISH_STING"),
            SoundSoundEnum::EntityRabbitAmbient => f.write_str("ENTITY_RABBIT_AMBIENT"),
            SoundSoundEnum::EntityRabbitAttack => f.write_str("ENTITY_RABBIT_ATTACK"),
            SoundSoundEnum::EntityRabbitDeath => f.write_str("ENTITY_RABBIT_DEATH"),
            SoundSoundEnum::EntityRabbitHurt => f.write_str("ENTITY_RABBIT_HURT"),
            SoundSoundEnum::EntityRabbitJump => f.write_str("ENTITY_RABBIT_JUMP"),
            SoundSoundEnum::EntityRavagerAmbient => f.write_str("ENTITY_RAVAGER_AMBIENT"),
            SoundSoundEnum::EntityRavagerAttack => f.write_str("ENTITY_RAVAGER_ATTACK"),
            SoundSoundEnum::EntityRavagerCelebrate => f.write_str("ENTITY_RAVAGER_CELEBRATE"),
            SoundSoundEnum::EntityRavagerDeath => f.write_str("ENTITY_RAVAGER_DEATH"),
            SoundSoundEnum::EntityRavagerHurt => f.write_str("ENTITY_RAVAGER_HURT"),
            SoundSoundEnum::EntityRavagerRoar => f.write_str("ENTITY_RAVAGER_ROAR"),
            SoundSoundEnum::EntityRavagerStep => f.write_str("ENTITY_RAVAGER_STEP"),
            SoundSoundEnum::EntityRavagerStunned => f.write_str("ENTITY_RAVAGER_STUNNED"),
            SoundSoundEnum::EntitySalmonAmbient => f.write_str("ENTITY_SALMON_AMBIENT"),
            SoundSoundEnum::EntitySalmonDeath => f.write_str("ENTITY_SALMON_DEATH"),
            SoundSoundEnum::EntitySalmonFlop => f.write_str("ENTITY_SALMON_FLOP"),
            SoundSoundEnum::EntitySalmonHurt => f.write_str("ENTITY_SALMON_HURT"),
            SoundSoundEnum::EntitySheepAmbient => f.write_str("ENTITY_SHEEP_AMBIENT"),
            SoundSoundEnum::EntitySheepDeath => f.write_str("ENTITY_SHEEP_DEATH"),
            SoundSoundEnum::EntitySheepHurt => f.write_str("ENTITY_SHEEP_HURT"),
            SoundSoundEnum::EntitySheepShear => f.write_str("ENTITY_SHEEP_SHEAR"),
            SoundSoundEnum::EntitySheepStep => f.write_str("ENTITY_SHEEP_STEP"),
            SoundSoundEnum::EntityShulkerAmbient => f.write_str("ENTITY_SHULKER_AMBIENT"),
            SoundSoundEnum::EntityShulkerBulletHit => f.write_str("ENTITY_SHULKER_BULLET_HIT"),
            SoundSoundEnum::EntityShulkerBulletHurt => f.write_str("ENTITY_SHULKER_BULLET_HURT"),
            SoundSoundEnum::EntityShulkerClose => f.write_str("ENTITY_SHULKER_CLOSE"),
            SoundSoundEnum::EntityShulkerDeath => f.write_str("ENTITY_SHULKER_DEATH"),
            SoundSoundEnum::EntityShulkerHurt => f.write_str("ENTITY_SHULKER_HURT"),
            SoundSoundEnum::EntityShulkerHurtClosed => f.write_str("ENTITY_SHULKER_HURT_CLOSED"),
            SoundSoundEnum::EntityShulkerOpen => f.write_str("ENTITY_SHULKER_OPEN"),
            SoundSoundEnum::EntityShulkerShoot => f.write_str("ENTITY_SHULKER_SHOOT"),
            SoundSoundEnum::EntityShulkerTeleport => f.write_str("ENTITY_SHULKER_TELEPORT"),
            SoundSoundEnum::EntitySilverfishAmbient => f.write_str("ENTITY_SILVERFISH_AMBIENT"),
            SoundSoundEnum::EntitySilverfishDeath => f.write_str("ENTITY_SILVERFISH_DEATH"),
            SoundSoundEnum::EntitySilverfishHurt => f.write_str("ENTITY_SILVERFISH_HURT"),
            SoundSoundEnum::EntitySilverfishStep => f.write_str("ENTITY_SILVERFISH_STEP"),
            SoundSoundEnum::EntitySkeletonAmbient => f.write_str("ENTITY_SKELETON_AMBIENT"),
            SoundSoundEnum::EntitySkeletonConvertedToStray => {
                f.write_str("ENTITY_SKELETON_CONVERTED_TO_STRAY")
            }
            SoundSoundEnum::EntitySkeletonDeath => f.write_str("ENTITY_SKELETON_DEATH"),
            SoundSoundEnum::EntitySkeletonHorseAmbient => {
                f.write_str("ENTITY_SKELETON_HORSE_AMBIENT")
            }
            SoundSoundEnum::EntitySkeletonHorseAmbientWater => {
                f.write_str("ENTITY_SKELETON_HORSE_AMBIENT_WATER")
            }
            SoundSoundEnum::EntitySkeletonHorseDeath => f.write_str("ENTITY_SKELETON_HORSE_DEATH"),
            SoundSoundEnum::EntitySkeletonHorseGallopWater => {
                f.write_str("ENTITY_SKELETON_HORSE_GALLOP_WATER")
            }
            SoundSoundEnum::EntitySkeletonHorseHurt => f.write_str("ENTITY_SKELETON_HORSE_HURT"),
            SoundSoundEnum::EntitySkeletonHorseJumpWater => {
                f.write_str("ENTITY_SKELETON_HORSE_JUMP_WATER")
            }
            SoundSoundEnum::EntitySkeletonHorseStepWater => {
                f.write_str("ENTITY_SKELETON_HORSE_STEP_WATER")
            }
            SoundSoundEnum::EntitySkeletonHorseSwim => f.write_str("ENTITY_SKELETON_HORSE_SWIM"),
            SoundSoundEnum::EntitySkeletonHurt => f.write_str("ENTITY_SKELETON_HURT"),
            SoundSoundEnum::EntitySkeletonShoot => f.write_str("ENTITY_SKELETON_SHOOT"),
            SoundSoundEnum::EntitySkeletonStep => f.write_str("ENTITY_SKELETON_STEP"),
            SoundSoundEnum::EntitySlimeAttack => f.write_str("ENTITY_SLIME_ATTACK"),
            SoundSoundEnum::EntitySlimeDeath => f.write_str("ENTITY_SLIME_DEATH"),
            SoundSoundEnum::EntitySlimeDeathSmall => f.write_str("ENTITY_SLIME_DEATH_SMALL"),
            SoundSoundEnum::EntitySlimeHurt => f.write_str("ENTITY_SLIME_HURT"),
            SoundSoundEnum::EntitySlimeHurtSmall => f.write_str("ENTITY_SLIME_HURT_SMALL"),
            SoundSoundEnum::EntitySlimeJump => f.write_str("ENTITY_SLIME_JUMP"),
            SoundSoundEnum::EntitySlimeJumpSmall => f.write_str("ENTITY_SLIME_JUMP_SMALL"),
            SoundSoundEnum::EntitySlimeSquish => f.write_str("ENTITY_SLIME_SQUISH"),
            SoundSoundEnum::EntitySlimeSquishSmall => f.write_str("ENTITY_SLIME_SQUISH_SMALL"),
            SoundSoundEnum::EntitySnifferDeath => f.write_str("ENTITY_SNIFFER_DEATH"),
            SoundSoundEnum::EntitySnifferDigging => f.write_str("ENTITY_SNIFFER_DIGGING"),
            SoundSoundEnum::EntitySnifferDiggingStop => f.write_str("ENTITY_SNIFFER_DIGGING_STOP"),
            SoundSoundEnum::EntitySnifferDropSeed => f.write_str("ENTITY_SNIFFER_DROP_SEED"),
            SoundSoundEnum::EntitySnifferEat => f.write_str("ENTITY_SNIFFER_EAT"),
            SoundSoundEnum::EntitySnifferHappy => f.write_str("ENTITY_SNIFFER_HAPPY"),
            SoundSoundEnum::EntitySnifferHurt => f.write_str("ENTITY_SNIFFER_HURT"),
            SoundSoundEnum::EntitySnifferIdle => f.write_str("ENTITY_SNIFFER_IDLE"),
            SoundSoundEnum::EntitySnifferScenting => f.write_str("ENTITY_SNIFFER_SCENTING"),
            SoundSoundEnum::EntitySnifferSearching => f.write_str("ENTITY_SNIFFER_SEARCHING"),
            SoundSoundEnum::EntitySnifferSniffing => f.write_str("ENTITY_SNIFFER_SNIFFING"),
            SoundSoundEnum::EntitySnifferStep => f.write_str("ENTITY_SNIFFER_STEP"),
            SoundSoundEnum::EntitySnowballThrow => f.write_str("ENTITY_SNOWBALL_THROW"),
            SoundSoundEnum::EntitySnowGolemAmbient => f.write_str("ENTITY_SNOW_GOLEM_AMBIENT"),
            SoundSoundEnum::EntitySnowGolemDeath => f.write_str("ENTITY_SNOW_GOLEM_DEATH"),
            SoundSoundEnum::EntitySnowGolemHurt => f.write_str("ENTITY_SNOW_GOLEM_HURT"),
            SoundSoundEnum::EntitySnowGolemShear => f.write_str("ENTITY_SNOW_GOLEM_SHEAR"),
            SoundSoundEnum::EntitySnowGolemShoot => f.write_str("ENTITY_SNOW_GOLEM_SHOOT"),
            SoundSoundEnum::EntitySpiderAmbient => f.write_str("ENTITY_SPIDER_AMBIENT"),
            SoundSoundEnum::EntitySpiderDeath => f.write_str("ENTITY_SPIDER_DEATH"),
            SoundSoundEnum::EntitySpiderHurt => f.write_str("ENTITY_SPIDER_HURT"),
            SoundSoundEnum::EntitySpiderStep => f.write_str("ENTITY_SPIDER_STEP"),
            SoundSoundEnum::EntitySplashPotionBreak => f.write_str("ENTITY_SPLASH_POTION_BREAK"),
            SoundSoundEnum::EntitySplashPotionThrow => f.write_str("ENTITY_SPLASH_POTION_THROW"),
            SoundSoundEnum::EntitySquidAmbient => f.write_str("ENTITY_SQUID_AMBIENT"),
            SoundSoundEnum::EntitySquidDeath => f.write_str("ENTITY_SQUID_DEATH"),
            SoundSoundEnum::EntitySquidHurt => f.write_str("ENTITY_SQUID_HURT"),
            SoundSoundEnum::EntitySquidSquirt => f.write_str("ENTITY_SQUID_SQUIRT"),
            SoundSoundEnum::EntityStrayAmbient => f.write_str("ENTITY_STRAY_AMBIENT"),
            SoundSoundEnum::EntityStrayDeath => f.write_str("ENTITY_STRAY_DEATH"),
            SoundSoundEnum::EntityStrayHurt => f.write_str("ENTITY_STRAY_HURT"),
            SoundSoundEnum::EntityStrayStep => f.write_str("ENTITY_STRAY_STEP"),
            SoundSoundEnum::EntityStriderAmbient => f.write_str("ENTITY_STRIDER_AMBIENT"),
            SoundSoundEnum::EntityStriderDeath => f.write_str("ENTITY_STRIDER_DEATH"),
            SoundSoundEnum::EntityStriderEat => f.write_str("ENTITY_STRIDER_EAT"),
            SoundSoundEnum::EntityStriderHappy => f.write_str("ENTITY_STRIDER_HAPPY"),
            SoundSoundEnum::EntityStriderHurt => f.write_str("ENTITY_STRIDER_HURT"),
            SoundSoundEnum::EntityStriderRetreat => f.write_str("ENTITY_STRIDER_RETREAT"),
            SoundSoundEnum::EntityStriderSaddle => f.write_str("ENTITY_STRIDER_SADDLE"),
            SoundSoundEnum::EntityStriderStep => f.write_str("ENTITY_STRIDER_STEP"),
            SoundSoundEnum::EntityStriderStepLava => f.write_str("ENTITY_STRIDER_STEP_LAVA"),
            SoundSoundEnum::EntityTadpoleDeath => f.write_str("ENTITY_TADPOLE_DEATH"),
            SoundSoundEnum::EntityTadpoleFlop => f.write_str("ENTITY_TADPOLE_FLOP"),
            SoundSoundEnum::EntityTadpoleGrowUp => f.write_str("ENTITY_TADPOLE_GROW_UP"),
            SoundSoundEnum::EntityTadpoleHurt => f.write_str("ENTITY_TADPOLE_HURT"),
            SoundSoundEnum::EntityTntPrimed => f.write_str("ENTITY_TNT_PRIMED"),
            SoundSoundEnum::EntityTropicalFishAmbient => {
                f.write_str("ENTITY_TROPICAL_FISH_AMBIENT")
            }
            SoundSoundEnum::EntityTropicalFishDeath => f.write_str("ENTITY_TROPICAL_FISH_DEATH"),
            SoundSoundEnum::EntityTropicalFishFlop => f.write_str("ENTITY_TROPICAL_FISH_FLOP"),
            SoundSoundEnum::EntityTropicalFishHurt => f.write_str("ENTITY_TROPICAL_FISH_HURT"),
            SoundSoundEnum::EntityTurtleAmbientLand => f.write_str("ENTITY_TURTLE_AMBIENT_LAND"),
            SoundSoundEnum::EntityTurtleDeath => f.write_str("ENTITY_TURTLE_DEATH"),
            SoundSoundEnum::EntityTurtleDeathBaby => f.write_str("ENTITY_TURTLE_DEATH_BABY"),
            SoundSoundEnum::EntityTurtleEggBreak => f.write_str("ENTITY_TURTLE_EGG_BREAK"),
            SoundSoundEnum::EntityTurtleEggCrack => f.write_str("ENTITY_TURTLE_EGG_CRACK"),
            SoundSoundEnum::EntityTurtleEggHatch => f.write_str("ENTITY_TURTLE_EGG_HATCH"),
            SoundSoundEnum::EntityTurtleHurt => f.write_str("ENTITY_TURTLE_HURT"),
            SoundSoundEnum::EntityTurtleHurtBaby => f.write_str("ENTITY_TURTLE_HURT_BABY"),
            SoundSoundEnum::EntityTurtleLayEgg => f.write_str("ENTITY_TURTLE_LAY_EGG"),
            SoundSoundEnum::EntityTurtleShamble => f.write_str("ENTITY_TURTLE_SHAMBLE"),
            SoundSoundEnum::EntityTurtleShambleBaby => f.write_str("ENTITY_TURTLE_SHAMBLE_BABY"),
            SoundSoundEnum::EntityTurtleSwim => f.write_str("ENTITY_TURTLE_SWIM"),
            SoundSoundEnum::EntityVexAmbient => f.write_str("ENTITY_VEX_AMBIENT"),
            SoundSoundEnum::EntityVexCharge => f.write_str("ENTITY_VEX_CHARGE"),
            SoundSoundEnum::EntityVexDeath => f.write_str("ENTITY_VEX_DEATH"),
            SoundSoundEnum::EntityVexHurt => f.write_str("ENTITY_VEX_HURT"),
            SoundSoundEnum::EntityVillagerAmbient => f.write_str("ENTITY_VILLAGER_AMBIENT"),
            SoundSoundEnum::EntityVillagerCelebrate => f.write_str("ENTITY_VILLAGER_CELEBRATE"),
            SoundSoundEnum::EntityVillagerDeath => f.write_str("ENTITY_VILLAGER_DEATH"),
            SoundSoundEnum::EntityVillagerHurt => f.write_str("ENTITY_VILLAGER_HURT"),
            SoundSoundEnum::EntityVillagerNo => f.write_str("ENTITY_VILLAGER_NO"),
            SoundSoundEnum::EntityVillagerTrade => f.write_str("ENTITY_VILLAGER_TRADE"),
            SoundSoundEnum::EntityVillagerWorkArmorer => {
                f.write_str("ENTITY_VILLAGER_WORK_ARMORER")
            }
            SoundSoundEnum::EntityVillagerWorkButcher => {
                f.write_str("ENTITY_VILLAGER_WORK_BUTCHER")
            }
            SoundSoundEnum::EntityVillagerWorkCartographer => {
                f.write_str("ENTITY_VILLAGER_WORK_CARTOGRAPHER")
            }
            SoundSoundEnum::EntityVillagerWorkCleric => f.write_str("ENTITY_VILLAGER_WORK_CLERIC"),
            SoundSoundEnum::EntityVillagerWorkFarmer => f.write_str("ENTITY_VILLAGER_WORK_FARMER"),
            SoundSoundEnum::EntityVillagerWorkFisherman => {
                f.write_str("ENTITY_VILLAGER_WORK_FISHERMAN")
            }
            SoundSoundEnum::EntityVillagerWorkFletcher => {
                f.write_str("ENTITY_VILLAGER_WORK_FLETCHER")
            }
            SoundSoundEnum::EntityVillagerWorkLeatherworker => {
                f.write_str("ENTITY_VILLAGER_WORK_LEATHERWORKER")
            }
            SoundSoundEnum::EntityVillagerWorkLibrarian => {
                f.write_str("ENTITY_VILLAGER_WORK_LIBRARIAN")
            }
            SoundSoundEnum::EntityVillagerWorkMason => f.write_str("ENTITY_VILLAGER_WORK_MASON"),
            SoundSoundEnum::EntityVillagerWorkShepherd => {
                f.write_str("ENTITY_VILLAGER_WORK_SHEPHERD")
            }
            SoundSoundEnum::EntityVillagerWorkToolsmith => {
                f.write_str("ENTITY_VILLAGER_WORK_TOOLSMITH")
            }
            SoundSoundEnum::EntityVillagerWorkWeaponsmith => {
                f.write_str("ENTITY_VILLAGER_WORK_WEAPONSMITH")
            }
            SoundSoundEnum::EntityVillagerYes => f.write_str("ENTITY_VILLAGER_YES"),
            SoundSoundEnum::EntityVindicatorAmbient => f.write_str("ENTITY_VINDICATOR_AMBIENT"),
            SoundSoundEnum::EntityVindicatorCelebrate => f.write_str("ENTITY_VINDICATOR_CELEBRATE"),
            SoundSoundEnum::EntityVindicatorDeath => f.write_str("ENTITY_VINDICATOR_DEATH"),
            SoundSoundEnum::EntityVindicatorHurt => f.write_str("ENTITY_VINDICATOR_HURT"),
            SoundSoundEnum::EntityWanderingTraderAmbient => {
                f.write_str("ENTITY_WANDERING_TRADER_AMBIENT")
            }
            SoundSoundEnum::EntityWanderingTraderDeath => {
                f.write_str("ENTITY_WANDERING_TRADER_DEATH")
            }
            SoundSoundEnum::EntityWanderingTraderDisappeared => {
                f.write_str("ENTITY_WANDERING_TRADER_DISAPPEARED")
            }
            SoundSoundEnum::EntityWanderingTraderDrinkMilk => {
                f.write_str("ENTITY_WANDERING_TRADER_DRINK_MILK")
            }
            SoundSoundEnum::EntityWanderingTraderDrinkPotion => {
                f.write_str("ENTITY_WANDERING_TRADER_DRINK_POTION")
            }
            SoundSoundEnum::EntityWanderingTraderHurt => {
                f.write_str("ENTITY_WANDERING_TRADER_HURT")
            }
            SoundSoundEnum::EntityWanderingTraderNo => f.write_str("ENTITY_WANDERING_TRADER_NO"),
            SoundSoundEnum::EntityWanderingTraderReappeared => {
                f.write_str("ENTITY_WANDERING_TRADER_REAPPEARED")
            }
            SoundSoundEnum::EntityWanderingTraderTrade => {
                f.write_str("ENTITY_WANDERING_TRADER_TRADE")
            }
            SoundSoundEnum::EntityWanderingTraderYes => f.write_str("ENTITY_WANDERING_TRADER_YES"),
            SoundSoundEnum::EntityWardenAgitated => f.write_str("ENTITY_WARDEN_AGITATED"),
            SoundSoundEnum::EntityWardenAmbient => f.write_str("ENTITY_WARDEN_AMBIENT"),
            SoundSoundEnum::EntityWardenAngry => f.write_str("ENTITY_WARDEN_ANGRY"),
            SoundSoundEnum::EntityWardenAttackImpact => f.write_str("ENTITY_WARDEN_ATTACK_IMPACT"),
            SoundSoundEnum::EntityWardenDeath => f.write_str("ENTITY_WARDEN_DEATH"),
            SoundSoundEnum::EntityWardenDig => f.write_str("ENTITY_WARDEN_DIG"),
            SoundSoundEnum::EntityWardenEmerge => f.write_str("ENTITY_WARDEN_EMERGE"),
            SoundSoundEnum::EntityWardenHeartbeat => f.write_str("ENTITY_WARDEN_HEARTBEAT"),
            SoundSoundEnum::EntityWardenHurt => f.write_str("ENTITY_WARDEN_HURT"),
            SoundSoundEnum::EntityWardenListening => f.write_str("ENTITY_WARDEN_LISTENING"),
            SoundSoundEnum::EntityWardenListeningAngry => {
                f.write_str("ENTITY_WARDEN_LISTENING_ANGRY")
            }
            SoundSoundEnum::EntityWardenNearbyClose => f.write_str("ENTITY_WARDEN_NEARBY_CLOSE"),
            SoundSoundEnum::EntityWardenNearbyCloser => f.write_str("ENTITY_WARDEN_NEARBY_CLOSER"),
            SoundSoundEnum::EntityWardenNearbyClosest => {
                f.write_str("ENTITY_WARDEN_NEARBY_CLOSEST")
            }
            SoundSoundEnum::EntityWardenRoar => f.write_str("ENTITY_WARDEN_ROAR"),
            SoundSoundEnum::EntityWardenSniff => f.write_str("ENTITY_WARDEN_SNIFF"),
            SoundSoundEnum::EntityWardenSonicBoom => f.write_str("ENTITY_WARDEN_SONIC_BOOM"),
            SoundSoundEnum::EntityWardenSonicCharge => f.write_str("ENTITY_WARDEN_SONIC_CHARGE"),
            SoundSoundEnum::EntityWardenStep => f.write_str("ENTITY_WARDEN_STEP"),
            SoundSoundEnum::EntityWardenTendrilClicks => {
                f.write_str("ENTITY_WARDEN_TENDRIL_CLICKS")
            }
            SoundSoundEnum::EntityWitchAmbient => f.write_str("ENTITY_WITCH_AMBIENT"),
            SoundSoundEnum::EntityWitchCelebrate => f.write_str("ENTITY_WITCH_CELEBRATE"),
            SoundSoundEnum::EntityWitchDeath => f.write_str("ENTITY_WITCH_DEATH"),
            SoundSoundEnum::EntityWitchDrink => f.write_str("ENTITY_WITCH_DRINK"),
            SoundSoundEnum::EntityWitchHurt => f.write_str("ENTITY_WITCH_HURT"),
            SoundSoundEnum::EntityWitchThrow => f.write_str("ENTITY_WITCH_THROW"),
            SoundSoundEnum::EntityWitherAmbient => f.write_str("ENTITY_WITHER_AMBIENT"),
            SoundSoundEnum::EntityWitherBreakBlock => f.write_str("ENTITY_WITHER_BREAK_BLOCK"),
            SoundSoundEnum::EntityWitherDeath => f.write_str("ENTITY_WITHER_DEATH"),
            SoundSoundEnum::EntityWitherHurt => f.write_str("ENTITY_WITHER_HURT"),
            SoundSoundEnum::EntityWitherShoot => f.write_str("ENTITY_WITHER_SHOOT"),
            SoundSoundEnum::EntityWitherSkeletonAmbient => {
                f.write_str("ENTITY_WITHER_SKELETON_AMBIENT")
            }
            SoundSoundEnum::EntityWitherSkeletonDeath => {
                f.write_str("ENTITY_WITHER_SKELETON_DEATH")
            }
            SoundSoundEnum::EntityWitherSkeletonHurt => f.write_str("ENTITY_WITHER_SKELETON_HURT"),
            SoundSoundEnum::EntityWitherSkeletonStep => f.write_str("ENTITY_WITHER_SKELETON_STEP"),
            SoundSoundEnum::EntityWitherSpawn => f.write_str("ENTITY_WITHER_SPAWN"),
            SoundSoundEnum::EntityWolfAmbient => f.write_str("ENTITY_WOLF_AMBIENT"),
            SoundSoundEnum::EntityWolfDeath => f.write_str("ENTITY_WOLF_DEATH"),
            SoundSoundEnum::EntityWolfGrowl => f.write_str("ENTITY_WOLF_GROWL"),
            SoundSoundEnum::EntityWolfHowl => f.write_str("ENTITY_WOLF_HOWL"),
            SoundSoundEnum::EntityWolfHurt => f.write_str("ENTITY_WOLF_HURT"),
            SoundSoundEnum::EntityWolfPant => f.write_str("ENTITY_WOLF_PANT"),
            SoundSoundEnum::EntityWolfShake => f.write_str("ENTITY_WOLF_SHAKE"),
            SoundSoundEnum::EntityWolfStep => f.write_str("ENTITY_WOLF_STEP"),
            SoundSoundEnum::EntityWolfWhine => f.write_str("ENTITY_WOLF_WHINE"),
            SoundSoundEnum::EntityZoglinAmbient => f.write_str("ENTITY_ZOGLIN_AMBIENT"),
            SoundSoundEnum::EntityZoglinAngry => f.write_str("ENTITY_ZOGLIN_ANGRY"),
            SoundSoundEnum::EntityZoglinAttack => f.write_str("ENTITY_ZOGLIN_ATTACK"),
            SoundSoundEnum::EntityZoglinDeath => f.write_str("ENTITY_ZOGLIN_DEATH"),
            SoundSoundEnum::EntityZoglinHurt => f.write_str("ENTITY_ZOGLIN_HURT"),
            SoundSoundEnum::EntityZoglinStep => f.write_str("ENTITY_ZOGLIN_STEP"),
            SoundSoundEnum::EntityZombieAmbient => f.write_str("ENTITY_ZOMBIE_AMBIENT"),
            SoundSoundEnum::EntityZombieAttackIronDoor => {
                f.write_str("ENTITY_ZOMBIE_ATTACK_IRON_DOOR")
            }
            SoundSoundEnum::EntityZombieAttackWoodenDoor => {
                f.write_str("ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR")
            }
            SoundSoundEnum::EntityZombieBreakWoodenDoor => {
                f.write_str("ENTITY_ZOMBIE_BREAK_WOODEN_DOOR")
            }
            SoundSoundEnum::EntityZombieConvertedToDrowned => {
                f.write_str("ENTITY_ZOMBIE_CONVERTED_TO_DROWNED")
            }
            SoundSoundEnum::EntityZombieDeath => f.write_str("ENTITY_ZOMBIE_DEATH"),
            SoundSoundEnum::EntityZombieDestroyEgg => f.write_str("ENTITY_ZOMBIE_DESTROY_EGG"),
            SoundSoundEnum::EntityZombieHorseAmbient => f.write_str("ENTITY_ZOMBIE_HORSE_AMBIENT"),
            SoundSoundEnum::EntityZombieHorseDeath => f.write_str("ENTITY_ZOMBIE_HORSE_DEATH"),
            SoundSoundEnum::EntityZombieHorseHurt => f.write_str("ENTITY_ZOMBIE_HORSE_HURT"),
            SoundSoundEnum::EntityZombieHurt => f.write_str("ENTITY_ZOMBIE_HURT"),
            SoundSoundEnum::EntityZombieInfect => f.write_str("ENTITY_ZOMBIE_INFECT"),
            SoundSoundEnum::EntityZombieStep => f.write_str("ENTITY_ZOMBIE_STEP"),
            SoundSoundEnum::EntityZombieVillagerAmbient => {
                f.write_str("ENTITY_ZOMBIE_VILLAGER_AMBIENT")
            }
            SoundSoundEnum::EntityZombieVillagerConverted => {
                f.write_str("ENTITY_ZOMBIE_VILLAGER_CONVERTED")
            }
            SoundSoundEnum::EntityZombieVillagerCure => f.write_str("ENTITY_ZOMBIE_VILLAGER_CURE"),
            SoundSoundEnum::EntityZombieVillagerDeath => {
                f.write_str("ENTITY_ZOMBIE_VILLAGER_DEATH")
            }
            SoundSoundEnum::EntityZombieVillagerHurt => f.write_str("ENTITY_ZOMBIE_VILLAGER_HURT"),
            SoundSoundEnum::EntityZombieVillagerStep => f.write_str("ENTITY_ZOMBIE_VILLAGER_STEP"),
            SoundSoundEnum::EntityZombifiedPiglinAmbient => {
                f.write_str("ENTITY_ZOMBIFIED_PIGLIN_AMBIENT")
            }
            SoundSoundEnum::EntityZombifiedPiglinAngry => {
                f.write_str("ENTITY_ZOMBIFIED_PIGLIN_ANGRY")
            }
            SoundSoundEnum::EntityZombifiedPiglinDeath => {
                f.write_str("ENTITY_ZOMBIFIED_PIGLIN_DEATH")
            }
            SoundSoundEnum::EntityZombifiedPiglinHurt => {
                f.write_str("ENTITY_ZOMBIFIED_PIGLIN_HURT")
            }
            SoundSoundEnum::EventRaidHorn => f.write_str("EVENT_RAID_HORN"),
            SoundSoundEnum::IntentionallyEmpty => f.write_str("INTENTIONALLY_EMPTY"),
            SoundSoundEnum::ItemArmorEquipChain => f.write_str("ITEM_ARMOR_EQUIP_CHAIN"),
            SoundSoundEnum::ItemArmorEquipDiamond => f.write_str("ITEM_ARMOR_EQUIP_DIAMOND"),
            SoundSoundEnum::ItemArmorEquipElytra => f.write_str("ITEM_ARMOR_EQUIP_ELYTRA"),
            SoundSoundEnum::ItemArmorEquipGeneric => f.write_str("ITEM_ARMOR_EQUIP_GENERIC"),
            SoundSoundEnum::ItemArmorEquipGold => f.write_str("ITEM_ARMOR_EQUIP_GOLD"),
            SoundSoundEnum::ItemArmorEquipIron => f.write_str("ITEM_ARMOR_EQUIP_IRON"),
            SoundSoundEnum::ItemArmorEquipLeather => f.write_str("ITEM_ARMOR_EQUIP_LEATHER"),
            SoundSoundEnum::ItemArmorEquipNetherite => f.write_str("ITEM_ARMOR_EQUIP_NETHERITE"),
            SoundSoundEnum::ItemArmorEquipTurtle => f.write_str("ITEM_ARMOR_EQUIP_TURTLE"),
            SoundSoundEnum::ItemAxeScrape => f.write_str("ITEM_AXE_SCRAPE"),
            SoundSoundEnum::ItemAxeStrip => f.write_str("ITEM_AXE_STRIP"),
            SoundSoundEnum::ItemAxeWaxOff => f.write_str("ITEM_AXE_WAX_OFF"),
            SoundSoundEnum::ItemBoneMealUse => f.write_str("ITEM_BONE_MEAL_USE"),
            SoundSoundEnum::ItemBookPageTurn => f.write_str("ITEM_BOOK_PAGE_TURN"),
            SoundSoundEnum::ItemBookPut => f.write_str("ITEM_BOOK_PUT"),
            SoundSoundEnum::ItemBottleEmpty => f.write_str("ITEM_BOTTLE_EMPTY"),
            SoundSoundEnum::ItemBottleFill => f.write_str("ITEM_BOTTLE_FILL"),
            SoundSoundEnum::ItemBottleFillDragonbreath => {
                f.write_str("ITEM_BOTTLE_FILL_DRAGONBREATH")
            }
            SoundSoundEnum::ItemBrushBrushingGeneric => f.write_str("ITEM_BRUSH_BRUSHING_GENERIC"),
            SoundSoundEnum::ItemBrushBrushingGravel => f.write_str("ITEM_BRUSH_BRUSHING_GRAVEL"),
            SoundSoundEnum::ItemBrushBrushingGravelComplete => {
                f.write_str("ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE")
            }
            SoundSoundEnum::ItemBrushBrushingSand => f.write_str("ITEM_BRUSH_BRUSHING_SAND"),
            SoundSoundEnum::ItemBrushBrushingSandComplete => {
                f.write_str("ITEM_BRUSH_BRUSHING_SAND_COMPLETE")
            }
            SoundSoundEnum::ItemBucketEmpty => f.write_str("ITEM_BUCKET_EMPTY"),
            SoundSoundEnum::ItemBucketEmptyAxolotl => f.write_str("ITEM_BUCKET_EMPTY_AXOLOTL"),
            SoundSoundEnum::ItemBucketEmptyFish => f.write_str("ITEM_BUCKET_EMPTY_FISH"),
            SoundSoundEnum::ItemBucketEmptyLava => f.write_str("ITEM_BUCKET_EMPTY_LAVA"),
            SoundSoundEnum::ItemBucketEmptyPowderSnow => {
                f.write_str("ITEM_BUCKET_EMPTY_POWDER_SNOW")
            }
            SoundSoundEnum::ItemBucketEmptyTadpole => f.write_str("ITEM_BUCKET_EMPTY_TADPOLE"),
            SoundSoundEnum::ItemBucketFill => f.write_str("ITEM_BUCKET_FILL"),
            SoundSoundEnum::ItemBucketFillAxolotl => f.write_str("ITEM_BUCKET_FILL_AXOLOTL"),
            SoundSoundEnum::ItemBucketFillFish => f.write_str("ITEM_BUCKET_FILL_FISH"),
            SoundSoundEnum::ItemBucketFillLava => f.write_str("ITEM_BUCKET_FILL_LAVA"),
            SoundSoundEnum::ItemBucketFillPowderSnow => f.write_str("ITEM_BUCKET_FILL_POWDER_SNOW"),
            SoundSoundEnum::ItemBucketFillTadpole => f.write_str("ITEM_BUCKET_FILL_TADPOLE"),
            SoundSoundEnum::ItemBundleDropContents => f.write_str("ITEM_BUNDLE_DROP_CONTENTS"),
            SoundSoundEnum::ItemBundleInsert => f.write_str("ITEM_BUNDLE_INSERT"),
            SoundSoundEnum::ItemBundleRemoveOne => f.write_str("ITEM_BUNDLE_REMOVE_ONE"),
            SoundSoundEnum::ItemChorusFruitTeleport => f.write_str("ITEM_CHORUS_FRUIT_TELEPORT"),
            SoundSoundEnum::ItemCropPlant => f.write_str("ITEM_CROP_PLANT"),
            SoundSoundEnum::ItemCrossbowHit => f.write_str("ITEM_CROSSBOW_HIT"),
            SoundSoundEnum::ItemCrossbowLoadingEnd => f.write_str("ITEM_CROSSBOW_LOADING_END"),
            SoundSoundEnum::ItemCrossbowLoadingMiddle => {
                f.write_str("ITEM_CROSSBOW_LOADING_MIDDLE")
            }
            SoundSoundEnum::ItemCrossbowLoadingStart => f.write_str("ITEM_CROSSBOW_LOADING_START"),
            SoundSoundEnum::ItemCrossbowQuickCharge1 => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_1"),
            SoundSoundEnum::ItemCrossbowQuickCharge2 => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_2"),
            SoundSoundEnum::ItemCrossbowQuickCharge3 => f.write_str("ITEM_CROSSBOW_QUICK_CHARGE_3"),
            SoundSoundEnum::ItemCrossbowShoot => f.write_str("ITEM_CROSSBOW_SHOOT"),
            SoundSoundEnum::ItemDyeUse => f.write_str("ITEM_DYE_USE"),
            SoundSoundEnum::ItemElytraFlying => f.write_str("ITEM_ELYTRA_FLYING"),
            SoundSoundEnum::ItemFirechargeUse => f.write_str("ITEM_FIRECHARGE_USE"),
            SoundSoundEnum::ItemFlintandsteelUse => f.write_str("ITEM_FLINTANDSTEEL_USE"),
            SoundSoundEnum::ItemGlowInkSacUse => f.write_str("ITEM_GLOW_INK_SAC_USE"),
            SoundSoundEnum::ItemGoatHornPlay => f.write_str("ITEM_GOAT_HORN_PLAY"),
            SoundSoundEnum::ItemGoatHornSound0 => f.write_str("ITEM_GOAT_HORN_SOUND_0"),
            SoundSoundEnum::ItemGoatHornSound1 => f.write_str("ITEM_GOAT_HORN_SOUND_1"),
            SoundSoundEnum::ItemGoatHornSound2 => f.write_str("ITEM_GOAT_HORN_SOUND_2"),
            SoundSoundEnum::ItemGoatHornSound3 => f.write_str("ITEM_GOAT_HORN_SOUND_3"),
            SoundSoundEnum::ItemGoatHornSound4 => f.write_str("ITEM_GOAT_HORN_SOUND_4"),
            SoundSoundEnum::ItemGoatHornSound5 => f.write_str("ITEM_GOAT_HORN_SOUND_5"),
            SoundSoundEnum::ItemGoatHornSound6 => f.write_str("ITEM_GOAT_HORN_SOUND_6"),
            SoundSoundEnum::ItemGoatHornSound7 => f.write_str("ITEM_GOAT_HORN_SOUND_7"),
            SoundSoundEnum::ItemHoeTill => f.write_str("ITEM_HOE_TILL"),
            SoundSoundEnum::ItemHoneycombWaxOn => f.write_str("ITEM_HONEYCOMB_WAX_ON"),
            SoundSoundEnum::ItemHoneyBottleDrink => f.write_str("ITEM_HONEY_BOTTLE_DRINK"),
            SoundSoundEnum::ItemInkSacUse => f.write_str("ITEM_INK_SAC_USE"),
            SoundSoundEnum::ItemLodestoneCompassLock => f.write_str("ITEM_LODESTONE_COMPASS_LOCK"),
            SoundSoundEnum::ItemNetherWartPlant => f.write_str("ITEM_NETHER_WART_PLANT"),
            SoundSoundEnum::ItemShieldBlock => f.write_str("ITEM_SHIELD_BLOCK"),
            SoundSoundEnum::ItemShieldBreak => f.write_str("ITEM_SHIELD_BREAK"),
            SoundSoundEnum::ItemShovelFlatten => f.write_str("ITEM_SHOVEL_FLATTEN"),
            SoundSoundEnum::ItemSpyglassStopUsing => f.write_str("ITEM_SPYGLASS_STOP_USING"),
            SoundSoundEnum::ItemSpyglassUse => f.write_str("ITEM_SPYGLASS_USE"),
            SoundSoundEnum::ItemTotemUse => f.write_str("ITEM_TOTEM_USE"),
            SoundSoundEnum::ItemTridentHit => f.write_str("ITEM_TRIDENT_HIT"),
            SoundSoundEnum::ItemTridentHitGround => f.write_str("ITEM_TRIDENT_HIT_GROUND"),
            SoundSoundEnum::ItemTridentReturn => f.write_str("ITEM_TRIDENT_RETURN"),
            SoundSoundEnum::ItemTridentRiptide1 => f.write_str("ITEM_TRIDENT_RIPTIDE_1"),
            SoundSoundEnum::ItemTridentRiptide2 => f.write_str("ITEM_TRIDENT_RIPTIDE_2"),
            SoundSoundEnum::ItemTridentRiptide3 => f.write_str("ITEM_TRIDENT_RIPTIDE_3"),
            SoundSoundEnum::ItemTridentThrow => f.write_str("ITEM_TRIDENT_THROW"),
            SoundSoundEnum::ItemTridentThunder => f.write_str("ITEM_TRIDENT_THUNDER"),
            SoundSoundEnum::MusicCreative => f.write_str("MUSIC_CREATIVE"),
            SoundSoundEnum::MusicCredits => f.write_str("MUSIC_CREDITS"),
            SoundSoundEnum::MusicDisc11 => f.write_str("MUSIC_DISC_11"),
            SoundSoundEnum::MusicDisc13 => f.write_str("MUSIC_DISC_13"),
            SoundSoundEnum::MusicDisc5 => f.write_str("MUSIC_DISC_5"),
            SoundSoundEnum::MusicDiscBlocks => f.write_str("MUSIC_DISC_BLOCKS"),
            SoundSoundEnum::MusicDiscCat => f.write_str("MUSIC_DISC_CAT"),
            SoundSoundEnum::MusicDiscChirp => f.write_str("MUSIC_DISC_CHIRP"),
            SoundSoundEnum::MusicDiscFar => f.write_str("MUSIC_DISC_FAR"),
            SoundSoundEnum::MusicDiscMall => f.write_str("MUSIC_DISC_MALL"),
            SoundSoundEnum::MusicDiscMellohi => f.write_str("MUSIC_DISC_MELLOHI"),
            SoundSoundEnum::MusicDiscOtherside => f.write_str("MUSIC_DISC_OTHERSIDE"),
            SoundSoundEnum::MusicDiscPigstep => f.write_str("MUSIC_DISC_PIGSTEP"),
            SoundSoundEnum::MusicDiscRelic => f.write_str("MUSIC_DISC_RELIC"),
            SoundSoundEnum::MusicDiscStal => f.write_str("MUSIC_DISC_STAL"),
            SoundSoundEnum::MusicDiscStrad => f.write_str("MUSIC_DISC_STRAD"),
            SoundSoundEnum::MusicDiscWait => f.write_str("MUSIC_DISC_WAIT"),
            SoundSoundEnum::MusicDiscWard => f.write_str("MUSIC_DISC_WARD"),
            SoundSoundEnum::MusicDragon => f.write_str("MUSIC_DRAGON"),
            SoundSoundEnum::MusicEnd => f.write_str("MUSIC_END"),
            SoundSoundEnum::MusicGame => f.write_str("MUSIC_GAME"),
            SoundSoundEnum::MusicMenu => f.write_str("MUSIC_MENU"),
            SoundSoundEnum::MusicNetherBasaltDeltas => f.write_str("MUSIC_NETHER_BASALT_DELTAS"),
            SoundSoundEnum::MusicNetherCrimsonForest => f.write_str("MUSIC_NETHER_CRIMSON_FOREST"),
            SoundSoundEnum::MusicNetherNetherWastes => f.write_str("MUSIC_NETHER_NETHER_WASTES"),
            SoundSoundEnum::MusicNetherSoulSandValley => {
                f.write_str("MUSIC_NETHER_SOUL_SAND_VALLEY")
            }
            SoundSoundEnum::MusicNetherWarpedForest => f.write_str("MUSIC_NETHER_WARPED_FOREST"),
            SoundSoundEnum::MusicOverworldBadlands => f.write_str("MUSIC_OVERWORLD_BADLANDS"),
            SoundSoundEnum::MusicOverworldBambooJungle => {
                f.write_str("MUSIC_OVERWORLD_BAMBOO_JUNGLE")
            }
            SoundSoundEnum::MusicOverworldCherryGrove => {
                f.write_str("MUSIC_OVERWORLD_CHERRY_GROVE")
            }
            SoundSoundEnum::MusicOverworldDeepDark => f.write_str("MUSIC_OVERWORLD_DEEP_DARK"),
            SoundSoundEnum::MusicOverworldDesert => f.write_str("MUSIC_OVERWORLD_DESERT"),
            SoundSoundEnum::MusicOverworldDripstoneCaves => {
                f.write_str("MUSIC_OVERWORLD_DRIPSTONE_CAVES")
            }
            SoundSoundEnum::MusicOverworldFlowerForest => {
                f.write_str("MUSIC_OVERWORLD_FLOWER_FOREST")
            }
            SoundSoundEnum::MusicOverworldForest => f.write_str("MUSIC_OVERWORLD_FOREST"),
            SoundSoundEnum::MusicOverworldFrozenPeaks => {
                f.write_str("MUSIC_OVERWORLD_FROZEN_PEAKS")
            }
            SoundSoundEnum::MusicOverworldGrove => f.write_str("MUSIC_OVERWORLD_GROVE"),
            SoundSoundEnum::MusicOverworldJaggedPeaks => {
                f.write_str("MUSIC_OVERWORLD_JAGGED_PEAKS")
            }
            SoundSoundEnum::MusicOverworldJungle => f.write_str("MUSIC_OVERWORLD_JUNGLE"),
            SoundSoundEnum::MusicOverworldLushCaves => f.write_str("MUSIC_OVERWORLD_LUSH_CAVES"),
            SoundSoundEnum::MusicOverworldMeadow => f.write_str("MUSIC_OVERWORLD_MEADOW"),
            SoundSoundEnum::MusicOverworldOldGrowthTaiga => {
                f.write_str("MUSIC_OVERWORLD_OLD_GROWTH_TAIGA")
            }
            SoundSoundEnum::MusicOverworldSnowySlopes => {
                f.write_str("MUSIC_OVERWORLD_SNOWY_SLOPES")
            }
            SoundSoundEnum::MusicOverworldSparseJungle => {
                f.write_str("MUSIC_OVERWORLD_SPARSE_JUNGLE")
            }
            SoundSoundEnum::MusicOverworldStonyPeaks => f.write_str("MUSIC_OVERWORLD_STONY_PEAKS"),
            SoundSoundEnum::MusicOverworldSwamp => f.write_str("MUSIC_OVERWORLD_SWAMP"),
            SoundSoundEnum::MusicUnderWater => f.write_str("MUSIC_UNDER_WATER"),
            SoundSoundEnum::ParticleSoulEscape => f.write_str("PARTICLE_SOUL_ESCAPE"),
            SoundSoundEnum::UiButtonClick => f.write_str("UI_BUTTON_CLICK"),
            SoundSoundEnum::UiCartographyTableTakeResult => {
                f.write_str("UI_CARTOGRAPHY_TABLE_TAKE_RESULT")
            }
            SoundSoundEnum::UiLoomSelectPattern => f.write_str("UI_LOOM_SELECT_PATTERN"),
            SoundSoundEnum::UiLoomTakeResult => f.write_str("UI_LOOM_TAKE_RESULT"),
            SoundSoundEnum::UiStonecutterSelectRecipe => {
                f.write_str("UI_STONECUTTER_SELECT_RECIPE")
            }
            SoundSoundEnum::UiStonecutterTakeResult => f.write_str("UI_STONECUTTER_TAKE_RESULT"),
            SoundSoundEnum::UiToastChallengeComplete => f.write_str("UI_TOAST_CHALLENGE_COMPLETE"),
            SoundSoundEnum::UiToastIn => f.write_str("UI_TOAST_IN"),
            SoundSoundEnum::UiToastOut => f.write_str("UI_TOAST_OUT"),
            SoundSoundEnum::WeatherRain => f.write_str("WEATHER_RAIN"),
            SoundSoundEnum::WeatherRainAbove => f.write_str("WEATHER_RAIN_ABOVE"),
        }
    }
}
impl<'mc> std::fmt::Display for SoundSound<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct SoundSound<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub SoundSoundEnum,
);
impl<'mc> std::ops::Deref for SoundSound<'mc> {
    type Target = SoundSoundEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for SoundSound<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for SoundSound<'mc> {
    type Enum = SoundSoundEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate SoundSound from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Sound$Sound")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a SoundSound object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> SoundSound<'mc> {
    pub const AMBIENT_BASALT_DELTAS_ADDITIONS: SoundSoundEnum =
        SoundSoundEnum::AmbientBasaltDeltasAdditions;
    pub const AMBIENT_BASALT_DELTAS_LOOP: SoundSoundEnum = SoundSoundEnum::AmbientBasaltDeltasLoop;
    pub const AMBIENT_BASALT_DELTAS_MOOD: SoundSoundEnum = SoundSoundEnum::AmbientBasaltDeltasMood;
    pub const AMBIENT_CAVE: SoundSoundEnum = SoundSoundEnum::AmbientCave;
    pub const AMBIENT_CRIMSON_FOREST_ADDITIONS: SoundSoundEnum =
        SoundSoundEnum::AmbientCrimsonForestAdditions;
    pub const AMBIENT_CRIMSON_FOREST_LOOP: SoundSoundEnum =
        SoundSoundEnum::AmbientCrimsonForestLoop;
    pub const AMBIENT_CRIMSON_FOREST_MOOD: SoundSoundEnum =
        SoundSoundEnum::AmbientCrimsonForestMood;
    pub const AMBIENT_NETHER_WASTES_ADDITIONS: SoundSoundEnum =
        SoundSoundEnum::AmbientNetherWastesAdditions;
    pub const AMBIENT_NETHER_WASTES_LOOP: SoundSoundEnum = SoundSoundEnum::AmbientNetherWastesLoop;
    pub const AMBIENT_NETHER_WASTES_MOOD: SoundSoundEnum = SoundSoundEnum::AmbientNetherWastesMood;
    pub const AMBIENT_SOUL_SAND_VALLEY_ADDITIONS: SoundSoundEnum =
        SoundSoundEnum::AmbientSoulSandValleyAdditions;
    pub const AMBIENT_SOUL_SAND_VALLEY_LOOP: SoundSoundEnum =
        SoundSoundEnum::AmbientSoulSandValleyLoop;
    pub const AMBIENT_SOUL_SAND_VALLEY_MOOD: SoundSoundEnum =
        SoundSoundEnum::AmbientSoulSandValleyMood;
    pub const AMBIENT_UNDERWATER_ENTER: SoundSoundEnum = SoundSoundEnum::AmbientUnderwaterEnter;
    pub const AMBIENT_UNDERWATER_EXIT: SoundSoundEnum = SoundSoundEnum::AmbientUnderwaterExit;
    pub const AMBIENT_UNDERWATER_LOOP: SoundSoundEnum = SoundSoundEnum::AmbientUnderwaterLoop;
    pub const AMBIENT_UNDERWATER_LOOP_ADDITIONS: SoundSoundEnum =
        SoundSoundEnum::AmbientUnderwaterLoopAdditions;
    pub const AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE: SoundSoundEnum =
        SoundSoundEnum::AmbientUnderwaterLoopAdditionsRare;
    pub const AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE: SoundSoundEnum =
        SoundSoundEnum::AmbientUnderwaterLoopAdditionsUltraRare;
    pub const AMBIENT_WARPED_FOREST_ADDITIONS: SoundSoundEnum =
        SoundSoundEnum::AmbientWarpedForestAdditions;
    pub const AMBIENT_WARPED_FOREST_LOOP: SoundSoundEnum = SoundSoundEnum::AmbientWarpedForestLoop;
    pub const AMBIENT_WARPED_FOREST_MOOD: SoundSoundEnum = SoundSoundEnum::AmbientWarpedForestMood;
    pub const BLOCK_AMETHYST_BLOCK_BREAK: SoundSoundEnum = SoundSoundEnum::BlockAmethystBlockBreak;
    pub const BLOCK_AMETHYST_BLOCK_CHIME: SoundSoundEnum = SoundSoundEnum::BlockAmethystBlockChime;
    pub const BLOCK_AMETHYST_BLOCK_FALL: SoundSoundEnum = SoundSoundEnum::BlockAmethystBlockFall;
    pub const BLOCK_AMETHYST_BLOCK_HIT: SoundSoundEnum = SoundSoundEnum::BlockAmethystBlockHit;
    pub const BLOCK_AMETHYST_BLOCK_PLACE: SoundSoundEnum = SoundSoundEnum::BlockAmethystBlockPlace;
    pub const BLOCK_AMETHYST_BLOCK_RESONATE: SoundSoundEnum =
        SoundSoundEnum::BlockAmethystBlockResonate;
    pub const BLOCK_AMETHYST_BLOCK_STEP: SoundSoundEnum = SoundSoundEnum::BlockAmethystBlockStep;
    pub const BLOCK_AMETHYST_CLUSTER_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockAmethystClusterBreak;
    pub const BLOCK_AMETHYST_CLUSTER_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockAmethystClusterFall;
    pub const BLOCK_AMETHYST_CLUSTER_HIT: SoundSoundEnum = SoundSoundEnum::BlockAmethystClusterHit;
    pub const BLOCK_AMETHYST_CLUSTER_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockAmethystClusterPlace;
    pub const BLOCK_AMETHYST_CLUSTER_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockAmethystClusterStep;
    pub const BLOCK_ANCIENT_DEBRIS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockAncientDebrisBreak;
    pub const BLOCK_ANCIENT_DEBRIS_FALL: SoundSoundEnum = SoundSoundEnum::BlockAncientDebrisFall;
    pub const BLOCK_ANCIENT_DEBRIS_HIT: SoundSoundEnum = SoundSoundEnum::BlockAncientDebrisHit;
    pub const BLOCK_ANCIENT_DEBRIS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockAncientDebrisPlace;
    pub const BLOCK_ANCIENT_DEBRIS_STEP: SoundSoundEnum = SoundSoundEnum::BlockAncientDebrisStep;
    pub const BLOCK_ANVIL_BREAK: SoundSoundEnum = SoundSoundEnum::BlockAnvilBreak;
    pub const BLOCK_ANVIL_DESTROY: SoundSoundEnum = SoundSoundEnum::BlockAnvilDestroy;
    pub const BLOCK_ANVIL_FALL: SoundSoundEnum = SoundSoundEnum::BlockAnvilFall;
    pub const BLOCK_ANVIL_HIT: SoundSoundEnum = SoundSoundEnum::BlockAnvilHit;
    pub const BLOCK_ANVIL_LAND: SoundSoundEnum = SoundSoundEnum::BlockAnvilLand;
    pub const BLOCK_ANVIL_PLACE: SoundSoundEnum = SoundSoundEnum::BlockAnvilPlace;
    pub const BLOCK_ANVIL_STEP: SoundSoundEnum = SoundSoundEnum::BlockAnvilStep;
    pub const BLOCK_ANVIL_USE: SoundSoundEnum = SoundSoundEnum::BlockAnvilUse;
    pub const BLOCK_AZALEA_BREAK: SoundSoundEnum = SoundSoundEnum::BlockAzaleaBreak;
    pub const BLOCK_AZALEA_FALL: SoundSoundEnum = SoundSoundEnum::BlockAzaleaFall;
    pub const BLOCK_AZALEA_HIT: SoundSoundEnum = SoundSoundEnum::BlockAzaleaHit;
    pub const BLOCK_AZALEA_LEAVES_BREAK: SoundSoundEnum = SoundSoundEnum::BlockAzaleaLeavesBreak;
    pub const BLOCK_AZALEA_LEAVES_FALL: SoundSoundEnum = SoundSoundEnum::BlockAzaleaLeavesFall;
    pub const BLOCK_AZALEA_LEAVES_HIT: SoundSoundEnum = SoundSoundEnum::BlockAzaleaLeavesHit;
    pub const BLOCK_AZALEA_LEAVES_PLACE: SoundSoundEnum = SoundSoundEnum::BlockAzaleaLeavesPlace;
    pub const BLOCK_AZALEA_LEAVES_STEP: SoundSoundEnum = SoundSoundEnum::BlockAzaleaLeavesStep;
    pub const BLOCK_AZALEA_PLACE: SoundSoundEnum = SoundSoundEnum::BlockAzaleaPlace;
    pub const BLOCK_AZALEA_STEP: SoundSoundEnum = SoundSoundEnum::BlockAzaleaStep;
    pub const BLOCK_BAMBOO_BREAK: SoundSoundEnum = SoundSoundEnum::BlockBambooBreak;
    pub const BLOCK_BAMBOO_FALL: SoundSoundEnum = SoundSoundEnum::BlockBambooFall;
    pub const BLOCK_BAMBOO_HIT: SoundSoundEnum = SoundSoundEnum::BlockBambooHit;
    pub const BLOCK_BAMBOO_PLACE: SoundSoundEnum = SoundSoundEnum::BlockBambooPlace;
    pub const BLOCK_BAMBOO_SAPLING_BREAK: SoundSoundEnum = SoundSoundEnum::BlockBambooSaplingBreak;
    pub const BLOCK_BAMBOO_SAPLING_HIT: SoundSoundEnum = SoundSoundEnum::BlockBambooSaplingHit;
    pub const BLOCK_BAMBOO_SAPLING_PLACE: SoundSoundEnum = SoundSoundEnum::BlockBambooSaplingPlace;
    pub const BLOCK_BAMBOO_STEP: SoundSoundEnum = SoundSoundEnum::BlockBambooStep;
    pub const BLOCK_BAMBOO_WOOD_BREAK: SoundSoundEnum = SoundSoundEnum::BlockBambooWoodBreak;
    pub const BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodButtonClickOff;
    pub const BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodButtonClickOn;
    pub const BLOCK_BAMBOO_WOOD_DOOR_CLOSE: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodDoorClose;
    pub const BLOCK_BAMBOO_WOOD_DOOR_OPEN: SoundSoundEnum = SoundSoundEnum::BlockBambooWoodDoorOpen;
    pub const BLOCK_BAMBOO_WOOD_FALL: SoundSoundEnum = SoundSoundEnum::BlockBambooWoodFall;
    pub const BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodFenceGateClose;
    pub const BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodFenceGateOpen;
    pub const BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodHangingSignBreak;
    pub const BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodHangingSignFall;
    pub const BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodHangingSignHit;
    pub const BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodHangingSignPlace;
    pub const BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodHangingSignStep;
    pub const BLOCK_BAMBOO_WOOD_HIT: SoundSoundEnum = SoundSoundEnum::BlockBambooWoodHit;
    pub const BLOCK_BAMBOO_WOOD_PLACE: SoundSoundEnum = SoundSoundEnum::BlockBambooWoodPlace;
    pub const BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodPressurePlateClickOff;
    pub const BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodPressurePlateClickOn;
    pub const BLOCK_BAMBOO_WOOD_STEP: SoundSoundEnum = SoundSoundEnum::BlockBambooWoodStep;
    pub const BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodTrapdoorClose;
    pub const BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN: SoundSoundEnum =
        SoundSoundEnum::BlockBambooWoodTrapdoorOpen;
    pub const BLOCK_BARREL_CLOSE: SoundSoundEnum = SoundSoundEnum::BlockBarrelClose;
    pub const BLOCK_BARREL_OPEN: SoundSoundEnum = SoundSoundEnum::BlockBarrelOpen;
    pub const BLOCK_BASALT_BREAK: SoundSoundEnum = SoundSoundEnum::BlockBasaltBreak;
    pub const BLOCK_BASALT_FALL: SoundSoundEnum = SoundSoundEnum::BlockBasaltFall;
    pub const BLOCK_BASALT_HIT: SoundSoundEnum = SoundSoundEnum::BlockBasaltHit;
    pub const BLOCK_BASALT_PLACE: SoundSoundEnum = SoundSoundEnum::BlockBasaltPlace;
    pub const BLOCK_BASALT_STEP: SoundSoundEnum = SoundSoundEnum::BlockBasaltStep;
    pub const BLOCK_BEACON_ACTIVATE: SoundSoundEnum = SoundSoundEnum::BlockBeaconActivate;
    pub const BLOCK_BEACON_AMBIENT: SoundSoundEnum = SoundSoundEnum::BlockBeaconAmbient;
    pub const BLOCK_BEACON_DEACTIVATE: SoundSoundEnum = SoundSoundEnum::BlockBeaconDeactivate;
    pub const BLOCK_BEACON_POWER_SELECT: SoundSoundEnum = SoundSoundEnum::BlockBeaconPowerSelect;
    pub const BLOCK_BEEHIVE_DRIP: SoundSoundEnum = SoundSoundEnum::BlockBeehiveDrip;
    pub const BLOCK_BEEHIVE_ENTER: SoundSoundEnum = SoundSoundEnum::BlockBeehiveEnter;
    pub const BLOCK_BEEHIVE_EXIT: SoundSoundEnum = SoundSoundEnum::BlockBeehiveExit;
    pub const BLOCK_BEEHIVE_SHEAR: SoundSoundEnum = SoundSoundEnum::BlockBeehiveShear;
    pub const BLOCK_BEEHIVE_WORK: SoundSoundEnum = SoundSoundEnum::BlockBeehiveWork;
    pub const BLOCK_BELL_RESONATE: SoundSoundEnum = SoundSoundEnum::BlockBellResonate;
    pub const BLOCK_BELL_USE: SoundSoundEnum = SoundSoundEnum::BlockBellUse;
    pub const BLOCK_BIG_DRIPLEAF_BREAK: SoundSoundEnum = SoundSoundEnum::BlockBigDripleafBreak;
    pub const BLOCK_BIG_DRIPLEAF_FALL: SoundSoundEnum = SoundSoundEnum::BlockBigDripleafFall;
    pub const BLOCK_BIG_DRIPLEAF_HIT: SoundSoundEnum = SoundSoundEnum::BlockBigDripleafHit;
    pub const BLOCK_BIG_DRIPLEAF_PLACE: SoundSoundEnum = SoundSoundEnum::BlockBigDripleafPlace;
    pub const BLOCK_BIG_DRIPLEAF_STEP: SoundSoundEnum = SoundSoundEnum::BlockBigDripleafStep;
    pub const BLOCK_BIG_DRIPLEAF_TILT_DOWN: SoundSoundEnum =
        SoundSoundEnum::BlockBigDripleafTiltDown;
    pub const BLOCK_BIG_DRIPLEAF_TILT_UP: SoundSoundEnum = SoundSoundEnum::BlockBigDripleafTiltUp;
    pub const BLOCK_BLASTFURNACE_FIRE_CRACKLE: SoundSoundEnum =
        SoundSoundEnum::BlockBlastfurnaceFireCrackle;
    pub const BLOCK_BONE_BLOCK_BREAK: SoundSoundEnum = SoundSoundEnum::BlockBoneBlockBreak;
    pub const BLOCK_BONE_BLOCK_FALL: SoundSoundEnum = SoundSoundEnum::BlockBoneBlockFall;
    pub const BLOCK_BONE_BLOCK_HIT: SoundSoundEnum = SoundSoundEnum::BlockBoneBlockHit;
    pub const BLOCK_BONE_BLOCK_PLACE: SoundSoundEnum = SoundSoundEnum::BlockBoneBlockPlace;
    pub const BLOCK_BONE_BLOCK_STEP: SoundSoundEnum = SoundSoundEnum::BlockBoneBlockStep;
    pub const BLOCK_BREWING_STAND_BREW: SoundSoundEnum = SoundSoundEnum::BlockBrewingStandBrew;
    pub const BLOCK_BUBBLE_COLUMN_BUBBLE_POP: SoundSoundEnum =
        SoundSoundEnum::BlockBubbleColumnBubblePop;
    pub const BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::BlockBubbleColumnUpwardsAmbient;
    pub const BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE: SoundSoundEnum =
        SoundSoundEnum::BlockBubbleColumnUpwardsInside;
    pub const BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::BlockBubbleColumnWhirlpoolAmbient;
    pub const BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE: SoundSoundEnum =
        SoundSoundEnum::BlockBubbleColumnWhirlpoolInside;
    pub const BLOCK_CAKE_ADD_CANDLE: SoundSoundEnum = SoundSoundEnum::BlockCakeAddCandle;
    pub const BLOCK_CALCITE_BREAK: SoundSoundEnum = SoundSoundEnum::BlockCalciteBreak;
    pub const BLOCK_CALCITE_FALL: SoundSoundEnum = SoundSoundEnum::BlockCalciteFall;
    pub const BLOCK_CALCITE_HIT: SoundSoundEnum = SoundSoundEnum::BlockCalciteHit;
    pub const BLOCK_CALCITE_PLACE: SoundSoundEnum = SoundSoundEnum::BlockCalcitePlace;
    pub const BLOCK_CALCITE_STEP: SoundSoundEnum = SoundSoundEnum::BlockCalciteStep;
    pub const BLOCK_CAMPFIRE_CRACKLE: SoundSoundEnum = SoundSoundEnum::BlockCampfireCrackle;
    pub const BLOCK_CANDLE_AMBIENT: SoundSoundEnum = SoundSoundEnum::BlockCandleAmbient;
    pub const BLOCK_CANDLE_BREAK: SoundSoundEnum = SoundSoundEnum::BlockCandleBreak;
    pub const BLOCK_CANDLE_EXTINGUISH: SoundSoundEnum = SoundSoundEnum::BlockCandleExtinguish;
    pub const BLOCK_CANDLE_FALL: SoundSoundEnum = SoundSoundEnum::BlockCandleFall;
    pub const BLOCK_CANDLE_HIT: SoundSoundEnum = SoundSoundEnum::BlockCandleHit;
    pub const BLOCK_CANDLE_PLACE: SoundSoundEnum = SoundSoundEnum::BlockCandlePlace;
    pub const BLOCK_CANDLE_STEP: SoundSoundEnum = SoundSoundEnum::BlockCandleStep;
    pub const BLOCK_CAVE_VINES_BREAK: SoundSoundEnum = SoundSoundEnum::BlockCaveVinesBreak;
    pub const BLOCK_CAVE_VINES_FALL: SoundSoundEnum = SoundSoundEnum::BlockCaveVinesFall;
    pub const BLOCK_CAVE_VINES_HIT: SoundSoundEnum = SoundSoundEnum::BlockCaveVinesHit;
    pub const BLOCK_CAVE_VINES_PICK_BERRIES: SoundSoundEnum =
        SoundSoundEnum::BlockCaveVinesPickBerries;
    pub const BLOCK_CAVE_VINES_PLACE: SoundSoundEnum = SoundSoundEnum::BlockCaveVinesPlace;
    pub const BLOCK_CAVE_VINES_STEP: SoundSoundEnum = SoundSoundEnum::BlockCaveVinesStep;
    pub const BLOCK_CHAIN_BREAK: SoundSoundEnum = SoundSoundEnum::BlockChainBreak;
    pub const BLOCK_CHAIN_FALL: SoundSoundEnum = SoundSoundEnum::BlockChainFall;
    pub const BLOCK_CHAIN_HIT: SoundSoundEnum = SoundSoundEnum::BlockChainHit;
    pub const BLOCK_CHAIN_PLACE: SoundSoundEnum = SoundSoundEnum::BlockChainPlace;
    pub const BLOCK_CHAIN_STEP: SoundSoundEnum = SoundSoundEnum::BlockChainStep;
    pub const BLOCK_CHERRY_LEAVES_BREAK: SoundSoundEnum = SoundSoundEnum::BlockCherryLeavesBreak;
    pub const BLOCK_CHERRY_LEAVES_FALL: SoundSoundEnum = SoundSoundEnum::BlockCherryLeavesFall;
    pub const BLOCK_CHERRY_LEAVES_HIT: SoundSoundEnum = SoundSoundEnum::BlockCherryLeavesHit;
    pub const BLOCK_CHERRY_LEAVES_PLACE: SoundSoundEnum = SoundSoundEnum::BlockCherryLeavesPlace;
    pub const BLOCK_CHERRY_LEAVES_STEP: SoundSoundEnum = SoundSoundEnum::BlockCherryLeavesStep;
    pub const BLOCK_CHERRY_SAPLING_BREAK: SoundSoundEnum = SoundSoundEnum::BlockCherrySaplingBreak;
    pub const BLOCK_CHERRY_SAPLING_FALL: SoundSoundEnum = SoundSoundEnum::BlockCherrySaplingFall;
    pub const BLOCK_CHERRY_SAPLING_HIT: SoundSoundEnum = SoundSoundEnum::BlockCherrySaplingHit;
    pub const BLOCK_CHERRY_SAPLING_PLACE: SoundSoundEnum = SoundSoundEnum::BlockCherrySaplingPlace;
    pub const BLOCK_CHERRY_SAPLING_STEP: SoundSoundEnum = SoundSoundEnum::BlockCherrySaplingStep;
    pub const BLOCK_CHERRY_WOOD_BREAK: SoundSoundEnum = SoundSoundEnum::BlockCherryWoodBreak;
    pub const BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodButtonClickOff;
    pub const BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodButtonClickOn;
    pub const BLOCK_CHERRY_WOOD_DOOR_CLOSE: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodDoorClose;
    pub const BLOCK_CHERRY_WOOD_DOOR_OPEN: SoundSoundEnum = SoundSoundEnum::BlockCherryWoodDoorOpen;
    pub const BLOCK_CHERRY_WOOD_FALL: SoundSoundEnum = SoundSoundEnum::BlockCherryWoodFall;
    pub const BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodFenceGateClose;
    pub const BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodFenceGateOpen;
    pub const BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodHangingSignBreak;
    pub const BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodHangingSignFall;
    pub const BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodHangingSignHit;
    pub const BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodHangingSignPlace;
    pub const BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodHangingSignStep;
    pub const BLOCK_CHERRY_WOOD_HIT: SoundSoundEnum = SoundSoundEnum::BlockCherryWoodHit;
    pub const BLOCK_CHERRY_WOOD_PLACE: SoundSoundEnum = SoundSoundEnum::BlockCherryWoodPlace;
    pub const BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodPressurePlateClickOff;
    pub const BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodPressurePlateClickOn;
    pub const BLOCK_CHERRY_WOOD_STEP: SoundSoundEnum = SoundSoundEnum::BlockCherryWoodStep;
    pub const BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodTrapdoorClose;
    pub const BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN: SoundSoundEnum =
        SoundSoundEnum::BlockCherryWoodTrapdoorOpen;
    pub const BLOCK_CHEST_CLOSE: SoundSoundEnum = SoundSoundEnum::BlockChestClose;
    pub const BLOCK_CHEST_LOCKED: SoundSoundEnum = SoundSoundEnum::BlockChestLocked;
    pub const BLOCK_CHEST_OPEN: SoundSoundEnum = SoundSoundEnum::BlockChestOpen;
    pub const BLOCK_CHISELED_BOOKSHELF_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockChiseledBookshelfBreak;
    pub const BLOCK_CHISELED_BOOKSHELF_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockChiseledBookshelfFall;
    pub const BLOCK_CHISELED_BOOKSHELF_HIT: SoundSoundEnum =
        SoundSoundEnum::BlockChiseledBookshelfHit;
    pub const BLOCK_CHISELED_BOOKSHELF_INSERT: SoundSoundEnum =
        SoundSoundEnum::BlockChiseledBookshelfInsert;
    pub const BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED: SoundSoundEnum =
        SoundSoundEnum::BlockChiseledBookshelfInsertEnchanted;
    pub const BLOCK_CHISELED_BOOKSHELF_PICKUP: SoundSoundEnum =
        SoundSoundEnum::BlockChiseledBookshelfPickup;
    pub const BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED: SoundSoundEnum =
        SoundSoundEnum::BlockChiseledBookshelfPickupEnchanted;
    pub const BLOCK_CHISELED_BOOKSHELF_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockChiseledBookshelfPlace;
    pub const BLOCK_CHISELED_BOOKSHELF_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockChiseledBookshelfStep;
    pub const BLOCK_CHORUS_FLOWER_DEATH: SoundSoundEnum = SoundSoundEnum::BlockChorusFlowerDeath;
    pub const BLOCK_CHORUS_FLOWER_GROW: SoundSoundEnum = SoundSoundEnum::BlockChorusFlowerGrow;
    pub const BLOCK_COMPARATOR_CLICK: SoundSoundEnum = SoundSoundEnum::BlockComparatorClick;
    pub const BLOCK_COMPOSTER_EMPTY: SoundSoundEnum = SoundSoundEnum::BlockComposterEmpty;
    pub const BLOCK_COMPOSTER_FILL: SoundSoundEnum = SoundSoundEnum::BlockComposterFill;
    pub const BLOCK_COMPOSTER_FILL_SUCCESS: SoundSoundEnum =
        SoundSoundEnum::BlockComposterFillSuccess;
    pub const BLOCK_COMPOSTER_READY: SoundSoundEnum = SoundSoundEnum::BlockComposterReady;
    pub const BLOCK_CONDUIT_ACTIVATE: SoundSoundEnum = SoundSoundEnum::BlockConduitActivate;
    pub const BLOCK_CONDUIT_AMBIENT: SoundSoundEnum = SoundSoundEnum::BlockConduitAmbient;
    pub const BLOCK_CONDUIT_AMBIENT_SHORT: SoundSoundEnum =
        SoundSoundEnum::BlockConduitAmbientShort;
    pub const BLOCK_CONDUIT_ATTACK_TARGET: SoundSoundEnum =
        SoundSoundEnum::BlockConduitAttackTarget;
    pub const BLOCK_CONDUIT_DEACTIVATE: SoundSoundEnum = SoundSoundEnum::BlockConduitDeactivate;
    pub const BLOCK_COPPER_BREAK: SoundSoundEnum = SoundSoundEnum::BlockCopperBreak;
    pub const BLOCK_COPPER_FALL: SoundSoundEnum = SoundSoundEnum::BlockCopperFall;
    pub const BLOCK_COPPER_HIT: SoundSoundEnum = SoundSoundEnum::BlockCopperHit;
    pub const BLOCK_COPPER_PLACE: SoundSoundEnum = SoundSoundEnum::BlockCopperPlace;
    pub const BLOCK_COPPER_STEP: SoundSoundEnum = SoundSoundEnum::BlockCopperStep;
    pub const BLOCK_CORAL_BLOCK_BREAK: SoundSoundEnum = SoundSoundEnum::BlockCoralBlockBreak;
    pub const BLOCK_CORAL_BLOCK_FALL: SoundSoundEnum = SoundSoundEnum::BlockCoralBlockFall;
    pub const BLOCK_CORAL_BLOCK_HIT: SoundSoundEnum = SoundSoundEnum::BlockCoralBlockHit;
    pub const BLOCK_CORAL_BLOCK_PLACE: SoundSoundEnum = SoundSoundEnum::BlockCoralBlockPlace;
    pub const BLOCK_CORAL_BLOCK_STEP: SoundSoundEnum = SoundSoundEnum::BlockCoralBlockStep;
    pub const BLOCK_CROP_BREAK: SoundSoundEnum = SoundSoundEnum::BlockCropBreak;
    pub const BLOCK_DECORATED_POT_BREAK: SoundSoundEnum = SoundSoundEnum::BlockDecoratedPotBreak;
    pub const BLOCK_DECORATED_POT_FALL: SoundSoundEnum = SoundSoundEnum::BlockDecoratedPotFall;
    pub const BLOCK_DECORATED_POT_HIT: SoundSoundEnum = SoundSoundEnum::BlockDecoratedPotHit;
    pub const BLOCK_DECORATED_POT_PLACE: SoundSoundEnum = SoundSoundEnum::BlockDecoratedPotPlace;
    pub const BLOCK_DECORATED_POT_SHATTER: SoundSoundEnum =
        SoundSoundEnum::BlockDecoratedPotShatter;
    pub const BLOCK_DECORATED_POT_STEP: SoundSoundEnum = SoundSoundEnum::BlockDecoratedPotStep;
    pub const BLOCK_DEEPSLATE_BREAK: SoundSoundEnum = SoundSoundEnum::BlockDeepslateBreak;
    pub const BLOCK_DEEPSLATE_BRICKS_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockDeepslateBricksBreak;
    pub const BLOCK_DEEPSLATE_BRICKS_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockDeepslateBricksFall;
    pub const BLOCK_DEEPSLATE_BRICKS_HIT: SoundSoundEnum = SoundSoundEnum::BlockDeepslateBricksHit;
    pub const BLOCK_DEEPSLATE_BRICKS_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockDeepslateBricksPlace;
    pub const BLOCK_DEEPSLATE_BRICKS_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockDeepslateBricksStep;
    pub const BLOCK_DEEPSLATE_FALL: SoundSoundEnum = SoundSoundEnum::BlockDeepslateFall;
    pub const BLOCK_DEEPSLATE_HIT: SoundSoundEnum = SoundSoundEnum::BlockDeepslateHit;
    pub const BLOCK_DEEPSLATE_PLACE: SoundSoundEnum = SoundSoundEnum::BlockDeepslatePlace;
    pub const BLOCK_DEEPSLATE_STEP: SoundSoundEnum = SoundSoundEnum::BlockDeepslateStep;
    pub const BLOCK_DEEPSLATE_TILES_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockDeepslateTilesBreak;
    pub const BLOCK_DEEPSLATE_TILES_FALL: SoundSoundEnum = SoundSoundEnum::BlockDeepslateTilesFall;
    pub const BLOCK_DEEPSLATE_TILES_HIT: SoundSoundEnum = SoundSoundEnum::BlockDeepslateTilesHit;
    pub const BLOCK_DEEPSLATE_TILES_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockDeepslateTilesPlace;
    pub const BLOCK_DEEPSLATE_TILES_STEP: SoundSoundEnum = SoundSoundEnum::BlockDeepslateTilesStep;
    pub const BLOCK_DISPENSER_DISPENSE: SoundSoundEnum = SoundSoundEnum::BlockDispenserDispense;
    pub const BLOCK_DISPENSER_FAIL: SoundSoundEnum = SoundSoundEnum::BlockDispenserFail;
    pub const BLOCK_DISPENSER_LAUNCH: SoundSoundEnum = SoundSoundEnum::BlockDispenserLaunch;
    pub const BLOCK_DRIPSTONE_BLOCK_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockDripstoneBlockBreak;
    pub const BLOCK_DRIPSTONE_BLOCK_FALL: SoundSoundEnum = SoundSoundEnum::BlockDripstoneBlockFall;
    pub const BLOCK_DRIPSTONE_BLOCK_HIT: SoundSoundEnum = SoundSoundEnum::BlockDripstoneBlockHit;
    pub const BLOCK_DRIPSTONE_BLOCK_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockDripstoneBlockPlace;
    pub const BLOCK_DRIPSTONE_BLOCK_STEP: SoundSoundEnum = SoundSoundEnum::BlockDripstoneBlockStep;
    pub const BLOCK_ENCHANTMENT_TABLE_USE: SoundSoundEnum =
        SoundSoundEnum::BlockEnchantmentTableUse;
    pub const BLOCK_ENDER_CHEST_CLOSE: SoundSoundEnum = SoundSoundEnum::BlockEnderChestClose;
    pub const BLOCK_ENDER_CHEST_OPEN: SoundSoundEnum = SoundSoundEnum::BlockEnderChestOpen;
    pub const BLOCK_END_GATEWAY_SPAWN: SoundSoundEnum = SoundSoundEnum::BlockEndGatewaySpawn;
    pub const BLOCK_END_PORTAL_FRAME_FILL: SoundSoundEnum = SoundSoundEnum::BlockEndPortalFrameFill;
    pub const BLOCK_END_PORTAL_SPAWN: SoundSoundEnum = SoundSoundEnum::BlockEndPortalSpawn;
    pub const BLOCK_FENCE_GATE_CLOSE: SoundSoundEnum = SoundSoundEnum::BlockFenceGateClose;
    pub const BLOCK_FENCE_GATE_OPEN: SoundSoundEnum = SoundSoundEnum::BlockFenceGateOpen;
    pub const BLOCK_FIRE_AMBIENT: SoundSoundEnum = SoundSoundEnum::BlockFireAmbient;
    pub const BLOCK_FIRE_EXTINGUISH: SoundSoundEnum = SoundSoundEnum::BlockFireExtinguish;
    pub const BLOCK_FLOWERING_AZALEA_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockFloweringAzaleaBreak;
    pub const BLOCK_FLOWERING_AZALEA_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockFloweringAzaleaFall;
    pub const BLOCK_FLOWERING_AZALEA_HIT: SoundSoundEnum = SoundSoundEnum::BlockFloweringAzaleaHit;
    pub const BLOCK_FLOWERING_AZALEA_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockFloweringAzaleaPlace;
    pub const BLOCK_FLOWERING_AZALEA_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockFloweringAzaleaStep;
    pub const BLOCK_FROGLIGHT_BREAK: SoundSoundEnum = SoundSoundEnum::BlockFroglightBreak;
    pub const BLOCK_FROGLIGHT_FALL: SoundSoundEnum = SoundSoundEnum::BlockFroglightFall;
    pub const BLOCK_FROGLIGHT_HIT: SoundSoundEnum = SoundSoundEnum::BlockFroglightHit;
    pub const BLOCK_FROGLIGHT_PLACE: SoundSoundEnum = SoundSoundEnum::BlockFroglightPlace;
    pub const BLOCK_FROGLIGHT_STEP: SoundSoundEnum = SoundSoundEnum::BlockFroglightStep;
    pub const BLOCK_FROGSPAWN_BREAK: SoundSoundEnum = SoundSoundEnum::BlockFrogspawnBreak;
    pub const BLOCK_FROGSPAWN_FALL: SoundSoundEnum = SoundSoundEnum::BlockFrogspawnFall;
    pub const BLOCK_FROGSPAWN_HATCH: SoundSoundEnum = SoundSoundEnum::BlockFrogspawnHatch;
    pub const BLOCK_FROGSPAWN_HIT: SoundSoundEnum = SoundSoundEnum::BlockFrogspawnHit;
    pub const BLOCK_FROGSPAWN_PLACE: SoundSoundEnum = SoundSoundEnum::BlockFrogspawnPlace;
    pub const BLOCK_FROGSPAWN_STEP: SoundSoundEnum = SoundSoundEnum::BlockFrogspawnStep;
    pub const BLOCK_FUNGUS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockFungusBreak;
    pub const BLOCK_FUNGUS_FALL: SoundSoundEnum = SoundSoundEnum::BlockFungusFall;
    pub const BLOCK_FUNGUS_HIT: SoundSoundEnum = SoundSoundEnum::BlockFungusHit;
    pub const BLOCK_FUNGUS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockFungusPlace;
    pub const BLOCK_FUNGUS_STEP: SoundSoundEnum = SoundSoundEnum::BlockFungusStep;
    pub const BLOCK_FURNACE_FIRE_CRACKLE: SoundSoundEnum = SoundSoundEnum::BlockFurnaceFireCrackle;
    pub const BLOCK_GILDED_BLACKSTONE_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockGildedBlackstoneBreak;
    pub const BLOCK_GILDED_BLACKSTONE_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockGildedBlackstoneFall;
    pub const BLOCK_GILDED_BLACKSTONE_HIT: SoundSoundEnum =
        SoundSoundEnum::BlockGildedBlackstoneHit;
    pub const BLOCK_GILDED_BLACKSTONE_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockGildedBlackstonePlace;
    pub const BLOCK_GILDED_BLACKSTONE_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockGildedBlackstoneStep;
    pub const BLOCK_GLASS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockGlassBreak;
    pub const BLOCK_GLASS_FALL: SoundSoundEnum = SoundSoundEnum::BlockGlassFall;
    pub const BLOCK_GLASS_HIT: SoundSoundEnum = SoundSoundEnum::BlockGlassHit;
    pub const BLOCK_GLASS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockGlassPlace;
    pub const BLOCK_GLASS_STEP: SoundSoundEnum = SoundSoundEnum::BlockGlassStep;
    pub const BLOCK_GRASS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockGrassBreak;
    pub const BLOCK_GRASS_FALL: SoundSoundEnum = SoundSoundEnum::BlockGrassFall;
    pub const BLOCK_GRASS_HIT: SoundSoundEnum = SoundSoundEnum::BlockGrassHit;
    pub const BLOCK_GRASS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockGrassPlace;
    pub const BLOCK_GRASS_STEP: SoundSoundEnum = SoundSoundEnum::BlockGrassStep;
    pub const BLOCK_GRAVEL_BREAK: SoundSoundEnum = SoundSoundEnum::BlockGravelBreak;
    pub const BLOCK_GRAVEL_FALL: SoundSoundEnum = SoundSoundEnum::BlockGravelFall;
    pub const BLOCK_GRAVEL_HIT: SoundSoundEnum = SoundSoundEnum::BlockGravelHit;
    pub const BLOCK_GRAVEL_PLACE: SoundSoundEnum = SoundSoundEnum::BlockGravelPlace;
    pub const BLOCK_GRAVEL_STEP: SoundSoundEnum = SoundSoundEnum::BlockGravelStep;
    pub const BLOCK_GRINDSTONE_USE: SoundSoundEnum = SoundSoundEnum::BlockGrindstoneUse;
    pub const BLOCK_GROWING_PLANT_CROP: SoundSoundEnum = SoundSoundEnum::BlockGrowingPlantCrop;
    pub const BLOCK_HANGING_ROOTS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockHangingRootsBreak;
    pub const BLOCK_HANGING_ROOTS_FALL: SoundSoundEnum = SoundSoundEnum::BlockHangingRootsFall;
    pub const BLOCK_HANGING_ROOTS_HIT: SoundSoundEnum = SoundSoundEnum::BlockHangingRootsHit;
    pub const BLOCK_HANGING_ROOTS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockHangingRootsPlace;
    pub const BLOCK_HANGING_ROOTS_STEP: SoundSoundEnum = SoundSoundEnum::BlockHangingRootsStep;
    pub const BLOCK_HANGING_SIGN_BREAK: SoundSoundEnum = SoundSoundEnum::BlockHangingSignBreak;
    pub const BLOCK_HANGING_SIGN_FALL: SoundSoundEnum = SoundSoundEnum::BlockHangingSignFall;
    pub const BLOCK_HANGING_SIGN_HIT: SoundSoundEnum = SoundSoundEnum::BlockHangingSignHit;
    pub const BLOCK_HANGING_SIGN_PLACE: SoundSoundEnum = SoundSoundEnum::BlockHangingSignPlace;
    pub const BLOCK_HANGING_SIGN_STEP: SoundSoundEnum = SoundSoundEnum::BlockHangingSignStep;
    pub const BLOCK_HONEY_BLOCK_BREAK: SoundSoundEnum = SoundSoundEnum::BlockHoneyBlockBreak;
    pub const BLOCK_HONEY_BLOCK_FALL: SoundSoundEnum = SoundSoundEnum::BlockHoneyBlockFall;
    pub const BLOCK_HONEY_BLOCK_HIT: SoundSoundEnum = SoundSoundEnum::BlockHoneyBlockHit;
    pub const BLOCK_HONEY_BLOCK_PLACE: SoundSoundEnum = SoundSoundEnum::BlockHoneyBlockPlace;
    pub const BLOCK_HONEY_BLOCK_SLIDE: SoundSoundEnum = SoundSoundEnum::BlockHoneyBlockSlide;
    pub const BLOCK_HONEY_BLOCK_STEP: SoundSoundEnum = SoundSoundEnum::BlockHoneyBlockStep;
    pub const BLOCK_IRON_DOOR_CLOSE: SoundSoundEnum = SoundSoundEnum::BlockIronDoorClose;
    pub const BLOCK_IRON_DOOR_OPEN: SoundSoundEnum = SoundSoundEnum::BlockIronDoorOpen;
    pub const BLOCK_IRON_TRAPDOOR_CLOSE: SoundSoundEnum = SoundSoundEnum::BlockIronTrapdoorClose;
    pub const BLOCK_IRON_TRAPDOOR_OPEN: SoundSoundEnum = SoundSoundEnum::BlockIronTrapdoorOpen;
    pub const BLOCK_LADDER_BREAK: SoundSoundEnum = SoundSoundEnum::BlockLadderBreak;
    pub const BLOCK_LADDER_FALL: SoundSoundEnum = SoundSoundEnum::BlockLadderFall;
    pub const BLOCK_LADDER_HIT: SoundSoundEnum = SoundSoundEnum::BlockLadderHit;
    pub const BLOCK_LADDER_PLACE: SoundSoundEnum = SoundSoundEnum::BlockLadderPlace;
    pub const BLOCK_LADDER_STEP: SoundSoundEnum = SoundSoundEnum::BlockLadderStep;
    pub const BLOCK_LANTERN_BREAK: SoundSoundEnum = SoundSoundEnum::BlockLanternBreak;
    pub const BLOCK_LANTERN_FALL: SoundSoundEnum = SoundSoundEnum::BlockLanternFall;
    pub const BLOCK_LANTERN_HIT: SoundSoundEnum = SoundSoundEnum::BlockLanternHit;
    pub const BLOCK_LANTERN_PLACE: SoundSoundEnum = SoundSoundEnum::BlockLanternPlace;
    pub const BLOCK_LANTERN_STEP: SoundSoundEnum = SoundSoundEnum::BlockLanternStep;
    pub const BLOCK_LARGE_AMETHYST_BUD_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockLargeAmethystBudBreak;
    pub const BLOCK_LARGE_AMETHYST_BUD_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockLargeAmethystBudPlace;
    pub const BLOCK_LAVA_AMBIENT: SoundSoundEnum = SoundSoundEnum::BlockLavaAmbient;
    pub const BLOCK_LAVA_EXTINGUISH: SoundSoundEnum = SoundSoundEnum::BlockLavaExtinguish;
    pub const BLOCK_LAVA_POP: SoundSoundEnum = SoundSoundEnum::BlockLavaPop;
    pub const BLOCK_LEVER_CLICK: SoundSoundEnum = SoundSoundEnum::BlockLeverClick;
    pub const BLOCK_LILY_PAD_PLACE: SoundSoundEnum = SoundSoundEnum::BlockLilyPadPlace;
    pub const BLOCK_LODESTONE_BREAK: SoundSoundEnum = SoundSoundEnum::BlockLodestoneBreak;
    pub const BLOCK_LODESTONE_FALL: SoundSoundEnum = SoundSoundEnum::BlockLodestoneFall;
    pub const BLOCK_LODESTONE_HIT: SoundSoundEnum = SoundSoundEnum::BlockLodestoneHit;
    pub const BLOCK_LODESTONE_PLACE: SoundSoundEnum = SoundSoundEnum::BlockLodestonePlace;
    pub const BLOCK_LODESTONE_STEP: SoundSoundEnum = SoundSoundEnum::BlockLodestoneStep;
    pub const BLOCK_MANGROVE_ROOTS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockMangroveRootsBreak;
    pub const BLOCK_MANGROVE_ROOTS_FALL: SoundSoundEnum = SoundSoundEnum::BlockMangroveRootsFall;
    pub const BLOCK_MANGROVE_ROOTS_HIT: SoundSoundEnum = SoundSoundEnum::BlockMangroveRootsHit;
    pub const BLOCK_MANGROVE_ROOTS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockMangroveRootsPlace;
    pub const BLOCK_MANGROVE_ROOTS_STEP: SoundSoundEnum = SoundSoundEnum::BlockMangroveRootsStep;
    pub const BLOCK_MEDIUM_AMETHYST_BUD_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockMediumAmethystBudBreak;
    pub const BLOCK_MEDIUM_AMETHYST_BUD_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockMediumAmethystBudPlace;
    pub const BLOCK_METAL_BREAK: SoundSoundEnum = SoundSoundEnum::BlockMetalBreak;
    pub const BLOCK_METAL_FALL: SoundSoundEnum = SoundSoundEnum::BlockMetalFall;
    pub const BLOCK_METAL_HIT: SoundSoundEnum = SoundSoundEnum::BlockMetalHit;
    pub const BLOCK_METAL_PLACE: SoundSoundEnum = SoundSoundEnum::BlockMetalPlace;
    pub const BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF: SoundSoundEnum =
        SoundSoundEnum::BlockMetalPressurePlateClickOff;
    pub const BLOCK_METAL_PRESSURE_PLATE_CLICK_ON: SoundSoundEnum =
        SoundSoundEnum::BlockMetalPressurePlateClickOn;
    pub const BLOCK_METAL_STEP: SoundSoundEnum = SoundSoundEnum::BlockMetalStep;
    pub const BLOCK_MOSS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockMossBreak;
    pub const BLOCK_MOSS_CARPET_BREAK: SoundSoundEnum = SoundSoundEnum::BlockMossCarpetBreak;
    pub const BLOCK_MOSS_CARPET_FALL: SoundSoundEnum = SoundSoundEnum::BlockMossCarpetFall;
    pub const BLOCK_MOSS_CARPET_HIT: SoundSoundEnum = SoundSoundEnum::BlockMossCarpetHit;
    pub const BLOCK_MOSS_CARPET_PLACE: SoundSoundEnum = SoundSoundEnum::BlockMossCarpetPlace;
    pub const BLOCK_MOSS_CARPET_STEP: SoundSoundEnum = SoundSoundEnum::BlockMossCarpetStep;
    pub const BLOCK_MOSS_FALL: SoundSoundEnum = SoundSoundEnum::BlockMossFall;
    pub const BLOCK_MOSS_HIT: SoundSoundEnum = SoundSoundEnum::BlockMossHit;
    pub const BLOCK_MOSS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockMossPlace;
    pub const BLOCK_MOSS_STEP: SoundSoundEnum = SoundSoundEnum::BlockMossStep;
    pub const BLOCK_MUDDY_MANGROVE_ROOTS_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockMuddyMangroveRootsBreak;
    pub const BLOCK_MUDDY_MANGROVE_ROOTS_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockMuddyMangroveRootsFall;
    pub const BLOCK_MUDDY_MANGROVE_ROOTS_HIT: SoundSoundEnum =
        SoundSoundEnum::BlockMuddyMangroveRootsHit;
    pub const BLOCK_MUDDY_MANGROVE_ROOTS_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockMuddyMangroveRootsPlace;
    pub const BLOCK_MUDDY_MANGROVE_ROOTS_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockMuddyMangroveRootsStep;
    pub const BLOCK_MUD_BREAK: SoundSoundEnum = SoundSoundEnum::BlockMudBreak;
    pub const BLOCK_MUD_BRICKS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockMudBricksBreak;
    pub const BLOCK_MUD_BRICKS_FALL: SoundSoundEnum = SoundSoundEnum::BlockMudBricksFall;
    pub const BLOCK_MUD_BRICKS_HIT: SoundSoundEnum = SoundSoundEnum::BlockMudBricksHit;
    pub const BLOCK_MUD_BRICKS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockMudBricksPlace;
    pub const BLOCK_MUD_BRICKS_STEP: SoundSoundEnum = SoundSoundEnum::BlockMudBricksStep;
    pub const BLOCK_MUD_FALL: SoundSoundEnum = SoundSoundEnum::BlockMudFall;
    pub const BLOCK_MUD_HIT: SoundSoundEnum = SoundSoundEnum::BlockMudHit;
    pub const BLOCK_MUD_PLACE: SoundSoundEnum = SoundSoundEnum::BlockMudPlace;
    pub const BLOCK_MUD_STEP: SoundSoundEnum = SoundSoundEnum::BlockMudStep;
    pub const BLOCK_NETHERITE_BLOCK_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockNetheriteBlockBreak;
    pub const BLOCK_NETHERITE_BLOCK_FALL: SoundSoundEnum = SoundSoundEnum::BlockNetheriteBlockFall;
    pub const BLOCK_NETHERITE_BLOCK_HIT: SoundSoundEnum = SoundSoundEnum::BlockNetheriteBlockHit;
    pub const BLOCK_NETHERITE_BLOCK_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockNetheriteBlockPlace;
    pub const BLOCK_NETHERITE_BLOCK_STEP: SoundSoundEnum = SoundSoundEnum::BlockNetheriteBlockStep;
    pub const BLOCK_NETHERRACK_BREAK: SoundSoundEnum = SoundSoundEnum::BlockNetherrackBreak;
    pub const BLOCK_NETHERRACK_FALL: SoundSoundEnum = SoundSoundEnum::BlockNetherrackFall;
    pub const BLOCK_NETHERRACK_HIT: SoundSoundEnum = SoundSoundEnum::BlockNetherrackHit;
    pub const BLOCK_NETHERRACK_PLACE: SoundSoundEnum = SoundSoundEnum::BlockNetherrackPlace;
    pub const BLOCK_NETHERRACK_STEP: SoundSoundEnum = SoundSoundEnum::BlockNetherrackStep;
    pub const BLOCK_NETHER_BRICKS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockNetherBricksBreak;
    pub const BLOCK_NETHER_BRICKS_FALL: SoundSoundEnum = SoundSoundEnum::BlockNetherBricksFall;
    pub const BLOCK_NETHER_BRICKS_HIT: SoundSoundEnum = SoundSoundEnum::BlockNetherBricksHit;
    pub const BLOCK_NETHER_BRICKS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockNetherBricksPlace;
    pub const BLOCK_NETHER_BRICKS_STEP: SoundSoundEnum = SoundSoundEnum::BlockNetherBricksStep;
    pub const BLOCK_NETHER_GOLD_ORE_BREAK: SoundSoundEnum = SoundSoundEnum::BlockNetherGoldOreBreak;
    pub const BLOCK_NETHER_GOLD_ORE_FALL: SoundSoundEnum = SoundSoundEnum::BlockNetherGoldOreFall;
    pub const BLOCK_NETHER_GOLD_ORE_HIT: SoundSoundEnum = SoundSoundEnum::BlockNetherGoldOreHit;
    pub const BLOCK_NETHER_GOLD_ORE_PLACE: SoundSoundEnum = SoundSoundEnum::BlockNetherGoldOrePlace;
    pub const BLOCK_NETHER_GOLD_ORE_STEP: SoundSoundEnum = SoundSoundEnum::BlockNetherGoldOreStep;
    pub const BLOCK_NETHER_ORE_BREAK: SoundSoundEnum = SoundSoundEnum::BlockNetherOreBreak;
    pub const BLOCK_NETHER_ORE_FALL: SoundSoundEnum = SoundSoundEnum::BlockNetherOreFall;
    pub const BLOCK_NETHER_ORE_HIT: SoundSoundEnum = SoundSoundEnum::BlockNetherOreHit;
    pub const BLOCK_NETHER_ORE_PLACE: SoundSoundEnum = SoundSoundEnum::BlockNetherOrePlace;
    pub const BLOCK_NETHER_ORE_STEP: SoundSoundEnum = SoundSoundEnum::BlockNetherOreStep;
    pub const BLOCK_NETHER_SPROUTS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockNetherSproutsBreak;
    pub const BLOCK_NETHER_SPROUTS_FALL: SoundSoundEnum = SoundSoundEnum::BlockNetherSproutsFall;
    pub const BLOCK_NETHER_SPROUTS_HIT: SoundSoundEnum = SoundSoundEnum::BlockNetherSproutsHit;
    pub const BLOCK_NETHER_SPROUTS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockNetherSproutsPlace;
    pub const BLOCK_NETHER_SPROUTS_STEP: SoundSoundEnum = SoundSoundEnum::BlockNetherSproutsStep;
    pub const BLOCK_NETHER_WART_BREAK: SoundSoundEnum = SoundSoundEnum::BlockNetherWartBreak;
    pub const BLOCK_NETHER_WOOD_BREAK: SoundSoundEnum = SoundSoundEnum::BlockNetherWoodBreak;
    pub const BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodButtonClickOff;
    pub const BLOCK_NETHER_WOOD_BUTTON_CLICK_ON: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodButtonClickOn;
    pub const BLOCK_NETHER_WOOD_DOOR_CLOSE: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodDoorClose;
    pub const BLOCK_NETHER_WOOD_DOOR_OPEN: SoundSoundEnum = SoundSoundEnum::BlockNetherWoodDoorOpen;
    pub const BLOCK_NETHER_WOOD_FALL: SoundSoundEnum = SoundSoundEnum::BlockNetherWoodFall;
    pub const BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodFenceGateClose;
    pub const BLOCK_NETHER_WOOD_FENCE_GATE_OPEN: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodFenceGateOpen;
    pub const BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodHangingSignBreak;
    pub const BLOCK_NETHER_WOOD_HANGING_SIGN_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodHangingSignFall;
    pub const BLOCK_NETHER_WOOD_HANGING_SIGN_HIT: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodHangingSignHit;
    pub const BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodHangingSignPlace;
    pub const BLOCK_NETHER_WOOD_HANGING_SIGN_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodHangingSignStep;
    pub const BLOCK_NETHER_WOOD_HIT: SoundSoundEnum = SoundSoundEnum::BlockNetherWoodHit;
    pub const BLOCK_NETHER_WOOD_PLACE: SoundSoundEnum = SoundSoundEnum::BlockNetherWoodPlace;
    pub const BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodPressurePlateClickOff;
    pub const BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodPressurePlateClickOn;
    pub const BLOCK_NETHER_WOOD_STEP: SoundSoundEnum = SoundSoundEnum::BlockNetherWoodStep;
    pub const BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodTrapdoorClose;
    pub const BLOCK_NETHER_WOOD_TRAPDOOR_OPEN: SoundSoundEnum =
        SoundSoundEnum::BlockNetherWoodTrapdoorOpen;
    pub const BLOCK_NOTE_BLOCK_BANJO: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockBanjo;
    pub const BLOCK_NOTE_BLOCK_BASEDRUM: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockBasedrum;
    pub const BLOCK_NOTE_BLOCK_BASS: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockBass;
    pub const BLOCK_NOTE_BLOCK_BELL: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockBell;
    pub const BLOCK_NOTE_BLOCK_BIT: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockBit;
    pub const BLOCK_NOTE_BLOCK_CHIME: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockChime;
    pub const BLOCK_NOTE_BLOCK_COW_BELL: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockCowBell;
    pub const BLOCK_NOTE_BLOCK_DIDGERIDOO: SoundSoundEnum =
        SoundSoundEnum::BlockNoteBlockDidgeridoo;
    pub const BLOCK_NOTE_BLOCK_FLUTE: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockFlute;
    pub const BLOCK_NOTE_BLOCK_GUITAR: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockGuitar;
    pub const BLOCK_NOTE_BLOCK_HARP: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockHarp;
    pub const BLOCK_NOTE_BLOCK_HAT: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockHat;
    pub const BLOCK_NOTE_BLOCK_IMITATE_CREEPER: SoundSoundEnum =
        SoundSoundEnum::BlockNoteBlockImitateCreeper;
    pub const BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON: SoundSoundEnum =
        SoundSoundEnum::BlockNoteBlockImitateEnderDragon;
    pub const BLOCK_NOTE_BLOCK_IMITATE_PIGLIN: SoundSoundEnum =
        SoundSoundEnum::BlockNoteBlockImitatePiglin;
    pub const BLOCK_NOTE_BLOCK_IMITATE_SKELETON: SoundSoundEnum =
        SoundSoundEnum::BlockNoteBlockImitateSkeleton;
    pub const BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON: SoundSoundEnum =
        SoundSoundEnum::BlockNoteBlockImitateWitherSkeleton;
    pub const BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE: SoundSoundEnum =
        SoundSoundEnum::BlockNoteBlockImitateZombie;
    pub const BLOCK_NOTE_BLOCK_IRON_XYLOPHONE: SoundSoundEnum =
        SoundSoundEnum::BlockNoteBlockIronXylophone;
    pub const BLOCK_NOTE_BLOCK_PLING: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockPling;
    pub const BLOCK_NOTE_BLOCK_SNARE: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockSnare;
    pub const BLOCK_NOTE_BLOCK_XYLOPHONE: SoundSoundEnum = SoundSoundEnum::BlockNoteBlockXylophone;
    pub const BLOCK_NYLIUM_BREAK: SoundSoundEnum = SoundSoundEnum::BlockNyliumBreak;
    pub const BLOCK_NYLIUM_FALL: SoundSoundEnum = SoundSoundEnum::BlockNyliumFall;
    pub const BLOCK_NYLIUM_HIT: SoundSoundEnum = SoundSoundEnum::BlockNyliumHit;
    pub const BLOCK_NYLIUM_PLACE: SoundSoundEnum = SoundSoundEnum::BlockNyliumPlace;
    pub const BLOCK_NYLIUM_STEP: SoundSoundEnum = SoundSoundEnum::BlockNyliumStep;
    pub const BLOCK_PACKED_MUD_BREAK: SoundSoundEnum = SoundSoundEnum::BlockPackedMudBreak;
    pub const BLOCK_PACKED_MUD_FALL: SoundSoundEnum = SoundSoundEnum::BlockPackedMudFall;
    pub const BLOCK_PACKED_MUD_HIT: SoundSoundEnum = SoundSoundEnum::BlockPackedMudHit;
    pub const BLOCK_PACKED_MUD_PLACE: SoundSoundEnum = SoundSoundEnum::BlockPackedMudPlace;
    pub const BLOCK_PACKED_MUD_STEP: SoundSoundEnum = SoundSoundEnum::BlockPackedMudStep;
    pub const BLOCK_PINK_PETALS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockPinkPetalsBreak;
    pub const BLOCK_PINK_PETALS_FALL: SoundSoundEnum = SoundSoundEnum::BlockPinkPetalsFall;
    pub const BLOCK_PINK_PETALS_HIT: SoundSoundEnum = SoundSoundEnum::BlockPinkPetalsHit;
    pub const BLOCK_PINK_PETALS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockPinkPetalsPlace;
    pub const BLOCK_PINK_PETALS_STEP: SoundSoundEnum = SoundSoundEnum::BlockPinkPetalsStep;
    pub const BLOCK_PISTON_CONTRACT: SoundSoundEnum = SoundSoundEnum::BlockPistonContract;
    pub const BLOCK_PISTON_EXTEND: SoundSoundEnum = SoundSoundEnum::BlockPistonExtend;
    pub const BLOCK_POINTED_DRIPSTONE_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockPointedDripstoneBreak;
    pub const BLOCK_POINTED_DRIPSTONE_DRIP_LAVA: SoundSoundEnum =
        SoundSoundEnum::BlockPointedDripstoneDripLava;
    pub const BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON: SoundSoundEnum =
        SoundSoundEnum::BlockPointedDripstoneDripLavaIntoCauldron;
    pub const BLOCK_POINTED_DRIPSTONE_DRIP_WATER: SoundSoundEnum =
        SoundSoundEnum::BlockPointedDripstoneDripWater;
    pub const BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON: SoundSoundEnum =
        SoundSoundEnum::BlockPointedDripstoneDripWaterIntoCauldron;
    pub const BLOCK_POINTED_DRIPSTONE_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockPointedDripstoneFall;
    pub const BLOCK_POINTED_DRIPSTONE_HIT: SoundSoundEnum =
        SoundSoundEnum::BlockPointedDripstoneHit;
    pub const BLOCK_POINTED_DRIPSTONE_LAND: SoundSoundEnum =
        SoundSoundEnum::BlockPointedDripstoneLand;
    pub const BLOCK_POINTED_DRIPSTONE_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockPointedDripstonePlace;
    pub const BLOCK_POINTED_DRIPSTONE_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockPointedDripstoneStep;
    pub const BLOCK_POLISHED_DEEPSLATE_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockPolishedDeepslateBreak;
    pub const BLOCK_POLISHED_DEEPSLATE_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockPolishedDeepslateFall;
    pub const BLOCK_POLISHED_DEEPSLATE_HIT: SoundSoundEnum =
        SoundSoundEnum::BlockPolishedDeepslateHit;
    pub const BLOCK_POLISHED_DEEPSLATE_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockPolishedDeepslatePlace;
    pub const BLOCK_POLISHED_DEEPSLATE_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockPolishedDeepslateStep;
    pub const BLOCK_PORTAL_AMBIENT: SoundSoundEnum = SoundSoundEnum::BlockPortalAmbient;
    pub const BLOCK_PORTAL_TRAVEL: SoundSoundEnum = SoundSoundEnum::BlockPortalTravel;
    pub const BLOCK_PORTAL_TRIGGER: SoundSoundEnum = SoundSoundEnum::BlockPortalTrigger;
    pub const BLOCK_POWDER_SNOW_BREAK: SoundSoundEnum = SoundSoundEnum::BlockPowderSnowBreak;
    pub const BLOCK_POWDER_SNOW_FALL: SoundSoundEnum = SoundSoundEnum::BlockPowderSnowFall;
    pub const BLOCK_POWDER_SNOW_HIT: SoundSoundEnum = SoundSoundEnum::BlockPowderSnowHit;
    pub const BLOCK_POWDER_SNOW_PLACE: SoundSoundEnum = SoundSoundEnum::BlockPowderSnowPlace;
    pub const BLOCK_POWDER_SNOW_STEP: SoundSoundEnum = SoundSoundEnum::BlockPowderSnowStep;
    pub const BLOCK_PUMPKIN_CARVE: SoundSoundEnum = SoundSoundEnum::BlockPumpkinCarve;
    pub const BLOCK_REDSTONE_TORCH_BURNOUT: SoundSoundEnum =
        SoundSoundEnum::BlockRedstoneTorchBurnout;
    pub const BLOCK_RESPAWN_ANCHOR_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::BlockRespawnAnchorAmbient;
    pub const BLOCK_RESPAWN_ANCHOR_CHARGE: SoundSoundEnum =
        SoundSoundEnum::BlockRespawnAnchorCharge;
    pub const BLOCK_RESPAWN_ANCHOR_DEPLETE: SoundSoundEnum =
        SoundSoundEnum::BlockRespawnAnchorDeplete;
    pub const BLOCK_RESPAWN_ANCHOR_SET_SPAWN: SoundSoundEnum =
        SoundSoundEnum::BlockRespawnAnchorSetSpawn;
    pub const BLOCK_ROOTED_DIRT_BREAK: SoundSoundEnum = SoundSoundEnum::BlockRootedDirtBreak;
    pub const BLOCK_ROOTED_DIRT_FALL: SoundSoundEnum = SoundSoundEnum::BlockRootedDirtFall;
    pub const BLOCK_ROOTED_DIRT_HIT: SoundSoundEnum = SoundSoundEnum::BlockRootedDirtHit;
    pub const BLOCK_ROOTED_DIRT_PLACE: SoundSoundEnum = SoundSoundEnum::BlockRootedDirtPlace;
    pub const BLOCK_ROOTED_DIRT_STEP: SoundSoundEnum = SoundSoundEnum::BlockRootedDirtStep;
    pub const BLOCK_ROOTS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockRootsBreak;
    pub const BLOCK_ROOTS_FALL: SoundSoundEnum = SoundSoundEnum::BlockRootsFall;
    pub const BLOCK_ROOTS_HIT: SoundSoundEnum = SoundSoundEnum::BlockRootsHit;
    pub const BLOCK_ROOTS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockRootsPlace;
    pub const BLOCK_ROOTS_STEP: SoundSoundEnum = SoundSoundEnum::BlockRootsStep;
    pub const BLOCK_SAND_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSandBreak;
    pub const BLOCK_SAND_FALL: SoundSoundEnum = SoundSoundEnum::BlockSandFall;
    pub const BLOCK_SAND_HIT: SoundSoundEnum = SoundSoundEnum::BlockSandHit;
    pub const BLOCK_SAND_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSandPlace;
    pub const BLOCK_SAND_STEP: SoundSoundEnum = SoundSoundEnum::BlockSandStep;
    pub const BLOCK_SCAFFOLDING_BREAK: SoundSoundEnum = SoundSoundEnum::BlockScaffoldingBreak;
    pub const BLOCK_SCAFFOLDING_FALL: SoundSoundEnum = SoundSoundEnum::BlockScaffoldingFall;
    pub const BLOCK_SCAFFOLDING_HIT: SoundSoundEnum = SoundSoundEnum::BlockScaffoldingHit;
    pub const BLOCK_SCAFFOLDING_PLACE: SoundSoundEnum = SoundSoundEnum::BlockScaffoldingPlace;
    pub const BLOCK_SCAFFOLDING_STEP: SoundSoundEnum = SoundSoundEnum::BlockScaffoldingStep;
    pub const BLOCK_SCULK_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSculkBreak;
    pub const BLOCK_SCULK_CATALYST_BLOOM: SoundSoundEnum = SoundSoundEnum::BlockSculkCatalystBloom;
    pub const BLOCK_SCULK_CATALYST_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSculkCatalystBreak;
    pub const BLOCK_SCULK_CATALYST_FALL: SoundSoundEnum = SoundSoundEnum::BlockSculkCatalystFall;
    pub const BLOCK_SCULK_CATALYST_HIT: SoundSoundEnum = SoundSoundEnum::BlockSculkCatalystHit;
    pub const BLOCK_SCULK_CATALYST_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSculkCatalystPlace;
    pub const BLOCK_SCULK_CATALYST_STEP: SoundSoundEnum = SoundSoundEnum::BlockSculkCatalystStep;
    pub const BLOCK_SCULK_CHARGE: SoundSoundEnum = SoundSoundEnum::BlockSculkCharge;
    pub const BLOCK_SCULK_FALL: SoundSoundEnum = SoundSoundEnum::BlockSculkFall;
    pub const BLOCK_SCULK_HIT: SoundSoundEnum = SoundSoundEnum::BlockSculkHit;
    pub const BLOCK_SCULK_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSculkPlace;
    pub const BLOCK_SCULK_SENSOR_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSculkSensorBreak;
    pub const BLOCK_SCULK_SENSOR_CLICKING: SoundSoundEnum =
        SoundSoundEnum::BlockSculkSensorClicking;
    pub const BLOCK_SCULK_SENSOR_CLICKING_STOP: SoundSoundEnum =
        SoundSoundEnum::BlockSculkSensorClickingStop;
    pub const BLOCK_SCULK_SENSOR_FALL: SoundSoundEnum = SoundSoundEnum::BlockSculkSensorFall;
    pub const BLOCK_SCULK_SENSOR_HIT: SoundSoundEnum = SoundSoundEnum::BlockSculkSensorHit;
    pub const BLOCK_SCULK_SENSOR_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSculkSensorPlace;
    pub const BLOCK_SCULK_SENSOR_STEP: SoundSoundEnum = SoundSoundEnum::BlockSculkSensorStep;
    pub const BLOCK_SCULK_SHRIEKER_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSculkShriekerBreak;
    pub const BLOCK_SCULK_SHRIEKER_FALL: SoundSoundEnum = SoundSoundEnum::BlockSculkShriekerFall;
    pub const BLOCK_SCULK_SHRIEKER_HIT: SoundSoundEnum = SoundSoundEnum::BlockSculkShriekerHit;
    pub const BLOCK_SCULK_SHRIEKER_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSculkShriekerPlace;
    pub const BLOCK_SCULK_SHRIEKER_SHRIEK: SoundSoundEnum =
        SoundSoundEnum::BlockSculkShriekerShriek;
    pub const BLOCK_SCULK_SHRIEKER_STEP: SoundSoundEnum = SoundSoundEnum::BlockSculkShriekerStep;
    pub const BLOCK_SCULK_SPREAD: SoundSoundEnum = SoundSoundEnum::BlockSculkSpread;
    pub const BLOCK_SCULK_STEP: SoundSoundEnum = SoundSoundEnum::BlockSculkStep;
    pub const BLOCK_SCULK_VEIN_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSculkVeinBreak;
    pub const BLOCK_SCULK_VEIN_FALL: SoundSoundEnum = SoundSoundEnum::BlockSculkVeinFall;
    pub const BLOCK_SCULK_VEIN_HIT: SoundSoundEnum = SoundSoundEnum::BlockSculkVeinHit;
    pub const BLOCK_SCULK_VEIN_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSculkVeinPlace;
    pub const BLOCK_SCULK_VEIN_STEP: SoundSoundEnum = SoundSoundEnum::BlockSculkVeinStep;
    pub const BLOCK_SHROOMLIGHT_BREAK: SoundSoundEnum = SoundSoundEnum::BlockShroomlightBreak;
    pub const BLOCK_SHROOMLIGHT_FALL: SoundSoundEnum = SoundSoundEnum::BlockShroomlightFall;
    pub const BLOCK_SHROOMLIGHT_HIT: SoundSoundEnum = SoundSoundEnum::BlockShroomlightHit;
    pub const BLOCK_SHROOMLIGHT_PLACE: SoundSoundEnum = SoundSoundEnum::BlockShroomlightPlace;
    pub const BLOCK_SHROOMLIGHT_STEP: SoundSoundEnum = SoundSoundEnum::BlockShroomlightStep;
    pub const BLOCK_SHULKER_BOX_CLOSE: SoundSoundEnum = SoundSoundEnum::BlockShulkerBoxClose;
    pub const BLOCK_SHULKER_BOX_OPEN: SoundSoundEnum = SoundSoundEnum::BlockShulkerBoxOpen;
    pub const BLOCK_SIGN_WAXED_INTERACT_FAIL: SoundSoundEnum =
        SoundSoundEnum::BlockSignWaxedInteractFail;
    pub const BLOCK_SLIME_BLOCK_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSlimeBlockBreak;
    pub const BLOCK_SLIME_BLOCK_FALL: SoundSoundEnum = SoundSoundEnum::BlockSlimeBlockFall;
    pub const BLOCK_SLIME_BLOCK_HIT: SoundSoundEnum = SoundSoundEnum::BlockSlimeBlockHit;
    pub const BLOCK_SLIME_BLOCK_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSlimeBlockPlace;
    pub const BLOCK_SLIME_BLOCK_STEP: SoundSoundEnum = SoundSoundEnum::BlockSlimeBlockStep;
    pub const BLOCK_SMALL_AMETHYST_BUD_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockSmallAmethystBudBreak;
    pub const BLOCK_SMALL_AMETHYST_BUD_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockSmallAmethystBudPlace;
    pub const BLOCK_SMALL_DRIPLEAF_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSmallDripleafBreak;
    pub const BLOCK_SMALL_DRIPLEAF_FALL: SoundSoundEnum = SoundSoundEnum::BlockSmallDripleafFall;
    pub const BLOCK_SMALL_DRIPLEAF_HIT: SoundSoundEnum = SoundSoundEnum::BlockSmallDripleafHit;
    pub const BLOCK_SMALL_DRIPLEAF_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSmallDripleafPlace;
    pub const BLOCK_SMALL_DRIPLEAF_STEP: SoundSoundEnum = SoundSoundEnum::BlockSmallDripleafStep;
    pub const BLOCK_SMITHING_TABLE_USE: SoundSoundEnum = SoundSoundEnum::BlockSmithingTableUse;
    pub const BLOCK_SMOKER_SMOKE: SoundSoundEnum = SoundSoundEnum::BlockSmokerSmoke;
    pub const BLOCK_SNIFFER_EGG_CRACK: SoundSoundEnum = SoundSoundEnum::BlockSnifferEggCrack;
    pub const BLOCK_SNIFFER_EGG_HATCH: SoundSoundEnum = SoundSoundEnum::BlockSnifferEggHatch;
    pub const BLOCK_SNIFFER_EGG_PLOP: SoundSoundEnum = SoundSoundEnum::BlockSnifferEggPlop;
    pub const BLOCK_SNOW_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSnowBreak;
    pub const BLOCK_SNOW_FALL: SoundSoundEnum = SoundSoundEnum::BlockSnowFall;
    pub const BLOCK_SNOW_HIT: SoundSoundEnum = SoundSoundEnum::BlockSnowHit;
    pub const BLOCK_SNOW_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSnowPlace;
    pub const BLOCK_SNOW_STEP: SoundSoundEnum = SoundSoundEnum::BlockSnowStep;
    pub const BLOCK_SOUL_SAND_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSoulSandBreak;
    pub const BLOCK_SOUL_SAND_FALL: SoundSoundEnum = SoundSoundEnum::BlockSoulSandFall;
    pub const BLOCK_SOUL_SAND_HIT: SoundSoundEnum = SoundSoundEnum::BlockSoulSandHit;
    pub const BLOCK_SOUL_SAND_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSoulSandPlace;
    pub const BLOCK_SOUL_SAND_STEP: SoundSoundEnum = SoundSoundEnum::BlockSoulSandStep;
    pub const BLOCK_SOUL_SOIL_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSoulSoilBreak;
    pub const BLOCK_SOUL_SOIL_FALL: SoundSoundEnum = SoundSoundEnum::BlockSoulSoilFall;
    pub const BLOCK_SOUL_SOIL_HIT: SoundSoundEnum = SoundSoundEnum::BlockSoulSoilHit;
    pub const BLOCK_SOUL_SOIL_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSoulSoilPlace;
    pub const BLOCK_SOUL_SOIL_STEP: SoundSoundEnum = SoundSoundEnum::BlockSoulSoilStep;
    pub const BLOCK_SPORE_BLOSSOM_BREAK: SoundSoundEnum = SoundSoundEnum::BlockSporeBlossomBreak;
    pub const BLOCK_SPORE_BLOSSOM_FALL: SoundSoundEnum = SoundSoundEnum::BlockSporeBlossomFall;
    pub const BLOCK_SPORE_BLOSSOM_HIT: SoundSoundEnum = SoundSoundEnum::BlockSporeBlossomHit;
    pub const BLOCK_SPORE_BLOSSOM_PLACE: SoundSoundEnum = SoundSoundEnum::BlockSporeBlossomPlace;
    pub const BLOCK_SPORE_BLOSSOM_STEP: SoundSoundEnum = SoundSoundEnum::BlockSporeBlossomStep;
    pub const BLOCK_STEM_BREAK: SoundSoundEnum = SoundSoundEnum::BlockStemBreak;
    pub const BLOCK_STEM_FALL: SoundSoundEnum = SoundSoundEnum::BlockStemFall;
    pub const BLOCK_STEM_HIT: SoundSoundEnum = SoundSoundEnum::BlockStemHit;
    pub const BLOCK_STEM_PLACE: SoundSoundEnum = SoundSoundEnum::BlockStemPlace;
    pub const BLOCK_STEM_STEP: SoundSoundEnum = SoundSoundEnum::BlockStemStep;
    pub const BLOCK_STONE_BREAK: SoundSoundEnum = SoundSoundEnum::BlockStoneBreak;
    pub const BLOCK_STONE_BUTTON_CLICK_OFF: SoundSoundEnum =
        SoundSoundEnum::BlockStoneButtonClickOff;
    pub const BLOCK_STONE_BUTTON_CLICK_ON: SoundSoundEnum = SoundSoundEnum::BlockStoneButtonClickOn;
    pub const BLOCK_STONE_FALL: SoundSoundEnum = SoundSoundEnum::BlockStoneFall;
    pub const BLOCK_STONE_HIT: SoundSoundEnum = SoundSoundEnum::BlockStoneHit;
    pub const BLOCK_STONE_PLACE: SoundSoundEnum = SoundSoundEnum::BlockStonePlace;
    pub const BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF: SoundSoundEnum =
        SoundSoundEnum::BlockStonePressurePlateClickOff;
    pub const BLOCK_STONE_PRESSURE_PLATE_CLICK_ON: SoundSoundEnum =
        SoundSoundEnum::BlockStonePressurePlateClickOn;
    pub const BLOCK_STONE_STEP: SoundSoundEnum = SoundSoundEnum::BlockStoneStep;
    pub const BLOCK_SUSPICIOUS_GRAVEL_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockSuspiciousGravelBreak;
    pub const BLOCK_SUSPICIOUS_GRAVEL_FALL: SoundSoundEnum =
        SoundSoundEnum::BlockSuspiciousGravelFall;
    pub const BLOCK_SUSPICIOUS_GRAVEL_HIT: SoundSoundEnum =
        SoundSoundEnum::BlockSuspiciousGravelHit;
    pub const BLOCK_SUSPICIOUS_GRAVEL_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockSuspiciousGravelPlace;
    pub const BLOCK_SUSPICIOUS_GRAVEL_STEP: SoundSoundEnum =
        SoundSoundEnum::BlockSuspiciousGravelStep;
    pub const BLOCK_SUSPICIOUS_SAND_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockSuspiciousSandBreak;
    pub const BLOCK_SUSPICIOUS_SAND_FALL: SoundSoundEnum = SoundSoundEnum::BlockSuspiciousSandFall;
    pub const BLOCK_SUSPICIOUS_SAND_HIT: SoundSoundEnum = SoundSoundEnum::BlockSuspiciousSandHit;
    pub const BLOCK_SUSPICIOUS_SAND_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockSuspiciousSandPlace;
    pub const BLOCK_SUSPICIOUS_SAND_STEP: SoundSoundEnum = SoundSoundEnum::BlockSuspiciousSandStep;
    pub const BLOCK_SWEET_BERRY_BUSH_BREAK: SoundSoundEnum =
        SoundSoundEnum::BlockSweetBerryBushBreak;
    pub const BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES: SoundSoundEnum =
        SoundSoundEnum::BlockSweetBerryBushPickBerries;
    pub const BLOCK_SWEET_BERRY_BUSH_PLACE: SoundSoundEnum =
        SoundSoundEnum::BlockSweetBerryBushPlace;
    pub const BLOCK_TRIPWIRE_ATTACH: SoundSoundEnum = SoundSoundEnum::BlockTripwireAttach;
    pub const BLOCK_TRIPWIRE_CLICK_OFF: SoundSoundEnum = SoundSoundEnum::BlockTripwireClickOff;
    pub const BLOCK_TRIPWIRE_CLICK_ON: SoundSoundEnum = SoundSoundEnum::BlockTripwireClickOn;
    pub const BLOCK_TRIPWIRE_DETACH: SoundSoundEnum = SoundSoundEnum::BlockTripwireDetach;
    pub const BLOCK_TUFF_BREAK: SoundSoundEnum = SoundSoundEnum::BlockTuffBreak;
    pub const BLOCK_TUFF_FALL: SoundSoundEnum = SoundSoundEnum::BlockTuffFall;
    pub const BLOCK_TUFF_HIT: SoundSoundEnum = SoundSoundEnum::BlockTuffHit;
    pub const BLOCK_TUFF_PLACE: SoundSoundEnum = SoundSoundEnum::BlockTuffPlace;
    pub const BLOCK_TUFF_STEP: SoundSoundEnum = SoundSoundEnum::BlockTuffStep;
    pub const BLOCK_VINE_BREAK: SoundSoundEnum = SoundSoundEnum::BlockVineBreak;
    pub const BLOCK_VINE_FALL: SoundSoundEnum = SoundSoundEnum::BlockVineFall;
    pub const BLOCK_VINE_HIT: SoundSoundEnum = SoundSoundEnum::BlockVineHit;
    pub const BLOCK_VINE_PLACE: SoundSoundEnum = SoundSoundEnum::BlockVinePlace;
    pub const BLOCK_VINE_STEP: SoundSoundEnum = SoundSoundEnum::BlockVineStep;
    pub const BLOCK_WART_BLOCK_BREAK: SoundSoundEnum = SoundSoundEnum::BlockWartBlockBreak;
    pub const BLOCK_WART_BLOCK_FALL: SoundSoundEnum = SoundSoundEnum::BlockWartBlockFall;
    pub const BLOCK_WART_BLOCK_HIT: SoundSoundEnum = SoundSoundEnum::BlockWartBlockHit;
    pub const BLOCK_WART_BLOCK_PLACE: SoundSoundEnum = SoundSoundEnum::BlockWartBlockPlace;
    pub const BLOCK_WART_BLOCK_STEP: SoundSoundEnum = SoundSoundEnum::BlockWartBlockStep;
    pub const BLOCK_WATER_AMBIENT: SoundSoundEnum = SoundSoundEnum::BlockWaterAmbient;
    pub const BLOCK_WEEPING_VINES_BREAK: SoundSoundEnum = SoundSoundEnum::BlockWeepingVinesBreak;
    pub const BLOCK_WEEPING_VINES_FALL: SoundSoundEnum = SoundSoundEnum::BlockWeepingVinesFall;
    pub const BLOCK_WEEPING_VINES_HIT: SoundSoundEnum = SoundSoundEnum::BlockWeepingVinesHit;
    pub const BLOCK_WEEPING_VINES_PLACE: SoundSoundEnum = SoundSoundEnum::BlockWeepingVinesPlace;
    pub const BLOCK_WEEPING_VINES_STEP: SoundSoundEnum = SoundSoundEnum::BlockWeepingVinesStep;
    pub const BLOCK_WET_GRASS_BREAK: SoundSoundEnum = SoundSoundEnum::BlockWetGrassBreak;
    pub const BLOCK_WET_GRASS_FALL: SoundSoundEnum = SoundSoundEnum::BlockWetGrassFall;
    pub const BLOCK_WET_GRASS_HIT: SoundSoundEnum = SoundSoundEnum::BlockWetGrassHit;
    pub const BLOCK_WET_GRASS_PLACE: SoundSoundEnum = SoundSoundEnum::BlockWetGrassPlace;
    pub const BLOCK_WET_GRASS_STEP: SoundSoundEnum = SoundSoundEnum::BlockWetGrassStep;
    pub const BLOCK_WOODEN_BUTTON_CLICK_OFF: SoundSoundEnum =
        SoundSoundEnum::BlockWoodenButtonClickOff;
    pub const BLOCK_WOODEN_BUTTON_CLICK_ON: SoundSoundEnum =
        SoundSoundEnum::BlockWoodenButtonClickOn;
    pub const BLOCK_WOODEN_DOOR_CLOSE: SoundSoundEnum = SoundSoundEnum::BlockWoodenDoorClose;
    pub const BLOCK_WOODEN_DOOR_OPEN: SoundSoundEnum = SoundSoundEnum::BlockWoodenDoorOpen;
    pub const BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF: SoundSoundEnum =
        SoundSoundEnum::BlockWoodenPressurePlateClickOff;
    pub const BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON: SoundSoundEnum =
        SoundSoundEnum::BlockWoodenPressurePlateClickOn;
    pub const BLOCK_WOODEN_TRAPDOOR_CLOSE: SoundSoundEnum =
        SoundSoundEnum::BlockWoodenTrapdoorClose;
    pub const BLOCK_WOODEN_TRAPDOOR_OPEN: SoundSoundEnum = SoundSoundEnum::BlockWoodenTrapdoorOpen;
    pub const BLOCK_WOOD_BREAK: SoundSoundEnum = SoundSoundEnum::BlockWoodBreak;
    pub const BLOCK_WOOD_FALL: SoundSoundEnum = SoundSoundEnum::BlockWoodFall;
    pub const BLOCK_WOOD_HIT: SoundSoundEnum = SoundSoundEnum::BlockWoodHit;
    pub const BLOCK_WOOD_PLACE: SoundSoundEnum = SoundSoundEnum::BlockWoodPlace;
    pub const BLOCK_WOOD_STEP: SoundSoundEnum = SoundSoundEnum::BlockWoodStep;
    pub const BLOCK_WOOL_BREAK: SoundSoundEnum = SoundSoundEnum::BlockWoolBreak;
    pub const BLOCK_WOOL_FALL: SoundSoundEnum = SoundSoundEnum::BlockWoolFall;
    pub const BLOCK_WOOL_HIT: SoundSoundEnum = SoundSoundEnum::BlockWoolHit;
    pub const BLOCK_WOOL_PLACE: SoundSoundEnum = SoundSoundEnum::BlockWoolPlace;
    pub const BLOCK_WOOL_STEP: SoundSoundEnum = SoundSoundEnum::BlockWoolStep;
    pub const ENCHANT_THORNS_HIT: SoundSoundEnum = SoundSoundEnum::EnchantThornsHit;
    pub const ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM: SoundSoundEnum =
        SoundSoundEnum::EntityAllayAmbientWithoutItem;
    pub const ENTITY_ALLAY_AMBIENT_WITH_ITEM: SoundSoundEnum =
        SoundSoundEnum::EntityAllayAmbientWithItem;
    pub const ENTITY_ALLAY_DEATH: SoundSoundEnum = SoundSoundEnum::EntityAllayDeath;
    pub const ENTITY_ALLAY_HURT: SoundSoundEnum = SoundSoundEnum::EntityAllayHurt;
    pub const ENTITY_ALLAY_ITEM_GIVEN: SoundSoundEnum = SoundSoundEnum::EntityAllayItemGiven;
    pub const ENTITY_ALLAY_ITEM_TAKEN: SoundSoundEnum = SoundSoundEnum::EntityAllayItemTaken;
    pub const ENTITY_ALLAY_ITEM_THROWN: SoundSoundEnum = SoundSoundEnum::EntityAllayItemThrown;
    pub const ENTITY_ARMOR_STAND_BREAK: SoundSoundEnum = SoundSoundEnum::EntityArmorStandBreak;
    pub const ENTITY_ARMOR_STAND_FALL: SoundSoundEnum = SoundSoundEnum::EntityArmorStandFall;
    pub const ENTITY_ARMOR_STAND_HIT: SoundSoundEnum = SoundSoundEnum::EntityArmorStandHit;
    pub const ENTITY_ARMOR_STAND_PLACE: SoundSoundEnum = SoundSoundEnum::EntityArmorStandPlace;
    pub const ENTITY_ARROW_HIT: SoundSoundEnum = SoundSoundEnum::EntityArrowHit;
    pub const ENTITY_ARROW_HIT_PLAYER: SoundSoundEnum = SoundSoundEnum::EntityArrowHitPlayer;
    pub const ENTITY_ARROW_SHOOT: SoundSoundEnum = SoundSoundEnum::EntityArrowShoot;
    pub const ENTITY_AXOLOTL_ATTACK: SoundSoundEnum = SoundSoundEnum::EntityAxolotlAttack;
    pub const ENTITY_AXOLOTL_DEATH: SoundSoundEnum = SoundSoundEnum::EntityAxolotlDeath;
    pub const ENTITY_AXOLOTL_HURT: SoundSoundEnum = SoundSoundEnum::EntityAxolotlHurt;
    pub const ENTITY_AXOLOTL_IDLE_AIR: SoundSoundEnum = SoundSoundEnum::EntityAxolotlIdleAir;
    pub const ENTITY_AXOLOTL_IDLE_WATER: SoundSoundEnum = SoundSoundEnum::EntityAxolotlIdleWater;
    pub const ENTITY_AXOLOTL_SPLASH: SoundSoundEnum = SoundSoundEnum::EntityAxolotlSplash;
    pub const ENTITY_AXOLOTL_SWIM: SoundSoundEnum = SoundSoundEnum::EntityAxolotlSwim;
    pub const ENTITY_BAT_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityBatAmbient;
    pub const ENTITY_BAT_DEATH: SoundSoundEnum = SoundSoundEnum::EntityBatDeath;
    pub const ENTITY_BAT_HURT: SoundSoundEnum = SoundSoundEnum::EntityBatHurt;
    pub const ENTITY_BAT_LOOP: SoundSoundEnum = SoundSoundEnum::EntityBatLoop;
    pub const ENTITY_BAT_TAKEOFF: SoundSoundEnum = SoundSoundEnum::EntityBatTakeoff;
    pub const ENTITY_BEE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityBeeDeath;
    pub const ENTITY_BEE_HURT: SoundSoundEnum = SoundSoundEnum::EntityBeeHurt;
    pub const ENTITY_BEE_LOOP: SoundSoundEnum = SoundSoundEnum::EntityBeeLoop;
    pub const ENTITY_BEE_LOOP_AGGRESSIVE: SoundSoundEnum = SoundSoundEnum::EntityBeeLoopAggressive;
    pub const ENTITY_BEE_POLLINATE: SoundSoundEnum = SoundSoundEnum::EntityBeePollinate;
    pub const ENTITY_BEE_STING: SoundSoundEnum = SoundSoundEnum::EntityBeeSting;
    pub const ENTITY_BLAZE_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityBlazeAmbient;
    pub const ENTITY_BLAZE_BURN: SoundSoundEnum = SoundSoundEnum::EntityBlazeBurn;
    pub const ENTITY_BLAZE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityBlazeDeath;
    pub const ENTITY_BLAZE_HURT: SoundSoundEnum = SoundSoundEnum::EntityBlazeHurt;
    pub const ENTITY_BLAZE_SHOOT: SoundSoundEnum = SoundSoundEnum::EntityBlazeShoot;
    pub const ENTITY_BOAT_PADDLE_LAND: SoundSoundEnum = SoundSoundEnum::EntityBoatPaddleLand;
    pub const ENTITY_BOAT_PADDLE_WATER: SoundSoundEnum = SoundSoundEnum::EntityBoatPaddleWater;
    pub const ENTITY_CAMEL_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityCamelAmbient;
    pub const ENTITY_CAMEL_DASH: SoundSoundEnum = SoundSoundEnum::EntityCamelDash;
    pub const ENTITY_CAMEL_DASH_READY: SoundSoundEnum = SoundSoundEnum::EntityCamelDashReady;
    pub const ENTITY_CAMEL_DEATH: SoundSoundEnum = SoundSoundEnum::EntityCamelDeath;
    pub const ENTITY_CAMEL_EAT: SoundSoundEnum = SoundSoundEnum::EntityCamelEat;
    pub const ENTITY_CAMEL_HURT: SoundSoundEnum = SoundSoundEnum::EntityCamelHurt;
    pub const ENTITY_CAMEL_SADDLE: SoundSoundEnum = SoundSoundEnum::EntityCamelSaddle;
    pub const ENTITY_CAMEL_SIT: SoundSoundEnum = SoundSoundEnum::EntityCamelSit;
    pub const ENTITY_CAMEL_STAND: SoundSoundEnum = SoundSoundEnum::EntityCamelStand;
    pub const ENTITY_CAMEL_STEP: SoundSoundEnum = SoundSoundEnum::EntityCamelStep;
    pub const ENTITY_CAMEL_STEP_SAND: SoundSoundEnum = SoundSoundEnum::EntityCamelStepSand;
    pub const ENTITY_CAT_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityCatAmbient;
    pub const ENTITY_CAT_BEG_FOR_FOOD: SoundSoundEnum = SoundSoundEnum::EntityCatBegForFood;
    pub const ENTITY_CAT_DEATH: SoundSoundEnum = SoundSoundEnum::EntityCatDeath;
    pub const ENTITY_CAT_EAT: SoundSoundEnum = SoundSoundEnum::EntityCatEat;
    pub const ENTITY_CAT_HISS: SoundSoundEnum = SoundSoundEnum::EntityCatHiss;
    pub const ENTITY_CAT_HURT: SoundSoundEnum = SoundSoundEnum::EntityCatHurt;
    pub const ENTITY_CAT_PURR: SoundSoundEnum = SoundSoundEnum::EntityCatPurr;
    pub const ENTITY_CAT_PURREOW: SoundSoundEnum = SoundSoundEnum::EntityCatPurreow;
    pub const ENTITY_CAT_STRAY_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityCatStrayAmbient;
    pub const ENTITY_CHICKEN_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityChickenAmbient;
    pub const ENTITY_CHICKEN_DEATH: SoundSoundEnum = SoundSoundEnum::EntityChickenDeath;
    pub const ENTITY_CHICKEN_EGG: SoundSoundEnum = SoundSoundEnum::EntityChickenEgg;
    pub const ENTITY_CHICKEN_HURT: SoundSoundEnum = SoundSoundEnum::EntityChickenHurt;
    pub const ENTITY_CHICKEN_STEP: SoundSoundEnum = SoundSoundEnum::EntityChickenStep;
    pub const ENTITY_COD_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityCodAmbient;
    pub const ENTITY_COD_DEATH: SoundSoundEnum = SoundSoundEnum::EntityCodDeath;
    pub const ENTITY_COD_FLOP: SoundSoundEnum = SoundSoundEnum::EntityCodFlop;
    pub const ENTITY_COD_HURT: SoundSoundEnum = SoundSoundEnum::EntityCodHurt;
    pub const ENTITY_COW_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityCowAmbient;
    pub const ENTITY_COW_DEATH: SoundSoundEnum = SoundSoundEnum::EntityCowDeath;
    pub const ENTITY_COW_HURT: SoundSoundEnum = SoundSoundEnum::EntityCowHurt;
    pub const ENTITY_COW_MILK: SoundSoundEnum = SoundSoundEnum::EntityCowMilk;
    pub const ENTITY_COW_STEP: SoundSoundEnum = SoundSoundEnum::EntityCowStep;
    pub const ENTITY_CREEPER_DEATH: SoundSoundEnum = SoundSoundEnum::EntityCreeperDeath;
    pub const ENTITY_CREEPER_HURT: SoundSoundEnum = SoundSoundEnum::EntityCreeperHurt;
    pub const ENTITY_CREEPER_PRIMED: SoundSoundEnum = SoundSoundEnum::EntityCreeperPrimed;
    pub const ENTITY_DOLPHIN_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityDolphinAmbient;
    pub const ENTITY_DOLPHIN_AMBIENT_WATER: SoundSoundEnum =
        SoundSoundEnum::EntityDolphinAmbientWater;
    pub const ENTITY_DOLPHIN_ATTACK: SoundSoundEnum = SoundSoundEnum::EntityDolphinAttack;
    pub const ENTITY_DOLPHIN_DEATH: SoundSoundEnum = SoundSoundEnum::EntityDolphinDeath;
    pub const ENTITY_DOLPHIN_EAT: SoundSoundEnum = SoundSoundEnum::EntityDolphinEat;
    pub const ENTITY_DOLPHIN_HURT: SoundSoundEnum = SoundSoundEnum::EntityDolphinHurt;
    pub const ENTITY_DOLPHIN_JUMP: SoundSoundEnum = SoundSoundEnum::EntityDolphinJump;
    pub const ENTITY_DOLPHIN_PLAY: SoundSoundEnum = SoundSoundEnum::EntityDolphinPlay;
    pub const ENTITY_DOLPHIN_SPLASH: SoundSoundEnum = SoundSoundEnum::EntityDolphinSplash;
    pub const ENTITY_DOLPHIN_SWIM: SoundSoundEnum = SoundSoundEnum::EntityDolphinSwim;
    pub const ENTITY_DONKEY_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityDonkeyAmbient;
    pub const ENTITY_DONKEY_ANGRY: SoundSoundEnum = SoundSoundEnum::EntityDonkeyAngry;
    pub const ENTITY_DONKEY_CHEST: SoundSoundEnum = SoundSoundEnum::EntityDonkeyChest;
    pub const ENTITY_DONKEY_DEATH: SoundSoundEnum = SoundSoundEnum::EntityDonkeyDeath;
    pub const ENTITY_DONKEY_EAT: SoundSoundEnum = SoundSoundEnum::EntityDonkeyEat;
    pub const ENTITY_DONKEY_HURT: SoundSoundEnum = SoundSoundEnum::EntityDonkeyHurt;
    pub const ENTITY_DRAGON_FIREBALL_EXPLODE: SoundSoundEnum =
        SoundSoundEnum::EntityDragonFireballExplode;
    pub const ENTITY_DROWNED_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityDrownedAmbient;
    pub const ENTITY_DROWNED_AMBIENT_WATER: SoundSoundEnum =
        SoundSoundEnum::EntityDrownedAmbientWater;
    pub const ENTITY_DROWNED_DEATH: SoundSoundEnum = SoundSoundEnum::EntityDrownedDeath;
    pub const ENTITY_DROWNED_DEATH_WATER: SoundSoundEnum = SoundSoundEnum::EntityDrownedDeathWater;
    pub const ENTITY_DROWNED_HURT: SoundSoundEnum = SoundSoundEnum::EntityDrownedHurt;
    pub const ENTITY_DROWNED_HURT_WATER: SoundSoundEnum = SoundSoundEnum::EntityDrownedHurtWater;
    pub const ENTITY_DROWNED_SHOOT: SoundSoundEnum = SoundSoundEnum::EntityDrownedShoot;
    pub const ENTITY_DROWNED_STEP: SoundSoundEnum = SoundSoundEnum::EntityDrownedStep;
    pub const ENTITY_DROWNED_SWIM: SoundSoundEnum = SoundSoundEnum::EntityDrownedSwim;
    pub const ENTITY_EGG_THROW: SoundSoundEnum = SoundSoundEnum::EntityEggThrow;
    pub const ENTITY_ELDER_GUARDIAN_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityElderGuardianAmbient;
    pub const ENTITY_ELDER_GUARDIAN_AMBIENT_LAND: SoundSoundEnum =
        SoundSoundEnum::EntityElderGuardianAmbientLand;
    pub const ENTITY_ELDER_GUARDIAN_CURSE: SoundSoundEnum =
        SoundSoundEnum::EntityElderGuardianCurse;
    pub const ENTITY_ELDER_GUARDIAN_DEATH: SoundSoundEnum =
        SoundSoundEnum::EntityElderGuardianDeath;
    pub const ENTITY_ELDER_GUARDIAN_DEATH_LAND: SoundSoundEnum =
        SoundSoundEnum::EntityElderGuardianDeathLand;
    pub const ENTITY_ELDER_GUARDIAN_FLOP: SoundSoundEnum = SoundSoundEnum::EntityElderGuardianFlop;
    pub const ENTITY_ELDER_GUARDIAN_HURT: SoundSoundEnum = SoundSoundEnum::EntityElderGuardianHurt;
    pub const ENTITY_ELDER_GUARDIAN_HURT_LAND: SoundSoundEnum =
        SoundSoundEnum::EntityElderGuardianHurtLand;
    pub const ENTITY_ENDERMAN_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityEndermanAmbient;
    pub const ENTITY_ENDERMAN_DEATH: SoundSoundEnum = SoundSoundEnum::EntityEndermanDeath;
    pub const ENTITY_ENDERMAN_HURT: SoundSoundEnum = SoundSoundEnum::EntityEndermanHurt;
    pub const ENTITY_ENDERMAN_SCREAM: SoundSoundEnum = SoundSoundEnum::EntityEndermanScream;
    pub const ENTITY_ENDERMAN_STARE: SoundSoundEnum = SoundSoundEnum::EntityEndermanStare;
    pub const ENTITY_ENDERMAN_TELEPORT: SoundSoundEnum = SoundSoundEnum::EntityEndermanTeleport;
    pub const ENTITY_ENDERMITE_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityEndermiteAmbient;
    pub const ENTITY_ENDERMITE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityEndermiteDeath;
    pub const ENTITY_ENDERMITE_HURT: SoundSoundEnum = SoundSoundEnum::EntityEndermiteHurt;
    pub const ENTITY_ENDERMITE_STEP: SoundSoundEnum = SoundSoundEnum::EntityEndermiteStep;
    pub const ENTITY_ENDER_DRAGON_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityEnderDragonAmbient;
    pub const ENTITY_ENDER_DRAGON_DEATH: SoundSoundEnum = SoundSoundEnum::EntityEnderDragonDeath;
    pub const ENTITY_ENDER_DRAGON_FLAP: SoundSoundEnum = SoundSoundEnum::EntityEnderDragonFlap;
    pub const ENTITY_ENDER_DRAGON_GROWL: SoundSoundEnum = SoundSoundEnum::EntityEnderDragonGrowl;
    pub const ENTITY_ENDER_DRAGON_HURT: SoundSoundEnum = SoundSoundEnum::EntityEnderDragonHurt;
    pub const ENTITY_ENDER_DRAGON_SHOOT: SoundSoundEnum = SoundSoundEnum::EntityEnderDragonShoot;
    pub const ENTITY_ENDER_EYE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityEnderEyeDeath;
    pub const ENTITY_ENDER_EYE_LAUNCH: SoundSoundEnum = SoundSoundEnum::EntityEnderEyeLaunch;
    pub const ENTITY_ENDER_PEARL_THROW: SoundSoundEnum = SoundSoundEnum::EntityEnderPearlThrow;
    pub const ENTITY_EVOKER_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityEvokerAmbient;
    pub const ENTITY_EVOKER_CAST_SPELL: SoundSoundEnum = SoundSoundEnum::EntityEvokerCastSpell;
    pub const ENTITY_EVOKER_CELEBRATE: SoundSoundEnum = SoundSoundEnum::EntityEvokerCelebrate;
    pub const ENTITY_EVOKER_DEATH: SoundSoundEnum = SoundSoundEnum::EntityEvokerDeath;
    pub const ENTITY_EVOKER_FANGS_ATTACK: SoundSoundEnum = SoundSoundEnum::EntityEvokerFangsAttack;
    pub const ENTITY_EVOKER_HURT: SoundSoundEnum = SoundSoundEnum::EntityEvokerHurt;
    pub const ENTITY_EVOKER_PREPARE_ATTACK: SoundSoundEnum =
        SoundSoundEnum::EntityEvokerPrepareAttack;
    pub const ENTITY_EVOKER_PREPARE_SUMMON: SoundSoundEnum =
        SoundSoundEnum::EntityEvokerPrepareSummon;
    pub const ENTITY_EVOKER_PREPARE_WOLOLO: SoundSoundEnum =
        SoundSoundEnum::EntityEvokerPrepareWololo;
    pub const ENTITY_EXPERIENCE_BOTTLE_THROW: SoundSoundEnum =
        SoundSoundEnum::EntityExperienceBottleThrow;
    pub const ENTITY_EXPERIENCE_ORB_PICKUP: SoundSoundEnum =
        SoundSoundEnum::EntityExperienceOrbPickup;
    pub const ENTITY_FIREWORK_ROCKET_BLAST: SoundSoundEnum =
        SoundSoundEnum::EntityFireworkRocketBlast;
    pub const ENTITY_FIREWORK_ROCKET_BLAST_FAR: SoundSoundEnum =
        SoundSoundEnum::EntityFireworkRocketBlastFar;
    pub const ENTITY_FIREWORK_ROCKET_LARGE_BLAST: SoundSoundEnum =
        SoundSoundEnum::EntityFireworkRocketLargeBlast;
    pub const ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR: SoundSoundEnum =
        SoundSoundEnum::EntityFireworkRocketLargeBlastFar;
    pub const ENTITY_FIREWORK_ROCKET_LAUNCH: SoundSoundEnum =
        SoundSoundEnum::EntityFireworkRocketLaunch;
    pub const ENTITY_FIREWORK_ROCKET_SHOOT: SoundSoundEnum =
        SoundSoundEnum::EntityFireworkRocketShoot;
    pub const ENTITY_FIREWORK_ROCKET_TWINKLE: SoundSoundEnum =
        SoundSoundEnum::EntityFireworkRocketTwinkle;
    pub const ENTITY_FIREWORK_ROCKET_TWINKLE_FAR: SoundSoundEnum =
        SoundSoundEnum::EntityFireworkRocketTwinkleFar;
    pub const ENTITY_FISHING_BOBBER_RETRIEVE: SoundSoundEnum =
        SoundSoundEnum::EntityFishingBobberRetrieve;
    pub const ENTITY_FISHING_BOBBER_SPLASH: SoundSoundEnum =
        SoundSoundEnum::EntityFishingBobberSplash;
    pub const ENTITY_FISHING_BOBBER_THROW: SoundSoundEnum =
        SoundSoundEnum::EntityFishingBobberThrow;
    pub const ENTITY_FISH_SWIM: SoundSoundEnum = SoundSoundEnum::EntityFishSwim;
    pub const ENTITY_FOX_AGGRO: SoundSoundEnum = SoundSoundEnum::EntityFoxAggro;
    pub const ENTITY_FOX_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityFoxAmbient;
    pub const ENTITY_FOX_BITE: SoundSoundEnum = SoundSoundEnum::EntityFoxBite;
    pub const ENTITY_FOX_DEATH: SoundSoundEnum = SoundSoundEnum::EntityFoxDeath;
    pub const ENTITY_FOX_EAT: SoundSoundEnum = SoundSoundEnum::EntityFoxEat;
    pub const ENTITY_FOX_HURT: SoundSoundEnum = SoundSoundEnum::EntityFoxHurt;
    pub const ENTITY_FOX_SCREECH: SoundSoundEnum = SoundSoundEnum::EntityFoxScreech;
    pub const ENTITY_FOX_SLEEP: SoundSoundEnum = SoundSoundEnum::EntityFoxSleep;
    pub const ENTITY_FOX_SNIFF: SoundSoundEnum = SoundSoundEnum::EntityFoxSniff;
    pub const ENTITY_FOX_SPIT: SoundSoundEnum = SoundSoundEnum::EntityFoxSpit;
    pub const ENTITY_FOX_TELEPORT: SoundSoundEnum = SoundSoundEnum::EntityFoxTeleport;
    pub const ENTITY_FROG_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityFrogAmbient;
    pub const ENTITY_FROG_DEATH: SoundSoundEnum = SoundSoundEnum::EntityFrogDeath;
    pub const ENTITY_FROG_EAT: SoundSoundEnum = SoundSoundEnum::EntityFrogEat;
    pub const ENTITY_FROG_HURT: SoundSoundEnum = SoundSoundEnum::EntityFrogHurt;
    pub const ENTITY_FROG_LAY_SPAWN: SoundSoundEnum = SoundSoundEnum::EntityFrogLaySpawn;
    pub const ENTITY_FROG_LONG_JUMP: SoundSoundEnum = SoundSoundEnum::EntityFrogLongJump;
    pub const ENTITY_FROG_STEP: SoundSoundEnum = SoundSoundEnum::EntityFrogStep;
    pub const ENTITY_FROG_TONGUE: SoundSoundEnum = SoundSoundEnum::EntityFrogTongue;
    pub const ENTITY_GENERIC_BIG_FALL: SoundSoundEnum = SoundSoundEnum::EntityGenericBigFall;
    pub const ENTITY_GENERIC_BURN: SoundSoundEnum = SoundSoundEnum::EntityGenericBurn;
    pub const ENTITY_GENERIC_DEATH: SoundSoundEnum = SoundSoundEnum::EntityGenericDeath;
    pub const ENTITY_GENERIC_DRINK: SoundSoundEnum = SoundSoundEnum::EntityGenericDrink;
    pub const ENTITY_GENERIC_EAT: SoundSoundEnum = SoundSoundEnum::EntityGenericEat;
    pub const ENTITY_GENERIC_EXPLODE: SoundSoundEnum = SoundSoundEnum::EntityGenericExplode;
    pub const ENTITY_GENERIC_EXTINGUISH_FIRE: SoundSoundEnum =
        SoundSoundEnum::EntityGenericExtinguishFire;
    pub const ENTITY_GENERIC_HURT: SoundSoundEnum = SoundSoundEnum::EntityGenericHurt;
    pub const ENTITY_GENERIC_SMALL_FALL: SoundSoundEnum = SoundSoundEnum::EntityGenericSmallFall;
    pub const ENTITY_GENERIC_SPLASH: SoundSoundEnum = SoundSoundEnum::EntityGenericSplash;
    pub const ENTITY_GENERIC_SWIM: SoundSoundEnum = SoundSoundEnum::EntityGenericSwim;
    pub const ENTITY_GHAST_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityGhastAmbient;
    pub const ENTITY_GHAST_DEATH: SoundSoundEnum = SoundSoundEnum::EntityGhastDeath;
    pub const ENTITY_GHAST_HURT: SoundSoundEnum = SoundSoundEnum::EntityGhastHurt;
    pub const ENTITY_GHAST_SCREAM: SoundSoundEnum = SoundSoundEnum::EntityGhastScream;
    pub const ENTITY_GHAST_SHOOT: SoundSoundEnum = SoundSoundEnum::EntityGhastShoot;
    pub const ENTITY_GHAST_WARN: SoundSoundEnum = SoundSoundEnum::EntityGhastWarn;
    pub const ENTITY_GLOW_ITEM_FRAME_ADD_ITEM: SoundSoundEnum =
        SoundSoundEnum::EntityGlowItemFrameAddItem;
    pub const ENTITY_GLOW_ITEM_FRAME_BREAK: SoundSoundEnum =
        SoundSoundEnum::EntityGlowItemFrameBreak;
    pub const ENTITY_GLOW_ITEM_FRAME_PLACE: SoundSoundEnum =
        SoundSoundEnum::EntityGlowItemFramePlace;
    pub const ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM: SoundSoundEnum =
        SoundSoundEnum::EntityGlowItemFrameRemoveItem;
    pub const ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM: SoundSoundEnum =
        SoundSoundEnum::EntityGlowItemFrameRotateItem;
    pub const ENTITY_GLOW_SQUID_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityGlowSquidAmbient;
    pub const ENTITY_GLOW_SQUID_DEATH: SoundSoundEnum = SoundSoundEnum::EntityGlowSquidDeath;
    pub const ENTITY_GLOW_SQUID_HURT: SoundSoundEnum = SoundSoundEnum::EntityGlowSquidHurt;
    pub const ENTITY_GLOW_SQUID_SQUIRT: SoundSoundEnum = SoundSoundEnum::EntityGlowSquidSquirt;
    pub const ENTITY_GOAT_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityGoatAmbient;
    pub const ENTITY_GOAT_DEATH: SoundSoundEnum = SoundSoundEnum::EntityGoatDeath;
    pub const ENTITY_GOAT_EAT: SoundSoundEnum = SoundSoundEnum::EntityGoatEat;
    pub const ENTITY_GOAT_HORN_BREAK: SoundSoundEnum = SoundSoundEnum::EntityGoatHornBreak;
    pub const ENTITY_GOAT_HURT: SoundSoundEnum = SoundSoundEnum::EntityGoatHurt;
    pub const ENTITY_GOAT_LONG_JUMP: SoundSoundEnum = SoundSoundEnum::EntityGoatLongJump;
    pub const ENTITY_GOAT_MILK: SoundSoundEnum = SoundSoundEnum::EntityGoatMilk;
    pub const ENTITY_GOAT_PREPARE_RAM: SoundSoundEnum = SoundSoundEnum::EntityGoatPrepareRam;
    pub const ENTITY_GOAT_RAM_IMPACT: SoundSoundEnum = SoundSoundEnum::EntityGoatRamImpact;
    pub const ENTITY_GOAT_SCREAMING_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityGoatScreamingAmbient;
    pub const ENTITY_GOAT_SCREAMING_DEATH: SoundSoundEnum =
        SoundSoundEnum::EntityGoatScreamingDeath;
    pub const ENTITY_GOAT_SCREAMING_EAT: SoundSoundEnum = SoundSoundEnum::EntityGoatScreamingEat;
    pub const ENTITY_GOAT_SCREAMING_HORN_BREAK: SoundSoundEnum =
        SoundSoundEnum::EntityGoatScreamingHornBreak;
    pub const ENTITY_GOAT_SCREAMING_HURT: SoundSoundEnum = SoundSoundEnum::EntityGoatScreamingHurt;
    pub const ENTITY_GOAT_SCREAMING_LONG_JUMP: SoundSoundEnum =
        SoundSoundEnum::EntityGoatScreamingLongJump;
    pub const ENTITY_GOAT_SCREAMING_MILK: SoundSoundEnum = SoundSoundEnum::EntityGoatScreamingMilk;
    pub const ENTITY_GOAT_SCREAMING_PREPARE_RAM: SoundSoundEnum =
        SoundSoundEnum::EntityGoatScreamingPrepareRam;
    pub const ENTITY_GOAT_SCREAMING_RAM_IMPACT: SoundSoundEnum =
        SoundSoundEnum::EntityGoatScreamingRamImpact;
    pub const ENTITY_GOAT_STEP: SoundSoundEnum = SoundSoundEnum::EntityGoatStep;
    pub const ENTITY_GUARDIAN_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityGuardianAmbient;
    pub const ENTITY_GUARDIAN_AMBIENT_LAND: SoundSoundEnum =
        SoundSoundEnum::EntityGuardianAmbientLand;
    pub const ENTITY_GUARDIAN_ATTACK: SoundSoundEnum = SoundSoundEnum::EntityGuardianAttack;
    pub const ENTITY_GUARDIAN_DEATH: SoundSoundEnum = SoundSoundEnum::EntityGuardianDeath;
    pub const ENTITY_GUARDIAN_DEATH_LAND: SoundSoundEnum = SoundSoundEnum::EntityGuardianDeathLand;
    pub const ENTITY_GUARDIAN_FLOP: SoundSoundEnum = SoundSoundEnum::EntityGuardianFlop;
    pub const ENTITY_GUARDIAN_HURT: SoundSoundEnum = SoundSoundEnum::EntityGuardianHurt;
    pub const ENTITY_GUARDIAN_HURT_LAND: SoundSoundEnum = SoundSoundEnum::EntityGuardianHurtLand;
    pub const ENTITY_HOGLIN_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityHoglinAmbient;
    pub const ENTITY_HOGLIN_ANGRY: SoundSoundEnum = SoundSoundEnum::EntityHoglinAngry;
    pub const ENTITY_HOGLIN_ATTACK: SoundSoundEnum = SoundSoundEnum::EntityHoglinAttack;
    pub const ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED: SoundSoundEnum =
        SoundSoundEnum::EntityHoglinConvertedToZombified;
    pub const ENTITY_HOGLIN_DEATH: SoundSoundEnum = SoundSoundEnum::EntityHoglinDeath;
    pub const ENTITY_HOGLIN_HURT: SoundSoundEnum = SoundSoundEnum::EntityHoglinHurt;
    pub const ENTITY_HOGLIN_RETREAT: SoundSoundEnum = SoundSoundEnum::EntityHoglinRetreat;
    pub const ENTITY_HOGLIN_STEP: SoundSoundEnum = SoundSoundEnum::EntityHoglinStep;
    pub const ENTITY_HORSE_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityHorseAmbient;
    pub const ENTITY_HORSE_ANGRY: SoundSoundEnum = SoundSoundEnum::EntityHorseAngry;
    pub const ENTITY_HORSE_ARMOR: SoundSoundEnum = SoundSoundEnum::EntityHorseArmor;
    pub const ENTITY_HORSE_BREATHE: SoundSoundEnum = SoundSoundEnum::EntityHorseBreathe;
    pub const ENTITY_HORSE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityHorseDeath;
    pub const ENTITY_HORSE_EAT: SoundSoundEnum = SoundSoundEnum::EntityHorseEat;
    pub const ENTITY_HORSE_GALLOP: SoundSoundEnum = SoundSoundEnum::EntityHorseGallop;
    pub const ENTITY_HORSE_HURT: SoundSoundEnum = SoundSoundEnum::EntityHorseHurt;
    pub const ENTITY_HORSE_JUMP: SoundSoundEnum = SoundSoundEnum::EntityHorseJump;
    pub const ENTITY_HORSE_LAND: SoundSoundEnum = SoundSoundEnum::EntityHorseLand;
    pub const ENTITY_HORSE_SADDLE: SoundSoundEnum = SoundSoundEnum::EntityHorseSaddle;
    pub const ENTITY_HORSE_STEP: SoundSoundEnum = SoundSoundEnum::EntityHorseStep;
    pub const ENTITY_HORSE_STEP_WOOD: SoundSoundEnum = SoundSoundEnum::EntityHorseStepWood;
    pub const ENTITY_HOSTILE_BIG_FALL: SoundSoundEnum = SoundSoundEnum::EntityHostileBigFall;
    pub const ENTITY_HOSTILE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityHostileDeath;
    pub const ENTITY_HOSTILE_HURT: SoundSoundEnum = SoundSoundEnum::EntityHostileHurt;
    pub const ENTITY_HOSTILE_SMALL_FALL: SoundSoundEnum = SoundSoundEnum::EntityHostileSmallFall;
    pub const ENTITY_HOSTILE_SPLASH: SoundSoundEnum = SoundSoundEnum::EntityHostileSplash;
    pub const ENTITY_HOSTILE_SWIM: SoundSoundEnum = SoundSoundEnum::EntityHostileSwim;
    pub const ENTITY_HUSK_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityHuskAmbient;
    pub const ENTITY_HUSK_CONVERTED_TO_ZOMBIE: SoundSoundEnum =
        SoundSoundEnum::EntityHuskConvertedToZombie;
    pub const ENTITY_HUSK_DEATH: SoundSoundEnum = SoundSoundEnum::EntityHuskDeath;
    pub const ENTITY_HUSK_HURT: SoundSoundEnum = SoundSoundEnum::EntityHuskHurt;
    pub const ENTITY_HUSK_STEP: SoundSoundEnum = SoundSoundEnum::EntityHuskStep;
    pub const ENTITY_ILLUSIONER_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityIllusionerAmbient;
    pub const ENTITY_ILLUSIONER_CAST_SPELL: SoundSoundEnum =
        SoundSoundEnum::EntityIllusionerCastSpell;
    pub const ENTITY_ILLUSIONER_DEATH: SoundSoundEnum = SoundSoundEnum::EntityIllusionerDeath;
    pub const ENTITY_ILLUSIONER_HURT: SoundSoundEnum = SoundSoundEnum::EntityIllusionerHurt;
    pub const ENTITY_ILLUSIONER_MIRROR_MOVE: SoundSoundEnum =
        SoundSoundEnum::EntityIllusionerMirrorMove;
    pub const ENTITY_ILLUSIONER_PREPARE_BLINDNESS: SoundSoundEnum =
        SoundSoundEnum::EntityIllusionerPrepareBlindness;
    pub const ENTITY_ILLUSIONER_PREPARE_MIRROR: SoundSoundEnum =
        SoundSoundEnum::EntityIllusionerPrepareMirror;
    pub const ENTITY_IRON_GOLEM_ATTACK: SoundSoundEnum = SoundSoundEnum::EntityIronGolemAttack;
    pub const ENTITY_IRON_GOLEM_DAMAGE: SoundSoundEnum = SoundSoundEnum::EntityIronGolemDamage;
    pub const ENTITY_IRON_GOLEM_DEATH: SoundSoundEnum = SoundSoundEnum::EntityIronGolemDeath;
    pub const ENTITY_IRON_GOLEM_HURT: SoundSoundEnum = SoundSoundEnum::EntityIronGolemHurt;
    pub const ENTITY_IRON_GOLEM_REPAIR: SoundSoundEnum = SoundSoundEnum::EntityIronGolemRepair;
    pub const ENTITY_IRON_GOLEM_STEP: SoundSoundEnum = SoundSoundEnum::EntityIronGolemStep;
    pub const ENTITY_ITEM_BREAK: SoundSoundEnum = SoundSoundEnum::EntityItemBreak;
    pub const ENTITY_ITEM_FRAME_ADD_ITEM: SoundSoundEnum = SoundSoundEnum::EntityItemFrameAddItem;
    pub const ENTITY_ITEM_FRAME_BREAK: SoundSoundEnum = SoundSoundEnum::EntityItemFrameBreak;
    pub const ENTITY_ITEM_FRAME_PLACE: SoundSoundEnum = SoundSoundEnum::EntityItemFramePlace;
    pub const ENTITY_ITEM_FRAME_REMOVE_ITEM: SoundSoundEnum =
        SoundSoundEnum::EntityItemFrameRemoveItem;
    pub const ENTITY_ITEM_FRAME_ROTATE_ITEM: SoundSoundEnum =
        SoundSoundEnum::EntityItemFrameRotateItem;
    pub const ENTITY_ITEM_PICKUP: SoundSoundEnum = SoundSoundEnum::EntityItemPickup;
    pub const ENTITY_LEASH_KNOT_BREAK: SoundSoundEnum = SoundSoundEnum::EntityLeashKnotBreak;
    pub const ENTITY_LEASH_KNOT_PLACE: SoundSoundEnum = SoundSoundEnum::EntityLeashKnotPlace;
    pub const ENTITY_LIGHTNING_BOLT_IMPACT: SoundSoundEnum =
        SoundSoundEnum::EntityLightningBoltImpact;
    pub const ENTITY_LIGHTNING_BOLT_THUNDER: SoundSoundEnum =
        SoundSoundEnum::EntityLightningBoltThunder;
    pub const ENTITY_LINGERING_POTION_THROW: SoundSoundEnum =
        SoundSoundEnum::EntityLingeringPotionThrow;
    pub const ENTITY_LLAMA_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityLlamaAmbient;
    pub const ENTITY_LLAMA_ANGRY: SoundSoundEnum = SoundSoundEnum::EntityLlamaAngry;
    pub const ENTITY_LLAMA_CHEST: SoundSoundEnum = SoundSoundEnum::EntityLlamaChest;
    pub const ENTITY_LLAMA_DEATH: SoundSoundEnum = SoundSoundEnum::EntityLlamaDeath;
    pub const ENTITY_LLAMA_EAT: SoundSoundEnum = SoundSoundEnum::EntityLlamaEat;
    pub const ENTITY_LLAMA_HURT: SoundSoundEnum = SoundSoundEnum::EntityLlamaHurt;
    pub const ENTITY_LLAMA_SPIT: SoundSoundEnum = SoundSoundEnum::EntityLlamaSpit;
    pub const ENTITY_LLAMA_STEP: SoundSoundEnum = SoundSoundEnum::EntityLlamaStep;
    pub const ENTITY_LLAMA_SWAG: SoundSoundEnum = SoundSoundEnum::EntityLlamaSwag;
    pub const ENTITY_MAGMA_CUBE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityMagmaCubeDeath;
    pub const ENTITY_MAGMA_CUBE_DEATH_SMALL: SoundSoundEnum =
        SoundSoundEnum::EntityMagmaCubeDeathSmall;
    pub const ENTITY_MAGMA_CUBE_HURT: SoundSoundEnum = SoundSoundEnum::EntityMagmaCubeHurt;
    pub const ENTITY_MAGMA_CUBE_HURT_SMALL: SoundSoundEnum =
        SoundSoundEnum::EntityMagmaCubeHurtSmall;
    pub const ENTITY_MAGMA_CUBE_JUMP: SoundSoundEnum = SoundSoundEnum::EntityMagmaCubeJump;
    pub const ENTITY_MAGMA_CUBE_SQUISH: SoundSoundEnum = SoundSoundEnum::EntityMagmaCubeSquish;
    pub const ENTITY_MAGMA_CUBE_SQUISH_SMALL: SoundSoundEnum =
        SoundSoundEnum::EntityMagmaCubeSquishSmall;
    pub const ENTITY_MINECART_INSIDE: SoundSoundEnum = SoundSoundEnum::EntityMinecartInside;
    pub const ENTITY_MINECART_INSIDE_UNDERWATER: SoundSoundEnum =
        SoundSoundEnum::EntityMinecartInsideUnderwater;
    pub const ENTITY_MINECART_RIDING: SoundSoundEnum = SoundSoundEnum::EntityMinecartRiding;
    pub const ENTITY_MOOSHROOM_CONVERT: SoundSoundEnum = SoundSoundEnum::EntityMooshroomConvert;
    pub const ENTITY_MOOSHROOM_EAT: SoundSoundEnum = SoundSoundEnum::EntityMooshroomEat;
    pub const ENTITY_MOOSHROOM_MILK: SoundSoundEnum = SoundSoundEnum::EntityMooshroomMilk;
    pub const ENTITY_MOOSHROOM_SHEAR: SoundSoundEnum = SoundSoundEnum::EntityMooshroomShear;
    pub const ENTITY_MOOSHROOM_SUSPICIOUS_MILK: SoundSoundEnum =
        SoundSoundEnum::EntityMooshroomSuspiciousMilk;
    pub const ENTITY_MULE_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityMuleAmbient;
    pub const ENTITY_MULE_ANGRY: SoundSoundEnum = SoundSoundEnum::EntityMuleAngry;
    pub const ENTITY_MULE_CHEST: SoundSoundEnum = SoundSoundEnum::EntityMuleChest;
    pub const ENTITY_MULE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityMuleDeath;
    pub const ENTITY_MULE_EAT: SoundSoundEnum = SoundSoundEnum::EntityMuleEat;
    pub const ENTITY_MULE_HURT: SoundSoundEnum = SoundSoundEnum::EntityMuleHurt;
    pub const ENTITY_OCELOT_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityOcelotAmbient;
    pub const ENTITY_OCELOT_DEATH: SoundSoundEnum = SoundSoundEnum::EntityOcelotDeath;
    pub const ENTITY_OCELOT_HURT: SoundSoundEnum = SoundSoundEnum::EntityOcelotHurt;
    pub const ENTITY_PAINTING_BREAK: SoundSoundEnum = SoundSoundEnum::EntityPaintingBreak;
    pub const ENTITY_PAINTING_PLACE: SoundSoundEnum = SoundSoundEnum::EntityPaintingPlace;
    pub const ENTITY_PANDA_AGGRESSIVE_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityPandaAggressiveAmbient;
    pub const ENTITY_PANDA_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityPandaAmbient;
    pub const ENTITY_PANDA_BITE: SoundSoundEnum = SoundSoundEnum::EntityPandaBite;
    pub const ENTITY_PANDA_CANT_BREED: SoundSoundEnum = SoundSoundEnum::EntityPandaCantBreed;
    pub const ENTITY_PANDA_DEATH: SoundSoundEnum = SoundSoundEnum::EntityPandaDeath;
    pub const ENTITY_PANDA_EAT: SoundSoundEnum = SoundSoundEnum::EntityPandaEat;
    pub const ENTITY_PANDA_HURT: SoundSoundEnum = SoundSoundEnum::EntityPandaHurt;
    pub const ENTITY_PANDA_PRE_SNEEZE: SoundSoundEnum = SoundSoundEnum::EntityPandaPreSneeze;
    pub const ENTITY_PANDA_SNEEZE: SoundSoundEnum = SoundSoundEnum::EntityPandaSneeze;
    pub const ENTITY_PANDA_STEP: SoundSoundEnum = SoundSoundEnum::EntityPandaStep;
    pub const ENTITY_PANDA_WORRIED_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityPandaWorriedAmbient;
    pub const ENTITY_PARROT_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityParrotAmbient;
    pub const ENTITY_PARROT_DEATH: SoundSoundEnum = SoundSoundEnum::EntityParrotDeath;
    pub const ENTITY_PARROT_EAT: SoundSoundEnum = SoundSoundEnum::EntityParrotEat;
    pub const ENTITY_PARROT_FLY: SoundSoundEnum = SoundSoundEnum::EntityParrotFly;
    pub const ENTITY_PARROT_HURT: SoundSoundEnum = SoundSoundEnum::EntityParrotHurt;
    pub const ENTITY_PARROT_IMITATE_BLAZE: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateBlaze;
    pub const ENTITY_PARROT_IMITATE_CREEPER: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateCreeper;
    pub const ENTITY_PARROT_IMITATE_DROWNED: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateDrowned;
    pub const ENTITY_PARROT_IMITATE_ELDER_GUARDIAN: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateElderGuardian;
    pub const ENTITY_PARROT_IMITATE_ENDERMITE: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateEndermite;
    pub const ENTITY_PARROT_IMITATE_ENDER_DRAGON: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateEnderDragon;
    pub const ENTITY_PARROT_IMITATE_EVOKER: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateEvoker;
    pub const ENTITY_PARROT_IMITATE_GHAST: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateGhast;
    pub const ENTITY_PARROT_IMITATE_GUARDIAN: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateGuardian;
    pub const ENTITY_PARROT_IMITATE_HOGLIN: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateHoglin;
    pub const ENTITY_PARROT_IMITATE_HUSK: SoundSoundEnum = SoundSoundEnum::EntityParrotImitateHusk;
    pub const ENTITY_PARROT_IMITATE_ILLUSIONER: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateIllusioner;
    pub const ENTITY_PARROT_IMITATE_MAGMA_CUBE: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateMagmaCube;
    pub const ENTITY_PARROT_IMITATE_PHANTOM: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitatePhantom;
    pub const ENTITY_PARROT_IMITATE_PIGLIN: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitatePiglin;
    pub const ENTITY_PARROT_IMITATE_PIGLIN_BRUTE: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitatePiglinBrute;
    pub const ENTITY_PARROT_IMITATE_PILLAGER: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitatePillager;
    pub const ENTITY_PARROT_IMITATE_RAVAGER: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateRavager;
    pub const ENTITY_PARROT_IMITATE_SHULKER: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateShulker;
    pub const ENTITY_PARROT_IMITATE_SILVERFISH: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateSilverfish;
    pub const ENTITY_PARROT_IMITATE_SKELETON: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateSkeleton;
    pub const ENTITY_PARROT_IMITATE_SLIME: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateSlime;
    pub const ENTITY_PARROT_IMITATE_SPIDER: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateSpider;
    pub const ENTITY_PARROT_IMITATE_STRAY: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateStray;
    pub const ENTITY_PARROT_IMITATE_VEX: SoundSoundEnum = SoundSoundEnum::EntityParrotImitateVex;
    pub const ENTITY_PARROT_IMITATE_VINDICATOR: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateVindicator;
    pub const ENTITY_PARROT_IMITATE_WARDEN: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateWarden;
    pub const ENTITY_PARROT_IMITATE_WITCH: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateWitch;
    pub const ENTITY_PARROT_IMITATE_WITHER: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateWither;
    pub const ENTITY_PARROT_IMITATE_WITHER_SKELETON: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateWitherSkeleton;
    pub const ENTITY_PARROT_IMITATE_ZOGLIN: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateZoglin;
    pub const ENTITY_PARROT_IMITATE_ZOMBIE: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateZombie;
    pub const ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER: SoundSoundEnum =
        SoundSoundEnum::EntityParrotImitateZombieVillager;
    pub const ENTITY_PARROT_STEP: SoundSoundEnum = SoundSoundEnum::EntityParrotStep;
    pub const ENTITY_PHANTOM_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityPhantomAmbient;
    pub const ENTITY_PHANTOM_BITE: SoundSoundEnum = SoundSoundEnum::EntityPhantomBite;
    pub const ENTITY_PHANTOM_DEATH: SoundSoundEnum = SoundSoundEnum::EntityPhantomDeath;
    pub const ENTITY_PHANTOM_FLAP: SoundSoundEnum = SoundSoundEnum::EntityPhantomFlap;
    pub const ENTITY_PHANTOM_HURT: SoundSoundEnum = SoundSoundEnum::EntityPhantomHurt;
    pub const ENTITY_PHANTOM_SWOOP: SoundSoundEnum = SoundSoundEnum::EntityPhantomSwoop;
    pub const ENTITY_PIGLIN_ADMIRING_ITEM: SoundSoundEnum =
        SoundSoundEnum::EntityPiglinAdmiringItem;
    pub const ENTITY_PIGLIN_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityPiglinAmbient;
    pub const ENTITY_PIGLIN_ANGRY: SoundSoundEnum = SoundSoundEnum::EntityPiglinAngry;
    pub const ENTITY_PIGLIN_BRUTE_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityPiglinBruteAmbient;
    pub const ENTITY_PIGLIN_BRUTE_ANGRY: SoundSoundEnum = SoundSoundEnum::EntityPiglinBruteAngry;
    pub const ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED: SoundSoundEnum =
        SoundSoundEnum::EntityPiglinBruteConvertedToZombified;
    pub const ENTITY_PIGLIN_BRUTE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityPiglinBruteDeath;
    pub const ENTITY_PIGLIN_BRUTE_HURT: SoundSoundEnum = SoundSoundEnum::EntityPiglinBruteHurt;
    pub const ENTITY_PIGLIN_BRUTE_STEP: SoundSoundEnum = SoundSoundEnum::EntityPiglinBruteStep;
    pub const ENTITY_PIGLIN_CELEBRATE: SoundSoundEnum = SoundSoundEnum::EntityPiglinCelebrate;
    pub const ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED: SoundSoundEnum =
        SoundSoundEnum::EntityPiglinConvertedToZombified;
    pub const ENTITY_PIGLIN_DEATH: SoundSoundEnum = SoundSoundEnum::EntityPiglinDeath;
    pub const ENTITY_PIGLIN_HURT: SoundSoundEnum = SoundSoundEnum::EntityPiglinHurt;
    pub const ENTITY_PIGLIN_JEALOUS: SoundSoundEnum = SoundSoundEnum::EntityPiglinJealous;
    pub const ENTITY_PIGLIN_RETREAT: SoundSoundEnum = SoundSoundEnum::EntityPiglinRetreat;
    pub const ENTITY_PIGLIN_STEP: SoundSoundEnum = SoundSoundEnum::EntityPiglinStep;
    pub const ENTITY_PIG_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityPigAmbient;
    pub const ENTITY_PIG_DEATH: SoundSoundEnum = SoundSoundEnum::EntityPigDeath;
    pub const ENTITY_PIG_HURT: SoundSoundEnum = SoundSoundEnum::EntityPigHurt;
    pub const ENTITY_PIG_SADDLE: SoundSoundEnum = SoundSoundEnum::EntityPigSaddle;
    pub const ENTITY_PIG_STEP: SoundSoundEnum = SoundSoundEnum::EntityPigStep;
    pub const ENTITY_PILLAGER_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityPillagerAmbient;
    pub const ENTITY_PILLAGER_CELEBRATE: SoundSoundEnum = SoundSoundEnum::EntityPillagerCelebrate;
    pub const ENTITY_PILLAGER_DEATH: SoundSoundEnum = SoundSoundEnum::EntityPillagerDeath;
    pub const ENTITY_PILLAGER_HURT: SoundSoundEnum = SoundSoundEnum::EntityPillagerHurt;
    pub const ENTITY_PLAYER_ATTACK_CRIT: SoundSoundEnum = SoundSoundEnum::EntityPlayerAttackCrit;
    pub const ENTITY_PLAYER_ATTACK_KNOCKBACK: SoundSoundEnum =
        SoundSoundEnum::EntityPlayerAttackKnockback;
    pub const ENTITY_PLAYER_ATTACK_NODAMAGE: SoundSoundEnum =
        SoundSoundEnum::EntityPlayerAttackNodamage;
    pub const ENTITY_PLAYER_ATTACK_STRONG: SoundSoundEnum =
        SoundSoundEnum::EntityPlayerAttackStrong;
    pub const ENTITY_PLAYER_ATTACK_SWEEP: SoundSoundEnum = SoundSoundEnum::EntityPlayerAttackSweep;
    pub const ENTITY_PLAYER_ATTACK_WEAK: SoundSoundEnum = SoundSoundEnum::EntityPlayerAttackWeak;
    pub const ENTITY_PLAYER_BIG_FALL: SoundSoundEnum = SoundSoundEnum::EntityPlayerBigFall;
    pub const ENTITY_PLAYER_BREATH: SoundSoundEnum = SoundSoundEnum::EntityPlayerBreath;
    pub const ENTITY_PLAYER_BURP: SoundSoundEnum = SoundSoundEnum::EntityPlayerBurp;
    pub const ENTITY_PLAYER_DEATH: SoundSoundEnum = SoundSoundEnum::EntityPlayerDeath;
    pub const ENTITY_PLAYER_HURT: SoundSoundEnum = SoundSoundEnum::EntityPlayerHurt;
    pub const ENTITY_PLAYER_HURT_DROWN: SoundSoundEnum = SoundSoundEnum::EntityPlayerHurtDrown;
    pub const ENTITY_PLAYER_HURT_FREEZE: SoundSoundEnum = SoundSoundEnum::EntityPlayerHurtFreeze;
    pub const ENTITY_PLAYER_HURT_ON_FIRE: SoundSoundEnum = SoundSoundEnum::EntityPlayerHurtOnFire;
    pub const ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH: SoundSoundEnum =
        SoundSoundEnum::EntityPlayerHurtSweetBerryBush;
    pub const ENTITY_PLAYER_LEVELUP: SoundSoundEnum = SoundSoundEnum::EntityPlayerLevelup;
    pub const ENTITY_PLAYER_SMALL_FALL: SoundSoundEnum = SoundSoundEnum::EntityPlayerSmallFall;
    pub const ENTITY_PLAYER_SPLASH: SoundSoundEnum = SoundSoundEnum::EntityPlayerSplash;
    pub const ENTITY_PLAYER_SPLASH_HIGH_SPEED: SoundSoundEnum =
        SoundSoundEnum::EntityPlayerSplashHighSpeed;
    pub const ENTITY_PLAYER_SWIM: SoundSoundEnum = SoundSoundEnum::EntityPlayerSwim;
    pub const ENTITY_POLAR_BEAR_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityPolarBearAmbient;
    pub const ENTITY_POLAR_BEAR_AMBIENT_BABY: SoundSoundEnum =
        SoundSoundEnum::EntityPolarBearAmbientBaby;
    pub const ENTITY_POLAR_BEAR_DEATH: SoundSoundEnum = SoundSoundEnum::EntityPolarBearDeath;
    pub const ENTITY_POLAR_BEAR_HURT: SoundSoundEnum = SoundSoundEnum::EntityPolarBearHurt;
    pub const ENTITY_POLAR_BEAR_STEP: SoundSoundEnum = SoundSoundEnum::EntityPolarBearStep;
    pub const ENTITY_POLAR_BEAR_WARNING: SoundSoundEnum = SoundSoundEnum::EntityPolarBearWarning;
    pub const ENTITY_PUFFER_FISH_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityPufferFishAmbient;
    pub const ENTITY_PUFFER_FISH_BLOW_OUT: SoundSoundEnum = SoundSoundEnum::EntityPufferFishBlowOut;
    pub const ENTITY_PUFFER_FISH_BLOW_UP: SoundSoundEnum = SoundSoundEnum::EntityPufferFishBlowUp;
    pub const ENTITY_PUFFER_FISH_DEATH: SoundSoundEnum = SoundSoundEnum::EntityPufferFishDeath;
    pub const ENTITY_PUFFER_FISH_FLOP: SoundSoundEnum = SoundSoundEnum::EntityPufferFishFlop;
    pub const ENTITY_PUFFER_FISH_HURT: SoundSoundEnum = SoundSoundEnum::EntityPufferFishHurt;
    pub const ENTITY_PUFFER_FISH_STING: SoundSoundEnum = SoundSoundEnum::EntityPufferFishSting;
    pub const ENTITY_RABBIT_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityRabbitAmbient;
    pub const ENTITY_RABBIT_ATTACK: SoundSoundEnum = SoundSoundEnum::EntityRabbitAttack;
    pub const ENTITY_RABBIT_DEATH: SoundSoundEnum = SoundSoundEnum::EntityRabbitDeath;
    pub const ENTITY_RABBIT_HURT: SoundSoundEnum = SoundSoundEnum::EntityRabbitHurt;
    pub const ENTITY_RABBIT_JUMP: SoundSoundEnum = SoundSoundEnum::EntityRabbitJump;
    pub const ENTITY_RAVAGER_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityRavagerAmbient;
    pub const ENTITY_RAVAGER_ATTACK: SoundSoundEnum = SoundSoundEnum::EntityRavagerAttack;
    pub const ENTITY_RAVAGER_CELEBRATE: SoundSoundEnum = SoundSoundEnum::EntityRavagerCelebrate;
    pub const ENTITY_RAVAGER_DEATH: SoundSoundEnum = SoundSoundEnum::EntityRavagerDeath;
    pub const ENTITY_RAVAGER_HURT: SoundSoundEnum = SoundSoundEnum::EntityRavagerHurt;
    pub const ENTITY_RAVAGER_ROAR: SoundSoundEnum = SoundSoundEnum::EntityRavagerRoar;
    pub const ENTITY_RAVAGER_STEP: SoundSoundEnum = SoundSoundEnum::EntityRavagerStep;
    pub const ENTITY_RAVAGER_STUNNED: SoundSoundEnum = SoundSoundEnum::EntityRavagerStunned;
    pub const ENTITY_SALMON_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntitySalmonAmbient;
    pub const ENTITY_SALMON_DEATH: SoundSoundEnum = SoundSoundEnum::EntitySalmonDeath;
    pub const ENTITY_SALMON_FLOP: SoundSoundEnum = SoundSoundEnum::EntitySalmonFlop;
    pub const ENTITY_SALMON_HURT: SoundSoundEnum = SoundSoundEnum::EntitySalmonHurt;
    pub const ENTITY_SHEEP_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntitySheepAmbient;
    pub const ENTITY_SHEEP_DEATH: SoundSoundEnum = SoundSoundEnum::EntitySheepDeath;
    pub const ENTITY_SHEEP_HURT: SoundSoundEnum = SoundSoundEnum::EntitySheepHurt;
    pub const ENTITY_SHEEP_SHEAR: SoundSoundEnum = SoundSoundEnum::EntitySheepShear;
    pub const ENTITY_SHEEP_STEP: SoundSoundEnum = SoundSoundEnum::EntitySheepStep;
    pub const ENTITY_SHULKER_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityShulkerAmbient;
    pub const ENTITY_SHULKER_BULLET_HIT: SoundSoundEnum = SoundSoundEnum::EntityShulkerBulletHit;
    pub const ENTITY_SHULKER_BULLET_HURT: SoundSoundEnum = SoundSoundEnum::EntityShulkerBulletHurt;
    pub const ENTITY_SHULKER_CLOSE: SoundSoundEnum = SoundSoundEnum::EntityShulkerClose;
    pub const ENTITY_SHULKER_DEATH: SoundSoundEnum = SoundSoundEnum::EntityShulkerDeath;
    pub const ENTITY_SHULKER_HURT: SoundSoundEnum = SoundSoundEnum::EntityShulkerHurt;
    pub const ENTITY_SHULKER_HURT_CLOSED: SoundSoundEnum = SoundSoundEnum::EntityShulkerHurtClosed;
    pub const ENTITY_SHULKER_OPEN: SoundSoundEnum = SoundSoundEnum::EntityShulkerOpen;
    pub const ENTITY_SHULKER_SHOOT: SoundSoundEnum = SoundSoundEnum::EntityShulkerShoot;
    pub const ENTITY_SHULKER_TELEPORT: SoundSoundEnum = SoundSoundEnum::EntityShulkerTeleport;
    pub const ENTITY_SILVERFISH_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntitySilverfishAmbient;
    pub const ENTITY_SILVERFISH_DEATH: SoundSoundEnum = SoundSoundEnum::EntitySilverfishDeath;
    pub const ENTITY_SILVERFISH_HURT: SoundSoundEnum = SoundSoundEnum::EntitySilverfishHurt;
    pub const ENTITY_SILVERFISH_STEP: SoundSoundEnum = SoundSoundEnum::EntitySilverfishStep;
    pub const ENTITY_SKELETON_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntitySkeletonAmbient;
    pub const ENTITY_SKELETON_CONVERTED_TO_STRAY: SoundSoundEnum =
        SoundSoundEnum::EntitySkeletonConvertedToStray;
    pub const ENTITY_SKELETON_DEATH: SoundSoundEnum = SoundSoundEnum::EntitySkeletonDeath;
    pub const ENTITY_SKELETON_HORSE_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntitySkeletonHorseAmbient;
    pub const ENTITY_SKELETON_HORSE_AMBIENT_WATER: SoundSoundEnum =
        SoundSoundEnum::EntitySkeletonHorseAmbientWater;
    pub const ENTITY_SKELETON_HORSE_DEATH: SoundSoundEnum =
        SoundSoundEnum::EntitySkeletonHorseDeath;
    pub const ENTITY_SKELETON_HORSE_GALLOP_WATER: SoundSoundEnum =
        SoundSoundEnum::EntitySkeletonHorseGallopWater;
    pub const ENTITY_SKELETON_HORSE_HURT: SoundSoundEnum = SoundSoundEnum::EntitySkeletonHorseHurt;
    pub const ENTITY_SKELETON_HORSE_JUMP_WATER: SoundSoundEnum =
        SoundSoundEnum::EntitySkeletonHorseJumpWater;
    pub const ENTITY_SKELETON_HORSE_STEP_WATER: SoundSoundEnum =
        SoundSoundEnum::EntitySkeletonHorseStepWater;
    pub const ENTITY_SKELETON_HORSE_SWIM: SoundSoundEnum = SoundSoundEnum::EntitySkeletonHorseSwim;
    pub const ENTITY_SKELETON_HURT: SoundSoundEnum = SoundSoundEnum::EntitySkeletonHurt;
    pub const ENTITY_SKELETON_SHOOT: SoundSoundEnum = SoundSoundEnum::EntitySkeletonShoot;
    pub const ENTITY_SKELETON_STEP: SoundSoundEnum = SoundSoundEnum::EntitySkeletonStep;
    pub const ENTITY_SLIME_ATTACK: SoundSoundEnum = SoundSoundEnum::EntitySlimeAttack;
    pub const ENTITY_SLIME_DEATH: SoundSoundEnum = SoundSoundEnum::EntitySlimeDeath;
    pub const ENTITY_SLIME_DEATH_SMALL: SoundSoundEnum = SoundSoundEnum::EntitySlimeDeathSmall;
    pub const ENTITY_SLIME_HURT: SoundSoundEnum = SoundSoundEnum::EntitySlimeHurt;
    pub const ENTITY_SLIME_HURT_SMALL: SoundSoundEnum = SoundSoundEnum::EntitySlimeHurtSmall;
    pub const ENTITY_SLIME_JUMP: SoundSoundEnum = SoundSoundEnum::EntitySlimeJump;
    pub const ENTITY_SLIME_JUMP_SMALL: SoundSoundEnum = SoundSoundEnum::EntitySlimeJumpSmall;
    pub const ENTITY_SLIME_SQUISH: SoundSoundEnum = SoundSoundEnum::EntitySlimeSquish;
    pub const ENTITY_SLIME_SQUISH_SMALL: SoundSoundEnum = SoundSoundEnum::EntitySlimeSquishSmall;
    pub const ENTITY_SNIFFER_DEATH: SoundSoundEnum = SoundSoundEnum::EntitySnifferDeath;
    pub const ENTITY_SNIFFER_DIGGING: SoundSoundEnum = SoundSoundEnum::EntitySnifferDigging;
    pub const ENTITY_SNIFFER_DIGGING_STOP: SoundSoundEnum =
        SoundSoundEnum::EntitySnifferDiggingStop;
    pub const ENTITY_SNIFFER_DROP_SEED: SoundSoundEnum = SoundSoundEnum::EntitySnifferDropSeed;
    pub const ENTITY_SNIFFER_EAT: SoundSoundEnum = SoundSoundEnum::EntitySnifferEat;
    pub const ENTITY_SNIFFER_HAPPY: SoundSoundEnum = SoundSoundEnum::EntitySnifferHappy;
    pub const ENTITY_SNIFFER_HURT: SoundSoundEnum = SoundSoundEnum::EntitySnifferHurt;
    pub const ENTITY_SNIFFER_IDLE: SoundSoundEnum = SoundSoundEnum::EntitySnifferIdle;
    pub const ENTITY_SNIFFER_SCENTING: SoundSoundEnum = SoundSoundEnum::EntitySnifferScenting;
    pub const ENTITY_SNIFFER_SEARCHING: SoundSoundEnum = SoundSoundEnum::EntitySnifferSearching;
    pub const ENTITY_SNIFFER_SNIFFING: SoundSoundEnum = SoundSoundEnum::EntitySnifferSniffing;
    pub const ENTITY_SNIFFER_STEP: SoundSoundEnum = SoundSoundEnum::EntitySnifferStep;
    pub const ENTITY_SNOWBALL_THROW: SoundSoundEnum = SoundSoundEnum::EntitySnowballThrow;
    pub const ENTITY_SNOW_GOLEM_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntitySnowGolemAmbient;
    pub const ENTITY_SNOW_GOLEM_DEATH: SoundSoundEnum = SoundSoundEnum::EntitySnowGolemDeath;
    pub const ENTITY_SNOW_GOLEM_HURT: SoundSoundEnum = SoundSoundEnum::EntitySnowGolemHurt;
    pub const ENTITY_SNOW_GOLEM_SHEAR: SoundSoundEnum = SoundSoundEnum::EntitySnowGolemShear;
    pub const ENTITY_SNOW_GOLEM_SHOOT: SoundSoundEnum = SoundSoundEnum::EntitySnowGolemShoot;
    pub const ENTITY_SPIDER_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntitySpiderAmbient;
    pub const ENTITY_SPIDER_DEATH: SoundSoundEnum = SoundSoundEnum::EntitySpiderDeath;
    pub const ENTITY_SPIDER_HURT: SoundSoundEnum = SoundSoundEnum::EntitySpiderHurt;
    pub const ENTITY_SPIDER_STEP: SoundSoundEnum = SoundSoundEnum::EntitySpiderStep;
    pub const ENTITY_SPLASH_POTION_BREAK: SoundSoundEnum = SoundSoundEnum::EntitySplashPotionBreak;
    pub const ENTITY_SPLASH_POTION_THROW: SoundSoundEnum = SoundSoundEnum::EntitySplashPotionThrow;
    pub const ENTITY_SQUID_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntitySquidAmbient;
    pub const ENTITY_SQUID_DEATH: SoundSoundEnum = SoundSoundEnum::EntitySquidDeath;
    pub const ENTITY_SQUID_HURT: SoundSoundEnum = SoundSoundEnum::EntitySquidHurt;
    pub const ENTITY_SQUID_SQUIRT: SoundSoundEnum = SoundSoundEnum::EntitySquidSquirt;
    pub const ENTITY_STRAY_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityStrayAmbient;
    pub const ENTITY_STRAY_DEATH: SoundSoundEnum = SoundSoundEnum::EntityStrayDeath;
    pub const ENTITY_STRAY_HURT: SoundSoundEnum = SoundSoundEnum::EntityStrayHurt;
    pub const ENTITY_STRAY_STEP: SoundSoundEnum = SoundSoundEnum::EntityStrayStep;
    pub const ENTITY_STRIDER_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityStriderAmbient;
    pub const ENTITY_STRIDER_DEATH: SoundSoundEnum = SoundSoundEnum::EntityStriderDeath;
    pub const ENTITY_STRIDER_EAT: SoundSoundEnum = SoundSoundEnum::EntityStriderEat;
    pub const ENTITY_STRIDER_HAPPY: SoundSoundEnum = SoundSoundEnum::EntityStriderHappy;
    pub const ENTITY_STRIDER_HURT: SoundSoundEnum = SoundSoundEnum::EntityStriderHurt;
    pub const ENTITY_STRIDER_RETREAT: SoundSoundEnum = SoundSoundEnum::EntityStriderRetreat;
    pub const ENTITY_STRIDER_SADDLE: SoundSoundEnum = SoundSoundEnum::EntityStriderSaddle;
    pub const ENTITY_STRIDER_STEP: SoundSoundEnum = SoundSoundEnum::EntityStriderStep;
    pub const ENTITY_STRIDER_STEP_LAVA: SoundSoundEnum = SoundSoundEnum::EntityStriderStepLava;
    pub const ENTITY_TADPOLE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityTadpoleDeath;
    pub const ENTITY_TADPOLE_FLOP: SoundSoundEnum = SoundSoundEnum::EntityTadpoleFlop;
    pub const ENTITY_TADPOLE_GROW_UP: SoundSoundEnum = SoundSoundEnum::EntityTadpoleGrowUp;
    pub const ENTITY_TADPOLE_HURT: SoundSoundEnum = SoundSoundEnum::EntityTadpoleHurt;
    pub const ENTITY_TNT_PRIMED: SoundSoundEnum = SoundSoundEnum::EntityTntPrimed;
    pub const ENTITY_TROPICAL_FISH_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityTropicalFishAmbient;
    pub const ENTITY_TROPICAL_FISH_DEATH: SoundSoundEnum = SoundSoundEnum::EntityTropicalFishDeath;
    pub const ENTITY_TROPICAL_FISH_FLOP: SoundSoundEnum = SoundSoundEnum::EntityTropicalFishFlop;
    pub const ENTITY_TROPICAL_FISH_HURT: SoundSoundEnum = SoundSoundEnum::EntityTropicalFishHurt;
    pub const ENTITY_TURTLE_AMBIENT_LAND: SoundSoundEnum = SoundSoundEnum::EntityTurtleAmbientLand;
    pub const ENTITY_TURTLE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityTurtleDeath;
    pub const ENTITY_TURTLE_DEATH_BABY: SoundSoundEnum = SoundSoundEnum::EntityTurtleDeathBaby;
    pub const ENTITY_TURTLE_EGG_BREAK: SoundSoundEnum = SoundSoundEnum::EntityTurtleEggBreak;
    pub const ENTITY_TURTLE_EGG_CRACK: SoundSoundEnum = SoundSoundEnum::EntityTurtleEggCrack;
    pub const ENTITY_TURTLE_EGG_HATCH: SoundSoundEnum = SoundSoundEnum::EntityTurtleEggHatch;
    pub const ENTITY_TURTLE_HURT: SoundSoundEnum = SoundSoundEnum::EntityTurtleHurt;
    pub const ENTITY_TURTLE_HURT_BABY: SoundSoundEnum = SoundSoundEnum::EntityTurtleHurtBaby;
    pub const ENTITY_TURTLE_LAY_EGG: SoundSoundEnum = SoundSoundEnum::EntityTurtleLayEgg;
    pub const ENTITY_TURTLE_SHAMBLE: SoundSoundEnum = SoundSoundEnum::EntityTurtleShamble;
    pub const ENTITY_TURTLE_SHAMBLE_BABY: SoundSoundEnum = SoundSoundEnum::EntityTurtleShambleBaby;
    pub const ENTITY_TURTLE_SWIM: SoundSoundEnum = SoundSoundEnum::EntityTurtleSwim;
    pub const ENTITY_VEX_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityVexAmbient;
    pub const ENTITY_VEX_CHARGE: SoundSoundEnum = SoundSoundEnum::EntityVexCharge;
    pub const ENTITY_VEX_DEATH: SoundSoundEnum = SoundSoundEnum::EntityVexDeath;
    pub const ENTITY_VEX_HURT: SoundSoundEnum = SoundSoundEnum::EntityVexHurt;
    pub const ENTITY_VILLAGER_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityVillagerAmbient;
    pub const ENTITY_VILLAGER_CELEBRATE: SoundSoundEnum = SoundSoundEnum::EntityVillagerCelebrate;
    pub const ENTITY_VILLAGER_DEATH: SoundSoundEnum = SoundSoundEnum::EntityVillagerDeath;
    pub const ENTITY_VILLAGER_HURT: SoundSoundEnum = SoundSoundEnum::EntityVillagerHurt;
    pub const ENTITY_VILLAGER_NO: SoundSoundEnum = SoundSoundEnum::EntityVillagerNo;
    pub const ENTITY_VILLAGER_TRADE: SoundSoundEnum = SoundSoundEnum::EntityVillagerTrade;
    pub const ENTITY_VILLAGER_WORK_ARMORER: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkArmorer;
    pub const ENTITY_VILLAGER_WORK_BUTCHER: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkButcher;
    pub const ENTITY_VILLAGER_WORK_CARTOGRAPHER: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkCartographer;
    pub const ENTITY_VILLAGER_WORK_CLERIC: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkCleric;
    pub const ENTITY_VILLAGER_WORK_FARMER: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkFarmer;
    pub const ENTITY_VILLAGER_WORK_FISHERMAN: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkFisherman;
    pub const ENTITY_VILLAGER_WORK_FLETCHER: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkFletcher;
    pub const ENTITY_VILLAGER_WORK_LEATHERWORKER: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkLeatherworker;
    pub const ENTITY_VILLAGER_WORK_LIBRARIAN: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkLibrarian;
    pub const ENTITY_VILLAGER_WORK_MASON: SoundSoundEnum = SoundSoundEnum::EntityVillagerWorkMason;
    pub const ENTITY_VILLAGER_WORK_SHEPHERD: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkShepherd;
    pub const ENTITY_VILLAGER_WORK_TOOLSMITH: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkToolsmith;
    pub const ENTITY_VILLAGER_WORK_WEAPONSMITH: SoundSoundEnum =
        SoundSoundEnum::EntityVillagerWorkWeaponsmith;
    pub const ENTITY_VILLAGER_YES: SoundSoundEnum = SoundSoundEnum::EntityVillagerYes;
    pub const ENTITY_VINDICATOR_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityVindicatorAmbient;
    pub const ENTITY_VINDICATOR_CELEBRATE: SoundSoundEnum =
        SoundSoundEnum::EntityVindicatorCelebrate;
    pub const ENTITY_VINDICATOR_DEATH: SoundSoundEnum = SoundSoundEnum::EntityVindicatorDeath;
    pub const ENTITY_VINDICATOR_HURT: SoundSoundEnum = SoundSoundEnum::EntityVindicatorHurt;
    pub const ENTITY_WANDERING_TRADER_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityWanderingTraderAmbient;
    pub const ENTITY_WANDERING_TRADER_DEATH: SoundSoundEnum =
        SoundSoundEnum::EntityWanderingTraderDeath;
    pub const ENTITY_WANDERING_TRADER_DISAPPEARED: SoundSoundEnum =
        SoundSoundEnum::EntityWanderingTraderDisappeared;
    pub const ENTITY_WANDERING_TRADER_DRINK_MILK: SoundSoundEnum =
        SoundSoundEnum::EntityWanderingTraderDrinkMilk;
    pub const ENTITY_WANDERING_TRADER_DRINK_POTION: SoundSoundEnum =
        SoundSoundEnum::EntityWanderingTraderDrinkPotion;
    pub const ENTITY_WANDERING_TRADER_HURT: SoundSoundEnum =
        SoundSoundEnum::EntityWanderingTraderHurt;
    pub const ENTITY_WANDERING_TRADER_NO: SoundSoundEnum = SoundSoundEnum::EntityWanderingTraderNo;
    pub const ENTITY_WANDERING_TRADER_REAPPEARED: SoundSoundEnum =
        SoundSoundEnum::EntityWanderingTraderReappeared;
    pub const ENTITY_WANDERING_TRADER_TRADE: SoundSoundEnum =
        SoundSoundEnum::EntityWanderingTraderTrade;
    pub const ENTITY_WANDERING_TRADER_YES: SoundSoundEnum =
        SoundSoundEnum::EntityWanderingTraderYes;
    pub const ENTITY_WARDEN_AGITATED: SoundSoundEnum = SoundSoundEnum::EntityWardenAgitated;
    pub const ENTITY_WARDEN_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityWardenAmbient;
    pub const ENTITY_WARDEN_ANGRY: SoundSoundEnum = SoundSoundEnum::EntityWardenAngry;
    pub const ENTITY_WARDEN_ATTACK_IMPACT: SoundSoundEnum =
        SoundSoundEnum::EntityWardenAttackImpact;
    pub const ENTITY_WARDEN_DEATH: SoundSoundEnum = SoundSoundEnum::EntityWardenDeath;
    pub const ENTITY_WARDEN_DIG: SoundSoundEnum = SoundSoundEnum::EntityWardenDig;
    pub const ENTITY_WARDEN_EMERGE: SoundSoundEnum = SoundSoundEnum::EntityWardenEmerge;
    pub const ENTITY_WARDEN_HEARTBEAT: SoundSoundEnum = SoundSoundEnum::EntityWardenHeartbeat;
    pub const ENTITY_WARDEN_HURT: SoundSoundEnum = SoundSoundEnum::EntityWardenHurt;
    pub const ENTITY_WARDEN_LISTENING: SoundSoundEnum = SoundSoundEnum::EntityWardenListening;
    pub const ENTITY_WARDEN_LISTENING_ANGRY: SoundSoundEnum =
        SoundSoundEnum::EntityWardenListeningAngry;
    pub const ENTITY_WARDEN_NEARBY_CLOSE: SoundSoundEnum = SoundSoundEnum::EntityWardenNearbyClose;
    pub const ENTITY_WARDEN_NEARBY_CLOSER: SoundSoundEnum =
        SoundSoundEnum::EntityWardenNearbyCloser;
    pub const ENTITY_WARDEN_NEARBY_CLOSEST: SoundSoundEnum =
        SoundSoundEnum::EntityWardenNearbyClosest;
    pub const ENTITY_WARDEN_ROAR: SoundSoundEnum = SoundSoundEnum::EntityWardenRoar;
    pub const ENTITY_WARDEN_SNIFF: SoundSoundEnum = SoundSoundEnum::EntityWardenSniff;
    pub const ENTITY_WARDEN_SONIC_BOOM: SoundSoundEnum = SoundSoundEnum::EntityWardenSonicBoom;
    pub const ENTITY_WARDEN_SONIC_CHARGE: SoundSoundEnum = SoundSoundEnum::EntityWardenSonicCharge;
    pub const ENTITY_WARDEN_STEP: SoundSoundEnum = SoundSoundEnum::EntityWardenStep;
    pub const ENTITY_WARDEN_TENDRIL_CLICKS: SoundSoundEnum =
        SoundSoundEnum::EntityWardenTendrilClicks;
    pub const ENTITY_WITCH_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityWitchAmbient;
    pub const ENTITY_WITCH_CELEBRATE: SoundSoundEnum = SoundSoundEnum::EntityWitchCelebrate;
    pub const ENTITY_WITCH_DEATH: SoundSoundEnum = SoundSoundEnum::EntityWitchDeath;
    pub const ENTITY_WITCH_DRINK: SoundSoundEnum = SoundSoundEnum::EntityWitchDrink;
    pub const ENTITY_WITCH_HURT: SoundSoundEnum = SoundSoundEnum::EntityWitchHurt;
    pub const ENTITY_WITCH_THROW: SoundSoundEnum = SoundSoundEnum::EntityWitchThrow;
    pub const ENTITY_WITHER_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityWitherAmbient;
    pub const ENTITY_WITHER_BREAK_BLOCK: SoundSoundEnum = SoundSoundEnum::EntityWitherBreakBlock;
    pub const ENTITY_WITHER_DEATH: SoundSoundEnum = SoundSoundEnum::EntityWitherDeath;
    pub const ENTITY_WITHER_HURT: SoundSoundEnum = SoundSoundEnum::EntityWitherHurt;
    pub const ENTITY_WITHER_SHOOT: SoundSoundEnum = SoundSoundEnum::EntityWitherShoot;
    pub const ENTITY_WITHER_SKELETON_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityWitherSkeletonAmbient;
    pub const ENTITY_WITHER_SKELETON_DEATH: SoundSoundEnum =
        SoundSoundEnum::EntityWitherSkeletonDeath;
    pub const ENTITY_WITHER_SKELETON_HURT: SoundSoundEnum =
        SoundSoundEnum::EntityWitherSkeletonHurt;
    pub const ENTITY_WITHER_SKELETON_STEP: SoundSoundEnum =
        SoundSoundEnum::EntityWitherSkeletonStep;
    pub const ENTITY_WITHER_SPAWN: SoundSoundEnum = SoundSoundEnum::EntityWitherSpawn;
    pub const ENTITY_WOLF_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityWolfAmbient;
    pub const ENTITY_WOLF_DEATH: SoundSoundEnum = SoundSoundEnum::EntityWolfDeath;
    pub const ENTITY_WOLF_GROWL: SoundSoundEnum = SoundSoundEnum::EntityWolfGrowl;
    pub const ENTITY_WOLF_HOWL: SoundSoundEnum = SoundSoundEnum::EntityWolfHowl;
    pub const ENTITY_WOLF_HURT: SoundSoundEnum = SoundSoundEnum::EntityWolfHurt;
    pub const ENTITY_WOLF_PANT: SoundSoundEnum = SoundSoundEnum::EntityWolfPant;
    pub const ENTITY_WOLF_SHAKE: SoundSoundEnum = SoundSoundEnum::EntityWolfShake;
    pub const ENTITY_WOLF_STEP: SoundSoundEnum = SoundSoundEnum::EntityWolfStep;
    pub const ENTITY_WOLF_WHINE: SoundSoundEnum = SoundSoundEnum::EntityWolfWhine;
    pub const ENTITY_ZOGLIN_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityZoglinAmbient;
    pub const ENTITY_ZOGLIN_ANGRY: SoundSoundEnum = SoundSoundEnum::EntityZoglinAngry;
    pub const ENTITY_ZOGLIN_ATTACK: SoundSoundEnum = SoundSoundEnum::EntityZoglinAttack;
    pub const ENTITY_ZOGLIN_DEATH: SoundSoundEnum = SoundSoundEnum::EntityZoglinDeath;
    pub const ENTITY_ZOGLIN_HURT: SoundSoundEnum = SoundSoundEnum::EntityZoglinHurt;
    pub const ENTITY_ZOGLIN_STEP: SoundSoundEnum = SoundSoundEnum::EntityZoglinStep;
    pub const ENTITY_ZOMBIE_AMBIENT: SoundSoundEnum = SoundSoundEnum::EntityZombieAmbient;
    pub const ENTITY_ZOMBIE_ATTACK_IRON_DOOR: SoundSoundEnum =
        SoundSoundEnum::EntityZombieAttackIronDoor;
    pub const ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR: SoundSoundEnum =
        SoundSoundEnum::EntityZombieAttackWoodenDoor;
    pub const ENTITY_ZOMBIE_BREAK_WOODEN_DOOR: SoundSoundEnum =
        SoundSoundEnum::EntityZombieBreakWoodenDoor;
    pub const ENTITY_ZOMBIE_CONVERTED_TO_DROWNED: SoundSoundEnum =
        SoundSoundEnum::EntityZombieConvertedToDrowned;
    pub const ENTITY_ZOMBIE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityZombieDeath;
    pub const ENTITY_ZOMBIE_DESTROY_EGG: SoundSoundEnum = SoundSoundEnum::EntityZombieDestroyEgg;
    pub const ENTITY_ZOMBIE_HORSE_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityZombieHorseAmbient;
    pub const ENTITY_ZOMBIE_HORSE_DEATH: SoundSoundEnum = SoundSoundEnum::EntityZombieHorseDeath;
    pub const ENTITY_ZOMBIE_HORSE_HURT: SoundSoundEnum = SoundSoundEnum::EntityZombieHorseHurt;
    pub const ENTITY_ZOMBIE_HURT: SoundSoundEnum = SoundSoundEnum::EntityZombieHurt;
    pub const ENTITY_ZOMBIE_INFECT: SoundSoundEnum = SoundSoundEnum::EntityZombieInfect;
    pub const ENTITY_ZOMBIE_STEP: SoundSoundEnum = SoundSoundEnum::EntityZombieStep;
    pub const ENTITY_ZOMBIE_VILLAGER_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityZombieVillagerAmbient;
    pub const ENTITY_ZOMBIE_VILLAGER_CONVERTED: SoundSoundEnum =
        SoundSoundEnum::EntityZombieVillagerConverted;
    pub const ENTITY_ZOMBIE_VILLAGER_CURE: SoundSoundEnum =
        SoundSoundEnum::EntityZombieVillagerCure;
    pub const ENTITY_ZOMBIE_VILLAGER_DEATH: SoundSoundEnum =
        SoundSoundEnum::EntityZombieVillagerDeath;
    pub const ENTITY_ZOMBIE_VILLAGER_HURT: SoundSoundEnum =
        SoundSoundEnum::EntityZombieVillagerHurt;
    pub const ENTITY_ZOMBIE_VILLAGER_STEP: SoundSoundEnum =
        SoundSoundEnum::EntityZombieVillagerStep;
    pub const ENTITY_ZOMBIFIED_PIGLIN_AMBIENT: SoundSoundEnum =
        SoundSoundEnum::EntityZombifiedPiglinAmbient;
    pub const ENTITY_ZOMBIFIED_PIGLIN_ANGRY: SoundSoundEnum =
        SoundSoundEnum::EntityZombifiedPiglinAngry;
    pub const ENTITY_ZOMBIFIED_PIGLIN_DEATH: SoundSoundEnum =
        SoundSoundEnum::EntityZombifiedPiglinDeath;
    pub const ENTITY_ZOMBIFIED_PIGLIN_HURT: SoundSoundEnum =
        SoundSoundEnum::EntityZombifiedPiglinHurt;
    pub const EVENT_RAID_HORN: SoundSoundEnum = SoundSoundEnum::EventRaidHorn;
    pub const INTENTIONALLY_EMPTY: SoundSoundEnum = SoundSoundEnum::IntentionallyEmpty;
    pub const ITEM_ARMOR_EQUIP_CHAIN: SoundSoundEnum = SoundSoundEnum::ItemArmorEquipChain;
    pub const ITEM_ARMOR_EQUIP_DIAMOND: SoundSoundEnum = SoundSoundEnum::ItemArmorEquipDiamond;
    pub const ITEM_ARMOR_EQUIP_ELYTRA: SoundSoundEnum = SoundSoundEnum::ItemArmorEquipElytra;
    pub const ITEM_ARMOR_EQUIP_GENERIC: SoundSoundEnum = SoundSoundEnum::ItemArmorEquipGeneric;
    pub const ITEM_ARMOR_EQUIP_GOLD: SoundSoundEnum = SoundSoundEnum::ItemArmorEquipGold;
    pub const ITEM_ARMOR_EQUIP_IRON: SoundSoundEnum = SoundSoundEnum::ItemArmorEquipIron;
    pub const ITEM_ARMOR_EQUIP_LEATHER: SoundSoundEnum = SoundSoundEnum::ItemArmorEquipLeather;
    pub const ITEM_ARMOR_EQUIP_NETHERITE: SoundSoundEnum = SoundSoundEnum::ItemArmorEquipNetherite;
    pub const ITEM_ARMOR_EQUIP_TURTLE: SoundSoundEnum = SoundSoundEnum::ItemArmorEquipTurtle;
    pub const ITEM_AXE_SCRAPE: SoundSoundEnum = SoundSoundEnum::ItemAxeScrape;
    pub const ITEM_AXE_STRIP: SoundSoundEnum = SoundSoundEnum::ItemAxeStrip;
    pub const ITEM_AXE_WAX_OFF: SoundSoundEnum = SoundSoundEnum::ItemAxeWaxOff;
    pub const ITEM_BONE_MEAL_USE: SoundSoundEnum = SoundSoundEnum::ItemBoneMealUse;
    pub const ITEM_BOOK_PAGE_TURN: SoundSoundEnum = SoundSoundEnum::ItemBookPageTurn;
    pub const ITEM_BOOK_PUT: SoundSoundEnum = SoundSoundEnum::ItemBookPut;
    pub const ITEM_BOTTLE_EMPTY: SoundSoundEnum = SoundSoundEnum::ItemBottleEmpty;
    pub const ITEM_BOTTLE_FILL: SoundSoundEnum = SoundSoundEnum::ItemBottleFill;
    pub const ITEM_BOTTLE_FILL_DRAGONBREATH: SoundSoundEnum =
        SoundSoundEnum::ItemBottleFillDragonbreath;
    pub const ITEM_BRUSH_BRUSHING_GENERIC: SoundSoundEnum =
        SoundSoundEnum::ItemBrushBrushingGeneric;
    pub const ITEM_BRUSH_BRUSHING_GRAVEL: SoundSoundEnum = SoundSoundEnum::ItemBrushBrushingGravel;
    pub const ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE: SoundSoundEnum =
        SoundSoundEnum::ItemBrushBrushingGravelComplete;
    pub const ITEM_BRUSH_BRUSHING_SAND: SoundSoundEnum = SoundSoundEnum::ItemBrushBrushingSand;
    pub const ITEM_BRUSH_BRUSHING_SAND_COMPLETE: SoundSoundEnum =
        SoundSoundEnum::ItemBrushBrushingSandComplete;
    pub const ITEM_BUCKET_EMPTY: SoundSoundEnum = SoundSoundEnum::ItemBucketEmpty;
    pub const ITEM_BUCKET_EMPTY_AXOLOTL: SoundSoundEnum = SoundSoundEnum::ItemBucketEmptyAxolotl;
    pub const ITEM_BUCKET_EMPTY_FISH: SoundSoundEnum = SoundSoundEnum::ItemBucketEmptyFish;
    pub const ITEM_BUCKET_EMPTY_LAVA: SoundSoundEnum = SoundSoundEnum::ItemBucketEmptyLava;
    pub const ITEM_BUCKET_EMPTY_POWDER_SNOW: SoundSoundEnum =
        SoundSoundEnum::ItemBucketEmptyPowderSnow;
    pub const ITEM_BUCKET_EMPTY_TADPOLE: SoundSoundEnum = SoundSoundEnum::ItemBucketEmptyTadpole;
    pub const ITEM_BUCKET_FILL: SoundSoundEnum = SoundSoundEnum::ItemBucketFill;
    pub const ITEM_BUCKET_FILL_AXOLOTL: SoundSoundEnum = SoundSoundEnum::ItemBucketFillAxolotl;
    pub const ITEM_BUCKET_FILL_FISH: SoundSoundEnum = SoundSoundEnum::ItemBucketFillFish;
    pub const ITEM_BUCKET_FILL_LAVA: SoundSoundEnum = SoundSoundEnum::ItemBucketFillLava;
    pub const ITEM_BUCKET_FILL_POWDER_SNOW: SoundSoundEnum =
        SoundSoundEnum::ItemBucketFillPowderSnow;
    pub const ITEM_BUCKET_FILL_TADPOLE: SoundSoundEnum = SoundSoundEnum::ItemBucketFillTadpole;
    pub const ITEM_BUNDLE_DROP_CONTENTS: SoundSoundEnum = SoundSoundEnum::ItemBundleDropContents;
    pub const ITEM_BUNDLE_INSERT: SoundSoundEnum = SoundSoundEnum::ItemBundleInsert;
    pub const ITEM_BUNDLE_REMOVE_ONE: SoundSoundEnum = SoundSoundEnum::ItemBundleRemoveOne;
    pub const ITEM_CHORUS_FRUIT_TELEPORT: SoundSoundEnum = SoundSoundEnum::ItemChorusFruitTeleport;
    pub const ITEM_CROP_PLANT: SoundSoundEnum = SoundSoundEnum::ItemCropPlant;
    pub const ITEM_CROSSBOW_HIT: SoundSoundEnum = SoundSoundEnum::ItemCrossbowHit;
    pub const ITEM_CROSSBOW_LOADING_END: SoundSoundEnum = SoundSoundEnum::ItemCrossbowLoadingEnd;
    pub const ITEM_CROSSBOW_LOADING_MIDDLE: SoundSoundEnum =
        SoundSoundEnum::ItemCrossbowLoadingMiddle;
    pub const ITEM_CROSSBOW_LOADING_START: SoundSoundEnum =
        SoundSoundEnum::ItemCrossbowLoadingStart;
    pub const ITEM_CROSSBOW_QUICK_CHARGE_1: SoundSoundEnum =
        SoundSoundEnum::ItemCrossbowQuickCharge1;
    pub const ITEM_CROSSBOW_QUICK_CHARGE_2: SoundSoundEnum =
        SoundSoundEnum::ItemCrossbowQuickCharge2;
    pub const ITEM_CROSSBOW_QUICK_CHARGE_3: SoundSoundEnum =
        SoundSoundEnum::ItemCrossbowQuickCharge3;
    pub const ITEM_CROSSBOW_SHOOT: SoundSoundEnum = SoundSoundEnum::ItemCrossbowShoot;
    pub const ITEM_DYE_USE: SoundSoundEnum = SoundSoundEnum::ItemDyeUse;
    pub const ITEM_ELYTRA_FLYING: SoundSoundEnum = SoundSoundEnum::ItemElytraFlying;
    pub const ITEM_FIRECHARGE_USE: SoundSoundEnum = SoundSoundEnum::ItemFirechargeUse;
    pub const ITEM_FLINTANDSTEEL_USE: SoundSoundEnum = SoundSoundEnum::ItemFlintandsteelUse;
    pub const ITEM_GLOW_INK_SAC_USE: SoundSoundEnum = SoundSoundEnum::ItemGlowInkSacUse;
    pub const ITEM_GOAT_HORN_PLAY: SoundSoundEnum = SoundSoundEnum::ItemGoatHornPlay;
    pub const ITEM_GOAT_HORN_SOUND_0: SoundSoundEnum = SoundSoundEnum::ItemGoatHornSound0;
    pub const ITEM_GOAT_HORN_SOUND_1: SoundSoundEnum = SoundSoundEnum::ItemGoatHornSound1;
    pub const ITEM_GOAT_HORN_SOUND_2: SoundSoundEnum = SoundSoundEnum::ItemGoatHornSound2;
    pub const ITEM_GOAT_HORN_SOUND_3: SoundSoundEnum = SoundSoundEnum::ItemGoatHornSound3;
    pub const ITEM_GOAT_HORN_SOUND_4: SoundSoundEnum = SoundSoundEnum::ItemGoatHornSound4;
    pub const ITEM_GOAT_HORN_SOUND_5: SoundSoundEnum = SoundSoundEnum::ItemGoatHornSound5;
    pub const ITEM_GOAT_HORN_SOUND_6: SoundSoundEnum = SoundSoundEnum::ItemGoatHornSound6;
    pub const ITEM_GOAT_HORN_SOUND_7: SoundSoundEnum = SoundSoundEnum::ItemGoatHornSound7;
    pub const ITEM_HOE_TILL: SoundSoundEnum = SoundSoundEnum::ItemHoeTill;
    pub const ITEM_HONEYCOMB_WAX_ON: SoundSoundEnum = SoundSoundEnum::ItemHoneycombWaxOn;
    pub const ITEM_HONEY_BOTTLE_DRINK: SoundSoundEnum = SoundSoundEnum::ItemHoneyBottleDrink;
    pub const ITEM_INK_SAC_USE: SoundSoundEnum = SoundSoundEnum::ItemInkSacUse;
    pub const ITEM_LODESTONE_COMPASS_LOCK: SoundSoundEnum =
        SoundSoundEnum::ItemLodestoneCompassLock;
    pub const ITEM_NETHER_WART_PLANT: SoundSoundEnum = SoundSoundEnum::ItemNetherWartPlant;
    pub const ITEM_SHIELD_BLOCK: SoundSoundEnum = SoundSoundEnum::ItemShieldBlock;
    pub const ITEM_SHIELD_BREAK: SoundSoundEnum = SoundSoundEnum::ItemShieldBreak;
    pub const ITEM_SHOVEL_FLATTEN: SoundSoundEnum = SoundSoundEnum::ItemShovelFlatten;
    pub const ITEM_SPYGLASS_STOP_USING: SoundSoundEnum = SoundSoundEnum::ItemSpyglassStopUsing;
    pub const ITEM_SPYGLASS_USE: SoundSoundEnum = SoundSoundEnum::ItemSpyglassUse;
    pub const ITEM_TOTEM_USE: SoundSoundEnum = SoundSoundEnum::ItemTotemUse;
    pub const ITEM_TRIDENT_HIT: SoundSoundEnum = SoundSoundEnum::ItemTridentHit;
    pub const ITEM_TRIDENT_HIT_GROUND: SoundSoundEnum = SoundSoundEnum::ItemTridentHitGround;
    pub const ITEM_TRIDENT_RETURN: SoundSoundEnum = SoundSoundEnum::ItemTridentReturn;
    pub const ITEM_TRIDENT_RIPTIDE_1: SoundSoundEnum = SoundSoundEnum::ItemTridentRiptide1;
    pub const ITEM_TRIDENT_RIPTIDE_2: SoundSoundEnum = SoundSoundEnum::ItemTridentRiptide2;
    pub const ITEM_TRIDENT_RIPTIDE_3: SoundSoundEnum = SoundSoundEnum::ItemTridentRiptide3;
    pub const ITEM_TRIDENT_THROW: SoundSoundEnum = SoundSoundEnum::ItemTridentThrow;
    pub const ITEM_TRIDENT_THUNDER: SoundSoundEnum = SoundSoundEnum::ItemTridentThunder;
    pub const MUSIC_CREATIVE: SoundSoundEnum = SoundSoundEnum::MusicCreative;
    pub const MUSIC_CREDITS: SoundSoundEnum = SoundSoundEnum::MusicCredits;
    pub const MUSIC_DISC_11: SoundSoundEnum = SoundSoundEnum::MusicDisc11;
    pub const MUSIC_DISC_13: SoundSoundEnum = SoundSoundEnum::MusicDisc13;
    pub const MUSIC_DISC_5: SoundSoundEnum = SoundSoundEnum::MusicDisc5;
    pub const MUSIC_DISC_BLOCKS: SoundSoundEnum = SoundSoundEnum::MusicDiscBlocks;
    pub const MUSIC_DISC_CAT: SoundSoundEnum = SoundSoundEnum::MusicDiscCat;
    pub const MUSIC_DISC_CHIRP: SoundSoundEnum = SoundSoundEnum::MusicDiscChirp;
    pub const MUSIC_DISC_FAR: SoundSoundEnum = SoundSoundEnum::MusicDiscFar;
    pub const MUSIC_DISC_MALL: SoundSoundEnum = SoundSoundEnum::MusicDiscMall;
    pub const MUSIC_DISC_MELLOHI: SoundSoundEnum = SoundSoundEnum::MusicDiscMellohi;
    pub const MUSIC_DISC_OTHERSIDE: SoundSoundEnum = SoundSoundEnum::MusicDiscOtherside;
    pub const MUSIC_DISC_PIGSTEP: SoundSoundEnum = SoundSoundEnum::MusicDiscPigstep;
    pub const MUSIC_DISC_RELIC: SoundSoundEnum = SoundSoundEnum::MusicDiscRelic;
    pub const MUSIC_DISC_STAL: SoundSoundEnum = SoundSoundEnum::MusicDiscStal;
    pub const MUSIC_DISC_STRAD: SoundSoundEnum = SoundSoundEnum::MusicDiscStrad;
    pub const MUSIC_DISC_WAIT: SoundSoundEnum = SoundSoundEnum::MusicDiscWait;
    pub const MUSIC_DISC_WARD: SoundSoundEnum = SoundSoundEnum::MusicDiscWard;
    pub const MUSIC_DRAGON: SoundSoundEnum = SoundSoundEnum::MusicDragon;
    pub const MUSIC_END: SoundSoundEnum = SoundSoundEnum::MusicEnd;
    pub const MUSIC_GAME: SoundSoundEnum = SoundSoundEnum::MusicGame;
    pub const MUSIC_MENU: SoundSoundEnum = SoundSoundEnum::MusicMenu;
    pub const MUSIC_NETHER_BASALT_DELTAS: SoundSoundEnum = SoundSoundEnum::MusicNetherBasaltDeltas;
    pub const MUSIC_NETHER_CRIMSON_FOREST: SoundSoundEnum =
        SoundSoundEnum::MusicNetherCrimsonForest;
    pub const MUSIC_NETHER_NETHER_WASTES: SoundSoundEnum = SoundSoundEnum::MusicNetherNetherWastes;
    pub const MUSIC_NETHER_SOUL_SAND_VALLEY: SoundSoundEnum =
        SoundSoundEnum::MusicNetherSoulSandValley;
    pub const MUSIC_NETHER_WARPED_FOREST: SoundSoundEnum = SoundSoundEnum::MusicNetherWarpedForest;
    pub const MUSIC_OVERWORLD_BADLANDS: SoundSoundEnum = SoundSoundEnum::MusicOverworldBadlands;
    pub const MUSIC_OVERWORLD_BAMBOO_JUNGLE: SoundSoundEnum =
        SoundSoundEnum::MusicOverworldBambooJungle;
    pub const MUSIC_OVERWORLD_CHERRY_GROVE: SoundSoundEnum =
        SoundSoundEnum::MusicOverworldCherryGrove;
    pub const MUSIC_OVERWORLD_DEEP_DARK: SoundSoundEnum = SoundSoundEnum::MusicOverworldDeepDark;
    pub const MUSIC_OVERWORLD_DESERT: SoundSoundEnum = SoundSoundEnum::MusicOverworldDesert;
    pub const MUSIC_OVERWORLD_DRIPSTONE_CAVES: SoundSoundEnum =
        SoundSoundEnum::MusicOverworldDripstoneCaves;
    pub const MUSIC_OVERWORLD_FLOWER_FOREST: SoundSoundEnum =
        SoundSoundEnum::MusicOverworldFlowerForest;
    pub const MUSIC_OVERWORLD_FOREST: SoundSoundEnum = SoundSoundEnum::MusicOverworldForest;
    pub const MUSIC_OVERWORLD_FROZEN_PEAKS: SoundSoundEnum =
        SoundSoundEnum::MusicOverworldFrozenPeaks;
    pub const MUSIC_OVERWORLD_GROVE: SoundSoundEnum = SoundSoundEnum::MusicOverworldGrove;
    pub const MUSIC_OVERWORLD_JAGGED_PEAKS: SoundSoundEnum =
        SoundSoundEnum::MusicOverworldJaggedPeaks;
    pub const MUSIC_OVERWORLD_JUNGLE: SoundSoundEnum = SoundSoundEnum::MusicOverworldJungle;
    pub const MUSIC_OVERWORLD_LUSH_CAVES: SoundSoundEnum = SoundSoundEnum::MusicOverworldLushCaves;
    pub const MUSIC_OVERWORLD_MEADOW: SoundSoundEnum = SoundSoundEnum::MusicOverworldMeadow;
    pub const MUSIC_OVERWORLD_OLD_GROWTH_TAIGA: SoundSoundEnum =
        SoundSoundEnum::MusicOverworldOldGrowthTaiga;
    pub const MUSIC_OVERWORLD_SNOWY_SLOPES: SoundSoundEnum =
        SoundSoundEnum::MusicOverworldSnowySlopes;
    pub const MUSIC_OVERWORLD_SPARSE_JUNGLE: SoundSoundEnum =
        SoundSoundEnum::MusicOverworldSparseJungle;
    pub const MUSIC_OVERWORLD_STONY_PEAKS: SoundSoundEnum =
        SoundSoundEnum::MusicOverworldStonyPeaks;
    pub const MUSIC_OVERWORLD_SWAMP: SoundSoundEnum = SoundSoundEnum::MusicOverworldSwamp;
    pub const MUSIC_UNDER_WATER: SoundSoundEnum = SoundSoundEnum::MusicUnderWater;
    pub const PARTICLE_SOUL_ESCAPE: SoundSoundEnum = SoundSoundEnum::ParticleSoulEscape;
    pub const UI_BUTTON_CLICK: SoundSoundEnum = SoundSoundEnum::UiButtonClick;
    pub const UI_CARTOGRAPHY_TABLE_TAKE_RESULT: SoundSoundEnum =
        SoundSoundEnum::UiCartographyTableTakeResult;
    pub const UI_LOOM_SELECT_PATTERN: SoundSoundEnum = SoundSoundEnum::UiLoomSelectPattern;
    pub const UI_LOOM_TAKE_RESULT: SoundSoundEnum = SoundSoundEnum::UiLoomTakeResult;
    pub const UI_STONECUTTER_SELECT_RECIPE: SoundSoundEnum =
        SoundSoundEnum::UiStonecutterSelectRecipe;
    pub const UI_STONECUTTER_TAKE_RESULT: SoundSoundEnum = SoundSoundEnum::UiStonecutterTakeResult;
    pub const UI_TOAST_CHALLENGE_COMPLETE: SoundSoundEnum =
        SoundSoundEnum::UiToastChallengeComplete;
    pub const UI_TOAST_IN: SoundSoundEnum = SoundSoundEnum::UiToastIn;
    pub const UI_TOAST_OUT: SoundSoundEnum = SoundSoundEnum::UiToastOut;
    pub const WEATHER_RAIN: SoundSoundEnum = SoundSoundEnum::WeatherRain;
    pub const WEATHER_RAIN_ABOVE: SoundSoundEnum = SoundSoundEnum::WeatherRainAbove;
    pub fn from_string(str: String) -> std::option::Option<SoundSoundEnum> {
        match str.as_str() {
            "AMBIENT_BASALT_DELTAS_ADDITIONS" => Some(SoundSoundEnum::AmbientBasaltDeltasAdditions),
            "AMBIENT_BASALT_DELTAS_LOOP" => Some(SoundSoundEnum::AmbientBasaltDeltasLoop),
            "AMBIENT_BASALT_DELTAS_MOOD" => Some(SoundSoundEnum::AmbientBasaltDeltasMood),
            "AMBIENT_CAVE" => Some(SoundSoundEnum::AmbientCave),
            "AMBIENT_CRIMSON_FOREST_ADDITIONS" => {
                Some(SoundSoundEnum::AmbientCrimsonForestAdditions)
            }
            "AMBIENT_CRIMSON_FOREST_LOOP" => Some(SoundSoundEnum::AmbientCrimsonForestLoop),
            "AMBIENT_CRIMSON_FOREST_MOOD" => Some(SoundSoundEnum::AmbientCrimsonForestMood),
            "AMBIENT_NETHER_WASTES_ADDITIONS" => Some(SoundSoundEnum::AmbientNetherWastesAdditions),
            "AMBIENT_NETHER_WASTES_LOOP" => Some(SoundSoundEnum::AmbientNetherWastesLoop),
            "AMBIENT_NETHER_WASTES_MOOD" => Some(SoundSoundEnum::AmbientNetherWastesMood),
            "AMBIENT_SOUL_SAND_VALLEY_ADDITIONS" => {
                Some(SoundSoundEnum::AmbientSoulSandValleyAdditions)
            }
            "AMBIENT_SOUL_SAND_VALLEY_LOOP" => Some(SoundSoundEnum::AmbientSoulSandValleyLoop),
            "AMBIENT_SOUL_SAND_VALLEY_MOOD" => Some(SoundSoundEnum::AmbientSoulSandValleyMood),
            "AMBIENT_UNDERWATER_ENTER" => Some(SoundSoundEnum::AmbientUnderwaterEnter),
            "AMBIENT_UNDERWATER_EXIT" => Some(SoundSoundEnum::AmbientUnderwaterExit),
            "AMBIENT_UNDERWATER_LOOP" => Some(SoundSoundEnum::AmbientUnderwaterLoop),
            "AMBIENT_UNDERWATER_LOOP_ADDITIONS" => {
                Some(SoundSoundEnum::AmbientUnderwaterLoopAdditions)
            }
            "AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE" => {
                Some(SoundSoundEnum::AmbientUnderwaterLoopAdditionsRare)
            }
            "AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE" => {
                Some(SoundSoundEnum::AmbientUnderwaterLoopAdditionsUltraRare)
            }
            "AMBIENT_WARPED_FOREST_ADDITIONS" => Some(SoundSoundEnum::AmbientWarpedForestAdditions),
            "AMBIENT_WARPED_FOREST_LOOP" => Some(SoundSoundEnum::AmbientWarpedForestLoop),
            "AMBIENT_WARPED_FOREST_MOOD" => Some(SoundSoundEnum::AmbientWarpedForestMood),
            "BLOCK_AMETHYST_BLOCK_BREAK" => Some(SoundSoundEnum::BlockAmethystBlockBreak),
            "BLOCK_AMETHYST_BLOCK_CHIME" => Some(SoundSoundEnum::BlockAmethystBlockChime),
            "BLOCK_AMETHYST_BLOCK_FALL" => Some(SoundSoundEnum::BlockAmethystBlockFall),
            "BLOCK_AMETHYST_BLOCK_HIT" => Some(SoundSoundEnum::BlockAmethystBlockHit),
            "BLOCK_AMETHYST_BLOCK_PLACE" => Some(SoundSoundEnum::BlockAmethystBlockPlace),
            "BLOCK_AMETHYST_BLOCK_RESONATE" => Some(SoundSoundEnum::BlockAmethystBlockResonate),
            "BLOCK_AMETHYST_BLOCK_STEP" => Some(SoundSoundEnum::BlockAmethystBlockStep),
            "BLOCK_AMETHYST_CLUSTER_BREAK" => Some(SoundSoundEnum::BlockAmethystClusterBreak),
            "BLOCK_AMETHYST_CLUSTER_FALL" => Some(SoundSoundEnum::BlockAmethystClusterFall),
            "BLOCK_AMETHYST_CLUSTER_HIT" => Some(SoundSoundEnum::BlockAmethystClusterHit),
            "BLOCK_AMETHYST_CLUSTER_PLACE" => Some(SoundSoundEnum::BlockAmethystClusterPlace),
            "BLOCK_AMETHYST_CLUSTER_STEP" => Some(SoundSoundEnum::BlockAmethystClusterStep),
            "BLOCK_ANCIENT_DEBRIS_BREAK" => Some(SoundSoundEnum::BlockAncientDebrisBreak),
            "BLOCK_ANCIENT_DEBRIS_FALL" => Some(SoundSoundEnum::BlockAncientDebrisFall),
            "BLOCK_ANCIENT_DEBRIS_HIT" => Some(SoundSoundEnum::BlockAncientDebrisHit),
            "BLOCK_ANCIENT_DEBRIS_PLACE" => Some(SoundSoundEnum::BlockAncientDebrisPlace),
            "BLOCK_ANCIENT_DEBRIS_STEP" => Some(SoundSoundEnum::BlockAncientDebrisStep),
            "BLOCK_ANVIL_BREAK" => Some(SoundSoundEnum::BlockAnvilBreak),
            "BLOCK_ANVIL_DESTROY" => Some(SoundSoundEnum::BlockAnvilDestroy),
            "BLOCK_ANVIL_FALL" => Some(SoundSoundEnum::BlockAnvilFall),
            "BLOCK_ANVIL_HIT" => Some(SoundSoundEnum::BlockAnvilHit),
            "BLOCK_ANVIL_LAND" => Some(SoundSoundEnum::BlockAnvilLand),
            "BLOCK_ANVIL_PLACE" => Some(SoundSoundEnum::BlockAnvilPlace),
            "BLOCK_ANVIL_STEP" => Some(SoundSoundEnum::BlockAnvilStep),
            "BLOCK_ANVIL_USE" => Some(SoundSoundEnum::BlockAnvilUse),
            "BLOCK_AZALEA_BREAK" => Some(SoundSoundEnum::BlockAzaleaBreak),
            "BLOCK_AZALEA_FALL" => Some(SoundSoundEnum::BlockAzaleaFall),
            "BLOCK_AZALEA_HIT" => Some(SoundSoundEnum::BlockAzaleaHit),
            "BLOCK_AZALEA_LEAVES_BREAK" => Some(SoundSoundEnum::BlockAzaleaLeavesBreak),
            "BLOCK_AZALEA_LEAVES_FALL" => Some(SoundSoundEnum::BlockAzaleaLeavesFall),
            "BLOCK_AZALEA_LEAVES_HIT" => Some(SoundSoundEnum::BlockAzaleaLeavesHit),
            "BLOCK_AZALEA_LEAVES_PLACE" => Some(SoundSoundEnum::BlockAzaleaLeavesPlace),
            "BLOCK_AZALEA_LEAVES_STEP" => Some(SoundSoundEnum::BlockAzaleaLeavesStep),
            "BLOCK_AZALEA_PLACE" => Some(SoundSoundEnum::BlockAzaleaPlace),
            "BLOCK_AZALEA_STEP" => Some(SoundSoundEnum::BlockAzaleaStep),
            "BLOCK_BAMBOO_BREAK" => Some(SoundSoundEnum::BlockBambooBreak),
            "BLOCK_BAMBOO_FALL" => Some(SoundSoundEnum::BlockBambooFall),
            "BLOCK_BAMBOO_HIT" => Some(SoundSoundEnum::BlockBambooHit),
            "BLOCK_BAMBOO_PLACE" => Some(SoundSoundEnum::BlockBambooPlace),
            "BLOCK_BAMBOO_SAPLING_BREAK" => Some(SoundSoundEnum::BlockBambooSaplingBreak),
            "BLOCK_BAMBOO_SAPLING_HIT" => Some(SoundSoundEnum::BlockBambooSaplingHit),
            "BLOCK_BAMBOO_SAPLING_PLACE" => Some(SoundSoundEnum::BlockBambooSaplingPlace),
            "BLOCK_BAMBOO_STEP" => Some(SoundSoundEnum::BlockBambooStep),
            "BLOCK_BAMBOO_WOOD_BREAK" => Some(SoundSoundEnum::BlockBambooWoodBreak),
            "BLOCK_BAMBOO_WOOD_BUTTON_CLICK_OFF" => {
                Some(SoundSoundEnum::BlockBambooWoodButtonClickOff)
            }
            "BLOCK_BAMBOO_WOOD_BUTTON_CLICK_ON" => {
                Some(SoundSoundEnum::BlockBambooWoodButtonClickOn)
            }
            "BLOCK_BAMBOO_WOOD_DOOR_CLOSE" => Some(SoundSoundEnum::BlockBambooWoodDoorClose),
            "BLOCK_BAMBOO_WOOD_DOOR_OPEN" => Some(SoundSoundEnum::BlockBambooWoodDoorOpen),
            "BLOCK_BAMBOO_WOOD_FALL" => Some(SoundSoundEnum::BlockBambooWoodFall),
            "BLOCK_BAMBOO_WOOD_FENCE_GATE_CLOSE" => {
                Some(SoundSoundEnum::BlockBambooWoodFenceGateClose)
            }
            "BLOCK_BAMBOO_WOOD_FENCE_GATE_OPEN" => {
                Some(SoundSoundEnum::BlockBambooWoodFenceGateOpen)
            }
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_BREAK" => {
                Some(SoundSoundEnum::BlockBambooWoodHangingSignBreak)
            }
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_FALL" => {
                Some(SoundSoundEnum::BlockBambooWoodHangingSignFall)
            }
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_HIT" => {
                Some(SoundSoundEnum::BlockBambooWoodHangingSignHit)
            }
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_PLACE" => {
                Some(SoundSoundEnum::BlockBambooWoodHangingSignPlace)
            }
            "BLOCK_BAMBOO_WOOD_HANGING_SIGN_STEP" => {
                Some(SoundSoundEnum::BlockBambooWoodHangingSignStep)
            }
            "BLOCK_BAMBOO_WOOD_HIT" => Some(SoundSoundEnum::BlockBambooWoodHit),
            "BLOCK_BAMBOO_WOOD_PLACE" => Some(SoundSoundEnum::BlockBambooWoodPlace),
            "BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundSoundEnum::BlockBambooWoodPressurePlateClickOff)
            }
            "BLOCK_BAMBOO_WOOD_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundSoundEnum::BlockBambooWoodPressurePlateClickOn)
            }
            "BLOCK_BAMBOO_WOOD_STEP" => Some(SoundSoundEnum::BlockBambooWoodStep),
            "BLOCK_BAMBOO_WOOD_TRAPDOOR_CLOSE" => {
                Some(SoundSoundEnum::BlockBambooWoodTrapdoorClose)
            }
            "BLOCK_BAMBOO_WOOD_TRAPDOOR_OPEN" => Some(SoundSoundEnum::BlockBambooWoodTrapdoorOpen),
            "BLOCK_BARREL_CLOSE" => Some(SoundSoundEnum::BlockBarrelClose),
            "BLOCK_BARREL_OPEN" => Some(SoundSoundEnum::BlockBarrelOpen),
            "BLOCK_BASALT_BREAK" => Some(SoundSoundEnum::BlockBasaltBreak),
            "BLOCK_BASALT_FALL" => Some(SoundSoundEnum::BlockBasaltFall),
            "BLOCK_BASALT_HIT" => Some(SoundSoundEnum::BlockBasaltHit),
            "BLOCK_BASALT_PLACE" => Some(SoundSoundEnum::BlockBasaltPlace),
            "BLOCK_BASALT_STEP" => Some(SoundSoundEnum::BlockBasaltStep),
            "BLOCK_BEACON_ACTIVATE" => Some(SoundSoundEnum::BlockBeaconActivate),
            "BLOCK_BEACON_AMBIENT" => Some(SoundSoundEnum::BlockBeaconAmbient),
            "BLOCK_BEACON_DEACTIVATE" => Some(SoundSoundEnum::BlockBeaconDeactivate),
            "BLOCK_BEACON_POWER_SELECT" => Some(SoundSoundEnum::BlockBeaconPowerSelect),
            "BLOCK_BEEHIVE_DRIP" => Some(SoundSoundEnum::BlockBeehiveDrip),
            "BLOCK_BEEHIVE_ENTER" => Some(SoundSoundEnum::BlockBeehiveEnter),
            "BLOCK_BEEHIVE_EXIT" => Some(SoundSoundEnum::BlockBeehiveExit),
            "BLOCK_BEEHIVE_SHEAR" => Some(SoundSoundEnum::BlockBeehiveShear),
            "BLOCK_BEEHIVE_WORK" => Some(SoundSoundEnum::BlockBeehiveWork),
            "BLOCK_BELL_RESONATE" => Some(SoundSoundEnum::BlockBellResonate),
            "BLOCK_BELL_USE" => Some(SoundSoundEnum::BlockBellUse),
            "BLOCK_BIG_DRIPLEAF_BREAK" => Some(SoundSoundEnum::BlockBigDripleafBreak),
            "BLOCK_BIG_DRIPLEAF_FALL" => Some(SoundSoundEnum::BlockBigDripleafFall),
            "BLOCK_BIG_DRIPLEAF_HIT" => Some(SoundSoundEnum::BlockBigDripleafHit),
            "BLOCK_BIG_DRIPLEAF_PLACE" => Some(SoundSoundEnum::BlockBigDripleafPlace),
            "BLOCK_BIG_DRIPLEAF_STEP" => Some(SoundSoundEnum::BlockBigDripleafStep),
            "BLOCK_BIG_DRIPLEAF_TILT_DOWN" => Some(SoundSoundEnum::BlockBigDripleafTiltDown),
            "BLOCK_BIG_DRIPLEAF_TILT_UP" => Some(SoundSoundEnum::BlockBigDripleafTiltUp),
            "BLOCK_BLASTFURNACE_FIRE_CRACKLE" => Some(SoundSoundEnum::BlockBlastfurnaceFireCrackle),
            "BLOCK_BONE_BLOCK_BREAK" => Some(SoundSoundEnum::BlockBoneBlockBreak),
            "BLOCK_BONE_BLOCK_FALL" => Some(SoundSoundEnum::BlockBoneBlockFall),
            "BLOCK_BONE_BLOCK_HIT" => Some(SoundSoundEnum::BlockBoneBlockHit),
            "BLOCK_BONE_BLOCK_PLACE" => Some(SoundSoundEnum::BlockBoneBlockPlace),
            "BLOCK_BONE_BLOCK_STEP" => Some(SoundSoundEnum::BlockBoneBlockStep),
            "BLOCK_BREWING_STAND_BREW" => Some(SoundSoundEnum::BlockBrewingStandBrew),
            "BLOCK_BUBBLE_COLUMN_BUBBLE_POP" => Some(SoundSoundEnum::BlockBubbleColumnBubblePop),
            "BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT" => {
                Some(SoundSoundEnum::BlockBubbleColumnUpwardsAmbient)
            }
            "BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE" => {
                Some(SoundSoundEnum::BlockBubbleColumnUpwardsInside)
            }
            "BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT" => {
                Some(SoundSoundEnum::BlockBubbleColumnWhirlpoolAmbient)
            }
            "BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE" => {
                Some(SoundSoundEnum::BlockBubbleColumnWhirlpoolInside)
            }
            "BLOCK_CAKE_ADD_CANDLE" => Some(SoundSoundEnum::BlockCakeAddCandle),
            "BLOCK_CALCITE_BREAK" => Some(SoundSoundEnum::BlockCalciteBreak),
            "BLOCK_CALCITE_FALL" => Some(SoundSoundEnum::BlockCalciteFall),
            "BLOCK_CALCITE_HIT" => Some(SoundSoundEnum::BlockCalciteHit),
            "BLOCK_CALCITE_PLACE" => Some(SoundSoundEnum::BlockCalcitePlace),
            "BLOCK_CALCITE_STEP" => Some(SoundSoundEnum::BlockCalciteStep),
            "BLOCK_CAMPFIRE_CRACKLE" => Some(SoundSoundEnum::BlockCampfireCrackle),
            "BLOCK_CANDLE_AMBIENT" => Some(SoundSoundEnum::BlockCandleAmbient),
            "BLOCK_CANDLE_BREAK" => Some(SoundSoundEnum::BlockCandleBreak),
            "BLOCK_CANDLE_EXTINGUISH" => Some(SoundSoundEnum::BlockCandleExtinguish),
            "BLOCK_CANDLE_FALL" => Some(SoundSoundEnum::BlockCandleFall),
            "BLOCK_CANDLE_HIT" => Some(SoundSoundEnum::BlockCandleHit),
            "BLOCK_CANDLE_PLACE" => Some(SoundSoundEnum::BlockCandlePlace),
            "BLOCK_CANDLE_STEP" => Some(SoundSoundEnum::BlockCandleStep),
            "BLOCK_CAVE_VINES_BREAK" => Some(SoundSoundEnum::BlockCaveVinesBreak),
            "BLOCK_CAVE_VINES_FALL" => Some(SoundSoundEnum::BlockCaveVinesFall),
            "BLOCK_CAVE_VINES_HIT" => Some(SoundSoundEnum::BlockCaveVinesHit),
            "BLOCK_CAVE_VINES_PICK_BERRIES" => Some(SoundSoundEnum::BlockCaveVinesPickBerries),
            "BLOCK_CAVE_VINES_PLACE" => Some(SoundSoundEnum::BlockCaveVinesPlace),
            "BLOCK_CAVE_VINES_STEP" => Some(SoundSoundEnum::BlockCaveVinesStep),
            "BLOCK_CHAIN_BREAK" => Some(SoundSoundEnum::BlockChainBreak),
            "BLOCK_CHAIN_FALL" => Some(SoundSoundEnum::BlockChainFall),
            "BLOCK_CHAIN_HIT" => Some(SoundSoundEnum::BlockChainHit),
            "BLOCK_CHAIN_PLACE" => Some(SoundSoundEnum::BlockChainPlace),
            "BLOCK_CHAIN_STEP" => Some(SoundSoundEnum::BlockChainStep),
            "BLOCK_CHERRY_LEAVES_BREAK" => Some(SoundSoundEnum::BlockCherryLeavesBreak),
            "BLOCK_CHERRY_LEAVES_FALL" => Some(SoundSoundEnum::BlockCherryLeavesFall),
            "BLOCK_CHERRY_LEAVES_HIT" => Some(SoundSoundEnum::BlockCherryLeavesHit),
            "BLOCK_CHERRY_LEAVES_PLACE" => Some(SoundSoundEnum::BlockCherryLeavesPlace),
            "BLOCK_CHERRY_LEAVES_STEP" => Some(SoundSoundEnum::BlockCherryLeavesStep),
            "BLOCK_CHERRY_SAPLING_BREAK" => Some(SoundSoundEnum::BlockCherrySaplingBreak),
            "BLOCK_CHERRY_SAPLING_FALL" => Some(SoundSoundEnum::BlockCherrySaplingFall),
            "BLOCK_CHERRY_SAPLING_HIT" => Some(SoundSoundEnum::BlockCherrySaplingHit),
            "BLOCK_CHERRY_SAPLING_PLACE" => Some(SoundSoundEnum::BlockCherrySaplingPlace),
            "BLOCK_CHERRY_SAPLING_STEP" => Some(SoundSoundEnum::BlockCherrySaplingStep),
            "BLOCK_CHERRY_WOOD_BREAK" => Some(SoundSoundEnum::BlockCherryWoodBreak),
            "BLOCK_CHERRY_WOOD_BUTTON_CLICK_OFF" => {
                Some(SoundSoundEnum::BlockCherryWoodButtonClickOff)
            }
            "BLOCK_CHERRY_WOOD_BUTTON_CLICK_ON" => {
                Some(SoundSoundEnum::BlockCherryWoodButtonClickOn)
            }
            "BLOCK_CHERRY_WOOD_DOOR_CLOSE" => Some(SoundSoundEnum::BlockCherryWoodDoorClose),
            "BLOCK_CHERRY_WOOD_DOOR_OPEN" => Some(SoundSoundEnum::BlockCherryWoodDoorOpen),
            "BLOCK_CHERRY_WOOD_FALL" => Some(SoundSoundEnum::BlockCherryWoodFall),
            "BLOCK_CHERRY_WOOD_FENCE_GATE_CLOSE" => {
                Some(SoundSoundEnum::BlockCherryWoodFenceGateClose)
            }
            "BLOCK_CHERRY_WOOD_FENCE_GATE_OPEN" => {
                Some(SoundSoundEnum::BlockCherryWoodFenceGateOpen)
            }
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_BREAK" => {
                Some(SoundSoundEnum::BlockCherryWoodHangingSignBreak)
            }
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_FALL" => {
                Some(SoundSoundEnum::BlockCherryWoodHangingSignFall)
            }
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_HIT" => {
                Some(SoundSoundEnum::BlockCherryWoodHangingSignHit)
            }
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_PLACE" => {
                Some(SoundSoundEnum::BlockCherryWoodHangingSignPlace)
            }
            "BLOCK_CHERRY_WOOD_HANGING_SIGN_STEP" => {
                Some(SoundSoundEnum::BlockCherryWoodHangingSignStep)
            }
            "BLOCK_CHERRY_WOOD_HIT" => Some(SoundSoundEnum::BlockCherryWoodHit),
            "BLOCK_CHERRY_WOOD_PLACE" => Some(SoundSoundEnum::BlockCherryWoodPlace),
            "BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundSoundEnum::BlockCherryWoodPressurePlateClickOff)
            }
            "BLOCK_CHERRY_WOOD_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundSoundEnum::BlockCherryWoodPressurePlateClickOn)
            }
            "BLOCK_CHERRY_WOOD_STEP" => Some(SoundSoundEnum::BlockCherryWoodStep),
            "BLOCK_CHERRY_WOOD_TRAPDOOR_CLOSE" => {
                Some(SoundSoundEnum::BlockCherryWoodTrapdoorClose)
            }
            "BLOCK_CHERRY_WOOD_TRAPDOOR_OPEN" => Some(SoundSoundEnum::BlockCherryWoodTrapdoorOpen),
            "BLOCK_CHEST_CLOSE" => Some(SoundSoundEnum::BlockChestClose),
            "BLOCK_CHEST_LOCKED" => Some(SoundSoundEnum::BlockChestLocked),
            "BLOCK_CHEST_OPEN" => Some(SoundSoundEnum::BlockChestOpen),
            "BLOCK_CHISELED_BOOKSHELF_BREAK" => Some(SoundSoundEnum::BlockChiseledBookshelfBreak),
            "BLOCK_CHISELED_BOOKSHELF_FALL" => Some(SoundSoundEnum::BlockChiseledBookshelfFall),
            "BLOCK_CHISELED_BOOKSHELF_HIT" => Some(SoundSoundEnum::BlockChiseledBookshelfHit),
            "BLOCK_CHISELED_BOOKSHELF_INSERT" => Some(SoundSoundEnum::BlockChiseledBookshelfInsert),
            "BLOCK_CHISELED_BOOKSHELF_INSERT_ENCHANTED" => {
                Some(SoundSoundEnum::BlockChiseledBookshelfInsertEnchanted)
            }
            "BLOCK_CHISELED_BOOKSHELF_PICKUP" => Some(SoundSoundEnum::BlockChiseledBookshelfPickup),
            "BLOCK_CHISELED_BOOKSHELF_PICKUP_ENCHANTED" => {
                Some(SoundSoundEnum::BlockChiseledBookshelfPickupEnchanted)
            }
            "BLOCK_CHISELED_BOOKSHELF_PLACE" => Some(SoundSoundEnum::BlockChiseledBookshelfPlace),
            "BLOCK_CHISELED_BOOKSHELF_STEP" => Some(SoundSoundEnum::BlockChiseledBookshelfStep),
            "BLOCK_CHORUS_FLOWER_DEATH" => Some(SoundSoundEnum::BlockChorusFlowerDeath),
            "BLOCK_CHORUS_FLOWER_GROW" => Some(SoundSoundEnum::BlockChorusFlowerGrow),
            "BLOCK_COMPARATOR_CLICK" => Some(SoundSoundEnum::BlockComparatorClick),
            "BLOCK_COMPOSTER_EMPTY" => Some(SoundSoundEnum::BlockComposterEmpty),
            "BLOCK_COMPOSTER_FILL" => Some(SoundSoundEnum::BlockComposterFill),
            "BLOCK_COMPOSTER_FILL_SUCCESS" => Some(SoundSoundEnum::BlockComposterFillSuccess),
            "BLOCK_COMPOSTER_READY" => Some(SoundSoundEnum::BlockComposterReady),
            "BLOCK_CONDUIT_ACTIVATE" => Some(SoundSoundEnum::BlockConduitActivate),
            "BLOCK_CONDUIT_AMBIENT" => Some(SoundSoundEnum::BlockConduitAmbient),
            "BLOCK_CONDUIT_AMBIENT_SHORT" => Some(SoundSoundEnum::BlockConduitAmbientShort),
            "BLOCK_CONDUIT_ATTACK_TARGET" => Some(SoundSoundEnum::BlockConduitAttackTarget),
            "BLOCK_CONDUIT_DEACTIVATE" => Some(SoundSoundEnum::BlockConduitDeactivate),
            "BLOCK_COPPER_BREAK" => Some(SoundSoundEnum::BlockCopperBreak),
            "BLOCK_COPPER_FALL" => Some(SoundSoundEnum::BlockCopperFall),
            "BLOCK_COPPER_HIT" => Some(SoundSoundEnum::BlockCopperHit),
            "BLOCK_COPPER_PLACE" => Some(SoundSoundEnum::BlockCopperPlace),
            "BLOCK_COPPER_STEP" => Some(SoundSoundEnum::BlockCopperStep),
            "BLOCK_CORAL_BLOCK_BREAK" => Some(SoundSoundEnum::BlockCoralBlockBreak),
            "BLOCK_CORAL_BLOCK_FALL" => Some(SoundSoundEnum::BlockCoralBlockFall),
            "BLOCK_CORAL_BLOCK_HIT" => Some(SoundSoundEnum::BlockCoralBlockHit),
            "BLOCK_CORAL_BLOCK_PLACE" => Some(SoundSoundEnum::BlockCoralBlockPlace),
            "BLOCK_CORAL_BLOCK_STEP" => Some(SoundSoundEnum::BlockCoralBlockStep),
            "BLOCK_CROP_BREAK" => Some(SoundSoundEnum::BlockCropBreak),
            "BLOCK_DECORATED_POT_BREAK" => Some(SoundSoundEnum::BlockDecoratedPotBreak),
            "BLOCK_DECORATED_POT_FALL" => Some(SoundSoundEnum::BlockDecoratedPotFall),
            "BLOCK_DECORATED_POT_HIT" => Some(SoundSoundEnum::BlockDecoratedPotHit),
            "BLOCK_DECORATED_POT_PLACE" => Some(SoundSoundEnum::BlockDecoratedPotPlace),
            "BLOCK_DECORATED_POT_SHATTER" => Some(SoundSoundEnum::BlockDecoratedPotShatter),
            "BLOCK_DECORATED_POT_STEP" => Some(SoundSoundEnum::BlockDecoratedPotStep),
            "BLOCK_DEEPSLATE_BREAK" => Some(SoundSoundEnum::BlockDeepslateBreak),
            "BLOCK_DEEPSLATE_BRICKS_BREAK" => Some(SoundSoundEnum::BlockDeepslateBricksBreak),
            "BLOCK_DEEPSLATE_BRICKS_FALL" => Some(SoundSoundEnum::BlockDeepslateBricksFall),
            "BLOCK_DEEPSLATE_BRICKS_HIT" => Some(SoundSoundEnum::BlockDeepslateBricksHit),
            "BLOCK_DEEPSLATE_BRICKS_PLACE" => Some(SoundSoundEnum::BlockDeepslateBricksPlace),
            "BLOCK_DEEPSLATE_BRICKS_STEP" => Some(SoundSoundEnum::BlockDeepslateBricksStep),
            "BLOCK_DEEPSLATE_FALL" => Some(SoundSoundEnum::BlockDeepslateFall),
            "BLOCK_DEEPSLATE_HIT" => Some(SoundSoundEnum::BlockDeepslateHit),
            "BLOCK_DEEPSLATE_PLACE" => Some(SoundSoundEnum::BlockDeepslatePlace),
            "BLOCK_DEEPSLATE_STEP" => Some(SoundSoundEnum::BlockDeepslateStep),
            "BLOCK_DEEPSLATE_TILES_BREAK" => Some(SoundSoundEnum::BlockDeepslateTilesBreak),
            "BLOCK_DEEPSLATE_TILES_FALL" => Some(SoundSoundEnum::BlockDeepslateTilesFall),
            "BLOCK_DEEPSLATE_TILES_HIT" => Some(SoundSoundEnum::BlockDeepslateTilesHit),
            "BLOCK_DEEPSLATE_TILES_PLACE" => Some(SoundSoundEnum::BlockDeepslateTilesPlace),
            "BLOCK_DEEPSLATE_TILES_STEP" => Some(SoundSoundEnum::BlockDeepslateTilesStep),
            "BLOCK_DISPENSER_DISPENSE" => Some(SoundSoundEnum::BlockDispenserDispense),
            "BLOCK_DISPENSER_FAIL" => Some(SoundSoundEnum::BlockDispenserFail),
            "BLOCK_DISPENSER_LAUNCH" => Some(SoundSoundEnum::BlockDispenserLaunch),
            "BLOCK_DRIPSTONE_BLOCK_BREAK" => Some(SoundSoundEnum::BlockDripstoneBlockBreak),
            "BLOCK_DRIPSTONE_BLOCK_FALL" => Some(SoundSoundEnum::BlockDripstoneBlockFall),
            "BLOCK_DRIPSTONE_BLOCK_HIT" => Some(SoundSoundEnum::BlockDripstoneBlockHit),
            "BLOCK_DRIPSTONE_BLOCK_PLACE" => Some(SoundSoundEnum::BlockDripstoneBlockPlace),
            "BLOCK_DRIPSTONE_BLOCK_STEP" => Some(SoundSoundEnum::BlockDripstoneBlockStep),
            "BLOCK_ENCHANTMENT_TABLE_USE" => Some(SoundSoundEnum::BlockEnchantmentTableUse),
            "BLOCK_ENDER_CHEST_CLOSE" => Some(SoundSoundEnum::BlockEnderChestClose),
            "BLOCK_ENDER_CHEST_OPEN" => Some(SoundSoundEnum::BlockEnderChestOpen),
            "BLOCK_END_GATEWAY_SPAWN" => Some(SoundSoundEnum::BlockEndGatewaySpawn),
            "BLOCK_END_PORTAL_FRAME_FILL" => Some(SoundSoundEnum::BlockEndPortalFrameFill),
            "BLOCK_END_PORTAL_SPAWN" => Some(SoundSoundEnum::BlockEndPortalSpawn),
            "BLOCK_FENCE_GATE_CLOSE" => Some(SoundSoundEnum::BlockFenceGateClose),
            "BLOCK_FENCE_GATE_OPEN" => Some(SoundSoundEnum::BlockFenceGateOpen),
            "BLOCK_FIRE_AMBIENT" => Some(SoundSoundEnum::BlockFireAmbient),
            "BLOCK_FIRE_EXTINGUISH" => Some(SoundSoundEnum::BlockFireExtinguish),
            "BLOCK_FLOWERING_AZALEA_BREAK" => Some(SoundSoundEnum::BlockFloweringAzaleaBreak),
            "BLOCK_FLOWERING_AZALEA_FALL" => Some(SoundSoundEnum::BlockFloweringAzaleaFall),
            "BLOCK_FLOWERING_AZALEA_HIT" => Some(SoundSoundEnum::BlockFloweringAzaleaHit),
            "BLOCK_FLOWERING_AZALEA_PLACE" => Some(SoundSoundEnum::BlockFloweringAzaleaPlace),
            "BLOCK_FLOWERING_AZALEA_STEP" => Some(SoundSoundEnum::BlockFloweringAzaleaStep),
            "BLOCK_FROGLIGHT_BREAK" => Some(SoundSoundEnum::BlockFroglightBreak),
            "BLOCK_FROGLIGHT_FALL" => Some(SoundSoundEnum::BlockFroglightFall),
            "BLOCK_FROGLIGHT_HIT" => Some(SoundSoundEnum::BlockFroglightHit),
            "BLOCK_FROGLIGHT_PLACE" => Some(SoundSoundEnum::BlockFroglightPlace),
            "BLOCK_FROGLIGHT_STEP" => Some(SoundSoundEnum::BlockFroglightStep),
            "BLOCK_FROGSPAWN_BREAK" => Some(SoundSoundEnum::BlockFrogspawnBreak),
            "BLOCK_FROGSPAWN_FALL" => Some(SoundSoundEnum::BlockFrogspawnFall),
            "BLOCK_FROGSPAWN_HATCH" => Some(SoundSoundEnum::BlockFrogspawnHatch),
            "BLOCK_FROGSPAWN_HIT" => Some(SoundSoundEnum::BlockFrogspawnHit),
            "BLOCK_FROGSPAWN_PLACE" => Some(SoundSoundEnum::BlockFrogspawnPlace),
            "BLOCK_FROGSPAWN_STEP" => Some(SoundSoundEnum::BlockFrogspawnStep),
            "BLOCK_FUNGUS_BREAK" => Some(SoundSoundEnum::BlockFungusBreak),
            "BLOCK_FUNGUS_FALL" => Some(SoundSoundEnum::BlockFungusFall),
            "BLOCK_FUNGUS_HIT" => Some(SoundSoundEnum::BlockFungusHit),
            "BLOCK_FUNGUS_PLACE" => Some(SoundSoundEnum::BlockFungusPlace),
            "BLOCK_FUNGUS_STEP" => Some(SoundSoundEnum::BlockFungusStep),
            "BLOCK_FURNACE_FIRE_CRACKLE" => Some(SoundSoundEnum::BlockFurnaceFireCrackle),
            "BLOCK_GILDED_BLACKSTONE_BREAK" => Some(SoundSoundEnum::BlockGildedBlackstoneBreak),
            "BLOCK_GILDED_BLACKSTONE_FALL" => Some(SoundSoundEnum::BlockGildedBlackstoneFall),
            "BLOCK_GILDED_BLACKSTONE_HIT" => Some(SoundSoundEnum::BlockGildedBlackstoneHit),
            "BLOCK_GILDED_BLACKSTONE_PLACE" => Some(SoundSoundEnum::BlockGildedBlackstonePlace),
            "BLOCK_GILDED_BLACKSTONE_STEP" => Some(SoundSoundEnum::BlockGildedBlackstoneStep),
            "BLOCK_GLASS_BREAK" => Some(SoundSoundEnum::BlockGlassBreak),
            "BLOCK_GLASS_FALL" => Some(SoundSoundEnum::BlockGlassFall),
            "BLOCK_GLASS_HIT" => Some(SoundSoundEnum::BlockGlassHit),
            "BLOCK_GLASS_PLACE" => Some(SoundSoundEnum::BlockGlassPlace),
            "BLOCK_GLASS_STEP" => Some(SoundSoundEnum::BlockGlassStep),
            "BLOCK_GRASS_BREAK" => Some(SoundSoundEnum::BlockGrassBreak),
            "BLOCK_GRASS_FALL" => Some(SoundSoundEnum::BlockGrassFall),
            "BLOCK_GRASS_HIT" => Some(SoundSoundEnum::BlockGrassHit),
            "BLOCK_GRASS_PLACE" => Some(SoundSoundEnum::BlockGrassPlace),
            "BLOCK_GRASS_STEP" => Some(SoundSoundEnum::BlockGrassStep),
            "BLOCK_GRAVEL_BREAK" => Some(SoundSoundEnum::BlockGravelBreak),
            "BLOCK_GRAVEL_FALL" => Some(SoundSoundEnum::BlockGravelFall),
            "BLOCK_GRAVEL_HIT" => Some(SoundSoundEnum::BlockGravelHit),
            "BLOCK_GRAVEL_PLACE" => Some(SoundSoundEnum::BlockGravelPlace),
            "BLOCK_GRAVEL_STEP" => Some(SoundSoundEnum::BlockGravelStep),
            "BLOCK_GRINDSTONE_USE" => Some(SoundSoundEnum::BlockGrindstoneUse),
            "BLOCK_GROWING_PLANT_CROP" => Some(SoundSoundEnum::BlockGrowingPlantCrop),
            "BLOCK_HANGING_ROOTS_BREAK" => Some(SoundSoundEnum::BlockHangingRootsBreak),
            "BLOCK_HANGING_ROOTS_FALL" => Some(SoundSoundEnum::BlockHangingRootsFall),
            "BLOCK_HANGING_ROOTS_HIT" => Some(SoundSoundEnum::BlockHangingRootsHit),
            "BLOCK_HANGING_ROOTS_PLACE" => Some(SoundSoundEnum::BlockHangingRootsPlace),
            "BLOCK_HANGING_ROOTS_STEP" => Some(SoundSoundEnum::BlockHangingRootsStep),
            "BLOCK_HANGING_SIGN_BREAK" => Some(SoundSoundEnum::BlockHangingSignBreak),
            "BLOCK_HANGING_SIGN_FALL" => Some(SoundSoundEnum::BlockHangingSignFall),
            "BLOCK_HANGING_SIGN_HIT" => Some(SoundSoundEnum::BlockHangingSignHit),
            "BLOCK_HANGING_SIGN_PLACE" => Some(SoundSoundEnum::BlockHangingSignPlace),
            "BLOCK_HANGING_SIGN_STEP" => Some(SoundSoundEnum::BlockHangingSignStep),
            "BLOCK_HONEY_BLOCK_BREAK" => Some(SoundSoundEnum::BlockHoneyBlockBreak),
            "BLOCK_HONEY_BLOCK_FALL" => Some(SoundSoundEnum::BlockHoneyBlockFall),
            "BLOCK_HONEY_BLOCK_HIT" => Some(SoundSoundEnum::BlockHoneyBlockHit),
            "BLOCK_HONEY_BLOCK_PLACE" => Some(SoundSoundEnum::BlockHoneyBlockPlace),
            "BLOCK_HONEY_BLOCK_SLIDE" => Some(SoundSoundEnum::BlockHoneyBlockSlide),
            "BLOCK_HONEY_BLOCK_STEP" => Some(SoundSoundEnum::BlockHoneyBlockStep),
            "BLOCK_IRON_DOOR_CLOSE" => Some(SoundSoundEnum::BlockIronDoorClose),
            "BLOCK_IRON_DOOR_OPEN" => Some(SoundSoundEnum::BlockIronDoorOpen),
            "BLOCK_IRON_TRAPDOOR_CLOSE" => Some(SoundSoundEnum::BlockIronTrapdoorClose),
            "BLOCK_IRON_TRAPDOOR_OPEN" => Some(SoundSoundEnum::BlockIronTrapdoorOpen),
            "BLOCK_LADDER_BREAK" => Some(SoundSoundEnum::BlockLadderBreak),
            "BLOCK_LADDER_FALL" => Some(SoundSoundEnum::BlockLadderFall),
            "BLOCK_LADDER_HIT" => Some(SoundSoundEnum::BlockLadderHit),
            "BLOCK_LADDER_PLACE" => Some(SoundSoundEnum::BlockLadderPlace),
            "BLOCK_LADDER_STEP" => Some(SoundSoundEnum::BlockLadderStep),
            "BLOCK_LANTERN_BREAK" => Some(SoundSoundEnum::BlockLanternBreak),
            "BLOCK_LANTERN_FALL" => Some(SoundSoundEnum::BlockLanternFall),
            "BLOCK_LANTERN_HIT" => Some(SoundSoundEnum::BlockLanternHit),
            "BLOCK_LANTERN_PLACE" => Some(SoundSoundEnum::BlockLanternPlace),
            "BLOCK_LANTERN_STEP" => Some(SoundSoundEnum::BlockLanternStep),
            "BLOCK_LARGE_AMETHYST_BUD_BREAK" => Some(SoundSoundEnum::BlockLargeAmethystBudBreak),
            "BLOCK_LARGE_AMETHYST_BUD_PLACE" => Some(SoundSoundEnum::BlockLargeAmethystBudPlace),
            "BLOCK_LAVA_AMBIENT" => Some(SoundSoundEnum::BlockLavaAmbient),
            "BLOCK_LAVA_EXTINGUISH" => Some(SoundSoundEnum::BlockLavaExtinguish),
            "BLOCK_LAVA_POP" => Some(SoundSoundEnum::BlockLavaPop),
            "BLOCK_LEVER_CLICK" => Some(SoundSoundEnum::BlockLeverClick),
            "BLOCK_LILY_PAD_PLACE" => Some(SoundSoundEnum::BlockLilyPadPlace),
            "BLOCK_LODESTONE_BREAK" => Some(SoundSoundEnum::BlockLodestoneBreak),
            "BLOCK_LODESTONE_FALL" => Some(SoundSoundEnum::BlockLodestoneFall),
            "BLOCK_LODESTONE_HIT" => Some(SoundSoundEnum::BlockLodestoneHit),
            "BLOCK_LODESTONE_PLACE" => Some(SoundSoundEnum::BlockLodestonePlace),
            "BLOCK_LODESTONE_STEP" => Some(SoundSoundEnum::BlockLodestoneStep),
            "BLOCK_MANGROVE_ROOTS_BREAK" => Some(SoundSoundEnum::BlockMangroveRootsBreak),
            "BLOCK_MANGROVE_ROOTS_FALL" => Some(SoundSoundEnum::BlockMangroveRootsFall),
            "BLOCK_MANGROVE_ROOTS_HIT" => Some(SoundSoundEnum::BlockMangroveRootsHit),
            "BLOCK_MANGROVE_ROOTS_PLACE" => Some(SoundSoundEnum::BlockMangroveRootsPlace),
            "BLOCK_MANGROVE_ROOTS_STEP" => Some(SoundSoundEnum::BlockMangroveRootsStep),
            "BLOCK_MEDIUM_AMETHYST_BUD_BREAK" => Some(SoundSoundEnum::BlockMediumAmethystBudBreak),
            "BLOCK_MEDIUM_AMETHYST_BUD_PLACE" => Some(SoundSoundEnum::BlockMediumAmethystBudPlace),
            "BLOCK_METAL_BREAK" => Some(SoundSoundEnum::BlockMetalBreak),
            "BLOCK_METAL_FALL" => Some(SoundSoundEnum::BlockMetalFall),
            "BLOCK_METAL_HIT" => Some(SoundSoundEnum::BlockMetalHit),
            "BLOCK_METAL_PLACE" => Some(SoundSoundEnum::BlockMetalPlace),
            "BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundSoundEnum::BlockMetalPressurePlateClickOff)
            }
            "BLOCK_METAL_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundSoundEnum::BlockMetalPressurePlateClickOn)
            }
            "BLOCK_METAL_STEP" => Some(SoundSoundEnum::BlockMetalStep),
            "BLOCK_MOSS_BREAK" => Some(SoundSoundEnum::BlockMossBreak),
            "BLOCK_MOSS_CARPET_BREAK" => Some(SoundSoundEnum::BlockMossCarpetBreak),
            "BLOCK_MOSS_CARPET_FALL" => Some(SoundSoundEnum::BlockMossCarpetFall),
            "BLOCK_MOSS_CARPET_HIT" => Some(SoundSoundEnum::BlockMossCarpetHit),
            "BLOCK_MOSS_CARPET_PLACE" => Some(SoundSoundEnum::BlockMossCarpetPlace),
            "BLOCK_MOSS_CARPET_STEP" => Some(SoundSoundEnum::BlockMossCarpetStep),
            "BLOCK_MOSS_FALL" => Some(SoundSoundEnum::BlockMossFall),
            "BLOCK_MOSS_HIT" => Some(SoundSoundEnum::BlockMossHit),
            "BLOCK_MOSS_PLACE" => Some(SoundSoundEnum::BlockMossPlace),
            "BLOCK_MOSS_STEP" => Some(SoundSoundEnum::BlockMossStep),
            "BLOCK_MUDDY_MANGROVE_ROOTS_BREAK" => {
                Some(SoundSoundEnum::BlockMuddyMangroveRootsBreak)
            }
            "BLOCK_MUDDY_MANGROVE_ROOTS_FALL" => Some(SoundSoundEnum::BlockMuddyMangroveRootsFall),
            "BLOCK_MUDDY_MANGROVE_ROOTS_HIT" => Some(SoundSoundEnum::BlockMuddyMangroveRootsHit),
            "BLOCK_MUDDY_MANGROVE_ROOTS_PLACE" => {
                Some(SoundSoundEnum::BlockMuddyMangroveRootsPlace)
            }
            "BLOCK_MUDDY_MANGROVE_ROOTS_STEP" => Some(SoundSoundEnum::BlockMuddyMangroveRootsStep),
            "BLOCK_MUD_BREAK" => Some(SoundSoundEnum::BlockMudBreak),
            "BLOCK_MUD_BRICKS_BREAK" => Some(SoundSoundEnum::BlockMudBricksBreak),
            "BLOCK_MUD_BRICKS_FALL" => Some(SoundSoundEnum::BlockMudBricksFall),
            "BLOCK_MUD_BRICKS_HIT" => Some(SoundSoundEnum::BlockMudBricksHit),
            "BLOCK_MUD_BRICKS_PLACE" => Some(SoundSoundEnum::BlockMudBricksPlace),
            "BLOCK_MUD_BRICKS_STEP" => Some(SoundSoundEnum::BlockMudBricksStep),
            "BLOCK_MUD_FALL" => Some(SoundSoundEnum::BlockMudFall),
            "BLOCK_MUD_HIT" => Some(SoundSoundEnum::BlockMudHit),
            "BLOCK_MUD_PLACE" => Some(SoundSoundEnum::BlockMudPlace),
            "BLOCK_MUD_STEP" => Some(SoundSoundEnum::BlockMudStep),
            "BLOCK_NETHERITE_BLOCK_BREAK" => Some(SoundSoundEnum::BlockNetheriteBlockBreak),
            "BLOCK_NETHERITE_BLOCK_FALL" => Some(SoundSoundEnum::BlockNetheriteBlockFall),
            "BLOCK_NETHERITE_BLOCK_HIT" => Some(SoundSoundEnum::BlockNetheriteBlockHit),
            "BLOCK_NETHERITE_BLOCK_PLACE" => Some(SoundSoundEnum::BlockNetheriteBlockPlace),
            "BLOCK_NETHERITE_BLOCK_STEP" => Some(SoundSoundEnum::BlockNetheriteBlockStep),
            "BLOCK_NETHERRACK_BREAK" => Some(SoundSoundEnum::BlockNetherrackBreak),
            "BLOCK_NETHERRACK_FALL" => Some(SoundSoundEnum::BlockNetherrackFall),
            "BLOCK_NETHERRACK_HIT" => Some(SoundSoundEnum::BlockNetherrackHit),
            "BLOCK_NETHERRACK_PLACE" => Some(SoundSoundEnum::BlockNetherrackPlace),
            "BLOCK_NETHERRACK_STEP" => Some(SoundSoundEnum::BlockNetherrackStep),
            "BLOCK_NETHER_BRICKS_BREAK" => Some(SoundSoundEnum::BlockNetherBricksBreak),
            "BLOCK_NETHER_BRICKS_FALL" => Some(SoundSoundEnum::BlockNetherBricksFall),
            "BLOCK_NETHER_BRICKS_HIT" => Some(SoundSoundEnum::BlockNetherBricksHit),
            "BLOCK_NETHER_BRICKS_PLACE" => Some(SoundSoundEnum::BlockNetherBricksPlace),
            "BLOCK_NETHER_BRICKS_STEP" => Some(SoundSoundEnum::BlockNetherBricksStep),
            "BLOCK_NETHER_GOLD_ORE_BREAK" => Some(SoundSoundEnum::BlockNetherGoldOreBreak),
            "BLOCK_NETHER_GOLD_ORE_FALL" => Some(SoundSoundEnum::BlockNetherGoldOreFall),
            "BLOCK_NETHER_GOLD_ORE_HIT" => Some(SoundSoundEnum::BlockNetherGoldOreHit),
            "BLOCK_NETHER_GOLD_ORE_PLACE" => Some(SoundSoundEnum::BlockNetherGoldOrePlace),
            "BLOCK_NETHER_GOLD_ORE_STEP" => Some(SoundSoundEnum::BlockNetherGoldOreStep),
            "BLOCK_NETHER_ORE_BREAK" => Some(SoundSoundEnum::BlockNetherOreBreak),
            "BLOCK_NETHER_ORE_FALL" => Some(SoundSoundEnum::BlockNetherOreFall),
            "BLOCK_NETHER_ORE_HIT" => Some(SoundSoundEnum::BlockNetherOreHit),
            "BLOCK_NETHER_ORE_PLACE" => Some(SoundSoundEnum::BlockNetherOrePlace),
            "BLOCK_NETHER_ORE_STEP" => Some(SoundSoundEnum::BlockNetherOreStep),
            "BLOCK_NETHER_SPROUTS_BREAK" => Some(SoundSoundEnum::BlockNetherSproutsBreak),
            "BLOCK_NETHER_SPROUTS_FALL" => Some(SoundSoundEnum::BlockNetherSproutsFall),
            "BLOCK_NETHER_SPROUTS_HIT" => Some(SoundSoundEnum::BlockNetherSproutsHit),
            "BLOCK_NETHER_SPROUTS_PLACE" => Some(SoundSoundEnum::BlockNetherSproutsPlace),
            "BLOCK_NETHER_SPROUTS_STEP" => Some(SoundSoundEnum::BlockNetherSproutsStep),
            "BLOCK_NETHER_WART_BREAK" => Some(SoundSoundEnum::BlockNetherWartBreak),
            "BLOCK_NETHER_WOOD_BREAK" => Some(SoundSoundEnum::BlockNetherWoodBreak),
            "BLOCK_NETHER_WOOD_BUTTON_CLICK_OFF" => {
                Some(SoundSoundEnum::BlockNetherWoodButtonClickOff)
            }
            "BLOCK_NETHER_WOOD_BUTTON_CLICK_ON" => {
                Some(SoundSoundEnum::BlockNetherWoodButtonClickOn)
            }
            "BLOCK_NETHER_WOOD_DOOR_CLOSE" => Some(SoundSoundEnum::BlockNetherWoodDoorClose),
            "BLOCK_NETHER_WOOD_DOOR_OPEN" => Some(SoundSoundEnum::BlockNetherWoodDoorOpen),
            "BLOCK_NETHER_WOOD_FALL" => Some(SoundSoundEnum::BlockNetherWoodFall),
            "BLOCK_NETHER_WOOD_FENCE_GATE_CLOSE" => {
                Some(SoundSoundEnum::BlockNetherWoodFenceGateClose)
            }
            "BLOCK_NETHER_WOOD_FENCE_GATE_OPEN" => {
                Some(SoundSoundEnum::BlockNetherWoodFenceGateOpen)
            }
            "BLOCK_NETHER_WOOD_HANGING_SIGN_BREAK" => {
                Some(SoundSoundEnum::BlockNetherWoodHangingSignBreak)
            }
            "BLOCK_NETHER_WOOD_HANGING_SIGN_FALL" => {
                Some(SoundSoundEnum::BlockNetherWoodHangingSignFall)
            }
            "BLOCK_NETHER_WOOD_HANGING_SIGN_HIT" => {
                Some(SoundSoundEnum::BlockNetherWoodHangingSignHit)
            }
            "BLOCK_NETHER_WOOD_HANGING_SIGN_PLACE" => {
                Some(SoundSoundEnum::BlockNetherWoodHangingSignPlace)
            }
            "BLOCK_NETHER_WOOD_HANGING_SIGN_STEP" => {
                Some(SoundSoundEnum::BlockNetherWoodHangingSignStep)
            }
            "BLOCK_NETHER_WOOD_HIT" => Some(SoundSoundEnum::BlockNetherWoodHit),
            "BLOCK_NETHER_WOOD_PLACE" => Some(SoundSoundEnum::BlockNetherWoodPlace),
            "BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundSoundEnum::BlockNetherWoodPressurePlateClickOff)
            }
            "BLOCK_NETHER_WOOD_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundSoundEnum::BlockNetherWoodPressurePlateClickOn)
            }
            "BLOCK_NETHER_WOOD_STEP" => Some(SoundSoundEnum::BlockNetherWoodStep),
            "BLOCK_NETHER_WOOD_TRAPDOOR_CLOSE" => {
                Some(SoundSoundEnum::BlockNetherWoodTrapdoorClose)
            }
            "BLOCK_NETHER_WOOD_TRAPDOOR_OPEN" => Some(SoundSoundEnum::BlockNetherWoodTrapdoorOpen),
            "BLOCK_NOTE_BLOCK_BANJO" => Some(SoundSoundEnum::BlockNoteBlockBanjo),
            "BLOCK_NOTE_BLOCK_BASEDRUM" => Some(SoundSoundEnum::BlockNoteBlockBasedrum),
            "BLOCK_NOTE_BLOCK_BASS" => Some(SoundSoundEnum::BlockNoteBlockBass),
            "BLOCK_NOTE_BLOCK_BELL" => Some(SoundSoundEnum::BlockNoteBlockBell),
            "BLOCK_NOTE_BLOCK_BIT" => Some(SoundSoundEnum::BlockNoteBlockBit),
            "BLOCK_NOTE_BLOCK_CHIME" => Some(SoundSoundEnum::BlockNoteBlockChime),
            "BLOCK_NOTE_BLOCK_COW_BELL" => Some(SoundSoundEnum::BlockNoteBlockCowBell),
            "BLOCK_NOTE_BLOCK_DIDGERIDOO" => Some(SoundSoundEnum::BlockNoteBlockDidgeridoo),
            "BLOCK_NOTE_BLOCK_FLUTE" => Some(SoundSoundEnum::BlockNoteBlockFlute),
            "BLOCK_NOTE_BLOCK_GUITAR" => Some(SoundSoundEnum::BlockNoteBlockGuitar),
            "BLOCK_NOTE_BLOCK_HARP" => Some(SoundSoundEnum::BlockNoteBlockHarp),
            "BLOCK_NOTE_BLOCK_HAT" => Some(SoundSoundEnum::BlockNoteBlockHat),
            "BLOCK_NOTE_BLOCK_IMITATE_CREEPER" => {
                Some(SoundSoundEnum::BlockNoteBlockImitateCreeper)
            }
            "BLOCK_NOTE_BLOCK_IMITATE_ENDER_DRAGON" => {
                Some(SoundSoundEnum::BlockNoteBlockImitateEnderDragon)
            }
            "BLOCK_NOTE_BLOCK_IMITATE_PIGLIN" => Some(SoundSoundEnum::BlockNoteBlockImitatePiglin),
            "BLOCK_NOTE_BLOCK_IMITATE_SKELETON" => {
                Some(SoundSoundEnum::BlockNoteBlockImitateSkeleton)
            }
            "BLOCK_NOTE_BLOCK_IMITATE_WITHER_SKELETON" => {
                Some(SoundSoundEnum::BlockNoteBlockImitateWitherSkeleton)
            }
            "BLOCK_NOTE_BLOCK_IMITATE_ZOMBIE" => Some(SoundSoundEnum::BlockNoteBlockImitateZombie),
            "BLOCK_NOTE_BLOCK_IRON_XYLOPHONE" => Some(SoundSoundEnum::BlockNoteBlockIronXylophone),
            "BLOCK_NOTE_BLOCK_PLING" => Some(SoundSoundEnum::BlockNoteBlockPling),
            "BLOCK_NOTE_BLOCK_SNARE" => Some(SoundSoundEnum::BlockNoteBlockSnare),
            "BLOCK_NOTE_BLOCK_XYLOPHONE" => Some(SoundSoundEnum::BlockNoteBlockXylophone),
            "BLOCK_NYLIUM_BREAK" => Some(SoundSoundEnum::BlockNyliumBreak),
            "BLOCK_NYLIUM_FALL" => Some(SoundSoundEnum::BlockNyliumFall),
            "BLOCK_NYLIUM_HIT" => Some(SoundSoundEnum::BlockNyliumHit),
            "BLOCK_NYLIUM_PLACE" => Some(SoundSoundEnum::BlockNyliumPlace),
            "BLOCK_NYLIUM_STEP" => Some(SoundSoundEnum::BlockNyliumStep),
            "BLOCK_PACKED_MUD_BREAK" => Some(SoundSoundEnum::BlockPackedMudBreak),
            "BLOCK_PACKED_MUD_FALL" => Some(SoundSoundEnum::BlockPackedMudFall),
            "BLOCK_PACKED_MUD_HIT" => Some(SoundSoundEnum::BlockPackedMudHit),
            "BLOCK_PACKED_MUD_PLACE" => Some(SoundSoundEnum::BlockPackedMudPlace),
            "BLOCK_PACKED_MUD_STEP" => Some(SoundSoundEnum::BlockPackedMudStep),
            "BLOCK_PINK_PETALS_BREAK" => Some(SoundSoundEnum::BlockPinkPetalsBreak),
            "BLOCK_PINK_PETALS_FALL" => Some(SoundSoundEnum::BlockPinkPetalsFall),
            "BLOCK_PINK_PETALS_HIT" => Some(SoundSoundEnum::BlockPinkPetalsHit),
            "BLOCK_PINK_PETALS_PLACE" => Some(SoundSoundEnum::BlockPinkPetalsPlace),
            "BLOCK_PINK_PETALS_STEP" => Some(SoundSoundEnum::BlockPinkPetalsStep),
            "BLOCK_PISTON_CONTRACT" => Some(SoundSoundEnum::BlockPistonContract),
            "BLOCK_PISTON_EXTEND" => Some(SoundSoundEnum::BlockPistonExtend),
            "BLOCK_POINTED_DRIPSTONE_BREAK" => Some(SoundSoundEnum::BlockPointedDripstoneBreak),
            "BLOCK_POINTED_DRIPSTONE_DRIP_LAVA" => {
                Some(SoundSoundEnum::BlockPointedDripstoneDripLava)
            }
            "BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON" => {
                Some(SoundSoundEnum::BlockPointedDripstoneDripLavaIntoCauldron)
            }
            "BLOCK_POINTED_DRIPSTONE_DRIP_WATER" => {
                Some(SoundSoundEnum::BlockPointedDripstoneDripWater)
            }
            "BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON" => {
                Some(SoundSoundEnum::BlockPointedDripstoneDripWaterIntoCauldron)
            }
            "BLOCK_POINTED_DRIPSTONE_FALL" => Some(SoundSoundEnum::BlockPointedDripstoneFall),
            "BLOCK_POINTED_DRIPSTONE_HIT" => Some(SoundSoundEnum::BlockPointedDripstoneHit),
            "BLOCK_POINTED_DRIPSTONE_LAND" => Some(SoundSoundEnum::BlockPointedDripstoneLand),
            "BLOCK_POINTED_DRIPSTONE_PLACE" => Some(SoundSoundEnum::BlockPointedDripstonePlace),
            "BLOCK_POINTED_DRIPSTONE_STEP" => Some(SoundSoundEnum::BlockPointedDripstoneStep),
            "BLOCK_POLISHED_DEEPSLATE_BREAK" => Some(SoundSoundEnum::BlockPolishedDeepslateBreak),
            "BLOCK_POLISHED_DEEPSLATE_FALL" => Some(SoundSoundEnum::BlockPolishedDeepslateFall),
            "BLOCK_POLISHED_DEEPSLATE_HIT" => Some(SoundSoundEnum::BlockPolishedDeepslateHit),
            "BLOCK_POLISHED_DEEPSLATE_PLACE" => Some(SoundSoundEnum::BlockPolishedDeepslatePlace),
            "BLOCK_POLISHED_DEEPSLATE_STEP" => Some(SoundSoundEnum::BlockPolishedDeepslateStep),
            "BLOCK_PORTAL_AMBIENT" => Some(SoundSoundEnum::BlockPortalAmbient),
            "BLOCK_PORTAL_TRAVEL" => Some(SoundSoundEnum::BlockPortalTravel),
            "BLOCK_PORTAL_TRIGGER" => Some(SoundSoundEnum::BlockPortalTrigger),
            "BLOCK_POWDER_SNOW_BREAK" => Some(SoundSoundEnum::BlockPowderSnowBreak),
            "BLOCK_POWDER_SNOW_FALL" => Some(SoundSoundEnum::BlockPowderSnowFall),
            "BLOCK_POWDER_SNOW_HIT" => Some(SoundSoundEnum::BlockPowderSnowHit),
            "BLOCK_POWDER_SNOW_PLACE" => Some(SoundSoundEnum::BlockPowderSnowPlace),
            "BLOCK_POWDER_SNOW_STEP" => Some(SoundSoundEnum::BlockPowderSnowStep),
            "BLOCK_PUMPKIN_CARVE" => Some(SoundSoundEnum::BlockPumpkinCarve),
            "BLOCK_REDSTONE_TORCH_BURNOUT" => Some(SoundSoundEnum::BlockRedstoneTorchBurnout),
            "BLOCK_RESPAWN_ANCHOR_AMBIENT" => Some(SoundSoundEnum::BlockRespawnAnchorAmbient),
            "BLOCK_RESPAWN_ANCHOR_CHARGE" => Some(SoundSoundEnum::BlockRespawnAnchorCharge),
            "BLOCK_RESPAWN_ANCHOR_DEPLETE" => Some(SoundSoundEnum::BlockRespawnAnchorDeplete),
            "BLOCK_RESPAWN_ANCHOR_SET_SPAWN" => Some(SoundSoundEnum::BlockRespawnAnchorSetSpawn),
            "BLOCK_ROOTED_DIRT_BREAK" => Some(SoundSoundEnum::BlockRootedDirtBreak),
            "BLOCK_ROOTED_DIRT_FALL" => Some(SoundSoundEnum::BlockRootedDirtFall),
            "BLOCK_ROOTED_DIRT_HIT" => Some(SoundSoundEnum::BlockRootedDirtHit),
            "BLOCK_ROOTED_DIRT_PLACE" => Some(SoundSoundEnum::BlockRootedDirtPlace),
            "BLOCK_ROOTED_DIRT_STEP" => Some(SoundSoundEnum::BlockRootedDirtStep),
            "BLOCK_ROOTS_BREAK" => Some(SoundSoundEnum::BlockRootsBreak),
            "BLOCK_ROOTS_FALL" => Some(SoundSoundEnum::BlockRootsFall),
            "BLOCK_ROOTS_HIT" => Some(SoundSoundEnum::BlockRootsHit),
            "BLOCK_ROOTS_PLACE" => Some(SoundSoundEnum::BlockRootsPlace),
            "BLOCK_ROOTS_STEP" => Some(SoundSoundEnum::BlockRootsStep),
            "BLOCK_SAND_BREAK" => Some(SoundSoundEnum::BlockSandBreak),
            "BLOCK_SAND_FALL" => Some(SoundSoundEnum::BlockSandFall),
            "BLOCK_SAND_HIT" => Some(SoundSoundEnum::BlockSandHit),
            "BLOCK_SAND_PLACE" => Some(SoundSoundEnum::BlockSandPlace),
            "BLOCK_SAND_STEP" => Some(SoundSoundEnum::BlockSandStep),
            "BLOCK_SCAFFOLDING_BREAK" => Some(SoundSoundEnum::BlockScaffoldingBreak),
            "BLOCK_SCAFFOLDING_FALL" => Some(SoundSoundEnum::BlockScaffoldingFall),
            "BLOCK_SCAFFOLDING_HIT" => Some(SoundSoundEnum::BlockScaffoldingHit),
            "BLOCK_SCAFFOLDING_PLACE" => Some(SoundSoundEnum::BlockScaffoldingPlace),
            "BLOCK_SCAFFOLDING_STEP" => Some(SoundSoundEnum::BlockScaffoldingStep),
            "BLOCK_SCULK_BREAK" => Some(SoundSoundEnum::BlockSculkBreak),
            "BLOCK_SCULK_CATALYST_BLOOM" => Some(SoundSoundEnum::BlockSculkCatalystBloom),
            "BLOCK_SCULK_CATALYST_BREAK" => Some(SoundSoundEnum::BlockSculkCatalystBreak),
            "BLOCK_SCULK_CATALYST_FALL" => Some(SoundSoundEnum::BlockSculkCatalystFall),
            "BLOCK_SCULK_CATALYST_HIT" => Some(SoundSoundEnum::BlockSculkCatalystHit),
            "BLOCK_SCULK_CATALYST_PLACE" => Some(SoundSoundEnum::BlockSculkCatalystPlace),
            "BLOCK_SCULK_CATALYST_STEP" => Some(SoundSoundEnum::BlockSculkCatalystStep),
            "BLOCK_SCULK_CHARGE" => Some(SoundSoundEnum::BlockSculkCharge),
            "BLOCK_SCULK_FALL" => Some(SoundSoundEnum::BlockSculkFall),
            "BLOCK_SCULK_HIT" => Some(SoundSoundEnum::BlockSculkHit),
            "BLOCK_SCULK_PLACE" => Some(SoundSoundEnum::BlockSculkPlace),
            "BLOCK_SCULK_SENSOR_BREAK" => Some(SoundSoundEnum::BlockSculkSensorBreak),
            "BLOCK_SCULK_SENSOR_CLICKING" => Some(SoundSoundEnum::BlockSculkSensorClicking),
            "BLOCK_SCULK_SENSOR_CLICKING_STOP" => {
                Some(SoundSoundEnum::BlockSculkSensorClickingStop)
            }
            "BLOCK_SCULK_SENSOR_FALL" => Some(SoundSoundEnum::BlockSculkSensorFall),
            "BLOCK_SCULK_SENSOR_HIT" => Some(SoundSoundEnum::BlockSculkSensorHit),
            "BLOCK_SCULK_SENSOR_PLACE" => Some(SoundSoundEnum::BlockSculkSensorPlace),
            "BLOCK_SCULK_SENSOR_STEP" => Some(SoundSoundEnum::BlockSculkSensorStep),
            "BLOCK_SCULK_SHRIEKER_BREAK" => Some(SoundSoundEnum::BlockSculkShriekerBreak),
            "BLOCK_SCULK_SHRIEKER_FALL" => Some(SoundSoundEnum::BlockSculkShriekerFall),
            "BLOCK_SCULK_SHRIEKER_HIT" => Some(SoundSoundEnum::BlockSculkShriekerHit),
            "BLOCK_SCULK_SHRIEKER_PLACE" => Some(SoundSoundEnum::BlockSculkShriekerPlace),
            "BLOCK_SCULK_SHRIEKER_SHRIEK" => Some(SoundSoundEnum::BlockSculkShriekerShriek),
            "BLOCK_SCULK_SHRIEKER_STEP" => Some(SoundSoundEnum::BlockSculkShriekerStep),
            "BLOCK_SCULK_SPREAD" => Some(SoundSoundEnum::BlockSculkSpread),
            "BLOCK_SCULK_STEP" => Some(SoundSoundEnum::BlockSculkStep),
            "BLOCK_SCULK_VEIN_BREAK" => Some(SoundSoundEnum::BlockSculkVeinBreak),
            "BLOCK_SCULK_VEIN_FALL" => Some(SoundSoundEnum::BlockSculkVeinFall),
            "BLOCK_SCULK_VEIN_HIT" => Some(SoundSoundEnum::BlockSculkVeinHit),
            "BLOCK_SCULK_VEIN_PLACE" => Some(SoundSoundEnum::BlockSculkVeinPlace),
            "BLOCK_SCULK_VEIN_STEP" => Some(SoundSoundEnum::BlockSculkVeinStep),
            "BLOCK_SHROOMLIGHT_BREAK" => Some(SoundSoundEnum::BlockShroomlightBreak),
            "BLOCK_SHROOMLIGHT_FALL" => Some(SoundSoundEnum::BlockShroomlightFall),
            "BLOCK_SHROOMLIGHT_HIT" => Some(SoundSoundEnum::BlockShroomlightHit),
            "BLOCK_SHROOMLIGHT_PLACE" => Some(SoundSoundEnum::BlockShroomlightPlace),
            "BLOCK_SHROOMLIGHT_STEP" => Some(SoundSoundEnum::BlockShroomlightStep),
            "BLOCK_SHULKER_BOX_CLOSE" => Some(SoundSoundEnum::BlockShulkerBoxClose),
            "BLOCK_SHULKER_BOX_OPEN" => Some(SoundSoundEnum::BlockShulkerBoxOpen),
            "BLOCK_SIGN_WAXED_INTERACT_FAIL" => Some(SoundSoundEnum::BlockSignWaxedInteractFail),
            "BLOCK_SLIME_BLOCK_BREAK" => Some(SoundSoundEnum::BlockSlimeBlockBreak),
            "BLOCK_SLIME_BLOCK_FALL" => Some(SoundSoundEnum::BlockSlimeBlockFall),
            "BLOCK_SLIME_BLOCK_HIT" => Some(SoundSoundEnum::BlockSlimeBlockHit),
            "BLOCK_SLIME_BLOCK_PLACE" => Some(SoundSoundEnum::BlockSlimeBlockPlace),
            "BLOCK_SLIME_BLOCK_STEP" => Some(SoundSoundEnum::BlockSlimeBlockStep),
            "BLOCK_SMALL_AMETHYST_BUD_BREAK" => Some(SoundSoundEnum::BlockSmallAmethystBudBreak),
            "BLOCK_SMALL_AMETHYST_BUD_PLACE" => Some(SoundSoundEnum::BlockSmallAmethystBudPlace),
            "BLOCK_SMALL_DRIPLEAF_BREAK" => Some(SoundSoundEnum::BlockSmallDripleafBreak),
            "BLOCK_SMALL_DRIPLEAF_FALL" => Some(SoundSoundEnum::BlockSmallDripleafFall),
            "BLOCK_SMALL_DRIPLEAF_HIT" => Some(SoundSoundEnum::BlockSmallDripleafHit),
            "BLOCK_SMALL_DRIPLEAF_PLACE" => Some(SoundSoundEnum::BlockSmallDripleafPlace),
            "BLOCK_SMALL_DRIPLEAF_STEP" => Some(SoundSoundEnum::BlockSmallDripleafStep),
            "BLOCK_SMITHING_TABLE_USE" => Some(SoundSoundEnum::BlockSmithingTableUse),
            "BLOCK_SMOKER_SMOKE" => Some(SoundSoundEnum::BlockSmokerSmoke),
            "BLOCK_SNIFFER_EGG_CRACK" => Some(SoundSoundEnum::BlockSnifferEggCrack),
            "BLOCK_SNIFFER_EGG_HATCH" => Some(SoundSoundEnum::BlockSnifferEggHatch),
            "BLOCK_SNIFFER_EGG_PLOP" => Some(SoundSoundEnum::BlockSnifferEggPlop),
            "BLOCK_SNOW_BREAK" => Some(SoundSoundEnum::BlockSnowBreak),
            "BLOCK_SNOW_FALL" => Some(SoundSoundEnum::BlockSnowFall),
            "BLOCK_SNOW_HIT" => Some(SoundSoundEnum::BlockSnowHit),
            "BLOCK_SNOW_PLACE" => Some(SoundSoundEnum::BlockSnowPlace),
            "BLOCK_SNOW_STEP" => Some(SoundSoundEnum::BlockSnowStep),
            "BLOCK_SOUL_SAND_BREAK" => Some(SoundSoundEnum::BlockSoulSandBreak),
            "BLOCK_SOUL_SAND_FALL" => Some(SoundSoundEnum::BlockSoulSandFall),
            "BLOCK_SOUL_SAND_HIT" => Some(SoundSoundEnum::BlockSoulSandHit),
            "BLOCK_SOUL_SAND_PLACE" => Some(SoundSoundEnum::BlockSoulSandPlace),
            "BLOCK_SOUL_SAND_STEP" => Some(SoundSoundEnum::BlockSoulSandStep),
            "BLOCK_SOUL_SOIL_BREAK" => Some(SoundSoundEnum::BlockSoulSoilBreak),
            "BLOCK_SOUL_SOIL_FALL" => Some(SoundSoundEnum::BlockSoulSoilFall),
            "BLOCK_SOUL_SOIL_HIT" => Some(SoundSoundEnum::BlockSoulSoilHit),
            "BLOCK_SOUL_SOIL_PLACE" => Some(SoundSoundEnum::BlockSoulSoilPlace),
            "BLOCK_SOUL_SOIL_STEP" => Some(SoundSoundEnum::BlockSoulSoilStep),
            "BLOCK_SPORE_BLOSSOM_BREAK" => Some(SoundSoundEnum::BlockSporeBlossomBreak),
            "BLOCK_SPORE_BLOSSOM_FALL" => Some(SoundSoundEnum::BlockSporeBlossomFall),
            "BLOCK_SPORE_BLOSSOM_HIT" => Some(SoundSoundEnum::BlockSporeBlossomHit),
            "BLOCK_SPORE_BLOSSOM_PLACE" => Some(SoundSoundEnum::BlockSporeBlossomPlace),
            "BLOCK_SPORE_BLOSSOM_STEP" => Some(SoundSoundEnum::BlockSporeBlossomStep),
            "BLOCK_STEM_BREAK" => Some(SoundSoundEnum::BlockStemBreak),
            "BLOCK_STEM_FALL" => Some(SoundSoundEnum::BlockStemFall),
            "BLOCK_STEM_HIT" => Some(SoundSoundEnum::BlockStemHit),
            "BLOCK_STEM_PLACE" => Some(SoundSoundEnum::BlockStemPlace),
            "BLOCK_STEM_STEP" => Some(SoundSoundEnum::BlockStemStep),
            "BLOCK_STONE_BREAK" => Some(SoundSoundEnum::BlockStoneBreak),
            "BLOCK_STONE_BUTTON_CLICK_OFF" => Some(SoundSoundEnum::BlockStoneButtonClickOff),
            "BLOCK_STONE_BUTTON_CLICK_ON" => Some(SoundSoundEnum::BlockStoneButtonClickOn),
            "BLOCK_STONE_FALL" => Some(SoundSoundEnum::BlockStoneFall),
            "BLOCK_STONE_HIT" => Some(SoundSoundEnum::BlockStoneHit),
            "BLOCK_STONE_PLACE" => Some(SoundSoundEnum::BlockStonePlace),
            "BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundSoundEnum::BlockStonePressurePlateClickOff)
            }
            "BLOCK_STONE_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundSoundEnum::BlockStonePressurePlateClickOn)
            }
            "BLOCK_STONE_STEP" => Some(SoundSoundEnum::BlockStoneStep),
            "BLOCK_SUSPICIOUS_GRAVEL_BREAK" => Some(SoundSoundEnum::BlockSuspiciousGravelBreak),
            "BLOCK_SUSPICIOUS_GRAVEL_FALL" => Some(SoundSoundEnum::BlockSuspiciousGravelFall),
            "BLOCK_SUSPICIOUS_GRAVEL_HIT" => Some(SoundSoundEnum::BlockSuspiciousGravelHit),
            "BLOCK_SUSPICIOUS_GRAVEL_PLACE" => Some(SoundSoundEnum::BlockSuspiciousGravelPlace),
            "BLOCK_SUSPICIOUS_GRAVEL_STEP" => Some(SoundSoundEnum::BlockSuspiciousGravelStep),
            "BLOCK_SUSPICIOUS_SAND_BREAK" => Some(SoundSoundEnum::BlockSuspiciousSandBreak),
            "BLOCK_SUSPICIOUS_SAND_FALL" => Some(SoundSoundEnum::BlockSuspiciousSandFall),
            "BLOCK_SUSPICIOUS_SAND_HIT" => Some(SoundSoundEnum::BlockSuspiciousSandHit),
            "BLOCK_SUSPICIOUS_SAND_PLACE" => Some(SoundSoundEnum::BlockSuspiciousSandPlace),
            "BLOCK_SUSPICIOUS_SAND_STEP" => Some(SoundSoundEnum::BlockSuspiciousSandStep),
            "BLOCK_SWEET_BERRY_BUSH_BREAK" => Some(SoundSoundEnum::BlockSweetBerryBushBreak),
            "BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES" => {
                Some(SoundSoundEnum::BlockSweetBerryBushPickBerries)
            }
            "BLOCK_SWEET_BERRY_BUSH_PLACE" => Some(SoundSoundEnum::BlockSweetBerryBushPlace),
            "BLOCK_TRIPWIRE_ATTACH" => Some(SoundSoundEnum::BlockTripwireAttach),
            "BLOCK_TRIPWIRE_CLICK_OFF" => Some(SoundSoundEnum::BlockTripwireClickOff),
            "BLOCK_TRIPWIRE_CLICK_ON" => Some(SoundSoundEnum::BlockTripwireClickOn),
            "BLOCK_TRIPWIRE_DETACH" => Some(SoundSoundEnum::BlockTripwireDetach),
            "BLOCK_TUFF_BREAK" => Some(SoundSoundEnum::BlockTuffBreak),
            "BLOCK_TUFF_FALL" => Some(SoundSoundEnum::BlockTuffFall),
            "BLOCK_TUFF_HIT" => Some(SoundSoundEnum::BlockTuffHit),
            "BLOCK_TUFF_PLACE" => Some(SoundSoundEnum::BlockTuffPlace),
            "BLOCK_TUFF_STEP" => Some(SoundSoundEnum::BlockTuffStep),
            "BLOCK_VINE_BREAK" => Some(SoundSoundEnum::BlockVineBreak),
            "BLOCK_VINE_FALL" => Some(SoundSoundEnum::BlockVineFall),
            "BLOCK_VINE_HIT" => Some(SoundSoundEnum::BlockVineHit),
            "BLOCK_VINE_PLACE" => Some(SoundSoundEnum::BlockVinePlace),
            "BLOCK_VINE_STEP" => Some(SoundSoundEnum::BlockVineStep),
            "BLOCK_WART_BLOCK_BREAK" => Some(SoundSoundEnum::BlockWartBlockBreak),
            "BLOCK_WART_BLOCK_FALL" => Some(SoundSoundEnum::BlockWartBlockFall),
            "BLOCK_WART_BLOCK_HIT" => Some(SoundSoundEnum::BlockWartBlockHit),
            "BLOCK_WART_BLOCK_PLACE" => Some(SoundSoundEnum::BlockWartBlockPlace),
            "BLOCK_WART_BLOCK_STEP" => Some(SoundSoundEnum::BlockWartBlockStep),
            "BLOCK_WATER_AMBIENT" => Some(SoundSoundEnum::BlockWaterAmbient),
            "BLOCK_WEEPING_VINES_BREAK" => Some(SoundSoundEnum::BlockWeepingVinesBreak),
            "BLOCK_WEEPING_VINES_FALL" => Some(SoundSoundEnum::BlockWeepingVinesFall),
            "BLOCK_WEEPING_VINES_HIT" => Some(SoundSoundEnum::BlockWeepingVinesHit),
            "BLOCK_WEEPING_VINES_PLACE" => Some(SoundSoundEnum::BlockWeepingVinesPlace),
            "BLOCK_WEEPING_VINES_STEP" => Some(SoundSoundEnum::BlockWeepingVinesStep),
            "BLOCK_WET_GRASS_BREAK" => Some(SoundSoundEnum::BlockWetGrassBreak),
            "BLOCK_WET_GRASS_FALL" => Some(SoundSoundEnum::BlockWetGrassFall),
            "BLOCK_WET_GRASS_HIT" => Some(SoundSoundEnum::BlockWetGrassHit),
            "BLOCK_WET_GRASS_PLACE" => Some(SoundSoundEnum::BlockWetGrassPlace),
            "BLOCK_WET_GRASS_STEP" => Some(SoundSoundEnum::BlockWetGrassStep),
            "BLOCK_WOODEN_BUTTON_CLICK_OFF" => Some(SoundSoundEnum::BlockWoodenButtonClickOff),
            "BLOCK_WOODEN_BUTTON_CLICK_ON" => Some(SoundSoundEnum::BlockWoodenButtonClickOn),
            "BLOCK_WOODEN_DOOR_CLOSE" => Some(SoundSoundEnum::BlockWoodenDoorClose),
            "BLOCK_WOODEN_DOOR_OPEN" => Some(SoundSoundEnum::BlockWoodenDoorOpen),
            "BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF" => {
                Some(SoundSoundEnum::BlockWoodenPressurePlateClickOff)
            }
            "BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON" => {
                Some(SoundSoundEnum::BlockWoodenPressurePlateClickOn)
            }
            "BLOCK_WOODEN_TRAPDOOR_CLOSE" => Some(SoundSoundEnum::BlockWoodenTrapdoorClose),
            "BLOCK_WOODEN_TRAPDOOR_OPEN" => Some(SoundSoundEnum::BlockWoodenTrapdoorOpen),
            "BLOCK_WOOD_BREAK" => Some(SoundSoundEnum::BlockWoodBreak),
            "BLOCK_WOOD_FALL" => Some(SoundSoundEnum::BlockWoodFall),
            "BLOCK_WOOD_HIT" => Some(SoundSoundEnum::BlockWoodHit),
            "BLOCK_WOOD_PLACE" => Some(SoundSoundEnum::BlockWoodPlace),
            "BLOCK_WOOD_STEP" => Some(SoundSoundEnum::BlockWoodStep),
            "BLOCK_WOOL_BREAK" => Some(SoundSoundEnum::BlockWoolBreak),
            "BLOCK_WOOL_FALL" => Some(SoundSoundEnum::BlockWoolFall),
            "BLOCK_WOOL_HIT" => Some(SoundSoundEnum::BlockWoolHit),
            "BLOCK_WOOL_PLACE" => Some(SoundSoundEnum::BlockWoolPlace),
            "BLOCK_WOOL_STEP" => Some(SoundSoundEnum::BlockWoolStep),
            "ENCHANT_THORNS_HIT" => Some(SoundSoundEnum::EnchantThornsHit),
            "ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM" => {
                Some(SoundSoundEnum::EntityAllayAmbientWithoutItem)
            }
            "ENTITY_ALLAY_AMBIENT_WITH_ITEM" => Some(SoundSoundEnum::EntityAllayAmbientWithItem),
            "ENTITY_ALLAY_DEATH" => Some(SoundSoundEnum::EntityAllayDeath),
            "ENTITY_ALLAY_HURT" => Some(SoundSoundEnum::EntityAllayHurt),
            "ENTITY_ALLAY_ITEM_GIVEN" => Some(SoundSoundEnum::EntityAllayItemGiven),
            "ENTITY_ALLAY_ITEM_TAKEN" => Some(SoundSoundEnum::EntityAllayItemTaken),
            "ENTITY_ALLAY_ITEM_THROWN" => Some(SoundSoundEnum::EntityAllayItemThrown),
            "ENTITY_ARMOR_STAND_BREAK" => Some(SoundSoundEnum::EntityArmorStandBreak),
            "ENTITY_ARMOR_STAND_FALL" => Some(SoundSoundEnum::EntityArmorStandFall),
            "ENTITY_ARMOR_STAND_HIT" => Some(SoundSoundEnum::EntityArmorStandHit),
            "ENTITY_ARMOR_STAND_PLACE" => Some(SoundSoundEnum::EntityArmorStandPlace),
            "ENTITY_ARROW_HIT" => Some(SoundSoundEnum::EntityArrowHit),
            "ENTITY_ARROW_HIT_PLAYER" => Some(SoundSoundEnum::EntityArrowHitPlayer),
            "ENTITY_ARROW_SHOOT" => Some(SoundSoundEnum::EntityArrowShoot),
            "ENTITY_AXOLOTL_ATTACK" => Some(SoundSoundEnum::EntityAxolotlAttack),
            "ENTITY_AXOLOTL_DEATH" => Some(SoundSoundEnum::EntityAxolotlDeath),
            "ENTITY_AXOLOTL_HURT" => Some(SoundSoundEnum::EntityAxolotlHurt),
            "ENTITY_AXOLOTL_IDLE_AIR" => Some(SoundSoundEnum::EntityAxolotlIdleAir),
            "ENTITY_AXOLOTL_IDLE_WATER" => Some(SoundSoundEnum::EntityAxolotlIdleWater),
            "ENTITY_AXOLOTL_SPLASH" => Some(SoundSoundEnum::EntityAxolotlSplash),
            "ENTITY_AXOLOTL_SWIM" => Some(SoundSoundEnum::EntityAxolotlSwim),
            "ENTITY_BAT_AMBIENT" => Some(SoundSoundEnum::EntityBatAmbient),
            "ENTITY_BAT_DEATH" => Some(SoundSoundEnum::EntityBatDeath),
            "ENTITY_BAT_HURT" => Some(SoundSoundEnum::EntityBatHurt),
            "ENTITY_BAT_LOOP" => Some(SoundSoundEnum::EntityBatLoop),
            "ENTITY_BAT_TAKEOFF" => Some(SoundSoundEnum::EntityBatTakeoff),
            "ENTITY_BEE_DEATH" => Some(SoundSoundEnum::EntityBeeDeath),
            "ENTITY_BEE_HURT" => Some(SoundSoundEnum::EntityBeeHurt),
            "ENTITY_BEE_LOOP" => Some(SoundSoundEnum::EntityBeeLoop),
            "ENTITY_BEE_LOOP_AGGRESSIVE" => Some(SoundSoundEnum::EntityBeeLoopAggressive),
            "ENTITY_BEE_POLLINATE" => Some(SoundSoundEnum::EntityBeePollinate),
            "ENTITY_BEE_STING" => Some(SoundSoundEnum::EntityBeeSting),
            "ENTITY_BLAZE_AMBIENT" => Some(SoundSoundEnum::EntityBlazeAmbient),
            "ENTITY_BLAZE_BURN" => Some(SoundSoundEnum::EntityBlazeBurn),
            "ENTITY_BLAZE_DEATH" => Some(SoundSoundEnum::EntityBlazeDeath),
            "ENTITY_BLAZE_HURT" => Some(SoundSoundEnum::EntityBlazeHurt),
            "ENTITY_BLAZE_SHOOT" => Some(SoundSoundEnum::EntityBlazeShoot),
            "ENTITY_BOAT_PADDLE_LAND" => Some(SoundSoundEnum::EntityBoatPaddleLand),
            "ENTITY_BOAT_PADDLE_WATER" => Some(SoundSoundEnum::EntityBoatPaddleWater),
            "ENTITY_CAMEL_AMBIENT" => Some(SoundSoundEnum::EntityCamelAmbient),
            "ENTITY_CAMEL_DASH" => Some(SoundSoundEnum::EntityCamelDash),
            "ENTITY_CAMEL_DASH_READY" => Some(SoundSoundEnum::EntityCamelDashReady),
            "ENTITY_CAMEL_DEATH" => Some(SoundSoundEnum::EntityCamelDeath),
            "ENTITY_CAMEL_EAT" => Some(SoundSoundEnum::EntityCamelEat),
            "ENTITY_CAMEL_HURT" => Some(SoundSoundEnum::EntityCamelHurt),
            "ENTITY_CAMEL_SADDLE" => Some(SoundSoundEnum::EntityCamelSaddle),
            "ENTITY_CAMEL_SIT" => Some(SoundSoundEnum::EntityCamelSit),
            "ENTITY_CAMEL_STAND" => Some(SoundSoundEnum::EntityCamelStand),
            "ENTITY_CAMEL_STEP" => Some(SoundSoundEnum::EntityCamelStep),
            "ENTITY_CAMEL_STEP_SAND" => Some(SoundSoundEnum::EntityCamelStepSand),
            "ENTITY_CAT_AMBIENT" => Some(SoundSoundEnum::EntityCatAmbient),
            "ENTITY_CAT_BEG_FOR_FOOD" => Some(SoundSoundEnum::EntityCatBegForFood),
            "ENTITY_CAT_DEATH" => Some(SoundSoundEnum::EntityCatDeath),
            "ENTITY_CAT_EAT" => Some(SoundSoundEnum::EntityCatEat),
            "ENTITY_CAT_HISS" => Some(SoundSoundEnum::EntityCatHiss),
            "ENTITY_CAT_HURT" => Some(SoundSoundEnum::EntityCatHurt),
            "ENTITY_CAT_PURR" => Some(SoundSoundEnum::EntityCatPurr),
            "ENTITY_CAT_PURREOW" => Some(SoundSoundEnum::EntityCatPurreow),
            "ENTITY_CAT_STRAY_AMBIENT" => Some(SoundSoundEnum::EntityCatStrayAmbient),
            "ENTITY_CHICKEN_AMBIENT" => Some(SoundSoundEnum::EntityChickenAmbient),
            "ENTITY_CHICKEN_DEATH" => Some(SoundSoundEnum::EntityChickenDeath),
            "ENTITY_CHICKEN_EGG" => Some(SoundSoundEnum::EntityChickenEgg),
            "ENTITY_CHICKEN_HURT" => Some(SoundSoundEnum::EntityChickenHurt),
            "ENTITY_CHICKEN_STEP" => Some(SoundSoundEnum::EntityChickenStep),
            "ENTITY_COD_AMBIENT" => Some(SoundSoundEnum::EntityCodAmbient),
            "ENTITY_COD_DEATH" => Some(SoundSoundEnum::EntityCodDeath),
            "ENTITY_COD_FLOP" => Some(SoundSoundEnum::EntityCodFlop),
            "ENTITY_COD_HURT" => Some(SoundSoundEnum::EntityCodHurt),
            "ENTITY_COW_AMBIENT" => Some(SoundSoundEnum::EntityCowAmbient),
            "ENTITY_COW_DEATH" => Some(SoundSoundEnum::EntityCowDeath),
            "ENTITY_COW_HURT" => Some(SoundSoundEnum::EntityCowHurt),
            "ENTITY_COW_MILK" => Some(SoundSoundEnum::EntityCowMilk),
            "ENTITY_COW_STEP" => Some(SoundSoundEnum::EntityCowStep),
            "ENTITY_CREEPER_DEATH" => Some(SoundSoundEnum::EntityCreeperDeath),
            "ENTITY_CREEPER_HURT" => Some(SoundSoundEnum::EntityCreeperHurt),
            "ENTITY_CREEPER_PRIMED" => Some(SoundSoundEnum::EntityCreeperPrimed),
            "ENTITY_DOLPHIN_AMBIENT" => Some(SoundSoundEnum::EntityDolphinAmbient),
            "ENTITY_DOLPHIN_AMBIENT_WATER" => Some(SoundSoundEnum::EntityDolphinAmbientWater),
            "ENTITY_DOLPHIN_ATTACK" => Some(SoundSoundEnum::EntityDolphinAttack),
            "ENTITY_DOLPHIN_DEATH" => Some(SoundSoundEnum::EntityDolphinDeath),
            "ENTITY_DOLPHIN_EAT" => Some(SoundSoundEnum::EntityDolphinEat),
            "ENTITY_DOLPHIN_HURT" => Some(SoundSoundEnum::EntityDolphinHurt),
            "ENTITY_DOLPHIN_JUMP" => Some(SoundSoundEnum::EntityDolphinJump),
            "ENTITY_DOLPHIN_PLAY" => Some(SoundSoundEnum::EntityDolphinPlay),
            "ENTITY_DOLPHIN_SPLASH" => Some(SoundSoundEnum::EntityDolphinSplash),
            "ENTITY_DOLPHIN_SWIM" => Some(SoundSoundEnum::EntityDolphinSwim),
            "ENTITY_DONKEY_AMBIENT" => Some(SoundSoundEnum::EntityDonkeyAmbient),
            "ENTITY_DONKEY_ANGRY" => Some(SoundSoundEnum::EntityDonkeyAngry),
            "ENTITY_DONKEY_CHEST" => Some(SoundSoundEnum::EntityDonkeyChest),
            "ENTITY_DONKEY_DEATH" => Some(SoundSoundEnum::EntityDonkeyDeath),
            "ENTITY_DONKEY_EAT" => Some(SoundSoundEnum::EntityDonkeyEat),
            "ENTITY_DONKEY_HURT" => Some(SoundSoundEnum::EntityDonkeyHurt),
            "ENTITY_DRAGON_FIREBALL_EXPLODE" => Some(SoundSoundEnum::EntityDragonFireballExplode),
            "ENTITY_DROWNED_AMBIENT" => Some(SoundSoundEnum::EntityDrownedAmbient),
            "ENTITY_DROWNED_AMBIENT_WATER" => Some(SoundSoundEnum::EntityDrownedAmbientWater),
            "ENTITY_DROWNED_DEATH" => Some(SoundSoundEnum::EntityDrownedDeath),
            "ENTITY_DROWNED_DEATH_WATER" => Some(SoundSoundEnum::EntityDrownedDeathWater),
            "ENTITY_DROWNED_HURT" => Some(SoundSoundEnum::EntityDrownedHurt),
            "ENTITY_DROWNED_HURT_WATER" => Some(SoundSoundEnum::EntityDrownedHurtWater),
            "ENTITY_DROWNED_SHOOT" => Some(SoundSoundEnum::EntityDrownedShoot),
            "ENTITY_DROWNED_STEP" => Some(SoundSoundEnum::EntityDrownedStep),
            "ENTITY_DROWNED_SWIM" => Some(SoundSoundEnum::EntityDrownedSwim),
            "ENTITY_EGG_THROW" => Some(SoundSoundEnum::EntityEggThrow),
            "ENTITY_ELDER_GUARDIAN_AMBIENT" => Some(SoundSoundEnum::EntityElderGuardianAmbient),
            "ENTITY_ELDER_GUARDIAN_AMBIENT_LAND" => {
                Some(SoundSoundEnum::EntityElderGuardianAmbientLand)
            }
            "ENTITY_ELDER_GUARDIAN_CURSE" => Some(SoundSoundEnum::EntityElderGuardianCurse),
            "ENTITY_ELDER_GUARDIAN_DEATH" => Some(SoundSoundEnum::EntityElderGuardianDeath),
            "ENTITY_ELDER_GUARDIAN_DEATH_LAND" => {
                Some(SoundSoundEnum::EntityElderGuardianDeathLand)
            }
            "ENTITY_ELDER_GUARDIAN_FLOP" => Some(SoundSoundEnum::EntityElderGuardianFlop),
            "ENTITY_ELDER_GUARDIAN_HURT" => Some(SoundSoundEnum::EntityElderGuardianHurt),
            "ENTITY_ELDER_GUARDIAN_HURT_LAND" => Some(SoundSoundEnum::EntityElderGuardianHurtLand),
            "ENTITY_ENDERMAN_AMBIENT" => Some(SoundSoundEnum::EntityEndermanAmbient),
            "ENTITY_ENDERMAN_DEATH" => Some(SoundSoundEnum::EntityEndermanDeath),
            "ENTITY_ENDERMAN_HURT" => Some(SoundSoundEnum::EntityEndermanHurt),
            "ENTITY_ENDERMAN_SCREAM" => Some(SoundSoundEnum::EntityEndermanScream),
            "ENTITY_ENDERMAN_STARE" => Some(SoundSoundEnum::EntityEndermanStare),
            "ENTITY_ENDERMAN_TELEPORT" => Some(SoundSoundEnum::EntityEndermanTeleport),
            "ENTITY_ENDERMITE_AMBIENT" => Some(SoundSoundEnum::EntityEndermiteAmbient),
            "ENTITY_ENDERMITE_DEATH" => Some(SoundSoundEnum::EntityEndermiteDeath),
            "ENTITY_ENDERMITE_HURT" => Some(SoundSoundEnum::EntityEndermiteHurt),
            "ENTITY_ENDERMITE_STEP" => Some(SoundSoundEnum::EntityEndermiteStep),
            "ENTITY_ENDER_DRAGON_AMBIENT" => Some(SoundSoundEnum::EntityEnderDragonAmbient),
            "ENTITY_ENDER_DRAGON_DEATH" => Some(SoundSoundEnum::EntityEnderDragonDeath),
            "ENTITY_ENDER_DRAGON_FLAP" => Some(SoundSoundEnum::EntityEnderDragonFlap),
            "ENTITY_ENDER_DRAGON_GROWL" => Some(SoundSoundEnum::EntityEnderDragonGrowl),
            "ENTITY_ENDER_DRAGON_HURT" => Some(SoundSoundEnum::EntityEnderDragonHurt),
            "ENTITY_ENDER_DRAGON_SHOOT" => Some(SoundSoundEnum::EntityEnderDragonShoot),
            "ENTITY_ENDER_EYE_DEATH" => Some(SoundSoundEnum::EntityEnderEyeDeath),
            "ENTITY_ENDER_EYE_LAUNCH" => Some(SoundSoundEnum::EntityEnderEyeLaunch),
            "ENTITY_ENDER_PEARL_THROW" => Some(SoundSoundEnum::EntityEnderPearlThrow),
            "ENTITY_EVOKER_AMBIENT" => Some(SoundSoundEnum::EntityEvokerAmbient),
            "ENTITY_EVOKER_CAST_SPELL" => Some(SoundSoundEnum::EntityEvokerCastSpell),
            "ENTITY_EVOKER_CELEBRATE" => Some(SoundSoundEnum::EntityEvokerCelebrate),
            "ENTITY_EVOKER_DEATH" => Some(SoundSoundEnum::EntityEvokerDeath),
            "ENTITY_EVOKER_FANGS_ATTACK" => Some(SoundSoundEnum::EntityEvokerFangsAttack),
            "ENTITY_EVOKER_HURT" => Some(SoundSoundEnum::EntityEvokerHurt),
            "ENTITY_EVOKER_PREPARE_ATTACK" => Some(SoundSoundEnum::EntityEvokerPrepareAttack),
            "ENTITY_EVOKER_PREPARE_SUMMON" => Some(SoundSoundEnum::EntityEvokerPrepareSummon),
            "ENTITY_EVOKER_PREPARE_WOLOLO" => Some(SoundSoundEnum::EntityEvokerPrepareWololo),
            "ENTITY_EXPERIENCE_BOTTLE_THROW" => Some(SoundSoundEnum::EntityExperienceBottleThrow),
            "ENTITY_EXPERIENCE_ORB_PICKUP" => Some(SoundSoundEnum::EntityExperienceOrbPickup),
            "ENTITY_FIREWORK_ROCKET_BLAST" => Some(SoundSoundEnum::EntityFireworkRocketBlast),
            "ENTITY_FIREWORK_ROCKET_BLAST_FAR" => {
                Some(SoundSoundEnum::EntityFireworkRocketBlastFar)
            }
            "ENTITY_FIREWORK_ROCKET_LARGE_BLAST" => {
                Some(SoundSoundEnum::EntityFireworkRocketLargeBlast)
            }
            "ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR" => {
                Some(SoundSoundEnum::EntityFireworkRocketLargeBlastFar)
            }
            "ENTITY_FIREWORK_ROCKET_LAUNCH" => Some(SoundSoundEnum::EntityFireworkRocketLaunch),
            "ENTITY_FIREWORK_ROCKET_SHOOT" => Some(SoundSoundEnum::EntityFireworkRocketShoot),
            "ENTITY_FIREWORK_ROCKET_TWINKLE" => Some(SoundSoundEnum::EntityFireworkRocketTwinkle),
            "ENTITY_FIREWORK_ROCKET_TWINKLE_FAR" => {
                Some(SoundSoundEnum::EntityFireworkRocketTwinkleFar)
            }
            "ENTITY_FISHING_BOBBER_RETRIEVE" => Some(SoundSoundEnum::EntityFishingBobberRetrieve),
            "ENTITY_FISHING_BOBBER_SPLASH" => Some(SoundSoundEnum::EntityFishingBobberSplash),
            "ENTITY_FISHING_BOBBER_THROW" => Some(SoundSoundEnum::EntityFishingBobberThrow),
            "ENTITY_FISH_SWIM" => Some(SoundSoundEnum::EntityFishSwim),
            "ENTITY_FOX_AGGRO" => Some(SoundSoundEnum::EntityFoxAggro),
            "ENTITY_FOX_AMBIENT" => Some(SoundSoundEnum::EntityFoxAmbient),
            "ENTITY_FOX_BITE" => Some(SoundSoundEnum::EntityFoxBite),
            "ENTITY_FOX_DEATH" => Some(SoundSoundEnum::EntityFoxDeath),
            "ENTITY_FOX_EAT" => Some(SoundSoundEnum::EntityFoxEat),
            "ENTITY_FOX_HURT" => Some(SoundSoundEnum::EntityFoxHurt),
            "ENTITY_FOX_SCREECH" => Some(SoundSoundEnum::EntityFoxScreech),
            "ENTITY_FOX_SLEEP" => Some(SoundSoundEnum::EntityFoxSleep),
            "ENTITY_FOX_SNIFF" => Some(SoundSoundEnum::EntityFoxSniff),
            "ENTITY_FOX_SPIT" => Some(SoundSoundEnum::EntityFoxSpit),
            "ENTITY_FOX_TELEPORT" => Some(SoundSoundEnum::EntityFoxTeleport),
            "ENTITY_FROG_AMBIENT" => Some(SoundSoundEnum::EntityFrogAmbient),
            "ENTITY_FROG_DEATH" => Some(SoundSoundEnum::EntityFrogDeath),
            "ENTITY_FROG_EAT" => Some(SoundSoundEnum::EntityFrogEat),
            "ENTITY_FROG_HURT" => Some(SoundSoundEnum::EntityFrogHurt),
            "ENTITY_FROG_LAY_SPAWN" => Some(SoundSoundEnum::EntityFrogLaySpawn),
            "ENTITY_FROG_LONG_JUMP" => Some(SoundSoundEnum::EntityFrogLongJump),
            "ENTITY_FROG_STEP" => Some(SoundSoundEnum::EntityFrogStep),
            "ENTITY_FROG_TONGUE" => Some(SoundSoundEnum::EntityFrogTongue),
            "ENTITY_GENERIC_BIG_FALL" => Some(SoundSoundEnum::EntityGenericBigFall),
            "ENTITY_GENERIC_BURN" => Some(SoundSoundEnum::EntityGenericBurn),
            "ENTITY_GENERIC_DEATH" => Some(SoundSoundEnum::EntityGenericDeath),
            "ENTITY_GENERIC_DRINK" => Some(SoundSoundEnum::EntityGenericDrink),
            "ENTITY_GENERIC_EAT" => Some(SoundSoundEnum::EntityGenericEat),
            "ENTITY_GENERIC_EXPLODE" => Some(SoundSoundEnum::EntityGenericExplode),
            "ENTITY_GENERIC_EXTINGUISH_FIRE" => Some(SoundSoundEnum::EntityGenericExtinguishFire),
            "ENTITY_GENERIC_HURT" => Some(SoundSoundEnum::EntityGenericHurt),
            "ENTITY_GENERIC_SMALL_FALL" => Some(SoundSoundEnum::EntityGenericSmallFall),
            "ENTITY_GENERIC_SPLASH" => Some(SoundSoundEnum::EntityGenericSplash),
            "ENTITY_GENERIC_SWIM" => Some(SoundSoundEnum::EntityGenericSwim),
            "ENTITY_GHAST_AMBIENT" => Some(SoundSoundEnum::EntityGhastAmbient),
            "ENTITY_GHAST_DEATH" => Some(SoundSoundEnum::EntityGhastDeath),
            "ENTITY_GHAST_HURT" => Some(SoundSoundEnum::EntityGhastHurt),
            "ENTITY_GHAST_SCREAM" => Some(SoundSoundEnum::EntityGhastScream),
            "ENTITY_GHAST_SHOOT" => Some(SoundSoundEnum::EntityGhastShoot),
            "ENTITY_GHAST_WARN" => Some(SoundSoundEnum::EntityGhastWarn),
            "ENTITY_GLOW_ITEM_FRAME_ADD_ITEM" => Some(SoundSoundEnum::EntityGlowItemFrameAddItem),
            "ENTITY_GLOW_ITEM_FRAME_BREAK" => Some(SoundSoundEnum::EntityGlowItemFrameBreak),
            "ENTITY_GLOW_ITEM_FRAME_PLACE" => Some(SoundSoundEnum::EntityGlowItemFramePlace),
            "ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM" => {
                Some(SoundSoundEnum::EntityGlowItemFrameRemoveItem)
            }
            "ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM" => {
                Some(SoundSoundEnum::EntityGlowItemFrameRotateItem)
            }
            "ENTITY_GLOW_SQUID_AMBIENT" => Some(SoundSoundEnum::EntityGlowSquidAmbient),
            "ENTITY_GLOW_SQUID_DEATH" => Some(SoundSoundEnum::EntityGlowSquidDeath),
            "ENTITY_GLOW_SQUID_HURT" => Some(SoundSoundEnum::EntityGlowSquidHurt),
            "ENTITY_GLOW_SQUID_SQUIRT" => Some(SoundSoundEnum::EntityGlowSquidSquirt),
            "ENTITY_GOAT_AMBIENT" => Some(SoundSoundEnum::EntityGoatAmbient),
            "ENTITY_GOAT_DEATH" => Some(SoundSoundEnum::EntityGoatDeath),
            "ENTITY_GOAT_EAT" => Some(SoundSoundEnum::EntityGoatEat),
            "ENTITY_GOAT_HORN_BREAK" => Some(SoundSoundEnum::EntityGoatHornBreak),
            "ENTITY_GOAT_HURT" => Some(SoundSoundEnum::EntityGoatHurt),
            "ENTITY_GOAT_LONG_JUMP" => Some(SoundSoundEnum::EntityGoatLongJump),
            "ENTITY_GOAT_MILK" => Some(SoundSoundEnum::EntityGoatMilk),
            "ENTITY_GOAT_PREPARE_RAM" => Some(SoundSoundEnum::EntityGoatPrepareRam),
            "ENTITY_GOAT_RAM_IMPACT" => Some(SoundSoundEnum::EntityGoatRamImpact),
            "ENTITY_GOAT_SCREAMING_AMBIENT" => Some(SoundSoundEnum::EntityGoatScreamingAmbient),
            "ENTITY_GOAT_SCREAMING_DEATH" => Some(SoundSoundEnum::EntityGoatScreamingDeath),
            "ENTITY_GOAT_SCREAMING_EAT" => Some(SoundSoundEnum::EntityGoatScreamingEat),
            "ENTITY_GOAT_SCREAMING_HORN_BREAK" => {
                Some(SoundSoundEnum::EntityGoatScreamingHornBreak)
            }
            "ENTITY_GOAT_SCREAMING_HURT" => Some(SoundSoundEnum::EntityGoatScreamingHurt),
            "ENTITY_GOAT_SCREAMING_LONG_JUMP" => Some(SoundSoundEnum::EntityGoatScreamingLongJump),
            "ENTITY_GOAT_SCREAMING_MILK" => Some(SoundSoundEnum::EntityGoatScreamingMilk),
            "ENTITY_GOAT_SCREAMING_PREPARE_RAM" => {
                Some(SoundSoundEnum::EntityGoatScreamingPrepareRam)
            }
            "ENTITY_GOAT_SCREAMING_RAM_IMPACT" => {
                Some(SoundSoundEnum::EntityGoatScreamingRamImpact)
            }
            "ENTITY_GOAT_STEP" => Some(SoundSoundEnum::EntityGoatStep),
            "ENTITY_GUARDIAN_AMBIENT" => Some(SoundSoundEnum::EntityGuardianAmbient),
            "ENTITY_GUARDIAN_AMBIENT_LAND" => Some(SoundSoundEnum::EntityGuardianAmbientLand),
            "ENTITY_GUARDIAN_ATTACK" => Some(SoundSoundEnum::EntityGuardianAttack),
            "ENTITY_GUARDIAN_DEATH" => Some(SoundSoundEnum::EntityGuardianDeath),
            "ENTITY_GUARDIAN_DEATH_LAND" => Some(SoundSoundEnum::EntityGuardianDeathLand),
            "ENTITY_GUARDIAN_FLOP" => Some(SoundSoundEnum::EntityGuardianFlop),
            "ENTITY_GUARDIAN_HURT" => Some(SoundSoundEnum::EntityGuardianHurt),
            "ENTITY_GUARDIAN_HURT_LAND" => Some(SoundSoundEnum::EntityGuardianHurtLand),
            "ENTITY_HOGLIN_AMBIENT" => Some(SoundSoundEnum::EntityHoglinAmbient),
            "ENTITY_HOGLIN_ANGRY" => Some(SoundSoundEnum::EntityHoglinAngry),
            "ENTITY_HOGLIN_ATTACK" => Some(SoundSoundEnum::EntityHoglinAttack),
            "ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED" => {
                Some(SoundSoundEnum::EntityHoglinConvertedToZombified)
            }
            "ENTITY_HOGLIN_DEATH" => Some(SoundSoundEnum::EntityHoglinDeath),
            "ENTITY_HOGLIN_HURT" => Some(SoundSoundEnum::EntityHoglinHurt),
            "ENTITY_HOGLIN_RETREAT" => Some(SoundSoundEnum::EntityHoglinRetreat),
            "ENTITY_HOGLIN_STEP" => Some(SoundSoundEnum::EntityHoglinStep),
            "ENTITY_HORSE_AMBIENT" => Some(SoundSoundEnum::EntityHorseAmbient),
            "ENTITY_HORSE_ANGRY" => Some(SoundSoundEnum::EntityHorseAngry),
            "ENTITY_HORSE_ARMOR" => Some(SoundSoundEnum::EntityHorseArmor),
            "ENTITY_HORSE_BREATHE" => Some(SoundSoundEnum::EntityHorseBreathe),
            "ENTITY_HORSE_DEATH" => Some(SoundSoundEnum::EntityHorseDeath),
            "ENTITY_HORSE_EAT" => Some(SoundSoundEnum::EntityHorseEat),
            "ENTITY_HORSE_GALLOP" => Some(SoundSoundEnum::EntityHorseGallop),
            "ENTITY_HORSE_HURT" => Some(SoundSoundEnum::EntityHorseHurt),
            "ENTITY_HORSE_JUMP" => Some(SoundSoundEnum::EntityHorseJump),
            "ENTITY_HORSE_LAND" => Some(SoundSoundEnum::EntityHorseLand),
            "ENTITY_HORSE_SADDLE" => Some(SoundSoundEnum::EntityHorseSaddle),
            "ENTITY_HORSE_STEP" => Some(SoundSoundEnum::EntityHorseStep),
            "ENTITY_HORSE_STEP_WOOD" => Some(SoundSoundEnum::EntityHorseStepWood),
            "ENTITY_HOSTILE_BIG_FALL" => Some(SoundSoundEnum::EntityHostileBigFall),
            "ENTITY_HOSTILE_DEATH" => Some(SoundSoundEnum::EntityHostileDeath),
            "ENTITY_HOSTILE_HURT" => Some(SoundSoundEnum::EntityHostileHurt),
            "ENTITY_HOSTILE_SMALL_FALL" => Some(SoundSoundEnum::EntityHostileSmallFall),
            "ENTITY_HOSTILE_SPLASH" => Some(SoundSoundEnum::EntityHostileSplash),
            "ENTITY_HOSTILE_SWIM" => Some(SoundSoundEnum::EntityHostileSwim),
            "ENTITY_HUSK_AMBIENT" => Some(SoundSoundEnum::EntityHuskAmbient),
            "ENTITY_HUSK_CONVERTED_TO_ZOMBIE" => Some(SoundSoundEnum::EntityHuskConvertedToZombie),
            "ENTITY_HUSK_DEATH" => Some(SoundSoundEnum::EntityHuskDeath),
            "ENTITY_HUSK_HURT" => Some(SoundSoundEnum::EntityHuskHurt),
            "ENTITY_HUSK_STEP" => Some(SoundSoundEnum::EntityHuskStep),
            "ENTITY_ILLUSIONER_AMBIENT" => Some(SoundSoundEnum::EntityIllusionerAmbient),
            "ENTITY_ILLUSIONER_CAST_SPELL" => Some(SoundSoundEnum::EntityIllusionerCastSpell),
            "ENTITY_ILLUSIONER_DEATH" => Some(SoundSoundEnum::EntityIllusionerDeath),
            "ENTITY_ILLUSIONER_HURT" => Some(SoundSoundEnum::EntityIllusionerHurt),
            "ENTITY_ILLUSIONER_MIRROR_MOVE" => Some(SoundSoundEnum::EntityIllusionerMirrorMove),
            "ENTITY_ILLUSIONER_PREPARE_BLINDNESS" => {
                Some(SoundSoundEnum::EntityIllusionerPrepareBlindness)
            }
            "ENTITY_ILLUSIONER_PREPARE_MIRROR" => {
                Some(SoundSoundEnum::EntityIllusionerPrepareMirror)
            }
            "ENTITY_IRON_GOLEM_ATTACK" => Some(SoundSoundEnum::EntityIronGolemAttack),
            "ENTITY_IRON_GOLEM_DAMAGE" => Some(SoundSoundEnum::EntityIronGolemDamage),
            "ENTITY_IRON_GOLEM_DEATH" => Some(SoundSoundEnum::EntityIronGolemDeath),
            "ENTITY_IRON_GOLEM_HURT" => Some(SoundSoundEnum::EntityIronGolemHurt),
            "ENTITY_IRON_GOLEM_REPAIR" => Some(SoundSoundEnum::EntityIronGolemRepair),
            "ENTITY_IRON_GOLEM_STEP" => Some(SoundSoundEnum::EntityIronGolemStep),
            "ENTITY_ITEM_BREAK" => Some(SoundSoundEnum::EntityItemBreak),
            "ENTITY_ITEM_FRAME_ADD_ITEM" => Some(SoundSoundEnum::EntityItemFrameAddItem),
            "ENTITY_ITEM_FRAME_BREAK" => Some(SoundSoundEnum::EntityItemFrameBreak),
            "ENTITY_ITEM_FRAME_PLACE" => Some(SoundSoundEnum::EntityItemFramePlace),
            "ENTITY_ITEM_FRAME_REMOVE_ITEM" => Some(SoundSoundEnum::EntityItemFrameRemoveItem),
            "ENTITY_ITEM_FRAME_ROTATE_ITEM" => Some(SoundSoundEnum::EntityItemFrameRotateItem),
            "ENTITY_ITEM_PICKUP" => Some(SoundSoundEnum::EntityItemPickup),
            "ENTITY_LEASH_KNOT_BREAK" => Some(SoundSoundEnum::EntityLeashKnotBreak),
            "ENTITY_LEASH_KNOT_PLACE" => Some(SoundSoundEnum::EntityLeashKnotPlace),
            "ENTITY_LIGHTNING_BOLT_IMPACT" => Some(SoundSoundEnum::EntityLightningBoltImpact),
            "ENTITY_LIGHTNING_BOLT_THUNDER" => Some(SoundSoundEnum::EntityLightningBoltThunder),
            "ENTITY_LINGERING_POTION_THROW" => Some(SoundSoundEnum::EntityLingeringPotionThrow),
            "ENTITY_LLAMA_AMBIENT" => Some(SoundSoundEnum::EntityLlamaAmbient),
            "ENTITY_LLAMA_ANGRY" => Some(SoundSoundEnum::EntityLlamaAngry),
            "ENTITY_LLAMA_CHEST" => Some(SoundSoundEnum::EntityLlamaChest),
            "ENTITY_LLAMA_DEATH" => Some(SoundSoundEnum::EntityLlamaDeath),
            "ENTITY_LLAMA_EAT" => Some(SoundSoundEnum::EntityLlamaEat),
            "ENTITY_LLAMA_HURT" => Some(SoundSoundEnum::EntityLlamaHurt),
            "ENTITY_LLAMA_SPIT" => Some(SoundSoundEnum::EntityLlamaSpit),
            "ENTITY_LLAMA_STEP" => Some(SoundSoundEnum::EntityLlamaStep),
            "ENTITY_LLAMA_SWAG" => Some(SoundSoundEnum::EntityLlamaSwag),
            "ENTITY_MAGMA_CUBE_DEATH" => Some(SoundSoundEnum::EntityMagmaCubeDeath),
            "ENTITY_MAGMA_CUBE_DEATH_SMALL" => Some(SoundSoundEnum::EntityMagmaCubeDeathSmall),
            "ENTITY_MAGMA_CUBE_HURT" => Some(SoundSoundEnum::EntityMagmaCubeHurt),
            "ENTITY_MAGMA_CUBE_HURT_SMALL" => Some(SoundSoundEnum::EntityMagmaCubeHurtSmall),
            "ENTITY_MAGMA_CUBE_JUMP" => Some(SoundSoundEnum::EntityMagmaCubeJump),
            "ENTITY_MAGMA_CUBE_SQUISH" => Some(SoundSoundEnum::EntityMagmaCubeSquish),
            "ENTITY_MAGMA_CUBE_SQUISH_SMALL" => Some(SoundSoundEnum::EntityMagmaCubeSquishSmall),
            "ENTITY_MINECART_INSIDE" => Some(SoundSoundEnum::EntityMinecartInside),
            "ENTITY_MINECART_INSIDE_UNDERWATER" => {
                Some(SoundSoundEnum::EntityMinecartInsideUnderwater)
            }
            "ENTITY_MINECART_RIDING" => Some(SoundSoundEnum::EntityMinecartRiding),
            "ENTITY_MOOSHROOM_CONVERT" => Some(SoundSoundEnum::EntityMooshroomConvert),
            "ENTITY_MOOSHROOM_EAT" => Some(SoundSoundEnum::EntityMooshroomEat),
            "ENTITY_MOOSHROOM_MILK" => Some(SoundSoundEnum::EntityMooshroomMilk),
            "ENTITY_MOOSHROOM_SHEAR" => Some(SoundSoundEnum::EntityMooshroomShear),
            "ENTITY_MOOSHROOM_SUSPICIOUS_MILK" => {
                Some(SoundSoundEnum::EntityMooshroomSuspiciousMilk)
            }
            "ENTITY_MULE_AMBIENT" => Some(SoundSoundEnum::EntityMuleAmbient),
            "ENTITY_MULE_ANGRY" => Some(SoundSoundEnum::EntityMuleAngry),
            "ENTITY_MULE_CHEST" => Some(SoundSoundEnum::EntityMuleChest),
            "ENTITY_MULE_DEATH" => Some(SoundSoundEnum::EntityMuleDeath),
            "ENTITY_MULE_EAT" => Some(SoundSoundEnum::EntityMuleEat),
            "ENTITY_MULE_HURT" => Some(SoundSoundEnum::EntityMuleHurt),
            "ENTITY_OCELOT_AMBIENT" => Some(SoundSoundEnum::EntityOcelotAmbient),
            "ENTITY_OCELOT_DEATH" => Some(SoundSoundEnum::EntityOcelotDeath),
            "ENTITY_OCELOT_HURT" => Some(SoundSoundEnum::EntityOcelotHurt),
            "ENTITY_PAINTING_BREAK" => Some(SoundSoundEnum::EntityPaintingBreak),
            "ENTITY_PAINTING_PLACE" => Some(SoundSoundEnum::EntityPaintingPlace),
            "ENTITY_PANDA_AGGRESSIVE_AMBIENT" => Some(SoundSoundEnum::EntityPandaAggressiveAmbient),
            "ENTITY_PANDA_AMBIENT" => Some(SoundSoundEnum::EntityPandaAmbient),
            "ENTITY_PANDA_BITE" => Some(SoundSoundEnum::EntityPandaBite),
            "ENTITY_PANDA_CANT_BREED" => Some(SoundSoundEnum::EntityPandaCantBreed),
            "ENTITY_PANDA_DEATH" => Some(SoundSoundEnum::EntityPandaDeath),
            "ENTITY_PANDA_EAT" => Some(SoundSoundEnum::EntityPandaEat),
            "ENTITY_PANDA_HURT" => Some(SoundSoundEnum::EntityPandaHurt),
            "ENTITY_PANDA_PRE_SNEEZE" => Some(SoundSoundEnum::EntityPandaPreSneeze),
            "ENTITY_PANDA_SNEEZE" => Some(SoundSoundEnum::EntityPandaSneeze),
            "ENTITY_PANDA_STEP" => Some(SoundSoundEnum::EntityPandaStep),
            "ENTITY_PANDA_WORRIED_AMBIENT" => Some(SoundSoundEnum::EntityPandaWorriedAmbient),
            "ENTITY_PARROT_AMBIENT" => Some(SoundSoundEnum::EntityParrotAmbient),
            "ENTITY_PARROT_DEATH" => Some(SoundSoundEnum::EntityParrotDeath),
            "ENTITY_PARROT_EAT" => Some(SoundSoundEnum::EntityParrotEat),
            "ENTITY_PARROT_FLY" => Some(SoundSoundEnum::EntityParrotFly),
            "ENTITY_PARROT_HURT" => Some(SoundSoundEnum::EntityParrotHurt),
            "ENTITY_PARROT_IMITATE_BLAZE" => Some(SoundSoundEnum::EntityParrotImitateBlaze),
            "ENTITY_PARROT_IMITATE_CREEPER" => Some(SoundSoundEnum::EntityParrotImitateCreeper),
            "ENTITY_PARROT_IMITATE_DROWNED" => Some(SoundSoundEnum::EntityParrotImitateDrowned),
            "ENTITY_PARROT_IMITATE_ELDER_GUARDIAN" => {
                Some(SoundSoundEnum::EntityParrotImitateElderGuardian)
            }
            "ENTITY_PARROT_IMITATE_ENDERMITE" => Some(SoundSoundEnum::EntityParrotImitateEndermite),
            "ENTITY_PARROT_IMITATE_ENDER_DRAGON" => {
                Some(SoundSoundEnum::EntityParrotImitateEnderDragon)
            }
            "ENTITY_PARROT_IMITATE_EVOKER" => Some(SoundSoundEnum::EntityParrotImitateEvoker),
            "ENTITY_PARROT_IMITATE_GHAST" => Some(SoundSoundEnum::EntityParrotImitateGhast),
            "ENTITY_PARROT_IMITATE_GUARDIAN" => Some(SoundSoundEnum::EntityParrotImitateGuardian),
            "ENTITY_PARROT_IMITATE_HOGLIN" => Some(SoundSoundEnum::EntityParrotImitateHoglin),
            "ENTITY_PARROT_IMITATE_HUSK" => Some(SoundSoundEnum::EntityParrotImitateHusk),
            "ENTITY_PARROT_IMITATE_ILLUSIONER" => {
                Some(SoundSoundEnum::EntityParrotImitateIllusioner)
            }
            "ENTITY_PARROT_IMITATE_MAGMA_CUBE" => {
                Some(SoundSoundEnum::EntityParrotImitateMagmaCube)
            }
            "ENTITY_PARROT_IMITATE_PHANTOM" => Some(SoundSoundEnum::EntityParrotImitatePhantom),
            "ENTITY_PARROT_IMITATE_PIGLIN" => Some(SoundSoundEnum::EntityParrotImitatePiglin),
            "ENTITY_PARROT_IMITATE_PIGLIN_BRUTE" => {
                Some(SoundSoundEnum::EntityParrotImitatePiglinBrute)
            }
            "ENTITY_PARROT_IMITATE_PILLAGER" => Some(SoundSoundEnum::EntityParrotImitatePillager),
            "ENTITY_PARROT_IMITATE_RAVAGER" => Some(SoundSoundEnum::EntityParrotImitateRavager),
            "ENTITY_PARROT_IMITATE_SHULKER" => Some(SoundSoundEnum::EntityParrotImitateShulker),
            "ENTITY_PARROT_IMITATE_SILVERFISH" => {
                Some(SoundSoundEnum::EntityParrotImitateSilverfish)
            }
            "ENTITY_PARROT_IMITATE_SKELETON" => Some(SoundSoundEnum::EntityParrotImitateSkeleton),
            "ENTITY_PARROT_IMITATE_SLIME" => Some(SoundSoundEnum::EntityParrotImitateSlime),
            "ENTITY_PARROT_IMITATE_SPIDER" => Some(SoundSoundEnum::EntityParrotImitateSpider),
            "ENTITY_PARROT_IMITATE_STRAY" => Some(SoundSoundEnum::EntityParrotImitateStray),
            "ENTITY_PARROT_IMITATE_VEX" => Some(SoundSoundEnum::EntityParrotImitateVex),
            "ENTITY_PARROT_IMITATE_VINDICATOR" => {
                Some(SoundSoundEnum::EntityParrotImitateVindicator)
            }
            "ENTITY_PARROT_IMITATE_WARDEN" => Some(SoundSoundEnum::EntityParrotImitateWarden),
            "ENTITY_PARROT_IMITATE_WITCH" => Some(SoundSoundEnum::EntityParrotImitateWitch),
            "ENTITY_PARROT_IMITATE_WITHER" => Some(SoundSoundEnum::EntityParrotImitateWither),
            "ENTITY_PARROT_IMITATE_WITHER_SKELETON" => {
                Some(SoundSoundEnum::EntityParrotImitateWitherSkeleton)
            }
            "ENTITY_PARROT_IMITATE_ZOGLIN" => Some(SoundSoundEnum::EntityParrotImitateZoglin),
            "ENTITY_PARROT_IMITATE_ZOMBIE" => Some(SoundSoundEnum::EntityParrotImitateZombie),
            "ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER" => {
                Some(SoundSoundEnum::EntityParrotImitateZombieVillager)
            }
            "ENTITY_PARROT_STEP" => Some(SoundSoundEnum::EntityParrotStep),
            "ENTITY_PHANTOM_AMBIENT" => Some(SoundSoundEnum::EntityPhantomAmbient),
            "ENTITY_PHANTOM_BITE" => Some(SoundSoundEnum::EntityPhantomBite),
            "ENTITY_PHANTOM_DEATH" => Some(SoundSoundEnum::EntityPhantomDeath),
            "ENTITY_PHANTOM_FLAP" => Some(SoundSoundEnum::EntityPhantomFlap),
            "ENTITY_PHANTOM_HURT" => Some(SoundSoundEnum::EntityPhantomHurt),
            "ENTITY_PHANTOM_SWOOP" => Some(SoundSoundEnum::EntityPhantomSwoop),
            "ENTITY_PIGLIN_ADMIRING_ITEM" => Some(SoundSoundEnum::EntityPiglinAdmiringItem),
            "ENTITY_PIGLIN_AMBIENT" => Some(SoundSoundEnum::EntityPiglinAmbient),
            "ENTITY_PIGLIN_ANGRY" => Some(SoundSoundEnum::EntityPiglinAngry),
            "ENTITY_PIGLIN_BRUTE_AMBIENT" => Some(SoundSoundEnum::EntityPiglinBruteAmbient),
            "ENTITY_PIGLIN_BRUTE_ANGRY" => Some(SoundSoundEnum::EntityPiglinBruteAngry),
            "ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED" => {
                Some(SoundSoundEnum::EntityPiglinBruteConvertedToZombified)
            }
            "ENTITY_PIGLIN_BRUTE_DEATH" => Some(SoundSoundEnum::EntityPiglinBruteDeath),
            "ENTITY_PIGLIN_BRUTE_HURT" => Some(SoundSoundEnum::EntityPiglinBruteHurt),
            "ENTITY_PIGLIN_BRUTE_STEP" => Some(SoundSoundEnum::EntityPiglinBruteStep),
            "ENTITY_PIGLIN_CELEBRATE" => Some(SoundSoundEnum::EntityPiglinCelebrate),
            "ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED" => {
                Some(SoundSoundEnum::EntityPiglinConvertedToZombified)
            }
            "ENTITY_PIGLIN_DEATH" => Some(SoundSoundEnum::EntityPiglinDeath),
            "ENTITY_PIGLIN_HURT" => Some(SoundSoundEnum::EntityPiglinHurt),
            "ENTITY_PIGLIN_JEALOUS" => Some(SoundSoundEnum::EntityPiglinJealous),
            "ENTITY_PIGLIN_RETREAT" => Some(SoundSoundEnum::EntityPiglinRetreat),
            "ENTITY_PIGLIN_STEP" => Some(SoundSoundEnum::EntityPiglinStep),
            "ENTITY_PIG_AMBIENT" => Some(SoundSoundEnum::EntityPigAmbient),
            "ENTITY_PIG_DEATH" => Some(SoundSoundEnum::EntityPigDeath),
            "ENTITY_PIG_HURT" => Some(SoundSoundEnum::EntityPigHurt),
            "ENTITY_PIG_SADDLE" => Some(SoundSoundEnum::EntityPigSaddle),
            "ENTITY_PIG_STEP" => Some(SoundSoundEnum::EntityPigStep),
            "ENTITY_PILLAGER_AMBIENT" => Some(SoundSoundEnum::EntityPillagerAmbient),
            "ENTITY_PILLAGER_CELEBRATE" => Some(SoundSoundEnum::EntityPillagerCelebrate),
            "ENTITY_PILLAGER_DEATH" => Some(SoundSoundEnum::EntityPillagerDeath),
            "ENTITY_PILLAGER_HURT" => Some(SoundSoundEnum::EntityPillagerHurt),
            "ENTITY_PLAYER_ATTACK_CRIT" => Some(SoundSoundEnum::EntityPlayerAttackCrit),
            "ENTITY_PLAYER_ATTACK_KNOCKBACK" => Some(SoundSoundEnum::EntityPlayerAttackKnockback),
            "ENTITY_PLAYER_ATTACK_NODAMAGE" => Some(SoundSoundEnum::EntityPlayerAttackNodamage),
            "ENTITY_PLAYER_ATTACK_STRONG" => Some(SoundSoundEnum::EntityPlayerAttackStrong),
            "ENTITY_PLAYER_ATTACK_SWEEP" => Some(SoundSoundEnum::EntityPlayerAttackSweep),
            "ENTITY_PLAYER_ATTACK_WEAK" => Some(SoundSoundEnum::EntityPlayerAttackWeak),
            "ENTITY_PLAYER_BIG_FALL" => Some(SoundSoundEnum::EntityPlayerBigFall),
            "ENTITY_PLAYER_BREATH" => Some(SoundSoundEnum::EntityPlayerBreath),
            "ENTITY_PLAYER_BURP" => Some(SoundSoundEnum::EntityPlayerBurp),
            "ENTITY_PLAYER_DEATH" => Some(SoundSoundEnum::EntityPlayerDeath),
            "ENTITY_PLAYER_HURT" => Some(SoundSoundEnum::EntityPlayerHurt),
            "ENTITY_PLAYER_HURT_DROWN" => Some(SoundSoundEnum::EntityPlayerHurtDrown),
            "ENTITY_PLAYER_HURT_FREEZE" => Some(SoundSoundEnum::EntityPlayerHurtFreeze),
            "ENTITY_PLAYER_HURT_ON_FIRE" => Some(SoundSoundEnum::EntityPlayerHurtOnFire),
            "ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH" => {
                Some(SoundSoundEnum::EntityPlayerHurtSweetBerryBush)
            }
            "ENTITY_PLAYER_LEVELUP" => Some(SoundSoundEnum::EntityPlayerLevelup),
            "ENTITY_PLAYER_SMALL_FALL" => Some(SoundSoundEnum::EntityPlayerSmallFall),
            "ENTITY_PLAYER_SPLASH" => Some(SoundSoundEnum::EntityPlayerSplash),
            "ENTITY_PLAYER_SPLASH_HIGH_SPEED" => Some(SoundSoundEnum::EntityPlayerSplashHighSpeed),
            "ENTITY_PLAYER_SWIM" => Some(SoundSoundEnum::EntityPlayerSwim),
            "ENTITY_POLAR_BEAR_AMBIENT" => Some(SoundSoundEnum::EntityPolarBearAmbient),
            "ENTITY_POLAR_BEAR_AMBIENT_BABY" => Some(SoundSoundEnum::EntityPolarBearAmbientBaby),
            "ENTITY_POLAR_BEAR_DEATH" => Some(SoundSoundEnum::EntityPolarBearDeath),
            "ENTITY_POLAR_BEAR_HURT" => Some(SoundSoundEnum::EntityPolarBearHurt),
            "ENTITY_POLAR_BEAR_STEP" => Some(SoundSoundEnum::EntityPolarBearStep),
            "ENTITY_POLAR_BEAR_WARNING" => Some(SoundSoundEnum::EntityPolarBearWarning),
            "ENTITY_PUFFER_FISH_AMBIENT" => Some(SoundSoundEnum::EntityPufferFishAmbient),
            "ENTITY_PUFFER_FISH_BLOW_OUT" => Some(SoundSoundEnum::EntityPufferFishBlowOut),
            "ENTITY_PUFFER_FISH_BLOW_UP" => Some(SoundSoundEnum::EntityPufferFishBlowUp),
            "ENTITY_PUFFER_FISH_DEATH" => Some(SoundSoundEnum::EntityPufferFishDeath),
            "ENTITY_PUFFER_FISH_FLOP" => Some(SoundSoundEnum::EntityPufferFishFlop),
            "ENTITY_PUFFER_FISH_HURT" => Some(SoundSoundEnum::EntityPufferFishHurt),
            "ENTITY_PUFFER_FISH_STING" => Some(SoundSoundEnum::EntityPufferFishSting),
            "ENTITY_RABBIT_AMBIENT" => Some(SoundSoundEnum::EntityRabbitAmbient),
            "ENTITY_RABBIT_ATTACK" => Some(SoundSoundEnum::EntityRabbitAttack),
            "ENTITY_RABBIT_DEATH" => Some(SoundSoundEnum::EntityRabbitDeath),
            "ENTITY_RABBIT_HURT" => Some(SoundSoundEnum::EntityRabbitHurt),
            "ENTITY_RABBIT_JUMP" => Some(SoundSoundEnum::EntityRabbitJump),
            "ENTITY_RAVAGER_AMBIENT" => Some(SoundSoundEnum::EntityRavagerAmbient),
            "ENTITY_RAVAGER_ATTACK" => Some(SoundSoundEnum::EntityRavagerAttack),
            "ENTITY_RAVAGER_CELEBRATE" => Some(SoundSoundEnum::EntityRavagerCelebrate),
            "ENTITY_RAVAGER_DEATH" => Some(SoundSoundEnum::EntityRavagerDeath),
            "ENTITY_RAVAGER_HURT" => Some(SoundSoundEnum::EntityRavagerHurt),
            "ENTITY_RAVAGER_ROAR" => Some(SoundSoundEnum::EntityRavagerRoar),
            "ENTITY_RAVAGER_STEP" => Some(SoundSoundEnum::EntityRavagerStep),
            "ENTITY_RAVAGER_STUNNED" => Some(SoundSoundEnum::EntityRavagerStunned),
            "ENTITY_SALMON_AMBIENT" => Some(SoundSoundEnum::EntitySalmonAmbient),
            "ENTITY_SALMON_DEATH" => Some(SoundSoundEnum::EntitySalmonDeath),
            "ENTITY_SALMON_FLOP" => Some(SoundSoundEnum::EntitySalmonFlop),
            "ENTITY_SALMON_HURT" => Some(SoundSoundEnum::EntitySalmonHurt),
            "ENTITY_SHEEP_AMBIENT" => Some(SoundSoundEnum::EntitySheepAmbient),
            "ENTITY_SHEEP_DEATH" => Some(SoundSoundEnum::EntitySheepDeath),
            "ENTITY_SHEEP_HURT" => Some(SoundSoundEnum::EntitySheepHurt),
            "ENTITY_SHEEP_SHEAR" => Some(SoundSoundEnum::EntitySheepShear),
            "ENTITY_SHEEP_STEP" => Some(SoundSoundEnum::EntitySheepStep),
            "ENTITY_SHULKER_AMBIENT" => Some(SoundSoundEnum::EntityShulkerAmbient),
            "ENTITY_SHULKER_BULLET_HIT" => Some(SoundSoundEnum::EntityShulkerBulletHit),
            "ENTITY_SHULKER_BULLET_HURT" => Some(SoundSoundEnum::EntityShulkerBulletHurt),
            "ENTITY_SHULKER_CLOSE" => Some(SoundSoundEnum::EntityShulkerClose),
            "ENTITY_SHULKER_DEATH" => Some(SoundSoundEnum::EntityShulkerDeath),
            "ENTITY_SHULKER_HURT" => Some(SoundSoundEnum::EntityShulkerHurt),
            "ENTITY_SHULKER_HURT_CLOSED" => Some(SoundSoundEnum::EntityShulkerHurtClosed),
            "ENTITY_SHULKER_OPEN" => Some(SoundSoundEnum::EntityShulkerOpen),
            "ENTITY_SHULKER_SHOOT" => Some(SoundSoundEnum::EntityShulkerShoot),
            "ENTITY_SHULKER_TELEPORT" => Some(SoundSoundEnum::EntityShulkerTeleport),
            "ENTITY_SILVERFISH_AMBIENT" => Some(SoundSoundEnum::EntitySilverfishAmbient),
            "ENTITY_SILVERFISH_DEATH" => Some(SoundSoundEnum::EntitySilverfishDeath),
            "ENTITY_SILVERFISH_HURT" => Some(SoundSoundEnum::EntitySilverfishHurt),
            "ENTITY_SILVERFISH_STEP" => Some(SoundSoundEnum::EntitySilverfishStep),
            "ENTITY_SKELETON_AMBIENT" => Some(SoundSoundEnum::EntitySkeletonAmbient),
            "ENTITY_SKELETON_CONVERTED_TO_STRAY" => {
                Some(SoundSoundEnum::EntitySkeletonConvertedToStray)
            }
            "ENTITY_SKELETON_DEATH" => Some(SoundSoundEnum::EntitySkeletonDeath),
            "ENTITY_SKELETON_HORSE_AMBIENT" => Some(SoundSoundEnum::EntitySkeletonHorseAmbient),
            "ENTITY_SKELETON_HORSE_AMBIENT_WATER" => {
                Some(SoundSoundEnum::EntitySkeletonHorseAmbientWater)
            }
            "ENTITY_SKELETON_HORSE_DEATH" => Some(SoundSoundEnum::EntitySkeletonHorseDeath),
            "ENTITY_SKELETON_HORSE_GALLOP_WATER" => {
                Some(SoundSoundEnum::EntitySkeletonHorseGallopWater)
            }
            "ENTITY_SKELETON_HORSE_HURT" => Some(SoundSoundEnum::EntitySkeletonHorseHurt),
            "ENTITY_SKELETON_HORSE_JUMP_WATER" => {
                Some(SoundSoundEnum::EntitySkeletonHorseJumpWater)
            }
            "ENTITY_SKELETON_HORSE_STEP_WATER" => {
                Some(SoundSoundEnum::EntitySkeletonHorseStepWater)
            }
            "ENTITY_SKELETON_HORSE_SWIM" => Some(SoundSoundEnum::EntitySkeletonHorseSwim),
            "ENTITY_SKELETON_HURT" => Some(SoundSoundEnum::EntitySkeletonHurt),
            "ENTITY_SKELETON_SHOOT" => Some(SoundSoundEnum::EntitySkeletonShoot),
            "ENTITY_SKELETON_STEP" => Some(SoundSoundEnum::EntitySkeletonStep),
            "ENTITY_SLIME_ATTACK" => Some(SoundSoundEnum::EntitySlimeAttack),
            "ENTITY_SLIME_DEATH" => Some(SoundSoundEnum::EntitySlimeDeath),
            "ENTITY_SLIME_DEATH_SMALL" => Some(SoundSoundEnum::EntitySlimeDeathSmall),
            "ENTITY_SLIME_HURT" => Some(SoundSoundEnum::EntitySlimeHurt),
            "ENTITY_SLIME_HURT_SMALL" => Some(SoundSoundEnum::EntitySlimeHurtSmall),
            "ENTITY_SLIME_JUMP" => Some(SoundSoundEnum::EntitySlimeJump),
            "ENTITY_SLIME_JUMP_SMALL" => Some(SoundSoundEnum::EntitySlimeJumpSmall),
            "ENTITY_SLIME_SQUISH" => Some(SoundSoundEnum::EntitySlimeSquish),
            "ENTITY_SLIME_SQUISH_SMALL" => Some(SoundSoundEnum::EntitySlimeSquishSmall),
            "ENTITY_SNIFFER_DEATH" => Some(SoundSoundEnum::EntitySnifferDeath),
            "ENTITY_SNIFFER_DIGGING" => Some(SoundSoundEnum::EntitySnifferDigging),
            "ENTITY_SNIFFER_DIGGING_STOP" => Some(SoundSoundEnum::EntitySnifferDiggingStop),
            "ENTITY_SNIFFER_DROP_SEED" => Some(SoundSoundEnum::EntitySnifferDropSeed),
            "ENTITY_SNIFFER_EAT" => Some(SoundSoundEnum::EntitySnifferEat),
            "ENTITY_SNIFFER_HAPPY" => Some(SoundSoundEnum::EntitySnifferHappy),
            "ENTITY_SNIFFER_HURT" => Some(SoundSoundEnum::EntitySnifferHurt),
            "ENTITY_SNIFFER_IDLE" => Some(SoundSoundEnum::EntitySnifferIdle),
            "ENTITY_SNIFFER_SCENTING" => Some(SoundSoundEnum::EntitySnifferScenting),
            "ENTITY_SNIFFER_SEARCHING" => Some(SoundSoundEnum::EntitySnifferSearching),
            "ENTITY_SNIFFER_SNIFFING" => Some(SoundSoundEnum::EntitySnifferSniffing),
            "ENTITY_SNIFFER_STEP" => Some(SoundSoundEnum::EntitySnifferStep),
            "ENTITY_SNOWBALL_THROW" => Some(SoundSoundEnum::EntitySnowballThrow),
            "ENTITY_SNOW_GOLEM_AMBIENT" => Some(SoundSoundEnum::EntitySnowGolemAmbient),
            "ENTITY_SNOW_GOLEM_DEATH" => Some(SoundSoundEnum::EntitySnowGolemDeath),
            "ENTITY_SNOW_GOLEM_HURT" => Some(SoundSoundEnum::EntitySnowGolemHurt),
            "ENTITY_SNOW_GOLEM_SHEAR" => Some(SoundSoundEnum::EntitySnowGolemShear),
            "ENTITY_SNOW_GOLEM_SHOOT" => Some(SoundSoundEnum::EntitySnowGolemShoot),
            "ENTITY_SPIDER_AMBIENT" => Some(SoundSoundEnum::EntitySpiderAmbient),
            "ENTITY_SPIDER_DEATH" => Some(SoundSoundEnum::EntitySpiderDeath),
            "ENTITY_SPIDER_HURT" => Some(SoundSoundEnum::EntitySpiderHurt),
            "ENTITY_SPIDER_STEP" => Some(SoundSoundEnum::EntitySpiderStep),
            "ENTITY_SPLASH_POTION_BREAK" => Some(SoundSoundEnum::EntitySplashPotionBreak),
            "ENTITY_SPLASH_POTION_THROW" => Some(SoundSoundEnum::EntitySplashPotionThrow),
            "ENTITY_SQUID_AMBIENT" => Some(SoundSoundEnum::EntitySquidAmbient),
            "ENTITY_SQUID_DEATH" => Some(SoundSoundEnum::EntitySquidDeath),
            "ENTITY_SQUID_HURT" => Some(SoundSoundEnum::EntitySquidHurt),
            "ENTITY_SQUID_SQUIRT" => Some(SoundSoundEnum::EntitySquidSquirt),
            "ENTITY_STRAY_AMBIENT" => Some(SoundSoundEnum::EntityStrayAmbient),
            "ENTITY_STRAY_DEATH" => Some(SoundSoundEnum::EntityStrayDeath),
            "ENTITY_STRAY_HURT" => Some(SoundSoundEnum::EntityStrayHurt),
            "ENTITY_STRAY_STEP" => Some(SoundSoundEnum::EntityStrayStep),
            "ENTITY_STRIDER_AMBIENT" => Some(SoundSoundEnum::EntityStriderAmbient),
            "ENTITY_STRIDER_DEATH" => Some(SoundSoundEnum::EntityStriderDeath),
            "ENTITY_STRIDER_EAT" => Some(SoundSoundEnum::EntityStriderEat),
            "ENTITY_STRIDER_HAPPY" => Some(SoundSoundEnum::EntityStriderHappy),
            "ENTITY_STRIDER_HURT" => Some(SoundSoundEnum::EntityStriderHurt),
            "ENTITY_STRIDER_RETREAT" => Some(SoundSoundEnum::EntityStriderRetreat),
            "ENTITY_STRIDER_SADDLE" => Some(SoundSoundEnum::EntityStriderSaddle),
            "ENTITY_STRIDER_STEP" => Some(SoundSoundEnum::EntityStriderStep),
            "ENTITY_STRIDER_STEP_LAVA" => Some(SoundSoundEnum::EntityStriderStepLava),
            "ENTITY_TADPOLE_DEATH" => Some(SoundSoundEnum::EntityTadpoleDeath),
            "ENTITY_TADPOLE_FLOP" => Some(SoundSoundEnum::EntityTadpoleFlop),
            "ENTITY_TADPOLE_GROW_UP" => Some(SoundSoundEnum::EntityTadpoleGrowUp),
            "ENTITY_TADPOLE_HURT" => Some(SoundSoundEnum::EntityTadpoleHurt),
            "ENTITY_TNT_PRIMED" => Some(SoundSoundEnum::EntityTntPrimed),
            "ENTITY_TROPICAL_FISH_AMBIENT" => Some(SoundSoundEnum::EntityTropicalFishAmbient),
            "ENTITY_TROPICAL_FISH_DEATH" => Some(SoundSoundEnum::EntityTropicalFishDeath),
            "ENTITY_TROPICAL_FISH_FLOP" => Some(SoundSoundEnum::EntityTropicalFishFlop),
            "ENTITY_TROPICAL_FISH_HURT" => Some(SoundSoundEnum::EntityTropicalFishHurt),
            "ENTITY_TURTLE_AMBIENT_LAND" => Some(SoundSoundEnum::EntityTurtleAmbientLand),
            "ENTITY_TURTLE_DEATH" => Some(SoundSoundEnum::EntityTurtleDeath),
            "ENTITY_TURTLE_DEATH_BABY" => Some(SoundSoundEnum::EntityTurtleDeathBaby),
            "ENTITY_TURTLE_EGG_BREAK" => Some(SoundSoundEnum::EntityTurtleEggBreak),
            "ENTITY_TURTLE_EGG_CRACK" => Some(SoundSoundEnum::EntityTurtleEggCrack),
            "ENTITY_TURTLE_EGG_HATCH" => Some(SoundSoundEnum::EntityTurtleEggHatch),
            "ENTITY_TURTLE_HURT" => Some(SoundSoundEnum::EntityTurtleHurt),
            "ENTITY_TURTLE_HURT_BABY" => Some(SoundSoundEnum::EntityTurtleHurtBaby),
            "ENTITY_TURTLE_LAY_EGG" => Some(SoundSoundEnum::EntityTurtleLayEgg),
            "ENTITY_TURTLE_SHAMBLE" => Some(SoundSoundEnum::EntityTurtleShamble),
            "ENTITY_TURTLE_SHAMBLE_BABY" => Some(SoundSoundEnum::EntityTurtleShambleBaby),
            "ENTITY_TURTLE_SWIM" => Some(SoundSoundEnum::EntityTurtleSwim),
            "ENTITY_VEX_AMBIENT" => Some(SoundSoundEnum::EntityVexAmbient),
            "ENTITY_VEX_CHARGE" => Some(SoundSoundEnum::EntityVexCharge),
            "ENTITY_VEX_DEATH" => Some(SoundSoundEnum::EntityVexDeath),
            "ENTITY_VEX_HURT" => Some(SoundSoundEnum::EntityVexHurt),
            "ENTITY_VILLAGER_AMBIENT" => Some(SoundSoundEnum::EntityVillagerAmbient),
            "ENTITY_VILLAGER_CELEBRATE" => Some(SoundSoundEnum::EntityVillagerCelebrate),
            "ENTITY_VILLAGER_DEATH" => Some(SoundSoundEnum::EntityVillagerDeath),
            "ENTITY_VILLAGER_HURT" => Some(SoundSoundEnum::EntityVillagerHurt),
            "ENTITY_VILLAGER_NO" => Some(SoundSoundEnum::EntityVillagerNo),
            "ENTITY_VILLAGER_TRADE" => Some(SoundSoundEnum::EntityVillagerTrade),
            "ENTITY_VILLAGER_WORK_ARMORER" => Some(SoundSoundEnum::EntityVillagerWorkArmorer),
            "ENTITY_VILLAGER_WORK_BUTCHER" => Some(SoundSoundEnum::EntityVillagerWorkButcher),
            "ENTITY_VILLAGER_WORK_CARTOGRAPHER" => {
                Some(SoundSoundEnum::EntityVillagerWorkCartographer)
            }
            "ENTITY_VILLAGER_WORK_CLERIC" => Some(SoundSoundEnum::EntityVillagerWorkCleric),
            "ENTITY_VILLAGER_WORK_FARMER" => Some(SoundSoundEnum::EntityVillagerWorkFarmer),
            "ENTITY_VILLAGER_WORK_FISHERMAN" => Some(SoundSoundEnum::EntityVillagerWorkFisherman),
            "ENTITY_VILLAGER_WORK_FLETCHER" => Some(SoundSoundEnum::EntityVillagerWorkFletcher),
            "ENTITY_VILLAGER_WORK_LEATHERWORKER" => {
                Some(SoundSoundEnum::EntityVillagerWorkLeatherworker)
            }
            "ENTITY_VILLAGER_WORK_LIBRARIAN" => Some(SoundSoundEnum::EntityVillagerWorkLibrarian),
            "ENTITY_VILLAGER_WORK_MASON" => Some(SoundSoundEnum::EntityVillagerWorkMason),
            "ENTITY_VILLAGER_WORK_SHEPHERD" => Some(SoundSoundEnum::EntityVillagerWorkShepherd),
            "ENTITY_VILLAGER_WORK_TOOLSMITH" => Some(SoundSoundEnum::EntityVillagerWorkToolsmith),
            "ENTITY_VILLAGER_WORK_WEAPONSMITH" => {
                Some(SoundSoundEnum::EntityVillagerWorkWeaponsmith)
            }
            "ENTITY_VILLAGER_YES" => Some(SoundSoundEnum::EntityVillagerYes),
            "ENTITY_VINDICATOR_AMBIENT" => Some(SoundSoundEnum::EntityVindicatorAmbient),
            "ENTITY_VINDICATOR_CELEBRATE" => Some(SoundSoundEnum::EntityVindicatorCelebrate),
            "ENTITY_VINDICATOR_DEATH" => Some(SoundSoundEnum::EntityVindicatorDeath),
            "ENTITY_VINDICATOR_HURT" => Some(SoundSoundEnum::EntityVindicatorHurt),
            "ENTITY_WANDERING_TRADER_AMBIENT" => Some(SoundSoundEnum::EntityWanderingTraderAmbient),
            "ENTITY_WANDERING_TRADER_DEATH" => Some(SoundSoundEnum::EntityWanderingTraderDeath),
            "ENTITY_WANDERING_TRADER_DISAPPEARED" => {
                Some(SoundSoundEnum::EntityWanderingTraderDisappeared)
            }
            "ENTITY_WANDERING_TRADER_DRINK_MILK" => {
                Some(SoundSoundEnum::EntityWanderingTraderDrinkMilk)
            }
            "ENTITY_WANDERING_TRADER_DRINK_POTION" => {
                Some(SoundSoundEnum::EntityWanderingTraderDrinkPotion)
            }
            "ENTITY_WANDERING_TRADER_HURT" => Some(SoundSoundEnum::EntityWanderingTraderHurt),
            "ENTITY_WANDERING_TRADER_NO" => Some(SoundSoundEnum::EntityWanderingTraderNo),
            "ENTITY_WANDERING_TRADER_REAPPEARED" => {
                Some(SoundSoundEnum::EntityWanderingTraderReappeared)
            }
            "ENTITY_WANDERING_TRADER_TRADE" => Some(SoundSoundEnum::EntityWanderingTraderTrade),
            "ENTITY_WANDERING_TRADER_YES" => Some(SoundSoundEnum::EntityWanderingTraderYes),
            "ENTITY_WARDEN_AGITATED" => Some(SoundSoundEnum::EntityWardenAgitated),
            "ENTITY_WARDEN_AMBIENT" => Some(SoundSoundEnum::EntityWardenAmbient),
            "ENTITY_WARDEN_ANGRY" => Some(SoundSoundEnum::EntityWardenAngry),
            "ENTITY_WARDEN_ATTACK_IMPACT" => Some(SoundSoundEnum::EntityWardenAttackImpact),
            "ENTITY_WARDEN_DEATH" => Some(SoundSoundEnum::EntityWardenDeath),
            "ENTITY_WARDEN_DIG" => Some(SoundSoundEnum::EntityWardenDig),
            "ENTITY_WARDEN_EMERGE" => Some(SoundSoundEnum::EntityWardenEmerge),
            "ENTITY_WARDEN_HEARTBEAT" => Some(SoundSoundEnum::EntityWardenHeartbeat),
            "ENTITY_WARDEN_HURT" => Some(SoundSoundEnum::EntityWardenHurt),
            "ENTITY_WARDEN_LISTENING" => Some(SoundSoundEnum::EntityWardenListening),
            "ENTITY_WARDEN_LISTENING_ANGRY" => Some(SoundSoundEnum::EntityWardenListeningAngry),
            "ENTITY_WARDEN_NEARBY_CLOSE" => Some(SoundSoundEnum::EntityWardenNearbyClose),
            "ENTITY_WARDEN_NEARBY_CLOSER" => Some(SoundSoundEnum::EntityWardenNearbyCloser),
            "ENTITY_WARDEN_NEARBY_CLOSEST" => Some(SoundSoundEnum::EntityWardenNearbyClosest),
            "ENTITY_WARDEN_ROAR" => Some(SoundSoundEnum::EntityWardenRoar),
            "ENTITY_WARDEN_SNIFF" => Some(SoundSoundEnum::EntityWardenSniff),
            "ENTITY_WARDEN_SONIC_BOOM" => Some(SoundSoundEnum::EntityWardenSonicBoom),
            "ENTITY_WARDEN_SONIC_CHARGE" => Some(SoundSoundEnum::EntityWardenSonicCharge),
            "ENTITY_WARDEN_STEP" => Some(SoundSoundEnum::EntityWardenStep),
            "ENTITY_WARDEN_TENDRIL_CLICKS" => Some(SoundSoundEnum::EntityWardenTendrilClicks),
            "ENTITY_WITCH_AMBIENT" => Some(SoundSoundEnum::EntityWitchAmbient),
            "ENTITY_WITCH_CELEBRATE" => Some(SoundSoundEnum::EntityWitchCelebrate),
            "ENTITY_WITCH_DEATH" => Some(SoundSoundEnum::EntityWitchDeath),
            "ENTITY_WITCH_DRINK" => Some(SoundSoundEnum::EntityWitchDrink),
            "ENTITY_WITCH_HURT" => Some(SoundSoundEnum::EntityWitchHurt),
            "ENTITY_WITCH_THROW" => Some(SoundSoundEnum::EntityWitchThrow),
            "ENTITY_WITHER_AMBIENT" => Some(SoundSoundEnum::EntityWitherAmbient),
            "ENTITY_WITHER_BREAK_BLOCK" => Some(SoundSoundEnum::EntityWitherBreakBlock),
            "ENTITY_WITHER_DEATH" => Some(SoundSoundEnum::EntityWitherDeath),
            "ENTITY_WITHER_HURT" => Some(SoundSoundEnum::EntityWitherHurt),
            "ENTITY_WITHER_SHOOT" => Some(SoundSoundEnum::EntityWitherShoot),
            "ENTITY_WITHER_SKELETON_AMBIENT" => Some(SoundSoundEnum::EntityWitherSkeletonAmbient),
            "ENTITY_WITHER_SKELETON_DEATH" => Some(SoundSoundEnum::EntityWitherSkeletonDeath),
            "ENTITY_WITHER_SKELETON_HURT" => Some(SoundSoundEnum::EntityWitherSkeletonHurt),
            "ENTITY_WITHER_SKELETON_STEP" => Some(SoundSoundEnum::EntityWitherSkeletonStep),
            "ENTITY_WITHER_SPAWN" => Some(SoundSoundEnum::EntityWitherSpawn),
            "ENTITY_WOLF_AMBIENT" => Some(SoundSoundEnum::EntityWolfAmbient),
            "ENTITY_WOLF_DEATH" => Some(SoundSoundEnum::EntityWolfDeath),
            "ENTITY_WOLF_GROWL" => Some(SoundSoundEnum::EntityWolfGrowl),
            "ENTITY_WOLF_HOWL" => Some(SoundSoundEnum::EntityWolfHowl),
            "ENTITY_WOLF_HURT" => Some(SoundSoundEnum::EntityWolfHurt),
            "ENTITY_WOLF_PANT" => Some(SoundSoundEnum::EntityWolfPant),
            "ENTITY_WOLF_SHAKE" => Some(SoundSoundEnum::EntityWolfShake),
            "ENTITY_WOLF_STEP" => Some(SoundSoundEnum::EntityWolfStep),
            "ENTITY_WOLF_WHINE" => Some(SoundSoundEnum::EntityWolfWhine),
            "ENTITY_ZOGLIN_AMBIENT" => Some(SoundSoundEnum::EntityZoglinAmbient),
            "ENTITY_ZOGLIN_ANGRY" => Some(SoundSoundEnum::EntityZoglinAngry),
            "ENTITY_ZOGLIN_ATTACK" => Some(SoundSoundEnum::EntityZoglinAttack),
            "ENTITY_ZOGLIN_DEATH" => Some(SoundSoundEnum::EntityZoglinDeath),
            "ENTITY_ZOGLIN_HURT" => Some(SoundSoundEnum::EntityZoglinHurt),
            "ENTITY_ZOGLIN_STEP" => Some(SoundSoundEnum::EntityZoglinStep),
            "ENTITY_ZOMBIE_AMBIENT" => Some(SoundSoundEnum::EntityZombieAmbient),
            "ENTITY_ZOMBIE_ATTACK_IRON_DOOR" => Some(SoundSoundEnum::EntityZombieAttackIronDoor),
            "ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR" => {
                Some(SoundSoundEnum::EntityZombieAttackWoodenDoor)
            }
            "ENTITY_ZOMBIE_BREAK_WOODEN_DOOR" => Some(SoundSoundEnum::EntityZombieBreakWoodenDoor),
            "ENTITY_ZOMBIE_CONVERTED_TO_DROWNED" => {
                Some(SoundSoundEnum::EntityZombieConvertedToDrowned)
            }
            "ENTITY_ZOMBIE_DEATH" => Some(SoundSoundEnum::EntityZombieDeath),
            "ENTITY_ZOMBIE_DESTROY_EGG" => Some(SoundSoundEnum::EntityZombieDestroyEgg),
            "ENTITY_ZOMBIE_HORSE_AMBIENT" => Some(SoundSoundEnum::EntityZombieHorseAmbient),
            "ENTITY_ZOMBIE_HORSE_DEATH" => Some(SoundSoundEnum::EntityZombieHorseDeath),
            "ENTITY_ZOMBIE_HORSE_HURT" => Some(SoundSoundEnum::EntityZombieHorseHurt),
            "ENTITY_ZOMBIE_HURT" => Some(SoundSoundEnum::EntityZombieHurt),
            "ENTITY_ZOMBIE_INFECT" => Some(SoundSoundEnum::EntityZombieInfect),
            "ENTITY_ZOMBIE_STEP" => Some(SoundSoundEnum::EntityZombieStep),
            "ENTITY_ZOMBIE_VILLAGER_AMBIENT" => Some(SoundSoundEnum::EntityZombieVillagerAmbient),
            "ENTITY_ZOMBIE_VILLAGER_CONVERTED" => {
                Some(SoundSoundEnum::EntityZombieVillagerConverted)
            }
            "ENTITY_ZOMBIE_VILLAGER_CURE" => Some(SoundSoundEnum::EntityZombieVillagerCure),
            "ENTITY_ZOMBIE_VILLAGER_DEATH" => Some(SoundSoundEnum::EntityZombieVillagerDeath),
            "ENTITY_ZOMBIE_VILLAGER_HURT" => Some(SoundSoundEnum::EntityZombieVillagerHurt),
            "ENTITY_ZOMBIE_VILLAGER_STEP" => Some(SoundSoundEnum::EntityZombieVillagerStep),
            "ENTITY_ZOMBIFIED_PIGLIN_AMBIENT" => Some(SoundSoundEnum::EntityZombifiedPiglinAmbient),
            "ENTITY_ZOMBIFIED_PIGLIN_ANGRY" => Some(SoundSoundEnum::EntityZombifiedPiglinAngry),
            "ENTITY_ZOMBIFIED_PIGLIN_DEATH" => Some(SoundSoundEnum::EntityZombifiedPiglinDeath),
            "ENTITY_ZOMBIFIED_PIGLIN_HURT" => Some(SoundSoundEnum::EntityZombifiedPiglinHurt),
            "EVENT_RAID_HORN" => Some(SoundSoundEnum::EventRaidHorn),
            "INTENTIONALLY_EMPTY" => Some(SoundSoundEnum::IntentionallyEmpty),
            "ITEM_ARMOR_EQUIP_CHAIN" => Some(SoundSoundEnum::ItemArmorEquipChain),
            "ITEM_ARMOR_EQUIP_DIAMOND" => Some(SoundSoundEnum::ItemArmorEquipDiamond),
            "ITEM_ARMOR_EQUIP_ELYTRA" => Some(SoundSoundEnum::ItemArmorEquipElytra),
            "ITEM_ARMOR_EQUIP_GENERIC" => Some(SoundSoundEnum::ItemArmorEquipGeneric),
            "ITEM_ARMOR_EQUIP_GOLD" => Some(SoundSoundEnum::ItemArmorEquipGold),
            "ITEM_ARMOR_EQUIP_IRON" => Some(SoundSoundEnum::ItemArmorEquipIron),
            "ITEM_ARMOR_EQUIP_LEATHER" => Some(SoundSoundEnum::ItemArmorEquipLeather),
            "ITEM_ARMOR_EQUIP_NETHERITE" => Some(SoundSoundEnum::ItemArmorEquipNetherite),
            "ITEM_ARMOR_EQUIP_TURTLE" => Some(SoundSoundEnum::ItemArmorEquipTurtle),
            "ITEM_AXE_SCRAPE" => Some(SoundSoundEnum::ItemAxeScrape),
            "ITEM_AXE_STRIP" => Some(SoundSoundEnum::ItemAxeStrip),
            "ITEM_AXE_WAX_OFF" => Some(SoundSoundEnum::ItemAxeWaxOff),
            "ITEM_BONE_MEAL_USE" => Some(SoundSoundEnum::ItemBoneMealUse),
            "ITEM_BOOK_PAGE_TURN" => Some(SoundSoundEnum::ItemBookPageTurn),
            "ITEM_BOOK_PUT" => Some(SoundSoundEnum::ItemBookPut),
            "ITEM_BOTTLE_EMPTY" => Some(SoundSoundEnum::ItemBottleEmpty),
            "ITEM_BOTTLE_FILL" => Some(SoundSoundEnum::ItemBottleFill),
            "ITEM_BOTTLE_FILL_DRAGONBREATH" => Some(SoundSoundEnum::ItemBottleFillDragonbreath),
            "ITEM_BRUSH_BRUSHING_GENERIC" => Some(SoundSoundEnum::ItemBrushBrushingGeneric),
            "ITEM_BRUSH_BRUSHING_GRAVEL" => Some(SoundSoundEnum::ItemBrushBrushingGravel),
            "ITEM_BRUSH_BRUSHING_GRAVEL_COMPLETE" => {
                Some(SoundSoundEnum::ItemBrushBrushingGravelComplete)
            }
            "ITEM_BRUSH_BRUSHING_SAND" => Some(SoundSoundEnum::ItemBrushBrushingSand),
            "ITEM_BRUSH_BRUSHING_SAND_COMPLETE" => {
                Some(SoundSoundEnum::ItemBrushBrushingSandComplete)
            }
            "ITEM_BUCKET_EMPTY" => Some(SoundSoundEnum::ItemBucketEmpty),
            "ITEM_BUCKET_EMPTY_AXOLOTL" => Some(SoundSoundEnum::ItemBucketEmptyAxolotl),
            "ITEM_BUCKET_EMPTY_FISH" => Some(SoundSoundEnum::ItemBucketEmptyFish),
            "ITEM_BUCKET_EMPTY_LAVA" => Some(SoundSoundEnum::ItemBucketEmptyLava),
            "ITEM_BUCKET_EMPTY_POWDER_SNOW" => Some(SoundSoundEnum::ItemBucketEmptyPowderSnow),
            "ITEM_BUCKET_EMPTY_TADPOLE" => Some(SoundSoundEnum::ItemBucketEmptyTadpole),
            "ITEM_BUCKET_FILL" => Some(SoundSoundEnum::ItemBucketFill),
            "ITEM_BUCKET_FILL_AXOLOTL" => Some(SoundSoundEnum::ItemBucketFillAxolotl),
            "ITEM_BUCKET_FILL_FISH" => Some(SoundSoundEnum::ItemBucketFillFish),
            "ITEM_BUCKET_FILL_LAVA" => Some(SoundSoundEnum::ItemBucketFillLava),
            "ITEM_BUCKET_FILL_POWDER_SNOW" => Some(SoundSoundEnum::ItemBucketFillPowderSnow),
            "ITEM_BUCKET_FILL_TADPOLE" => Some(SoundSoundEnum::ItemBucketFillTadpole),
            "ITEM_BUNDLE_DROP_CONTENTS" => Some(SoundSoundEnum::ItemBundleDropContents),
            "ITEM_BUNDLE_INSERT" => Some(SoundSoundEnum::ItemBundleInsert),
            "ITEM_BUNDLE_REMOVE_ONE" => Some(SoundSoundEnum::ItemBundleRemoveOne),
            "ITEM_CHORUS_FRUIT_TELEPORT" => Some(SoundSoundEnum::ItemChorusFruitTeleport),
            "ITEM_CROP_PLANT" => Some(SoundSoundEnum::ItemCropPlant),
            "ITEM_CROSSBOW_HIT" => Some(SoundSoundEnum::ItemCrossbowHit),
            "ITEM_CROSSBOW_LOADING_END" => Some(SoundSoundEnum::ItemCrossbowLoadingEnd),
            "ITEM_CROSSBOW_LOADING_MIDDLE" => Some(SoundSoundEnum::ItemCrossbowLoadingMiddle),
            "ITEM_CROSSBOW_LOADING_START" => Some(SoundSoundEnum::ItemCrossbowLoadingStart),
            "ITEM_CROSSBOW_QUICK_CHARGE_1" => Some(SoundSoundEnum::ItemCrossbowQuickCharge1),
            "ITEM_CROSSBOW_QUICK_CHARGE_2" => Some(SoundSoundEnum::ItemCrossbowQuickCharge2),
            "ITEM_CROSSBOW_QUICK_CHARGE_3" => Some(SoundSoundEnum::ItemCrossbowQuickCharge3),
            "ITEM_CROSSBOW_SHOOT" => Some(SoundSoundEnum::ItemCrossbowShoot),
            "ITEM_DYE_USE" => Some(SoundSoundEnum::ItemDyeUse),
            "ITEM_ELYTRA_FLYING" => Some(SoundSoundEnum::ItemElytraFlying),
            "ITEM_FIRECHARGE_USE" => Some(SoundSoundEnum::ItemFirechargeUse),
            "ITEM_FLINTANDSTEEL_USE" => Some(SoundSoundEnum::ItemFlintandsteelUse),
            "ITEM_GLOW_INK_SAC_USE" => Some(SoundSoundEnum::ItemGlowInkSacUse),
            "ITEM_GOAT_HORN_PLAY" => Some(SoundSoundEnum::ItemGoatHornPlay),
            "ITEM_GOAT_HORN_SOUND_0" => Some(SoundSoundEnum::ItemGoatHornSound0),
            "ITEM_GOAT_HORN_SOUND_1" => Some(SoundSoundEnum::ItemGoatHornSound1),
            "ITEM_GOAT_HORN_SOUND_2" => Some(SoundSoundEnum::ItemGoatHornSound2),
            "ITEM_GOAT_HORN_SOUND_3" => Some(SoundSoundEnum::ItemGoatHornSound3),
            "ITEM_GOAT_HORN_SOUND_4" => Some(SoundSoundEnum::ItemGoatHornSound4),
            "ITEM_GOAT_HORN_SOUND_5" => Some(SoundSoundEnum::ItemGoatHornSound5),
            "ITEM_GOAT_HORN_SOUND_6" => Some(SoundSoundEnum::ItemGoatHornSound6),
            "ITEM_GOAT_HORN_SOUND_7" => Some(SoundSoundEnum::ItemGoatHornSound7),
            "ITEM_HOE_TILL" => Some(SoundSoundEnum::ItemHoeTill),
            "ITEM_HONEYCOMB_WAX_ON" => Some(SoundSoundEnum::ItemHoneycombWaxOn),
            "ITEM_HONEY_BOTTLE_DRINK" => Some(SoundSoundEnum::ItemHoneyBottleDrink),
            "ITEM_INK_SAC_USE" => Some(SoundSoundEnum::ItemInkSacUse),
            "ITEM_LODESTONE_COMPASS_LOCK" => Some(SoundSoundEnum::ItemLodestoneCompassLock),
            "ITEM_NETHER_WART_PLANT" => Some(SoundSoundEnum::ItemNetherWartPlant),
            "ITEM_SHIELD_BLOCK" => Some(SoundSoundEnum::ItemShieldBlock),
            "ITEM_SHIELD_BREAK" => Some(SoundSoundEnum::ItemShieldBreak),
            "ITEM_SHOVEL_FLATTEN" => Some(SoundSoundEnum::ItemShovelFlatten),
            "ITEM_SPYGLASS_STOP_USING" => Some(SoundSoundEnum::ItemSpyglassStopUsing),
            "ITEM_SPYGLASS_USE" => Some(SoundSoundEnum::ItemSpyglassUse),
            "ITEM_TOTEM_USE" => Some(SoundSoundEnum::ItemTotemUse),
            "ITEM_TRIDENT_HIT" => Some(SoundSoundEnum::ItemTridentHit),
            "ITEM_TRIDENT_HIT_GROUND" => Some(SoundSoundEnum::ItemTridentHitGround),
            "ITEM_TRIDENT_RETURN" => Some(SoundSoundEnum::ItemTridentReturn),
            "ITEM_TRIDENT_RIPTIDE_1" => Some(SoundSoundEnum::ItemTridentRiptide1),
            "ITEM_TRIDENT_RIPTIDE_2" => Some(SoundSoundEnum::ItemTridentRiptide2),
            "ITEM_TRIDENT_RIPTIDE_3" => Some(SoundSoundEnum::ItemTridentRiptide3),
            "ITEM_TRIDENT_THROW" => Some(SoundSoundEnum::ItemTridentThrow),
            "ITEM_TRIDENT_THUNDER" => Some(SoundSoundEnum::ItemTridentThunder),
            "MUSIC_CREATIVE" => Some(SoundSoundEnum::MusicCreative),
            "MUSIC_CREDITS" => Some(SoundSoundEnum::MusicCredits),
            "MUSIC_DISC_11" => Some(SoundSoundEnum::MusicDisc11),
            "MUSIC_DISC_13" => Some(SoundSoundEnum::MusicDisc13),
            "MUSIC_DISC_5" => Some(SoundSoundEnum::MusicDisc5),
            "MUSIC_DISC_BLOCKS" => Some(SoundSoundEnum::MusicDiscBlocks),
            "MUSIC_DISC_CAT" => Some(SoundSoundEnum::MusicDiscCat),
            "MUSIC_DISC_CHIRP" => Some(SoundSoundEnum::MusicDiscChirp),
            "MUSIC_DISC_FAR" => Some(SoundSoundEnum::MusicDiscFar),
            "MUSIC_DISC_MALL" => Some(SoundSoundEnum::MusicDiscMall),
            "MUSIC_DISC_MELLOHI" => Some(SoundSoundEnum::MusicDiscMellohi),
            "MUSIC_DISC_OTHERSIDE" => Some(SoundSoundEnum::MusicDiscOtherside),
            "MUSIC_DISC_PIGSTEP" => Some(SoundSoundEnum::MusicDiscPigstep),
            "MUSIC_DISC_RELIC" => Some(SoundSoundEnum::MusicDiscRelic),
            "MUSIC_DISC_STAL" => Some(SoundSoundEnum::MusicDiscStal),
            "MUSIC_DISC_STRAD" => Some(SoundSoundEnum::MusicDiscStrad),
            "MUSIC_DISC_WAIT" => Some(SoundSoundEnum::MusicDiscWait),
            "MUSIC_DISC_WARD" => Some(SoundSoundEnum::MusicDiscWard),
            "MUSIC_DRAGON" => Some(SoundSoundEnum::MusicDragon),
            "MUSIC_END" => Some(SoundSoundEnum::MusicEnd),
            "MUSIC_GAME" => Some(SoundSoundEnum::MusicGame),
            "MUSIC_MENU" => Some(SoundSoundEnum::MusicMenu),
            "MUSIC_NETHER_BASALT_DELTAS" => Some(SoundSoundEnum::MusicNetherBasaltDeltas),
            "MUSIC_NETHER_CRIMSON_FOREST" => Some(SoundSoundEnum::MusicNetherCrimsonForest),
            "MUSIC_NETHER_NETHER_WASTES" => Some(SoundSoundEnum::MusicNetherNetherWastes),
            "MUSIC_NETHER_SOUL_SAND_VALLEY" => Some(SoundSoundEnum::MusicNetherSoulSandValley),
            "MUSIC_NETHER_WARPED_FOREST" => Some(SoundSoundEnum::MusicNetherWarpedForest),
            "MUSIC_OVERWORLD_BADLANDS" => Some(SoundSoundEnum::MusicOverworldBadlands),
            "MUSIC_OVERWORLD_BAMBOO_JUNGLE" => Some(SoundSoundEnum::MusicOverworldBambooJungle),
            "MUSIC_OVERWORLD_CHERRY_GROVE" => Some(SoundSoundEnum::MusicOverworldCherryGrove),
            "MUSIC_OVERWORLD_DEEP_DARK" => Some(SoundSoundEnum::MusicOverworldDeepDark),
            "MUSIC_OVERWORLD_DESERT" => Some(SoundSoundEnum::MusicOverworldDesert),
            "MUSIC_OVERWORLD_DRIPSTONE_CAVES" => Some(SoundSoundEnum::MusicOverworldDripstoneCaves),
            "MUSIC_OVERWORLD_FLOWER_FOREST" => Some(SoundSoundEnum::MusicOverworldFlowerForest),
            "MUSIC_OVERWORLD_FOREST" => Some(SoundSoundEnum::MusicOverworldForest),
            "MUSIC_OVERWORLD_FROZEN_PEAKS" => Some(SoundSoundEnum::MusicOverworldFrozenPeaks),
            "MUSIC_OVERWORLD_GROVE" => Some(SoundSoundEnum::MusicOverworldGrove),
            "MUSIC_OVERWORLD_JAGGED_PEAKS" => Some(SoundSoundEnum::MusicOverworldJaggedPeaks),
            "MUSIC_OVERWORLD_JUNGLE" => Some(SoundSoundEnum::MusicOverworldJungle),
            "MUSIC_OVERWORLD_LUSH_CAVES" => Some(SoundSoundEnum::MusicOverworldLushCaves),
            "MUSIC_OVERWORLD_MEADOW" => Some(SoundSoundEnum::MusicOverworldMeadow),
            "MUSIC_OVERWORLD_OLD_GROWTH_TAIGA" => {
                Some(SoundSoundEnum::MusicOverworldOldGrowthTaiga)
            }
            "MUSIC_OVERWORLD_SNOWY_SLOPES" => Some(SoundSoundEnum::MusicOverworldSnowySlopes),
            "MUSIC_OVERWORLD_SPARSE_JUNGLE" => Some(SoundSoundEnum::MusicOverworldSparseJungle),
            "MUSIC_OVERWORLD_STONY_PEAKS" => Some(SoundSoundEnum::MusicOverworldStonyPeaks),
            "MUSIC_OVERWORLD_SWAMP" => Some(SoundSoundEnum::MusicOverworldSwamp),
            "MUSIC_UNDER_WATER" => Some(SoundSoundEnum::MusicUnderWater),
            "PARTICLE_SOUL_ESCAPE" => Some(SoundSoundEnum::ParticleSoulEscape),
            "UI_BUTTON_CLICK" => Some(SoundSoundEnum::UiButtonClick),
            "UI_CARTOGRAPHY_TABLE_TAKE_RESULT" => {
                Some(SoundSoundEnum::UiCartographyTableTakeResult)
            }
            "UI_LOOM_SELECT_PATTERN" => Some(SoundSoundEnum::UiLoomSelectPattern),
            "UI_LOOM_TAKE_RESULT" => Some(SoundSoundEnum::UiLoomTakeResult),
            "UI_STONECUTTER_SELECT_RECIPE" => Some(SoundSoundEnum::UiStonecutterSelectRecipe),
            "UI_STONECUTTER_TAKE_RESULT" => Some(SoundSoundEnum::UiStonecutterTakeResult),
            "UI_TOAST_CHALLENGE_COMPLETE" => Some(SoundSoundEnum::UiToastChallengeComplete),
            "UI_TOAST_IN" => Some(SoundSoundEnum::UiToastIn),
            "UI_TOAST_OUT" => Some(SoundSoundEnum::UiToastOut),
            "WEATHER_RAIN" => Some(SoundSoundEnum::WeatherRain),
            "WEATHER_RAIN_ABOVE" => Some(SoundSoundEnum::WeatherRainAbove),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<SoundSound<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Sound$Sound");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Sound$Sound;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        SoundSound::from_raw(
            &jni,
            raw_obj,
            SoundSound::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum StatisticEnum {
    DamageDealt,
    DamageTaken,
    Deaths,
    MobKills,
    PlayerKills,
    FishCaught,
    AnimalsBred,
    LeaveGame,
    Jump,
    DropCount,
    Drop,
    Pickup,
    PlayOneMinute,
    TotalWorldTime,
    WalkOneCm,
    WalkOnWaterOneCm,
    FallOneCm,
    SneakTime,
    ClimbOneCm,
    FlyOneCm,
    WalkUnderWaterOneCm,
    MinecartOneCm,
    BoatOneCm,
    PigOneCm,
    HorseOneCm,
    SprintOneCm,
    CrouchOneCm,
    AviateOneCm,
    MineBlock,
    UseItem,
    BreakItem,
    CraftItem,
    KillEntity,
    EntityKilledBy,
    TimeSinceDeath,
    TalkedToVillager,
    TradedWithVillager,
    CakeSlicesEaten,
    CauldronFilled,
    CauldronUsed,
    ArmorCleaned,
    BannerCleaned,
    BrewingstandInteraction,
    BeaconInteraction,
    DropperInspected,
    HopperInspected,
    DispenserInspected,
    NoteblockPlayed,
    NoteblockTuned,
    FlowerPotted,
    TrappedChestTriggered,
    EnderchestOpened,
    ItemEnchanted,
    RecordPlayed,
    FurnaceInteraction,
    CraftingTableInteraction,
    ChestOpened,
    SleepInBed,
    ShulkerBoxOpened,
    TimeSinceRest,
    SwimOneCm,
    DamageDealtAbsorbed,
    DamageDealtResisted,
    DamageBlockedByShield,
    DamageAbsorbed,
    DamageResisted,
    CleanShulkerBox,
    OpenBarrel,
    InteractWithBlastFurnace,
    InteractWithSmoker,
    InteractWithLectern,
    InteractWithCampfire,
    InteractWithCartographyTable,
    InteractWithLoom,
    InteractWithStonecutter,
    BellRing,
    RaidTrigger,
    RaidWin,
    InteractWithAnvil,
    InteractWithGrindstone,
    TargetHit,
    InteractWithSmithingTable,
    StriderOneCm,
}
impl std::fmt::Display for StatisticEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            StatisticEnum::DamageDealt => f.write_str("DAMAGE_DEALT"),
            StatisticEnum::DamageTaken => f.write_str("DAMAGE_TAKEN"),
            StatisticEnum::Deaths => f.write_str("DEATHS"),
            StatisticEnum::MobKills => f.write_str("MOB_KILLS"),
            StatisticEnum::PlayerKills => f.write_str("PLAYER_KILLS"),
            StatisticEnum::FishCaught => f.write_str("FISH_CAUGHT"),
            StatisticEnum::AnimalsBred => f.write_str("ANIMALS_BRED"),
            StatisticEnum::LeaveGame => f.write_str("LEAVE_GAME"),
            StatisticEnum::Jump => f.write_str("JUMP"),
            StatisticEnum::DropCount => f.write_str("DROP_COUNT"),
            StatisticEnum::Drop => f.write_str("DROP"),
            StatisticEnum::Pickup => f.write_str("PICKUP"),
            StatisticEnum::PlayOneMinute => f.write_str("PLAY_ONE_MINUTE"),
            StatisticEnum::TotalWorldTime => f.write_str("TOTAL_WORLD_TIME"),
            StatisticEnum::WalkOneCm => f.write_str("WALK_ONE_CM"),
            StatisticEnum::WalkOnWaterOneCm => f.write_str("WALK_ON_WATER_ONE_CM"),
            StatisticEnum::FallOneCm => f.write_str("FALL_ONE_CM"),
            StatisticEnum::SneakTime => f.write_str("SNEAK_TIME"),
            StatisticEnum::ClimbOneCm => f.write_str("CLIMB_ONE_CM"),
            StatisticEnum::FlyOneCm => f.write_str("FLY_ONE_CM"),
            StatisticEnum::WalkUnderWaterOneCm => f.write_str("WALK_UNDER_WATER_ONE_CM"),
            StatisticEnum::MinecartOneCm => f.write_str("MINECART_ONE_CM"),
            StatisticEnum::BoatOneCm => f.write_str("BOAT_ONE_CM"),
            StatisticEnum::PigOneCm => f.write_str("PIG_ONE_CM"),
            StatisticEnum::HorseOneCm => f.write_str("HORSE_ONE_CM"),
            StatisticEnum::SprintOneCm => f.write_str("SPRINT_ONE_CM"),
            StatisticEnum::CrouchOneCm => f.write_str("CROUCH_ONE_CM"),
            StatisticEnum::AviateOneCm => f.write_str("AVIATE_ONE_CM"),
            StatisticEnum::MineBlock => f.write_str("MINE_BLOCK"),
            StatisticEnum::UseItem => f.write_str("USE_ITEM"),
            StatisticEnum::BreakItem => f.write_str("BREAK_ITEM"),
            StatisticEnum::CraftItem => f.write_str("CRAFT_ITEM"),
            StatisticEnum::KillEntity => f.write_str("KILL_ENTITY"),
            StatisticEnum::EntityKilledBy => f.write_str("ENTITY_KILLED_BY"),
            StatisticEnum::TimeSinceDeath => f.write_str("TIME_SINCE_DEATH"),
            StatisticEnum::TalkedToVillager => f.write_str("TALKED_TO_VILLAGER"),
            StatisticEnum::TradedWithVillager => f.write_str("TRADED_WITH_VILLAGER"),
            StatisticEnum::CakeSlicesEaten => f.write_str("CAKE_SLICES_EATEN"),
            StatisticEnum::CauldronFilled => f.write_str("CAULDRON_FILLED"),
            StatisticEnum::CauldronUsed => f.write_str("CAULDRON_USED"),
            StatisticEnum::ArmorCleaned => f.write_str("ARMOR_CLEANED"),
            StatisticEnum::BannerCleaned => f.write_str("BANNER_CLEANED"),
            StatisticEnum::BrewingstandInteraction => f.write_str("BREWINGSTAND_INTERACTION"),
            StatisticEnum::BeaconInteraction => f.write_str("BEACON_INTERACTION"),
            StatisticEnum::DropperInspected => f.write_str("DROPPER_INSPECTED"),
            StatisticEnum::HopperInspected => f.write_str("HOPPER_INSPECTED"),
            StatisticEnum::DispenserInspected => f.write_str("DISPENSER_INSPECTED"),
            StatisticEnum::NoteblockPlayed => f.write_str("NOTEBLOCK_PLAYED"),
            StatisticEnum::NoteblockTuned => f.write_str("NOTEBLOCK_TUNED"),
            StatisticEnum::FlowerPotted => f.write_str("FLOWER_POTTED"),
            StatisticEnum::TrappedChestTriggered => f.write_str("TRAPPED_CHEST_TRIGGERED"),
            StatisticEnum::EnderchestOpened => f.write_str("ENDERCHEST_OPENED"),
            StatisticEnum::ItemEnchanted => f.write_str("ITEM_ENCHANTED"),
            StatisticEnum::RecordPlayed => f.write_str("RECORD_PLAYED"),
            StatisticEnum::FurnaceInteraction => f.write_str("FURNACE_INTERACTION"),
            StatisticEnum::CraftingTableInteraction => f.write_str("CRAFTING_TABLE_INTERACTION"),
            StatisticEnum::ChestOpened => f.write_str("CHEST_OPENED"),
            StatisticEnum::SleepInBed => f.write_str("SLEEP_IN_BED"),
            StatisticEnum::ShulkerBoxOpened => f.write_str("SHULKER_BOX_OPENED"),
            StatisticEnum::TimeSinceRest => f.write_str("TIME_SINCE_REST"),
            StatisticEnum::SwimOneCm => f.write_str("SWIM_ONE_CM"),
            StatisticEnum::DamageDealtAbsorbed => f.write_str("DAMAGE_DEALT_ABSORBED"),
            StatisticEnum::DamageDealtResisted => f.write_str("DAMAGE_DEALT_RESISTED"),
            StatisticEnum::DamageBlockedByShield => f.write_str("DAMAGE_BLOCKED_BY_SHIELD"),
            StatisticEnum::DamageAbsorbed => f.write_str("DAMAGE_ABSORBED"),
            StatisticEnum::DamageResisted => f.write_str("DAMAGE_RESISTED"),
            StatisticEnum::CleanShulkerBox => f.write_str("CLEAN_SHULKER_BOX"),
            StatisticEnum::OpenBarrel => f.write_str("OPEN_BARREL"),
            StatisticEnum::InteractWithBlastFurnace => f.write_str("INTERACT_WITH_BLAST_FURNACE"),
            StatisticEnum::InteractWithSmoker => f.write_str("INTERACT_WITH_SMOKER"),
            StatisticEnum::InteractWithLectern => f.write_str("INTERACT_WITH_LECTERN"),
            StatisticEnum::InteractWithCampfire => f.write_str("INTERACT_WITH_CAMPFIRE"),
            StatisticEnum::InteractWithCartographyTable => {
                f.write_str("INTERACT_WITH_CARTOGRAPHY_TABLE")
            }
            StatisticEnum::InteractWithLoom => f.write_str("INTERACT_WITH_LOOM"),
            StatisticEnum::InteractWithStonecutter => f.write_str("INTERACT_WITH_STONECUTTER"),
            StatisticEnum::BellRing => f.write_str("BELL_RING"),
            StatisticEnum::RaidTrigger => f.write_str("RAID_TRIGGER"),
            StatisticEnum::RaidWin => f.write_str("RAID_WIN"),
            StatisticEnum::InteractWithAnvil => f.write_str("INTERACT_WITH_ANVIL"),
            StatisticEnum::InteractWithGrindstone => f.write_str("INTERACT_WITH_GRINDSTONE"),
            StatisticEnum::TargetHit => f.write_str("TARGET_HIT"),
            StatisticEnum::InteractWithSmithingTable => f.write_str("INTERACT_WITH_SMITHING_TABLE"),
            StatisticEnum::StriderOneCm => f.write_str("STRIDER_ONE_CM"),
        }
    }
}
impl<'mc> std::fmt::Display for Statistic<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Statistic<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub StatisticEnum,
);
impl<'mc> std::ops::Deref for Statistic<'mc> {
    type Target = StatisticEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}
#[derive(PartialEq, Eq)]
pub enum StatisticTypeEnum {
    Untyped,
    Item,
    Block,
    Entity,
}
impl std::fmt::Display for StatisticTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            StatisticTypeEnum::Untyped => f.write_str("UNTYPED"),
            StatisticTypeEnum::Item => f.write_str("ITEM"),
            StatisticTypeEnum::Block => f.write_str("BLOCK"),
            StatisticTypeEnum::Entity => f.write_str("ENTITY"),
        }
    }
}
impl<'mc> std::fmt::Display for StatisticType<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct StatisticType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub StatisticTypeEnum,
);
impl<'mc> std::ops::Deref for StatisticType<'mc> {
    type Target = StatisticTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for StatisticType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for StatisticType<'mc> {
    type Enum = StatisticTypeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate StatisticType from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Statistic$Type")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a StatisticType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> StatisticType<'mc> {
    pub const UNTYPED: StatisticTypeEnum = StatisticTypeEnum::Untyped;
    pub const ITEM: StatisticTypeEnum = StatisticTypeEnum::Item;
    pub const BLOCK: StatisticTypeEnum = StatisticTypeEnum::Block;
    pub const ENTITY: StatisticTypeEnum = StatisticTypeEnum::Entity;
    pub fn from_string(str: String) -> std::option::Option<StatisticTypeEnum> {
        match str.as_str() {
            "UNTYPED" => Some(StatisticTypeEnum::Untyped),
            "ITEM" => Some(StatisticTypeEnum::Item),
            "BLOCK" => Some(StatisticTypeEnum::Block),
            "ENTITY" => Some(StatisticTypeEnum::Entity),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<StatisticType<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Statistic$Type");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Statistic$Type;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        StatisticType::from_raw(
            &jni,
            raw_obj,
            StatisticType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }

    //
}

impl<'mc> JNIRaw<'mc> for Statistic<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Statistic<'mc> {
    type Enum = StatisticEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Statistic from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Statistic")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Statistic object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Statistic<'mc> {
    pub const DAMAGE_DEALT: StatisticEnum = StatisticEnum::DamageDealt;
    pub const DAMAGE_TAKEN: StatisticEnum = StatisticEnum::DamageTaken;
    pub const DEATHS: StatisticEnum = StatisticEnum::Deaths;
    pub const MOB_KILLS: StatisticEnum = StatisticEnum::MobKills;
    pub const PLAYER_KILLS: StatisticEnum = StatisticEnum::PlayerKills;
    pub const FISH_CAUGHT: StatisticEnum = StatisticEnum::FishCaught;
    pub const ANIMALS_BRED: StatisticEnum = StatisticEnum::AnimalsBred;
    pub const LEAVE_GAME: StatisticEnum = StatisticEnum::LeaveGame;
    pub const JUMP: StatisticEnum = StatisticEnum::Jump;
    pub const DROP_COUNT: StatisticEnum = StatisticEnum::DropCount;
    pub const DROP: StatisticEnum = StatisticEnum::Drop;
    pub const PICKUP: StatisticEnum = StatisticEnum::Pickup;
    pub const PLAY_ONE_MINUTE: StatisticEnum = StatisticEnum::PlayOneMinute;
    pub const TOTAL_WORLD_TIME: StatisticEnum = StatisticEnum::TotalWorldTime;
    pub const WALK_ONE_CM: StatisticEnum = StatisticEnum::WalkOneCm;
    pub const WALK_ON_WATER_ONE_CM: StatisticEnum = StatisticEnum::WalkOnWaterOneCm;
    pub const FALL_ONE_CM: StatisticEnum = StatisticEnum::FallOneCm;
    pub const SNEAK_TIME: StatisticEnum = StatisticEnum::SneakTime;
    pub const CLIMB_ONE_CM: StatisticEnum = StatisticEnum::ClimbOneCm;
    pub const FLY_ONE_CM: StatisticEnum = StatisticEnum::FlyOneCm;
    pub const WALK_UNDER_WATER_ONE_CM: StatisticEnum = StatisticEnum::WalkUnderWaterOneCm;
    pub const MINECART_ONE_CM: StatisticEnum = StatisticEnum::MinecartOneCm;
    pub const BOAT_ONE_CM: StatisticEnum = StatisticEnum::BoatOneCm;
    pub const PIG_ONE_CM: StatisticEnum = StatisticEnum::PigOneCm;
    pub const HORSE_ONE_CM: StatisticEnum = StatisticEnum::HorseOneCm;
    pub const SPRINT_ONE_CM: StatisticEnum = StatisticEnum::SprintOneCm;
    pub const CROUCH_ONE_CM: StatisticEnum = StatisticEnum::CrouchOneCm;
    pub const AVIATE_ONE_CM: StatisticEnum = StatisticEnum::AviateOneCm;
    pub const MINE_BLOCK: StatisticEnum = StatisticEnum::MineBlock;
    pub const USE_ITEM: StatisticEnum = StatisticEnum::UseItem;
    pub const BREAK_ITEM: StatisticEnum = StatisticEnum::BreakItem;
    pub const CRAFT_ITEM: StatisticEnum = StatisticEnum::CraftItem;
    pub const KILL_ENTITY: StatisticEnum = StatisticEnum::KillEntity;
    pub const ENTITY_KILLED_BY: StatisticEnum = StatisticEnum::EntityKilledBy;
    pub const TIME_SINCE_DEATH: StatisticEnum = StatisticEnum::TimeSinceDeath;
    pub const TALKED_TO_VILLAGER: StatisticEnum = StatisticEnum::TalkedToVillager;
    pub const TRADED_WITH_VILLAGER: StatisticEnum = StatisticEnum::TradedWithVillager;
    pub const CAKE_SLICES_EATEN: StatisticEnum = StatisticEnum::CakeSlicesEaten;
    pub const CAULDRON_FILLED: StatisticEnum = StatisticEnum::CauldronFilled;
    pub const CAULDRON_USED: StatisticEnum = StatisticEnum::CauldronUsed;
    pub const ARMOR_CLEANED: StatisticEnum = StatisticEnum::ArmorCleaned;
    pub const BANNER_CLEANED: StatisticEnum = StatisticEnum::BannerCleaned;
    pub const BREWINGSTAND_INTERACTION: StatisticEnum = StatisticEnum::BrewingstandInteraction;
    pub const BEACON_INTERACTION: StatisticEnum = StatisticEnum::BeaconInteraction;
    pub const DROPPER_INSPECTED: StatisticEnum = StatisticEnum::DropperInspected;
    pub const HOPPER_INSPECTED: StatisticEnum = StatisticEnum::HopperInspected;
    pub const DISPENSER_INSPECTED: StatisticEnum = StatisticEnum::DispenserInspected;
    pub const NOTEBLOCK_PLAYED: StatisticEnum = StatisticEnum::NoteblockPlayed;
    pub const NOTEBLOCK_TUNED: StatisticEnum = StatisticEnum::NoteblockTuned;
    pub const FLOWER_POTTED: StatisticEnum = StatisticEnum::FlowerPotted;
    pub const TRAPPED_CHEST_TRIGGERED: StatisticEnum = StatisticEnum::TrappedChestTriggered;
    pub const ENDERCHEST_OPENED: StatisticEnum = StatisticEnum::EnderchestOpened;
    pub const ITEM_ENCHANTED: StatisticEnum = StatisticEnum::ItemEnchanted;
    pub const RECORD_PLAYED: StatisticEnum = StatisticEnum::RecordPlayed;
    pub const FURNACE_INTERACTION: StatisticEnum = StatisticEnum::FurnaceInteraction;
    pub const CRAFTING_TABLE_INTERACTION: StatisticEnum = StatisticEnum::CraftingTableInteraction;
    pub const CHEST_OPENED: StatisticEnum = StatisticEnum::ChestOpened;
    pub const SLEEP_IN_BED: StatisticEnum = StatisticEnum::SleepInBed;
    pub const SHULKER_BOX_OPENED: StatisticEnum = StatisticEnum::ShulkerBoxOpened;
    pub const TIME_SINCE_REST: StatisticEnum = StatisticEnum::TimeSinceRest;
    pub const SWIM_ONE_CM: StatisticEnum = StatisticEnum::SwimOneCm;
    pub const DAMAGE_DEALT_ABSORBED: StatisticEnum = StatisticEnum::DamageDealtAbsorbed;
    pub const DAMAGE_DEALT_RESISTED: StatisticEnum = StatisticEnum::DamageDealtResisted;
    pub const DAMAGE_BLOCKED_BY_SHIELD: StatisticEnum = StatisticEnum::DamageBlockedByShield;
    pub const DAMAGE_ABSORBED: StatisticEnum = StatisticEnum::DamageAbsorbed;
    pub const DAMAGE_RESISTED: StatisticEnum = StatisticEnum::DamageResisted;
    pub const CLEAN_SHULKER_BOX: StatisticEnum = StatisticEnum::CleanShulkerBox;
    pub const OPEN_BARREL: StatisticEnum = StatisticEnum::OpenBarrel;
    pub const INTERACT_WITH_BLAST_FURNACE: StatisticEnum = StatisticEnum::InteractWithBlastFurnace;
    pub const INTERACT_WITH_SMOKER: StatisticEnum = StatisticEnum::InteractWithSmoker;
    pub const INTERACT_WITH_LECTERN: StatisticEnum = StatisticEnum::InteractWithLectern;
    pub const INTERACT_WITH_CAMPFIRE: StatisticEnum = StatisticEnum::InteractWithCampfire;
    pub const INTERACT_WITH_CARTOGRAPHY_TABLE: StatisticEnum =
        StatisticEnum::InteractWithCartographyTable;
    pub const INTERACT_WITH_LOOM: StatisticEnum = StatisticEnum::InteractWithLoom;
    pub const INTERACT_WITH_STONECUTTER: StatisticEnum = StatisticEnum::InteractWithStonecutter;
    pub const BELL_RING: StatisticEnum = StatisticEnum::BellRing;
    pub const RAID_TRIGGER: StatisticEnum = StatisticEnum::RaidTrigger;
    pub const RAID_WIN: StatisticEnum = StatisticEnum::RaidWin;
    pub const INTERACT_WITH_ANVIL: StatisticEnum = StatisticEnum::InteractWithAnvil;
    pub const INTERACT_WITH_GRINDSTONE: StatisticEnum = StatisticEnum::InteractWithGrindstone;
    pub const TARGET_HIT: StatisticEnum = StatisticEnum::TargetHit;
    pub const INTERACT_WITH_SMITHING_TABLE: StatisticEnum =
        StatisticEnum::InteractWithSmithingTable;
    pub const STRIDER_ONE_CM: StatisticEnum = StatisticEnum::StriderOneCm;
    pub fn from_string(str: String) -> std::option::Option<StatisticEnum> {
        match str.as_str() {
            "DAMAGE_DEALT" => Some(StatisticEnum::DamageDealt),
            "DAMAGE_TAKEN" => Some(StatisticEnum::DamageTaken),
            "DEATHS" => Some(StatisticEnum::Deaths),
            "MOB_KILLS" => Some(StatisticEnum::MobKills),
            "PLAYER_KILLS" => Some(StatisticEnum::PlayerKills),
            "FISH_CAUGHT" => Some(StatisticEnum::FishCaught),
            "ANIMALS_BRED" => Some(StatisticEnum::AnimalsBred),
            "LEAVE_GAME" => Some(StatisticEnum::LeaveGame),
            "JUMP" => Some(StatisticEnum::Jump),
            "DROP_COUNT" => Some(StatisticEnum::DropCount),
            "DROP" => Some(StatisticEnum::Drop),
            "PICKUP" => Some(StatisticEnum::Pickup),
            "PLAY_ONE_MINUTE" => Some(StatisticEnum::PlayOneMinute),
            "TOTAL_WORLD_TIME" => Some(StatisticEnum::TotalWorldTime),
            "WALK_ONE_CM" => Some(StatisticEnum::WalkOneCm),
            "WALK_ON_WATER_ONE_CM" => Some(StatisticEnum::WalkOnWaterOneCm),
            "FALL_ONE_CM" => Some(StatisticEnum::FallOneCm),
            "SNEAK_TIME" => Some(StatisticEnum::SneakTime),
            "CLIMB_ONE_CM" => Some(StatisticEnum::ClimbOneCm),
            "FLY_ONE_CM" => Some(StatisticEnum::FlyOneCm),
            "WALK_UNDER_WATER_ONE_CM" => Some(StatisticEnum::WalkUnderWaterOneCm),
            "MINECART_ONE_CM" => Some(StatisticEnum::MinecartOneCm),
            "BOAT_ONE_CM" => Some(StatisticEnum::BoatOneCm),
            "PIG_ONE_CM" => Some(StatisticEnum::PigOneCm),
            "HORSE_ONE_CM" => Some(StatisticEnum::HorseOneCm),
            "SPRINT_ONE_CM" => Some(StatisticEnum::SprintOneCm),
            "CROUCH_ONE_CM" => Some(StatisticEnum::CrouchOneCm),
            "AVIATE_ONE_CM" => Some(StatisticEnum::AviateOneCm),
            "MINE_BLOCK" => Some(StatisticEnum::MineBlock),
            "USE_ITEM" => Some(StatisticEnum::UseItem),
            "BREAK_ITEM" => Some(StatisticEnum::BreakItem),
            "CRAFT_ITEM" => Some(StatisticEnum::CraftItem),
            "KILL_ENTITY" => Some(StatisticEnum::KillEntity),
            "ENTITY_KILLED_BY" => Some(StatisticEnum::EntityKilledBy),
            "TIME_SINCE_DEATH" => Some(StatisticEnum::TimeSinceDeath),
            "TALKED_TO_VILLAGER" => Some(StatisticEnum::TalkedToVillager),
            "TRADED_WITH_VILLAGER" => Some(StatisticEnum::TradedWithVillager),
            "CAKE_SLICES_EATEN" => Some(StatisticEnum::CakeSlicesEaten),
            "CAULDRON_FILLED" => Some(StatisticEnum::CauldronFilled),
            "CAULDRON_USED" => Some(StatisticEnum::CauldronUsed),
            "ARMOR_CLEANED" => Some(StatisticEnum::ArmorCleaned),
            "BANNER_CLEANED" => Some(StatisticEnum::BannerCleaned),
            "BREWINGSTAND_INTERACTION" => Some(StatisticEnum::BrewingstandInteraction),
            "BEACON_INTERACTION" => Some(StatisticEnum::BeaconInteraction),
            "DROPPER_INSPECTED" => Some(StatisticEnum::DropperInspected),
            "HOPPER_INSPECTED" => Some(StatisticEnum::HopperInspected),
            "DISPENSER_INSPECTED" => Some(StatisticEnum::DispenserInspected),
            "NOTEBLOCK_PLAYED" => Some(StatisticEnum::NoteblockPlayed),
            "NOTEBLOCK_TUNED" => Some(StatisticEnum::NoteblockTuned),
            "FLOWER_POTTED" => Some(StatisticEnum::FlowerPotted),
            "TRAPPED_CHEST_TRIGGERED" => Some(StatisticEnum::TrappedChestTriggered),
            "ENDERCHEST_OPENED" => Some(StatisticEnum::EnderchestOpened),
            "ITEM_ENCHANTED" => Some(StatisticEnum::ItemEnchanted),
            "RECORD_PLAYED" => Some(StatisticEnum::RecordPlayed),
            "FURNACE_INTERACTION" => Some(StatisticEnum::FurnaceInteraction),
            "CRAFTING_TABLE_INTERACTION" => Some(StatisticEnum::CraftingTableInteraction),
            "CHEST_OPENED" => Some(StatisticEnum::ChestOpened),
            "SLEEP_IN_BED" => Some(StatisticEnum::SleepInBed),
            "SHULKER_BOX_OPENED" => Some(StatisticEnum::ShulkerBoxOpened),
            "TIME_SINCE_REST" => Some(StatisticEnum::TimeSinceRest),
            "SWIM_ONE_CM" => Some(StatisticEnum::SwimOneCm),
            "DAMAGE_DEALT_ABSORBED" => Some(StatisticEnum::DamageDealtAbsorbed),
            "DAMAGE_DEALT_RESISTED" => Some(StatisticEnum::DamageDealtResisted),
            "DAMAGE_BLOCKED_BY_SHIELD" => Some(StatisticEnum::DamageBlockedByShield),
            "DAMAGE_ABSORBED" => Some(StatisticEnum::DamageAbsorbed),
            "DAMAGE_RESISTED" => Some(StatisticEnum::DamageResisted),
            "CLEAN_SHULKER_BOX" => Some(StatisticEnum::CleanShulkerBox),
            "OPEN_BARREL" => Some(StatisticEnum::OpenBarrel),
            "INTERACT_WITH_BLAST_FURNACE" => Some(StatisticEnum::InteractWithBlastFurnace),
            "INTERACT_WITH_SMOKER" => Some(StatisticEnum::InteractWithSmoker),
            "INTERACT_WITH_LECTERN" => Some(StatisticEnum::InteractWithLectern),
            "INTERACT_WITH_CAMPFIRE" => Some(StatisticEnum::InteractWithCampfire),
            "INTERACT_WITH_CARTOGRAPHY_TABLE" => Some(StatisticEnum::InteractWithCartographyTable),
            "INTERACT_WITH_LOOM" => Some(StatisticEnum::InteractWithLoom),
            "INTERACT_WITH_STONECUTTER" => Some(StatisticEnum::InteractWithStonecutter),
            "BELL_RING" => Some(StatisticEnum::BellRing),
            "RAID_TRIGGER" => Some(StatisticEnum::RaidTrigger),
            "RAID_WIN" => Some(StatisticEnum::RaidWin),
            "INTERACT_WITH_ANVIL" => Some(StatisticEnum::InteractWithAnvil),
            "INTERACT_WITH_GRINDSTONE" => Some(StatisticEnum::InteractWithGrindstone),
            "TARGET_HIT" => Some(StatisticEnum::TargetHit),
            "INTERACT_WITH_SMITHING_TABLE" => Some(StatisticEnum::InteractWithSmithingTable),
            "STRIDER_ONE_CM" => Some(StatisticEnum::StriderOneCm),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Statistic<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Statistic");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Statistic;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Statistic::from_raw(
            &jni,
            raw_obj,
            Statistic::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a String based key which consists of two components - a namespace and a key. Namespaces may only contain lowercase alphanumeric characters, periods, underscores, and hyphens.
/// <p>Keys may only contain lowercase alphanumeric characters, periods, underscores, hyphens, and forward slashes.</p>
pub struct NamespacedKey<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for NamespacedKey<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for NamespacedKey<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate NamespacedKey from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/NamespacedKey")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a NamespacedKey object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> NamespacedKey<'mc> {
    pub fn new(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::plugin::Plugin<'mc>>,
        arg1: std::option::Option<impl Into<String>>,
    ) -> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/plugin/Plugin;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Ljava/lang/String;";
            let val_2 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                jni.new_string(a.into())?,
            ));
            args.push(val_2);
        }
        sig += ")V";
        let cls = jni.find_class("org/bukkit/NamespacedKey");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.new_object(cls, sig.as_str(), args);
        let res = jni.translate_error_no_gen(res)?;
        crate::NamespacedKey::from_raw(&jni, res)
    }
    //

    pub fn minecraft(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/NamespacedKey;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            jni.new_string(arg0.into())?,
        ));
        let cls = jni.find_class("org/bukkit/NamespacedKey");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "minecraft",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::NamespacedKey::from_raw(&jni, obj)
    }
    //

    pub fn namespace(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getNamespace", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn random_key(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/NamespacedKey;");
        let cls = jni.find_class("org/bukkit/NamespacedKey");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "randomKey", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::NamespacedKey::from_raw(&jni, obj)
    }
    //

    pub fn from_string(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: std::option::Option<impl Into<String>>,
        arg1: std::option::Option<impl Into<crate::plugin::Plugin<'mc>>>,
    ) -> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Ljava/lang/String;";
            let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
                jni.new_string(a.into())?,
            ));
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "Lorg/bukkit/plugin/Plugin;";
            let val_2 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_2);
        }
        sig += ")Lorg/bukkit/NamespacedKey;";
        let cls = jni.find_class("org/bukkit/NamespacedKey");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "fromString", sig.as_str(), args);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::NamespacedKey::from_raw(&jni, obj)
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn key(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getKey", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for NamespacedKey<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling NamespacedKey.toString: {}", err),
        }
    }
}

/// A RegionAccessor gives access to getting, modifying and spawning <a title="enum in org.bukkit.block" href="block/Biome.html"><code>Biome</code></a>, <a title="interface in org.bukkit.block" href="block/BlockState.html"><code>BlockState</code></a> and <a href="entity/Entity.html" title="interface in org.bukkit.entity"><code>Entity</code></a>, as well as generating some basic structures.
///
/// This is a representation of an abstract class.
pub struct RegionAccessor<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for RegionAccessor<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for RegionAccessor<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate RegionAccessor from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/RegionAccessor")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a RegionAccessor object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> RegionAccessor<'mc> {
    //

    pub fn set_type(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
        arg3: std::option::Option<impl Into<crate::Material<'mc>>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "Lorg/bukkit/Material;";
            let val_4 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_4);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "setType", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@NotNull

    /// Gets the <a title="interface in org.bukkit.block.data" href="block/data/BlockData.html"><code>BlockData</code></a> at the given coordinates.
    pub fn get_block_data(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/block/data/BlockData;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getBlockData", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::block::data::BlockData::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn set_block_data(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
        arg3: std::option::Option<impl Into<crate::block::data::BlockData<'mc>>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "Lorg/bukkit/block/data/BlockData;";
            let val_4 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_4);
        }
        sig += ")V";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "setBlockData", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    /// Gets the highest non-empty (impassable) coordinate at the given coordinates.
    pub fn get_highest_block_yat_with_location(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")I";
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getHighestBlockYAt",
            sig.as_str(),
            args,
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn get_highest_block_yat_with_int(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: std::option::Option<impl Into<crate::HeightMap<'mc>>>,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        sig += "I";
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "Lorg/bukkit/HeightMap;";
            let val_3 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_3);
        }
        sig += ")I";
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getHighestBlockYAt",
            sig.as_str(),
            args,
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //@NotNull

    /// Gets the <a title="enum in org.bukkit.block" href="block/Biome.html"><code>Biome</code></a> at the given coordinates.
    pub fn get_biome(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::block::Biome<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/block/Biome;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBiome", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::block::Biome::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::block::Biome::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn set_biome(
        &self,
        arg0: i32,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
        arg3: std::option::Option<impl Into<crate::block::Biome<'mc>>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "I";
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "Lorg/bukkit/block/Biome;";
            let val_4 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_4);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "setBiome", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //@NotNull

    /// Gets the <a title="interface in org.bukkit.block" href="block/BlockState.html"><code>BlockState</code></a> at the given coordinates.
    pub fn get_block_state(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::block::BlockState<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/block/BlockState;";
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getBlockState", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::block::BlockState::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn spawn_entity(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: std::option::Option<impl Into<crate::entity::EntityType<'mc>>>,
        arg2: std::option::Option<bool>,
    ) -> Result<crate::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Lorg/bukkit/entity/EntityType;";
            let val_2 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "Z";
            // 1
            let val_3 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/entity/Entity;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "spawnEntity", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::Entity::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn entities(&self) -> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getEntities", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn living_entities(
        &self,
    ) -> Result<Vec<crate::entity::LivingEntity<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/List;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getLivingEntities",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut list = blackboxmc_java::JavaList::from_raw(&self.jni_ref(), res.l()?)?;
        let size = list.size()?;
        for i in 0..=size {
            let obj = list.get(i)?;
            new_vec.push(crate::entity::LivingEntity::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn get_entities_by_class(
        &self,
        arg0: jni::objects::JClass<'mc>,
    ) -> Result<Vec<jni::objects::JObject<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Class;)Ljava/util/Collection;");
        let val_1 = jni::objects::JValueGen::Object(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEntitiesByClass",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut col = blackboxmc_java::JavaCollection::from_raw(&self.jni_ref(), res.l()?)?;
        let mut iter = blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), col.iterator()?)?;
        while iter.has_next()? {
            let obj = iter.next()?;
            new_vec.push(obj);
        }
        Ok(new_vec)
    }
    //

    pub fn get_entities_by_classes(
        &self,
        arg0: Vec<jni::objects::JClass<'mc>>,
    ) -> Result<Vec<crate::entity::Entity<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Class;)Ljava/util/Collection;");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getEntitiesByClasses",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        let mut new_vec = Vec::new();
        let mut col = blackboxmc_java::JavaCollection::from_raw(&self.jni_ref(), res.l()?)?;
        let mut iter = blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), col.iterator()?)?;
        while iter.has_next()? {
            let obj = iter.next()?;
            new_vec.push(crate::entity::Entity::from_raw(&self.jni_ref(), obj)?);
        }
        Ok(new_vec)
    }
    //

    pub fn spawn(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: std::option::Option<jni::objects::JClass<'mc>>,
        arg2: std::option::Option<bool>,
        arg3: std::option::Option<impl Into<crate::util::Consumer<'mc>>>,
    ) -> Result<crate::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/Location;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        if let Some(a) = arg1 {
            sig += "Ljava/lang/Class;";
            let val_2 = jni::objects::JValueGen::Object(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "Z";
            // 1
            let val_3 = jni::objects::JValueGen::Bool(a.into());
            args.push(val_3);
        }
        if let Some(a) = arg3 {
            sig += "Lorg/bukkit/util/Consumer;";
            let val_4 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_4);
        }
        sig += ")Lorg/bukkit/entity/Entity;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "spawn", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::Entity::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    //@NotNull

    /// Gets the type of the block at the given coordinates.
    pub fn get_type(
        &self,
        arg0: std::option::Option<i32>,
        arg1: std::option::Option<i32>,
        arg2: std::option::Option<i32>,
    ) -> Result<crate::Material<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "I";
            let val_1 = jni::objects::JValueGen::Int(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        if let Some(a) = arg2 {
            sig += "I";
            let val_3 = jni::objects::JValueGen::Int(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/Material;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getType", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant =
            self.jni_ref()
                .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::Material::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::Material::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum WeatherTypeEnum {
    Downfall,
    Clear,
}
impl std::fmt::Display for WeatherTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            WeatherTypeEnum::Downfall => f.write_str("DOWNFALL"),
            WeatherTypeEnum::Clear => f.write_str("CLEAR"),
        }
    }
}
impl<'mc> std::fmt::Display for WeatherType<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct WeatherType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub WeatherTypeEnum,
);
impl<'mc> std::ops::Deref for WeatherType<'mc> {
    type Target = WeatherTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for WeatherType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for WeatherType<'mc> {
    type Enum = WeatherTypeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate WeatherType from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/WeatherType")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WeatherType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> WeatherType<'mc> {
    pub const DOWNFALL: WeatherTypeEnum = WeatherTypeEnum::Downfall;
    pub const CLEAR: WeatherTypeEnum = WeatherTypeEnum::Clear;
    pub fn from_string(str: String) -> std::option::Option<WeatherTypeEnum> {
        match str.as_str() {
            "DOWNFALL" => Some(WeatherTypeEnum::Downfall),
            "CLEAR" => Some(WeatherTypeEnum::Clear),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<WeatherType<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/WeatherType");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/WeatherType;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        WeatherType::from_raw(
            &jni,
            raw_obj,
            WeatherType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}

///
/// This is a representation of an abstract class.
pub struct WorldBorder<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for WorldBorder<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for WorldBorder<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate WorldBorder from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/WorldBorder")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WorldBorder object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> WorldBorder<'mc> {
    //

    pub fn world(&self) -> Result<crate::World<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/World;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getWorld", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::World::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    /// Sets the new border center.
    pub fn set_center(
        &self,
        arg0: std::option::Option<f64>,
        arg1: std::option::Option<f64>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "D";
            let val_1 = jni::objects::JValueGen::Double(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "D";
            let val_2 = jni::objects::JValueGen::Double(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "setCenter", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn center(&self) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Location;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getCenter", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn max_center_coordinate(&self) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("()D");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getMaxCenterCoordinate",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    pub fn damage_buffer(&self) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("()D");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getDamageBuffer", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    /// Sets the amount of blocks a player may safely be outside the border before taking damage.
    pub fn set_damage_buffer(&self, arg0: f64) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(D)V");
        let val_1 = jni::objects::JValueGen::Double(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setDamageBuffer",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn damage_amount(&self) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("()D");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getDamageAmount", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    /// Sets the amount of damage a player takes when outside the border plus the border buffer.
    pub fn set_damage_amount(&self, arg0: f64) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(D)V");
        let val_1 = jni::objects::JValueGen::Double(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setDamageAmount",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn warning_time(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getWarningTime", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Sets the warning time that causes the screen to be tinted red when a contracting border will reach the player within the specified time.
    pub fn set_warning_time(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setWarningTime",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn warning_distance(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getWarningDistance",
            sig.as_str(),
            vec![],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Sets the warning distance that causes the screen to be tinted red when the player is within the specified number of blocks from the border.
    pub fn set_warning_distance(&self, arg0: i32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(I)V");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setWarningDistance",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn is_inside(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Location;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isInside",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn max_size(&self) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("()D");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getMaxSize", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    pub fn size(&self) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("()D");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getSize", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    pub fn reset(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "reset", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}
/// An enum to specify the load level of a chunk.
#[derive(PartialEq, Eq)]
pub enum ChunkLoadLevelEnum {
    Inaccessible,
    Border,
    Ticking,
    EntityTicking,
    Unloaded,
}
impl std::fmt::Display for ChunkLoadLevelEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ChunkLoadLevelEnum::Inaccessible => f.write_str("INACCESSIBLE"),
            ChunkLoadLevelEnum::Border => f.write_str("BORDER"),
            ChunkLoadLevelEnum::Ticking => f.write_str("TICKING"),
            ChunkLoadLevelEnum::EntityTicking => f.write_str("ENTITY_TICKING"),
            ChunkLoadLevelEnum::Unloaded => f.write_str("UNLOADED"),
        }
    }
}
impl<'mc> std::fmt::Display for ChunkLoadLevel<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct ChunkLoadLevel<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub ChunkLoadLevelEnum,
);
impl<'mc> std::ops::Deref for ChunkLoadLevel<'mc> {
    type Target = ChunkLoadLevelEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for ChunkLoadLevel<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for ChunkLoadLevel<'mc> {
    type Enum = ChunkLoadLevelEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate ChunkLoadLevel from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Chunk$LoadLevel")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a ChunkLoadLevel object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> ChunkLoadLevel<'mc> {
    pub const INACCESSIBLE: ChunkLoadLevelEnum = ChunkLoadLevelEnum::Inaccessible;
    pub const BORDER: ChunkLoadLevelEnum = ChunkLoadLevelEnum::Border;
    pub const TICKING: ChunkLoadLevelEnum = ChunkLoadLevelEnum::Ticking;
    pub const ENTITY_TICKING: ChunkLoadLevelEnum = ChunkLoadLevelEnum::EntityTicking;
    pub const UNLOADED: ChunkLoadLevelEnum = ChunkLoadLevelEnum::Unloaded;
    pub fn from_string(str: String) -> std::option::Option<ChunkLoadLevelEnum> {
        match str.as_str() {
            "INACCESSIBLE" => Some(ChunkLoadLevelEnum::Inaccessible),
            "BORDER" => Some(ChunkLoadLevelEnum::Border),
            "TICKING" => Some(ChunkLoadLevelEnum::Ticking),
            "ENTITY_TICKING" => Some(ChunkLoadLevelEnum::EntityTicking),
            "UNLOADED" => Some(ChunkLoadLevelEnum::Unloaded),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<ChunkLoadLevel<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Chunk$LoadLevel");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Chunk$LoadLevel;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        ChunkLoadLevel::from_raw(
            &jni,
            raw_obj,
            ChunkLoadLevel::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }

    //
}
#[derive(PartialEq, Eq)]
pub enum SandstoneTypeEnum {
    Cracked,
    Glyphed,
    Smooth,
}
impl std::fmt::Display for SandstoneTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            SandstoneTypeEnum::Cracked => f.write_str("CRACKED"),
            SandstoneTypeEnum::Glyphed => f.write_str("GLYPHED"),
            SandstoneTypeEnum::Smooth => f.write_str("SMOOTH"),
        }
    }
}
impl<'mc> std::fmt::Display for SandstoneType<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct SandstoneType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub SandstoneTypeEnum,
);
impl<'mc> std::ops::Deref for SandstoneType<'mc> {
    type Target = SandstoneTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for SandstoneType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for SandstoneType<'mc> {
    type Enum = SandstoneTypeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate SandstoneType from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/SandstoneType")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a SandstoneType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> SandstoneType<'mc> {
    pub const CRACKED: SandstoneTypeEnum = SandstoneTypeEnum::Cracked;
    pub const GLYPHED: SandstoneTypeEnum = SandstoneTypeEnum::Glyphed;
    pub const SMOOTH: SandstoneTypeEnum = SandstoneTypeEnum::Smooth;
    pub fn from_string(str: String) -> std::option::Option<SandstoneTypeEnum> {
        match str.as_str() {
            "CRACKED" => Some(SandstoneTypeEnum::Cracked),
            "GLYPHED" => Some(SandstoneTypeEnum::Glyphed),
            "SMOOTH" => Some(SandstoneTypeEnum::Smooth),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<SandstoneType<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/SandstoneType");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/SandstoneType;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        SandstoneType::from_raw(
            &jni,
            raw_obj,
            SandstoneType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum AxisEnum {
    X,
    Y,
    Z,
}
impl std::fmt::Display for AxisEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            AxisEnum::X => f.write_str("X"),
            AxisEnum::Y => f.write_str("Y"),
            AxisEnum::Z => f.write_str("Z"),
        }
    }
}
impl<'mc> std::fmt::Display for Axis<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Axis<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub AxisEnum,
);
impl<'mc> std::ops::Deref for Axis<'mc> {
    type Target = AxisEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for Axis<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Axis<'mc> {
    type Enum = AxisEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Axis from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Axis")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Axis object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Axis<'mc> {
    pub const X: AxisEnum = AxisEnum::X;
    pub const Y: AxisEnum = AxisEnum::Y;
    pub const Z: AxisEnum = AxisEnum::Z;
    pub fn from_string(str: String) -> std::option::Option<AxisEnum> {
        match str.as_str() {
            "X" => Some(AxisEnum::X),
            "Y" => Some(AxisEnum::Y),
            "Z" => Some(AxisEnum::Z),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Axis<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Axis");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Axis;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Axis::from_raw(
            &jni,
            raw_obj,
            Axis::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum TreeTypeEnum {
    Tree,
    BigTree,
    Redwood,
    TallRedwood,
    Birch,
    Jungle,
    SmallJungle,
    CocoaTree,
    JungleBush,
    RedMushroom,
    BrownMushroom,
    Swamp,
    Acacia,
    DarkOak,
    MegaRedwood,
    TallBirch,
    ChorusPlant,
    CrimsonFungus,
    WarpedFungus,
    Azalea,
    Mangrove,
    TallMangrove,
    Cherry,
}
impl std::fmt::Display for TreeTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            TreeTypeEnum::Tree => f.write_str("TREE"),
            TreeTypeEnum::BigTree => f.write_str("BIG_TREE"),
            TreeTypeEnum::Redwood => f.write_str("REDWOOD"),
            TreeTypeEnum::TallRedwood => f.write_str("TALL_REDWOOD"),
            TreeTypeEnum::Birch => f.write_str("BIRCH"),
            TreeTypeEnum::Jungle => f.write_str("JUNGLE"),
            TreeTypeEnum::SmallJungle => f.write_str("SMALL_JUNGLE"),
            TreeTypeEnum::CocoaTree => f.write_str("COCOA_TREE"),
            TreeTypeEnum::JungleBush => f.write_str("JUNGLE_BUSH"),
            TreeTypeEnum::RedMushroom => f.write_str("RED_MUSHROOM"),
            TreeTypeEnum::BrownMushroom => f.write_str("BROWN_MUSHROOM"),
            TreeTypeEnum::Swamp => f.write_str("SWAMP"),
            TreeTypeEnum::Acacia => f.write_str("ACACIA"),
            TreeTypeEnum::DarkOak => f.write_str("DARK_OAK"),
            TreeTypeEnum::MegaRedwood => f.write_str("MEGA_REDWOOD"),
            TreeTypeEnum::TallBirch => f.write_str("TALL_BIRCH"),
            TreeTypeEnum::ChorusPlant => f.write_str("CHORUS_PLANT"),
            TreeTypeEnum::CrimsonFungus => f.write_str("CRIMSON_FUNGUS"),
            TreeTypeEnum::WarpedFungus => f.write_str("WARPED_FUNGUS"),
            TreeTypeEnum::Azalea => f.write_str("AZALEA"),
            TreeTypeEnum::Mangrove => f.write_str("MANGROVE"),
            TreeTypeEnum::TallMangrove => f.write_str("TALL_MANGROVE"),
            TreeTypeEnum::Cherry => f.write_str("CHERRY"),
        }
    }
}
impl<'mc> std::fmt::Display for TreeType<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct TreeType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub TreeTypeEnum,
);
impl<'mc> std::ops::Deref for TreeType<'mc> {
    type Target = TreeTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for TreeType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for TreeType<'mc> {
    type Enum = TreeTypeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate TreeType from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/TreeType")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a TreeType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> TreeType<'mc> {
    pub const TREE: TreeTypeEnum = TreeTypeEnum::Tree;
    pub const BIG_TREE: TreeTypeEnum = TreeTypeEnum::BigTree;
    pub const REDWOOD: TreeTypeEnum = TreeTypeEnum::Redwood;
    pub const TALL_REDWOOD: TreeTypeEnum = TreeTypeEnum::TallRedwood;
    pub const BIRCH: TreeTypeEnum = TreeTypeEnum::Birch;
    pub const JUNGLE: TreeTypeEnum = TreeTypeEnum::Jungle;
    pub const SMALL_JUNGLE: TreeTypeEnum = TreeTypeEnum::SmallJungle;
    pub const COCOA_TREE: TreeTypeEnum = TreeTypeEnum::CocoaTree;
    pub const JUNGLE_BUSH: TreeTypeEnum = TreeTypeEnum::JungleBush;
    pub const RED_MUSHROOM: TreeTypeEnum = TreeTypeEnum::RedMushroom;
    pub const BROWN_MUSHROOM: TreeTypeEnum = TreeTypeEnum::BrownMushroom;
    pub const SWAMP: TreeTypeEnum = TreeTypeEnum::Swamp;
    pub const ACACIA: TreeTypeEnum = TreeTypeEnum::Acacia;
    pub const DARK_OAK: TreeTypeEnum = TreeTypeEnum::DarkOak;
    pub const MEGA_REDWOOD: TreeTypeEnum = TreeTypeEnum::MegaRedwood;
    pub const TALL_BIRCH: TreeTypeEnum = TreeTypeEnum::TallBirch;
    pub const CHORUS_PLANT: TreeTypeEnum = TreeTypeEnum::ChorusPlant;
    pub const CRIMSON_FUNGUS: TreeTypeEnum = TreeTypeEnum::CrimsonFungus;
    pub const WARPED_FUNGUS: TreeTypeEnum = TreeTypeEnum::WarpedFungus;
    pub const AZALEA: TreeTypeEnum = TreeTypeEnum::Azalea;
    pub const MANGROVE: TreeTypeEnum = TreeTypeEnum::Mangrove;
    pub const TALL_MANGROVE: TreeTypeEnum = TreeTypeEnum::TallMangrove;
    pub const CHERRY: TreeTypeEnum = TreeTypeEnum::Cherry;
    pub fn from_string(str: String) -> std::option::Option<TreeTypeEnum> {
        match str.as_str() {
            "TREE" => Some(TreeTypeEnum::Tree),
            "BIG_TREE" => Some(TreeTypeEnum::BigTree),
            "REDWOOD" => Some(TreeTypeEnum::Redwood),
            "TALL_REDWOOD" => Some(TreeTypeEnum::TallRedwood),
            "BIRCH" => Some(TreeTypeEnum::Birch),
            "JUNGLE" => Some(TreeTypeEnum::Jungle),
            "SMALL_JUNGLE" => Some(TreeTypeEnum::SmallJungle),
            "COCOA_TREE" => Some(TreeTypeEnum::CocoaTree),
            "JUNGLE_BUSH" => Some(TreeTypeEnum::JungleBush),
            "RED_MUSHROOM" => Some(TreeTypeEnum::RedMushroom),
            "BROWN_MUSHROOM" => Some(TreeTypeEnum::BrownMushroom),
            "SWAMP" => Some(TreeTypeEnum::Swamp),
            "ACACIA" => Some(TreeTypeEnum::Acacia),
            "DARK_OAK" => Some(TreeTypeEnum::DarkOak),
            "MEGA_REDWOOD" => Some(TreeTypeEnum::MegaRedwood),
            "TALL_BIRCH" => Some(TreeTypeEnum::TallBirch),
            "CHORUS_PLANT" => Some(TreeTypeEnum::ChorusPlant),
            "CRIMSON_FUNGUS" => Some(TreeTypeEnum::CrimsonFungus),
            "WARPED_FUNGUS" => Some(TreeTypeEnum::WarpedFungus),
            "AZALEA" => Some(TreeTypeEnum::Azalea),
            "MANGROVE" => Some(TreeTypeEnum::Mangrove),
            "TALL_MANGROVE" => Some(TreeTypeEnum::TallMangrove),
            "CHERRY" => Some(TreeTypeEnum::Cherry),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<TreeType<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/TreeType");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/TreeType;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        TreeType::from_raw(
            &jni,
            raw_obj,
            TreeType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a vibration from a Skulk sensor.
pub struct Vibration<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Vibration<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Vibration<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Vibration from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Vibration")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Vibration object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Vibration<'mc> {
    pub fn new(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::Location<'mc>>,
        arg1: impl Into<crate::VibrationDestination<'mc>>,
        arg2: i32,
    ) -> Result<crate::Vibration<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Location;Lorg/bukkit/Vibration$Destination;I)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let val_2 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg1.into().jni_object().clone())
        });
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        let cls = jni.find_class("org/bukkit/Vibration");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.new_object(
            cls,
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = jni.translate_error_no_gen(res)?;
        crate::Vibration::from_raw(&jni, res)
    }
    //

    pub fn origin(&self) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Location;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getOrigin", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn destination(
        &self,
    ) -> Result<crate::VibrationDestination<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Vibration$Destination;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getDestination", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::VibrationDestination::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn arrival_time(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getArrivalTime", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for Vibration<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling Vibration.toString: {}", err),
        }
    }
}

pub struct RegistrySimpleRegistry<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for RegistrySimpleRegistry<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for RegistrySimpleRegistry<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate RegistrySimpleRegistry from null object."
            )
            .into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Registry$SimpleRegistry")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a RegistrySimpleRegistry object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> RegistrySimpleRegistry<'mc> {
    //

    pub fn get(
        &self,
        arg0: std::option::Option<impl Into<crate::NamespacedKey<'mc>>>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/NamespacedKey;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Ljava/lang/Enum;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "get", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Self::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn iterator(
        &self,
    ) -> Result<blackboxmc_java::JavaIterator<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Iterator;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "iterator", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn get_match(
        &self,
        arg0: impl Into<String>,
    ) -> Result<crate::Keyed<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/Keyed;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "match",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Keyed::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}

impl<'mc> std::string::ToString for RegistrySimpleRegistry<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling RegistrySimpleRegistry.toString: {}", err),
        }
    }
}

#[derive(PartialEq, Eq)]
pub enum MaterialEnum {
    Air,
    Stone,
    Granite,
    PolishedGranite,
    Diorite,
    PolishedDiorite,
    Andesite,
    PolishedAndesite,
    Deepslate,
    CobbledDeepslate,
    PolishedDeepslate,
    Calcite,
    Tuff,
    DripstoneBlock,
    GrassBlock,
    Dirt,
    CoarseDirt,
    Podzol,
    RootedDirt,
    Mud,
    CrimsonNylium,
    WarpedNylium,
    Cobblestone,
    OakPlanks,
    SprucePlanks,
    BirchPlanks,
    JunglePlanks,
    AcaciaPlanks,
    CherryPlanks,
    DarkOakPlanks,
    MangrovePlanks,
    BambooPlanks,
    CrimsonPlanks,
    WarpedPlanks,
    BambooMosaic,
    OakSapling,
    SpruceSapling,
    BirchSapling,
    JungleSapling,
    AcaciaSapling,
    CherrySapling,
    DarkOakSapling,
    MangrovePropagule,
    Bedrock,
    Sand,
    SuspiciousSand,
    SuspiciousGravel,
    RedSand,
    Gravel,
    CoalOre,
    DeepslateCoalOre,
    IronOre,
    DeepslateIronOre,
    CopperOre,
    DeepslateCopperOre,
    GoldOre,
    DeepslateGoldOre,
    RedstoneOre,
    DeepslateRedstoneOre,
    EmeraldOre,
    DeepslateEmeraldOre,
    LapisOre,
    DeepslateLapisOre,
    DiamondOre,
    DeepslateDiamondOre,
    NetherGoldOre,
    NetherQuartzOre,
    AncientDebris,
    CoalBlock,
    RawIronBlock,
    RawCopperBlock,
    RawGoldBlock,
    AmethystBlock,
    BuddingAmethyst,
    IronBlock,
    CopperBlock,
    GoldBlock,
    DiamondBlock,
    NetheriteBlock,
    ExposedCopper,
    WeatheredCopper,
    OxidizedCopper,
    CutCopper,
    ExposedCutCopper,
    WeatheredCutCopper,
    OxidizedCutCopper,
    CutCopperStairs,
    ExposedCutCopperStairs,
    WeatheredCutCopperStairs,
    OxidizedCutCopperStairs,
    CutCopperSlab,
    ExposedCutCopperSlab,
    WeatheredCutCopperSlab,
    OxidizedCutCopperSlab,
    WaxedCopperBlock,
    WaxedExposedCopper,
    WaxedWeatheredCopper,
    WaxedOxidizedCopper,
    WaxedCutCopper,
    WaxedExposedCutCopper,
    WaxedWeatheredCutCopper,
    WaxedOxidizedCutCopper,
    WaxedCutCopperStairs,
    WaxedExposedCutCopperStairs,
    WaxedWeatheredCutCopperStairs,
    WaxedOxidizedCutCopperStairs,
    WaxedCutCopperSlab,
    WaxedExposedCutCopperSlab,
    WaxedWeatheredCutCopperSlab,
    WaxedOxidizedCutCopperSlab,
    OakLog,
    SpruceLog,
    BirchLog,
    JungleLog,
    AcaciaLog,
    CherryLog,
    DarkOakLog,
    MangroveLog,
    MangroveRoots,
    MuddyMangroveRoots,
    CrimsonStem,
    WarpedStem,
    BambooBlock,
    StrippedOakLog,
    StrippedSpruceLog,
    StrippedBirchLog,
    StrippedJungleLog,
    StrippedAcaciaLog,
    StrippedCherryLog,
    StrippedDarkOakLog,
    StrippedMangroveLog,
    StrippedCrimsonStem,
    StrippedWarpedStem,
    StrippedOakWood,
    StrippedSpruceWood,
    StrippedBirchWood,
    StrippedJungleWood,
    StrippedAcaciaWood,
    StrippedCherryWood,
    StrippedDarkOakWood,
    StrippedMangroveWood,
    StrippedCrimsonHyphae,
    StrippedWarpedHyphae,
    StrippedBambooBlock,
    OakWood,
    SpruceWood,
    BirchWood,
    JungleWood,
    AcaciaWood,
    CherryWood,
    DarkOakWood,
    MangroveWood,
    CrimsonHyphae,
    WarpedHyphae,
    OakLeaves,
    SpruceLeaves,
    BirchLeaves,
    JungleLeaves,
    AcaciaLeaves,
    CherryLeaves,
    DarkOakLeaves,
    MangroveLeaves,
    AzaleaLeaves,
    FloweringAzaleaLeaves,
    Sponge,
    WetSponge,
    Glass,
    TintedGlass,
    LapisBlock,
    Sandstone,
    ChiseledSandstone,
    CutSandstone,
    Cobweb,
    Grass,
    Fern,
    Azalea,
    FloweringAzalea,
    DeadBush,
    Seagrass,
    SeaPickle,
    WhiteWool,
    OrangeWool,
    MagentaWool,
    LightBlueWool,
    YellowWool,
    LimeWool,
    PinkWool,
    GrayWool,
    LightGrayWool,
    CyanWool,
    PurpleWool,
    BlueWool,
    BrownWool,
    GreenWool,
    RedWool,
    BlackWool,
    Dandelion,
    Poppy,
    BlueOrchid,
    Allium,
    AzureBluet,
    RedTulip,
    OrangeTulip,
    WhiteTulip,
    PinkTulip,
    OxeyeDaisy,
    Cornflower,
    LilyOfTheValley,
    WitherRose,
    Torchflower,
    PitcherPlant,
    SporeBlossom,
    BrownMushroom,
    RedMushroom,
    CrimsonFungus,
    WarpedFungus,
    CrimsonRoots,
    WarpedRoots,
    NetherSprouts,
    WeepingVines,
    TwistingVines,
    SugarCane,
    Kelp,
    MossCarpet,
    PinkPetals,
    MossBlock,
    HangingRoots,
    BigDripleaf,
    SmallDripleaf,
    Bamboo,
    OakSlab,
    SpruceSlab,
    BirchSlab,
    JungleSlab,
    AcaciaSlab,
    CherrySlab,
    DarkOakSlab,
    MangroveSlab,
    BambooSlab,
    BambooMosaicSlab,
    CrimsonSlab,
    WarpedSlab,
    StoneSlab,
    SmoothStoneSlab,
    SandstoneSlab,
    CutSandstoneSlab,
    PetrifiedOakSlab,
    CobblestoneSlab,
    BrickSlab,
    StoneBrickSlab,
    MudBrickSlab,
    NetherBrickSlab,
    QuartzSlab,
    RedSandstoneSlab,
    CutRedSandstoneSlab,
    PurpurSlab,
    PrismarineSlab,
    PrismarineBrickSlab,
    DarkPrismarineSlab,
    SmoothQuartz,
    SmoothRedSandstone,
    SmoothSandstone,
    SmoothStone,
    Bricks,
    Bookshelf,
    ChiseledBookshelf,
    DecoratedPot,
    MossyCobblestone,
    Obsidian,
    Torch,
    EndRod,
    ChorusPlant,
    ChorusFlower,
    PurpurBlock,
    PurpurPillar,
    PurpurStairs,
    Spawner,
    Chest,
    CraftingTable,
    Farmland,
    Furnace,
    Ladder,
    CobblestoneStairs,
    Snow,
    Ice,
    SnowBlock,
    Cactus,
    Clay,
    Jukebox,
    OakFence,
    SpruceFence,
    BirchFence,
    JungleFence,
    AcaciaFence,
    CherryFence,
    DarkOakFence,
    MangroveFence,
    BambooFence,
    CrimsonFence,
    WarpedFence,
    Pumpkin,
    CarvedPumpkin,
    JackOLantern,
    Netherrack,
    SoulSand,
    SoulSoil,
    Basalt,
    PolishedBasalt,
    SmoothBasalt,
    SoulTorch,
    Glowstone,
    InfestedStone,
    InfestedCobblestone,
    InfestedStoneBricks,
    InfestedMossyStoneBricks,
    InfestedCrackedStoneBricks,
    InfestedChiseledStoneBricks,
    InfestedDeepslate,
    StoneBricks,
    MossyStoneBricks,
    CrackedStoneBricks,
    ChiseledStoneBricks,
    PackedMud,
    MudBricks,
    DeepslateBricks,
    CrackedDeepslateBricks,
    DeepslateTiles,
    CrackedDeepslateTiles,
    ChiseledDeepslate,
    ReinforcedDeepslate,
    BrownMushroomBlock,
    RedMushroomBlock,
    MushroomStem,
    IronBars,
    Chain,
    GlassPane,
    Melon,
    Vine,
    GlowLichen,
    BrickStairs,
    StoneBrickStairs,
    MudBrickStairs,
    Mycelium,
    LilyPad,
    NetherBricks,
    CrackedNetherBricks,
    ChiseledNetherBricks,
    NetherBrickFence,
    NetherBrickStairs,
    Sculk,
    SculkVein,
    SculkCatalyst,
    SculkShrieker,
    EnchantingTable,
    EndPortalFrame,
    EndStone,
    EndStoneBricks,
    DragonEgg,
    SandstoneStairs,
    EnderChest,
    EmeraldBlock,
    OakStairs,
    SpruceStairs,
    BirchStairs,
    JungleStairs,
    AcaciaStairs,
    CherryStairs,
    DarkOakStairs,
    MangroveStairs,
    BambooStairs,
    BambooMosaicStairs,
    CrimsonStairs,
    WarpedStairs,
    CommandBlock,
    Beacon,
    CobblestoneWall,
    MossyCobblestoneWall,
    BrickWall,
    PrismarineWall,
    RedSandstoneWall,
    MossyStoneBrickWall,
    GraniteWall,
    StoneBrickWall,
    MudBrickWall,
    NetherBrickWall,
    AndesiteWall,
    RedNetherBrickWall,
    SandstoneWall,
    EndStoneBrickWall,
    DioriteWall,
    BlackstoneWall,
    PolishedBlackstoneWall,
    PolishedBlackstoneBrickWall,
    CobbledDeepslateWall,
    PolishedDeepslateWall,
    DeepslateBrickWall,
    DeepslateTileWall,
    Anvil,
    ChippedAnvil,
    DamagedAnvil,
    ChiseledQuartzBlock,
    QuartzBlock,
    QuartzBricks,
    QuartzPillar,
    QuartzStairs,
    WhiteTerracotta,
    OrangeTerracotta,
    MagentaTerracotta,
    LightBlueTerracotta,
    YellowTerracotta,
    LimeTerracotta,
    PinkTerracotta,
    GrayTerracotta,
    LightGrayTerracotta,
    CyanTerracotta,
    PurpleTerracotta,
    BlueTerracotta,
    BrownTerracotta,
    GreenTerracotta,
    RedTerracotta,
    BlackTerracotta,
    Barrier,
    Light,
    HayBlock,
    WhiteCarpet,
    OrangeCarpet,
    MagentaCarpet,
    LightBlueCarpet,
    YellowCarpet,
    LimeCarpet,
    PinkCarpet,
    GrayCarpet,
    LightGrayCarpet,
    CyanCarpet,
    PurpleCarpet,
    BlueCarpet,
    BrownCarpet,
    GreenCarpet,
    RedCarpet,
    BlackCarpet,
    Terracotta,
    PackedIce,
    DirtPath,
    Sunflower,
    Lilac,
    RoseBush,
    Peony,
    TallGrass,
    LargeFern,
    WhiteStainedGlass,
    OrangeStainedGlass,
    MagentaStainedGlass,
    LightBlueStainedGlass,
    YellowStainedGlass,
    LimeStainedGlass,
    PinkStainedGlass,
    GrayStainedGlass,
    LightGrayStainedGlass,
    CyanStainedGlass,
    PurpleStainedGlass,
    BlueStainedGlass,
    BrownStainedGlass,
    GreenStainedGlass,
    RedStainedGlass,
    BlackStainedGlass,
    WhiteStainedGlassPane,
    OrangeStainedGlassPane,
    MagentaStainedGlassPane,
    LightBlueStainedGlassPane,
    YellowStainedGlassPane,
    LimeStainedGlassPane,
    PinkStainedGlassPane,
    GrayStainedGlassPane,
    LightGrayStainedGlassPane,
    CyanStainedGlassPane,
    PurpleStainedGlassPane,
    BlueStainedGlassPane,
    BrownStainedGlassPane,
    GreenStainedGlassPane,
    RedStainedGlassPane,
    BlackStainedGlassPane,
    Prismarine,
    PrismarineBricks,
    DarkPrismarine,
    PrismarineStairs,
    PrismarineBrickStairs,
    DarkPrismarineStairs,
    SeaLantern,
    RedSandstone,
    ChiseledRedSandstone,
    CutRedSandstone,
    RedSandstoneStairs,
    RepeatingCommandBlock,
    ChainCommandBlock,
    MagmaBlock,
    NetherWartBlock,
    WarpedWartBlock,
    RedNetherBricks,
    BoneBlock,
    StructureVoid,
    ShulkerBox,
    WhiteShulkerBox,
    OrangeShulkerBox,
    MagentaShulkerBox,
    LightBlueShulkerBox,
    YellowShulkerBox,
    LimeShulkerBox,
    PinkShulkerBox,
    GrayShulkerBox,
    LightGrayShulkerBox,
    CyanShulkerBox,
    PurpleShulkerBox,
    BlueShulkerBox,
    BrownShulkerBox,
    GreenShulkerBox,
    RedShulkerBox,
    BlackShulkerBox,
    WhiteGlazedTerracotta,
    OrangeGlazedTerracotta,
    MagentaGlazedTerracotta,
    LightBlueGlazedTerracotta,
    YellowGlazedTerracotta,
    LimeGlazedTerracotta,
    PinkGlazedTerracotta,
    GrayGlazedTerracotta,
    LightGrayGlazedTerracotta,
    CyanGlazedTerracotta,
    PurpleGlazedTerracotta,
    BlueGlazedTerracotta,
    BrownGlazedTerracotta,
    GreenGlazedTerracotta,
    RedGlazedTerracotta,
    BlackGlazedTerracotta,
    WhiteConcrete,
    OrangeConcrete,
    MagentaConcrete,
    LightBlueConcrete,
    YellowConcrete,
    LimeConcrete,
    PinkConcrete,
    GrayConcrete,
    LightGrayConcrete,
    CyanConcrete,
    PurpleConcrete,
    BlueConcrete,
    BrownConcrete,
    GreenConcrete,
    RedConcrete,
    BlackConcrete,
    WhiteConcretePowder,
    OrangeConcretePowder,
    MagentaConcretePowder,
    LightBlueConcretePowder,
    YellowConcretePowder,
    LimeConcretePowder,
    PinkConcretePowder,
    GrayConcretePowder,
    LightGrayConcretePowder,
    CyanConcretePowder,
    PurpleConcretePowder,
    BlueConcretePowder,
    BrownConcretePowder,
    GreenConcretePowder,
    RedConcretePowder,
    BlackConcretePowder,
    TurtleEgg,
    SnifferEgg,
    DeadTubeCoralBlock,
    DeadBrainCoralBlock,
    DeadBubbleCoralBlock,
    DeadFireCoralBlock,
    DeadHornCoralBlock,
    TubeCoralBlock,
    BrainCoralBlock,
    BubbleCoralBlock,
    FireCoralBlock,
    HornCoralBlock,
    TubeCoral,
    BrainCoral,
    BubbleCoral,
    FireCoral,
    HornCoral,
    DeadBrainCoral,
    DeadBubbleCoral,
    DeadFireCoral,
    DeadHornCoral,
    DeadTubeCoral,
    TubeCoralFan,
    BrainCoralFan,
    BubbleCoralFan,
    FireCoralFan,
    HornCoralFan,
    DeadTubeCoralFan,
    DeadBrainCoralFan,
    DeadBubbleCoralFan,
    DeadFireCoralFan,
    DeadHornCoralFan,
    BlueIce,
    Conduit,
    PolishedGraniteStairs,
    SmoothRedSandstoneStairs,
    MossyStoneBrickStairs,
    PolishedDioriteStairs,
    MossyCobblestoneStairs,
    EndStoneBrickStairs,
    StoneStairs,
    SmoothSandstoneStairs,
    SmoothQuartzStairs,
    GraniteStairs,
    AndesiteStairs,
    RedNetherBrickStairs,
    PolishedAndesiteStairs,
    DioriteStairs,
    CobbledDeepslateStairs,
    PolishedDeepslateStairs,
    DeepslateBrickStairs,
    DeepslateTileStairs,
    PolishedGraniteSlab,
    SmoothRedSandstoneSlab,
    MossyStoneBrickSlab,
    PolishedDioriteSlab,
    MossyCobblestoneSlab,
    EndStoneBrickSlab,
    SmoothSandstoneSlab,
    SmoothQuartzSlab,
    GraniteSlab,
    AndesiteSlab,
    RedNetherBrickSlab,
    PolishedAndesiteSlab,
    DioriteSlab,
    CobbledDeepslateSlab,
    PolishedDeepslateSlab,
    DeepslateBrickSlab,
    DeepslateTileSlab,
    Scaffolding,
    Redstone,
    RedstoneTorch,
    RedstoneBlock,
    Repeater,
    Comparator,
    Piston,
    StickyPiston,
    SlimeBlock,
    HoneyBlock,
    Observer,
    Hopper,
    Dispenser,
    Dropper,
    Lectern,
    Target,
    Lever,
    LightningRod,
    DaylightDetector,
    SculkSensor,
    CalibratedSculkSensor,
    TripwireHook,
    TrappedChest,
    Tnt,
    RedstoneLamp,
    NoteBlock,
    StoneButton,
    PolishedBlackstoneButton,
    OakButton,
    SpruceButton,
    BirchButton,
    JungleButton,
    AcaciaButton,
    CherryButton,
    DarkOakButton,
    MangroveButton,
    BambooButton,
    CrimsonButton,
    WarpedButton,
    StonePressurePlate,
    PolishedBlackstonePressurePlate,
    LightWeightedPressurePlate,
    HeavyWeightedPressurePlate,
    OakPressurePlate,
    SprucePressurePlate,
    BirchPressurePlate,
    JunglePressurePlate,
    AcaciaPressurePlate,
    CherryPressurePlate,
    DarkOakPressurePlate,
    MangrovePressurePlate,
    BambooPressurePlate,
    CrimsonPressurePlate,
    WarpedPressurePlate,
    IronDoor,
    OakDoor,
    SpruceDoor,
    BirchDoor,
    JungleDoor,
    AcaciaDoor,
    CherryDoor,
    DarkOakDoor,
    MangroveDoor,
    BambooDoor,
    CrimsonDoor,
    WarpedDoor,
    IronTrapdoor,
    OakTrapdoor,
    SpruceTrapdoor,
    BirchTrapdoor,
    JungleTrapdoor,
    AcaciaTrapdoor,
    CherryTrapdoor,
    DarkOakTrapdoor,
    MangroveTrapdoor,
    BambooTrapdoor,
    CrimsonTrapdoor,
    WarpedTrapdoor,
    OakFenceGate,
    SpruceFenceGate,
    BirchFenceGate,
    JungleFenceGate,
    AcaciaFenceGate,
    CherryFenceGate,
    DarkOakFenceGate,
    MangroveFenceGate,
    BambooFenceGate,
    CrimsonFenceGate,
    WarpedFenceGate,
    PoweredRail,
    DetectorRail,
    Rail,
    ActivatorRail,
    Saddle,
    Minecart,
    ChestMinecart,
    FurnaceMinecart,
    TntMinecart,
    HopperMinecart,
    CarrotOnAStick,
    WarpedFungusOnAStick,
    Elytra,
    OakBoat,
    OakChestBoat,
    SpruceBoat,
    SpruceChestBoat,
    BirchBoat,
    BirchChestBoat,
    JungleBoat,
    JungleChestBoat,
    AcaciaBoat,
    AcaciaChestBoat,
    CherryBoat,
    CherryChestBoat,
    DarkOakBoat,
    DarkOakChestBoat,
    MangroveBoat,
    MangroveChestBoat,
    BambooRaft,
    BambooChestRaft,
    StructureBlock,
    Jigsaw,
    TurtleHelmet,
    Scute,
    FlintAndSteel,
    Apple,
    Bow,
    Arrow,
    Coal,
    Charcoal,
    Diamond,
    Emerald,
    LapisLazuli,
    Quartz,
    AmethystShard,
    RawIron,
    IronIngot,
    RawCopper,
    CopperIngot,
    RawGold,
    GoldIngot,
    NetheriteIngot,
    NetheriteScrap,
    WoodenSword,
    WoodenShovel,
    WoodenPickaxe,
    WoodenAxe,
    WoodenHoe,
    StoneSword,
    StoneShovel,
    StonePickaxe,
    StoneAxe,
    StoneHoe,
    GoldenSword,
    GoldenShovel,
    GoldenPickaxe,
    GoldenAxe,
    GoldenHoe,
    IronSword,
    IronShovel,
    IronPickaxe,
    IronAxe,
    IronHoe,
    DiamondSword,
    DiamondShovel,
    DiamondPickaxe,
    DiamondAxe,
    DiamondHoe,
    NetheriteSword,
    NetheriteShovel,
    NetheritePickaxe,
    NetheriteAxe,
    NetheriteHoe,
    Stick,
    Bowl,
    MushroomStew,
    String,
    Feather,
    Gunpowder,
    WheatSeeds,
    Wheat,
    Bread,
    LeatherHelmet,
    LeatherChestplate,
    LeatherLeggings,
    LeatherBoots,
    ChainmailHelmet,
    ChainmailChestplate,
    ChainmailLeggings,
    ChainmailBoots,
    IronHelmet,
    IronChestplate,
    IronLeggings,
    IronBoots,
    DiamondHelmet,
    DiamondChestplate,
    DiamondLeggings,
    DiamondBoots,
    GoldenHelmet,
    GoldenChestplate,
    GoldenLeggings,
    GoldenBoots,
    NetheriteHelmet,
    NetheriteChestplate,
    NetheriteLeggings,
    NetheriteBoots,
    Flint,
    Porkchop,
    CookedPorkchop,
    Painting,
    GoldenApple,
    EnchantedGoldenApple,
    OakSign,
    SpruceSign,
    BirchSign,
    JungleSign,
    AcaciaSign,
    CherrySign,
    DarkOakSign,
    MangroveSign,
    BambooSign,
    CrimsonSign,
    WarpedSign,
    OakHangingSign,
    SpruceHangingSign,
    BirchHangingSign,
    JungleHangingSign,
    AcaciaHangingSign,
    CherryHangingSign,
    DarkOakHangingSign,
    MangroveHangingSign,
    BambooHangingSign,
    CrimsonHangingSign,
    WarpedHangingSign,
    Bucket,
    WaterBucket,
    LavaBucket,
    PowderSnowBucket,
    Snowball,
    Leather,
    MilkBucket,
    PufferfishBucket,
    SalmonBucket,
    CodBucket,
    TropicalFishBucket,
    AxolotlBucket,
    TadpoleBucket,
    Brick,
    ClayBall,
    DriedKelpBlock,
    Paper,
    Book,
    SlimeBall,
    Egg,
    Compass,
    RecoveryCompass,
    Bundle,
    FishingRod,
    Clock,
    Spyglass,
    GlowstoneDust,
    Cod,
    Salmon,
    TropicalFish,
    Pufferfish,
    CookedCod,
    CookedSalmon,
    InkSac,
    GlowInkSac,
    CocoaBeans,
    WhiteDye,
    OrangeDye,
    MagentaDye,
    LightBlueDye,
    YellowDye,
    LimeDye,
    PinkDye,
    GrayDye,
    LightGrayDye,
    CyanDye,
    PurpleDye,
    BlueDye,
    BrownDye,
    GreenDye,
    RedDye,
    BlackDye,
    BoneMeal,
    Bone,
    Sugar,
    Cake,
    WhiteBed,
    OrangeBed,
    MagentaBed,
    LightBlueBed,
    YellowBed,
    LimeBed,
    PinkBed,
    GrayBed,
    LightGrayBed,
    CyanBed,
    PurpleBed,
    BlueBed,
    BrownBed,
    GreenBed,
    RedBed,
    BlackBed,
    Cookie,
    FilledMap,
    Shears,
    MelonSlice,
    DriedKelp,
    PumpkinSeeds,
    MelonSeeds,
    Beef,
    CookedBeef,
    Chicken,
    CookedChicken,
    RottenFlesh,
    EnderPearl,
    BlazeRod,
    GhastTear,
    GoldNugget,
    NetherWart,
    Potion,
    GlassBottle,
    SpiderEye,
    FermentedSpiderEye,
    BlazePowder,
    MagmaCream,
    BrewingStand,
    Cauldron,
    EnderEye,
    GlisteringMelonSlice,
    AllaySpawnEgg,
    AxolotlSpawnEgg,
    BatSpawnEgg,
    BeeSpawnEgg,
    BlazeSpawnEgg,
    CatSpawnEgg,
    CamelSpawnEgg,
    CaveSpiderSpawnEgg,
    ChickenSpawnEgg,
    CodSpawnEgg,
    CowSpawnEgg,
    CreeperSpawnEgg,
    DolphinSpawnEgg,
    DonkeySpawnEgg,
    DrownedSpawnEgg,
    ElderGuardianSpawnEgg,
    EnderDragonSpawnEgg,
    EndermanSpawnEgg,
    EndermiteSpawnEgg,
    EvokerSpawnEgg,
    FoxSpawnEgg,
    FrogSpawnEgg,
    GhastSpawnEgg,
    GlowSquidSpawnEgg,
    GoatSpawnEgg,
    GuardianSpawnEgg,
    HoglinSpawnEgg,
    HorseSpawnEgg,
    HuskSpawnEgg,
    IronGolemSpawnEgg,
    LlamaSpawnEgg,
    MagmaCubeSpawnEgg,
    MooshroomSpawnEgg,
    MuleSpawnEgg,
    OcelotSpawnEgg,
    PandaSpawnEgg,
    ParrotSpawnEgg,
    PhantomSpawnEgg,
    PigSpawnEgg,
    PiglinSpawnEgg,
    PiglinBruteSpawnEgg,
    PillagerSpawnEgg,
    PolarBearSpawnEgg,
    PufferfishSpawnEgg,
    RabbitSpawnEgg,
    RavagerSpawnEgg,
    SalmonSpawnEgg,
    SheepSpawnEgg,
    ShulkerSpawnEgg,
    SilverfishSpawnEgg,
    SkeletonSpawnEgg,
    SkeletonHorseSpawnEgg,
    SlimeSpawnEgg,
    SnifferSpawnEgg,
    SnowGolemSpawnEgg,
    SpiderSpawnEgg,
    SquidSpawnEgg,
    StraySpawnEgg,
    StriderSpawnEgg,
    TadpoleSpawnEgg,
    TraderLlamaSpawnEgg,
    TropicalFishSpawnEgg,
    TurtleSpawnEgg,
    VexSpawnEgg,
    VillagerSpawnEgg,
    VindicatorSpawnEgg,
    WanderingTraderSpawnEgg,
    WardenSpawnEgg,
    WitchSpawnEgg,
    WitherSpawnEgg,
    WitherSkeletonSpawnEgg,
    WolfSpawnEgg,
    ZoglinSpawnEgg,
    ZombieSpawnEgg,
    ZombieHorseSpawnEgg,
    ZombieVillagerSpawnEgg,
    ZombifiedPiglinSpawnEgg,
    ExperienceBottle,
    FireCharge,
    WritableBook,
    WrittenBook,
    ItemFrame,
    GlowItemFrame,
    FlowerPot,
    Carrot,
    Potato,
    BakedPotato,
    PoisonousPotato,
    Map,
    GoldenCarrot,
    SkeletonSkull,
    WitherSkeletonSkull,
    PlayerHead,
    ZombieHead,
    CreeperHead,
    DragonHead,
    PiglinHead,
    NetherStar,
    PumpkinPie,
    FireworkRocket,
    FireworkStar,
    EnchantedBook,
    NetherBrick,
    PrismarineShard,
    PrismarineCrystals,
    Rabbit,
    CookedRabbit,
    RabbitStew,
    RabbitFoot,
    RabbitHide,
    ArmorStand,
    IronHorseArmor,
    GoldenHorseArmor,
    DiamondHorseArmor,
    LeatherHorseArmor,
    Lead,
    NameTag,
    CommandBlockMinecart,
    Mutton,
    CookedMutton,
    WhiteBanner,
    OrangeBanner,
    MagentaBanner,
    LightBlueBanner,
    YellowBanner,
    LimeBanner,
    PinkBanner,
    GrayBanner,
    LightGrayBanner,
    CyanBanner,
    PurpleBanner,
    BlueBanner,
    BrownBanner,
    GreenBanner,
    RedBanner,
    BlackBanner,
    EndCrystal,
    ChorusFruit,
    PoppedChorusFruit,
    TorchflowerSeeds,
    PitcherPod,
    Beetroot,
    BeetrootSeeds,
    BeetrootSoup,
    DragonBreath,
    SplashPotion,
    SpectralArrow,
    TippedArrow,
    LingeringPotion,
    Shield,
    TotemOfUndying,
    ShulkerShell,
    IronNugget,
    KnowledgeBook,
    DebugStick,
    MusicDisc13,
    MusicDiscCat,
    MusicDiscBlocks,
    MusicDiscChirp,
    MusicDiscFar,
    MusicDiscMall,
    MusicDiscMellohi,
    MusicDiscStal,
    MusicDiscStrad,
    MusicDiscWard,
    MusicDisc11,
    MusicDiscWait,
    MusicDiscOtherside,
    MusicDiscRelic,
    MusicDisc5,
    MusicDiscPigstep,
    DiscFragment5,
    Trident,
    PhantomMembrane,
    NautilusShell,
    HeartOfTheSea,
    Crossbow,
    SuspiciousStew,
    Loom,
    FlowerBannerPattern,
    CreeperBannerPattern,
    SkullBannerPattern,
    MojangBannerPattern,
    GlobeBannerPattern,
    PiglinBannerPattern,
    GoatHorn,
    Composter,
    Barrel,
    Smoker,
    BlastFurnace,
    CartographyTable,
    FletchingTable,
    Grindstone,
    SmithingTable,
    Stonecutter,
    Bell,
    Lantern,
    SoulLantern,
    SweetBerries,
    GlowBerries,
    Campfire,
    SoulCampfire,
    Shroomlight,
    Honeycomb,
    BeeNest,
    Beehive,
    HoneyBottle,
    HoneycombBlock,
    Lodestone,
    CryingObsidian,
    Blackstone,
    BlackstoneSlab,
    BlackstoneStairs,
    GildedBlackstone,
    PolishedBlackstone,
    PolishedBlackstoneSlab,
    PolishedBlackstoneStairs,
    ChiseledPolishedBlackstone,
    PolishedBlackstoneBricks,
    PolishedBlackstoneBrickSlab,
    PolishedBlackstoneBrickStairs,
    CrackedPolishedBlackstoneBricks,
    RespawnAnchor,
    Candle,
    WhiteCandle,
    OrangeCandle,
    MagentaCandle,
    LightBlueCandle,
    YellowCandle,
    LimeCandle,
    PinkCandle,
    GrayCandle,
    LightGrayCandle,
    CyanCandle,
    PurpleCandle,
    BlueCandle,
    BrownCandle,
    GreenCandle,
    RedCandle,
    BlackCandle,
    SmallAmethystBud,
    MediumAmethystBud,
    LargeAmethystBud,
    AmethystCluster,
    PointedDripstone,
    OchreFroglight,
    VerdantFroglight,
    PearlescentFroglight,
    Frogspawn,
    EchoShard,
    Brush,
    NetheriteUpgradeSmithingTemplate,
    SentryArmorTrimSmithingTemplate,
    DuneArmorTrimSmithingTemplate,
    CoastArmorTrimSmithingTemplate,
    WildArmorTrimSmithingTemplate,
    WardArmorTrimSmithingTemplate,
    EyeArmorTrimSmithingTemplate,
    VexArmorTrimSmithingTemplate,
    TideArmorTrimSmithingTemplate,
    SnoutArmorTrimSmithingTemplate,
    RibArmorTrimSmithingTemplate,
    SpireArmorTrimSmithingTemplate,
    WayfinderArmorTrimSmithingTemplate,
    ShaperArmorTrimSmithingTemplate,
    SilenceArmorTrimSmithingTemplate,
    RaiserArmorTrimSmithingTemplate,
    HostArmorTrimSmithingTemplate,
    AnglerPotterySherd,
    ArcherPotterySherd,
    ArmsUpPotterySherd,
    BladePotterySherd,
    BrewerPotterySherd,
    BurnPotterySherd,
    DangerPotterySherd,
    ExplorerPotterySherd,
    FriendPotterySherd,
    HeartPotterySherd,
    HeartbreakPotterySherd,
    HowlPotterySherd,
    MinerPotterySherd,
    MournerPotterySherd,
    PlentyPotterySherd,
    PrizePotterySherd,
    SheafPotterySherd,
    ShelterPotterySherd,
    SkullPotterySherd,
    SnortPotterySherd,
    Water,
    Lava,
    TallSeagrass,
    PistonHead,
    MovingPiston,
    WallTorch,
    Fire,
    SoulFire,
    RedstoneWire,
    OakWallSign,
    SpruceWallSign,
    BirchWallSign,
    AcaciaWallSign,
    CherryWallSign,
    JungleWallSign,
    DarkOakWallSign,
    MangroveWallSign,
    BambooWallSign,
    OakWallHangingSign,
    SpruceWallHangingSign,
    BirchWallHangingSign,
    AcaciaWallHangingSign,
    CherryWallHangingSign,
    JungleWallHangingSign,
    DarkOakWallHangingSign,
    MangroveWallHangingSign,
    CrimsonWallHangingSign,
    WarpedWallHangingSign,
    BambooWallHangingSign,
    RedstoneWallTorch,
    SoulWallTorch,
    NetherPortal,
    AttachedPumpkinStem,
    AttachedMelonStem,
    PumpkinStem,
    MelonStem,
    WaterCauldron,
    LavaCauldron,
    PowderSnowCauldron,
    EndPortal,
    Cocoa,
    Tripwire,
    PottedTorchflower,
    PottedOakSapling,
    PottedSpruceSapling,
    PottedBirchSapling,
    PottedJungleSapling,
    PottedAcaciaSapling,
    PottedCherrySapling,
    PottedDarkOakSapling,
    PottedMangrovePropagule,
    PottedFern,
    PottedDandelion,
    PottedPoppy,
    PottedBlueOrchid,
    PottedAllium,
    PottedAzureBluet,
    PottedRedTulip,
    PottedOrangeTulip,
    PottedWhiteTulip,
    PottedPinkTulip,
    PottedOxeyeDaisy,
    PottedCornflower,
    PottedLilyOfTheValley,
    PottedWitherRose,
    PottedRedMushroom,
    PottedBrownMushroom,
    PottedDeadBush,
    PottedCactus,
    Carrots,
    Potatoes,
    SkeletonWallSkull,
    WitherSkeletonWallSkull,
    ZombieWallHead,
    PlayerWallHead,
    CreeperWallHead,
    DragonWallHead,
    PiglinWallHead,
    WhiteWallBanner,
    OrangeWallBanner,
    MagentaWallBanner,
    LightBlueWallBanner,
    YellowWallBanner,
    LimeWallBanner,
    PinkWallBanner,
    GrayWallBanner,
    LightGrayWallBanner,
    CyanWallBanner,
    PurpleWallBanner,
    BlueWallBanner,
    BrownWallBanner,
    GreenWallBanner,
    RedWallBanner,
    BlackWallBanner,
    TorchflowerCrop,
    PitcherCrop,
    Beetroots,
    EndGateway,
    FrostedIce,
    KelpPlant,
    DeadTubeCoralWallFan,
    DeadBrainCoralWallFan,
    DeadBubbleCoralWallFan,
    DeadFireCoralWallFan,
    DeadHornCoralWallFan,
    TubeCoralWallFan,
    BrainCoralWallFan,
    BubbleCoralWallFan,
    FireCoralWallFan,
    HornCoralWallFan,
    BambooSapling,
    PottedBamboo,
    VoidAir,
    CaveAir,
    BubbleColumn,
    SweetBerryBush,
    WeepingVinesPlant,
    TwistingVinesPlant,
    CrimsonWallSign,
    WarpedWallSign,
    PottedCrimsonFungus,
    PottedWarpedFungus,
    PottedCrimsonRoots,
    PottedWarpedRoots,
    CandleCake,
    WhiteCandleCake,
    OrangeCandleCake,
    MagentaCandleCake,
    LightBlueCandleCake,
    YellowCandleCake,
    LimeCandleCake,
    PinkCandleCake,
    GrayCandleCake,
    LightGrayCandleCake,
    CyanCandleCake,
    PurpleCandleCake,
    BlueCandleCake,
    BrownCandleCake,
    GreenCandleCake,
    RedCandleCake,
    BlackCandleCake,
    PowderSnow,
    CaveVines,
    CaveVinesPlant,
    BigDripleafStem,
    PottedAzaleaBush,
    PottedFloweringAzaleaBush,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAir,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGrass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDirt,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCobblestone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWood,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySapling,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBedrock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWater,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStationaryWater,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLava,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStationaryLava,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySand,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGravel,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCoalOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLog,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeaves,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySponge,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGlass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLapisOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLapisBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDispenser,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySandstone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNoteBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBedBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPoweredRail,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDetectorRail,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPistonStickyBase,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWeb,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLongGrass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDeadBush,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPistonBase,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPistonExtension,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWool,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPistonMovingPiece,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyYellowFlower,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedRose,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrownMushroom,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedMushroom,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDoubleStep,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStep,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTnt,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBookshelf,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMossyCobblestone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyObsidian,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTorch,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFire,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMobSpawner,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChest,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneWire,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWorkbench,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCrops,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySoil,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFurnace,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBurningFurnace,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySignPost,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodenDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLadder,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRails,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCobblestoneStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWallSign,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLever,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStonePlate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronDoorBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodPlate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGlowingRedstoneOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneTorchOff,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneTorchOn,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneButton,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySnow,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIce,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySnowBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCactus,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyClay,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySugarCaneBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJukebox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPumpkin,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherrack,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySoulSand,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGlowstone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPortal,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJackOLantern,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCakeBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiodeBlockOff,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiodeBlockOn,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStainedGlass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTrapDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMonsterEggs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySmoothBrick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHugeMushroom1,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHugeMushroom2,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyThinGlass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMelonBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPumpkinStem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMelonStem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyVine,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrickStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySmoothStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMycel,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWaterLily,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherBrick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherBrickStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherWarts,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnchantmentTable,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrewingStand,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCauldron,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnderPortal,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnderPortalFrame,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnderStone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDragonEgg,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneLampOff,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneLampOn,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodDoubleStep,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodStep,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCocoa,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySandstoneStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEmeraldOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnderChest,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTripwireHook,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTripwire,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEmeraldBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpruceWoodStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBirchWoodStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJungleWoodStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCommand,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBeacon,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCobbleWall,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFlowerPot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCarrot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPotato,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodButton,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySkull,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAnvil,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTrappedChest,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldPlate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronPlate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneComparatorOff,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneComparatorOn,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDaylightDetector,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyQuartzOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHopper,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyQuartzBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyQuartzStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyActivatorRail,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDropper,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStainedClay,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStainedGlassPane,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeaves2,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLog2,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAcaciaStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDarkOakStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySlimeBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBarrier,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronTrapdoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPrismarine,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySeaLantern,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHayBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCarpet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHardClay,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCoalBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPackedIce,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDoublePlant,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStandingBanner,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWallBanner,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDaylightDetectorInverted,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedSandstone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedSandstoneStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDoubleStoneSlab2,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneSlab2,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpruceFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBirchFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJungleFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDarkOakFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAcaciaFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpruceFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBirchFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJungleFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDarkOakFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAcaciaFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpruceDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBirchDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJungleDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAcaciaDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDarkOakDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEndRod,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChorusPlant,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChorusFlower,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpurBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpurPillar,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpurStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpurDoubleSlab,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpurSlab,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEndBricks,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBeetrootBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGrassPath,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEndGateway,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCommandRepeating,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCommandChain,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFrostedIce,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMagma,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherWartBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedNetherBrick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoneBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStructureVoid,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyObserver,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWhiteShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyOrangeShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMagentaShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLightBlueShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyYellowShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLimeShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPinkShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGrayShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySilverShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCyanShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpleShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlueShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrownShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGreenShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlackShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWhiteGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyOrangeGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMagentaGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLightBlueGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyYellowGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLimeGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPinkGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGrayGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySilverGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCyanGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpleGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlueGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrownGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGreenGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlackGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyConcrete,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyConcretePowder,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStructureBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronSpade,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronPickaxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronAxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFlintAndSteel,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyApple,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBow,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyArrow,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCoal,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamond,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronIngot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldIngot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronSword,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodSword,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodSpade,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodPickaxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodAxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneSword,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneSpade,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStonePickaxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneAxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondSword,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondSpade,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondPickaxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondAxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBowl,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMushroomSoup,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldSword,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldSpade,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldPickaxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldAxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyString,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFeather,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySulphur,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodHoe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneHoe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronHoe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondHoe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldHoe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySeeds,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWheat,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBread,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeatherHelmet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeatherChestplate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeatherLeggings,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeatherBoots,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChainmailHelmet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChainmailChestplate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChainmailLeggings,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChainmailBoots,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronHelmet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronChestplate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronLeggings,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronBoots,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondHelmet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondChestplate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondLeggings,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondBoots,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldHelmet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldChestplate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldLeggings,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldBoots,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFlint,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPork,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGrilledPork,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPainting,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldenApple,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySign,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBucket,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWaterBucket,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLavaBucket,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySaddle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySnowBall,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoat,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeather,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMilkBucket,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyClayBrick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyClayBall,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySugarCane,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPaper,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBook,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySlimeBall,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStorageMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPoweredMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEgg,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCompass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFishingRod,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWatch,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGlowstoneDust,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRawFish,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookedFish,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyInkSack,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySugar,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCake,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBed,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiode,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookie,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMap,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyShears,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMelon,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPumpkinSeeds,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMelonSeeds,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRawBeef,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookedBeef,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRawChicken,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookedChicken,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRottenFlesh,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnderPearl,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlazeRod,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGhastTear,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldNugget,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherStalk,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPotion,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGlassBottle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpiderEye,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFermentedSpiderEye,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlazePowder,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMagmaCream,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrewingStandItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCauldronItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEyeOfEnder,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpeckledMelon,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMonsterEgg,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyExpBottle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFireball,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBookAndQuill,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWrittenBook,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEmerald,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyItemFrame,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFlowerPotItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCarrotItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPotatoItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBakedPotato,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPoisonousPotato,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEmptyMap,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldenCarrot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySkullItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCarrotStick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherStar,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPumpkinPie,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFirework,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFireworkCharge,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnchantedBook,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneComparator,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherBrickItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyQuartz,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyExplosiveMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHopperMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPrismarineShard,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPrismarineCrystals,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRabbit,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookedRabbit,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRabbitStew,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRabbitFoot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRabbitHide,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyArmorStand,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronBarding,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldBarding,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondBarding,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeash,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNameTag,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCommandMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMutton,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookedMutton,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBanner,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEndCrystal,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpruceDoorItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBirchDoorItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJungleDoorItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAcaciaDoorItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDarkOakDoorItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChorusFruit,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChorusFruitPopped,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBeetroot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBeetrootSeeds,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBeetrootSoup,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDragonsBreath,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySplashPotion,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpectralArrow,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTippedArrow,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLingeringPotion,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyShield,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyElytra,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoatSpruce,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoatBirch,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoatJungle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoatAcacia,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoatDarkOak,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTotem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyShulkerShell,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronNugget,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyKnowledgeBook,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldRecord,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGreenRecord,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord3,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord4,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord5,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord6,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord7,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord8,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord9,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord10,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord11,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord12,
}
impl std::fmt::Display for MaterialEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            MaterialEnum::Air => f.write_str("AIR"),
            MaterialEnum::Stone => f.write_str("STONE"),
            MaterialEnum::Granite => f.write_str("GRANITE"),
            MaterialEnum::PolishedGranite => f.write_str("POLISHED_GRANITE"),
            MaterialEnum::Diorite => f.write_str("DIORITE"),
            MaterialEnum::PolishedDiorite => f.write_str("POLISHED_DIORITE"),
            MaterialEnum::Andesite => f.write_str("ANDESITE"),
            MaterialEnum::PolishedAndesite => f.write_str("POLISHED_ANDESITE"),
            MaterialEnum::Deepslate => f.write_str("DEEPSLATE"),
            MaterialEnum::CobbledDeepslate => f.write_str("COBBLED_DEEPSLATE"),
            MaterialEnum::PolishedDeepslate => f.write_str("POLISHED_DEEPSLATE"),
            MaterialEnum::Calcite => f.write_str("CALCITE"),
            MaterialEnum::Tuff => f.write_str("TUFF"),
            MaterialEnum::DripstoneBlock => f.write_str("DRIPSTONE_BLOCK"),
            MaterialEnum::GrassBlock => f.write_str("GRASS_BLOCK"),
            MaterialEnum::Dirt => f.write_str("DIRT"),
            MaterialEnum::CoarseDirt => f.write_str("COARSE_DIRT"),
            MaterialEnum::Podzol => f.write_str("PODZOL"),
            MaterialEnum::RootedDirt => f.write_str("ROOTED_DIRT"),
            MaterialEnum::Mud => f.write_str("MUD"),
            MaterialEnum::CrimsonNylium => f.write_str("CRIMSON_NYLIUM"),
            MaterialEnum::WarpedNylium => f.write_str("WARPED_NYLIUM"),
            MaterialEnum::Cobblestone => f.write_str("COBBLESTONE"),
            MaterialEnum::OakPlanks => f.write_str("OAK_PLANKS"),
            MaterialEnum::SprucePlanks => f.write_str("SPRUCE_PLANKS"),
            MaterialEnum::BirchPlanks => f.write_str("BIRCH_PLANKS"),
            MaterialEnum::JunglePlanks => f.write_str("JUNGLE_PLANKS"),
            MaterialEnum::AcaciaPlanks => f.write_str("ACACIA_PLANKS"),
            MaterialEnum::CherryPlanks => f.write_str("CHERRY_PLANKS"),
            MaterialEnum::DarkOakPlanks => f.write_str("DARK_OAK_PLANKS"),
            MaterialEnum::MangrovePlanks => f.write_str("MANGROVE_PLANKS"),
            MaterialEnum::BambooPlanks => f.write_str("BAMBOO_PLANKS"),
            MaterialEnum::CrimsonPlanks => f.write_str("CRIMSON_PLANKS"),
            MaterialEnum::WarpedPlanks => f.write_str("WARPED_PLANKS"),
            MaterialEnum::BambooMosaic => f.write_str("BAMBOO_MOSAIC"),
            MaterialEnum::OakSapling => f.write_str("OAK_SAPLING"),
            MaterialEnum::SpruceSapling => f.write_str("SPRUCE_SAPLING"),
            MaterialEnum::BirchSapling => f.write_str("BIRCH_SAPLING"),
            MaterialEnum::JungleSapling => f.write_str("JUNGLE_SAPLING"),
            MaterialEnum::AcaciaSapling => f.write_str("ACACIA_SAPLING"),
            MaterialEnum::CherrySapling => f.write_str("CHERRY_SAPLING"),
            MaterialEnum::DarkOakSapling => f.write_str("DARK_OAK_SAPLING"),
            MaterialEnum::MangrovePropagule => f.write_str("MANGROVE_PROPAGULE"),
            MaterialEnum::Bedrock => f.write_str("BEDROCK"),
            MaterialEnum::Sand => f.write_str("SAND"),
            MaterialEnum::SuspiciousSand => f.write_str("SUSPICIOUS_SAND"),
            MaterialEnum::SuspiciousGravel => f.write_str("SUSPICIOUS_GRAVEL"),
            MaterialEnum::RedSand => f.write_str("RED_SAND"),
            MaterialEnum::Gravel => f.write_str("GRAVEL"),
            MaterialEnum::CoalOre => f.write_str("COAL_ORE"),
            MaterialEnum::DeepslateCoalOre => f.write_str("DEEPSLATE_COAL_ORE"),
            MaterialEnum::IronOre => f.write_str("IRON_ORE"),
            MaterialEnum::DeepslateIronOre => f.write_str("DEEPSLATE_IRON_ORE"),
            MaterialEnum::CopperOre => f.write_str("COPPER_ORE"),
            MaterialEnum::DeepslateCopperOre => f.write_str("DEEPSLATE_COPPER_ORE"),
            MaterialEnum::GoldOre => f.write_str("GOLD_ORE"),
            MaterialEnum::DeepslateGoldOre => f.write_str("DEEPSLATE_GOLD_ORE"),
            MaterialEnum::RedstoneOre => f.write_str("REDSTONE_ORE"),
            MaterialEnum::DeepslateRedstoneOre => f.write_str("DEEPSLATE_REDSTONE_ORE"),
            MaterialEnum::EmeraldOre => f.write_str("EMERALD_ORE"),
            MaterialEnum::DeepslateEmeraldOre => f.write_str("DEEPSLATE_EMERALD_ORE"),
            MaterialEnum::LapisOre => f.write_str("LAPIS_ORE"),
            MaterialEnum::DeepslateLapisOre => f.write_str("DEEPSLATE_LAPIS_ORE"),
            MaterialEnum::DiamondOre => f.write_str("DIAMOND_ORE"),
            MaterialEnum::DeepslateDiamondOre => f.write_str("DEEPSLATE_DIAMOND_ORE"),
            MaterialEnum::NetherGoldOre => f.write_str("NETHER_GOLD_ORE"),
            MaterialEnum::NetherQuartzOre => f.write_str("NETHER_QUARTZ_ORE"),
            MaterialEnum::AncientDebris => f.write_str("ANCIENT_DEBRIS"),
            MaterialEnum::CoalBlock => f.write_str("COAL_BLOCK"),
            MaterialEnum::RawIronBlock => f.write_str("RAW_IRON_BLOCK"),
            MaterialEnum::RawCopperBlock => f.write_str("RAW_COPPER_BLOCK"),
            MaterialEnum::RawGoldBlock => f.write_str("RAW_GOLD_BLOCK"),
            MaterialEnum::AmethystBlock => f.write_str("AMETHYST_BLOCK"),
            MaterialEnum::BuddingAmethyst => f.write_str("BUDDING_AMETHYST"),
            MaterialEnum::IronBlock => f.write_str("IRON_BLOCK"),
            MaterialEnum::CopperBlock => f.write_str("COPPER_BLOCK"),
            MaterialEnum::GoldBlock => f.write_str("GOLD_BLOCK"),
            MaterialEnum::DiamondBlock => f.write_str("DIAMOND_BLOCK"),
            MaterialEnum::NetheriteBlock => f.write_str("NETHERITE_BLOCK"),
            MaterialEnum::ExposedCopper => f.write_str("EXPOSED_COPPER"),
            MaterialEnum::WeatheredCopper => f.write_str("WEATHERED_COPPER"),
            MaterialEnum::OxidizedCopper => f.write_str("OXIDIZED_COPPER"),
            MaterialEnum::CutCopper => f.write_str("CUT_COPPER"),
            MaterialEnum::ExposedCutCopper => f.write_str("EXPOSED_CUT_COPPER"),
            MaterialEnum::WeatheredCutCopper => f.write_str("WEATHERED_CUT_COPPER"),
            MaterialEnum::OxidizedCutCopper => f.write_str("OXIDIZED_CUT_COPPER"),
            MaterialEnum::CutCopperStairs => f.write_str("CUT_COPPER_STAIRS"),
            MaterialEnum::ExposedCutCopperStairs => f.write_str("EXPOSED_CUT_COPPER_STAIRS"),
            MaterialEnum::WeatheredCutCopperStairs => f.write_str("WEATHERED_CUT_COPPER_STAIRS"),
            MaterialEnum::OxidizedCutCopperStairs => f.write_str("OXIDIZED_CUT_COPPER_STAIRS"),
            MaterialEnum::CutCopperSlab => f.write_str("CUT_COPPER_SLAB"),
            MaterialEnum::ExposedCutCopperSlab => f.write_str("EXPOSED_CUT_COPPER_SLAB"),
            MaterialEnum::WeatheredCutCopperSlab => f.write_str("WEATHERED_CUT_COPPER_SLAB"),
            MaterialEnum::OxidizedCutCopperSlab => f.write_str("OXIDIZED_CUT_COPPER_SLAB"),
            MaterialEnum::WaxedCopperBlock => f.write_str("WAXED_COPPER_BLOCK"),
            MaterialEnum::WaxedExposedCopper => f.write_str("WAXED_EXPOSED_COPPER"),
            MaterialEnum::WaxedWeatheredCopper => f.write_str("WAXED_WEATHERED_COPPER"),
            MaterialEnum::WaxedOxidizedCopper => f.write_str("WAXED_OXIDIZED_COPPER"),
            MaterialEnum::WaxedCutCopper => f.write_str("WAXED_CUT_COPPER"),
            MaterialEnum::WaxedExposedCutCopper => f.write_str("WAXED_EXPOSED_CUT_COPPER"),
            MaterialEnum::WaxedWeatheredCutCopper => f.write_str("WAXED_WEATHERED_CUT_COPPER"),
            MaterialEnum::WaxedOxidizedCutCopper => f.write_str("WAXED_OXIDIZED_CUT_COPPER"),
            MaterialEnum::WaxedCutCopperStairs => f.write_str("WAXED_CUT_COPPER_STAIRS"),
            MaterialEnum::WaxedExposedCutCopperStairs => {
                f.write_str("WAXED_EXPOSED_CUT_COPPER_STAIRS")
            }
            MaterialEnum::WaxedWeatheredCutCopperStairs => {
                f.write_str("WAXED_WEATHERED_CUT_COPPER_STAIRS")
            }
            MaterialEnum::WaxedOxidizedCutCopperStairs => {
                f.write_str("WAXED_OXIDIZED_CUT_COPPER_STAIRS")
            }
            MaterialEnum::WaxedCutCopperSlab => f.write_str("WAXED_CUT_COPPER_SLAB"),
            MaterialEnum::WaxedExposedCutCopperSlab => f.write_str("WAXED_EXPOSED_CUT_COPPER_SLAB"),
            MaterialEnum::WaxedWeatheredCutCopperSlab => {
                f.write_str("WAXED_WEATHERED_CUT_COPPER_SLAB")
            }
            MaterialEnum::WaxedOxidizedCutCopperSlab => {
                f.write_str("WAXED_OXIDIZED_CUT_COPPER_SLAB")
            }
            MaterialEnum::OakLog => f.write_str("OAK_LOG"),
            MaterialEnum::SpruceLog => f.write_str("SPRUCE_LOG"),
            MaterialEnum::BirchLog => f.write_str("BIRCH_LOG"),
            MaterialEnum::JungleLog => f.write_str("JUNGLE_LOG"),
            MaterialEnum::AcaciaLog => f.write_str("ACACIA_LOG"),
            MaterialEnum::CherryLog => f.write_str("CHERRY_LOG"),
            MaterialEnum::DarkOakLog => f.write_str("DARK_OAK_LOG"),
            MaterialEnum::MangroveLog => f.write_str("MANGROVE_LOG"),
            MaterialEnum::MangroveRoots => f.write_str("MANGROVE_ROOTS"),
            MaterialEnum::MuddyMangroveRoots => f.write_str("MUDDY_MANGROVE_ROOTS"),
            MaterialEnum::CrimsonStem => f.write_str("CRIMSON_STEM"),
            MaterialEnum::WarpedStem => f.write_str("WARPED_STEM"),
            MaterialEnum::BambooBlock => f.write_str("BAMBOO_BLOCK"),
            MaterialEnum::StrippedOakLog => f.write_str("STRIPPED_OAK_LOG"),
            MaterialEnum::StrippedSpruceLog => f.write_str("STRIPPED_SPRUCE_LOG"),
            MaterialEnum::StrippedBirchLog => f.write_str("STRIPPED_BIRCH_LOG"),
            MaterialEnum::StrippedJungleLog => f.write_str("STRIPPED_JUNGLE_LOG"),
            MaterialEnum::StrippedAcaciaLog => f.write_str("STRIPPED_ACACIA_LOG"),
            MaterialEnum::StrippedCherryLog => f.write_str("STRIPPED_CHERRY_LOG"),
            MaterialEnum::StrippedDarkOakLog => f.write_str("STRIPPED_DARK_OAK_LOG"),
            MaterialEnum::StrippedMangroveLog => f.write_str("STRIPPED_MANGROVE_LOG"),
            MaterialEnum::StrippedCrimsonStem => f.write_str("STRIPPED_CRIMSON_STEM"),
            MaterialEnum::StrippedWarpedStem => f.write_str("STRIPPED_WARPED_STEM"),
            MaterialEnum::StrippedOakWood => f.write_str("STRIPPED_OAK_WOOD"),
            MaterialEnum::StrippedSpruceWood => f.write_str("STRIPPED_SPRUCE_WOOD"),
            MaterialEnum::StrippedBirchWood => f.write_str("STRIPPED_BIRCH_WOOD"),
            MaterialEnum::StrippedJungleWood => f.write_str("STRIPPED_JUNGLE_WOOD"),
            MaterialEnum::StrippedAcaciaWood => f.write_str("STRIPPED_ACACIA_WOOD"),
            MaterialEnum::StrippedCherryWood => f.write_str("STRIPPED_CHERRY_WOOD"),
            MaterialEnum::StrippedDarkOakWood => f.write_str("STRIPPED_DARK_OAK_WOOD"),
            MaterialEnum::StrippedMangroveWood => f.write_str("STRIPPED_MANGROVE_WOOD"),
            MaterialEnum::StrippedCrimsonHyphae => f.write_str("STRIPPED_CRIMSON_HYPHAE"),
            MaterialEnum::StrippedWarpedHyphae => f.write_str("STRIPPED_WARPED_HYPHAE"),
            MaterialEnum::StrippedBambooBlock => f.write_str("STRIPPED_BAMBOO_BLOCK"),
            MaterialEnum::OakWood => f.write_str("OAK_WOOD"),
            MaterialEnum::SpruceWood => f.write_str("SPRUCE_WOOD"),
            MaterialEnum::BirchWood => f.write_str("BIRCH_WOOD"),
            MaterialEnum::JungleWood => f.write_str("JUNGLE_WOOD"),
            MaterialEnum::AcaciaWood => f.write_str("ACACIA_WOOD"),
            MaterialEnum::CherryWood => f.write_str("CHERRY_WOOD"),
            MaterialEnum::DarkOakWood => f.write_str("DARK_OAK_WOOD"),
            MaterialEnum::MangroveWood => f.write_str("MANGROVE_WOOD"),
            MaterialEnum::CrimsonHyphae => f.write_str("CRIMSON_HYPHAE"),
            MaterialEnum::WarpedHyphae => f.write_str("WARPED_HYPHAE"),
            MaterialEnum::OakLeaves => f.write_str("OAK_LEAVES"),
            MaterialEnum::SpruceLeaves => f.write_str("SPRUCE_LEAVES"),
            MaterialEnum::BirchLeaves => f.write_str("BIRCH_LEAVES"),
            MaterialEnum::JungleLeaves => f.write_str("JUNGLE_LEAVES"),
            MaterialEnum::AcaciaLeaves => f.write_str("ACACIA_LEAVES"),
            MaterialEnum::CherryLeaves => f.write_str("CHERRY_LEAVES"),
            MaterialEnum::DarkOakLeaves => f.write_str("DARK_OAK_LEAVES"),
            MaterialEnum::MangroveLeaves => f.write_str("MANGROVE_LEAVES"),
            MaterialEnum::AzaleaLeaves => f.write_str("AZALEA_LEAVES"),
            MaterialEnum::FloweringAzaleaLeaves => f.write_str("FLOWERING_AZALEA_LEAVES"),
            MaterialEnum::Sponge => f.write_str("SPONGE"),
            MaterialEnum::WetSponge => f.write_str("WET_SPONGE"),
            MaterialEnum::Glass => f.write_str("GLASS"),
            MaterialEnum::TintedGlass => f.write_str("TINTED_GLASS"),
            MaterialEnum::LapisBlock => f.write_str("LAPIS_BLOCK"),
            MaterialEnum::Sandstone => f.write_str("SANDSTONE"),
            MaterialEnum::ChiseledSandstone => f.write_str("CHISELED_SANDSTONE"),
            MaterialEnum::CutSandstone => f.write_str("CUT_SANDSTONE"),
            MaterialEnum::Cobweb => f.write_str("COBWEB"),
            MaterialEnum::Grass => f.write_str("GRASS"),
            MaterialEnum::Fern => f.write_str("FERN"),
            MaterialEnum::Azalea => f.write_str("AZALEA"),
            MaterialEnum::FloweringAzalea => f.write_str("FLOWERING_AZALEA"),
            MaterialEnum::DeadBush => f.write_str("DEAD_BUSH"),
            MaterialEnum::Seagrass => f.write_str("SEAGRASS"),
            MaterialEnum::SeaPickle => f.write_str("SEA_PICKLE"),
            MaterialEnum::WhiteWool => f.write_str("WHITE_WOOL"),
            MaterialEnum::OrangeWool => f.write_str("ORANGE_WOOL"),
            MaterialEnum::MagentaWool => f.write_str("MAGENTA_WOOL"),
            MaterialEnum::LightBlueWool => f.write_str("LIGHT_BLUE_WOOL"),
            MaterialEnum::YellowWool => f.write_str("YELLOW_WOOL"),
            MaterialEnum::LimeWool => f.write_str("LIME_WOOL"),
            MaterialEnum::PinkWool => f.write_str("PINK_WOOL"),
            MaterialEnum::GrayWool => f.write_str("GRAY_WOOL"),
            MaterialEnum::LightGrayWool => f.write_str("LIGHT_GRAY_WOOL"),
            MaterialEnum::CyanWool => f.write_str("CYAN_WOOL"),
            MaterialEnum::PurpleWool => f.write_str("PURPLE_WOOL"),
            MaterialEnum::BlueWool => f.write_str("BLUE_WOOL"),
            MaterialEnum::BrownWool => f.write_str("BROWN_WOOL"),
            MaterialEnum::GreenWool => f.write_str("GREEN_WOOL"),
            MaterialEnum::RedWool => f.write_str("RED_WOOL"),
            MaterialEnum::BlackWool => f.write_str("BLACK_WOOL"),
            MaterialEnum::Dandelion => f.write_str("DANDELION"),
            MaterialEnum::Poppy => f.write_str("POPPY"),
            MaterialEnum::BlueOrchid => f.write_str("BLUE_ORCHID"),
            MaterialEnum::Allium => f.write_str("ALLIUM"),
            MaterialEnum::AzureBluet => f.write_str("AZURE_BLUET"),
            MaterialEnum::RedTulip => f.write_str("RED_TULIP"),
            MaterialEnum::OrangeTulip => f.write_str("ORANGE_TULIP"),
            MaterialEnum::WhiteTulip => f.write_str("WHITE_TULIP"),
            MaterialEnum::PinkTulip => f.write_str("PINK_TULIP"),
            MaterialEnum::OxeyeDaisy => f.write_str("OXEYE_DAISY"),
            MaterialEnum::Cornflower => f.write_str("CORNFLOWER"),
            MaterialEnum::LilyOfTheValley => f.write_str("LILY_OF_THE_VALLEY"),
            MaterialEnum::WitherRose => f.write_str("WITHER_ROSE"),
            MaterialEnum::Torchflower => f.write_str("TORCHFLOWER"),
            MaterialEnum::PitcherPlant => f.write_str("PITCHER_PLANT"),
            MaterialEnum::SporeBlossom => f.write_str("SPORE_BLOSSOM"),
            MaterialEnum::BrownMushroom => f.write_str("BROWN_MUSHROOM"),
            MaterialEnum::RedMushroom => f.write_str("RED_MUSHROOM"),
            MaterialEnum::CrimsonFungus => f.write_str("CRIMSON_FUNGUS"),
            MaterialEnum::WarpedFungus => f.write_str("WARPED_FUNGUS"),
            MaterialEnum::CrimsonRoots => f.write_str("CRIMSON_ROOTS"),
            MaterialEnum::WarpedRoots => f.write_str("WARPED_ROOTS"),
            MaterialEnum::NetherSprouts => f.write_str("NETHER_SPROUTS"),
            MaterialEnum::WeepingVines => f.write_str("WEEPING_VINES"),
            MaterialEnum::TwistingVines => f.write_str("TWISTING_VINES"),
            MaterialEnum::SugarCane => f.write_str("SUGAR_CANE"),
            MaterialEnum::Kelp => f.write_str("KELP"),
            MaterialEnum::MossCarpet => f.write_str("MOSS_CARPET"),
            MaterialEnum::PinkPetals => f.write_str("PINK_PETALS"),
            MaterialEnum::MossBlock => f.write_str("MOSS_BLOCK"),
            MaterialEnum::HangingRoots => f.write_str("HANGING_ROOTS"),
            MaterialEnum::BigDripleaf => f.write_str("BIG_DRIPLEAF"),
            MaterialEnum::SmallDripleaf => f.write_str("SMALL_DRIPLEAF"),
            MaterialEnum::Bamboo => f.write_str("BAMBOO"),
            MaterialEnum::OakSlab => f.write_str("OAK_SLAB"),
            MaterialEnum::SpruceSlab => f.write_str("SPRUCE_SLAB"),
            MaterialEnum::BirchSlab => f.write_str("BIRCH_SLAB"),
            MaterialEnum::JungleSlab => f.write_str("JUNGLE_SLAB"),
            MaterialEnum::AcaciaSlab => f.write_str("ACACIA_SLAB"),
            MaterialEnum::CherrySlab => f.write_str("CHERRY_SLAB"),
            MaterialEnum::DarkOakSlab => f.write_str("DARK_OAK_SLAB"),
            MaterialEnum::MangroveSlab => f.write_str("MANGROVE_SLAB"),
            MaterialEnum::BambooSlab => f.write_str("BAMBOO_SLAB"),
            MaterialEnum::BambooMosaicSlab => f.write_str("BAMBOO_MOSAIC_SLAB"),
            MaterialEnum::CrimsonSlab => f.write_str("CRIMSON_SLAB"),
            MaterialEnum::WarpedSlab => f.write_str("WARPED_SLAB"),
            MaterialEnum::StoneSlab => f.write_str("STONE_SLAB"),
            MaterialEnum::SmoothStoneSlab => f.write_str("SMOOTH_STONE_SLAB"),
            MaterialEnum::SandstoneSlab => f.write_str("SANDSTONE_SLAB"),
            MaterialEnum::CutSandstoneSlab => f.write_str("CUT_SANDSTONE_SLAB"),
            MaterialEnum::PetrifiedOakSlab => f.write_str("PETRIFIED_OAK_SLAB"),
            MaterialEnum::CobblestoneSlab => f.write_str("COBBLESTONE_SLAB"),
            MaterialEnum::BrickSlab => f.write_str("BRICK_SLAB"),
            MaterialEnum::StoneBrickSlab => f.write_str("STONE_BRICK_SLAB"),
            MaterialEnum::MudBrickSlab => f.write_str("MUD_BRICK_SLAB"),
            MaterialEnum::NetherBrickSlab => f.write_str("NETHER_BRICK_SLAB"),
            MaterialEnum::QuartzSlab => f.write_str("QUARTZ_SLAB"),
            MaterialEnum::RedSandstoneSlab => f.write_str("RED_SANDSTONE_SLAB"),
            MaterialEnum::CutRedSandstoneSlab => f.write_str("CUT_RED_SANDSTONE_SLAB"),
            MaterialEnum::PurpurSlab => f.write_str("PURPUR_SLAB"),
            MaterialEnum::PrismarineSlab => f.write_str("PRISMARINE_SLAB"),
            MaterialEnum::PrismarineBrickSlab => f.write_str("PRISMARINE_BRICK_SLAB"),
            MaterialEnum::DarkPrismarineSlab => f.write_str("DARK_PRISMARINE_SLAB"),
            MaterialEnum::SmoothQuartz => f.write_str("SMOOTH_QUARTZ"),
            MaterialEnum::SmoothRedSandstone => f.write_str("SMOOTH_RED_SANDSTONE"),
            MaterialEnum::SmoothSandstone => f.write_str("SMOOTH_SANDSTONE"),
            MaterialEnum::SmoothStone => f.write_str("SMOOTH_STONE"),
            MaterialEnum::Bricks => f.write_str("BRICKS"),
            MaterialEnum::Bookshelf => f.write_str("BOOKSHELF"),
            MaterialEnum::ChiseledBookshelf => f.write_str("CHISELED_BOOKSHELF"),
            MaterialEnum::DecoratedPot => f.write_str("DECORATED_POT"),
            MaterialEnum::MossyCobblestone => f.write_str("MOSSY_COBBLESTONE"),
            MaterialEnum::Obsidian => f.write_str("OBSIDIAN"),
            MaterialEnum::Torch => f.write_str("TORCH"),
            MaterialEnum::EndRod => f.write_str("END_ROD"),
            MaterialEnum::ChorusPlant => f.write_str("CHORUS_PLANT"),
            MaterialEnum::ChorusFlower => f.write_str("CHORUS_FLOWER"),
            MaterialEnum::PurpurBlock => f.write_str("PURPUR_BLOCK"),
            MaterialEnum::PurpurPillar => f.write_str("PURPUR_PILLAR"),
            MaterialEnum::PurpurStairs => f.write_str("PURPUR_STAIRS"),
            MaterialEnum::Spawner => f.write_str("SPAWNER"),
            MaterialEnum::Chest => f.write_str("CHEST"),
            MaterialEnum::CraftingTable => f.write_str("CRAFTING_TABLE"),
            MaterialEnum::Farmland => f.write_str("FARMLAND"),
            MaterialEnum::Furnace => f.write_str("FURNACE"),
            MaterialEnum::Ladder => f.write_str("LADDER"),
            MaterialEnum::CobblestoneStairs => f.write_str("COBBLESTONE_STAIRS"),
            MaterialEnum::Snow => f.write_str("SNOW"),
            MaterialEnum::Ice => f.write_str("ICE"),
            MaterialEnum::SnowBlock => f.write_str("SNOW_BLOCK"),
            MaterialEnum::Cactus => f.write_str("CACTUS"),
            MaterialEnum::Clay => f.write_str("CLAY"),
            MaterialEnum::Jukebox => f.write_str("JUKEBOX"),
            MaterialEnum::OakFence => f.write_str("OAK_FENCE"),
            MaterialEnum::SpruceFence => f.write_str("SPRUCE_FENCE"),
            MaterialEnum::BirchFence => f.write_str("BIRCH_FENCE"),
            MaterialEnum::JungleFence => f.write_str("JUNGLE_FENCE"),
            MaterialEnum::AcaciaFence => f.write_str("ACACIA_FENCE"),
            MaterialEnum::CherryFence => f.write_str("CHERRY_FENCE"),
            MaterialEnum::DarkOakFence => f.write_str("DARK_OAK_FENCE"),
            MaterialEnum::MangroveFence => f.write_str("MANGROVE_FENCE"),
            MaterialEnum::BambooFence => f.write_str("BAMBOO_FENCE"),
            MaterialEnum::CrimsonFence => f.write_str("CRIMSON_FENCE"),
            MaterialEnum::WarpedFence => f.write_str("WARPED_FENCE"),
            MaterialEnum::Pumpkin => f.write_str("PUMPKIN"),
            MaterialEnum::CarvedPumpkin => f.write_str("CARVED_PUMPKIN"),
            MaterialEnum::JackOLantern => f.write_str("JACK_O_LANTERN"),
            MaterialEnum::Netherrack => f.write_str("NETHERRACK"),
            MaterialEnum::SoulSand => f.write_str("SOUL_SAND"),
            MaterialEnum::SoulSoil => f.write_str("SOUL_SOIL"),
            MaterialEnum::Basalt => f.write_str("BASALT"),
            MaterialEnum::PolishedBasalt => f.write_str("POLISHED_BASALT"),
            MaterialEnum::SmoothBasalt => f.write_str("SMOOTH_BASALT"),
            MaterialEnum::SoulTorch => f.write_str("SOUL_TORCH"),
            MaterialEnum::Glowstone => f.write_str("GLOWSTONE"),
            MaterialEnum::InfestedStone => f.write_str("INFESTED_STONE"),
            MaterialEnum::InfestedCobblestone => f.write_str("INFESTED_COBBLESTONE"),
            MaterialEnum::InfestedStoneBricks => f.write_str("INFESTED_STONE_BRICKS"),
            MaterialEnum::InfestedMossyStoneBricks => f.write_str("INFESTED_MOSSY_STONE_BRICKS"),
            MaterialEnum::InfestedCrackedStoneBricks => {
                f.write_str("INFESTED_CRACKED_STONE_BRICKS")
            }
            MaterialEnum::InfestedChiseledStoneBricks => {
                f.write_str("INFESTED_CHISELED_STONE_BRICKS")
            }
            MaterialEnum::InfestedDeepslate => f.write_str("INFESTED_DEEPSLATE"),
            MaterialEnum::StoneBricks => f.write_str("STONE_BRICKS"),
            MaterialEnum::MossyStoneBricks => f.write_str("MOSSY_STONE_BRICKS"),
            MaterialEnum::CrackedStoneBricks => f.write_str("CRACKED_STONE_BRICKS"),
            MaterialEnum::ChiseledStoneBricks => f.write_str("CHISELED_STONE_BRICKS"),
            MaterialEnum::PackedMud => f.write_str("PACKED_MUD"),
            MaterialEnum::MudBricks => f.write_str("MUD_BRICKS"),
            MaterialEnum::DeepslateBricks => f.write_str("DEEPSLATE_BRICKS"),
            MaterialEnum::CrackedDeepslateBricks => f.write_str("CRACKED_DEEPSLATE_BRICKS"),
            MaterialEnum::DeepslateTiles => f.write_str("DEEPSLATE_TILES"),
            MaterialEnum::CrackedDeepslateTiles => f.write_str("CRACKED_DEEPSLATE_TILES"),
            MaterialEnum::ChiseledDeepslate => f.write_str("CHISELED_DEEPSLATE"),
            MaterialEnum::ReinforcedDeepslate => f.write_str("REINFORCED_DEEPSLATE"),
            MaterialEnum::BrownMushroomBlock => f.write_str("BROWN_MUSHROOM_BLOCK"),
            MaterialEnum::RedMushroomBlock => f.write_str("RED_MUSHROOM_BLOCK"),
            MaterialEnum::MushroomStem => f.write_str("MUSHROOM_STEM"),
            MaterialEnum::IronBars => f.write_str("IRON_BARS"),
            MaterialEnum::Chain => f.write_str("CHAIN"),
            MaterialEnum::GlassPane => f.write_str("GLASS_PANE"),
            MaterialEnum::Melon => f.write_str("MELON"),
            MaterialEnum::Vine => f.write_str("VINE"),
            MaterialEnum::GlowLichen => f.write_str("GLOW_LICHEN"),
            MaterialEnum::BrickStairs => f.write_str("BRICK_STAIRS"),
            MaterialEnum::StoneBrickStairs => f.write_str("STONE_BRICK_STAIRS"),
            MaterialEnum::MudBrickStairs => f.write_str("MUD_BRICK_STAIRS"),
            MaterialEnum::Mycelium => f.write_str("MYCELIUM"),
            MaterialEnum::LilyPad => f.write_str("LILY_PAD"),
            MaterialEnum::NetherBricks => f.write_str("NETHER_BRICKS"),
            MaterialEnum::CrackedNetherBricks => f.write_str("CRACKED_NETHER_BRICKS"),
            MaterialEnum::ChiseledNetherBricks => f.write_str("CHISELED_NETHER_BRICKS"),
            MaterialEnum::NetherBrickFence => f.write_str("NETHER_BRICK_FENCE"),
            MaterialEnum::NetherBrickStairs => f.write_str("NETHER_BRICK_STAIRS"),
            MaterialEnum::Sculk => f.write_str("SCULK"),
            MaterialEnum::SculkVein => f.write_str("SCULK_VEIN"),
            MaterialEnum::SculkCatalyst => f.write_str("SCULK_CATALYST"),
            MaterialEnum::SculkShrieker => f.write_str("SCULK_SHRIEKER"),
            MaterialEnum::EnchantingTable => f.write_str("ENCHANTING_TABLE"),
            MaterialEnum::EndPortalFrame => f.write_str("END_PORTAL_FRAME"),
            MaterialEnum::EndStone => f.write_str("END_STONE"),
            MaterialEnum::EndStoneBricks => f.write_str("END_STONE_BRICKS"),
            MaterialEnum::DragonEgg => f.write_str("DRAGON_EGG"),
            MaterialEnum::SandstoneStairs => f.write_str("SANDSTONE_STAIRS"),
            MaterialEnum::EnderChest => f.write_str("ENDER_CHEST"),
            MaterialEnum::EmeraldBlock => f.write_str("EMERALD_BLOCK"),
            MaterialEnum::OakStairs => f.write_str("OAK_STAIRS"),
            MaterialEnum::SpruceStairs => f.write_str("SPRUCE_STAIRS"),
            MaterialEnum::BirchStairs => f.write_str("BIRCH_STAIRS"),
            MaterialEnum::JungleStairs => f.write_str("JUNGLE_STAIRS"),
            MaterialEnum::AcaciaStairs => f.write_str("ACACIA_STAIRS"),
            MaterialEnum::CherryStairs => f.write_str("CHERRY_STAIRS"),
            MaterialEnum::DarkOakStairs => f.write_str("DARK_OAK_STAIRS"),
            MaterialEnum::MangroveStairs => f.write_str("MANGROVE_STAIRS"),
            MaterialEnum::BambooStairs => f.write_str("BAMBOO_STAIRS"),
            MaterialEnum::BambooMosaicStairs => f.write_str("BAMBOO_MOSAIC_STAIRS"),
            MaterialEnum::CrimsonStairs => f.write_str("CRIMSON_STAIRS"),
            MaterialEnum::WarpedStairs => f.write_str("WARPED_STAIRS"),
            MaterialEnum::CommandBlock => f.write_str("COMMAND_BLOCK"),
            MaterialEnum::Beacon => f.write_str("BEACON"),
            MaterialEnum::CobblestoneWall => f.write_str("COBBLESTONE_WALL"),
            MaterialEnum::MossyCobblestoneWall => f.write_str("MOSSY_COBBLESTONE_WALL"),
            MaterialEnum::BrickWall => f.write_str("BRICK_WALL"),
            MaterialEnum::PrismarineWall => f.write_str("PRISMARINE_WALL"),
            MaterialEnum::RedSandstoneWall => f.write_str("RED_SANDSTONE_WALL"),
            MaterialEnum::MossyStoneBrickWall => f.write_str("MOSSY_STONE_BRICK_WALL"),
            MaterialEnum::GraniteWall => f.write_str("GRANITE_WALL"),
            MaterialEnum::StoneBrickWall => f.write_str("STONE_BRICK_WALL"),
            MaterialEnum::MudBrickWall => f.write_str("MUD_BRICK_WALL"),
            MaterialEnum::NetherBrickWall => f.write_str("NETHER_BRICK_WALL"),
            MaterialEnum::AndesiteWall => f.write_str("ANDESITE_WALL"),
            MaterialEnum::RedNetherBrickWall => f.write_str("RED_NETHER_BRICK_WALL"),
            MaterialEnum::SandstoneWall => f.write_str("SANDSTONE_WALL"),
            MaterialEnum::EndStoneBrickWall => f.write_str("END_STONE_BRICK_WALL"),
            MaterialEnum::DioriteWall => f.write_str("DIORITE_WALL"),
            MaterialEnum::BlackstoneWall => f.write_str("BLACKSTONE_WALL"),
            MaterialEnum::PolishedBlackstoneWall => f.write_str("POLISHED_BLACKSTONE_WALL"),
            MaterialEnum::PolishedBlackstoneBrickWall => {
                f.write_str("POLISHED_BLACKSTONE_BRICK_WALL")
            }
            MaterialEnum::CobbledDeepslateWall => f.write_str("COBBLED_DEEPSLATE_WALL"),
            MaterialEnum::PolishedDeepslateWall => f.write_str("POLISHED_DEEPSLATE_WALL"),
            MaterialEnum::DeepslateBrickWall => f.write_str("DEEPSLATE_BRICK_WALL"),
            MaterialEnum::DeepslateTileWall => f.write_str("DEEPSLATE_TILE_WALL"),
            MaterialEnum::Anvil => f.write_str("ANVIL"),
            MaterialEnum::ChippedAnvil => f.write_str("CHIPPED_ANVIL"),
            MaterialEnum::DamagedAnvil => f.write_str("DAMAGED_ANVIL"),
            MaterialEnum::ChiseledQuartzBlock => f.write_str("CHISELED_QUARTZ_BLOCK"),
            MaterialEnum::QuartzBlock => f.write_str("QUARTZ_BLOCK"),
            MaterialEnum::QuartzBricks => f.write_str("QUARTZ_BRICKS"),
            MaterialEnum::QuartzPillar => f.write_str("QUARTZ_PILLAR"),
            MaterialEnum::QuartzStairs => f.write_str("QUARTZ_STAIRS"),
            MaterialEnum::WhiteTerracotta => f.write_str("WHITE_TERRACOTTA"),
            MaterialEnum::OrangeTerracotta => f.write_str("ORANGE_TERRACOTTA"),
            MaterialEnum::MagentaTerracotta => f.write_str("MAGENTA_TERRACOTTA"),
            MaterialEnum::LightBlueTerracotta => f.write_str("LIGHT_BLUE_TERRACOTTA"),
            MaterialEnum::YellowTerracotta => f.write_str("YELLOW_TERRACOTTA"),
            MaterialEnum::LimeTerracotta => f.write_str("LIME_TERRACOTTA"),
            MaterialEnum::PinkTerracotta => f.write_str("PINK_TERRACOTTA"),
            MaterialEnum::GrayTerracotta => f.write_str("GRAY_TERRACOTTA"),
            MaterialEnum::LightGrayTerracotta => f.write_str("LIGHT_GRAY_TERRACOTTA"),
            MaterialEnum::CyanTerracotta => f.write_str("CYAN_TERRACOTTA"),
            MaterialEnum::PurpleTerracotta => f.write_str("PURPLE_TERRACOTTA"),
            MaterialEnum::BlueTerracotta => f.write_str("BLUE_TERRACOTTA"),
            MaterialEnum::BrownTerracotta => f.write_str("BROWN_TERRACOTTA"),
            MaterialEnum::GreenTerracotta => f.write_str("GREEN_TERRACOTTA"),
            MaterialEnum::RedTerracotta => f.write_str("RED_TERRACOTTA"),
            MaterialEnum::BlackTerracotta => f.write_str("BLACK_TERRACOTTA"),
            MaterialEnum::Barrier => f.write_str("BARRIER"),
            MaterialEnum::Light => f.write_str("LIGHT"),
            MaterialEnum::HayBlock => f.write_str("HAY_BLOCK"),
            MaterialEnum::WhiteCarpet => f.write_str("WHITE_CARPET"),
            MaterialEnum::OrangeCarpet => f.write_str("ORANGE_CARPET"),
            MaterialEnum::MagentaCarpet => f.write_str("MAGENTA_CARPET"),
            MaterialEnum::LightBlueCarpet => f.write_str("LIGHT_BLUE_CARPET"),
            MaterialEnum::YellowCarpet => f.write_str("YELLOW_CARPET"),
            MaterialEnum::LimeCarpet => f.write_str("LIME_CARPET"),
            MaterialEnum::PinkCarpet => f.write_str("PINK_CARPET"),
            MaterialEnum::GrayCarpet => f.write_str("GRAY_CARPET"),
            MaterialEnum::LightGrayCarpet => f.write_str("LIGHT_GRAY_CARPET"),
            MaterialEnum::CyanCarpet => f.write_str("CYAN_CARPET"),
            MaterialEnum::PurpleCarpet => f.write_str("PURPLE_CARPET"),
            MaterialEnum::BlueCarpet => f.write_str("BLUE_CARPET"),
            MaterialEnum::BrownCarpet => f.write_str("BROWN_CARPET"),
            MaterialEnum::GreenCarpet => f.write_str("GREEN_CARPET"),
            MaterialEnum::RedCarpet => f.write_str("RED_CARPET"),
            MaterialEnum::BlackCarpet => f.write_str("BLACK_CARPET"),
            MaterialEnum::Terracotta => f.write_str("TERRACOTTA"),
            MaterialEnum::PackedIce => f.write_str("PACKED_ICE"),
            MaterialEnum::DirtPath => f.write_str("DIRT_PATH"),
            MaterialEnum::Sunflower => f.write_str("SUNFLOWER"),
            MaterialEnum::Lilac => f.write_str("LILAC"),
            MaterialEnum::RoseBush => f.write_str("ROSE_BUSH"),
            MaterialEnum::Peony => f.write_str("PEONY"),
            MaterialEnum::TallGrass => f.write_str("TALL_GRASS"),
            MaterialEnum::LargeFern => f.write_str("LARGE_FERN"),
            MaterialEnum::WhiteStainedGlass => f.write_str("WHITE_STAINED_GLASS"),
            MaterialEnum::OrangeStainedGlass => f.write_str("ORANGE_STAINED_GLASS"),
            MaterialEnum::MagentaStainedGlass => f.write_str("MAGENTA_STAINED_GLASS"),
            MaterialEnum::LightBlueStainedGlass => f.write_str("LIGHT_BLUE_STAINED_GLASS"),
            MaterialEnum::YellowStainedGlass => f.write_str("YELLOW_STAINED_GLASS"),
            MaterialEnum::LimeStainedGlass => f.write_str("LIME_STAINED_GLASS"),
            MaterialEnum::PinkStainedGlass => f.write_str("PINK_STAINED_GLASS"),
            MaterialEnum::GrayStainedGlass => f.write_str("GRAY_STAINED_GLASS"),
            MaterialEnum::LightGrayStainedGlass => f.write_str("LIGHT_GRAY_STAINED_GLASS"),
            MaterialEnum::CyanStainedGlass => f.write_str("CYAN_STAINED_GLASS"),
            MaterialEnum::PurpleStainedGlass => f.write_str("PURPLE_STAINED_GLASS"),
            MaterialEnum::BlueStainedGlass => f.write_str("BLUE_STAINED_GLASS"),
            MaterialEnum::BrownStainedGlass => f.write_str("BROWN_STAINED_GLASS"),
            MaterialEnum::GreenStainedGlass => f.write_str("GREEN_STAINED_GLASS"),
            MaterialEnum::RedStainedGlass => f.write_str("RED_STAINED_GLASS"),
            MaterialEnum::BlackStainedGlass => f.write_str("BLACK_STAINED_GLASS"),
            MaterialEnum::WhiteStainedGlassPane => f.write_str("WHITE_STAINED_GLASS_PANE"),
            MaterialEnum::OrangeStainedGlassPane => f.write_str("ORANGE_STAINED_GLASS_PANE"),
            MaterialEnum::MagentaStainedGlassPane => f.write_str("MAGENTA_STAINED_GLASS_PANE"),
            MaterialEnum::LightBlueStainedGlassPane => f.write_str("LIGHT_BLUE_STAINED_GLASS_PANE"),
            MaterialEnum::YellowStainedGlassPane => f.write_str("YELLOW_STAINED_GLASS_PANE"),
            MaterialEnum::LimeStainedGlassPane => f.write_str("LIME_STAINED_GLASS_PANE"),
            MaterialEnum::PinkStainedGlassPane => f.write_str("PINK_STAINED_GLASS_PANE"),
            MaterialEnum::GrayStainedGlassPane => f.write_str("GRAY_STAINED_GLASS_PANE"),
            MaterialEnum::LightGrayStainedGlassPane => f.write_str("LIGHT_GRAY_STAINED_GLASS_PANE"),
            MaterialEnum::CyanStainedGlassPane => f.write_str("CYAN_STAINED_GLASS_PANE"),
            MaterialEnum::PurpleStainedGlassPane => f.write_str("PURPLE_STAINED_GLASS_PANE"),
            MaterialEnum::BlueStainedGlassPane => f.write_str("BLUE_STAINED_GLASS_PANE"),
            MaterialEnum::BrownStainedGlassPane => f.write_str("BROWN_STAINED_GLASS_PANE"),
            MaterialEnum::GreenStainedGlassPane => f.write_str("GREEN_STAINED_GLASS_PANE"),
            MaterialEnum::RedStainedGlassPane => f.write_str("RED_STAINED_GLASS_PANE"),
            MaterialEnum::BlackStainedGlassPane => f.write_str("BLACK_STAINED_GLASS_PANE"),
            MaterialEnum::Prismarine => f.write_str("PRISMARINE"),
            MaterialEnum::PrismarineBricks => f.write_str("PRISMARINE_BRICKS"),
            MaterialEnum::DarkPrismarine => f.write_str("DARK_PRISMARINE"),
            MaterialEnum::PrismarineStairs => f.write_str("PRISMARINE_STAIRS"),
            MaterialEnum::PrismarineBrickStairs => f.write_str("PRISMARINE_BRICK_STAIRS"),
            MaterialEnum::DarkPrismarineStairs => f.write_str("DARK_PRISMARINE_STAIRS"),
            MaterialEnum::SeaLantern => f.write_str("SEA_LANTERN"),
            MaterialEnum::RedSandstone => f.write_str("RED_SANDSTONE"),
            MaterialEnum::ChiseledRedSandstone => f.write_str("CHISELED_RED_SANDSTONE"),
            MaterialEnum::CutRedSandstone => f.write_str("CUT_RED_SANDSTONE"),
            MaterialEnum::RedSandstoneStairs => f.write_str("RED_SANDSTONE_STAIRS"),
            MaterialEnum::RepeatingCommandBlock => f.write_str("REPEATING_COMMAND_BLOCK"),
            MaterialEnum::ChainCommandBlock => f.write_str("CHAIN_COMMAND_BLOCK"),
            MaterialEnum::MagmaBlock => f.write_str("MAGMA_BLOCK"),
            MaterialEnum::NetherWartBlock => f.write_str("NETHER_WART_BLOCK"),
            MaterialEnum::WarpedWartBlock => f.write_str("WARPED_WART_BLOCK"),
            MaterialEnum::RedNetherBricks => f.write_str("RED_NETHER_BRICKS"),
            MaterialEnum::BoneBlock => f.write_str("BONE_BLOCK"),
            MaterialEnum::StructureVoid => f.write_str("STRUCTURE_VOID"),
            MaterialEnum::ShulkerBox => f.write_str("SHULKER_BOX"),
            MaterialEnum::WhiteShulkerBox => f.write_str("WHITE_SHULKER_BOX"),
            MaterialEnum::OrangeShulkerBox => f.write_str("ORANGE_SHULKER_BOX"),
            MaterialEnum::MagentaShulkerBox => f.write_str("MAGENTA_SHULKER_BOX"),
            MaterialEnum::LightBlueShulkerBox => f.write_str("LIGHT_BLUE_SHULKER_BOX"),
            MaterialEnum::YellowShulkerBox => f.write_str("YELLOW_SHULKER_BOX"),
            MaterialEnum::LimeShulkerBox => f.write_str("LIME_SHULKER_BOX"),
            MaterialEnum::PinkShulkerBox => f.write_str("PINK_SHULKER_BOX"),
            MaterialEnum::GrayShulkerBox => f.write_str("GRAY_SHULKER_BOX"),
            MaterialEnum::LightGrayShulkerBox => f.write_str("LIGHT_GRAY_SHULKER_BOX"),
            MaterialEnum::CyanShulkerBox => f.write_str("CYAN_SHULKER_BOX"),
            MaterialEnum::PurpleShulkerBox => f.write_str("PURPLE_SHULKER_BOX"),
            MaterialEnum::BlueShulkerBox => f.write_str("BLUE_SHULKER_BOX"),
            MaterialEnum::BrownShulkerBox => f.write_str("BROWN_SHULKER_BOX"),
            MaterialEnum::GreenShulkerBox => f.write_str("GREEN_SHULKER_BOX"),
            MaterialEnum::RedShulkerBox => f.write_str("RED_SHULKER_BOX"),
            MaterialEnum::BlackShulkerBox => f.write_str("BLACK_SHULKER_BOX"),
            MaterialEnum::WhiteGlazedTerracotta => f.write_str("WHITE_GLAZED_TERRACOTTA"),
            MaterialEnum::OrangeGlazedTerracotta => f.write_str("ORANGE_GLAZED_TERRACOTTA"),
            MaterialEnum::MagentaGlazedTerracotta => f.write_str("MAGENTA_GLAZED_TERRACOTTA"),
            MaterialEnum::LightBlueGlazedTerracotta => f.write_str("LIGHT_BLUE_GLAZED_TERRACOTTA"),
            MaterialEnum::YellowGlazedTerracotta => f.write_str("YELLOW_GLAZED_TERRACOTTA"),
            MaterialEnum::LimeGlazedTerracotta => f.write_str("LIME_GLAZED_TERRACOTTA"),
            MaterialEnum::PinkGlazedTerracotta => f.write_str("PINK_GLAZED_TERRACOTTA"),
            MaterialEnum::GrayGlazedTerracotta => f.write_str("GRAY_GLAZED_TERRACOTTA"),
            MaterialEnum::LightGrayGlazedTerracotta => f.write_str("LIGHT_GRAY_GLAZED_TERRACOTTA"),
            MaterialEnum::CyanGlazedTerracotta => f.write_str("CYAN_GLAZED_TERRACOTTA"),
            MaterialEnum::PurpleGlazedTerracotta => f.write_str("PURPLE_GLAZED_TERRACOTTA"),
            MaterialEnum::BlueGlazedTerracotta => f.write_str("BLUE_GLAZED_TERRACOTTA"),
            MaterialEnum::BrownGlazedTerracotta => f.write_str("BROWN_GLAZED_TERRACOTTA"),
            MaterialEnum::GreenGlazedTerracotta => f.write_str("GREEN_GLAZED_TERRACOTTA"),
            MaterialEnum::RedGlazedTerracotta => f.write_str("RED_GLAZED_TERRACOTTA"),
            MaterialEnum::BlackGlazedTerracotta => f.write_str("BLACK_GLAZED_TERRACOTTA"),
            MaterialEnum::WhiteConcrete => f.write_str("WHITE_CONCRETE"),
            MaterialEnum::OrangeConcrete => f.write_str("ORANGE_CONCRETE"),
            MaterialEnum::MagentaConcrete => f.write_str("MAGENTA_CONCRETE"),
            MaterialEnum::LightBlueConcrete => f.write_str("LIGHT_BLUE_CONCRETE"),
            MaterialEnum::YellowConcrete => f.write_str("YELLOW_CONCRETE"),
            MaterialEnum::LimeConcrete => f.write_str("LIME_CONCRETE"),
            MaterialEnum::PinkConcrete => f.write_str("PINK_CONCRETE"),
            MaterialEnum::GrayConcrete => f.write_str("GRAY_CONCRETE"),
            MaterialEnum::LightGrayConcrete => f.write_str("LIGHT_GRAY_CONCRETE"),
            MaterialEnum::CyanConcrete => f.write_str("CYAN_CONCRETE"),
            MaterialEnum::PurpleConcrete => f.write_str("PURPLE_CONCRETE"),
            MaterialEnum::BlueConcrete => f.write_str("BLUE_CONCRETE"),
            MaterialEnum::BrownConcrete => f.write_str("BROWN_CONCRETE"),
            MaterialEnum::GreenConcrete => f.write_str("GREEN_CONCRETE"),
            MaterialEnum::RedConcrete => f.write_str("RED_CONCRETE"),
            MaterialEnum::BlackConcrete => f.write_str("BLACK_CONCRETE"),
            MaterialEnum::WhiteConcretePowder => f.write_str("WHITE_CONCRETE_POWDER"),
            MaterialEnum::OrangeConcretePowder => f.write_str("ORANGE_CONCRETE_POWDER"),
            MaterialEnum::MagentaConcretePowder => f.write_str("MAGENTA_CONCRETE_POWDER"),
            MaterialEnum::LightBlueConcretePowder => f.write_str("LIGHT_BLUE_CONCRETE_POWDER"),
            MaterialEnum::YellowConcretePowder => f.write_str("YELLOW_CONCRETE_POWDER"),
            MaterialEnum::LimeConcretePowder => f.write_str("LIME_CONCRETE_POWDER"),
            MaterialEnum::PinkConcretePowder => f.write_str("PINK_CONCRETE_POWDER"),
            MaterialEnum::GrayConcretePowder => f.write_str("GRAY_CONCRETE_POWDER"),
            MaterialEnum::LightGrayConcretePowder => f.write_str("LIGHT_GRAY_CONCRETE_POWDER"),
            MaterialEnum::CyanConcretePowder => f.write_str("CYAN_CONCRETE_POWDER"),
            MaterialEnum::PurpleConcretePowder => f.write_str("PURPLE_CONCRETE_POWDER"),
            MaterialEnum::BlueConcretePowder => f.write_str("BLUE_CONCRETE_POWDER"),
            MaterialEnum::BrownConcretePowder => f.write_str("BROWN_CONCRETE_POWDER"),
            MaterialEnum::GreenConcretePowder => f.write_str("GREEN_CONCRETE_POWDER"),
            MaterialEnum::RedConcretePowder => f.write_str("RED_CONCRETE_POWDER"),
            MaterialEnum::BlackConcretePowder => f.write_str("BLACK_CONCRETE_POWDER"),
            MaterialEnum::TurtleEgg => f.write_str("TURTLE_EGG"),
            MaterialEnum::SnifferEgg => f.write_str("SNIFFER_EGG"),
            MaterialEnum::DeadTubeCoralBlock => f.write_str("DEAD_TUBE_CORAL_BLOCK"),
            MaterialEnum::DeadBrainCoralBlock => f.write_str("DEAD_BRAIN_CORAL_BLOCK"),
            MaterialEnum::DeadBubbleCoralBlock => f.write_str("DEAD_BUBBLE_CORAL_BLOCK"),
            MaterialEnum::DeadFireCoralBlock => f.write_str("DEAD_FIRE_CORAL_BLOCK"),
            MaterialEnum::DeadHornCoralBlock => f.write_str("DEAD_HORN_CORAL_BLOCK"),
            MaterialEnum::TubeCoralBlock => f.write_str("TUBE_CORAL_BLOCK"),
            MaterialEnum::BrainCoralBlock => f.write_str("BRAIN_CORAL_BLOCK"),
            MaterialEnum::BubbleCoralBlock => f.write_str("BUBBLE_CORAL_BLOCK"),
            MaterialEnum::FireCoralBlock => f.write_str("FIRE_CORAL_BLOCK"),
            MaterialEnum::HornCoralBlock => f.write_str("HORN_CORAL_BLOCK"),
            MaterialEnum::TubeCoral => f.write_str("TUBE_CORAL"),
            MaterialEnum::BrainCoral => f.write_str("BRAIN_CORAL"),
            MaterialEnum::BubbleCoral => f.write_str("BUBBLE_CORAL"),
            MaterialEnum::FireCoral => f.write_str("FIRE_CORAL"),
            MaterialEnum::HornCoral => f.write_str("HORN_CORAL"),
            MaterialEnum::DeadBrainCoral => f.write_str("DEAD_BRAIN_CORAL"),
            MaterialEnum::DeadBubbleCoral => f.write_str("DEAD_BUBBLE_CORAL"),
            MaterialEnum::DeadFireCoral => f.write_str("DEAD_FIRE_CORAL"),
            MaterialEnum::DeadHornCoral => f.write_str("DEAD_HORN_CORAL"),
            MaterialEnum::DeadTubeCoral => f.write_str("DEAD_TUBE_CORAL"),
            MaterialEnum::TubeCoralFan => f.write_str("TUBE_CORAL_FAN"),
            MaterialEnum::BrainCoralFan => f.write_str("BRAIN_CORAL_FAN"),
            MaterialEnum::BubbleCoralFan => f.write_str("BUBBLE_CORAL_FAN"),
            MaterialEnum::FireCoralFan => f.write_str("FIRE_CORAL_FAN"),
            MaterialEnum::HornCoralFan => f.write_str("HORN_CORAL_FAN"),
            MaterialEnum::DeadTubeCoralFan => f.write_str("DEAD_TUBE_CORAL_FAN"),
            MaterialEnum::DeadBrainCoralFan => f.write_str("DEAD_BRAIN_CORAL_FAN"),
            MaterialEnum::DeadBubbleCoralFan => f.write_str("DEAD_BUBBLE_CORAL_FAN"),
            MaterialEnum::DeadFireCoralFan => f.write_str("DEAD_FIRE_CORAL_FAN"),
            MaterialEnum::DeadHornCoralFan => f.write_str("DEAD_HORN_CORAL_FAN"),
            MaterialEnum::BlueIce => f.write_str("BLUE_ICE"),
            MaterialEnum::Conduit => f.write_str("CONDUIT"),
            MaterialEnum::PolishedGraniteStairs => f.write_str("POLISHED_GRANITE_STAIRS"),
            MaterialEnum::SmoothRedSandstoneStairs => f.write_str("SMOOTH_RED_SANDSTONE_STAIRS"),
            MaterialEnum::MossyStoneBrickStairs => f.write_str("MOSSY_STONE_BRICK_STAIRS"),
            MaterialEnum::PolishedDioriteStairs => f.write_str("POLISHED_DIORITE_STAIRS"),
            MaterialEnum::MossyCobblestoneStairs => f.write_str("MOSSY_COBBLESTONE_STAIRS"),
            MaterialEnum::EndStoneBrickStairs => f.write_str("END_STONE_BRICK_STAIRS"),
            MaterialEnum::StoneStairs => f.write_str("STONE_STAIRS"),
            MaterialEnum::SmoothSandstoneStairs => f.write_str("SMOOTH_SANDSTONE_STAIRS"),
            MaterialEnum::SmoothQuartzStairs => f.write_str("SMOOTH_QUARTZ_STAIRS"),
            MaterialEnum::GraniteStairs => f.write_str("GRANITE_STAIRS"),
            MaterialEnum::AndesiteStairs => f.write_str("ANDESITE_STAIRS"),
            MaterialEnum::RedNetherBrickStairs => f.write_str("RED_NETHER_BRICK_STAIRS"),
            MaterialEnum::PolishedAndesiteStairs => f.write_str("POLISHED_ANDESITE_STAIRS"),
            MaterialEnum::DioriteStairs => f.write_str("DIORITE_STAIRS"),
            MaterialEnum::CobbledDeepslateStairs => f.write_str("COBBLED_DEEPSLATE_STAIRS"),
            MaterialEnum::PolishedDeepslateStairs => f.write_str("POLISHED_DEEPSLATE_STAIRS"),
            MaterialEnum::DeepslateBrickStairs => f.write_str("DEEPSLATE_BRICK_STAIRS"),
            MaterialEnum::DeepslateTileStairs => f.write_str("DEEPSLATE_TILE_STAIRS"),
            MaterialEnum::PolishedGraniteSlab => f.write_str("POLISHED_GRANITE_SLAB"),
            MaterialEnum::SmoothRedSandstoneSlab => f.write_str("SMOOTH_RED_SANDSTONE_SLAB"),
            MaterialEnum::MossyStoneBrickSlab => f.write_str("MOSSY_STONE_BRICK_SLAB"),
            MaterialEnum::PolishedDioriteSlab => f.write_str("POLISHED_DIORITE_SLAB"),
            MaterialEnum::MossyCobblestoneSlab => f.write_str("MOSSY_COBBLESTONE_SLAB"),
            MaterialEnum::EndStoneBrickSlab => f.write_str("END_STONE_BRICK_SLAB"),
            MaterialEnum::SmoothSandstoneSlab => f.write_str("SMOOTH_SANDSTONE_SLAB"),
            MaterialEnum::SmoothQuartzSlab => f.write_str("SMOOTH_QUARTZ_SLAB"),
            MaterialEnum::GraniteSlab => f.write_str("GRANITE_SLAB"),
            MaterialEnum::AndesiteSlab => f.write_str("ANDESITE_SLAB"),
            MaterialEnum::RedNetherBrickSlab => f.write_str("RED_NETHER_BRICK_SLAB"),
            MaterialEnum::PolishedAndesiteSlab => f.write_str("POLISHED_ANDESITE_SLAB"),
            MaterialEnum::DioriteSlab => f.write_str("DIORITE_SLAB"),
            MaterialEnum::CobbledDeepslateSlab => f.write_str("COBBLED_DEEPSLATE_SLAB"),
            MaterialEnum::PolishedDeepslateSlab => f.write_str("POLISHED_DEEPSLATE_SLAB"),
            MaterialEnum::DeepslateBrickSlab => f.write_str("DEEPSLATE_BRICK_SLAB"),
            MaterialEnum::DeepslateTileSlab => f.write_str("DEEPSLATE_TILE_SLAB"),
            MaterialEnum::Scaffolding => f.write_str("SCAFFOLDING"),
            MaterialEnum::Redstone => f.write_str("REDSTONE"),
            MaterialEnum::RedstoneTorch => f.write_str("REDSTONE_TORCH"),
            MaterialEnum::RedstoneBlock => f.write_str("REDSTONE_BLOCK"),
            MaterialEnum::Repeater => f.write_str("REPEATER"),
            MaterialEnum::Comparator => f.write_str("COMPARATOR"),
            MaterialEnum::Piston => f.write_str("PISTON"),
            MaterialEnum::StickyPiston => f.write_str("STICKY_PISTON"),
            MaterialEnum::SlimeBlock => f.write_str("SLIME_BLOCK"),
            MaterialEnum::HoneyBlock => f.write_str("HONEY_BLOCK"),
            MaterialEnum::Observer => f.write_str("OBSERVER"),
            MaterialEnum::Hopper => f.write_str("HOPPER"),
            MaterialEnum::Dispenser => f.write_str("DISPENSER"),
            MaterialEnum::Dropper => f.write_str("DROPPER"),
            MaterialEnum::Lectern => f.write_str("LECTERN"),
            MaterialEnum::Target => f.write_str("TARGET"),
            MaterialEnum::Lever => f.write_str("LEVER"),
            MaterialEnum::LightningRod => f.write_str("LIGHTNING_ROD"),
            MaterialEnum::DaylightDetector => f.write_str("DAYLIGHT_DETECTOR"),
            MaterialEnum::SculkSensor => f.write_str("SCULK_SENSOR"),
            MaterialEnum::CalibratedSculkSensor => f.write_str("CALIBRATED_SCULK_SENSOR"),
            MaterialEnum::TripwireHook => f.write_str("TRIPWIRE_HOOK"),
            MaterialEnum::TrappedChest => f.write_str("TRAPPED_CHEST"),
            MaterialEnum::Tnt => f.write_str("TNT"),
            MaterialEnum::RedstoneLamp => f.write_str("REDSTONE_LAMP"),
            MaterialEnum::NoteBlock => f.write_str("NOTE_BLOCK"),
            MaterialEnum::StoneButton => f.write_str("STONE_BUTTON"),
            MaterialEnum::PolishedBlackstoneButton => f.write_str("POLISHED_BLACKSTONE_BUTTON"),
            MaterialEnum::OakButton => f.write_str("OAK_BUTTON"),
            MaterialEnum::SpruceButton => f.write_str("SPRUCE_BUTTON"),
            MaterialEnum::BirchButton => f.write_str("BIRCH_BUTTON"),
            MaterialEnum::JungleButton => f.write_str("JUNGLE_BUTTON"),
            MaterialEnum::AcaciaButton => f.write_str("ACACIA_BUTTON"),
            MaterialEnum::CherryButton => f.write_str("CHERRY_BUTTON"),
            MaterialEnum::DarkOakButton => f.write_str("DARK_OAK_BUTTON"),
            MaterialEnum::MangroveButton => f.write_str("MANGROVE_BUTTON"),
            MaterialEnum::BambooButton => f.write_str("BAMBOO_BUTTON"),
            MaterialEnum::CrimsonButton => f.write_str("CRIMSON_BUTTON"),
            MaterialEnum::WarpedButton => f.write_str("WARPED_BUTTON"),
            MaterialEnum::StonePressurePlate => f.write_str("STONE_PRESSURE_PLATE"),
            MaterialEnum::PolishedBlackstonePressurePlate => {
                f.write_str("POLISHED_BLACKSTONE_PRESSURE_PLATE")
            }
            MaterialEnum::LightWeightedPressurePlate => {
                f.write_str("LIGHT_WEIGHTED_PRESSURE_PLATE")
            }
            MaterialEnum::HeavyWeightedPressurePlate => {
                f.write_str("HEAVY_WEIGHTED_PRESSURE_PLATE")
            }
            MaterialEnum::OakPressurePlate => f.write_str("OAK_PRESSURE_PLATE"),
            MaterialEnum::SprucePressurePlate => f.write_str("SPRUCE_PRESSURE_PLATE"),
            MaterialEnum::BirchPressurePlate => f.write_str("BIRCH_PRESSURE_PLATE"),
            MaterialEnum::JunglePressurePlate => f.write_str("JUNGLE_PRESSURE_PLATE"),
            MaterialEnum::AcaciaPressurePlate => f.write_str("ACACIA_PRESSURE_PLATE"),
            MaterialEnum::CherryPressurePlate => f.write_str("CHERRY_PRESSURE_PLATE"),
            MaterialEnum::DarkOakPressurePlate => f.write_str("DARK_OAK_PRESSURE_PLATE"),
            MaterialEnum::MangrovePressurePlate => f.write_str("MANGROVE_PRESSURE_PLATE"),
            MaterialEnum::BambooPressurePlate => f.write_str("BAMBOO_PRESSURE_PLATE"),
            MaterialEnum::CrimsonPressurePlate => f.write_str("CRIMSON_PRESSURE_PLATE"),
            MaterialEnum::WarpedPressurePlate => f.write_str("WARPED_PRESSURE_PLATE"),
            MaterialEnum::IronDoor => f.write_str("IRON_DOOR"),
            MaterialEnum::OakDoor => f.write_str("OAK_DOOR"),
            MaterialEnum::SpruceDoor => f.write_str("SPRUCE_DOOR"),
            MaterialEnum::BirchDoor => f.write_str("BIRCH_DOOR"),
            MaterialEnum::JungleDoor => f.write_str("JUNGLE_DOOR"),
            MaterialEnum::AcaciaDoor => f.write_str("ACACIA_DOOR"),
            MaterialEnum::CherryDoor => f.write_str("CHERRY_DOOR"),
            MaterialEnum::DarkOakDoor => f.write_str("DARK_OAK_DOOR"),
            MaterialEnum::MangroveDoor => f.write_str("MANGROVE_DOOR"),
            MaterialEnum::BambooDoor => f.write_str("BAMBOO_DOOR"),
            MaterialEnum::CrimsonDoor => f.write_str("CRIMSON_DOOR"),
            MaterialEnum::WarpedDoor => f.write_str("WARPED_DOOR"),
            MaterialEnum::IronTrapdoor => f.write_str("IRON_TRAPDOOR"),
            MaterialEnum::OakTrapdoor => f.write_str("OAK_TRAPDOOR"),
            MaterialEnum::SpruceTrapdoor => f.write_str("SPRUCE_TRAPDOOR"),
            MaterialEnum::BirchTrapdoor => f.write_str("BIRCH_TRAPDOOR"),
            MaterialEnum::JungleTrapdoor => f.write_str("JUNGLE_TRAPDOOR"),
            MaterialEnum::AcaciaTrapdoor => f.write_str("ACACIA_TRAPDOOR"),
            MaterialEnum::CherryTrapdoor => f.write_str("CHERRY_TRAPDOOR"),
            MaterialEnum::DarkOakTrapdoor => f.write_str("DARK_OAK_TRAPDOOR"),
            MaterialEnum::MangroveTrapdoor => f.write_str("MANGROVE_TRAPDOOR"),
            MaterialEnum::BambooTrapdoor => f.write_str("BAMBOO_TRAPDOOR"),
            MaterialEnum::CrimsonTrapdoor => f.write_str("CRIMSON_TRAPDOOR"),
            MaterialEnum::WarpedTrapdoor => f.write_str("WARPED_TRAPDOOR"),
            MaterialEnum::OakFenceGate => f.write_str("OAK_FENCE_GATE"),
            MaterialEnum::SpruceFenceGate => f.write_str("SPRUCE_FENCE_GATE"),
            MaterialEnum::BirchFenceGate => f.write_str("BIRCH_FENCE_GATE"),
            MaterialEnum::JungleFenceGate => f.write_str("JUNGLE_FENCE_GATE"),
            MaterialEnum::AcaciaFenceGate => f.write_str("ACACIA_FENCE_GATE"),
            MaterialEnum::CherryFenceGate => f.write_str("CHERRY_FENCE_GATE"),
            MaterialEnum::DarkOakFenceGate => f.write_str("DARK_OAK_FENCE_GATE"),
            MaterialEnum::MangroveFenceGate => f.write_str("MANGROVE_FENCE_GATE"),
            MaterialEnum::BambooFenceGate => f.write_str("BAMBOO_FENCE_GATE"),
            MaterialEnum::CrimsonFenceGate => f.write_str("CRIMSON_FENCE_GATE"),
            MaterialEnum::WarpedFenceGate => f.write_str("WARPED_FENCE_GATE"),
            MaterialEnum::PoweredRail => f.write_str("POWERED_RAIL"),
            MaterialEnum::DetectorRail => f.write_str("DETECTOR_RAIL"),
            MaterialEnum::Rail => f.write_str("RAIL"),
            MaterialEnum::ActivatorRail => f.write_str("ACTIVATOR_RAIL"),
            MaterialEnum::Saddle => f.write_str("SADDLE"),
            MaterialEnum::Minecart => f.write_str("MINECART"),
            MaterialEnum::ChestMinecart => f.write_str("CHEST_MINECART"),
            MaterialEnum::FurnaceMinecart => f.write_str("FURNACE_MINECART"),
            MaterialEnum::TntMinecart => f.write_str("TNT_MINECART"),
            MaterialEnum::HopperMinecart => f.write_str("HOPPER_MINECART"),
            MaterialEnum::CarrotOnAStick => f.write_str("CARROT_ON_A_STICK"),
            MaterialEnum::WarpedFungusOnAStick => f.write_str("WARPED_FUNGUS_ON_A_STICK"),
            MaterialEnum::Elytra => f.write_str("ELYTRA"),
            MaterialEnum::OakBoat => f.write_str("OAK_BOAT"),
            MaterialEnum::OakChestBoat => f.write_str("OAK_CHEST_BOAT"),
            MaterialEnum::SpruceBoat => f.write_str("SPRUCE_BOAT"),
            MaterialEnum::SpruceChestBoat => f.write_str("SPRUCE_CHEST_BOAT"),
            MaterialEnum::BirchBoat => f.write_str("BIRCH_BOAT"),
            MaterialEnum::BirchChestBoat => f.write_str("BIRCH_CHEST_BOAT"),
            MaterialEnum::JungleBoat => f.write_str("JUNGLE_BOAT"),
            MaterialEnum::JungleChestBoat => f.write_str("JUNGLE_CHEST_BOAT"),
            MaterialEnum::AcaciaBoat => f.write_str("ACACIA_BOAT"),
            MaterialEnum::AcaciaChestBoat => f.write_str("ACACIA_CHEST_BOAT"),
            MaterialEnum::CherryBoat => f.write_str("CHERRY_BOAT"),
            MaterialEnum::CherryChestBoat => f.write_str("CHERRY_CHEST_BOAT"),
            MaterialEnum::DarkOakBoat => f.write_str("DARK_OAK_BOAT"),
            MaterialEnum::DarkOakChestBoat => f.write_str("DARK_OAK_CHEST_BOAT"),
            MaterialEnum::MangroveBoat => f.write_str("MANGROVE_BOAT"),
            MaterialEnum::MangroveChestBoat => f.write_str("MANGROVE_CHEST_BOAT"),
            MaterialEnum::BambooRaft => f.write_str("BAMBOO_RAFT"),
            MaterialEnum::BambooChestRaft => f.write_str("BAMBOO_CHEST_RAFT"),
            MaterialEnum::StructureBlock => f.write_str("STRUCTURE_BLOCK"),
            MaterialEnum::Jigsaw => f.write_str("JIGSAW"),
            MaterialEnum::TurtleHelmet => f.write_str("TURTLE_HELMET"),
            MaterialEnum::Scute => f.write_str("SCUTE"),
            MaterialEnum::FlintAndSteel => f.write_str("FLINT_AND_STEEL"),
            MaterialEnum::Apple => f.write_str("APPLE"),
            MaterialEnum::Bow => f.write_str("BOW"),
            MaterialEnum::Arrow => f.write_str("ARROW"),
            MaterialEnum::Coal => f.write_str("COAL"),
            MaterialEnum::Charcoal => f.write_str("CHARCOAL"),
            MaterialEnum::Diamond => f.write_str("DIAMOND"),
            MaterialEnum::Emerald => f.write_str("EMERALD"),
            MaterialEnum::LapisLazuli => f.write_str("LAPIS_LAZULI"),
            MaterialEnum::Quartz => f.write_str("QUARTZ"),
            MaterialEnum::AmethystShard => f.write_str("AMETHYST_SHARD"),
            MaterialEnum::RawIron => f.write_str("RAW_IRON"),
            MaterialEnum::IronIngot => f.write_str("IRON_INGOT"),
            MaterialEnum::RawCopper => f.write_str("RAW_COPPER"),
            MaterialEnum::CopperIngot => f.write_str("COPPER_INGOT"),
            MaterialEnum::RawGold => f.write_str("RAW_GOLD"),
            MaterialEnum::GoldIngot => f.write_str("GOLD_INGOT"),
            MaterialEnum::NetheriteIngot => f.write_str("NETHERITE_INGOT"),
            MaterialEnum::NetheriteScrap => f.write_str("NETHERITE_SCRAP"),
            MaterialEnum::WoodenSword => f.write_str("WOODEN_SWORD"),
            MaterialEnum::WoodenShovel => f.write_str("WOODEN_SHOVEL"),
            MaterialEnum::WoodenPickaxe => f.write_str("WOODEN_PICKAXE"),
            MaterialEnum::WoodenAxe => f.write_str("WOODEN_AXE"),
            MaterialEnum::WoodenHoe => f.write_str("WOODEN_HOE"),
            MaterialEnum::StoneSword => f.write_str("STONE_SWORD"),
            MaterialEnum::StoneShovel => f.write_str("STONE_SHOVEL"),
            MaterialEnum::StonePickaxe => f.write_str("STONE_PICKAXE"),
            MaterialEnum::StoneAxe => f.write_str("STONE_AXE"),
            MaterialEnum::StoneHoe => f.write_str("STONE_HOE"),
            MaterialEnum::GoldenSword => f.write_str("GOLDEN_SWORD"),
            MaterialEnum::GoldenShovel => f.write_str("GOLDEN_SHOVEL"),
            MaterialEnum::GoldenPickaxe => f.write_str("GOLDEN_PICKAXE"),
            MaterialEnum::GoldenAxe => f.write_str("GOLDEN_AXE"),
            MaterialEnum::GoldenHoe => f.write_str("GOLDEN_HOE"),
            MaterialEnum::IronSword => f.write_str("IRON_SWORD"),
            MaterialEnum::IronShovel => f.write_str("IRON_SHOVEL"),
            MaterialEnum::IronPickaxe => f.write_str("IRON_PICKAXE"),
            MaterialEnum::IronAxe => f.write_str("IRON_AXE"),
            MaterialEnum::IronHoe => f.write_str("IRON_HOE"),
            MaterialEnum::DiamondSword => f.write_str("DIAMOND_SWORD"),
            MaterialEnum::DiamondShovel => f.write_str("DIAMOND_SHOVEL"),
            MaterialEnum::DiamondPickaxe => f.write_str("DIAMOND_PICKAXE"),
            MaterialEnum::DiamondAxe => f.write_str("DIAMOND_AXE"),
            MaterialEnum::DiamondHoe => f.write_str("DIAMOND_HOE"),
            MaterialEnum::NetheriteSword => f.write_str("NETHERITE_SWORD"),
            MaterialEnum::NetheriteShovel => f.write_str("NETHERITE_SHOVEL"),
            MaterialEnum::NetheritePickaxe => f.write_str("NETHERITE_PICKAXE"),
            MaterialEnum::NetheriteAxe => f.write_str("NETHERITE_AXE"),
            MaterialEnum::NetheriteHoe => f.write_str("NETHERITE_HOE"),
            MaterialEnum::Stick => f.write_str("STICK"),
            MaterialEnum::Bowl => f.write_str("BOWL"),
            MaterialEnum::MushroomStew => f.write_str("MUSHROOM_STEW"),
            MaterialEnum::String => f.write_str("STRING"),
            MaterialEnum::Feather => f.write_str("FEATHER"),
            MaterialEnum::Gunpowder => f.write_str("GUNPOWDER"),
            MaterialEnum::WheatSeeds => f.write_str("WHEAT_SEEDS"),
            MaterialEnum::Wheat => f.write_str("WHEAT"),
            MaterialEnum::Bread => f.write_str("BREAD"),
            MaterialEnum::LeatherHelmet => f.write_str("LEATHER_HELMET"),
            MaterialEnum::LeatherChestplate => f.write_str("LEATHER_CHESTPLATE"),
            MaterialEnum::LeatherLeggings => f.write_str("LEATHER_LEGGINGS"),
            MaterialEnum::LeatherBoots => f.write_str("LEATHER_BOOTS"),
            MaterialEnum::ChainmailHelmet => f.write_str("CHAINMAIL_HELMET"),
            MaterialEnum::ChainmailChestplate => f.write_str("CHAINMAIL_CHESTPLATE"),
            MaterialEnum::ChainmailLeggings => f.write_str("CHAINMAIL_LEGGINGS"),
            MaterialEnum::ChainmailBoots => f.write_str("CHAINMAIL_BOOTS"),
            MaterialEnum::IronHelmet => f.write_str("IRON_HELMET"),
            MaterialEnum::IronChestplate => f.write_str("IRON_CHESTPLATE"),
            MaterialEnum::IronLeggings => f.write_str("IRON_LEGGINGS"),
            MaterialEnum::IronBoots => f.write_str("IRON_BOOTS"),
            MaterialEnum::DiamondHelmet => f.write_str("DIAMOND_HELMET"),
            MaterialEnum::DiamondChestplate => f.write_str("DIAMOND_CHESTPLATE"),
            MaterialEnum::DiamondLeggings => f.write_str("DIAMOND_LEGGINGS"),
            MaterialEnum::DiamondBoots => f.write_str("DIAMOND_BOOTS"),
            MaterialEnum::GoldenHelmet => f.write_str("GOLDEN_HELMET"),
            MaterialEnum::GoldenChestplate => f.write_str("GOLDEN_CHESTPLATE"),
            MaterialEnum::GoldenLeggings => f.write_str("GOLDEN_LEGGINGS"),
            MaterialEnum::GoldenBoots => f.write_str("GOLDEN_BOOTS"),
            MaterialEnum::NetheriteHelmet => f.write_str("NETHERITE_HELMET"),
            MaterialEnum::NetheriteChestplate => f.write_str("NETHERITE_CHESTPLATE"),
            MaterialEnum::NetheriteLeggings => f.write_str("NETHERITE_LEGGINGS"),
            MaterialEnum::NetheriteBoots => f.write_str("NETHERITE_BOOTS"),
            MaterialEnum::Flint => f.write_str("FLINT"),
            MaterialEnum::Porkchop => f.write_str("PORKCHOP"),
            MaterialEnum::CookedPorkchop => f.write_str("COOKED_PORKCHOP"),
            MaterialEnum::Painting => f.write_str("PAINTING"),
            MaterialEnum::GoldenApple => f.write_str("GOLDEN_APPLE"),
            MaterialEnum::EnchantedGoldenApple => f.write_str("ENCHANTED_GOLDEN_APPLE"),
            MaterialEnum::OakSign => f.write_str("OAK_SIGN"),
            MaterialEnum::SpruceSign => f.write_str("SPRUCE_SIGN"),
            MaterialEnum::BirchSign => f.write_str("BIRCH_SIGN"),
            MaterialEnum::JungleSign => f.write_str("JUNGLE_SIGN"),
            MaterialEnum::AcaciaSign => f.write_str("ACACIA_SIGN"),
            MaterialEnum::CherrySign => f.write_str("CHERRY_SIGN"),
            MaterialEnum::DarkOakSign => f.write_str("DARK_OAK_SIGN"),
            MaterialEnum::MangroveSign => f.write_str("MANGROVE_SIGN"),
            MaterialEnum::BambooSign => f.write_str("BAMBOO_SIGN"),
            MaterialEnum::CrimsonSign => f.write_str("CRIMSON_SIGN"),
            MaterialEnum::WarpedSign => f.write_str("WARPED_SIGN"),
            MaterialEnum::OakHangingSign => f.write_str("OAK_HANGING_SIGN"),
            MaterialEnum::SpruceHangingSign => f.write_str("SPRUCE_HANGING_SIGN"),
            MaterialEnum::BirchHangingSign => f.write_str("BIRCH_HANGING_SIGN"),
            MaterialEnum::JungleHangingSign => f.write_str("JUNGLE_HANGING_SIGN"),
            MaterialEnum::AcaciaHangingSign => f.write_str("ACACIA_HANGING_SIGN"),
            MaterialEnum::CherryHangingSign => f.write_str("CHERRY_HANGING_SIGN"),
            MaterialEnum::DarkOakHangingSign => f.write_str("DARK_OAK_HANGING_SIGN"),
            MaterialEnum::MangroveHangingSign => f.write_str("MANGROVE_HANGING_SIGN"),
            MaterialEnum::BambooHangingSign => f.write_str("BAMBOO_HANGING_SIGN"),
            MaterialEnum::CrimsonHangingSign => f.write_str("CRIMSON_HANGING_SIGN"),
            MaterialEnum::WarpedHangingSign => f.write_str("WARPED_HANGING_SIGN"),
            MaterialEnum::Bucket => f.write_str("BUCKET"),
            MaterialEnum::WaterBucket => f.write_str("WATER_BUCKET"),
            MaterialEnum::LavaBucket => f.write_str("LAVA_BUCKET"),
            MaterialEnum::PowderSnowBucket => f.write_str("POWDER_SNOW_BUCKET"),
            MaterialEnum::Snowball => f.write_str("SNOWBALL"),
            MaterialEnum::Leather => f.write_str("LEATHER"),
            MaterialEnum::MilkBucket => f.write_str("MILK_BUCKET"),
            MaterialEnum::PufferfishBucket => f.write_str("PUFFERFISH_BUCKET"),
            MaterialEnum::SalmonBucket => f.write_str("SALMON_BUCKET"),
            MaterialEnum::CodBucket => f.write_str("COD_BUCKET"),
            MaterialEnum::TropicalFishBucket => f.write_str("TROPICAL_FISH_BUCKET"),
            MaterialEnum::AxolotlBucket => f.write_str("AXOLOTL_BUCKET"),
            MaterialEnum::TadpoleBucket => f.write_str("TADPOLE_BUCKET"),
            MaterialEnum::Brick => f.write_str("BRICK"),
            MaterialEnum::ClayBall => f.write_str("CLAY_BALL"),
            MaterialEnum::DriedKelpBlock => f.write_str("DRIED_KELP_BLOCK"),
            MaterialEnum::Paper => f.write_str("PAPER"),
            MaterialEnum::Book => f.write_str("BOOK"),
            MaterialEnum::SlimeBall => f.write_str("SLIME_BALL"),
            MaterialEnum::Egg => f.write_str("EGG"),
            MaterialEnum::Compass => f.write_str("COMPASS"),
            MaterialEnum::RecoveryCompass => f.write_str("RECOVERY_COMPASS"),
            MaterialEnum::Bundle => f.write_str("BUNDLE"),
            MaterialEnum::FishingRod => f.write_str("FISHING_ROD"),
            MaterialEnum::Clock => f.write_str("CLOCK"),
            MaterialEnum::Spyglass => f.write_str("SPYGLASS"),
            MaterialEnum::GlowstoneDust => f.write_str("GLOWSTONE_DUST"),
            MaterialEnum::Cod => f.write_str("COD"),
            MaterialEnum::Salmon => f.write_str("SALMON"),
            MaterialEnum::TropicalFish => f.write_str("TROPICAL_FISH"),
            MaterialEnum::Pufferfish => f.write_str("PUFFERFISH"),
            MaterialEnum::CookedCod => f.write_str("COOKED_COD"),
            MaterialEnum::CookedSalmon => f.write_str("COOKED_SALMON"),
            MaterialEnum::InkSac => f.write_str("INK_SAC"),
            MaterialEnum::GlowInkSac => f.write_str("GLOW_INK_SAC"),
            MaterialEnum::CocoaBeans => f.write_str("COCOA_BEANS"),
            MaterialEnum::WhiteDye => f.write_str("WHITE_DYE"),
            MaterialEnum::OrangeDye => f.write_str("ORANGE_DYE"),
            MaterialEnum::MagentaDye => f.write_str("MAGENTA_DYE"),
            MaterialEnum::LightBlueDye => f.write_str("LIGHT_BLUE_DYE"),
            MaterialEnum::YellowDye => f.write_str("YELLOW_DYE"),
            MaterialEnum::LimeDye => f.write_str("LIME_DYE"),
            MaterialEnum::PinkDye => f.write_str("PINK_DYE"),
            MaterialEnum::GrayDye => f.write_str("GRAY_DYE"),
            MaterialEnum::LightGrayDye => f.write_str("LIGHT_GRAY_DYE"),
            MaterialEnum::CyanDye => f.write_str("CYAN_DYE"),
            MaterialEnum::PurpleDye => f.write_str("PURPLE_DYE"),
            MaterialEnum::BlueDye => f.write_str("BLUE_DYE"),
            MaterialEnum::BrownDye => f.write_str("BROWN_DYE"),
            MaterialEnum::GreenDye => f.write_str("GREEN_DYE"),
            MaterialEnum::RedDye => f.write_str("RED_DYE"),
            MaterialEnum::BlackDye => f.write_str("BLACK_DYE"),
            MaterialEnum::BoneMeal => f.write_str("BONE_MEAL"),
            MaterialEnum::Bone => f.write_str("BONE"),
            MaterialEnum::Sugar => f.write_str("SUGAR"),
            MaterialEnum::Cake => f.write_str("CAKE"),
            MaterialEnum::WhiteBed => f.write_str("WHITE_BED"),
            MaterialEnum::OrangeBed => f.write_str("ORANGE_BED"),
            MaterialEnum::MagentaBed => f.write_str("MAGENTA_BED"),
            MaterialEnum::LightBlueBed => f.write_str("LIGHT_BLUE_BED"),
            MaterialEnum::YellowBed => f.write_str("YELLOW_BED"),
            MaterialEnum::LimeBed => f.write_str("LIME_BED"),
            MaterialEnum::PinkBed => f.write_str("PINK_BED"),
            MaterialEnum::GrayBed => f.write_str("GRAY_BED"),
            MaterialEnum::LightGrayBed => f.write_str("LIGHT_GRAY_BED"),
            MaterialEnum::CyanBed => f.write_str("CYAN_BED"),
            MaterialEnum::PurpleBed => f.write_str("PURPLE_BED"),
            MaterialEnum::BlueBed => f.write_str("BLUE_BED"),
            MaterialEnum::BrownBed => f.write_str("BROWN_BED"),
            MaterialEnum::GreenBed => f.write_str("GREEN_BED"),
            MaterialEnum::RedBed => f.write_str("RED_BED"),
            MaterialEnum::BlackBed => f.write_str("BLACK_BED"),
            MaterialEnum::Cookie => f.write_str("COOKIE"),
            MaterialEnum::FilledMap => f.write_str("FILLED_MAP"),
            MaterialEnum::Shears => f.write_str("SHEARS"),
            MaterialEnum::MelonSlice => f.write_str("MELON_SLICE"),
            MaterialEnum::DriedKelp => f.write_str("DRIED_KELP"),
            MaterialEnum::PumpkinSeeds => f.write_str("PUMPKIN_SEEDS"),
            MaterialEnum::MelonSeeds => f.write_str("MELON_SEEDS"),
            MaterialEnum::Beef => f.write_str("BEEF"),
            MaterialEnum::CookedBeef => f.write_str("COOKED_BEEF"),
            MaterialEnum::Chicken => f.write_str("CHICKEN"),
            MaterialEnum::CookedChicken => f.write_str("COOKED_CHICKEN"),
            MaterialEnum::RottenFlesh => f.write_str("ROTTEN_FLESH"),
            MaterialEnum::EnderPearl => f.write_str("ENDER_PEARL"),
            MaterialEnum::BlazeRod => f.write_str("BLAZE_ROD"),
            MaterialEnum::GhastTear => f.write_str("GHAST_TEAR"),
            MaterialEnum::GoldNugget => f.write_str("GOLD_NUGGET"),
            MaterialEnum::NetherWart => f.write_str("NETHER_WART"),
            MaterialEnum::Potion => f.write_str("POTION"),
            MaterialEnum::GlassBottle => f.write_str("GLASS_BOTTLE"),
            MaterialEnum::SpiderEye => f.write_str("SPIDER_EYE"),
            MaterialEnum::FermentedSpiderEye => f.write_str("FERMENTED_SPIDER_EYE"),
            MaterialEnum::BlazePowder => f.write_str("BLAZE_POWDER"),
            MaterialEnum::MagmaCream => f.write_str("MAGMA_CREAM"),
            MaterialEnum::BrewingStand => f.write_str("BREWING_STAND"),
            MaterialEnum::Cauldron => f.write_str("CAULDRON"),
            MaterialEnum::EnderEye => f.write_str("ENDER_EYE"),
            MaterialEnum::GlisteringMelonSlice => f.write_str("GLISTERING_MELON_SLICE"),
            MaterialEnum::AllaySpawnEgg => f.write_str("ALLAY_SPAWN_EGG"),
            MaterialEnum::AxolotlSpawnEgg => f.write_str("AXOLOTL_SPAWN_EGG"),
            MaterialEnum::BatSpawnEgg => f.write_str("BAT_SPAWN_EGG"),
            MaterialEnum::BeeSpawnEgg => f.write_str("BEE_SPAWN_EGG"),
            MaterialEnum::BlazeSpawnEgg => f.write_str("BLAZE_SPAWN_EGG"),
            MaterialEnum::CatSpawnEgg => f.write_str("CAT_SPAWN_EGG"),
            MaterialEnum::CamelSpawnEgg => f.write_str("CAMEL_SPAWN_EGG"),
            MaterialEnum::CaveSpiderSpawnEgg => f.write_str("CAVE_SPIDER_SPAWN_EGG"),
            MaterialEnum::ChickenSpawnEgg => f.write_str("CHICKEN_SPAWN_EGG"),
            MaterialEnum::CodSpawnEgg => f.write_str("COD_SPAWN_EGG"),
            MaterialEnum::CowSpawnEgg => f.write_str("COW_SPAWN_EGG"),
            MaterialEnum::CreeperSpawnEgg => f.write_str("CREEPER_SPAWN_EGG"),
            MaterialEnum::DolphinSpawnEgg => f.write_str("DOLPHIN_SPAWN_EGG"),
            MaterialEnum::DonkeySpawnEgg => f.write_str("DONKEY_SPAWN_EGG"),
            MaterialEnum::DrownedSpawnEgg => f.write_str("DROWNED_SPAWN_EGG"),
            MaterialEnum::ElderGuardianSpawnEgg => f.write_str("ELDER_GUARDIAN_SPAWN_EGG"),
            MaterialEnum::EnderDragonSpawnEgg => f.write_str("ENDER_DRAGON_SPAWN_EGG"),
            MaterialEnum::EndermanSpawnEgg => f.write_str("ENDERMAN_SPAWN_EGG"),
            MaterialEnum::EndermiteSpawnEgg => f.write_str("ENDERMITE_SPAWN_EGG"),
            MaterialEnum::EvokerSpawnEgg => f.write_str("EVOKER_SPAWN_EGG"),
            MaterialEnum::FoxSpawnEgg => f.write_str("FOX_SPAWN_EGG"),
            MaterialEnum::FrogSpawnEgg => f.write_str("FROG_SPAWN_EGG"),
            MaterialEnum::GhastSpawnEgg => f.write_str("GHAST_SPAWN_EGG"),
            MaterialEnum::GlowSquidSpawnEgg => f.write_str("GLOW_SQUID_SPAWN_EGG"),
            MaterialEnum::GoatSpawnEgg => f.write_str("GOAT_SPAWN_EGG"),
            MaterialEnum::GuardianSpawnEgg => f.write_str("GUARDIAN_SPAWN_EGG"),
            MaterialEnum::HoglinSpawnEgg => f.write_str("HOGLIN_SPAWN_EGG"),
            MaterialEnum::HorseSpawnEgg => f.write_str("HORSE_SPAWN_EGG"),
            MaterialEnum::HuskSpawnEgg => f.write_str("HUSK_SPAWN_EGG"),
            MaterialEnum::IronGolemSpawnEgg => f.write_str("IRON_GOLEM_SPAWN_EGG"),
            MaterialEnum::LlamaSpawnEgg => f.write_str("LLAMA_SPAWN_EGG"),
            MaterialEnum::MagmaCubeSpawnEgg => f.write_str("MAGMA_CUBE_SPAWN_EGG"),
            MaterialEnum::MooshroomSpawnEgg => f.write_str("MOOSHROOM_SPAWN_EGG"),
            MaterialEnum::MuleSpawnEgg => f.write_str("MULE_SPAWN_EGG"),
            MaterialEnum::OcelotSpawnEgg => f.write_str("OCELOT_SPAWN_EGG"),
            MaterialEnum::PandaSpawnEgg => f.write_str("PANDA_SPAWN_EGG"),
            MaterialEnum::ParrotSpawnEgg => f.write_str("PARROT_SPAWN_EGG"),
            MaterialEnum::PhantomSpawnEgg => f.write_str("PHANTOM_SPAWN_EGG"),
            MaterialEnum::PigSpawnEgg => f.write_str("PIG_SPAWN_EGG"),
            MaterialEnum::PiglinSpawnEgg => f.write_str("PIGLIN_SPAWN_EGG"),
            MaterialEnum::PiglinBruteSpawnEgg => f.write_str("PIGLIN_BRUTE_SPAWN_EGG"),
            MaterialEnum::PillagerSpawnEgg => f.write_str("PILLAGER_SPAWN_EGG"),
            MaterialEnum::PolarBearSpawnEgg => f.write_str("POLAR_BEAR_SPAWN_EGG"),
            MaterialEnum::PufferfishSpawnEgg => f.write_str("PUFFERFISH_SPAWN_EGG"),
            MaterialEnum::RabbitSpawnEgg => f.write_str("RABBIT_SPAWN_EGG"),
            MaterialEnum::RavagerSpawnEgg => f.write_str("RAVAGER_SPAWN_EGG"),
            MaterialEnum::SalmonSpawnEgg => f.write_str("SALMON_SPAWN_EGG"),
            MaterialEnum::SheepSpawnEgg => f.write_str("SHEEP_SPAWN_EGG"),
            MaterialEnum::ShulkerSpawnEgg => f.write_str("SHULKER_SPAWN_EGG"),
            MaterialEnum::SilverfishSpawnEgg => f.write_str("SILVERFISH_SPAWN_EGG"),
            MaterialEnum::SkeletonSpawnEgg => f.write_str("SKELETON_SPAWN_EGG"),
            MaterialEnum::SkeletonHorseSpawnEgg => f.write_str("SKELETON_HORSE_SPAWN_EGG"),
            MaterialEnum::SlimeSpawnEgg => f.write_str("SLIME_SPAWN_EGG"),
            MaterialEnum::SnifferSpawnEgg => f.write_str("SNIFFER_SPAWN_EGG"),
            MaterialEnum::SnowGolemSpawnEgg => f.write_str("SNOW_GOLEM_SPAWN_EGG"),
            MaterialEnum::SpiderSpawnEgg => f.write_str("SPIDER_SPAWN_EGG"),
            MaterialEnum::SquidSpawnEgg => f.write_str("SQUID_SPAWN_EGG"),
            MaterialEnum::StraySpawnEgg => f.write_str("STRAY_SPAWN_EGG"),
            MaterialEnum::StriderSpawnEgg => f.write_str("STRIDER_SPAWN_EGG"),
            MaterialEnum::TadpoleSpawnEgg => f.write_str("TADPOLE_SPAWN_EGG"),
            MaterialEnum::TraderLlamaSpawnEgg => f.write_str("TRADER_LLAMA_SPAWN_EGG"),
            MaterialEnum::TropicalFishSpawnEgg => f.write_str("TROPICAL_FISH_SPAWN_EGG"),
            MaterialEnum::TurtleSpawnEgg => f.write_str("TURTLE_SPAWN_EGG"),
            MaterialEnum::VexSpawnEgg => f.write_str("VEX_SPAWN_EGG"),
            MaterialEnum::VillagerSpawnEgg => f.write_str("VILLAGER_SPAWN_EGG"),
            MaterialEnum::VindicatorSpawnEgg => f.write_str("VINDICATOR_SPAWN_EGG"),
            MaterialEnum::WanderingTraderSpawnEgg => f.write_str("WANDERING_TRADER_SPAWN_EGG"),
            MaterialEnum::WardenSpawnEgg => f.write_str("WARDEN_SPAWN_EGG"),
            MaterialEnum::WitchSpawnEgg => f.write_str("WITCH_SPAWN_EGG"),
            MaterialEnum::WitherSpawnEgg => f.write_str("WITHER_SPAWN_EGG"),
            MaterialEnum::WitherSkeletonSpawnEgg => f.write_str("WITHER_SKELETON_SPAWN_EGG"),
            MaterialEnum::WolfSpawnEgg => f.write_str("WOLF_SPAWN_EGG"),
            MaterialEnum::ZoglinSpawnEgg => f.write_str("ZOGLIN_SPAWN_EGG"),
            MaterialEnum::ZombieSpawnEgg => f.write_str("ZOMBIE_SPAWN_EGG"),
            MaterialEnum::ZombieHorseSpawnEgg => f.write_str("ZOMBIE_HORSE_SPAWN_EGG"),
            MaterialEnum::ZombieVillagerSpawnEgg => f.write_str("ZOMBIE_VILLAGER_SPAWN_EGG"),
            MaterialEnum::ZombifiedPiglinSpawnEgg => f.write_str("ZOMBIFIED_PIGLIN_SPAWN_EGG"),
            MaterialEnum::ExperienceBottle => f.write_str("EXPERIENCE_BOTTLE"),
            MaterialEnum::FireCharge => f.write_str("FIRE_CHARGE"),
            MaterialEnum::WritableBook => f.write_str("WRITABLE_BOOK"),
            MaterialEnum::WrittenBook => f.write_str("WRITTEN_BOOK"),
            MaterialEnum::ItemFrame => f.write_str("ITEM_FRAME"),
            MaterialEnum::GlowItemFrame => f.write_str("GLOW_ITEM_FRAME"),
            MaterialEnum::FlowerPot => f.write_str("FLOWER_POT"),
            MaterialEnum::Carrot => f.write_str("CARROT"),
            MaterialEnum::Potato => f.write_str("POTATO"),
            MaterialEnum::BakedPotato => f.write_str("BAKED_POTATO"),
            MaterialEnum::PoisonousPotato => f.write_str("POISONOUS_POTATO"),
            MaterialEnum::Map => f.write_str("MAP"),
            MaterialEnum::GoldenCarrot => f.write_str("GOLDEN_CARROT"),
            MaterialEnum::SkeletonSkull => f.write_str("SKELETON_SKULL"),
            MaterialEnum::WitherSkeletonSkull => f.write_str("WITHER_SKELETON_SKULL"),
            MaterialEnum::PlayerHead => f.write_str("PLAYER_HEAD"),
            MaterialEnum::ZombieHead => f.write_str("ZOMBIE_HEAD"),
            MaterialEnum::CreeperHead => f.write_str("CREEPER_HEAD"),
            MaterialEnum::DragonHead => f.write_str("DRAGON_HEAD"),
            MaterialEnum::PiglinHead => f.write_str("PIGLIN_HEAD"),
            MaterialEnum::NetherStar => f.write_str("NETHER_STAR"),
            MaterialEnum::PumpkinPie => f.write_str("PUMPKIN_PIE"),
            MaterialEnum::FireworkRocket => f.write_str("FIREWORK_ROCKET"),
            MaterialEnum::FireworkStar => f.write_str("FIREWORK_STAR"),
            MaterialEnum::EnchantedBook => f.write_str("ENCHANTED_BOOK"),
            MaterialEnum::NetherBrick => f.write_str("NETHER_BRICK"),
            MaterialEnum::PrismarineShard => f.write_str("PRISMARINE_SHARD"),
            MaterialEnum::PrismarineCrystals => f.write_str("PRISMARINE_CRYSTALS"),
            MaterialEnum::Rabbit => f.write_str("RABBIT"),
            MaterialEnum::CookedRabbit => f.write_str("COOKED_RABBIT"),
            MaterialEnum::RabbitStew => f.write_str("RABBIT_STEW"),
            MaterialEnum::RabbitFoot => f.write_str("RABBIT_FOOT"),
            MaterialEnum::RabbitHide => f.write_str("RABBIT_HIDE"),
            MaterialEnum::ArmorStand => f.write_str("ARMOR_STAND"),
            MaterialEnum::IronHorseArmor => f.write_str("IRON_HORSE_ARMOR"),
            MaterialEnum::GoldenHorseArmor => f.write_str("GOLDEN_HORSE_ARMOR"),
            MaterialEnum::DiamondHorseArmor => f.write_str("DIAMOND_HORSE_ARMOR"),
            MaterialEnum::LeatherHorseArmor => f.write_str("LEATHER_HORSE_ARMOR"),
            MaterialEnum::Lead => f.write_str("LEAD"),
            MaterialEnum::NameTag => f.write_str("NAME_TAG"),
            MaterialEnum::CommandBlockMinecart => f.write_str("COMMAND_BLOCK_MINECART"),
            MaterialEnum::Mutton => f.write_str("MUTTON"),
            MaterialEnum::CookedMutton => f.write_str("COOKED_MUTTON"),
            MaterialEnum::WhiteBanner => f.write_str("WHITE_BANNER"),
            MaterialEnum::OrangeBanner => f.write_str("ORANGE_BANNER"),
            MaterialEnum::MagentaBanner => f.write_str("MAGENTA_BANNER"),
            MaterialEnum::LightBlueBanner => f.write_str("LIGHT_BLUE_BANNER"),
            MaterialEnum::YellowBanner => f.write_str("YELLOW_BANNER"),
            MaterialEnum::LimeBanner => f.write_str("LIME_BANNER"),
            MaterialEnum::PinkBanner => f.write_str("PINK_BANNER"),
            MaterialEnum::GrayBanner => f.write_str("GRAY_BANNER"),
            MaterialEnum::LightGrayBanner => f.write_str("LIGHT_GRAY_BANNER"),
            MaterialEnum::CyanBanner => f.write_str("CYAN_BANNER"),
            MaterialEnum::PurpleBanner => f.write_str("PURPLE_BANNER"),
            MaterialEnum::BlueBanner => f.write_str("BLUE_BANNER"),
            MaterialEnum::BrownBanner => f.write_str("BROWN_BANNER"),
            MaterialEnum::GreenBanner => f.write_str("GREEN_BANNER"),
            MaterialEnum::RedBanner => f.write_str("RED_BANNER"),
            MaterialEnum::BlackBanner => f.write_str("BLACK_BANNER"),
            MaterialEnum::EndCrystal => f.write_str("END_CRYSTAL"),
            MaterialEnum::ChorusFruit => f.write_str("CHORUS_FRUIT"),
            MaterialEnum::PoppedChorusFruit => f.write_str("POPPED_CHORUS_FRUIT"),
            MaterialEnum::TorchflowerSeeds => f.write_str("TORCHFLOWER_SEEDS"),
            MaterialEnum::PitcherPod => f.write_str("PITCHER_POD"),
            MaterialEnum::Beetroot => f.write_str("BEETROOT"),
            MaterialEnum::BeetrootSeeds => f.write_str("BEETROOT_SEEDS"),
            MaterialEnum::BeetrootSoup => f.write_str("BEETROOT_SOUP"),
            MaterialEnum::DragonBreath => f.write_str("DRAGON_BREATH"),
            MaterialEnum::SplashPotion => f.write_str("SPLASH_POTION"),
            MaterialEnum::SpectralArrow => f.write_str("SPECTRAL_ARROW"),
            MaterialEnum::TippedArrow => f.write_str("TIPPED_ARROW"),
            MaterialEnum::LingeringPotion => f.write_str("LINGERING_POTION"),
            MaterialEnum::Shield => f.write_str("SHIELD"),
            MaterialEnum::TotemOfUndying => f.write_str("TOTEM_OF_UNDYING"),
            MaterialEnum::ShulkerShell => f.write_str("SHULKER_SHELL"),
            MaterialEnum::IronNugget => f.write_str("IRON_NUGGET"),
            MaterialEnum::KnowledgeBook => f.write_str("KNOWLEDGE_BOOK"),
            MaterialEnum::DebugStick => f.write_str("DEBUG_STICK"),
            MaterialEnum::MusicDisc13 => f.write_str("MUSIC_DISC_13"),
            MaterialEnum::MusicDiscCat => f.write_str("MUSIC_DISC_CAT"),
            MaterialEnum::MusicDiscBlocks => f.write_str("MUSIC_DISC_BLOCKS"),
            MaterialEnum::MusicDiscChirp => f.write_str("MUSIC_DISC_CHIRP"),
            MaterialEnum::MusicDiscFar => f.write_str("MUSIC_DISC_FAR"),
            MaterialEnum::MusicDiscMall => f.write_str("MUSIC_DISC_MALL"),
            MaterialEnum::MusicDiscMellohi => f.write_str("MUSIC_DISC_MELLOHI"),
            MaterialEnum::MusicDiscStal => f.write_str("MUSIC_DISC_STAL"),
            MaterialEnum::MusicDiscStrad => f.write_str("MUSIC_DISC_STRAD"),
            MaterialEnum::MusicDiscWard => f.write_str("MUSIC_DISC_WARD"),
            MaterialEnum::MusicDisc11 => f.write_str("MUSIC_DISC_11"),
            MaterialEnum::MusicDiscWait => f.write_str("MUSIC_DISC_WAIT"),
            MaterialEnum::MusicDiscOtherside => f.write_str("MUSIC_DISC_OTHERSIDE"),
            MaterialEnum::MusicDiscRelic => f.write_str("MUSIC_DISC_RELIC"),
            MaterialEnum::MusicDisc5 => f.write_str("MUSIC_DISC_5"),
            MaterialEnum::MusicDiscPigstep => f.write_str("MUSIC_DISC_PIGSTEP"),
            MaterialEnum::DiscFragment5 => f.write_str("DISC_FRAGMENT_5"),
            MaterialEnum::Trident => f.write_str("TRIDENT"),
            MaterialEnum::PhantomMembrane => f.write_str("PHANTOM_MEMBRANE"),
            MaterialEnum::NautilusShell => f.write_str("NAUTILUS_SHELL"),
            MaterialEnum::HeartOfTheSea => f.write_str("HEART_OF_THE_SEA"),
            MaterialEnum::Crossbow => f.write_str("CROSSBOW"),
            MaterialEnum::SuspiciousStew => f.write_str("SUSPICIOUS_STEW"),
            MaterialEnum::Loom => f.write_str("LOOM"),
            MaterialEnum::FlowerBannerPattern => f.write_str("FLOWER_BANNER_PATTERN"),
            MaterialEnum::CreeperBannerPattern => f.write_str("CREEPER_BANNER_PATTERN"),
            MaterialEnum::SkullBannerPattern => f.write_str("SKULL_BANNER_PATTERN"),
            MaterialEnum::MojangBannerPattern => f.write_str("MOJANG_BANNER_PATTERN"),
            MaterialEnum::GlobeBannerPattern => f.write_str("GLOBE_BANNER_PATTERN"),
            MaterialEnum::PiglinBannerPattern => f.write_str("PIGLIN_BANNER_PATTERN"),
            MaterialEnum::GoatHorn => f.write_str("GOAT_HORN"),
            MaterialEnum::Composter => f.write_str("COMPOSTER"),
            MaterialEnum::Barrel => f.write_str("BARREL"),
            MaterialEnum::Smoker => f.write_str("SMOKER"),
            MaterialEnum::BlastFurnace => f.write_str("BLAST_FURNACE"),
            MaterialEnum::CartographyTable => f.write_str("CARTOGRAPHY_TABLE"),
            MaterialEnum::FletchingTable => f.write_str("FLETCHING_TABLE"),
            MaterialEnum::Grindstone => f.write_str("GRINDSTONE"),
            MaterialEnum::SmithingTable => f.write_str("SMITHING_TABLE"),
            MaterialEnum::Stonecutter => f.write_str("STONECUTTER"),
            MaterialEnum::Bell => f.write_str("BELL"),
            MaterialEnum::Lantern => f.write_str("LANTERN"),
            MaterialEnum::SoulLantern => f.write_str("SOUL_LANTERN"),
            MaterialEnum::SweetBerries => f.write_str("SWEET_BERRIES"),
            MaterialEnum::GlowBerries => f.write_str("GLOW_BERRIES"),
            MaterialEnum::Campfire => f.write_str("CAMPFIRE"),
            MaterialEnum::SoulCampfire => f.write_str("SOUL_CAMPFIRE"),
            MaterialEnum::Shroomlight => f.write_str("SHROOMLIGHT"),
            MaterialEnum::Honeycomb => f.write_str("HONEYCOMB"),
            MaterialEnum::BeeNest => f.write_str("BEE_NEST"),
            MaterialEnum::Beehive => f.write_str("BEEHIVE"),
            MaterialEnum::HoneyBottle => f.write_str("HONEY_BOTTLE"),
            MaterialEnum::HoneycombBlock => f.write_str("HONEYCOMB_BLOCK"),
            MaterialEnum::Lodestone => f.write_str("LODESTONE"),
            MaterialEnum::CryingObsidian => f.write_str("CRYING_OBSIDIAN"),
            MaterialEnum::Blackstone => f.write_str("BLACKSTONE"),
            MaterialEnum::BlackstoneSlab => f.write_str("BLACKSTONE_SLAB"),
            MaterialEnum::BlackstoneStairs => f.write_str("BLACKSTONE_STAIRS"),
            MaterialEnum::GildedBlackstone => f.write_str("GILDED_BLACKSTONE"),
            MaterialEnum::PolishedBlackstone => f.write_str("POLISHED_BLACKSTONE"),
            MaterialEnum::PolishedBlackstoneSlab => f.write_str("POLISHED_BLACKSTONE_SLAB"),
            MaterialEnum::PolishedBlackstoneStairs => f.write_str("POLISHED_BLACKSTONE_STAIRS"),
            MaterialEnum::ChiseledPolishedBlackstone => f.write_str("CHISELED_POLISHED_BLACKSTONE"),
            MaterialEnum::PolishedBlackstoneBricks => f.write_str("POLISHED_BLACKSTONE_BRICKS"),
            MaterialEnum::PolishedBlackstoneBrickSlab => {
                f.write_str("POLISHED_BLACKSTONE_BRICK_SLAB")
            }
            MaterialEnum::PolishedBlackstoneBrickStairs => {
                f.write_str("POLISHED_BLACKSTONE_BRICK_STAIRS")
            }
            MaterialEnum::CrackedPolishedBlackstoneBricks => {
                f.write_str("CRACKED_POLISHED_BLACKSTONE_BRICKS")
            }
            MaterialEnum::RespawnAnchor => f.write_str("RESPAWN_ANCHOR"),
            MaterialEnum::Candle => f.write_str("CANDLE"),
            MaterialEnum::WhiteCandle => f.write_str("WHITE_CANDLE"),
            MaterialEnum::OrangeCandle => f.write_str("ORANGE_CANDLE"),
            MaterialEnum::MagentaCandle => f.write_str("MAGENTA_CANDLE"),
            MaterialEnum::LightBlueCandle => f.write_str("LIGHT_BLUE_CANDLE"),
            MaterialEnum::YellowCandle => f.write_str("YELLOW_CANDLE"),
            MaterialEnum::LimeCandle => f.write_str("LIME_CANDLE"),
            MaterialEnum::PinkCandle => f.write_str("PINK_CANDLE"),
            MaterialEnum::GrayCandle => f.write_str("GRAY_CANDLE"),
            MaterialEnum::LightGrayCandle => f.write_str("LIGHT_GRAY_CANDLE"),
            MaterialEnum::CyanCandle => f.write_str("CYAN_CANDLE"),
            MaterialEnum::PurpleCandle => f.write_str("PURPLE_CANDLE"),
            MaterialEnum::BlueCandle => f.write_str("BLUE_CANDLE"),
            MaterialEnum::BrownCandle => f.write_str("BROWN_CANDLE"),
            MaterialEnum::GreenCandle => f.write_str("GREEN_CANDLE"),
            MaterialEnum::RedCandle => f.write_str("RED_CANDLE"),
            MaterialEnum::BlackCandle => f.write_str("BLACK_CANDLE"),
            MaterialEnum::SmallAmethystBud => f.write_str("SMALL_AMETHYST_BUD"),
            MaterialEnum::MediumAmethystBud => f.write_str("MEDIUM_AMETHYST_BUD"),
            MaterialEnum::LargeAmethystBud => f.write_str("LARGE_AMETHYST_BUD"),
            MaterialEnum::AmethystCluster => f.write_str("AMETHYST_CLUSTER"),
            MaterialEnum::PointedDripstone => f.write_str("POINTED_DRIPSTONE"),
            MaterialEnum::OchreFroglight => f.write_str("OCHRE_FROGLIGHT"),
            MaterialEnum::VerdantFroglight => f.write_str("VERDANT_FROGLIGHT"),
            MaterialEnum::PearlescentFroglight => f.write_str("PEARLESCENT_FROGLIGHT"),
            MaterialEnum::Frogspawn => f.write_str("FROGSPAWN"),
            MaterialEnum::EchoShard => f.write_str("ECHO_SHARD"),
            MaterialEnum::Brush => f.write_str("BRUSH"),
            MaterialEnum::NetheriteUpgradeSmithingTemplate => {
                f.write_str("NETHERITE_UPGRADE_SMITHING_TEMPLATE")
            }
            MaterialEnum::SentryArmorTrimSmithingTemplate => {
                f.write_str("SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::DuneArmorTrimSmithingTemplate => {
                f.write_str("DUNE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::CoastArmorTrimSmithingTemplate => {
                f.write_str("COAST_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::WildArmorTrimSmithingTemplate => {
                f.write_str("WILD_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::WardArmorTrimSmithingTemplate => {
                f.write_str("WARD_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::EyeArmorTrimSmithingTemplate => {
                f.write_str("EYE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::VexArmorTrimSmithingTemplate => {
                f.write_str("VEX_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::TideArmorTrimSmithingTemplate => {
                f.write_str("TIDE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::SnoutArmorTrimSmithingTemplate => {
                f.write_str("SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::RibArmorTrimSmithingTemplate => {
                f.write_str("RIB_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::SpireArmorTrimSmithingTemplate => {
                f.write_str("SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::WayfinderArmorTrimSmithingTemplate => {
                f.write_str("WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::ShaperArmorTrimSmithingTemplate => {
                f.write_str("SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::SilenceArmorTrimSmithingTemplate => {
                f.write_str("SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::RaiserArmorTrimSmithingTemplate => {
                f.write_str("RAISER_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::HostArmorTrimSmithingTemplate => {
                f.write_str("HOST_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialEnum::AnglerPotterySherd => f.write_str("ANGLER_POTTERY_SHERD"),
            MaterialEnum::ArcherPotterySherd => f.write_str("ARCHER_POTTERY_SHERD"),
            MaterialEnum::ArmsUpPotterySherd => f.write_str("ARMS_UP_POTTERY_SHERD"),
            MaterialEnum::BladePotterySherd => f.write_str("BLADE_POTTERY_SHERD"),
            MaterialEnum::BrewerPotterySherd => f.write_str("BREWER_POTTERY_SHERD"),
            MaterialEnum::BurnPotterySherd => f.write_str("BURN_POTTERY_SHERD"),
            MaterialEnum::DangerPotterySherd => f.write_str("DANGER_POTTERY_SHERD"),
            MaterialEnum::ExplorerPotterySherd => f.write_str("EXPLORER_POTTERY_SHERD"),
            MaterialEnum::FriendPotterySherd => f.write_str("FRIEND_POTTERY_SHERD"),
            MaterialEnum::HeartPotterySherd => f.write_str("HEART_POTTERY_SHERD"),
            MaterialEnum::HeartbreakPotterySherd => f.write_str("HEARTBREAK_POTTERY_SHERD"),
            MaterialEnum::HowlPotterySherd => f.write_str("HOWL_POTTERY_SHERD"),
            MaterialEnum::MinerPotterySherd => f.write_str("MINER_POTTERY_SHERD"),
            MaterialEnum::MournerPotterySherd => f.write_str("MOURNER_POTTERY_SHERD"),
            MaterialEnum::PlentyPotterySherd => f.write_str("PLENTY_POTTERY_SHERD"),
            MaterialEnum::PrizePotterySherd => f.write_str("PRIZE_POTTERY_SHERD"),
            MaterialEnum::SheafPotterySherd => f.write_str("SHEAF_POTTERY_SHERD"),
            MaterialEnum::ShelterPotterySherd => f.write_str("SHELTER_POTTERY_SHERD"),
            MaterialEnum::SkullPotterySherd => f.write_str("SKULL_POTTERY_SHERD"),
            MaterialEnum::SnortPotterySherd => f.write_str("SNORT_POTTERY_SHERD"),
            MaterialEnum::Water => f.write_str("WATER"),
            MaterialEnum::Lava => f.write_str("LAVA"),
            MaterialEnum::TallSeagrass => f.write_str("TALL_SEAGRASS"),
            MaterialEnum::PistonHead => f.write_str("PISTON_HEAD"),
            MaterialEnum::MovingPiston => f.write_str("MOVING_PISTON"),
            MaterialEnum::WallTorch => f.write_str("WALL_TORCH"),
            MaterialEnum::Fire => f.write_str("FIRE"),
            MaterialEnum::SoulFire => f.write_str("SOUL_FIRE"),
            MaterialEnum::RedstoneWire => f.write_str("REDSTONE_WIRE"),
            MaterialEnum::OakWallSign => f.write_str("OAK_WALL_SIGN"),
            MaterialEnum::SpruceWallSign => f.write_str("SPRUCE_WALL_SIGN"),
            MaterialEnum::BirchWallSign => f.write_str("BIRCH_WALL_SIGN"),
            MaterialEnum::AcaciaWallSign => f.write_str("ACACIA_WALL_SIGN"),
            MaterialEnum::CherryWallSign => f.write_str("CHERRY_WALL_SIGN"),
            MaterialEnum::JungleWallSign => f.write_str("JUNGLE_WALL_SIGN"),
            MaterialEnum::DarkOakWallSign => f.write_str("DARK_OAK_WALL_SIGN"),
            MaterialEnum::MangroveWallSign => f.write_str("MANGROVE_WALL_SIGN"),
            MaterialEnum::BambooWallSign => f.write_str("BAMBOO_WALL_SIGN"),
            MaterialEnum::OakWallHangingSign => f.write_str("OAK_WALL_HANGING_SIGN"),
            MaterialEnum::SpruceWallHangingSign => f.write_str("SPRUCE_WALL_HANGING_SIGN"),
            MaterialEnum::BirchWallHangingSign => f.write_str("BIRCH_WALL_HANGING_SIGN"),
            MaterialEnum::AcaciaWallHangingSign => f.write_str("ACACIA_WALL_HANGING_SIGN"),
            MaterialEnum::CherryWallHangingSign => f.write_str("CHERRY_WALL_HANGING_SIGN"),
            MaterialEnum::JungleWallHangingSign => f.write_str("JUNGLE_WALL_HANGING_SIGN"),
            MaterialEnum::DarkOakWallHangingSign => f.write_str("DARK_OAK_WALL_HANGING_SIGN"),
            MaterialEnum::MangroveWallHangingSign => f.write_str("MANGROVE_WALL_HANGING_SIGN"),
            MaterialEnum::CrimsonWallHangingSign => f.write_str("CRIMSON_WALL_HANGING_SIGN"),
            MaterialEnum::WarpedWallHangingSign => f.write_str("WARPED_WALL_HANGING_SIGN"),
            MaterialEnum::BambooWallHangingSign => f.write_str("BAMBOO_WALL_HANGING_SIGN"),
            MaterialEnum::RedstoneWallTorch => f.write_str("REDSTONE_WALL_TORCH"),
            MaterialEnum::SoulWallTorch => f.write_str("SOUL_WALL_TORCH"),
            MaterialEnum::NetherPortal => f.write_str("NETHER_PORTAL"),
            MaterialEnum::AttachedPumpkinStem => f.write_str("ATTACHED_PUMPKIN_STEM"),
            MaterialEnum::AttachedMelonStem => f.write_str("ATTACHED_MELON_STEM"),
            MaterialEnum::PumpkinStem => f.write_str("PUMPKIN_STEM"),
            MaterialEnum::MelonStem => f.write_str("MELON_STEM"),
            MaterialEnum::WaterCauldron => f.write_str("WATER_CAULDRON"),
            MaterialEnum::LavaCauldron => f.write_str("LAVA_CAULDRON"),
            MaterialEnum::PowderSnowCauldron => f.write_str("POWDER_SNOW_CAULDRON"),
            MaterialEnum::EndPortal => f.write_str("END_PORTAL"),
            MaterialEnum::Cocoa => f.write_str("COCOA"),
            MaterialEnum::Tripwire => f.write_str("TRIPWIRE"),
            MaterialEnum::PottedTorchflower => f.write_str("POTTED_TORCHFLOWER"),
            MaterialEnum::PottedOakSapling => f.write_str("POTTED_OAK_SAPLING"),
            MaterialEnum::PottedSpruceSapling => f.write_str("POTTED_SPRUCE_SAPLING"),
            MaterialEnum::PottedBirchSapling => f.write_str("POTTED_BIRCH_SAPLING"),
            MaterialEnum::PottedJungleSapling => f.write_str("POTTED_JUNGLE_SAPLING"),
            MaterialEnum::PottedAcaciaSapling => f.write_str("POTTED_ACACIA_SAPLING"),
            MaterialEnum::PottedCherrySapling => f.write_str("POTTED_CHERRY_SAPLING"),
            MaterialEnum::PottedDarkOakSapling => f.write_str("POTTED_DARK_OAK_SAPLING"),
            MaterialEnum::PottedMangrovePropagule => f.write_str("POTTED_MANGROVE_PROPAGULE"),
            MaterialEnum::PottedFern => f.write_str("POTTED_FERN"),
            MaterialEnum::PottedDandelion => f.write_str("POTTED_DANDELION"),
            MaterialEnum::PottedPoppy => f.write_str("POTTED_POPPY"),
            MaterialEnum::PottedBlueOrchid => f.write_str("POTTED_BLUE_ORCHID"),
            MaterialEnum::PottedAllium => f.write_str("POTTED_ALLIUM"),
            MaterialEnum::PottedAzureBluet => f.write_str("POTTED_AZURE_BLUET"),
            MaterialEnum::PottedRedTulip => f.write_str("POTTED_RED_TULIP"),
            MaterialEnum::PottedOrangeTulip => f.write_str("POTTED_ORANGE_TULIP"),
            MaterialEnum::PottedWhiteTulip => f.write_str("POTTED_WHITE_TULIP"),
            MaterialEnum::PottedPinkTulip => f.write_str("POTTED_PINK_TULIP"),
            MaterialEnum::PottedOxeyeDaisy => f.write_str("POTTED_OXEYE_DAISY"),
            MaterialEnum::PottedCornflower => f.write_str("POTTED_CORNFLOWER"),
            MaterialEnum::PottedLilyOfTheValley => f.write_str("POTTED_LILY_OF_THE_VALLEY"),
            MaterialEnum::PottedWitherRose => f.write_str("POTTED_WITHER_ROSE"),
            MaterialEnum::PottedRedMushroom => f.write_str("POTTED_RED_MUSHROOM"),
            MaterialEnum::PottedBrownMushroom => f.write_str("POTTED_BROWN_MUSHROOM"),
            MaterialEnum::PottedDeadBush => f.write_str("POTTED_DEAD_BUSH"),
            MaterialEnum::PottedCactus => f.write_str("POTTED_CACTUS"),
            MaterialEnum::Carrots => f.write_str("CARROTS"),
            MaterialEnum::Potatoes => f.write_str("POTATOES"),
            MaterialEnum::SkeletonWallSkull => f.write_str("SKELETON_WALL_SKULL"),
            MaterialEnum::WitherSkeletonWallSkull => f.write_str("WITHER_SKELETON_WALL_SKULL"),
            MaterialEnum::ZombieWallHead => f.write_str("ZOMBIE_WALL_HEAD"),
            MaterialEnum::PlayerWallHead => f.write_str("PLAYER_WALL_HEAD"),
            MaterialEnum::CreeperWallHead => f.write_str("CREEPER_WALL_HEAD"),
            MaterialEnum::DragonWallHead => f.write_str("DRAGON_WALL_HEAD"),
            MaterialEnum::PiglinWallHead => f.write_str("PIGLIN_WALL_HEAD"),
            MaterialEnum::WhiteWallBanner => f.write_str("WHITE_WALL_BANNER"),
            MaterialEnum::OrangeWallBanner => f.write_str("ORANGE_WALL_BANNER"),
            MaterialEnum::MagentaWallBanner => f.write_str("MAGENTA_WALL_BANNER"),
            MaterialEnum::LightBlueWallBanner => f.write_str("LIGHT_BLUE_WALL_BANNER"),
            MaterialEnum::YellowWallBanner => f.write_str("YELLOW_WALL_BANNER"),
            MaterialEnum::LimeWallBanner => f.write_str("LIME_WALL_BANNER"),
            MaterialEnum::PinkWallBanner => f.write_str("PINK_WALL_BANNER"),
            MaterialEnum::GrayWallBanner => f.write_str("GRAY_WALL_BANNER"),
            MaterialEnum::LightGrayWallBanner => f.write_str("LIGHT_GRAY_WALL_BANNER"),
            MaterialEnum::CyanWallBanner => f.write_str("CYAN_WALL_BANNER"),
            MaterialEnum::PurpleWallBanner => f.write_str("PURPLE_WALL_BANNER"),
            MaterialEnum::BlueWallBanner => f.write_str("BLUE_WALL_BANNER"),
            MaterialEnum::BrownWallBanner => f.write_str("BROWN_WALL_BANNER"),
            MaterialEnum::GreenWallBanner => f.write_str("GREEN_WALL_BANNER"),
            MaterialEnum::RedWallBanner => f.write_str("RED_WALL_BANNER"),
            MaterialEnum::BlackWallBanner => f.write_str("BLACK_WALL_BANNER"),
            MaterialEnum::TorchflowerCrop => f.write_str("TORCHFLOWER_CROP"),
            MaterialEnum::PitcherCrop => f.write_str("PITCHER_CROP"),
            MaterialEnum::Beetroots => f.write_str("BEETROOTS"),
            MaterialEnum::EndGateway => f.write_str("END_GATEWAY"),
            MaterialEnum::FrostedIce => f.write_str("FROSTED_ICE"),
            MaterialEnum::KelpPlant => f.write_str("KELP_PLANT"),
            MaterialEnum::DeadTubeCoralWallFan => f.write_str("DEAD_TUBE_CORAL_WALL_FAN"),
            MaterialEnum::DeadBrainCoralWallFan => f.write_str("DEAD_BRAIN_CORAL_WALL_FAN"),
            MaterialEnum::DeadBubbleCoralWallFan => f.write_str("DEAD_BUBBLE_CORAL_WALL_FAN"),
            MaterialEnum::DeadFireCoralWallFan => f.write_str("DEAD_FIRE_CORAL_WALL_FAN"),
            MaterialEnum::DeadHornCoralWallFan => f.write_str("DEAD_HORN_CORAL_WALL_FAN"),
            MaterialEnum::TubeCoralWallFan => f.write_str("TUBE_CORAL_WALL_FAN"),
            MaterialEnum::BrainCoralWallFan => f.write_str("BRAIN_CORAL_WALL_FAN"),
            MaterialEnum::BubbleCoralWallFan => f.write_str("BUBBLE_CORAL_WALL_FAN"),
            MaterialEnum::FireCoralWallFan => f.write_str("FIRE_CORAL_WALL_FAN"),
            MaterialEnum::HornCoralWallFan => f.write_str("HORN_CORAL_WALL_FAN"),
            MaterialEnum::BambooSapling => f.write_str("BAMBOO_SAPLING"),
            MaterialEnum::PottedBamboo => f.write_str("POTTED_BAMBOO"),
            MaterialEnum::VoidAir => f.write_str("VOID_AIR"),
            MaterialEnum::CaveAir => f.write_str("CAVE_AIR"),
            MaterialEnum::BubbleColumn => f.write_str("BUBBLE_COLUMN"),
            MaterialEnum::SweetBerryBush => f.write_str("SWEET_BERRY_BUSH"),
            MaterialEnum::WeepingVinesPlant => f.write_str("WEEPING_VINES_PLANT"),
            MaterialEnum::TwistingVinesPlant => f.write_str("TWISTING_VINES_PLANT"),
            MaterialEnum::CrimsonWallSign => f.write_str("CRIMSON_WALL_SIGN"),
            MaterialEnum::WarpedWallSign => f.write_str("WARPED_WALL_SIGN"),
            MaterialEnum::PottedCrimsonFungus => f.write_str("POTTED_CRIMSON_FUNGUS"),
            MaterialEnum::PottedWarpedFungus => f.write_str("POTTED_WARPED_FUNGUS"),
            MaterialEnum::PottedCrimsonRoots => f.write_str("POTTED_CRIMSON_ROOTS"),
            MaterialEnum::PottedWarpedRoots => f.write_str("POTTED_WARPED_ROOTS"),
            MaterialEnum::CandleCake => f.write_str("CANDLE_CAKE"),
            MaterialEnum::WhiteCandleCake => f.write_str("WHITE_CANDLE_CAKE"),
            MaterialEnum::OrangeCandleCake => f.write_str("ORANGE_CANDLE_CAKE"),
            MaterialEnum::MagentaCandleCake => f.write_str("MAGENTA_CANDLE_CAKE"),
            MaterialEnum::LightBlueCandleCake => f.write_str("LIGHT_BLUE_CANDLE_CAKE"),
            MaterialEnum::YellowCandleCake => f.write_str("YELLOW_CANDLE_CAKE"),
            MaterialEnum::LimeCandleCake => f.write_str("LIME_CANDLE_CAKE"),
            MaterialEnum::PinkCandleCake => f.write_str("PINK_CANDLE_CAKE"),
            MaterialEnum::GrayCandleCake => f.write_str("GRAY_CANDLE_CAKE"),
            MaterialEnum::LightGrayCandleCake => f.write_str("LIGHT_GRAY_CANDLE_CAKE"),
            MaterialEnum::CyanCandleCake => f.write_str("CYAN_CANDLE_CAKE"),
            MaterialEnum::PurpleCandleCake => f.write_str("PURPLE_CANDLE_CAKE"),
            MaterialEnum::BlueCandleCake => f.write_str("BLUE_CANDLE_CAKE"),
            MaterialEnum::BrownCandleCake => f.write_str("BROWN_CANDLE_CAKE"),
            MaterialEnum::GreenCandleCake => f.write_str("GREEN_CANDLE_CAKE"),
            MaterialEnum::RedCandleCake => f.write_str("RED_CANDLE_CAKE"),
            MaterialEnum::BlackCandleCake => f.write_str("BLACK_CANDLE_CAKE"),
            MaterialEnum::PowderSnow => f.write_str("POWDER_SNOW"),
            MaterialEnum::CaveVines => f.write_str("CAVE_VINES"),
            MaterialEnum::CaveVinesPlant => f.write_str("CAVE_VINES_PLANT"),
            MaterialEnum::BigDripleafStem => f.write_str("BIG_DRIPLEAF_STEM"),
            MaterialEnum::PottedAzaleaBush => f.write_str("POTTED_AZALEA_BUSH"),
            MaterialEnum::PottedFloweringAzaleaBush => f.write_str("POTTED_FLOWERING_AZALEA_BUSH"),
            MaterialEnum::LegacyAir => f.write_str("LEGACY_AIR"),
            MaterialEnum::LegacyStone => f.write_str("LEGACY_STONE"),
            MaterialEnum::LegacyGrass => f.write_str("LEGACY_GRASS"),
            MaterialEnum::LegacyDirt => f.write_str("LEGACY_DIRT"),
            MaterialEnum::LegacyCobblestone => f.write_str("LEGACY_COBBLESTONE"),
            MaterialEnum::LegacyWood => f.write_str("LEGACY_WOOD"),
            MaterialEnum::LegacySapling => f.write_str("LEGACY_SAPLING"),
            MaterialEnum::LegacyBedrock => f.write_str("LEGACY_BEDROCK"),
            MaterialEnum::LegacyWater => f.write_str("LEGACY_WATER"),
            MaterialEnum::LegacyStationaryWater => f.write_str("LEGACY_STATIONARY_WATER"),
            MaterialEnum::LegacyLava => f.write_str("LEGACY_LAVA"),
            MaterialEnum::LegacyStationaryLava => f.write_str("LEGACY_STATIONARY_LAVA"),
            MaterialEnum::LegacySand => f.write_str("LEGACY_SAND"),
            MaterialEnum::LegacyGravel => f.write_str("LEGACY_GRAVEL"),
            MaterialEnum::LegacyGoldOre => f.write_str("LEGACY_GOLD_ORE"),
            MaterialEnum::LegacyIronOre => f.write_str("LEGACY_IRON_ORE"),
            MaterialEnum::LegacyCoalOre => f.write_str("LEGACY_COAL_ORE"),
            MaterialEnum::LegacyLog => f.write_str("LEGACY_LOG"),
            MaterialEnum::LegacyLeaves => f.write_str("LEGACY_LEAVES"),
            MaterialEnum::LegacySponge => f.write_str("LEGACY_SPONGE"),
            MaterialEnum::LegacyGlass => f.write_str("LEGACY_GLASS"),
            MaterialEnum::LegacyLapisOre => f.write_str("LEGACY_LAPIS_ORE"),
            MaterialEnum::LegacyLapisBlock => f.write_str("LEGACY_LAPIS_BLOCK"),
            MaterialEnum::LegacyDispenser => f.write_str("LEGACY_DISPENSER"),
            MaterialEnum::LegacySandstone => f.write_str("LEGACY_SANDSTONE"),
            MaterialEnum::LegacyNoteBlock => f.write_str("LEGACY_NOTE_BLOCK"),
            MaterialEnum::LegacyBedBlock => f.write_str("LEGACY_BED_BLOCK"),
            MaterialEnum::LegacyPoweredRail => f.write_str("LEGACY_POWERED_RAIL"),
            MaterialEnum::LegacyDetectorRail => f.write_str("LEGACY_DETECTOR_RAIL"),
            MaterialEnum::LegacyPistonStickyBase => f.write_str("LEGACY_PISTON_STICKY_BASE"),
            MaterialEnum::LegacyWeb => f.write_str("LEGACY_WEB"),
            MaterialEnum::LegacyLongGrass => f.write_str("LEGACY_LONG_GRASS"),
            MaterialEnum::LegacyDeadBush => f.write_str("LEGACY_DEAD_BUSH"),
            MaterialEnum::LegacyPistonBase => f.write_str("LEGACY_PISTON_BASE"),
            MaterialEnum::LegacyPistonExtension => f.write_str("LEGACY_PISTON_EXTENSION"),
            MaterialEnum::LegacyWool => f.write_str("LEGACY_WOOL"),
            MaterialEnum::LegacyPistonMovingPiece => f.write_str("LEGACY_PISTON_MOVING_PIECE"),
            MaterialEnum::LegacyYellowFlower => f.write_str("LEGACY_YELLOW_FLOWER"),
            MaterialEnum::LegacyRedRose => f.write_str("LEGACY_RED_ROSE"),
            MaterialEnum::LegacyBrownMushroom => f.write_str("LEGACY_BROWN_MUSHROOM"),
            MaterialEnum::LegacyRedMushroom => f.write_str("LEGACY_RED_MUSHROOM"),
            MaterialEnum::LegacyGoldBlock => f.write_str("LEGACY_GOLD_BLOCK"),
            MaterialEnum::LegacyIronBlock => f.write_str("LEGACY_IRON_BLOCK"),
            MaterialEnum::LegacyDoubleStep => f.write_str("LEGACY_DOUBLE_STEP"),
            MaterialEnum::LegacyStep => f.write_str("LEGACY_STEP"),
            MaterialEnum::LegacyBrick => f.write_str("LEGACY_BRICK"),
            MaterialEnum::LegacyTnt => f.write_str("LEGACY_TNT"),
            MaterialEnum::LegacyBookshelf => f.write_str("LEGACY_BOOKSHELF"),
            MaterialEnum::LegacyMossyCobblestone => f.write_str("LEGACY_MOSSY_COBBLESTONE"),
            MaterialEnum::LegacyObsidian => f.write_str("LEGACY_OBSIDIAN"),
            MaterialEnum::LegacyTorch => f.write_str("LEGACY_TORCH"),
            MaterialEnum::LegacyFire => f.write_str("LEGACY_FIRE"),
            MaterialEnum::LegacyMobSpawner => f.write_str("LEGACY_MOB_SPAWNER"),
            MaterialEnum::LegacyWoodStairs => f.write_str("LEGACY_WOOD_STAIRS"),
            MaterialEnum::LegacyChest => f.write_str("LEGACY_CHEST"),
            MaterialEnum::LegacyRedstoneWire => f.write_str("LEGACY_REDSTONE_WIRE"),
            MaterialEnum::LegacyDiamondOre => f.write_str("LEGACY_DIAMOND_ORE"),
            MaterialEnum::LegacyDiamondBlock => f.write_str("LEGACY_DIAMOND_BLOCK"),
            MaterialEnum::LegacyWorkbench => f.write_str("LEGACY_WORKBENCH"),
            MaterialEnum::LegacyCrops => f.write_str("LEGACY_CROPS"),
            MaterialEnum::LegacySoil => f.write_str("LEGACY_SOIL"),
            MaterialEnum::LegacyFurnace => f.write_str("LEGACY_FURNACE"),
            MaterialEnum::LegacyBurningFurnace => f.write_str("LEGACY_BURNING_FURNACE"),
            MaterialEnum::LegacySignPost => f.write_str("LEGACY_SIGN_POST"),
            MaterialEnum::LegacyWoodenDoor => f.write_str("LEGACY_WOODEN_DOOR"),
            MaterialEnum::LegacyLadder => f.write_str("LEGACY_LADDER"),
            MaterialEnum::LegacyRails => f.write_str("LEGACY_RAILS"),
            MaterialEnum::LegacyCobblestoneStairs => f.write_str("LEGACY_COBBLESTONE_STAIRS"),
            MaterialEnum::LegacyWallSign => f.write_str("LEGACY_WALL_SIGN"),
            MaterialEnum::LegacyLever => f.write_str("LEGACY_LEVER"),
            MaterialEnum::LegacyStonePlate => f.write_str("LEGACY_STONE_PLATE"),
            MaterialEnum::LegacyIronDoorBlock => f.write_str("LEGACY_IRON_DOOR_BLOCK"),
            MaterialEnum::LegacyWoodPlate => f.write_str("LEGACY_WOOD_PLATE"),
            MaterialEnum::LegacyRedstoneOre => f.write_str("LEGACY_REDSTONE_ORE"),
            MaterialEnum::LegacyGlowingRedstoneOre => f.write_str("LEGACY_GLOWING_REDSTONE_ORE"),
            MaterialEnum::LegacyRedstoneTorchOff => f.write_str("LEGACY_REDSTONE_TORCH_OFF"),
            MaterialEnum::LegacyRedstoneTorchOn => f.write_str("LEGACY_REDSTONE_TORCH_ON"),
            MaterialEnum::LegacyStoneButton => f.write_str("LEGACY_STONE_BUTTON"),
            MaterialEnum::LegacySnow => f.write_str("LEGACY_SNOW"),
            MaterialEnum::LegacyIce => f.write_str("LEGACY_ICE"),
            MaterialEnum::LegacySnowBlock => f.write_str("LEGACY_SNOW_BLOCK"),
            MaterialEnum::LegacyCactus => f.write_str("LEGACY_CACTUS"),
            MaterialEnum::LegacyClay => f.write_str("LEGACY_CLAY"),
            MaterialEnum::LegacySugarCaneBlock => f.write_str("LEGACY_SUGAR_CANE_BLOCK"),
            MaterialEnum::LegacyJukebox => f.write_str("LEGACY_JUKEBOX"),
            MaterialEnum::LegacyFence => f.write_str("LEGACY_FENCE"),
            MaterialEnum::LegacyPumpkin => f.write_str("LEGACY_PUMPKIN"),
            MaterialEnum::LegacyNetherrack => f.write_str("LEGACY_NETHERRACK"),
            MaterialEnum::LegacySoulSand => f.write_str("LEGACY_SOUL_SAND"),
            MaterialEnum::LegacyGlowstone => f.write_str("LEGACY_GLOWSTONE"),
            MaterialEnum::LegacyPortal => f.write_str("LEGACY_PORTAL"),
            MaterialEnum::LegacyJackOLantern => f.write_str("LEGACY_JACK_O_LANTERN"),
            MaterialEnum::LegacyCakeBlock => f.write_str("LEGACY_CAKE_BLOCK"),
            MaterialEnum::LegacyDiodeBlockOff => f.write_str("LEGACY_DIODE_BLOCK_OFF"),
            MaterialEnum::LegacyDiodeBlockOn => f.write_str("LEGACY_DIODE_BLOCK_ON"),
            MaterialEnum::LegacyStainedGlass => f.write_str("LEGACY_STAINED_GLASS"),
            MaterialEnum::LegacyTrapDoor => f.write_str("LEGACY_TRAP_DOOR"),
            MaterialEnum::LegacyMonsterEggs => f.write_str("LEGACY_MONSTER_EGGS"),
            MaterialEnum::LegacySmoothBrick => f.write_str("LEGACY_SMOOTH_BRICK"),
            MaterialEnum::LegacyHugeMushroom1 => f.write_str("LEGACY_HUGE_MUSHROOM_1"),
            MaterialEnum::LegacyHugeMushroom2 => f.write_str("LEGACY_HUGE_MUSHROOM_2"),
            MaterialEnum::LegacyIronFence => f.write_str("LEGACY_IRON_FENCE"),
            MaterialEnum::LegacyThinGlass => f.write_str("LEGACY_THIN_GLASS"),
            MaterialEnum::LegacyMelonBlock => f.write_str("LEGACY_MELON_BLOCK"),
            MaterialEnum::LegacyPumpkinStem => f.write_str("LEGACY_PUMPKIN_STEM"),
            MaterialEnum::LegacyMelonStem => f.write_str("LEGACY_MELON_STEM"),
            MaterialEnum::LegacyVine => f.write_str("LEGACY_VINE"),
            MaterialEnum::LegacyFenceGate => f.write_str("LEGACY_FENCE_GATE"),
            MaterialEnum::LegacyBrickStairs => f.write_str("LEGACY_BRICK_STAIRS"),
            MaterialEnum::LegacySmoothStairs => f.write_str("LEGACY_SMOOTH_STAIRS"),
            MaterialEnum::LegacyMycel => f.write_str("LEGACY_MYCEL"),
            MaterialEnum::LegacyWaterLily => f.write_str("LEGACY_WATER_LILY"),
            MaterialEnum::LegacyNetherBrick => f.write_str("LEGACY_NETHER_BRICK"),
            MaterialEnum::LegacyNetherFence => f.write_str("LEGACY_NETHER_FENCE"),
            MaterialEnum::LegacyNetherBrickStairs => f.write_str("LEGACY_NETHER_BRICK_STAIRS"),
            MaterialEnum::LegacyNetherWarts => f.write_str("LEGACY_NETHER_WARTS"),
            MaterialEnum::LegacyEnchantmentTable => f.write_str("LEGACY_ENCHANTMENT_TABLE"),
            MaterialEnum::LegacyBrewingStand => f.write_str("LEGACY_BREWING_STAND"),
            MaterialEnum::LegacyCauldron => f.write_str("LEGACY_CAULDRON"),
            MaterialEnum::LegacyEnderPortal => f.write_str("LEGACY_ENDER_PORTAL"),
            MaterialEnum::LegacyEnderPortalFrame => f.write_str("LEGACY_ENDER_PORTAL_FRAME"),
            MaterialEnum::LegacyEnderStone => f.write_str("LEGACY_ENDER_STONE"),
            MaterialEnum::LegacyDragonEgg => f.write_str("LEGACY_DRAGON_EGG"),
            MaterialEnum::LegacyRedstoneLampOff => f.write_str("LEGACY_REDSTONE_LAMP_OFF"),
            MaterialEnum::LegacyRedstoneLampOn => f.write_str("LEGACY_REDSTONE_LAMP_ON"),
            MaterialEnum::LegacyWoodDoubleStep => f.write_str("LEGACY_WOOD_DOUBLE_STEP"),
            MaterialEnum::LegacyWoodStep => f.write_str("LEGACY_WOOD_STEP"),
            MaterialEnum::LegacyCocoa => f.write_str("LEGACY_COCOA"),
            MaterialEnum::LegacySandstoneStairs => f.write_str("LEGACY_SANDSTONE_STAIRS"),
            MaterialEnum::LegacyEmeraldOre => f.write_str("LEGACY_EMERALD_ORE"),
            MaterialEnum::LegacyEnderChest => f.write_str("LEGACY_ENDER_CHEST"),
            MaterialEnum::LegacyTripwireHook => f.write_str("LEGACY_TRIPWIRE_HOOK"),
            MaterialEnum::LegacyTripwire => f.write_str("LEGACY_TRIPWIRE"),
            MaterialEnum::LegacyEmeraldBlock => f.write_str("LEGACY_EMERALD_BLOCK"),
            MaterialEnum::LegacySpruceWoodStairs => f.write_str("LEGACY_SPRUCE_WOOD_STAIRS"),
            MaterialEnum::LegacyBirchWoodStairs => f.write_str("LEGACY_BIRCH_WOOD_STAIRS"),
            MaterialEnum::LegacyJungleWoodStairs => f.write_str("LEGACY_JUNGLE_WOOD_STAIRS"),
            MaterialEnum::LegacyCommand => f.write_str("LEGACY_COMMAND"),
            MaterialEnum::LegacyBeacon => f.write_str("LEGACY_BEACON"),
            MaterialEnum::LegacyCobbleWall => f.write_str("LEGACY_COBBLE_WALL"),
            MaterialEnum::LegacyFlowerPot => f.write_str("LEGACY_FLOWER_POT"),
            MaterialEnum::LegacyCarrot => f.write_str("LEGACY_CARROT"),
            MaterialEnum::LegacyPotato => f.write_str("LEGACY_POTATO"),
            MaterialEnum::LegacyWoodButton => f.write_str("LEGACY_WOOD_BUTTON"),
            MaterialEnum::LegacySkull => f.write_str("LEGACY_SKULL"),
            MaterialEnum::LegacyAnvil => f.write_str("LEGACY_ANVIL"),
            MaterialEnum::LegacyTrappedChest => f.write_str("LEGACY_TRAPPED_CHEST"),
            MaterialEnum::LegacyGoldPlate => f.write_str("LEGACY_GOLD_PLATE"),
            MaterialEnum::LegacyIronPlate => f.write_str("LEGACY_IRON_PLATE"),
            MaterialEnum::LegacyRedstoneComparatorOff => {
                f.write_str("LEGACY_REDSTONE_COMPARATOR_OFF")
            }
            MaterialEnum::LegacyRedstoneComparatorOn => {
                f.write_str("LEGACY_REDSTONE_COMPARATOR_ON")
            }
            MaterialEnum::LegacyDaylightDetector => f.write_str("LEGACY_DAYLIGHT_DETECTOR"),
            MaterialEnum::LegacyRedstoneBlock => f.write_str("LEGACY_REDSTONE_BLOCK"),
            MaterialEnum::LegacyQuartzOre => f.write_str("LEGACY_QUARTZ_ORE"),
            MaterialEnum::LegacyHopper => f.write_str("LEGACY_HOPPER"),
            MaterialEnum::LegacyQuartzBlock => f.write_str("LEGACY_QUARTZ_BLOCK"),
            MaterialEnum::LegacyQuartzStairs => f.write_str("LEGACY_QUARTZ_STAIRS"),
            MaterialEnum::LegacyActivatorRail => f.write_str("LEGACY_ACTIVATOR_RAIL"),
            MaterialEnum::LegacyDropper => f.write_str("LEGACY_DROPPER"),
            MaterialEnum::LegacyStainedClay => f.write_str("LEGACY_STAINED_CLAY"),
            MaterialEnum::LegacyStainedGlassPane => f.write_str("LEGACY_STAINED_GLASS_PANE"),
            MaterialEnum::LegacyLeaves2 => f.write_str("LEGACY_LEAVES_2"),
            MaterialEnum::LegacyLog2 => f.write_str("LEGACY_LOG_2"),
            MaterialEnum::LegacyAcaciaStairs => f.write_str("LEGACY_ACACIA_STAIRS"),
            MaterialEnum::LegacyDarkOakStairs => f.write_str("LEGACY_DARK_OAK_STAIRS"),
            MaterialEnum::LegacySlimeBlock => f.write_str("LEGACY_SLIME_BLOCK"),
            MaterialEnum::LegacyBarrier => f.write_str("LEGACY_BARRIER"),
            MaterialEnum::LegacyIronTrapdoor => f.write_str("LEGACY_IRON_TRAPDOOR"),
            MaterialEnum::LegacyPrismarine => f.write_str("LEGACY_PRISMARINE"),
            MaterialEnum::LegacySeaLantern => f.write_str("LEGACY_SEA_LANTERN"),
            MaterialEnum::LegacyHayBlock => f.write_str("LEGACY_HAY_BLOCK"),
            MaterialEnum::LegacyCarpet => f.write_str("LEGACY_CARPET"),
            MaterialEnum::LegacyHardClay => f.write_str("LEGACY_HARD_CLAY"),
            MaterialEnum::LegacyCoalBlock => f.write_str("LEGACY_COAL_BLOCK"),
            MaterialEnum::LegacyPackedIce => f.write_str("LEGACY_PACKED_ICE"),
            MaterialEnum::LegacyDoublePlant => f.write_str("LEGACY_DOUBLE_PLANT"),
            MaterialEnum::LegacyStandingBanner => f.write_str("LEGACY_STANDING_BANNER"),
            MaterialEnum::LegacyWallBanner => f.write_str("LEGACY_WALL_BANNER"),
            MaterialEnum::LegacyDaylightDetectorInverted => {
                f.write_str("LEGACY_DAYLIGHT_DETECTOR_INVERTED")
            }
            MaterialEnum::LegacyRedSandstone => f.write_str("LEGACY_RED_SANDSTONE"),
            MaterialEnum::LegacyRedSandstoneStairs => f.write_str("LEGACY_RED_SANDSTONE_STAIRS"),
            MaterialEnum::LegacyDoubleStoneSlab2 => f.write_str("LEGACY_DOUBLE_STONE_SLAB2"),
            MaterialEnum::LegacyStoneSlab2 => f.write_str("LEGACY_STONE_SLAB2"),
            MaterialEnum::LegacySpruceFenceGate => f.write_str("LEGACY_SPRUCE_FENCE_GATE"),
            MaterialEnum::LegacyBirchFenceGate => f.write_str("LEGACY_BIRCH_FENCE_GATE"),
            MaterialEnum::LegacyJungleFenceGate => f.write_str("LEGACY_JUNGLE_FENCE_GATE"),
            MaterialEnum::LegacyDarkOakFenceGate => f.write_str("LEGACY_DARK_OAK_FENCE_GATE"),
            MaterialEnum::LegacyAcaciaFenceGate => f.write_str("LEGACY_ACACIA_FENCE_GATE"),
            MaterialEnum::LegacySpruceFence => f.write_str("LEGACY_SPRUCE_FENCE"),
            MaterialEnum::LegacyBirchFence => f.write_str("LEGACY_BIRCH_FENCE"),
            MaterialEnum::LegacyJungleFence => f.write_str("LEGACY_JUNGLE_FENCE"),
            MaterialEnum::LegacyDarkOakFence => f.write_str("LEGACY_DARK_OAK_FENCE"),
            MaterialEnum::LegacyAcaciaFence => f.write_str("LEGACY_ACACIA_FENCE"),
            MaterialEnum::LegacySpruceDoor => f.write_str("LEGACY_SPRUCE_DOOR"),
            MaterialEnum::LegacyBirchDoor => f.write_str("LEGACY_BIRCH_DOOR"),
            MaterialEnum::LegacyJungleDoor => f.write_str("LEGACY_JUNGLE_DOOR"),
            MaterialEnum::LegacyAcaciaDoor => f.write_str("LEGACY_ACACIA_DOOR"),
            MaterialEnum::LegacyDarkOakDoor => f.write_str("LEGACY_DARK_OAK_DOOR"),
            MaterialEnum::LegacyEndRod => f.write_str("LEGACY_END_ROD"),
            MaterialEnum::LegacyChorusPlant => f.write_str("LEGACY_CHORUS_PLANT"),
            MaterialEnum::LegacyChorusFlower => f.write_str("LEGACY_CHORUS_FLOWER"),
            MaterialEnum::LegacyPurpurBlock => f.write_str("LEGACY_PURPUR_BLOCK"),
            MaterialEnum::LegacyPurpurPillar => f.write_str("LEGACY_PURPUR_PILLAR"),
            MaterialEnum::LegacyPurpurStairs => f.write_str("LEGACY_PURPUR_STAIRS"),
            MaterialEnum::LegacyPurpurDoubleSlab => f.write_str("LEGACY_PURPUR_DOUBLE_SLAB"),
            MaterialEnum::LegacyPurpurSlab => f.write_str("LEGACY_PURPUR_SLAB"),
            MaterialEnum::LegacyEndBricks => f.write_str("LEGACY_END_BRICKS"),
            MaterialEnum::LegacyBeetrootBlock => f.write_str("LEGACY_BEETROOT_BLOCK"),
            MaterialEnum::LegacyGrassPath => f.write_str("LEGACY_GRASS_PATH"),
            MaterialEnum::LegacyEndGateway => f.write_str("LEGACY_END_GATEWAY"),
            MaterialEnum::LegacyCommandRepeating => f.write_str("LEGACY_COMMAND_REPEATING"),
            MaterialEnum::LegacyCommandChain => f.write_str("LEGACY_COMMAND_CHAIN"),
            MaterialEnum::LegacyFrostedIce => f.write_str("LEGACY_FROSTED_ICE"),
            MaterialEnum::LegacyMagma => f.write_str("LEGACY_MAGMA"),
            MaterialEnum::LegacyNetherWartBlock => f.write_str("LEGACY_NETHER_WART_BLOCK"),
            MaterialEnum::LegacyRedNetherBrick => f.write_str("LEGACY_RED_NETHER_BRICK"),
            MaterialEnum::LegacyBoneBlock => f.write_str("LEGACY_BONE_BLOCK"),
            MaterialEnum::LegacyStructureVoid => f.write_str("LEGACY_STRUCTURE_VOID"),
            MaterialEnum::LegacyObserver => f.write_str("LEGACY_OBSERVER"),
            MaterialEnum::LegacyWhiteShulkerBox => f.write_str("LEGACY_WHITE_SHULKER_BOX"),
            MaterialEnum::LegacyOrangeShulkerBox => f.write_str("LEGACY_ORANGE_SHULKER_BOX"),
            MaterialEnum::LegacyMagentaShulkerBox => f.write_str("LEGACY_MAGENTA_SHULKER_BOX"),
            MaterialEnum::LegacyLightBlueShulkerBox => f.write_str("LEGACY_LIGHT_BLUE_SHULKER_BOX"),
            MaterialEnum::LegacyYellowShulkerBox => f.write_str("LEGACY_YELLOW_SHULKER_BOX"),
            MaterialEnum::LegacyLimeShulkerBox => f.write_str("LEGACY_LIME_SHULKER_BOX"),
            MaterialEnum::LegacyPinkShulkerBox => f.write_str("LEGACY_PINK_SHULKER_BOX"),
            MaterialEnum::LegacyGrayShulkerBox => f.write_str("LEGACY_GRAY_SHULKER_BOX"),
            MaterialEnum::LegacySilverShulkerBox => f.write_str("LEGACY_SILVER_SHULKER_BOX"),
            MaterialEnum::LegacyCyanShulkerBox => f.write_str("LEGACY_CYAN_SHULKER_BOX"),
            MaterialEnum::LegacyPurpleShulkerBox => f.write_str("LEGACY_PURPLE_SHULKER_BOX"),
            MaterialEnum::LegacyBlueShulkerBox => f.write_str("LEGACY_BLUE_SHULKER_BOX"),
            MaterialEnum::LegacyBrownShulkerBox => f.write_str("LEGACY_BROWN_SHULKER_BOX"),
            MaterialEnum::LegacyGreenShulkerBox => f.write_str("LEGACY_GREEN_SHULKER_BOX"),
            MaterialEnum::LegacyRedShulkerBox => f.write_str("LEGACY_RED_SHULKER_BOX"),
            MaterialEnum::LegacyBlackShulkerBox => f.write_str("LEGACY_BLACK_SHULKER_BOX"),
            MaterialEnum::LegacyWhiteGlazedTerracotta => {
                f.write_str("LEGACY_WHITE_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyOrangeGlazedTerracotta => {
                f.write_str("LEGACY_ORANGE_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyMagentaGlazedTerracotta => {
                f.write_str("LEGACY_MAGENTA_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyLightBlueGlazedTerracotta => {
                f.write_str("LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyYellowGlazedTerracotta => {
                f.write_str("LEGACY_YELLOW_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyLimeGlazedTerracotta => {
                f.write_str("LEGACY_LIME_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyPinkGlazedTerracotta => {
                f.write_str("LEGACY_PINK_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyGrayGlazedTerracotta => {
                f.write_str("LEGACY_GRAY_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacySilverGlazedTerracotta => {
                f.write_str("LEGACY_SILVER_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyCyanGlazedTerracotta => {
                f.write_str("LEGACY_CYAN_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyPurpleGlazedTerracotta => {
                f.write_str("LEGACY_PURPLE_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyBlueGlazedTerracotta => {
                f.write_str("LEGACY_BLUE_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyBrownGlazedTerracotta => {
                f.write_str("LEGACY_BROWN_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyGreenGlazedTerracotta => {
                f.write_str("LEGACY_GREEN_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyRedGlazedTerracotta => f.write_str("LEGACY_RED_GLAZED_TERRACOTTA"),
            MaterialEnum::LegacyBlackGlazedTerracotta => {
                f.write_str("LEGACY_BLACK_GLAZED_TERRACOTTA")
            }
            MaterialEnum::LegacyConcrete => f.write_str("LEGACY_CONCRETE"),
            MaterialEnum::LegacyConcretePowder => f.write_str("LEGACY_CONCRETE_POWDER"),
            MaterialEnum::LegacyStructureBlock => f.write_str("LEGACY_STRUCTURE_BLOCK"),
            MaterialEnum::LegacyIronSpade => f.write_str("LEGACY_IRON_SPADE"),
            MaterialEnum::LegacyIronPickaxe => f.write_str("LEGACY_IRON_PICKAXE"),
            MaterialEnum::LegacyIronAxe => f.write_str("LEGACY_IRON_AXE"),
            MaterialEnum::LegacyFlintAndSteel => f.write_str("LEGACY_FLINT_AND_STEEL"),
            MaterialEnum::LegacyApple => f.write_str("LEGACY_APPLE"),
            MaterialEnum::LegacyBow => f.write_str("LEGACY_BOW"),
            MaterialEnum::LegacyArrow => f.write_str("LEGACY_ARROW"),
            MaterialEnum::LegacyCoal => f.write_str("LEGACY_COAL"),
            MaterialEnum::LegacyDiamond => f.write_str("LEGACY_DIAMOND"),
            MaterialEnum::LegacyIronIngot => f.write_str("LEGACY_IRON_INGOT"),
            MaterialEnum::LegacyGoldIngot => f.write_str("LEGACY_GOLD_INGOT"),
            MaterialEnum::LegacyIronSword => f.write_str("LEGACY_IRON_SWORD"),
            MaterialEnum::LegacyWoodSword => f.write_str("LEGACY_WOOD_SWORD"),
            MaterialEnum::LegacyWoodSpade => f.write_str("LEGACY_WOOD_SPADE"),
            MaterialEnum::LegacyWoodPickaxe => f.write_str("LEGACY_WOOD_PICKAXE"),
            MaterialEnum::LegacyWoodAxe => f.write_str("LEGACY_WOOD_AXE"),
            MaterialEnum::LegacyStoneSword => f.write_str("LEGACY_STONE_SWORD"),
            MaterialEnum::LegacyStoneSpade => f.write_str("LEGACY_STONE_SPADE"),
            MaterialEnum::LegacyStonePickaxe => f.write_str("LEGACY_STONE_PICKAXE"),
            MaterialEnum::LegacyStoneAxe => f.write_str("LEGACY_STONE_AXE"),
            MaterialEnum::LegacyDiamondSword => f.write_str("LEGACY_DIAMOND_SWORD"),
            MaterialEnum::LegacyDiamondSpade => f.write_str("LEGACY_DIAMOND_SPADE"),
            MaterialEnum::LegacyDiamondPickaxe => f.write_str("LEGACY_DIAMOND_PICKAXE"),
            MaterialEnum::LegacyDiamondAxe => f.write_str("LEGACY_DIAMOND_AXE"),
            MaterialEnum::LegacyStick => f.write_str("LEGACY_STICK"),
            MaterialEnum::LegacyBowl => f.write_str("LEGACY_BOWL"),
            MaterialEnum::LegacyMushroomSoup => f.write_str("LEGACY_MUSHROOM_SOUP"),
            MaterialEnum::LegacyGoldSword => f.write_str("LEGACY_GOLD_SWORD"),
            MaterialEnum::LegacyGoldSpade => f.write_str("LEGACY_GOLD_SPADE"),
            MaterialEnum::LegacyGoldPickaxe => f.write_str("LEGACY_GOLD_PICKAXE"),
            MaterialEnum::LegacyGoldAxe => f.write_str("LEGACY_GOLD_AXE"),
            MaterialEnum::LegacyString => f.write_str("LEGACY_STRING"),
            MaterialEnum::LegacyFeather => f.write_str("LEGACY_FEATHER"),
            MaterialEnum::LegacySulphur => f.write_str("LEGACY_SULPHUR"),
            MaterialEnum::LegacyWoodHoe => f.write_str("LEGACY_WOOD_HOE"),
            MaterialEnum::LegacyStoneHoe => f.write_str("LEGACY_STONE_HOE"),
            MaterialEnum::LegacyIronHoe => f.write_str("LEGACY_IRON_HOE"),
            MaterialEnum::LegacyDiamondHoe => f.write_str("LEGACY_DIAMOND_HOE"),
            MaterialEnum::LegacyGoldHoe => f.write_str("LEGACY_GOLD_HOE"),
            MaterialEnum::LegacySeeds => f.write_str("LEGACY_SEEDS"),
            MaterialEnum::LegacyWheat => f.write_str("LEGACY_WHEAT"),
            MaterialEnum::LegacyBread => f.write_str("LEGACY_BREAD"),
            MaterialEnum::LegacyLeatherHelmet => f.write_str("LEGACY_LEATHER_HELMET"),
            MaterialEnum::LegacyLeatherChestplate => f.write_str("LEGACY_LEATHER_CHESTPLATE"),
            MaterialEnum::LegacyLeatherLeggings => f.write_str("LEGACY_LEATHER_LEGGINGS"),
            MaterialEnum::LegacyLeatherBoots => f.write_str("LEGACY_LEATHER_BOOTS"),
            MaterialEnum::LegacyChainmailHelmet => f.write_str("LEGACY_CHAINMAIL_HELMET"),
            MaterialEnum::LegacyChainmailChestplate => f.write_str("LEGACY_CHAINMAIL_CHESTPLATE"),
            MaterialEnum::LegacyChainmailLeggings => f.write_str("LEGACY_CHAINMAIL_LEGGINGS"),
            MaterialEnum::LegacyChainmailBoots => f.write_str("LEGACY_CHAINMAIL_BOOTS"),
            MaterialEnum::LegacyIronHelmet => f.write_str("LEGACY_IRON_HELMET"),
            MaterialEnum::LegacyIronChestplate => f.write_str("LEGACY_IRON_CHESTPLATE"),
            MaterialEnum::LegacyIronLeggings => f.write_str("LEGACY_IRON_LEGGINGS"),
            MaterialEnum::LegacyIronBoots => f.write_str("LEGACY_IRON_BOOTS"),
            MaterialEnum::LegacyDiamondHelmet => f.write_str("LEGACY_DIAMOND_HELMET"),
            MaterialEnum::LegacyDiamondChestplate => f.write_str("LEGACY_DIAMOND_CHESTPLATE"),
            MaterialEnum::LegacyDiamondLeggings => f.write_str("LEGACY_DIAMOND_LEGGINGS"),
            MaterialEnum::LegacyDiamondBoots => f.write_str("LEGACY_DIAMOND_BOOTS"),
            MaterialEnum::LegacyGoldHelmet => f.write_str("LEGACY_GOLD_HELMET"),
            MaterialEnum::LegacyGoldChestplate => f.write_str("LEGACY_GOLD_CHESTPLATE"),
            MaterialEnum::LegacyGoldLeggings => f.write_str("LEGACY_GOLD_LEGGINGS"),
            MaterialEnum::LegacyGoldBoots => f.write_str("LEGACY_GOLD_BOOTS"),
            MaterialEnum::LegacyFlint => f.write_str("LEGACY_FLINT"),
            MaterialEnum::LegacyPork => f.write_str("LEGACY_PORK"),
            MaterialEnum::LegacyGrilledPork => f.write_str("LEGACY_GRILLED_PORK"),
            MaterialEnum::LegacyPainting => f.write_str("LEGACY_PAINTING"),
            MaterialEnum::LegacyGoldenApple => f.write_str("LEGACY_GOLDEN_APPLE"),
            MaterialEnum::LegacySign => f.write_str("LEGACY_SIGN"),
            MaterialEnum::LegacyWoodDoor => f.write_str("LEGACY_WOOD_DOOR"),
            MaterialEnum::LegacyBucket => f.write_str("LEGACY_BUCKET"),
            MaterialEnum::LegacyWaterBucket => f.write_str("LEGACY_WATER_BUCKET"),
            MaterialEnum::LegacyLavaBucket => f.write_str("LEGACY_LAVA_BUCKET"),
            MaterialEnum::LegacyMinecart => f.write_str("LEGACY_MINECART"),
            MaterialEnum::LegacySaddle => f.write_str("LEGACY_SADDLE"),
            MaterialEnum::LegacyIronDoor => f.write_str("LEGACY_IRON_DOOR"),
            MaterialEnum::LegacyRedstone => f.write_str("LEGACY_REDSTONE"),
            MaterialEnum::LegacySnowBall => f.write_str("LEGACY_SNOW_BALL"),
            MaterialEnum::LegacyBoat => f.write_str("LEGACY_BOAT"),
            MaterialEnum::LegacyLeather => f.write_str("LEGACY_LEATHER"),
            MaterialEnum::LegacyMilkBucket => f.write_str("LEGACY_MILK_BUCKET"),
            MaterialEnum::LegacyClayBrick => f.write_str("LEGACY_CLAY_BRICK"),
            MaterialEnum::LegacyClayBall => f.write_str("LEGACY_CLAY_BALL"),
            MaterialEnum::LegacySugarCane => f.write_str("LEGACY_SUGAR_CANE"),
            MaterialEnum::LegacyPaper => f.write_str("LEGACY_PAPER"),
            MaterialEnum::LegacyBook => f.write_str("LEGACY_BOOK"),
            MaterialEnum::LegacySlimeBall => f.write_str("LEGACY_SLIME_BALL"),
            MaterialEnum::LegacyStorageMinecart => f.write_str("LEGACY_STORAGE_MINECART"),
            MaterialEnum::LegacyPoweredMinecart => f.write_str("LEGACY_POWERED_MINECART"),
            MaterialEnum::LegacyEgg => f.write_str("LEGACY_EGG"),
            MaterialEnum::LegacyCompass => f.write_str("LEGACY_COMPASS"),
            MaterialEnum::LegacyFishingRod => f.write_str("LEGACY_FISHING_ROD"),
            MaterialEnum::LegacyWatch => f.write_str("LEGACY_WATCH"),
            MaterialEnum::LegacyGlowstoneDust => f.write_str("LEGACY_GLOWSTONE_DUST"),
            MaterialEnum::LegacyRawFish => f.write_str("LEGACY_RAW_FISH"),
            MaterialEnum::LegacyCookedFish => f.write_str("LEGACY_COOKED_FISH"),
            MaterialEnum::LegacyInkSack => f.write_str("LEGACY_INK_SACK"),
            MaterialEnum::LegacyBone => f.write_str("LEGACY_BONE"),
            MaterialEnum::LegacySugar => f.write_str("LEGACY_SUGAR"),
            MaterialEnum::LegacyCake => f.write_str("LEGACY_CAKE"),
            MaterialEnum::LegacyBed => f.write_str("LEGACY_BED"),
            MaterialEnum::LegacyDiode => f.write_str("LEGACY_DIODE"),
            MaterialEnum::LegacyCookie => f.write_str("LEGACY_COOKIE"),
            MaterialEnum::LegacyMap => f.write_str("LEGACY_MAP"),
            MaterialEnum::LegacyShears => f.write_str("LEGACY_SHEARS"),
            MaterialEnum::LegacyMelon => f.write_str("LEGACY_MELON"),
            MaterialEnum::LegacyPumpkinSeeds => f.write_str("LEGACY_PUMPKIN_SEEDS"),
            MaterialEnum::LegacyMelonSeeds => f.write_str("LEGACY_MELON_SEEDS"),
            MaterialEnum::LegacyRawBeef => f.write_str("LEGACY_RAW_BEEF"),
            MaterialEnum::LegacyCookedBeef => f.write_str("LEGACY_COOKED_BEEF"),
            MaterialEnum::LegacyRawChicken => f.write_str("LEGACY_RAW_CHICKEN"),
            MaterialEnum::LegacyCookedChicken => f.write_str("LEGACY_COOKED_CHICKEN"),
            MaterialEnum::LegacyRottenFlesh => f.write_str("LEGACY_ROTTEN_FLESH"),
            MaterialEnum::LegacyEnderPearl => f.write_str("LEGACY_ENDER_PEARL"),
            MaterialEnum::LegacyBlazeRod => f.write_str("LEGACY_BLAZE_ROD"),
            MaterialEnum::LegacyGhastTear => f.write_str("LEGACY_GHAST_TEAR"),
            MaterialEnum::LegacyGoldNugget => f.write_str("LEGACY_GOLD_NUGGET"),
            MaterialEnum::LegacyNetherStalk => f.write_str("LEGACY_NETHER_STALK"),
            MaterialEnum::LegacyPotion => f.write_str("LEGACY_POTION"),
            MaterialEnum::LegacyGlassBottle => f.write_str("LEGACY_GLASS_BOTTLE"),
            MaterialEnum::LegacySpiderEye => f.write_str("LEGACY_SPIDER_EYE"),
            MaterialEnum::LegacyFermentedSpiderEye => f.write_str("LEGACY_FERMENTED_SPIDER_EYE"),
            MaterialEnum::LegacyBlazePowder => f.write_str("LEGACY_BLAZE_POWDER"),
            MaterialEnum::LegacyMagmaCream => f.write_str("LEGACY_MAGMA_CREAM"),
            MaterialEnum::LegacyBrewingStandItem => f.write_str("LEGACY_BREWING_STAND_ITEM"),
            MaterialEnum::LegacyCauldronItem => f.write_str("LEGACY_CAULDRON_ITEM"),
            MaterialEnum::LegacyEyeOfEnder => f.write_str("LEGACY_EYE_OF_ENDER"),
            MaterialEnum::LegacySpeckledMelon => f.write_str("LEGACY_SPECKLED_MELON"),
            MaterialEnum::LegacyMonsterEgg => f.write_str("LEGACY_MONSTER_EGG"),
            MaterialEnum::LegacyExpBottle => f.write_str("LEGACY_EXP_BOTTLE"),
            MaterialEnum::LegacyFireball => f.write_str("LEGACY_FIREBALL"),
            MaterialEnum::LegacyBookAndQuill => f.write_str("LEGACY_BOOK_AND_QUILL"),
            MaterialEnum::LegacyWrittenBook => f.write_str("LEGACY_WRITTEN_BOOK"),
            MaterialEnum::LegacyEmerald => f.write_str("LEGACY_EMERALD"),
            MaterialEnum::LegacyItemFrame => f.write_str("LEGACY_ITEM_FRAME"),
            MaterialEnum::LegacyFlowerPotItem => f.write_str("LEGACY_FLOWER_POT_ITEM"),
            MaterialEnum::LegacyCarrotItem => f.write_str("LEGACY_CARROT_ITEM"),
            MaterialEnum::LegacyPotatoItem => f.write_str("LEGACY_POTATO_ITEM"),
            MaterialEnum::LegacyBakedPotato => f.write_str("LEGACY_BAKED_POTATO"),
            MaterialEnum::LegacyPoisonousPotato => f.write_str("LEGACY_POISONOUS_POTATO"),
            MaterialEnum::LegacyEmptyMap => f.write_str("LEGACY_EMPTY_MAP"),
            MaterialEnum::LegacyGoldenCarrot => f.write_str("LEGACY_GOLDEN_CARROT"),
            MaterialEnum::LegacySkullItem => f.write_str("LEGACY_SKULL_ITEM"),
            MaterialEnum::LegacyCarrotStick => f.write_str("LEGACY_CARROT_STICK"),
            MaterialEnum::LegacyNetherStar => f.write_str("LEGACY_NETHER_STAR"),
            MaterialEnum::LegacyPumpkinPie => f.write_str("LEGACY_PUMPKIN_PIE"),
            MaterialEnum::LegacyFirework => f.write_str("LEGACY_FIREWORK"),
            MaterialEnum::LegacyFireworkCharge => f.write_str("LEGACY_FIREWORK_CHARGE"),
            MaterialEnum::LegacyEnchantedBook => f.write_str("LEGACY_ENCHANTED_BOOK"),
            MaterialEnum::LegacyRedstoneComparator => f.write_str("LEGACY_REDSTONE_COMPARATOR"),
            MaterialEnum::LegacyNetherBrickItem => f.write_str("LEGACY_NETHER_BRICK_ITEM"),
            MaterialEnum::LegacyQuartz => f.write_str("LEGACY_QUARTZ"),
            MaterialEnum::LegacyExplosiveMinecart => f.write_str("LEGACY_EXPLOSIVE_MINECART"),
            MaterialEnum::LegacyHopperMinecart => f.write_str("LEGACY_HOPPER_MINECART"),
            MaterialEnum::LegacyPrismarineShard => f.write_str("LEGACY_PRISMARINE_SHARD"),
            MaterialEnum::LegacyPrismarineCrystals => f.write_str("LEGACY_PRISMARINE_CRYSTALS"),
            MaterialEnum::LegacyRabbit => f.write_str("LEGACY_RABBIT"),
            MaterialEnum::LegacyCookedRabbit => f.write_str("LEGACY_COOKED_RABBIT"),
            MaterialEnum::LegacyRabbitStew => f.write_str("LEGACY_RABBIT_STEW"),
            MaterialEnum::LegacyRabbitFoot => f.write_str("LEGACY_RABBIT_FOOT"),
            MaterialEnum::LegacyRabbitHide => f.write_str("LEGACY_RABBIT_HIDE"),
            MaterialEnum::LegacyArmorStand => f.write_str("LEGACY_ARMOR_STAND"),
            MaterialEnum::LegacyIronBarding => f.write_str("LEGACY_IRON_BARDING"),
            MaterialEnum::LegacyGoldBarding => f.write_str("LEGACY_GOLD_BARDING"),
            MaterialEnum::LegacyDiamondBarding => f.write_str("LEGACY_DIAMOND_BARDING"),
            MaterialEnum::LegacyLeash => f.write_str("LEGACY_LEASH"),
            MaterialEnum::LegacyNameTag => f.write_str("LEGACY_NAME_TAG"),
            MaterialEnum::LegacyCommandMinecart => f.write_str("LEGACY_COMMAND_MINECART"),
            MaterialEnum::LegacyMutton => f.write_str("LEGACY_MUTTON"),
            MaterialEnum::LegacyCookedMutton => f.write_str("LEGACY_COOKED_MUTTON"),
            MaterialEnum::LegacyBanner => f.write_str("LEGACY_BANNER"),
            MaterialEnum::LegacyEndCrystal => f.write_str("LEGACY_END_CRYSTAL"),
            MaterialEnum::LegacySpruceDoorItem => f.write_str("LEGACY_SPRUCE_DOOR_ITEM"),
            MaterialEnum::LegacyBirchDoorItem => f.write_str("LEGACY_BIRCH_DOOR_ITEM"),
            MaterialEnum::LegacyJungleDoorItem => f.write_str("LEGACY_JUNGLE_DOOR_ITEM"),
            MaterialEnum::LegacyAcaciaDoorItem => f.write_str("LEGACY_ACACIA_DOOR_ITEM"),
            MaterialEnum::LegacyDarkOakDoorItem => f.write_str("LEGACY_DARK_OAK_DOOR_ITEM"),
            MaterialEnum::LegacyChorusFruit => f.write_str("LEGACY_CHORUS_FRUIT"),
            MaterialEnum::LegacyChorusFruitPopped => f.write_str("LEGACY_CHORUS_FRUIT_POPPED"),
            MaterialEnum::LegacyBeetroot => f.write_str("LEGACY_BEETROOT"),
            MaterialEnum::LegacyBeetrootSeeds => f.write_str("LEGACY_BEETROOT_SEEDS"),
            MaterialEnum::LegacyBeetrootSoup => f.write_str("LEGACY_BEETROOT_SOUP"),
            MaterialEnum::LegacyDragonsBreath => f.write_str("LEGACY_DRAGONS_BREATH"),
            MaterialEnum::LegacySplashPotion => f.write_str("LEGACY_SPLASH_POTION"),
            MaterialEnum::LegacySpectralArrow => f.write_str("LEGACY_SPECTRAL_ARROW"),
            MaterialEnum::LegacyTippedArrow => f.write_str("LEGACY_TIPPED_ARROW"),
            MaterialEnum::LegacyLingeringPotion => f.write_str("LEGACY_LINGERING_POTION"),
            MaterialEnum::LegacyShield => f.write_str("LEGACY_SHIELD"),
            MaterialEnum::LegacyElytra => f.write_str("LEGACY_ELYTRA"),
            MaterialEnum::LegacyBoatSpruce => f.write_str("LEGACY_BOAT_SPRUCE"),
            MaterialEnum::LegacyBoatBirch => f.write_str("LEGACY_BOAT_BIRCH"),
            MaterialEnum::LegacyBoatJungle => f.write_str("LEGACY_BOAT_JUNGLE"),
            MaterialEnum::LegacyBoatAcacia => f.write_str("LEGACY_BOAT_ACACIA"),
            MaterialEnum::LegacyBoatDarkOak => f.write_str("LEGACY_BOAT_DARK_OAK"),
            MaterialEnum::LegacyTotem => f.write_str("LEGACY_TOTEM"),
            MaterialEnum::LegacyShulkerShell => f.write_str("LEGACY_SHULKER_SHELL"),
            MaterialEnum::LegacyIronNugget => f.write_str("LEGACY_IRON_NUGGET"),
            MaterialEnum::LegacyKnowledgeBook => f.write_str("LEGACY_KNOWLEDGE_BOOK"),
            MaterialEnum::LegacyGoldRecord => f.write_str("LEGACY_GOLD_RECORD"),
            MaterialEnum::LegacyGreenRecord => f.write_str("LEGACY_GREEN_RECORD"),
            MaterialEnum::LegacyRecord3 => f.write_str("LEGACY_RECORD_3"),
            MaterialEnum::LegacyRecord4 => f.write_str("LEGACY_RECORD_4"),
            MaterialEnum::LegacyRecord5 => f.write_str("LEGACY_RECORD_5"),
            MaterialEnum::LegacyRecord6 => f.write_str("LEGACY_RECORD_6"),
            MaterialEnum::LegacyRecord7 => f.write_str("LEGACY_RECORD_7"),
            MaterialEnum::LegacyRecord8 => f.write_str("LEGACY_RECORD_8"),
            MaterialEnum::LegacyRecord9 => f.write_str("LEGACY_RECORD_9"),
            MaterialEnum::LegacyRecord10 => f.write_str("LEGACY_RECORD_10"),
            MaterialEnum::LegacyRecord11 => f.write_str("LEGACY_RECORD_11"),
            MaterialEnum::LegacyRecord12 => f.write_str("LEGACY_RECORD_12"),
        }
    }
}
impl<'mc> std::fmt::Display for Material<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Material<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub MaterialEnum,
);
impl<'mc> std::ops::Deref for Material<'mc> {
    type Target = MaterialEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for Material<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Material<'mc> {
    type Enum = MaterialEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Material from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Material")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Material object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Material<'mc> {
    pub const AIR: MaterialEnum = MaterialEnum::Air;
    pub const STONE: MaterialEnum = MaterialEnum::Stone;
    pub const GRANITE: MaterialEnum = MaterialEnum::Granite;
    pub const POLISHED_GRANITE: MaterialEnum = MaterialEnum::PolishedGranite;
    pub const DIORITE: MaterialEnum = MaterialEnum::Diorite;
    pub const POLISHED_DIORITE: MaterialEnum = MaterialEnum::PolishedDiorite;
    pub const ANDESITE: MaterialEnum = MaterialEnum::Andesite;
    pub const POLISHED_ANDESITE: MaterialEnum = MaterialEnum::PolishedAndesite;
    pub const DEEPSLATE: MaterialEnum = MaterialEnum::Deepslate;
    pub const COBBLED_DEEPSLATE: MaterialEnum = MaterialEnum::CobbledDeepslate;
    pub const POLISHED_DEEPSLATE: MaterialEnum = MaterialEnum::PolishedDeepslate;
    pub const CALCITE: MaterialEnum = MaterialEnum::Calcite;
    pub const TUFF: MaterialEnum = MaterialEnum::Tuff;
    pub const DRIPSTONE_BLOCK: MaterialEnum = MaterialEnum::DripstoneBlock;
    pub const GRASS_BLOCK: MaterialEnum = MaterialEnum::GrassBlock;
    pub const DIRT: MaterialEnum = MaterialEnum::Dirt;
    pub const COARSE_DIRT: MaterialEnum = MaterialEnum::CoarseDirt;
    pub const PODZOL: MaterialEnum = MaterialEnum::Podzol;
    pub const ROOTED_DIRT: MaterialEnum = MaterialEnum::RootedDirt;
    pub const MUD: MaterialEnum = MaterialEnum::Mud;
    pub const CRIMSON_NYLIUM: MaterialEnum = MaterialEnum::CrimsonNylium;
    pub const WARPED_NYLIUM: MaterialEnum = MaterialEnum::WarpedNylium;
    pub const COBBLESTONE: MaterialEnum = MaterialEnum::Cobblestone;
    pub const OAK_PLANKS: MaterialEnum = MaterialEnum::OakPlanks;
    pub const SPRUCE_PLANKS: MaterialEnum = MaterialEnum::SprucePlanks;
    pub const BIRCH_PLANKS: MaterialEnum = MaterialEnum::BirchPlanks;
    pub const JUNGLE_PLANKS: MaterialEnum = MaterialEnum::JunglePlanks;
    pub const ACACIA_PLANKS: MaterialEnum = MaterialEnum::AcaciaPlanks;
    pub const CHERRY_PLANKS: MaterialEnum = MaterialEnum::CherryPlanks;
    pub const DARK_OAK_PLANKS: MaterialEnum = MaterialEnum::DarkOakPlanks;
    pub const MANGROVE_PLANKS: MaterialEnum = MaterialEnum::MangrovePlanks;
    pub const BAMBOO_PLANKS: MaterialEnum = MaterialEnum::BambooPlanks;
    pub const CRIMSON_PLANKS: MaterialEnum = MaterialEnum::CrimsonPlanks;
    pub const WARPED_PLANKS: MaterialEnum = MaterialEnum::WarpedPlanks;
    pub const BAMBOO_MOSAIC: MaterialEnum = MaterialEnum::BambooMosaic;
    pub const OAK_SAPLING: MaterialEnum = MaterialEnum::OakSapling;
    pub const SPRUCE_SAPLING: MaterialEnum = MaterialEnum::SpruceSapling;
    pub const BIRCH_SAPLING: MaterialEnum = MaterialEnum::BirchSapling;
    pub const JUNGLE_SAPLING: MaterialEnum = MaterialEnum::JungleSapling;
    pub const ACACIA_SAPLING: MaterialEnum = MaterialEnum::AcaciaSapling;
    pub const CHERRY_SAPLING: MaterialEnum = MaterialEnum::CherrySapling;
    pub const DARK_OAK_SAPLING: MaterialEnum = MaterialEnum::DarkOakSapling;
    pub const MANGROVE_PROPAGULE: MaterialEnum = MaterialEnum::MangrovePropagule;
    pub const BEDROCK: MaterialEnum = MaterialEnum::Bedrock;
    pub const SAND: MaterialEnum = MaterialEnum::Sand;
    pub const SUSPICIOUS_SAND: MaterialEnum = MaterialEnum::SuspiciousSand;
    pub const SUSPICIOUS_GRAVEL: MaterialEnum = MaterialEnum::SuspiciousGravel;
    pub const RED_SAND: MaterialEnum = MaterialEnum::RedSand;
    pub const GRAVEL: MaterialEnum = MaterialEnum::Gravel;
    pub const COAL_ORE: MaterialEnum = MaterialEnum::CoalOre;
    pub const DEEPSLATE_COAL_ORE: MaterialEnum = MaterialEnum::DeepslateCoalOre;
    pub const IRON_ORE: MaterialEnum = MaterialEnum::IronOre;
    pub const DEEPSLATE_IRON_ORE: MaterialEnum = MaterialEnum::DeepslateIronOre;
    pub const COPPER_ORE: MaterialEnum = MaterialEnum::CopperOre;
    pub const DEEPSLATE_COPPER_ORE: MaterialEnum = MaterialEnum::DeepslateCopperOre;
    pub const GOLD_ORE: MaterialEnum = MaterialEnum::GoldOre;
    pub const DEEPSLATE_GOLD_ORE: MaterialEnum = MaterialEnum::DeepslateGoldOre;
    pub const REDSTONE_ORE: MaterialEnum = MaterialEnum::RedstoneOre;
    pub const DEEPSLATE_REDSTONE_ORE: MaterialEnum = MaterialEnum::DeepslateRedstoneOre;
    pub const EMERALD_ORE: MaterialEnum = MaterialEnum::EmeraldOre;
    pub const DEEPSLATE_EMERALD_ORE: MaterialEnum = MaterialEnum::DeepslateEmeraldOre;
    pub const LAPIS_ORE: MaterialEnum = MaterialEnum::LapisOre;
    pub const DEEPSLATE_LAPIS_ORE: MaterialEnum = MaterialEnum::DeepslateLapisOre;
    pub const DIAMOND_ORE: MaterialEnum = MaterialEnum::DiamondOre;
    pub const DEEPSLATE_DIAMOND_ORE: MaterialEnum = MaterialEnum::DeepslateDiamondOre;
    pub const NETHER_GOLD_ORE: MaterialEnum = MaterialEnum::NetherGoldOre;
    pub const NETHER_QUARTZ_ORE: MaterialEnum = MaterialEnum::NetherQuartzOre;
    pub const ANCIENT_DEBRIS: MaterialEnum = MaterialEnum::AncientDebris;
    pub const COAL_BLOCK: MaterialEnum = MaterialEnum::CoalBlock;
    pub const RAW_IRON_BLOCK: MaterialEnum = MaterialEnum::RawIronBlock;
    pub const RAW_COPPER_BLOCK: MaterialEnum = MaterialEnum::RawCopperBlock;
    pub const RAW_GOLD_BLOCK: MaterialEnum = MaterialEnum::RawGoldBlock;
    pub const AMETHYST_BLOCK: MaterialEnum = MaterialEnum::AmethystBlock;
    pub const BUDDING_AMETHYST: MaterialEnum = MaterialEnum::BuddingAmethyst;
    pub const IRON_BLOCK: MaterialEnum = MaterialEnum::IronBlock;
    pub const COPPER_BLOCK: MaterialEnum = MaterialEnum::CopperBlock;
    pub const GOLD_BLOCK: MaterialEnum = MaterialEnum::GoldBlock;
    pub const DIAMOND_BLOCK: MaterialEnum = MaterialEnum::DiamondBlock;
    pub const NETHERITE_BLOCK: MaterialEnum = MaterialEnum::NetheriteBlock;
    pub const EXPOSED_COPPER: MaterialEnum = MaterialEnum::ExposedCopper;
    pub const WEATHERED_COPPER: MaterialEnum = MaterialEnum::WeatheredCopper;
    pub const OXIDIZED_COPPER: MaterialEnum = MaterialEnum::OxidizedCopper;
    pub const CUT_COPPER: MaterialEnum = MaterialEnum::CutCopper;
    pub const EXPOSED_CUT_COPPER: MaterialEnum = MaterialEnum::ExposedCutCopper;
    pub const WEATHERED_CUT_COPPER: MaterialEnum = MaterialEnum::WeatheredCutCopper;
    pub const OXIDIZED_CUT_COPPER: MaterialEnum = MaterialEnum::OxidizedCutCopper;
    pub const CUT_COPPER_STAIRS: MaterialEnum = MaterialEnum::CutCopperStairs;
    pub const EXPOSED_CUT_COPPER_STAIRS: MaterialEnum = MaterialEnum::ExposedCutCopperStairs;
    pub const WEATHERED_CUT_COPPER_STAIRS: MaterialEnum = MaterialEnum::WeatheredCutCopperStairs;
    pub const OXIDIZED_CUT_COPPER_STAIRS: MaterialEnum = MaterialEnum::OxidizedCutCopperStairs;
    pub const CUT_COPPER_SLAB: MaterialEnum = MaterialEnum::CutCopperSlab;
    pub const EXPOSED_CUT_COPPER_SLAB: MaterialEnum = MaterialEnum::ExposedCutCopperSlab;
    pub const WEATHERED_CUT_COPPER_SLAB: MaterialEnum = MaterialEnum::WeatheredCutCopperSlab;
    pub const OXIDIZED_CUT_COPPER_SLAB: MaterialEnum = MaterialEnum::OxidizedCutCopperSlab;
    pub const WAXED_COPPER_BLOCK: MaterialEnum = MaterialEnum::WaxedCopperBlock;
    pub const WAXED_EXPOSED_COPPER: MaterialEnum = MaterialEnum::WaxedExposedCopper;
    pub const WAXED_WEATHERED_COPPER: MaterialEnum = MaterialEnum::WaxedWeatheredCopper;
    pub const WAXED_OXIDIZED_COPPER: MaterialEnum = MaterialEnum::WaxedOxidizedCopper;
    pub const WAXED_CUT_COPPER: MaterialEnum = MaterialEnum::WaxedCutCopper;
    pub const WAXED_EXPOSED_CUT_COPPER: MaterialEnum = MaterialEnum::WaxedExposedCutCopper;
    pub const WAXED_WEATHERED_CUT_COPPER: MaterialEnum = MaterialEnum::WaxedWeatheredCutCopper;
    pub const WAXED_OXIDIZED_CUT_COPPER: MaterialEnum = MaterialEnum::WaxedOxidizedCutCopper;
    pub const WAXED_CUT_COPPER_STAIRS: MaterialEnum = MaterialEnum::WaxedCutCopperStairs;
    pub const WAXED_EXPOSED_CUT_COPPER_STAIRS: MaterialEnum =
        MaterialEnum::WaxedExposedCutCopperStairs;
    pub const WAXED_WEATHERED_CUT_COPPER_STAIRS: MaterialEnum =
        MaterialEnum::WaxedWeatheredCutCopperStairs;
    pub const WAXED_OXIDIZED_CUT_COPPER_STAIRS: MaterialEnum =
        MaterialEnum::WaxedOxidizedCutCopperStairs;
    pub const WAXED_CUT_COPPER_SLAB: MaterialEnum = MaterialEnum::WaxedCutCopperSlab;
    pub const WAXED_EXPOSED_CUT_COPPER_SLAB: MaterialEnum = MaterialEnum::WaxedExposedCutCopperSlab;
    pub const WAXED_WEATHERED_CUT_COPPER_SLAB: MaterialEnum =
        MaterialEnum::WaxedWeatheredCutCopperSlab;
    pub const WAXED_OXIDIZED_CUT_COPPER_SLAB: MaterialEnum =
        MaterialEnum::WaxedOxidizedCutCopperSlab;
    pub const OAK_LOG: MaterialEnum = MaterialEnum::OakLog;
    pub const SPRUCE_LOG: MaterialEnum = MaterialEnum::SpruceLog;
    pub const BIRCH_LOG: MaterialEnum = MaterialEnum::BirchLog;
    pub const JUNGLE_LOG: MaterialEnum = MaterialEnum::JungleLog;
    pub const ACACIA_LOG: MaterialEnum = MaterialEnum::AcaciaLog;
    pub const CHERRY_LOG: MaterialEnum = MaterialEnum::CherryLog;
    pub const DARK_OAK_LOG: MaterialEnum = MaterialEnum::DarkOakLog;
    pub const MANGROVE_LOG: MaterialEnum = MaterialEnum::MangroveLog;
    pub const MANGROVE_ROOTS: MaterialEnum = MaterialEnum::MangroveRoots;
    pub const MUDDY_MANGROVE_ROOTS: MaterialEnum = MaterialEnum::MuddyMangroveRoots;
    pub const CRIMSON_STEM: MaterialEnum = MaterialEnum::CrimsonStem;
    pub const WARPED_STEM: MaterialEnum = MaterialEnum::WarpedStem;
    pub const BAMBOO_BLOCK: MaterialEnum = MaterialEnum::BambooBlock;
    pub const STRIPPED_OAK_LOG: MaterialEnum = MaterialEnum::StrippedOakLog;
    pub const STRIPPED_SPRUCE_LOG: MaterialEnum = MaterialEnum::StrippedSpruceLog;
    pub const STRIPPED_BIRCH_LOG: MaterialEnum = MaterialEnum::StrippedBirchLog;
    pub const STRIPPED_JUNGLE_LOG: MaterialEnum = MaterialEnum::StrippedJungleLog;
    pub const STRIPPED_ACACIA_LOG: MaterialEnum = MaterialEnum::StrippedAcaciaLog;
    pub const STRIPPED_CHERRY_LOG: MaterialEnum = MaterialEnum::StrippedCherryLog;
    pub const STRIPPED_DARK_OAK_LOG: MaterialEnum = MaterialEnum::StrippedDarkOakLog;
    pub const STRIPPED_MANGROVE_LOG: MaterialEnum = MaterialEnum::StrippedMangroveLog;
    pub const STRIPPED_CRIMSON_STEM: MaterialEnum = MaterialEnum::StrippedCrimsonStem;
    pub const STRIPPED_WARPED_STEM: MaterialEnum = MaterialEnum::StrippedWarpedStem;
    pub const STRIPPED_OAK_WOOD: MaterialEnum = MaterialEnum::StrippedOakWood;
    pub const STRIPPED_SPRUCE_WOOD: MaterialEnum = MaterialEnum::StrippedSpruceWood;
    pub const STRIPPED_BIRCH_WOOD: MaterialEnum = MaterialEnum::StrippedBirchWood;
    pub const STRIPPED_JUNGLE_WOOD: MaterialEnum = MaterialEnum::StrippedJungleWood;
    pub const STRIPPED_ACACIA_WOOD: MaterialEnum = MaterialEnum::StrippedAcaciaWood;
    pub const STRIPPED_CHERRY_WOOD: MaterialEnum = MaterialEnum::StrippedCherryWood;
    pub const STRIPPED_DARK_OAK_WOOD: MaterialEnum = MaterialEnum::StrippedDarkOakWood;
    pub const STRIPPED_MANGROVE_WOOD: MaterialEnum = MaterialEnum::StrippedMangroveWood;
    pub const STRIPPED_CRIMSON_HYPHAE: MaterialEnum = MaterialEnum::StrippedCrimsonHyphae;
    pub const STRIPPED_WARPED_HYPHAE: MaterialEnum = MaterialEnum::StrippedWarpedHyphae;
    pub const STRIPPED_BAMBOO_BLOCK: MaterialEnum = MaterialEnum::StrippedBambooBlock;
    pub const OAK_WOOD: MaterialEnum = MaterialEnum::OakWood;
    pub const SPRUCE_WOOD: MaterialEnum = MaterialEnum::SpruceWood;
    pub const BIRCH_WOOD: MaterialEnum = MaterialEnum::BirchWood;
    pub const JUNGLE_WOOD: MaterialEnum = MaterialEnum::JungleWood;
    pub const ACACIA_WOOD: MaterialEnum = MaterialEnum::AcaciaWood;
    pub const CHERRY_WOOD: MaterialEnum = MaterialEnum::CherryWood;
    pub const DARK_OAK_WOOD: MaterialEnum = MaterialEnum::DarkOakWood;
    pub const MANGROVE_WOOD: MaterialEnum = MaterialEnum::MangroveWood;
    pub const CRIMSON_HYPHAE: MaterialEnum = MaterialEnum::CrimsonHyphae;
    pub const WARPED_HYPHAE: MaterialEnum = MaterialEnum::WarpedHyphae;
    pub const OAK_LEAVES: MaterialEnum = MaterialEnum::OakLeaves;
    pub const SPRUCE_LEAVES: MaterialEnum = MaterialEnum::SpruceLeaves;
    pub const BIRCH_LEAVES: MaterialEnum = MaterialEnum::BirchLeaves;
    pub const JUNGLE_LEAVES: MaterialEnum = MaterialEnum::JungleLeaves;
    pub const ACACIA_LEAVES: MaterialEnum = MaterialEnum::AcaciaLeaves;
    pub const CHERRY_LEAVES: MaterialEnum = MaterialEnum::CherryLeaves;
    pub const DARK_OAK_LEAVES: MaterialEnum = MaterialEnum::DarkOakLeaves;
    pub const MANGROVE_LEAVES: MaterialEnum = MaterialEnum::MangroveLeaves;
    pub const AZALEA_LEAVES: MaterialEnum = MaterialEnum::AzaleaLeaves;
    pub const FLOWERING_AZALEA_LEAVES: MaterialEnum = MaterialEnum::FloweringAzaleaLeaves;
    pub const SPONGE: MaterialEnum = MaterialEnum::Sponge;
    pub const WET_SPONGE: MaterialEnum = MaterialEnum::WetSponge;
    pub const GLASS: MaterialEnum = MaterialEnum::Glass;
    pub const TINTED_GLASS: MaterialEnum = MaterialEnum::TintedGlass;
    pub const LAPIS_BLOCK: MaterialEnum = MaterialEnum::LapisBlock;
    pub const SANDSTONE: MaterialEnum = MaterialEnum::Sandstone;
    pub const CHISELED_SANDSTONE: MaterialEnum = MaterialEnum::ChiseledSandstone;
    pub const CUT_SANDSTONE: MaterialEnum = MaterialEnum::CutSandstone;
    pub const COBWEB: MaterialEnum = MaterialEnum::Cobweb;
    pub const GRASS: MaterialEnum = MaterialEnum::Grass;
    pub const FERN: MaterialEnum = MaterialEnum::Fern;
    pub const AZALEA: MaterialEnum = MaterialEnum::Azalea;
    pub const FLOWERING_AZALEA: MaterialEnum = MaterialEnum::FloweringAzalea;
    pub const DEAD_BUSH: MaterialEnum = MaterialEnum::DeadBush;
    pub const SEAGRASS: MaterialEnum = MaterialEnum::Seagrass;
    pub const SEA_PICKLE: MaterialEnum = MaterialEnum::SeaPickle;
    pub const WHITE_WOOL: MaterialEnum = MaterialEnum::WhiteWool;
    pub const ORANGE_WOOL: MaterialEnum = MaterialEnum::OrangeWool;
    pub const MAGENTA_WOOL: MaterialEnum = MaterialEnum::MagentaWool;
    pub const LIGHT_BLUE_WOOL: MaterialEnum = MaterialEnum::LightBlueWool;
    pub const YELLOW_WOOL: MaterialEnum = MaterialEnum::YellowWool;
    pub const LIME_WOOL: MaterialEnum = MaterialEnum::LimeWool;
    pub const PINK_WOOL: MaterialEnum = MaterialEnum::PinkWool;
    pub const GRAY_WOOL: MaterialEnum = MaterialEnum::GrayWool;
    pub const LIGHT_GRAY_WOOL: MaterialEnum = MaterialEnum::LightGrayWool;
    pub const CYAN_WOOL: MaterialEnum = MaterialEnum::CyanWool;
    pub const PURPLE_WOOL: MaterialEnum = MaterialEnum::PurpleWool;
    pub const BLUE_WOOL: MaterialEnum = MaterialEnum::BlueWool;
    pub const BROWN_WOOL: MaterialEnum = MaterialEnum::BrownWool;
    pub const GREEN_WOOL: MaterialEnum = MaterialEnum::GreenWool;
    pub const RED_WOOL: MaterialEnum = MaterialEnum::RedWool;
    pub const BLACK_WOOL: MaterialEnum = MaterialEnum::BlackWool;
    pub const DANDELION: MaterialEnum = MaterialEnum::Dandelion;
    pub const POPPY: MaterialEnum = MaterialEnum::Poppy;
    pub const BLUE_ORCHID: MaterialEnum = MaterialEnum::BlueOrchid;
    pub const ALLIUM: MaterialEnum = MaterialEnum::Allium;
    pub const AZURE_BLUET: MaterialEnum = MaterialEnum::AzureBluet;
    pub const RED_TULIP: MaterialEnum = MaterialEnum::RedTulip;
    pub const ORANGE_TULIP: MaterialEnum = MaterialEnum::OrangeTulip;
    pub const WHITE_TULIP: MaterialEnum = MaterialEnum::WhiteTulip;
    pub const PINK_TULIP: MaterialEnum = MaterialEnum::PinkTulip;
    pub const OXEYE_DAISY: MaterialEnum = MaterialEnum::OxeyeDaisy;
    pub const CORNFLOWER: MaterialEnum = MaterialEnum::Cornflower;
    pub const LILY_OF_THE_VALLEY: MaterialEnum = MaterialEnum::LilyOfTheValley;
    pub const WITHER_ROSE: MaterialEnum = MaterialEnum::WitherRose;
    pub const TORCHFLOWER: MaterialEnum = MaterialEnum::Torchflower;
    pub const PITCHER_PLANT: MaterialEnum = MaterialEnum::PitcherPlant;
    pub const SPORE_BLOSSOM: MaterialEnum = MaterialEnum::SporeBlossom;
    pub const BROWN_MUSHROOM: MaterialEnum = MaterialEnum::BrownMushroom;
    pub const RED_MUSHROOM: MaterialEnum = MaterialEnum::RedMushroom;
    pub const CRIMSON_FUNGUS: MaterialEnum = MaterialEnum::CrimsonFungus;
    pub const WARPED_FUNGUS: MaterialEnum = MaterialEnum::WarpedFungus;
    pub const CRIMSON_ROOTS: MaterialEnum = MaterialEnum::CrimsonRoots;
    pub const WARPED_ROOTS: MaterialEnum = MaterialEnum::WarpedRoots;
    pub const NETHER_SPROUTS: MaterialEnum = MaterialEnum::NetherSprouts;
    pub const WEEPING_VINES: MaterialEnum = MaterialEnum::WeepingVines;
    pub const TWISTING_VINES: MaterialEnum = MaterialEnum::TwistingVines;
    pub const SUGAR_CANE: MaterialEnum = MaterialEnum::SugarCane;
    pub const KELP: MaterialEnum = MaterialEnum::Kelp;
    pub const MOSS_CARPET: MaterialEnum = MaterialEnum::MossCarpet;
    pub const PINK_PETALS: MaterialEnum = MaterialEnum::PinkPetals;
    pub const MOSS_BLOCK: MaterialEnum = MaterialEnum::MossBlock;
    pub const HANGING_ROOTS: MaterialEnum = MaterialEnum::HangingRoots;
    pub const BIG_DRIPLEAF: MaterialEnum = MaterialEnum::BigDripleaf;
    pub const SMALL_DRIPLEAF: MaterialEnum = MaterialEnum::SmallDripleaf;
    pub const BAMBOO: MaterialEnum = MaterialEnum::Bamboo;
    pub const OAK_SLAB: MaterialEnum = MaterialEnum::OakSlab;
    pub const SPRUCE_SLAB: MaterialEnum = MaterialEnum::SpruceSlab;
    pub const BIRCH_SLAB: MaterialEnum = MaterialEnum::BirchSlab;
    pub const JUNGLE_SLAB: MaterialEnum = MaterialEnum::JungleSlab;
    pub const ACACIA_SLAB: MaterialEnum = MaterialEnum::AcaciaSlab;
    pub const CHERRY_SLAB: MaterialEnum = MaterialEnum::CherrySlab;
    pub const DARK_OAK_SLAB: MaterialEnum = MaterialEnum::DarkOakSlab;
    pub const MANGROVE_SLAB: MaterialEnum = MaterialEnum::MangroveSlab;
    pub const BAMBOO_SLAB: MaterialEnum = MaterialEnum::BambooSlab;
    pub const BAMBOO_MOSAIC_SLAB: MaterialEnum = MaterialEnum::BambooMosaicSlab;
    pub const CRIMSON_SLAB: MaterialEnum = MaterialEnum::CrimsonSlab;
    pub const WARPED_SLAB: MaterialEnum = MaterialEnum::WarpedSlab;
    pub const STONE_SLAB: MaterialEnum = MaterialEnum::StoneSlab;
    pub const SMOOTH_STONE_SLAB: MaterialEnum = MaterialEnum::SmoothStoneSlab;
    pub const SANDSTONE_SLAB: MaterialEnum = MaterialEnum::SandstoneSlab;
    pub const CUT_SANDSTONE_SLAB: MaterialEnum = MaterialEnum::CutSandstoneSlab;
    pub const PETRIFIED_OAK_SLAB: MaterialEnum = MaterialEnum::PetrifiedOakSlab;
    pub const COBBLESTONE_SLAB: MaterialEnum = MaterialEnum::CobblestoneSlab;
    pub const BRICK_SLAB: MaterialEnum = MaterialEnum::BrickSlab;
    pub const STONE_BRICK_SLAB: MaterialEnum = MaterialEnum::StoneBrickSlab;
    pub const MUD_BRICK_SLAB: MaterialEnum = MaterialEnum::MudBrickSlab;
    pub const NETHER_BRICK_SLAB: MaterialEnum = MaterialEnum::NetherBrickSlab;
    pub const QUARTZ_SLAB: MaterialEnum = MaterialEnum::QuartzSlab;
    pub const RED_SANDSTONE_SLAB: MaterialEnum = MaterialEnum::RedSandstoneSlab;
    pub const CUT_RED_SANDSTONE_SLAB: MaterialEnum = MaterialEnum::CutRedSandstoneSlab;
    pub const PURPUR_SLAB: MaterialEnum = MaterialEnum::PurpurSlab;
    pub const PRISMARINE_SLAB: MaterialEnum = MaterialEnum::PrismarineSlab;
    pub const PRISMARINE_BRICK_SLAB: MaterialEnum = MaterialEnum::PrismarineBrickSlab;
    pub const DARK_PRISMARINE_SLAB: MaterialEnum = MaterialEnum::DarkPrismarineSlab;
    pub const SMOOTH_QUARTZ: MaterialEnum = MaterialEnum::SmoothQuartz;
    pub const SMOOTH_RED_SANDSTONE: MaterialEnum = MaterialEnum::SmoothRedSandstone;
    pub const SMOOTH_SANDSTONE: MaterialEnum = MaterialEnum::SmoothSandstone;
    pub const SMOOTH_STONE: MaterialEnum = MaterialEnum::SmoothStone;
    pub const BRICKS: MaterialEnum = MaterialEnum::Bricks;
    pub const BOOKSHELF: MaterialEnum = MaterialEnum::Bookshelf;
    pub const CHISELED_BOOKSHELF: MaterialEnum = MaterialEnum::ChiseledBookshelf;
    pub const DECORATED_POT: MaterialEnum = MaterialEnum::DecoratedPot;
    pub const MOSSY_COBBLESTONE: MaterialEnum = MaterialEnum::MossyCobblestone;
    pub const OBSIDIAN: MaterialEnum = MaterialEnum::Obsidian;
    pub const TORCH: MaterialEnum = MaterialEnum::Torch;
    pub const END_ROD: MaterialEnum = MaterialEnum::EndRod;
    pub const CHORUS_PLANT: MaterialEnum = MaterialEnum::ChorusPlant;
    pub const CHORUS_FLOWER: MaterialEnum = MaterialEnum::ChorusFlower;
    pub const PURPUR_BLOCK: MaterialEnum = MaterialEnum::PurpurBlock;
    pub const PURPUR_PILLAR: MaterialEnum = MaterialEnum::PurpurPillar;
    pub const PURPUR_STAIRS: MaterialEnum = MaterialEnum::PurpurStairs;
    pub const SPAWNER: MaterialEnum = MaterialEnum::Spawner;
    pub const CHEST: MaterialEnum = MaterialEnum::Chest;
    pub const CRAFTING_TABLE: MaterialEnum = MaterialEnum::CraftingTable;
    pub const FARMLAND: MaterialEnum = MaterialEnum::Farmland;
    pub const FURNACE: MaterialEnum = MaterialEnum::Furnace;
    pub const LADDER: MaterialEnum = MaterialEnum::Ladder;
    pub const COBBLESTONE_STAIRS: MaterialEnum = MaterialEnum::CobblestoneStairs;
    pub const SNOW: MaterialEnum = MaterialEnum::Snow;
    pub const ICE: MaterialEnum = MaterialEnum::Ice;
    pub const SNOW_BLOCK: MaterialEnum = MaterialEnum::SnowBlock;
    pub const CACTUS: MaterialEnum = MaterialEnum::Cactus;
    pub const CLAY: MaterialEnum = MaterialEnum::Clay;
    pub const JUKEBOX: MaterialEnum = MaterialEnum::Jukebox;
    pub const OAK_FENCE: MaterialEnum = MaterialEnum::OakFence;
    pub const SPRUCE_FENCE: MaterialEnum = MaterialEnum::SpruceFence;
    pub const BIRCH_FENCE: MaterialEnum = MaterialEnum::BirchFence;
    pub const JUNGLE_FENCE: MaterialEnum = MaterialEnum::JungleFence;
    pub const ACACIA_FENCE: MaterialEnum = MaterialEnum::AcaciaFence;
    pub const CHERRY_FENCE: MaterialEnum = MaterialEnum::CherryFence;
    pub const DARK_OAK_FENCE: MaterialEnum = MaterialEnum::DarkOakFence;
    pub const MANGROVE_FENCE: MaterialEnum = MaterialEnum::MangroveFence;
    pub const BAMBOO_FENCE: MaterialEnum = MaterialEnum::BambooFence;
    pub const CRIMSON_FENCE: MaterialEnum = MaterialEnum::CrimsonFence;
    pub const WARPED_FENCE: MaterialEnum = MaterialEnum::WarpedFence;
    pub const PUMPKIN: MaterialEnum = MaterialEnum::Pumpkin;
    pub const CARVED_PUMPKIN: MaterialEnum = MaterialEnum::CarvedPumpkin;
    pub const JACK_O_LANTERN: MaterialEnum = MaterialEnum::JackOLantern;
    pub const NETHERRACK: MaterialEnum = MaterialEnum::Netherrack;
    pub const SOUL_SAND: MaterialEnum = MaterialEnum::SoulSand;
    pub const SOUL_SOIL: MaterialEnum = MaterialEnum::SoulSoil;
    pub const BASALT: MaterialEnum = MaterialEnum::Basalt;
    pub const POLISHED_BASALT: MaterialEnum = MaterialEnum::PolishedBasalt;
    pub const SMOOTH_BASALT: MaterialEnum = MaterialEnum::SmoothBasalt;
    pub const SOUL_TORCH: MaterialEnum = MaterialEnum::SoulTorch;
    pub const GLOWSTONE: MaterialEnum = MaterialEnum::Glowstone;
    pub const INFESTED_STONE: MaterialEnum = MaterialEnum::InfestedStone;
    pub const INFESTED_COBBLESTONE: MaterialEnum = MaterialEnum::InfestedCobblestone;
    pub const INFESTED_STONE_BRICKS: MaterialEnum = MaterialEnum::InfestedStoneBricks;
    pub const INFESTED_MOSSY_STONE_BRICKS: MaterialEnum = MaterialEnum::InfestedMossyStoneBricks;
    pub const INFESTED_CRACKED_STONE_BRICKS: MaterialEnum =
        MaterialEnum::InfestedCrackedStoneBricks;
    pub const INFESTED_CHISELED_STONE_BRICKS: MaterialEnum =
        MaterialEnum::InfestedChiseledStoneBricks;
    pub const INFESTED_DEEPSLATE: MaterialEnum = MaterialEnum::InfestedDeepslate;
    pub const STONE_BRICKS: MaterialEnum = MaterialEnum::StoneBricks;
    pub const MOSSY_STONE_BRICKS: MaterialEnum = MaterialEnum::MossyStoneBricks;
    pub const CRACKED_STONE_BRICKS: MaterialEnum = MaterialEnum::CrackedStoneBricks;
    pub const CHISELED_STONE_BRICKS: MaterialEnum = MaterialEnum::ChiseledStoneBricks;
    pub const PACKED_MUD: MaterialEnum = MaterialEnum::PackedMud;
    pub const MUD_BRICKS: MaterialEnum = MaterialEnum::MudBricks;
    pub const DEEPSLATE_BRICKS: MaterialEnum = MaterialEnum::DeepslateBricks;
    pub const CRACKED_DEEPSLATE_BRICKS: MaterialEnum = MaterialEnum::CrackedDeepslateBricks;
    pub const DEEPSLATE_TILES: MaterialEnum = MaterialEnum::DeepslateTiles;
    pub const CRACKED_DEEPSLATE_TILES: MaterialEnum = MaterialEnum::CrackedDeepslateTiles;
    pub const CHISELED_DEEPSLATE: MaterialEnum = MaterialEnum::ChiseledDeepslate;
    pub const REINFORCED_DEEPSLATE: MaterialEnum = MaterialEnum::ReinforcedDeepslate;
    pub const BROWN_MUSHROOM_BLOCK: MaterialEnum = MaterialEnum::BrownMushroomBlock;
    pub const RED_MUSHROOM_BLOCK: MaterialEnum = MaterialEnum::RedMushroomBlock;
    pub const MUSHROOM_STEM: MaterialEnum = MaterialEnum::MushroomStem;
    pub const IRON_BARS: MaterialEnum = MaterialEnum::IronBars;
    pub const CHAIN: MaterialEnum = MaterialEnum::Chain;
    pub const GLASS_PANE: MaterialEnum = MaterialEnum::GlassPane;
    pub const MELON: MaterialEnum = MaterialEnum::Melon;
    pub const VINE: MaterialEnum = MaterialEnum::Vine;
    pub const GLOW_LICHEN: MaterialEnum = MaterialEnum::GlowLichen;
    pub const BRICK_STAIRS: MaterialEnum = MaterialEnum::BrickStairs;
    pub const STONE_BRICK_STAIRS: MaterialEnum = MaterialEnum::StoneBrickStairs;
    pub const MUD_BRICK_STAIRS: MaterialEnum = MaterialEnum::MudBrickStairs;
    pub const MYCELIUM: MaterialEnum = MaterialEnum::Mycelium;
    pub const LILY_PAD: MaterialEnum = MaterialEnum::LilyPad;
    pub const NETHER_BRICKS: MaterialEnum = MaterialEnum::NetherBricks;
    pub const CRACKED_NETHER_BRICKS: MaterialEnum = MaterialEnum::CrackedNetherBricks;
    pub const CHISELED_NETHER_BRICKS: MaterialEnum = MaterialEnum::ChiseledNetherBricks;
    pub const NETHER_BRICK_FENCE: MaterialEnum = MaterialEnum::NetherBrickFence;
    pub const NETHER_BRICK_STAIRS: MaterialEnum = MaterialEnum::NetherBrickStairs;
    pub const SCULK: MaterialEnum = MaterialEnum::Sculk;
    pub const SCULK_VEIN: MaterialEnum = MaterialEnum::SculkVein;
    pub const SCULK_CATALYST: MaterialEnum = MaterialEnum::SculkCatalyst;
    pub const SCULK_SHRIEKER: MaterialEnum = MaterialEnum::SculkShrieker;
    pub const ENCHANTING_TABLE: MaterialEnum = MaterialEnum::EnchantingTable;
    pub const END_PORTAL_FRAME: MaterialEnum = MaterialEnum::EndPortalFrame;
    pub const END_STONE: MaterialEnum = MaterialEnum::EndStone;
    pub const END_STONE_BRICKS: MaterialEnum = MaterialEnum::EndStoneBricks;
    pub const DRAGON_EGG: MaterialEnum = MaterialEnum::DragonEgg;
    pub const SANDSTONE_STAIRS: MaterialEnum = MaterialEnum::SandstoneStairs;
    pub const ENDER_CHEST: MaterialEnum = MaterialEnum::EnderChest;
    pub const EMERALD_BLOCK: MaterialEnum = MaterialEnum::EmeraldBlock;
    pub const OAK_STAIRS: MaterialEnum = MaterialEnum::OakStairs;
    pub const SPRUCE_STAIRS: MaterialEnum = MaterialEnum::SpruceStairs;
    pub const BIRCH_STAIRS: MaterialEnum = MaterialEnum::BirchStairs;
    pub const JUNGLE_STAIRS: MaterialEnum = MaterialEnum::JungleStairs;
    pub const ACACIA_STAIRS: MaterialEnum = MaterialEnum::AcaciaStairs;
    pub const CHERRY_STAIRS: MaterialEnum = MaterialEnum::CherryStairs;
    pub const DARK_OAK_STAIRS: MaterialEnum = MaterialEnum::DarkOakStairs;
    pub const MANGROVE_STAIRS: MaterialEnum = MaterialEnum::MangroveStairs;
    pub const BAMBOO_STAIRS: MaterialEnum = MaterialEnum::BambooStairs;
    pub const BAMBOO_MOSAIC_STAIRS: MaterialEnum = MaterialEnum::BambooMosaicStairs;
    pub const CRIMSON_STAIRS: MaterialEnum = MaterialEnum::CrimsonStairs;
    pub const WARPED_STAIRS: MaterialEnum = MaterialEnum::WarpedStairs;
    pub const COMMAND_BLOCK: MaterialEnum = MaterialEnum::CommandBlock;
    pub const BEACON: MaterialEnum = MaterialEnum::Beacon;
    pub const COBBLESTONE_WALL: MaterialEnum = MaterialEnum::CobblestoneWall;
    pub const MOSSY_COBBLESTONE_WALL: MaterialEnum = MaterialEnum::MossyCobblestoneWall;
    pub const BRICK_WALL: MaterialEnum = MaterialEnum::BrickWall;
    pub const PRISMARINE_WALL: MaterialEnum = MaterialEnum::PrismarineWall;
    pub const RED_SANDSTONE_WALL: MaterialEnum = MaterialEnum::RedSandstoneWall;
    pub const MOSSY_STONE_BRICK_WALL: MaterialEnum = MaterialEnum::MossyStoneBrickWall;
    pub const GRANITE_WALL: MaterialEnum = MaterialEnum::GraniteWall;
    pub const STONE_BRICK_WALL: MaterialEnum = MaterialEnum::StoneBrickWall;
    pub const MUD_BRICK_WALL: MaterialEnum = MaterialEnum::MudBrickWall;
    pub const NETHER_BRICK_WALL: MaterialEnum = MaterialEnum::NetherBrickWall;
    pub const ANDESITE_WALL: MaterialEnum = MaterialEnum::AndesiteWall;
    pub const RED_NETHER_BRICK_WALL: MaterialEnum = MaterialEnum::RedNetherBrickWall;
    pub const SANDSTONE_WALL: MaterialEnum = MaterialEnum::SandstoneWall;
    pub const END_STONE_BRICK_WALL: MaterialEnum = MaterialEnum::EndStoneBrickWall;
    pub const DIORITE_WALL: MaterialEnum = MaterialEnum::DioriteWall;
    pub const BLACKSTONE_WALL: MaterialEnum = MaterialEnum::BlackstoneWall;
    pub const POLISHED_BLACKSTONE_WALL: MaterialEnum = MaterialEnum::PolishedBlackstoneWall;
    pub const POLISHED_BLACKSTONE_BRICK_WALL: MaterialEnum =
        MaterialEnum::PolishedBlackstoneBrickWall;
    pub const COBBLED_DEEPSLATE_WALL: MaterialEnum = MaterialEnum::CobbledDeepslateWall;
    pub const POLISHED_DEEPSLATE_WALL: MaterialEnum = MaterialEnum::PolishedDeepslateWall;
    pub const DEEPSLATE_BRICK_WALL: MaterialEnum = MaterialEnum::DeepslateBrickWall;
    pub const DEEPSLATE_TILE_WALL: MaterialEnum = MaterialEnum::DeepslateTileWall;
    pub const ANVIL: MaterialEnum = MaterialEnum::Anvil;
    pub const CHIPPED_ANVIL: MaterialEnum = MaterialEnum::ChippedAnvil;
    pub const DAMAGED_ANVIL: MaterialEnum = MaterialEnum::DamagedAnvil;
    pub const CHISELED_QUARTZ_BLOCK: MaterialEnum = MaterialEnum::ChiseledQuartzBlock;
    pub const QUARTZ_BLOCK: MaterialEnum = MaterialEnum::QuartzBlock;
    pub const QUARTZ_BRICKS: MaterialEnum = MaterialEnum::QuartzBricks;
    pub const QUARTZ_PILLAR: MaterialEnum = MaterialEnum::QuartzPillar;
    pub const QUARTZ_STAIRS: MaterialEnum = MaterialEnum::QuartzStairs;
    pub const WHITE_TERRACOTTA: MaterialEnum = MaterialEnum::WhiteTerracotta;
    pub const ORANGE_TERRACOTTA: MaterialEnum = MaterialEnum::OrangeTerracotta;
    pub const MAGENTA_TERRACOTTA: MaterialEnum = MaterialEnum::MagentaTerracotta;
    pub const LIGHT_BLUE_TERRACOTTA: MaterialEnum = MaterialEnum::LightBlueTerracotta;
    pub const YELLOW_TERRACOTTA: MaterialEnum = MaterialEnum::YellowTerracotta;
    pub const LIME_TERRACOTTA: MaterialEnum = MaterialEnum::LimeTerracotta;
    pub const PINK_TERRACOTTA: MaterialEnum = MaterialEnum::PinkTerracotta;
    pub const GRAY_TERRACOTTA: MaterialEnum = MaterialEnum::GrayTerracotta;
    pub const LIGHT_GRAY_TERRACOTTA: MaterialEnum = MaterialEnum::LightGrayTerracotta;
    pub const CYAN_TERRACOTTA: MaterialEnum = MaterialEnum::CyanTerracotta;
    pub const PURPLE_TERRACOTTA: MaterialEnum = MaterialEnum::PurpleTerracotta;
    pub const BLUE_TERRACOTTA: MaterialEnum = MaterialEnum::BlueTerracotta;
    pub const BROWN_TERRACOTTA: MaterialEnum = MaterialEnum::BrownTerracotta;
    pub const GREEN_TERRACOTTA: MaterialEnum = MaterialEnum::GreenTerracotta;
    pub const RED_TERRACOTTA: MaterialEnum = MaterialEnum::RedTerracotta;
    pub const BLACK_TERRACOTTA: MaterialEnum = MaterialEnum::BlackTerracotta;
    pub const BARRIER: MaterialEnum = MaterialEnum::Barrier;
    pub const LIGHT: MaterialEnum = MaterialEnum::Light;
    pub const HAY_BLOCK: MaterialEnum = MaterialEnum::HayBlock;
    pub const WHITE_CARPET: MaterialEnum = MaterialEnum::WhiteCarpet;
    pub const ORANGE_CARPET: MaterialEnum = MaterialEnum::OrangeCarpet;
    pub const MAGENTA_CARPET: MaterialEnum = MaterialEnum::MagentaCarpet;
    pub const LIGHT_BLUE_CARPET: MaterialEnum = MaterialEnum::LightBlueCarpet;
    pub const YELLOW_CARPET: MaterialEnum = MaterialEnum::YellowCarpet;
    pub const LIME_CARPET: MaterialEnum = MaterialEnum::LimeCarpet;
    pub const PINK_CARPET: MaterialEnum = MaterialEnum::PinkCarpet;
    pub const GRAY_CARPET: MaterialEnum = MaterialEnum::GrayCarpet;
    pub const LIGHT_GRAY_CARPET: MaterialEnum = MaterialEnum::LightGrayCarpet;
    pub const CYAN_CARPET: MaterialEnum = MaterialEnum::CyanCarpet;
    pub const PURPLE_CARPET: MaterialEnum = MaterialEnum::PurpleCarpet;
    pub const BLUE_CARPET: MaterialEnum = MaterialEnum::BlueCarpet;
    pub const BROWN_CARPET: MaterialEnum = MaterialEnum::BrownCarpet;
    pub const GREEN_CARPET: MaterialEnum = MaterialEnum::GreenCarpet;
    pub const RED_CARPET: MaterialEnum = MaterialEnum::RedCarpet;
    pub const BLACK_CARPET: MaterialEnum = MaterialEnum::BlackCarpet;
    pub const TERRACOTTA: MaterialEnum = MaterialEnum::Terracotta;
    pub const PACKED_ICE: MaterialEnum = MaterialEnum::PackedIce;
    pub const DIRT_PATH: MaterialEnum = MaterialEnum::DirtPath;
    pub const SUNFLOWER: MaterialEnum = MaterialEnum::Sunflower;
    pub const LILAC: MaterialEnum = MaterialEnum::Lilac;
    pub const ROSE_BUSH: MaterialEnum = MaterialEnum::RoseBush;
    pub const PEONY: MaterialEnum = MaterialEnum::Peony;
    pub const TALL_GRASS: MaterialEnum = MaterialEnum::TallGrass;
    pub const LARGE_FERN: MaterialEnum = MaterialEnum::LargeFern;
    pub const WHITE_STAINED_GLASS: MaterialEnum = MaterialEnum::WhiteStainedGlass;
    pub const ORANGE_STAINED_GLASS: MaterialEnum = MaterialEnum::OrangeStainedGlass;
    pub const MAGENTA_STAINED_GLASS: MaterialEnum = MaterialEnum::MagentaStainedGlass;
    pub const LIGHT_BLUE_STAINED_GLASS: MaterialEnum = MaterialEnum::LightBlueStainedGlass;
    pub const YELLOW_STAINED_GLASS: MaterialEnum = MaterialEnum::YellowStainedGlass;
    pub const LIME_STAINED_GLASS: MaterialEnum = MaterialEnum::LimeStainedGlass;
    pub const PINK_STAINED_GLASS: MaterialEnum = MaterialEnum::PinkStainedGlass;
    pub const GRAY_STAINED_GLASS: MaterialEnum = MaterialEnum::GrayStainedGlass;
    pub const LIGHT_GRAY_STAINED_GLASS: MaterialEnum = MaterialEnum::LightGrayStainedGlass;
    pub const CYAN_STAINED_GLASS: MaterialEnum = MaterialEnum::CyanStainedGlass;
    pub const PURPLE_STAINED_GLASS: MaterialEnum = MaterialEnum::PurpleStainedGlass;
    pub const BLUE_STAINED_GLASS: MaterialEnum = MaterialEnum::BlueStainedGlass;
    pub const BROWN_STAINED_GLASS: MaterialEnum = MaterialEnum::BrownStainedGlass;
    pub const GREEN_STAINED_GLASS: MaterialEnum = MaterialEnum::GreenStainedGlass;
    pub const RED_STAINED_GLASS: MaterialEnum = MaterialEnum::RedStainedGlass;
    pub const BLACK_STAINED_GLASS: MaterialEnum = MaterialEnum::BlackStainedGlass;
    pub const WHITE_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::WhiteStainedGlassPane;
    pub const ORANGE_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::OrangeStainedGlassPane;
    pub const MAGENTA_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::MagentaStainedGlassPane;
    pub const LIGHT_BLUE_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::LightBlueStainedGlassPane;
    pub const YELLOW_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::YellowStainedGlassPane;
    pub const LIME_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::LimeStainedGlassPane;
    pub const PINK_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::PinkStainedGlassPane;
    pub const GRAY_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::GrayStainedGlassPane;
    pub const LIGHT_GRAY_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::LightGrayStainedGlassPane;
    pub const CYAN_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::CyanStainedGlassPane;
    pub const PURPLE_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::PurpleStainedGlassPane;
    pub const BLUE_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::BlueStainedGlassPane;
    pub const BROWN_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::BrownStainedGlassPane;
    pub const GREEN_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::GreenStainedGlassPane;
    pub const RED_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::RedStainedGlassPane;
    pub const BLACK_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::BlackStainedGlassPane;
    pub const PRISMARINE: MaterialEnum = MaterialEnum::Prismarine;
    pub const PRISMARINE_BRICKS: MaterialEnum = MaterialEnum::PrismarineBricks;
    pub const DARK_PRISMARINE: MaterialEnum = MaterialEnum::DarkPrismarine;
    pub const PRISMARINE_STAIRS: MaterialEnum = MaterialEnum::PrismarineStairs;
    pub const PRISMARINE_BRICK_STAIRS: MaterialEnum = MaterialEnum::PrismarineBrickStairs;
    pub const DARK_PRISMARINE_STAIRS: MaterialEnum = MaterialEnum::DarkPrismarineStairs;
    pub const SEA_LANTERN: MaterialEnum = MaterialEnum::SeaLantern;
    pub const RED_SANDSTONE: MaterialEnum = MaterialEnum::RedSandstone;
    pub const CHISELED_RED_SANDSTONE: MaterialEnum = MaterialEnum::ChiseledRedSandstone;
    pub const CUT_RED_SANDSTONE: MaterialEnum = MaterialEnum::CutRedSandstone;
    pub const RED_SANDSTONE_STAIRS: MaterialEnum = MaterialEnum::RedSandstoneStairs;
    pub const REPEATING_COMMAND_BLOCK: MaterialEnum = MaterialEnum::RepeatingCommandBlock;
    pub const CHAIN_COMMAND_BLOCK: MaterialEnum = MaterialEnum::ChainCommandBlock;
    pub const MAGMA_BLOCK: MaterialEnum = MaterialEnum::MagmaBlock;
    pub const NETHER_WART_BLOCK: MaterialEnum = MaterialEnum::NetherWartBlock;
    pub const WARPED_WART_BLOCK: MaterialEnum = MaterialEnum::WarpedWartBlock;
    pub const RED_NETHER_BRICKS: MaterialEnum = MaterialEnum::RedNetherBricks;
    pub const BONE_BLOCK: MaterialEnum = MaterialEnum::BoneBlock;
    pub const STRUCTURE_VOID: MaterialEnum = MaterialEnum::StructureVoid;
    pub const SHULKER_BOX: MaterialEnum = MaterialEnum::ShulkerBox;
    pub const WHITE_SHULKER_BOX: MaterialEnum = MaterialEnum::WhiteShulkerBox;
    pub const ORANGE_SHULKER_BOX: MaterialEnum = MaterialEnum::OrangeShulkerBox;
    pub const MAGENTA_SHULKER_BOX: MaterialEnum = MaterialEnum::MagentaShulkerBox;
    pub const LIGHT_BLUE_SHULKER_BOX: MaterialEnum = MaterialEnum::LightBlueShulkerBox;
    pub const YELLOW_SHULKER_BOX: MaterialEnum = MaterialEnum::YellowShulkerBox;
    pub const LIME_SHULKER_BOX: MaterialEnum = MaterialEnum::LimeShulkerBox;
    pub const PINK_SHULKER_BOX: MaterialEnum = MaterialEnum::PinkShulkerBox;
    pub const GRAY_SHULKER_BOX: MaterialEnum = MaterialEnum::GrayShulkerBox;
    pub const LIGHT_GRAY_SHULKER_BOX: MaterialEnum = MaterialEnum::LightGrayShulkerBox;
    pub const CYAN_SHULKER_BOX: MaterialEnum = MaterialEnum::CyanShulkerBox;
    pub const PURPLE_SHULKER_BOX: MaterialEnum = MaterialEnum::PurpleShulkerBox;
    pub const BLUE_SHULKER_BOX: MaterialEnum = MaterialEnum::BlueShulkerBox;
    pub const BROWN_SHULKER_BOX: MaterialEnum = MaterialEnum::BrownShulkerBox;
    pub const GREEN_SHULKER_BOX: MaterialEnum = MaterialEnum::GreenShulkerBox;
    pub const RED_SHULKER_BOX: MaterialEnum = MaterialEnum::RedShulkerBox;
    pub const BLACK_SHULKER_BOX: MaterialEnum = MaterialEnum::BlackShulkerBox;
    pub const WHITE_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::WhiteGlazedTerracotta;
    pub const ORANGE_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::OrangeGlazedTerracotta;
    pub const MAGENTA_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::MagentaGlazedTerracotta;
    pub const LIGHT_BLUE_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::LightBlueGlazedTerracotta;
    pub const YELLOW_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::YellowGlazedTerracotta;
    pub const LIME_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::LimeGlazedTerracotta;
    pub const PINK_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::PinkGlazedTerracotta;
    pub const GRAY_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::GrayGlazedTerracotta;
    pub const LIGHT_GRAY_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::LightGrayGlazedTerracotta;
    pub const CYAN_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::CyanGlazedTerracotta;
    pub const PURPLE_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::PurpleGlazedTerracotta;
    pub const BLUE_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::BlueGlazedTerracotta;
    pub const BROWN_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::BrownGlazedTerracotta;
    pub const GREEN_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::GreenGlazedTerracotta;
    pub const RED_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::RedGlazedTerracotta;
    pub const BLACK_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::BlackGlazedTerracotta;
    pub const WHITE_CONCRETE: MaterialEnum = MaterialEnum::WhiteConcrete;
    pub const ORANGE_CONCRETE: MaterialEnum = MaterialEnum::OrangeConcrete;
    pub const MAGENTA_CONCRETE: MaterialEnum = MaterialEnum::MagentaConcrete;
    pub const LIGHT_BLUE_CONCRETE: MaterialEnum = MaterialEnum::LightBlueConcrete;
    pub const YELLOW_CONCRETE: MaterialEnum = MaterialEnum::YellowConcrete;
    pub const LIME_CONCRETE: MaterialEnum = MaterialEnum::LimeConcrete;
    pub const PINK_CONCRETE: MaterialEnum = MaterialEnum::PinkConcrete;
    pub const GRAY_CONCRETE: MaterialEnum = MaterialEnum::GrayConcrete;
    pub const LIGHT_GRAY_CONCRETE: MaterialEnum = MaterialEnum::LightGrayConcrete;
    pub const CYAN_CONCRETE: MaterialEnum = MaterialEnum::CyanConcrete;
    pub const PURPLE_CONCRETE: MaterialEnum = MaterialEnum::PurpleConcrete;
    pub const BLUE_CONCRETE: MaterialEnum = MaterialEnum::BlueConcrete;
    pub const BROWN_CONCRETE: MaterialEnum = MaterialEnum::BrownConcrete;
    pub const GREEN_CONCRETE: MaterialEnum = MaterialEnum::GreenConcrete;
    pub const RED_CONCRETE: MaterialEnum = MaterialEnum::RedConcrete;
    pub const BLACK_CONCRETE: MaterialEnum = MaterialEnum::BlackConcrete;
    pub const WHITE_CONCRETE_POWDER: MaterialEnum = MaterialEnum::WhiteConcretePowder;
    pub const ORANGE_CONCRETE_POWDER: MaterialEnum = MaterialEnum::OrangeConcretePowder;
    pub const MAGENTA_CONCRETE_POWDER: MaterialEnum = MaterialEnum::MagentaConcretePowder;
    pub const LIGHT_BLUE_CONCRETE_POWDER: MaterialEnum = MaterialEnum::LightBlueConcretePowder;
    pub const YELLOW_CONCRETE_POWDER: MaterialEnum = MaterialEnum::YellowConcretePowder;
    pub const LIME_CONCRETE_POWDER: MaterialEnum = MaterialEnum::LimeConcretePowder;
    pub const PINK_CONCRETE_POWDER: MaterialEnum = MaterialEnum::PinkConcretePowder;
    pub const GRAY_CONCRETE_POWDER: MaterialEnum = MaterialEnum::GrayConcretePowder;
    pub const LIGHT_GRAY_CONCRETE_POWDER: MaterialEnum = MaterialEnum::LightGrayConcretePowder;
    pub const CYAN_CONCRETE_POWDER: MaterialEnum = MaterialEnum::CyanConcretePowder;
    pub const PURPLE_CONCRETE_POWDER: MaterialEnum = MaterialEnum::PurpleConcretePowder;
    pub const BLUE_CONCRETE_POWDER: MaterialEnum = MaterialEnum::BlueConcretePowder;
    pub const BROWN_CONCRETE_POWDER: MaterialEnum = MaterialEnum::BrownConcretePowder;
    pub const GREEN_CONCRETE_POWDER: MaterialEnum = MaterialEnum::GreenConcretePowder;
    pub const RED_CONCRETE_POWDER: MaterialEnum = MaterialEnum::RedConcretePowder;
    pub const BLACK_CONCRETE_POWDER: MaterialEnum = MaterialEnum::BlackConcretePowder;
    pub const TURTLE_EGG: MaterialEnum = MaterialEnum::TurtleEgg;
    pub const SNIFFER_EGG: MaterialEnum = MaterialEnum::SnifferEgg;
    pub const DEAD_TUBE_CORAL_BLOCK: MaterialEnum = MaterialEnum::DeadTubeCoralBlock;
    pub const DEAD_BRAIN_CORAL_BLOCK: MaterialEnum = MaterialEnum::DeadBrainCoralBlock;
    pub const DEAD_BUBBLE_CORAL_BLOCK: MaterialEnum = MaterialEnum::DeadBubbleCoralBlock;
    pub const DEAD_FIRE_CORAL_BLOCK: MaterialEnum = MaterialEnum::DeadFireCoralBlock;
    pub const DEAD_HORN_CORAL_BLOCK: MaterialEnum = MaterialEnum::DeadHornCoralBlock;
    pub const TUBE_CORAL_BLOCK: MaterialEnum = MaterialEnum::TubeCoralBlock;
    pub const BRAIN_CORAL_BLOCK: MaterialEnum = MaterialEnum::BrainCoralBlock;
    pub const BUBBLE_CORAL_BLOCK: MaterialEnum = MaterialEnum::BubbleCoralBlock;
    pub const FIRE_CORAL_BLOCK: MaterialEnum = MaterialEnum::FireCoralBlock;
    pub const HORN_CORAL_BLOCK: MaterialEnum = MaterialEnum::HornCoralBlock;
    pub const TUBE_CORAL: MaterialEnum = MaterialEnum::TubeCoral;
    pub const BRAIN_CORAL: MaterialEnum = MaterialEnum::BrainCoral;
    pub const BUBBLE_CORAL: MaterialEnum = MaterialEnum::BubbleCoral;
    pub const FIRE_CORAL: MaterialEnum = MaterialEnum::FireCoral;
    pub const HORN_CORAL: MaterialEnum = MaterialEnum::HornCoral;
    pub const DEAD_BRAIN_CORAL: MaterialEnum = MaterialEnum::DeadBrainCoral;
    pub const DEAD_BUBBLE_CORAL: MaterialEnum = MaterialEnum::DeadBubbleCoral;
    pub const DEAD_FIRE_CORAL: MaterialEnum = MaterialEnum::DeadFireCoral;
    pub const DEAD_HORN_CORAL: MaterialEnum = MaterialEnum::DeadHornCoral;
    pub const DEAD_TUBE_CORAL: MaterialEnum = MaterialEnum::DeadTubeCoral;
    pub const TUBE_CORAL_FAN: MaterialEnum = MaterialEnum::TubeCoralFan;
    pub const BRAIN_CORAL_FAN: MaterialEnum = MaterialEnum::BrainCoralFan;
    pub const BUBBLE_CORAL_FAN: MaterialEnum = MaterialEnum::BubbleCoralFan;
    pub const FIRE_CORAL_FAN: MaterialEnum = MaterialEnum::FireCoralFan;
    pub const HORN_CORAL_FAN: MaterialEnum = MaterialEnum::HornCoralFan;
    pub const DEAD_TUBE_CORAL_FAN: MaterialEnum = MaterialEnum::DeadTubeCoralFan;
    pub const DEAD_BRAIN_CORAL_FAN: MaterialEnum = MaterialEnum::DeadBrainCoralFan;
    pub const DEAD_BUBBLE_CORAL_FAN: MaterialEnum = MaterialEnum::DeadBubbleCoralFan;
    pub const DEAD_FIRE_CORAL_FAN: MaterialEnum = MaterialEnum::DeadFireCoralFan;
    pub const DEAD_HORN_CORAL_FAN: MaterialEnum = MaterialEnum::DeadHornCoralFan;
    pub const BLUE_ICE: MaterialEnum = MaterialEnum::BlueIce;
    pub const CONDUIT: MaterialEnum = MaterialEnum::Conduit;
    pub const POLISHED_GRANITE_STAIRS: MaterialEnum = MaterialEnum::PolishedGraniteStairs;
    pub const SMOOTH_RED_SANDSTONE_STAIRS: MaterialEnum = MaterialEnum::SmoothRedSandstoneStairs;
    pub const MOSSY_STONE_BRICK_STAIRS: MaterialEnum = MaterialEnum::MossyStoneBrickStairs;
    pub const POLISHED_DIORITE_STAIRS: MaterialEnum = MaterialEnum::PolishedDioriteStairs;
    pub const MOSSY_COBBLESTONE_STAIRS: MaterialEnum = MaterialEnum::MossyCobblestoneStairs;
    pub const END_STONE_BRICK_STAIRS: MaterialEnum = MaterialEnum::EndStoneBrickStairs;
    pub const STONE_STAIRS: MaterialEnum = MaterialEnum::StoneStairs;
    pub const SMOOTH_SANDSTONE_STAIRS: MaterialEnum = MaterialEnum::SmoothSandstoneStairs;
    pub const SMOOTH_QUARTZ_STAIRS: MaterialEnum = MaterialEnum::SmoothQuartzStairs;
    pub const GRANITE_STAIRS: MaterialEnum = MaterialEnum::GraniteStairs;
    pub const ANDESITE_STAIRS: MaterialEnum = MaterialEnum::AndesiteStairs;
    pub const RED_NETHER_BRICK_STAIRS: MaterialEnum = MaterialEnum::RedNetherBrickStairs;
    pub const POLISHED_ANDESITE_STAIRS: MaterialEnum = MaterialEnum::PolishedAndesiteStairs;
    pub const DIORITE_STAIRS: MaterialEnum = MaterialEnum::DioriteStairs;
    pub const COBBLED_DEEPSLATE_STAIRS: MaterialEnum = MaterialEnum::CobbledDeepslateStairs;
    pub const POLISHED_DEEPSLATE_STAIRS: MaterialEnum = MaterialEnum::PolishedDeepslateStairs;
    pub const DEEPSLATE_BRICK_STAIRS: MaterialEnum = MaterialEnum::DeepslateBrickStairs;
    pub const DEEPSLATE_TILE_STAIRS: MaterialEnum = MaterialEnum::DeepslateTileStairs;
    pub const POLISHED_GRANITE_SLAB: MaterialEnum = MaterialEnum::PolishedGraniteSlab;
    pub const SMOOTH_RED_SANDSTONE_SLAB: MaterialEnum = MaterialEnum::SmoothRedSandstoneSlab;
    pub const MOSSY_STONE_BRICK_SLAB: MaterialEnum = MaterialEnum::MossyStoneBrickSlab;
    pub const POLISHED_DIORITE_SLAB: MaterialEnum = MaterialEnum::PolishedDioriteSlab;
    pub const MOSSY_COBBLESTONE_SLAB: MaterialEnum = MaterialEnum::MossyCobblestoneSlab;
    pub const END_STONE_BRICK_SLAB: MaterialEnum = MaterialEnum::EndStoneBrickSlab;
    pub const SMOOTH_SANDSTONE_SLAB: MaterialEnum = MaterialEnum::SmoothSandstoneSlab;
    pub const SMOOTH_QUARTZ_SLAB: MaterialEnum = MaterialEnum::SmoothQuartzSlab;
    pub const GRANITE_SLAB: MaterialEnum = MaterialEnum::GraniteSlab;
    pub const ANDESITE_SLAB: MaterialEnum = MaterialEnum::AndesiteSlab;
    pub const RED_NETHER_BRICK_SLAB: MaterialEnum = MaterialEnum::RedNetherBrickSlab;
    pub const POLISHED_ANDESITE_SLAB: MaterialEnum = MaterialEnum::PolishedAndesiteSlab;
    pub const DIORITE_SLAB: MaterialEnum = MaterialEnum::DioriteSlab;
    pub const COBBLED_DEEPSLATE_SLAB: MaterialEnum = MaterialEnum::CobbledDeepslateSlab;
    pub const POLISHED_DEEPSLATE_SLAB: MaterialEnum = MaterialEnum::PolishedDeepslateSlab;
    pub const DEEPSLATE_BRICK_SLAB: MaterialEnum = MaterialEnum::DeepslateBrickSlab;
    pub const DEEPSLATE_TILE_SLAB: MaterialEnum = MaterialEnum::DeepslateTileSlab;
    pub const SCAFFOLDING: MaterialEnum = MaterialEnum::Scaffolding;
    pub const REDSTONE: MaterialEnum = MaterialEnum::Redstone;
    pub const REDSTONE_TORCH: MaterialEnum = MaterialEnum::RedstoneTorch;
    pub const REDSTONE_BLOCK: MaterialEnum = MaterialEnum::RedstoneBlock;
    pub const REPEATER: MaterialEnum = MaterialEnum::Repeater;
    pub const COMPARATOR: MaterialEnum = MaterialEnum::Comparator;
    pub const PISTON: MaterialEnum = MaterialEnum::Piston;
    pub const STICKY_PISTON: MaterialEnum = MaterialEnum::StickyPiston;
    pub const SLIME_BLOCK: MaterialEnum = MaterialEnum::SlimeBlock;
    pub const HONEY_BLOCK: MaterialEnum = MaterialEnum::HoneyBlock;
    pub const OBSERVER: MaterialEnum = MaterialEnum::Observer;
    pub const HOPPER: MaterialEnum = MaterialEnum::Hopper;
    pub const DISPENSER: MaterialEnum = MaterialEnum::Dispenser;
    pub const DROPPER: MaterialEnum = MaterialEnum::Dropper;
    pub const LECTERN: MaterialEnum = MaterialEnum::Lectern;
    pub const TARGET: MaterialEnum = MaterialEnum::Target;
    pub const LEVER: MaterialEnum = MaterialEnum::Lever;
    pub const LIGHTNING_ROD: MaterialEnum = MaterialEnum::LightningRod;
    pub const DAYLIGHT_DETECTOR: MaterialEnum = MaterialEnum::DaylightDetector;
    pub const SCULK_SENSOR: MaterialEnum = MaterialEnum::SculkSensor;
    pub const CALIBRATED_SCULK_SENSOR: MaterialEnum = MaterialEnum::CalibratedSculkSensor;
    pub const TRIPWIRE_HOOK: MaterialEnum = MaterialEnum::TripwireHook;
    pub const TRAPPED_CHEST: MaterialEnum = MaterialEnum::TrappedChest;
    pub const TNT: MaterialEnum = MaterialEnum::Tnt;
    pub const REDSTONE_LAMP: MaterialEnum = MaterialEnum::RedstoneLamp;
    pub const NOTE_BLOCK: MaterialEnum = MaterialEnum::NoteBlock;
    pub const STONE_BUTTON: MaterialEnum = MaterialEnum::StoneButton;
    pub const POLISHED_BLACKSTONE_BUTTON: MaterialEnum = MaterialEnum::PolishedBlackstoneButton;
    pub const OAK_BUTTON: MaterialEnum = MaterialEnum::OakButton;
    pub const SPRUCE_BUTTON: MaterialEnum = MaterialEnum::SpruceButton;
    pub const BIRCH_BUTTON: MaterialEnum = MaterialEnum::BirchButton;
    pub const JUNGLE_BUTTON: MaterialEnum = MaterialEnum::JungleButton;
    pub const ACACIA_BUTTON: MaterialEnum = MaterialEnum::AcaciaButton;
    pub const CHERRY_BUTTON: MaterialEnum = MaterialEnum::CherryButton;
    pub const DARK_OAK_BUTTON: MaterialEnum = MaterialEnum::DarkOakButton;
    pub const MANGROVE_BUTTON: MaterialEnum = MaterialEnum::MangroveButton;
    pub const BAMBOO_BUTTON: MaterialEnum = MaterialEnum::BambooButton;
    pub const CRIMSON_BUTTON: MaterialEnum = MaterialEnum::CrimsonButton;
    pub const WARPED_BUTTON: MaterialEnum = MaterialEnum::WarpedButton;
    pub const STONE_PRESSURE_PLATE: MaterialEnum = MaterialEnum::StonePressurePlate;
    pub const POLISHED_BLACKSTONE_PRESSURE_PLATE: MaterialEnum =
        MaterialEnum::PolishedBlackstonePressurePlate;
    pub const LIGHT_WEIGHTED_PRESSURE_PLATE: MaterialEnum =
        MaterialEnum::LightWeightedPressurePlate;
    pub const HEAVY_WEIGHTED_PRESSURE_PLATE: MaterialEnum =
        MaterialEnum::HeavyWeightedPressurePlate;
    pub const OAK_PRESSURE_PLATE: MaterialEnum = MaterialEnum::OakPressurePlate;
    pub const SPRUCE_PRESSURE_PLATE: MaterialEnum = MaterialEnum::SprucePressurePlate;
    pub const BIRCH_PRESSURE_PLATE: MaterialEnum = MaterialEnum::BirchPressurePlate;
    pub const JUNGLE_PRESSURE_PLATE: MaterialEnum = MaterialEnum::JunglePressurePlate;
    pub const ACACIA_PRESSURE_PLATE: MaterialEnum = MaterialEnum::AcaciaPressurePlate;
    pub const CHERRY_PRESSURE_PLATE: MaterialEnum = MaterialEnum::CherryPressurePlate;
    pub const DARK_OAK_PRESSURE_PLATE: MaterialEnum = MaterialEnum::DarkOakPressurePlate;
    pub const MANGROVE_PRESSURE_PLATE: MaterialEnum = MaterialEnum::MangrovePressurePlate;
    pub const BAMBOO_PRESSURE_PLATE: MaterialEnum = MaterialEnum::BambooPressurePlate;
    pub const CRIMSON_PRESSURE_PLATE: MaterialEnum = MaterialEnum::CrimsonPressurePlate;
    pub const WARPED_PRESSURE_PLATE: MaterialEnum = MaterialEnum::WarpedPressurePlate;
    pub const IRON_DOOR: MaterialEnum = MaterialEnum::IronDoor;
    pub const OAK_DOOR: MaterialEnum = MaterialEnum::OakDoor;
    pub const SPRUCE_DOOR: MaterialEnum = MaterialEnum::SpruceDoor;
    pub const BIRCH_DOOR: MaterialEnum = MaterialEnum::BirchDoor;
    pub const JUNGLE_DOOR: MaterialEnum = MaterialEnum::JungleDoor;
    pub const ACACIA_DOOR: MaterialEnum = MaterialEnum::AcaciaDoor;
    pub const CHERRY_DOOR: MaterialEnum = MaterialEnum::CherryDoor;
    pub const DARK_OAK_DOOR: MaterialEnum = MaterialEnum::DarkOakDoor;
    pub const MANGROVE_DOOR: MaterialEnum = MaterialEnum::MangroveDoor;
    pub const BAMBOO_DOOR: MaterialEnum = MaterialEnum::BambooDoor;
    pub const CRIMSON_DOOR: MaterialEnum = MaterialEnum::CrimsonDoor;
    pub const WARPED_DOOR: MaterialEnum = MaterialEnum::WarpedDoor;
    pub const IRON_TRAPDOOR: MaterialEnum = MaterialEnum::IronTrapdoor;
    pub const OAK_TRAPDOOR: MaterialEnum = MaterialEnum::OakTrapdoor;
    pub const SPRUCE_TRAPDOOR: MaterialEnum = MaterialEnum::SpruceTrapdoor;
    pub const BIRCH_TRAPDOOR: MaterialEnum = MaterialEnum::BirchTrapdoor;
    pub const JUNGLE_TRAPDOOR: MaterialEnum = MaterialEnum::JungleTrapdoor;
    pub const ACACIA_TRAPDOOR: MaterialEnum = MaterialEnum::AcaciaTrapdoor;
    pub const CHERRY_TRAPDOOR: MaterialEnum = MaterialEnum::CherryTrapdoor;
    pub const DARK_OAK_TRAPDOOR: MaterialEnum = MaterialEnum::DarkOakTrapdoor;
    pub const MANGROVE_TRAPDOOR: MaterialEnum = MaterialEnum::MangroveTrapdoor;
    pub const BAMBOO_TRAPDOOR: MaterialEnum = MaterialEnum::BambooTrapdoor;
    pub const CRIMSON_TRAPDOOR: MaterialEnum = MaterialEnum::CrimsonTrapdoor;
    pub const WARPED_TRAPDOOR: MaterialEnum = MaterialEnum::WarpedTrapdoor;
    pub const OAK_FENCE_GATE: MaterialEnum = MaterialEnum::OakFenceGate;
    pub const SPRUCE_FENCE_GATE: MaterialEnum = MaterialEnum::SpruceFenceGate;
    pub const BIRCH_FENCE_GATE: MaterialEnum = MaterialEnum::BirchFenceGate;
    pub const JUNGLE_FENCE_GATE: MaterialEnum = MaterialEnum::JungleFenceGate;
    pub const ACACIA_FENCE_GATE: MaterialEnum = MaterialEnum::AcaciaFenceGate;
    pub const CHERRY_FENCE_GATE: MaterialEnum = MaterialEnum::CherryFenceGate;
    pub const DARK_OAK_FENCE_GATE: MaterialEnum = MaterialEnum::DarkOakFenceGate;
    pub const MANGROVE_FENCE_GATE: MaterialEnum = MaterialEnum::MangroveFenceGate;
    pub const BAMBOO_FENCE_GATE: MaterialEnum = MaterialEnum::BambooFenceGate;
    pub const CRIMSON_FENCE_GATE: MaterialEnum = MaterialEnum::CrimsonFenceGate;
    pub const WARPED_FENCE_GATE: MaterialEnum = MaterialEnum::WarpedFenceGate;
    pub const POWERED_RAIL: MaterialEnum = MaterialEnum::PoweredRail;
    pub const DETECTOR_RAIL: MaterialEnum = MaterialEnum::DetectorRail;
    pub const RAIL: MaterialEnum = MaterialEnum::Rail;
    pub const ACTIVATOR_RAIL: MaterialEnum = MaterialEnum::ActivatorRail;
    pub const SADDLE: MaterialEnum = MaterialEnum::Saddle;
    pub const MINECART: MaterialEnum = MaterialEnum::Minecart;
    pub const CHEST_MINECART: MaterialEnum = MaterialEnum::ChestMinecart;
    pub const FURNACE_MINECART: MaterialEnum = MaterialEnum::FurnaceMinecart;
    pub const TNT_MINECART: MaterialEnum = MaterialEnum::TntMinecart;
    pub const HOPPER_MINECART: MaterialEnum = MaterialEnum::HopperMinecart;
    pub const CARROT_ON_A_STICK: MaterialEnum = MaterialEnum::CarrotOnAStick;
    pub const WARPED_FUNGUS_ON_A_STICK: MaterialEnum = MaterialEnum::WarpedFungusOnAStick;
    pub const ELYTRA: MaterialEnum = MaterialEnum::Elytra;
    pub const OAK_BOAT: MaterialEnum = MaterialEnum::OakBoat;
    pub const OAK_CHEST_BOAT: MaterialEnum = MaterialEnum::OakChestBoat;
    pub const SPRUCE_BOAT: MaterialEnum = MaterialEnum::SpruceBoat;
    pub const SPRUCE_CHEST_BOAT: MaterialEnum = MaterialEnum::SpruceChestBoat;
    pub const BIRCH_BOAT: MaterialEnum = MaterialEnum::BirchBoat;
    pub const BIRCH_CHEST_BOAT: MaterialEnum = MaterialEnum::BirchChestBoat;
    pub const JUNGLE_BOAT: MaterialEnum = MaterialEnum::JungleBoat;
    pub const JUNGLE_CHEST_BOAT: MaterialEnum = MaterialEnum::JungleChestBoat;
    pub const ACACIA_BOAT: MaterialEnum = MaterialEnum::AcaciaBoat;
    pub const ACACIA_CHEST_BOAT: MaterialEnum = MaterialEnum::AcaciaChestBoat;
    pub const CHERRY_BOAT: MaterialEnum = MaterialEnum::CherryBoat;
    pub const CHERRY_CHEST_BOAT: MaterialEnum = MaterialEnum::CherryChestBoat;
    pub const DARK_OAK_BOAT: MaterialEnum = MaterialEnum::DarkOakBoat;
    pub const DARK_OAK_CHEST_BOAT: MaterialEnum = MaterialEnum::DarkOakChestBoat;
    pub const MANGROVE_BOAT: MaterialEnum = MaterialEnum::MangroveBoat;
    pub const MANGROVE_CHEST_BOAT: MaterialEnum = MaterialEnum::MangroveChestBoat;
    pub const BAMBOO_RAFT: MaterialEnum = MaterialEnum::BambooRaft;
    pub const BAMBOO_CHEST_RAFT: MaterialEnum = MaterialEnum::BambooChestRaft;
    pub const STRUCTURE_BLOCK: MaterialEnum = MaterialEnum::StructureBlock;
    pub const JIGSAW: MaterialEnum = MaterialEnum::Jigsaw;
    pub const TURTLE_HELMET: MaterialEnum = MaterialEnum::TurtleHelmet;
    pub const SCUTE: MaterialEnum = MaterialEnum::Scute;
    pub const FLINT_AND_STEEL: MaterialEnum = MaterialEnum::FlintAndSteel;
    pub const APPLE: MaterialEnum = MaterialEnum::Apple;
    pub const BOW: MaterialEnum = MaterialEnum::Bow;
    pub const ARROW: MaterialEnum = MaterialEnum::Arrow;
    pub const COAL: MaterialEnum = MaterialEnum::Coal;
    pub const CHARCOAL: MaterialEnum = MaterialEnum::Charcoal;
    pub const DIAMOND: MaterialEnum = MaterialEnum::Diamond;
    pub const EMERALD: MaterialEnum = MaterialEnum::Emerald;
    pub const LAPIS_LAZULI: MaterialEnum = MaterialEnum::LapisLazuli;
    pub const QUARTZ: MaterialEnum = MaterialEnum::Quartz;
    pub const AMETHYST_SHARD: MaterialEnum = MaterialEnum::AmethystShard;
    pub const RAW_IRON: MaterialEnum = MaterialEnum::RawIron;
    pub const IRON_INGOT: MaterialEnum = MaterialEnum::IronIngot;
    pub const RAW_COPPER: MaterialEnum = MaterialEnum::RawCopper;
    pub const COPPER_INGOT: MaterialEnum = MaterialEnum::CopperIngot;
    pub const RAW_GOLD: MaterialEnum = MaterialEnum::RawGold;
    pub const GOLD_INGOT: MaterialEnum = MaterialEnum::GoldIngot;
    pub const NETHERITE_INGOT: MaterialEnum = MaterialEnum::NetheriteIngot;
    pub const NETHERITE_SCRAP: MaterialEnum = MaterialEnum::NetheriteScrap;
    pub const WOODEN_SWORD: MaterialEnum = MaterialEnum::WoodenSword;
    pub const WOODEN_SHOVEL: MaterialEnum = MaterialEnum::WoodenShovel;
    pub const WOODEN_PICKAXE: MaterialEnum = MaterialEnum::WoodenPickaxe;
    pub const WOODEN_AXE: MaterialEnum = MaterialEnum::WoodenAxe;
    pub const WOODEN_HOE: MaterialEnum = MaterialEnum::WoodenHoe;
    pub const STONE_SWORD: MaterialEnum = MaterialEnum::StoneSword;
    pub const STONE_SHOVEL: MaterialEnum = MaterialEnum::StoneShovel;
    pub const STONE_PICKAXE: MaterialEnum = MaterialEnum::StonePickaxe;
    pub const STONE_AXE: MaterialEnum = MaterialEnum::StoneAxe;
    pub const STONE_HOE: MaterialEnum = MaterialEnum::StoneHoe;
    pub const GOLDEN_SWORD: MaterialEnum = MaterialEnum::GoldenSword;
    pub const GOLDEN_SHOVEL: MaterialEnum = MaterialEnum::GoldenShovel;
    pub const GOLDEN_PICKAXE: MaterialEnum = MaterialEnum::GoldenPickaxe;
    pub const GOLDEN_AXE: MaterialEnum = MaterialEnum::GoldenAxe;
    pub const GOLDEN_HOE: MaterialEnum = MaterialEnum::GoldenHoe;
    pub const IRON_SWORD: MaterialEnum = MaterialEnum::IronSword;
    pub const IRON_SHOVEL: MaterialEnum = MaterialEnum::IronShovel;
    pub const IRON_PICKAXE: MaterialEnum = MaterialEnum::IronPickaxe;
    pub const IRON_AXE: MaterialEnum = MaterialEnum::IronAxe;
    pub const IRON_HOE: MaterialEnum = MaterialEnum::IronHoe;
    pub const DIAMOND_SWORD: MaterialEnum = MaterialEnum::DiamondSword;
    pub const DIAMOND_SHOVEL: MaterialEnum = MaterialEnum::DiamondShovel;
    pub const DIAMOND_PICKAXE: MaterialEnum = MaterialEnum::DiamondPickaxe;
    pub const DIAMOND_AXE: MaterialEnum = MaterialEnum::DiamondAxe;
    pub const DIAMOND_HOE: MaterialEnum = MaterialEnum::DiamondHoe;
    pub const NETHERITE_SWORD: MaterialEnum = MaterialEnum::NetheriteSword;
    pub const NETHERITE_SHOVEL: MaterialEnum = MaterialEnum::NetheriteShovel;
    pub const NETHERITE_PICKAXE: MaterialEnum = MaterialEnum::NetheritePickaxe;
    pub const NETHERITE_AXE: MaterialEnum = MaterialEnum::NetheriteAxe;
    pub const NETHERITE_HOE: MaterialEnum = MaterialEnum::NetheriteHoe;
    pub const STICK: MaterialEnum = MaterialEnum::Stick;
    pub const BOWL: MaterialEnum = MaterialEnum::Bowl;
    pub const MUSHROOM_STEW: MaterialEnum = MaterialEnum::MushroomStew;
    pub const STRING: MaterialEnum = MaterialEnum::String;
    pub const FEATHER: MaterialEnum = MaterialEnum::Feather;
    pub const GUNPOWDER: MaterialEnum = MaterialEnum::Gunpowder;
    pub const WHEAT_SEEDS: MaterialEnum = MaterialEnum::WheatSeeds;
    pub const WHEAT: MaterialEnum = MaterialEnum::Wheat;
    pub const BREAD: MaterialEnum = MaterialEnum::Bread;
    pub const LEATHER_HELMET: MaterialEnum = MaterialEnum::LeatherHelmet;
    pub const LEATHER_CHESTPLATE: MaterialEnum = MaterialEnum::LeatherChestplate;
    pub const LEATHER_LEGGINGS: MaterialEnum = MaterialEnum::LeatherLeggings;
    pub const LEATHER_BOOTS: MaterialEnum = MaterialEnum::LeatherBoots;
    pub const CHAINMAIL_HELMET: MaterialEnum = MaterialEnum::ChainmailHelmet;
    pub const CHAINMAIL_CHESTPLATE: MaterialEnum = MaterialEnum::ChainmailChestplate;
    pub const CHAINMAIL_LEGGINGS: MaterialEnum = MaterialEnum::ChainmailLeggings;
    pub const CHAINMAIL_BOOTS: MaterialEnum = MaterialEnum::ChainmailBoots;
    pub const IRON_HELMET: MaterialEnum = MaterialEnum::IronHelmet;
    pub const IRON_CHESTPLATE: MaterialEnum = MaterialEnum::IronChestplate;
    pub const IRON_LEGGINGS: MaterialEnum = MaterialEnum::IronLeggings;
    pub const IRON_BOOTS: MaterialEnum = MaterialEnum::IronBoots;
    pub const DIAMOND_HELMET: MaterialEnum = MaterialEnum::DiamondHelmet;
    pub const DIAMOND_CHESTPLATE: MaterialEnum = MaterialEnum::DiamondChestplate;
    pub const DIAMOND_LEGGINGS: MaterialEnum = MaterialEnum::DiamondLeggings;
    pub const DIAMOND_BOOTS: MaterialEnum = MaterialEnum::DiamondBoots;
    pub const GOLDEN_HELMET: MaterialEnum = MaterialEnum::GoldenHelmet;
    pub const GOLDEN_CHESTPLATE: MaterialEnum = MaterialEnum::GoldenChestplate;
    pub const GOLDEN_LEGGINGS: MaterialEnum = MaterialEnum::GoldenLeggings;
    pub const GOLDEN_BOOTS: MaterialEnum = MaterialEnum::GoldenBoots;
    pub const NETHERITE_HELMET: MaterialEnum = MaterialEnum::NetheriteHelmet;
    pub const NETHERITE_CHESTPLATE: MaterialEnum = MaterialEnum::NetheriteChestplate;
    pub const NETHERITE_LEGGINGS: MaterialEnum = MaterialEnum::NetheriteLeggings;
    pub const NETHERITE_BOOTS: MaterialEnum = MaterialEnum::NetheriteBoots;
    pub const FLINT: MaterialEnum = MaterialEnum::Flint;
    pub const PORKCHOP: MaterialEnum = MaterialEnum::Porkchop;
    pub const COOKED_PORKCHOP: MaterialEnum = MaterialEnum::CookedPorkchop;
    pub const PAINTING: MaterialEnum = MaterialEnum::Painting;
    pub const GOLDEN_APPLE: MaterialEnum = MaterialEnum::GoldenApple;
    pub const ENCHANTED_GOLDEN_APPLE: MaterialEnum = MaterialEnum::EnchantedGoldenApple;
    pub const OAK_SIGN: MaterialEnum = MaterialEnum::OakSign;
    pub const SPRUCE_SIGN: MaterialEnum = MaterialEnum::SpruceSign;
    pub const BIRCH_SIGN: MaterialEnum = MaterialEnum::BirchSign;
    pub const JUNGLE_SIGN: MaterialEnum = MaterialEnum::JungleSign;
    pub const ACACIA_SIGN: MaterialEnum = MaterialEnum::AcaciaSign;
    pub const CHERRY_SIGN: MaterialEnum = MaterialEnum::CherrySign;
    pub const DARK_OAK_SIGN: MaterialEnum = MaterialEnum::DarkOakSign;
    pub const MANGROVE_SIGN: MaterialEnum = MaterialEnum::MangroveSign;
    pub const BAMBOO_SIGN: MaterialEnum = MaterialEnum::BambooSign;
    pub const CRIMSON_SIGN: MaterialEnum = MaterialEnum::CrimsonSign;
    pub const WARPED_SIGN: MaterialEnum = MaterialEnum::WarpedSign;
    pub const OAK_HANGING_SIGN: MaterialEnum = MaterialEnum::OakHangingSign;
    pub const SPRUCE_HANGING_SIGN: MaterialEnum = MaterialEnum::SpruceHangingSign;
    pub const BIRCH_HANGING_SIGN: MaterialEnum = MaterialEnum::BirchHangingSign;
    pub const JUNGLE_HANGING_SIGN: MaterialEnum = MaterialEnum::JungleHangingSign;
    pub const ACACIA_HANGING_SIGN: MaterialEnum = MaterialEnum::AcaciaHangingSign;
    pub const CHERRY_HANGING_SIGN: MaterialEnum = MaterialEnum::CherryHangingSign;
    pub const DARK_OAK_HANGING_SIGN: MaterialEnum = MaterialEnum::DarkOakHangingSign;
    pub const MANGROVE_HANGING_SIGN: MaterialEnum = MaterialEnum::MangroveHangingSign;
    pub const BAMBOO_HANGING_SIGN: MaterialEnum = MaterialEnum::BambooHangingSign;
    pub const CRIMSON_HANGING_SIGN: MaterialEnum = MaterialEnum::CrimsonHangingSign;
    pub const WARPED_HANGING_SIGN: MaterialEnum = MaterialEnum::WarpedHangingSign;
    pub const BUCKET: MaterialEnum = MaterialEnum::Bucket;
    pub const WATER_BUCKET: MaterialEnum = MaterialEnum::WaterBucket;
    pub const LAVA_BUCKET: MaterialEnum = MaterialEnum::LavaBucket;
    pub const POWDER_SNOW_BUCKET: MaterialEnum = MaterialEnum::PowderSnowBucket;
    pub const SNOWBALL: MaterialEnum = MaterialEnum::Snowball;
    pub const LEATHER: MaterialEnum = MaterialEnum::Leather;
    pub const MILK_BUCKET: MaterialEnum = MaterialEnum::MilkBucket;
    pub const PUFFERFISH_BUCKET: MaterialEnum = MaterialEnum::PufferfishBucket;
    pub const SALMON_BUCKET: MaterialEnum = MaterialEnum::SalmonBucket;
    pub const COD_BUCKET: MaterialEnum = MaterialEnum::CodBucket;
    pub const TROPICAL_FISH_BUCKET: MaterialEnum = MaterialEnum::TropicalFishBucket;
    pub const AXOLOTL_BUCKET: MaterialEnum = MaterialEnum::AxolotlBucket;
    pub const TADPOLE_BUCKET: MaterialEnum = MaterialEnum::TadpoleBucket;
    pub const BRICK: MaterialEnum = MaterialEnum::Brick;
    pub const CLAY_BALL: MaterialEnum = MaterialEnum::ClayBall;
    pub const DRIED_KELP_BLOCK: MaterialEnum = MaterialEnum::DriedKelpBlock;
    pub const PAPER: MaterialEnum = MaterialEnum::Paper;
    pub const BOOK: MaterialEnum = MaterialEnum::Book;
    pub const SLIME_BALL: MaterialEnum = MaterialEnum::SlimeBall;
    pub const EGG: MaterialEnum = MaterialEnum::Egg;
    pub const COMPASS: MaterialEnum = MaterialEnum::Compass;
    pub const RECOVERY_COMPASS: MaterialEnum = MaterialEnum::RecoveryCompass;
    pub const BUNDLE: MaterialEnum = MaterialEnum::Bundle;
    pub const FISHING_ROD: MaterialEnum = MaterialEnum::FishingRod;
    pub const CLOCK: MaterialEnum = MaterialEnum::Clock;
    pub const SPYGLASS: MaterialEnum = MaterialEnum::Spyglass;
    pub const GLOWSTONE_DUST: MaterialEnum = MaterialEnum::GlowstoneDust;
    pub const COD: MaterialEnum = MaterialEnum::Cod;
    pub const SALMON: MaterialEnum = MaterialEnum::Salmon;
    pub const TROPICAL_FISH: MaterialEnum = MaterialEnum::TropicalFish;
    pub const PUFFERFISH: MaterialEnum = MaterialEnum::Pufferfish;
    pub const COOKED_COD: MaterialEnum = MaterialEnum::CookedCod;
    pub const COOKED_SALMON: MaterialEnum = MaterialEnum::CookedSalmon;
    pub const INK_SAC: MaterialEnum = MaterialEnum::InkSac;
    pub const GLOW_INK_SAC: MaterialEnum = MaterialEnum::GlowInkSac;
    pub const COCOA_BEANS: MaterialEnum = MaterialEnum::CocoaBeans;
    pub const WHITE_DYE: MaterialEnum = MaterialEnum::WhiteDye;
    pub const ORANGE_DYE: MaterialEnum = MaterialEnum::OrangeDye;
    pub const MAGENTA_DYE: MaterialEnum = MaterialEnum::MagentaDye;
    pub const LIGHT_BLUE_DYE: MaterialEnum = MaterialEnum::LightBlueDye;
    pub const YELLOW_DYE: MaterialEnum = MaterialEnum::YellowDye;
    pub const LIME_DYE: MaterialEnum = MaterialEnum::LimeDye;
    pub const PINK_DYE: MaterialEnum = MaterialEnum::PinkDye;
    pub const GRAY_DYE: MaterialEnum = MaterialEnum::GrayDye;
    pub const LIGHT_GRAY_DYE: MaterialEnum = MaterialEnum::LightGrayDye;
    pub const CYAN_DYE: MaterialEnum = MaterialEnum::CyanDye;
    pub const PURPLE_DYE: MaterialEnum = MaterialEnum::PurpleDye;
    pub const BLUE_DYE: MaterialEnum = MaterialEnum::BlueDye;
    pub const BROWN_DYE: MaterialEnum = MaterialEnum::BrownDye;
    pub const GREEN_DYE: MaterialEnum = MaterialEnum::GreenDye;
    pub const RED_DYE: MaterialEnum = MaterialEnum::RedDye;
    pub const BLACK_DYE: MaterialEnum = MaterialEnum::BlackDye;
    pub const BONE_MEAL: MaterialEnum = MaterialEnum::BoneMeal;
    pub const BONE: MaterialEnum = MaterialEnum::Bone;
    pub const SUGAR: MaterialEnum = MaterialEnum::Sugar;
    pub const CAKE: MaterialEnum = MaterialEnum::Cake;
    pub const WHITE_BED: MaterialEnum = MaterialEnum::WhiteBed;
    pub const ORANGE_BED: MaterialEnum = MaterialEnum::OrangeBed;
    pub const MAGENTA_BED: MaterialEnum = MaterialEnum::MagentaBed;
    pub const LIGHT_BLUE_BED: MaterialEnum = MaterialEnum::LightBlueBed;
    pub const YELLOW_BED: MaterialEnum = MaterialEnum::YellowBed;
    pub const LIME_BED: MaterialEnum = MaterialEnum::LimeBed;
    pub const PINK_BED: MaterialEnum = MaterialEnum::PinkBed;
    pub const GRAY_BED: MaterialEnum = MaterialEnum::GrayBed;
    pub const LIGHT_GRAY_BED: MaterialEnum = MaterialEnum::LightGrayBed;
    pub const CYAN_BED: MaterialEnum = MaterialEnum::CyanBed;
    pub const PURPLE_BED: MaterialEnum = MaterialEnum::PurpleBed;
    pub const BLUE_BED: MaterialEnum = MaterialEnum::BlueBed;
    pub const BROWN_BED: MaterialEnum = MaterialEnum::BrownBed;
    pub const GREEN_BED: MaterialEnum = MaterialEnum::GreenBed;
    pub const RED_BED: MaterialEnum = MaterialEnum::RedBed;
    pub const BLACK_BED: MaterialEnum = MaterialEnum::BlackBed;
    pub const COOKIE: MaterialEnum = MaterialEnum::Cookie;
    pub const FILLED_MAP: MaterialEnum = MaterialEnum::FilledMap;
    pub const SHEARS: MaterialEnum = MaterialEnum::Shears;
    pub const MELON_SLICE: MaterialEnum = MaterialEnum::MelonSlice;
    pub const DRIED_KELP: MaterialEnum = MaterialEnum::DriedKelp;
    pub const PUMPKIN_SEEDS: MaterialEnum = MaterialEnum::PumpkinSeeds;
    pub const MELON_SEEDS: MaterialEnum = MaterialEnum::MelonSeeds;
    pub const BEEF: MaterialEnum = MaterialEnum::Beef;
    pub const COOKED_BEEF: MaterialEnum = MaterialEnum::CookedBeef;
    pub const CHICKEN: MaterialEnum = MaterialEnum::Chicken;
    pub const COOKED_CHICKEN: MaterialEnum = MaterialEnum::CookedChicken;
    pub const ROTTEN_FLESH: MaterialEnum = MaterialEnum::RottenFlesh;
    pub const ENDER_PEARL: MaterialEnum = MaterialEnum::EnderPearl;
    pub const BLAZE_ROD: MaterialEnum = MaterialEnum::BlazeRod;
    pub const GHAST_TEAR: MaterialEnum = MaterialEnum::GhastTear;
    pub const GOLD_NUGGET: MaterialEnum = MaterialEnum::GoldNugget;
    pub const NETHER_WART: MaterialEnum = MaterialEnum::NetherWart;
    pub const POTION: MaterialEnum = MaterialEnum::Potion;
    pub const GLASS_BOTTLE: MaterialEnum = MaterialEnum::GlassBottle;
    pub const SPIDER_EYE: MaterialEnum = MaterialEnum::SpiderEye;
    pub const FERMENTED_SPIDER_EYE: MaterialEnum = MaterialEnum::FermentedSpiderEye;
    pub const BLAZE_POWDER: MaterialEnum = MaterialEnum::BlazePowder;
    pub const MAGMA_CREAM: MaterialEnum = MaterialEnum::MagmaCream;
    pub const BREWING_STAND: MaterialEnum = MaterialEnum::BrewingStand;
    pub const CAULDRON: MaterialEnum = MaterialEnum::Cauldron;
    pub const ENDER_EYE: MaterialEnum = MaterialEnum::EnderEye;
    pub const GLISTERING_MELON_SLICE: MaterialEnum = MaterialEnum::GlisteringMelonSlice;
    pub const ALLAY_SPAWN_EGG: MaterialEnum = MaterialEnum::AllaySpawnEgg;
    pub const AXOLOTL_SPAWN_EGG: MaterialEnum = MaterialEnum::AxolotlSpawnEgg;
    pub const BAT_SPAWN_EGG: MaterialEnum = MaterialEnum::BatSpawnEgg;
    pub const BEE_SPAWN_EGG: MaterialEnum = MaterialEnum::BeeSpawnEgg;
    pub const BLAZE_SPAWN_EGG: MaterialEnum = MaterialEnum::BlazeSpawnEgg;
    pub const CAT_SPAWN_EGG: MaterialEnum = MaterialEnum::CatSpawnEgg;
    pub const CAMEL_SPAWN_EGG: MaterialEnum = MaterialEnum::CamelSpawnEgg;
    pub const CAVE_SPIDER_SPAWN_EGG: MaterialEnum = MaterialEnum::CaveSpiderSpawnEgg;
    pub const CHICKEN_SPAWN_EGG: MaterialEnum = MaterialEnum::ChickenSpawnEgg;
    pub const COD_SPAWN_EGG: MaterialEnum = MaterialEnum::CodSpawnEgg;
    pub const COW_SPAWN_EGG: MaterialEnum = MaterialEnum::CowSpawnEgg;
    pub const CREEPER_SPAWN_EGG: MaterialEnum = MaterialEnum::CreeperSpawnEgg;
    pub const DOLPHIN_SPAWN_EGG: MaterialEnum = MaterialEnum::DolphinSpawnEgg;
    pub const DONKEY_SPAWN_EGG: MaterialEnum = MaterialEnum::DonkeySpawnEgg;
    pub const DROWNED_SPAWN_EGG: MaterialEnum = MaterialEnum::DrownedSpawnEgg;
    pub const ELDER_GUARDIAN_SPAWN_EGG: MaterialEnum = MaterialEnum::ElderGuardianSpawnEgg;
    pub const ENDER_DRAGON_SPAWN_EGG: MaterialEnum = MaterialEnum::EnderDragonSpawnEgg;
    pub const ENDERMAN_SPAWN_EGG: MaterialEnum = MaterialEnum::EndermanSpawnEgg;
    pub const ENDERMITE_SPAWN_EGG: MaterialEnum = MaterialEnum::EndermiteSpawnEgg;
    pub const EVOKER_SPAWN_EGG: MaterialEnum = MaterialEnum::EvokerSpawnEgg;
    pub const FOX_SPAWN_EGG: MaterialEnum = MaterialEnum::FoxSpawnEgg;
    pub const FROG_SPAWN_EGG: MaterialEnum = MaterialEnum::FrogSpawnEgg;
    pub const GHAST_SPAWN_EGG: MaterialEnum = MaterialEnum::GhastSpawnEgg;
    pub const GLOW_SQUID_SPAWN_EGG: MaterialEnum = MaterialEnum::GlowSquidSpawnEgg;
    pub const GOAT_SPAWN_EGG: MaterialEnum = MaterialEnum::GoatSpawnEgg;
    pub const GUARDIAN_SPAWN_EGG: MaterialEnum = MaterialEnum::GuardianSpawnEgg;
    pub const HOGLIN_SPAWN_EGG: MaterialEnum = MaterialEnum::HoglinSpawnEgg;
    pub const HORSE_SPAWN_EGG: MaterialEnum = MaterialEnum::HorseSpawnEgg;
    pub const HUSK_SPAWN_EGG: MaterialEnum = MaterialEnum::HuskSpawnEgg;
    pub const IRON_GOLEM_SPAWN_EGG: MaterialEnum = MaterialEnum::IronGolemSpawnEgg;
    pub const LLAMA_SPAWN_EGG: MaterialEnum = MaterialEnum::LlamaSpawnEgg;
    pub const MAGMA_CUBE_SPAWN_EGG: MaterialEnum = MaterialEnum::MagmaCubeSpawnEgg;
    pub const MOOSHROOM_SPAWN_EGG: MaterialEnum = MaterialEnum::MooshroomSpawnEgg;
    pub const MULE_SPAWN_EGG: MaterialEnum = MaterialEnum::MuleSpawnEgg;
    pub const OCELOT_SPAWN_EGG: MaterialEnum = MaterialEnum::OcelotSpawnEgg;
    pub const PANDA_SPAWN_EGG: MaterialEnum = MaterialEnum::PandaSpawnEgg;
    pub const PARROT_SPAWN_EGG: MaterialEnum = MaterialEnum::ParrotSpawnEgg;
    pub const PHANTOM_SPAWN_EGG: MaterialEnum = MaterialEnum::PhantomSpawnEgg;
    pub const PIG_SPAWN_EGG: MaterialEnum = MaterialEnum::PigSpawnEgg;
    pub const PIGLIN_SPAWN_EGG: MaterialEnum = MaterialEnum::PiglinSpawnEgg;
    pub const PIGLIN_BRUTE_SPAWN_EGG: MaterialEnum = MaterialEnum::PiglinBruteSpawnEgg;
    pub const PILLAGER_SPAWN_EGG: MaterialEnum = MaterialEnum::PillagerSpawnEgg;
    pub const POLAR_BEAR_SPAWN_EGG: MaterialEnum = MaterialEnum::PolarBearSpawnEgg;
    pub const PUFFERFISH_SPAWN_EGG: MaterialEnum = MaterialEnum::PufferfishSpawnEgg;
    pub const RABBIT_SPAWN_EGG: MaterialEnum = MaterialEnum::RabbitSpawnEgg;
    pub const RAVAGER_SPAWN_EGG: MaterialEnum = MaterialEnum::RavagerSpawnEgg;
    pub const SALMON_SPAWN_EGG: MaterialEnum = MaterialEnum::SalmonSpawnEgg;
    pub const SHEEP_SPAWN_EGG: MaterialEnum = MaterialEnum::SheepSpawnEgg;
    pub const SHULKER_SPAWN_EGG: MaterialEnum = MaterialEnum::ShulkerSpawnEgg;
    pub const SILVERFISH_SPAWN_EGG: MaterialEnum = MaterialEnum::SilverfishSpawnEgg;
    pub const SKELETON_SPAWN_EGG: MaterialEnum = MaterialEnum::SkeletonSpawnEgg;
    pub const SKELETON_HORSE_SPAWN_EGG: MaterialEnum = MaterialEnum::SkeletonHorseSpawnEgg;
    pub const SLIME_SPAWN_EGG: MaterialEnum = MaterialEnum::SlimeSpawnEgg;
    pub const SNIFFER_SPAWN_EGG: MaterialEnum = MaterialEnum::SnifferSpawnEgg;
    pub const SNOW_GOLEM_SPAWN_EGG: MaterialEnum = MaterialEnum::SnowGolemSpawnEgg;
    pub const SPIDER_SPAWN_EGG: MaterialEnum = MaterialEnum::SpiderSpawnEgg;
    pub const SQUID_SPAWN_EGG: MaterialEnum = MaterialEnum::SquidSpawnEgg;
    pub const STRAY_SPAWN_EGG: MaterialEnum = MaterialEnum::StraySpawnEgg;
    pub const STRIDER_SPAWN_EGG: MaterialEnum = MaterialEnum::StriderSpawnEgg;
    pub const TADPOLE_SPAWN_EGG: MaterialEnum = MaterialEnum::TadpoleSpawnEgg;
    pub const TRADER_LLAMA_SPAWN_EGG: MaterialEnum = MaterialEnum::TraderLlamaSpawnEgg;
    pub const TROPICAL_FISH_SPAWN_EGG: MaterialEnum = MaterialEnum::TropicalFishSpawnEgg;
    pub const TURTLE_SPAWN_EGG: MaterialEnum = MaterialEnum::TurtleSpawnEgg;
    pub const VEX_SPAWN_EGG: MaterialEnum = MaterialEnum::VexSpawnEgg;
    pub const VILLAGER_SPAWN_EGG: MaterialEnum = MaterialEnum::VillagerSpawnEgg;
    pub const VINDICATOR_SPAWN_EGG: MaterialEnum = MaterialEnum::VindicatorSpawnEgg;
    pub const WANDERING_TRADER_SPAWN_EGG: MaterialEnum = MaterialEnum::WanderingTraderSpawnEgg;
    pub const WARDEN_SPAWN_EGG: MaterialEnum = MaterialEnum::WardenSpawnEgg;
    pub const WITCH_SPAWN_EGG: MaterialEnum = MaterialEnum::WitchSpawnEgg;
    pub const WITHER_SPAWN_EGG: MaterialEnum = MaterialEnum::WitherSpawnEgg;
    pub const WITHER_SKELETON_SPAWN_EGG: MaterialEnum = MaterialEnum::WitherSkeletonSpawnEgg;
    pub const WOLF_SPAWN_EGG: MaterialEnum = MaterialEnum::WolfSpawnEgg;
    pub const ZOGLIN_SPAWN_EGG: MaterialEnum = MaterialEnum::ZoglinSpawnEgg;
    pub const ZOMBIE_SPAWN_EGG: MaterialEnum = MaterialEnum::ZombieSpawnEgg;
    pub const ZOMBIE_HORSE_SPAWN_EGG: MaterialEnum = MaterialEnum::ZombieHorseSpawnEgg;
    pub const ZOMBIE_VILLAGER_SPAWN_EGG: MaterialEnum = MaterialEnum::ZombieVillagerSpawnEgg;
    pub const ZOMBIFIED_PIGLIN_SPAWN_EGG: MaterialEnum = MaterialEnum::ZombifiedPiglinSpawnEgg;
    pub const EXPERIENCE_BOTTLE: MaterialEnum = MaterialEnum::ExperienceBottle;
    pub const FIRE_CHARGE: MaterialEnum = MaterialEnum::FireCharge;
    pub const WRITABLE_BOOK: MaterialEnum = MaterialEnum::WritableBook;
    pub const WRITTEN_BOOK: MaterialEnum = MaterialEnum::WrittenBook;
    pub const ITEM_FRAME: MaterialEnum = MaterialEnum::ItemFrame;
    pub const GLOW_ITEM_FRAME: MaterialEnum = MaterialEnum::GlowItemFrame;
    pub const FLOWER_POT: MaterialEnum = MaterialEnum::FlowerPot;
    pub const CARROT: MaterialEnum = MaterialEnum::Carrot;
    pub const POTATO: MaterialEnum = MaterialEnum::Potato;
    pub const BAKED_POTATO: MaterialEnum = MaterialEnum::BakedPotato;
    pub const POISONOUS_POTATO: MaterialEnum = MaterialEnum::PoisonousPotato;
    pub const MAP: MaterialEnum = MaterialEnum::Map;
    pub const GOLDEN_CARROT: MaterialEnum = MaterialEnum::GoldenCarrot;
    pub const SKELETON_SKULL: MaterialEnum = MaterialEnum::SkeletonSkull;
    pub const WITHER_SKELETON_SKULL: MaterialEnum = MaterialEnum::WitherSkeletonSkull;
    pub const PLAYER_HEAD: MaterialEnum = MaterialEnum::PlayerHead;
    pub const ZOMBIE_HEAD: MaterialEnum = MaterialEnum::ZombieHead;
    pub const CREEPER_HEAD: MaterialEnum = MaterialEnum::CreeperHead;
    pub const DRAGON_HEAD: MaterialEnum = MaterialEnum::DragonHead;
    pub const PIGLIN_HEAD: MaterialEnum = MaterialEnum::PiglinHead;
    pub const NETHER_STAR: MaterialEnum = MaterialEnum::NetherStar;
    pub const PUMPKIN_PIE: MaterialEnum = MaterialEnum::PumpkinPie;
    pub const FIREWORK_ROCKET: MaterialEnum = MaterialEnum::FireworkRocket;
    pub const FIREWORK_STAR: MaterialEnum = MaterialEnum::FireworkStar;
    pub const ENCHANTED_BOOK: MaterialEnum = MaterialEnum::EnchantedBook;
    pub const NETHER_BRICK: MaterialEnum = MaterialEnum::NetherBrick;
    pub const PRISMARINE_SHARD: MaterialEnum = MaterialEnum::PrismarineShard;
    pub const PRISMARINE_CRYSTALS: MaterialEnum = MaterialEnum::PrismarineCrystals;
    pub const RABBIT: MaterialEnum = MaterialEnum::Rabbit;
    pub const COOKED_RABBIT: MaterialEnum = MaterialEnum::CookedRabbit;
    pub const RABBIT_STEW: MaterialEnum = MaterialEnum::RabbitStew;
    pub const RABBIT_FOOT: MaterialEnum = MaterialEnum::RabbitFoot;
    pub const RABBIT_HIDE: MaterialEnum = MaterialEnum::RabbitHide;
    pub const ARMOR_STAND: MaterialEnum = MaterialEnum::ArmorStand;
    pub const IRON_HORSE_ARMOR: MaterialEnum = MaterialEnum::IronHorseArmor;
    pub const GOLDEN_HORSE_ARMOR: MaterialEnum = MaterialEnum::GoldenHorseArmor;
    pub const DIAMOND_HORSE_ARMOR: MaterialEnum = MaterialEnum::DiamondHorseArmor;
    pub const LEATHER_HORSE_ARMOR: MaterialEnum = MaterialEnum::LeatherHorseArmor;
    pub const LEAD: MaterialEnum = MaterialEnum::Lead;
    pub const NAME_TAG: MaterialEnum = MaterialEnum::NameTag;
    pub const COMMAND_BLOCK_MINECART: MaterialEnum = MaterialEnum::CommandBlockMinecart;
    pub const MUTTON: MaterialEnum = MaterialEnum::Mutton;
    pub const COOKED_MUTTON: MaterialEnum = MaterialEnum::CookedMutton;
    pub const WHITE_BANNER: MaterialEnum = MaterialEnum::WhiteBanner;
    pub const ORANGE_BANNER: MaterialEnum = MaterialEnum::OrangeBanner;
    pub const MAGENTA_BANNER: MaterialEnum = MaterialEnum::MagentaBanner;
    pub const LIGHT_BLUE_BANNER: MaterialEnum = MaterialEnum::LightBlueBanner;
    pub const YELLOW_BANNER: MaterialEnum = MaterialEnum::YellowBanner;
    pub const LIME_BANNER: MaterialEnum = MaterialEnum::LimeBanner;
    pub const PINK_BANNER: MaterialEnum = MaterialEnum::PinkBanner;
    pub const GRAY_BANNER: MaterialEnum = MaterialEnum::GrayBanner;
    pub const LIGHT_GRAY_BANNER: MaterialEnum = MaterialEnum::LightGrayBanner;
    pub const CYAN_BANNER: MaterialEnum = MaterialEnum::CyanBanner;
    pub const PURPLE_BANNER: MaterialEnum = MaterialEnum::PurpleBanner;
    pub const BLUE_BANNER: MaterialEnum = MaterialEnum::BlueBanner;
    pub const BROWN_BANNER: MaterialEnum = MaterialEnum::BrownBanner;
    pub const GREEN_BANNER: MaterialEnum = MaterialEnum::GreenBanner;
    pub const RED_BANNER: MaterialEnum = MaterialEnum::RedBanner;
    pub const BLACK_BANNER: MaterialEnum = MaterialEnum::BlackBanner;
    pub const END_CRYSTAL: MaterialEnum = MaterialEnum::EndCrystal;
    pub const CHORUS_FRUIT: MaterialEnum = MaterialEnum::ChorusFruit;
    pub const POPPED_CHORUS_FRUIT: MaterialEnum = MaterialEnum::PoppedChorusFruit;
    pub const TORCHFLOWER_SEEDS: MaterialEnum = MaterialEnum::TorchflowerSeeds;
    pub const PITCHER_POD: MaterialEnum = MaterialEnum::PitcherPod;
    pub const BEETROOT: MaterialEnum = MaterialEnum::Beetroot;
    pub const BEETROOT_SEEDS: MaterialEnum = MaterialEnum::BeetrootSeeds;
    pub const BEETROOT_SOUP: MaterialEnum = MaterialEnum::BeetrootSoup;
    pub const DRAGON_BREATH: MaterialEnum = MaterialEnum::DragonBreath;
    pub const SPLASH_POTION: MaterialEnum = MaterialEnum::SplashPotion;
    pub const SPECTRAL_ARROW: MaterialEnum = MaterialEnum::SpectralArrow;
    pub const TIPPED_ARROW: MaterialEnum = MaterialEnum::TippedArrow;
    pub const LINGERING_POTION: MaterialEnum = MaterialEnum::LingeringPotion;
    pub const SHIELD: MaterialEnum = MaterialEnum::Shield;
    pub const TOTEM_OF_UNDYING: MaterialEnum = MaterialEnum::TotemOfUndying;
    pub const SHULKER_SHELL: MaterialEnum = MaterialEnum::ShulkerShell;
    pub const IRON_NUGGET: MaterialEnum = MaterialEnum::IronNugget;
    pub const KNOWLEDGE_BOOK: MaterialEnum = MaterialEnum::KnowledgeBook;
    pub const DEBUG_STICK: MaterialEnum = MaterialEnum::DebugStick;
    pub const MUSIC_DISC_13: MaterialEnum = MaterialEnum::MusicDisc13;
    pub const MUSIC_DISC_CAT: MaterialEnum = MaterialEnum::MusicDiscCat;
    pub const MUSIC_DISC_BLOCKS: MaterialEnum = MaterialEnum::MusicDiscBlocks;
    pub const MUSIC_DISC_CHIRP: MaterialEnum = MaterialEnum::MusicDiscChirp;
    pub const MUSIC_DISC_FAR: MaterialEnum = MaterialEnum::MusicDiscFar;
    pub const MUSIC_DISC_MALL: MaterialEnum = MaterialEnum::MusicDiscMall;
    pub const MUSIC_DISC_MELLOHI: MaterialEnum = MaterialEnum::MusicDiscMellohi;
    pub const MUSIC_DISC_STAL: MaterialEnum = MaterialEnum::MusicDiscStal;
    pub const MUSIC_DISC_STRAD: MaterialEnum = MaterialEnum::MusicDiscStrad;
    pub const MUSIC_DISC_WARD: MaterialEnum = MaterialEnum::MusicDiscWard;
    pub const MUSIC_DISC_11: MaterialEnum = MaterialEnum::MusicDisc11;
    pub const MUSIC_DISC_WAIT: MaterialEnum = MaterialEnum::MusicDiscWait;
    pub const MUSIC_DISC_OTHERSIDE: MaterialEnum = MaterialEnum::MusicDiscOtherside;
    pub const MUSIC_DISC_RELIC: MaterialEnum = MaterialEnum::MusicDiscRelic;
    pub const MUSIC_DISC_5: MaterialEnum = MaterialEnum::MusicDisc5;
    pub const MUSIC_DISC_PIGSTEP: MaterialEnum = MaterialEnum::MusicDiscPigstep;
    pub const DISC_FRAGMENT_5: MaterialEnum = MaterialEnum::DiscFragment5;
    pub const TRIDENT: MaterialEnum = MaterialEnum::Trident;
    pub const PHANTOM_MEMBRANE: MaterialEnum = MaterialEnum::PhantomMembrane;
    pub const NAUTILUS_SHELL: MaterialEnum = MaterialEnum::NautilusShell;
    pub const HEART_OF_THE_SEA: MaterialEnum = MaterialEnum::HeartOfTheSea;
    pub const CROSSBOW: MaterialEnum = MaterialEnum::Crossbow;
    pub const SUSPICIOUS_STEW: MaterialEnum = MaterialEnum::SuspiciousStew;
    pub const LOOM: MaterialEnum = MaterialEnum::Loom;
    pub const FLOWER_BANNER_PATTERN: MaterialEnum = MaterialEnum::FlowerBannerPattern;
    pub const CREEPER_BANNER_PATTERN: MaterialEnum = MaterialEnum::CreeperBannerPattern;
    pub const SKULL_BANNER_PATTERN: MaterialEnum = MaterialEnum::SkullBannerPattern;
    pub const MOJANG_BANNER_PATTERN: MaterialEnum = MaterialEnum::MojangBannerPattern;
    pub const GLOBE_BANNER_PATTERN: MaterialEnum = MaterialEnum::GlobeBannerPattern;
    pub const PIGLIN_BANNER_PATTERN: MaterialEnum = MaterialEnum::PiglinBannerPattern;
    pub const GOAT_HORN: MaterialEnum = MaterialEnum::GoatHorn;
    pub const COMPOSTER: MaterialEnum = MaterialEnum::Composter;
    pub const BARREL: MaterialEnum = MaterialEnum::Barrel;
    pub const SMOKER: MaterialEnum = MaterialEnum::Smoker;
    pub const BLAST_FURNACE: MaterialEnum = MaterialEnum::BlastFurnace;
    pub const CARTOGRAPHY_TABLE: MaterialEnum = MaterialEnum::CartographyTable;
    pub const FLETCHING_TABLE: MaterialEnum = MaterialEnum::FletchingTable;
    pub const GRINDSTONE: MaterialEnum = MaterialEnum::Grindstone;
    pub const SMITHING_TABLE: MaterialEnum = MaterialEnum::SmithingTable;
    pub const STONECUTTER: MaterialEnum = MaterialEnum::Stonecutter;
    pub const BELL: MaterialEnum = MaterialEnum::Bell;
    pub const LANTERN: MaterialEnum = MaterialEnum::Lantern;
    pub const SOUL_LANTERN: MaterialEnum = MaterialEnum::SoulLantern;
    pub const SWEET_BERRIES: MaterialEnum = MaterialEnum::SweetBerries;
    pub const GLOW_BERRIES: MaterialEnum = MaterialEnum::GlowBerries;
    pub const CAMPFIRE: MaterialEnum = MaterialEnum::Campfire;
    pub const SOUL_CAMPFIRE: MaterialEnum = MaterialEnum::SoulCampfire;
    pub const SHROOMLIGHT: MaterialEnum = MaterialEnum::Shroomlight;
    pub const HONEYCOMB: MaterialEnum = MaterialEnum::Honeycomb;
    pub const BEE_NEST: MaterialEnum = MaterialEnum::BeeNest;
    pub const BEEHIVE: MaterialEnum = MaterialEnum::Beehive;
    pub const HONEY_BOTTLE: MaterialEnum = MaterialEnum::HoneyBottle;
    pub const HONEYCOMB_BLOCK: MaterialEnum = MaterialEnum::HoneycombBlock;
    pub const LODESTONE: MaterialEnum = MaterialEnum::Lodestone;
    pub const CRYING_OBSIDIAN: MaterialEnum = MaterialEnum::CryingObsidian;
    pub const BLACKSTONE: MaterialEnum = MaterialEnum::Blackstone;
    pub const BLACKSTONE_SLAB: MaterialEnum = MaterialEnum::BlackstoneSlab;
    pub const BLACKSTONE_STAIRS: MaterialEnum = MaterialEnum::BlackstoneStairs;
    pub const GILDED_BLACKSTONE: MaterialEnum = MaterialEnum::GildedBlackstone;
    pub const POLISHED_BLACKSTONE: MaterialEnum = MaterialEnum::PolishedBlackstone;
    pub const POLISHED_BLACKSTONE_SLAB: MaterialEnum = MaterialEnum::PolishedBlackstoneSlab;
    pub const POLISHED_BLACKSTONE_STAIRS: MaterialEnum = MaterialEnum::PolishedBlackstoneStairs;
    pub const CHISELED_POLISHED_BLACKSTONE: MaterialEnum = MaterialEnum::ChiseledPolishedBlackstone;
    pub const POLISHED_BLACKSTONE_BRICKS: MaterialEnum = MaterialEnum::PolishedBlackstoneBricks;
    pub const POLISHED_BLACKSTONE_BRICK_SLAB: MaterialEnum =
        MaterialEnum::PolishedBlackstoneBrickSlab;
    pub const POLISHED_BLACKSTONE_BRICK_STAIRS: MaterialEnum =
        MaterialEnum::PolishedBlackstoneBrickStairs;
    pub const CRACKED_POLISHED_BLACKSTONE_BRICKS: MaterialEnum =
        MaterialEnum::CrackedPolishedBlackstoneBricks;
    pub const RESPAWN_ANCHOR: MaterialEnum = MaterialEnum::RespawnAnchor;
    pub const CANDLE: MaterialEnum = MaterialEnum::Candle;
    pub const WHITE_CANDLE: MaterialEnum = MaterialEnum::WhiteCandle;
    pub const ORANGE_CANDLE: MaterialEnum = MaterialEnum::OrangeCandle;
    pub const MAGENTA_CANDLE: MaterialEnum = MaterialEnum::MagentaCandle;
    pub const LIGHT_BLUE_CANDLE: MaterialEnum = MaterialEnum::LightBlueCandle;
    pub const YELLOW_CANDLE: MaterialEnum = MaterialEnum::YellowCandle;
    pub const LIME_CANDLE: MaterialEnum = MaterialEnum::LimeCandle;
    pub const PINK_CANDLE: MaterialEnum = MaterialEnum::PinkCandle;
    pub const GRAY_CANDLE: MaterialEnum = MaterialEnum::GrayCandle;
    pub const LIGHT_GRAY_CANDLE: MaterialEnum = MaterialEnum::LightGrayCandle;
    pub const CYAN_CANDLE: MaterialEnum = MaterialEnum::CyanCandle;
    pub const PURPLE_CANDLE: MaterialEnum = MaterialEnum::PurpleCandle;
    pub const BLUE_CANDLE: MaterialEnum = MaterialEnum::BlueCandle;
    pub const BROWN_CANDLE: MaterialEnum = MaterialEnum::BrownCandle;
    pub const GREEN_CANDLE: MaterialEnum = MaterialEnum::GreenCandle;
    pub const RED_CANDLE: MaterialEnum = MaterialEnum::RedCandle;
    pub const BLACK_CANDLE: MaterialEnum = MaterialEnum::BlackCandle;
    pub const SMALL_AMETHYST_BUD: MaterialEnum = MaterialEnum::SmallAmethystBud;
    pub const MEDIUM_AMETHYST_BUD: MaterialEnum = MaterialEnum::MediumAmethystBud;
    pub const LARGE_AMETHYST_BUD: MaterialEnum = MaterialEnum::LargeAmethystBud;
    pub const AMETHYST_CLUSTER: MaterialEnum = MaterialEnum::AmethystCluster;
    pub const POINTED_DRIPSTONE: MaterialEnum = MaterialEnum::PointedDripstone;
    pub const OCHRE_FROGLIGHT: MaterialEnum = MaterialEnum::OchreFroglight;
    pub const VERDANT_FROGLIGHT: MaterialEnum = MaterialEnum::VerdantFroglight;
    pub const PEARLESCENT_FROGLIGHT: MaterialEnum = MaterialEnum::PearlescentFroglight;
    pub const FROGSPAWN: MaterialEnum = MaterialEnum::Frogspawn;
    pub const ECHO_SHARD: MaterialEnum = MaterialEnum::EchoShard;
    pub const BRUSH: MaterialEnum = MaterialEnum::Brush;
    pub const NETHERITE_UPGRADE_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::NetheriteUpgradeSmithingTemplate;
    pub const SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::SentryArmorTrimSmithingTemplate;
    pub const DUNE_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::DuneArmorTrimSmithingTemplate;
    pub const COAST_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::CoastArmorTrimSmithingTemplate;
    pub const WILD_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::WildArmorTrimSmithingTemplate;
    pub const WARD_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::WardArmorTrimSmithingTemplate;
    pub const EYE_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::EyeArmorTrimSmithingTemplate;
    pub const VEX_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::VexArmorTrimSmithingTemplate;
    pub const TIDE_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::TideArmorTrimSmithingTemplate;
    pub const SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::SnoutArmorTrimSmithingTemplate;
    pub const RIB_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::RibArmorTrimSmithingTemplate;
    pub const SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::SpireArmorTrimSmithingTemplate;
    pub const WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::WayfinderArmorTrimSmithingTemplate;
    pub const SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::ShaperArmorTrimSmithingTemplate;
    pub const SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::SilenceArmorTrimSmithingTemplate;
    pub const RAISER_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::RaiserArmorTrimSmithingTemplate;
    pub const HOST_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialEnum =
        MaterialEnum::HostArmorTrimSmithingTemplate;
    pub const ANGLER_POTTERY_SHERD: MaterialEnum = MaterialEnum::AnglerPotterySherd;
    pub const ARCHER_POTTERY_SHERD: MaterialEnum = MaterialEnum::ArcherPotterySherd;
    pub const ARMS_UP_POTTERY_SHERD: MaterialEnum = MaterialEnum::ArmsUpPotterySherd;
    pub const BLADE_POTTERY_SHERD: MaterialEnum = MaterialEnum::BladePotterySherd;
    pub const BREWER_POTTERY_SHERD: MaterialEnum = MaterialEnum::BrewerPotterySherd;
    pub const BURN_POTTERY_SHERD: MaterialEnum = MaterialEnum::BurnPotterySherd;
    pub const DANGER_POTTERY_SHERD: MaterialEnum = MaterialEnum::DangerPotterySherd;
    pub const EXPLORER_POTTERY_SHERD: MaterialEnum = MaterialEnum::ExplorerPotterySherd;
    pub const FRIEND_POTTERY_SHERD: MaterialEnum = MaterialEnum::FriendPotterySherd;
    pub const HEART_POTTERY_SHERD: MaterialEnum = MaterialEnum::HeartPotterySherd;
    pub const HEARTBREAK_POTTERY_SHERD: MaterialEnum = MaterialEnum::HeartbreakPotterySherd;
    pub const HOWL_POTTERY_SHERD: MaterialEnum = MaterialEnum::HowlPotterySherd;
    pub const MINER_POTTERY_SHERD: MaterialEnum = MaterialEnum::MinerPotterySherd;
    pub const MOURNER_POTTERY_SHERD: MaterialEnum = MaterialEnum::MournerPotterySherd;
    pub const PLENTY_POTTERY_SHERD: MaterialEnum = MaterialEnum::PlentyPotterySherd;
    pub const PRIZE_POTTERY_SHERD: MaterialEnum = MaterialEnum::PrizePotterySherd;
    pub const SHEAF_POTTERY_SHERD: MaterialEnum = MaterialEnum::SheafPotterySherd;
    pub const SHELTER_POTTERY_SHERD: MaterialEnum = MaterialEnum::ShelterPotterySherd;
    pub const SKULL_POTTERY_SHERD: MaterialEnum = MaterialEnum::SkullPotterySherd;
    pub const SNORT_POTTERY_SHERD: MaterialEnum = MaterialEnum::SnortPotterySherd;
    pub const WATER: MaterialEnum = MaterialEnum::Water;
    pub const LAVA: MaterialEnum = MaterialEnum::Lava;
    pub const TALL_SEAGRASS: MaterialEnum = MaterialEnum::TallSeagrass;
    pub const PISTON_HEAD: MaterialEnum = MaterialEnum::PistonHead;
    pub const MOVING_PISTON: MaterialEnum = MaterialEnum::MovingPiston;
    pub const WALL_TORCH: MaterialEnum = MaterialEnum::WallTorch;
    pub const FIRE: MaterialEnum = MaterialEnum::Fire;
    pub const SOUL_FIRE: MaterialEnum = MaterialEnum::SoulFire;
    pub const REDSTONE_WIRE: MaterialEnum = MaterialEnum::RedstoneWire;
    pub const OAK_WALL_SIGN: MaterialEnum = MaterialEnum::OakWallSign;
    pub const SPRUCE_WALL_SIGN: MaterialEnum = MaterialEnum::SpruceWallSign;
    pub const BIRCH_WALL_SIGN: MaterialEnum = MaterialEnum::BirchWallSign;
    pub const ACACIA_WALL_SIGN: MaterialEnum = MaterialEnum::AcaciaWallSign;
    pub const CHERRY_WALL_SIGN: MaterialEnum = MaterialEnum::CherryWallSign;
    pub const JUNGLE_WALL_SIGN: MaterialEnum = MaterialEnum::JungleWallSign;
    pub const DARK_OAK_WALL_SIGN: MaterialEnum = MaterialEnum::DarkOakWallSign;
    pub const MANGROVE_WALL_SIGN: MaterialEnum = MaterialEnum::MangroveWallSign;
    pub const BAMBOO_WALL_SIGN: MaterialEnum = MaterialEnum::BambooWallSign;
    pub const OAK_WALL_HANGING_SIGN: MaterialEnum = MaterialEnum::OakWallHangingSign;
    pub const SPRUCE_WALL_HANGING_SIGN: MaterialEnum = MaterialEnum::SpruceWallHangingSign;
    pub const BIRCH_WALL_HANGING_SIGN: MaterialEnum = MaterialEnum::BirchWallHangingSign;
    pub const ACACIA_WALL_HANGING_SIGN: MaterialEnum = MaterialEnum::AcaciaWallHangingSign;
    pub const CHERRY_WALL_HANGING_SIGN: MaterialEnum = MaterialEnum::CherryWallHangingSign;
    pub const JUNGLE_WALL_HANGING_SIGN: MaterialEnum = MaterialEnum::JungleWallHangingSign;
    pub const DARK_OAK_WALL_HANGING_SIGN: MaterialEnum = MaterialEnum::DarkOakWallHangingSign;
    pub const MANGROVE_WALL_HANGING_SIGN: MaterialEnum = MaterialEnum::MangroveWallHangingSign;
    pub const CRIMSON_WALL_HANGING_SIGN: MaterialEnum = MaterialEnum::CrimsonWallHangingSign;
    pub const WARPED_WALL_HANGING_SIGN: MaterialEnum = MaterialEnum::WarpedWallHangingSign;
    pub const BAMBOO_WALL_HANGING_SIGN: MaterialEnum = MaterialEnum::BambooWallHangingSign;
    pub const REDSTONE_WALL_TORCH: MaterialEnum = MaterialEnum::RedstoneWallTorch;
    pub const SOUL_WALL_TORCH: MaterialEnum = MaterialEnum::SoulWallTorch;
    pub const NETHER_PORTAL: MaterialEnum = MaterialEnum::NetherPortal;
    pub const ATTACHED_PUMPKIN_STEM: MaterialEnum = MaterialEnum::AttachedPumpkinStem;
    pub const ATTACHED_MELON_STEM: MaterialEnum = MaterialEnum::AttachedMelonStem;
    pub const PUMPKIN_STEM: MaterialEnum = MaterialEnum::PumpkinStem;
    pub const MELON_STEM: MaterialEnum = MaterialEnum::MelonStem;
    pub const WATER_CAULDRON: MaterialEnum = MaterialEnum::WaterCauldron;
    pub const LAVA_CAULDRON: MaterialEnum = MaterialEnum::LavaCauldron;
    pub const POWDER_SNOW_CAULDRON: MaterialEnum = MaterialEnum::PowderSnowCauldron;
    pub const END_PORTAL: MaterialEnum = MaterialEnum::EndPortal;
    pub const COCOA: MaterialEnum = MaterialEnum::Cocoa;
    pub const TRIPWIRE: MaterialEnum = MaterialEnum::Tripwire;
    pub const POTTED_TORCHFLOWER: MaterialEnum = MaterialEnum::PottedTorchflower;
    pub const POTTED_OAK_SAPLING: MaterialEnum = MaterialEnum::PottedOakSapling;
    pub const POTTED_SPRUCE_SAPLING: MaterialEnum = MaterialEnum::PottedSpruceSapling;
    pub const POTTED_BIRCH_SAPLING: MaterialEnum = MaterialEnum::PottedBirchSapling;
    pub const POTTED_JUNGLE_SAPLING: MaterialEnum = MaterialEnum::PottedJungleSapling;
    pub const POTTED_ACACIA_SAPLING: MaterialEnum = MaterialEnum::PottedAcaciaSapling;
    pub const POTTED_CHERRY_SAPLING: MaterialEnum = MaterialEnum::PottedCherrySapling;
    pub const POTTED_DARK_OAK_SAPLING: MaterialEnum = MaterialEnum::PottedDarkOakSapling;
    pub const POTTED_MANGROVE_PROPAGULE: MaterialEnum = MaterialEnum::PottedMangrovePropagule;
    pub const POTTED_FERN: MaterialEnum = MaterialEnum::PottedFern;
    pub const POTTED_DANDELION: MaterialEnum = MaterialEnum::PottedDandelion;
    pub const POTTED_POPPY: MaterialEnum = MaterialEnum::PottedPoppy;
    pub const POTTED_BLUE_ORCHID: MaterialEnum = MaterialEnum::PottedBlueOrchid;
    pub const POTTED_ALLIUM: MaterialEnum = MaterialEnum::PottedAllium;
    pub const POTTED_AZURE_BLUET: MaterialEnum = MaterialEnum::PottedAzureBluet;
    pub const POTTED_RED_TULIP: MaterialEnum = MaterialEnum::PottedRedTulip;
    pub const POTTED_ORANGE_TULIP: MaterialEnum = MaterialEnum::PottedOrangeTulip;
    pub const POTTED_WHITE_TULIP: MaterialEnum = MaterialEnum::PottedWhiteTulip;
    pub const POTTED_PINK_TULIP: MaterialEnum = MaterialEnum::PottedPinkTulip;
    pub const POTTED_OXEYE_DAISY: MaterialEnum = MaterialEnum::PottedOxeyeDaisy;
    pub const POTTED_CORNFLOWER: MaterialEnum = MaterialEnum::PottedCornflower;
    pub const POTTED_LILY_OF_THE_VALLEY: MaterialEnum = MaterialEnum::PottedLilyOfTheValley;
    pub const POTTED_WITHER_ROSE: MaterialEnum = MaterialEnum::PottedWitherRose;
    pub const POTTED_RED_MUSHROOM: MaterialEnum = MaterialEnum::PottedRedMushroom;
    pub const POTTED_BROWN_MUSHROOM: MaterialEnum = MaterialEnum::PottedBrownMushroom;
    pub const POTTED_DEAD_BUSH: MaterialEnum = MaterialEnum::PottedDeadBush;
    pub const POTTED_CACTUS: MaterialEnum = MaterialEnum::PottedCactus;
    pub const CARROTS: MaterialEnum = MaterialEnum::Carrots;
    pub const POTATOES: MaterialEnum = MaterialEnum::Potatoes;
    pub const SKELETON_WALL_SKULL: MaterialEnum = MaterialEnum::SkeletonWallSkull;
    pub const WITHER_SKELETON_WALL_SKULL: MaterialEnum = MaterialEnum::WitherSkeletonWallSkull;
    pub const ZOMBIE_WALL_HEAD: MaterialEnum = MaterialEnum::ZombieWallHead;
    pub const PLAYER_WALL_HEAD: MaterialEnum = MaterialEnum::PlayerWallHead;
    pub const CREEPER_WALL_HEAD: MaterialEnum = MaterialEnum::CreeperWallHead;
    pub const DRAGON_WALL_HEAD: MaterialEnum = MaterialEnum::DragonWallHead;
    pub const PIGLIN_WALL_HEAD: MaterialEnum = MaterialEnum::PiglinWallHead;
    pub const WHITE_WALL_BANNER: MaterialEnum = MaterialEnum::WhiteWallBanner;
    pub const ORANGE_WALL_BANNER: MaterialEnum = MaterialEnum::OrangeWallBanner;
    pub const MAGENTA_WALL_BANNER: MaterialEnum = MaterialEnum::MagentaWallBanner;
    pub const LIGHT_BLUE_WALL_BANNER: MaterialEnum = MaterialEnum::LightBlueWallBanner;
    pub const YELLOW_WALL_BANNER: MaterialEnum = MaterialEnum::YellowWallBanner;
    pub const LIME_WALL_BANNER: MaterialEnum = MaterialEnum::LimeWallBanner;
    pub const PINK_WALL_BANNER: MaterialEnum = MaterialEnum::PinkWallBanner;
    pub const GRAY_WALL_BANNER: MaterialEnum = MaterialEnum::GrayWallBanner;
    pub const LIGHT_GRAY_WALL_BANNER: MaterialEnum = MaterialEnum::LightGrayWallBanner;
    pub const CYAN_WALL_BANNER: MaterialEnum = MaterialEnum::CyanWallBanner;
    pub const PURPLE_WALL_BANNER: MaterialEnum = MaterialEnum::PurpleWallBanner;
    pub const BLUE_WALL_BANNER: MaterialEnum = MaterialEnum::BlueWallBanner;
    pub const BROWN_WALL_BANNER: MaterialEnum = MaterialEnum::BrownWallBanner;
    pub const GREEN_WALL_BANNER: MaterialEnum = MaterialEnum::GreenWallBanner;
    pub const RED_WALL_BANNER: MaterialEnum = MaterialEnum::RedWallBanner;
    pub const BLACK_WALL_BANNER: MaterialEnum = MaterialEnum::BlackWallBanner;
    pub const TORCHFLOWER_CROP: MaterialEnum = MaterialEnum::TorchflowerCrop;
    pub const PITCHER_CROP: MaterialEnum = MaterialEnum::PitcherCrop;
    pub const BEETROOTS: MaterialEnum = MaterialEnum::Beetroots;
    pub const END_GATEWAY: MaterialEnum = MaterialEnum::EndGateway;
    pub const FROSTED_ICE: MaterialEnum = MaterialEnum::FrostedIce;
    pub const KELP_PLANT: MaterialEnum = MaterialEnum::KelpPlant;
    pub const DEAD_TUBE_CORAL_WALL_FAN: MaterialEnum = MaterialEnum::DeadTubeCoralWallFan;
    pub const DEAD_BRAIN_CORAL_WALL_FAN: MaterialEnum = MaterialEnum::DeadBrainCoralWallFan;
    pub const DEAD_BUBBLE_CORAL_WALL_FAN: MaterialEnum = MaterialEnum::DeadBubbleCoralWallFan;
    pub const DEAD_FIRE_CORAL_WALL_FAN: MaterialEnum = MaterialEnum::DeadFireCoralWallFan;
    pub const DEAD_HORN_CORAL_WALL_FAN: MaterialEnum = MaterialEnum::DeadHornCoralWallFan;
    pub const TUBE_CORAL_WALL_FAN: MaterialEnum = MaterialEnum::TubeCoralWallFan;
    pub const BRAIN_CORAL_WALL_FAN: MaterialEnum = MaterialEnum::BrainCoralWallFan;
    pub const BUBBLE_CORAL_WALL_FAN: MaterialEnum = MaterialEnum::BubbleCoralWallFan;
    pub const FIRE_CORAL_WALL_FAN: MaterialEnum = MaterialEnum::FireCoralWallFan;
    pub const HORN_CORAL_WALL_FAN: MaterialEnum = MaterialEnum::HornCoralWallFan;
    pub const BAMBOO_SAPLING: MaterialEnum = MaterialEnum::BambooSapling;
    pub const POTTED_BAMBOO: MaterialEnum = MaterialEnum::PottedBamboo;
    pub const VOID_AIR: MaterialEnum = MaterialEnum::VoidAir;
    pub const CAVE_AIR: MaterialEnum = MaterialEnum::CaveAir;
    pub const BUBBLE_COLUMN: MaterialEnum = MaterialEnum::BubbleColumn;
    pub const SWEET_BERRY_BUSH: MaterialEnum = MaterialEnum::SweetBerryBush;
    pub const WEEPING_VINES_PLANT: MaterialEnum = MaterialEnum::WeepingVinesPlant;
    pub const TWISTING_VINES_PLANT: MaterialEnum = MaterialEnum::TwistingVinesPlant;
    pub const CRIMSON_WALL_SIGN: MaterialEnum = MaterialEnum::CrimsonWallSign;
    pub const WARPED_WALL_SIGN: MaterialEnum = MaterialEnum::WarpedWallSign;
    pub const POTTED_CRIMSON_FUNGUS: MaterialEnum = MaterialEnum::PottedCrimsonFungus;
    pub const POTTED_WARPED_FUNGUS: MaterialEnum = MaterialEnum::PottedWarpedFungus;
    pub const POTTED_CRIMSON_ROOTS: MaterialEnum = MaterialEnum::PottedCrimsonRoots;
    pub const POTTED_WARPED_ROOTS: MaterialEnum = MaterialEnum::PottedWarpedRoots;
    pub const CANDLE_CAKE: MaterialEnum = MaterialEnum::CandleCake;
    pub const WHITE_CANDLE_CAKE: MaterialEnum = MaterialEnum::WhiteCandleCake;
    pub const ORANGE_CANDLE_CAKE: MaterialEnum = MaterialEnum::OrangeCandleCake;
    pub const MAGENTA_CANDLE_CAKE: MaterialEnum = MaterialEnum::MagentaCandleCake;
    pub const LIGHT_BLUE_CANDLE_CAKE: MaterialEnum = MaterialEnum::LightBlueCandleCake;
    pub const YELLOW_CANDLE_CAKE: MaterialEnum = MaterialEnum::YellowCandleCake;
    pub const LIME_CANDLE_CAKE: MaterialEnum = MaterialEnum::LimeCandleCake;
    pub const PINK_CANDLE_CAKE: MaterialEnum = MaterialEnum::PinkCandleCake;
    pub const GRAY_CANDLE_CAKE: MaterialEnum = MaterialEnum::GrayCandleCake;
    pub const LIGHT_GRAY_CANDLE_CAKE: MaterialEnum = MaterialEnum::LightGrayCandleCake;
    pub const CYAN_CANDLE_CAKE: MaterialEnum = MaterialEnum::CyanCandleCake;
    pub const PURPLE_CANDLE_CAKE: MaterialEnum = MaterialEnum::PurpleCandleCake;
    pub const BLUE_CANDLE_CAKE: MaterialEnum = MaterialEnum::BlueCandleCake;
    pub const BROWN_CANDLE_CAKE: MaterialEnum = MaterialEnum::BrownCandleCake;
    pub const GREEN_CANDLE_CAKE: MaterialEnum = MaterialEnum::GreenCandleCake;
    pub const RED_CANDLE_CAKE: MaterialEnum = MaterialEnum::RedCandleCake;
    pub const BLACK_CANDLE_CAKE: MaterialEnum = MaterialEnum::BlackCandleCake;
    pub const POWDER_SNOW: MaterialEnum = MaterialEnum::PowderSnow;
    pub const CAVE_VINES: MaterialEnum = MaterialEnum::CaveVines;
    pub const CAVE_VINES_PLANT: MaterialEnum = MaterialEnum::CaveVinesPlant;
    pub const BIG_DRIPLEAF_STEM: MaterialEnum = MaterialEnum::BigDripleafStem;
    pub const POTTED_AZALEA_BUSH: MaterialEnum = MaterialEnum::PottedAzaleaBush;
    pub const POTTED_FLOWERING_AZALEA_BUSH: MaterialEnum = MaterialEnum::PottedFloweringAzaleaBush;
    pub const LEGACY_AIR: MaterialEnum = MaterialEnum::LegacyAir;
    pub const LEGACY_STONE: MaterialEnum = MaterialEnum::LegacyStone;
    pub const LEGACY_GRASS: MaterialEnum = MaterialEnum::LegacyGrass;
    pub const LEGACY_DIRT: MaterialEnum = MaterialEnum::LegacyDirt;
    pub const LEGACY_COBBLESTONE: MaterialEnum = MaterialEnum::LegacyCobblestone;
    pub const LEGACY_WOOD: MaterialEnum = MaterialEnum::LegacyWood;
    pub const LEGACY_SAPLING: MaterialEnum = MaterialEnum::LegacySapling;
    pub const LEGACY_BEDROCK: MaterialEnum = MaterialEnum::LegacyBedrock;
    pub const LEGACY_WATER: MaterialEnum = MaterialEnum::LegacyWater;
    pub const LEGACY_STATIONARY_WATER: MaterialEnum = MaterialEnum::LegacyStationaryWater;
    pub const LEGACY_LAVA: MaterialEnum = MaterialEnum::LegacyLava;
    pub const LEGACY_STATIONARY_LAVA: MaterialEnum = MaterialEnum::LegacyStationaryLava;
    pub const LEGACY_SAND: MaterialEnum = MaterialEnum::LegacySand;
    pub const LEGACY_GRAVEL: MaterialEnum = MaterialEnum::LegacyGravel;
    pub const LEGACY_GOLD_ORE: MaterialEnum = MaterialEnum::LegacyGoldOre;
    pub const LEGACY_IRON_ORE: MaterialEnum = MaterialEnum::LegacyIronOre;
    pub const LEGACY_COAL_ORE: MaterialEnum = MaterialEnum::LegacyCoalOre;
    pub const LEGACY_LOG: MaterialEnum = MaterialEnum::LegacyLog;
    pub const LEGACY_LEAVES: MaterialEnum = MaterialEnum::LegacyLeaves;
    pub const LEGACY_SPONGE: MaterialEnum = MaterialEnum::LegacySponge;
    pub const LEGACY_GLASS: MaterialEnum = MaterialEnum::LegacyGlass;
    pub const LEGACY_LAPIS_ORE: MaterialEnum = MaterialEnum::LegacyLapisOre;
    pub const LEGACY_LAPIS_BLOCK: MaterialEnum = MaterialEnum::LegacyLapisBlock;
    pub const LEGACY_DISPENSER: MaterialEnum = MaterialEnum::LegacyDispenser;
    pub const LEGACY_SANDSTONE: MaterialEnum = MaterialEnum::LegacySandstone;
    pub const LEGACY_NOTE_BLOCK: MaterialEnum = MaterialEnum::LegacyNoteBlock;
    pub const LEGACY_BED_BLOCK: MaterialEnum = MaterialEnum::LegacyBedBlock;
    pub const LEGACY_POWERED_RAIL: MaterialEnum = MaterialEnum::LegacyPoweredRail;
    pub const LEGACY_DETECTOR_RAIL: MaterialEnum = MaterialEnum::LegacyDetectorRail;
    pub const LEGACY_PISTON_STICKY_BASE: MaterialEnum = MaterialEnum::LegacyPistonStickyBase;
    pub const LEGACY_WEB: MaterialEnum = MaterialEnum::LegacyWeb;
    pub const LEGACY_LONG_GRASS: MaterialEnum = MaterialEnum::LegacyLongGrass;
    pub const LEGACY_DEAD_BUSH: MaterialEnum = MaterialEnum::LegacyDeadBush;
    pub const LEGACY_PISTON_BASE: MaterialEnum = MaterialEnum::LegacyPistonBase;
    pub const LEGACY_PISTON_EXTENSION: MaterialEnum = MaterialEnum::LegacyPistonExtension;
    pub const LEGACY_WOOL: MaterialEnum = MaterialEnum::LegacyWool;
    pub const LEGACY_PISTON_MOVING_PIECE: MaterialEnum = MaterialEnum::LegacyPistonMovingPiece;
    pub const LEGACY_YELLOW_FLOWER: MaterialEnum = MaterialEnum::LegacyYellowFlower;
    pub const LEGACY_RED_ROSE: MaterialEnum = MaterialEnum::LegacyRedRose;
    pub const LEGACY_BROWN_MUSHROOM: MaterialEnum = MaterialEnum::LegacyBrownMushroom;
    pub const LEGACY_RED_MUSHROOM: MaterialEnum = MaterialEnum::LegacyRedMushroom;
    pub const LEGACY_GOLD_BLOCK: MaterialEnum = MaterialEnum::LegacyGoldBlock;
    pub const LEGACY_IRON_BLOCK: MaterialEnum = MaterialEnum::LegacyIronBlock;
    pub const LEGACY_DOUBLE_STEP: MaterialEnum = MaterialEnum::LegacyDoubleStep;
    pub const LEGACY_STEP: MaterialEnum = MaterialEnum::LegacyStep;
    pub const LEGACY_BRICK: MaterialEnum = MaterialEnum::LegacyBrick;
    pub const LEGACY_TNT: MaterialEnum = MaterialEnum::LegacyTnt;
    pub const LEGACY_BOOKSHELF: MaterialEnum = MaterialEnum::LegacyBookshelf;
    pub const LEGACY_MOSSY_COBBLESTONE: MaterialEnum = MaterialEnum::LegacyMossyCobblestone;
    pub const LEGACY_OBSIDIAN: MaterialEnum = MaterialEnum::LegacyObsidian;
    pub const LEGACY_TORCH: MaterialEnum = MaterialEnum::LegacyTorch;
    pub const LEGACY_FIRE: MaterialEnum = MaterialEnum::LegacyFire;
    pub const LEGACY_MOB_SPAWNER: MaterialEnum = MaterialEnum::LegacyMobSpawner;
    pub const LEGACY_WOOD_STAIRS: MaterialEnum = MaterialEnum::LegacyWoodStairs;
    pub const LEGACY_CHEST: MaterialEnum = MaterialEnum::LegacyChest;
    pub const LEGACY_REDSTONE_WIRE: MaterialEnum = MaterialEnum::LegacyRedstoneWire;
    pub const LEGACY_DIAMOND_ORE: MaterialEnum = MaterialEnum::LegacyDiamondOre;
    pub const LEGACY_DIAMOND_BLOCK: MaterialEnum = MaterialEnum::LegacyDiamondBlock;
    pub const LEGACY_WORKBENCH: MaterialEnum = MaterialEnum::LegacyWorkbench;
    pub const LEGACY_CROPS: MaterialEnum = MaterialEnum::LegacyCrops;
    pub const LEGACY_SOIL: MaterialEnum = MaterialEnum::LegacySoil;
    pub const LEGACY_FURNACE: MaterialEnum = MaterialEnum::LegacyFurnace;
    pub const LEGACY_BURNING_FURNACE: MaterialEnum = MaterialEnum::LegacyBurningFurnace;
    pub const LEGACY_SIGN_POST: MaterialEnum = MaterialEnum::LegacySignPost;
    pub const LEGACY_WOODEN_DOOR: MaterialEnum = MaterialEnum::LegacyWoodenDoor;
    pub const LEGACY_LADDER: MaterialEnum = MaterialEnum::LegacyLadder;
    pub const LEGACY_RAILS: MaterialEnum = MaterialEnum::LegacyRails;
    pub const LEGACY_COBBLESTONE_STAIRS: MaterialEnum = MaterialEnum::LegacyCobblestoneStairs;
    pub const LEGACY_WALL_SIGN: MaterialEnum = MaterialEnum::LegacyWallSign;
    pub const LEGACY_LEVER: MaterialEnum = MaterialEnum::LegacyLever;
    pub const LEGACY_STONE_PLATE: MaterialEnum = MaterialEnum::LegacyStonePlate;
    pub const LEGACY_IRON_DOOR_BLOCK: MaterialEnum = MaterialEnum::LegacyIronDoorBlock;
    pub const LEGACY_WOOD_PLATE: MaterialEnum = MaterialEnum::LegacyWoodPlate;
    pub const LEGACY_REDSTONE_ORE: MaterialEnum = MaterialEnum::LegacyRedstoneOre;
    pub const LEGACY_GLOWING_REDSTONE_ORE: MaterialEnum = MaterialEnum::LegacyGlowingRedstoneOre;
    pub const LEGACY_REDSTONE_TORCH_OFF: MaterialEnum = MaterialEnum::LegacyRedstoneTorchOff;
    pub const LEGACY_REDSTONE_TORCH_ON: MaterialEnum = MaterialEnum::LegacyRedstoneTorchOn;
    pub const LEGACY_STONE_BUTTON: MaterialEnum = MaterialEnum::LegacyStoneButton;
    pub const LEGACY_SNOW: MaterialEnum = MaterialEnum::LegacySnow;
    pub const LEGACY_ICE: MaterialEnum = MaterialEnum::LegacyIce;
    pub const LEGACY_SNOW_BLOCK: MaterialEnum = MaterialEnum::LegacySnowBlock;
    pub const LEGACY_CACTUS: MaterialEnum = MaterialEnum::LegacyCactus;
    pub const LEGACY_CLAY: MaterialEnum = MaterialEnum::LegacyClay;
    pub const LEGACY_SUGAR_CANE_BLOCK: MaterialEnum = MaterialEnum::LegacySugarCaneBlock;
    pub const LEGACY_JUKEBOX: MaterialEnum = MaterialEnum::LegacyJukebox;
    pub const LEGACY_FENCE: MaterialEnum = MaterialEnum::LegacyFence;
    pub const LEGACY_PUMPKIN: MaterialEnum = MaterialEnum::LegacyPumpkin;
    pub const LEGACY_NETHERRACK: MaterialEnum = MaterialEnum::LegacyNetherrack;
    pub const LEGACY_SOUL_SAND: MaterialEnum = MaterialEnum::LegacySoulSand;
    pub const LEGACY_GLOWSTONE: MaterialEnum = MaterialEnum::LegacyGlowstone;
    pub const LEGACY_PORTAL: MaterialEnum = MaterialEnum::LegacyPortal;
    pub const LEGACY_JACK_O_LANTERN: MaterialEnum = MaterialEnum::LegacyJackOLantern;
    pub const LEGACY_CAKE_BLOCK: MaterialEnum = MaterialEnum::LegacyCakeBlock;
    pub const LEGACY_DIODE_BLOCK_OFF: MaterialEnum = MaterialEnum::LegacyDiodeBlockOff;
    pub const LEGACY_DIODE_BLOCK_ON: MaterialEnum = MaterialEnum::LegacyDiodeBlockOn;
    pub const LEGACY_STAINED_GLASS: MaterialEnum = MaterialEnum::LegacyStainedGlass;
    pub const LEGACY_TRAP_DOOR: MaterialEnum = MaterialEnum::LegacyTrapDoor;
    pub const LEGACY_MONSTER_EGGS: MaterialEnum = MaterialEnum::LegacyMonsterEggs;
    pub const LEGACY_SMOOTH_BRICK: MaterialEnum = MaterialEnum::LegacySmoothBrick;
    pub const LEGACY_HUGE_MUSHROOM_1: MaterialEnum = MaterialEnum::LegacyHugeMushroom1;
    pub const LEGACY_HUGE_MUSHROOM_2: MaterialEnum = MaterialEnum::LegacyHugeMushroom2;
    pub const LEGACY_IRON_FENCE: MaterialEnum = MaterialEnum::LegacyIronFence;
    pub const LEGACY_THIN_GLASS: MaterialEnum = MaterialEnum::LegacyThinGlass;
    pub const LEGACY_MELON_BLOCK: MaterialEnum = MaterialEnum::LegacyMelonBlock;
    pub const LEGACY_PUMPKIN_STEM: MaterialEnum = MaterialEnum::LegacyPumpkinStem;
    pub const LEGACY_MELON_STEM: MaterialEnum = MaterialEnum::LegacyMelonStem;
    pub const LEGACY_VINE: MaterialEnum = MaterialEnum::LegacyVine;
    pub const LEGACY_FENCE_GATE: MaterialEnum = MaterialEnum::LegacyFenceGate;
    pub const LEGACY_BRICK_STAIRS: MaterialEnum = MaterialEnum::LegacyBrickStairs;
    pub const LEGACY_SMOOTH_STAIRS: MaterialEnum = MaterialEnum::LegacySmoothStairs;
    pub const LEGACY_MYCEL: MaterialEnum = MaterialEnum::LegacyMycel;
    pub const LEGACY_WATER_LILY: MaterialEnum = MaterialEnum::LegacyWaterLily;
    pub const LEGACY_NETHER_BRICK: MaterialEnum = MaterialEnum::LegacyNetherBrick;
    pub const LEGACY_NETHER_FENCE: MaterialEnum = MaterialEnum::LegacyNetherFence;
    pub const LEGACY_NETHER_BRICK_STAIRS: MaterialEnum = MaterialEnum::LegacyNetherBrickStairs;
    pub const LEGACY_NETHER_WARTS: MaterialEnum = MaterialEnum::LegacyNetherWarts;
    pub const LEGACY_ENCHANTMENT_TABLE: MaterialEnum = MaterialEnum::LegacyEnchantmentTable;
    pub const LEGACY_BREWING_STAND: MaterialEnum = MaterialEnum::LegacyBrewingStand;
    pub const LEGACY_CAULDRON: MaterialEnum = MaterialEnum::LegacyCauldron;
    pub const LEGACY_ENDER_PORTAL: MaterialEnum = MaterialEnum::LegacyEnderPortal;
    pub const LEGACY_ENDER_PORTAL_FRAME: MaterialEnum = MaterialEnum::LegacyEnderPortalFrame;
    pub const LEGACY_ENDER_STONE: MaterialEnum = MaterialEnum::LegacyEnderStone;
    pub const LEGACY_DRAGON_EGG: MaterialEnum = MaterialEnum::LegacyDragonEgg;
    pub const LEGACY_REDSTONE_LAMP_OFF: MaterialEnum = MaterialEnum::LegacyRedstoneLampOff;
    pub const LEGACY_REDSTONE_LAMP_ON: MaterialEnum = MaterialEnum::LegacyRedstoneLampOn;
    pub const LEGACY_WOOD_DOUBLE_STEP: MaterialEnum = MaterialEnum::LegacyWoodDoubleStep;
    pub const LEGACY_WOOD_STEP: MaterialEnum = MaterialEnum::LegacyWoodStep;
    pub const LEGACY_COCOA: MaterialEnum = MaterialEnum::LegacyCocoa;
    pub const LEGACY_SANDSTONE_STAIRS: MaterialEnum = MaterialEnum::LegacySandstoneStairs;
    pub const LEGACY_EMERALD_ORE: MaterialEnum = MaterialEnum::LegacyEmeraldOre;
    pub const LEGACY_ENDER_CHEST: MaterialEnum = MaterialEnum::LegacyEnderChest;
    pub const LEGACY_TRIPWIRE_HOOK: MaterialEnum = MaterialEnum::LegacyTripwireHook;
    pub const LEGACY_TRIPWIRE: MaterialEnum = MaterialEnum::LegacyTripwire;
    pub const LEGACY_EMERALD_BLOCK: MaterialEnum = MaterialEnum::LegacyEmeraldBlock;
    pub const LEGACY_SPRUCE_WOOD_STAIRS: MaterialEnum = MaterialEnum::LegacySpruceWoodStairs;
    pub const LEGACY_BIRCH_WOOD_STAIRS: MaterialEnum = MaterialEnum::LegacyBirchWoodStairs;
    pub const LEGACY_JUNGLE_WOOD_STAIRS: MaterialEnum = MaterialEnum::LegacyJungleWoodStairs;
    pub const LEGACY_COMMAND: MaterialEnum = MaterialEnum::LegacyCommand;
    pub const LEGACY_BEACON: MaterialEnum = MaterialEnum::LegacyBeacon;
    pub const LEGACY_COBBLE_WALL: MaterialEnum = MaterialEnum::LegacyCobbleWall;
    pub const LEGACY_FLOWER_POT: MaterialEnum = MaterialEnum::LegacyFlowerPot;
    pub const LEGACY_CARROT: MaterialEnum = MaterialEnum::LegacyCarrot;
    pub const LEGACY_POTATO: MaterialEnum = MaterialEnum::LegacyPotato;
    pub const LEGACY_WOOD_BUTTON: MaterialEnum = MaterialEnum::LegacyWoodButton;
    pub const LEGACY_SKULL: MaterialEnum = MaterialEnum::LegacySkull;
    pub const LEGACY_ANVIL: MaterialEnum = MaterialEnum::LegacyAnvil;
    pub const LEGACY_TRAPPED_CHEST: MaterialEnum = MaterialEnum::LegacyTrappedChest;
    pub const LEGACY_GOLD_PLATE: MaterialEnum = MaterialEnum::LegacyGoldPlate;
    pub const LEGACY_IRON_PLATE: MaterialEnum = MaterialEnum::LegacyIronPlate;
    pub const LEGACY_REDSTONE_COMPARATOR_OFF: MaterialEnum =
        MaterialEnum::LegacyRedstoneComparatorOff;
    pub const LEGACY_REDSTONE_COMPARATOR_ON: MaterialEnum =
        MaterialEnum::LegacyRedstoneComparatorOn;
    pub const LEGACY_DAYLIGHT_DETECTOR: MaterialEnum = MaterialEnum::LegacyDaylightDetector;
    pub const LEGACY_REDSTONE_BLOCK: MaterialEnum = MaterialEnum::LegacyRedstoneBlock;
    pub const LEGACY_QUARTZ_ORE: MaterialEnum = MaterialEnum::LegacyQuartzOre;
    pub const LEGACY_HOPPER: MaterialEnum = MaterialEnum::LegacyHopper;
    pub const LEGACY_QUARTZ_BLOCK: MaterialEnum = MaterialEnum::LegacyQuartzBlock;
    pub const LEGACY_QUARTZ_STAIRS: MaterialEnum = MaterialEnum::LegacyQuartzStairs;
    pub const LEGACY_ACTIVATOR_RAIL: MaterialEnum = MaterialEnum::LegacyActivatorRail;
    pub const LEGACY_DROPPER: MaterialEnum = MaterialEnum::LegacyDropper;
    pub const LEGACY_STAINED_CLAY: MaterialEnum = MaterialEnum::LegacyStainedClay;
    pub const LEGACY_STAINED_GLASS_PANE: MaterialEnum = MaterialEnum::LegacyStainedGlassPane;
    pub const LEGACY_LEAVES_2: MaterialEnum = MaterialEnum::LegacyLeaves2;
    pub const LEGACY_LOG_2: MaterialEnum = MaterialEnum::LegacyLog2;
    pub const LEGACY_ACACIA_STAIRS: MaterialEnum = MaterialEnum::LegacyAcaciaStairs;
    pub const LEGACY_DARK_OAK_STAIRS: MaterialEnum = MaterialEnum::LegacyDarkOakStairs;
    pub const LEGACY_SLIME_BLOCK: MaterialEnum = MaterialEnum::LegacySlimeBlock;
    pub const LEGACY_BARRIER: MaterialEnum = MaterialEnum::LegacyBarrier;
    pub const LEGACY_IRON_TRAPDOOR: MaterialEnum = MaterialEnum::LegacyIronTrapdoor;
    pub const LEGACY_PRISMARINE: MaterialEnum = MaterialEnum::LegacyPrismarine;
    pub const LEGACY_SEA_LANTERN: MaterialEnum = MaterialEnum::LegacySeaLantern;
    pub const LEGACY_HAY_BLOCK: MaterialEnum = MaterialEnum::LegacyHayBlock;
    pub const LEGACY_CARPET: MaterialEnum = MaterialEnum::LegacyCarpet;
    pub const LEGACY_HARD_CLAY: MaterialEnum = MaterialEnum::LegacyHardClay;
    pub const LEGACY_COAL_BLOCK: MaterialEnum = MaterialEnum::LegacyCoalBlock;
    pub const LEGACY_PACKED_ICE: MaterialEnum = MaterialEnum::LegacyPackedIce;
    pub const LEGACY_DOUBLE_PLANT: MaterialEnum = MaterialEnum::LegacyDoublePlant;
    pub const LEGACY_STANDING_BANNER: MaterialEnum = MaterialEnum::LegacyStandingBanner;
    pub const LEGACY_WALL_BANNER: MaterialEnum = MaterialEnum::LegacyWallBanner;
    pub const LEGACY_DAYLIGHT_DETECTOR_INVERTED: MaterialEnum =
        MaterialEnum::LegacyDaylightDetectorInverted;
    pub const LEGACY_RED_SANDSTONE: MaterialEnum = MaterialEnum::LegacyRedSandstone;
    pub const LEGACY_RED_SANDSTONE_STAIRS: MaterialEnum = MaterialEnum::LegacyRedSandstoneStairs;
    pub const LEGACY_DOUBLE_STONE_SLAB2: MaterialEnum = MaterialEnum::LegacyDoubleStoneSlab2;
    pub const LEGACY_STONE_SLAB2: MaterialEnum = MaterialEnum::LegacyStoneSlab2;
    pub const LEGACY_SPRUCE_FENCE_GATE: MaterialEnum = MaterialEnum::LegacySpruceFenceGate;
    pub const LEGACY_BIRCH_FENCE_GATE: MaterialEnum = MaterialEnum::LegacyBirchFenceGate;
    pub const LEGACY_JUNGLE_FENCE_GATE: MaterialEnum = MaterialEnum::LegacyJungleFenceGate;
    pub const LEGACY_DARK_OAK_FENCE_GATE: MaterialEnum = MaterialEnum::LegacyDarkOakFenceGate;
    pub const LEGACY_ACACIA_FENCE_GATE: MaterialEnum = MaterialEnum::LegacyAcaciaFenceGate;
    pub const LEGACY_SPRUCE_FENCE: MaterialEnum = MaterialEnum::LegacySpruceFence;
    pub const LEGACY_BIRCH_FENCE: MaterialEnum = MaterialEnum::LegacyBirchFence;
    pub const LEGACY_JUNGLE_FENCE: MaterialEnum = MaterialEnum::LegacyJungleFence;
    pub const LEGACY_DARK_OAK_FENCE: MaterialEnum = MaterialEnum::LegacyDarkOakFence;
    pub const LEGACY_ACACIA_FENCE: MaterialEnum = MaterialEnum::LegacyAcaciaFence;
    pub const LEGACY_SPRUCE_DOOR: MaterialEnum = MaterialEnum::LegacySpruceDoor;
    pub const LEGACY_BIRCH_DOOR: MaterialEnum = MaterialEnum::LegacyBirchDoor;
    pub const LEGACY_JUNGLE_DOOR: MaterialEnum = MaterialEnum::LegacyJungleDoor;
    pub const LEGACY_ACACIA_DOOR: MaterialEnum = MaterialEnum::LegacyAcaciaDoor;
    pub const LEGACY_DARK_OAK_DOOR: MaterialEnum = MaterialEnum::LegacyDarkOakDoor;
    pub const LEGACY_END_ROD: MaterialEnum = MaterialEnum::LegacyEndRod;
    pub const LEGACY_CHORUS_PLANT: MaterialEnum = MaterialEnum::LegacyChorusPlant;
    pub const LEGACY_CHORUS_FLOWER: MaterialEnum = MaterialEnum::LegacyChorusFlower;
    pub const LEGACY_PURPUR_BLOCK: MaterialEnum = MaterialEnum::LegacyPurpurBlock;
    pub const LEGACY_PURPUR_PILLAR: MaterialEnum = MaterialEnum::LegacyPurpurPillar;
    pub const LEGACY_PURPUR_STAIRS: MaterialEnum = MaterialEnum::LegacyPurpurStairs;
    pub const LEGACY_PURPUR_DOUBLE_SLAB: MaterialEnum = MaterialEnum::LegacyPurpurDoubleSlab;
    pub const LEGACY_PURPUR_SLAB: MaterialEnum = MaterialEnum::LegacyPurpurSlab;
    pub const LEGACY_END_BRICKS: MaterialEnum = MaterialEnum::LegacyEndBricks;
    pub const LEGACY_BEETROOT_BLOCK: MaterialEnum = MaterialEnum::LegacyBeetrootBlock;
    pub const LEGACY_GRASS_PATH: MaterialEnum = MaterialEnum::LegacyGrassPath;
    pub const LEGACY_END_GATEWAY: MaterialEnum = MaterialEnum::LegacyEndGateway;
    pub const LEGACY_COMMAND_REPEATING: MaterialEnum = MaterialEnum::LegacyCommandRepeating;
    pub const LEGACY_COMMAND_CHAIN: MaterialEnum = MaterialEnum::LegacyCommandChain;
    pub const LEGACY_FROSTED_ICE: MaterialEnum = MaterialEnum::LegacyFrostedIce;
    pub const LEGACY_MAGMA: MaterialEnum = MaterialEnum::LegacyMagma;
    pub const LEGACY_NETHER_WART_BLOCK: MaterialEnum = MaterialEnum::LegacyNetherWartBlock;
    pub const LEGACY_RED_NETHER_BRICK: MaterialEnum = MaterialEnum::LegacyRedNetherBrick;
    pub const LEGACY_BONE_BLOCK: MaterialEnum = MaterialEnum::LegacyBoneBlock;
    pub const LEGACY_STRUCTURE_VOID: MaterialEnum = MaterialEnum::LegacyStructureVoid;
    pub const LEGACY_OBSERVER: MaterialEnum = MaterialEnum::LegacyObserver;
    pub const LEGACY_WHITE_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyWhiteShulkerBox;
    pub const LEGACY_ORANGE_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyOrangeShulkerBox;
    pub const LEGACY_MAGENTA_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyMagentaShulkerBox;
    pub const LEGACY_LIGHT_BLUE_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyLightBlueShulkerBox;
    pub const LEGACY_YELLOW_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyYellowShulkerBox;
    pub const LEGACY_LIME_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyLimeShulkerBox;
    pub const LEGACY_PINK_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyPinkShulkerBox;
    pub const LEGACY_GRAY_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyGrayShulkerBox;
    pub const LEGACY_SILVER_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacySilverShulkerBox;
    pub const LEGACY_CYAN_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyCyanShulkerBox;
    pub const LEGACY_PURPLE_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyPurpleShulkerBox;
    pub const LEGACY_BLUE_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyBlueShulkerBox;
    pub const LEGACY_BROWN_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyBrownShulkerBox;
    pub const LEGACY_GREEN_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyGreenShulkerBox;
    pub const LEGACY_RED_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyRedShulkerBox;
    pub const LEGACY_BLACK_SHULKER_BOX: MaterialEnum = MaterialEnum::LegacyBlackShulkerBox;
    pub const LEGACY_WHITE_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyWhiteGlazedTerracotta;
    pub const LEGACY_ORANGE_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyOrangeGlazedTerracotta;
    pub const LEGACY_MAGENTA_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyMagentaGlazedTerracotta;
    pub const LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyLightBlueGlazedTerracotta;
    pub const LEGACY_YELLOW_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyYellowGlazedTerracotta;
    pub const LEGACY_LIME_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyLimeGlazedTerracotta;
    pub const LEGACY_PINK_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyPinkGlazedTerracotta;
    pub const LEGACY_GRAY_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyGrayGlazedTerracotta;
    pub const LEGACY_SILVER_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacySilverGlazedTerracotta;
    pub const LEGACY_CYAN_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyCyanGlazedTerracotta;
    pub const LEGACY_PURPLE_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyPurpleGlazedTerracotta;
    pub const LEGACY_BLUE_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyBlueGlazedTerracotta;
    pub const LEGACY_BROWN_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyBrownGlazedTerracotta;
    pub const LEGACY_GREEN_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyGreenGlazedTerracotta;
    pub const LEGACY_RED_GLAZED_TERRACOTTA: MaterialEnum = MaterialEnum::LegacyRedGlazedTerracotta;
    pub const LEGACY_BLACK_GLAZED_TERRACOTTA: MaterialEnum =
        MaterialEnum::LegacyBlackGlazedTerracotta;
    pub const LEGACY_CONCRETE: MaterialEnum = MaterialEnum::LegacyConcrete;
    pub const LEGACY_CONCRETE_POWDER: MaterialEnum = MaterialEnum::LegacyConcretePowder;
    pub const LEGACY_STRUCTURE_BLOCK: MaterialEnum = MaterialEnum::LegacyStructureBlock;
    pub const LEGACY_IRON_SPADE: MaterialEnum = MaterialEnum::LegacyIronSpade;
    pub const LEGACY_IRON_PICKAXE: MaterialEnum = MaterialEnum::LegacyIronPickaxe;
    pub const LEGACY_IRON_AXE: MaterialEnum = MaterialEnum::LegacyIronAxe;
    pub const LEGACY_FLINT_AND_STEEL: MaterialEnum = MaterialEnum::LegacyFlintAndSteel;
    pub const LEGACY_APPLE: MaterialEnum = MaterialEnum::LegacyApple;
    pub const LEGACY_BOW: MaterialEnum = MaterialEnum::LegacyBow;
    pub const LEGACY_ARROW: MaterialEnum = MaterialEnum::LegacyArrow;
    pub const LEGACY_COAL: MaterialEnum = MaterialEnum::LegacyCoal;
    pub const LEGACY_DIAMOND: MaterialEnum = MaterialEnum::LegacyDiamond;
    pub const LEGACY_IRON_INGOT: MaterialEnum = MaterialEnum::LegacyIronIngot;
    pub const LEGACY_GOLD_INGOT: MaterialEnum = MaterialEnum::LegacyGoldIngot;
    pub const LEGACY_IRON_SWORD: MaterialEnum = MaterialEnum::LegacyIronSword;
    pub const LEGACY_WOOD_SWORD: MaterialEnum = MaterialEnum::LegacyWoodSword;
    pub const LEGACY_WOOD_SPADE: MaterialEnum = MaterialEnum::LegacyWoodSpade;
    pub const LEGACY_WOOD_PICKAXE: MaterialEnum = MaterialEnum::LegacyWoodPickaxe;
    pub const LEGACY_WOOD_AXE: MaterialEnum = MaterialEnum::LegacyWoodAxe;
    pub const LEGACY_STONE_SWORD: MaterialEnum = MaterialEnum::LegacyStoneSword;
    pub const LEGACY_STONE_SPADE: MaterialEnum = MaterialEnum::LegacyStoneSpade;
    pub const LEGACY_STONE_PICKAXE: MaterialEnum = MaterialEnum::LegacyStonePickaxe;
    pub const LEGACY_STONE_AXE: MaterialEnum = MaterialEnum::LegacyStoneAxe;
    pub const LEGACY_DIAMOND_SWORD: MaterialEnum = MaterialEnum::LegacyDiamondSword;
    pub const LEGACY_DIAMOND_SPADE: MaterialEnum = MaterialEnum::LegacyDiamondSpade;
    pub const LEGACY_DIAMOND_PICKAXE: MaterialEnum = MaterialEnum::LegacyDiamondPickaxe;
    pub const LEGACY_DIAMOND_AXE: MaterialEnum = MaterialEnum::LegacyDiamondAxe;
    pub const LEGACY_STICK: MaterialEnum = MaterialEnum::LegacyStick;
    pub const LEGACY_BOWL: MaterialEnum = MaterialEnum::LegacyBowl;
    pub const LEGACY_MUSHROOM_SOUP: MaterialEnum = MaterialEnum::LegacyMushroomSoup;
    pub const LEGACY_GOLD_SWORD: MaterialEnum = MaterialEnum::LegacyGoldSword;
    pub const LEGACY_GOLD_SPADE: MaterialEnum = MaterialEnum::LegacyGoldSpade;
    pub const LEGACY_GOLD_PICKAXE: MaterialEnum = MaterialEnum::LegacyGoldPickaxe;
    pub const LEGACY_GOLD_AXE: MaterialEnum = MaterialEnum::LegacyGoldAxe;
    pub const LEGACY_STRING: MaterialEnum = MaterialEnum::LegacyString;
    pub const LEGACY_FEATHER: MaterialEnum = MaterialEnum::LegacyFeather;
    pub const LEGACY_SULPHUR: MaterialEnum = MaterialEnum::LegacySulphur;
    pub const LEGACY_WOOD_HOE: MaterialEnum = MaterialEnum::LegacyWoodHoe;
    pub const LEGACY_STONE_HOE: MaterialEnum = MaterialEnum::LegacyStoneHoe;
    pub const LEGACY_IRON_HOE: MaterialEnum = MaterialEnum::LegacyIronHoe;
    pub const LEGACY_DIAMOND_HOE: MaterialEnum = MaterialEnum::LegacyDiamondHoe;
    pub const LEGACY_GOLD_HOE: MaterialEnum = MaterialEnum::LegacyGoldHoe;
    pub const LEGACY_SEEDS: MaterialEnum = MaterialEnum::LegacySeeds;
    pub const LEGACY_WHEAT: MaterialEnum = MaterialEnum::LegacyWheat;
    pub const LEGACY_BREAD: MaterialEnum = MaterialEnum::LegacyBread;
    pub const LEGACY_LEATHER_HELMET: MaterialEnum = MaterialEnum::LegacyLeatherHelmet;
    pub const LEGACY_LEATHER_CHESTPLATE: MaterialEnum = MaterialEnum::LegacyLeatherChestplate;
    pub const LEGACY_LEATHER_LEGGINGS: MaterialEnum = MaterialEnum::LegacyLeatherLeggings;
    pub const LEGACY_LEATHER_BOOTS: MaterialEnum = MaterialEnum::LegacyLeatherBoots;
    pub const LEGACY_CHAINMAIL_HELMET: MaterialEnum = MaterialEnum::LegacyChainmailHelmet;
    pub const LEGACY_CHAINMAIL_CHESTPLATE: MaterialEnum = MaterialEnum::LegacyChainmailChestplate;
    pub const LEGACY_CHAINMAIL_LEGGINGS: MaterialEnum = MaterialEnum::LegacyChainmailLeggings;
    pub const LEGACY_CHAINMAIL_BOOTS: MaterialEnum = MaterialEnum::LegacyChainmailBoots;
    pub const LEGACY_IRON_HELMET: MaterialEnum = MaterialEnum::LegacyIronHelmet;
    pub const LEGACY_IRON_CHESTPLATE: MaterialEnum = MaterialEnum::LegacyIronChestplate;
    pub const LEGACY_IRON_LEGGINGS: MaterialEnum = MaterialEnum::LegacyIronLeggings;
    pub const LEGACY_IRON_BOOTS: MaterialEnum = MaterialEnum::LegacyIronBoots;
    pub const LEGACY_DIAMOND_HELMET: MaterialEnum = MaterialEnum::LegacyDiamondHelmet;
    pub const LEGACY_DIAMOND_CHESTPLATE: MaterialEnum = MaterialEnum::LegacyDiamondChestplate;
    pub const LEGACY_DIAMOND_LEGGINGS: MaterialEnum = MaterialEnum::LegacyDiamondLeggings;
    pub const LEGACY_DIAMOND_BOOTS: MaterialEnum = MaterialEnum::LegacyDiamondBoots;
    pub const LEGACY_GOLD_HELMET: MaterialEnum = MaterialEnum::LegacyGoldHelmet;
    pub const LEGACY_GOLD_CHESTPLATE: MaterialEnum = MaterialEnum::LegacyGoldChestplate;
    pub const LEGACY_GOLD_LEGGINGS: MaterialEnum = MaterialEnum::LegacyGoldLeggings;
    pub const LEGACY_GOLD_BOOTS: MaterialEnum = MaterialEnum::LegacyGoldBoots;
    pub const LEGACY_FLINT: MaterialEnum = MaterialEnum::LegacyFlint;
    pub const LEGACY_PORK: MaterialEnum = MaterialEnum::LegacyPork;
    pub const LEGACY_GRILLED_PORK: MaterialEnum = MaterialEnum::LegacyGrilledPork;
    pub const LEGACY_PAINTING: MaterialEnum = MaterialEnum::LegacyPainting;
    pub const LEGACY_GOLDEN_APPLE: MaterialEnum = MaterialEnum::LegacyGoldenApple;
    pub const LEGACY_SIGN: MaterialEnum = MaterialEnum::LegacySign;
    pub const LEGACY_WOOD_DOOR: MaterialEnum = MaterialEnum::LegacyWoodDoor;
    pub const LEGACY_BUCKET: MaterialEnum = MaterialEnum::LegacyBucket;
    pub const LEGACY_WATER_BUCKET: MaterialEnum = MaterialEnum::LegacyWaterBucket;
    pub const LEGACY_LAVA_BUCKET: MaterialEnum = MaterialEnum::LegacyLavaBucket;
    pub const LEGACY_MINECART: MaterialEnum = MaterialEnum::LegacyMinecart;
    pub const LEGACY_SADDLE: MaterialEnum = MaterialEnum::LegacySaddle;
    pub const LEGACY_IRON_DOOR: MaterialEnum = MaterialEnum::LegacyIronDoor;
    pub const LEGACY_REDSTONE: MaterialEnum = MaterialEnum::LegacyRedstone;
    pub const LEGACY_SNOW_BALL: MaterialEnum = MaterialEnum::LegacySnowBall;
    pub const LEGACY_BOAT: MaterialEnum = MaterialEnum::LegacyBoat;
    pub const LEGACY_LEATHER: MaterialEnum = MaterialEnum::LegacyLeather;
    pub const LEGACY_MILK_BUCKET: MaterialEnum = MaterialEnum::LegacyMilkBucket;
    pub const LEGACY_CLAY_BRICK: MaterialEnum = MaterialEnum::LegacyClayBrick;
    pub const LEGACY_CLAY_BALL: MaterialEnum = MaterialEnum::LegacyClayBall;
    pub const LEGACY_SUGAR_CANE: MaterialEnum = MaterialEnum::LegacySugarCane;
    pub const LEGACY_PAPER: MaterialEnum = MaterialEnum::LegacyPaper;
    pub const LEGACY_BOOK: MaterialEnum = MaterialEnum::LegacyBook;
    pub const LEGACY_SLIME_BALL: MaterialEnum = MaterialEnum::LegacySlimeBall;
    pub const LEGACY_STORAGE_MINECART: MaterialEnum = MaterialEnum::LegacyStorageMinecart;
    pub const LEGACY_POWERED_MINECART: MaterialEnum = MaterialEnum::LegacyPoweredMinecart;
    pub const LEGACY_EGG: MaterialEnum = MaterialEnum::LegacyEgg;
    pub const LEGACY_COMPASS: MaterialEnum = MaterialEnum::LegacyCompass;
    pub const LEGACY_FISHING_ROD: MaterialEnum = MaterialEnum::LegacyFishingRod;
    pub const LEGACY_WATCH: MaterialEnum = MaterialEnum::LegacyWatch;
    pub const LEGACY_GLOWSTONE_DUST: MaterialEnum = MaterialEnum::LegacyGlowstoneDust;
    pub const LEGACY_RAW_FISH: MaterialEnum = MaterialEnum::LegacyRawFish;
    pub const LEGACY_COOKED_FISH: MaterialEnum = MaterialEnum::LegacyCookedFish;
    pub const LEGACY_INK_SACK: MaterialEnum = MaterialEnum::LegacyInkSack;
    pub const LEGACY_BONE: MaterialEnum = MaterialEnum::LegacyBone;
    pub const LEGACY_SUGAR: MaterialEnum = MaterialEnum::LegacySugar;
    pub const LEGACY_CAKE: MaterialEnum = MaterialEnum::LegacyCake;
    pub const LEGACY_BED: MaterialEnum = MaterialEnum::LegacyBed;
    pub const LEGACY_DIODE: MaterialEnum = MaterialEnum::LegacyDiode;
    pub const LEGACY_COOKIE: MaterialEnum = MaterialEnum::LegacyCookie;
    pub const LEGACY_MAP: MaterialEnum = MaterialEnum::LegacyMap;
    pub const LEGACY_SHEARS: MaterialEnum = MaterialEnum::LegacyShears;
    pub const LEGACY_MELON: MaterialEnum = MaterialEnum::LegacyMelon;
    pub const LEGACY_PUMPKIN_SEEDS: MaterialEnum = MaterialEnum::LegacyPumpkinSeeds;
    pub const LEGACY_MELON_SEEDS: MaterialEnum = MaterialEnum::LegacyMelonSeeds;
    pub const LEGACY_RAW_BEEF: MaterialEnum = MaterialEnum::LegacyRawBeef;
    pub const LEGACY_COOKED_BEEF: MaterialEnum = MaterialEnum::LegacyCookedBeef;
    pub const LEGACY_RAW_CHICKEN: MaterialEnum = MaterialEnum::LegacyRawChicken;
    pub const LEGACY_COOKED_CHICKEN: MaterialEnum = MaterialEnum::LegacyCookedChicken;
    pub const LEGACY_ROTTEN_FLESH: MaterialEnum = MaterialEnum::LegacyRottenFlesh;
    pub const LEGACY_ENDER_PEARL: MaterialEnum = MaterialEnum::LegacyEnderPearl;
    pub const LEGACY_BLAZE_ROD: MaterialEnum = MaterialEnum::LegacyBlazeRod;
    pub const LEGACY_GHAST_TEAR: MaterialEnum = MaterialEnum::LegacyGhastTear;
    pub const LEGACY_GOLD_NUGGET: MaterialEnum = MaterialEnum::LegacyGoldNugget;
    pub const LEGACY_NETHER_STALK: MaterialEnum = MaterialEnum::LegacyNetherStalk;
    pub const LEGACY_POTION: MaterialEnum = MaterialEnum::LegacyPotion;
    pub const LEGACY_GLASS_BOTTLE: MaterialEnum = MaterialEnum::LegacyGlassBottle;
    pub const LEGACY_SPIDER_EYE: MaterialEnum = MaterialEnum::LegacySpiderEye;
    pub const LEGACY_FERMENTED_SPIDER_EYE: MaterialEnum = MaterialEnum::LegacyFermentedSpiderEye;
    pub const LEGACY_BLAZE_POWDER: MaterialEnum = MaterialEnum::LegacyBlazePowder;
    pub const LEGACY_MAGMA_CREAM: MaterialEnum = MaterialEnum::LegacyMagmaCream;
    pub const LEGACY_BREWING_STAND_ITEM: MaterialEnum = MaterialEnum::LegacyBrewingStandItem;
    pub const LEGACY_CAULDRON_ITEM: MaterialEnum = MaterialEnum::LegacyCauldronItem;
    pub const LEGACY_EYE_OF_ENDER: MaterialEnum = MaterialEnum::LegacyEyeOfEnder;
    pub const LEGACY_SPECKLED_MELON: MaterialEnum = MaterialEnum::LegacySpeckledMelon;
    pub const LEGACY_MONSTER_EGG: MaterialEnum = MaterialEnum::LegacyMonsterEgg;
    pub const LEGACY_EXP_BOTTLE: MaterialEnum = MaterialEnum::LegacyExpBottle;
    pub const LEGACY_FIREBALL: MaterialEnum = MaterialEnum::LegacyFireball;
    pub const LEGACY_BOOK_AND_QUILL: MaterialEnum = MaterialEnum::LegacyBookAndQuill;
    pub const LEGACY_WRITTEN_BOOK: MaterialEnum = MaterialEnum::LegacyWrittenBook;
    pub const LEGACY_EMERALD: MaterialEnum = MaterialEnum::LegacyEmerald;
    pub const LEGACY_ITEM_FRAME: MaterialEnum = MaterialEnum::LegacyItemFrame;
    pub const LEGACY_FLOWER_POT_ITEM: MaterialEnum = MaterialEnum::LegacyFlowerPotItem;
    pub const LEGACY_CARROT_ITEM: MaterialEnum = MaterialEnum::LegacyCarrotItem;
    pub const LEGACY_POTATO_ITEM: MaterialEnum = MaterialEnum::LegacyPotatoItem;
    pub const LEGACY_BAKED_POTATO: MaterialEnum = MaterialEnum::LegacyBakedPotato;
    pub const LEGACY_POISONOUS_POTATO: MaterialEnum = MaterialEnum::LegacyPoisonousPotato;
    pub const LEGACY_EMPTY_MAP: MaterialEnum = MaterialEnum::LegacyEmptyMap;
    pub const LEGACY_GOLDEN_CARROT: MaterialEnum = MaterialEnum::LegacyGoldenCarrot;
    pub const LEGACY_SKULL_ITEM: MaterialEnum = MaterialEnum::LegacySkullItem;
    pub const LEGACY_CARROT_STICK: MaterialEnum = MaterialEnum::LegacyCarrotStick;
    pub const LEGACY_NETHER_STAR: MaterialEnum = MaterialEnum::LegacyNetherStar;
    pub const LEGACY_PUMPKIN_PIE: MaterialEnum = MaterialEnum::LegacyPumpkinPie;
    pub const LEGACY_FIREWORK: MaterialEnum = MaterialEnum::LegacyFirework;
    pub const LEGACY_FIREWORK_CHARGE: MaterialEnum = MaterialEnum::LegacyFireworkCharge;
    pub const LEGACY_ENCHANTED_BOOK: MaterialEnum = MaterialEnum::LegacyEnchantedBook;
    pub const LEGACY_REDSTONE_COMPARATOR: MaterialEnum = MaterialEnum::LegacyRedstoneComparator;
    pub const LEGACY_NETHER_BRICK_ITEM: MaterialEnum = MaterialEnum::LegacyNetherBrickItem;
    pub const LEGACY_QUARTZ: MaterialEnum = MaterialEnum::LegacyQuartz;
    pub const LEGACY_EXPLOSIVE_MINECART: MaterialEnum = MaterialEnum::LegacyExplosiveMinecart;
    pub const LEGACY_HOPPER_MINECART: MaterialEnum = MaterialEnum::LegacyHopperMinecart;
    pub const LEGACY_PRISMARINE_SHARD: MaterialEnum = MaterialEnum::LegacyPrismarineShard;
    pub const LEGACY_PRISMARINE_CRYSTALS: MaterialEnum = MaterialEnum::LegacyPrismarineCrystals;
    pub const LEGACY_RABBIT: MaterialEnum = MaterialEnum::LegacyRabbit;
    pub const LEGACY_COOKED_RABBIT: MaterialEnum = MaterialEnum::LegacyCookedRabbit;
    pub const LEGACY_RABBIT_STEW: MaterialEnum = MaterialEnum::LegacyRabbitStew;
    pub const LEGACY_RABBIT_FOOT: MaterialEnum = MaterialEnum::LegacyRabbitFoot;
    pub const LEGACY_RABBIT_HIDE: MaterialEnum = MaterialEnum::LegacyRabbitHide;
    pub const LEGACY_ARMOR_STAND: MaterialEnum = MaterialEnum::LegacyArmorStand;
    pub const LEGACY_IRON_BARDING: MaterialEnum = MaterialEnum::LegacyIronBarding;
    pub const LEGACY_GOLD_BARDING: MaterialEnum = MaterialEnum::LegacyGoldBarding;
    pub const LEGACY_DIAMOND_BARDING: MaterialEnum = MaterialEnum::LegacyDiamondBarding;
    pub const LEGACY_LEASH: MaterialEnum = MaterialEnum::LegacyLeash;
    pub const LEGACY_NAME_TAG: MaterialEnum = MaterialEnum::LegacyNameTag;
    pub const LEGACY_COMMAND_MINECART: MaterialEnum = MaterialEnum::LegacyCommandMinecart;
    pub const LEGACY_MUTTON: MaterialEnum = MaterialEnum::LegacyMutton;
    pub const LEGACY_COOKED_MUTTON: MaterialEnum = MaterialEnum::LegacyCookedMutton;
    pub const LEGACY_BANNER: MaterialEnum = MaterialEnum::LegacyBanner;
    pub const LEGACY_END_CRYSTAL: MaterialEnum = MaterialEnum::LegacyEndCrystal;
    pub const LEGACY_SPRUCE_DOOR_ITEM: MaterialEnum = MaterialEnum::LegacySpruceDoorItem;
    pub const LEGACY_BIRCH_DOOR_ITEM: MaterialEnum = MaterialEnum::LegacyBirchDoorItem;
    pub const LEGACY_JUNGLE_DOOR_ITEM: MaterialEnum = MaterialEnum::LegacyJungleDoorItem;
    pub const LEGACY_ACACIA_DOOR_ITEM: MaterialEnum = MaterialEnum::LegacyAcaciaDoorItem;
    pub const LEGACY_DARK_OAK_DOOR_ITEM: MaterialEnum = MaterialEnum::LegacyDarkOakDoorItem;
    pub const LEGACY_CHORUS_FRUIT: MaterialEnum = MaterialEnum::LegacyChorusFruit;
    pub const LEGACY_CHORUS_FRUIT_POPPED: MaterialEnum = MaterialEnum::LegacyChorusFruitPopped;
    pub const LEGACY_BEETROOT: MaterialEnum = MaterialEnum::LegacyBeetroot;
    pub const LEGACY_BEETROOT_SEEDS: MaterialEnum = MaterialEnum::LegacyBeetrootSeeds;
    pub const LEGACY_BEETROOT_SOUP: MaterialEnum = MaterialEnum::LegacyBeetrootSoup;
    pub const LEGACY_DRAGONS_BREATH: MaterialEnum = MaterialEnum::LegacyDragonsBreath;
    pub const LEGACY_SPLASH_POTION: MaterialEnum = MaterialEnum::LegacySplashPotion;
    pub const LEGACY_SPECTRAL_ARROW: MaterialEnum = MaterialEnum::LegacySpectralArrow;
    pub const LEGACY_TIPPED_ARROW: MaterialEnum = MaterialEnum::LegacyTippedArrow;
    pub const LEGACY_LINGERING_POTION: MaterialEnum = MaterialEnum::LegacyLingeringPotion;
    pub const LEGACY_SHIELD: MaterialEnum = MaterialEnum::LegacyShield;
    pub const LEGACY_ELYTRA: MaterialEnum = MaterialEnum::LegacyElytra;
    pub const LEGACY_BOAT_SPRUCE: MaterialEnum = MaterialEnum::LegacyBoatSpruce;
    pub const LEGACY_BOAT_BIRCH: MaterialEnum = MaterialEnum::LegacyBoatBirch;
    pub const LEGACY_BOAT_JUNGLE: MaterialEnum = MaterialEnum::LegacyBoatJungle;
    pub const LEGACY_BOAT_ACACIA: MaterialEnum = MaterialEnum::LegacyBoatAcacia;
    pub const LEGACY_BOAT_DARK_OAK: MaterialEnum = MaterialEnum::LegacyBoatDarkOak;
    pub const LEGACY_TOTEM: MaterialEnum = MaterialEnum::LegacyTotem;
    pub const LEGACY_SHULKER_SHELL: MaterialEnum = MaterialEnum::LegacyShulkerShell;
    pub const LEGACY_IRON_NUGGET: MaterialEnum = MaterialEnum::LegacyIronNugget;
    pub const LEGACY_KNOWLEDGE_BOOK: MaterialEnum = MaterialEnum::LegacyKnowledgeBook;
    pub const LEGACY_GOLD_RECORD: MaterialEnum = MaterialEnum::LegacyGoldRecord;
    pub const LEGACY_GREEN_RECORD: MaterialEnum = MaterialEnum::LegacyGreenRecord;
    pub const LEGACY_RECORD_3: MaterialEnum = MaterialEnum::LegacyRecord3;
    pub const LEGACY_RECORD_4: MaterialEnum = MaterialEnum::LegacyRecord4;
    pub const LEGACY_RECORD_5: MaterialEnum = MaterialEnum::LegacyRecord5;
    pub const LEGACY_RECORD_6: MaterialEnum = MaterialEnum::LegacyRecord6;
    pub const LEGACY_RECORD_7: MaterialEnum = MaterialEnum::LegacyRecord7;
    pub const LEGACY_RECORD_8: MaterialEnum = MaterialEnum::LegacyRecord8;
    pub const LEGACY_RECORD_9: MaterialEnum = MaterialEnum::LegacyRecord9;
    pub const LEGACY_RECORD_10: MaterialEnum = MaterialEnum::LegacyRecord10;
    pub const LEGACY_RECORD_11: MaterialEnum = MaterialEnum::LegacyRecord11;
    pub const LEGACY_RECORD_12: MaterialEnum = MaterialEnum::LegacyRecord12;
    pub fn from_string(str: String) -> std::option::Option<MaterialEnum> {
        match str.as_str() {
            "AIR" => Some(MaterialEnum::Air),
            "STONE" => Some(MaterialEnum::Stone),
            "GRANITE" => Some(MaterialEnum::Granite),
            "POLISHED_GRANITE" => Some(MaterialEnum::PolishedGranite),
            "DIORITE" => Some(MaterialEnum::Diorite),
            "POLISHED_DIORITE" => Some(MaterialEnum::PolishedDiorite),
            "ANDESITE" => Some(MaterialEnum::Andesite),
            "POLISHED_ANDESITE" => Some(MaterialEnum::PolishedAndesite),
            "DEEPSLATE" => Some(MaterialEnum::Deepslate),
            "COBBLED_DEEPSLATE" => Some(MaterialEnum::CobbledDeepslate),
            "POLISHED_DEEPSLATE" => Some(MaterialEnum::PolishedDeepslate),
            "CALCITE" => Some(MaterialEnum::Calcite),
            "TUFF" => Some(MaterialEnum::Tuff),
            "DRIPSTONE_BLOCK" => Some(MaterialEnum::DripstoneBlock),
            "GRASS_BLOCK" => Some(MaterialEnum::GrassBlock),
            "DIRT" => Some(MaterialEnum::Dirt),
            "COARSE_DIRT" => Some(MaterialEnum::CoarseDirt),
            "PODZOL" => Some(MaterialEnum::Podzol),
            "ROOTED_DIRT" => Some(MaterialEnum::RootedDirt),
            "MUD" => Some(MaterialEnum::Mud),
            "CRIMSON_NYLIUM" => Some(MaterialEnum::CrimsonNylium),
            "WARPED_NYLIUM" => Some(MaterialEnum::WarpedNylium),
            "COBBLESTONE" => Some(MaterialEnum::Cobblestone),
            "OAK_PLANKS" => Some(MaterialEnum::OakPlanks),
            "SPRUCE_PLANKS" => Some(MaterialEnum::SprucePlanks),
            "BIRCH_PLANKS" => Some(MaterialEnum::BirchPlanks),
            "JUNGLE_PLANKS" => Some(MaterialEnum::JunglePlanks),
            "ACACIA_PLANKS" => Some(MaterialEnum::AcaciaPlanks),
            "CHERRY_PLANKS" => Some(MaterialEnum::CherryPlanks),
            "DARK_OAK_PLANKS" => Some(MaterialEnum::DarkOakPlanks),
            "MANGROVE_PLANKS" => Some(MaterialEnum::MangrovePlanks),
            "BAMBOO_PLANKS" => Some(MaterialEnum::BambooPlanks),
            "CRIMSON_PLANKS" => Some(MaterialEnum::CrimsonPlanks),
            "WARPED_PLANKS" => Some(MaterialEnum::WarpedPlanks),
            "BAMBOO_MOSAIC" => Some(MaterialEnum::BambooMosaic),
            "OAK_SAPLING" => Some(MaterialEnum::OakSapling),
            "SPRUCE_SAPLING" => Some(MaterialEnum::SpruceSapling),
            "BIRCH_SAPLING" => Some(MaterialEnum::BirchSapling),
            "JUNGLE_SAPLING" => Some(MaterialEnum::JungleSapling),
            "ACACIA_SAPLING" => Some(MaterialEnum::AcaciaSapling),
            "CHERRY_SAPLING" => Some(MaterialEnum::CherrySapling),
            "DARK_OAK_SAPLING" => Some(MaterialEnum::DarkOakSapling),
            "MANGROVE_PROPAGULE" => Some(MaterialEnum::MangrovePropagule),
            "BEDROCK" => Some(MaterialEnum::Bedrock),
            "SAND" => Some(MaterialEnum::Sand),
            "SUSPICIOUS_SAND" => Some(MaterialEnum::SuspiciousSand),
            "SUSPICIOUS_GRAVEL" => Some(MaterialEnum::SuspiciousGravel),
            "RED_SAND" => Some(MaterialEnum::RedSand),
            "GRAVEL" => Some(MaterialEnum::Gravel),
            "COAL_ORE" => Some(MaterialEnum::CoalOre),
            "DEEPSLATE_COAL_ORE" => Some(MaterialEnum::DeepslateCoalOre),
            "IRON_ORE" => Some(MaterialEnum::IronOre),
            "DEEPSLATE_IRON_ORE" => Some(MaterialEnum::DeepslateIronOre),
            "COPPER_ORE" => Some(MaterialEnum::CopperOre),
            "DEEPSLATE_COPPER_ORE" => Some(MaterialEnum::DeepslateCopperOre),
            "GOLD_ORE" => Some(MaterialEnum::GoldOre),
            "DEEPSLATE_GOLD_ORE" => Some(MaterialEnum::DeepslateGoldOre),
            "REDSTONE_ORE" => Some(MaterialEnum::RedstoneOre),
            "DEEPSLATE_REDSTONE_ORE" => Some(MaterialEnum::DeepslateRedstoneOre),
            "EMERALD_ORE" => Some(MaterialEnum::EmeraldOre),
            "DEEPSLATE_EMERALD_ORE" => Some(MaterialEnum::DeepslateEmeraldOre),
            "LAPIS_ORE" => Some(MaterialEnum::LapisOre),
            "DEEPSLATE_LAPIS_ORE" => Some(MaterialEnum::DeepslateLapisOre),
            "DIAMOND_ORE" => Some(MaterialEnum::DiamondOre),
            "DEEPSLATE_DIAMOND_ORE" => Some(MaterialEnum::DeepslateDiamondOre),
            "NETHER_GOLD_ORE" => Some(MaterialEnum::NetherGoldOre),
            "NETHER_QUARTZ_ORE" => Some(MaterialEnum::NetherQuartzOre),
            "ANCIENT_DEBRIS" => Some(MaterialEnum::AncientDebris),
            "COAL_BLOCK" => Some(MaterialEnum::CoalBlock),
            "RAW_IRON_BLOCK" => Some(MaterialEnum::RawIronBlock),
            "RAW_COPPER_BLOCK" => Some(MaterialEnum::RawCopperBlock),
            "RAW_GOLD_BLOCK" => Some(MaterialEnum::RawGoldBlock),
            "AMETHYST_BLOCK" => Some(MaterialEnum::AmethystBlock),
            "BUDDING_AMETHYST" => Some(MaterialEnum::BuddingAmethyst),
            "IRON_BLOCK" => Some(MaterialEnum::IronBlock),
            "COPPER_BLOCK" => Some(MaterialEnum::CopperBlock),
            "GOLD_BLOCK" => Some(MaterialEnum::GoldBlock),
            "DIAMOND_BLOCK" => Some(MaterialEnum::DiamondBlock),
            "NETHERITE_BLOCK" => Some(MaterialEnum::NetheriteBlock),
            "EXPOSED_COPPER" => Some(MaterialEnum::ExposedCopper),
            "WEATHERED_COPPER" => Some(MaterialEnum::WeatheredCopper),
            "OXIDIZED_COPPER" => Some(MaterialEnum::OxidizedCopper),
            "CUT_COPPER" => Some(MaterialEnum::CutCopper),
            "EXPOSED_CUT_COPPER" => Some(MaterialEnum::ExposedCutCopper),
            "WEATHERED_CUT_COPPER" => Some(MaterialEnum::WeatheredCutCopper),
            "OXIDIZED_CUT_COPPER" => Some(MaterialEnum::OxidizedCutCopper),
            "CUT_COPPER_STAIRS" => Some(MaterialEnum::CutCopperStairs),
            "EXPOSED_CUT_COPPER_STAIRS" => Some(MaterialEnum::ExposedCutCopperStairs),
            "WEATHERED_CUT_COPPER_STAIRS" => Some(MaterialEnum::WeatheredCutCopperStairs),
            "OXIDIZED_CUT_COPPER_STAIRS" => Some(MaterialEnum::OxidizedCutCopperStairs),
            "CUT_COPPER_SLAB" => Some(MaterialEnum::CutCopperSlab),
            "EXPOSED_CUT_COPPER_SLAB" => Some(MaterialEnum::ExposedCutCopperSlab),
            "WEATHERED_CUT_COPPER_SLAB" => Some(MaterialEnum::WeatheredCutCopperSlab),
            "OXIDIZED_CUT_COPPER_SLAB" => Some(MaterialEnum::OxidizedCutCopperSlab),
            "WAXED_COPPER_BLOCK" => Some(MaterialEnum::WaxedCopperBlock),
            "WAXED_EXPOSED_COPPER" => Some(MaterialEnum::WaxedExposedCopper),
            "WAXED_WEATHERED_COPPER" => Some(MaterialEnum::WaxedWeatheredCopper),
            "WAXED_OXIDIZED_COPPER" => Some(MaterialEnum::WaxedOxidizedCopper),
            "WAXED_CUT_COPPER" => Some(MaterialEnum::WaxedCutCopper),
            "WAXED_EXPOSED_CUT_COPPER" => Some(MaterialEnum::WaxedExposedCutCopper),
            "WAXED_WEATHERED_CUT_COPPER" => Some(MaterialEnum::WaxedWeatheredCutCopper),
            "WAXED_OXIDIZED_CUT_COPPER" => Some(MaterialEnum::WaxedOxidizedCutCopper),
            "WAXED_CUT_COPPER_STAIRS" => Some(MaterialEnum::WaxedCutCopperStairs),
            "WAXED_EXPOSED_CUT_COPPER_STAIRS" => Some(MaterialEnum::WaxedExposedCutCopperStairs),
            "WAXED_WEATHERED_CUT_COPPER_STAIRS" => {
                Some(MaterialEnum::WaxedWeatheredCutCopperStairs)
            }
            "WAXED_OXIDIZED_CUT_COPPER_STAIRS" => Some(MaterialEnum::WaxedOxidizedCutCopperStairs),
            "WAXED_CUT_COPPER_SLAB" => Some(MaterialEnum::WaxedCutCopperSlab),
            "WAXED_EXPOSED_CUT_COPPER_SLAB" => Some(MaterialEnum::WaxedExposedCutCopperSlab),
            "WAXED_WEATHERED_CUT_COPPER_SLAB" => Some(MaterialEnum::WaxedWeatheredCutCopperSlab),
            "WAXED_OXIDIZED_CUT_COPPER_SLAB" => Some(MaterialEnum::WaxedOxidizedCutCopperSlab),
            "OAK_LOG" => Some(MaterialEnum::OakLog),
            "SPRUCE_LOG" => Some(MaterialEnum::SpruceLog),
            "BIRCH_LOG" => Some(MaterialEnum::BirchLog),
            "JUNGLE_LOG" => Some(MaterialEnum::JungleLog),
            "ACACIA_LOG" => Some(MaterialEnum::AcaciaLog),
            "CHERRY_LOG" => Some(MaterialEnum::CherryLog),
            "DARK_OAK_LOG" => Some(MaterialEnum::DarkOakLog),
            "MANGROVE_LOG" => Some(MaterialEnum::MangroveLog),
            "MANGROVE_ROOTS" => Some(MaterialEnum::MangroveRoots),
            "MUDDY_MANGROVE_ROOTS" => Some(MaterialEnum::MuddyMangroveRoots),
            "CRIMSON_STEM" => Some(MaterialEnum::CrimsonStem),
            "WARPED_STEM" => Some(MaterialEnum::WarpedStem),
            "BAMBOO_BLOCK" => Some(MaterialEnum::BambooBlock),
            "STRIPPED_OAK_LOG" => Some(MaterialEnum::StrippedOakLog),
            "STRIPPED_SPRUCE_LOG" => Some(MaterialEnum::StrippedSpruceLog),
            "STRIPPED_BIRCH_LOG" => Some(MaterialEnum::StrippedBirchLog),
            "STRIPPED_JUNGLE_LOG" => Some(MaterialEnum::StrippedJungleLog),
            "STRIPPED_ACACIA_LOG" => Some(MaterialEnum::StrippedAcaciaLog),
            "STRIPPED_CHERRY_LOG" => Some(MaterialEnum::StrippedCherryLog),
            "STRIPPED_DARK_OAK_LOG" => Some(MaterialEnum::StrippedDarkOakLog),
            "STRIPPED_MANGROVE_LOG" => Some(MaterialEnum::StrippedMangroveLog),
            "STRIPPED_CRIMSON_STEM" => Some(MaterialEnum::StrippedCrimsonStem),
            "STRIPPED_WARPED_STEM" => Some(MaterialEnum::StrippedWarpedStem),
            "STRIPPED_OAK_WOOD" => Some(MaterialEnum::StrippedOakWood),
            "STRIPPED_SPRUCE_WOOD" => Some(MaterialEnum::StrippedSpruceWood),
            "STRIPPED_BIRCH_WOOD" => Some(MaterialEnum::StrippedBirchWood),
            "STRIPPED_JUNGLE_WOOD" => Some(MaterialEnum::StrippedJungleWood),
            "STRIPPED_ACACIA_WOOD" => Some(MaterialEnum::StrippedAcaciaWood),
            "STRIPPED_CHERRY_WOOD" => Some(MaterialEnum::StrippedCherryWood),
            "STRIPPED_DARK_OAK_WOOD" => Some(MaterialEnum::StrippedDarkOakWood),
            "STRIPPED_MANGROVE_WOOD" => Some(MaterialEnum::StrippedMangroveWood),
            "STRIPPED_CRIMSON_HYPHAE" => Some(MaterialEnum::StrippedCrimsonHyphae),
            "STRIPPED_WARPED_HYPHAE" => Some(MaterialEnum::StrippedWarpedHyphae),
            "STRIPPED_BAMBOO_BLOCK" => Some(MaterialEnum::StrippedBambooBlock),
            "OAK_WOOD" => Some(MaterialEnum::OakWood),
            "SPRUCE_WOOD" => Some(MaterialEnum::SpruceWood),
            "BIRCH_WOOD" => Some(MaterialEnum::BirchWood),
            "JUNGLE_WOOD" => Some(MaterialEnum::JungleWood),
            "ACACIA_WOOD" => Some(MaterialEnum::AcaciaWood),
            "CHERRY_WOOD" => Some(MaterialEnum::CherryWood),
            "DARK_OAK_WOOD" => Some(MaterialEnum::DarkOakWood),
            "MANGROVE_WOOD" => Some(MaterialEnum::MangroveWood),
            "CRIMSON_HYPHAE" => Some(MaterialEnum::CrimsonHyphae),
            "WARPED_HYPHAE" => Some(MaterialEnum::WarpedHyphae),
            "OAK_LEAVES" => Some(MaterialEnum::OakLeaves),
            "SPRUCE_LEAVES" => Some(MaterialEnum::SpruceLeaves),
            "BIRCH_LEAVES" => Some(MaterialEnum::BirchLeaves),
            "JUNGLE_LEAVES" => Some(MaterialEnum::JungleLeaves),
            "ACACIA_LEAVES" => Some(MaterialEnum::AcaciaLeaves),
            "CHERRY_LEAVES" => Some(MaterialEnum::CherryLeaves),
            "DARK_OAK_LEAVES" => Some(MaterialEnum::DarkOakLeaves),
            "MANGROVE_LEAVES" => Some(MaterialEnum::MangroveLeaves),
            "AZALEA_LEAVES" => Some(MaterialEnum::AzaleaLeaves),
            "FLOWERING_AZALEA_LEAVES" => Some(MaterialEnum::FloweringAzaleaLeaves),
            "SPONGE" => Some(MaterialEnum::Sponge),
            "WET_SPONGE" => Some(MaterialEnum::WetSponge),
            "GLASS" => Some(MaterialEnum::Glass),
            "TINTED_GLASS" => Some(MaterialEnum::TintedGlass),
            "LAPIS_BLOCK" => Some(MaterialEnum::LapisBlock),
            "SANDSTONE" => Some(MaterialEnum::Sandstone),
            "CHISELED_SANDSTONE" => Some(MaterialEnum::ChiseledSandstone),
            "CUT_SANDSTONE" => Some(MaterialEnum::CutSandstone),
            "COBWEB" => Some(MaterialEnum::Cobweb),
            "GRASS" => Some(MaterialEnum::Grass),
            "FERN" => Some(MaterialEnum::Fern),
            "AZALEA" => Some(MaterialEnum::Azalea),
            "FLOWERING_AZALEA" => Some(MaterialEnum::FloweringAzalea),
            "DEAD_BUSH" => Some(MaterialEnum::DeadBush),
            "SEAGRASS" => Some(MaterialEnum::Seagrass),
            "SEA_PICKLE" => Some(MaterialEnum::SeaPickle),
            "WHITE_WOOL" => Some(MaterialEnum::WhiteWool),
            "ORANGE_WOOL" => Some(MaterialEnum::OrangeWool),
            "MAGENTA_WOOL" => Some(MaterialEnum::MagentaWool),
            "LIGHT_BLUE_WOOL" => Some(MaterialEnum::LightBlueWool),
            "YELLOW_WOOL" => Some(MaterialEnum::YellowWool),
            "LIME_WOOL" => Some(MaterialEnum::LimeWool),
            "PINK_WOOL" => Some(MaterialEnum::PinkWool),
            "GRAY_WOOL" => Some(MaterialEnum::GrayWool),
            "LIGHT_GRAY_WOOL" => Some(MaterialEnum::LightGrayWool),
            "CYAN_WOOL" => Some(MaterialEnum::CyanWool),
            "PURPLE_WOOL" => Some(MaterialEnum::PurpleWool),
            "BLUE_WOOL" => Some(MaterialEnum::BlueWool),
            "BROWN_WOOL" => Some(MaterialEnum::BrownWool),
            "GREEN_WOOL" => Some(MaterialEnum::GreenWool),
            "RED_WOOL" => Some(MaterialEnum::RedWool),
            "BLACK_WOOL" => Some(MaterialEnum::BlackWool),
            "DANDELION" => Some(MaterialEnum::Dandelion),
            "POPPY" => Some(MaterialEnum::Poppy),
            "BLUE_ORCHID" => Some(MaterialEnum::BlueOrchid),
            "ALLIUM" => Some(MaterialEnum::Allium),
            "AZURE_BLUET" => Some(MaterialEnum::AzureBluet),
            "RED_TULIP" => Some(MaterialEnum::RedTulip),
            "ORANGE_TULIP" => Some(MaterialEnum::OrangeTulip),
            "WHITE_TULIP" => Some(MaterialEnum::WhiteTulip),
            "PINK_TULIP" => Some(MaterialEnum::PinkTulip),
            "OXEYE_DAISY" => Some(MaterialEnum::OxeyeDaisy),
            "CORNFLOWER" => Some(MaterialEnum::Cornflower),
            "LILY_OF_THE_VALLEY" => Some(MaterialEnum::LilyOfTheValley),
            "WITHER_ROSE" => Some(MaterialEnum::WitherRose),
            "TORCHFLOWER" => Some(MaterialEnum::Torchflower),
            "PITCHER_PLANT" => Some(MaterialEnum::PitcherPlant),
            "SPORE_BLOSSOM" => Some(MaterialEnum::SporeBlossom),
            "BROWN_MUSHROOM" => Some(MaterialEnum::BrownMushroom),
            "RED_MUSHROOM" => Some(MaterialEnum::RedMushroom),
            "CRIMSON_FUNGUS" => Some(MaterialEnum::CrimsonFungus),
            "WARPED_FUNGUS" => Some(MaterialEnum::WarpedFungus),
            "CRIMSON_ROOTS" => Some(MaterialEnum::CrimsonRoots),
            "WARPED_ROOTS" => Some(MaterialEnum::WarpedRoots),
            "NETHER_SPROUTS" => Some(MaterialEnum::NetherSprouts),
            "WEEPING_VINES" => Some(MaterialEnum::WeepingVines),
            "TWISTING_VINES" => Some(MaterialEnum::TwistingVines),
            "SUGAR_CANE" => Some(MaterialEnum::SugarCane),
            "KELP" => Some(MaterialEnum::Kelp),
            "MOSS_CARPET" => Some(MaterialEnum::MossCarpet),
            "PINK_PETALS" => Some(MaterialEnum::PinkPetals),
            "MOSS_BLOCK" => Some(MaterialEnum::MossBlock),
            "HANGING_ROOTS" => Some(MaterialEnum::HangingRoots),
            "BIG_DRIPLEAF" => Some(MaterialEnum::BigDripleaf),
            "SMALL_DRIPLEAF" => Some(MaterialEnum::SmallDripleaf),
            "BAMBOO" => Some(MaterialEnum::Bamboo),
            "OAK_SLAB" => Some(MaterialEnum::OakSlab),
            "SPRUCE_SLAB" => Some(MaterialEnum::SpruceSlab),
            "BIRCH_SLAB" => Some(MaterialEnum::BirchSlab),
            "JUNGLE_SLAB" => Some(MaterialEnum::JungleSlab),
            "ACACIA_SLAB" => Some(MaterialEnum::AcaciaSlab),
            "CHERRY_SLAB" => Some(MaterialEnum::CherrySlab),
            "DARK_OAK_SLAB" => Some(MaterialEnum::DarkOakSlab),
            "MANGROVE_SLAB" => Some(MaterialEnum::MangroveSlab),
            "BAMBOO_SLAB" => Some(MaterialEnum::BambooSlab),
            "BAMBOO_MOSAIC_SLAB" => Some(MaterialEnum::BambooMosaicSlab),
            "CRIMSON_SLAB" => Some(MaterialEnum::CrimsonSlab),
            "WARPED_SLAB" => Some(MaterialEnum::WarpedSlab),
            "STONE_SLAB" => Some(MaterialEnum::StoneSlab),
            "SMOOTH_STONE_SLAB" => Some(MaterialEnum::SmoothStoneSlab),
            "SANDSTONE_SLAB" => Some(MaterialEnum::SandstoneSlab),
            "CUT_SANDSTONE_SLAB" => Some(MaterialEnum::CutSandstoneSlab),
            "PETRIFIED_OAK_SLAB" => Some(MaterialEnum::PetrifiedOakSlab),
            "COBBLESTONE_SLAB" => Some(MaterialEnum::CobblestoneSlab),
            "BRICK_SLAB" => Some(MaterialEnum::BrickSlab),
            "STONE_BRICK_SLAB" => Some(MaterialEnum::StoneBrickSlab),
            "MUD_BRICK_SLAB" => Some(MaterialEnum::MudBrickSlab),
            "NETHER_BRICK_SLAB" => Some(MaterialEnum::NetherBrickSlab),
            "QUARTZ_SLAB" => Some(MaterialEnum::QuartzSlab),
            "RED_SANDSTONE_SLAB" => Some(MaterialEnum::RedSandstoneSlab),
            "CUT_RED_SANDSTONE_SLAB" => Some(MaterialEnum::CutRedSandstoneSlab),
            "PURPUR_SLAB" => Some(MaterialEnum::PurpurSlab),
            "PRISMARINE_SLAB" => Some(MaterialEnum::PrismarineSlab),
            "PRISMARINE_BRICK_SLAB" => Some(MaterialEnum::PrismarineBrickSlab),
            "DARK_PRISMARINE_SLAB" => Some(MaterialEnum::DarkPrismarineSlab),
            "SMOOTH_QUARTZ" => Some(MaterialEnum::SmoothQuartz),
            "SMOOTH_RED_SANDSTONE" => Some(MaterialEnum::SmoothRedSandstone),
            "SMOOTH_SANDSTONE" => Some(MaterialEnum::SmoothSandstone),
            "SMOOTH_STONE" => Some(MaterialEnum::SmoothStone),
            "BRICKS" => Some(MaterialEnum::Bricks),
            "BOOKSHELF" => Some(MaterialEnum::Bookshelf),
            "CHISELED_BOOKSHELF" => Some(MaterialEnum::ChiseledBookshelf),
            "DECORATED_POT" => Some(MaterialEnum::DecoratedPot),
            "MOSSY_COBBLESTONE" => Some(MaterialEnum::MossyCobblestone),
            "OBSIDIAN" => Some(MaterialEnum::Obsidian),
            "TORCH" => Some(MaterialEnum::Torch),
            "END_ROD" => Some(MaterialEnum::EndRod),
            "CHORUS_PLANT" => Some(MaterialEnum::ChorusPlant),
            "CHORUS_FLOWER" => Some(MaterialEnum::ChorusFlower),
            "PURPUR_BLOCK" => Some(MaterialEnum::PurpurBlock),
            "PURPUR_PILLAR" => Some(MaterialEnum::PurpurPillar),
            "PURPUR_STAIRS" => Some(MaterialEnum::PurpurStairs),
            "SPAWNER" => Some(MaterialEnum::Spawner),
            "CHEST" => Some(MaterialEnum::Chest),
            "CRAFTING_TABLE" => Some(MaterialEnum::CraftingTable),
            "FARMLAND" => Some(MaterialEnum::Farmland),
            "FURNACE" => Some(MaterialEnum::Furnace),
            "LADDER" => Some(MaterialEnum::Ladder),
            "COBBLESTONE_STAIRS" => Some(MaterialEnum::CobblestoneStairs),
            "SNOW" => Some(MaterialEnum::Snow),
            "ICE" => Some(MaterialEnum::Ice),
            "SNOW_BLOCK" => Some(MaterialEnum::SnowBlock),
            "CACTUS" => Some(MaterialEnum::Cactus),
            "CLAY" => Some(MaterialEnum::Clay),
            "JUKEBOX" => Some(MaterialEnum::Jukebox),
            "OAK_FENCE" => Some(MaterialEnum::OakFence),
            "SPRUCE_FENCE" => Some(MaterialEnum::SpruceFence),
            "BIRCH_FENCE" => Some(MaterialEnum::BirchFence),
            "JUNGLE_FENCE" => Some(MaterialEnum::JungleFence),
            "ACACIA_FENCE" => Some(MaterialEnum::AcaciaFence),
            "CHERRY_FENCE" => Some(MaterialEnum::CherryFence),
            "DARK_OAK_FENCE" => Some(MaterialEnum::DarkOakFence),
            "MANGROVE_FENCE" => Some(MaterialEnum::MangroveFence),
            "BAMBOO_FENCE" => Some(MaterialEnum::BambooFence),
            "CRIMSON_FENCE" => Some(MaterialEnum::CrimsonFence),
            "WARPED_FENCE" => Some(MaterialEnum::WarpedFence),
            "PUMPKIN" => Some(MaterialEnum::Pumpkin),
            "CARVED_PUMPKIN" => Some(MaterialEnum::CarvedPumpkin),
            "JACK_O_LANTERN" => Some(MaterialEnum::JackOLantern),
            "NETHERRACK" => Some(MaterialEnum::Netherrack),
            "SOUL_SAND" => Some(MaterialEnum::SoulSand),
            "SOUL_SOIL" => Some(MaterialEnum::SoulSoil),
            "BASALT" => Some(MaterialEnum::Basalt),
            "POLISHED_BASALT" => Some(MaterialEnum::PolishedBasalt),
            "SMOOTH_BASALT" => Some(MaterialEnum::SmoothBasalt),
            "SOUL_TORCH" => Some(MaterialEnum::SoulTorch),
            "GLOWSTONE" => Some(MaterialEnum::Glowstone),
            "INFESTED_STONE" => Some(MaterialEnum::InfestedStone),
            "INFESTED_COBBLESTONE" => Some(MaterialEnum::InfestedCobblestone),
            "INFESTED_STONE_BRICKS" => Some(MaterialEnum::InfestedStoneBricks),
            "INFESTED_MOSSY_STONE_BRICKS" => Some(MaterialEnum::InfestedMossyStoneBricks),
            "INFESTED_CRACKED_STONE_BRICKS" => Some(MaterialEnum::InfestedCrackedStoneBricks),
            "INFESTED_CHISELED_STONE_BRICKS" => Some(MaterialEnum::InfestedChiseledStoneBricks),
            "INFESTED_DEEPSLATE" => Some(MaterialEnum::InfestedDeepslate),
            "STONE_BRICKS" => Some(MaterialEnum::StoneBricks),
            "MOSSY_STONE_BRICKS" => Some(MaterialEnum::MossyStoneBricks),
            "CRACKED_STONE_BRICKS" => Some(MaterialEnum::CrackedStoneBricks),
            "CHISELED_STONE_BRICKS" => Some(MaterialEnum::ChiseledStoneBricks),
            "PACKED_MUD" => Some(MaterialEnum::PackedMud),
            "MUD_BRICKS" => Some(MaterialEnum::MudBricks),
            "DEEPSLATE_BRICKS" => Some(MaterialEnum::DeepslateBricks),
            "CRACKED_DEEPSLATE_BRICKS" => Some(MaterialEnum::CrackedDeepslateBricks),
            "DEEPSLATE_TILES" => Some(MaterialEnum::DeepslateTiles),
            "CRACKED_DEEPSLATE_TILES" => Some(MaterialEnum::CrackedDeepslateTiles),
            "CHISELED_DEEPSLATE" => Some(MaterialEnum::ChiseledDeepslate),
            "REINFORCED_DEEPSLATE" => Some(MaterialEnum::ReinforcedDeepslate),
            "BROWN_MUSHROOM_BLOCK" => Some(MaterialEnum::BrownMushroomBlock),
            "RED_MUSHROOM_BLOCK" => Some(MaterialEnum::RedMushroomBlock),
            "MUSHROOM_STEM" => Some(MaterialEnum::MushroomStem),
            "IRON_BARS" => Some(MaterialEnum::IronBars),
            "CHAIN" => Some(MaterialEnum::Chain),
            "GLASS_PANE" => Some(MaterialEnum::GlassPane),
            "MELON" => Some(MaterialEnum::Melon),
            "VINE" => Some(MaterialEnum::Vine),
            "GLOW_LICHEN" => Some(MaterialEnum::GlowLichen),
            "BRICK_STAIRS" => Some(MaterialEnum::BrickStairs),
            "STONE_BRICK_STAIRS" => Some(MaterialEnum::StoneBrickStairs),
            "MUD_BRICK_STAIRS" => Some(MaterialEnum::MudBrickStairs),
            "MYCELIUM" => Some(MaterialEnum::Mycelium),
            "LILY_PAD" => Some(MaterialEnum::LilyPad),
            "NETHER_BRICKS" => Some(MaterialEnum::NetherBricks),
            "CRACKED_NETHER_BRICKS" => Some(MaterialEnum::CrackedNetherBricks),
            "CHISELED_NETHER_BRICKS" => Some(MaterialEnum::ChiseledNetherBricks),
            "NETHER_BRICK_FENCE" => Some(MaterialEnum::NetherBrickFence),
            "NETHER_BRICK_STAIRS" => Some(MaterialEnum::NetherBrickStairs),
            "SCULK" => Some(MaterialEnum::Sculk),
            "SCULK_VEIN" => Some(MaterialEnum::SculkVein),
            "SCULK_CATALYST" => Some(MaterialEnum::SculkCatalyst),
            "SCULK_SHRIEKER" => Some(MaterialEnum::SculkShrieker),
            "ENCHANTING_TABLE" => Some(MaterialEnum::EnchantingTable),
            "END_PORTAL_FRAME" => Some(MaterialEnum::EndPortalFrame),
            "END_STONE" => Some(MaterialEnum::EndStone),
            "END_STONE_BRICKS" => Some(MaterialEnum::EndStoneBricks),
            "DRAGON_EGG" => Some(MaterialEnum::DragonEgg),
            "SANDSTONE_STAIRS" => Some(MaterialEnum::SandstoneStairs),
            "ENDER_CHEST" => Some(MaterialEnum::EnderChest),
            "EMERALD_BLOCK" => Some(MaterialEnum::EmeraldBlock),
            "OAK_STAIRS" => Some(MaterialEnum::OakStairs),
            "SPRUCE_STAIRS" => Some(MaterialEnum::SpruceStairs),
            "BIRCH_STAIRS" => Some(MaterialEnum::BirchStairs),
            "JUNGLE_STAIRS" => Some(MaterialEnum::JungleStairs),
            "ACACIA_STAIRS" => Some(MaterialEnum::AcaciaStairs),
            "CHERRY_STAIRS" => Some(MaterialEnum::CherryStairs),
            "DARK_OAK_STAIRS" => Some(MaterialEnum::DarkOakStairs),
            "MANGROVE_STAIRS" => Some(MaterialEnum::MangroveStairs),
            "BAMBOO_STAIRS" => Some(MaterialEnum::BambooStairs),
            "BAMBOO_MOSAIC_STAIRS" => Some(MaterialEnum::BambooMosaicStairs),
            "CRIMSON_STAIRS" => Some(MaterialEnum::CrimsonStairs),
            "WARPED_STAIRS" => Some(MaterialEnum::WarpedStairs),
            "COMMAND_BLOCK" => Some(MaterialEnum::CommandBlock),
            "BEACON" => Some(MaterialEnum::Beacon),
            "COBBLESTONE_WALL" => Some(MaterialEnum::CobblestoneWall),
            "MOSSY_COBBLESTONE_WALL" => Some(MaterialEnum::MossyCobblestoneWall),
            "BRICK_WALL" => Some(MaterialEnum::BrickWall),
            "PRISMARINE_WALL" => Some(MaterialEnum::PrismarineWall),
            "RED_SANDSTONE_WALL" => Some(MaterialEnum::RedSandstoneWall),
            "MOSSY_STONE_BRICK_WALL" => Some(MaterialEnum::MossyStoneBrickWall),
            "GRANITE_WALL" => Some(MaterialEnum::GraniteWall),
            "STONE_BRICK_WALL" => Some(MaterialEnum::StoneBrickWall),
            "MUD_BRICK_WALL" => Some(MaterialEnum::MudBrickWall),
            "NETHER_BRICK_WALL" => Some(MaterialEnum::NetherBrickWall),
            "ANDESITE_WALL" => Some(MaterialEnum::AndesiteWall),
            "RED_NETHER_BRICK_WALL" => Some(MaterialEnum::RedNetherBrickWall),
            "SANDSTONE_WALL" => Some(MaterialEnum::SandstoneWall),
            "END_STONE_BRICK_WALL" => Some(MaterialEnum::EndStoneBrickWall),
            "DIORITE_WALL" => Some(MaterialEnum::DioriteWall),
            "BLACKSTONE_WALL" => Some(MaterialEnum::BlackstoneWall),
            "POLISHED_BLACKSTONE_WALL" => Some(MaterialEnum::PolishedBlackstoneWall),
            "POLISHED_BLACKSTONE_BRICK_WALL" => Some(MaterialEnum::PolishedBlackstoneBrickWall),
            "COBBLED_DEEPSLATE_WALL" => Some(MaterialEnum::CobbledDeepslateWall),
            "POLISHED_DEEPSLATE_WALL" => Some(MaterialEnum::PolishedDeepslateWall),
            "DEEPSLATE_BRICK_WALL" => Some(MaterialEnum::DeepslateBrickWall),
            "DEEPSLATE_TILE_WALL" => Some(MaterialEnum::DeepslateTileWall),
            "ANVIL" => Some(MaterialEnum::Anvil),
            "CHIPPED_ANVIL" => Some(MaterialEnum::ChippedAnvil),
            "DAMAGED_ANVIL" => Some(MaterialEnum::DamagedAnvil),
            "CHISELED_QUARTZ_BLOCK" => Some(MaterialEnum::ChiseledQuartzBlock),
            "QUARTZ_BLOCK" => Some(MaterialEnum::QuartzBlock),
            "QUARTZ_BRICKS" => Some(MaterialEnum::QuartzBricks),
            "QUARTZ_PILLAR" => Some(MaterialEnum::QuartzPillar),
            "QUARTZ_STAIRS" => Some(MaterialEnum::QuartzStairs),
            "WHITE_TERRACOTTA" => Some(MaterialEnum::WhiteTerracotta),
            "ORANGE_TERRACOTTA" => Some(MaterialEnum::OrangeTerracotta),
            "MAGENTA_TERRACOTTA" => Some(MaterialEnum::MagentaTerracotta),
            "LIGHT_BLUE_TERRACOTTA" => Some(MaterialEnum::LightBlueTerracotta),
            "YELLOW_TERRACOTTA" => Some(MaterialEnum::YellowTerracotta),
            "LIME_TERRACOTTA" => Some(MaterialEnum::LimeTerracotta),
            "PINK_TERRACOTTA" => Some(MaterialEnum::PinkTerracotta),
            "GRAY_TERRACOTTA" => Some(MaterialEnum::GrayTerracotta),
            "LIGHT_GRAY_TERRACOTTA" => Some(MaterialEnum::LightGrayTerracotta),
            "CYAN_TERRACOTTA" => Some(MaterialEnum::CyanTerracotta),
            "PURPLE_TERRACOTTA" => Some(MaterialEnum::PurpleTerracotta),
            "BLUE_TERRACOTTA" => Some(MaterialEnum::BlueTerracotta),
            "BROWN_TERRACOTTA" => Some(MaterialEnum::BrownTerracotta),
            "GREEN_TERRACOTTA" => Some(MaterialEnum::GreenTerracotta),
            "RED_TERRACOTTA" => Some(MaterialEnum::RedTerracotta),
            "BLACK_TERRACOTTA" => Some(MaterialEnum::BlackTerracotta),
            "BARRIER" => Some(MaterialEnum::Barrier),
            "LIGHT" => Some(MaterialEnum::Light),
            "HAY_BLOCK" => Some(MaterialEnum::HayBlock),
            "WHITE_CARPET" => Some(MaterialEnum::WhiteCarpet),
            "ORANGE_CARPET" => Some(MaterialEnum::OrangeCarpet),
            "MAGENTA_CARPET" => Some(MaterialEnum::MagentaCarpet),
            "LIGHT_BLUE_CARPET" => Some(MaterialEnum::LightBlueCarpet),
            "YELLOW_CARPET" => Some(MaterialEnum::YellowCarpet),
            "LIME_CARPET" => Some(MaterialEnum::LimeCarpet),
            "PINK_CARPET" => Some(MaterialEnum::PinkCarpet),
            "GRAY_CARPET" => Some(MaterialEnum::GrayCarpet),
            "LIGHT_GRAY_CARPET" => Some(MaterialEnum::LightGrayCarpet),
            "CYAN_CARPET" => Some(MaterialEnum::CyanCarpet),
            "PURPLE_CARPET" => Some(MaterialEnum::PurpleCarpet),
            "BLUE_CARPET" => Some(MaterialEnum::BlueCarpet),
            "BROWN_CARPET" => Some(MaterialEnum::BrownCarpet),
            "GREEN_CARPET" => Some(MaterialEnum::GreenCarpet),
            "RED_CARPET" => Some(MaterialEnum::RedCarpet),
            "BLACK_CARPET" => Some(MaterialEnum::BlackCarpet),
            "TERRACOTTA" => Some(MaterialEnum::Terracotta),
            "PACKED_ICE" => Some(MaterialEnum::PackedIce),
            "DIRT_PATH" => Some(MaterialEnum::DirtPath),
            "SUNFLOWER" => Some(MaterialEnum::Sunflower),
            "LILAC" => Some(MaterialEnum::Lilac),
            "ROSE_BUSH" => Some(MaterialEnum::RoseBush),
            "PEONY" => Some(MaterialEnum::Peony),
            "TALL_GRASS" => Some(MaterialEnum::TallGrass),
            "LARGE_FERN" => Some(MaterialEnum::LargeFern),
            "WHITE_STAINED_GLASS" => Some(MaterialEnum::WhiteStainedGlass),
            "ORANGE_STAINED_GLASS" => Some(MaterialEnum::OrangeStainedGlass),
            "MAGENTA_STAINED_GLASS" => Some(MaterialEnum::MagentaStainedGlass),
            "LIGHT_BLUE_STAINED_GLASS" => Some(MaterialEnum::LightBlueStainedGlass),
            "YELLOW_STAINED_GLASS" => Some(MaterialEnum::YellowStainedGlass),
            "LIME_STAINED_GLASS" => Some(MaterialEnum::LimeStainedGlass),
            "PINK_STAINED_GLASS" => Some(MaterialEnum::PinkStainedGlass),
            "GRAY_STAINED_GLASS" => Some(MaterialEnum::GrayStainedGlass),
            "LIGHT_GRAY_STAINED_GLASS" => Some(MaterialEnum::LightGrayStainedGlass),
            "CYAN_STAINED_GLASS" => Some(MaterialEnum::CyanStainedGlass),
            "PURPLE_STAINED_GLASS" => Some(MaterialEnum::PurpleStainedGlass),
            "BLUE_STAINED_GLASS" => Some(MaterialEnum::BlueStainedGlass),
            "BROWN_STAINED_GLASS" => Some(MaterialEnum::BrownStainedGlass),
            "GREEN_STAINED_GLASS" => Some(MaterialEnum::GreenStainedGlass),
            "RED_STAINED_GLASS" => Some(MaterialEnum::RedStainedGlass),
            "BLACK_STAINED_GLASS" => Some(MaterialEnum::BlackStainedGlass),
            "WHITE_STAINED_GLASS_PANE" => Some(MaterialEnum::WhiteStainedGlassPane),
            "ORANGE_STAINED_GLASS_PANE" => Some(MaterialEnum::OrangeStainedGlassPane),
            "MAGENTA_STAINED_GLASS_PANE" => Some(MaterialEnum::MagentaStainedGlassPane),
            "LIGHT_BLUE_STAINED_GLASS_PANE" => Some(MaterialEnum::LightBlueStainedGlassPane),
            "YELLOW_STAINED_GLASS_PANE" => Some(MaterialEnum::YellowStainedGlassPane),
            "LIME_STAINED_GLASS_PANE" => Some(MaterialEnum::LimeStainedGlassPane),
            "PINK_STAINED_GLASS_PANE" => Some(MaterialEnum::PinkStainedGlassPane),
            "GRAY_STAINED_GLASS_PANE" => Some(MaterialEnum::GrayStainedGlassPane),
            "LIGHT_GRAY_STAINED_GLASS_PANE" => Some(MaterialEnum::LightGrayStainedGlassPane),
            "CYAN_STAINED_GLASS_PANE" => Some(MaterialEnum::CyanStainedGlassPane),
            "PURPLE_STAINED_GLASS_PANE" => Some(MaterialEnum::PurpleStainedGlassPane),
            "BLUE_STAINED_GLASS_PANE" => Some(MaterialEnum::BlueStainedGlassPane),
            "BROWN_STAINED_GLASS_PANE" => Some(MaterialEnum::BrownStainedGlassPane),
            "GREEN_STAINED_GLASS_PANE" => Some(MaterialEnum::GreenStainedGlassPane),
            "RED_STAINED_GLASS_PANE" => Some(MaterialEnum::RedStainedGlassPane),
            "BLACK_STAINED_GLASS_PANE" => Some(MaterialEnum::BlackStainedGlassPane),
            "PRISMARINE" => Some(MaterialEnum::Prismarine),
            "PRISMARINE_BRICKS" => Some(MaterialEnum::PrismarineBricks),
            "DARK_PRISMARINE" => Some(MaterialEnum::DarkPrismarine),
            "PRISMARINE_STAIRS" => Some(MaterialEnum::PrismarineStairs),
            "PRISMARINE_BRICK_STAIRS" => Some(MaterialEnum::PrismarineBrickStairs),
            "DARK_PRISMARINE_STAIRS" => Some(MaterialEnum::DarkPrismarineStairs),
            "SEA_LANTERN" => Some(MaterialEnum::SeaLantern),
            "RED_SANDSTONE" => Some(MaterialEnum::RedSandstone),
            "CHISELED_RED_SANDSTONE" => Some(MaterialEnum::ChiseledRedSandstone),
            "CUT_RED_SANDSTONE" => Some(MaterialEnum::CutRedSandstone),
            "RED_SANDSTONE_STAIRS" => Some(MaterialEnum::RedSandstoneStairs),
            "REPEATING_COMMAND_BLOCK" => Some(MaterialEnum::RepeatingCommandBlock),
            "CHAIN_COMMAND_BLOCK" => Some(MaterialEnum::ChainCommandBlock),
            "MAGMA_BLOCK" => Some(MaterialEnum::MagmaBlock),
            "NETHER_WART_BLOCK" => Some(MaterialEnum::NetherWartBlock),
            "WARPED_WART_BLOCK" => Some(MaterialEnum::WarpedWartBlock),
            "RED_NETHER_BRICKS" => Some(MaterialEnum::RedNetherBricks),
            "BONE_BLOCK" => Some(MaterialEnum::BoneBlock),
            "STRUCTURE_VOID" => Some(MaterialEnum::StructureVoid),
            "SHULKER_BOX" => Some(MaterialEnum::ShulkerBox),
            "WHITE_SHULKER_BOX" => Some(MaterialEnum::WhiteShulkerBox),
            "ORANGE_SHULKER_BOX" => Some(MaterialEnum::OrangeShulkerBox),
            "MAGENTA_SHULKER_BOX" => Some(MaterialEnum::MagentaShulkerBox),
            "LIGHT_BLUE_SHULKER_BOX" => Some(MaterialEnum::LightBlueShulkerBox),
            "YELLOW_SHULKER_BOX" => Some(MaterialEnum::YellowShulkerBox),
            "LIME_SHULKER_BOX" => Some(MaterialEnum::LimeShulkerBox),
            "PINK_SHULKER_BOX" => Some(MaterialEnum::PinkShulkerBox),
            "GRAY_SHULKER_BOX" => Some(MaterialEnum::GrayShulkerBox),
            "LIGHT_GRAY_SHULKER_BOX" => Some(MaterialEnum::LightGrayShulkerBox),
            "CYAN_SHULKER_BOX" => Some(MaterialEnum::CyanShulkerBox),
            "PURPLE_SHULKER_BOX" => Some(MaterialEnum::PurpleShulkerBox),
            "BLUE_SHULKER_BOX" => Some(MaterialEnum::BlueShulkerBox),
            "BROWN_SHULKER_BOX" => Some(MaterialEnum::BrownShulkerBox),
            "GREEN_SHULKER_BOX" => Some(MaterialEnum::GreenShulkerBox),
            "RED_SHULKER_BOX" => Some(MaterialEnum::RedShulkerBox),
            "BLACK_SHULKER_BOX" => Some(MaterialEnum::BlackShulkerBox),
            "WHITE_GLAZED_TERRACOTTA" => Some(MaterialEnum::WhiteGlazedTerracotta),
            "ORANGE_GLAZED_TERRACOTTA" => Some(MaterialEnum::OrangeGlazedTerracotta),
            "MAGENTA_GLAZED_TERRACOTTA" => Some(MaterialEnum::MagentaGlazedTerracotta),
            "LIGHT_BLUE_GLAZED_TERRACOTTA" => Some(MaterialEnum::LightBlueGlazedTerracotta),
            "YELLOW_GLAZED_TERRACOTTA" => Some(MaterialEnum::YellowGlazedTerracotta),
            "LIME_GLAZED_TERRACOTTA" => Some(MaterialEnum::LimeGlazedTerracotta),
            "PINK_GLAZED_TERRACOTTA" => Some(MaterialEnum::PinkGlazedTerracotta),
            "GRAY_GLAZED_TERRACOTTA" => Some(MaterialEnum::GrayGlazedTerracotta),
            "LIGHT_GRAY_GLAZED_TERRACOTTA" => Some(MaterialEnum::LightGrayGlazedTerracotta),
            "CYAN_GLAZED_TERRACOTTA" => Some(MaterialEnum::CyanGlazedTerracotta),
            "PURPLE_GLAZED_TERRACOTTA" => Some(MaterialEnum::PurpleGlazedTerracotta),
            "BLUE_GLAZED_TERRACOTTA" => Some(MaterialEnum::BlueGlazedTerracotta),
            "BROWN_GLAZED_TERRACOTTA" => Some(MaterialEnum::BrownGlazedTerracotta),
            "GREEN_GLAZED_TERRACOTTA" => Some(MaterialEnum::GreenGlazedTerracotta),
            "RED_GLAZED_TERRACOTTA" => Some(MaterialEnum::RedGlazedTerracotta),
            "BLACK_GLAZED_TERRACOTTA" => Some(MaterialEnum::BlackGlazedTerracotta),
            "WHITE_CONCRETE" => Some(MaterialEnum::WhiteConcrete),
            "ORANGE_CONCRETE" => Some(MaterialEnum::OrangeConcrete),
            "MAGENTA_CONCRETE" => Some(MaterialEnum::MagentaConcrete),
            "LIGHT_BLUE_CONCRETE" => Some(MaterialEnum::LightBlueConcrete),
            "YELLOW_CONCRETE" => Some(MaterialEnum::YellowConcrete),
            "LIME_CONCRETE" => Some(MaterialEnum::LimeConcrete),
            "PINK_CONCRETE" => Some(MaterialEnum::PinkConcrete),
            "GRAY_CONCRETE" => Some(MaterialEnum::GrayConcrete),
            "LIGHT_GRAY_CONCRETE" => Some(MaterialEnum::LightGrayConcrete),
            "CYAN_CONCRETE" => Some(MaterialEnum::CyanConcrete),
            "PURPLE_CONCRETE" => Some(MaterialEnum::PurpleConcrete),
            "BLUE_CONCRETE" => Some(MaterialEnum::BlueConcrete),
            "BROWN_CONCRETE" => Some(MaterialEnum::BrownConcrete),
            "GREEN_CONCRETE" => Some(MaterialEnum::GreenConcrete),
            "RED_CONCRETE" => Some(MaterialEnum::RedConcrete),
            "BLACK_CONCRETE" => Some(MaterialEnum::BlackConcrete),
            "WHITE_CONCRETE_POWDER" => Some(MaterialEnum::WhiteConcretePowder),
            "ORANGE_CONCRETE_POWDER" => Some(MaterialEnum::OrangeConcretePowder),
            "MAGENTA_CONCRETE_POWDER" => Some(MaterialEnum::MagentaConcretePowder),
            "LIGHT_BLUE_CONCRETE_POWDER" => Some(MaterialEnum::LightBlueConcretePowder),
            "YELLOW_CONCRETE_POWDER" => Some(MaterialEnum::YellowConcretePowder),
            "LIME_CONCRETE_POWDER" => Some(MaterialEnum::LimeConcretePowder),
            "PINK_CONCRETE_POWDER" => Some(MaterialEnum::PinkConcretePowder),
            "GRAY_CONCRETE_POWDER" => Some(MaterialEnum::GrayConcretePowder),
            "LIGHT_GRAY_CONCRETE_POWDER" => Some(MaterialEnum::LightGrayConcretePowder),
            "CYAN_CONCRETE_POWDER" => Some(MaterialEnum::CyanConcretePowder),
            "PURPLE_CONCRETE_POWDER" => Some(MaterialEnum::PurpleConcretePowder),
            "BLUE_CONCRETE_POWDER" => Some(MaterialEnum::BlueConcretePowder),
            "BROWN_CONCRETE_POWDER" => Some(MaterialEnum::BrownConcretePowder),
            "GREEN_CONCRETE_POWDER" => Some(MaterialEnum::GreenConcretePowder),
            "RED_CONCRETE_POWDER" => Some(MaterialEnum::RedConcretePowder),
            "BLACK_CONCRETE_POWDER" => Some(MaterialEnum::BlackConcretePowder),
            "TURTLE_EGG" => Some(MaterialEnum::TurtleEgg),
            "SNIFFER_EGG" => Some(MaterialEnum::SnifferEgg),
            "DEAD_TUBE_CORAL_BLOCK" => Some(MaterialEnum::DeadTubeCoralBlock),
            "DEAD_BRAIN_CORAL_BLOCK" => Some(MaterialEnum::DeadBrainCoralBlock),
            "DEAD_BUBBLE_CORAL_BLOCK" => Some(MaterialEnum::DeadBubbleCoralBlock),
            "DEAD_FIRE_CORAL_BLOCK" => Some(MaterialEnum::DeadFireCoralBlock),
            "DEAD_HORN_CORAL_BLOCK" => Some(MaterialEnum::DeadHornCoralBlock),
            "TUBE_CORAL_BLOCK" => Some(MaterialEnum::TubeCoralBlock),
            "BRAIN_CORAL_BLOCK" => Some(MaterialEnum::BrainCoralBlock),
            "BUBBLE_CORAL_BLOCK" => Some(MaterialEnum::BubbleCoralBlock),
            "FIRE_CORAL_BLOCK" => Some(MaterialEnum::FireCoralBlock),
            "HORN_CORAL_BLOCK" => Some(MaterialEnum::HornCoralBlock),
            "TUBE_CORAL" => Some(MaterialEnum::TubeCoral),
            "BRAIN_CORAL" => Some(MaterialEnum::BrainCoral),
            "BUBBLE_CORAL" => Some(MaterialEnum::BubbleCoral),
            "FIRE_CORAL" => Some(MaterialEnum::FireCoral),
            "HORN_CORAL" => Some(MaterialEnum::HornCoral),
            "DEAD_BRAIN_CORAL" => Some(MaterialEnum::DeadBrainCoral),
            "DEAD_BUBBLE_CORAL" => Some(MaterialEnum::DeadBubbleCoral),
            "DEAD_FIRE_CORAL" => Some(MaterialEnum::DeadFireCoral),
            "DEAD_HORN_CORAL" => Some(MaterialEnum::DeadHornCoral),
            "DEAD_TUBE_CORAL" => Some(MaterialEnum::DeadTubeCoral),
            "TUBE_CORAL_FAN" => Some(MaterialEnum::TubeCoralFan),
            "BRAIN_CORAL_FAN" => Some(MaterialEnum::BrainCoralFan),
            "BUBBLE_CORAL_FAN" => Some(MaterialEnum::BubbleCoralFan),
            "FIRE_CORAL_FAN" => Some(MaterialEnum::FireCoralFan),
            "HORN_CORAL_FAN" => Some(MaterialEnum::HornCoralFan),
            "DEAD_TUBE_CORAL_FAN" => Some(MaterialEnum::DeadTubeCoralFan),
            "DEAD_BRAIN_CORAL_FAN" => Some(MaterialEnum::DeadBrainCoralFan),
            "DEAD_BUBBLE_CORAL_FAN" => Some(MaterialEnum::DeadBubbleCoralFan),
            "DEAD_FIRE_CORAL_FAN" => Some(MaterialEnum::DeadFireCoralFan),
            "DEAD_HORN_CORAL_FAN" => Some(MaterialEnum::DeadHornCoralFan),
            "BLUE_ICE" => Some(MaterialEnum::BlueIce),
            "CONDUIT" => Some(MaterialEnum::Conduit),
            "POLISHED_GRANITE_STAIRS" => Some(MaterialEnum::PolishedGraniteStairs),
            "SMOOTH_RED_SANDSTONE_STAIRS" => Some(MaterialEnum::SmoothRedSandstoneStairs),
            "MOSSY_STONE_BRICK_STAIRS" => Some(MaterialEnum::MossyStoneBrickStairs),
            "POLISHED_DIORITE_STAIRS" => Some(MaterialEnum::PolishedDioriteStairs),
            "MOSSY_COBBLESTONE_STAIRS" => Some(MaterialEnum::MossyCobblestoneStairs),
            "END_STONE_BRICK_STAIRS" => Some(MaterialEnum::EndStoneBrickStairs),
            "STONE_STAIRS" => Some(MaterialEnum::StoneStairs),
            "SMOOTH_SANDSTONE_STAIRS" => Some(MaterialEnum::SmoothSandstoneStairs),
            "SMOOTH_QUARTZ_STAIRS" => Some(MaterialEnum::SmoothQuartzStairs),
            "GRANITE_STAIRS" => Some(MaterialEnum::GraniteStairs),
            "ANDESITE_STAIRS" => Some(MaterialEnum::AndesiteStairs),
            "RED_NETHER_BRICK_STAIRS" => Some(MaterialEnum::RedNetherBrickStairs),
            "POLISHED_ANDESITE_STAIRS" => Some(MaterialEnum::PolishedAndesiteStairs),
            "DIORITE_STAIRS" => Some(MaterialEnum::DioriteStairs),
            "COBBLED_DEEPSLATE_STAIRS" => Some(MaterialEnum::CobbledDeepslateStairs),
            "POLISHED_DEEPSLATE_STAIRS" => Some(MaterialEnum::PolishedDeepslateStairs),
            "DEEPSLATE_BRICK_STAIRS" => Some(MaterialEnum::DeepslateBrickStairs),
            "DEEPSLATE_TILE_STAIRS" => Some(MaterialEnum::DeepslateTileStairs),
            "POLISHED_GRANITE_SLAB" => Some(MaterialEnum::PolishedGraniteSlab),
            "SMOOTH_RED_SANDSTONE_SLAB" => Some(MaterialEnum::SmoothRedSandstoneSlab),
            "MOSSY_STONE_BRICK_SLAB" => Some(MaterialEnum::MossyStoneBrickSlab),
            "POLISHED_DIORITE_SLAB" => Some(MaterialEnum::PolishedDioriteSlab),
            "MOSSY_COBBLESTONE_SLAB" => Some(MaterialEnum::MossyCobblestoneSlab),
            "END_STONE_BRICK_SLAB" => Some(MaterialEnum::EndStoneBrickSlab),
            "SMOOTH_SANDSTONE_SLAB" => Some(MaterialEnum::SmoothSandstoneSlab),
            "SMOOTH_QUARTZ_SLAB" => Some(MaterialEnum::SmoothQuartzSlab),
            "GRANITE_SLAB" => Some(MaterialEnum::GraniteSlab),
            "ANDESITE_SLAB" => Some(MaterialEnum::AndesiteSlab),
            "RED_NETHER_BRICK_SLAB" => Some(MaterialEnum::RedNetherBrickSlab),
            "POLISHED_ANDESITE_SLAB" => Some(MaterialEnum::PolishedAndesiteSlab),
            "DIORITE_SLAB" => Some(MaterialEnum::DioriteSlab),
            "COBBLED_DEEPSLATE_SLAB" => Some(MaterialEnum::CobbledDeepslateSlab),
            "POLISHED_DEEPSLATE_SLAB" => Some(MaterialEnum::PolishedDeepslateSlab),
            "DEEPSLATE_BRICK_SLAB" => Some(MaterialEnum::DeepslateBrickSlab),
            "DEEPSLATE_TILE_SLAB" => Some(MaterialEnum::DeepslateTileSlab),
            "SCAFFOLDING" => Some(MaterialEnum::Scaffolding),
            "REDSTONE" => Some(MaterialEnum::Redstone),
            "REDSTONE_TORCH" => Some(MaterialEnum::RedstoneTorch),
            "REDSTONE_BLOCK" => Some(MaterialEnum::RedstoneBlock),
            "REPEATER" => Some(MaterialEnum::Repeater),
            "COMPARATOR" => Some(MaterialEnum::Comparator),
            "PISTON" => Some(MaterialEnum::Piston),
            "STICKY_PISTON" => Some(MaterialEnum::StickyPiston),
            "SLIME_BLOCK" => Some(MaterialEnum::SlimeBlock),
            "HONEY_BLOCK" => Some(MaterialEnum::HoneyBlock),
            "OBSERVER" => Some(MaterialEnum::Observer),
            "HOPPER" => Some(MaterialEnum::Hopper),
            "DISPENSER" => Some(MaterialEnum::Dispenser),
            "DROPPER" => Some(MaterialEnum::Dropper),
            "LECTERN" => Some(MaterialEnum::Lectern),
            "TARGET" => Some(MaterialEnum::Target),
            "LEVER" => Some(MaterialEnum::Lever),
            "LIGHTNING_ROD" => Some(MaterialEnum::LightningRod),
            "DAYLIGHT_DETECTOR" => Some(MaterialEnum::DaylightDetector),
            "SCULK_SENSOR" => Some(MaterialEnum::SculkSensor),
            "CALIBRATED_SCULK_SENSOR" => Some(MaterialEnum::CalibratedSculkSensor),
            "TRIPWIRE_HOOK" => Some(MaterialEnum::TripwireHook),
            "TRAPPED_CHEST" => Some(MaterialEnum::TrappedChest),
            "TNT" => Some(MaterialEnum::Tnt),
            "REDSTONE_LAMP" => Some(MaterialEnum::RedstoneLamp),
            "NOTE_BLOCK" => Some(MaterialEnum::NoteBlock),
            "STONE_BUTTON" => Some(MaterialEnum::StoneButton),
            "POLISHED_BLACKSTONE_BUTTON" => Some(MaterialEnum::PolishedBlackstoneButton),
            "OAK_BUTTON" => Some(MaterialEnum::OakButton),
            "SPRUCE_BUTTON" => Some(MaterialEnum::SpruceButton),
            "BIRCH_BUTTON" => Some(MaterialEnum::BirchButton),
            "JUNGLE_BUTTON" => Some(MaterialEnum::JungleButton),
            "ACACIA_BUTTON" => Some(MaterialEnum::AcaciaButton),
            "CHERRY_BUTTON" => Some(MaterialEnum::CherryButton),
            "DARK_OAK_BUTTON" => Some(MaterialEnum::DarkOakButton),
            "MANGROVE_BUTTON" => Some(MaterialEnum::MangroveButton),
            "BAMBOO_BUTTON" => Some(MaterialEnum::BambooButton),
            "CRIMSON_BUTTON" => Some(MaterialEnum::CrimsonButton),
            "WARPED_BUTTON" => Some(MaterialEnum::WarpedButton),
            "STONE_PRESSURE_PLATE" => Some(MaterialEnum::StonePressurePlate),
            "POLISHED_BLACKSTONE_PRESSURE_PLATE" => {
                Some(MaterialEnum::PolishedBlackstonePressurePlate)
            }
            "LIGHT_WEIGHTED_PRESSURE_PLATE" => Some(MaterialEnum::LightWeightedPressurePlate),
            "HEAVY_WEIGHTED_PRESSURE_PLATE" => Some(MaterialEnum::HeavyWeightedPressurePlate),
            "OAK_PRESSURE_PLATE" => Some(MaterialEnum::OakPressurePlate),
            "SPRUCE_PRESSURE_PLATE" => Some(MaterialEnum::SprucePressurePlate),
            "BIRCH_PRESSURE_PLATE" => Some(MaterialEnum::BirchPressurePlate),
            "JUNGLE_PRESSURE_PLATE" => Some(MaterialEnum::JunglePressurePlate),
            "ACACIA_PRESSURE_PLATE" => Some(MaterialEnum::AcaciaPressurePlate),
            "CHERRY_PRESSURE_PLATE" => Some(MaterialEnum::CherryPressurePlate),
            "DARK_OAK_PRESSURE_PLATE" => Some(MaterialEnum::DarkOakPressurePlate),
            "MANGROVE_PRESSURE_PLATE" => Some(MaterialEnum::MangrovePressurePlate),
            "BAMBOO_PRESSURE_PLATE" => Some(MaterialEnum::BambooPressurePlate),
            "CRIMSON_PRESSURE_PLATE" => Some(MaterialEnum::CrimsonPressurePlate),
            "WARPED_PRESSURE_PLATE" => Some(MaterialEnum::WarpedPressurePlate),
            "IRON_DOOR" => Some(MaterialEnum::IronDoor),
            "OAK_DOOR" => Some(MaterialEnum::OakDoor),
            "SPRUCE_DOOR" => Some(MaterialEnum::SpruceDoor),
            "BIRCH_DOOR" => Some(MaterialEnum::BirchDoor),
            "JUNGLE_DOOR" => Some(MaterialEnum::JungleDoor),
            "ACACIA_DOOR" => Some(MaterialEnum::AcaciaDoor),
            "CHERRY_DOOR" => Some(MaterialEnum::CherryDoor),
            "DARK_OAK_DOOR" => Some(MaterialEnum::DarkOakDoor),
            "MANGROVE_DOOR" => Some(MaterialEnum::MangroveDoor),
            "BAMBOO_DOOR" => Some(MaterialEnum::BambooDoor),
            "CRIMSON_DOOR" => Some(MaterialEnum::CrimsonDoor),
            "WARPED_DOOR" => Some(MaterialEnum::WarpedDoor),
            "IRON_TRAPDOOR" => Some(MaterialEnum::IronTrapdoor),
            "OAK_TRAPDOOR" => Some(MaterialEnum::OakTrapdoor),
            "SPRUCE_TRAPDOOR" => Some(MaterialEnum::SpruceTrapdoor),
            "BIRCH_TRAPDOOR" => Some(MaterialEnum::BirchTrapdoor),
            "JUNGLE_TRAPDOOR" => Some(MaterialEnum::JungleTrapdoor),
            "ACACIA_TRAPDOOR" => Some(MaterialEnum::AcaciaTrapdoor),
            "CHERRY_TRAPDOOR" => Some(MaterialEnum::CherryTrapdoor),
            "DARK_OAK_TRAPDOOR" => Some(MaterialEnum::DarkOakTrapdoor),
            "MANGROVE_TRAPDOOR" => Some(MaterialEnum::MangroveTrapdoor),
            "BAMBOO_TRAPDOOR" => Some(MaterialEnum::BambooTrapdoor),
            "CRIMSON_TRAPDOOR" => Some(MaterialEnum::CrimsonTrapdoor),
            "WARPED_TRAPDOOR" => Some(MaterialEnum::WarpedTrapdoor),
            "OAK_FENCE_GATE" => Some(MaterialEnum::OakFenceGate),
            "SPRUCE_FENCE_GATE" => Some(MaterialEnum::SpruceFenceGate),
            "BIRCH_FENCE_GATE" => Some(MaterialEnum::BirchFenceGate),
            "JUNGLE_FENCE_GATE" => Some(MaterialEnum::JungleFenceGate),
            "ACACIA_FENCE_GATE" => Some(MaterialEnum::AcaciaFenceGate),
            "CHERRY_FENCE_GATE" => Some(MaterialEnum::CherryFenceGate),
            "DARK_OAK_FENCE_GATE" => Some(MaterialEnum::DarkOakFenceGate),
            "MANGROVE_FENCE_GATE" => Some(MaterialEnum::MangroveFenceGate),
            "BAMBOO_FENCE_GATE" => Some(MaterialEnum::BambooFenceGate),
            "CRIMSON_FENCE_GATE" => Some(MaterialEnum::CrimsonFenceGate),
            "WARPED_FENCE_GATE" => Some(MaterialEnum::WarpedFenceGate),
            "POWERED_RAIL" => Some(MaterialEnum::PoweredRail),
            "DETECTOR_RAIL" => Some(MaterialEnum::DetectorRail),
            "RAIL" => Some(MaterialEnum::Rail),
            "ACTIVATOR_RAIL" => Some(MaterialEnum::ActivatorRail),
            "SADDLE" => Some(MaterialEnum::Saddle),
            "MINECART" => Some(MaterialEnum::Minecart),
            "CHEST_MINECART" => Some(MaterialEnum::ChestMinecart),
            "FURNACE_MINECART" => Some(MaterialEnum::FurnaceMinecart),
            "TNT_MINECART" => Some(MaterialEnum::TntMinecart),
            "HOPPER_MINECART" => Some(MaterialEnum::HopperMinecart),
            "CARROT_ON_A_STICK" => Some(MaterialEnum::CarrotOnAStick),
            "WARPED_FUNGUS_ON_A_STICK" => Some(MaterialEnum::WarpedFungusOnAStick),
            "ELYTRA" => Some(MaterialEnum::Elytra),
            "OAK_BOAT" => Some(MaterialEnum::OakBoat),
            "OAK_CHEST_BOAT" => Some(MaterialEnum::OakChestBoat),
            "SPRUCE_BOAT" => Some(MaterialEnum::SpruceBoat),
            "SPRUCE_CHEST_BOAT" => Some(MaterialEnum::SpruceChestBoat),
            "BIRCH_BOAT" => Some(MaterialEnum::BirchBoat),
            "BIRCH_CHEST_BOAT" => Some(MaterialEnum::BirchChestBoat),
            "JUNGLE_BOAT" => Some(MaterialEnum::JungleBoat),
            "JUNGLE_CHEST_BOAT" => Some(MaterialEnum::JungleChestBoat),
            "ACACIA_BOAT" => Some(MaterialEnum::AcaciaBoat),
            "ACACIA_CHEST_BOAT" => Some(MaterialEnum::AcaciaChestBoat),
            "CHERRY_BOAT" => Some(MaterialEnum::CherryBoat),
            "CHERRY_CHEST_BOAT" => Some(MaterialEnum::CherryChestBoat),
            "DARK_OAK_BOAT" => Some(MaterialEnum::DarkOakBoat),
            "DARK_OAK_CHEST_BOAT" => Some(MaterialEnum::DarkOakChestBoat),
            "MANGROVE_BOAT" => Some(MaterialEnum::MangroveBoat),
            "MANGROVE_CHEST_BOAT" => Some(MaterialEnum::MangroveChestBoat),
            "BAMBOO_RAFT" => Some(MaterialEnum::BambooRaft),
            "BAMBOO_CHEST_RAFT" => Some(MaterialEnum::BambooChestRaft),
            "STRUCTURE_BLOCK" => Some(MaterialEnum::StructureBlock),
            "JIGSAW" => Some(MaterialEnum::Jigsaw),
            "TURTLE_HELMET" => Some(MaterialEnum::TurtleHelmet),
            "SCUTE" => Some(MaterialEnum::Scute),
            "FLINT_AND_STEEL" => Some(MaterialEnum::FlintAndSteel),
            "APPLE" => Some(MaterialEnum::Apple),
            "BOW" => Some(MaterialEnum::Bow),
            "ARROW" => Some(MaterialEnum::Arrow),
            "COAL" => Some(MaterialEnum::Coal),
            "CHARCOAL" => Some(MaterialEnum::Charcoal),
            "DIAMOND" => Some(MaterialEnum::Diamond),
            "EMERALD" => Some(MaterialEnum::Emerald),
            "LAPIS_LAZULI" => Some(MaterialEnum::LapisLazuli),
            "QUARTZ" => Some(MaterialEnum::Quartz),
            "AMETHYST_SHARD" => Some(MaterialEnum::AmethystShard),
            "RAW_IRON" => Some(MaterialEnum::RawIron),
            "IRON_INGOT" => Some(MaterialEnum::IronIngot),
            "RAW_COPPER" => Some(MaterialEnum::RawCopper),
            "COPPER_INGOT" => Some(MaterialEnum::CopperIngot),
            "RAW_GOLD" => Some(MaterialEnum::RawGold),
            "GOLD_INGOT" => Some(MaterialEnum::GoldIngot),
            "NETHERITE_INGOT" => Some(MaterialEnum::NetheriteIngot),
            "NETHERITE_SCRAP" => Some(MaterialEnum::NetheriteScrap),
            "WOODEN_SWORD" => Some(MaterialEnum::WoodenSword),
            "WOODEN_SHOVEL" => Some(MaterialEnum::WoodenShovel),
            "WOODEN_PICKAXE" => Some(MaterialEnum::WoodenPickaxe),
            "WOODEN_AXE" => Some(MaterialEnum::WoodenAxe),
            "WOODEN_HOE" => Some(MaterialEnum::WoodenHoe),
            "STONE_SWORD" => Some(MaterialEnum::StoneSword),
            "STONE_SHOVEL" => Some(MaterialEnum::StoneShovel),
            "STONE_PICKAXE" => Some(MaterialEnum::StonePickaxe),
            "STONE_AXE" => Some(MaterialEnum::StoneAxe),
            "STONE_HOE" => Some(MaterialEnum::StoneHoe),
            "GOLDEN_SWORD" => Some(MaterialEnum::GoldenSword),
            "GOLDEN_SHOVEL" => Some(MaterialEnum::GoldenShovel),
            "GOLDEN_PICKAXE" => Some(MaterialEnum::GoldenPickaxe),
            "GOLDEN_AXE" => Some(MaterialEnum::GoldenAxe),
            "GOLDEN_HOE" => Some(MaterialEnum::GoldenHoe),
            "IRON_SWORD" => Some(MaterialEnum::IronSword),
            "IRON_SHOVEL" => Some(MaterialEnum::IronShovel),
            "IRON_PICKAXE" => Some(MaterialEnum::IronPickaxe),
            "IRON_AXE" => Some(MaterialEnum::IronAxe),
            "IRON_HOE" => Some(MaterialEnum::IronHoe),
            "DIAMOND_SWORD" => Some(MaterialEnum::DiamondSword),
            "DIAMOND_SHOVEL" => Some(MaterialEnum::DiamondShovel),
            "DIAMOND_PICKAXE" => Some(MaterialEnum::DiamondPickaxe),
            "DIAMOND_AXE" => Some(MaterialEnum::DiamondAxe),
            "DIAMOND_HOE" => Some(MaterialEnum::DiamondHoe),
            "NETHERITE_SWORD" => Some(MaterialEnum::NetheriteSword),
            "NETHERITE_SHOVEL" => Some(MaterialEnum::NetheriteShovel),
            "NETHERITE_PICKAXE" => Some(MaterialEnum::NetheritePickaxe),
            "NETHERITE_AXE" => Some(MaterialEnum::NetheriteAxe),
            "NETHERITE_HOE" => Some(MaterialEnum::NetheriteHoe),
            "STICK" => Some(MaterialEnum::Stick),
            "BOWL" => Some(MaterialEnum::Bowl),
            "MUSHROOM_STEW" => Some(MaterialEnum::MushroomStew),
            "STRING" => Some(MaterialEnum::String),
            "FEATHER" => Some(MaterialEnum::Feather),
            "GUNPOWDER" => Some(MaterialEnum::Gunpowder),
            "WHEAT_SEEDS" => Some(MaterialEnum::WheatSeeds),
            "WHEAT" => Some(MaterialEnum::Wheat),
            "BREAD" => Some(MaterialEnum::Bread),
            "LEATHER_HELMET" => Some(MaterialEnum::LeatherHelmet),
            "LEATHER_CHESTPLATE" => Some(MaterialEnum::LeatherChestplate),
            "LEATHER_LEGGINGS" => Some(MaterialEnum::LeatherLeggings),
            "LEATHER_BOOTS" => Some(MaterialEnum::LeatherBoots),
            "CHAINMAIL_HELMET" => Some(MaterialEnum::ChainmailHelmet),
            "CHAINMAIL_CHESTPLATE" => Some(MaterialEnum::ChainmailChestplate),
            "CHAINMAIL_LEGGINGS" => Some(MaterialEnum::ChainmailLeggings),
            "CHAINMAIL_BOOTS" => Some(MaterialEnum::ChainmailBoots),
            "IRON_HELMET" => Some(MaterialEnum::IronHelmet),
            "IRON_CHESTPLATE" => Some(MaterialEnum::IronChestplate),
            "IRON_LEGGINGS" => Some(MaterialEnum::IronLeggings),
            "IRON_BOOTS" => Some(MaterialEnum::IronBoots),
            "DIAMOND_HELMET" => Some(MaterialEnum::DiamondHelmet),
            "DIAMOND_CHESTPLATE" => Some(MaterialEnum::DiamondChestplate),
            "DIAMOND_LEGGINGS" => Some(MaterialEnum::DiamondLeggings),
            "DIAMOND_BOOTS" => Some(MaterialEnum::DiamondBoots),
            "GOLDEN_HELMET" => Some(MaterialEnum::GoldenHelmet),
            "GOLDEN_CHESTPLATE" => Some(MaterialEnum::GoldenChestplate),
            "GOLDEN_LEGGINGS" => Some(MaterialEnum::GoldenLeggings),
            "GOLDEN_BOOTS" => Some(MaterialEnum::GoldenBoots),
            "NETHERITE_HELMET" => Some(MaterialEnum::NetheriteHelmet),
            "NETHERITE_CHESTPLATE" => Some(MaterialEnum::NetheriteChestplate),
            "NETHERITE_LEGGINGS" => Some(MaterialEnum::NetheriteLeggings),
            "NETHERITE_BOOTS" => Some(MaterialEnum::NetheriteBoots),
            "FLINT" => Some(MaterialEnum::Flint),
            "PORKCHOP" => Some(MaterialEnum::Porkchop),
            "COOKED_PORKCHOP" => Some(MaterialEnum::CookedPorkchop),
            "PAINTING" => Some(MaterialEnum::Painting),
            "GOLDEN_APPLE" => Some(MaterialEnum::GoldenApple),
            "ENCHANTED_GOLDEN_APPLE" => Some(MaterialEnum::EnchantedGoldenApple),
            "OAK_SIGN" => Some(MaterialEnum::OakSign),
            "SPRUCE_SIGN" => Some(MaterialEnum::SpruceSign),
            "BIRCH_SIGN" => Some(MaterialEnum::BirchSign),
            "JUNGLE_SIGN" => Some(MaterialEnum::JungleSign),
            "ACACIA_SIGN" => Some(MaterialEnum::AcaciaSign),
            "CHERRY_SIGN" => Some(MaterialEnum::CherrySign),
            "DARK_OAK_SIGN" => Some(MaterialEnum::DarkOakSign),
            "MANGROVE_SIGN" => Some(MaterialEnum::MangroveSign),
            "BAMBOO_SIGN" => Some(MaterialEnum::BambooSign),
            "CRIMSON_SIGN" => Some(MaterialEnum::CrimsonSign),
            "WARPED_SIGN" => Some(MaterialEnum::WarpedSign),
            "OAK_HANGING_SIGN" => Some(MaterialEnum::OakHangingSign),
            "SPRUCE_HANGING_SIGN" => Some(MaterialEnum::SpruceHangingSign),
            "BIRCH_HANGING_SIGN" => Some(MaterialEnum::BirchHangingSign),
            "JUNGLE_HANGING_SIGN" => Some(MaterialEnum::JungleHangingSign),
            "ACACIA_HANGING_SIGN" => Some(MaterialEnum::AcaciaHangingSign),
            "CHERRY_HANGING_SIGN" => Some(MaterialEnum::CherryHangingSign),
            "DARK_OAK_HANGING_SIGN" => Some(MaterialEnum::DarkOakHangingSign),
            "MANGROVE_HANGING_SIGN" => Some(MaterialEnum::MangroveHangingSign),
            "BAMBOO_HANGING_SIGN" => Some(MaterialEnum::BambooHangingSign),
            "CRIMSON_HANGING_SIGN" => Some(MaterialEnum::CrimsonHangingSign),
            "WARPED_HANGING_SIGN" => Some(MaterialEnum::WarpedHangingSign),
            "BUCKET" => Some(MaterialEnum::Bucket),
            "WATER_BUCKET" => Some(MaterialEnum::WaterBucket),
            "LAVA_BUCKET" => Some(MaterialEnum::LavaBucket),
            "POWDER_SNOW_BUCKET" => Some(MaterialEnum::PowderSnowBucket),
            "SNOWBALL" => Some(MaterialEnum::Snowball),
            "LEATHER" => Some(MaterialEnum::Leather),
            "MILK_BUCKET" => Some(MaterialEnum::MilkBucket),
            "PUFFERFISH_BUCKET" => Some(MaterialEnum::PufferfishBucket),
            "SALMON_BUCKET" => Some(MaterialEnum::SalmonBucket),
            "COD_BUCKET" => Some(MaterialEnum::CodBucket),
            "TROPICAL_FISH_BUCKET" => Some(MaterialEnum::TropicalFishBucket),
            "AXOLOTL_BUCKET" => Some(MaterialEnum::AxolotlBucket),
            "TADPOLE_BUCKET" => Some(MaterialEnum::TadpoleBucket),
            "BRICK" => Some(MaterialEnum::Brick),
            "CLAY_BALL" => Some(MaterialEnum::ClayBall),
            "DRIED_KELP_BLOCK" => Some(MaterialEnum::DriedKelpBlock),
            "PAPER" => Some(MaterialEnum::Paper),
            "BOOK" => Some(MaterialEnum::Book),
            "SLIME_BALL" => Some(MaterialEnum::SlimeBall),
            "EGG" => Some(MaterialEnum::Egg),
            "COMPASS" => Some(MaterialEnum::Compass),
            "RECOVERY_COMPASS" => Some(MaterialEnum::RecoveryCompass),
            "BUNDLE" => Some(MaterialEnum::Bundle),
            "FISHING_ROD" => Some(MaterialEnum::FishingRod),
            "CLOCK" => Some(MaterialEnum::Clock),
            "SPYGLASS" => Some(MaterialEnum::Spyglass),
            "GLOWSTONE_DUST" => Some(MaterialEnum::GlowstoneDust),
            "COD" => Some(MaterialEnum::Cod),
            "SALMON" => Some(MaterialEnum::Salmon),
            "TROPICAL_FISH" => Some(MaterialEnum::TropicalFish),
            "PUFFERFISH" => Some(MaterialEnum::Pufferfish),
            "COOKED_COD" => Some(MaterialEnum::CookedCod),
            "COOKED_SALMON" => Some(MaterialEnum::CookedSalmon),
            "INK_SAC" => Some(MaterialEnum::InkSac),
            "GLOW_INK_SAC" => Some(MaterialEnum::GlowInkSac),
            "COCOA_BEANS" => Some(MaterialEnum::CocoaBeans),
            "WHITE_DYE" => Some(MaterialEnum::WhiteDye),
            "ORANGE_DYE" => Some(MaterialEnum::OrangeDye),
            "MAGENTA_DYE" => Some(MaterialEnum::MagentaDye),
            "LIGHT_BLUE_DYE" => Some(MaterialEnum::LightBlueDye),
            "YELLOW_DYE" => Some(MaterialEnum::YellowDye),
            "LIME_DYE" => Some(MaterialEnum::LimeDye),
            "PINK_DYE" => Some(MaterialEnum::PinkDye),
            "GRAY_DYE" => Some(MaterialEnum::GrayDye),
            "LIGHT_GRAY_DYE" => Some(MaterialEnum::LightGrayDye),
            "CYAN_DYE" => Some(MaterialEnum::CyanDye),
            "PURPLE_DYE" => Some(MaterialEnum::PurpleDye),
            "BLUE_DYE" => Some(MaterialEnum::BlueDye),
            "BROWN_DYE" => Some(MaterialEnum::BrownDye),
            "GREEN_DYE" => Some(MaterialEnum::GreenDye),
            "RED_DYE" => Some(MaterialEnum::RedDye),
            "BLACK_DYE" => Some(MaterialEnum::BlackDye),
            "BONE_MEAL" => Some(MaterialEnum::BoneMeal),
            "BONE" => Some(MaterialEnum::Bone),
            "SUGAR" => Some(MaterialEnum::Sugar),
            "CAKE" => Some(MaterialEnum::Cake),
            "WHITE_BED" => Some(MaterialEnum::WhiteBed),
            "ORANGE_BED" => Some(MaterialEnum::OrangeBed),
            "MAGENTA_BED" => Some(MaterialEnum::MagentaBed),
            "LIGHT_BLUE_BED" => Some(MaterialEnum::LightBlueBed),
            "YELLOW_BED" => Some(MaterialEnum::YellowBed),
            "LIME_BED" => Some(MaterialEnum::LimeBed),
            "PINK_BED" => Some(MaterialEnum::PinkBed),
            "GRAY_BED" => Some(MaterialEnum::GrayBed),
            "LIGHT_GRAY_BED" => Some(MaterialEnum::LightGrayBed),
            "CYAN_BED" => Some(MaterialEnum::CyanBed),
            "PURPLE_BED" => Some(MaterialEnum::PurpleBed),
            "BLUE_BED" => Some(MaterialEnum::BlueBed),
            "BROWN_BED" => Some(MaterialEnum::BrownBed),
            "GREEN_BED" => Some(MaterialEnum::GreenBed),
            "RED_BED" => Some(MaterialEnum::RedBed),
            "BLACK_BED" => Some(MaterialEnum::BlackBed),
            "COOKIE" => Some(MaterialEnum::Cookie),
            "FILLED_MAP" => Some(MaterialEnum::FilledMap),
            "SHEARS" => Some(MaterialEnum::Shears),
            "MELON_SLICE" => Some(MaterialEnum::MelonSlice),
            "DRIED_KELP" => Some(MaterialEnum::DriedKelp),
            "PUMPKIN_SEEDS" => Some(MaterialEnum::PumpkinSeeds),
            "MELON_SEEDS" => Some(MaterialEnum::MelonSeeds),
            "BEEF" => Some(MaterialEnum::Beef),
            "COOKED_BEEF" => Some(MaterialEnum::CookedBeef),
            "CHICKEN" => Some(MaterialEnum::Chicken),
            "COOKED_CHICKEN" => Some(MaterialEnum::CookedChicken),
            "ROTTEN_FLESH" => Some(MaterialEnum::RottenFlesh),
            "ENDER_PEARL" => Some(MaterialEnum::EnderPearl),
            "BLAZE_ROD" => Some(MaterialEnum::BlazeRod),
            "GHAST_TEAR" => Some(MaterialEnum::GhastTear),
            "GOLD_NUGGET" => Some(MaterialEnum::GoldNugget),
            "NETHER_WART" => Some(MaterialEnum::NetherWart),
            "POTION" => Some(MaterialEnum::Potion),
            "GLASS_BOTTLE" => Some(MaterialEnum::GlassBottle),
            "SPIDER_EYE" => Some(MaterialEnum::SpiderEye),
            "FERMENTED_SPIDER_EYE" => Some(MaterialEnum::FermentedSpiderEye),
            "BLAZE_POWDER" => Some(MaterialEnum::BlazePowder),
            "MAGMA_CREAM" => Some(MaterialEnum::MagmaCream),
            "BREWING_STAND" => Some(MaterialEnum::BrewingStand),
            "CAULDRON" => Some(MaterialEnum::Cauldron),
            "ENDER_EYE" => Some(MaterialEnum::EnderEye),
            "GLISTERING_MELON_SLICE" => Some(MaterialEnum::GlisteringMelonSlice),
            "ALLAY_SPAWN_EGG" => Some(MaterialEnum::AllaySpawnEgg),
            "AXOLOTL_SPAWN_EGG" => Some(MaterialEnum::AxolotlSpawnEgg),
            "BAT_SPAWN_EGG" => Some(MaterialEnum::BatSpawnEgg),
            "BEE_SPAWN_EGG" => Some(MaterialEnum::BeeSpawnEgg),
            "BLAZE_SPAWN_EGG" => Some(MaterialEnum::BlazeSpawnEgg),
            "CAT_SPAWN_EGG" => Some(MaterialEnum::CatSpawnEgg),
            "CAMEL_SPAWN_EGG" => Some(MaterialEnum::CamelSpawnEgg),
            "CAVE_SPIDER_SPAWN_EGG" => Some(MaterialEnum::CaveSpiderSpawnEgg),
            "CHICKEN_SPAWN_EGG" => Some(MaterialEnum::ChickenSpawnEgg),
            "COD_SPAWN_EGG" => Some(MaterialEnum::CodSpawnEgg),
            "COW_SPAWN_EGG" => Some(MaterialEnum::CowSpawnEgg),
            "CREEPER_SPAWN_EGG" => Some(MaterialEnum::CreeperSpawnEgg),
            "DOLPHIN_SPAWN_EGG" => Some(MaterialEnum::DolphinSpawnEgg),
            "DONKEY_SPAWN_EGG" => Some(MaterialEnum::DonkeySpawnEgg),
            "DROWNED_SPAWN_EGG" => Some(MaterialEnum::DrownedSpawnEgg),
            "ELDER_GUARDIAN_SPAWN_EGG" => Some(MaterialEnum::ElderGuardianSpawnEgg),
            "ENDER_DRAGON_SPAWN_EGG" => Some(MaterialEnum::EnderDragonSpawnEgg),
            "ENDERMAN_SPAWN_EGG" => Some(MaterialEnum::EndermanSpawnEgg),
            "ENDERMITE_SPAWN_EGG" => Some(MaterialEnum::EndermiteSpawnEgg),
            "EVOKER_SPAWN_EGG" => Some(MaterialEnum::EvokerSpawnEgg),
            "FOX_SPAWN_EGG" => Some(MaterialEnum::FoxSpawnEgg),
            "FROG_SPAWN_EGG" => Some(MaterialEnum::FrogSpawnEgg),
            "GHAST_SPAWN_EGG" => Some(MaterialEnum::GhastSpawnEgg),
            "GLOW_SQUID_SPAWN_EGG" => Some(MaterialEnum::GlowSquidSpawnEgg),
            "GOAT_SPAWN_EGG" => Some(MaterialEnum::GoatSpawnEgg),
            "GUARDIAN_SPAWN_EGG" => Some(MaterialEnum::GuardianSpawnEgg),
            "HOGLIN_SPAWN_EGG" => Some(MaterialEnum::HoglinSpawnEgg),
            "HORSE_SPAWN_EGG" => Some(MaterialEnum::HorseSpawnEgg),
            "HUSK_SPAWN_EGG" => Some(MaterialEnum::HuskSpawnEgg),
            "IRON_GOLEM_SPAWN_EGG" => Some(MaterialEnum::IronGolemSpawnEgg),
            "LLAMA_SPAWN_EGG" => Some(MaterialEnum::LlamaSpawnEgg),
            "MAGMA_CUBE_SPAWN_EGG" => Some(MaterialEnum::MagmaCubeSpawnEgg),
            "MOOSHROOM_SPAWN_EGG" => Some(MaterialEnum::MooshroomSpawnEgg),
            "MULE_SPAWN_EGG" => Some(MaterialEnum::MuleSpawnEgg),
            "OCELOT_SPAWN_EGG" => Some(MaterialEnum::OcelotSpawnEgg),
            "PANDA_SPAWN_EGG" => Some(MaterialEnum::PandaSpawnEgg),
            "PARROT_SPAWN_EGG" => Some(MaterialEnum::ParrotSpawnEgg),
            "PHANTOM_SPAWN_EGG" => Some(MaterialEnum::PhantomSpawnEgg),
            "PIG_SPAWN_EGG" => Some(MaterialEnum::PigSpawnEgg),
            "PIGLIN_SPAWN_EGG" => Some(MaterialEnum::PiglinSpawnEgg),
            "PIGLIN_BRUTE_SPAWN_EGG" => Some(MaterialEnum::PiglinBruteSpawnEgg),
            "PILLAGER_SPAWN_EGG" => Some(MaterialEnum::PillagerSpawnEgg),
            "POLAR_BEAR_SPAWN_EGG" => Some(MaterialEnum::PolarBearSpawnEgg),
            "PUFFERFISH_SPAWN_EGG" => Some(MaterialEnum::PufferfishSpawnEgg),
            "RABBIT_SPAWN_EGG" => Some(MaterialEnum::RabbitSpawnEgg),
            "RAVAGER_SPAWN_EGG" => Some(MaterialEnum::RavagerSpawnEgg),
            "SALMON_SPAWN_EGG" => Some(MaterialEnum::SalmonSpawnEgg),
            "SHEEP_SPAWN_EGG" => Some(MaterialEnum::SheepSpawnEgg),
            "SHULKER_SPAWN_EGG" => Some(MaterialEnum::ShulkerSpawnEgg),
            "SILVERFISH_SPAWN_EGG" => Some(MaterialEnum::SilverfishSpawnEgg),
            "SKELETON_SPAWN_EGG" => Some(MaterialEnum::SkeletonSpawnEgg),
            "SKELETON_HORSE_SPAWN_EGG" => Some(MaterialEnum::SkeletonHorseSpawnEgg),
            "SLIME_SPAWN_EGG" => Some(MaterialEnum::SlimeSpawnEgg),
            "SNIFFER_SPAWN_EGG" => Some(MaterialEnum::SnifferSpawnEgg),
            "SNOW_GOLEM_SPAWN_EGG" => Some(MaterialEnum::SnowGolemSpawnEgg),
            "SPIDER_SPAWN_EGG" => Some(MaterialEnum::SpiderSpawnEgg),
            "SQUID_SPAWN_EGG" => Some(MaterialEnum::SquidSpawnEgg),
            "STRAY_SPAWN_EGG" => Some(MaterialEnum::StraySpawnEgg),
            "STRIDER_SPAWN_EGG" => Some(MaterialEnum::StriderSpawnEgg),
            "TADPOLE_SPAWN_EGG" => Some(MaterialEnum::TadpoleSpawnEgg),
            "TRADER_LLAMA_SPAWN_EGG" => Some(MaterialEnum::TraderLlamaSpawnEgg),
            "TROPICAL_FISH_SPAWN_EGG" => Some(MaterialEnum::TropicalFishSpawnEgg),
            "TURTLE_SPAWN_EGG" => Some(MaterialEnum::TurtleSpawnEgg),
            "VEX_SPAWN_EGG" => Some(MaterialEnum::VexSpawnEgg),
            "VILLAGER_SPAWN_EGG" => Some(MaterialEnum::VillagerSpawnEgg),
            "VINDICATOR_SPAWN_EGG" => Some(MaterialEnum::VindicatorSpawnEgg),
            "WANDERING_TRADER_SPAWN_EGG" => Some(MaterialEnum::WanderingTraderSpawnEgg),
            "WARDEN_SPAWN_EGG" => Some(MaterialEnum::WardenSpawnEgg),
            "WITCH_SPAWN_EGG" => Some(MaterialEnum::WitchSpawnEgg),
            "WITHER_SPAWN_EGG" => Some(MaterialEnum::WitherSpawnEgg),
            "WITHER_SKELETON_SPAWN_EGG" => Some(MaterialEnum::WitherSkeletonSpawnEgg),
            "WOLF_SPAWN_EGG" => Some(MaterialEnum::WolfSpawnEgg),
            "ZOGLIN_SPAWN_EGG" => Some(MaterialEnum::ZoglinSpawnEgg),
            "ZOMBIE_SPAWN_EGG" => Some(MaterialEnum::ZombieSpawnEgg),
            "ZOMBIE_HORSE_SPAWN_EGG" => Some(MaterialEnum::ZombieHorseSpawnEgg),
            "ZOMBIE_VILLAGER_SPAWN_EGG" => Some(MaterialEnum::ZombieVillagerSpawnEgg),
            "ZOMBIFIED_PIGLIN_SPAWN_EGG" => Some(MaterialEnum::ZombifiedPiglinSpawnEgg),
            "EXPERIENCE_BOTTLE" => Some(MaterialEnum::ExperienceBottle),
            "FIRE_CHARGE" => Some(MaterialEnum::FireCharge),
            "WRITABLE_BOOK" => Some(MaterialEnum::WritableBook),
            "WRITTEN_BOOK" => Some(MaterialEnum::WrittenBook),
            "ITEM_FRAME" => Some(MaterialEnum::ItemFrame),
            "GLOW_ITEM_FRAME" => Some(MaterialEnum::GlowItemFrame),
            "FLOWER_POT" => Some(MaterialEnum::FlowerPot),
            "CARROT" => Some(MaterialEnum::Carrot),
            "POTATO" => Some(MaterialEnum::Potato),
            "BAKED_POTATO" => Some(MaterialEnum::BakedPotato),
            "POISONOUS_POTATO" => Some(MaterialEnum::PoisonousPotato),
            "MAP" => Some(MaterialEnum::Map),
            "GOLDEN_CARROT" => Some(MaterialEnum::GoldenCarrot),
            "SKELETON_SKULL" => Some(MaterialEnum::SkeletonSkull),
            "WITHER_SKELETON_SKULL" => Some(MaterialEnum::WitherSkeletonSkull),
            "PLAYER_HEAD" => Some(MaterialEnum::PlayerHead),
            "ZOMBIE_HEAD" => Some(MaterialEnum::ZombieHead),
            "CREEPER_HEAD" => Some(MaterialEnum::CreeperHead),
            "DRAGON_HEAD" => Some(MaterialEnum::DragonHead),
            "PIGLIN_HEAD" => Some(MaterialEnum::PiglinHead),
            "NETHER_STAR" => Some(MaterialEnum::NetherStar),
            "PUMPKIN_PIE" => Some(MaterialEnum::PumpkinPie),
            "FIREWORK_ROCKET" => Some(MaterialEnum::FireworkRocket),
            "FIREWORK_STAR" => Some(MaterialEnum::FireworkStar),
            "ENCHANTED_BOOK" => Some(MaterialEnum::EnchantedBook),
            "NETHER_BRICK" => Some(MaterialEnum::NetherBrick),
            "PRISMARINE_SHARD" => Some(MaterialEnum::PrismarineShard),
            "PRISMARINE_CRYSTALS" => Some(MaterialEnum::PrismarineCrystals),
            "RABBIT" => Some(MaterialEnum::Rabbit),
            "COOKED_RABBIT" => Some(MaterialEnum::CookedRabbit),
            "RABBIT_STEW" => Some(MaterialEnum::RabbitStew),
            "RABBIT_FOOT" => Some(MaterialEnum::RabbitFoot),
            "RABBIT_HIDE" => Some(MaterialEnum::RabbitHide),
            "ARMOR_STAND" => Some(MaterialEnum::ArmorStand),
            "IRON_HORSE_ARMOR" => Some(MaterialEnum::IronHorseArmor),
            "GOLDEN_HORSE_ARMOR" => Some(MaterialEnum::GoldenHorseArmor),
            "DIAMOND_HORSE_ARMOR" => Some(MaterialEnum::DiamondHorseArmor),
            "LEATHER_HORSE_ARMOR" => Some(MaterialEnum::LeatherHorseArmor),
            "LEAD" => Some(MaterialEnum::Lead),
            "NAME_TAG" => Some(MaterialEnum::NameTag),
            "COMMAND_BLOCK_MINECART" => Some(MaterialEnum::CommandBlockMinecart),
            "MUTTON" => Some(MaterialEnum::Mutton),
            "COOKED_MUTTON" => Some(MaterialEnum::CookedMutton),
            "WHITE_BANNER" => Some(MaterialEnum::WhiteBanner),
            "ORANGE_BANNER" => Some(MaterialEnum::OrangeBanner),
            "MAGENTA_BANNER" => Some(MaterialEnum::MagentaBanner),
            "LIGHT_BLUE_BANNER" => Some(MaterialEnum::LightBlueBanner),
            "YELLOW_BANNER" => Some(MaterialEnum::YellowBanner),
            "LIME_BANNER" => Some(MaterialEnum::LimeBanner),
            "PINK_BANNER" => Some(MaterialEnum::PinkBanner),
            "GRAY_BANNER" => Some(MaterialEnum::GrayBanner),
            "LIGHT_GRAY_BANNER" => Some(MaterialEnum::LightGrayBanner),
            "CYAN_BANNER" => Some(MaterialEnum::CyanBanner),
            "PURPLE_BANNER" => Some(MaterialEnum::PurpleBanner),
            "BLUE_BANNER" => Some(MaterialEnum::BlueBanner),
            "BROWN_BANNER" => Some(MaterialEnum::BrownBanner),
            "GREEN_BANNER" => Some(MaterialEnum::GreenBanner),
            "RED_BANNER" => Some(MaterialEnum::RedBanner),
            "BLACK_BANNER" => Some(MaterialEnum::BlackBanner),
            "END_CRYSTAL" => Some(MaterialEnum::EndCrystal),
            "CHORUS_FRUIT" => Some(MaterialEnum::ChorusFruit),
            "POPPED_CHORUS_FRUIT" => Some(MaterialEnum::PoppedChorusFruit),
            "TORCHFLOWER_SEEDS" => Some(MaterialEnum::TorchflowerSeeds),
            "PITCHER_POD" => Some(MaterialEnum::PitcherPod),
            "BEETROOT" => Some(MaterialEnum::Beetroot),
            "BEETROOT_SEEDS" => Some(MaterialEnum::BeetrootSeeds),
            "BEETROOT_SOUP" => Some(MaterialEnum::BeetrootSoup),
            "DRAGON_BREATH" => Some(MaterialEnum::DragonBreath),
            "SPLASH_POTION" => Some(MaterialEnum::SplashPotion),
            "SPECTRAL_ARROW" => Some(MaterialEnum::SpectralArrow),
            "TIPPED_ARROW" => Some(MaterialEnum::TippedArrow),
            "LINGERING_POTION" => Some(MaterialEnum::LingeringPotion),
            "SHIELD" => Some(MaterialEnum::Shield),
            "TOTEM_OF_UNDYING" => Some(MaterialEnum::TotemOfUndying),
            "SHULKER_SHELL" => Some(MaterialEnum::ShulkerShell),
            "IRON_NUGGET" => Some(MaterialEnum::IronNugget),
            "KNOWLEDGE_BOOK" => Some(MaterialEnum::KnowledgeBook),
            "DEBUG_STICK" => Some(MaterialEnum::DebugStick),
            "MUSIC_DISC_13" => Some(MaterialEnum::MusicDisc13),
            "MUSIC_DISC_CAT" => Some(MaterialEnum::MusicDiscCat),
            "MUSIC_DISC_BLOCKS" => Some(MaterialEnum::MusicDiscBlocks),
            "MUSIC_DISC_CHIRP" => Some(MaterialEnum::MusicDiscChirp),
            "MUSIC_DISC_FAR" => Some(MaterialEnum::MusicDiscFar),
            "MUSIC_DISC_MALL" => Some(MaterialEnum::MusicDiscMall),
            "MUSIC_DISC_MELLOHI" => Some(MaterialEnum::MusicDiscMellohi),
            "MUSIC_DISC_STAL" => Some(MaterialEnum::MusicDiscStal),
            "MUSIC_DISC_STRAD" => Some(MaterialEnum::MusicDiscStrad),
            "MUSIC_DISC_WARD" => Some(MaterialEnum::MusicDiscWard),
            "MUSIC_DISC_11" => Some(MaterialEnum::MusicDisc11),
            "MUSIC_DISC_WAIT" => Some(MaterialEnum::MusicDiscWait),
            "MUSIC_DISC_OTHERSIDE" => Some(MaterialEnum::MusicDiscOtherside),
            "MUSIC_DISC_RELIC" => Some(MaterialEnum::MusicDiscRelic),
            "MUSIC_DISC_5" => Some(MaterialEnum::MusicDisc5),
            "MUSIC_DISC_PIGSTEP" => Some(MaterialEnum::MusicDiscPigstep),
            "DISC_FRAGMENT_5" => Some(MaterialEnum::DiscFragment5),
            "TRIDENT" => Some(MaterialEnum::Trident),
            "PHANTOM_MEMBRANE" => Some(MaterialEnum::PhantomMembrane),
            "NAUTILUS_SHELL" => Some(MaterialEnum::NautilusShell),
            "HEART_OF_THE_SEA" => Some(MaterialEnum::HeartOfTheSea),
            "CROSSBOW" => Some(MaterialEnum::Crossbow),
            "SUSPICIOUS_STEW" => Some(MaterialEnum::SuspiciousStew),
            "LOOM" => Some(MaterialEnum::Loom),
            "FLOWER_BANNER_PATTERN" => Some(MaterialEnum::FlowerBannerPattern),
            "CREEPER_BANNER_PATTERN" => Some(MaterialEnum::CreeperBannerPattern),
            "SKULL_BANNER_PATTERN" => Some(MaterialEnum::SkullBannerPattern),
            "MOJANG_BANNER_PATTERN" => Some(MaterialEnum::MojangBannerPattern),
            "GLOBE_BANNER_PATTERN" => Some(MaterialEnum::GlobeBannerPattern),
            "PIGLIN_BANNER_PATTERN" => Some(MaterialEnum::PiglinBannerPattern),
            "GOAT_HORN" => Some(MaterialEnum::GoatHorn),
            "COMPOSTER" => Some(MaterialEnum::Composter),
            "BARREL" => Some(MaterialEnum::Barrel),
            "SMOKER" => Some(MaterialEnum::Smoker),
            "BLAST_FURNACE" => Some(MaterialEnum::BlastFurnace),
            "CARTOGRAPHY_TABLE" => Some(MaterialEnum::CartographyTable),
            "FLETCHING_TABLE" => Some(MaterialEnum::FletchingTable),
            "GRINDSTONE" => Some(MaterialEnum::Grindstone),
            "SMITHING_TABLE" => Some(MaterialEnum::SmithingTable),
            "STONECUTTER" => Some(MaterialEnum::Stonecutter),
            "BELL" => Some(MaterialEnum::Bell),
            "LANTERN" => Some(MaterialEnum::Lantern),
            "SOUL_LANTERN" => Some(MaterialEnum::SoulLantern),
            "SWEET_BERRIES" => Some(MaterialEnum::SweetBerries),
            "GLOW_BERRIES" => Some(MaterialEnum::GlowBerries),
            "CAMPFIRE" => Some(MaterialEnum::Campfire),
            "SOUL_CAMPFIRE" => Some(MaterialEnum::SoulCampfire),
            "SHROOMLIGHT" => Some(MaterialEnum::Shroomlight),
            "HONEYCOMB" => Some(MaterialEnum::Honeycomb),
            "BEE_NEST" => Some(MaterialEnum::BeeNest),
            "BEEHIVE" => Some(MaterialEnum::Beehive),
            "HONEY_BOTTLE" => Some(MaterialEnum::HoneyBottle),
            "HONEYCOMB_BLOCK" => Some(MaterialEnum::HoneycombBlock),
            "LODESTONE" => Some(MaterialEnum::Lodestone),
            "CRYING_OBSIDIAN" => Some(MaterialEnum::CryingObsidian),
            "BLACKSTONE" => Some(MaterialEnum::Blackstone),
            "BLACKSTONE_SLAB" => Some(MaterialEnum::BlackstoneSlab),
            "BLACKSTONE_STAIRS" => Some(MaterialEnum::BlackstoneStairs),
            "GILDED_BLACKSTONE" => Some(MaterialEnum::GildedBlackstone),
            "POLISHED_BLACKSTONE" => Some(MaterialEnum::PolishedBlackstone),
            "POLISHED_BLACKSTONE_SLAB" => Some(MaterialEnum::PolishedBlackstoneSlab),
            "POLISHED_BLACKSTONE_STAIRS" => Some(MaterialEnum::PolishedBlackstoneStairs),
            "CHISELED_POLISHED_BLACKSTONE" => Some(MaterialEnum::ChiseledPolishedBlackstone),
            "POLISHED_BLACKSTONE_BRICKS" => Some(MaterialEnum::PolishedBlackstoneBricks),
            "POLISHED_BLACKSTONE_BRICK_SLAB" => Some(MaterialEnum::PolishedBlackstoneBrickSlab),
            "POLISHED_BLACKSTONE_BRICK_STAIRS" => Some(MaterialEnum::PolishedBlackstoneBrickStairs),
            "CRACKED_POLISHED_BLACKSTONE_BRICKS" => {
                Some(MaterialEnum::CrackedPolishedBlackstoneBricks)
            }
            "RESPAWN_ANCHOR" => Some(MaterialEnum::RespawnAnchor),
            "CANDLE" => Some(MaterialEnum::Candle),
            "WHITE_CANDLE" => Some(MaterialEnum::WhiteCandle),
            "ORANGE_CANDLE" => Some(MaterialEnum::OrangeCandle),
            "MAGENTA_CANDLE" => Some(MaterialEnum::MagentaCandle),
            "LIGHT_BLUE_CANDLE" => Some(MaterialEnum::LightBlueCandle),
            "YELLOW_CANDLE" => Some(MaterialEnum::YellowCandle),
            "LIME_CANDLE" => Some(MaterialEnum::LimeCandle),
            "PINK_CANDLE" => Some(MaterialEnum::PinkCandle),
            "GRAY_CANDLE" => Some(MaterialEnum::GrayCandle),
            "LIGHT_GRAY_CANDLE" => Some(MaterialEnum::LightGrayCandle),
            "CYAN_CANDLE" => Some(MaterialEnum::CyanCandle),
            "PURPLE_CANDLE" => Some(MaterialEnum::PurpleCandle),
            "BLUE_CANDLE" => Some(MaterialEnum::BlueCandle),
            "BROWN_CANDLE" => Some(MaterialEnum::BrownCandle),
            "GREEN_CANDLE" => Some(MaterialEnum::GreenCandle),
            "RED_CANDLE" => Some(MaterialEnum::RedCandle),
            "BLACK_CANDLE" => Some(MaterialEnum::BlackCandle),
            "SMALL_AMETHYST_BUD" => Some(MaterialEnum::SmallAmethystBud),
            "MEDIUM_AMETHYST_BUD" => Some(MaterialEnum::MediumAmethystBud),
            "LARGE_AMETHYST_BUD" => Some(MaterialEnum::LargeAmethystBud),
            "AMETHYST_CLUSTER" => Some(MaterialEnum::AmethystCluster),
            "POINTED_DRIPSTONE" => Some(MaterialEnum::PointedDripstone),
            "OCHRE_FROGLIGHT" => Some(MaterialEnum::OchreFroglight),
            "VERDANT_FROGLIGHT" => Some(MaterialEnum::VerdantFroglight),
            "PEARLESCENT_FROGLIGHT" => Some(MaterialEnum::PearlescentFroglight),
            "FROGSPAWN" => Some(MaterialEnum::Frogspawn),
            "ECHO_SHARD" => Some(MaterialEnum::EchoShard),
            "BRUSH" => Some(MaterialEnum::Brush),
            "NETHERITE_UPGRADE_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::NetheriteUpgradeSmithingTemplate)
            }
            "SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::SentryArmorTrimSmithingTemplate)
            }
            "DUNE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::DuneArmorTrimSmithingTemplate)
            }
            "COAST_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::CoastArmorTrimSmithingTemplate)
            }
            "WILD_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::WildArmorTrimSmithingTemplate)
            }
            "WARD_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::WardArmorTrimSmithingTemplate)
            }
            "EYE_ARMOR_TRIM_SMITHING_TEMPLATE" => Some(MaterialEnum::EyeArmorTrimSmithingTemplate),
            "VEX_ARMOR_TRIM_SMITHING_TEMPLATE" => Some(MaterialEnum::VexArmorTrimSmithingTemplate),
            "TIDE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::TideArmorTrimSmithingTemplate)
            }
            "SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::SnoutArmorTrimSmithingTemplate)
            }
            "RIB_ARMOR_TRIM_SMITHING_TEMPLATE" => Some(MaterialEnum::RibArmorTrimSmithingTemplate),
            "SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::SpireArmorTrimSmithingTemplate)
            }
            "WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::WayfinderArmorTrimSmithingTemplate)
            }
            "SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::ShaperArmorTrimSmithingTemplate)
            }
            "SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::SilenceArmorTrimSmithingTemplate)
            }
            "RAISER_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::RaiserArmorTrimSmithingTemplate)
            }
            "HOST_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialEnum::HostArmorTrimSmithingTemplate)
            }
            "ANGLER_POTTERY_SHERD" => Some(MaterialEnum::AnglerPotterySherd),
            "ARCHER_POTTERY_SHERD" => Some(MaterialEnum::ArcherPotterySherd),
            "ARMS_UP_POTTERY_SHERD" => Some(MaterialEnum::ArmsUpPotterySherd),
            "BLADE_POTTERY_SHERD" => Some(MaterialEnum::BladePotterySherd),
            "BREWER_POTTERY_SHERD" => Some(MaterialEnum::BrewerPotterySherd),
            "BURN_POTTERY_SHERD" => Some(MaterialEnum::BurnPotterySherd),
            "DANGER_POTTERY_SHERD" => Some(MaterialEnum::DangerPotterySherd),
            "EXPLORER_POTTERY_SHERD" => Some(MaterialEnum::ExplorerPotterySherd),
            "FRIEND_POTTERY_SHERD" => Some(MaterialEnum::FriendPotterySherd),
            "HEART_POTTERY_SHERD" => Some(MaterialEnum::HeartPotterySherd),
            "HEARTBREAK_POTTERY_SHERD" => Some(MaterialEnum::HeartbreakPotterySherd),
            "HOWL_POTTERY_SHERD" => Some(MaterialEnum::HowlPotterySherd),
            "MINER_POTTERY_SHERD" => Some(MaterialEnum::MinerPotterySherd),
            "MOURNER_POTTERY_SHERD" => Some(MaterialEnum::MournerPotterySherd),
            "PLENTY_POTTERY_SHERD" => Some(MaterialEnum::PlentyPotterySherd),
            "PRIZE_POTTERY_SHERD" => Some(MaterialEnum::PrizePotterySherd),
            "SHEAF_POTTERY_SHERD" => Some(MaterialEnum::SheafPotterySherd),
            "SHELTER_POTTERY_SHERD" => Some(MaterialEnum::ShelterPotterySherd),
            "SKULL_POTTERY_SHERD" => Some(MaterialEnum::SkullPotterySherd),
            "SNORT_POTTERY_SHERD" => Some(MaterialEnum::SnortPotterySherd),
            "WATER" => Some(MaterialEnum::Water),
            "LAVA" => Some(MaterialEnum::Lava),
            "TALL_SEAGRASS" => Some(MaterialEnum::TallSeagrass),
            "PISTON_HEAD" => Some(MaterialEnum::PistonHead),
            "MOVING_PISTON" => Some(MaterialEnum::MovingPiston),
            "WALL_TORCH" => Some(MaterialEnum::WallTorch),
            "FIRE" => Some(MaterialEnum::Fire),
            "SOUL_FIRE" => Some(MaterialEnum::SoulFire),
            "REDSTONE_WIRE" => Some(MaterialEnum::RedstoneWire),
            "OAK_WALL_SIGN" => Some(MaterialEnum::OakWallSign),
            "SPRUCE_WALL_SIGN" => Some(MaterialEnum::SpruceWallSign),
            "BIRCH_WALL_SIGN" => Some(MaterialEnum::BirchWallSign),
            "ACACIA_WALL_SIGN" => Some(MaterialEnum::AcaciaWallSign),
            "CHERRY_WALL_SIGN" => Some(MaterialEnum::CherryWallSign),
            "JUNGLE_WALL_SIGN" => Some(MaterialEnum::JungleWallSign),
            "DARK_OAK_WALL_SIGN" => Some(MaterialEnum::DarkOakWallSign),
            "MANGROVE_WALL_SIGN" => Some(MaterialEnum::MangroveWallSign),
            "BAMBOO_WALL_SIGN" => Some(MaterialEnum::BambooWallSign),
            "OAK_WALL_HANGING_SIGN" => Some(MaterialEnum::OakWallHangingSign),
            "SPRUCE_WALL_HANGING_SIGN" => Some(MaterialEnum::SpruceWallHangingSign),
            "BIRCH_WALL_HANGING_SIGN" => Some(MaterialEnum::BirchWallHangingSign),
            "ACACIA_WALL_HANGING_SIGN" => Some(MaterialEnum::AcaciaWallHangingSign),
            "CHERRY_WALL_HANGING_SIGN" => Some(MaterialEnum::CherryWallHangingSign),
            "JUNGLE_WALL_HANGING_SIGN" => Some(MaterialEnum::JungleWallHangingSign),
            "DARK_OAK_WALL_HANGING_SIGN" => Some(MaterialEnum::DarkOakWallHangingSign),
            "MANGROVE_WALL_HANGING_SIGN" => Some(MaterialEnum::MangroveWallHangingSign),
            "CRIMSON_WALL_HANGING_SIGN" => Some(MaterialEnum::CrimsonWallHangingSign),
            "WARPED_WALL_HANGING_SIGN" => Some(MaterialEnum::WarpedWallHangingSign),
            "BAMBOO_WALL_HANGING_SIGN" => Some(MaterialEnum::BambooWallHangingSign),
            "REDSTONE_WALL_TORCH" => Some(MaterialEnum::RedstoneWallTorch),
            "SOUL_WALL_TORCH" => Some(MaterialEnum::SoulWallTorch),
            "NETHER_PORTAL" => Some(MaterialEnum::NetherPortal),
            "ATTACHED_PUMPKIN_STEM" => Some(MaterialEnum::AttachedPumpkinStem),
            "ATTACHED_MELON_STEM" => Some(MaterialEnum::AttachedMelonStem),
            "PUMPKIN_STEM" => Some(MaterialEnum::PumpkinStem),
            "MELON_STEM" => Some(MaterialEnum::MelonStem),
            "WATER_CAULDRON" => Some(MaterialEnum::WaterCauldron),
            "LAVA_CAULDRON" => Some(MaterialEnum::LavaCauldron),
            "POWDER_SNOW_CAULDRON" => Some(MaterialEnum::PowderSnowCauldron),
            "END_PORTAL" => Some(MaterialEnum::EndPortal),
            "COCOA" => Some(MaterialEnum::Cocoa),
            "TRIPWIRE" => Some(MaterialEnum::Tripwire),
            "POTTED_TORCHFLOWER" => Some(MaterialEnum::PottedTorchflower),
            "POTTED_OAK_SAPLING" => Some(MaterialEnum::PottedOakSapling),
            "POTTED_SPRUCE_SAPLING" => Some(MaterialEnum::PottedSpruceSapling),
            "POTTED_BIRCH_SAPLING" => Some(MaterialEnum::PottedBirchSapling),
            "POTTED_JUNGLE_SAPLING" => Some(MaterialEnum::PottedJungleSapling),
            "POTTED_ACACIA_SAPLING" => Some(MaterialEnum::PottedAcaciaSapling),
            "POTTED_CHERRY_SAPLING" => Some(MaterialEnum::PottedCherrySapling),
            "POTTED_DARK_OAK_SAPLING" => Some(MaterialEnum::PottedDarkOakSapling),
            "POTTED_MANGROVE_PROPAGULE" => Some(MaterialEnum::PottedMangrovePropagule),
            "POTTED_FERN" => Some(MaterialEnum::PottedFern),
            "POTTED_DANDELION" => Some(MaterialEnum::PottedDandelion),
            "POTTED_POPPY" => Some(MaterialEnum::PottedPoppy),
            "POTTED_BLUE_ORCHID" => Some(MaterialEnum::PottedBlueOrchid),
            "POTTED_ALLIUM" => Some(MaterialEnum::PottedAllium),
            "POTTED_AZURE_BLUET" => Some(MaterialEnum::PottedAzureBluet),
            "POTTED_RED_TULIP" => Some(MaterialEnum::PottedRedTulip),
            "POTTED_ORANGE_TULIP" => Some(MaterialEnum::PottedOrangeTulip),
            "POTTED_WHITE_TULIP" => Some(MaterialEnum::PottedWhiteTulip),
            "POTTED_PINK_TULIP" => Some(MaterialEnum::PottedPinkTulip),
            "POTTED_OXEYE_DAISY" => Some(MaterialEnum::PottedOxeyeDaisy),
            "POTTED_CORNFLOWER" => Some(MaterialEnum::PottedCornflower),
            "POTTED_LILY_OF_THE_VALLEY" => Some(MaterialEnum::PottedLilyOfTheValley),
            "POTTED_WITHER_ROSE" => Some(MaterialEnum::PottedWitherRose),
            "POTTED_RED_MUSHROOM" => Some(MaterialEnum::PottedRedMushroom),
            "POTTED_BROWN_MUSHROOM" => Some(MaterialEnum::PottedBrownMushroom),
            "POTTED_DEAD_BUSH" => Some(MaterialEnum::PottedDeadBush),
            "POTTED_CACTUS" => Some(MaterialEnum::PottedCactus),
            "CARROTS" => Some(MaterialEnum::Carrots),
            "POTATOES" => Some(MaterialEnum::Potatoes),
            "SKELETON_WALL_SKULL" => Some(MaterialEnum::SkeletonWallSkull),
            "WITHER_SKELETON_WALL_SKULL" => Some(MaterialEnum::WitherSkeletonWallSkull),
            "ZOMBIE_WALL_HEAD" => Some(MaterialEnum::ZombieWallHead),
            "PLAYER_WALL_HEAD" => Some(MaterialEnum::PlayerWallHead),
            "CREEPER_WALL_HEAD" => Some(MaterialEnum::CreeperWallHead),
            "DRAGON_WALL_HEAD" => Some(MaterialEnum::DragonWallHead),
            "PIGLIN_WALL_HEAD" => Some(MaterialEnum::PiglinWallHead),
            "WHITE_WALL_BANNER" => Some(MaterialEnum::WhiteWallBanner),
            "ORANGE_WALL_BANNER" => Some(MaterialEnum::OrangeWallBanner),
            "MAGENTA_WALL_BANNER" => Some(MaterialEnum::MagentaWallBanner),
            "LIGHT_BLUE_WALL_BANNER" => Some(MaterialEnum::LightBlueWallBanner),
            "YELLOW_WALL_BANNER" => Some(MaterialEnum::YellowWallBanner),
            "LIME_WALL_BANNER" => Some(MaterialEnum::LimeWallBanner),
            "PINK_WALL_BANNER" => Some(MaterialEnum::PinkWallBanner),
            "GRAY_WALL_BANNER" => Some(MaterialEnum::GrayWallBanner),
            "LIGHT_GRAY_WALL_BANNER" => Some(MaterialEnum::LightGrayWallBanner),
            "CYAN_WALL_BANNER" => Some(MaterialEnum::CyanWallBanner),
            "PURPLE_WALL_BANNER" => Some(MaterialEnum::PurpleWallBanner),
            "BLUE_WALL_BANNER" => Some(MaterialEnum::BlueWallBanner),
            "BROWN_WALL_BANNER" => Some(MaterialEnum::BrownWallBanner),
            "GREEN_WALL_BANNER" => Some(MaterialEnum::GreenWallBanner),
            "RED_WALL_BANNER" => Some(MaterialEnum::RedWallBanner),
            "BLACK_WALL_BANNER" => Some(MaterialEnum::BlackWallBanner),
            "TORCHFLOWER_CROP" => Some(MaterialEnum::TorchflowerCrop),
            "PITCHER_CROP" => Some(MaterialEnum::PitcherCrop),
            "BEETROOTS" => Some(MaterialEnum::Beetroots),
            "END_GATEWAY" => Some(MaterialEnum::EndGateway),
            "FROSTED_ICE" => Some(MaterialEnum::FrostedIce),
            "KELP_PLANT" => Some(MaterialEnum::KelpPlant),
            "DEAD_TUBE_CORAL_WALL_FAN" => Some(MaterialEnum::DeadTubeCoralWallFan),
            "DEAD_BRAIN_CORAL_WALL_FAN" => Some(MaterialEnum::DeadBrainCoralWallFan),
            "DEAD_BUBBLE_CORAL_WALL_FAN" => Some(MaterialEnum::DeadBubbleCoralWallFan),
            "DEAD_FIRE_CORAL_WALL_FAN" => Some(MaterialEnum::DeadFireCoralWallFan),
            "DEAD_HORN_CORAL_WALL_FAN" => Some(MaterialEnum::DeadHornCoralWallFan),
            "TUBE_CORAL_WALL_FAN" => Some(MaterialEnum::TubeCoralWallFan),
            "BRAIN_CORAL_WALL_FAN" => Some(MaterialEnum::BrainCoralWallFan),
            "BUBBLE_CORAL_WALL_FAN" => Some(MaterialEnum::BubbleCoralWallFan),
            "FIRE_CORAL_WALL_FAN" => Some(MaterialEnum::FireCoralWallFan),
            "HORN_CORAL_WALL_FAN" => Some(MaterialEnum::HornCoralWallFan),
            "BAMBOO_SAPLING" => Some(MaterialEnum::BambooSapling),
            "POTTED_BAMBOO" => Some(MaterialEnum::PottedBamboo),
            "VOID_AIR" => Some(MaterialEnum::VoidAir),
            "CAVE_AIR" => Some(MaterialEnum::CaveAir),
            "BUBBLE_COLUMN" => Some(MaterialEnum::BubbleColumn),
            "SWEET_BERRY_BUSH" => Some(MaterialEnum::SweetBerryBush),
            "WEEPING_VINES_PLANT" => Some(MaterialEnum::WeepingVinesPlant),
            "TWISTING_VINES_PLANT" => Some(MaterialEnum::TwistingVinesPlant),
            "CRIMSON_WALL_SIGN" => Some(MaterialEnum::CrimsonWallSign),
            "WARPED_WALL_SIGN" => Some(MaterialEnum::WarpedWallSign),
            "POTTED_CRIMSON_FUNGUS" => Some(MaterialEnum::PottedCrimsonFungus),
            "POTTED_WARPED_FUNGUS" => Some(MaterialEnum::PottedWarpedFungus),
            "POTTED_CRIMSON_ROOTS" => Some(MaterialEnum::PottedCrimsonRoots),
            "POTTED_WARPED_ROOTS" => Some(MaterialEnum::PottedWarpedRoots),
            "CANDLE_CAKE" => Some(MaterialEnum::CandleCake),
            "WHITE_CANDLE_CAKE" => Some(MaterialEnum::WhiteCandleCake),
            "ORANGE_CANDLE_CAKE" => Some(MaterialEnum::OrangeCandleCake),
            "MAGENTA_CANDLE_CAKE" => Some(MaterialEnum::MagentaCandleCake),
            "LIGHT_BLUE_CANDLE_CAKE" => Some(MaterialEnum::LightBlueCandleCake),
            "YELLOW_CANDLE_CAKE" => Some(MaterialEnum::YellowCandleCake),
            "LIME_CANDLE_CAKE" => Some(MaterialEnum::LimeCandleCake),
            "PINK_CANDLE_CAKE" => Some(MaterialEnum::PinkCandleCake),
            "GRAY_CANDLE_CAKE" => Some(MaterialEnum::GrayCandleCake),
            "LIGHT_GRAY_CANDLE_CAKE" => Some(MaterialEnum::LightGrayCandleCake),
            "CYAN_CANDLE_CAKE" => Some(MaterialEnum::CyanCandleCake),
            "PURPLE_CANDLE_CAKE" => Some(MaterialEnum::PurpleCandleCake),
            "BLUE_CANDLE_CAKE" => Some(MaterialEnum::BlueCandleCake),
            "BROWN_CANDLE_CAKE" => Some(MaterialEnum::BrownCandleCake),
            "GREEN_CANDLE_CAKE" => Some(MaterialEnum::GreenCandleCake),
            "RED_CANDLE_CAKE" => Some(MaterialEnum::RedCandleCake),
            "BLACK_CANDLE_CAKE" => Some(MaterialEnum::BlackCandleCake),
            "POWDER_SNOW" => Some(MaterialEnum::PowderSnow),
            "CAVE_VINES" => Some(MaterialEnum::CaveVines),
            "CAVE_VINES_PLANT" => Some(MaterialEnum::CaveVinesPlant),
            "BIG_DRIPLEAF_STEM" => Some(MaterialEnum::BigDripleafStem),
            "POTTED_AZALEA_BUSH" => Some(MaterialEnum::PottedAzaleaBush),
            "POTTED_FLOWERING_AZALEA_BUSH" => Some(MaterialEnum::PottedFloweringAzaleaBush),
            "LEGACY_AIR" => Some(MaterialEnum::LegacyAir),
            "LEGACY_STONE" => Some(MaterialEnum::LegacyStone),
            "LEGACY_GRASS" => Some(MaterialEnum::LegacyGrass),
            "LEGACY_DIRT" => Some(MaterialEnum::LegacyDirt),
            "LEGACY_COBBLESTONE" => Some(MaterialEnum::LegacyCobblestone),
            "LEGACY_WOOD" => Some(MaterialEnum::LegacyWood),
            "LEGACY_SAPLING" => Some(MaterialEnum::LegacySapling),
            "LEGACY_BEDROCK" => Some(MaterialEnum::LegacyBedrock),
            "LEGACY_WATER" => Some(MaterialEnum::LegacyWater),
            "LEGACY_STATIONARY_WATER" => Some(MaterialEnum::LegacyStationaryWater),
            "LEGACY_LAVA" => Some(MaterialEnum::LegacyLava),
            "LEGACY_STATIONARY_LAVA" => Some(MaterialEnum::LegacyStationaryLava),
            "LEGACY_SAND" => Some(MaterialEnum::LegacySand),
            "LEGACY_GRAVEL" => Some(MaterialEnum::LegacyGravel),
            "LEGACY_GOLD_ORE" => Some(MaterialEnum::LegacyGoldOre),
            "LEGACY_IRON_ORE" => Some(MaterialEnum::LegacyIronOre),
            "LEGACY_COAL_ORE" => Some(MaterialEnum::LegacyCoalOre),
            "LEGACY_LOG" => Some(MaterialEnum::LegacyLog),
            "LEGACY_LEAVES" => Some(MaterialEnum::LegacyLeaves),
            "LEGACY_SPONGE" => Some(MaterialEnum::LegacySponge),
            "LEGACY_GLASS" => Some(MaterialEnum::LegacyGlass),
            "LEGACY_LAPIS_ORE" => Some(MaterialEnum::LegacyLapisOre),
            "LEGACY_LAPIS_BLOCK" => Some(MaterialEnum::LegacyLapisBlock),
            "LEGACY_DISPENSER" => Some(MaterialEnum::LegacyDispenser),
            "LEGACY_SANDSTONE" => Some(MaterialEnum::LegacySandstone),
            "LEGACY_NOTE_BLOCK" => Some(MaterialEnum::LegacyNoteBlock),
            "LEGACY_BED_BLOCK" => Some(MaterialEnum::LegacyBedBlock),
            "LEGACY_POWERED_RAIL" => Some(MaterialEnum::LegacyPoweredRail),
            "LEGACY_DETECTOR_RAIL" => Some(MaterialEnum::LegacyDetectorRail),
            "LEGACY_PISTON_STICKY_BASE" => Some(MaterialEnum::LegacyPistonStickyBase),
            "LEGACY_WEB" => Some(MaterialEnum::LegacyWeb),
            "LEGACY_LONG_GRASS" => Some(MaterialEnum::LegacyLongGrass),
            "LEGACY_DEAD_BUSH" => Some(MaterialEnum::LegacyDeadBush),
            "LEGACY_PISTON_BASE" => Some(MaterialEnum::LegacyPistonBase),
            "LEGACY_PISTON_EXTENSION" => Some(MaterialEnum::LegacyPistonExtension),
            "LEGACY_WOOL" => Some(MaterialEnum::LegacyWool),
            "LEGACY_PISTON_MOVING_PIECE" => Some(MaterialEnum::LegacyPistonMovingPiece),
            "LEGACY_YELLOW_FLOWER" => Some(MaterialEnum::LegacyYellowFlower),
            "LEGACY_RED_ROSE" => Some(MaterialEnum::LegacyRedRose),
            "LEGACY_BROWN_MUSHROOM" => Some(MaterialEnum::LegacyBrownMushroom),
            "LEGACY_RED_MUSHROOM" => Some(MaterialEnum::LegacyRedMushroom),
            "LEGACY_GOLD_BLOCK" => Some(MaterialEnum::LegacyGoldBlock),
            "LEGACY_IRON_BLOCK" => Some(MaterialEnum::LegacyIronBlock),
            "LEGACY_DOUBLE_STEP" => Some(MaterialEnum::LegacyDoubleStep),
            "LEGACY_STEP" => Some(MaterialEnum::LegacyStep),
            "LEGACY_BRICK" => Some(MaterialEnum::LegacyBrick),
            "LEGACY_TNT" => Some(MaterialEnum::LegacyTnt),
            "LEGACY_BOOKSHELF" => Some(MaterialEnum::LegacyBookshelf),
            "LEGACY_MOSSY_COBBLESTONE" => Some(MaterialEnum::LegacyMossyCobblestone),
            "LEGACY_OBSIDIAN" => Some(MaterialEnum::LegacyObsidian),
            "LEGACY_TORCH" => Some(MaterialEnum::LegacyTorch),
            "LEGACY_FIRE" => Some(MaterialEnum::LegacyFire),
            "LEGACY_MOB_SPAWNER" => Some(MaterialEnum::LegacyMobSpawner),
            "LEGACY_WOOD_STAIRS" => Some(MaterialEnum::LegacyWoodStairs),
            "LEGACY_CHEST" => Some(MaterialEnum::LegacyChest),
            "LEGACY_REDSTONE_WIRE" => Some(MaterialEnum::LegacyRedstoneWire),
            "LEGACY_DIAMOND_ORE" => Some(MaterialEnum::LegacyDiamondOre),
            "LEGACY_DIAMOND_BLOCK" => Some(MaterialEnum::LegacyDiamondBlock),
            "LEGACY_WORKBENCH" => Some(MaterialEnum::LegacyWorkbench),
            "LEGACY_CROPS" => Some(MaterialEnum::LegacyCrops),
            "LEGACY_SOIL" => Some(MaterialEnum::LegacySoil),
            "LEGACY_FURNACE" => Some(MaterialEnum::LegacyFurnace),
            "LEGACY_BURNING_FURNACE" => Some(MaterialEnum::LegacyBurningFurnace),
            "LEGACY_SIGN_POST" => Some(MaterialEnum::LegacySignPost),
            "LEGACY_WOODEN_DOOR" => Some(MaterialEnum::LegacyWoodenDoor),
            "LEGACY_LADDER" => Some(MaterialEnum::LegacyLadder),
            "LEGACY_RAILS" => Some(MaterialEnum::LegacyRails),
            "LEGACY_COBBLESTONE_STAIRS" => Some(MaterialEnum::LegacyCobblestoneStairs),
            "LEGACY_WALL_SIGN" => Some(MaterialEnum::LegacyWallSign),
            "LEGACY_LEVER" => Some(MaterialEnum::LegacyLever),
            "LEGACY_STONE_PLATE" => Some(MaterialEnum::LegacyStonePlate),
            "LEGACY_IRON_DOOR_BLOCK" => Some(MaterialEnum::LegacyIronDoorBlock),
            "LEGACY_WOOD_PLATE" => Some(MaterialEnum::LegacyWoodPlate),
            "LEGACY_REDSTONE_ORE" => Some(MaterialEnum::LegacyRedstoneOre),
            "LEGACY_GLOWING_REDSTONE_ORE" => Some(MaterialEnum::LegacyGlowingRedstoneOre),
            "LEGACY_REDSTONE_TORCH_OFF" => Some(MaterialEnum::LegacyRedstoneTorchOff),
            "LEGACY_REDSTONE_TORCH_ON" => Some(MaterialEnum::LegacyRedstoneTorchOn),
            "LEGACY_STONE_BUTTON" => Some(MaterialEnum::LegacyStoneButton),
            "LEGACY_SNOW" => Some(MaterialEnum::LegacySnow),
            "LEGACY_ICE" => Some(MaterialEnum::LegacyIce),
            "LEGACY_SNOW_BLOCK" => Some(MaterialEnum::LegacySnowBlock),
            "LEGACY_CACTUS" => Some(MaterialEnum::LegacyCactus),
            "LEGACY_CLAY" => Some(MaterialEnum::LegacyClay),
            "LEGACY_SUGAR_CANE_BLOCK" => Some(MaterialEnum::LegacySugarCaneBlock),
            "LEGACY_JUKEBOX" => Some(MaterialEnum::LegacyJukebox),
            "LEGACY_FENCE" => Some(MaterialEnum::LegacyFence),
            "LEGACY_PUMPKIN" => Some(MaterialEnum::LegacyPumpkin),
            "LEGACY_NETHERRACK" => Some(MaterialEnum::LegacyNetherrack),
            "LEGACY_SOUL_SAND" => Some(MaterialEnum::LegacySoulSand),
            "LEGACY_GLOWSTONE" => Some(MaterialEnum::LegacyGlowstone),
            "LEGACY_PORTAL" => Some(MaterialEnum::LegacyPortal),
            "LEGACY_JACK_O_LANTERN" => Some(MaterialEnum::LegacyJackOLantern),
            "LEGACY_CAKE_BLOCK" => Some(MaterialEnum::LegacyCakeBlock),
            "LEGACY_DIODE_BLOCK_OFF" => Some(MaterialEnum::LegacyDiodeBlockOff),
            "LEGACY_DIODE_BLOCK_ON" => Some(MaterialEnum::LegacyDiodeBlockOn),
            "LEGACY_STAINED_GLASS" => Some(MaterialEnum::LegacyStainedGlass),
            "LEGACY_TRAP_DOOR" => Some(MaterialEnum::LegacyTrapDoor),
            "LEGACY_MONSTER_EGGS" => Some(MaterialEnum::LegacyMonsterEggs),
            "LEGACY_SMOOTH_BRICK" => Some(MaterialEnum::LegacySmoothBrick),
            "LEGACY_HUGE_MUSHROOM_1" => Some(MaterialEnum::LegacyHugeMushroom1),
            "LEGACY_HUGE_MUSHROOM_2" => Some(MaterialEnum::LegacyHugeMushroom2),
            "LEGACY_IRON_FENCE" => Some(MaterialEnum::LegacyIronFence),
            "LEGACY_THIN_GLASS" => Some(MaterialEnum::LegacyThinGlass),
            "LEGACY_MELON_BLOCK" => Some(MaterialEnum::LegacyMelonBlock),
            "LEGACY_PUMPKIN_STEM" => Some(MaterialEnum::LegacyPumpkinStem),
            "LEGACY_MELON_STEM" => Some(MaterialEnum::LegacyMelonStem),
            "LEGACY_VINE" => Some(MaterialEnum::LegacyVine),
            "LEGACY_FENCE_GATE" => Some(MaterialEnum::LegacyFenceGate),
            "LEGACY_BRICK_STAIRS" => Some(MaterialEnum::LegacyBrickStairs),
            "LEGACY_SMOOTH_STAIRS" => Some(MaterialEnum::LegacySmoothStairs),
            "LEGACY_MYCEL" => Some(MaterialEnum::LegacyMycel),
            "LEGACY_WATER_LILY" => Some(MaterialEnum::LegacyWaterLily),
            "LEGACY_NETHER_BRICK" => Some(MaterialEnum::LegacyNetherBrick),
            "LEGACY_NETHER_FENCE" => Some(MaterialEnum::LegacyNetherFence),
            "LEGACY_NETHER_BRICK_STAIRS" => Some(MaterialEnum::LegacyNetherBrickStairs),
            "LEGACY_NETHER_WARTS" => Some(MaterialEnum::LegacyNetherWarts),
            "LEGACY_ENCHANTMENT_TABLE" => Some(MaterialEnum::LegacyEnchantmentTable),
            "LEGACY_BREWING_STAND" => Some(MaterialEnum::LegacyBrewingStand),
            "LEGACY_CAULDRON" => Some(MaterialEnum::LegacyCauldron),
            "LEGACY_ENDER_PORTAL" => Some(MaterialEnum::LegacyEnderPortal),
            "LEGACY_ENDER_PORTAL_FRAME" => Some(MaterialEnum::LegacyEnderPortalFrame),
            "LEGACY_ENDER_STONE" => Some(MaterialEnum::LegacyEnderStone),
            "LEGACY_DRAGON_EGG" => Some(MaterialEnum::LegacyDragonEgg),
            "LEGACY_REDSTONE_LAMP_OFF" => Some(MaterialEnum::LegacyRedstoneLampOff),
            "LEGACY_REDSTONE_LAMP_ON" => Some(MaterialEnum::LegacyRedstoneLampOn),
            "LEGACY_WOOD_DOUBLE_STEP" => Some(MaterialEnum::LegacyWoodDoubleStep),
            "LEGACY_WOOD_STEP" => Some(MaterialEnum::LegacyWoodStep),
            "LEGACY_COCOA" => Some(MaterialEnum::LegacyCocoa),
            "LEGACY_SANDSTONE_STAIRS" => Some(MaterialEnum::LegacySandstoneStairs),
            "LEGACY_EMERALD_ORE" => Some(MaterialEnum::LegacyEmeraldOre),
            "LEGACY_ENDER_CHEST" => Some(MaterialEnum::LegacyEnderChest),
            "LEGACY_TRIPWIRE_HOOK" => Some(MaterialEnum::LegacyTripwireHook),
            "LEGACY_TRIPWIRE" => Some(MaterialEnum::LegacyTripwire),
            "LEGACY_EMERALD_BLOCK" => Some(MaterialEnum::LegacyEmeraldBlock),
            "LEGACY_SPRUCE_WOOD_STAIRS" => Some(MaterialEnum::LegacySpruceWoodStairs),
            "LEGACY_BIRCH_WOOD_STAIRS" => Some(MaterialEnum::LegacyBirchWoodStairs),
            "LEGACY_JUNGLE_WOOD_STAIRS" => Some(MaterialEnum::LegacyJungleWoodStairs),
            "LEGACY_COMMAND" => Some(MaterialEnum::LegacyCommand),
            "LEGACY_BEACON" => Some(MaterialEnum::LegacyBeacon),
            "LEGACY_COBBLE_WALL" => Some(MaterialEnum::LegacyCobbleWall),
            "LEGACY_FLOWER_POT" => Some(MaterialEnum::LegacyFlowerPot),
            "LEGACY_CARROT" => Some(MaterialEnum::LegacyCarrot),
            "LEGACY_POTATO" => Some(MaterialEnum::LegacyPotato),
            "LEGACY_WOOD_BUTTON" => Some(MaterialEnum::LegacyWoodButton),
            "LEGACY_SKULL" => Some(MaterialEnum::LegacySkull),
            "LEGACY_ANVIL" => Some(MaterialEnum::LegacyAnvil),
            "LEGACY_TRAPPED_CHEST" => Some(MaterialEnum::LegacyTrappedChest),
            "LEGACY_GOLD_PLATE" => Some(MaterialEnum::LegacyGoldPlate),
            "LEGACY_IRON_PLATE" => Some(MaterialEnum::LegacyIronPlate),
            "LEGACY_REDSTONE_COMPARATOR_OFF" => Some(MaterialEnum::LegacyRedstoneComparatorOff),
            "LEGACY_REDSTONE_COMPARATOR_ON" => Some(MaterialEnum::LegacyRedstoneComparatorOn),
            "LEGACY_DAYLIGHT_DETECTOR" => Some(MaterialEnum::LegacyDaylightDetector),
            "LEGACY_REDSTONE_BLOCK" => Some(MaterialEnum::LegacyRedstoneBlock),
            "LEGACY_QUARTZ_ORE" => Some(MaterialEnum::LegacyQuartzOre),
            "LEGACY_HOPPER" => Some(MaterialEnum::LegacyHopper),
            "LEGACY_QUARTZ_BLOCK" => Some(MaterialEnum::LegacyQuartzBlock),
            "LEGACY_QUARTZ_STAIRS" => Some(MaterialEnum::LegacyQuartzStairs),
            "LEGACY_ACTIVATOR_RAIL" => Some(MaterialEnum::LegacyActivatorRail),
            "LEGACY_DROPPER" => Some(MaterialEnum::LegacyDropper),
            "LEGACY_STAINED_CLAY" => Some(MaterialEnum::LegacyStainedClay),
            "LEGACY_STAINED_GLASS_PANE" => Some(MaterialEnum::LegacyStainedGlassPane),
            "LEGACY_LEAVES_2" => Some(MaterialEnum::LegacyLeaves2),
            "LEGACY_LOG_2" => Some(MaterialEnum::LegacyLog2),
            "LEGACY_ACACIA_STAIRS" => Some(MaterialEnum::LegacyAcaciaStairs),
            "LEGACY_DARK_OAK_STAIRS" => Some(MaterialEnum::LegacyDarkOakStairs),
            "LEGACY_SLIME_BLOCK" => Some(MaterialEnum::LegacySlimeBlock),
            "LEGACY_BARRIER" => Some(MaterialEnum::LegacyBarrier),
            "LEGACY_IRON_TRAPDOOR" => Some(MaterialEnum::LegacyIronTrapdoor),
            "LEGACY_PRISMARINE" => Some(MaterialEnum::LegacyPrismarine),
            "LEGACY_SEA_LANTERN" => Some(MaterialEnum::LegacySeaLantern),
            "LEGACY_HAY_BLOCK" => Some(MaterialEnum::LegacyHayBlock),
            "LEGACY_CARPET" => Some(MaterialEnum::LegacyCarpet),
            "LEGACY_HARD_CLAY" => Some(MaterialEnum::LegacyHardClay),
            "LEGACY_COAL_BLOCK" => Some(MaterialEnum::LegacyCoalBlock),
            "LEGACY_PACKED_ICE" => Some(MaterialEnum::LegacyPackedIce),
            "LEGACY_DOUBLE_PLANT" => Some(MaterialEnum::LegacyDoublePlant),
            "LEGACY_STANDING_BANNER" => Some(MaterialEnum::LegacyStandingBanner),
            "LEGACY_WALL_BANNER" => Some(MaterialEnum::LegacyWallBanner),
            "LEGACY_DAYLIGHT_DETECTOR_INVERTED" => {
                Some(MaterialEnum::LegacyDaylightDetectorInverted)
            }
            "LEGACY_RED_SANDSTONE" => Some(MaterialEnum::LegacyRedSandstone),
            "LEGACY_RED_SANDSTONE_STAIRS" => Some(MaterialEnum::LegacyRedSandstoneStairs),
            "LEGACY_DOUBLE_STONE_SLAB2" => Some(MaterialEnum::LegacyDoubleStoneSlab2),
            "LEGACY_STONE_SLAB2" => Some(MaterialEnum::LegacyStoneSlab2),
            "LEGACY_SPRUCE_FENCE_GATE" => Some(MaterialEnum::LegacySpruceFenceGate),
            "LEGACY_BIRCH_FENCE_GATE" => Some(MaterialEnum::LegacyBirchFenceGate),
            "LEGACY_JUNGLE_FENCE_GATE" => Some(MaterialEnum::LegacyJungleFenceGate),
            "LEGACY_DARK_OAK_FENCE_GATE" => Some(MaterialEnum::LegacyDarkOakFenceGate),
            "LEGACY_ACACIA_FENCE_GATE" => Some(MaterialEnum::LegacyAcaciaFenceGate),
            "LEGACY_SPRUCE_FENCE" => Some(MaterialEnum::LegacySpruceFence),
            "LEGACY_BIRCH_FENCE" => Some(MaterialEnum::LegacyBirchFence),
            "LEGACY_JUNGLE_FENCE" => Some(MaterialEnum::LegacyJungleFence),
            "LEGACY_DARK_OAK_FENCE" => Some(MaterialEnum::LegacyDarkOakFence),
            "LEGACY_ACACIA_FENCE" => Some(MaterialEnum::LegacyAcaciaFence),
            "LEGACY_SPRUCE_DOOR" => Some(MaterialEnum::LegacySpruceDoor),
            "LEGACY_BIRCH_DOOR" => Some(MaterialEnum::LegacyBirchDoor),
            "LEGACY_JUNGLE_DOOR" => Some(MaterialEnum::LegacyJungleDoor),
            "LEGACY_ACACIA_DOOR" => Some(MaterialEnum::LegacyAcaciaDoor),
            "LEGACY_DARK_OAK_DOOR" => Some(MaterialEnum::LegacyDarkOakDoor),
            "LEGACY_END_ROD" => Some(MaterialEnum::LegacyEndRod),
            "LEGACY_CHORUS_PLANT" => Some(MaterialEnum::LegacyChorusPlant),
            "LEGACY_CHORUS_FLOWER" => Some(MaterialEnum::LegacyChorusFlower),
            "LEGACY_PURPUR_BLOCK" => Some(MaterialEnum::LegacyPurpurBlock),
            "LEGACY_PURPUR_PILLAR" => Some(MaterialEnum::LegacyPurpurPillar),
            "LEGACY_PURPUR_STAIRS" => Some(MaterialEnum::LegacyPurpurStairs),
            "LEGACY_PURPUR_DOUBLE_SLAB" => Some(MaterialEnum::LegacyPurpurDoubleSlab),
            "LEGACY_PURPUR_SLAB" => Some(MaterialEnum::LegacyPurpurSlab),
            "LEGACY_END_BRICKS" => Some(MaterialEnum::LegacyEndBricks),
            "LEGACY_BEETROOT_BLOCK" => Some(MaterialEnum::LegacyBeetrootBlock),
            "LEGACY_GRASS_PATH" => Some(MaterialEnum::LegacyGrassPath),
            "LEGACY_END_GATEWAY" => Some(MaterialEnum::LegacyEndGateway),
            "LEGACY_COMMAND_REPEATING" => Some(MaterialEnum::LegacyCommandRepeating),
            "LEGACY_COMMAND_CHAIN" => Some(MaterialEnum::LegacyCommandChain),
            "LEGACY_FROSTED_ICE" => Some(MaterialEnum::LegacyFrostedIce),
            "LEGACY_MAGMA" => Some(MaterialEnum::LegacyMagma),
            "LEGACY_NETHER_WART_BLOCK" => Some(MaterialEnum::LegacyNetherWartBlock),
            "LEGACY_RED_NETHER_BRICK" => Some(MaterialEnum::LegacyRedNetherBrick),
            "LEGACY_BONE_BLOCK" => Some(MaterialEnum::LegacyBoneBlock),
            "LEGACY_STRUCTURE_VOID" => Some(MaterialEnum::LegacyStructureVoid),
            "LEGACY_OBSERVER" => Some(MaterialEnum::LegacyObserver),
            "LEGACY_WHITE_SHULKER_BOX" => Some(MaterialEnum::LegacyWhiteShulkerBox),
            "LEGACY_ORANGE_SHULKER_BOX" => Some(MaterialEnum::LegacyOrangeShulkerBox),
            "LEGACY_MAGENTA_SHULKER_BOX" => Some(MaterialEnum::LegacyMagentaShulkerBox),
            "LEGACY_LIGHT_BLUE_SHULKER_BOX" => Some(MaterialEnum::LegacyLightBlueShulkerBox),
            "LEGACY_YELLOW_SHULKER_BOX" => Some(MaterialEnum::LegacyYellowShulkerBox),
            "LEGACY_LIME_SHULKER_BOX" => Some(MaterialEnum::LegacyLimeShulkerBox),
            "LEGACY_PINK_SHULKER_BOX" => Some(MaterialEnum::LegacyPinkShulkerBox),
            "LEGACY_GRAY_SHULKER_BOX" => Some(MaterialEnum::LegacyGrayShulkerBox),
            "LEGACY_SILVER_SHULKER_BOX" => Some(MaterialEnum::LegacySilverShulkerBox),
            "LEGACY_CYAN_SHULKER_BOX" => Some(MaterialEnum::LegacyCyanShulkerBox),
            "LEGACY_PURPLE_SHULKER_BOX" => Some(MaterialEnum::LegacyPurpleShulkerBox),
            "LEGACY_BLUE_SHULKER_BOX" => Some(MaterialEnum::LegacyBlueShulkerBox),
            "LEGACY_BROWN_SHULKER_BOX" => Some(MaterialEnum::LegacyBrownShulkerBox),
            "LEGACY_GREEN_SHULKER_BOX" => Some(MaterialEnum::LegacyGreenShulkerBox),
            "LEGACY_RED_SHULKER_BOX" => Some(MaterialEnum::LegacyRedShulkerBox),
            "LEGACY_BLACK_SHULKER_BOX" => Some(MaterialEnum::LegacyBlackShulkerBox),
            "LEGACY_WHITE_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyWhiteGlazedTerracotta),
            "LEGACY_ORANGE_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyOrangeGlazedTerracotta),
            "LEGACY_MAGENTA_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyMagentaGlazedTerracotta),
            "LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA" => {
                Some(MaterialEnum::LegacyLightBlueGlazedTerracotta)
            }
            "LEGACY_YELLOW_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyYellowGlazedTerracotta),
            "LEGACY_LIME_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyLimeGlazedTerracotta),
            "LEGACY_PINK_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyPinkGlazedTerracotta),
            "LEGACY_GRAY_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyGrayGlazedTerracotta),
            "LEGACY_SILVER_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacySilverGlazedTerracotta),
            "LEGACY_CYAN_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyCyanGlazedTerracotta),
            "LEGACY_PURPLE_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyPurpleGlazedTerracotta),
            "LEGACY_BLUE_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyBlueGlazedTerracotta),
            "LEGACY_BROWN_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyBrownGlazedTerracotta),
            "LEGACY_GREEN_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyGreenGlazedTerracotta),
            "LEGACY_RED_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyRedGlazedTerracotta),
            "LEGACY_BLACK_GLAZED_TERRACOTTA" => Some(MaterialEnum::LegacyBlackGlazedTerracotta),
            "LEGACY_CONCRETE" => Some(MaterialEnum::LegacyConcrete),
            "LEGACY_CONCRETE_POWDER" => Some(MaterialEnum::LegacyConcretePowder),
            "LEGACY_STRUCTURE_BLOCK" => Some(MaterialEnum::LegacyStructureBlock),
            "LEGACY_IRON_SPADE" => Some(MaterialEnum::LegacyIronSpade),
            "LEGACY_IRON_PICKAXE" => Some(MaterialEnum::LegacyIronPickaxe),
            "LEGACY_IRON_AXE" => Some(MaterialEnum::LegacyIronAxe),
            "LEGACY_FLINT_AND_STEEL" => Some(MaterialEnum::LegacyFlintAndSteel),
            "LEGACY_APPLE" => Some(MaterialEnum::LegacyApple),
            "LEGACY_BOW" => Some(MaterialEnum::LegacyBow),
            "LEGACY_ARROW" => Some(MaterialEnum::LegacyArrow),
            "LEGACY_COAL" => Some(MaterialEnum::LegacyCoal),
            "LEGACY_DIAMOND" => Some(MaterialEnum::LegacyDiamond),
            "LEGACY_IRON_INGOT" => Some(MaterialEnum::LegacyIronIngot),
            "LEGACY_GOLD_INGOT" => Some(MaterialEnum::LegacyGoldIngot),
            "LEGACY_IRON_SWORD" => Some(MaterialEnum::LegacyIronSword),
            "LEGACY_WOOD_SWORD" => Some(MaterialEnum::LegacyWoodSword),
            "LEGACY_WOOD_SPADE" => Some(MaterialEnum::LegacyWoodSpade),
            "LEGACY_WOOD_PICKAXE" => Some(MaterialEnum::LegacyWoodPickaxe),
            "LEGACY_WOOD_AXE" => Some(MaterialEnum::LegacyWoodAxe),
            "LEGACY_STONE_SWORD" => Some(MaterialEnum::LegacyStoneSword),
            "LEGACY_STONE_SPADE" => Some(MaterialEnum::LegacyStoneSpade),
            "LEGACY_STONE_PICKAXE" => Some(MaterialEnum::LegacyStonePickaxe),
            "LEGACY_STONE_AXE" => Some(MaterialEnum::LegacyStoneAxe),
            "LEGACY_DIAMOND_SWORD" => Some(MaterialEnum::LegacyDiamondSword),
            "LEGACY_DIAMOND_SPADE" => Some(MaterialEnum::LegacyDiamondSpade),
            "LEGACY_DIAMOND_PICKAXE" => Some(MaterialEnum::LegacyDiamondPickaxe),
            "LEGACY_DIAMOND_AXE" => Some(MaterialEnum::LegacyDiamondAxe),
            "LEGACY_STICK" => Some(MaterialEnum::LegacyStick),
            "LEGACY_BOWL" => Some(MaterialEnum::LegacyBowl),
            "LEGACY_MUSHROOM_SOUP" => Some(MaterialEnum::LegacyMushroomSoup),
            "LEGACY_GOLD_SWORD" => Some(MaterialEnum::LegacyGoldSword),
            "LEGACY_GOLD_SPADE" => Some(MaterialEnum::LegacyGoldSpade),
            "LEGACY_GOLD_PICKAXE" => Some(MaterialEnum::LegacyGoldPickaxe),
            "LEGACY_GOLD_AXE" => Some(MaterialEnum::LegacyGoldAxe),
            "LEGACY_STRING" => Some(MaterialEnum::LegacyString),
            "LEGACY_FEATHER" => Some(MaterialEnum::LegacyFeather),
            "LEGACY_SULPHUR" => Some(MaterialEnum::LegacySulphur),
            "LEGACY_WOOD_HOE" => Some(MaterialEnum::LegacyWoodHoe),
            "LEGACY_STONE_HOE" => Some(MaterialEnum::LegacyStoneHoe),
            "LEGACY_IRON_HOE" => Some(MaterialEnum::LegacyIronHoe),
            "LEGACY_DIAMOND_HOE" => Some(MaterialEnum::LegacyDiamondHoe),
            "LEGACY_GOLD_HOE" => Some(MaterialEnum::LegacyGoldHoe),
            "LEGACY_SEEDS" => Some(MaterialEnum::LegacySeeds),
            "LEGACY_WHEAT" => Some(MaterialEnum::LegacyWheat),
            "LEGACY_BREAD" => Some(MaterialEnum::LegacyBread),
            "LEGACY_LEATHER_HELMET" => Some(MaterialEnum::LegacyLeatherHelmet),
            "LEGACY_LEATHER_CHESTPLATE" => Some(MaterialEnum::LegacyLeatherChestplate),
            "LEGACY_LEATHER_LEGGINGS" => Some(MaterialEnum::LegacyLeatherLeggings),
            "LEGACY_LEATHER_BOOTS" => Some(MaterialEnum::LegacyLeatherBoots),
            "LEGACY_CHAINMAIL_HELMET" => Some(MaterialEnum::LegacyChainmailHelmet),
            "LEGACY_CHAINMAIL_CHESTPLATE" => Some(MaterialEnum::LegacyChainmailChestplate),
            "LEGACY_CHAINMAIL_LEGGINGS" => Some(MaterialEnum::LegacyChainmailLeggings),
            "LEGACY_CHAINMAIL_BOOTS" => Some(MaterialEnum::LegacyChainmailBoots),
            "LEGACY_IRON_HELMET" => Some(MaterialEnum::LegacyIronHelmet),
            "LEGACY_IRON_CHESTPLATE" => Some(MaterialEnum::LegacyIronChestplate),
            "LEGACY_IRON_LEGGINGS" => Some(MaterialEnum::LegacyIronLeggings),
            "LEGACY_IRON_BOOTS" => Some(MaterialEnum::LegacyIronBoots),
            "LEGACY_DIAMOND_HELMET" => Some(MaterialEnum::LegacyDiamondHelmet),
            "LEGACY_DIAMOND_CHESTPLATE" => Some(MaterialEnum::LegacyDiamondChestplate),
            "LEGACY_DIAMOND_LEGGINGS" => Some(MaterialEnum::LegacyDiamondLeggings),
            "LEGACY_DIAMOND_BOOTS" => Some(MaterialEnum::LegacyDiamondBoots),
            "LEGACY_GOLD_HELMET" => Some(MaterialEnum::LegacyGoldHelmet),
            "LEGACY_GOLD_CHESTPLATE" => Some(MaterialEnum::LegacyGoldChestplate),
            "LEGACY_GOLD_LEGGINGS" => Some(MaterialEnum::LegacyGoldLeggings),
            "LEGACY_GOLD_BOOTS" => Some(MaterialEnum::LegacyGoldBoots),
            "LEGACY_FLINT" => Some(MaterialEnum::LegacyFlint),
            "LEGACY_PORK" => Some(MaterialEnum::LegacyPork),
            "LEGACY_GRILLED_PORK" => Some(MaterialEnum::LegacyGrilledPork),
            "LEGACY_PAINTING" => Some(MaterialEnum::LegacyPainting),
            "LEGACY_GOLDEN_APPLE" => Some(MaterialEnum::LegacyGoldenApple),
            "LEGACY_SIGN" => Some(MaterialEnum::LegacySign),
            "LEGACY_WOOD_DOOR" => Some(MaterialEnum::LegacyWoodDoor),
            "LEGACY_BUCKET" => Some(MaterialEnum::LegacyBucket),
            "LEGACY_WATER_BUCKET" => Some(MaterialEnum::LegacyWaterBucket),
            "LEGACY_LAVA_BUCKET" => Some(MaterialEnum::LegacyLavaBucket),
            "LEGACY_MINECART" => Some(MaterialEnum::LegacyMinecart),
            "LEGACY_SADDLE" => Some(MaterialEnum::LegacySaddle),
            "LEGACY_IRON_DOOR" => Some(MaterialEnum::LegacyIronDoor),
            "LEGACY_REDSTONE" => Some(MaterialEnum::LegacyRedstone),
            "LEGACY_SNOW_BALL" => Some(MaterialEnum::LegacySnowBall),
            "LEGACY_BOAT" => Some(MaterialEnum::LegacyBoat),
            "LEGACY_LEATHER" => Some(MaterialEnum::LegacyLeather),
            "LEGACY_MILK_BUCKET" => Some(MaterialEnum::LegacyMilkBucket),
            "LEGACY_CLAY_BRICK" => Some(MaterialEnum::LegacyClayBrick),
            "LEGACY_CLAY_BALL" => Some(MaterialEnum::LegacyClayBall),
            "LEGACY_SUGAR_CANE" => Some(MaterialEnum::LegacySugarCane),
            "LEGACY_PAPER" => Some(MaterialEnum::LegacyPaper),
            "LEGACY_BOOK" => Some(MaterialEnum::LegacyBook),
            "LEGACY_SLIME_BALL" => Some(MaterialEnum::LegacySlimeBall),
            "LEGACY_STORAGE_MINECART" => Some(MaterialEnum::LegacyStorageMinecart),
            "LEGACY_POWERED_MINECART" => Some(MaterialEnum::LegacyPoweredMinecart),
            "LEGACY_EGG" => Some(MaterialEnum::LegacyEgg),
            "LEGACY_COMPASS" => Some(MaterialEnum::LegacyCompass),
            "LEGACY_FISHING_ROD" => Some(MaterialEnum::LegacyFishingRod),
            "LEGACY_WATCH" => Some(MaterialEnum::LegacyWatch),
            "LEGACY_GLOWSTONE_DUST" => Some(MaterialEnum::LegacyGlowstoneDust),
            "LEGACY_RAW_FISH" => Some(MaterialEnum::LegacyRawFish),
            "LEGACY_COOKED_FISH" => Some(MaterialEnum::LegacyCookedFish),
            "LEGACY_INK_SACK" => Some(MaterialEnum::LegacyInkSack),
            "LEGACY_BONE" => Some(MaterialEnum::LegacyBone),
            "LEGACY_SUGAR" => Some(MaterialEnum::LegacySugar),
            "LEGACY_CAKE" => Some(MaterialEnum::LegacyCake),
            "LEGACY_BED" => Some(MaterialEnum::LegacyBed),
            "LEGACY_DIODE" => Some(MaterialEnum::LegacyDiode),
            "LEGACY_COOKIE" => Some(MaterialEnum::LegacyCookie),
            "LEGACY_MAP" => Some(MaterialEnum::LegacyMap),
            "LEGACY_SHEARS" => Some(MaterialEnum::LegacyShears),
            "LEGACY_MELON" => Some(MaterialEnum::LegacyMelon),
            "LEGACY_PUMPKIN_SEEDS" => Some(MaterialEnum::LegacyPumpkinSeeds),
            "LEGACY_MELON_SEEDS" => Some(MaterialEnum::LegacyMelonSeeds),
            "LEGACY_RAW_BEEF" => Some(MaterialEnum::LegacyRawBeef),
            "LEGACY_COOKED_BEEF" => Some(MaterialEnum::LegacyCookedBeef),
            "LEGACY_RAW_CHICKEN" => Some(MaterialEnum::LegacyRawChicken),
            "LEGACY_COOKED_CHICKEN" => Some(MaterialEnum::LegacyCookedChicken),
            "LEGACY_ROTTEN_FLESH" => Some(MaterialEnum::LegacyRottenFlesh),
            "LEGACY_ENDER_PEARL" => Some(MaterialEnum::LegacyEnderPearl),
            "LEGACY_BLAZE_ROD" => Some(MaterialEnum::LegacyBlazeRod),
            "LEGACY_GHAST_TEAR" => Some(MaterialEnum::LegacyGhastTear),
            "LEGACY_GOLD_NUGGET" => Some(MaterialEnum::LegacyGoldNugget),
            "LEGACY_NETHER_STALK" => Some(MaterialEnum::LegacyNetherStalk),
            "LEGACY_POTION" => Some(MaterialEnum::LegacyPotion),
            "LEGACY_GLASS_BOTTLE" => Some(MaterialEnum::LegacyGlassBottle),
            "LEGACY_SPIDER_EYE" => Some(MaterialEnum::LegacySpiderEye),
            "LEGACY_FERMENTED_SPIDER_EYE" => Some(MaterialEnum::LegacyFermentedSpiderEye),
            "LEGACY_BLAZE_POWDER" => Some(MaterialEnum::LegacyBlazePowder),
            "LEGACY_MAGMA_CREAM" => Some(MaterialEnum::LegacyMagmaCream),
            "LEGACY_BREWING_STAND_ITEM" => Some(MaterialEnum::LegacyBrewingStandItem),
            "LEGACY_CAULDRON_ITEM" => Some(MaterialEnum::LegacyCauldronItem),
            "LEGACY_EYE_OF_ENDER" => Some(MaterialEnum::LegacyEyeOfEnder),
            "LEGACY_SPECKLED_MELON" => Some(MaterialEnum::LegacySpeckledMelon),
            "LEGACY_MONSTER_EGG" => Some(MaterialEnum::LegacyMonsterEgg),
            "LEGACY_EXP_BOTTLE" => Some(MaterialEnum::LegacyExpBottle),
            "LEGACY_FIREBALL" => Some(MaterialEnum::LegacyFireball),
            "LEGACY_BOOK_AND_QUILL" => Some(MaterialEnum::LegacyBookAndQuill),
            "LEGACY_WRITTEN_BOOK" => Some(MaterialEnum::LegacyWrittenBook),
            "LEGACY_EMERALD" => Some(MaterialEnum::LegacyEmerald),
            "LEGACY_ITEM_FRAME" => Some(MaterialEnum::LegacyItemFrame),
            "LEGACY_FLOWER_POT_ITEM" => Some(MaterialEnum::LegacyFlowerPotItem),
            "LEGACY_CARROT_ITEM" => Some(MaterialEnum::LegacyCarrotItem),
            "LEGACY_POTATO_ITEM" => Some(MaterialEnum::LegacyPotatoItem),
            "LEGACY_BAKED_POTATO" => Some(MaterialEnum::LegacyBakedPotato),
            "LEGACY_POISONOUS_POTATO" => Some(MaterialEnum::LegacyPoisonousPotato),
            "LEGACY_EMPTY_MAP" => Some(MaterialEnum::LegacyEmptyMap),
            "LEGACY_GOLDEN_CARROT" => Some(MaterialEnum::LegacyGoldenCarrot),
            "LEGACY_SKULL_ITEM" => Some(MaterialEnum::LegacySkullItem),
            "LEGACY_CARROT_STICK" => Some(MaterialEnum::LegacyCarrotStick),
            "LEGACY_NETHER_STAR" => Some(MaterialEnum::LegacyNetherStar),
            "LEGACY_PUMPKIN_PIE" => Some(MaterialEnum::LegacyPumpkinPie),
            "LEGACY_FIREWORK" => Some(MaterialEnum::LegacyFirework),
            "LEGACY_FIREWORK_CHARGE" => Some(MaterialEnum::LegacyFireworkCharge),
            "LEGACY_ENCHANTED_BOOK" => Some(MaterialEnum::LegacyEnchantedBook),
            "LEGACY_REDSTONE_COMPARATOR" => Some(MaterialEnum::LegacyRedstoneComparator),
            "LEGACY_NETHER_BRICK_ITEM" => Some(MaterialEnum::LegacyNetherBrickItem),
            "LEGACY_QUARTZ" => Some(MaterialEnum::LegacyQuartz),
            "LEGACY_EXPLOSIVE_MINECART" => Some(MaterialEnum::LegacyExplosiveMinecart),
            "LEGACY_HOPPER_MINECART" => Some(MaterialEnum::LegacyHopperMinecart),
            "LEGACY_PRISMARINE_SHARD" => Some(MaterialEnum::LegacyPrismarineShard),
            "LEGACY_PRISMARINE_CRYSTALS" => Some(MaterialEnum::LegacyPrismarineCrystals),
            "LEGACY_RABBIT" => Some(MaterialEnum::LegacyRabbit),
            "LEGACY_COOKED_RABBIT" => Some(MaterialEnum::LegacyCookedRabbit),
            "LEGACY_RABBIT_STEW" => Some(MaterialEnum::LegacyRabbitStew),
            "LEGACY_RABBIT_FOOT" => Some(MaterialEnum::LegacyRabbitFoot),
            "LEGACY_RABBIT_HIDE" => Some(MaterialEnum::LegacyRabbitHide),
            "LEGACY_ARMOR_STAND" => Some(MaterialEnum::LegacyArmorStand),
            "LEGACY_IRON_BARDING" => Some(MaterialEnum::LegacyIronBarding),
            "LEGACY_GOLD_BARDING" => Some(MaterialEnum::LegacyGoldBarding),
            "LEGACY_DIAMOND_BARDING" => Some(MaterialEnum::LegacyDiamondBarding),
            "LEGACY_LEASH" => Some(MaterialEnum::LegacyLeash),
            "LEGACY_NAME_TAG" => Some(MaterialEnum::LegacyNameTag),
            "LEGACY_COMMAND_MINECART" => Some(MaterialEnum::LegacyCommandMinecart),
            "LEGACY_MUTTON" => Some(MaterialEnum::LegacyMutton),
            "LEGACY_COOKED_MUTTON" => Some(MaterialEnum::LegacyCookedMutton),
            "LEGACY_BANNER" => Some(MaterialEnum::LegacyBanner),
            "LEGACY_END_CRYSTAL" => Some(MaterialEnum::LegacyEndCrystal),
            "LEGACY_SPRUCE_DOOR_ITEM" => Some(MaterialEnum::LegacySpruceDoorItem),
            "LEGACY_BIRCH_DOOR_ITEM" => Some(MaterialEnum::LegacyBirchDoorItem),
            "LEGACY_JUNGLE_DOOR_ITEM" => Some(MaterialEnum::LegacyJungleDoorItem),
            "LEGACY_ACACIA_DOOR_ITEM" => Some(MaterialEnum::LegacyAcaciaDoorItem),
            "LEGACY_DARK_OAK_DOOR_ITEM" => Some(MaterialEnum::LegacyDarkOakDoorItem),
            "LEGACY_CHORUS_FRUIT" => Some(MaterialEnum::LegacyChorusFruit),
            "LEGACY_CHORUS_FRUIT_POPPED" => Some(MaterialEnum::LegacyChorusFruitPopped),
            "LEGACY_BEETROOT" => Some(MaterialEnum::LegacyBeetroot),
            "LEGACY_BEETROOT_SEEDS" => Some(MaterialEnum::LegacyBeetrootSeeds),
            "LEGACY_BEETROOT_SOUP" => Some(MaterialEnum::LegacyBeetrootSoup),
            "LEGACY_DRAGONS_BREATH" => Some(MaterialEnum::LegacyDragonsBreath),
            "LEGACY_SPLASH_POTION" => Some(MaterialEnum::LegacySplashPotion),
            "LEGACY_SPECTRAL_ARROW" => Some(MaterialEnum::LegacySpectralArrow),
            "LEGACY_TIPPED_ARROW" => Some(MaterialEnum::LegacyTippedArrow),
            "LEGACY_LINGERING_POTION" => Some(MaterialEnum::LegacyLingeringPotion),
            "LEGACY_SHIELD" => Some(MaterialEnum::LegacyShield),
            "LEGACY_ELYTRA" => Some(MaterialEnum::LegacyElytra),
            "LEGACY_BOAT_SPRUCE" => Some(MaterialEnum::LegacyBoatSpruce),
            "LEGACY_BOAT_BIRCH" => Some(MaterialEnum::LegacyBoatBirch),
            "LEGACY_BOAT_JUNGLE" => Some(MaterialEnum::LegacyBoatJungle),
            "LEGACY_BOAT_ACACIA" => Some(MaterialEnum::LegacyBoatAcacia),
            "LEGACY_BOAT_DARK_OAK" => Some(MaterialEnum::LegacyBoatDarkOak),
            "LEGACY_TOTEM" => Some(MaterialEnum::LegacyTotem),
            "LEGACY_SHULKER_SHELL" => Some(MaterialEnum::LegacyShulkerShell),
            "LEGACY_IRON_NUGGET" => Some(MaterialEnum::LegacyIronNugget),
            "LEGACY_KNOWLEDGE_BOOK" => Some(MaterialEnum::LegacyKnowledgeBook),
            "LEGACY_GOLD_RECORD" => Some(MaterialEnum::LegacyGoldRecord),
            "LEGACY_GREEN_RECORD" => Some(MaterialEnum::LegacyGreenRecord),
            "LEGACY_RECORD_3" => Some(MaterialEnum::LegacyRecord3),
            "LEGACY_RECORD_4" => Some(MaterialEnum::LegacyRecord4),
            "LEGACY_RECORD_5" => Some(MaterialEnum::LegacyRecord5),
            "LEGACY_RECORD_6" => Some(MaterialEnum::LegacyRecord6),
            "LEGACY_RECORD_7" => Some(MaterialEnum::LegacyRecord7),
            "LEGACY_RECORD_8" => Some(MaterialEnum::LegacyRecord8),
            "LEGACY_RECORD_9" => Some(MaterialEnum::LegacyRecord9),
            "LEGACY_RECORD_10" => Some(MaterialEnum::LegacyRecord10),
            "LEGACY_RECORD_11" => Some(MaterialEnum::LegacyRecord11),
            "LEGACY_RECORD_12" => Some(MaterialEnum::LegacyRecord12),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Material<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Material");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Material;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Material::from_raw(
            &jni,
            raw_obj,
            Material::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a registry of Bukkit objects that may be retrieved by <a href="NamespacedKey.html" title="class in org.bukkit"><code>NamespacedKey</code></a>.
///
/// This is a representation of an abstract class.
pub struct Registry<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Registry<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Registry<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Registry from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Registry")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Registry object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Registry<'mc> {
    //

    pub fn get(
        &self,
        arg0: impl Into<crate::NamespacedKey<'mc>>,
    ) -> Result<crate::Keyed<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/NamespacedKey;)Lorg/bukkit/Keyed;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "get",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Keyed::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn get_match(
        &self,
        arg0: impl Into<String>,
    ) -> Result<crate::Keyed<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/String;)Lorg/bukkit/Keyed;");
        let val_1 = jni::objects::JValueGen::Object(jni::objects::JObject::from(
            self.jni_ref().new_string(arg0.into())?,
        ));
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "match",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Keyed::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn iterator(
        &self,
    ) -> Result<blackboxmc_java::JavaIterator<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Iterator;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "iterator", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaIterator::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}
#[derive(PartialEq, Eq)]
pub enum RotationEnum {
    None,
    Clockwise45,
    Clockwise,
    Clockwise135,
    Flipped,
    Flipped45,
    CounterClockwise,
    CounterClockwise45,
}
impl std::fmt::Display for RotationEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            RotationEnum::None => f.write_str("NONE"),
            RotationEnum::Clockwise45 => f.write_str("CLOCKWISE_45"),
            RotationEnum::Clockwise => f.write_str("CLOCKWISE"),
            RotationEnum::Clockwise135 => f.write_str("CLOCKWISE_135"),
            RotationEnum::Flipped => f.write_str("FLIPPED"),
            RotationEnum::Flipped45 => f.write_str("FLIPPED_45"),
            RotationEnum::CounterClockwise => f.write_str("COUNTER_CLOCKWISE"),
            RotationEnum::CounterClockwise45 => f.write_str("COUNTER_CLOCKWISE_45"),
        }
    }
}
impl<'mc> std::fmt::Display for Rotation<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Rotation<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub RotationEnum,
);
impl<'mc> std::ops::Deref for Rotation<'mc> {
    type Target = RotationEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for Rotation<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Rotation<'mc> {
    type Enum = RotationEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Rotation from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Rotation")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Rotation object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Rotation<'mc> {
    pub const NONE: RotationEnum = RotationEnum::None;
    pub const CLOCKWISE_45: RotationEnum = RotationEnum::Clockwise45;
    pub const CLOCKWISE: RotationEnum = RotationEnum::Clockwise;
    pub const CLOCKWISE_135: RotationEnum = RotationEnum::Clockwise135;
    pub const FLIPPED: RotationEnum = RotationEnum::Flipped;
    pub const FLIPPED_45: RotationEnum = RotationEnum::Flipped45;
    pub const COUNTER_CLOCKWISE: RotationEnum = RotationEnum::CounterClockwise;
    pub const COUNTER_CLOCKWISE_45: RotationEnum = RotationEnum::CounterClockwise45;
    pub fn from_string(str: String) -> std::option::Option<RotationEnum> {
        match str.as_str() {
            "NONE" => Some(RotationEnum::None),
            "CLOCKWISE_45" => Some(RotationEnum::Clockwise45),
            "CLOCKWISE" => Some(RotationEnum::Clockwise),
            "CLOCKWISE_135" => Some(RotationEnum::Clockwise135),
            "FLIPPED" => Some(RotationEnum::Flipped),
            "FLIPPED_45" => Some(RotationEnum::Flipped45),
            "COUNTER_CLOCKWISE" => Some(RotationEnum::CounterClockwise),
            "COUNTER_CLOCKWISE_45" => Some(RotationEnum::CounterClockwise45),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Rotation<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Rotation");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Rotation;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Rotation::from_raw(
            &jni,
            raw_obj,
            Rotation::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}

pub struct VibrationDestinationEntityDestination<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for VibrationDestinationEntityDestination<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for VibrationDestinationEntityDestination<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!(
                "Tried to instantiate VibrationDestinationEntityDestination from null object."
            )
            .into());
        }
        let (valid, name) =
            env.validate_name(&obj, "org/bukkit/Vibration$Destination$EntityDestination")?;
        if !valid {
            Err(eyre::eyre!(
                    "Invalid argument passed. Expected a VibrationDestinationEntityDestination object, got {}",
                    name
                )
                .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> VibrationDestinationEntityDestination<'mc> {
    pub fn new(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::entity::Entity<'mc>>,
    ) -> Result<crate::VibrationDestinationEntityDestination<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/entity/Entity;)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/Vibration$Destination$EntityDestination");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.new_object(
            cls,
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error_no_gen(res)?;
        crate::VibrationDestinationEntityDestination::from_raw(&jni, res)
    }
    //

    pub fn entity(&self) -> Result<crate::entity::Entity<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/entity/Entity;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getEntity", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::entity::Entity::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for VibrationDestinationEntityDestination<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!(
                "Error calling VibrationDestinationEntityDestination.toString: {}",
                err
            ),
        }
    }
}

#[derive(PartialEq, Eq)]
pub enum StatisticStatisticEnum {
    DamageDealt,
    DamageTaken,
    Deaths,
    MobKills,
    PlayerKills,
    FishCaught,
    AnimalsBred,
    LeaveGame,
    Jump,
    DropCount,
    Drop,
    Pickup,
    PlayOneMinute,
    TotalWorldTime,
    WalkOneCm,
    WalkOnWaterOneCm,
    FallOneCm,
    SneakTime,
    ClimbOneCm,
    FlyOneCm,
    WalkUnderWaterOneCm,
    MinecartOneCm,
    BoatOneCm,
    PigOneCm,
    HorseOneCm,
    SprintOneCm,
    CrouchOneCm,
    AviateOneCm,
    MineBlock,
    UseItem,
    BreakItem,
    CraftItem,
    KillEntity,
    EntityKilledBy,
    TimeSinceDeath,
    TalkedToVillager,
    TradedWithVillager,
    CakeSlicesEaten,
    CauldronFilled,
    CauldronUsed,
    ArmorCleaned,
    BannerCleaned,
    BrewingstandInteraction,
    BeaconInteraction,
    DropperInspected,
    HopperInspected,
    DispenserInspected,
    NoteblockPlayed,
    NoteblockTuned,
    FlowerPotted,
    TrappedChestTriggered,
    EnderchestOpened,
    ItemEnchanted,
    RecordPlayed,
    FurnaceInteraction,
    CraftingTableInteraction,
    ChestOpened,
    SleepInBed,
    ShulkerBoxOpened,
    TimeSinceRest,
    SwimOneCm,
    DamageDealtAbsorbed,
    DamageDealtResisted,
    DamageBlockedByShield,
    DamageAbsorbed,
    DamageResisted,
    CleanShulkerBox,
    OpenBarrel,
    InteractWithBlastFurnace,
    InteractWithSmoker,
    InteractWithLectern,
    InteractWithCampfire,
    InteractWithCartographyTable,
    InteractWithLoom,
    InteractWithStonecutter,
    BellRing,
    RaidTrigger,
    RaidWin,
    InteractWithAnvil,
    InteractWithGrindstone,
    TargetHit,
    InteractWithSmithingTable,
    StriderOneCm,
}
impl std::fmt::Display for StatisticStatisticEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            StatisticStatisticEnum::DamageDealt => f.write_str("DAMAGE_DEALT"),
            StatisticStatisticEnum::DamageTaken => f.write_str("DAMAGE_TAKEN"),
            StatisticStatisticEnum::Deaths => f.write_str("DEATHS"),
            StatisticStatisticEnum::MobKills => f.write_str("MOB_KILLS"),
            StatisticStatisticEnum::PlayerKills => f.write_str("PLAYER_KILLS"),
            StatisticStatisticEnum::FishCaught => f.write_str("FISH_CAUGHT"),
            StatisticStatisticEnum::AnimalsBred => f.write_str("ANIMALS_BRED"),
            StatisticStatisticEnum::LeaveGame => f.write_str("LEAVE_GAME"),
            StatisticStatisticEnum::Jump => f.write_str("JUMP"),
            StatisticStatisticEnum::DropCount => f.write_str("DROP_COUNT"),
            StatisticStatisticEnum::Drop => f.write_str("DROP"),
            StatisticStatisticEnum::Pickup => f.write_str("PICKUP"),
            StatisticStatisticEnum::PlayOneMinute => f.write_str("PLAY_ONE_MINUTE"),
            StatisticStatisticEnum::TotalWorldTime => f.write_str("TOTAL_WORLD_TIME"),
            StatisticStatisticEnum::WalkOneCm => f.write_str("WALK_ONE_CM"),
            StatisticStatisticEnum::WalkOnWaterOneCm => f.write_str("WALK_ON_WATER_ONE_CM"),
            StatisticStatisticEnum::FallOneCm => f.write_str("FALL_ONE_CM"),
            StatisticStatisticEnum::SneakTime => f.write_str("SNEAK_TIME"),
            StatisticStatisticEnum::ClimbOneCm => f.write_str("CLIMB_ONE_CM"),
            StatisticStatisticEnum::FlyOneCm => f.write_str("FLY_ONE_CM"),
            StatisticStatisticEnum::WalkUnderWaterOneCm => f.write_str("WALK_UNDER_WATER_ONE_CM"),
            StatisticStatisticEnum::MinecartOneCm => f.write_str("MINECART_ONE_CM"),
            StatisticStatisticEnum::BoatOneCm => f.write_str("BOAT_ONE_CM"),
            StatisticStatisticEnum::PigOneCm => f.write_str("PIG_ONE_CM"),
            StatisticStatisticEnum::HorseOneCm => f.write_str("HORSE_ONE_CM"),
            StatisticStatisticEnum::SprintOneCm => f.write_str("SPRINT_ONE_CM"),
            StatisticStatisticEnum::CrouchOneCm => f.write_str("CROUCH_ONE_CM"),
            StatisticStatisticEnum::AviateOneCm => f.write_str("AVIATE_ONE_CM"),
            StatisticStatisticEnum::MineBlock => f.write_str("MINE_BLOCK"),
            StatisticStatisticEnum::UseItem => f.write_str("USE_ITEM"),
            StatisticStatisticEnum::BreakItem => f.write_str("BREAK_ITEM"),
            StatisticStatisticEnum::CraftItem => f.write_str("CRAFT_ITEM"),
            StatisticStatisticEnum::KillEntity => f.write_str("KILL_ENTITY"),
            StatisticStatisticEnum::EntityKilledBy => f.write_str("ENTITY_KILLED_BY"),
            StatisticStatisticEnum::TimeSinceDeath => f.write_str("TIME_SINCE_DEATH"),
            StatisticStatisticEnum::TalkedToVillager => f.write_str("TALKED_TO_VILLAGER"),
            StatisticStatisticEnum::TradedWithVillager => f.write_str("TRADED_WITH_VILLAGER"),
            StatisticStatisticEnum::CakeSlicesEaten => f.write_str("CAKE_SLICES_EATEN"),
            StatisticStatisticEnum::CauldronFilled => f.write_str("CAULDRON_FILLED"),
            StatisticStatisticEnum::CauldronUsed => f.write_str("CAULDRON_USED"),
            StatisticStatisticEnum::ArmorCleaned => f.write_str("ARMOR_CLEANED"),
            StatisticStatisticEnum::BannerCleaned => f.write_str("BANNER_CLEANED"),
            StatisticStatisticEnum::BrewingstandInteraction => {
                f.write_str("BREWINGSTAND_INTERACTION")
            }
            StatisticStatisticEnum::BeaconInteraction => f.write_str("BEACON_INTERACTION"),
            StatisticStatisticEnum::DropperInspected => f.write_str("DROPPER_INSPECTED"),
            StatisticStatisticEnum::HopperInspected => f.write_str("HOPPER_INSPECTED"),
            StatisticStatisticEnum::DispenserInspected => f.write_str("DISPENSER_INSPECTED"),
            StatisticStatisticEnum::NoteblockPlayed => f.write_str("NOTEBLOCK_PLAYED"),
            StatisticStatisticEnum::NoteblockTuned => f.write_str("NOTEBLOCK_TUNED"),
            StatisticStatisticEnum::FlowerPotted => f.write_str("FLOWER_POTTED"),
            StatisticStatisticEnum::TrappedChestTriggered => f.write_str("TRAPPED_CHEST_TRIGGERED"),
            StatisticStatisticEnum::EnderchestOpened => f.write_str("ENDERCHEST_OPENED"),
            StatisticStatisticEnum::ItemEnchanted => f.write_str("ITEM_ENCHANTED"),
            StatisticStatisticEnum::RecordPlayed => f.write_str("RECORD_PLAYED"),
            StatisticStatisticEnum::FurnaceInteraction => f.write_str("FURNACE_INTERACTION"),
            StatisticStatisticEnum::CraftingTableInteraction => {
                f.write_str("CRAFTING_TABLE_INTERACTION")
            }
            StatisticStatisticEnum::ChestOpened => f.write_str("CHEST_OPENED"),
            StatisticStatisticEnum::SleepInBed => f.write_str("SLEEP_IN_BED"),
            StatisticStatisticEnum::ShulkerBoxOpened => f.write_str("SHULKER_BOX_OPENED"),
            StatisticStatisticEnum::TimeSinceRest => f.write_str("TIME_SINCE_REST"),
            StatisticStatisticEnum::SwimOneCm => f.write_str("SWIM_ONE_CM"),
            StatisticStatisticEnum::DamageDealtAbsorbed => f.write_str("DAMAGE_DEALT_ABSORBED"),
            StatisticStatisticEnum::DamageDealtResisted => f.write_str("DAMAGE_DEALT_RESISTED"),
            StatisticStatisticEnum::DamageBlockedByShield => {
                f.write_str("DAMAGE_BLOCKED_BY_SHIELD")
            }
            StatisticStatisticEnum::DamageAbsorbed => f.write_str("DAMAGE_ABSORBED"),
            StatisticStatisticEnum::DamageResisted => f.write_str("DAMAGE_RESISTED"),
            StatisticStatisticEnum::CleanShulkerBox => f.write_str("CLEAN_SHULKER_BOX"),
            StatisticStatisticEnum::OpenBarrel => f.write_str("OPEN_BARREL"),
            StatisticStatisticEnum::InteractWithBlastFurnace => {
                f.write_str("INTERACT_WITH_BLAST_FURNACE")
            }
            StatisticStatisticEnum::InteractWithSmoker => f.write_str("INTERACT_WITH_SMOKER"),
            StatisticStatisticEnum::InteractWithLectern => f.write_str("INTERACT_WITH_LECTERN"),
            StatisticStatisticEnum::InteractWithCampfire => f.write_str("INTERACT_WITH_CAMPFIRE"),
            StatisticStatisticEnum::InteractWithCartographyTable => {
                f.write_str("INTERACT_WITH_CARTOGRAPHY_TABLE")
            }
            StatisticStatisticEnum::InteractWithLoom => f.write_str("INTERACT_WITH_LOOM"),
            StatisticStatisticEnum::InteractWithStonecutter => {
                f.write_str("INTERACT_WITH_STONECUTTER")
            }
            StatisticStatisticEnum::BellRing => f.write_str("BELL_RING"),
            StatisticStatisticEnum::RaidTrigger => f.write_str("RAID_TRIGGER"),
            StatisticStatisticEnum::RaidWin => f.write_str("RAID_WIN"),
            StatisticStatisticEnum::InteractWithAnvil => f.write_str("INTERACT_WITH_ANVIL"),
            StatisticStatisticEnum::InteractWithGrindstone => {
                f.write_str("INTERACT_WITH_GRINDSTONE")
            }
            StatisticStatisticEnum::TargetHit => f.write_str("TARGET_HIT"),
            StatisticStatisticEnum::InteractWithSmithingTable => {
                f.write_str("INTERACT_WITH_SMITHING_TABLE")
            }
            StatisticStatisticEnum::StriderOneCm => f.write_str("STRIDER_ONE_CM"),
        }
    }
}
impl<'mc> std::fmt::Display for StatisticStatistic<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct StatisticStatistic<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub StatisticStatisticEnum,
);
impl<'mc> std::ops::Deref for StatisticStatistic<'mc> {
    type Target = StatisticStatisticEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for StatisticStatistic<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for StatisticStatistic<'mc> {
    type Enum = StatisticStatisticEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate StatisticStatistic from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Statistic$Statistic")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a StatisticStatistic object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> StatisticStatistic<'mc> {
    pub const DAMAGE_DEALT: StatisticStatisticEnum = StatisticStatisticEnum::DamageDealt;
    pub const DAMAGE_TAKEN: StatisticStatisticEnum = StatisticStatisticEnum::DamageTaken;
    pub const DEATHS: StatisticStatisticEnum = StatisticStatisticEnum::Deaths;
    pub const MOB_KILLS: StatisticStatisticEnum = StatisticStatisticEnum::MobKills;
    pub const PLAYER_KILLS: StatisticStatisticEnum = StatisticStatisticEnum::PlayerKills;
    pub const FISH_CAUGHT: StatisticStatisticEnum = StatisticStatisticEnum::FishCaught;
    pub const ANIMALS_BRED: StatisticStatisticEnum = StatisticStatisticEnum::AnimalsBred;
    pub const LEAVE_GAME: StatisticStatisticEnum = StatisticStatisticEnum::LeaveGame;
    pub const JUMP: StatisticStatisticEnum = StatisticStatisticEnum::Jump;
    pub const DROP_COUNT: StatisticStatisticEnum = StatisticStatisticEnum::DropCount;
    pub const DROP: StatisticStatisticEnum = StatisticStatisticEnum::Drop;
    pub const PICKUP: StatisticStatisticEnum = StatisticStatisticEnum::Pickup;
    pub const PLAY_ONE_MINUTE: StatisticStatisticEnum = StatisticStatisticEnum::PlayOneMinute;
    pub const TOTAL_WORLD_TIME: StatisticStatisticEnum = StatisticStatisticEnum::TotalWorldTime;
    pub const WALK_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::WalkOneCm;
    pub const WALK_ON_WATER_ONE_CM: StatisticStatisticEnum =
        StatisticStatisticEnum::WalkOnWaterOneCm;
    pub const FALL_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::FallOneCm;
    pub const SNEAK_TIME: StatisticStatisticEnum = StatisticStatisticEnum::SneakTime;
    pub const CLIMB_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::ClimbOneCm;
    pub const FLY_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::FlyOneCm;
    pub const WALK_UNDER_WATER_ONE_CM: StatisticStatisticEnum =
        StatisticStatisticEnum::WalkUnderWaterOneCm;
    pub const MINECART_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::MinecartOneCm;
    pub const BOAT_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::BoatOneCm;
    pub const PIG_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::PigOneCm;
    pub const HORSE_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::HorseOneCm;
    pub const SPRINT_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::SprintOneCm;
    pub const CROUCH_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::CrouchOneCm;
    pub const AVIATE_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::AviateOneCm;
    pub const MINE_BLOCK: StatisticStatisticEnum = StatisticStatisticEnum::MineBlock;
    pub const USE_ITEM: StatisticStatisticEnum = StatisticStatisticEnum::UseItem;
    pub const BREAK_ITEM: StatisticStatisticEnum = StatisticStatisticEnum::BreakItem;
    pub const CRAFT_ITEM: StatisticStatisticEnum = StatisticStatisticEnum::CraftItem;
    pub const KILL_ENTITY: StatisticStatisticEnum = StatisticStatisticEnum::KillEntity;
    pub const ENTITY_KILLED_BY: StatisticStatisticEnum = StatisticStatisticEnum::EntityKilledBy;
    pub const TIME_SINCE_DEATH: StatisticStatisticEnum = StatisticStatisticEnum::TimeSinceDeath;
    pub const TALKED_TO_VILLAGER: StatisticStatisticEnum = StatisticStatisticEnum::TalkedToVillager;
    pub const TRADED_WITH_VILLAGER: StatisticStatisticEnum =
        StatisticStatisticEnum::TradedWithVillager;
    pub const CAKE_SLICES_EATEN: StatisticStatisticEnum = StatisticStatisticEnum::CakeSlicesEaten;
    pub const CAULDRON_FILLED: StatisticStatisticEnum = StatisticStatisticEnum::CauldronFilled;
    pub const CAULDRON_USED: StatisticStatisticEnum = StatisticStatisticEnum::CauldronUsed;
    pub const ARMOR_CLEANED: StatisticStatisticEnum = StatisticStatisticEnum::ArmorCleaned;
    pub const BANNER_CLEANED: StatisticStatisticEnum = StatisticStatisticEnum::BannerCleaned;
    pub const BREWINGSTAND_INTERACTION: StatisticStatisticEnum =
        StatisticStatisticEnum::BrewingstandInteraction;
    pub const BEACON_INTERACTION: StatisticStatisticEnum =
        StatisticStatisticEnum::BeaconInteraction;
    pub const DROPPER_INSPECTED: StatisticStatisticEnum = StatisticStatisticEnum::DropperInspected;
    pub const HOPPER_INSPECTED: StatisticStatisticEnum = StatisticStatisticEnum::HopperInspected;
    pub const DISPENSER_INSPECTED: StatisticStatisticEnum =
        StatisticStatisticEnum::DispenserInspected;
    pub const NOTEBLOCK_PLAYED: StatisticStatisticEnum = StatisticStatisticEnum::NoteblockPlayed;
    pub const NOTEBLOCK_TUNED: StatisticStatisticEnum = StatisticStatisticEnum::NoteblockTuned;
    pub const FLOWER_POTTED: StatisticStatisticEnum = StatisticStatisticEnum::FlowerPotted;
    pub const TRAPPED_CHEST_TRIGGERED: StatisticStatisticEnum =
        StatisticStatisticEnum::TrappedChestTriggered;
    pub const ENDERCHEST_OPENED: StatisticStatisticEnum = StatisticStatisticEnum::EnderchestOpened;
    pub const ITEM_ENCHANTED: StatisticStatisticEnum = StatisticStatisticEnum::ItemEnchanted;
    pub const RECORD_PLAYED: StatisticStatisticEnum = StatisticStatisticEnum::RecordPlayed;
    pub const FURNACE_INTERACTION: StatisticStatisticEnum =
        StatisticStatisticEnum::FurnaceInteraction;
    pub const CRAFTING_TABLE_INTERACTION: StatisticStatisticEnum =
        StatisticStatisticEnum::CraftingTableInteraction;
    pub const CHEST_OPENED: StatisticStatisticEnum = StatisticStatisticEnum::ChestOpened;
    pub const SLEEP_IN_BED: StatisticStatisticEnum = StatisticStatisticEnum::SleepInBed;
    pub const SHULKER_BOX_OPENED: StatisticStatisticEnum = StatisticStatisticEnum::ShulkerBoxOpened;
    pub const TIME_SINCE_REST: StatisticStatisticEnum = StatisticStatisticEnum::TimeSinceRest;
    pub const SWIM_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::SwimOneCm;
    pub const DAMAGE_DEALT_ABSORBED: StatisticStatisticEnum =
        StatisticStatisticEnum::DamageDealtAbsorbed;
    pub const DAMAGE_DEALT_RESISTED: StatisticStatisticEnum =
        StatisticStatisticEnum::DamageDealtResisted;
    pub const DAMAGE_BLOCKED_BY_SHIELD: StatisticStatisticEnum =
        StatisticStatisticEnum::DamageBlockedByShield;
    pub const DAMAGE_ABSORBED: StatisticStatisticEnum = StatisticStatisticEnum::DamageAbsorbed;
    pub const DAMAGE_RESISTED: StatisticStatisticEnum = StatisticStatisticEnum::DamageResisted;
    pub const CLEAN_SHULKER_BOX: StatisticStatisticEnum = StatisticStatisticEnum::CleanShulkerBox;
    pub const OPEN_BARREL: StatisticStatisticEnum = StatisticStatisticEnum::OpenBarrel;
    pub const INTERACT_WITH_BLAST_FURNACE: StatisticStatisticEnum =
        StatisticStatisticEnum::InteractWithBlastFurnace;
    pub const INTERACT_WITH_SMOKER: StatisticStatisticEnum =
        StatisticStatisticEnum::InteractWithSmoker;
    pub const INTERACT_WITH_LECTERN: StatisticStatisticEnum =
        StatisticStatisticEnum::InteractWithLectern;
    pub const INTERACT_WITH_CAMPFIRE: StatisticStatisticEnum =
        StatisticStatisticEnum::InteractWithCampfire;
    pub const INTERACT_WITH_CARTOGRAPHY_TABLE: StatisticStatisticEnum =
        StatisticStatisticEnum::InteractWithCartographyTable;
    pub const INTERACT_WITH_LOOM: StatisticStatisticEnum = StatisticStatisticEnum::InteractWithLoom;
    pub const INTERACT_WITH_STONECUTTER: StatisticStatisticEnum =
        StatisticStatisticEnum::InteractWithStonecutter;
    pub const BELL_RING: StatisticStatisticEnum = StatisticStatisticEnum::BellRing;
    pub const RAID_TRIGGER: StatisticStatisticEnum = StatisticStatisticEnum::RaidTrigger;
    pub const RAID_WIN: StatisticStatisticEnum = StatisticStatisticEnum::RaidWin;
    pub const INTERACT_WITH_ANVIL: StatisticStatisticEnum =
        StatisticStatisticEnum::InteractWithAnvil;
    pub const INTERACT_WITH_GRINDSTONE: StatisticStatisticEnum =
        StatisticStatisticEnum::InteractWithGrindstone;
    pub const TARGET_HIT: StatisticStatisticEnum = StatisticStatisticEnum::TargetHit;
    pub const INTERACT_WITH_SMITHING_TABLE: StatisticStatisticEnum =
        StatisticStatisticEnum::InteractWithSmithingTable;
    pub const STRIDER_ONE_CM: StatisticStatisticEnum = StatisticStatisticEnum::StriderOneCm;
    pub fn from_string(str: String) -> std::option::Option<StatisticStatisticEnum> {
        match str.as_str() {
            "DAMAGE_DEALT" => Some(StatisticStatisticEnum::DamageDealt),
            "DAMAGE_TAKEN" => Some(StatisticStatisticEnum::DamageTaken),
            "DEATHS" => Some(StatisticStatisticEnum::Deaths),
            "MOB_KILLS" => Some(StatisticStatisticEnum::MobKills),
            "PLAYER_KILLS" => Some(StatisticStatisticEnum::PlayerKills),
            "FISH_CAUGHT" => Some(StatisticStatisticEnum::FishCaught),
            "ANIMALS_BRED" => Some(StatisticStatisticEnum::AnimalsBred),
            "LEAVE_GAME" => Some(StatisticStatisticEnum::LeaveGame),
            "JUMP" => Some(StatisticStatisticEnum::Jump),
            "DROP_COUNT" => Some(StatisticStatisticEnum::DropCount),
            "DROP" => Some(StatisticStatisticEnum::Drop),
            "PICKUP" => Some(StatisticStatisticEnum::Pickup),
            "PLAY_ONE_MINUTE" => Some(StatisticStatisticEnum::PlayOneMinute),
            "TOTAL_WORLD_TIME" => Some(StatisticStatisticEnum::TotalWorldTime),
            "WALK_ONE_CM" => Some(StatisticStatisticEnum::WalkOneCm),
            "WALK_ON_WATER_ONE_CM" => Some(StatisticStatisticEnum::WalkOnWaterOneCm),
            "FALL_ONE_CM" => Some(StatisticStatisticEnum::FallOneCm),
            "SNEAK_TIME" => Some(StatisticStatisticEnum::SneakTime),
            "CLIMB_ONE_CM" => Some(StatisticStatisticEnum::ClimbOneCm),
            "FLY_ONE_CM" => Some(StatisticStatisticEnum::FlyOneCm),
            "WALK_UNDER_WATER_ONE_CM" => Some(StatisticStatisticEnum::WalkUnderWaterOneCm),
            "MINECART_ONE_CM" => Some(StatisticStatisticEnum::MinecartOneCm),
            "BOAT_ONE_CM" => Some(StatisticStatisticEnum::BoatOneCm),
            "PIG_ONE_CM" => Some(StatisticStatisticEnum::PigOneCm),
            "HORSE_ONE_CM" => Some(StatisticStatisticEnum::HorseOneCm),
            "SPRINT_ONE_CM" => Some(StatisticStatisticEnum::SprintOneCm),
            "CROUCH_ONE_CM" => Some(StatisticStatisticEnum::CrouchOneCm),
            "AVIATE_ONE_CM" => Some(StatisticStatisticEnum::AviateOneCm),
            "MINE_BLOCK" => Some(StatisticStatisticEnum::MineBlock),
            "USE_ITEM" => Some(StatisticStatisticEnum::UseItem),
            "BREAK_ITEM" => Some(StatisticStatisticEnum::BreakItem),
            "CRAFT_ITEM" => Some(StatisticStatisticEnum::CraftItem),
            "KILL_ENTITY" => Some(StatisticStatisticEnum::KillEntity),
            "ENTITY_KILLED_BY" => Some(StatisticStatisticEnum::EntityKilledBy),
            "TIME_SINCE_DEATH" => Some(StatisticStatisticEnum::TimeSinceDeath),
            "TALKED_TO_VILLAGER" => Some(StatisticStatisticEnum::TalkedToVillager),
            "TRADED_WITH_VILLAGER" => Some(StatisticStatisticEnum::TradedWithVillager),
            "CAKE_SLICES_EATEN" => Some(StatisticStatisticEnum::CakeSlicesEaten),
            "CAULDRON_FILLED" => Some(StatisticStatisticEnum::CauldronFilled),
            "CAULDRON_USED" => Some(StatisticStatisticEnum::CauldronUsed),
            "ARMOR_CLEANED" => Some(StatisticStatisticEnum::ArmorCleaned),
            "BANNER_CLEANED" => Some(StatisticStatisticEnum::BannerCleaned),
            "BREWINGSTAND_INTERACTION" => Some(StatisticStatisticEnum::BrewingstandInteraction),
            "BEACON_INTERACTION" => Some(StatisticStatisticEnum::BeaconInteraction),
            "DROPPER_INSPECTED" => Some(StatisticStatisticEnum::DropperInspected),
            "HOPPER_INSPECTED" => Some(StatisticStatisticEnum::HopperInspected),
            "DISPENSER_INSPECTED" => Some(StatisticStatisticEnum::DispenserInspected),
            "NOTEBLOCK_PLAYED" => Some(StatisticStatisticEnum::NoteblockPlayed),
            "NOTEBLOCK_TUNED" => Some(StatisticStatisticEnum::NoteblockTuned),
            "FLOWER_POTTED" => Some(StatisticStatisticEnum::FlowerPotted),
            "TRAPPED_CHEST_TRIGGERED" => Some(StatisticStatisticEnum::TrappedChestTriggered),
            "ENDERCHEST_OPENED" => Some(StatisticStatisticEnum::EnderchestOpened),
            "ITEM_ENCHANTED" => Some(StatisticStatisticEnum::ItemEnchanted),
            "RECORD_PLAYED" => Some(StatisticStatisticEnum::RecordPlayed),
            "FURNACE_INTERACTION" => Some(StatisticStatisticEnum::FurnaceInteraction),
            "CRAFTING_TABLE_INTERACTION" => Some(StatisticStatisticEnum::CraftingTableInteraction),
            "CHEST_OPENED" => Some(StatisticStatisticEnum::ChestOpened),
            "SLEEP_IN_BED" => Some(StatisticStatisticEnum::SleepInBed),
            "SHULKER_BOX_OPENED" => Some(StatisticStatisticEnum::ShulkerBoxOpened),
            "TIME_SINCE_REST" => Some(StatisticStatisticEnum::TimeSinceRest),
            "SWIM_ONE_CM" => Some(StatisticStatisticEnum::SwimOneCm),
            "DAMAGE_DEALT_ABSORBED" => Some(StatisticStatisticEnum::DamageDealtAbsorbed),
            "DAMAGE_DEALT_RESISTED" => Some(StatisticStatisticEnum::DamageDealtResisted),
            "DAMAGE_BLOCKED_BY_SHIELD" => Some(StatisticStatisticEnum::DamageBlockedByShield),
            "DAMAGE_ABSORBED" => Some(StatisticStatisticEnum::DamageAbsorbed),
            "DAMAGE_RESISTED" => Some(StatisticStatisticEnum::DamageResisted),
            "CLEAN_SHULKER_BOX" => Some(StatisticStatisticEnum::CleanShulkerBox),
            "OPEN_BARREL" => Some(StatisticStatisticEnum::OpenBarrel),
            "INTERACT_WITH_BLAST_FURNACE" => Some(StatisticStatisticEnum::InteractWithBlastFurnace),
            "INTERACT_WITH_SMOKER" => Some(StatisticStatisticEnum::InteractWithSmoker),
            "INTERACT_WITH_LECTERN" => Some(StatisticStatisticEnum::InteractWithLectern),
            "INTERACT_WITH_CAMPFIRE" => Some(StatisticStatisticEnum::InteractWithCampfire),
            "INTERACT_WITH_CARTOGRAPHY_TABLE" => {
                Some(StatisticStatisticEnum::InteractWithCartographyTable)
            }
            "INTERACT_WITH_LOOM" => Some(StatisticStatisticEnum::InteractWithLoom),
            "INTERACT_WITH_STONECUTTER" => Some(StatisticStatisticEnum::InteractWithStonecutter),
            "BELL_RING" => Some(StatisticStatisticEnum::BellRing),
            "RAID_TRIGGER" => Some(StatisticStatisticEnum::RaidTrigger),
            "RAID_WIN" => Some(StatisticStatisticEnum::RaidWin),
            "INTERACT_WITH_ANVIL" => Some(StatisticStatisticEnum::InteractWithAnvil),
            "INTERACT_WITH_GRINDSTONE" => Some(StatisticStatisticEnum::InteractWithGrindstone),
            "TARGET_HIT" => Some(StatisticStatisticEnum::TargetHit),
            "INTERACT_WITH_SMITHING_TABLE" => {
                Some(StatisticStatisticEnum::InteractWithSmithingTable)
            }
            "STRIDER_ONE_CM" => Some(StatisticStatisticEnum::StriderOneCm),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<StatisticStatistic<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Statistic$Statistic");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Statistic$Statistic;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        StatisticStatistic::from_raw(
            &jni,
            raw_obj,
            StatisticStatistic::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Annotation for types, whose nullability is not well defined, so <a class="external-link" href="https://javadoc.io/doc/org.jetbrains/annotations-java5/24.0.1/org/jetbrains/annotations/NotNull.html" title="class or interface in org.jetbrains.annotations"><code>NotNull</code></a> nor <a title="class or interface in org.jetbrains.annotations" href="https://javadoc.io/doc/org.jetbrains/annotations-java5/24.0.1/org/jetbrains/annotations/Nullable.html" class="external-link"><code>Nullable</code></a> is applicable. For example when interface defines a method, whose nullability depends on the implementation.
///
/// This is a representation of an abstract class.
pub struct UndefinedNullability<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for UndefinedNullability<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for UndefinedNullability<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate UndefinedNullability from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/UndefinedNullability")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a UndefinedNullability object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> UndefinedNullability<'mc> {
    //

    pub fn value(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "value", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn annotation_type(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "annotationType", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
}

impl<'mc> std::string::ToString for UndefinedNullability<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling UndefinedNullability.toString: {}", err),
        }
    }
}

#[derive(PartialEq, Eq)]
pub enum CoalTypeEnum {
    Coal,
    Charcoal,
}
impl std::fmt::Display for CoalTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            CoalTypeEnum::Coal => f.write_str("COAL"),
            CoalTypeEnum::Charcoal => f.write_str("CHARCOAL"),
        }
    }
}
impl<'mc> std::fmt::Display for CoalType<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct CoalType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub CoalTypeEnum,
);
impl<'mc> std::ops::Deref for CoalType<'mc> {
    type Target = CoalTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for CoalType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for CoalType<'mc> {
    type Enum = CoalTypeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate CoalType from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/CoalType")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a CoalType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> CoalType<'mc> {
    pub const COAL: CoalTypeEnum = CoalTypeEnum::Coal;
    pub const CHARCOAL: CoalTypeEnum = CoalTypeEnum::Charcoal;
    pub fn from_string(str: String) -> std::option::Option<CoalTypeEnum> {
        match str.as_str() {
            "COAL" => Some(CoalTypeEnum::Coal),
            "CHARCOAL" => Some(CoalTypeEnum::Charcoal),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<CoalType<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/CoalType");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/CoalType;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        CoalType::from_raw(
            &jni,
            raw_obj,
            CoalType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
#[derive(PartialEq, Eq)]
pub enum MaterialMaterialEnum {
    Air,
    Stone,
    Granite,
    PolishedGranite,
    Diorite,
    PolishedDiorite,
    Andesite,
    PolishedAndesite,
    Deepslate,
    CobbledDeepslate,
    PolishedDeepslate,
    Calcite,
    Tuff,
    DripstoneBlock,
    GrassBlock,
    Dirt,
    CoarseDirt,
    Podzol,
    RootedDirt,
    Mud,
    CrimsonNylium,
    WarpedNylium,
    Cobblestone,
    OakPlanks,
    SprucePlanks,
    BirchPlanks,
    JunglePlanks,
    AcaciaPlanks,
    CherryPlanks,
    DarkOakPlanks,
    MangrovePlanks,
    BambooPlanks,
    CrimsonPlanks,
    WarpedPlanks,
    BambooMosaic,
    OakSapling,
    SpruceSapling,
    BirchSapling,
    JungleSapling,
    AcaciaSapling,
    CherrySapling,
    DarkOakSapling,
    MangrovePropagule,
    Bedrock,
    Sand,
    SuspiciousSand,
    SuspiciousGravel,
    RedSand,
    Gravel,
    CoalOre,
    DeepslateCoalOre,
    IronOre,
    DeepslateIronOre,
    CopperOre,
    DeepslateCopperOre,
    GoldOre,
    DeepslateGoldOre,
    RedstoneOre,
    DeepslateRedstoneOre,
    EmeraldOre,
    DeepslateEmeraldOre,
    LapisOre,
    DeepslateLapisOre,
    DiamondOre,
    DeepslateDiamondOre,
    NetherGoldOre,
    NetherQuartzOre,
    AncientDebris,
    CoalBlock,
    RawIronBlock,
    RawCopperBlock,
    RawGoldBlock,
    AmethystBlock,
    BuddingAmethyst,
    IronBlock,
    CopperBlock,
    GoldBlock,
    DiamondBlock,
    NetheriteBlock,
    ExposedCopper,
    WeatheredCopper,
    OxidizedCopper,
    CutCopper,
    ExposedCutCopper,
    WeatheredCutCopper,
    OxidizedCutCopper,
    CutCopperStairs,
    ExposedCutCopperStairs,
    WeatheredCutCopperStairs,
    OxidizedCutCopperStairs,
    CutCopperSlab,
    ExposedCutCopperSlab,
    WeatheredCutCopperSlab,
    OxidizedCutCopperSlab,
    WaxedCopperBlock,
    WaxedExposedCopper,
    WaxedWeatheredCopper,
    WaxedOxidizedCopper,
    WaxedCutCopper,
    WaxedExposedCutCopper,
    WaxedWeatheredCutCopper,
    WaxedOxidizedCutCopper,
    WaxedCutCopperStairs,
    WaxedExposedCutCopperStairs,
    WaxedWeatheredCutCopperStairs,
    WaxedOxidizedCutCopperStairs,
    WaxedCutCopperSlab,
    WaxedExposedCutCopperSlab,
    WaxedWeatheredCutCopperSlab,
    WaxedOxidizedCutCopperSlab,
    OakLog,
    SpruceLog,
    BirchLog,
    JungleLog,
    AcaciaLog,
    CherryLog,
    DarkOakLog,
    MangroveLog,
    MangroveRoots,
    MuddyMangroveRoots,
    CrimsonStem,
    WarpedStem,
    BambooBlock,
    StrippedOakLog,
    StrippedSpruceLog,
    StrippedBirchLog,
    StrippedJungleLog,
    StrippedAcaciaLog,
    StrippedCherryLog,
    StrippedDarkOakLog,
    StrippedMangroveLog,
    StrippedCrimsonStem,
    StrippedWarpedStem,
    StrippedOakWood,
    StrippedSpruceWood,
    StrippedBirchWood,
    StrippedJungleWood,
    StrippedAcaciaWood,
    StrippedCherryWood,
    StrippedDarkOakWood,
    StrippedMangroveWood,
    StrippedCrimsonHyphae,
    StrippedWarpedHyphae,
    StrippedBambooBlock,
    OakWood,
    SpruceWood,
    BirchWood,
    JungleWood,
    AcaciaWood,
    CherryWood,
    DarkOakWood,
    MangroveWood,
    CrimsonHyphae,
    WarpedHyphae,
    OakLeaves,
    SpruceLeaves,
    BirchLeaves,
    JungleLeaves,
    AcaciaLeaves,
    CherryLeaves,
    DarkOakLeaves,
    MangroveLeaves,
    AzaleaLeaves,
    FloweringAzaleaLeaves,
    Sponge,
    WetSponge,
    Glass,
    TintedGlass,
    LapisBlock,
    Sandstone,
    ChiseledSandstone,
    CutSandstone,
    Cobweb,
    Grass,
    Fern,
    Azalea,
    FloweringAzalea,
    DeadBush,
    Seagrass,
    SeaPickle,
    WhiteWool,
    OrangeWool,
    MagentaWool,
    LightBlueWool,
    YellowWool,
    LimeWool,
    PinkWool,
    GrayWool,
    LightGrayWool,
    CyanWool,
    PurpleWool,
    BlueWool,
    BrownWool,
    GreenWool,
    RedWool,
    BlackWool,
    Dandelion,
    Poppy,
    BlueOrchid,
    Allium,
    AzureBluet,
    RedTulip,
    OrangeTulip,
    WhiteTulip,
    PinkTulip,
    OxeyeDaisy,
    Cornflower,
    LilyOfTheValley,
    WitherRose,
    Torchflower,
    PitcherPlant,
    SporeBlossom,
    BrownMushroom,
    RedMushroom,
    CrimsonFungus,
    WarpedFungus,
    CrimsonRoots,
    WarpedRoots,
    NetherSprouts,
    WeepingVines,
    TwistingVines,
    SugarCane,
    Kelp,
    MossCarpet,
    PinkPetals,
    MossBlock,
    HangingRoots,
    BigDripleaf,
    SmallDripleaf,
    Bamboo,
    OakSlab,
    SpruceSlab,
    BirchSlab,
    JungleSlab,
    AcaciaSlab,
    CherrySlab,
    DarkOakSlab,
    MangroveSlab,
    BambooSlab,
    BambooMosaicSlab,
    CrimsonSlab,
    WarpedSlab,
    StoneSlab,
    SmoothStoneSlab,
    SandstoneSlab,
    CutSandstoneSlab,
    PetrifiedOakSlab,
    CobblestoneSlab,
    BrickSlab,
    StoneBrickSlab,
    MudBrickSlab,
    NetherBrickSlab,
    QuartzSlab,
    RedSandstoneSlab,
    CutRedSandstoneSlab,
    PurpurSlab,
    PrismarineSlab,
    PrismarineBrickSlab,
    DarkPrismarineSlab,
    SmoothQuartz,
    SmoothRedSandstone,
    SmoothSandstone,
    SmoothStone,
    Bricks,
    Bookshelf,
    ChiseledBookshelf,
    DecoratedPot,
    MossyCobblestone,
    Obsidian,
    Torch,
    EndRod,
    ChorusPlant,
    ChorusFlower,
    PurpurBlock,
    PurpurPillar,
    PurpurStairs,
    Spawner,
    Chest,
    CraftingTable,
    Farmland,
    Furnace,
    Ladder,
    CobblestoneStairs,
    Snow,
    Ice,
    SnowBlock,
    Cactus,
    Clay,
    Jukebox,
    OakFence,
    SpruceFence,
    BirchFence,
    JungleFence,
    AcaciaFence,
    CherryFence,
    DarkOakFence,
    MangroveFence,
    BambooFence,
    CrimsonFence,
    WarpedFence,
    Pumpkin,
    CarvedPumpkin,
    JackOLantern,
    Netherrack,
    SoulSand,
    SoulSoil,
    Basalt,
    PolishedBasalt,
    SmoothBasalt,
    SoulTorch,
    Glowstone,
    InfestedStone,
    InfestedCobblestone,
    InfestedStoneBricks,
    InfestedMossyStoneBricks,
    InfestedCrackedStoneBricks,
    InfestedChiseledStoneBricks,
    InfestedDeepslate,
    StoneBricks,
    MossyStoneBricks,
    CrackedStoneBricks,
    ChiseledStoneBricks,
    PackedMud,
    MudBricks,
    DeepslateBricks,
    CrackedDeepslateBricks,
    DeepslateTiles,
    CrackedDeepslateTiles,
    ChiseledDeepslate,
    ReinforcedDeepslate,
    BrownMushroomBlock,
    RedMushroomBlock,
    MushroomStem,
    IronBars,
    Chain,
    GlassPane,
    Melon,
    Vine,
    GlowLichen,
    BrickStairs,
    StoneBrickStairs,
    MudBrickStairs,
    Mycelium,
    LilyPad,
    NetherBricks,
    CrackedNetherBricks,
    ChiseledNetherBricks,
    NetherBrickFence,
    NetherBrickStairs,
    Sculk,
    SculkVein,
    SculkCatalyst,
    SculkShrieker,
    EnchantingTable,
    EndPortalFrame,
    EndStone,
    EndStoneBricks,
    DragonEgg,
    SandstoneStairs,
    EnderChest,
    EmeraldBlock,
    OakStairs,
    SpruceStairs,
    BirchStairs,
    JungleStairs,
    AcaciaStairs,
    CherryStairs,
    DarkOakStairs,
    MangroveStairs,
    BambooStairs,
    BambooMosaicStairs,
    CrimsonStairs,
    WarpedStairs,
    CommandBlock,
    Beacon,
    CobblestoneWall,
    MossyCobblestoneWall,
    BrickWall,
    PrismarineWall,
    RedSandstoneWall,
    MossyStoneBrickWall,
    GraniteWall,
    StoneBrickWall,
    MudBrickWall,
    NetherBrickWall,
    AndesiteWall,
    RedNetherBrickWall,
    SandstoneWall,
    EndStoneBrickWall,
    DioriteWall,
    BlackstoneWall,
    PolishedBlackstoneWall,
    PolishedBlackstoneBrickWall,
    CobbledDeepslateWall,
    PolishedDeepslateWall,
    DeepslateBrickWall,
    DeepslateTileWall,
    Anvil,
    ChippedAnvil,
    DamagedAnvil,
    ChiseledQuartzBlock,
    QuartzBlock,
    QuartzBricks,
    QuartzPillar,
    QuartzStairs,
    WhiteTerracotta,
    OrangeTerracotta,
    MagentaTerracotta,
    LightBlueTerracotta,
    YellowTerracotta,
    LimeTerracotta,
    PinkTerracotta,
    GrayTerracotta,
    LightGrayTerracotta,
    CyanTerracotta,
    PurpleTerracotta,
    BlueTerracotta,
    BrownTerracotta,
    GreenTerracotta,
    RedTerracotta,
    BlackTerracotta,
    Barrier,
    Light,
    HayBlock,
    WhiteCarpet,
    OrangeCarpet,
    MagentaCarpet,
    LightBlueCarpet,
    YellowCarpet,
    LimeCarpet,
    PinkCarpet,
    GrayCarpet,
    LightGrayCarpet,
    CyanCarpet,
    PurpleCarpet,
    BlueCarpet,
    BrownCarpet,
    GreenCarpet,
    RedCarpet,
    BlackCarpet,
    Terracotta,
    PackedIce,
    DirtPath,
    Sunflower,
    Lilac,
    RoseBush,
    Peony,
    TallGrass,
    LargeFern,
    WhiteStainedGlass,
    OrangeStainedGlass,
    MagentaStainedGlass,
    LightBlueStainedGlass,
    YellowStainedGlass,
    LimeStainedGlass,
    PinkStainedGlass,
    GrayStainedGlass,
    LightGrayStainedGlass,
    CyanStainedGlass,
    PurpleStainedGlass,
    BlueStainedGlass,
    BrownStainedGlass,
    GreenStainedGlass,
    RedStainedGlass,
    BlackStainedGlass,
    WhiteStainedGlassPane,
    OrangeStainedGlassPane,
    MagentaStainedGlassPane,
    LightBlueStainedGlassPane,
    YellowStainedGlassPane,
    LimeStainedGlassPane,
    PinkStainedGlassPane,
    GrayStainedGlassPane,
    LightGrayStainedGlassPane,
    CyanStainedGlassPane,
    PurpleStainedGlassPane,
    BlueStainedGlassPane,
    BrownStainedGlassPane,
    GreenStainedGlassPane,
    RedStainedGlassPane,
    BlackStainedGlassPane,
    Prismarine,
    PrismarineBricks,
    DarkPrismarine,
    PrismarineStairs,
    PrismarineBrickStairs,
    DarkPrismarineStairs,
    SeaLantern,
    RedSandstone,
    ChiseledRedSandstone,
    CutRedSandstone,
    RedSandstoneStairs,
    RepeatingCommandBlock,
    ChainCommandBlock,
    MagmaBlock,
    NetherWartBlock,
    WarpedWartBlock,
    RedNetherBricks,
    BoneBlock,
    StructureVoid,
    ShulkerBox,
    WhiteShulkerBox,
    OrangeShulkerBox,
    MagentaShulkerBox,
    LightBlueShulkerBox,
    YellowShulkerBox,
    LimeShulkerBox,
    PinkShulkerBox,
    GrayShulkerBox,
    LightGrayShulkerBox,
    CyanShulkerBox,
    PurpleShulkerBox,
    BlueShulkerBox,
    BrownShulkerBox,
    GreenShulkerBox,
    RedShulkerBox,
    BlackShulkerBox,
    WhiteGlazedTerracotta,
    OrangeGlazedTerracotta,
    MagentaGlazedTerracotta,
    LightBlueGlazedTerracotta,
    YellowGlazedTerracotta,
    LimeGlazedTerracotta,
    PinkGlazedTerracotta,
    GrayGlazedTerracotta,
    LightGrayGlazedTerracotta,
    CyanGlazedTerracotta,
    PurpleGlazedTerracotta,
    BlueGlazedTerracotta,
    BrownGlazedTerracotta,
    GreenGlazedTerracotta,
    RedGlazedTerracotta,
    BlackGlazedTerracotta,
    WhiteConcrete,
    OrangeConcrete,
    MagentaConcrete,
    LightBlueConcrete,
    YellowConcrete,
    LimeConcrete,
    PinkConcrete,
    GrayConcrete,
    LightGrayConcrete,
    CyanConcrete,
    PurpleConcrete,
    BlueConcrete,
    BrownConcrete,
    GreenConcrete,
    RedConcrete,
    BlackConcrete,
    WhiteConcretePowder,
    OrangeConcretePowder,
    MagentaConcretePowder,
    LightBlueConcretePowder,
    YellowConcretePowder,
    LimeConcretePowder,
    PinkConcretePowder,
    GrayConcretePowder,
    LightGrayConcretePowder,
    CyanConcretePowder,
    PurpleConcretePowder,
    BlueConcretePowder,
    BrownConcretePowder,
    GreenConcretePowder,
    RedConcretePowder,
    BlackConcretePowder,
    TurtleEgg,
    SnifferEgg,
    DeadTubeCoralBlock,
    DeadBrainCoralBlock,
    DeadBubbleCoralBlock,
    DeadFireCoralBlock,
    DeadHornCoralBlock,
    TubeCoralBlock,
    BrainCoralBlock,
    BubbleCoralBlock,
    FireCoralBlock,
    HornCoralBlock,
    TubeCoral,
    BrainCoral,
    BubbleCoral,
    FireCoral,
    HornCoral,
    DeadBrainCoral,
    DeadBubbleCoral,
    DeadFireCoral,
    DeadHornCoral,
    DeadTubeCoral,
    TubeCoralFan,
    BrainCoralFan,
    BubbleCoralFan,
    FireCoralFan,
    HornCoralFan,
    DeadTubeCoralFan,
    DeadBrainCoralFan,
    DeadBubbleCoralFan,
    DeadFireCoralFan,
    DeadHornCoralFan,
    BlueIce,
    Conduit,
    PolishedGraniteStairs,
    SmoothRedSandstoneStairs,
    MossyStoneBrickStairs,
    PolishedDioriteStairs,
    MossyCobblestoneStairs,
    EndStoneBrickStairs,
    StoneStairs,
    SmoothSandstoneStairs,
    SmoothQuartzStairs,
    GraniteStairs,
    AndesiteStairs,
    RedNetherBrickStairs,
    PolishedAndesiteStairs,
    DioriteStairs,
    CobbledDeepslateStairs,
    PolishedDeepslateStairs,
    DeepslateBrickStairs,
    DeepslateTileStairs,
    PolishedGraniteSlab,
    SmoothRedSandstoneSlab,
    MossyStoneBrickSlab,
    PolishedDioriteSlab,
    MossyCobblestoneSlab,
    EndStoneBrickSlab,
    SmoothSandstoneSlab,
    SmoothQuartzSlab,
    GraniteSlab,
    AndesiteSlab,
    RedNetherBrickSlab,
    PolishedAndesiteSlab,
    DioriteSlab,
    CobbledDeepslateSlab,
    PolishedDeepslateSlab,
    DeepslateBrickSlab,
    DeepslateTileSlab,
    Scaffolding,
    Redstone,
    RedstoneTorch,
    RedstoneBlock,
    Repeater,
    Comparator,
    Piston,
    StickyPiston,
    SlimeBlock,
    HoneyBlock,
    Observer,
    Hopper,
    Dispenser,
    Dropper,
    Lectern,
    Target,
    Lever,
    LightningRod,
    DaylightDetector,
    SculkSensor,
    CalibratedSculkSensor,
    TripwireHook,
    TrappedChest,
    Tnt,
    RedstoneLamp,
    NoteBlock,
    StoneButton,
    PolishedBlackstoneButton,
    OakButton,
    SpruceButton,
    BirchButton,
    JungleButton,
    AcaciaButton,
    CherryButton,
    DarkOakButton,
    MangroveButton,
    BambooButton,
    CrimsonButton,
    WarpedButton,
    StonePressurePlate,
    PolishedBlackstonePressurePlate,
    LightWeightedPressurePlate,
    HeavyWeightedPressurePlate,
    OakPressurePlate,
    SprucePressurePlate,
    BirchPressurePlate,
    JunglePressurePlate,
    AcaciaPressurePlate,
    CherryPressurePlate,
    DarkOakPressurePlate,
    MangrovePressurePlate,
    BambooPressurePlate,
    CrimsonPressurePlate,
    WarpedPressurePlate,
    IronDoor,
    OakDoor,
    SpruceDoor,
    BirchDoor,
    JungleDoor,
    AcaciaDoor,
    CherryDoor,
    DarkOakDoor,
    MangroveDoor,
    BambooDoor,
    CrimsonDoor,
    WarpedDoor,
    IronTrapdoor,
    OakTrapdoor,
    SpruceTrapdoor,
    BirchTrapdoor,
    JungleTrapdoor,
    AcaciaTrapdoor,
    CherryTrapdoor,
    DarkOakTrapdoor,
    MangroveTrapdoor,
    BambooTrapdoor,
    CrimsonTrapdoor,
    WarpedTrapdoor,
    OakFenceGate,
    SpruceFenceGate,
    BirchFenceGate,
    JungleFenceGate,
    AcaciaFenceGate,
    CherryFenceGate,
    DarkOakFenceGate,
    MangroveFenceGate,
    BambooFenceGate,
    CrimsonFenceGate,
    WarpedFenceGate,
    PoweredRail,
    DetectorRail,
    Rail,
    ActivatorRail,
    Saddle,
    Minecart,
    ChestMinecart,
    FurnaceMinecart,
    TntMinecart,
    HopperMinecart,
    CarrotOnAStick,
    WarpedFungusOnAStick,
    Elytra,
    OakBoat,
    OakChestBoat,
    SpruceBoat,
    SpruceChestBoat,
    BirchBoat,
    BirchChestBoat,
    JungleBoat,
    JungleChestBoat,
    AcaciaBoat,
    AcaciaChestBoat,
    CherryBoat,
    CherryChestBoat,
    DarkOakBoat,
    DarkOakChestBoat,
    MangroveBoat,
    MangroveChestBoat,
    BambooRaft,
    BambooChestRaft,
    StructureBlock,
    Jigsaw,
    TurtleHelmet,
    Scute,
    FlintAndSteel,
    Apple,
    Bow,
    Arrow,
    Coal,
    Charcoal,
    Diamond,
    Emerald,
    LapisLazuli,
    Quartz,
    AmethystShard,
    RawIron,
    IronIngot,
    RawCopper,
    CopperIngot,
    RawGold,
    GoldIngot,
    NetheriteIngot,
    NetheriteScrap,
    WoodenSword,
    WoodenShovel,
    WoodenPickaxe,
    WoodenAxe,
    WoodenHoe,
    StoneSword,
    StoneShovel,
    StonePickaxe,
    StoneAxe,
    StoneHoe,
    GoldenSword,
    GoldenShovel,
    GoldenPickaxe,
    GoldenAxe,
    GoldenHoe,
    IronSword,
    IronShovel,
    IronPickaxe,
    IronAxe,
    IronHoe,
    DiamondSword,
    DiamondShovel,
    DiamondPickaxe,
    DiamondAxe,
    DiamondHoe,
    NetheriteSword,
    NetheriteShovel,
    NetheritePickaxe,
    NetheriteAxe,
    NetheriteHoe,
    Stick,
    Bowl,
    MushroomStew,
    String,
    Feather,
    Gunpowder,
    WheatSeeds,
    Wheat,
    Bread,
    LeatherHelmet,
    LeatherChestplate,
    LeatherLeggings,
    LeatherBoots,
    ChainmailHelmet,
    ChainmailChestplate,
    ChainmailLeggings,
    ChainmailBoots,
    IronHelmet,
    IronChestplate,
    IronLeggings,
    IronBoots,
    DiamondHelmet,
    DiamondChestplate,
    DiamondLeggings,
    DiamondBoots,
    GoldenHelmet,
    GoldenChestplate,
    GoldenLeggings,
    GoldenBoots,
    NetheriteHelmet,
    NetheriteChestplate,
    NetheriteLeggings,
    NetheriteBoots,
    Flint,
    Porkchop,
    CookedPorkchop,
    Painting,
    GoldenApple,
    EnchantedGoldenApple,
    OakSign,
    SpruceSign,
    BirchSign,
    JungleSign,
    AcaciaSign,
    CherrySign,
    DarkOakSign,
    MangroveSign,
    BambooSign,
    CrimsonSign,
    WarpedSign,
    OakHangingSign,
    SpruceHangingSign,
    BirchHangingSign,
    JungleHangingSign,
    AcaciaHangingSign,
    CherryHangingSign,
    DarkOakHangingSign,
    MangroveHangingSign,
    BambooHangingSign,
    CrimsonHangingSign,
    WarpedHangingSign,
    Bucket,
    WaterBucket,
    LavaBucket,
    PowderSnowBucket,
    Snowball,
    Leather,
    MilkBucket,
    PufferfishBucket,
    SalmonBucket,
    CodBucket,
    TropicalFishBucket,
    AxolotlBucket,
    TadpoleBucket,
    Brick,
    ClayBall,
    DriedKelpBlock,
    Paper,
    Book,
    SlimeBall,
    Egg,
    Compass,
    RecoveryCompass,
    Bundle,
    FishingRod,
    Clock,
    Spyglass,
    GlowstoneDust,
    Cod,
    Salmon,
    TropicalFish,
    Pufferfish,
    CookedCod,
    CookedSalmon,
    InkSac,
    GlowInkSac,
    CocoaBeans,
    WhiteDye,
    OrangeDye,
    MagentaDye,
    LightBlueDye,
    YellowDye,
    LimeDye,
    PinkDye,
    GrayDye,
    LightGrayDye,
    CyanDye,
    PurpleDye,
    BlueDye,
    BrownDye,
    GreenDye,
    RedDye,
    BlackDye,
    BoneMeal,
    Bone,
    Sugar,
    Cake,
    WhiteBed,
    OrangeBed,
    MagentaBed,
    LightBlueBed,
    YellowBed,
    LimeBed,
    PinkBed,
    GrayBed,
    LightGrayBed,
    CyanBed,
    PurpleBed,
    BlueBed,
    BrownBed,
    GreenBed,
    RedBed,
    BlackBed,
    Cookie,
    FilledMap,
    Shears,
    MelonSlice,
    DriedKelp,
    PumpkinSeeds,
    MelonSeeds,
    Beef,
    CookedBeef,
    Chicken,
    CookedChicken,
    RottenFlesh,
    EnderPearl,
    BlazeRod,
    GhastTear,
    GoldNugget,
    NetherWart,
    Potion,
    GlassBottle,
    SpiderEye,
    FermentedSpiderEye,
    BlazePowder,
    MagmaCream,
    BrewingStand,
    Cauldron,
    EnderEye,
    GlisteringMelonSlice,
    AllaySpawnEgg,
    AxolotlSpawnEgg,
    BatSpawnEgg,
    BeeSpawnEgg,
    BlazeSpawnEgg,
    CatSpawnEgg,
    CamelSpawnEgg,
    CaveSpiderSpawnEgg,
    ChickenSpawnEgg,
    CodSpawnEgg,
    CowSpawnEgg,
    CreeperSpawnEgg,
    DolphinSpawnEgg,
    DonkeySpawnEgg,
    DrownedSpawnEgg,
    ElderGuardianSpawnEgg,
    EnderDragonSpawnEgg,
    EndermanSpawnEgg,
    EndermiteSpawnEgg,
    EvokerSpawnEgg,
    FoxSpawnEgg,
    FrogSpawnEgg,
    GhastSpawnEgg,
    GlowSquidSpawnEgg,
    GoatSpawnEgg,
    GuardianSpawnEgg,
    HoglinSpawnEgg,
    HorseSpawnEgg,
    HuskSpawnEgg,
    IronGolemSpawnEgg,
    LlamaSpawnEgg,
    MagmaCubeSpawnEgg,
    MooshroomSpawnEgg,
    MuleSpawnEgg,
    OcelotSpawnEgg,
    PandaSpawnEgg,
    ParrotSpawnEgg,
    PhantomSpawnEgg,
    PigSpawnEgg,
    PiglinSpawnEgg,
    PiglinBruteSpawnEgg,
    PillagerSpawnEgg,
    PolarBearSpawnEgg,
    PufferfishSpawnEgg,
    RabbitSpawnEgg,
    RavagerSpawnEgg,
    SalmonSpawnEgg,
    SheepSpawnEgg,
    ShulkerSpawnEgg,
    SilverfishSpawnEgg,
    SkeletonSpawnEgg,
    SkeletonHorseSpawnEgg,
    SlimeSpawnEgg,
    SnifferSpawnEgg,
    SnowGolemSpawnEgg,
    SpiderSpawnEgg,
    SquidSpawnEgg,
    StraySpawnEgg,
    StriderSpawnEgg,
    TadpoleSpawnEgg,
    TraderLlamaSpawnEgg,
    TropicalFishSpawnEgg,
    TurtleSpawnEgg,
    VexSpawnEgg,
    VillagerSpawnEgg,
    VindicatorSpawnEgg,
    WanderingTraderSpawnEgg,
    WardenSpawnEgg,
    WitchSpawnEgg,
    WitherSpawnEgg,
    WitherSkeletonSpawnEgg,
    WolfSpawnEgg,
    ZoglinSpawnEgg,
    ZombieSpawnEgg,
    ZombieHorseSpawnEgg,
    ZombieVillagerSpawnEgg,
    ZombifiedPiglinSpawnEgg,
    ExperienceBottle,
    FireCharge,
    WritableBook,
    WrittenBook,
    ItemFrame,
    GlowItemFrame,
    FlowerPot,
    Carrot,
    Potato,
    BakedPotato,
    PoisonousPotato,
    Map,
    GoldenCarrot,
    SkeletonSkull,
    WitherSkeletonSkull,
    PlayerHead,
    ZombieHead,
    CreeperHead,
    DragonHead,
    PiglinHead,
    NetherStar,
    PumpkinPie,
    FireworkRocket,
    FireworkStar,
    EnchantedBook,
    NetherBrick,
    PrismarineShard,
    PrismarineCrystals,
    Rabbit,
    CookedRabbit,
    RabbitStew,
    RabbitFoot,
    RabbitHide,
    ArmorStand,
    IronHorseArmor,
    GoldenHorseArmor,
    DiamondHorseArmor,
    LeatherHorseArmor,
    Lead,
    NameTag,
    CommandBlockMinecart,
    Mutton,
    CookedMutton,
    WhiteBanner,
    OrangeBanner,
    MagentaBanner,
    LightBlueBanner,
    YellowBanner,
    LimeBanner,
    PinkBanner,
    GrayBanner,
    LightGrayBanner,
    CyanBanner,
    PurpleBanner,
    BlueBanner,
    BrownBanner,
    GreenBanner,
    RedBanner,
    BlackBanner,
    EndCrystal,
    ChorusFruit,
    PoppedChorusFruit,
    TorchflowerSeeds,
    PitcherPod,
    Beetroot,
    BeetrootSeeds,
    BeetrootSoup,
    DragonBreath,
    SplashPotion,
    SpectralArrow,
    TippedArrow,
    LingeringPotion,
    Shield,
    TotemOfUndying,
    ShulkerShell,
    IronNugget,
    KnowledgeBook,
    DebugStick,
    MusicDisc13,
    MusicDiscCat,
    MusicDiscBlocks,
    MusicDiscChirp,
    MusicDiscFar,
    MusicDiscMall,
    MusicDiscMellohi,
    MusicDiscStal,
    MusicDiscStrad,
    MusicDiscWard,
    MusicDisc11,
    MusicDiscWait,
    MusicDiscOtherside,
    MusicDiscRelic,
    MusicDisc5,
    MusicDiscPigstep,
    DiscFragment5,
    Trident,
    PhantomMembrane,
    NautilusShell,
    HeartOfTheSea,
    Crossbow,
    SuspiciousStew,
    Loom,
    FlowerBannerPattern,
    CreeperBannerPattern,
    SkullBannerPattern,
    MojangBannerPattern,
    GlobeBannerPattern,
    PiglinBannerPattern,
    GoatHorn,
    Composter,
    Barrel,
    Smoker,
    BlastFurnace,
    CartographyTable,
    FletchingTable,
    Grindstone,
    SmithingTable,
    Stonecutter,
    Bell,
    Lantern,
    SoulLantern,
    SweetBerries,
    GlowBerries,
    Campfire,
    SoulCampfire,
    Shroomlight,
    Honeycomb,
    BeeNest,
    Beehive,
    HoneyBottle,
    HoneycombBlock,
    Lodestone,
    CryingObsidian,
    Blackstone,
    BlackstoneSlab,
    BlackstoneStairs,
    GildedBlackstone,
    PolishedBlackstone,
    PolishedBlackstoneSlab,
    PolishedBlackstoneStairs,
    ChiseledPolishedBlackstone,
    PolishedBlackstoneBricks,
    PolishedBlackstoneBrickSlab,
    PolishedBlackstoneBrickStairs,
    CrackedPolishedBlackstoneBricks,
    RespawnAnchor,
    Candle,
    WhiteCandle,
    OrangeCandle,
    MagentaCandle,
    LightBlueCandle,
    YellowCandle,
    LimeCandle,
    PinkCandle,
    GrayCandle,
    LightGrayCandle,
    CyanCandle,
    PurpleCandle,
    BlueCandle,
    BrownCandle,
    GreenCandle,
    RedCandle,
    BlackCandle,
    SmallAmethystBud,
    MediumAmethystBud,
    LargeAmethystBud,
    AmethystCluster,
    PointedDripstone,
    OchreFroglight,
    VerdantFroglight,
    PearlescentFroglight,
    Frogspawn,
    EchoShard,
    Brush,
    NetheriteUpgradeSmithingTemplate,
    SentryArmorTrimSmithingTemplate,
    DuneArmorTrimSmithingTemplate,
    CoastArmorTrimSmithingTemplate,
    WildArmorTrimSmithingTemplate,
    WardArmorTrimSmithingTemplate,
    EyeArmorTrimSmithingTemplate,
    VexArmorTrimSmithingTemplate,
    TideArmorTrimSmithingTemplate,
    SnoutArmorTrimSmithingTemplate,
    RibArmorTrimSmithingTemplate,
    SpireArmorTrimSmithingTemplate,
    WayfinderArmorTrimSmithingTemplate,
    ShaperArmorTrimSmithingTemplate,
    SilenceArmorTrimSmithingTemplate,
    RaiserArmorTrimSmithingTemplate,
    HostArmorTrimSmithingTemplate,
    AnglerPotterySherd,
    ArcherPotterySherd,
    ArmsUpPotterySherd,
    BladePotterySherd,
    BrewerPotterySherd,
    BurnPotterySherd,
    DangerPotterySherd,
    ExplorerPotterySherd,
    FriendPotterySherd,
    HeartPotterySherd,
    HeartbreakPotterySherd,
    HowlPotterySherd,
    MinerPotterySherd,
    MournerPotterySherd,
    PlentyPotterySherd,
    PrizePotterySherd,
    SheafPotterySherd,
    ShelterPotterySherd,
    SkullPotterySherd,
    SnortPotterySherd,
    Water,
    Lava,
    TallSeagrass,
    PistonHead,
    MovingPiston,
    WallTorch,
    Fire,
    SoulFire,
    RedstoneWire,
    OakWallSign,
    SpruceWallSign,
    BirchWallSign,
    AcaciaWallSign,
    CherryWallSign,
    JungleWallSign,
    DarkOakWallSign,
    MangroveWallSign,
    BambooWallSign,
    OakWallHangingSign,
    SpruceWallHangingSign,
    BirchWallHangingSign,
    AcaciaWallHangingSign,
    CherryWallHangingSign,
    JungleWallHangingSign,
    DarkOakWallHangingSign,
    MangroveWallHangingSign,
    CrimsonWallHangingSign,
    WarpedWallHangingSign,
    BambooWallHangingSign,
    RedstoneWallTorch,
    SoulWallTorch,
    NetherPortal,
    AttachedPumpkinStem,
    AttachedMelonStem,
    PumpkinStem,
    MelonStem,
    WaterCauldron,
    LavaCauldron,
    PowderSnowCauldron,
    EndPortal,
    Cocoa,
    Tripwire,
    PottedTorchflower,
    PottedOakSapling,
    PottedSpruceSapling,
    PottedBirchSapling,
    PottedJungleSapling,
    PottedAcaciaSapling,
    PottedCherrySapling,
    PottedDarkOakSapling,
    PottedMangrovePropagule,
    PottedFern,
    PottedDandelion,
    PottedPoppy,
    PottedBlueOrchid,
    PottedAllium,
    PottedAzureBluet,
    PottedRedTulip,
    PottedOrangeTulip,
    PottedWhiteTulip,
    PottedPinkTulip,
    PottedOxeyeDaisy,
    PottedCornflower,
    PottedLilyOfTheValley,
    PottedWitherRose,
    PottedRedMushroom,
    PottedBrownMushroom,
    PottedDeadBush,
    PottedCactus,
    Carrots,
    Potatoes,
    SkeletonWallSkull,
    WitherSkeletonWallSkull,
    ZombieWallHead,
    PlayerWallHead,
    CreeperWallHead,
    DragonWallHead,
    PiglinWallHead,
    WhiteWallBanner,
    OrangeWallBanner,
    MagentaWallBanner,
    LightBlueWallBanner,
    YellowWallBanner,
    LimeWallBanner,
    PinkWallBanner,
    GrayWallBanner,
    LightGrayWallBanner,
    CyanWallBanner,
    PurpleWallBanner,
    BlueWallBanner,
    BrownWallBanner,
    GreenWallBanner,
    RedWallBanner,
    BlackWallBanner,
    TorchflowerCrop,
    PitcherCrop,
    Beetroots,
    EndGateway,
    FrostedIce,
    KelpPlant,
    DeadTubeCoralWallFan,
    DeadBrainCoralWallFan,
    DeadBubbleCoralWallFan,
    DeadFireCoralWallFan,
    DeadHornCoralWallFan,
    TubeCoralWallFan,
    BrainCoralWallFan,
    BubbleCoralWallFan,
    FireCoralWallFan,
    HornCoralWallFan,
    BambooSapling,
    PottedBamboo,
    VoidAir,
    CaveAir,
    BubbleColumn,
    SweetBerryBush,
    WeepingVinesPlant,
    TwistingVinesPlant,
    CrimsonWallSign,
    WarpedWallSign,
    PottedCrimsonFungus,
    PottedWarpedFungus,
    PottedCrimsonRoots,
    PottedWarpedRoots,
    CandleCake,
    WhiteCandleCake,
    OrangeCandleCake,
    MagentaCandleCake,
    LightBlueCandleCake,
    YellowCandleCake,
    LimeCandleCake,
    PinkCandleCake,
    GrayCandleCake,
    LightGrayCandleCake,
    CyanCandleCake,
    PurpleCandleCake,
    BlueCandleCake,
    BrownCandleCake,
    GreenCandleCake,
    RedCandleCake,
    BlackCandleCake,
    PowderSnow,
    CaveVines,
    CaveVinesPlant,
    BigDripleafStem,
    PottedAzaleaBush,
    PottedFloweringAzaleaBush,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAir,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGrass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDirt,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCobblestone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWood,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySapling,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBedrock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWater,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStationaryWater,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLava,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStationaryLava,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySand,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGravel,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCoalOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLog,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeaves,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySponge,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGlass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLapisOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLapisBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDispenser,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySandstone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNoteBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBedBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPoweredRail,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDetectorRail,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPistonStickyBase,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWeb,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLongGrass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDeadBush,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPistonBase,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPistonExtension,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWool,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPistonMovingPiece,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyYellowFlower,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedRose,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrownMushroom,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedMushroom,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDoubleStep,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStep,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTnt,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBookshelf,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMossyCobblestone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyObsidian,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTorch,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFire,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMobSpawner,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChest,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneWire,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWorkbench,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCrops,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySoil,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFurnace,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBurningFurnace,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySignPost,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodenDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLadder,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRails,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCobblestoneStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWallSign,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLever,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStonePlate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronDoorBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodPlate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGlowingRedstoneOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneTorchOff,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneTorchOn,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneButton,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySnow,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIce,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySnowBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCactus,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyClay,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySugarCaneBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJukebox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPumpkin,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherrack,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySoulSand,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGlowstone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPortal,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJackOLantern,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCakeBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiodeBlockOff,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiodeBlockOn,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStainedGlass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTrapDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMonsterEggs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySmoothBrick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHugeMushroom1,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHugeMushroom2,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyThinGlass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMelonBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPumpkinStem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMelonStem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyVine,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrickStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySmoothStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMycel,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWaterLily,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherBrick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherBrickStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherWarts,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnchantmentTable,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrewingStand,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCauldron,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnderPortal,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnderPortalFrame,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnderStone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDragonEgg,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneLampOff,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneLampOn,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodDoubleStep,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodStep,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCocoa,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySandstoneStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEmeraldOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnderChest,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTripwireHook,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTripwire,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEmeraldBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpruceWoodStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBirchWoodStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJungleWoodStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCommand,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBeacon,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCobbleWall,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFlowerPot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCarrot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPotato,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodButton,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySkull,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAnvil,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTrappedChest,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldPlate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronPlate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneComparatorOff,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneComparatorOn,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDaylightDetector,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyQuartzOre,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHopper,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyQuartzBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyQuartzStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyActivatorRail,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDropper,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStainedClay,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStainedGlassPane,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeaves2,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLog2,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAcaciaStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDarkOakStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySlimeBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBarrier,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronTrapdoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPrismarine,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySeaLantern,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHayBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCarpet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHardClay,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCoalBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPackedIce,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDoublePlant,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStandingBanner,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWallBanner,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDaylightDetectorInverted,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedSandstone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedSandstoneStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDoubleStoneSlab2,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneSlab2,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpruceFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBirchFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJungleFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDarkOakFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAcaciaFenceGate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpruceFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBirchFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJungleFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDarkOakFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAcaciaFence,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpruceDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBirchDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJungleDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAcaciaDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDarkOakDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEndRod,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChorusPlant,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChorusFlower,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpurBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpurPillar,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpurStairs,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpurDoubleSlab,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpurSlab,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEndBricks,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBeetrootBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGrassPath,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEndGateway,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCommandRepeating,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCommandChain,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFrostedIce,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMagma,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherWartBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedNetherBrick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoneBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStructureVoid,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyObserver,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWhiteShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyOrangeShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMagentaShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLightBlueShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyYellowShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLimeShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPinkShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGrayShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySilverShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCyanShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpleShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlueShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrownShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGreenShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlackShulkerBox,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWhiteGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyOrangeGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMagentaGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLightBlueGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyYellowGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLimeGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPinkGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGrayGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySilverGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCyanGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPurpleGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlueGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrownGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGreenGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlackGlazedTerracotta,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyConcrete,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyConcretePowder,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStructureBlock,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronSpade,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronPickaxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronAxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFlintAndSteel,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyApple,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBow,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyArrow,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCoal,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamond,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronIngot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldIngot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronSword,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodSword,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodSpade,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodPickaxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodAxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneSword,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneSpade,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStonePickaxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneAxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondSword,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondSpade,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondPickaxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondAxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBowl,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMushroomSoup,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldSword,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldSpade,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldPickaxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldAxe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyString,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFeather,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySulphur,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodHoe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStoneHoe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronHoe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondHoe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldHoe,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySeeds,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWheat,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBread,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeatherHelmet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeatherChestplate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeatherLeggings,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeatherBoots,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChainmailHelmet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChainmailChestplate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChainmailLeggings,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChainmailBoots,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronHelmet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronChestplate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronLeggings,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronBoots,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondHelmet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondChestplate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondLeggings,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondBoots,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldHelmet,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldChestplate,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldLeggings,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldBoots,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFlint,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPork,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGrilledPork,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPainting,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldenApple,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySign,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWoodDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBucket,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWaterBucket,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLavaBucket,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySaddle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronDoor,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySnowBall,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoat,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeather,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMilkBucket,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyClayBrick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyClayBall,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySugarCane,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPaper,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBook,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySlimeBall,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyStorageMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPoweredMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEgg,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCompass,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFishingRod,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWatch,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGlowstoneDust,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRawFish,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookedFish,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyInkSack,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBone,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySugar,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCake,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBed,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiode,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookie,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMap,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyShears,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMelon,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPumpkinSeeds,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMelonSeeds,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRawBeef,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookedBeef,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRawChicken,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookedChicken,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRottenFlesh,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnderPearl,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlazeRod,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGhastTear,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldNugget,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherStalk,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPotion,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGlassBottle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpiderEye,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFermentedSpiderEye,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBlazePowder,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMagmaCream,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBrewingStandItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCauldronItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEyeOfEnder,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpeckledMelon,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMonsterEgg,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyExpBottle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFireball,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBookAndQuill,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyWrittenBook,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEmerald,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyItemFrame,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFlowerPotItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCarrotItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPotatoItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBakedPotato,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPoisonousPotato,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEmptyMap,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldenCarrot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySkullItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCarrotStick,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherStar,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPumpkinPie,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFirework,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyFireworkCharge,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEnchantedBook,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRedstoneComparator,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNetherBrickItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyQuartz,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyExplosiveMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyHopperMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPrismarineShard,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyPrismarineCrystals,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRabbit,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookedRabbit,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRabbitStew,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRabbitFoot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRabbitHide,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyArmorStand,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronBarding,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldBarding,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDiamondBarding,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLeash,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyNameTag,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCommandMinecart,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyMutton,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyCookedMutton,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBanner,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyEndCrystal,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpruceDoorItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBirchDoorItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyJungleDoorItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyAcaciaDoorItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDarkOakDoorItem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChorusFruit,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyChorusFruitPopped,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBeetroot,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBeetrootSeeds,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBeetrootSoup,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyDragonsBreath,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySplashPotion,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacySpectralArrow,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTippedArrow,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyLingeringPotion,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyShield,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyElytra,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoatSpruce,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoatBirch,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoatJungle,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoatAcacia,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyBoatDarkOak,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyTotem,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyShulkerShell,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyIronNugget,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyKnowledgeBook,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGoldRecord,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyGreenRecord,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord3,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord4,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord5,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord6,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord7,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord8,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord9,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord10,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord11,
    //['since', '']

    //['forRemoval', 'false']
    #[deprecated]
    LegacyRecord12,
}
impl std::fmt::Display for MaterialMaterialEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            MaterialMaterialEnum::Air => f.write_str("AIR"),
            MaterialMaterialEnum::Stone => f.write_str("STONE"),
            MaterialMaterialEnum::Granite => f.write_str("GRANITE"),
            MaterialMaterialEnum::PolishedGranite => f.write_str("POLISHED_GRANITE"),
            MaterialMaterialEnum::Diorite => f.write_str("DIORITE"),
            MaterialMaterialEnum::PolishedDiorite => f.write_str("POLISHED_DIORITE"),
            MaterialMaterialEnum::Andesite => f.write_str("ANDESITE"),
            MaterialMaterialEnum::PolishedAndesite => f.write_str("POLISHED_ANDESITE"),
            MaterialMaterialEnum::Deepslate => f.write_str("DEEPSLATE"),
            MaterialMaterialEnum::CobbledDeepslate => f.write_str("COBBLED_DEEPSLATE"),
            MaterialMaterialEnum::PolishedDeepslate => f.write_str("POLISHED_DEEPSLATE"),
            MaterialMaterialEnum::Calcite => f.write_str("CALCITE"),
            MaterialMaterialEnum::Tuff => f.write_str("TUFF"),
            MaterialMaterialEnum::DripstoneBlock => f.write_str("DRIPSTONE_BLOCK"),
            MaterialMaterialEnum::GrassBlock => f.write_str("GRASS_BLOCK"),
            MaterialMaterialEnum::Dirt => f.write_str("DIRT"),
            MaterialMaterialEnum::CoarseDirt => f.write_str("COARSE_DIRT"),
            MaterialMaterialEnum::Podzol => f.write_str("PODZOL"),
            MaterialMaterialEnum::RootedDirt => f.write_str("ROOTED_DIRT"),
            MaterialMaterialEnum::Mud => f.write_str("MUD"),
            MaterialMaterialEnum::CrimsonNylium => f.write_str("CRIMSON_NYLIUM"),
            MaterialMaterialEnum::WarpedNylium => f.write_str("WARPED_NYLIUM"),
            MaterialMaterialEnum::Cobblestone => f.write_str("COBBLESTONE"),
            MaterialMaterialEnum::OakPlanks => f.write_str("OAK_PLANKS"),
            MaterialMaterialEnum::SprucePlanks => f.write_str("SPRUCE_PLANKS"),
            MaterialMaterialEnum::BirchPlanks => f.write_str("BIRCH_PLANKS"),
            MaterialMaterialEnum::JunglePlanks => f.write_str("JUNGLE_PLANKS"),
            MaterialMaterialEnum::AcaciaPlanks => f.write_str("ACACIA_PLANKS"),
            MaterialMaterialEnum::CherryPlanks => f.write_str("CHERRY_PLANKS"),
            MaterialMaterialEnum::DarkOakPlanks => f.write_str("DARK_OAK_PLANKS"),
            MaterialMaterialEnum::MangrovePlanks => f.write_str("MANGROVE_PLANKS"),
            MaterialMaterialEnum::BambooPlanks => f.write_str("BAMBOO_PLANKS"),
            MaterialMaterialEnum::CrimsonPlanks => f.write_str("CRIMSON_PLANKS"),
            MaterialMaterialEnum::WarpedPlanks => f.write_str("WARPED_PLANKS"),
            MaterialMaterialEnum::BambooMosaic => f.write_str("BAMBOO_MOSAIC"),
            MaterialMaterialEnum::OakSapling => f.write_str("OAK_SAPLING"),
            MaterialMaterialEnum::SpruceSapling => f.write_str("SPRUCE_SAPLING"),
            MaterialMaterialEnum::BirchSapling => f.write_str("BIRCH_SAPLING"),
            MaterialMaterialEnum::JungleSapling => f.write_str("JUNGLE_SAPLING"),
            MaterialMaterialEnum::AcaciaSapling => f.write_str("ACACIA_SAPLING"),
            MaterialMaterialEnum::CherrySapling => f.write_str("CHERRY_SAPLING"),
            MaterialMaterialEnum::DarkOakSapling => f.write_str("DARK_OAK_SAPLING"),
            MaterialMaterialEnum::MangrovePropagule => f.write_str("MANGROVE_PROPAGULE"),
            MaterialMaterialEnum::Bedrock => f.write_str("BEDROCK"),
            MaterialMaterialEnum::Sand => f.write_str("SAND"),
            MaterialMaterialEnum::SuspiciousSand => f.write_str("SUSPICIOUS_SAND"),
            MaterialMaterialEnum::SuspiciousGravel => f.write_str("SUSPICIOUS_GRAVEL"),
            MaterialMaterialEnum::RedSand => f.write_str("RED_SAND"),
            MaterialMaterialEnum::Gravel => f.write_str("GRAVEL"),
            MaterialMaterialEnum::CoalOre => f.write_str("COAL_ORE"),
            MaterialMaterialEnum::DeepslateCoalOre => f.write_str("DEEPSLATE_COAL_ORE"),
            MaterialMaterialEnum::IronOre => f.write_str("IRON_ORE"),
            MaterialMaterialEnum::DeepslateIronOre => f.write_str("DEEPSLATE_IRON_ORE"),
            MaterialMaterialEnum::CopperOre => f.write_str("COPPER_ORE"),
            MaterialMaterialEnum::DeepslateCopperOre => f.write_str("DEEPSLATE_COPPER_ORE"),
            MaterialMaterialEnum::GoldOre => f.write_str("GOLD_ORE"),
            MaterialMaterialEnum::DeepslateGoldOre => f.write_str("DEEPSLATE_GOLD_ORE"),
            MaterialMaterialEnum::RedstoneOre => f.write_str("REDSTONE_ORE"),
            MaterialMaterialEnum::DeepslateRedstoneOre => f.write_str("DEEPSLATE_REDSTONE_ORE"),
            MaterialMaterialEnum::EmeraldOre => f.write_str("EMERALD_ORE"),
            MaterialMaterialEnum::DeepslateEmeraldOre => f.write_str("DEEPSLATE_EMERALD_ORE"),
            MaterialMaterialEnum::LapisOre => f.write_str("LAPIS_ORE"),
            MaterialMaterialEnum::DeepslateLapisOre => f.write_str("DEEPSLATE_LAPIS_ORE"),
            MaterialMaterialEnum::DiamondOre => f.write_str("DIAMOND_ORE"),
            MaterialMaterialEnum::DeepslateDiamondOre => f.write_str("DEEPSLATE_DIAMOND_ORE"),
            MaterialMaterialEnum::NetherGoldOre => f.write_str("NETHER_GOLD_ORE"),
            MaterialMaterialEnum::NetherQuartzOre => f.write_str("NETHER_QUARTZ_ORE"),
            MaterialMaterialEnum::AncientDebris => f.write_str("ANCIENT_DEBRIS"),
            MaterialMaterialEnum::CoalBlock => f.write_str("COAL_BLOCK"),
            MaterialMaterialEnum::RawIronBlock => f.write_str("RAW_IRON_BLOCK"),
            MaterialMaterialEnum::RawCopperBlock => f.write_str("RAW_COPPER_BLOCK"),
            MaterialMaterialEnum::RawGoldBlock => f.write_str("RAW_GOLD_BLOCK"),
            MaterialMaterialEnum::AmethystBlock => f.write_str("AMETHYST_BLOCK"),
            MaterialMaterialEnum::BuddingAmethyst => f.write_str("BUDDING_AMETHYST"),
            MaterialMaterialEnum::IronBlock => f.write_str("IRON_BLOCK"),
            MaterialMaterialEnum::CopperBlock => f.write_str("COPPER_BLOCK"),
            MaterialMaterialEnum::GoldBlock => f.write_str("GOLD_BLOCK"),
            MaterialMaterialEnum::DiamondBlock => f.write_str("DIAMOND_BLOCK"),
            MaterialMaterialEnum::NetheriteBlock => f.write_str("NETHERITE_BLOCK"),
            MaterialMaterialEnum::ExposedCopper => f.write_str("EXPOSED_COPPER"),
            MaterialMaterialEnum::WeatheredCopper => f.write_str("WEATHERED_COPPER"),
            MaterialMaterialEnum::OxidizedCopper => f.write_str("OXIDIZED_COPPER"),
            MaterialMaterialEnum::CutCopper => f.write_str("CUT_COPPER"),
            MaterialMaterialEnum::ExposedCutCopper => f.write_str("EXPOSED_CUT_COPPER"),
            MaterialMaterialEnum::WeatheredCutCopper => f.write_str("WEATHERED_CUT_COPPER"),
            MaterialMaterialEnum::OxidizedCutCopper => f.write_str("OXIDIZED_CUT_COPPER"),
            MaterialMaterialEnum::CutCopperStairs => f.write_str("CUT_COPPER_STAIRS"),
            MaterialMaterialEnum::ExposedCutCopperStairs => {
                f.write_str("EXPOSED_CUT_COPPER_STAIRS")
            }
            MaterialMaterialEnum::WeatheredCutCopperStairs => {
                f.write_str("WEATHERED_CUT_COPPER_STAIRS")
            }
            MaterialMaterialEnum::OxidizedCutCopperStairs => {
                f.write_str("OXIDIZED_CUT_COPPER_STAIRS")
            }
            MaterialMaterialEnum::CutCopperSlab => f.write_str("CUT_COPPER_SLAB"),
            MaterialMaterialEnum::ExposedCutCopperSlab => f.write_str("EXPOSED_CUT_COPPER_SLAB"),
            MaterialMaterialEnum::WeatheredCutCopperSlab => {
                f.write_str("WEATHERED_CUT_COPPER_SLAB")
            }
            MaterialMaterialEnum::OxidizedCutCopperSlab => f.write_str("OXIDIZED_CUT_COPPER_SLAB"),
            MaterialMaterialEnum::WaxedCopperBlock => f.write_str("WAXED_COPPER_BLOCK"),
            MaterialMaterialEnum::WaxedExposedCopper => f.write_str("WAXED_EXPOSED_COPPER"),
            MaterialMaterialEnum::WaxedWeatheredCopper => f.write_str("WAXED_WEATHERED_COPPER"),
            MaterialMaterialEnum::WaxedOxidizedCopper => f.write_str("WAXED_OXIDIZED_COPPER"),
            MaterialMaterialEnum::WaxedCutCopper => f.write_str("WAXED_CUT_COPPER"),
            MaterialMaterialEnum::WaxedExposedCutCopper => f.write_str("WAXED_EXPOSED_CUT_COPPER"),
            MaterialMaterialEnum::WaxedWeatheredCutCopper => {
                f.write_str("WAXED_WEATHERED_CUT_COPPER")
            }
            MaterialMaterialEnum::WaxedOxidizedCutCopper => {
                f.write_str("WAXED_OXIDIZED_CUT_COPPER")
            }
            MaterialMaterialEnum::WaxedCutCopperStairs => f.write_str("WAXED_CUT_COPPER_STAIRS"),
            MaterialMaterialEnum::WaxedExposedCutCopperStairs => {
                f.write_str("WAXED_EXPOSED_CUT_COPPER_STAIRS")
            }
            MaterialMaterialEnum::WaxedWeatheredCutCopperStairs => {
                f.write_str("WAXED_WEATHERED_CUT_COPPER_STAIRS")
            }
            MaterialMaterialEnum::WaxedOxidizedCutCopperStairs => {
                f.write_str("WAXED_OXIDIZED_CUT_COPPER_STAIRS")
            }
            MaterialMaterialEnum::WaxedCutCopperSlab => f.write_str("WAXED_CUT_COPPER_SLAB"),
            MaterialMaterialEnum::WaxedExposedCutCopperSlab => {
                f.write_str("WAXED_EXPOSED_CUT_COPPER_SLAB")
            }
            MaterialMaterialEnum::WaxedWeatheredCutCopperSlab => {
                f.write_str("WAXED_WEATHERED_CUT_COPPER_SLAB")
            }
            MaterialMaterialEnum::WaxedOxidizedCutCopperSlab => {
                f.write_str("WAXED_OXIDIZED_CUT_COPPER_SLAB")
            }
            MaterialMaterialEnum::OakLog => f.write_str("OAK_LOG"),
            MaterialMaterialEnum::SpruceLog => f.write_str("SPRUCE_LOG"),
            MaterialMaterialEnum::BirchLog => f.write_str("BIRCH_LOG"),
            MaterialMaterialEnum::JungleLog => f.write_str("JUNGLE_LOG"),
            MaterialMaterialEnum::AcaciaLog => f.write_str("ACACIA_LOG"),
            MaterialMaterialEnum::CherryLog => f.write_str("CHERRY_LOG"),
            MaterialMaterialEnum::DarkOakLog => f.write_str("DARK_OAK_LOG"),
            MaterialMaterialEnum::MangroveLog => f.write_str("MANGROVE_LOG"),
            MaterialMaterialEnum::MangroveRoots => f.write_str("MANGROVE_ROOTS"),
            MaterialMaterialEnum::MuddyMangroveRoots => f.write_str("MUDDY_MANGROVE_ROOTS"),
            MaterialMaterialEnum::CrimsonStem => f.write_str("CRIMSON_STEM"),
            MaterialMaterialEnum::WarpedStem => f.write_str("WARPED_STEM"),
            MaterialMaterialEnum::BambooBlock => f.write_str("BAMBOO_BLOCK"),
            MaterialMaterialEnum::StrippedOakLog => f.write_str("STRIPPED_OAK_LOG"),
            MaterialMaterialEnum::StrippedSpruceLog => f.write_str("STRIPPED_SPRUCE_LOG"),
            MaterialMaterialEnum::StrippedBirchLog => f.write_str("STRIPPED_BIRCH_LOG"),
            MaterialMaterialEnum::StrippedJungleLog => f.write_str("STRIPPED_JUNGLE_LOG"),
            MaterialMaterialEnum::StrippedAcaciaLog => f.write_str("STRIPPED_ACACIA_LOG"),
            MaterialMaterialEnum::StrippedCherryLog => f.write_str("STRIPPED_CHERRY_LOG"),
            MaterialMaterialEnum::StrippedDarkOakLog => f.write_str("STRIPPED_DARK_OAK_LOG"),
            MaterialMaterialEnum::StrippedMangroveLog => f.write_str("STRIPPED_MANGROVE_LOG"),
            MaterialMaterialEnum::StrippedCrimsonStem => f.write_str("STRIPPED_CRIMSON_STEM"),
            MaterialMaterialEnum::StrippedWarpedStem => f.write_str("STRIPPED_WARPED_STEM"),
            MaterialMaterialEnum::StrippedOakWood => f.write_str("STRIPPED_OAK_WOOD"),
            MaterialMaterialEnum::StrippedSpruceWood => f.write_str("STRIPPED_SPRUCE_WOOD"),
            MaterialMaterialEnum::StrippedBirchWood => f.write_str("STRIPPED_BIRCH_WOOD"),
            MaterialMaterialEnum::StrippedJungleWood => f.write_str("STRIPPED_JUNGLE_WOOD"),
            MaterialMaterialEnum::StrippedAcaciaWood => f.write_str("STRIPPED_ACACIA_WOOD"),
            MaterialMaterialEnum::StrippedCherryWood => f.write_str("STRIPPED_CHERRY_WOOD"),
            MaterialMaterialEnum::StrippedDarkOakWood => f.write_str("STRIPPED_DARK_OAK_WOOD"),
            MaterialMaterialEnum::StrippedMangroveWood => f.write_str("STRIPPED_MANGROVE_WOOD"),
            MaterialMaterialEnum::StrippedCrimsonHyphae => f.write_str("STRIPPED_CRIMSON_HYPHAE"),
            MaterialMaterialEnum::StrippedWarpedHyphae => f.write_str("STRIPPED_WARPED_HYPHAE"),
            MaterialMaterialEnum::StrippedBambooBlock => f.write_str("STRIPPED_BAMBOO_BLOCK"),
            MaterialMaterialEnum::OakWood => f.write_str("OAK_WOOD"),
            MaterialMaterialEnum::SpruceWood => f.write_str("SPRUCE_WOOD"),
            MaterialMaterialEnum::BirchWood => f.write_str("BIRCH_WOOD"),
            MaterialMaterialEnum::JungleWood => f.write_str("JUNGLE_WOOD"),
            MaterialMaterialEnum::AcaciaWood => f.write_str("ACACIA_WOOD"),
            MaterialMaterialEnum::CherryWood => f.write_str("CHERRY_WOOD"),
            MaterialMaterialEnum::DarkOakWood => f.write_str("DARK_OAK_WOOD"),
            MaterialMaterialEnum::MangroveWood => f.write_str("MANGROVE_WOOD"),
            MaterialMaterialEnum::CrimsonHyphae => f.write_str("CRIMSON_HYPHAE"),
            MaterialMaterialEnum::WarpedHyphae => f.write_str("WARPED_HYPHAE"),
            MaterialMaterialEnum::OakLeaves => f.write_str("OAK_LEAVES"),
            MaterialMaterialEnum::SpruceLeaves => f.write_str("SPRUCE_LEAVES"),
            MaterialMaterialEnum::BirchLeaves => f.write_str("BIRCH_LEAVES"),
            MaterialMaterialEnum::JungleLeaves => f.write_str("JUNGLE_LEAVES"),
            MaterialMaterialEnum::AcaciaLeaves => f.write_str("ACACIA_LEAVES"),
            MaterialMaterialEnum::CherryLeaves => f.write_str("CHERRY_LEAVES"),
            MaterialMaterialEnum::DarkOakLeaves => f.write_str("DARK_OAK_LEAVES"),
            MaterialMaterialEnum::MangroveLeaves => f.write_str("MANGROVE_LEAVES"),
            MaterialMaterialEnum::AzaleaLeaves => f.write_str("AZALEA_LEAVES"),
            MaterialMaterialEnum::FloweringAzaleaLeaves => f.write_str("FLOWERING_AZALEA_LEAVES"),
            MaterialMaterialEnum::Sponge => f.write_str("SPONGE"),
            MaterialMaterialEnum::WetSponge => f.write_str("WET_SPONGE"),
            MaterialMaterialEnum::Glass => f.write_str("GLASS"),
            MaterialMaterialEnum::TintedGlass => f.write_str("TINTED_GLASS"),
            MaterialMaterialEnum::LapisBlock => f.write_str("LAPIS_BLOCK"),
            MaterialMaterialEnum::Sandstone => f.write_str("SANDSTONE"),
            MaterialMaterialEnum::ChiseledSandstone => f.write_str("CHISELED_SANDSTONE"),
            MaterialMaterialEnum::CutSandstone => f.write_str("CUT_SANDSTONE"),
            MaterialMaterialEnum::Cobweb => f.write_str("COBWEB"),
            MaterialMaterialEnum::Grass => f.write_str("GRASS"),
            MaterialMaterialEnum::Fern => f.write_str("FERN"),
            MaterialMaterialEnum::Azalea => f.write_str("AZALEA"),
            MaterialMaterialEnum::FloweringAzalea => f.write_str("FLOWERING_AZALEA"),
            MaterialMaterialEnum::DeadBush => f.write_str("DEAD_BUSH"),
            MaterialMaterialEnum::Seagrass => f.write_str("SEAGRASS"),
            MaterialMaterialEnum::SeaPickle => f.write_str("SEA_PICKLE"),
            MaterialMaterialEnum::WhiteWool => f.write_str("WHITE_WOOL"),
            MaterialMaterialEnum::OrangeWool => f.write_str("ORANGE_WOOL"),
            MaterialMaterialEnum::MagentaWool => f.write_str("MAGENTA_WOOL"),
            MaterialMaterialEnum::LightBlueWool => f.write_str("LIGHT_BLUE_WOOL"),
            MaterialMaterialEnum::YellowWool => f.write_str("YELLOW_WOOL"),
            MaterialMaterialEnum::LimeWool => f.write_str("LIME_WOOL"),
            MaterialMaterialEnum::PinkWool => f.write_str("PINK_WOOL"),
            MaterialMaterialEnum::GrayWool => f.write_str("GRAY_WOOL"),
            MaterialMaterialEnum::LightGrayWool => f.write_str("LIGHT_GRAY_WOOL"),
            MaterialMaterialEnum::CyanWool => f.write_str("CYAN_WOOL"),
            MaterialMaterialEnum::PurpleWool => f.write_str("PURPLE_WOOL"),
            MaterialMaterialEnum::BlueWool => f.write_str("BLUE_WOOL"),
            MaterialMaterialEnum::BrownWool => f.write_str("BROWN_WOOL"),
            MaterialMaterialEnum::GreenWool => f.write_str("GREEN_WOOL"),
            MaterialMaterialEnum::RedWool => f.write_str("RED_WOOL"),
            MaterialMaterialEnum::BlackWool => f.write_str("BLACK_WOOL"),
            MaterialMaterialEnum::Dandelion => f.write_str("DANDELION"),
            MaterialMaterialEnum::Poppy => f.write_str("POPPY"),
            MaterialMaterialEnum::BlueOrchid => f.write_str("BLUE_ORCHID"),
            MaterialMaterialEnum::Allium => f.write_str("ALLIUM"),
            MaterialMaterialEnum::AzureBluet => f.write_str("AZURE_BLUET"),
            MaterialMaterialEnum::RedTulip => f.write_str("RED_TULIP"),
            MaterialMaterialEnum::OrangeTulip => f.write_str("ORANGE_TULIP"),
            MaterialMaterialEnum::WhiteTulip => f.write_str("WHITE_TULIP"),
            MaterialMaterialEnum::PinkTulip => f.write_str("PINK_TULIP"),
            MaterialMaterialEnum::OxeyeDaisy => f.write_str("OXEYE_DAISY"),
            MaterialMaterialEnum::Cornflower => f.write_str("CORNFLOWER"),
            MaterialMaterialEnum::LilyOfTheValley => f.write_str("LILY_OF_THE_VALLEY"),
            MaterialMaterialEnum::WitherRose => f.write_str("WITHER_ROSE"),
            MaterialMaterialEnum::Torchflower => f.write_str("TORCHFLOWER"),
            MaterialMaterialEnum::PitcherPlant => f.write_str("PITCHER_PLANT"),
            MaterialMaterialEnum::SporeBlossom => f.write_str("SPORE_BLOSSOM"),
            MaterialMaterialEnum::BrownMushroom => f.write_str("BROWN_MUSHROOM"),
            MaterialMaterialEnum::RedMushroom => f.write_str("RED_MUSHROOM"),
            MaterialMaterialEnum::CrimsonFungus => f.write_str("CRIMSON_FUNGUS"),
            MaterialMaterialEnum::WarpedFungus => f.write_str("WARPED_FUNGUS"),
            MaterialMaterialEnum::CrimsonRoots => f.write_str("CRIMSON_ROOTS"),
            MaterialMaterialEnum::WarpedRoots => f.write_str("WARPED_ROOTS"),
            MaterialMaterialEnum::NetherSprouts => f.write_str("NETHER_SPROUTS"),
            MaterialMaterialEnum::WeepingVines => f.write_str("WEEPING_VINES"),
            MaterialMaterialEnum::TwistingVines => f.write_str("TWISTING_VINES"),
            MaterialMaterialEnum::SugarCane => f.write_str("SUGAR_CANE"),
            MaterialMaterialEnum::Kelp => f.write_str("KELP"),
            MaterialMaterialEnum::MossCarpet => f.write_str("MOSS_CARPET"),
            MaterialMaterialEnum::PinkPetals => f.write_str("PINK_PETALS"),
            MaterialMaterialEnum::MossBlock => f.write_str("MOSS_BLOCK"),
            MaterialMaterialEnum::HangingRoots => f.write_str("HANGING_ROOTS"),
            MaterialMaterialEnum::BigDripleaf => f.write_str("BIG_DRIPLEAF"),
            MaterialMaterialEnum::SmallDripleaf => f.write_str("SMALL_DRIPLEAF"),
            MaterialMaterialEnum::Bamboo => f.write_str("BAMBOO"),
            MaterialMaterialEnum::OakSlab => f.write_str("OAK_SLAB"),
            MaterialMaterialEnum::SpruceSlab => f.write_str("SPRUCE_SLAB"),
            MaterialMaterialEnum::BirchSlab => f.write_str("BIRCH_SLAB"),
            MaterialMaterialEnum::JungleSlab => f.write_str("JUNGLE_SLAB"),
            MaterialMaterialEnum::AcaciaSlab => f.write_str("ACACIA_SLAB"),
            MaterialMaterialEnum::CherrySlab => f.write_str("CHERRY_SLAB"),
            MaterialMaterialEnum::DarkOakSlab => f.write_str("DARK_OAK_SLAB"),
            MaterialMaterialEnum::MangroveSlab => f.write_str("MANGROVE_SLAB"),
            MaterialMaterialEnum::BambooSlab => f.write_str("BAMBOO_SLAB"),
            MaterialMaterialEnum::BambooMosaicSlab => f.write_str("BAMBOO_MOSAIC_SLAB"),
            MaterialMaterialEnum::CrimsonSlab => f.write_str("CRIMSON_SLAB"),
            MaterialMaterialEnum::WarpedSlab => f.write_str("WARPED_SLAB"),
            MaterialMaterialEnum::StoneSlab => f.write_str("STONE_SLAB"),
            MaterialMaterialEnum::SmoothStoneSlab => f.write_str("SMOOTH_STONE_SLAB"),
            MaterialMaterialEnum::SandstoneSlab => f.write_str("SANDSTONE_SLAB"),
            MaterialMaterialEnum::CutSandstoneSlab => f.write_str("CUT_SANDSTONE_SLAB"),
            MaterialMaterialEnum::PetrifiedOakSlab => f.write_str("PETRIFIED_OAK_SLAB"),
            MaterialMaterialEnum::CobblestoneSlab => f.write_str("COBBLESTONE_SLAB"),
            MaterialMaterialEnum::BrickSlab => f.write_str("BRICK_SLAB"),
            MaterialMaterialEnum::StoneBrickSlab => f.write_str("STONE_BRICK_SLAB"),
            MaterialMaterialEnum::MudBrickSlab => f.write_str("MUD_BRICK_SLAB"),
            MaterialMaterialEnum::NetherBrickSlab => f.write_str("NETHER_BRICK_SLAB"),
            MaterialMaterialEnum::QuartzSlab => f.write_str("QUARTZ_SLAB"),
            MaterialMaterialEnum::RedSandstoneSlab => f.write_str("RED_SANDSTONE_SLAB"),
            MaterialMaterialEnum::CutRedSandstoneSlab => f.write_str("CUT_RED_SANDSTONE_SLAB"),
            MaterialMaterialEnum::PurpurSlab => f.write_str("PURPUR_SLAB"),
            MaterialMaterialEnum::PrismarineSlab => f.write_str("PRISMARINE_SLAB"),
            MaterialMaterialEnum::PrismarineBrickSlab => f.write_str("PRISMARINE_BRICK_SLAB"),
            MaterialMaterialEnum::DarkPrismarineSlab => f.write_str("DARK_PRISMARINE_SLAB"),
            MaterialMaterialEnum::SmoothQuartz => f.write_str("SMOOTH_QUARTZ"),
            MaterialMaterialEnum::SmoothRedSandstone => f.write_str("SMOOTH_RED_SANDSTONE"),
            MaterialMaterialEnum::SmoothSandstone => f.write_str("SMOOTH_SANDSTONE"),
            MaterialMaterialEnum::SmoothStone => f.write_str("SMOOTH_STONE"),
            MaterialMaterialEnum::Bricks => f.write_str("BRICKS"),
            MaterialMaterialEnum::Bookshelf => f.write_str("BOOKSHELF"),
            MaterialMaterialEnum::ChiseledBookshelf => f.write_str("CHISELED_BOOKSHELF"),
            MaterialMaterialEnum::DecoratedPot => f.write_str("DECORATED_POT"),
            MaterialMaterialEnum::MossyCobblestone => f.write_str("MOSSY_COBBLESTONE"),
            MaterialMaterialEnum::Obsidian => f.write_str("OBSIDIAN"),
            MaterialMaterialEnum::Torch => f.write_str("TORCH"),
            MaterialMaterialEnum::EndRod => f.write_str("END_ROD"),
            MaterialMaterialEnum::ChorusPlant => f.write_str("CHORUS_PLANT"),
            MaterialMaterialEnum::ChorusFlower => f.write_str("CHORUS_FLOWER"),
            MaterialMaterialEnum::PurpurBlock => f.write_str("PURPUR_BLOCK"),
            MaterialMaterialEnum::PurpurPillar => f.write_str("PURPUR_PILLAR"),
            MaterialMaterialEnum::PurpurStairs => f.write_str("PURPUR_STAIRS"),
            MaterialMaterialEnum::Spawner => f.write_str("SPAWNER"),
            MaterialMaterialEnum::Chest => f.write_str("CHEST"),
            MaterialMaterialEnum::CraftingTable => f.write_str("CRAFTING_TABLE"),
            MaterialMaterialEnum::Farmland => f.write_str("FARMLAND"),
            MaterialMaterialEnum::Furnace => f.write_str("FURNACE"),
            MaterialMaterialEnum::Ladder => f.write_str("LADDER"),
            MaterialMaterialEnum::CobblestoneStairs => f.write_str("COBBLESTONE_STAIRS"),
            MaterialMaterialEnum::Snow => f.write_str("SNOW"),
            MaterialMaterialEnum::Ice => f.write_str("ICE"),
            MaterialMaterialEnum::SnowBlock => f.write_str("SNOW_BLOCK"),
            MaterialMaterialEnum::Cactus => f.write_str("CACTUS"),
            MaterialMaterialEnum::Clay => f.write_str("CLAY"),
            MaterialMaterialEnum::Jukebox => f.write_str("JUKEBOX"),
            MaterialMaterialEnum::OakFence => f.write_str("OAK_FENCE"),
            MaterialMaterialEnum::SpruceFence => f.write_str("SPRUCE_FENCE"),
            MaterialMaterialEnum::BirchFence => f.write_str("BIRCH_FENCE"),
            MaterialMaterialEnum::JungleFence => f.write_str("JUNGLE_FENCE"),
            MaterialMaterialEnum::AcaciaFence => f.write_str("ACACIA_FENCE"),
            MaterialMaterialEnum::CherryFence => f.write_str("CHERRY_FENCE"),
            MaterialMaterialEnum::DarkOakFence => f.write_str("DARK_OAK_FENCE"),
            MaterialMaterialEnum::MangroveFence => f.write_str("MANGROVE_FENCE"),
            MaterialMaterialEnum::BambooFence => f.write_str("BAMBOO_FENCE"),
            MaterialMaterialEnum::CrimsonFence => f.write_str("CRIMSON_FENCE"),
            MaterialMaterialEnum::WarpedFence => f.write_str("WARPED_FENCE"),
            MaterialMaterialEnum::Pumpkin => f.write_str("PUMPKIN"),
            MaterialMaterialEnum::CarvedPumpkin => f.write_str("CARVED_PUMPKIN"),
            MaterialMaterialEnum::JackOLantern => f.write_str("JACK_O_LANTERN"),
            MaterialMaterialEnum::Netherrack => f.write_str("NETHERRACK"),
            MaterialMaterialEnum::SoulSand => f.write_str("SOUL_SAND"),
            MaterialMaterialEnum::SoulSoil => f.write_str("SOUL_SOIL"),
            MaterialMaterialEnum::Basalt => f.write_str("BASALT"),
            MaterialMaterialEnum::PolishedBasalt => f.write_str("POLISHED_BASALT"),
            MaterialMaterialEnum::SmoothBasalt => f.write_str("SMOOTH_BASALT"),
            MaterialMaterialEnum::SoulTorch => f.write_str("SOUL_TORCH"),
            MaterialMaterialEnum::Glowstone => f.write_str("GLOWSTONE"),
            MaterialMaterialEnum::InfestedStone => f.write_str("INFESTED_STONE"),
            MaterialMaterialEnum::InfestedCobblestone => f.write_str("INFESTED_COBBLESTONE"),
            MaterialMaterialEnum::InfestedStoneBricks => f.write_str("INFESTED_STONE_BRICKS"),
            MaterialMaterialEnum::InfestedMossyStoneBricks => {
                f.write_str("INFESTED_MOSSY_STONE_BRICKS")
            }
            MaterialMaterialEnum::InfestedCrackedStoneBricks => {
                f.write_str("INFESTED_CRACKED_STONE_BRICKS")
            }
            MaterialMaterialEnum::InfestedChiseledStoneBricks => {
                f.write_str("INFESTED_CHISELED_STONE_BRICKS")
            }
            MaterialMaterialEnum::InfestedDeepslate => f.write_str("INFESTED_DEEPSLATE"),
            MaterialMaterialEnum::StoneBricks => f.write_str("STONE_BRICKS"),
            MaterialMaterialEnum::MossyStoneBricks => f.write_str("MOSSY_STONE_BRICKS"),
            MaterialMaterialEnum::CrackedStoneBricks => f.write_str("CRACKED_STONE_BRICKS"),
            MaterialMaterialEnum::ChiseledStoneBricks => f.write_str("CHISELED_STONE_BRICKS"),
            MaterialMaterialEnum::PackedMud => f.write_str("PACKED_MUD"),
            MaterialMaterialEnum::MudBricks => f.write_str("MUD_BRICKS"),
            MaterialMaterialEnum::DeepslateBricks => f.write_str("DEEPSLATE_BRICKS"),
            MaterialMaterialEnum::CrackedDeepslateBricks => f.write_str("CRACKED_DEEPSLATE_BRICKS"),
            MaterialMaterialEnum::DeepslateTiles => f.write_str("DEEPSLATE_TILES"),
            MaterialMaterialEnum::CrackedDeepslateTiles => f.write_str("CRACKED_DEEPSLATE_TILES"),
            MaterialMaterialEnum::ChiseledDeepslate => f.write_str("CHISELED_DEEPSLATE"),
            MaterialMaterialEnum::ReinforcedDeepslate => f.write_str("REINFORCED_DEEPSLATE"),
            MaterialMaterialEnum::BrownMushroomBlock => f.write_str("BROWN_MUSHROOM_BLOCK"),
            MaterialMaterialEnum::RedMushroomBlock => f.write_str("RED_MUSHROOM_BLOCK"),
            MaterialMaterialEnum::MushroomStem => f.write_str("MUSHROOM_STEM"),
            MaterialMaterialEnum::IronBars => f.write_str("IRON_BARS"),
            MaterialMaterialEnum::Chain => f.write_str("CHAIN"),
            MaterialMaterialEnum::GlassPane => f.write_str("GLASS_PANE"),
            MaterialMaterialEnum::Melon => f.write_str("MELON"),
            MaterialMaterialEnum::Vine => f.write_str("VINE"),
            MaterialMaterialEnum::GlowLichen => f.write_str("GLOW_LICHEN"),
            MaterialMaterialEnum::BrickStairs => f.write_str("BRICK_STAIRS"),
            MaterialMaterialEnum::StoneBrickStairs => f.write_str("STONE_BRICK_STAIRS"),
            MaterialMaterialEnum::MudBrickStairs => f.write_str("MUD_BRICK_STAIRS"),
            MaterialMaterialEnum::Mycelium => f.write_str("MYCELIUM"),
            MaterialMaterialEnum::LilyPad => f.write_str("LILY_PAD"),
            MaterialMaterialEnum::NetherBricks => f.write_str("NETHER_BRICKS"),
            MaterialMaterialEnum::CrackedNetherBricks => f.write_str("CRACKED_NETHER_BRICKS"),
            MaterialMaterialEnum::ChiseledNetherBricks => f.write_str("CHISELED_NETHER_BRICKS"),
            MaterialMaterialEnum::NetherBrickFence => f.write_str("NETHER_BRICK_FENCE"),
            MaterialMaterialEnum::NetherBrickStairs => f.write_str("NETHER_BRICK_STAIRS"),
            MaterialMaterialEnum::Sculk => f.write_str("SCULK"),
            MaterialMaterialEnum::SculkVein => f.write_str("SCULK_VEIN"),
            MaterialMaterialEnum::SculkCatalyst => f.write_str("SCULK_CATALYST"),
            MaterialMaterialEnum::SculkShrieker => f.write_str("SCULK_SHRIEKER"),
            MaterialMaterialEnum::EnchantingTable => f.write_str("ENCHANTING_TABLE"),
            MaterialMaterialEnum::EndPortalFrame => f.write_str("END_PORTAL_FRAME"),
            MaterialMaterialEnum::EndStone => f.write_str("END_STONE"),
            MaterialMaterialEnum::EndStoneBricks => f.write_str("END_STONE_BRICKS"),
            MaterialMaterialEnum::DragonEgg => f.write_str("DRAGON_EGG"),
            MaterialMaterialEnum::SandstoneStairs => f.write_str("SANDSTONE_STAIRS"),
            MaterialMaterialEnum::EnderChest => f.write_str("ENDER_CHEST"),
            MaterialMaterialEnum::EmeraldBlock => f.write_str("EMERALD_BLOCK"),
            MaterialMaterialEnum::OakStairs => f.write_str("OAK_STAIRS"),
            MaterialMaterialEnum::SpruceStairs => f.write_str("SPRUCE_STAIRS"),
            MaterialMaterialEnum::BirchStairs => f.write_str("BIRCH_STAIRS"),
            MaterialMaterialEnum::JungleStairs => f.write_str("JUNGLE_STAIRS"),
            MaterialMaterialEnum::AcaciaStairs => f.write_str("ACACIA_STAIRS"),
            MaterialMaterialEnum::CherryStairs => f.write_str("CHERRY_STAIRS"),
            MaterialMaterialEnum::DarkOakStairs => f.write_str("DARK_OAK_STAIRS"),
            MaterialMaterialEnum::MangroveStairs => f.write_str("MANGROVE_STAIRS"),
            MaterialMaterialEnum::BambooStairs => f.write_str("BAMBOO_STAIRS"),
            MaterialMaterialEnum::BambooMosaicStairs => f.write_str("BAMBOO_MOSAIC_STAIRS"),
            MaterialMaterialEnum::CrimsonStairs => f.write_str("CRIMSON_STAIRS"),
            MaterialMaterialEnum::WarpedStairs => f.write_str("WARPED_STAIRS"),
            MaterialMaterialEnum::CommandBlock => f.write_str("COMMAND_BLOCK"),
            MaterialMaterialEnum::Beacon => f.write_str("BEACON"),
            MaterialMaterialEnum::CobblestoneWall => f.write_str("COBBLESTONE_WALL"),
            MaterialMaterialEnum::MossyCobblestoneWall => f.write_str("MOSSY_COBBLESTONE_WALL"),
            MaterialMaterialEnum::BrickWall => f.write_str("BRICK_WALL"),
            MaterialMaterialEnum::PrismarineWall => f.write_str("PRISMARINE_WALL"),
            MaterialMaterialEnum::RedSandstoneWall => f.write_str("RED_SANDSTONE_WALL"),
            MaterialMaterialEnum::MossyStoneBrickWall => f.write_str("MOSSY_STONE_BRICK_WALL"),
            MaterialMaterialEnum::GraniteWall => f.write_str("GRANITE_WALL"),
            MaterialMaterialEnum::StoneBrickWall => f.write_str("STONE_BRICK_WALL"),
            MaterialMaterialEnum::MudBrickWall => f.write_str("MUD_BRICK_WALL"),
            MaterialMaterialEnum::NetherBrickWall => f.write_str("NETHER_BRICK_WALL"),
            MaterialMaterialEnum::AndesiteWall => f.write_str("ANDESITE_WALL"),
            MaterialMaterialEnum::RedNetherBrickWall => f.write_str("RED_NETHER_BRICK_WALL"),
            MaterialMaterialEnum::SandstoneWall => f.write_str("SANDSTONE_WALL"),
            MaterialMaterialEnum::EndStoneBrickWall => f.write_str("END_STONE_BRICK_WALL"),
            MaterialMaterialEnum::DioriteWall => f.write_str("DIORITE_WALL"),
            MaterialMaterialEnum::BlackstoneWall => f.write_str("BLACKSTONE_WALL"),
            MaterialMaterialEnum::PolishedBlackstoneWall => f.write_str("POLISHED_BLACKSTONE_WALL"),
            MaterialMaterialEnum::PolishedBlackstoneBrickWall => {
                f.write_str("POLISHED_BLACKSTONE_BRICK_WALL")
            }
            MaterialMaterialEnum::CobbledDeepslateWall => f.write_str("COBBLED_DEEPSLATE_WALL"),
            MaterialMaterialEnum::PolishedDeepslateWall => f.write_str("POLISHED_DEEPSLATE_WALL"),
            MaterialMaterialEnum::DeepslateBrickWall => f.write_str("DEEPSLATE_BRICK_WALL"),
            MaterialMaterialEnum::DeepslateTileWall => f.write_str("DEEPSLATE_TILE_WALL"),
            MaterialMaterialEnum::Anvil => f.write_str("ANVIL"),
            MaterialMaterialEnum::ChippedAnvil => f.write_str("CHIPPED_ANVIL"),
            MaterialMaterialEnum::DamagedAnvil => f.write_str("DAMAGED_ANVIL"),
            MaterialMaterialEnum::ChiseledQuartzBlock => f.write_str("CHISELED_QUARTZ_BLOCK"),
            MaterialMaterialEnum::QuartzBlock => f.write_str("QUARTZ_BLOCK"),
            MaterialMaterialEnum::QuartzBricks => f.write_str("QUARTZ_BRICKS"),
            MaterialMaterialEnum::QuartzPillar => f.write_str("QUARTZ_PILLAR"),
            MaterialMaterialEnum::QuartzStairs => f.write_str("QUARTZ_STAIRS"),
            MaterialMaterialEnum::WhiteTerracotta => f.write_str("WHITE_TERRACOTTA"),
            MaterialMaterialEnum::OrangeTerracotta => f.write_str("ORANGE_TERRACOTTA"),
            MaterialMaterialEnum::MagentaTerracotta => f.write_str("MAGENTA_TERRACOTTA"),
            MaterialMaterialEnum::LightBlueTerracotta => f.write_str("LIGHT_BLUE_TERRACOTTA"),
            MaterialMaterialEnum::YellowTerracotta => f.write_str("YELLOW_TERRACOTTA"),
            MaterialMaterialEnum::LimeTerracotta => f.write_str("LIME_TERRACOTTA"),
            MaterialMaterialEnum::PinkTerracotta => f.write_str("PINK_TERRACOTTA"),
            MaterialMaterialEnum::GrayTerracotta => f.write_str("GRAY_TERRACOTTA"),
            MaterialMaterialEnum::LightGrayTerracotta => f.write_str("LIGHT_GRAY_TERRACOTTA"),
            MaterialMaterialEnum::CyanTerracotta => f.write_str("CYAN_TERRACOTTA"),
            MaterialMaterialEnum::PurpleTerracotta => f.write_str("PURPLE_TERRACOTTA"),
            MaterialMaterialEnum::BlueTerracotta => f.write_str("BLUE_TERRACOTTA"),
            MaterialMaterialEnum::BrownTerracotta => f.write_str("BROWN_TERRACOTTA"),
            MaterialMaterialEnum::GreenTerracotta => f.write_str("GREEN_TERRACOTTA"),
            MaterialMaterialEnum::RedTerracotta => f.write_str("RED_TERRACOTTA"),
            MaterialMaterialEnum::BlackTerracotta => f.write_str("BLACK_TERRACOTTA"),
            MaterialMaterialEnum::Barrier => f.write_str("BARRIER"),
            MaterialMaterialEnum::Light => f.write_str("LIGHT"),
            MaterialMaterialEnum::HayBlock => f.write_str("HAY_BLOCK"),
            MaterialMaterialEnum::WhiteCarpet => f.write_str("WHITE_CARPET"),
            MaterialMaterialEnum::OrangeCarpet => f.write_str("ORANGE_CARPET"),
            MaterialMaterialEnum::MagentaCarpet => f.write_str("MAGENTA_CARPET"),
            MaterialMaterialEnum::LightBlueCarpet => f.write_str("LIGHT_BLUE_CARPET"),
            MaterialMaterialEnum::YellowCarpet => f.write_str("YELLOW_CARPET"),
            MaterialMaterialEnum::LimeCarpet => f.write_str("LIME_CARPET"),
            MaterialMaterialEnum::PinkCarpet => f.write_str("PINK_CARPET"),
            MaterialMaterialEnum::GrayCarpet => f.write_str("GRAY_CARPET"),
            MaterialMaterialEnum::LightGrayCarpet => f.write_str("LIGHT_GRAY_CARPET"),
            MaterialMaterialEnum::CyanCarpet => f.write_str("CYAN_CARPET"),
            MaterialMaterialEnum::PurpleCarpet => f.write_str("PURPLE_CARPET"),
            MaterialMaterialEnum::BlueCarpet => f.write_str("BLUE_CARPET"),
            MaterialMaterialEnum::BrownCarpet => f.write_str("BROWN_CARPET"),
            MaterialMaterialEnum::GreenCarpet => f.write_str("GREEN_CARPET"),
            MaterialMaterialEnum::RedCarpet => f.write_str("RED_CARPET"),
            MaterialMaterialEnum::BlackCarpet => f.write_str("BLACK_CARPET"),
            MaterialMaterialEnum::Terracotta => f.write_str("TERRACOTTA"),
            MaterialMaterialEnum::PackedIce => f.write_str("PACKED_ICE"),
            MaterialMaterialEnum::DirtPath => f.write_str("DIRT_PATH"),
            MaterialMaterialEnum::Sunflower => f.write_str("SUNFLOWER"),
            MaterialMaterialEnum::Lilac => f.write_str("LILAC"),
            MaterialMaterialEnum::RoseBush => f.write_str("ROSE_BUSH"),
            MaterialMaterialEnum::Peony => f.write_str("PEONY"),
            MaterialMaterialEnum::TallGrass => f.write_str("TALL_GRASS"),
            MaterialMaterialEnum::LargeFern => f.write_str("LARGE_FERN"),
            MaterialMaterialEnum::WhiteStainedGlass => f.write_str("WHITE_STAINED_GLASS"),
            MaterialMaterialEnum::OrangeStainedGlass => f.write_str("ORANGE_STAINED_GLASS"),
            MaterialMaterialEnum::MagentaStainedGlass => f.write_str("MAGENTA_STAINED_GLASS"),
            MaterialMaterialEnum::LightBlueStainedGlass => f.write_str("LIGHT_BLUE_STAINED_GLASS"),
            MaterialMaterialEnum::YellowStainedGlass => f.write_str("YELLOW_STAINED_GLASS"),
            MaterialMaterialEnum::LimeStainedGlass => f.write_str("LIME_STAINED_GLASS"),
            MaterialMaterialEnum::PinkStainedGlass => f.write_str("PINK_STAINED_GLASS"),
            MaterialMaterialEnum::GrayStainedGlass => f.write_str("GRAY_STAINED_GLASS"),
            MaterialMaterialEnum::LightGrayStainedGlass => f.write_str("LIGHT_GRAY_STAINED_GLASS"),
            MaterialMaterialEnum::CyanStainedGlass => f.write_str("CYAN_STAINED_GLASS"),
            MaterialMaterialEnum::PurpleStainedGlass => f.write_str("PURPLE_STAINED_GLASS"),
            MaterialMaterialEnum::BlueStainedGlass => f.write_str("BLUE_STAINED_GLASS"),
            MaterialMaterialEnum::BrownStainedGlass => f.write_str("BROWN_STAINED_GLASS"),
            MaterialMaterialEnum::GreenStainedGlass => f.write_str("GREEN_STAINED_GLASS"),
            MaterialMaterialEnum::RedStainedGlass => f.write_str("RED_STAINED_GLASS"),
            MaterialMaterialEnum::BlackStainedGlass => f.write_str("BLACK_STAINED_GLASS"),
            MaterialMaterialEnum::WhiteStainedGlassPane => f.write_str("WHITE_STAINED_GLASS_PANE"),
            MaterialMaterialEnum::OrangeStainedGlassPane => {
                f.write_str("ORANGE_STAINED_GLASS_PANE")
            }
            MaterialMaterialEnum::MagentaStainedGlassPane => {
                f.write_str("MAGENTA_STAINED_GLASS_PANE")
            }
            MaterialMaterialEnum::LightBlueStainedGlassPane => {
                f.write_str("LIGHT_BLUE_STAINED_GLASS_PANE")
            }
            MaterialMaterialEnum::YellowStainedGlassPane => {
                f.write_str("YELLOW_STAINED_GLASS_PANE")
            }
            MaterialMaterialEnum::LimeStainedGlassPane => f.write_str("LIME_STAINED_GLASS_PANE"),
            MaterialMaterialEnum::PinkStainedGlassPane => f.write_str("PINK_STAINED_GLASS_PANE"),
            MaterialMaterialEnum::GrayStainedGlassPane => f.write_str("GRAY_STAINED_GLASS_PANE"),
            MaterialMaterialEnum::LightGrayStainedGlassPane => {
                f.write_str("LIGHT_GRAY_STAINED_GLASS_PANE")
            }
            MaterialMaterialEnum::CyanStainedGlassPane => f.write_str("CYAN_STAINED_GLASS_PANE"),
            MaterialMaterialEnum::PurpleStainedGlassPane => {
                f.write_str("PURPLE_STAINED_GLASS_PANE")
            }
            MaterialMaterialEnum::BlueStainedGlassPane => f.write_str("BLUE_STAINED_GLASS_PANE"),
            MaterialMaterialEnum::BrownStainedGlassPane => f.write_str("BROWN_STAINED_GLASS_PANE"),
            MaterialMaterialEnum::GreenStainedGlassPane => f.write_str("GREEN_STAINED_GLASS_PANE"),
            MaterialMaterialEnum::RedStainedGlassPane => f.write_str("RED_STAINED_GLASS_PANE"),
            MaterialMaterialEnum::BlackStainedGlassPane => f.write_str("BLACK_STAINED_GLASS_PANE"),
            MaterialMaterialEnum::Prismarine => f.write_str("PRISMARINE"),
            MaterialMaterialEnum::PrismarineBricks => f.write_str("PRISMARINE_BRICKS"),
            MaterialMaterialEnum::DarkPrismarine => f.write_str("DARK_PRISMARINE"),
            MaterialMaterialEnum::PrismarineStairs => f.write_str("PRISMARINE_STAIRS"),
            MaterialMaterialEnum::PrismarineBrickStairs => f.write_str("PRISMARINE_BRICK_STAIRS"),
            MaterialMaterialEnum::DarkPrismarineStairs => f.write_str("DARK_PRISMARINE_STAIRS"),
            MaterialMaterialEnum::SeaLantern => f.write_str("SEA_LANTERN"),
            MaterialMaterialEnum::RedSandstone => f.write_str("RED_SANDSTONE"),
            MaterialMaterialEnum::ChiseledRedSandstone => f.write_str("CHISELED_RED_SANDSTONE"),
            MaterialMaterialEnum::CutRedSandstone => f.write_str("CUT_RED_SANDSTONE"),
            MaterialMaterialEnum::RedSandstoneStairs => f.write_str("RED_SANDSTONE_STAIRS"),
            MaterialMaterialEnum::RepeatingCommandBlock => f.write_str("REPEATING_COMMAND_BLOCK"),
            MaterialMaterialEnum::ChainCommandBlock => f.write_str("CHAIN_COMMAND_BLOCK"),
            MaterialMaterialEnum::MagmaBlock => f.write_str("MAGMA_BLOCK"),
            MaterialMaterialEnum::NetherWartBlock => f.write_str("NETHER_WART_BLOCK"),
            MaterialMaterialEnum::WarpedWartBlock => f.write_str("WARPED_WART_BLOCK"),
            MaterialMaterialEnum::RedNetherBricks => f.write_str("RED_NETHER_BRICKS"),
            MaterialMaterialEnum::BoneBlock => f.write_str("BONE_BLOCK"),
            MaterialMaterialEnum::StructureVoid => f.write_str("STRUCTURE_VOID"),
            MaterialMaterialEnum::ShulkerBox => f.write_str("SHULKER_BOX"),
            MaterialMaterialEnum::WhiteShulkerBox => f.write_str("WHITE_SHULKER_BOX"),
            MaterialMaterialEnum::OrangeShulkerBox => f.write_str("ORANGE_SHULKER_BOX"),
            MaterialMaterialEnum::MagentaShulkerBox => f.write_str("MAGENTA_SHULKER_BOX"),
            MaterialMaterialEnum::LightBlueShulkerBox => f.write_str("LIGHT_BLUE_SHULKER_BOX"),
            MaterialMaterialEnum::YellowShulkerBox => f.write_str("YELLOW_SHULKER_BOX"),
            MaterialMaterialEnum::LimeShulkerBox => f.write_str("LIME_SHULKER_BOX"),
            MaterialMaterialEnum::PinkShulkerBox => f.write_str("PINK_SHULKER_BOX"),
            MaterialMaterialEnum::GrayShulkerBox => f.write_str("GRAY_SHULKER_BOX"),
            MaterialMaterialEnum::LightGrayShulkerBox => f.write_str("LIGHT_GRAY_SHULKER_BOX"),
            MaterialMaterialEnum::CyanShulkerBox => f.write_str("CYAN_SHULKER_BOX"),
            MaterialMaterialEnum::PurpleShulkerBox => f.write_str("PURPLE_SHULKER_BOX"),
            MaterialMaterialEnum::BlueShulkerBox => f.write_str("BLUE_SHULKER_BOX"),
            MaterialMaterialEnum::BrownShulkerBox => f.write_str("BROWN_SHULKER_BOX"),
            MaterialMaterialEnum::GreenShulkerBox => f.write_str("GREEN_SHULKER_BOX"),
            MaterialMaterialEnum::RedShulkerBox => f.write_str("RED_SHULKER_BOX"),
            MaterialMaterialEnum::BlackShulkerBox => f.write_str("BLACK_SHULKER_BOX"),
            MaterialMaterialEnum::WhiteGlazedTerracotta => f.write_str("WHITE_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::OrangeGlazedTerracotta => f.write_str("ORANGE_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::MagentaGlazedTerracotta => {
                f.write_str("MAGENTA_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LightBlueGlazedTerracotta => {
                f.write_str("LIGHT_BLUE_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::YellowGlazedTerracotta => f.write_str("YELLOW_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::LimeGlazedTerracotta => f.write_str("LIME_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::PinkGlazedTerracotta => f.write_str("PINK_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::GrayGlazedTerracotta => f.write_str("GRAY_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::LightGrayGlazedTerracotta => {
                f.write_str("LIGHT_GRAY_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::CyanGlazedTerracotta => f.write_str("CYAN_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::PurpleGlazedTerracotta => f.write_str("PURPLE_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::BlueGlazedTerracotta => f.write_str("BLUE_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::BrownGlazedTerracotta => f.write_str("BROWN_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::GreenGlazedTerracotta => f.write_str("GREEN_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::RedGlazedTerracotta => f.write_str("RED_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::BlackGlazedTerracotta => f.write_str("BLACK_GLAZED_TERRACOTTA"),
            MaterialMaterialEnum::WhiteConcrete => f.write_str("WHITE_CONCRETE"),
            MaterialMaterialEnum::OrangeConcrete => f.write_str("ORANGE_CONCRETE"),
            MaterialMaterialEnum::MagentaConcrete => f.write_str("MAGENTA_CONCRETE"),
            MaterialMaterialEnum::LightBlueConcrete => f.write_str("LIGHT_BLUE_CONCRETE"),
            MaterialMaterialEnum::YellowConcrete => f.write_str("YELLOW_CONCRETE"),
            MaterialMaterialEnum::LimeConcrete => f.write_str("LIME_CONCRETE"),
            MaterialMaterialEnum::PinkConcrete => f.write_str("PINK_CONCRETE"),
            MaterialMaterialEnum::GrayConcrete => f.write_str("GRAY_CONCRETE"),
            MaterialMaterialEnum::LightGrayConcrete => f.write_str("LIGHT_GRAY_CONCRETE"),
            MaterialMaterialEnum::CyanConcrete => f.write_str("CYAN_CONCRETE"),
            MaterialMaterialEnum::PurpleConcrete => f.write_str("PURPLE_CONCRETE"),
            MaterialMaterialEnum::BlueConcrete => f.write_str("BLUE_CONCRETE"),
            MaterialMaterialEnum::BrownConcrete => f.write_str("BROWN_CONCRETE"),
            MaterialMaterialEnum::GreenConcrete => f.write_str("GREEN_CONCRETE"),
            MaterialMaterialEnum::RedConcrete => f.write_str("RED_CONCRETE"),
            MaterialMaterialEnum::BlackConcrete => f.write_str("BLACK_CONCRETE"),
            MaterialMaterialEnum::WhiteConcretePowder => f.write_str("WHITE_CONCRETE_POWDER"),
            MaterialMaterialEnum::OrangeConcretePowder => f.write_str("ORANGE_CONCRETE_POWDER"),
            MaterialMaterialEnum::MagentaConcretePowder => f.write_str("MAGENTA_CONCRETE_POWDER"),
            MaterialMaterialEnum::LightBlueConcretePowder => {
                f.write_str("LIGHT_BLUE_CONCRETE_POWDER")
            }
            MaterialMaterialEnum::YellowConcretePowder => f.write_str("YELLOW_CONCRETE_POWDER"),
            MaterialMaterialEnum::LimeConcretePowder => f.write_str("LIME_CONCRETE_POWDER"),
            MaterialMaterialEnum::PinkConcretePowder => f.write_str("PINK_CONCRETE_POWDER"),
            MaterialMaterialEnum::GrayConcretePowder => f.write_str("GRAY_CONCRETE_POWDER"),
            MaterialMaterialEnum::LightGrayConcretePowder => {
                f.write_str("LIGHT_GRAY_CONCRETE_POWDER")
            }
            MaterialMaterialEnum::CyanConcretePowder => f.write_str("CYAN_CONCRETE_POWDER"),
            MaterialMaterialEnum::PurpleConcretePowder => f.write_str("PURPLE_CONCRETE_POWDER"),
            MaterialMaterialEnum::BlueConcretePowder => f.write_str("BLUE_CONCRETE_POWDER"),
            MaterialMaterialEnum::BrownConcretePowder => f.write_str("BROWN_CONCRETE_POWDER"),
            MaterialMaterialEnum::GreenConcretePowder => f.write_str("GREEN_CONCRETE_POWDER"),
            MaterialMaterialEnum::RedConcretePowder => f.write_str("RED_CONCRETE_POWDER"),
            MaterialMaterialEnum::BlackConcretePowder => f.write_str("BLACK_CONCRETE_POWDER"),
            MaterialMaterialEnum::TurtleEgg => f.write_str("TURTLE_EGG"),
            MaterialMaterialEnum::SnifferEgg => f.write_str("SNIFFER_EGG"),
            MaterialMaterialEnum::DeadTubeCoralBlock => f.write_str("DEAD_TUBE_CORAL_BLOCK"),
            MaterialMaterialEnum::DeadBrainCoralBlock => f.write_str("DEAD_BRAIN_CORAL_BLOCK"),
            MaterialMaterialEnum::DeadBubbleCoralBlock => f.write_str("DEAD_BUBBLE_CORAL_BLOCK"),
            MaterialMaterialEnum::DeadFireCoralBlock => f.write_str("DEAD_FIRE_CORAL_BLOCK"),
            MaterialMaterialEnum::DeadHornCoralBlock => f.write_str("DEAD_HORN_CORAL_BLOCK"),
            MaterialMaterialEnum::TubeCoralBlock => f.write_str("TUBE_CORAL_BLOCK"),
            MaterialMaterialEnum::BrainCoralBlock => f.write_str("BRAIN_CORAL_BLOCK"),
            MaterialMaterialEnum::BubbleCoralBlock => f.write_str("BUBBLE_CORAL_BLOCK"),
            MaterialMaterialEnum::FireCoralBlock => f.write_str("FIRE_CORAL_BLOCK"),
            MaterialMaterialEnum::HornCoralBlock => f.write_str("HORN_CORAL_BLOCK"),
            MaterialMaterialEnum::TubeCoral => f.write_str("TUBE_CORAL"),
            MaterialMaterialEnum::BrainCoral => f.write_str("BRAIN_CORAL"),
            MaterialMaterialEnum::BubbleCoral => f.write_str("BUBBLE_CORAL"),
            MaterialMaterialEnum::FireCoral => f.write_str("FIRE_CORAL"),
            MaterialMaterialEnum::HornCoral => f.write_str("HORN_CORAL"),
            MaterialMaterialEnum::DeadBrainCoral => f.write_str("DEAD_BRAIN_CORAL"),
            MaterialMaterialEnum::DeadBubbleCoral => f.write_str("DEAD_BUBBLE_CORAL"),
            MaterialMaterialEnum::DeadFireCoral => f.write_str("DEAD_FIRE_CORAL"),
            MaterialMaterialEnum::DeadHornCoral => f.write_str("DEAD_HORN_CORAL"),
            MaterialMaterialEnum::DeadTubeCoral => f.write_str("DEAD_TUBE_CORAL"),
            MaterialMaterialEnum::TubeCoralFan => f.write_str("TUBE_CORAL_FAN"),
            MaterialMaterialEnum::BrainCoralFan => f.write_str("BRAIN_CORAL_FAN"),
            MaterialMaterialEnum::BubbleCoralFan => f.write_str("BUBBLE_CORAL_FAN"),
            MaterialMaterialEnum::FireCoralFan => f.write_str("FIRE_CORAL_FAN"),
            MaterialMaterialEnum::HornCoralFan => f.write_str("HORN_CORAL_FAN"),
            MaterialMaterialEnum::DeadTubeCoralFan => f.write_str("DEAD_TUBE_CORAL_FAN"),
            MaterialMaterialEnum::DeadBrainCoralFan => f.write_str("DEAD_BRAIN_CORAL_FAN"),
            MaterialMaterialEnum::DeadBubbleCoralFan => f.write_str("DEAD_BUBBLE_CORAL_FAN"),
            MaterialMaterialEnum::DeadFireCoralFan => f.write_str("DEAD_FIRE_CORAL_FAN"),
            MaterialMaterialEnum::DeadHornCoralFan => f.write_str("DEAD_HORN_CORAL_FAN"),
            MaterialMaterialEnum::BlueIce => f.write_str("BLUE_ICE"),
            MaterialMaterialEnum::Conduit => f.write_str("CONDUIT"),
            MaterialMaterialEnum::PolishedGraniteStairs => f.write_str("POLISHED_GRANITE_STAIRS"),
            MaterialMaterialEnum::SmoothRedSandstoneStairs => {
                f.write_str("SMOOTH_RED_SANDSTONE_STAIRS")
            }
            MaterialMaterialEnum::MossyStoneBrickStairs => f.write_str("MOSSY_STONE_BRICK_STAIRS"),
            MaterialMaterialEnum::PolishedDioriteStairs => f.write_str("POLISHED_DIORITE_STAIRS"),
            MaterialMaterialEnum::MossyCobblestoneStairs => f.write_str("MOSSY_COBBLESTONE_STAIRS"),
            MaterialMaterialEnum::EndStoneBrickStairs => f.write_str("END_STONE_BRICK_STAIRS"),
            MaterialMaterialEnum::StoneStairs => f.write_str("STONE_STAIRS"),
            MaterialMaterialEnum::SmoothSandstoneStairs => f.write_str("SMOOTH_SANDSTONE_STAIRS"),
            MaterialMaterialEnum::SmoothQuartzStairs => f.write_str("SMOOTH_QUARTZ_STAIRS"),
            MaterialMaterialEnum::GraniteStairs => f.write_str("GRANITE_STAIRS"),
            MaterialMaterialEnum::AndesiteStairs => f.write_str("ANDESITE_STAIRS"),
            MaterialMaterialEnum::RedNetherBrickStairs => f.write_str("RED_NETHER_BRICK_STAIRS"),
            MaterialMaterialEnum::PolishedAndesiteStairs => f.write_str("POLISHED_ANDESITE_STAIRS"),
            MaterialMaterialEnum::DioriteStairs => f.write_str("DIORITE_STAIRS"),
            MaterialMaterialEnum::CobbledDeepslateStairs => f.write_str("COBBLED_DEEPSLATE_STAIRS"),
            MaterialMaterialEnum::PolishedDeepslateStairs => {
                f.write_str("POLISHED_DEEPSLATE_STAIRS")
            }
            MaterialMaterialEnum::DeepslateBrickStairs => f.write_str("DEEPSLATE_BRICK_STAIRS"),
            MaterialMaterialEnum::DeepslateTileStairs => f.write_str("DEEPSLATE_TILE_STAIRS"),
            MaterialMaterialEnum::PolishedGraniteSlab => f.write_str("POLISHED_GRANITE_SLAB"),
            MaterialMaterialEnum::SmoothRedSandstoneSlab => {
                f.write_str("SMOOTH_RED_SANDSTONE_SLAB")
            }
            MaterialMaterialEnum::MossyStoneBrickSlab => f.write_str("MOSSY_STONE_BRICK_SLAB"),
            MaterialMaterialEnum::PolishedDioriteSlab => f.write_str("POLISHED_DIORITE_SLAB"),
            MaterialMaterialEnum::MossyCobblestoneSlab => f.write_str("MOSSY_COBBLESTONE_SLAB"),
            MaterialMaterialEnum::EndStoneBrickSlab => f.write_str("END_STONE_BRICK_SLAB"),
            MaterialMaterialEnum::SmoothSandstoneSlab => f.write_str("SMOOTH_SANDSTONE_SLAB"),
            MaterialMaterialEnum::SmoothQuartzSlab => f.write_str("SMOOTH_QUARTZ_SLAB"),
            MaterialMaterialEnum::GraniteSlab => f.write_str("GRANITE_SLAB"),
            MaterialMaterialEnum::AndesiteSlab => f.write_str("ANDESITE_SLAB"),
            MaterialMaterialEnum::RedNetherBrickSlab => f.write_str("RED_NETHER_BRICK_SLAB"),
            MaterialMaterialEnum::PolishedAndesiteSlab => f.write_str("POLISHED_ANDESITE_SLAB"),
            MaterialMaterialEnum::DioriteSlab => f.write_str("DIORITE_SLAB"),
            MaterialMaterialEnum::CobbledDeepslateSlab => f.write_str("COBBLED_DEEPSLATE_SLAB"),
            MaterialMaterialEnum::PolishedDeepslateSlab => f.write_str("POLISHED_DEEPSLATE_SLAB"),
            MaterialMaterialEnum::DeepslateBrickSlab => f.write_str("DEEPSLATE_BRICK_SLAB"),
            MaterialMaterialEnum::DeepslateTileSlab => f.write_str("DEEPSLATE_TILE_SLAB"),
            MaterialMaterialEnum::Scaffolding => f.write_str("SCAFFOLDING"),
            MaterialMaterialEnum::Redstone => f.write_str("REDSTONE"),
            MaterialMaterialEnum::RedstoneTorch => f.write_str("REDSTONE_TORCH"),
            MaterialMaterialEnum::RedstoneBlock => f.write_str("REDSTONE_BLOCK"),
            MaterialMaterialEnum::Repeater => f.write_str("REPEATER"),
            MaterialMaterialEnum::Comparator => f.write_str("COMPARATOR"),
            MaterialMaterialEnum::Piston => f.write_str("PISTON"),
            MaterialMaterialEnum::StickyPiston => f.write_str("STICKY_PISTON"),
            MaterialMaterialEnum::SlimeBlock => f.write_str("SLIME_BLOCK"),
            MaterialMaterialEnum::HoneyBlock => f.write_str("HONEY_BLOCK"),
            MaterialMaterialEnum::Observer => f.write_str("OBSERVER"),
            MaterialMaterialEnum::Hopper => f.write_str("HOPPER"),
            MaterialMaterialEnum::Dispenser => f.write_str("DISPENSER"),
            MaterialMaterialEnum::Dropper => f.write_str("DROPPER"),
            MaterialMaterialEnum::Lectern => f.write_str("LECTERN"),
            MaterialMaterialEnum::Target => f.write_str("TARGET"),
            MaterialMaterialEnum::Lever => f.write_str("LEVER"),
            MaterialMaterialEnum::LightningRod => f.write_str("LIGHTNING_ROD"),
            MaterialMaterialEnum::DaylightDetector => f.write_str("DAYLIGHT_DETECTOR"),
            MaterialMaterialEnum::SculkSensor => f.write_str("SCULK_SENSOR"),
            MaterialMaterialEnum::CalibratedSculkSensor => f.write_str("CALIBRATED_SCULK_SENSOR"),
            MaterialMaterialEnum::TripwireHook => f.write_str("TRIPWIRE_HOOK"),
            MaterialMaterialEnum::TrappedChest => f.write_str("TRAPPED_CHEST"),
            MaterialMaterialEnum::Tnt => f.write_str("TNT"),
            MaterialMaterialEnum::RedstoneLamp => f.write_str("REDSTONE_LAMP"),
            MaterialMaterialEnum::NoteBlock => f.write_str("NOTE_BLOCK"),
            MaterialMaterialEnum::StoneButton => f.write_str("STONE_BUTTON"),
            MaterialMaterialEnum::PolishedBlackstoneButton => {
                f.write_str("POLISHED_BLACKSTONE_BUTTON")
            }
            MaterialMaterialEnum::OakButton => f.write_str("OAK_BUTTON"),
            MaterialMaterialEnum::SpruceButton => f.write_str("SPRUCE_BUTTON"),
            MaterialMaterialEnum::BirchButton => f.write_str("BIRCH_BUTTON"),
            MaterialMaterialEnum::JungleButton => f.write_str("JUNGLE_BUTTON"),
            MaterialMaterialEnum::AcaciaButton => f.write_str("ACACIA_BUTTON"),
            MaterialMaterialEnum::CherryButton => f.write_str("CHERRY_BUTTON"),
            MaterialMaterialEnum::DarkOakButton => f.write_str("DARK_OAK_BUTTON"),
            MaterialMaterialEnum::MangroveButton => f.write_str("MANGROVE_BUTTON"),
            MaterialMaterialEnum::BambooButton => f.write_str("BAMBOO_BUTTON"),
            MaterialMaterialEnum::CrimsonButton => f.write_str("CRIMSON_BUTTON"),
            MaterialMaterialEnum::WarpedButton => f.write_str("WARPED_BUTTON"),
            MaterialMaterialEnum::StonePressurePlate => f.write_str("STONE_PRESSURE_PLATE"),
            MaterialMaterialEnum::PolishedBlackstonePressurePlate => {
                f.write_str("POLISHED_BLACKSTONE_PRESSURE_PLATE")
            }
            MaterialMaterialEnum::LightWeightedPressurePlate => {
                f.write_str("LIGHT_WEIGHTED_PRESSURE_PLATE")
            }
            MaterialMaterialEnum::HeavyWeightedPressurePlate => {
                f.write_str("HEAVY_WEIGHTED_PRESSURE_PLATE")
            }
            MaterialMaterialEnum::OakPressurePlate => f.write_str("OAK_PRESSURE_PLATE"),
            MaterialMaterialEnum::SprucePressurePlate => f.write_str("SPRUCE_PRESSURE_PLATE"),
            MaterialMaterialEnum::BirchPressurePlate => f.write_str("BIRCH_PRESSURE_PLATE"),
            MaterialMaterialEnum::JunglePressurePlate => f.write_str("JUNGLE_PRESSURE_PLATE"),
            MaterialMaterialEnum::AcaciaPressurePlate => f.write_str("ACACIA_PRESSURE_PLATE"),
            MaterialMaterialEnum::CherryPressurePlate => f.write_str("CHERRY_PRESSURE_PLATE"),
            MaterialMaterialEnum::DarkOakPressurePlate => f.write_str("DARK_OAK_PRESSURE_PLATE"),
            MaterialMaterialEnum::MangrovePressurePlate => f.write_str("MANGROVE_PRESSURE_PLATE"),
            MaterialMaterialEnum::BambooPressurePlate => f.write_str("BAMBOO_PRESSURE_PLATE"),
            MaterialMaterialEnum::CrimsonPressurePlate => f.write_str("CRIMSON_PRESSURE_PLATE"),
            MaterialMaterialEnum::WarpedPressurePlate => f.write_str("WARPED_PRESSURE_PLATE"),
            MaterialMaterialEnum::IronDoor => f.write_str("IRON_DOOR"),
            MaterialMaterialEnum::OakDoor => f.write_str("OAK_DOOR"),
            MaterialMaterialEnum::SpruceDoor => f.write_str("SPRUCE_DOOR"),
            MaterialMaterialEnum::BirchDoor => f.write_str("BIRCH_DOOR"),
            MaterialMaterialEnum::JungleDoor => f.write_str("JUNGLE_DOOR"),
            MaterialMaterialEnum::AcaciaDoor => f.write_str("ACACIA_DOOR"),
            MaterialMaterialEnum::CherryDoor => f.write_str("CHERRY_DOOR"),
            MaterialMaterialEnum::DarkOakDoor => f.write_str("DARK_OAK_DOOR"),
            MaterialMaterialEnum::MangroveDoor => f.write_str("MANGROVE_DOOR"),
            MaterialMaterialEnum::BambooDoor => f.write_str("BAMBOO_DOOR"),
            MaterialMaterialEnum::CrimsonDoor => f.write_str("CRIMSON_DOOR"),
            MaterialMaterialEnum::WarpedDoor => f.write_str("WARPED_DOOR"),
            MaterialMaterialEnum::IronTrapdoor => f.write_str("IRON_TRAPDOOR"),
            MaterialMaterialEnum::OakTrapdoor => f.write_str("OAK_TRAPDOOR"),
            MaterialMaterialEnum::SpruceTrapdoor => f.write_str("SPRUCE_TRAPDOOR"),
            MaterialMaterialEnum::BirchTrapdoor => f.write_str("BIRCH_TRAPDOOR"),
            MaterialMaterialEnum::JungleTrapdoor => f.write_str("JUNGLE_TRAPDOOR"),
            MaterialMaterialEnum::AcaciaTrapdoor => f.write_str("ACACIA_TRAPDOOR"),
            MaterialMaterialEnum::CherryTrapdoor => f.write_str("CHERRY_TRAPDOOR"),
            MaterialMaterialEnum::DarkOakTrapdoor => f.write_str("DARK_OAK_TRAPDOOR"),
            MaterialMaterialEnum::MangroveTrapdoor => f.write_str("MANGROVE_TRAPDOOR"),
            MaterialMaterialEnum::BambooTrapdoor => f.write_str("BAMBOO_TRAPDOOR"),
            MaterialMaterialEnum::CrimsonTrapdoor => f.write_str("CRIMSON_TRAPDOOR"),
            MaterialMaterialEnum::WarpedTrapdoor => f.write_str("WARPED_TRAPDOOR"),
            MaterialMaterialEnum::OakFenceGate => f.write_str("OAK_FENCE_GATE"),
            MaterialMaterialEnum::SpruceFenceGate => f.write_str("SPRUCE_FENCE_GATE"),
            MaterialMaterialEnum::BirchFenceGate => f.write_str("BIRCH_FENCE_GATE"),
            MaterialMaterialEnum::JungleFenceGate => f.write_str("JUNGLE_FENCE_GATE"),
            MaterialMaterialEnum::AcaciaFenceGate => f.write_str("ACACIA_FENCE_GATE"),
            MaterialMaterialEnum::CherryFenceGate => f.write_str("CHERRY_FENCE_GATE"),
            MaterialMaterialEnum::DarkOakFenceGate => f.write_str("DARK_OAK_FENCE_GATE"),
            MaterialMaterialEnum::MangroveFenceGate => f.write_str("MANGROVE_FENCE_GATE"),
            MaterialMaterialEnum::BambooFenceGate => f.write_str("BAMBOO_FENCE_GATE"),
            MaterialMaterialEnum::CrimsonFenceGate => f.write_str("CRIMSON_FENCE_GATE"),
            MaterialMaterialEnum::WarpedFenceGate => f.write_str("WARPED_FENCE_GATE"),
            MaterialMaterialEnum::PoweredRail => f.write_str("POWERED_RAIL"),
            MaterialMaterialEnum::DetectorRail => f.write_str("DETECTOR_RAIL"),
            MaterialMaterialEnum::Rail => f.write_str("RAIL"),
            MaterialMaterialEnum::ActivatorRail => f.write_str("ACTIVATOR_RAIL"),
            MaterialMaterialEnum::Saddle => f.write_str("SADDLE"),
            MaterialMaterialEnum::Minecart => f.write_str("MINECART"),
            MaterialMaterialEnum::ChestMinecart => f.write_str("CHEST_MINECART"),
            MaterialMaterialEnum::FurnaceMinecart => f.write_str("FURNACE_MINECART"),
            MaterialMaterialEnum::TntMinecart => f.write_str("TNT_MINECART"),
            MaterialMaterialEnum::HopperMinecart => f.write_str("HOPPER_MINECART"),
            MaterialMaterialEnum::CarrotOnAStick => f.write_str("CARROT_ON_A_STICK"),
            MaterialMaterialEnum::WarpedFungusOnAStick => f.write_str("WARPED_FUNGUS_ON_A_STICK"),
            MaterialMaterialEnum::Elytra => f.write_str("ELYTRA"),
            MaterialMaterialEnum::OakBoat => f.write_str("OAK_BOAT"),
            MaterialMaterialEnum::OakChestBoat => f.write_str("OAK_CHEST_BOAT"),
            MaterialMaterialEnum::SpruceBoat => f.write_str("SPRUCE_BOAT"),
            MaterialMaterialEnum::SpruceChestBoat => f.write_str("SPRUCE_CHEST_BOAT"),
            MaterialMaterialEnum::BirchBoat => f.write_str("BIRCH_BOAT"),
            MaterialMaterialEnum::BirchChestBoat => f.write_str("BIRCH_CHEST_BOAT"),
            MaterialMaterialEnum::JungleBoat => f.write_str("JUNGLE_BOAT"),
            MaterialMaterialEnum::JungleChestBoat => f.write_str("JUNGLE_CHEST_BOAT"),
            MaterialMaterialEnum::AcaciaBoat => f.write_str("ACACIA_BOAT"),
            MaterialMaterialEnum::AcaciaChestBoat => f.write_str("ACACIA_CHEST_BOAT"),
            MaterialMaterialEnum::CherryBoat => f.write_str("CHERRY_BOAT"),
            MaterialMaterialEnum::CherryChestBoat => f.write_str("CHERRY_CHEST_BOAT"),
            MaterialMaterialEnum::DarkOakBoat => f.write_str("DARK_OAK_BOAT"),
            MaterialMaterialEnum::DarkOakChestBoat => f.write_str("DARK_OAK_CHEST_BOAT"),
            MaterialMaterialEnum::MangroveBoat => f.write_str("MANGROVE_BOAT"),
            MaterialMaterialEnum::MangroveChestBoat => f.write_str("MANGROVE_CHEST_BOAT"),
            MaterialMaterialEnum::BambooRaft => f.write_str("BAMBOO_RAFT"),
            MaterialMaterialEnum::BambooChestRaft => f.write_str("BAMBOO_CHEST_RAFT"),
            MaterialMaterialEnum::StructureBlock => f.write_str("STRUCTURE_BLOCK"),
            MaterialMaterialEnum::Jigsaw => f.write_str("JIGSAW"),
            MaterialMaterialEnum::TurtleHelmet => f.write_str("TURTLE_HELMET"),
            MaterialMaterialEnum::Scute => f.write_str("SCUTE"),
            MaterialMaterialEnum::FlintAndSteel => f.write_str("FLINT_AND_STEEL"),
            MaterialMaterialEnum::Apple => f.write_str("APPLE"),
            MaterialMaterialEnum::Bow => f.write_str("BOW"),
            MaterialMaterialEnum::Arrow => f.write_str("ARROW"),
            MaterialMaterialEnum::Coal => f.write_str("COAL"),
            MaterialMaterialEnum::Charcoal => f.write_str("CHARCOAL"),
            MaterialMaterialEnum::Diamond => f.write_str("DIAMOND"),
            MaterialMaterialEnum::Emerald => f.write_str("EMERALD"),
            MaterialMaterialEnum::LapisLazuli => f.write_str("LAPIS_LAZULI"),
            MaterialMaterialEnum::Quartz => f.write_str("QUARTZ"),
            MaterialMaterialEnum::AmethystShard => f.write_str("AMETHYST_SHARD"),
            MaterialMaterialEnum::RawIron => f.write_str("RAW_IRON"),
            MaterialMaterialEnum::IronIngot => f.write_str("IRON_INGOT"),
            MaterialMaterialEnum::RawCopper => f.write_str("RAW_COPPER"),
            MaterialMaterialEnum::CopperIngot => f.write_str("COPPER_INGOT"),
            MaterialMaterialEnum::RawGold => f.write_str("RAW_GOLD"),
            MaterialMaterialEnum::GoldIngot => f.write_str("GOLD_INGOT"),
            MaterialMaterialEnum::NetheriteIngot => f.write_str("NETHERITE_INGOT"),
            MaterialMaterialEnum::NetheriteScrap => f.write_str("NETHERITE_SCRAP"),
            MaterialMaterialEnum::WoodenSword => f.write_str("WOODEN_SWORD"),
            MaterialMaterialEnum::WoodenShovel => f.write_str("WOODEN_SHOVEL"),
            MaterialMaterialEnum::WoodenPickaxe => f.write_str("WOODEN_PICKAXE"),
            MaterialMaterialEnum::WoodenAxe => f.write_str("WOODEN_AXE"),
            MaterialMaterialEnum::WoodenHoe => f.write_str("WOODEN_HOE"),
            MaterialMaterialEnum::StoneSword => f.write_str("STONE_SWORD"),
            MaterialMaterialEnum::StoneShovel => f.write_str("STONE_SHOVEL"),
            MaterialMaterialEnum::StonePickaxe => f.write_str("STONE_PICKAXE"),
            MaterialMaterialEnum::StoneAxe => f.write_str("STONE_AXE"),
            MaterialMaterialEnum::StoneHoe => f.write_str("STONE_HOE"),
            MaterialMaterialEnum::GoldenSword => f.write_str("GOLDEN_SWORD"),
            MaterialMaterialEnum::GoldenShovel => f.write_str("GOLDEN_SHOVEL"),
            MaterialMaterialEnum::GoldenPickaxe => f.write_str("GOLDEN_PICKAXE"),
            MaterialMaterialEnum::GoldenAxe => f.write_str("GOLDEN_AXE"),
            MaterialMaterialEnum::GoldenHoe => f.write_str("GOLDEN_HOE"),
            MaterialMaterialEnum::IronSword => f.write_str("IRON_SWORD"),
            MaterialMaterialEnum::IronShovel => f.write_str("IRON_SHOVEL"),
            MaterialMaterialEnum::IronPickaxe => f.write_str("IRON_PICKAXE"),
            MaterialMaterialEnum::IronAxe => f.write_str("IRON_AXE"),
            MaterialMaterialEnum::IronHoe => f.write_str("IRON_HOE"),
            MaterialMaterialEnum::DiamondSword => f.write_str("DIAMOND_SWORD"),
            MaterialMaterialEnum::DiamondShovel => f.write_str("DIAMOND_SHOVEL"),
            MaterialMaterialEnum::DiamondPickaxe => f.write_str("DIAMOND_PICKAXE"),
            MaterialMaterialEnum::DiamondAxe => f.write_str("DIAMOND_AXE"),
            MaterialMaterialEnum::DiamondHoe => f.write_str("DIAMOND_HOE"),
            MaterialMaterialEnum::NetheriteSword => f.write_str("NETHERITE_SWORD"),
            MaterialMaterialEnum::NetheriteShovel => f.write_str("NETHERITE_SHOVEL"),
            MaterialMaterialEnum::NetheritePickaxe => f.write_str("NETHERITE_PICKAXE"),
            MaterialMaterialEnum::NetheriteAxe => f.write_str("NETHERITE_AXE"),
            MaterialMaterialEnum::NetheriteHoe => f.write_str("NETHERITE_HOE"),
            MaterialMaterialEnum::Stick => f.write_str("STICK"),
            MaterialMaterialEnum::Bowl => f.write_str("BOWL"),
            MaterialMaterialEnum::MushroomStew => f.write_str("MUSHROOM_STEW"),
            MaterialMaterialEnum::String => f.write_str("STRING"),
            MaterialMaterialEnum::Feather => f.write_str("FEATHER"),
            MaterialMaterialEnum::Gunpowder => f.write_str("GUNPOWDER"),
            MaterialMaterialEnum::WheatSeeds => f.write_str("WHEAT_SEEDS"),
            MaterialMaterialEnum::Wheat => f.write_str("WHEAT"),
            MaterialMaterialEnum::Bread => f.write_str("BREAD"),
            MaterialMaterialEnum::LeatherHelmet => f.write_str("LEATHER_HELMET"),
            MaterialMaterialEnum::LeatherChestplate => f.write_str("LEATHER_CHESTPLATE"),
            MaterialMaterialEnum::LeatherLeggings => f.write_str("LEATHER_LEGGINGS"),
            MaterialMaterialEnum::LeatherBoots => f.write_str("LEATHER_BOOTS"),
            MaterialMaterialEnum::ChainmailHelmet => f.write_str("CHAINMAIL_HELMET"),
            MaterialMaterialEnum::ChainmailChestplate => f.write_str("CHAINMAIL_CHESTPLATE"),
            MaterialMaterialEnum::ChainmailLeggings => f.write_str("CHAINMAIL_LEGGINGS"),
            MaterialMaterialEnum::ChainmailBoots => f.write_str("CHAINMAIL_BOOTS"),
            MaterialMaterialEnum::IronHelmet => f.write_str("IRON_HELMET"),
            MaterialMaterialEnum::IronChestplate => f.write_str("IRON_CHESTPLATE"),
            MaterialMaterialEnum::IronLeggings => f.write_str("IRON_LEGGINGS"),
            MaterialMaterialEnum::IronBoots => f.write_str("IRON_BOOTS"),
            MaterialMaterialEnum::DiamondHelmet => f.write_str("DIAMOND_HELMET"),
            MaterialMaterialEnum::DiamondChestplate => f.write_str("DIAMOND_CHESTPLATE"),
            MaterialMaterialEnum::DiamondLeggings => f.write_str("DIAMOND_LEGGINGS"),
            MaterialMaterialEnum::DiamondBoots => f.write_str("DIAMOND_BOOTS"),
            MaterialMaterialEnum::GoldenHelmet => f.write_str("GOLDEN_HELMET"),
            MaterialMaterialEnum::GoldenChestplate => f.write_str("GOLDEN_CHESTPLATE"),
            MaterialMaterialEnum::GoldenLeggings => f.write_str("GOLDEN_LEGGINGS"),
            MaterialMaterialEnum::GoldenBoots => f.write_str("GOLDEN_BOOTS"),
            MaterialMaterialEnum::NetheriteHelmet => f.write_str("NETHERITE_HELMET"),
            MaterialMaterialEnum::NetheriteChestplate => f.write_str("NETHERITE_CHESTPLATE"),
            MaterialMaterialEnum::NetheriteLeggings => f.write_str("NETHERITE_LEGGINGS"),
            MaterialMaterialEnum::NetheriteBoots => f.write_str("NETHERITE_BOOTS"),
            MaterialMaterialEnum::Flint => f.write_str("FLINT"),
            MaterialMaterialEnum::Porkchop => f.write_str("PORKCHOP"),
            MaterialMaterialEnum::CookedPorkchop => f.write_str("COOKED_PORKCHOP"),
            MaterialMaterialEnum::Painting => f.write_str("PAINTING"),
            MaterialMaterialEnum::GoldenApple => f.write_str("GOLDEN_APPLE"),
            MaterialMaterialEnum::EnchantedGoldenApple => f.write_str("ENCHANTED_GOLDEN_APPLE"),
            MaterialMaterialEnum::OakSign => f.write_str("OAK_SIGN"),
            MaterialMaterialEnum::SpruceSign => f.write_str("SPRUCE_SIGN"),
            MaterialMaterialEnum::BirchSign => f.write_str("BIRCH_SIGN"),
            MaterialMaterialEnum::JungleSign => f.write_str("JUNGLE_SIGN"),
            MaterialMaterialEnum::AcaciaSign => f.write_str("ACACIA_SIGN"),
            MaterialMaterialEnum::CherrySign => f.write_str("CHERRY_SIGN"),
            MaterialMaterialEnum::DarkOakSign => f.write_str("DARK_OAK_SIGN"),
            MaterialMaterialEnum::MangroveSign => f.write_str("MANGROVE_SIGN"),
            MaterialMaterialEnum::BambooSign => f.write_str("BAMBOO_SIGN"),
            MaterialMaterialEnum::CrimsonSign => f.write_str("CRIMSON_SIGN"),
            MaterialMaterialEnum::WarpedSign => f.write_str("WARPED_SIGN"),
            MaterialMaterialEnum::OakHangingSign => f.write_str("OAK_HANGING_SIGN"),
            MaterialMaterialEnum::SpruceHangingSign => f.write_str("SPRUCE_HANGING_SIGN"),
            MaterialMaterialEnum::BirchHangingSign => f.write_str("BIRCH_HANGING_SIGN"),
            MaterialMaterialEnum::JungleHangingSign => f.write_str("JUNGLE_HANGING_SIGN"),
            MaterialMaterialEnum::AcaciaHangingSign => f.write_str("ACACIA_HANGING_SIGN"),
            MaterialMaterialEnum::CherryHangingSign => f.write_str("CHERRY_HANGING_SIGN"),
            MaterialMaterialEnum::DarkOakHangingSign => f.write_str("DARK_OAK_HANGING_SIGN"),
            MaterialMaterialEnum::MangroveHangingSign => f.write_str("MANGROVE_HANGING_SIGN"),
            MaterialMaterialEnum::BambooHangingSign => f.write_str("BAMBOO_HANGING_SIGN"),
            MaterialMaterialEnum::CrimsonHangingSign => f.write_str("CRIMSON_HANGING_SIGN"),
            MaterialMaterialEnum::WarpedHangingSign => f.write_str("WARPED_HANGING_SIGN"),
            MaterialMaterialEnum::Bucket => f.write_str("BUCKET"),
            MaterialMaterialEnum::WaterBucket => f.write_str("WATER_BUCKET"),
            MaterialMaterialEnum::LavaBucket => f.write_str("LAVA_BUCKET"),
            MaterialMaterialEnum::PowderSnowBucket => f.write_str("POWDER_SNOW_BUCKET"),
            MaterialMaterialEnum::Snowball => f.write_str("SNOWBALL"),
            MaterialMaterialEnum::Leather => f.write_str("LEATHER"),
            MaterialMaterialEnum::MilkBucket => f.write_str("MILK_BUCKET"),
            MaterialMaterialEnum::PufferfishBucket => f.write_str("PUFFERFISH_BUCKET"),
            MaterialMaterialEnum::SalmonBucket => f.write_str("SALMON_BUCKET"),
            MaterialMaterialEnum::CodBucket => f.write_str("COD_BUCKET"),
            MaterialMaterialEnum::TropicalFishBucket => f.write_str("TROPICAL_FISH_BUCKET"),
            MaterialMaterialEnum::AxolotlBucket => f.write_str("AXOLOTL_BUCKET"),
            MaterialMaterialEnum::TadpoleBucket => f.write_str("TADPOLE_BUCKET"),
            MaterialMaterialEnum::Brick => f.write_str("BRICK"),
            MaterialMaterialEnum::ClayBall => f.write_str("CLAY_BALL"),
            MaterialMaterialEnum::DriedKelpBlock => f.write_str("DRIED_KELP_BLOCK"),
            MaterialMaterialEnum::Paper => f.write_str("PAPER"),
            MaterialMaterialEnum::Book => f.write_str("BOOK"),
            MaterialMaterialEnum::SlimeBall => f.write_str("SLIME_BALL"),
            MaterialMaterialEnum::Egg => f.write_str("EGG"),
            MaterialMaterialEnum::Compass => f.write_str("COMPASS"),
            MaterialMaterialEnum::RecoveryCompass => f.write_str("RECOVERY_COMPASS"),
            MaterialMaterialEnum::Bundle => f.write_str("BUNDLE"),
            MaterialMaterialEnum::FishingRod => f.write_str("FISHING_ROD"),
            MaterialMaterialEnum::Clock => f.write_str("CLOCK"),
            MaterialMaterialEnum::Spyglass => f.write_str("SPYGLASS"),
            MaterialMaterialEnum::GlowstoneDust => f.write_str("GLOWSTONE_DUST"),
            MaterialMaterialEnum::Cod => f.write_str("COD"),
            MaterialMaterialEnum::Salmon => f.write_str("SALMON"),
            MaterialMaterialEnum::TropicalFish => f.write_str("TROPICAL_FISH"),
            MaterialMaterialEnum::Pufferfish => f.write_str("PUFFERFISH"),
            MaterialMaterialEnum::CookedCod => f.write_str("COOKED_COD"),
            MaterialMaterialEnum::CookedSalmon => f.write_str("COOKED_SALMON"),
            MaterialMaterialEnum::InkSac => f.write_str("INK_SAC"),
            MaterialMaterialEnum::GlowInkSac => f.write_str("GLOW_INK_SAC"),
            MaterialMaterialEnum::CocoaBeans => f.write_str("COCOA_BEANS"),
            MaterialMaterialEnum::WhiteDye => f.write_str("WHITE_DYE"),
            MaterialMaterialEnum::OrangeDye => f.write_str("ORANGE_DYE"),
            MaterialMaterialEnum::MagentaDye => f.write_str("MAGENTA_DYE"),
            MaterialMaterialEnum::LightBlueDye => f.write_str("LIGHT_BLUE_DYE"),
            MaterialMaterialEnum::YellowDye => f.write_str("YELLOW_DYE"),
            MaterialMaterialEnum::LimeDye => f.write_str("LIME_DYE"),
            MaterialMaterialEnum::PinkDye => f.write_str("PINK_DYE"),
            MaterialMaterialEnum::GrayDye => f.write_str("GRAY_DYE"),
            MaterialMaterialEnum::LightGrayDye => f.write_str("LIGHT_GRAY_DYE"),
            MaterialMaterialEnum::CyanDye => f.write_str("CYAN_DYE"),
            MaterialMaterialEnum::PurpleDye => f.write_str("PURPLE_DYE"),
            MaterialMaterialEnum::BlueDye => f.write_str("BLUE_DYE"),
            MaterialMaterialEnum::BrownDye => f.write_str("BROWN_DYE"),
            MaterialMaterialEnum::GreenDye => f.write_str("GREEN_DYE"),
            MaterialMaterialEnum::RedDye => f.write_str("RED_DYE"),
            MaterialMaterialEnum::BlackDye => f.write_str("BLACK_DYE"),
            MaterialMaterialEnum::BoneMeal => f.write_str("BONE_MEAL"),
            MaterialMaterialEnum::Bone => f.write_str("BONE"),
            MaterialMaterialEnum::Sugar => f.write_str("SUGAR"),
            MaterialMaterialEnum::Cake => f.write_str("CAKE"),
            MaterialMaterialEnum::WhiteBed => f.write_str("WHITE_BED"),
            MaterialMaterialEnum::OrangeBed => f.write_str("ORANGE_BED"),
            MaterialMaterialEnum::MagentaBed => f.write_str("MAGENTA_BED"),
            MaterialMaterialEnum::LightBlueBed => f.write_str("LIGHT_BLUE_BED"),
            MaterialMaterialEnum::YellowBed => f.write_str("YELLOW_BED"),
            MaterialMaterialEnum::LimeBed => f.write_str("LIME_BED"),
            MaterialMaterialEnum::PinkBed => f.write_str("PINK_BED"),
            MaterialMaterialEnum::GrayBed => f.write_str("GRAY_BED"),
            MaterialMaterialEnum::LightGrayBed => f.write_str("LIGHT_GRAY_BED"),
            MaterialMaterialEnum::CyanBed => f.write_str("CYAN_BED"),
            MaterialMaterialEnum::PurpleBed => f.write_str("PURPLE_BED"),
            MaterialMaterialEnum::BlueBed => f.write_str("BLUE_BED"),
            MaterialMaterialEnum::BrownBed => f.write_str("BROWN_BED"),
            MaterialMaterialEnum::GreenBed => f.write_str("GREEN_BED"),
            MaterialMaterialEnum::RedBed => f.write_str("RED_BED"),
            MaterialMaterialEnum::BlackBed => f.write_str("BLACK_BED"),
            MaterialMaterialEnum::Cookie => f.write_str("COOKIE"),
            MaterialMaterialEnum::FilledMap => f.write_str("FILLED_MAP"),
            MaterialMaterialEnum::Shears => f.write_str("SHEARS"),
            MaterialMaterialEnum::MelonSlice => f.write_str("MELON_SLICE"),
            MaterialMaterialEnum::DriedKelp => f.write_str("DRIED_KELP"),
            MaterialMaterialEnum::PumpkinSeeds => f.write_str("PUMPKIN_SEEDS"),
            MaterialMaterialEnum::MelonSeeds => f.write_str("MELON_SEEDS"),
            MaterialMaterialEnum::Beef => f.write_str("BEEF"),
            MaterialMaterialEnum::CookedBeef => f.write_str("COOKED_BEEF"),
            MaterialMaterialEnum::Chicken => f.write_str("CHICKEN"),
            MaterialMaterialEnum::CookedChicken => f.write_str("COOKED_CHICKEN"),
            MaterialMaterialEnum::RottenFlesh => f.write_str("ROTTEN_FLESH"),
            MaterialMaterialEnum::EnderPearl => f.write_str("ENDER_PEARL"),
            MaterialMaterialEnum::BlazeRod => f.write_str("BLAZE_ROD"),
            MaterialMaterialEnum::GhastTear => f.write_str("GHAST_TEAR"),
            MaterialMaterialEnum::GoldNugget => f.write_str("GOLD_NUGGET"),
            MaterialMaterialEnum::NetherWart => f.write_str("NETHER_WART"),
            MaterialMaterialEnum::Potion => f.write_str("POTION"),
            MaterialMaterialEnum::GlassBottle => f.write_str("GLASS_BOTTLE"),
            MaterialMaterialEnum::SpiderEye => f.write_str("SPIDER_EYE"),
            MaterialMaterialEnum::FermentedSpiderEye => f.write_str("FERMENTED_SPIDER_EYE"),
            MaterialMaterialEnum::BlazePowder => f.write_str("BLAZE_POWDER"),
            MaterialMaterialEnum::MagmaCream => f.write_str("MAGMA_CREAM"),
            MaterialMaterialEnum::BrewingStand => f.write_str("BREWING_STAND"),
            MaterialMaterialEnum::Cauldron => f.write_str("CAULDRON"),
            MaterialMaterialEnum::EnderEye => f.write_str("ENDER_EYE"),
            MaterialMaterialEnum::GlisteringMelonSlice => f.write_str("GLISTERING_MELON_SLICE"),
            MaterialMaterialEnum::AllaySpawnEgg => f.write_str("ALLAY_SPAWN_EGG"),
            MaterialMaterialEnum::AxolotlSpawnEgg => f.write_str("AXOLOTL_SPAWN_EGG"),
            MaterialMaterialEnum::BatSpawnEgg => f.write_str("BAT_SPAWN_EGG"),
            MaterialMaterialEnum::BeeSpawnEgg => f.write_str("BEE_SPAWN_EGG"),
            MaterialMaterialEnum::BlazeSpawnEgg => f.write_str("BLAZE_SPAWN_EGG"),
            MaterialMaterialEnum::CatSpawnEgg => f.write_str("CAT_SPAWN_EGG"),
            MaterialMaterialEnum::CamelSpawnEgg => f.write_str("CAMEL_SPAWN_EGG"),
            MaterialMaterialEnum::CaveSpiderSpawnEgg => f.write_str("CAVE_SPIDER_SPAWN_EGG"),
            MaterialMaterialEnum::ChickenSpawnEgg => f.write_str("CHICKEN_SPAWN_EGG"),
            MaterialMaterialEnum::CodSpawnEgg => f.write_str("COD_SPAWN_EGG"),
            MaterialMaterialEnum::CowSpawnEgg => f.write_str("COW_SPAWN_EGG"),
            MaterialMaterialEnum::CreeperSpawnEgg => f.write_str("CREEPER_SPAWN_EGG"),
            MaterialMaterialEnum::DolphinSpawnEgg => f.write_str("DOLPHIN_SPAWN_EGG"),
            MaterialMaterialEnum::DonkeySpawnEgg => f.write_str("DONKEY_SPAWN_EGG"),
            MaterialMaterialEnum::DrownedSpawnEgg => f.write_str("DROWNED_SPAWN_EGG"),
            MaterialMaterialEnum::ElderGuardianSpawnEgg => f.write_str("ELDER_GUARDIAN_SPAWN_EGG"),
            MaterialMaterialEnum::EnderDragonSpawnEgg => f.write_str("ENDER_DRAGON_SPAWN_EGG"),
            MaterialMaterialEnum::EndermanSpawnEgg => f.write_str("ENDERMAN_SPAWN_EGG"),
            MaterialMaterialEnum::EndermiteSpawnEgg => f.write_str("ENDERMITE_SPAWN_EGG"),
            MaterialMaterialEnum::EvokerSpawnEgg => f.write_str("EVOKER_SPAWN_EGG"),
            MaterialMaterialEnum::FoxSpawnEgg => f.write_str("FOX_SPAWN_EGG"),
            MaterialMaterialEnum::FrogSpawnEgg => f.write_str("FROG_SPAWN_EGG"),
            MaterialMaterialEnum::GhastSpawnEgg => f.write_str("GHAST_SPAWN_EGG"),
            MaterialMaterialEnum::GlowSquidSpawnEgg => f.write_str("GLOW_SQUID_SPAWN_EGG"),
            MaterialMaterialEnum::GoatSpawnEgg => f.write_str("GOAT_SPAWN_EGG"),
            MaterialMaterialEnum::GuardianSpawnEgg => f.write_str("GUARDIAN_SPAWN_EGG"),
            MaterialMaterialEnum::HoglinSpawnEgg => f.write_str("HOGLIN_SPAWN_EGG"),
            MaterialMaterialEnum::HorseSpawnEgg => f.write_str("HORSE_SPAWN_EGG"),
            MaterialMaterialEnum::HuskSpawnEgg => f.write_str("HUSK_SPAWN_EGG"),
            MaterialMaterialEnum::IronGolemSpawnEgg => f.write_str("IRON_GOLEM_SPAWN_EGG"),
            MaterialMaterialEnum::LlamaSpawnEgg => f.write_str("LLAMA_SPAWN_EGG"),
            MaterialMaterialEnum::MagmaCubeSpawnEgg => f.write_str("MAGMA_CUBE_SPAWN_EGG"),
            MaterialMaterialEnum::MooshroomSpawnEgg => f.write_str("MOOSHROOM_SPAWN_EGG"),
            MaterialMaterialEnum::MuleSpawnEgg => f.write_str("MULE_SPAWN_EGG"),
            MaterialMaterialEnum::OcelotSpawnEgg => f.write_str("OCELOT_SPAWN_EGG"),
            MaterialMaterialEnum::PandaSpawnEgg => f.write_str("PANDA_SPAWN_EGG"),
            MaterialMaterialEnum::ParrotSpawnEgg => f.write_str("PARROT_SPAWN_EGG"),
            MaterialMaterialEnum::PhantomSpawnEgg => f.write_str("PHANTOM_SPAWN_EGG"),
            MaterialMaterialEnum::PigSpawnEgg => f.write_str("PIG_SPAWN_EGG"),
            MaterialMaterialEnum::PiglinSpawnEgg => f.write_str("PIGLIN_SPAWN_EGG"),
            MaterialMaterialEnum::PiglinBruteSpawnEgg => f.write_str("PIGLIN_BRUTE_SPAWN_EGG"),
            MaterialMaterialEnum::PillagerSpawnEgg => f.write_str("PILLAGER_SPAWN_EGG"),
            MaterialMaterialEnum::PolarBearSpawnEgg => f.write_str("POLAR_BEAR_SPAWN_EGG"),
            MaterialMaterialEnum::PufferfishSpawnEgg => f.write_str("PUFFERFISH_SPAWN_EGG"),
            MaterialMaterialEnum::RabbitSpawnEgg => f.write_str("RABBIT_SPAWN_EGG"),
            MaterialMaterialEnum::RavagerSpawnEgg => f.write_str("RAVAGER_SPAWN_EGG"),
            MaterialMaterialEnum::SalmonSpawnEgg => f.write_str("SALMON_SPAWN_EGG"),
            MaterialMaterialEnum::SheepSpawnEgg => f.write_str("SHEEP_SPAWN_EGG"),
            MaterialMaterialEnum::ShulkerSpawnEgg => f.write_str("SHULKER_SPAWN_EGG"),
            MaterialMaterialEnum::SilverfishSpawnEgg => f.write_str("SILVERFISH_SPAWN_EGG"),
            MaterialMaterialEnum::SkeletonSpawnEgg => f.write_str("SKELETON_SPAWN_EGG"),
            MaterialMaterialEnum::SkeletonHorseSpawnEgg => f.write_str("SKELETON_HORSE_SPAWN_EGG"),
            MaterialMaterialEnum::SlimeSpawnEgg => f.write_str("SLIME_SPAWN_EGG"),
            MaterialMaterialEnum::SnifferSpawnEgg => f.write_str("SNIFFER_SPAWN_EGG"),
            MaterialMaterialEnum::SnowGolemSpawnEgg => f.write_str("SNOW_GOLEM_SPAWN_EGG"),
            MaterialMaterialEnum::SpiderSpawnEgg => f.write_str("SPIDER_SPAWN_EGG"),
            MaterialMaterialEnum::SquidSpawnEgg => f.write_str("SQUID_SPAWN_EGG"),
            MaterialMaterialEnum::StraySpawnEgg => f.write_str("STRAY_SPAWN_EGG"),
            MaterialMaterialEnum::StriderSpawnEgg => f.write_str("STRIDER_SPAWN_EGG"),
            MaterialMaterialEnum::TadpoleSpawnEgg => f.write_str("TADPOLE_SPAWN_EGG"),
            MaterialMaterialEnum::TraderLlamaSpawnEgg => f.write_str("TRADER_LLAMA_SPAWN_EGG"),
            MaterialMaterialEnum::TropicalFishSpawnEgg => f.write_str("TROPICAL_FISH_SPAWN_EGG"),
            MaterialMaterialEnum::TurtleSpawnEgg => f.write_str("TURTLE_SPAWN_EGG"),
            MaterialMaterialEnum::VexSpawnEgg => f.write_str("VEX_SPAWN_EGG"),
            MaterialMaterialEnum::VillagerSpawnEgg => f.write_str("VILLAGER_SPAWN_EGG"),
            MaterialMaterialEnum::VindicatorSpawnEgg => f.write_str("VINDICATOR_SPAWN_EGG"),
            MaterialMaterialEnum::WanderingTraderSpawnEgg => {
                f.write_str("WANDERING_TRADER_SPAWN_EGG")
            }
            MaterialMaterialEnum::WardenSpawnEgg => f.write_str("WARDEN_SPAWN_EGG"),
            MaterialMaterialEnum::WitchSpawnEgg => f.write_str("WITCH_SPAWN_EGG"),
            MaterialMaterialEnum::WitherSpawnEgg => f.write_str("WITHER_SPAWN_EGG"),
            MaterialMaterialEnum::WitherSkeletonSpawnEgg => {
                f.write_str("WITHER_SKELETON_SPAWN_EGG")
            }
            MaterialMaterialEnum::WolfSpawnEgg => f.write_str("WOLF_SPAWN_EGG"),
            MaterialMaterialEnum::ZoglinSpawnEgg => f.write_str("ZOGLIN_SPAWN_EGG"),
            MaterialMaterialEnum::ZombieSpawnEgg => f.write_str("ZOMBIE_SPAWN_EGG"),
            MaterialMaterialEnum::ZombieHorseSpawnEgg => f.write_str("ZOMBIE_HORSE_SPAWN_EGG"),
            MaterialMaterialEnum::ZombieVillagerSpawnEgg => {
                f.write_str("ZOMBIE_VILLAGER_SPAWN_EGG")
            }
            MaterialMaterialEnum::ZombifiedPiglinSpawnEgg => {
                f.write_str("ZOMBIFIED_PIGLIN_SPAWN_EGG")
            }
            MaterialMaterialEnum::ExperienceBottle => f.write_str("EXPERIENCE_BOTTLE"),
            MaterialMaterialEnum::FireCharge => f.write_str("FIRE_CHARGE"),
            MaterialMaterialEnum::WritableBook => f.write_str("WRITABLE_BOOK"),
            MaterialMaterialEnum::WrittenBook => f.write_str("WRITTEN_BOOK"),
            MaterialMaterialEnum::ItemFrame => f.write_str("ITEM_FRAME"),
            MaterialMaterialEnum::GlowItemFrame => f.write_str("GLOW_ITEM_FRAME"),
            MaterialMaterialEnum::FlowerPot => f.write_str("FLOWER_POT"),
            MaterialMaterialEnum::Carrot => f.write_str("CARROT"),
            MaterialMaterialEnum::Potato => f.write_str("POTATO"),
            MaterialMaterialEnum::BakedPotato => f.write_str("BAKED_POTATO"),
            MaterialMaterialEnum::PoisonousPotato => f.write_str("POISONOUS_POTATO"),
            MaterialMaterialEnum::Map => f.write_str("MAP"),
            MaterialMaterialEnum::GoldenCarrot => f.write_str("GOLDEN_CARROT"),
            MaterialMaterialEnum::SkeletonSkull => f.write_str("SKELETON_SKULL"),
            MaterialMaterialEnum::WitherSkeletonSkull => f.write_str("WITHER_SKELETON_SKULL"),
            MaterialMaterialEnum::PlayerHead => f.write_str("PLAYER_HEAD"),
            MaterialMaterialEnum::ZombieHead => f.write_str("ZOMBIE_HEAD"),
            MaterialMaterialEnum::CreeperHead => f.write_str("CREEPER_HEAD"),
            MaterialMaterialEnum::DragonHead => f.write_str("DRAGON_HEAD"),
            MaterialMaterialEnum::PiglinHead => f.write_str("PIGLIN_HEAD"),
            MaterialMaterialEnum::NetherStar => f.write_str("NETHER_STAR"),
            MaterialMaterialEnum::PumpkinPie => f.write_str("PUMPKIN_PIE"),
            MaterialMaterialEnum::FireworkRocket => f.write_str("FIREWORK_ROCKET"),
            MaterialMaterialEnum::FireworkStar => f.write_str("FIREWORK_STAR"),
            MaterialMaterialEnum::EnchantedBook => f.write_str("ENCHANTED_BOOK"),
            MaterialMaterialEnum::NetherBrick => f.write_str("NETHER_BRICK"),
            MaterialMaterialEnum::PrismarineShard => f.write_str("PRISMARINE_SHARD"),
            MaterialMaterialEnum::PrismarineCrystals => f.write_str("PRISMARINE_CRYSTALS"),
            MaterialMaterialEnum::Rabbit => f.write_str("RABBIT"),
            MaterialMaterialEnum::CookedRabbit => f.write_str("COOKED_RABBIT"),
            MaterialMaterialEnum::RabbitStew => f.write_str("RABBIT_STEW"),
            MaterialMaterialEnum::RabbitFoot => f.write_str("RABBIT_FOOT"),
            MaterialMaterialEnum::RabbitHide => f.write_str("RABBIT_HIDE"),
            MaterialMaterialEnum::ArmorStand => f.write_str("ARMOR_STAND"),
            MaterialMaterialEnum::IronHorseArmor => f.write_str("IRON_HORSE_ARMOR"),
            MaterialMaterialEnum::GoldenHorseArmor => f.write_str("GOLDEN_HORSE_ARMOR"),
            MaterialMaterialEnum::DiamondHorseArmor => f.write_str("DIAMOND_HORSE_ARMOR"),
            MaterialMaterialEnum::LeatherHorseArmor => f.write_str("LEATHER_HORSE_ARMOR"),
            MaterialMaterialEnum::Lead => f.write_str("LEAD"),
            MaterialMaterialEnum::NameTag => f.write_str("NAME_TAG"),
            MaterialMaterialEnum::CommandBlockMinecart => f.write_str("COMMAND_BLOCK_MINECART"),
            MaterialMaterialEnum::Mutton => f.write_str("MUTTON"),
            MaterialMaterialEnum::CookedMutton => f.write_str("COOKED_MUTTON"),
            MaterialMaterialEnum::WhiteBanner => f.write_str("WHITE_BANNER"),
            MaterialMaterialEnum::OrangeBanner => f.write_str("ORANGE_BANNER"),
            MaterialMaterialEnum::MagentaBanner => f.write_str("MAGENTA_BANNER"),
            MaterialMaterialEnum::LightBlueBanner => f.write_str("LIGHT_BLUE_BANNER"),
            MaterialMaterialEnum::YellowBanner => f.write_str("YELLOW_BANNER"),
            MaterialMaterialEnum::LimeBanner => f.write_str("LIME_BANNER"),
            MaterialMaterialEnum::PinkBanner => f.write_str("PINK_BANNER"),
            MaterialMaterialEnum::GrayBanner => f.write_str("GRAY_BANNER"),
            MaterialMaterialEnum::LightGrayBanner => f.write_str("LIGHT_GRAY_BANNER"),
            MaterialMaterialEnum::CyanBanner => f.write_str("CYAN_BANNER"),
            MaterialMaterialEnum::PurpleBanner => f.write_str("PURPLE_BANNER"),
            MaterialMaterialEnum::BlueBanner => f.write_str("BLUE_BANNER"),
            MaterialMaterialEnum::BrownBanner => f.write_str("BROWN_BANNER"),
            MaterialMaterialEnum::GreenBanner => f.write_str("GREEN_BANNER"),
            MaterialMaterialEnum::RedBanner => f.write_str("RED_BANNER"),
            MaterialMaterialEnum::BlackBanner => f.write_str("BLACK_BANNER"),
            MaterialMaterialEnum::EndCrystal => f.write_str("END_CRYSTAL"),
            MaterialMaterialEnum::ChorusFruit => f.write_str("CHORUS_FRUIT"),
            MaterialMaterialEnum::PoppedChorusFruit => f.write_str("POPPED_CHORUS_FRUIT"),
            MaterialMaterialEnum::TorchflowerSeeds => f.write_str("TORCHFLOWER_SEEDS"),
            MaterialMaterialEnum::PitcherPod => f.write_str("PITCHER_POD"),
            MaterialMaterialEnum::Beetroot => f.write_str("BEETROOT"),
            MaterialMaterialEnum::BeetrootSeeds => f.write_str("BEETROOT_SEEDS"),
            MaterialMaterialEnum::BeetrootSoup => f.write_str("BEETROOT_SOUP"),
            MaterialMaterialEnum::DragonBreath => f.write_str("DRAGON_BREATH"),
            MaterialMaterialEnum::SplashPotion => f.write_str("SPLASH_POTION"),
            MaterialMaterialEnum::SpectralArrow => f.write_str("SPECTRAL_ARROW"),
            MaterialMaterialEnum::TippedArrow => f.write_str("TIPPED_ARROW"),
            MaterialMaterialEnum::LingeringPotion => f.write_str("LINGERING_POTION"),
            MaterialMaterialEnum::Shield => f.write_str("SHIELD"),
            MaterialMaterialEnum::TotemOfUndying => f.write_str("TOTEM_OF_UNDYING"),
            MaterialMaterialEnum::ShulkerShell => f.write_str("SHULKER_SHELL"),
            MaterialMaterialEnum::IronNugget => f.write_str("IRON_NUGGET"),
            MaterialMaterialEnum::KnowledgeBook => f.write_str("KNOWLEDGE_BOOK"),
            MaterialMaterialEnum::DebugStick => f.write_str("DEBUG_STICK"),
            MaterialMaterialEnum::MusicDisc13 => f.write_str("MUSIC_DISC_13"),
            MaterialMaterialEnum::MusicDiscCat => f.write_str("MUSIC_DISC_CAT"),
            MaterialMaterialEnum::MusicDiscBlocks => f.write_str("MUSIC_DISC_BLOCKS"),
            MaterialMaterialEnum::MusicDiscChirp => f.write_str("MUSIC_DISC_CHIRP"),
            MaterialMaterialEnum::MusicDiscFar => f.write_str("MUSIC_DISC_FAR"),
            MaterialMaterialEnum::MusicDiscMall => f.write_str("MUSIC_DISC_MALL"),
            MaterialMaterialEnum::MusicDiscMellohi => f.write_str("MUSIC_DISC_MELLOHI"),
            MaterialMaterialEnum::MusicDiscStal => f.write_str("MUSIC_DISC_STAL"),
            MaterialMaterialEnum::MusicDiscStrad => f.write_str("MUSIC_DISC_STRAD"),
            MaterialMaterialEnum::MusicDiscWard => f.write_str("MUSIC_DISC_WARD"),
            MaterialMaterialEnum::MusicDisc11 => f.write_str("MUSIC_DISC_11"),
            MaterialMaterialEnum::MusicDiscWait => f.write_str("MUSIC_DISC_WAIT"),
            MaterialMaterialEnum::MusicDiscOtherside => f.write_str("MUSIC_DISC_OTHERSIDE"),
            MaterialMaterialEnum::MusicDiscRelic => f.write_str("MUSIC_DISC_RELIC"),
            MaterialMaterialEnum::MusicDisc5 => f.write_str("MUSIC_DISC_5"),
            MaterialMaterialEnum::MusicDiscPigstep => f.write_str("MUSIC_DISC_PIGSTEP"),
            MaterialMaterialEnum::DiscFragment5 => f.write_str("DISC_FRAGMENT_5"),
            MaterialMaterialEnum::Trident => f.write_str("TRIDENT"),
            MaterialMaterialEnum::PhantomMembrane => f.write_str("PHANTOM_MEMBRANE"),
            MaterialMaterialEnum::NautilusShell => f.write_str("NAUTILUS_SHELL"),
            MaterialMaterialEnum::HeartOfTheSea => f.write_str("HEART_OF_THE_SEA"),
            MaterialMaterialEnum::Crossbow => f.write_str("CROSSBOW"),
            MaterialMaterialEnum::SuspiciousStew => f.write_str("SUSPICIOUS_STEW"),
            MaterialMaterialEnum::Loom => f.write_str("LOOM"),
            MaterialMaterialEnum::FlowerBannerPattern => f.write_str("FLOWER_BANNER_PATTERN"),
            MaterialMaterialEnum::CreeperBannerPattern => f.write_str("CREEPER_BANNER_PATTERN"),
            MaterialMaterialEnum::SkullBannerPattern => f.write_str("SKULL_BANNER_PATTERN"),
            MaterialMaterialEnum::MojangBannerPattern => f.write_str("MOJANG_BANNER_PATTERN"),
            MaterialMaterialEnum::GlobeBannerPattern => f.write_str("GLOBE_BANNER_PATTERN"),
            MaterialMaterialEnum::PiglinBannerPattern => f.write_str("PIGLIN_BANNER_PATTERN"),
            MaterialMaterialEnum::GoatHorn => f.write_str("GOAT_HORN"),
            MaterialMaterialEnum::Composter => f.write_str("COMPOSTER"),
            MaterialMaterialEnum::Barrel => f.write_str("BARREL"),
            MaterialMaterialEnum::Smoker => f.write_str("SMOKER"),
            MaterialMaterialEnum::BlastFurnace => f.write_str("BLAST_FURNACE"),
            MaterialMaterialEnum::CartographyTable => f.write_str("CARTOGRAPHY_TABLE"),
            MaterialMaterialEnum::FletchingTable => f.write_str("FLETCHING_TABLE"),
            MaterialMaterialEnum::Grindstone => f.write_str("GRINDSTONE"),
            MaterialMaterialEnum::SmithingTable => f.write_str("SMITHING_TABLE"),
            MaterialMaterialEnum::Stonecutter => f.write_str("STONECUTTER"),
            MaterialMaterialEnum::Bell => f.write_str("BELL"),
            MaterialMaterialEnum::Lantern => f.write_str("LANTERN"),
            MaterialMaterialEnum::SoulLantern => f.write_str("SOUL_LANTERN"),
            MaterialMaterialEnum::SweetBerries => f.write_str("SWEET_BERRIES"),
            MaterialMaterialEnum::GlowBerries => f.write_str("GLOW_BERRIES"),
            MaterialMaterialEnum::Campfire => f.write_str("CAMPFIRE"),
            MaterialMaterialEnum::SoulCampfire => f.write_str("SOUL_CAMPFIRE"),
            MaterialMaterialEnum::Shroomlight => f.write_str("SHROOMLIGHT"),
            MaterialMaterialEnum::Honeycomb => f.write_str("HONEYCOMB"),
            MaterialMaterialEnum::BeeNest => f.write_str("BEE_NEST"),
            MaterialMaterialEnum::Beehive => f.write_str("BEEHIVE"),
            MaterialMaterialEnum::HoneyBottle => f.write_str("HONEY_BOTTLE"),
            MaterialMaterialEnum::HoneycombBlock => f.write_str("HONEYCOMB_BLOCK"),
            MaterialMaterialEnum::Lodestone => f.write_str("LODESTONE"),
            MaterialMaterialEnum::CryingObsidian => f.write_str("CRYING_OBSIDIAN"),
            MaterialMaterialEnum::Blackstone => f.write_str("BLACKSTONE"),
            MaterialMaterialEnum::BlackstoneSlab => f.write_str("BLACKSTONE_SLAB"),
            MaterialMaterialEnum::BlackstoneStairs => f.write_str("BLACKSTONE_STAIRS"),
            MaterialMaterialEnum::GildedBlackstone => f.write_str("GILDED_BLACKSTONE"),
            MaterialMaterialEnum::PolishedBlackstone => f.write_str("POLISHED_BLACKSTONE"),
            MaterialMaterialEnum::PolishedBlackstoneSlab => f.write_str("POLISHED_BLACKSTONE_SLAB"),
            MaterialMaterialEnum::PolishedBlackstoneStairs => {
                f.write_str("POLISHED_BLACKSTONE_STAIRS")
            }
            MaterialMaterialEnum::ChiseledPolishedBlackstone => {
                f.write_str("CHISELED_POLISHED_BLACKSTONE")
            }
            MaterialMaterialEnum::PolishedBlackstoneBricks => {
                f.write_str("POLISHED_BLACKSTONE_BRICKS")
            }
            MaterialMaterialEnum::PolishedBlackstoneBrickSlab => {
                f.write_str("POLISHED_BLACKSTONE_BRICK_SLAB")
            }
            MaterialMaterialEnum::PolishedBlackstoneBrickStairs => {
                f.write_str("POLISHED_BLACKSTONE_BRICK_STAIRS")
            }
            MaterialMaterialEnum::CrackedPolishedBlackstoneBricks => {
                f.write_str("CRACKED_POLISHED_BLACKSTONE_BRICKS")
            }
            MaterialMaterialEnum::RespawnAnchor => f.write_str("RESPAWN_ANCHOR"),
            MaterialMaterialEnum::Candle => f.write_str("CANDLE"),
            MaterialMaterialEnum::WhiteCandle => f.write_str("WHITE_CANDLE"),
            MaterialMaterialEnum::OrangeCandle => f.write_str("ORANGE_CANDLE"),
            MaterialMaterialEnum::MagentaCandle => f.write_str("MAGENTA_CANDLE"),
            MaterialMaterialEnum::LightBlueCandle => f.write_str("LIGHT_BLUE_CANDLE"),
            MaterialMaterialEnum::YellowCandle => f.write_str("YELLOW_CANDLE"),
            MaterialMaterialEnum::LimeCandle => f.write_str("LIME_CANDLE"),
            MaterialMaterialEnum::PinkCandle => f.write_str("PINK_CANDLE"),
            MaterialMaterialEnum::GrayCandle => f.write_str("GRAY_CANDLE"),
            MaterialMaterialEnum::LightGrayCandle => f.write_str("LIGHT_GRAY_CANDLE"),
            MaterialMaterialEnum::CyanCandle => f.write_str("CYAN_CANDLE"),
            MaterialMaterialEnum::PurpleCandle => f.write_str("PURPLE_CANDLE"),
            MaterialMaterialEnum::BlueCandle => f.write_str("BLUE_CANDLE"),
            MaterialMaterialEnum::BrownCandle => f.write_str("BROWN_CANDLE"),
            MaterialMaterialEnum::GreenCandle => f.write_str("GREEN_CANDLE"),
            MaterialMaterialEnum::RedCandle => f.write_str("RED_CANDLE"),
            MaterialMaterialEnum::BlackCandle => f.write_str("BLACK_CANDLE"),
            MaterialMaterialEnum::SmallAmethystBud => f.write_str("SMALL_AMETHYST_BUD"),
            MaterialMaterialEnum::MediumAmethystBud => f.write_str("MEDIUM_AMETHYST_BUD"),
            MaterialMaterialEnum::LargeAmethystBud => f.write_str("LARGE_AMETHYST_BUD"),
            MaterialMaterialEnum::AmethystCluster => f.write_str("AMETHYST_CLUSTER"),
            MaterialMaterialEnum::PointedDripstone => f.write_str("POINTED_DRIPSTONE"),
            MaterialMaterialEnum::OchreFroglight => f.write_str("OCHRE_FROGLIGHT"),
            MaterialMaterialEnum::VerdantFroglight => f.write_str("VERDANT_FROGLIGHT"),
            MaterialMaterialEnum::PearlescentFroglight => f.write_str("PEARLESCENT_FROGLIGHT"),
            MaterialMaterialEnum::Frogspawn => f.write_str("FROGSPAWN"),
            MaterialMaterialEnum::EchoShard => f.write_str("ECHO_SHARD"),
            MaterialMaterialEnum::Brush => f.write_str("BRUSH"),
            MaterialMaterialEnum::NetheriteUpgradeSmithingTemplate => {
                f.write_str("NETHERITE_UPGRADE_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::SentryArmorTrimSmithingTemplate => {
                f.write_str("SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::DuneArmorTrimSmithingTemplate => {
                f.write_str("DUNE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::CoastArmorTrimSmithingTemplate => {
                f.write_str("COAST_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::WildArmorTrimSmithingTemplate => {
                f.write_str("WILD_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::WardArmorTrimSmithingTemplate => {
                f.write_str("WARD_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::EyeArmorTrimSmithingTemplate => {
                f.write_str("EYE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::VexArmorTrimSmithingTemplate => {
                f.write_str("VEX_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::TideArmorTrimSmithingTemplate => {
                f.write_str("TIDE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::SnoutArmorTrimSmithingTemplate => {
                f.write_str("SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::RibArmorTrimSmithingTemplate => {
                f.write_str("RIB_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::SpireArmorTrimSmithingTemplate => {
                f.write_str("SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::WayfinderArmorTrimSmithingTemplate => {
                f.write_str("WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::ShaperArmorTrimSmithingTemplate => {
                f.write_str("SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::SilenceArmorTrimSmithingTemplate => {
                f.write_str("SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::RaiserArmorTrimSmithingTemplate => {
                f.write_str("RAISER_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::HostArmorTrimSmithingTemplate => {
                f.write_str("HOST_ARMOR_TRIM_SMITHING_TEMPLATE")
            }
            MaterialMaterialEnum::AnglerPotterySherd => f.write_str("ANGLER_POTTERY_SHERD"),
            MaterialMaterialEnum::ArcherPotterySherd => f.write_str("ARCHER_POTTERY_SHERD"),
            MaterialMaterialEnum::ArmsUpPotterySherd => f.write_str("ARMS_UP_POTTERY_SHERD"),
            MaterialMaterialEnum::BladePotterySherd => f.write_str("BLADE_POTTERY_SHERD"),
            MaterialMaterialEnum::BrewerPotterySherd => f.write_str("BREWER_POTTERY_SHERD"),
            MaterialMaterialEnum::BurnPotterySherd => f.write_str("BURN_POTTERY_SHERD"),
            MaterialMaterialEnum::DangerPotterySherd => f.write_str("DANGER_POTTERY_SHERD"),
            MaterialMaterialEnum::ExplorerPotterySherd => f.write_str("EXPLORER_POTTERY_SHERD"),
            MaterialMaterialEnum::FriendPotterySherd => f.write_str("FRIEND_POTTERY_SHERD"),
            MaterialMaterialEnum::HeartPotterySherd => f.write_str("HEART_POTTERY_SHERD"),
            MaterialMaterialEnum::HeartbreakPotterySherd => f.write_str("HEARTBREAK_POTTERY_SHERD"),
            MaterialMaterialEnum::HowlPotterySherd => f.write_str("HOWL_POTTERY_SHERD"),
            MaterialMaterialEnum::MinerPotterySherd => f.write_str("MINER_POTTERY_SHERD"),
            MaterialMaterialEnum::MournerPotterySherd => f.write_str("MOURNER_POTTERY_SHERD"),
            MaterialMaterialEnum::PlentyPotterySherd => f.write_str("PLENTY_POTTERY_SHERD"),
            MaterialMaterialEnum::PrizePotterySherd => f.write_str("PRIZE_POTTERY_SHERD"),
            MaterialMaterialEnum::SheafPotterySherd => f.write_str("SHEAF_POTTERY_SHERD"),
            MaterialMaterialEnum::ShelterPotterySherd => f.write_str("SHELTER_POTTERY_SHERD"),
            MaterialMaterialEnum::SkullPotterySherd => f.write_str("SKULL_POTTERY_SHERD"),
            MaterialMaterialEnum::SnortPotterySherd => f.write_str("SNORT_POTTERY_SHERD"),
            MaterialMaterialEnum::Water => f.write_str("WATER"),
            MaterialMaterialEnum::Lava => f.write_str("LAVA"),
            MaterialMaterialEnum::TallSeagrass => f.write_str("TALL_SEAGRASS"),
            MaterialMaterialEnum::PistonHead => f.write_str("PISTON_HEAD"),
            MaterialMaterialEnum::MovingPiston => f.write_str("MOVING_PISTON"),
            MaterialMaterialEnum::WallTorch => f.write_str("WALL_TORCH"),
            MaterialMaterialEnum::Fire => f.write_str("FIRE"),
            MaterialMaterialEnum::SoulFire => f.write_str("SOUL_FIRE"),
            MaterialMaterialEnum::RedstoneWire => f.write_str("REDSTONE_WIRE"),
            MaterialMaterialEnum::OakWallSign => f.write_str("OAK_WALL_SIGN"),
            MaterialMaterialEnum::SpruceWallSign => f.write_str("SPRUCE_WALL_SIGN"),
            MaterialMaterialEnum::BirchWallSign => f.write_str("BIRCH_WALL_SIGN"),
            MaterialMaterialEnum::AcaciaWallSign => f.write_str("ACACIA_WALL_SIGN"),
            MaterialMaterialEnum::CherryWallSign => f.write_str("CHERRY_WALL_SIGN"),
            MaterialMaterialEnum::JungleWallSign => f.write_str("JUNGLE_WALL_SIGN"),
            MaterialMaterialEnum::DarkOakWallSign => f.write_str("DARK_OAK_WALL_SIGN"),
            MaterialMaterialEnum::MangroveWallSign => f.write_str("MANGROVE_WALL_SIGN"),
            MaterialMaterialEnum::BambooWallSign => f.write_str("BAMBOO_WALL_SIGN"),
            MaterialMaterialEnum::OakWallHangingSign => f.write_str("OAK_WALL_HANGING_SIGN"),
            MaterialMaterialEnum::SpruceWallHangingSign => f.write_str("SPRUCE_WALL_HANGING_SIGN"),
            MaterialMaterialEnum::BirchWallHangingSign => f.write_str("BIRCH_WALL_HANGING_SIGN"),
            MaterialMaterialEnum::AcaciaWallHangingSign => f.write_str("ACACIA_WALL_HANGING_SIGN"),
            MaterialMaterialEnum::CherryWallHangingSign => f.write_str("CHERRY_WALL_HANGING_SIGN"),
            MaterialMaterialEnum::JungleWallHangingSign => f.write_str("JUNGLE_WALL_HANGING_SIGN"),
            MaterialMaterialEnum::DarkOakWallHangingSign => {
                f.write_str("DARK_OAK_WALL_HANGING_SIGN")
            }
            MaterialMaterialEnum::MangroveWallHangingSign => {
                f.write_str("MANGROVE_WALL_HANGING_SIGN")
            }
            MaterialMaterialEnum::CrimsonWallHangingSign => {
                f.write_str("CRIMSON_WALL_HANGING_SIGN")
            }
            MaterialMaterialEnum::WarpedWallHangingSign => f.write_str("WARPED_WALL_HANGING_SIGN"),
            MaterialMaterialEnum::BambooWallHangingSign => f.write_str("BAMBOO_WALL_HANGING_SIGN"),
            MaterialMaterialEnum::RedstoneWallTorch => f.write_str("REDSTONE_WALL_TORCH"),
            MaterialMaterialEnum::SoulWallTorch => f.write_str("SOUL_WALL_TORCH"),
            MaterialMaterialEnum::NetherPortal => f.write_str("NETHER_PORTAL"),
            MaterialMaterialEnum::AttachedPumpkinStem => f.write_str("ATTACHED_PUMPKIN_STEM"),
            MaterialMaterialEnum::AttachedMelonStem => f.write_str("ATTACHED_MELON_STEM"),
            MaterialMaterialEnum::PumpkinStem => f.write_str("PUMPKIN_STEM"),
            MaterialMaterialEnum::MelonStem => f.write_str("MELON_STEM"),
            MaterialMaterialEnum::WaterCauldron => f.write_str("WATER_CAULDRON"),
            MaterialMaterialEnum::LavaCauldron => f.write_str("LAVA_CAULDRON"),
            MaterialMaterialEnum::PowderSnowCauldron => f.write_str("POWDER_SNOW_CAULDRON"),
            MaterialMaterialEnum::EndPortal => f.write_str("END_PORTAL"),
            MaterialMaterialEnum::Cocoa => f.write_str("COCOA"),
            MaterialMaterialEnum::Tripwire => f.write_str("TRIPWIRE"),
            MaterialMaterialEnum::PottedTorchflower => f.write_str("POTTED_TORCHFLOWER"),
            MaterialMaterialEnum::PottedOakSapling => f.write_str("POTTED_OAK_SAPLING"),
            MaterialMaterialEnum::PottedSpruceSapling => f.write_str("POTTED_SPRUCE_SAPLING"),
            MaterialMaterialEnum::PottedBirchSapling => f.write_str("POTTED_BIRCH_SAPLING"),
            MaterialMaterialEnum::PottedJungleSapling => f.write_str("POTTED_JUNGLE_SAPLING"),
            MaterialMaterialEnum::PottedAcaciaSapling => f.write_str("POTTED_ACACIA_SAPLING"),
            MaterialMaterialEnum::PottedCherrySapling => f.write_str("POTTED_CHERRY_SAPLING"),
            MaterialMaterialEnum::PottedDarkOakSapling => f.write_str("POTTED_DARK_OAK_SAPLING"),
            MaterialMaterialEnum::PottedMangrovePropagule => {
                f.write_str("POTTED_MANGROVE_PROPAGULE")
            }
            MaterialMaterialEnum::PottedFern => f.write_str("POTTED_FERN"),
            MaterialMaterialEnum::PottedDandelion => f.write_str("POTTED_DANDELION"),
            MaterialMaterialEnum::PottedPoppy => f.write_str("POTTED_POPPY"),
            MaterialMaterialEnum::PottedBlueOrchid => f.write_str("POTTED_BLUE_ORCHID"),
            MaterialMaterialEnum::PottedAllium => f.write_str("POTTED_ALLIUM"),
            MaterialMaterialEnum::PottedAzureBluet => f.write_str("POTTED_AZURE_BLUET"),
            MaterialMaterialEnum::PottedRedTulip => f.write_str("POTTED_RED_TULIP"),
            MaterialMaterialEnum::PottedOrangeTulip => f.write_str("POTTED_ORANGE_TULIP"),
            MaterialMaterialEnum::PottedWhiteTulip => f.write_str("POTTED_WHITE_TULIP"),
            MaterialMaterialEnum::PottedPinkTulip => f.write_str("POTTED_PINK_TULIP"),
            MaterialMaterialEnum::PottedOxeyeDaisy => f.write_str("POTTED_OXEYE_DAISY"),
            MaterialMaterialEnum::PottedCornflower => f.write_str("POTTED_CORNFLOWER"),
            MaterialMaterialEnum::PottedLilyOfTheValley => f.write_str("POTTED_LILY_OF_THE_VALLEY"),
            MaterialMaterialEnum::PottedWitherRose => f.write_str("POTTED_WITHER_ROSE"),
            MaterialMaterialEnum::PottedRedMushroom => f.write_str("POTTED_RED_MUSHROOM"),
            MaterialMaterialEnum::PottedBrownMushroom => f.write_str("POTTED_BROWN_MUSHROOM"),
            MaterialMaterialEnum::PottedDeadBush => f.write_str("POTTED_DEAD_BUSH"),
            MaterialMaterialEnum::PottedCactus => f.write_str("POTTED_CACTUS"),
            MaterialMaterialEnum::Carrots => f.write_str("CARROTS"),
            MaterialMaterialEnum::Potatoes => f.write_str("POTATOES"),
            MaterialMaterialEnum::SkeletonWallSkull => f.write_str("SKELETON_WALL_SKULL"),
            MaterialMaterialEnum::WitherSkeletonWallSkull => {
                f.write_str("WITHER_SKELETON_WALL_SKULL")
            }
            MaterialMaterialEnum::ZombieWallHead => f.write_str("ZOMBIE_WALL_HEAD"),
            MaterialMaterialEnum::PlayerWallHead => f.write_str("PLAYER_WALL_HEAD"),
            MaterialMaterialEnum::CreeperWallHead => f.write_str("CREEPER_WALL_HEAD"),
            MaterialMaterialEnum::DragonWallHead => f.write_str("DRAGON_WALL_HEAD"),
            MaterialMaterialEnum::PiglinWallHead => f.write_str("PIGLIN_WALL_HEAD"),
            MaterialMaterialEnum::WhiteWallBanner => f.write_str("WHITE_WALL_BANNER"),
            MaterialMaterialEnum::OrangeWallBanner => f.write_str("ORANGE_WALL_BANNER"),
            MaterialMaterialEnum::MagentaWallBanner => f.write_str("MAGENTA_WALL_BANNER"),
            MaterialMaterialEnum::LightBlueWallBanner => f.write_str("LIGHT_BLUE_WALL_BANNER"),
            MaterialMaterialEnum::YellowWallBanner => f.write_str("YELLOW_WALL_BANNER"),
            MaterialMaterialEnum::LimeWallBanner => f.write_str("LIME_WALL_BANNER"),
            MaterialMaterialEnum::PinkWallBanner => f.write_str("PINK_WALL_BANNER"),
            MaterialMaterialEnum::GrayWallBanner => f.write_str("GRAY_WALL_BANNER"),
            MaterialMaterialEnum::LightGrayWallBanner => f.write_str("LIGHT_GRAY_WALL_BANNER"),
            MaterialMaterialEnum::CyanWallBanner => f.write_str("CYAN_WALL_BANNER"),
            MaterialMaterialEnum::PurpleWallBanner => f.write_str("PURPLE_WALL_BANNER"),
            MaterialMaterialEnum::BlueWallBanner => f.write_str("BLUE_WALL_BANNER"),
            MaterialMaterialEnum::BrownWallBanner => f.write_str("BROWN_WALL_BANNER"),
            MaterialMaterialEnum::GreenWallBanner => f.write_str("GREEN_WALL_BANNER"),
            MaterialMaterialEnum::RedWallBanner => f.write_str("RED_WALL_BANNER"),
            MaterialMaterialEnum::BlackWallBanner => f.write_str("BLACK_WALL_BANNER"),
            MaterialMaterialEnum::TorchflowerCrop => f.write_str("TORCHFLOWER_CROP"),
            MaterialMaterialEnum::PitcherCrop => f.write_str("PITCHER_CROP"),
            MaterialMaterialEnum::Beetroots => f.write_str("BEETROOTS"),
            MaterialMaterialEnum::EndGateway => f.write_str("END_GATEWAY"),
            MaterialMaterialEnum::FrostedIce => f.write_str("FROSTED_ICE"),
            MaterialMaterialEnum::KelpPlant => f.write_str("KELP_PLANT"),
            MaterialMaterialEnum::DeadTubeCoralWallFan => f.write_str("DEAD_TUBE_CORAL_WALL_FAN"),
            MaterialMaterialEnum::DeadBrainCoralWallFan => f.write_str("DEAD_BRAIN_CORAL_WALL_FAN"),
            MaterialMaterialEnum::DeadBubbleCoralWallFan => {
                f.write_str("DEAD_BUBBLE_CORAL_WALL_FAN")
            }
            MaterialMaterialEnum::DeadFireCoralWallFan => f.write_str("DEAD_FIRE_CORAL_WALL_FAN"),
            MaterialMaterialEnum::DeadHornCoralWallFan => f.write_str("DEAD_HORN_CORAL_WALL_FAN"),
            MaterialMaterialEnum::TubeCoralWallFan => f.write_str("TUBE_CORAL_WALL_FAN"),
            MaterialMaterialEnum::BrainCoralWallFan => f.write_str("BRAIN_CORAL_WALL_FAN"),
            MaterialMaterialEnum::BubbleCoralWallFan => f.write_str("BUBBLE_CORAL_WALL_FAN"),
            MaterialMaterialEnum::FireCoralWallFan => f.write_str("FIRE_CORAL_WALL_FAN"),
            MaterialMaterialEnum::HornCoralWallFan => f.write_str("HORN_CORAL_WALL_FAN"),
            MaterialMaterialEnum::BambooSapling => f.write_str("BAMBOO_SAPLING"),
            MaterialMaterialEnum::PottedBamboo => f.write_str("POTTED_BAMBOO"),
            MaterialMaterialEnum::VoidAir => f.write_str("VOID_AIR"),
            MaterialMaterialEnum::CaveAir => f.write_str("CAVE_AIR"),
            MaterialMaterialEnum::BubbleColumn => f.write_str("BUBBLE_COLUMN"),
            MaterialMaterialEnum::SweetBerryBush => f.write_str("SWEET_BERRY_BUSH"),
            MaterialMaterialEnum::WeepingVinesPlant => f.write_str("WEEPING_VINES_PLANT"),
            MaterialMaterialEnum::TwistingVinesPlant => f.write_str("TWISTING_VINES_PLANT"),
            MaterialMaterialEnum::CrimsonWallSign => f.write_str("CRIMSON_WALL_SIGN"),
            MaterialMaterialEnum::WarpedWallSign => f.write_str("WARPED_WALL_SIGN"),
            MaterialMaterialEnum::PottedCrimsonFungus => f.write_str("POTTED_CRIMSON_FUNGUS"),
            MaterialMaterialEnum::PottedWarpedFungus => f.write_str("POTTED_WARPED_FUNGUS"),
            MaterialMaterialEnum::PottedCrimsonRoots => f.write_str("POTTED_CRIMSON_ROOTS"),
            MaterialMaterialEnum::PottedWarpedRoots => f.write_str("POTTED_WARPED_ROOTS"),
            MaterialMaterialEnum::CandleCake => f.write_str("CANDLE_CAKE"),
            MaterialMaterialEnum::WhiteCandleCake => f.write_str("WHITE_CANDLE_CAKE"),
            MaterialMaterialEnum::OrangeCandleCake => f.write_str("ORANGE_CANDLE_CAKE"),
            MaterialMaterialEnum::MagentaCandleCake => f.write_str("MAGENTA_CANDLE_CAKE"),
            MaterialMaterialEnum::LightBlueCandleCake => f.write_str("LIGHT_BLUE_CANDLE_CAKE"),
            MaterialMaterialEnum::YellowCandleCake => f.write_str("YELLOW_CANDLE_CAKE"),
            MaterialMaterialEnum::LimeCandleCake => f.write_str("LIME_CANDLE_CAKE"),
            MaterialMaterialEnum::PinkCandleCake => f.write_str("PINK_CANDLE_CAKE"),
            MaterialMaterialEnum::GrayCandleCake => f.write_str("GRAY_CANDLE_CAKE"),
            MaterialMaterialEnum::LightGrayCandleCake => f.write_str("LIGHT_GRAY_CANDLE_CAKE"),
            MaterialMaterialEnum::CyanCandleCake => f.write_str("CYAN_CANDLE_CAKE"),
            MaterialMaterialEnum::PurpleCandleCake => f.write_str("PURPLE_CANDLE_CAKE"),
            MaterialMaterialEnum::BlueCandleCake => f.write_str("BLUE_CANDLE_CAKE"),
            MaterialMaterialEnum::BrownCandleCake => f.write_str("BROWN_CANDLE_CAKE"),
            MaterialMaterialEnum::GreenCandleCake => f.write_str("GREEN_CANDLE_CAKE"),
            MaterialMaterialEnum::RedCandleCake => f.write_str("RED_CANDLE_CAKE"),
            MaterialMaterialEnum::BlackCandleCake => f.write_str("BLACK_CANDLE_CAKE"),
            MaterialMaterialEnum::PowderSnow => f.write_str("POWDER_SNOW"),
            MaterialMaterialEnum::CaveVines => f.write_str("CAVE_VINES"),
            MaterialMaterialEnum::CaveVinesPlant => f.write_str("CAVE_VINES_PLANT"),
            MaterialMaterialEnum::BigDripleafStem => f.write_str("BIG_DRIPLEAF_STEM"),
            MaterialMaterialEnum::PottedAzaleaBush => f.write_str("POTTED_AZALEA_BUSH"),
            MaterialMaterialEnum::PottedFloweringAzaleaBush => {
                f.write_str("POTTED_FLOWERING_AZALEA_BUSH")
            }
            MaterialMaterialEnum::LegacyAir => f.write_str("LEGACY_AIR"),
            MaterialMaterialEnum::LegacyStone => f.write_str("LEGACY_STONE"),
            MaterialMaterialEnum::LegacyGrass => f.write_str("LEGACY_GRASS"),
            MaterialMaterialEnum::LegacyDirt => f.write_str("LEGACY_DIRT"),
            MaterialMaterialEnum::LegacyCobblestone => f.write_str("LEGACY_COBBLESTONE"),
            MaterialMaterialEnum::LegacyWood => f.write_str("LEGACY_WOOD"),
            MaterialMaterialEnum::LegacySapling => f.write_str("LEGACY_SAPLING"),
            MaterialMaterialEnum::LegacyBedrock => f.write_str("LEGACY_BEDROCK"),
            MaterialMaterialEnum::LegacyWater => f.write_str("LEGACY_WATER"),
            MaterialMaterialEnum::LegacyStationaryWater => f.write_str("LEGACY_STATIONARY_WATER"),
            MaterialMaterialEnum::LegacyLava => f.write_str("LEGACY_LAVA"),
            MaterialMaterialEnum::LegacyStationaryLava => f.write_str("LEGACY_STATIONARY_LAVA"),
            MaterialMaterialEnum::LegacySand => f.write_str("LEGACY_SAND"),
            MaterialMaterialEnum::LegacyGravel => f.write_str("LEGACY_GRAVEL"),
            MaterialMaterialEnum::LegacyGoldOre => f.write_str("LEGACY_GOLD_ORE"),
            MaterialMaterialEnum::LegacyIronOre => f.write_str("LEGACY_IRON_ORE"),
            MaterialMaterialEnum::LegacyCoalOre => f.write_str("LEGACY_COAL_ORE"),
            MaterialMaterialEnum::LegacyLog => f.write_str("LEGACY_LOG"),
            MaterialMaterialEnum::LegacyLeaves => f.write_str("LEGACY_LEAVES"),
            MaterialMaterialEnum::LegacySponge => f.write_str("LEGACY_SPONGE"),
            MaterialMaterialEnum::LegacyGlass => f.write_str("LEGACY_GLASS"),
            MaterialMaterialEnum::LegacyLapisOre => f.write_str("LEGACY_LAPIS_ORE"),
            MaterialMaterialEnum::LegacyLapisBlock => f.write_str("LEGACY_LAPIS_BLOCK"),
            MaterialMaterialEnum::LegacyDispenser => f.write_str("LEGACY_DISPENSER"),
            MaterialMaterialEnum::LegacySandstone => f.write_str("LEGACY_SANDSTONE"),
            MaterialMaterialEnum::LegacyNoteBlock => f.write_str("LEGACY_NOTE_BLOCK"),
            MaterialMaterialEnum::LegacyBedBlock => f.write_str("LEGACY_BED_BLOCK"),
            MaterialMaterialEnum::LegacyPoweredRail => f.write_str("LEGACY_POWERED_RAIL"),
            MaterialMaterialEnum::LegacyDetectorRail => f.write_str("LEGACY_DETECTOR_RAIL"),
            MaterialMaterialEnum::LegacyPistonStickyBase => {
                f.write_str("LEGACY_PISTON_STICKY_BASE")
            }
            MaterialMaterialEnum::LegacyWeb => f.write_str("LEGACY_WEB"),
            MaterialMaterialEnum::LegacyLongGrass => f.write_str("LEGACY_LONG_GRASS"),
            MaterialMaterialEnum::LegacyDeadBush => f.write_str("LEGACY_DEAD_BUSH"),
            MaterialMaterialEnum::LegacyPistonBase => f.write_str("LEGACY_PISTON_BASE"),
            MaterialMaterialEnum::LegacyPistonExtension => f.write_str("LEGACY_PISTON_EXTENSION"),
            MaterialMaterialEnum::LegacyWool => f.write_str("LEGACY_WOOL"),
            MaterialMaterialEnum::LegacyPistonMovingPiece => {
                f.write_str("LEGACY_PISTON_MOVING_PIECE")
            }
            MaterialMaterialEnum::LegacyYellowFlower => f.write_str("LEGACY_YELLOW_FLOWER"),
            MaterialMaterialEnum::LegacyRedRose => f.write_str("LEGACY_RED_ROSE"),
            MaterialMaterialEnum::LegacyBrownMushroom => f.write_str("LEGACY_BROWN_MUSHROOM"),
            MaterialMaterialEnum::LegacyRedMushroom => f.write_str("LEGACY_RED_MUSHROOM"),
            MaterialMaterialEnum::LegacyGoldBlock => f.write_str("LEGACY_GOLD_BLOCK"),
            MaterialMaterialEnum::LegacyIronBlock => f.write_str("LEGACY_IRON_BLOCK"),
            MaterialMaterialEnum::LegacyDoubleStep => f.write_str("LEGACY_DOUBLE_STEP"),
            MaterialMaterialEnum::LegacyStep => f.write_str("LEGACY_STEP"),
            MaterialMaterialEnum::LegacyBrick => f.write_str("LEGACY_BRICK"),
            MaterialMaterialEnum::LegacyTnt => f.write_str("LEGACY_TNT"),
            MaterialMaterialEnum::LegacyBookshelf => f.write_str("LEGACY_BOOKSHELF"),
            MaterialMaterialEnum::LegacyMossyCobblestone => f.write_str("LEGACY_MOSSY_COBBLESTONE"),
            MaterialMaterialEnum::LegacyObsidian => f.write_str("LEGACY_OBSIDIAN"),
            MaterialMaterialEnum::LegacyTorch => f.write_str("LEGACY_TORCH"),
            MaterialMaterialEnum::LegacyFire => f.write_str("LEGACY_FIRE"),
            MaterialMaterialEnum::LegacyMobSpawner => f.write_str("LEGACY_MOB_SPAWNER"),
            MaterialMaterialEnum::LegacyWoodStairs => f.write_str("LEGACY_WOOD_STAIRS"),
            MaterialMaterialEnum::LegacyChest => f.write_str("LEGACY_CHEST"),
            MaterialMaterialEnum::LegacyRedstoneWire => f.write_str("LEGACY_REDSTONE_WIRE"),
            MaterialMaterialEnum::LegacyDiamondOre => f.write_str("LEGACY_DIAMOND_ORE"),
            MaterialMaterialEnum::LegacyDiamondBlock => f.write_str("LEGACY_DIAMOND_BLOCK"),
            MaterialMaterialEnum::LegacyWorkbench => f.write_str("LEGACY_WORKBENCH"),
            MaterialMaterialEnum::LegacyCrops => f.write_str("LEGACY_CROPS"),
            MaterialMaterialEnum::LegacySoil => f.write_str("LEGACY_SOIL"),
            MaterialMaterialEnum::LegacyFurnace => f.write_str("LEGACY_FURNACE"),
            MaterialMaterialEnum::LegacyBurningFurnace => f.write_str("LEGACY_BURNING_FURNACE"),
            MaterialMaterialEnum::LegacySignPost => f.write_str("LEGACY_SIGN_POST"),
            MaterialMaterialEnum::LegacyWoodenDoor => f.write_str("LEGACY_WOODEN_DOOR"),
            MaterialMaterialEnum::LegacyLadder => f.write_str("LEGACY_LADDER"),
            MaterialMaterialEnum::LegacyRails => f.write_str("LEGACY_RAILS"),
            MaterialMaterialEnum::LegacyCobblestoneStairs => {
                f.write_str("LEGACY_COBBLESTONE_STAIRS")
            }
            MaterialMaterialEnum::LegacyWallSign => f.write_str("LEGACY_WALL_SIGN"),
            MaterialMaterialEnum::LegacyLever => f.write_str("LEGACY_LEVER"),
            MaterialMaterialEnum::LegacyStonePlate => f.write_str("LEGACY_STONE_PLATE"),
            MaterialMaterialEnum::LegacyIronDoorBlock => f.write_str("LEGACY_IRON_DOOR_BLOCK"),
            MaterialMaterialEnum::LegacyWoodPlate => f.write_str("LEGACY_WOOD_PLATE"),
            MaterialMaterialEnum::LegacyRedstoneOre => f.write_str("LEGACY_REDSTONE_ORE"),
            MaterialMaterialEnum::LegacyGlowingRedstoneOre => {
                f.write_str("LEGACY_GLOWING_REDSTONE_ORE")
            }
            MaterialMaterialEnum::LegacyRedstoneTorchOff => {
                f.write_str("LEGACY_REDSTONE_TORCH_OFF")
            }
            MaterialMaterialEnum::LegacyRedstoneTorchOn => f.write_str("LEGACY_REDSTONE_TORCH_ON"),
            MaterialMaterialEnum::LegacyStoneButton => f.write_str("LEGACY_STONE_BUTTON"),
            MaterialMaterialEnum::LegacySnow => f.write_str("LEGACY_SNOW"),
            MaterialMaterialEnum::LegacyIce => f.write_str("LEGACY_ICE"),
            MaterialMaterialEnum::LegacySnowBlock => f.write_str("LEGACY_SNOW_BLOCK"),
            MaterialMaterialEnum::LegacyCactus => f.write_str("LEGACY_CACTUS"),
            MaterialMaterialEnum::LegacyClay => f.write_str("LEGACY_CLAY"),
            MaterialMaterialEnum::LegacySugarCaneBlock => f.write_str("LEGACY_SUGAR_CANE_BLOCK"),
            MaterialMaterialEnum::LegacyJukebox => f.write_str("LEGACY_JUKEBOX"),
            MaterialMaterialEnum::LegacyFence => f.write_str("LEGACY_FENCE"),
            MaterialMaterialEnum::LegacyPumpkin => f.write_str("LEGACY_PUMPKIN"),
            MaterialMaterialEnum::LegacyNetherrack => f.write_str("LEGACY_NETHERRACK"),
            MaterialMaterialEnum::LegacySoulSand => f.write_str("LEGACY_SOUL_SAND"),
            MaterialMaterialEnum::LegacyGlowstone => f.write_str("LEGACY_GLOWSTONE"),
            MaterialMaterialEnum::LegacyPortal => f.write_str("LEGACY_PORTAL"),
            MaterialMaterialEnum::LegacyJackOLantern => f.write_str("LEGACY_JACK_O_LANTERN"),
            MaterialMaterialEnum::LegacyCakeBlock => f.write_str("LEGACY_CAKE_BLOCK"),
            MaterialMaterialEnum::LegacyDiodeBlockOff => f.write_str("LEGACY_DIODE_BLOCK_OFF"),
            MaterialMaterialEnum::LegacyDiodeBlockOn => f.write_str("LEGACY_DIODE_BLOCK_ON"),
            MaterialMaterialEnum::LegacyStainedGlass => f.write_str("LEGACY_STAINED_GLASS"),
            MaterialMaterialEnum::LegacyTrapDoor => f.write_str("LEGACY_TRAP_DOOR"),
            MaterialMaterialEnum::LegacyMonsterEggs => f.write_str("LEGACY_MONSTER_EGGS"),
            MaterialMaterialEnum::LegacySmoothBrick => f.write_str("LEGACY_SMOOTH_BRICK"),
            MaterialMaterialEnum::LegacyHugeMushroom1 => f.write_str("LEGACY_HUGE_MUSHROOM_1"),
            MaterialMaterialEnum::LegacyHugeMushroom2 => f.write_str("LEGACY_HUGE_MUSHROOM_2"),
            MaterialMaterialEnum::LegacyIronFence => f.write_str("LEGACY_IRON_FENCE"),
            MaterialMaterialEnum::LegacyThinGlass => f.write_str("LEGACY_THIN_GLASS"),
            MaterialMaterialEnum::LegacyMelonBlock => f.write_str("LEGACY_MELON_BLOCK"),
            MaterialMaterialEnum::LegacyPumpkinStem => f.write_str("LEGACY_PUMPKIN_STEM"),
            MaterialMaterialEnum::LegacyMelonStem => f.write_str("LEGACY_MELON_STEM"),
            MaterialMaterialEnum::LegacyVine => f.write_str("LEGACY_VINE"),
            MaterialMaterialEnum::LegacyFenceGate => f.write_str("LEGACY_FENCE_GATE"),
            MaterialMaterialEnum::LegacyBrickStairs => f.write_str("LEGACY_BRICK_STAIRS"),
            MaterialMaterialEnum::LegacySmoothStairs => f.write_str("LEGACY_SMOOTH_STAIRS"),
            MaterialMaterialEnum::LegacyMycel => f.write_str("LEGACY_MYCEL"),
            MaterialMaterialEnum::LegacyWaterLily => f.write_str("LEGACY_WATER_LILY"),
            MaterialMaterialEnum::LegacyNetherBrick => f.write_str("LEGACY_NETHER_BRICK"),
            MaterialMaterialEnum::LegacyNetherFence => f.write_str("LEGACY_NETHER_FENCE"),
            MaterialMaterialEnum::LegacyNetherBrickStairs => {
                f.write_str("LEGACY_NETHER_BRICK_STAIRS")
            }
            MaterialMaterialEnum::LegacyNetherWarts => f.write_str("LEGACY_NETHER_WARTS"),
            MaterialMaterialEnum::LegacyEnchantmentTable => f.write_str("LEGACY_ENCHANTMENT_TABLE"),
            MaterialMaterialEnum::LegacyBrewingStand => f.write_str("LEGACY_BREWING_STAND"),
            MaterialMaterialEnum::LegacyCauldron => f.write_str("LEGACY_CAULDRON"),
            MaterialMaterialEnum::LegacyEnderPortal => f.write_str("LEGACY_ENDER_PORTAL"),
            MaterialMaterialEnum::LegacyEnderPortalFrame => {
                f.write_str("LEGACY_ENDER_PORTAL_FRAME")
            }
            MaterialMaterialEnum::LegacyEnderStone => f.write_str("LEGACY_ENDER_STONE"),
            MaterialMaterialEnum::LegacyDragonEgg => f.write_str("LEGACY_DRAGON_EGG"),
            MaterialMaterialEnum::LegacyRedstoneLampOff => f.write_str("LEGACY_REDSTONE_LAMP_OFF"),
            MaterialMaterialEnum::LegacyRedstoneLampOn => f.write_str("LEGACY_REDSTONE_LAMP_ON"),
            MaterialMaterialEnum::LegacyWoodDoubleStep => f.write_str("LEGACY_WOOD_DOUBLE_STEP"),
            MaterialMaterialEnum::LegacyWoodStep => f.write_str("LEGACY_WOOD_STEP"),
            MaterialMaterialEnum::LegacyCocoa => f.write_str("LEGACY_COCOA"),
            MaterialMaterialEnum::LegacySandstoneStairs => f.write_str("LEGACY_SANDSTONE_STAIRS"),
            MaterialMaterialEnum::LegacyEmeraldOre => f.write_str("LEGACY_EMERALD_ORE"),
            MaterialMaterialEnum::LegacyEnderChest => f.write_str("LEGACY_ENDER_CHEST"),
            MaterialMaterialEnum::LegacyTripwireHook => f.write_str("LEGACY_TRIPWIRE_HOOK"),
            MaterialMaterialEnum::LegacyTripwire => f.write_str("LEGACY_TRIPWIRE"),
            MaterialMaterialEnum::LegacyEmeraldBlock => f.write_str("LEGACY_EMERALD_BLOCK"),
            MaterialMaterialEnum::LegacySpruceWoodStairs => {
                f.write_str("LEGACY_SPRUCE_WOOD_STAIRS")
            }
            MaterialMaterialEnum::LegacyBirchWoodStairs => f.write_str("LEGACY_BIRCH_WOOD_STAIRS"),
            MaterialMaterialEnum::LegacyJungleWoodStairs => {
                f.write_str("LEGACY_JUNGLE_WOOD_STAIRS")
            }
            MaterialMaterialEnum::LegacyCommand => f.write_str("LEGACY_COMMAND"),
            MaterialMaterialEnum::LegacyBeacon => f.write_str("LEGACY_BEACON"),
            MaterialMaterialEnum::LegacyCobbleWall => f.write_str("LEGACY_COBBLE_WALL"),
            MaterialMaterialEnum::LegacyFlowerPot => f.write_str("LEGACY_FLOWER_POT"),
            MaterialMaterialEnum::LegacyCarrot => f.write_str("LEGACY_CARROT"),
            MaterialMaterialEnum::LegacyPotato => f.write_str("LEGACY_POTATO"),
            MaterialMaterialEnum::LegacyWoodButton => f.write_str("LEGACY_WOOD_BUTTON"),
            MaterialMaterialEnum::LegacySkull => f.write_str("LEGACY_SKULL"),
            MaterialMaterialEnum::LegacyAnvil => f.write_str("LEGACY_ANVIL"),
            MaterialMaterialEnum::LegacyTrappedChest => f.write_str("LEGACY_TRAPPED_CHEST"),
            MaterialMaterialEnum::LegacyGoldPlate => f.write_str("LEGACY_GOLD_PLATE"),
            MaterialMaterialEnum::LegacyIronPlate => f.write_str("LEGACY_IRON_PLATE"),
            MaterialMaterialEnum::LegacyRedstoneComparatorOff => {
                f.write_str("LEGACY_REDSTONE_COMPARATOR_OFF")
            }
            MaterialMaterialEnum::LegacyRedstoneComparatorOn => {
                f.write_str("LEGACY_REDSTONE_COMPARATOR_ON")
            }
            MaterialMaterialEnum::LegacyDaylightDetector => f.write_str("LEGACY_DAYLIGHT_DETECTOR"),
            MaterialMaterialEnum::LegacyRedstoneBlock => f.write_str("LEGACY_REDSTONE_BLOCK"),
            MaterialMaterialEnum::LegacyQuartzOre => f.write_str("LEGACY_QUARTZ_ORE"),
            MaterialMaterialEnum::LegacyHopper => f.write_str("LEGACY_HOPPER"),
            MaterialMaterialEnum::LegacyQuartzBlock => f.write_str("LEGACY_QUARTZ_BLOCK"),
            MaterialMaterialEnum::LegacyQuartzStairs => f.write_str("LEGACY_QUARTZ_STAIRS"),
            MaterialMaterialEnum::LegacyActivatorRail => f.write_str("LEGACY_ACTIVATOR_RAIL"),
            MaterialMaterialEnum::LegacyDropper => f.write_str("LEGACY_DROPPER"),
            MaterialMaterialEnum::LegacyStainedClay => f.write_str("LEGACY_STAINED_CLAY"),
            MaterialMaterialEnum::LegacyStainedGlassPane => {
                f.write_str("LEGACY_STAINED_GLASS_PANE")
            }
            MaterialMaterialEnum::LegacyLeaves2 => f.write_str("LEGACY_LEAVES_2"),
            MaterialMaterialEnum::LegacyLog2 => f.write_str("LEGACY_LOG_2"),
            MaterialMaterialEnum::LegacyAcaciaStairs => f.write_str("LEGACY_ACACIA_STAIRS"),
            MaterialMaterialEnum::LegacyDarkOakStairs => f.write_str("LEGACY_DARK_OAK_STAIRS"),
            MaterialMaterialEnum::LegacySlimeBlock => f.write_str("LEGACY_SLIME_BLOCK"),
            MaterialMaterialEnum::LegacyBarrier => f.write_str("LEGACY_BARRIER"),
            MaterialMaterialEnum::LegacyIronTrapdoor => f.write_str("LEGACY_IRON_TRAPDOOR"),
            MaterialMaterialEnum::LegacyPrismarine => f.write_str("LEGACY_PRISMARINE"),
            MaterialMaterialEnum::LegacySeaLantern => f.write_str("LEGACY_SEA_LANTERN"),
            MaterialMaterialEnum::LegacyHayBlock => f.write_str("LEGACY_HAY_BLOCK"),
            MaterialMaterialEnum::LegacyCarpet => f.write_str("LEGACY_CARPET"),
            MaterialMaterialEnum::LegacyHardClay => f.write_str("LEGACY_HARD_CLAY"),
            MaterialMaterialEnum::LegacyCoalBlock => f.write_str("LEGACY_COAL_BLOCK"),
            MaterialMaterialEnum::LegacyPackedIce => f.write_str("LEGACY_PACKED_ICE"),
            MaterialMaterialEnum::LegacyDoublePlant => f.write_str("LEGACY_DOUBLE_PLANT"),
            MaterialMaterialEnum::LegacyStandingBanner => f.write_str("LEGACY_STANDING_BANNER"),
            MaterialMaterialEnum::LegacyWallBanner => f.write_str("LEGACY_WALL_BANNER"),
            MaterialMaterialEnum::LegacyDaylightDetectorInverted => {
                f.write_str("LEGACY_DAYLIGHT_DETECTOR_INVERTED")
            }
            MaterialMaterialEnum::LegacyRedSandstone => f.write_str("LEGACY_RED_SANDSTONE"),
            MaterialMaterialEnum::LegacyRedSandstoneStairs => {
                f.write_str("LEGACY_RED_SANDSTONE_STAIRS")
            }
            MaterialMaterialEnum::LegacyDoubleStoneSlab2 => {
                f.write_str("LEGACY_DOUBLE_STONE_SLAB2")
            }
            MaterialMaterialEnum::LegacyStoneSlab2 => f.write_str("LEGACY_STONE_SLAB2"),
            MaterialMaterialEnum::LegacySpruceFenceGate => f.write_str("LEGACY_SPRUCE_FENCE_GATE"),
            MaterialMaterialEnum::LegacyBirchFenceGate => f.write_str("LEGACY_BIRCH_FENCE_GATE"),
            MaterialMaterialEnum::LegacyJungleFenceGate => f.write_str("LEGACY_JUNGLE_FENCE_GATE"),
            MaterialMaterialEnum::LegacyDarkOakFenceGate => {
                f.write_str("LEGACY_DARK_OAK_FENCE_GATE")
            }
            MaterialMaterialEnum::LegacyAcaciaFenceGate => f.write_str("LEGACY_ACACIA_FENCE_GATE"),
            MaterialMaterialEnum::LegacySpruceFence => f.write_str("LEGACY_SPRUCE_FENCE"),
            MaterialMaterialEnum::LegacyBirchFence => f.write_str("LEGACY_BIRCH_FENCE"),
            MaterialMaterialEnum::LegacyJungleFence => f.write_str("LEGACY_JUNGLE_FENCE"),
            MaterialMaterialEnum::LegacyDarkOakFence => f.write_str("LEGACY_DARK_OAK_FENCE"),
            MaterialMaterialEnum::LegacyAcaciaFence => f.write_str("LEGACY_ACACIA_FENCE"),
            MaterialMaterialEnum::LegacySpruceDoor => f.write_str("LEGACY_SPRUCE_DOOR"),
            MaterialMaterialEnum::LegacyBirchDoor => f.write_str("LEGACY_BIRCH_DOOR"),
            MaterialMaterialEnum::LegacyJungleDoor => f.write_str("LEGACY_JUNGLE_DOOR"),
            MaterialMaterialEnum::LegacyAcaciaDoor => f.write_str("LEGACY_ACACIA_DOOR"),
            MaterialMaterialEnum::LegacyDarkOakDoor => f.write_str("LEGACY_DARK_OAK_DOOR"),
            MaterialMaterialEnum::LegacyEndRod => f.write_str("LEGACY_END_ROD"),
            MaterialMaterialEnum::LegacyChorusPlant => f.write_str("LEGACY_CHORUS_PLANT"),
            MaterialMaterialEnum::LegacyChorusFlower => f.write_str("LEGACY_CHORUS_FLOWER"),
            MaterialMaterialEnum::LegacyPurpurBlock => f.write_str("LEGACY_PURPUR_BLOCK"),
            MaterialMaterialEnum::LegacyPurpurPillar => f.write_str("LEGACY_PURPUR_PILLAR"),
            MaterialMaterialEnum::LegacyPurpurStairs => f.write_str("LEGACY_PURPUR_STAIRS"),
            MaterialMaterialEnum::LegacyPurpurDoubleSlab => {
                f.write_str("LEGACY_PURPUR_DOUBLE_SLAB")
            }
            MaterialMaterialEnum::LegacyPurpurSlab => f.write_str("LEGACY_PURPUR_SLAB"),
            MaterialMaterialEnum::LegacyEndBricks => f.write_str("LEGACY_END_BRICKS"),
            MaterialMaterialEnum::LegacyBeetrootBlock => f.write_str("LEGACY_BEETROOT_BLOCK"),
            MaterialMaterialEnum::LegacyGrassPath => f.write_str("LEGACY_GRASS_PATH"),
            MaterialMaterialEnum::LegacyEndGateway => f.write_str("LEGACY_END_GATEWAY"),
            MaterialMaterialEnum::LegacyCommandRepeating => f.write_str("LEGACY_COMMAND_REPEATING"),
            MaterialMaterialEnum::LegacyCommandChain => f.write_str("LEGACY_COMMAND_CHAIN"),
            MaterialMaterialEnum::LegacyFrostedIce => f.write_str("LEGACY_FROSTED_ICE"),
            MaterialMaterialEnum::LegacyMagma => f.write_str("LEGACY_MAGMA"),
            MaterialMaterialEnum::LegacyNetherWartBlock => f.write_str("LEGACY_NETHER_WART_BLOCK"),
            MaterialMaterialEnum::LegacyRedNetherBrick => f.write_str("LEGACY_RED_NETHER_BRICK"),
            MaterialMaterialEnum::LegacyBoneBlock => f.write_str("LEGACY_BONE_BLOCK"),
            MaterialMaterialEnum::LegacyStructureVoid => f.write_str("LEGACY_STRUCTURE_VOID"),
            MaterialMaterialEnum::LegacyObserver => f.write_str("LEGACY_OBSERVER"),
            MaterialMaterialEnum::LegacyWhiteShulkerBox => f.write_str("LEGACY_WHITE_SHULKER_BOX"),
            MaterialMaterialEnum::LegacyOrangeShulkerBox => {
                f.write_str("LEGACY_ORANGE_SHULKER_BOX")
            }
            MaterialMaterialEnum::LegacyMagentaShulkerBox => {
                f.write_str("LEGACY_MAGENTA_SHULKER_BOX")
            }
            MaterialMaterialEnum::LegacyLightBlueShulkerBox => {
                f.write_str("LEGACY_LIGHT_BLUE_SHULKER_BOX")
            }
            MaterialMaterialEnum::LegacyYellowShulkerBox => {
                f.write_str("LEGACY_YELLOW_SHULKER_BOX")
            }
            MaterialMaterialEnum::LegacyLimeShulkerBox => f.write_str("LEGACY_LIME_SHULKER_BOX"),
            MaterialMaterialEnum::LegacyPinkShulkerBox => f.write_str("LEGACY_PINK_SHULKER_BOX"),
            MaterialMaterialEnum::LegacyGrayShulkerBox => f.write_str("LEGACY_GRAY_SHULKER_BOX"),
            MaterialMaterialEnum::LegacySilverShulkerBox => {
                f.write_str("LEGACY_SILVER_SHULKER_BOX")
            }
            MaterialMaterialEnum::LegacyCyanShulkerBox => f.write_str("LEGACY_CYAN_SHULKER_BOX"),
            MaterialMaterialEnum::LegacyPurpleShulkerBox => {
                f.write_str("LEGACY_PURPLE_SHULKER_BOX")
            }
            MaterialMaterialEnum::LegacyBlueShulkerBox => f.write_str("LEGACY_BLUE_SHULKER_BOX"),
            MaterialMaterialEnum::LegacyBrownShulkerBox => f.write_str("LEGACY_BROWN_SHULKER_BOX"),
            MaterialMaterialEnum::LegacyGreenShulkerBox => f.write_str("LEGACY_GREEN_SHULKER_BOX"),
            MaterialMaterialEnum::LegacyRedShulkerBox => f.write_str("LEGACY_RED_SHULKER_BOX"),
            MaterialMaterialEnum::LegacyBlackShulkerBox => f.write_str("LEGACY_BLACK_SHULKER_BOX"),
            MaterialMaterialEnum::LegacyWhiteGlazedTerracotta => {
                f.write_str("LEGACY_WHITE_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyOrangeGlazedTerracotta => {
                f.write_str("LEGACY_ORANGE_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyMagentaGlazedTerracotta => {
                f.write_str("LEGACY_MAGENTA_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyLightBlueGlazedTerracotta => {
                f.write_str("LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyYellowGlazedTerracotta => {
                f.write_str("LEGACY_YELLOW_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyLimeGlazedTerracotta => {
                f.write_str("LEGACY_LIME_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyPinkGlazedTerracotta => {
                f.write_str("LEGACY_PINK_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyGrayGlazedTerracotta => {
                f.write_str("LEGACY_GRAY_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacySilverGlazedTerracotta => {
                f.write_str("LEGACY_SILVER_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyCyanGlazedTerracotta => {
                f.write_str("LEGACY_CYAN_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyPurpleGlazedTerracotta => {
                f.write_str("LEGACY_PURPLE_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyBlueGlazedTerracotta => {
                f.write_str("LEGACY_BLUE_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyBrownGlazedTerracotta => {
                f.write_str("LEGACY_BROWN_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyGreenGlazedTerracotta => {
                f.write_str("LEGACY_GREEN_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyRedGlazedTerracotta => {
                f.write_str("LEGACY_RED_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyBlackGlazedTerracotta => {
                f.write_str("LEGACY_BLACK_GLAZED_TERRACOTTA")
            }
            MaterialMaterialEnum::LegacyConcrete => f.write_str("LEGACY_CONCRETE"),
            MaterialMaterialEnum::LegacyConcretePowder => f.write_str("LEGACY_CONCRETE_POWDER"),
            MaterialMaterialEnum::LegacyStructureBlock => f.write_str("LEGACY_STRUCTURE_BLOCK"),
            MaterialMaterialEnum::LegacyIronSpade => f.write_str("LEGACY_IRON_SPADE"),
            MaterialMaterialEnum::LegacyIronPickaxe => f.write_str("LEGACY_IRON_PICKAXE"),
            MaterialMaterialEnum::LegacyIronAxe => f.write_str("LEGACY_IRON_AXE"),
            MaterialMaterialEnum::LegacyFlintAndSteel => f.write_str("LEGACY_FLINT_AND_STEEL"),
            MaterialMaterialEnum::LegacyApple => f.write_str("LEGACY_APPLE"),
            MaterialMaterialEnum::LegacyBow => f.write_str("LEGACY_BOW"),
            MaterialMaterialEnum::LegacyArrow => f.write_str("LEGACY_ARROW"),
            MaterialMaterialEnum::LegacyCoal => f.write_str("LEGACY_COAL"),
            MaterialMaterialEnum::LegacyDiamond => f.write_str("LEGACY_DIAMOND"),
            MaterialMaterialEnum::LegacyIronIngot => f.write_str("LEGACY_IRON_INGOT"),
            MaterialMaterialEnum::LegacyGoldIngot => f.write_str("LEGACY_GOLD_INGOT"),
            MaterialMaterialEnum::LegacyIronSword => f.write_str("LEGACY_IRON_SWORD"),
            MaterialMaterialEnum::LegacyWoodSword => f.write_str("LEGACY_WOOD_SWORD"),
            MaterialMaterialEnum::LegacyWoodSpade => f.write_str("LEGACY_WOOD_SPADE"),
            MaterialMaterialEnum::LegacyWoodPickaxe => f.write_str("LEGACY_WOOD_PICKAXE"),
            MaterialMaterialEnum::LegacyWoodAxe => f.write_str("LEGACY_WOOD_AXE"),
            MaterialMaterialEnum::LegacyStoneSword => f.write_str("LEGACY_STONE_SWORD"),
            MaterialMaterialEnum::LegacyStoneSpade => f.write_str("LEGACY_STONE_SPADE"),
            MaterialMaterialEnum::LegacyStonePickaxe => f.write_str("LEGACY_STONE_PICKAXE"),
            MaterialMaterialEnum::LegacyStoneAxe => f.write_str("LEGACY_STONE_AXE"),
            MaterialMaterialEnum::LegacyDiamondSword => f.write_str("LEGACY_DIAMOND_SWORD"),
            MaterialMaterialEnum::LegacyDiamondSpade => f.write_str("LEGACY_DIAMOND_SPADE"),
            MaterialMaterialEnum::LegacyDiamondPickaxe => f.write_str("LEGACY_DIAMOND_PICKAXE"),
            MaterialMaterialEnum::LegacyDiamondAxe => f.write_str("LEGACY_DIAMOND_AXE"),
            MaterialMaterialEnum::LegacyStick => f.write_str("LEGACY_STICK"),
            MaterialMaterialEnum::LegacyBowl => f.write_str("LEGACY_BOWL"),
            MaterialMaterialEnum::LegacyMushroomSoup => f.write_str("LEGACY_MUSHROOM_SOUP"),
            MaterialMaterialEnum::LegacyGoldSword => f.write_str("LEGACY_GOLD_SWORD"),
            MaterialMaterialEnum::LegacyGoldSpade => f.write_str("LEGACY_GOLD_SPADE"),
            MaterialMaterialEnum::LegacyGoldPickaxe => f.write_str("LEGACY_GOLD_PICKAXE"),
            MaterialMaterialEnum::LegacyGoldAxe => f.write_str("LEGACY_GOLD_AXE"),
            MaterialMaterialEnum::LegacyString => f.write_str("LEGACY_STRING"),
            MaterialMaterialEnum::LegacyFeather => f.write_str("LEGACY_FEATHER"),
            MaterialMaterialEnum::LegacySulphur => f.write_str("LEGACY_SULPHUR"),
            MaterialMaterialEnum::LegacyWoodHoe => f.write_str("LEGACY_WOOD_HOE"),
            MaterialMaterialEnum::LegacyStoneHoe => f.write_str("LEGACY_STONE_HOE"),
            MaterialMaterialEnum::LegacyIronHoe => f.write_str("LEGACY_IRON_HOE"),
            MaterialMaterialEnum::LegacyDiamondHoe => f.write_str("LEGACY_DIAMOND_HOE"),
            MaterialMaterialEnum::LegacyGoldHoe => f.write_str("LEGACY_GOLD_HOE"),
            MaterialMaterialEnum::LegacySeeds => f.write_str("LEGACY_SEEDS"),
            MaterialMaterialEnum::LegacyWheat => f.write_str("LEGACY_WHEAT"),
            MaterialMaterialEnum::LegacyBread => f.write_str("LEGACY_BREAD"),
            MaterialMaterialEnum::LegacyLeatherHelmet => f.write_str("LEGACY_LEATHER_HELMET"),
            MaterialMaterialEnum::LegacyLeatherChestplate => {
                f.write_str("LEGACY_LEATHER_CHESTPLATE")
            }
            MaterialMaterialEnum::LegacyLeatherLeggings => f.write_str("LEGACY_LEATHER_LEGGINGS"),
            MaterialMaterialEnum::LegacyLeatherBoots => f.write_str("LEGACY_LEATHER_BOOTS"),
            MaterialMaterialEnum::LegacyChainmailHelmet => f.write_str("LEGACY_CHAINMAIL_HELMET"),
            MaterialMaterialEnum::LegacyChainmailChestplate => {
                f.write_str("LEGACY_CHAINMAIL_CHESTPLATE")
            }
            MaterialMaterialEnum::LegacyChainmailLeggings => {
                f.write_str("LEGACY_CHAINMAIL_LEGGINGS")
            }
            MaterialMaterialEnum::LegacyChainmailBoots => f.write_str("LEGACY_CHAINMAIL_BOOTS"),
            MaterialMaterialEnum::LegacyIronHelmet => f.write_str("LEGACY_IRON_HELMET"),
            MaterialMaterialEnum::LegacyIronChestplate => f.write_str("LEGACY_IRON_CHESTPLATE"),
            MaterialMaterialEnum::LegacyIronLeggings => f.write_str("LEGACY_IRON_LEGGINGS"),
            MaterialMaterialEnum::LegacyIronBoots => f.write_str("LEGACY_IRON_BOOTS"),
            MaterialMaterialEnum::LegacyDiamondHelmet => f.write_str("LEGACY_DIAMOND_HELMET"),
            MaterialMaterialEnum::LegacyDiamondChestplate => {
                f.write_str("LEGACY_DIAMOND_CHESTPLATE")
            }
            MaterialMaterialEnum::LegacyDiamondLeggings => f.write_str("LEGACY_DIAMOND_LEGGINGS"),
            MaterialMaterialEnum::LegacyDiamondBoots => f.write_str("LEGACY_DIAMOND_BOOTS"),
            MaterialMaterialEnum::LegacyGoldHelmet => f.write_str("LEGACY_GOLD_HELMET"),
            MaterialMaterialEnum::LegacyGoldChestplate => f.write_str("LEGACY_GOLD_CHESTPLATE"),
            MaterialMaterialEnum::LegacyGoldLeggings => f.write_str("LEGACY_GOLD_LEGGINGS"),
            MaterialMaterialEnum::LegacyGoldBoots => f.write_str("LEGACY_GOLD_BOOTS"),
            MaterialMaterialEnum::LegacyFlint => f.write_str("LEGACY_FLINT"),
            MaterialMaterialEnum::LegacyPork => f.write_str("LEGACY_PORK"),
            MaterialMaterialEnum::LegacyGrilledPork => f.write_str("LEGACY_GRILLED_PORK"),
            MaterialMaterialEnum::LegacyPainting => f.write_str("LEGACY_PAINTING"),
            MaterialMaterialEnum::LegacyGoldenApple => f.write_str("LEGACY_GOLDEN_APPLE"),
            MaterialMaterialEnum::LegacySign => f.write_str("LEGACY_SIGN"),
            MaterialMaterialEnum::LegacyWoodDoor => f.write_str("LEGACY_WOOD_DOOR"),
            MaterialMaterialEnum::LegacyBucket => f.write_str("LEGACY_BUCKET"),
            MaterialMaterialEnum::LegacyWaterBucket => f.write_str("LEGACY_WATER_BUCKET"),
            MaterialMaterialEnum::LegacyLavaBucket => f.write_str("LEGACY_LAVA_BUCKET"),
            MaterialMaterialEnum::LegacyMinecart => f.write_str("LEGACY_MINECART"),
            MaterialMaterialEnum::LegacySaddle => f.write_str("LEGACY_SADDLE"),
            MaterialMaterialEnum::LegacyIronDoor => f.write_str("LEGACY_IRON_DOOR"),
            MaterialMaterialEnum::LegacyRedstone => f.write_str("LEGACY_REDSTONE"),
            MaterialMaterialEnum::LegacySnowBall => f.write_str("LEGACY_SNOW_BALL"),
            MaterialMaterialEnum::LegacyBoat => f.write_str("LEGACY_BOAT"),
            MaterialMaterialEnum::LegacyLeather => f.write_str("LEGACY_LEATHER"),
            MaterialMaterialEnum::LegacyMilkBucket => f.write_str("LEGACY_MILK_BUCKET"),
            MaterialMaterialEnum::LegacyClayBrick => f.write_str("LEGACY_CLAY_BRICK"),
            MaterialMaterialEnum::LegacyClayBall => f.write_str("LEGACY_CLAY_BALL"),
            MaterialMaterialEnum::LegacySugarCane => f.write_str("LEGACY_SUGAR_CANE"),
            MaterialMaterialEnum::LegacyPaper => f.write_str("LEGACY_PAPER"),
            MaterialMaterialEnum::LegacyBook => f.write_str("LEGACY_BOOK"),
            MaterialMaterialEnum::LegacySlimeBall => f.write_str("LEGACY_SLIME_BALL"),
            MaterialMaterialEnum::LegacyStorageMinecart => f.write_str("LEGACY_STORAGE_MINECART"),
            MaterialMaterialEnum::LegacyPoweredMinecart => f.write_str("LEGACY_POWERED_MINECART"),
            MaterialMaterialEnum::LegacyEgg => f.write_str("LEGACY_EGG"),
            MaterialMaterialEnum::LegacyCompass => f.write_str("LEGACY_COMPASS"),
            MaterialMaterialEnum::LegacyFishingRod => f.write_str("LEGACY_FISHING_ROD"),
            MaterialMaterialEnum::LegacyWatch => f.write_str("LEGACY_WATCH"),
            MaterialMaterialEnum::LegacyGlowstoneDust => f.write_str("LEGACY_GLOWSTONE_DUST"),
            MaterialMaterialEnum::LegacyRawFish => f.write_str("LEGACY_RAW_FISH"),
            MaterialMaterialEnum::LegacyCookedFish => f.write_str("LEGACY_COOKED_FISH"),
            MaterialMaterialEnum::LegacyInkSack => f.write_str("LEGACY_INK_SACK"),
            MaterialMaterialEnum::LegacyBone => f.write_str("LEGACY_BONE"),
            MaterialMaterialEnum::LegacySugar => f.write_str("LEGACY_SUGAR"),
            MaterialMaterialEnum::LegacyCake => f.write_str("LEGACY_CAKE"),
            MaterialMaterialEnum::LegacyBed => f.write_str("LEGACY_BED"),
            MaterialMaterialEnum::LegacyDiode => f.write_str("LEGACY_DIODE"),
            MaterialMaterialEnum::LegacyCookie => f.write_str("LEGACY_COOKIE"),
            MaterialMaterialEnum::LegacyMap => f.write_str("LEGACY_MAP"),
            MaterialMaterialEnum::LegacyShears => f.write_str("LEGACY_SHEARS"),
            MaterialMaterialEnum::LegacyMelon => f.write_str("LEGACY_MELON"),
            MaterialMaterialEnum::LegacyPumpkinSeeds => f.write_str("LEGACY_PUMPKIN_SEEDS"),
            MaterialMaterialEnum::LegacyMelonSeeds => f.write_str("LEGACY_MELON_SEEDS"),
            MaterialMaterialEnum::LegacyRawBeef => f.write_str("LEGACY_RAW_BEEF"),
            MaterialMaterialEnum::LegacyCookedBeef => f.write_str("LEGACY_COOKED_BEEF"),
            MaterialMaterialEnum::LegacyRawChicken => f.write_str("LEGACY_RAW_CHICKEN"),
            MaterialMaterialEnum::LegacyCookedChicken => f.write_str("LEGACY_COOKED_CHICKEN"),
            MaterialMaterialEnum::LegacyRottenFlesh => f.write_str("LEGACY_ROTTEN_FLESH"),
            MaterialMaterialEnum::LegacyEnderPearl => f.write_str("LEGACY_ENDER_PEARL"),
            MaterialMaterialEnum::LegacyBlazeRod => f.write_str("LEGACY_BLAZE_ROD"),
            MaterialMaterialEnum::LegacyGhastTear => f.write_str("LEGACY_GHAST_TEAR"),
            MaterialMaterialEnum::LegacyGoldNugget => f.write_str("LEGACY_GOLD_NUGGET"),
            MaterialMaterialEnum::LegacyNetherStalk => f.write_str("LEGACY_NETHER_STALK"),
            MaterialMaterialEnum::LegacyPotion => f.write_str("LEGACY_POTION"),
            MaterialMaterialEnum::LegacyGlassBottle => f.write_str("LEGACY_GLASS_BOTTLE"),
            MaterialMaterialEnum::LegacySpiderEye => f.write_str("LEGACY_SPIDER_EYE"),
            MaterialMaterialEnum::LegacyFermentedSpiderEye => {
                f.write_str("LEGACY_FERMENTED_SPIDER_EYE")
            }
            MaterialMaterialEnum::LegacyBlazePowder => f.write_str("LEGACY_BLAZE_POWDER"),
            MaterialMaterialEnum::LegacyMagmaCream => f.write_str("LEGACY_MAGMA_CREAM"),
            MaterialMaterialEnum::LegacyBrewingStandItem => {
                f.write_str("LEGACY_BREWING_STAND_ITEM")
            }
            MaterialMaterialEnum::LegacyCauldronItem => f.write_str("LEGACY_CAULDRON_ITEM"),
            MaterialMaterialEnum::LegacyEyeOfEnder => f.write_str("LEGACY_EYE_OF_ENDER"),
            MaterialMaterialEnum::LegacySpeckledMelon => f.write_str("LEGACY_SPECKLED_MELON"),
            MaterialMaterialEnum::LegacyMonsterEgg => f.write_str("LEGACY_MONSTER_EGG"),
            MaterialMaterialEnum::LegacyExpBottle => f.write_str("LEGACY_EXP_BOTTLE"),
            MaterialMaterialEnum::LegacyFireball => f.write_str("LEGACY_FIREBALL"),
            MaterialMaterialEnum::LegacyBookAndQuill => f.write_str("LEGACY_BOOK_AND_QUILL"),
            MaterialMaterialEnum::LegacyWrittenBook => f.write_str("LEGACY_WRITTEN_BOOK"),
            MaterialMaterialEnum::LegacyEmerald => f.write_str("LEGACY_EMERALD"),
            MaterialMaterialEnum::LegacyItemFrame => f.write_str("LEGACY_ITEM_FRAME"),
            MaterialMaterialEnum::LegacyFlowerPotItem => f.write_str("LEGACY_FLOWER_POT_ITEM"),
            MaterialMaterialEnum::LegacyCarrotItem => f.write_str("LEGACY_CARROT_ITEM"),
            MaterialMaterialEnum::LegacyPotatoItem => f.write_str("LEGACY_POTATO_ITEM"),
            MaterialMaterialEnum::LegacyBakedPotato => f.write_str("LEGACY_BAKED_POTATO"),
            MaterialMaterialEnum::LegacyPoisonousPotato => f.write_str("LEGACY_POISONOUS_POTATO"),
            MaterialMaterialEnum::LegacyEmptyMap => f.write_str("LEGACY_EMPTY_MAP"),
            MaterialMaterialEnum::LegacyGoldenCarrot => f.write_str("LEGACY_GOLDEN_CARROT"),
            MaterialMaterialEnum::LegacySkullItem => f.write_str("LEGACY_SKULL_ITEM"),
            MaterialMaterialEnum::LegacyCarrotStick => f.write_str("LEGACY_CARROT_STICK"),
            MaterialMaterialEnum::LegacyNetherStar => f.write_str("LEGACY_NETHER_STAR"),
            MaterialMaterialEnum::LegacyPumpkinPie => f.write_str("LEGACY_PUMPKIN_PIE"),
            MaterialMaterialEnum::LegacyFirework => f.write_str("LEGACY_FIREWORK"),
            MaterialMaterialEnum::LegacyFireworkCharge => f.write_str("LEGACY_FIREWORK_CHARGE"),
            MaterialMaterialEnum::LegacyEnchantedBook => f.write_str("LEGACY_ENCHANTED_BOOK"),
            MaterialMaterialEnum::LegacyRedstoneComparator => {
                f.write_str("LEGACY_REDSTONE_COMPARATOR")
            }
            MaterialMaterialEnum::LegacyNetherBrickItem => f.write_str("LEGACY_NETHER_BRICK_ITEM"),
            MaterialMaterialEnum::LegacyQuartz => f.write_str("LEGACY_QUARTZ"),
            MaterialMaterialEnum::LegacyExplosiveMinecart => {
                f.write_str("LEGACY_EXPLOSIVE_MINECART")
            }
            MaterialMaterialEnum::LegacyHopperMinecart => f.write_str("LEGACY_HOPPER_MINECART"),
            MaterialMaterialEnum::LegacyPrismarineShard => f.write_str("LEGACY_PRISMARINE_SHARD"),
            MaterialMaterialEnum::LegacyPrismarineCrystals => {
                f.write_str("LEGACY_PRISMARINE_CRYSTALS")
            }
            MaterialMaterialEnum::LegacyRabbit => f.write_str("LEGACY_RABBIT"),
            MaterialMaterialEnum::LegacyCookedRabbit => f.write_str("LEGACY_COOKED_RABBIT"),
            MaterialMaterialEnum::LegacyRabbitStew => f.write_str("LEGACY_RABBIT_STEW"),
            MaterialMaterialEnum::LegacyRabbitFoot => f.write_str("LEGACY_RABBIT_FOOT"),
            MaterialMaterialEnum::LegacyRabbitHide => f.write_str("LEGACY_RABBIT_HIDE"),
            MaterialMaterialEnum::LegacyArmorStand => f.write_str("LEGACY_ARMOR_STAND"),
            MaterialMaterialEnum::LegacyIronBarding => f.write_str("LEGACY_IRON_BARDING"),
            MaterialMaterialEnum::LegacyGoldBarding => f.write_str("LEGACY_GOLD_BARDING"),
            MaterialMaterialEnum::LegacyDiamondBarding => f.write_str("LEGACY_DIAMOND_BARDING"),
            MaterialMaterialEnum::LegacyLeash => f.write_str("LEGACY_LEASH"),
            MaterialMaterialEnum::LegacyNameTag => f.write_str("LEGACY_NAME_TAG"),
            MaterialMaterialEnum::LegacyCommandMinecart => f.write_str("LEGACY_COMMAND_MINECART"),
            MaterialMaterialEnum::LegacyMutton => f.write_str("LEGACY_MUTTON"),
            MaterialMaterialEnum::LegacyCookedMutton => f.write_str("LEGACY_COOKED_MUTTON"),
            MaterialMaterialEnum::LegacyBanner => f.write_str("LEGACY_BANNER"),
            MaterialMaterialEnum::LegacyEndCrystal => f.write_str("LEGACY_END_CRYSTAL"),
            MaterialMaterialEnum::LegacySpruceDoorItem => f.write_str("LEGACY_SPRUCE_DOOR_ITEM"),
            MaterialMaterialEnum::LegacyBirchDoorItem => f.write_str("LEGACY_BIRCH_DOOR_ITEM"),
            MaterialMaterialEnum::LegacyJungleDoorItem => f.write_str("LEGACY_JUNGLE_DOOR_ITEM"),
            MaterialMaterialEnum::LegacyAcaciaDoorItem => f.write_str("LEGACY_ACACIA_DOOR_ITEM"),
            MaterialMaterialEnum::LegacyDarkOakDoorItem => f.write_str("LEGACY_DARK_OAK_DOOR_ITEM"),
            MaterialMaterialEnum::LegacyChorusFruit => f.write_str("LEGACY_CHORUS_FRUIT"),
            MaterialMaterialEnum::LegacyChorusFruitPopped => {
                f.write_str("LEGACY_CHORUS_FRUIT_POPPED")
            }
            MaterialMaterialEnum::LegacyBeetroot => f.write_str("LEGACY_BEETROOT"),
            MaterialMaterialEnum::LegacyBeetrootSeeds => f.write_str("LEGACY_BEETROOT_SEEDS"),
            MaterialMaterialEnum::LegacyBeetrootSoup => f.write_str("LEGACY_BEETROOT_SOUP"),
            MaterialMaterialEnum::LegacyDragonsBreath => f.write_str("LEGACY_DRAGONS_BREATH"),
            MaterialMaterialEnum::LegacySplashPotion => f.write_str("LEGACY_SPLASH_POTION"),
            MaterialMaterialEnum::LegacySpectralArrow => f.write_str("LEGACY_SPECTRAL_ARROW"),
            MaterialMaterialEnum::LegacyTippedArrow => f.write_str("LEGACY_TIPPED_ARROW"),
            MaterialMaterialEnum::LegacyLingeringPotion => f.write_str("LEGACY_LINGERING_POTION"),
            MaterialMaterialEnum::LegacyShield => f.write_str("LEGACY_SHIELD"),
            MaterialMaterialEnum::LegacyElytra => f.write_str("LEGACY_ELYTRA"),
            MaterialMaterialEnum::LegacyBoatSpruce => f.write_str("LEGACY_BOAT_SPRUCE"),
            MaterialMaterialEnum::LegacyBoatBirch => f.write_str("LEGACY_BOAT_BIRCH"),
            MaterialMaterialEnum::LegacyBoatJungle => f.write_str("LEGACY_BOAT_JUNGLE"),
            MaterialMaterialEnum::LegacyBoatAcacia => f.write_str("LEGACY_BOAT_ACACIA"),
            MaterialMaterialEnum::LegacyBoatDarkOak => f.write_str("LEGACY_BOAT_DARK_OAK"),
            MaterialMaterialEnum::LegacyTotem => f.write_str("LEGACY_TOTEM"),
            MaterialMaterialEnum::LegacyShulkerShell => f.write_str("LEGACY_SHULKER_SHELL"),
            MaterialMaterialEnum::LegacyIronNugget => f.write_str("LEGACY_IRON_NUGGET"),
            MaterialMaterialEnum::LegacyKnowledgeBook => f.write_str("LEGACY_KNOWLEDGE_BOOK"),
            MaterialMaterialEnum::LegacyGoldRecord => f.write_str("LEGACY_GOLD_RECORD"),
            MaterialMaterialEnum::LegacyGreenRecord => f.write_str("LEGACY_GREEN_RECORD"),
            MaterialMaterialEnum::LegacyRecord3 => f.write_str("LEGACY_RECORD_3"),
            MaterialMaterialEnum::LegacyRecord4 => f.write_str("LEGACY_RECORD_4"),
            MaterialMaterialEnum::LegacyRecord5 => f.write_str("LEGACY_RECORD_5"),
            MaterialMaterialEnum::LegacyRecord6 => f.write_str("LEGACY_RECORD_6"),
            MaterialMaterialEnum::LegacyRecord7 => f.write_str("LEGACY_RECORD_7"),
            MaterialMaterialEnum::LegacyRecord8 => f.write_str("LEGACY_RECORD_8"),
            MaterialMaterialEnum::LegacyRecord9 => f.write_str("LEGACY_RECORD_9"),
            MaterialMaterialEnum::LegacyRecord10 => f.write_str("LEGACY_RECORD_10"),
            MaterialMaterialEnum::LegacyRecord11 => f.write_str("LEGACY_RECORD_11"),
            MaterialMaterialEnum::LegacyRecord12 => f.write_str("LEGACY_RECORD_12"),
        }
    }
}
impl<'mc> std::fmt::Display for MaterialMaterial<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct MaterialMaterial<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub MaterialMaterialEnum,
);
impl<'mc> std::ops::Deref for MaterialMaterial<'mc> {
    type Target = MaterialMaterialEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for MaterialMaterial<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for MaterialMaterial<'mc> {
    type Enum = MaterialMaterialEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate MaterialMaterial from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Material$Material")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a MaterialMaterial object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> MaterialMaterial<'mc> {
    pub const AIR: MaterialMaterialEnum = MaterialMaterialEnum::Air;
    pub const STONE: MaterialMaterialEnum = MaterialMaterialEnum::Stone;
    pub const GRANITE: MaterialMaterialEnum = MaterialMaterialEnum::Granite;
    pub const POLISHED_GRANITE: MaterialMaterialEnum = MaterialMaterialEnum::PolishedGranite;
    pub const DIORITE: MaterialMaterialEnum = MaterialMaterialEnum::Diorite;
    pub const POLISHED_DIORITE: MaterialMaterialEnum = MaterialMaterialEnum::PolishedDiorite;
    pub const ANDESITE: MaterialMaterialEnum = MaterialMaterialEnum::Andesite;
    pub const POLISHED_ANDESITE: MaterialMaterialEnum = MaterialMaterialEnum::PolishedAndesite;
    pub const DEEPSLATE: MaterialMaterialEnum = MaterialMaterialEnum::Deepslate;
    pub const COBBLED_DEEPSLATE: MaterialMaterialEnum = MaterialMaterialEnum::CobbledDeepslate;
    pub const POLISHED_DEEPSLATE: MaterialMaterialEnum = MaterialMaterialEnum::PolishedDeepslate;
    pub const CALCITE: MaterialMaterialEnum = MaterialMaterialEnum::Calcite;
    pub const TUFF: MaterialMaterialEnum = MaterialMaterialEnum::Tuff;
    pub const DRIPSTONE_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::DripstoneBlock;
    pub const GRASS_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::GrassBlock;
    pub const DIRT: MaterialMaterialEnum = MaterialMaterialEnum::Dirt;
    pub const COARSE_DIRT: MaterialMaterialEnum = MaterialMaterialEnum::CoarseDirt;
    pub const PODZOL: MaterialMaterialEnum = MaterialMaterialEnum::Podzol;
    pub const ROOTED_DIRT: MaterialMaterialEnum = MaterialMaterialEnum::RootedDirt;
    pub const MUD: MaterialMaterialEnum = MaterialMaterialEnum::Mud;
    pub const CRIMSON_NYLIUM: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonNylium;
    pub const WARPED_NYLIUM: MaterialMaterialEnum = MaterialMaterialEnum::WarpedNylium;
    pub const COBBLESTONE: MaterialMaterialEnum = MaterialMaterialEnum::Cobblestone;
    pub const OAK_PLANKS: MaterialMaterialEnum = MaterialMaterialEnum::OakPlanks;
    pub const SPRUCE_PLANKS: MaterialMaterialEnum = MaterialMaterialEnum::SprucePlanks;
    pub const BIRCH_PLANKS: MaterialMaterialEnum = MaterialMaterialEnum::BirchPlanks;
    pub const JUNGLE_PLANKS: MaterialMaterialEnum = MaterialMaterialEnum::JunglePlanks;
    pub const ACACIA_PLANKS: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaPlanks;
    pub const CHERRY_PLANKS: MaterialMaterialEnum = MaterialMaterialEnum::CherryPlanks;
    pub const DARK_OAK_PLANKS: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakPlanks;
    pub const MANGROVE_PLANKS: MaterialMaterialEnum = MaterialMaterialEnum::MangrovePlanks;
    pub const BAMBOO_PLANKS: MaterialMaterialEnum = MaterialMaterialEnum::BambooPlanks;
    pub const CRIMSON_PLANKS: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonPlanks;
    pub const WARPED_PLANKS: MaterialMaterialEnum = MaterialMaterialEnum::WarpedPlanks;
    pub const BAMBOO_MOSAIC: MaterialMaterialEnum = MaterialMaterialEnum::BambooMosaic;
    pub const OAK_SAPLING: MaterialMaterialEnum = MaterialMaterialEnum::OakSapling;
    pub const SPRUCE_SAPLING: MaterialMaterialEnum = MaterialMaterialEnum::SpruceSapling;
    pub const BIRCH_SAPLING: MaterialMaterialEnum = MaterialMaterialEnum::BirchSapling;
    pub const JUNGLE_SAPLING: MaterialMaterialEnum = MaterialMaterialEnum::JungleSapling;
    pub const ACACIA_SAPLING: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaSapling;
    pub const CHERRY_SAPLING: MaterialMaterialEnum = MaterialMaterialEnum::CherrySapling;
    pub const DARK_OAK_SAPLING: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakSapling;
    pub const MANGROVE_PROPAGULE: MaterialMaterialEnum = MaterialMaterialEnum::MangrovePropagule;
    pub const BEDROCK: MaterialMaterialEnum = MaterialMaterialEnum::Bedrock;
    pub const SAND: MaterialMaterialEnum = MaterialMaterialEnum::Sand;
    pub const SUSPICIOUS_SAND: MaterialMaterialEnum = MaterialMaterialEnum::SuspiciousSand;
    pub const SUSPICIOUS_GRAVEL: MaterialMaterialEnum = MaterialMaterialEnum::SuspiciousGravel;
    pub const RED_SAND: MaterialMaterialEnum = MaterialMaterialEnum::RedSand;
    pub const GRAVEL: MaterialMaterialEnum = MaterialMaterialEnum::Gravel;
    pub const COAL_ORE: MaterialMaterialEnum = MaterialMaterialEnum::CoalOre;
    pub const DEEPSLATE_COAL_ORE: MaterialMaterialEnum = MaterialMaterialEnum::DeepslateCoalOre;
    pub const IRON_ORE: MaterialMaterialEnum = MaterialMaterialEnum::IronOre;
    pub const DEEPSLATE_IRON_ORE: MaterialMaterialEnum = MaterialMaterialEnum::DeepslateIronOre;
    pub const COPPER_ORE: MaterialMaterialEnum = MaterialMaterialEnum::CopperOre;
    pub const DEEPSLATE_COPPER_ORE: MaterialMaterialEnum = MaterialMaterialEnum::DeepslateCopperOre;
    pub const GOLD_ORE: MaterialMaterialEnum = MaterialMaterialEnum::GoldOre;
    pub const DEEPSLATE_GOLD_ORE: MaterialMaterialEnum = MaterialMaterialEnum::DeepslateGoldOre;
    pub const REDSTONE_ORE: MaterialMaterialEnum = MaterialMaterialEnum::RedstoneOre;
    pub const DEEPSLATE_REDSTONE_ORE: MaterialMaterialEnum =
        MaterialMaterialEnum::DeepslateRedstoneOre;
    pub const EMERALD_ORE: MaterialMaterialEnum = MaterialMaterialEnum::EmeraldOre;
    pub const DEEPSLATE_EMERALD_ORE: MaterialMaterialEnum =
        MaterialMaterialEnum::DeepslateEmeraldOre;
    pub const LAPIS_ORE: MaterialMaterialEnum = MaterialMaterialEnum::LapisOre;
    pub const DEEPSLATE_LAPIS_ORE: MaterialMaterialEnum = MaterialMaterialEnum::DeepslateLapisOre;
    pub const DIAMOND_ORE: MaterialMaterialEnum = MaterialMaterialEnum::DiamondOre;
    pub const DEEPSLATE_DIAMOND_ORE: MaterialMaterialEnum =
        MaterialMaterialEnum::DeepslateDiamondOre;
    pub const NETHER_GOLD_ORE: MaterialMaterialEnum = MaterialMaterialEnum::NetherGoldOre;
    pub const NETHER_QUARTZ_ORE: MaterialMaterialEnum = MaterialMaterialEnum::NetherQuartzOre;
    pub const ANCIENT_DEBRIS: MaterialMaterialEnum = MaterialMaterialEnum::AncientDebris;
    pub const COAL_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::CoalBlock;
    pub const RAW_IRON_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::RawIronBlock;
    pub const RAW_COPPER_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::RawCopperBlock;
    pub const RAW_GOLD_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::RawGoldBlock;
    pub const AMETHYST_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::AmethystBlock;
    pub const BUDDING_AMETHYST: MaterialMaterialEnum = MaterialMaterialEnum::BuddingAmethyst;
    pub const IRON_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::IronBlock;
    pub const COPPER_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::CopperBlock;
    pub const GOLD_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::GoldBlock;
    pub const DIAMOND_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::DiamondBlock;
    pub const NETHERITE_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::NetheriteBlock;
    pub const EXPOSED_COPPER: MaterialMaterialEnum = MaterialMaterialEnum::ExposedCopper;
    pub const WEATHERED_COPPER: MaterialMaterialEnum = MaterialMaterialEnum::WeatheredCopper;
    pub const OXIDIZED_COPPER: MaterialMaterialEnum = MaterialMaterialEnum::OxidizedCopper;
    pub const CUT_COPPER: MaterialMaterialEnum = MaterialMaterialEnum::CutCopper;
    pub const EXPOSED_CUT_COPPER: MaterialMaterialEnum = MaterialMaterialEnum::ExposedCutCopper;
    pub const WEATHERED_CUT_COPPER: MaterialMaterialEnum = MaterialMaterialEnum::WeatheredCutCopper;
    pub const OXIDIZED_CUT_COPPER: MaterialMaterialEnum = MaterialMaterialEnum::OxidizedCutCopper;
    pub const CUT_COPPER_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::CutCopperStairs;
    pub const EXPOSED_CUT_COPPER_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::ExposedCutCopperStairs;
    pub const WEATHERED_CUT_COPPER_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::WeatheredCutCopperStairs;
    pub const OXIDIZED_CUT_COPPER_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::OxidizedCutCopperStairs;
    pub const CUT_COPPER_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::CutCopperSlab;
    pub const EXPOSED_CUT_COPPER_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::ExposedCutCopperSlab;
    pub const WEATHERED_CUT_COPPER_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::WeatheredCutCopperSlab;
    pub const OXIDIZED_CUT_COPPER_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::OxidizedCutCopperSlab;
    pub const WAXED_COPPER_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::WaxedCopperBlock;
    pub const WAXED_EXPOSED_COPPER: MaterialMaterialEnum = MaterialMaterialEnum::WaxedExposedCopper;
    pub const WAXED_WEATHERED_COPPER: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedWeatheredCopper;
    pub const WAXED_OXIDIZED_COPPER: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedOxidizedCopper;
    pub const WAXED_CUT_COPPER: MaterialMaterialEnum = MaterialMaterialEnum::WaxedCutCopper;
    pub const WAXED_EXPOSED_CUT_COPPER: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedExposedCutCopper;
    pub const WAXED_WEATHERED_CUT_COPPER: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedWeatheredCutCopper;
    pub const WAXED_OXIDIZED_CUT_COPPER: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedOxidizedCutCopper;
    pub const WAXED_CUT_COPPER_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedCutCopperStairs;
    pub const WAXED_EXPOSED_CUT_COPPER_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedExposedCutCopperStairs;
    pub const WAXED_WEATHERED_CUT_COPPER_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedWeatheredCutCopperStairs;
    pub const WAXED_OXIDIZED_CUT_COPPER_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedOxidizedCutCopperStairs;
    pub const WAXED_CUT_COPPER_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedCutCopperSlab;
    pub const WAXED_EXPOSED_CUT_COPPER_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedExposedCutCopperSlab;
    pub const WAXED_WEATHERED_CUT_COPPER_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedWeatheredCutCopperSlab;
    pub const WAXED_OXIDIZED_CUT_COPPER_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::WaxedOxidizedCutCopperSlab;
    pub const OAK_LOG: MaterialMaterialEnum = MaterialMaterialEnum::OakLog;
    pub const SPRUCE_LOG: MaterialMaterialEnum = MaterialMaterialEnum::SpruceLog;
    pub const BIRCH_LOG: MaterialMaterialEnum = MaterialMaterialEnum::BirchLog;
    pub const JUNGLE_LOG: MaterialMaterialEnum = MaterialMaterialEnum::JungleLog;
    pub const ACACIA_LOG: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaLog;
    pub const CHERRY_LOG: MaterialMaterialEnum = MaterialMaterialEnum::CherryLog;
    pub const DARK_OAK_LOG: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakLog;
    pub const MANGROVE_LOG: MaterialMaterialEnum = MaterialMaterialEnum::MangroveLog;
    pub const MANGROVE_ROOTS: MaterialMaterialEnum = MaterialMaterialEnum::MangroveRoots;
    pub const MUDDY_MANGROVE_ROOTS: MaterialMaterialEnum = MaterialMaterialEnum::MuddyMangroveRoots;
    pub const CRIMSON_STEM: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonStem;
    pub const WARPED_STEM: MaterialMaterialEnum = MaterialMaterialEnum::WarpedStem;
    pub const BAMBOO_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::BambooBlock;
    pub const STRIPPED_OAK_LOG: MaterialMaterialEnum = MaterialMaterialEnum::StrippedOakLog;
    pub const STRIPPED_SPRUCE_LOG: MaterialMaterialEnum = MaterialMaterialEnum::StrippedSpruceLog;
    pub const STRIPPED_BIRCH_LOG: MaterialMaterialEnum = MaterialMaterialEnum::StrippedBirchLog;
    pub const STRIPPED_JUNGLE_LOG: MaterialMaterialEnum = MaterialMaterialEnum::StrippedJungleLog;
    pub const STRIPPED_ACACIA_LOG: MaterialMaterialEnum = MaterialMaterialEnum::StrippedAcaciaLog;
    pub const STRIPPED_CHERRY_LOG: MaterialMaterialEnum = MaterialMaterialEnum::StrippedCherryLog;
    pub const STRIPPED_DARK_OAK_LOG: MaterialMaterialEnum =
        MaterialMaterialEnum::StrippedDarkOakLog;
    pub const STRIPPED_MANGROVE_LOG: MaterialMaterialEnum =
        MaterialMaterialEnum::StrippedMangroveLog;
    pub const STRIPPED_CRIMSON_STEM: MaterialMaterialEnum =
        MaterialMaterialEnum::StrippedCrimsonStem;
    pub const STRIPPED_WARPED_STEM: MaterialMaterialEnum = MaterialMaterialEnum::StrippedWarpedStem;
    pub const STRIPPED_OAK_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::StrippedOakWood;
    pub const STRIPPED_SPRUCE_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::StrippedSpruceWood;
    pub const STRIPPED_BIRCH_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::StrippedBirchWood;
    pub const STRIPPED_JUNGLE_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::StrippedJungleWood;
    pub const STRIPPED_ACACIA_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::StrippedAcaciaWood;
    pub const STRIPPED_CHERRY_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::StrippedCherryWood;
    pub const STRIPPED_DARK_OAK_WOOD: MaterialMaterialEnum =
        MaterialMaterialEnum::StrippedDarkOakWood;
    pub const STRIPPED_MANGROVE_WOOD: MaterialMaterialEnum =
        MaterialMaterialEnum::StrippedMangroveWood;
    pub const STRIPPED_CRIMSON_HYPHAE: MaterialMaterialEnum =
        MaterialMaterialEnum::StrippedCrimsonHyphae;
    pub const STRIPPED_WARPED_HYPHAE: MaterialMaterialEnum =
        MaterialMaterialEnum::StrippedWarpedHyphae;
    pub const STRIPPED_BAMBOO_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::StrippedBambooBlock;
    pub const OAK_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::OakWood;
    pub const SPRUCE_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::SpruceWood;
    pub const BIRCH_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::BirchWood;
    pub const JUNGLE_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::JungleWood;
    pub const ACACIA_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaWood;
    pub const CHERRY_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::CherryWood;
    pub const DARK_OAK_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakWood;
    pub const MANGROVE_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::MangroveWood;
    pub const CRIMSON_HYPHAE: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonHyphae;
    pub const WARPED_HYPHAE: MaterialMaterialEnum = MaterialMaterialEnum::WarpedHyphae;
    pub const OAK_LEAVES: MaterialMaterialEnum = MaterialMaterialEnum::OakLeaves;
    pub const SPRUCE_LEAVES: MaterialMaterialEnum = MaterialMaterialEnum::SpruceLeaves;
    pub const BIRCH_LEAVES: MaterialMaterialEnum = MaterialMaterialEnum::BirchLeaves;
    pub const JUNGLE_LEAVES: MaterialMaterialEnum = MaterialMaterialEnum::JungleLeaves;
    pub const ACACIA_LEAVES: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaLeaves;
    pub const CHERRY_LEAVES: MaterialMaterialEnum = MaterialMaterialEnum::CherryLeaves;
    pub const DARK_OAK_LEAVES: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakLeaves;
    pub const MANGROVE_LEAVES: MaterialMaterialEnum = MaterialMaterialEnum::MangroveLeaves;
    pub const AZALEA_LEAVES: MaterialMaterialEnum = MaterialMaterialEnum::AzaleaLeaves;
    pub const FLOWERING_AZALEA_LEAVES: MaterialMaterialEnum =
        MaterialMaterialEnum::FloweringAzaleaLeaves;
    pub const SPONGE: MaterialMaterialEnum = MaterialMaterialEnum::Sponge;
    pub const WET_SPONGE: MaterialMaterialEnum = MaterialMaterialEnum::WetSponge;
    pub const GLASS: MaterialMaterialEnum = MaterialMaterialEnum::Glass;
    pub const TINTED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::TintedGlass;
    pub const LAPIS_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LapisBlock;
    pub const SANDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::Sandstone;
    pub const CHISELED_SANDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::ChiseledSandstone;
    pub const CUT_SANDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::CutSandstone;
    pub const COBWEB: MaterialMaterialEnum = MaterialMaterialEnum::Cobweb;
    pub const GRASS: MaterialMaterialEnum = MaterialMaterialEnum::Grass;
    pub const FERN: MaterialMaterialEnum = MaterialMaterialEnum::Fern;
    pub const AZALEA: MaterialMaterialEnum = MaterialMaterialEnum::Azalea;
    pub const FLOWERING_AZALEA: MaterialMaterialEnum = MaterialMaterialEnum::FloweringAzalea;
    pub const DEAD_BUSH: MaterialMaterialEnum = MaterialMaterialEnum::DeadBush;
    pub const SEAGRASS: MaterialMaterialEnum = MaterialMaterialEnum::Seagrass;
    pub const SEA_PICKLE: MaterialMaterialEnum = MaterialMaterialEnum::SeaPickle;
    pub const WHITE_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::WhiteWool;
    pub const ORANGE_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::OrangeWool;
    pub const MAGENTA_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::MagentaWool;
    pub const LIGHT_BLUE_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::LightBlueWool;
    pub const YELLOW_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::YellowWool;
    pub const LIME_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::LimeWool;
    pub const PINK_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::PinkWool;
    pub const GRAY_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::GrayWool;
    pub const LIGHT_GRAY_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::LightGrayWool;
    pub const CYAN_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::CyanWool;
    pub const PURPLE_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::PurpleWool;
    pub const BLUE_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::BlueWool;
    pub const BROWN_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::BrownWool;
    pub const GREEN_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::GreenWool;
    pub const RED_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::RedWool;
    pub const BLACK_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::BlackWool;
    pub const DANDELION: MaterialMaterialEnum = MaterialMaterialEnum::Dandelion;
    pub const POPPY: MaterialMaterialEnum = MaterialMaterialEnum::Poppy;
    pub const BLUE_ORCHID: MaterialMaterialEnum = MaterialMaterialEnum::BlueOrchid;
    pub const ALLIUM: MaterialMaterialEnum = MaterialMaterialEnum::Allium;
    pub const AZURE_BLUET: MaterialMaterialEnum = MaterialMaterialEnum::AzureBluet;
    pub const RED_TULIP: MaterialMaterialEnum = MaterialMaterialEnum::RedTulip;
    pub const ORANGE_TULIP: MaterialMaterialEnum = MaterialMaterialEnum::OrangeTulip;
    pub const WHITE_TULIP: MaterialMaterialEnum = MaterialMaterialEnum::WhiteTulip;
    pub const PINK_TULIP: MaterialMaterialEnum = MaterialMaterialEnum::PinkTulip;
    pub const OXEYE_DAISY: MaterialMaterialEnum = MaterialMaterialEnum::OxeyeDaisy;
    pub const CORNFLOWER: MaterialMaterialEnum = MaterialMaterialEnum::Cornflower;
    pub const LILY_OF_THE_VALLEY: MaterialMaterialEnum = MaterialMaterialEnum::LilyOfTheValley;
    pub const WITHER_ROSE: MaterialMaterialEnum = MaterialMaterialEnum::WitherRose;
    pub const TORCHFLOWER: MaterialMaterialEnum = MaterialMaterialEnum::Torchflower;
    pub const PITCHER_PLANT: MaterialMaterialEnum = MaterialMaterialEnum::PitcherPlant;
    pub const SPORE_BLOSSOM: MaterialMaterialEnum = MaterialMaterialEnum::SporeBlossom;
    pub const BROWN_MUSHROOM: MaterialMaterialEnum = MaterialMaterialEnum::BrownMushroom;
    pub const RED_MUSHROOM: MaterialMaterialEnum = MaterialMaterialEnum::RedMushroom;
    pub const CRIMSON_FUNGUS: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonFungus;
    pub const WARPED_FUNGUS: MaterialMaterialEnum = MaterialMaterialEnum::WarpedFungus;
    pub const CRIMSON_ROOTS: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonRoots;
    pub const WARPED_ROOTS: MaterialMaterialEnum = MaterialMaterialEnum::WarpedRoots;
    pub const NETHER_SPROUTS: MaterialMaterialEnum = MaterialMaterialEnum::NetherSprouts;
    pub const WEEPING_VINES: MaterialMaterialEnum = MaterialMaterialEnum::WeepingVines;
    pub const TWISTING_VINES: MaterialMaterialEnum = MaterialMaterialEnum::TwistingVines;
    pub const SUGAR_CANE: MaterialMaterialEnum = MaterialMaterialEnum::SugarCane;
    pub const KELP: MaterialMaterialEnum = MaterialMaterialEnum::Kelp;
    pub const MOSS_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::MossCarpet;
    pub const PINK_PETALS: MaterialMaterialEnum = MaterialMaterialEnum::PinkPetals;
    pub const MOSS_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::MossBlock;
    pub const HANGING_ROOTS: MaterialMaterialEnum = MaterialMaterialEnum::HangingRoots;
    pub const BIG_DRIPLEAF: MaterialMaterialEnum = MaterialMaterialEnum::BigDripleaf;
    pub const SMALL_DRIPLEAF: MaterialMaterialEnum = MaterialMaterialEnum::SmallDripleaf;
    pub const BAMBOO: MaterialMaterialEnum = MaterialMaterialEnum::Bamboo;
    pub const OAK_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::OakSlab;
    pub const SPRUCE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::SpruceSlab;
    pub const BIRCH_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::BirchSlab;
    pub const JUNGLE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::JungleSlab;
    pub const ACACIA_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaSlab;
    pub const CHERRY_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::CherrySlab;
    pub const DARK_OAK_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakSlab;
    pub const MANGROVE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::MangroveSlab;
    pub const BAMBOO_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::BambooSlab;
    pub const BAMBOO_MOSAIC_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::BambooMosaicSlab;
    pub const CRIMSON_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonSlab;
    pub const WARPED_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::WarpedSlab;
    pub const STONE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::StoneSlab;
    pub const SMOOTH_STONE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::SmoothStoneSlab;
    pub const SANDSTONE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::SandstoneSlab;
    pub const CUT_SANDSTONE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::CutSandstoneSlab;
    pub const PETRIFIED_OAK_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::PetrifiedOakSlab;
    pub const COBBLESTONE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::CobblestoneSlab;
    pub const BRICK_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::BrickSlab;
    pub const STONE_BRICK_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::StoneBrickSlab;
    pub const MUD_BRICK_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::MudBrickSlab;
    pub const NETHER_BRICK_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::NetherBrickSlab;
    pub const QUARTZ_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::QuartzSlab;
    pub const RED_SANDSTONE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::RedSandstoneSlab;
    pub const CUT_RED_SANDSTONE_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::CutRedSandstoneSlab;
    pub const PURPUR_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::PurpurSlab;
    pub const PRISMARINE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::PrismarineSlab;
    pub const PRISMARINE_BRICK_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::PrismarineBrickSlab;
    pub const DARK_PRISMARINE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::DarkPrismarineSlab;
    pub const SMOOTH_QUARTZ: MaterialMaterialEnum = MaterialMaterialEnum::SmoothQuartz;
    pub const SMOOTH_RED_SANDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::SmoothRedSandstone;
    pub const SMOOTH_SANDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::SmoothSandstone;
    pub const SMOOTH_STONE: MaterialMaterialEnum = MaterialMaterialEnum::SmoothStone;
    pub const BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::Bricks;
    pub const BOOKSHELF: MaterialMaterialEnum = MaterialMaterialEnum::Bookshelf;
    pub const CHISELED_BOOKSHELF: MaterialMaterialEnum = MaterialMaterialEnum::ChiseledBookshelf;
    pub const DECORATED_POT: MaterialMaterialEnum = MaterialMaterialEnum::DecoratedPot;
    pub const MOSSY_COBBLESTONE: MaterialMaterialEnum = MaterialMaterialEnum::MossyCobblestone;
    pub const OBSIDIAN: MaterialMaterialEnum = MaterialMaterialEnum::Obsidian;
    pub const TORCH: MaterialMaterialEnum = MaterialMaterialEnum::Torch;
    pub const END_ROD: MaterialMaterialEnum = MaterialMaterialEnum::EndRod;
    pub const CHORUS_PLANT: MaterialMaterialEnum = MaterialMaterialEnum::ChorusPlant;
    pub const CHORUS_FLOWER: MaterialMaterialEnum = MaterialMaterialEnum::ChorusFlower;
    pub const PURPUR_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::PurpurBlock;
    pub const PURPUR_PILLAR: MaterialMaterialEnum = MaterialMaterialEnum::PurpurPillar;
    pub const PURPUR_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::PurpurStairs;
    pub const SPAWNER: MaterialMaterialEnum = MaterialMaterialEnum::Spawner;
    pub const CHEST: MaterialMaterialEnum = MaterialMaterialEnum::Chest;
    pub const CRAFTING_TABLE: MaterialMaterialEnum = MaterialMaterialEnum::CraftingTable;
    pub const FARMLAND: MaterialMaterialEnum = MaterialMaterialEnum::Farmland;
    pub const FURNACE: MaterialMaterialEnum = MaterialMaterialEnum::Furnace;
    pub const LADDER: MaterialMaterialEnum = MaterialMaterialEnum::Ladder;
    pub const COBBLESTONE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::CobblestoneStairs;
    pub const SNOW: MaterialMaterialEnum = MaterialMaterialEnum::Snow;
    pub const ICE: MaterialMaterialEnum = MaterialMaterialEnum::Ice;
    pub const SNOW_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::SnowBlock;
    pub const CACTUS: MaterialMaterialEnum = MaterialMaterialEnum::Cactus;
    pub const CLAY: MaterialMaterialEnum = MaterialMaterialEnum::Clay;
    pub const JUKEBOX: MaterialMaterialEnum = MaterialMaterialEnum::Jukebox;
    pub const OAK_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::OakFence;
    pub const SPRUCE_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::SpruceFence;
    pub const BIRCH_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::BirchFence;
    pub const JUNGLE_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::JungleFence;
    pub const ACACIA_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaFence;
    pub const CHERRY_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::CherryFence;
    pub const DARK_OAK_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakFence;
    pub const MANGROVE_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::MangroveFence;
    pub const BAMBOO_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::BambooFence;
    pub const CRIMSON_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonFence;
    pub const WARPED_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::WarpedFence;
    pub const PUMPKIN: MaterialMaterialEnum = MaterialMaterialEnum::Pumpkin;
    pub const CARVED_PUMPKIN: MaterialMaterialEnum = MaterialMaterialEnum::CarvedPumpkin;
    pub const JACK_O_LANTERN: MaterialMaterialEnum = MaterialMaterialEnum::JackOLantern;
    pub const NETHERRACK: MaterialMaterialEnum = MaterialMaterialEnum::Netherrack;
    pub const SOUL_SAND: MaterialMaterialEnum = MaterialMaterialEnum::SoulSand;
    pub const SOUL_SOIL: MaterialMaterialEnum = MaterialMaterialEnum::SoulSoil;
    pub const BASALT: MaterialMaterialEnum = MaterialMaterialEnum::Basalt;
    pub const POLISHED_BASALT: MaterialMaterialEnum = MaterialMaterialEnum::PolishedBasalt;
    pub const SMOOTH_BASALT: MaterialMaterialEnum = MaterialMaterialEnum::SmoothBasalt;
    pub const SOUL_TORCH: MaterialMaterialEnum = MaterialMaterialEnum::SoulTorch;
    pub const GLOWSTONE: MaterialMaterialEnum = MaterialMaterialEnum::Glowstone;
    pub const INFESTED_STONE: MaterialMaterialEnum = MaterialMaterialEnum::InfestedStone;
    pub const INFESTED_COBBLESTONE: MaterialMaterialEnum =
        MaterialMaterialEnum::InfestedCobblestone;
    pub const INFESTED_STONE_BRICKS: MaterialMaterialEnum =
        MaterialMaterialEnum::InfestedStoneBricks;
    pub const INFESTED_MOSSY_STONE_BRICKS: MaterialMaterialEnum =
        MaterialMaterialEnum::InfestedMossyStoneBricks;
    pub const INFESTED_CRACKED_STONE_BRICKS: MaterialMaterialEnum =
        MaterialMaterialEnum::InfestedCrackedStoneBricks;
    pub const INFESTED_CHISELED_STONE_BRICKS: MaterialMaterialEnum =
        MaterialMaterialEnum::InfestedChiseledStoneBricks;
    pub const INFESTED_DEEPSLATE: MaterialMaterialEnum = MaterialMaterialEnum::InfestedDeepslate;
    pub const STONE_BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::StoneBricks;
    pub const MOSSY_STONE_BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::MossyStoneBricks;
    pub const CRACKED_STONE_BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::CrackedStoneBricks;
    pub const CHISELED_STONE_BRICKS: MaterialMaterialEnum =
        MaterialMaterialEnum::ChiseledStoneBricks;
    pub const PACKED_MUD: MaterialMaterialEnum = MaterialMaterialEnum::PackedMud;
    pub const MUD_BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::MudBricks;
    pub const DEEPSLATE_BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::DeepslateBricks;
    pub const CRACKED_DEEPSLATE_BRICKS: MaterialMaterialEnum =
        MaterialMaterialEnum::CrackedDeepslateBricks;
    pub const DEEPSLATE_TILES: MaterialMaterialEnum = MaterialMaterialEnum::DeepslateTiles;
    pub const CRACKED_DEEPSLATE_TILES: MaterialMaterialEnum =
        MaterialMaterialEnum::CrackedDeepslateTiles;
    pub const CHISELED_DEEPSLATE: MaterialMaterialEnum = MaterialMaterialEnum::ChiseledDeepslate;
    pub const REINFORCED_DEEPSLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::ReinforcedDeepslate;
    pub const BROWN_MUSHROOM_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::BrownMushroomBlock;
    pub const RED_MUSHROOM_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::RedMushroomBlock;
    pub const MUSHROOM_STEM: MaterialMaterialEnum = MaterialMaterialEnum::MushroomStem;
    pub const IRON_BARS: MaterialMaterialEnum = MaterialMaterialEnum::IronBars;
    pub const CHAIN: MaterialMaterialEnum = MaterialMaterialEnum::Chain;
    pub const GLASS_PANE: MaterialMaterialEnum = MaterialMaterialEnum::GlassPane;
    pub const MELON: MaterialMaterialEnum = MaterialMaterialEnum::Melon;
    pub const VINE: MaterialMaterialEnum = MaterialMaterialEnum::Vine;
    pub const GLOW_LICHEN: MaterialMaterialEnum = MaterialMaterialEnum::GlowLichen;
    pub const BRICK_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::BrickStairs;
    pub const STONE_BRICK_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::StoneBrickStairs;
    pub const MUD_BRICK_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::MudBrickStairs;
    pub const MYCELIUM: MaterialMaterialEnum = MaterialMaterialEnum::Mycelium;
    pub const LILY_PAD: MaterialMaterialEnum = MaterialMaterialEnum::LilyPad;
    pub const NETHER_BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::NetherBricks;
    pub const CRACKED_NETHER_BRICKS: MaterialMaterialEnum =
        MaterialMaterialEnum::CrackedNetherBricks;
    pub const CHISELED_NETHER_BRICKS: MaterialMaterialEnum =
        MaterialMaterialEnum::ChiseledNetherBricks;
    pub const NETHER_BRICK_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::NetherBrickFence;
    pub const NETHER_BRICK_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::NetherBrickStairs;
    pub const SCULK: MaterialMaterialEnum = MaterialMaterialEnum::Sculk;
    pub const SCULK_VEIN: MaterialMaterialEnum = MaterialMaterialEnum::SculkVein;
    pub const SCULK_CATALYST: MaterialMaterialEnum = MaterialMaterialEnum::SculkCatalyst;
    pub const SCULK_SHRIEKER: MaterialMaterialEnum = MaterialMaterialEnum::SculkShrieker;
    pub const ENCHANTING_TABLE: MaterialMaterialEnum = MaterialMaterialEnum::EnchantingTable;
    pub const END_PORTAL_FRAME: MaterialMaterialEnum = MaterialMaterialEnum::EndPortalFrame;
    pub const END_STONE: MaterialMaterialEnum = MaterialMaterialEnum::EndStone;
    pub const END_STONE_BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::EndStoneBricks;
    pub const DRAGON_EGG: MaterialMaterialEnum = MaterialMaterialEnum::DragonEgg;
    pub const SANDSTONE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::SandstoneStairs;
    pub const ENDER_CHEST: MaterialMaterialEnum = MaterialMaterialEnum::EnderChest;
    pub const EMERALD_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::EmeraldBlock;
    pub const OAK_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::OakStairs;
    pub const SPRUCE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::SpruceStairs;
    pub const BIRCH_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::BirchStairs;
    pub const JUNGLE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::JungleStairs;
    pub const ACACIA_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaStairs;
    pub const CHERRY_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::CherryStairs;
    pub const DARK_OAK_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakStairs;
    pub const MANGROVE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::MangroveStairs;
    pub const BAMBOO_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::BambooStairs;
    pub const BAMBOO_MOSAIC_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::BambooMosaicStairs;
    pub const CRIMSON_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonStairs;
    pub const WARPED_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::WarpedStairs;
    pub const COMMAND_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::CommandBlock;
    pub const BEACON: MaterialMaterialEnum = MaterialMaterialEnum::Beacon;
    pub const COBBLESTONE_WALL: MaterialMaterialEnum = MaterialMaterialEnum::CobblestoneWall;
    pub const MOSSY_COBBLESTONE_WALL: MaterialMaterialEnum =
        MaterialMaterialEnum::MossyCobblestoneWall;
    pub const BRICK_WALL: MaterialMaterialEnum = MaterialMaterialEnum::BrickWall;
    pub const PRISMARINE_WALL: MaterialMaterialEnum = MaterialMaterialEnum::PrismarineWall;
    pub const RED_SANDSTONE_WALL: MaterialMaterialEnum = MaterialMaterialEnum::RedSandstoneWall;
    pub const MOSSY_STONE_BRICK_WALL: MaterialMaterialEnum =
        MaterialMaterialEnum::MossyStoneBrickWall;
    pub const GRANITE_WALL: MaterialMaterialEnum = MaterialMaterialEnum::GraniteWall;
    pub const STONE_BRICK_WALL: MaterialMaterialEnum = MaterialMaterialEnum::StoneBrickWall;
    pub const MUD_BRICK_WALL: MaterialMaterialEnum = MaterialMaterialEnum::MudBrickWall;
    pub const NETHER_BRICK_WALL: MaterialMaterialEnum = MaterialMaterialEnum::NetherBrickWall;
    pub const ANDESITE_WALL: MaterialMaterialEnum = MaterialMaterialEnum::AndesiteWall;
    pub const RED_NETHER_BRICK_WALL: MaterialMaterialEnum =
        MaterialMaterialEnum::RedNetherBrickWall;
    pub const SANDSTONE_WALL: MaterialMaterialEnum = MaterialMaterialEnum::SandstoneWall;
    pub const END_STONE_BRICK_WALL: MaterialMaterialEnum = MaterialMaterialEnum::EndStoneBrickWall;
    pub const DIORITE_WALL: MaterialMaterialEnum = MaterialMaterialEnum::DioriteWall;
    pub const BLACKSTONE_WALL: MaterialMaterialEnum = MaterialMaterialEnum::BlackstoneWall;
    pub const POLISHED_BLACKSTONE_WALL: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedBlackstoneWall;
    pub const POLISHED_BLACKSTONE_BRICK_WALL: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedBlackstoneBrickWall;
    pub const COBBLED_DEEPSLATE_WALL: MaterialMaterialEnum =
        MaterialMaterialEnum::CobbledDeepslateWall;
    pub const POLISHED_DEEPSLATE_WALL: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedDeepslateWall;
    pub const DEEPSLATE_BRICK_WALL: MaterialMaterialEnum = MaterialMaterialEnum::DeepslateBrickWall;
    pub const DEEPSLATE_TILE_WALL: MaterialMaterialEnum = MaterialMaterialEnum::DeepslateTileWall;
    pub const ANVIL: MaterialMaterialEnum = MaterialMaterialEnum::Anvil;
    pub const CHIPPED_ANVIL: MaterialMaterialEnum = MaterialMaterialEnum::ChippedAnvil;
    pub const DAMAGED_ANVIL: MaterialMaterialEnum = MaterialMaterialEnum::DamagedAnvil;
    pub const CHISELED_QUARTZ_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::ChiseledQuartzBlock;
    pub const QUARTZ_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::QuartzBlock;
    pub const QUARTZ_BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::QuartzBricks;
    pub const QUARTZ_PILLAR: MaterialMaterialEnum = MaterialMaterialEnum::QuartzPillar;
    pub const QUARTZ_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::QuartzStairs;
    pub const WHITE_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::WhiteTerracotta;
    pub const ORANGE_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::OrangeTerracotta;
    pub const MAGENTA_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::MagentaTerracotta;
    pub const LIGHT_BLUE_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LightBlueTerracotta;
    pub const YELLOW_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::YellowTerracotta;
    pub const LIME_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::LimeTerracotta;
    pub const PINK_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::PinkTerracotta;
    pub const GRAY_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::GrayTerracotta;
    pub const LIGHT_GRAY_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LightGrayTerracotta;
    pub const CYAN_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::CyanTerracotta;
    pub const PURPLE_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::PurpleTerracotta;
    pub const BLUE_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::BlueTerracotta;
    pub const BROWN_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::BrownTerracotta;
    pub const GREEN_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::GreenTerracotta;
    pub const RED_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::RedTerracotta;
    pub const BLACK_TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::BlackTerracotta;
    pub const BARRIER: MaterialMaterialEnum = MaterialMaterialEnum::Barrier;
    pub const LIGHT: MaterialMaterialEnum = MaterialMaterialEnum::Light;
    pub const HAY_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::HayBlock;
    pub const WHITE_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::WhiteCarpet;
    pub const ORANGE_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::OrangeCarpet;
    pub const MAGENTA_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::MagentaCarpet;
    pub const LIGHT_BLUE_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::LightBlueCarpet;
    pub const YELLOW_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::YellowCarpet;
    pub const LIME_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::LimeCarpet;
    pub const PINK_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::PinkCarpet;
    pub const GRAY_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::GrayCarpet;
    pub const LIGHT_GRAY_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::LightGrayCarpet;
    pub const CYAN_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::CyanCarpet;
    pub const PURPLE_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::PurpleCarpet;
    pub const BLUE_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::BlueCarpet;
    pub const BROWN_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::BrownCarpet;
    pub const GREEN_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::GreenCarpet;
    pub const RED_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::RedCarpet;
    pub const BLACK_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::BlackCarpet;
    pub const TERRACOTTA: MaterialMaterialEnum = MaterialMaterialEnum::Terracotta;
    pub const PACKED_ICE: MaterialMaterialEnum = MaterialMaterialEnum::PackedIce;
    pub const DIRT_PATH: MaterialMaterialEnum = MaterialMaterialEnum::DirtPath;
    pub const SUNFLOWER: MaterialMaterialEnum = MaterialMaterialEnum::Sunflower;
    pub const LILAC: MaterialMaterialEnum = MaterialMaterialEnum::Lilac;
    pub const ROSE_BUSH: MaterialMaterialEnum = MaterialMaterialEnum::RoseBush;
    pub const PEONY: MaterialMaterialEnum = MaterialMaterialEnum::Peony;
    pub const TALL_GRASS: MaterialMaterialEnum = MaterialMaterialEnum::TallGrass;
    pub const LARGE_FERN: MaterialMaterialEnum = MaterialMaterialEnum::LargeFern;
    pub const WHITE_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::WhiteStainedGlass;
    pub const ORANGE_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::OrangeStainedGlass;
    pub const MAGENTA_STAINED_GLASS: MaterialMaterialEnum =
        MaterialMaterialEnum::MagentaStainedGlass;
    pub const LIGHT_BLUE_STAINED_GLASS: MaterialMaterialEnum =
        MaterialMaterialEnum::LightBlueStainedGlass;
    pub const YELLOW_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::YellowStainedGlass;
    pub const LIME_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::LimeStainedGlass;
    pub const PINK_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::PinkStainedGlass;
    pub const GRAY_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::GrayStainedGlass;
    pub const LIGHT_GRAY_STAINED_GLASS: MaterialMaterialEnum =
        MaterialMaterialEnum::LightGrayStainedGlass;
    pub const CYAN_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::CyanStainedGlass;
    pub const PURPLE_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::PurpleStainedGlass;
    pub const BLUE_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::BlueStainedGlass;
    pub const BROWN_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::BrownStainedGlass;
    pub const GREEN_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::GreenStainedGlass;
    pub const RED_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::RedStainedGlass;
    pub const BLACK_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::BlackStainedGlass;
    pub const WHITE_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::WhiteStainedGlassPane;
    pub const ORANGE_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::OrangeStainedGlassPane;
    pub const MAGENTA_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::MagentaStainedGlassPane;
    pub const LIGHT_BLUE_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::LightBlueStainedGlassPane;
    pub const YELLOW_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::YellowStainedGlassPane;
    pub const LIME_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::LimeStainedGlassPane;
    pub const PINK_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::PinkStainedGlassPane;
    pub const GRAY_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::GrayStainedGlassPane;
    pub const LIGHT_GRAY_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::LightGrayStainedGlassPane;
    pub const CYAN_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::CyanStainedGlassPane;
    pub const PURPLE_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::PurpleStainedGlassPane;
    pub const BLUE_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::BlueStainedGlassPane;
    pub const BROWN_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::BrownStainedGlassPane;
    pub const GREEN_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::GreenStainedGlassPane;
    pub const RED_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::RedStainedGlassPane;
    pub const BLACK_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::BlackStainedGlassPane;
    pub const PRISMARINE: MaterialMaterialEnum = MaterialMaterialEnum::Prismarine;
    pub const PRISMARINE_BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::PrismarineBricks;
    pub const DARK_PRISMARINE: MaterialMaterialEnum = MaterialMaterialEnum::DarkPrismarine;
    pub const PRISMARINE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::PrismarineStairs;
    pub const PRISMARINE_BRICK_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::PrismarineBrickStairs;
    pub const DARK_PRISMARINE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::DarkPrismarineStairs;
    pub const SEA_LANTERN: MaterialMaterialEnum = MaterialMaterialEnum::SeaLantern;
    pub const RED_SANDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::RedSandstone;
    pub const CHISELED_RED_SANDSTONE: MaterialMaterialEnum =
        MaterialMaterialEnum::ChiseledRedSandstone;
    pub const CUT_RED_SANDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::CutRedSandstone;
    pub const RED_SANDSTONE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::RedSandstoneStairs;
    pub const REPEATING_COMMAND_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::RepeatingCommandBlock;
    pub const CHAIN_COMMAND_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::ChainCommandBlock;
    pub const MAGMA_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::MagmaBlock;
    pub const NETHER_WART_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::NetherWartBlock;
    pub const WARPED_WART_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::WarpedWartBlock;
    pub const RED_NETHER_BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::RedNetherBricks;
    pub const BONE_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::BoneBlock;
    pub const STRUCTURE_VOID: MaterialMaterialEnum = MaterialMaterialEnum::StructureVoid;
    pub const SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::ShulkerBox;
    pub const WHITE_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::WhiteShulkerBox;
    pub const ORANGE_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::OrangeShulkerBox;
    pub const MAGENTA_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::MagentaShulkerBox;
    pub const LIGHT_BLUE_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LightBlueShulkerBox;
    pub const YELLOW_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::YellowShulkerBox;
    pub const LIME_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::LimeShulkerBox;
    pub const PINK_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::PinkShulkerBox;
    pub const GRAY_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::GrayShulkerBox;
    pub const LIGHT_GRAY_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LightGrayShulkerBox;
    pub const CYAN_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::CyanShulkerBox;
    pub const PURPLE_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::PurpleShulkerBox;
    pub const BLUE_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::BlueShulkerBox;
    pub const BROWN_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::BrownShulkerBox;
    pub const GREEN_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::GreenShulkerBox;
    pub const RED_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::RedShulkerBox;
    pub const BLACK_SHULKER_BOX: MaterialMaterialEnum = MaterialMaterialEnum::BlackShulkerBox;
    pub const WHITE_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::WhiteGlazedTerracotta;
    pub const ORANGE_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::OrangeGlazedTerracotta;
    pub const MAGENTA_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::MagentaGlazedTerracotta;
    pub const LIGHT_BLUE_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LightBlueGlazedTerracotta;
    pub const YELLOW_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::YellowGlazedTerracotta;
    pub const LIME_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LimeGlazedTerracotta;
    pub const PINK_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::PinkGlazedTerracotta;
    pub const GRAY_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::GrayGlazedTerracotta;
    pub const LIGHT_GRAY_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LightGrayGlazedTerracotta;
    pub const CYAN_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::CyanGlazedTerracotta;
    pub const PURPLE_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::PurpleGlazedTerracotta;
    pub const BLUE_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::BlueGlazedTerracotta;
    pub const BROWN_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::BrownGlazedTerracotta;
    pub const GREEN_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::GreenGlazedTerracotta;
    pub const RED_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::RedGlazedTerracotta;
    pub const BLACK_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::BlackGlazedTerracotta;
    pub const WHITE_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::WhiteConcrete;
    pub const ORANGE_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::OrangeConcrete;
    pub const MAGENTA_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::MagentaConcrete;
    pub const LIGHT_BLUE_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::LightBlueConcrete;
    pub const YELLOW_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::YellowConcrete;
    pub const LIME_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::LimeConcrete;
    pub const PINK_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::PinkConcrete;
    pub const GRAY_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::GrayConcrete;
    pub const LIGHT_GRAY_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::LightGrayConcrete;
    pub const CYAN_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::CyanConcrete;
    pub const PURPLE_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::PurpleConcrete;
    pub const BLUE_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::BlueConcrete;
    pub const BROWN_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::BrownConcrete;
    pub const GREEN_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::GreenConcrete;
    pub const RED_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::RedConcrete;
    pub const BLACK_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::BlackConcrete;
    pub const WHITE_CONCRETE_POWDER: MaterialMaterialEnum =
        MaterialMaterialEnum::WhiteConcretePowder;
    pub const ORANGE_CONCRETE_POWDER: MaterialMaterialEnum =
        MaterialMaterialEnum::OrangeConcretePowder;
    pub const MAGENTA_CONCRETE_POWDER: MaterialMaterialEnum =
        MaterialMaterialEnum::MagentaConcretePowder;
    pub const LIGHT_BLUE_CONCRETE_POWDER: MaterialMaterialEnum =
        MaterialMaterialEnum::LightBlueConcretePowder;
    pub const YELLOW_CONCRETE_POWDER: MaterialMaterialEnum =
        MaterialMaterialEnum::YellowConcretePowder;
    pub const LIME_CONCRETE_POWDER: MaterialMaterialEnum = MaterialMaterialEnum::LimeConcretePowder;
    pub const PINK_CONCRETE_POWDER: MaterialMaterialEnum = MaterialMaterialEnum::PinkConcretePowder;
    pub const GRAY_CONCRETE_POWDER: MaterialMaterialEnum = MaterialMaterialEnum::GrayConcretePowder;
    pub const LIGHT_GRAY_CONCRETE_POWDER: MaterialMaterialEnum =
        MaterialMaterialEnum::LightGrayConcretePowder;
    pub const CYAN_CONCRETE_POWDER: MaterialMaterialEnum = MaterialMaterialEnum::CyanConcretePowder;
    pub const PURPLE_CONCRETE_POWDER: MaterialMaterialEnum =
        MaterialMaterialEnum::PurpleConcretePowder;
    pub const BLUE_CONCRETE_POWDER: MaterialMaterialEnum = MaterialMaterialEnum::BlueConcretePowder;
    pub const BROWN_CONCRETE_POWDER: MaterialMaterialEnum =
        MaterialMaterialEnum::BrownConcretePowder;
    pub const GREEN_CONCRETE_POWDER: MaterialMaterialEnum =
        MaterialMaterialEnum::GreenConcretePowder;
    pub const RED_CONCRETE_POWDER: MaterialMaterialEnum = MaterialMaterialEnum::RedConcretePowder;
    pub const BLACK_CONCRETE_POWDER: MaterialMaterialEnum =
        MaterialMaterialEnum::BlackConcretePowder;
    pub const TURTLE_EGG: MaterialMaterialEnum = MaterialMaterialEnum::TurtleEgg;
    pub const SNIFFER_EGG: MaterialMaterialEnum = MaterialMaterialEnum::SnifferEgg;
    pub const DEAD_TUBE_CORAL_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::DeadTubeCoralBlock;
    pub const DEAD_BRAIN_CORAL_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::DeadBrainCoralBlock;
    pub const DEAD_BUBBLE_CORAL_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::DeadBubbleCoralBlock;
    pub const DEAD_FIRE_CORAL_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::DeadFireCoralBlock;
    pub const DEAD_HORN_CORAL_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::DeadHornCoralBlock;
    pub const TUBE_CORAL_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::TubeCoralBlock;
    pub const BRAIN_CORAL_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::BrainCoralBlock;
    pub const BUBBLE_CORAL_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::BubbleCoralBlock;
    pub const FIRE_CORAL_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::FireCoralBlock;
    pub const HORN_CORAL_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::HornCoralBlock;
    pub const TUBE_CORAL: MaterialMaterialEnum = MaterialMaterialEnum::TubeCoral;
    pub const BRAIN_CORAL: MaterialMaterialEnum = MaterialMaterialEnum::BrainCoral;
    pub const BUBBLE_CORAL: MaterialMaterialEnum = MaterialMaterialEnum::BubbleCoral;
    pub const FIRE_CORAL: MaterialMaterialEnum = MaterialMaterialEnum::FireCoral;
    pub const HORN_CORAL: MaterialMaterialEnum = MaterialMaterialEnum::HornCoral;
    pub const DEAD_BRAIN_CORAL: MaterialMaterialEnum = MaterialMaterialEnum::DeadBrainCoral;
    pub const DEAD_BUBBLE_CORAL: MaterialMaterialEnum = MaterialMaterialEnum::DeadBubbleCoral;
    pub const DEAD_FIRE_CORAL: MaterialMaterialEnum = MaterialMaterialEnum::DeadFireCoral;
    pub const DEAD_HORN_CORAL: MaterialMaterialEnum = MaterialMaterialEnum::DeadHornCoral;
    pub const DEAD_TUBE_CORAL: MaterialMaterialEnum = MaterialMaterialEnum::DeadTubeCoral;
    pub const TUBE_CORAL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::TubeCoralFan;
    pub const BRAIN_CORAL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::BrainCoralFan;
    pub const BUBBLE_CORAL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::BubbleCoralFan;
    pub const FIRE_CORAL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::FireCoralFan;
    pub const HORN_CORAL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::HornCoralFan;
    pub const DEAD_TUBE_CORAL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::DeadTubeCoralFan;
    pub const DEAD_BRAIN_CORAL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::DeadBrainCoralFan;
    pub const DEAD_BUBBLE_CORAL_FAN: MaterialMaterialEnum =
        MaterialMaterialEnum::DeadBubbleCoralFan;
    pub const DEAD_FIRE_CORAL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::DeadFireCoralFan;
    pub const DEAD_HORN_CORAL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::DeadHornCoralFan;
    pub const BLUE_ICE: MaterialMaterialEnum = MaterialMaterialEnum::BlueIce;
    pub const CONDUIT: MaterialMaterialEnum = MaterialMaterialEnum::Conduit;
    pub const POLISHED_GRANITE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedGraniteStairs;
    pub const SMOOTH_RED_SANDSTONE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::SmoothRedSandstoneStairs;
    pub const MOSSY_STONE_BRICK_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::MossyStoneBrickStairs;
    pub const POLISHED_DIORITE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedDioriteStairs;
    pub const MOSSY_COBBLESTONE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::MossyCobblestoneStairs;
    pub const END_STONE_BRICK_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::EndStoneBrickStairs;
    pub const STONE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::StoneStairs;
    pub const SMOOTH_SANDSTONE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::SmoothSandstoneStairs;
    pub const SMOOTH_QUARTZ_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::SmoothQuartzStairs;
    pub const GRANITE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::GraniteStairs;
    pub const ANDESITE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::AndesiteStairs;
    pub const RED_NETHER_BRICK_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::RedNetherBrickStairs;
    pub const POLISHED_ANDESITE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedAndesiteStairs;
    pub const DIORITE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::DioriteStairs;
    pub const COBBLED_DEEPSLATE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::CobbledDeepslateStairs;
    pub const POLISHED_DEEPSLATE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedDeepslateStairs;
    pub const DEEPSLATE_BRICK_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::DeepslateBrickStairs;
    pub const DEEPSLATE_TILE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::DeepslateTileStairs;
    pub const POLISHED_GRANITE_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedGraniteSlab;
    pub const SMOOTH_RED_SANDSTONE_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::SmoothRedSandstoneSlab;
    pub const MOSSY_STONE_BRICK_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::MossyStoneBrickSlab;
    pub const POLISHED_DIORITE_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedDioriteSlab;
    pub const MOSSY_COBBLESTONE_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::MossyCobblestoneSlab;
    pub const END_STONE_BRICK_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::EndStoneBrickSlab;
    pub const SMOOTH_SANDSTONE_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::SmoothSandstoneSlab;
    pub const SMOOTH_QUARTZ_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::SmoothQuartzSlab;
    pub const GRANITE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::GraniteSlab;
    pub const ANDESITE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::AndesiteSlab;
    pub const RED_NETHER_BRICK_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::RedNetherBrickSlab;
    pub const POLISHED_ANDESITE_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedAndesiteSlab;
    pub const DIORITE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::DioriteSlab;
    pub const COBBLED_DEEPSLATE_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::CobbledDeepslateSlab;
    pub const POLISHED_DEEPSLATE_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedDeepslateSlab;
    pub const DEEPSLATE_BRICK_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::DeepslateBrickSlab;
    pub const DEEPSLATE_TILE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::DeepslateTileSlab;
    pub const SCAFFOLDING: MaterialMaterialEnum = MaterialMaterialEnum::Scaffolding;
    pub const REDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::Redstone;
    pub const REDSTONE_TORCH: MaterialMaterialEnum = MaterialMaterialEnum::RedstoneTorch;
    pub const REDSTONE_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::RedstoneBlock;
    pub const REPEATER: MaterialMaterialEnum = MaterialMaterialEnum::Repeater;
    pub const COMPARATOR: MaterialMaterialEnum = MaterialMaterialEnum::Comparator;
    pub const PISTON: MaterialMaterialEnum = MaterialMaterialEnum::Piston;
    pub const STICKY_PISTON: MaterialMaterialEnum = MaterialMaterialEnum::StickyPiston;
    pub const SLIME_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::SlimeBlock;
    pub const HONEY_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::HoneyBlock;
    pub const OBSERVER: MaterialMaterialEnum = MaterialMaterialEnum::Observer;
    pub const HOPPER: MaterialMaterialEnum = MaterialMaterialEnum::Hopper;
    pub const DISPENSER: MaterialMaterialEnum = MaterialMaterialEnum::Dispenser;
    pub const DROPPER: MaterialMaterialEnum = MaterialMaterialEnum::Dropper;
    pub const LECTERN: MaterialMaterialEnum = MaterialMaterialEnum::Lectern;
    pub const TARGET: MaterialMaterialEnum = MaterialMaterialEnum::Target;
    pub const LEVER: MaterialMaterialEnum = MaterialMaterialEnum::Lever;
    pub const LIGHTNING_ROD: MaterialMaterialEnum = MaterialMaterialEnum::LightningRod;
    pub const DAYLIGHT_DETECTOR: MaterialMaterialEnum = MaterialMaterialEnum::DaylightDetector;
    pub const SCULK_SENSOR: MaterialMaterialEnum = MaterialMaterialEnum::SculkSensor;
    pub const CALIBRATED_SCULK_SENSOR: MaterialMaterialEnum =
        MaterialMaterialEnum::CalibratedSculkSensor;
    pub const TRIPWIRE_HOOK: MaterialMaterialEnum = MaterialMaterialEnum::TripwireHook;
    pub const TRAPPED_CHEST: MaterialMaterialEnum = MaterialMaterialEnum::TrappedChest;
    pub const TNT: MaterialMaterialEnum = MaterialMaterialEnum::Tnt;
    pub const REDSTONE_LAMP: MaterialMaterialEnum = MaterialMaterialEnum::RedstoneLamp;
    pub const NOTE_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::NoteBlock;
    pub const STONE_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::StoneButton;
    pub const POLISHED_BLACKSTONE_BUTTON: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedBlackstoneButton;
    pub const OAK_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::OakButton;
    pub const SPRUCE_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::SpruceButton;
    pub const BIRCH_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::BirchButton;
    pub const JUNGLE_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::JungleButton;
    pub const ACACIA_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaButton;
    pub const CHERRY_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::CherryButton;
    pub const DARK_OAK_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakButton;
    pub const MANGROVE_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::MangroveButton;
    pub const BAMBOO_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::BambooButton;
    pub const CRIMSON_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonButton;
    pub const WARPED_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::WarpedButton;
    pub const STONE_PRESSURE_PLATE: MaterialMaterialEnum = MaterialMaterialEnum::StonePressurePlate;
    pub const POLISHED_BLACKSTONE_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedBlackstonePressurePlate;
    pub const LIGHT_WEIGHTED_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::LightWeightedPressurePlate;
    pub const HEAVY_WEIGHTED_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::HeavyWeightedPressurePlate;
    pub const OAK_PRESSURE_PLATE: MaterialMaterialEnum = MaterialMaterialEnum::OakPressurePlate;
    pub const SPRUCE_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::SprucePressurePlate;
    pub const BIRCH_PRESSURE_PLATE: MaterialMaterialEnum = MaterialMaterialEnum::BirchPressurePlate;
    pub const JUNGLE_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::JunglePressurePlate;
    pub const ACACIA_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::AcaciaPressurePlate;
    pub const CHERRY_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::CherryPressurePlate;
    pub const DARK_OAK_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::DarkOakPressurePlate;
    pub const MANGROVE_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::MangrovePressurePlate;
    pub const BAMBOO_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::BambooPressurePlate;
    pub const CRIMSON_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::CrimsonPressurePlate;
    pub const WARPED_PRESSURE_PLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::WarpedPressurePlate;
    pub const IRON_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::IronDoor;
    pub const OAK_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::OakDoor;
    pub const SPRUCE_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::SpruceDoor;
    pub const BIRCH_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::BirchDoor;
    pub const JUNGLE_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::JungleDoor;
    pub const ACACIA_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaDoor;
    pub const CHERRY_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::CherryDoor;
    pub const DARK_OAK_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakDoor;
    pub const MANGROVE_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::MangroveDoor;
    pub const BAMBOO_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::BambooDoor;
    pub const CRIMSON_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonDoor;
    pub const WARPED_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::WarpedDoor;
    pub const IRON_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::IronTrapdoor;
    pub const OAK_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::OakTrapdoor;
    pub const SPRUCE_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::SpruceTrapdoor;
    pub const BIRCH_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::BirchTrapdoor;
    pub const JUNGLE_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::JungleTrapdoor;
    pub const ACACIA_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaTrapdoor;
    pub const CHERRY_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::CherryTrapdoor;
    pub const DARK_OAK_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakTrapdoor;
    pub const MANGROVE_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::MangroveTrapdoor;
    pub const BAMBOO_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::BambooTrapdoor;
    pub const CRIMSON_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonTrapdoor;
    pub const WARPED_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::WarpedTrapdoor;
    pub const OAK_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::OakFenceGate;
    pub const SPRUCE_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::SpruceFenceGate;
    pub const BIRCH_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::BirchFenceGate;
    pub const JUNGLE_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::JungleFenceGate;
    pub const ACACIA_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaFenceGate;
    pub const CHERRY_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::CherryFenceGate;
    pub const DARK_OAK_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakFenceGate;
    pub const MANGROVE_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::MangroveFenceGate;
    pub const BAMBOO_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::BambooFenceGate;
    pub const CRIMSON_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonFenceGate;
    pub const WARPED_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::WarpedFenceGate;
    pub const POWERED_RAIL: MaterialMaterialEnum = MaterialMaterialEnum::PoweredRail;
    pub const DETECTOR_RAIL: MaterialMaterialEnum = MaterialMaterialEnum::DetectorRail;
    pub const RAIL: MaterialMaterialEnum = MaterialMaterialEnum::Rail;
    pub const ACTIVATOR_RAIL: MaterialMaterialEnum = MaterialMaterialEnum::ActivatorRail;
    pub const SADDLE: MaterialMaterialEnum = MaterialMaterialEnum::Saddle;
    pub const MINECART: MaterialMaterialEnum = MaterialMaterialEnum::Minecart;
    pub const CHEST_MINECART: MaterialMaterialEnum = MaterialMaterialEnum::ChestMinecart;
    pub const FURNACE_MINECART: MaterialMaterialEnum = MaterialMaterialEnum::FurnaceMinecart;
    pub const TNT_MINECART: MaterialMaterialEnum = MaterialMaterialEnum::TntMinecart;
    pub const HOPPER_MINECART: MaterialMaterialEnum = MaterialMaterialEnum::HopperMinecart;
    pub const CARROT_ON_A_STICK: MaterialMaterialEnum = MaterialMaterialEnum::CarrotOnAStick;
    pub const WARPED_FUNGUS_ON_A_STICK: MaterialMaterialEnum =
        MaterialMaterialEnum::WarpedFungusOnAStick;
    pub const ELYTRA: MaterialMaterialEnum = MaterialMaterialEnum::Elytra;
    pub const OAK_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::OakBoat;
    pub const OAK_CHEST_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::OakChestBoat;
    pub const SPRUCE_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::SpruceBoat;
    pub const SPRUCE_CHEST_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::SpruceChestBoat;
    pub const BIRCH_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::BirchBoat;
    pub const BIRCH_CHEST_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::BirchChestBoat;
    pub const JUNGLE_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::JungleBoat;
    pub const JUNGLE_CHEST_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::JungleChestBoat;
    pub const ACACIA_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaBoat;
    pub const ACACIA_CHEST_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaChestBoat;
    pub const CHERRY_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::CherryBoat;
    pub const CHERRY_CHEST_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::CherryChestBoat;
    pub const DARK_OAK_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakBoat;
    pub const DARK_OAK_CHEST_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakChestBoat;
    pub const MANGROVE_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::MangroveBoat;
    pub const MANGROVE_CHEST_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::MangroveChestBoat;
    pub const BAMBOO_RAFT: MaterialMaterialEnum = MaterialMaterialEnum::BambooRaft;
    pub const BAMBOO_CHEST_RAFT: MaterialMaterialEnum = MaterialMaterialEnum::BambooChestRaft;
    pub const STRUCTURE_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::StructureBlock;
    pub const JIGSAW: MaterialMaterialEnum = MaterialMaterialEnum::Jigsaw;
    pub const TURTLE_HELMET: MaterialMaterialEnum = MaterialMaterialEnum::TurtleHelmet;
    pub const SCUTE: MaterialMaterialEnum = MaterialMaterialEnum::Scute;
    pub const FLINT_AND_STEEL: MaterialMaterialEnum = MaterialMaterialEnum::FlintAndSteel;
    pub const APPLE: MaterialMaterialEnum = MaterialMaterialEnum::Apple;
    pub const BOW: MaterialMaterialEnum = MaterialMaterialEnum::Bow;
    pub const ARROW: MaterialMaterialEnum = MaterialMaterialEnum::Arrow;
    pub const COAL: MaterialMaterialEnum = MaterialMaterialEnum::Coal;
    pub const CHARCOAL: MaterialMaterialEnum = MaterialMaterialEnum::Charcoal;
    pub const DIAMOND: MaterialMaterialEnum = MaterialMaterialEnum::Diamond;
    pub const EMERALD: MaterialMaterialEnum = MaterialMaterialEnum::Emerald;
    pub const LAPIS_LAZULI: MaterialMaterialEnum = MaterialMaterialEnum::LapisLazuli;
    pub const QUARTZ: MaterialMaterialEnum = MaterialMaterialEnum::Quartz;
    pub const AMETHYST_SHARD: MaterialMaterialEnum = MaterialMaterialEnum::AmethystShard;
    pub const RAW_IRON: MaterialMaterialEnum = MaterialMaterialEnum::RawIron;
    pub const IRON_INGOT: MaterialMaterialEnum = MaterialMaterialEnum::IronIngot;
    pub const RAW_COPPER: MaterialMaterialEnum = MaterialMaterialEnum::RawCopper;
    pub const COPPER_INGOT: MaterialMaterialEnum = MaterialMaterialEnum::CopperIngot;
    pub const RAW_GOLD: MaterialMaterialEnum = MaterialMaterialEnum::RawGold;
    pub const GOLD_INGOT: MaterialMaterialEnum = MaterialMaterialEnum::GoldIngot;
    pub const NETHERITE_INGOT: MaterialMaterialEnum = MaterialMaterialEnum::NetheriteIngot;
    pub const NETHERITE_SCRAP: MaterialMaterialEnum = MaterialMaterialEnum::NetheriteScrap;
    pub const WOODEN_SWORD: MaterialMaterialEnum = MaterialMaterialEnum::WoodenSword;
    pub const WOODEN_SHOVEL: MaterialMaterialEnum = MaterialMaterialEnum::WoodenShovel;
    pub const WOODEN_PICKAXE: MaterialMaterialEnum = MaterialMaterialEnum::WoodenPickaxe;
    pub const WOODEN_AXE: MaterialMaterialEnum = MaterialMaterialEnum::WoodenAxe;
    pub const WOODEN_HOE: MaterialMaterialEnum = MaterialMaterialEnum::WoodenHoe;
    pub const STONE_SWORD: MaterialMaterialEnum = MaterialMaterialEnum::StoneSword;
    pub const STONE_SHOVEL: MaterialMaterialEnum = MaterialMaterialEnum::StoneShovel;
    pub const STONE_PICKAXE: MaterialMaterialEnum = MaterialMaterialEnum::StonePickaxe;
    pub const STONE_AXE: MaterialMaterialEnum = MaterialMaterialEnum::StoneAxe;
    pub const STONE_HOE: MaterialMaterialEnum = MaterialMaterialEnum::StoneHoe;
    pub const GOLDEN_SWORD: MaterialMaterialEnum = MaterialMaterialEnum::GoldenSword;
    pub const GOLDEN_SHOVEL: MaterialMaterialEnum = MaterialMaterialEnum::GoldenShovel;
    pub const GOLDEN_PICKAXE: MaterialMaterialEnum = MaterialMaterialEnum::GoldenPickaxe;
    pub const GOLDEN_AXE: MaterialMaterialEnum = MaterialMaterialEnum::GoldenAxe;
    pub const GOLDEN_HOE: MaterialMaterialEnum = MaterialMaterialEnum::GoldenHoe;
    pub const IRON_SWORD: MaterialMaterialEnum = MaterialMaterialEnum::IronSword;
    pub const IRON_SHOVEL: MaterialMaterialEnum = MaterialMaterialEnum::IronShovel;
    pub const IRON_PICKAXE: MaterialMaterialEnum = MaterialMaterialEnum::IronPickaxe;
    pub const IRON_AXE: MaterialMaterialEnum = MaterialMaterialEnum::IronAxe;
    pub const IRON_HOE: MaterialMaterialEnum = MaterialMaterialEnum::IronHoe;
    pub const DIAMOND_SWORD: MaterialMaterialEnum = MaterialMaterialEnum::DiamondSword;
    pub const DIAMOND_SHOVEL: MaterialMaterialEnum = MaterialMaterialEnum::DiamondShovel;
    pub const DIAMOND_PICKAXE: MaterialMaterialEnum = MaterialMaterialEnum::DiamondPickaxe;
    pub const DIAMOND_AXE: MaterialMaterialEnum = MaterialMaterialEnum::DiamondAxe;
    pub const DIAMOND_HOE: MaterialMaterialEnum = MaterialMaterialEnum::DiamondHoe;
    pub const NETHERITE_SWORD: MaterialMaterialEnum = MaterialMaterialEnum::NetheriteSword;
    pub const NETHERITE_SHOVEL: MaterialMaterialEnum = MaterialMaterialEnum::NetheriteShovel;
    pub const NETHERITE_PICKAXE: MaterialMaterialEnum = MaterialMaterialEnum::NetheritePickaxe;
    pub const NETHERITE_AXE: MaterialMaterialEnum = MaterialMaterialEnum::NetheriteAxe;
    pub const NETHERITE_HOE: MaterialMaterialEnum = MaterialMaterialEnum::NetheriteHoe;
    pub const STICK: MaterialMaterialEnum = MaterialMaterialEnum::Stick;
    pub const BOWL: MaterialMaterialEnum = MaterialMaterialEnum::Bowl;
    pub const MUSHROOM_STEW: MaterialMaterialEnum = MaterialMaterialEnum::MushroomStew;
    pub const STRING: MaterialMaterialEnum = MaterialMaterialEnum::String;
    pub const FEATHER: MaterialMaterialEnum = MaterialMaterialEnum::Feather;
    pub const GUNPOWDER: MaterialMaterialEnum = MaterialMaterialEnum::Gunpowder;
    pub const WHEAT_SEEDS: MaterialMaterialEnum = MaterialMaterialEnum::WheatSeeds;
    pub const WHEAT: MaterialMaterialEnum = MaterialMaterialEnum::Wheat;
    pub const BREAD: MaterialMaterialEnum = MaterialMaterialEnum::Bread;
    pub const LEATHER_HELMET: MaterialMaterialEnum = MaterialMaterialEnum::LeatherHelmet;
    pub const LEATHER_CHESTPLATE: MaterialMaterialEnum = MaterialMaterialEnum::LeatherChestplate;
    pub const LEATHER_LEGGINGS: MaterialMaterialEnum = MaterialMaterialEnum::LeatherLeggings;
    pub const LEATHER_BOOTS: MaterialMaterialEnum = MaterialMaterialEnum::LeatherBoots;
    pub const CHAINMAIL_HELMET: MaterialMaterialEnum = MaterialMaterialEnum::ChainmailHelmet;
    pub const CHAINMAIL_CHESTPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::ChainmailChestplate;
    pub const CHAINMAIL_LEGGINGS: MaterialMaterialEnum = MaterialMaterialEnum::ChainmailLeggings;
    pub const CHAINMAIL_BOOTS: MaterialMaterialEnum = MaterialMaterialEnum::ChainmailBoots;
    pub const IRON_HELMET: MaterialMaterialEnum = MaterialMaterialEnum::IronHelmet;
    pub const IRON_CHESTPLATE: MaterialMaterialEnum = MaterialMaterialEnum::IronChestplate;
    pub const IRON_LEGGINGS: MaterialMaterialEnum = MaterialMaterialEnum::IronLeggings;
    pub const IRON_BOOTS: MaterialMaterialEnum = MaterialMaterialEnum::IronBoots;
    pub const DIAMOND_HELMET: MaterialMaterialEnum = MaterialMaterialEnum::DiamondHelmet;
    pub const DIAMOND_CHESTPLATE: MaterialMaterialEnum = MaterialMaterialEnum::DiamondChestplate;
    pub const DIAMOND_LEGGINGS: MaterialMaterialEnum = MaterialMaterialEnum::DiamondLeggings;
    pub const DIAMOND_BOOTS: MaterialMaterialEnum = MaterialMaterialEnum::DiamondBoots;
    pub const GOLDEN_HELMET: MaterialMaterialEnum = MaterialMaterialEnum::GoldenHelmet;
    pub const GOLDEN_CHESTPLATE: MaterialMaterialEnum = MaterialMaterialEnum::GoldenChestplate;
    pub const GOLDEN_LEGGINGS: MaterialMaterialEnum = MaterialMaterialEnum::GoldenLeggings;
    pub const GOLDEN_BOOTS: MaterialMaterialEnum = MaterialMaterialEnum::GoldenBoots;
    pub const NETHERITE_HELMET: MaterialMaterialEnum = MaterialMaterialEnum::NetheriteHelmet;
    pub const NETHERITE_CHESTPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::NetheriteChestplate;
    pub const NETHERITE_LEGGINGS: MaterialMaterialEnum = MaterialMaterialEnum::NetheriteLeggings;
    pub const NETHERITE_BOOTS: MaterialMaterialEnum = MaterialMaterialEnum::NetheriteBoots;
    pub const FLINT: MaterialMaterialEnum = MaterialMaterialEnum::Flint;
    pub const PORKCHOP: MaterialMaterialEnum = MaterialMaterialEnum::Porkchop;
    pub const COOKED_PORKCHOP: MaterialMaterialEnum = MaterialMaterialEnum::CookedPorkchop;
    pub const PAINTING: MaterialMaterialEnum = MaterialMaterialEnum::Painting;
    pub const GOLDEN_APPLE: MaterialMaterialEnum = MaterialMaterialEnum::GoldenApple;
    pub const ENCHANTED_GOLDEN_APPLE: MaterialMaterialEnum =
        MaterialMaterialEnum::EnchantedGoldenApple;
    pub const OAK_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::OakSign;
    pub const SPRUCE_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::SpruceSign;
    pub const BIRCH_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::BirchSign;
    pub const JUNGLE_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::JungleSign;
    pub const ACACIA_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaSign;
    pub const CHERRY_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::CherrySign;
    pub const DARK_OAK_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakSign;
    pub const MANGROVE_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::MangroveSign;
    pub const BAMBOO_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::BambooSign;
    pub const CRIMSON_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonSign;
    pub const WARPED_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::WarpedSign;
    pub const OAK_HANGING_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::OakHangingSign;
    pub const SPRUCE_HANGING_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::SpruceHangingSign;
    pub const BIRCH_HANGING_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::BirchHangingSign;
    pub const JUNGLE_HANGING_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::JungleHangingSign;
    pub const ACACIA_HANGING_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaHangingSign;
    pub const CHERRY_HANGING_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::CherryHangingSign;
    pub const DARK_OAK_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::DarkOakHangingSign;
    pub const MANGROVE_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::MangroveHangingSign;
    pub const BAMBOO_HANGING_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::BambooHangingSign;
    pub const CRIMSON_HANGING_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonHangingSign;
    pub const WARPED_HANGING_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::WarpedHangingSign;
    pub const BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::Bucket;
    pub const WATER_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::WaterBucket;
    pub const LAVA_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::LavaBucket;
    pub const POWDER_SNOW_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::PowderSnowBucket;
    pub const SNOWBALL: MaterialMaterialEnum = MaterialMaterialEnum::Snowball;
    pub const LEATHER: MaterialMaterialEnum = MaterialMaterialEnum::Leather;
    pub const MILK_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::MilkBucket;
    pub const PUFFERFISH_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::PufferfishBucket;
    pub const SALMON_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::SalmonBucket;
    pub const COD_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::CodBucket;
    pub const TROPICAL_FISH_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::TropicalFishBucket;
    pub const AXOLOTL_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::AxolotlBucket;
    pub const TADPOLE_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::TadpoleBucket;
    pub const BRICK: MaterialMaterialEnum = MaterialMaterialEnum::Brick;
    pub const CLAY_BALL: MaterialMaterialEnum = MaterialMaterialEnum::ClayBall;
    pub const DRIED_KELP_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::DriedKelpBlock;
    pub const PAPER: MaterialMaterialEnum = MaterialMaterialEnum::Paper;
    pub const BOOK: MaterialMaterialEnum = MaterialMaterialEnum::Book;
    pub const SLIME_BALL: MaterialMaterialEnum = MaterialMaterialEnum::SlimeBall;
    pub const EGG: MaterialMaterialEnum = MaterialMaterialEnum::Egg;
    pub const COMPASS: MaterialMaterialEnum = MaterialMaterialEnum::Compass;
    pub const RECOVERY_COMPASS: MaterialMaterialEnum = MaterialMaterialEnum::RecoveryCompass;
    pub const BUNDLE: MaterialMaterialEnum = MaterialMaterialEnum::Bundle;
    pub const FISHING_ROD: MaterialMaterialEnum = MaterialMaterialEnum::FishingRod;
    pub const CLOCK: MaterialMaterialEnum = MaterialMaterialEnum::Clock;
    pub const SPYGLASS: MaterialMaterialEnum = MaterialMaterialEnum::Spyglass;
    pub const GLOWSTONE_DUST: MaterialMaterialEnum = MaterialMaterialEnum::GlowstoneDust;
    pub const COD: MaterialMaterialEnum = MaterialMaterialEnum::Cod;
    pub const SALMON: MaterialMaterialEnum = MaterialMaterialEnum::Salmon;
    pub const TROPICAL_FISH: MaterialMaterialEnum = MaterialMaterialEnum::TropicalFish;
    pub const PUFFERFISH: MaterialMaterialEnum = MaterialMaterialEnum::Pufferfish;
    pub const COOKED_COD: MaterialMaterialEnum = MaterialMaterialEnum::CookedCod;
    pub const COOKED_SALMON: MaterialMaterialEnum = MaterialMaterialEnum::CookedSalmon;
    pub const INK_SAC: MaterialMaterialEnum = MaterialMaterialEnum::InkSac;
    pub const GLOW_INK_SAC: MaterialMaterialEnum = MaterialMaterialEnum::GlowInkSac;
    pub const COCOA_BEANS: MaterialMaterialEnum = MaterialMaterialEnum::CocoaBeans;
    pub const WHITE_DYE: MaterialMaterialEnum = MaterialMaterialEnum::WhiteDye;
    pub const ORANGE_DYE: MaterialMaterialEnum = MaterialMaterialEnum::OrangeDye;
    pub const MAGENTA_DYE: MaterialMaterialEnum = MaterialMaterialEnum::MagentaDye;
    pub const LIGHT_BLUE_DYE: MaterialMaterialEnum = MaterialMaterialEnum::LightBlueDye;
    pub const YELLOW_DYE: MaterialMaterialEnum = MaterialMaterialEnum::YellowDye;
    pub const LIME_DYE: MaterialMaterialEnum = MaterialMaterialEnum::LimeDye;
    pub const PINK_DYE: MaterialMaterialEnum = MaterialMaterialEnum::PinkDye;
    pub const GRAY_DYE: MaterialMaterialEnum = MaterialMaterialEnum::GrayDye;
    pub const LIGHT_GRAY_DYE: MaterialMaterialEnum = MaterialMaterialEnum::LightGrayDye;
    pub const CYAN_DYE: MaterialMaterialEnum = MaterialMaterialEnum::CyanDye;
    pub const PURPLE_DYE: MaterialMaterialEnum = MaterialMaterialEnum::PurpleDye;
    pub const BLUE_DYE: MaterialMaterialEnum = MaterialMaterialEnum::BlueDye;
    pub const BROWN_DYE: MaterialMaterialEnum = MaterialMaterialEnum::BrownDye;
    pub const GREEN_DYE: MaterialMaterialEnum = MaterialMaterialEnum::GreenDye;
    pub const RED_DYE: MaterialMaterialEnum = MaterialMaterialEnum::RedDye;
    pub const BLACK_DYE: MaterialMaterialEnum = MaterialMaterialEnum::BlackDye;
    pub const BONE_MEAL: MaterialMaterialEnum = MaterialMaterialEnum::BoneMeal;
    pub const BONE: MaterialMaterialEnum = MaterialMaterialEnum::Bone;
    pub const SUGAR: MaterialMaterialEnum = MaterialMaterialEnum::Sugar;
    pub const CAKE: MaterialMaterialEnum = MaterialMaterialEnum::Cake;
    pub const WHITE_BED: MaterialMaterialEnum = MaterialMaterialEnum::WhiteBed;
    pub const ORANGE_BED: MaterialMaterialEnum = MaterialMaterialEnum::OrangeBed;
    pub const MAGENTA_BED: MaterialMaterialEnum = MaterialMaterialEnum::MagentaBed;
    pub const LIGHT_BLUE_BED: MaterialMaterialEnum = MaterialMaterialEnum::LightBlueBed;
    pub const YELLOW_BED: MaterialMaterialEnum = MaterialMaterialEnum::YellowBed;
    pub const LIME_BED: MaterialMaterialEnum = MaterialMaterialEnum::LimeBed;
    pub const PINK_BED: MaterialMaterialEnum = MaterialMaterialEnum::PinkBed;
    pub const GRAY_BED: MaterialMaterialEnum = MaterialMaterialEnum::GrayBed;
    pub const LIGHT_GRAY_BED: MaterialMaterialEnum = MaterialMaterialEnum::LightGrayBed;
    pub const CYAN_BED: MaterialMaterialEnum = MaterialMaterialEnum::CyanBed;
    pub const PURPLE_BED: MaterialMaterialEnum = MaterialMaterialEnum::PurpleBed;
    pub const BLUE_BED: MaterialMaterialEnum = MaterialMaterialEnum::BlueBed;
    pub const BROWN_BED: MaterialMaterialEnum = MaterialMaterialEnum::BrownBed;
    pub const GREEN_BED: MaterialMaterialEnum = MaterialMaterialEnum::GreenBed;
    pub const RED_BED: MaterialMaterialEnum = MaterialMaterialEnum::RedBed;
    pub const BLACK_BED: MaterialMaterialEnum = MaterialMaterialEnum::BlackBed;
    pub const COOKIE: MaterialMaterialEnum = MaterialMaterialEnum::Cookie;
    pub const FILLED_MAP: MaterialMaterialEnum = MaterialMaterialEnum::FilledMap;
    pub const SHEARS: MaterialMaterialEnum = MaterialMaterialEnum::Shears;
    pub const MELON_SLICE: MaterialMaterialEnum = MaterialMaterialEnum::MelonSlice;
    pub const DRIED_KELP: MaterialMaterialEnum = MaterialMaterialEnum::DriedKelp;
    pub const PUMPKIN_SEEDS: MaterialMaterialEnum = MaterialMaterialEnum::PumpkinSeeds;
    pub const MELON_SEEDS: MaterialMaterialEnum = MaterialMaterialEnum::MelonSeeds;
    pub const BEEF: MaterialMaterialEnum = MaterialMaterialEnum::Beef;
    pub const COOKED_BEEF: MaterialMaterialEnum = MaterialMaterialEnum::CookedBeef;
    pub const CHICKEN: MaterialMaterialEnum = MaterialMaterialEnum::Chicken;
    pub const COOKED_CHICKEN: MaterialMaterialEnum = MaterialMaterialEnum::CookedChicken;
    pub const ROTTEN_FLESH: MaterialMaterialEnum = MaterialMaterialEnum::RottenFlesh;
    pub const ENDER_PEARL: MaterialMaterialEnum = MaterialMaterialEnum::EnderPearl;
    pub const BLAZE_ROD: MaterialMaterialEnum = MaterialMaterialEnum::BlazeRod;
    pub const GHAST_TEAR: MaterialMaterialEnum = MaterialMaterialEnum::GhastTear;
    pub const GOLD_NUGGET: MaterialMaterialEnum = MaterialMaterialEnum::GoldNugget;
    pub const NETHER_WART: MaterialMaterialEnum = MaterialMaterialEnum::NetherWart;
    pub const POTION: MaterialMaterialEnum = MaterialMaterialEnum::Potion;
    pub const GLASS_BOTTLE: MaterialMaterialEnum = MaterialMaterialEnum::GlassBottle;
    pub const SPIDER_EYE: MaterialMaterialEnum = MaterialMaterialEnum::SpiderEye;
    pub const FERMENTED_SPIDER_EYE: MaterialMaterialEnum = MaterialMaterialEnum::FermentedSpiderEye;
    pub const BLAZE_POWDER: MaterialMaterialEnum = MaterialMaterialEnum::BlazePowder;
    pub const MAGMA_CREAM: MaterialMaterialEnum = MaterialMaterialEnum::MagmaCream;
    pub const BREWING_STAND: MaterialMaterialEnum = MaterialMaterialEnum::BrewingStand;
    pub const CAULDRON: MaterialMaterialEnum = MaterialMaterialEnum::Cauldron;
    pub const ENDER_EYE: MaterialMaterialEnum = MaterialMaterialEnum::EnderEye;
    pub const GLISTERING_MELON_SLICE: MaterialMaterialEnum =
        MaterialMaterialEnum::GlisteringMelonSlice;
    pub const ALLAY_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::AllaySpawnEgg;
    pub const AXOLOTL_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::AxolotlSpawnEgg;
    pub const BAT_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::BatSpawnEgg;
    pub const BEE_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::BeeSpawnEgg;
    pub const BLAZE_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::BlazeSpawnEgg;
    pub const CAT_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::CatSpawnEgg;
    pub const CAMEL_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::CamelSpawnEgg;
    pub const CAVE_SPIDER_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::CaveSpiderSpawnEgg;
    pub const CHICKEN_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::ChickenSpawnEgg;
    pub const COD_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::CodSpawnEgg;
    pub const COW_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::CowSpawnEgg;
    pub const CREEPER_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::CreeperSpawnEgg;
    pub const DOLPHIN_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::DolphinSpawnEgg;
    pub const DONKEY_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::DonkeySpawnEgg;
    pub const DROWNED_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::DrownedSpawnEgg;
    pub const ELDER_GUARDIAN_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::ElderGuardianSpawnEgg;
    pub const ENDER_DRAGON_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::EnderDragonSpawnEgg;
    pub const ENDERMAN_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::EndermanSpawnEgg;
    pub const ENDERMITE_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::EndermiteSpawnEgg;
    pub const EVOKER_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::EvokerSpawnEgg;
    pub const FOX_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::FoxSpawnEgg;
    pub const FROG_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::FrogSpawnEgg;
    pub const GHAST_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::GhastSpawnEgg;
    pub const GLOW_SQUID_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::GlowSquidSpawnEgg;
    pub const GOAT_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::GoatSpawnEgg;
    pub const GUARDIAN_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::GuardianSpawnEgg;
    pub const HOGLIN_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::HoglinSpawnEgg;
    pub const HORSE_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::HorseSpawnEgg;
    pub const HUSK_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::HuskSpawnEgg;
    pub const IRON_GOLEM_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::IronGolemSpawnEgg;
    pub const LLAMA_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::LlamaSpawnEgg;
    pub const MAGMA_CUBE_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::MagmaCubeSpawnEgg;
    pub const MOOSHROOM_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::MooshroomSpawnEgg;
    pub const MULE_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::MuleSpawnEgg;
    pub const OCELOT_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::OcelotSpawnEgg;
    pub const PANDA_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::PandaSpawnEgg;
    pub const PARROT_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::ParrotSpawnEgg;
    pub const PHANTOM_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::PhantomSpawnEgg;
    pub const PIG_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::PigSpawnEgg;
    pub const PIGLIN_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::PiglinSpawnEgg;
    pub const PIGLIN_BRUTE_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::PiglinBruteSpawnEgg;
    pub const PILLAGER_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::PillagerSpawnEgg;
    pub const POLAR_BEAR_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::PolarBearSpawnEgg;
    pub const PUFFERFISH_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::PufferfishSpawnEgg;
    pub const RABBIT_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::RabbitSpawnEgg;
    pub const RAVAGER_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::RavagerSpawnEgg;
    pub const SALMON_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::SalmonSpawnEgg;
    pub const SHEEP_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::SheepSpawnEgg;
    pub const SHULKER_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::ShulkerSpawnEgg;
    pub const SILVERFISH_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::SilverfishSpawnEgg;
    pub const SKELETON_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::SkeletonSpawnEgg;
    pub const SKELETON_HORSE_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::SkeletonHorseSpawnEgg;
    pub const SLIME_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::SlimeSpawnEgg;
    pub const SNIFFER_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::SnifferSpawnEgg;
    pub const SNOW_GOLEM_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::SnowGolemSpawnEgg;
    pub const SPIDER_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::SpiderSpawnEgg;
    pub const SQUID_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::SquidSpawnEgg;
    pub const STRAY_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::StraySpawnEgg;
    pub const STRIDER_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::StriderSpawnEgg;
    pub const TADPOLE_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::TadpoleSpawnEgg;
    pub const TRADER_LLAMA_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::TraderLlamaSpawnEgg;
    pub const TROPICAL_FISH_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::TropicalFishSpawnEgg;
    pub const TURTLE_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::TurtleSpawnEgg;
    pub const VEX_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::VexSpawnEgg;
    pub const VILLAGER_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::VillagerSpawnEgg;
    pub const VINDICATOR_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::VindicatorSpawnEgg;
    pub const WANDERING_TRADER_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::WanderingTraderSpawnEgg;
    pub const WARDEN_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::WardenSpawnEgg;
    pub const WITCH_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::WitchSpawnEgg;
    pub const WITHER_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::WitherSpawnEgg;
    pub const WITHER_SKELETON_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::WitherSkeletonSpawnEgg;
    pub const WOLF_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::WolfSpawnEgg;
    pub const ZOGLIN_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::ZoglinSpawnEgg;
    pub const ZOMBIE_SPAWN_EGG: MaterialMaterialEnum = MaterialMaterialEnum::ZombieSpawnEgg;
    pub const ZOMBIE_HORSE_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::ZombieHorseSpawnEgg;
    pub const ZOMBIE_VILLAGER_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::ZombieVillagerSpawnEgg;
    pub const ZOMBIFIED_PIGLIN_SPAWN_EGG: MaterialMaterialEnum =
        MaterialMaterialEnum::ZombifiedPiglinSpawnEgg;
    pub const EXPERIENCE_BOTTLE: MaterialMaterialEnum = MaterialMaterialEnum::ExperienceBottle;
    pub const FIRE_CHARGE: MaterialMaterialEnum = MaterialMaterialEnum::FireCharge;
    pub const WRITABLE_BOOK: MaterialMaterialEnum = MaterialMaterialEnum::WritableBook;
    pub const WRITTEN_BOOK: MaterialMaterialEnum = MaterialMaterialEnum::WrittenBook;
    pub const ITEM_FRAME: MaterialMaterialEnum = MaterialMaterialEnum::ItemFrame;
    pub const GLOW_ITEM_FRAME: MaterialMaterialEnum = MaterialMaterialEnum::GlowItemFrame;
    pub const FLOWER_POT: MaterialMaterialEnum = MaterialMaterialEnum::FlowerPot;
    pub const CARROT: MaterialMaterialEnum = MaterialMaterialEnum::Carrot;
    pub const POTATO: MaterialMaterialEnum = MaterialMaterialEnum::Potato;
    pub const BAKED_POTATO: MaterialMaterialEnum = MaterialMaterialEnum::BakedPotato;
    pub const POISONOUS_POTATO: MaterialMaterialEnum = MaterialMaterialEnum::PoisonousPotato;
    pub const MAP: MaterialMaterialEnum = MaterialMaterialEnum::Map;
    pub const GOLDEN_CARROT: MaterialMaterialEnum = MaterialMaterialEnum::GoldenCarrot;
    pub const SKELETON_SKULL: MaterialMaterialEnum = MaterialMaterialEnum::SkeletonSkull;
    pub const WITHER_SKELETON_SKULL: MaterialMaterialEnum =
        MaterialMaterialEnum::WitherSkeletonSkull;
    pub const PLAYER_HEAD: MaterialMaterialEnum = MaterialMaterialEnum::PlayerHead;
    pub const ZOMBIE_HEAD: MaterialMaterialEnum = MaterialMaterialEnum::ZombieHead;
    pub const CREEPER_HEAD: MaterialMaterialEnum = MaterialMaterialEnum::CreeperHead;
    pub const DRAGON_HEAD: MaterialMaterialEnum = MaterialMaterialEnum::DragonHead;
    pub const PIGLIN_HEAD: MaterialMaterialEnum = MaterialMaterialEnum::PiglinHead;
    pub const NETHER_STAR: MaterialMaterialEnum = MaterialMaterialEnum::NetherStar;
    pub const PUMPKIN_PIE: MaterialMaterialEnum = MaterialMaterialEnum::PumpkinPie;
    pub const FIREWORK_ROCKET: MaterialMaterialEnum = MaterialMaterialEnum::FireworkRocket;
    pub const FIREWORK_STAR: MaterialMaterialEnum = MaterialMaterialEnum::FireworkStar;
    pub const ENCHANTED_BOOK: MaterialMaterialEnum = MaterialMaterialEnum::EnchantedBook;
    pub const NETHER_BRICK: MaterialMaterialEnum = MaterialMaterialEnum::NetherBrick;
    pub const PRISMARINE_SHARD: MaterialMaterialEnum = MaterialMaterialEnum::PrismarineShard;
    pub const PRISMARINE_CRYSTALS: MaterialMaterialEnum = MaterialMaterialEnum::PrismarineCrystals;
    pub const RABBIT: MaterialMaterialEnum = MaterialMaterialEnum::Rabbit;
    pub const COOKED_RABBIT: MaterialMaterialEnum = MaterialMaterialEnum::CookedRabbit;
    pub const RABBIT_STEW: MaterialMaterialEnum = MaterialMaterialEnum::RabbitStew;
    pub const RABBIT_FOOT: MaterialMaterialEnum = MaterialMaterialEnum::RabbitFoot;
    pub const RABBIT_HIDE: MaterialMaterialEnum = MaterialMaterialEnum::RabbitHide;
    pub const ARMOR_STAND: MaterialMaterialEnum = MaterialMaterialEnum::ArmorStand;
    pub const IRON_HORSE_ARMOR: MaterialMaterialEnum = MaterialMaterialEnum::IronHorseArmor;
    pub const GOLDEN_HORSE_ARMOR: MaterialMaterialEnum = MaterialMaterialEnum::GoldenHorseArmor;
    pub const DIAMOND_HORSE_ARMOR: MaterialMaterialEnum = MaterialMaterialEnum::DiamondHorseArmor;
    pub const LEATHER_HORSE_ARMOR: MaterialMaterialEnum = MaterialMaterialEnum::LeatherHorseArmor;
    pub const LEAD: MaterialMaterialEnum = MaterialMaterialEnum::Lead;
    pub const NAME_TAG: MaterialMaterialEnum = MaterialMaterialEnum::NameTag;
    pub const COMMAND_BLOCK_MINECART: MaterialMaterialEnum =
        MaterialMaterialEnum::CommandBlockMinecart;
    pub const MUTTON: MaterialMaterialEnum = MaterialMaterialEnum::Mutton;
    pub const COOKED_MUTTON: MaterialMaterialEnum = MaterialMaterialEnum::CookedMutton;
    pub const WHITE_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::WhiteBanner;
    pub const ORANGE_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::OrangeBanner;
    pub const MAGENTA_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::MagentaBanner;
    pub const LIGHT_BLUE_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::LightBlueBanner;
    pub const YELLOW_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::YellowBanner;
    pub const LIME_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::LimeBanner;
    pub const PINK_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::PinkBanner;
    pub const GRAY_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::GrayBanner;
    pub const LIGHT_GRAY_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::LightGrayBanner;
    pub const CYAN_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::CyanBanner;
    pub const PURPLE_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::PurpleBanner;
    pub const BLUE_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::BlueBanner;
    pub const BROWN_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::BrownBanner;
    pub const GREEN_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::GreenBanner;
    pub const RED_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::RedBanner;
    pub const BLACK_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::BlackBanner;
    pub const END_CRYSTAL: MaterialMaterialEnum = MaterialMaterialEnum::EndCrystal;
    pub const CHORUS_FRUIT: MaterialMaterialEnum = MaterialMaterialEnum::ChorusFruit;
    pub const POPPED_CHORUS_FRUIT: MaterialMaterialEnum = MaterialMaterialEnum::PoppedChorusFruit;
    pub const TORCHFLOWER_SEEDS: MaterialMaterialEnum = MaterialMaterialEnum::TorchflowerSeeds;
    pub const PITCHER_POD: MaterialMaterialEnum = MaterialMaterialEnum::PitcherPod;
    pub const BEETROOT: MaterialMaterialEnum = MaterialMaterialEnum::Beetroot;
    pub const BEETROOT_SEEDS: MaterialMaterialEnum = MaterialMaterialEnum::BeetrootSeeds;
    pub const BEETROOT_SOUP: MaterialMaterialEnum = MaterialMaterialEnum::BeetrootSoup;
    pub const DRAGON_BREATH: MaterialMaterialEnum = MaterialMaterialEnum::DragonBreath;
    pub const SPLASH_POTION: MaterialMaterialEnum = MaterialMaterialEnum::SplashPotion;
    pub const SPECTRAL_ARROW: MaterialMaterialEnum = MaterialMaterialEnum::SpectralArrow;
    pub const TIPPED_ARROW: MaterialMaterialEnum = MaterialMaterialEnum::TippedArrow;
    pub const LINGERING_POTION: MaterialMaterialEnum = MaterialMaterialEnum::LingeringPotion;
    pub const SHIELD: MaterialMaterialEnum = MaterialMaterialEnum::Shield;
    pub const TOTEM_OF_UNDYING: MaterialMaterialEnum = MaterialMaterialEnum::TotemOfUndying;
    pub const SHULKER_SHELL: MaterialMaterialEnum = MaterialMaterialEnum::ShulkerShell;
    pub const IRON_NUGGET: MaterialMaterialEnum = MaterialMaterialEnum::IronNugget;
    pub const KNOWLEDGE_BOOK: MaterialMaterialEnum = MaterialMaterialEnum::KnowledgeBook;
    pub const DEBUG_STICK: MaterialMaterialEnum = MaterialMaterialEnum::DebugStick;
    pub const MUSIC_DISC_13: MaterialMaterialEnum = MaterialMaterialEnum::MusicDisc13;
    pub const MUSIC_DISC_CAT: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscCat;
    pub const MUSIC_DISC_BLOCKS: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscBlocks;
    pub const MUSIC_DISC_CHIRP: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscChirp;
    pub const MUSIC_DISC_FAR: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscFar;
    pub const MUSIC_DISC_MALL: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscMall;
    pub const MUSIC_DISC_MELLOHI: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscMellohi;
    pub const MUSIC_DISC_STAL: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscStal;
    pub const MUSIC_DISC_STRAD: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscStrad;
    pub const MUSIC_DISC_WARD: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscWard;
    pub const MUSIC_DISC_11: MaterialMaterialEnum = MaterialMaterialEnum::MusicDisc11;
    pub const MUSIC_DISC_WAIT: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscWait;
    pub const MUSIC_DISC_OTHERSIDE: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscOtherside;
    pub const MUSIC_DISC_RELIC: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscRelic;
    pub const MUSIC_DISC_5: MaterialMaterialEnum = MaterialMaterialEnum::MusicDisc5;
    pub const MUSIC_DISC_PIGSTEP: MaterialMaterialEnum = MaterialMaterialEnum::MusicDiscPigstep;
    pub const DISC_FRAGMENT_5: MaterialMaterialEnum = MaterialMaterialEnum::DiscFragment5;
    pub const TRIDENT: MaterialMaterialEnum = MaterialMaterialEnum::Trident;
    pub const PHANTOM_MEMBRANE: MaterialMaterialEnum = MaterialMaterialEnum::PhantomMembrane;
    pub const NAUTILUS_SHELL: MaterialMaterialEnum = MaterialMaterialEnum::NautilusShell;
    pub const HEART_OF_THE_SEA: MaterialMaterialEnum = MaterialMaterialEnum::HeartOfTheSea;
    pub const CROSSBOW: MaterialMaterialEnum = MaterialMaterialEnum::Crossbow;
    pub const SUSPICIOUS_STEW: MaterialMaterialEnum = MaterialMaterialEnum::SuspiciousStew;
    pub const LOOM: MaterialMaterialEnum = MaterialMaterialEnum::Loom;
    pub const FLOWER_BANNER_PATTERN: MaterialMaterialEnum =
        MaterialMaterialEnum::FlowerBannerPattern;
    pub const CREEPER_BANNER_PATTERN: MaterialMaterialEnum =
        MaterialMaterialEnum::CreeperBannerPattern;
    pub const SKULL_BANNER_PATTERN: MaterialMaterialEnum = MaterialMaterialEnum::SkullBannerPattern;
    pub const MOJANG_BANNER_PATTERN: MaterialMaterialEnum =
        MaterialMaterialEnum::MojangBannerPattern;
    pub const GLOBE_BANNER_PATTERN: MaterialMaterialEnum = MaterialMaterialEnum::GlobeBannerPattern;
    pub const PIGLIN_BANNER_PATTERN: MaterialMaterialEnum =
        MaterialMaterialEnum::PiglinBannerPattern;
    pub const GOAT_HORN: MaterialMaterialEnum = MaterialMaterialEnum::GoatHorn;
    pub const COMPOSTER: MaterialMaterialEnum = MaterialMaterialEnum::Composter;
    pub const BARREL: MaterialMaterialEnum = MaterialMaterialEnum::Barrel;
    pub const SMOKER: MaterialMaterialEnum = MaterialMaterialEnum::Smoker;
    pub const BLAST_FURNACE: MaterialMaterialEnum = MaterialMaterialEnum::BlastFurnace;
    pub const CARTOGRAPHY_TABLE: MaterialMaterialEnum = MaterialMaterialEnum::CartographyTable;
    pub const FLETCHING_TABLE: MaterialMaterialEnum = MaterialMaterialEnum::FletchingTable;
    pub const GRINDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::Grindstone;
    pub const SMITHING_TABLE: MaterialMaterialEnum = MaterialMaterialEnum::SmithingTable;
    pub const STONECUTTER: MaterialMaterialEnum = MaterialMaterialEnum::Stonecutter;
    pub const BELL: MaterialMaterialEnum = MaterialMaterialEnum::Bell;
    pub const LANTERN: MaterialMaterialEnum = MaterialMaterialEnum::Lantern;
    pub const SOUL_LANTERN: MaterialMaterialEnum = MaterialMaterialEnum::SoulLantern;
    pub const SWEET_BERRIES: MaterialMaterialEnum = MaterialMaterialEnum::SweetBerries;
    pub const GLOW_BERRIES: MaterialMaterialEnum = MaterialMaterialEnum::GlowBerries;
    pub const CAMPFIRE: MaterialMaterialEnum = MaterialMaterialEnum::Campfire;
    pub const SOUL_CAMPFIRE: MaterialMaterialEnum = MaterialMaterialEnum::SoulCampfire;
    pub const SHROOMLIGHT: MaterialMaterialEnum = MaterialMaterialEnum::Shroomlight;
    pub const HONEYCOMB: MaterialMaterialEnum = MaterialMaterialEnum::Honeycomb;
    pub const BEE_NEST: MaterialMaterialEnum = MaterialMaterialEnum::BeeNest;
    pub const BEEHIVE: MaterialMaterialEnum = MaterialMaterialEnum::Beehive;
    pub const HONEY_BOTTLE: MaterialMaterialEnum = MaterialMaterialEnum::HoneyBottle;
    pub const HONEYCOMB_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::HoneycombBlock;
    pub const LODESTONE: MaterialMaterialEnum = MaterialMaterialEnum::Lodestone;
    pub const CRYING_OBSIDIAN: MaterialMaterialEnum = MaterialMaterialEnum::CryingObsidian;
    pub const BLACKSTONE: MaterialMaterialEnum = MaterialMaterialEnum::Blackstone;
    pub const BLACKSTONE_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::BlackstoneSlab;
    pub const BLACKSTONE_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::BlackstoneStairs;
    pub const GILDED_BLACKSTONE: MaterialMaterialEnum = MaterialMaterialEnum::GildedBlackstone;
    pub const POLISHED_BLACKSTONE: MaterialMaterialEnum = MaterialMaterialEnum::PolishedBlackstone;
    pub const POLISHED_BLACKSTONE_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedBlackstoneSlab;
    pub const POLISHED_BLACKSTONE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedBlackstoneStairs;
    pub const CHISELED_POLISHED_BLACKSTONE: MaterialMaterialEnum =
        MaterialMaterialEnum::ChiseledPolishedBlackstone;
    pub const POLISHED_BLACKSTONE_BRICKS: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedBlackstoneBricks;
    pub const POLISHED_BLACKSTONE_BRICK_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedBlackstoneBrickSlab;
    pub const POLISHED_BLACKSTONE_BRICK_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::PolishedBlackstoneBrickStairs;
    pub const CRACKED_POLISHED_BLACKSTONE_BRICKS: MaterialMaterialEnum =
        MaterialMaterialEnum::CrackedPolishedBlackstoneBricks;
    pub const RESPAWN_ANCHOR: MaterialMaterialEnum = MaterialMaterialEnum::RespawnAnchor;
    pub const CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::Candle;
    pub const WHITE_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::WhiteCandle;
    pub const ORANGE_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::OrangeCandle;
    pub const MAGENTA_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::MagentaCandle;
    pub const LIGHT_BLUE_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::LightBlueCandle;
    pub const YELLOW_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::YellowCandle;
    pub const LIME_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::LimeCandle;
    pub const PINK_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::PinkCandle;
    pub const GRAY_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::GrayCandle;
    pub const LIGHT_GRAY_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::LightGrayCandle;
    pub const CYAN_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::CyanCandle;
    pub const PURPLE_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::PurpleCandle;
    pub const BLUE_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::BlueCandle;
    pub const BROWN_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::BrownCandle;
    pub const GREEN_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::GreenCandle;
    pub const RED_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::RedCandle;
    pub const BLACK_CANDLE: MaterialMaterialEnum = MaterialMaterialEnum::BlackCandle;
    pub const SMALL_AMETHYST_BUD: MaterialMaterialEnum = MaterialMaterialEnum::SmallAmethystBud;
    pub const MEDIUM_AMETHYST_BUD: MaterialMaterialEnum = MaterialMaterialEnum::MediumAmethystBud;
    pub const LARGE_AMETHYST_BUD: MaterialMaterialEnum = MaterialMaterialEnum::LargeAmethystBud;
    pub const AMETHYST_CLUSTER: MaterialMaterialEnum = MaterialMaterialEnum::AmethystCluster;
    pub const POINTED_DRIPSTONE: MaterialMaterialEnum = MaterialMaterialEnum::PointedDripstone;
    pub const OCHRE_FROGLIGHT: MaterialMaterialEnum = MaterialMaterialEnum::OchreFroglight;
    pub const VERDANT_FROGLIGHT: MaterialMaterialEnum = MaterialMaterialEnum::VerdantFroglight;
    pub const PEARLESCENT_FROGLIGHT: MaterialMaterialEnum =
        MaterialMaterialEnum::PearlescentFroglight;
    pub const FROGSPAWN: MaterialMaterialEnum = MaterialMaterialEnum::Frogspawn;
    pub const ECHO_SHARD: MaterialMaterialEnum = MaterialMaterialEnum::EchoShard;
    pub const BRUSH: MaterialMaterialEnum = MaterialMaterialEnum::Brush;
    pub const NETHERITE_UPGRADE_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::NetheriteUpgradeSmithingTemplate;
    pub const SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::SentryArmorTrimSmithingTemplate;
    pub const DUNE_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::DuneArmorTrimSmithingTemplate;
    pub const COAST_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::CoastArmorTrimSmithingTemplate;
    pub const WILD_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::WildArmorTrimSmithingTemplate;
    pub const WARD_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::WardArmorTrimSmithingTemplate;
    pub const EYE_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::EyeArmorTrimSmithingTemplate;
    pub const VEX_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::VexArmorTrimSmithingTemplate;
    pub const TIDE_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::TideArmorTrimSmithingTemplate;
    pub const SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::SnoutArmorTrimSmithingTemplate;
    pub const RIB_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::RibArmorTrimSmithingTemplate;
    pub const SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::SpireArmorTrimSmithingTemplate;
    pub const WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::WayfinderArmorTrimSmithingTemplate;
    pub const SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::ShaperArmorTrimSmithingTemplate;
    pub const SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::SilenceArmorTrimSmithingTemplate;
    pub const RAISER_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::RaiserArmorTrimSmithingTemplate;
    pub const HOST_ARMOR_TRIM_SMITHING_TEMPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::HostArmorTrimSmithingTemplate;
    pub const ANGLER_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::AnglerPotterySherd;
    pub const ARCHER_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::ArcherPotterySherd;
    pub const ARMS_UP_POTTERY_SHERD: MaterialMaterialEnum =
        MaterialMaterialEnum::ArmsUpPotterySherd;
    pub const BLADE_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::BladePotterySherd;
    pub const BREWER_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::BrewerPotterySherd;
    pub const BURN_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::BurnPotterySherd;
    pub const DANGER_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::DangerPotterySherd;
    pub const EXPLORER_POTTERY_SHERD: MaterialMaterialEnum =
        MaterialMaterialEnum::ExplorerPotterySherd;
    pub const FRIEND_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::FriendPotterySherd;
    pub const HEART_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::HeartPotterySherd;
    pub const HEARTBREAK_POTTERY_SHERD: MaterialMaterialEnum =
        MaterialMaterialEnum::HeartbreakPotterySherd;
    pub const HOWL_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::HowlPotterySherd;
    pub const MINER_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::MinerPotterySherd;
    pub const MOURNER_POTTERY_SHERD: MaterialMaterialEnum =
        MaterialMaterialEnum::MournerPotterySherd;
    pub const PLENTY_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::PlentyPotterySherd;
    pub const PRIZE_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::PrizePotterySherd;
    pub const SHEAF_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::SheafPotterySherd;
    pub const SHELTER_POTTERY_SHERD: MaterialMaterialEnum =
        MaterialMaterialEnum::ShelterPotterySherd;
    pub const SKULL_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::SkullPotterySherd;
    pub const SNORT_POTTERY_SHERD: MaterialMaterialEnum = MaterialMaterialEnum::SnortPotterySherd;
    pub const WATER: MaterialMaterialEnum = MaterialMaterialEnum::Water;
    pub const LAVA: MaterialMaterialEnum = MaterialMaterialEnum::Lava;
    pub const TALL_SEAGRASS: MaterialMaterialEnum = MaterialMaterialEnum::TallSeagrass;
    pub const PISTON_HEAD: MaterialMaterialEnum = MaterialMaterialEnum::PistonHead;
    pub const MOVING_PISTON: MaterialMaterialEnum = MaterialMaterialEnum::MovingPiston;
    pub const WALL_TORCH: MaterialMaterialEnum = MaterialMaterialEnum::WallTorch;
    pub const FIRE: MaterialMaterialEnum = MaterialMaterialEnum::Fire;
    pub const SOUL_FIRE: MaterialMaterialEnum = MaterialMaterialEnum::SoulFire;
    pub const REDSTONE_WIRE: MaterialMaterialEnum = MaterialMaterialEnum::RedstoneWire;
    pub const OAK_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::OakWallSign;
    pub const SPRUCE_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::SpruceWallSign;
    pub const BIRCH_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::BirchWallSign;
    pub const ACACIA_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::AcaciaWallSign;
    pub const CHERRY_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::CherryWallSign;
    pub const JUNGLE_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::JungleWallSign;
    pub const DARK_OAK_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::DarkOakWallSign;
    pub const MANGROVE_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::MangroveWallSign;
    pub const BAMBOO_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::BambooWallSign;
    pub const OAK_WALL_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::OakWallHangingSign;
    pub const SPRUCE_WALL_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::SpruceWallHangingSign;
    pub const BIRCH_WALL_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::BirchWallHangingSign;
    pub const ACACIA_WALL_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::AcaciaWallHangingSign;
    pub const CHERRY_WALL_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::CherryWallHangingSign;
    pub const JUNGLE_WALL_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::JungleWallHangingSign;
    pub const DARK_OAK_WALL_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::DarkOakWallHangingSign;
    pub const MANGROVE_WALL_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::MangroveWallHangingSign;
    pub const CRIMSON_WALL_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::CrimsonWallHangingSign;
    pub const WARPED_WALL_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::WarpedWallHangingSign;
    pub const BAMBOO_WALL_HANGING_SIGN: MaterialMaterialEnum =
        MaterialMaterialEnum::BambooWallHangingSign;
    pub const REDSTONE_WALL_TORCH: MaterialMaterialEnum = MaterialMaterialEnum::RedstoneWallTorch;
    pub const SOUL_WALL_TORCH: MaterialMaterialEnum = MaterialMaterialEnum::SoulWallTorch;
    pub const NETHER_PORTAL: MaterialMaterialEnum = MaterialMaterialEnum::NetherPortal;
    pub const ATTACHED_PUMPKIN_STEM: MaterialMaterialEnum =
        MaterialMaterialEnum::AttachedPumpkinStem;
    pub const ATTACHED_MELON_STEM: MaterialMaterialEnum = MaterialMaterialEnum::AttachedMelonStem;
    pub const PUMPKIN_STEM: MaterialMaterialEnum = MaterialMaterialEnum::PumpkinStem;
    pub const MELON_STEM: MaterialMaterialEnum = MaterialMaterialEnum::MelonStem;
    pub const WATER_CAULDRON: MaterialMaterialEnum = MaterialMaterialEnum::WaterCauldron;
    pub const LAVA_CAULDRON: MaterialMaterialEnum = MaterialMaterialEnum::LavaCauldron;
    pub const POWDER_SNOW_CAULDRON: MaterialMaterialEnum = MaterialMaterialEnum::PowderSnowCauldron;
    pub const END_PORTAL: MaterialMaterialEnum = MaterialMaterialEnum::EndPortal;
    pub const COCOA: MaterialMaterialEnum = MaterialMaterialEnum::Cocoa;
    pub const TRIPWIRE: MaterialMaterialEnum = MaterialMaterialEnum::Tripwire;
    pub const POTTED_TORCHFLOWER: MaterialMaterialEnum = MaterialMaterialEnum::PottedTorchflower;
    pub const POTTED_OAK_SAPLING: MaterialMaterialEnum = MaterialMaterialEnum::PottedOakSapling;
    pub const POTTED_SPRUCE_SAPLING: MaterialMaterialEnum =
        MaterialMaterialEnum::PottedSpruceSapling;
    pub const POTTED_BIRCH_SAPLING: MaterialMaterialEnum = MaterialMaterialEnum::PottedBirchSapling;
    pub const POTTED_JUNGLE_SAPLING: MaterialMaterialEnum =
        MaterialMaterialEnum::PottedJungleSapling;
    pub const POTTED_ACACIA_SAPLING: MaterialMaterialEnum =
        MaterialMaterialEnum::PottedAcaciaSapling;
    pub const POTTED_CHERRY_SAPLING: MaterialMaterialEnum =
        MaterialMaterialEnum::PottedCherrySapling;
    pub const POTTED_DARK_OAK_SAPLING: MaterialMaterialEnum =
        MaterialMaterialEnum::PottedDarkOakSapling;
    pub const POTTED_MANGROVE_PROPAGULE: MaterialMaterialEnum =
        MaterialMaterialEnum::PottedMangrovePropagule;
    pub const POTTED_FERN: MaterialMaterialEnum = MaterialMaterialEnum::PottedFern;
    pub const POTTED_DANDELION: MaterialMaterialEnum = MaterialMaterialEnum::PottedDandelion;
    pub const POTTED_POPPY: MaterialMaterialEnum = MaterialMaterialEnum::PottedPoppy;
    pub const POTTED_BLUE_ORCHID: MaterialMaterialEnum = MaterialMaterialEnum::PottedBlueOrchid;
    pub const POTTED_ALLIUM: MaterialMaterialEnum = MaterialMaterialEnum::PottedAllium;
    pub const POTTED_AZURE_BLUET: MaterialMaterialEnum = MaterialMaterialEnum::PottedAzureBluet;
    pub const POTTED_RED_TULIP: MaterialMaterialEnum = MaterialMaterialEnum::PottedRedTulip;
    pub const POTTED_ORANGE_TULIP: MaterialMaterialEnum = MaterialMaterialEnum::PottedOrangeTulip;
    pub const POTTED_WHITE_TULIP: MaterialMaterialEnum = MaterialMaterialEnum::PottedWhiteTulip;
    pub const POTTED_PINK_TULIP: MaterialMaterialEnum = MaterialMaterialEnum::PottedPinkTulip;
    pub const POTTED_OXEYE_DAISY: MaterialMaterialEnum = MaterialMaterialEnum::PottedOxeyeDaisy;
    pub const POTTED_CORNFLOWER: MaterialMaterialEnum = MaterialMaterialEnum::PottedCornflower;
    pub const POTTED_LILY_OF_THE_VALLEY: MaterialMaterialEnum =
        MaterialMaterialEnum::PottedLilyOfTheValley;
    pub const POTTED_WITHER_ROSE: MaterialMaterialEnum = MaterialMaterialEnum::PottedWitherRose;
    pub const POTTED_RED_MUSHROOM: MaterialMaterialEnum = MaterialMaterialEnum::PottedRedMushroom;
    pub const POTTED_BROWN_MUSHROOM: MaterialMaterialEnum =
        MaterialMaterialEnum::PottedBrownMushroom;
    pub const POTTED_DEAD_BUSH: MaterialMaterialEnum = MaterialMaterialEnum::PottedDeadBush;
    pub const POTTED_CACTUS: MaterialMaterialEnum = MaterialMaterialEnum::PottedCactus;
    pub const CARROTS: MaterialMaterialEnum = MaterialMaterialEnum::Carrots;
    pub const POTATOES: MaterialMaterialEnum = MaterialMaterialEnum::Potatoes;
    pub const SKELETON_WALL_SKULL: MaterialMaterialEnum = MaterialMaterialEnum::SkeletonWallSkull;
    pub const WITHER_SKELETON_WALL_SKULL: MaterialMaterialEnum =
        MaterialMaterialEnum::WitherSkeletonWallSkull;
    pub const ZOMBIE_WALL_HEAD: MaterialMaterialEnum = MaterialMaterialEnum::ZombieWallHead;
    pub const PLAYER_WALL_HEAD: MaterialMaterialEnum = MaterialMaterialEnum::PlayerWallHead;
    pub const CREEPER_WALL_HEAD: MaterialMaterialEnum = MaterialMaterialEnum::CreeperWallHead;
    pub const DRAGON_WALL_HEAD: MaterialMaterialEnum = MaterialMaterialEnum::DragonWallHead;
    pub const PIGLIN_WALL_HEAD: MaterialMaterialEnum = MaterialMaterialEnum::PiglinWallHead;
    pub const WHITE_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::WhiteWallBanner;
    pub const ORANGE_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::OrangeWallBanner;
    pub const MAGENTA_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::MagentaWallBanner;
    pub const LIGHT_BLUE_WALL_BANNER: MaterialMaterialEnum =
        MaterialMaterialEnum::LightBlueWallBanner;
    pub const YELLOW_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::YellowWallBanner;
    pub const LIME_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::LimeWallBanner;
    pub const PINK_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::PinkWallBanner;
    pub const GRAY_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::GrayWallBanner;
    pub const LIGHT_GRAY_WALL_BANNER: MaterialMaterialEnum =
        MaterialMaterialEnum::LightGrayWallBanner;
    pub const CYAN_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::CyanWallBanner;
    pub const PURPLE_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::PurpleWallBanner;
    pub const BLUE_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::BlueWallBanner;
    pub const BROWN_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::BrownWallBanner;
    pub const GREEN_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::GreenWallBanner;
    pub const RED_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::RedWallBanner;
    pub const BLACK_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::BlackWallBanner;
    pub const TORCHFLOWER_CROP: MaterialMaterialEnum = MaterialMaterialEnum::TorchflowerCrop;
    pub const PITCHER_CROP: MaterialMaterialEnum = MaterialMaterialEnum::PitcherCrop;
    pub const BEETROOTS: MaterialMaterialEnum = MaterialMaterialEnum::Beetroots;
    pub const END_GATEWAY: MaterialMaterialEnum = MaterialMaterialEnum::EndGateway;
    pub const FROSTED_ICE: MaterialMaterialEnum = MaterialMaterialEnum::FrostedIce;
    pub const KELP_PLANT: MaterialMaterialEnum = MaterialMaterialEnum::KelpPlant;
    pub const DEAD_TUBE_CORAL_WALL_FAN: MaterialMaterialEnum =
        MaterialMaterialEnum::DeadTubeCoralWallFan;
    pub const DEAD_BRAIN_CORAL_WALL_FAN: MaterialMaterialEnum =
        MaterialMaterialEnum::DeadBrainCoralWallFan;
    pub const DEAD_BUBBLE_CORAL_WALL_FAN: MaterialMaterialEnum =
        MaterialMaterialEnum::DeadBubbleCoralWallFan;
    pub const DEAD_FIRE_CORAL_WALL_FAN: MaterialMaterialEnum =
        MaterialMaterialEnum::DeadFireCoralWallFan;
    pub const DEAD_HORN_CORAL_WALL_FAN: MaterialMaterialEnum =
        MaterialMaterialEnum::DeadHornCoralWallFan;
    pub const TUBE_CORAL_WALL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::TubeCoralWallFan;
    pub const BRAIN_CORAL_WALL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::BrainCoralWallFan;
    pub const BUBBLE_CORAL_WALL_FAN: MaterialMaterialEnum =
        MaterialMaterialEnum::BubbleCoralWallFan;
    pub const FIRE_CORAL_WALL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::FireCoralWallFan;
    pub const HORN_CORAL_WALL_FAN: MaterialMaterialEnum = MaterialMaterialEnum::HornCoralWallFan;
    pub const BAMBOO_SAPLING: MaterialMaterialEnum = MaterialMaterialEnum::BambooSapling;
    pub const POTTED_BAMBOO: MaterialMaterialEnum = MaterialMaterialEnum::PottedBamboo;
    pub const VOID_AIR: MaterialMaterialEnum = MaterialMaterialEnum::VoidAir;
    pub const CAVE_AIR: MaterialMaterialEnum = MaterialMaterialEnum::CaveAir;
    pub const BUBBLE_COLUMN: MaterialMaterialEnum = MaterialMaterialEnum::BubbleColumn;
    pub const SWEET_BERRY_BUSH: MaterialMaterialEnum = MaterialMaterialEnum::SweetBerryBush;
    pub const WEEPING_VINES_PLANT: MaterialMaterialEnum = MaterialMaterialEnum::WeepingVinesPlant;
    pub const TWISTING_VINES_PLANT: MaterialMaterialEnum = MaterialMaterialEnum::TwistingVinesPlant;
    pub const CRIMSON_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::CrimsonWallSign;
    pub const WARPED_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::WarpedWallSign;
    pub const POTTED_CRIMSON_FUNGUS: MaterialMaterialEnum =
        MaterialMaterialEnum::PottedCrimsonFungus;
    pub const POTTED_WARPED_FUNGUS: MaterialMaterialEnum = MaterialMaterialEnum::PottedWarpedFungus;
    pub const POTTED_CRIMSON_ROOTS: MaterialMaterialEnum = MaterialMaterialEnum::PottedCrimsonRoots;
    pub const POTTED_WARPED_ROOTS: MaterialMaterialEnum = MaterialMaterialEnum::PottedWarpedRoots;
    pub const CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::CandleCake;
    pub const WHITE_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::WhiteCandleCake;
    pub const ORANGE_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::OrangeCandleCake;
    pub const MAGENTA_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::MagentaCandleCake;
    pub const LIGHT_BLUE_CANDLE_CAKE: MaterialMaterialEnum =
        MaterialMaterialEnum::LightBlueCandleCake;
    pub const YELLOW_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::YellowCandleCake;
    pub const LIME_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::LimeCandleCake;
    pub const PINK_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::PinkCandleCake;
    pub const GRAY_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::GrayCandleCake;
    pub const LIGHT_GRAY_CANDLE_CAKE: MaterialMaterialEnum =
        MaterialMaterialEnum::LightGrayCandleCake;
    pub const CYAN_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::CyanCandleCake;
    pub const PURPLE_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::PurpleCandleCake;
    pub const BLUE_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::BlueCandleCake;
    pub const BROWN_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::BrownCandleCake;
    pub const GREEN_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::GreenCandleCake;
    pub const RED_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::RedCandleCake;
    pub const BLACK_CANDLE_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::BlackCandleCake;
    pub const POWDER_SNOW: MaterialMaterialEnum = MaterialMaterialEnum::PowderSnow;
    pub const CAVE_VINES: MaterialMaterialEnum = MaterialMaterialEnum::CaveVines;
    pub const CAVE_VINES_PLANT: MaterialMaterialEnum = MaterialMaterialEnum::CaveVinesPlant;
    pub const BIG_DRIPLEAF_STEM: MaterialMaterialEnum = MaterialMaterialEnum::BigDripleafStem;
    pub const POTTED_AZALEA_BUSH: MaterialMaterialEnum = MaterialMaterialEnum::PottedAzaleaBush;
    pub const POTTED_FLOWERING_AZALEA_BUSH: MaterialMaterialEnum =
        MaterialMaterialEnum::PottedFloweringAzaleaBush;
    pub const LEGACY_AIR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyAir;
    pub const LEGACY_STONE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStone;
    pub const LEGACY_GRASS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGrass;
    pub const LEGACY_DIRT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDirt;
    pub const LEGACY_COBBLESTONE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCobblestone;
    pub const LEGACY_WOOD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWood;
    pub const LEGACY_SAPLING: MaterialMaterialEnum = MaterialMaterialEnum::LegacySapling;
    pub const LEGACY_BEDROCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBedrock;
    pub const LEGACY_WATER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWater;
    pub const LEGACY_STATIONARY_WATER: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyStationaryWater;
    pub const LEGACY_LAVA: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLava;
    pub const LEGACY_STATIONARY_LAVA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyStationaryLava;
    pub const LEGACY_SAND: MaterialMaterialEnum = MaterialMaterialEnum::LegacySand;
    pub const LEGACY_GRAVEL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGravel;
    pub const LEGACY_GOLD_ORE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldOre;
    pub const LEGACY_IRON_ORE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronOre;
    pub const LEGACY_COAL_ORE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCoalOre;
    pub const LEGACY_LOG: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLog;
    pub const LEGACY_LEAVES: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLeaves;
    pub const LEGACY_SPONGE: MaterialMaterialEnum = MaterialMaterialEnum::LegacySponge;
    pub const LEGACY_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGlass;
    pub const LEGACY_LAPIS_ORE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLapisOre;
    pub const LEGACY_LAPIS_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLapisBlock;
    pub const LEGACY_DISPENSER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDispenser;
    pub const LEGACY_SANDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::LegacySandstone;
    pub const LEGACY_NOTE_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyNoteBlock;
    pub const LEGACY_BED_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBedBlock;
    pub const LEGACY_POWERED_RAIL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPoweredRail;
    pub const LEGACY_DETECTOR_RAIL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDetectorRail;
    pub const LEGACY_PISTON_STICKY_BASE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPistonStickyBase;
    pub const LEGACY_WEB: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWeb;
    pub const LEGACY_LONG_GRASS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLongGrass;
    pub const LEGACY_DEAD_BUSH: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDeadBush;
    pub const LEGACY_PISTON_BASE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPistonBase;
    pub const LEGACY_PISTON_EXTENSION: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPistonExtension;
    pub const LEGACY_WOOL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWool;
    pub const LEGACY_PISTON_MOVING_PIECE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPistonMovingPiece;
    pub const LEGACY_YELLOW_FLOWER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyYellowFlower;
    pub const LEGACY_RED_ROSE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRedRose;
    pub const LEGACY_BROWN_MUSHROOM: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBrownMushroom;
    pub const LEGACY_RED_MUSHROOM: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRedMushroom;
    pub const LEGACY_GOLD_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldBlock;
    pub const LEGACY_IRON_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronBlock;
    pub const LEGACY_DOUBLE_STEP: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDoubleStep;
    pub const LEGACY_STEP: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStep;
    pub const LEGACY_BRICK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBrick;
    pub const LEGACY_TNT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyTnt;
    pub const LEGACY_BOOKSHELF: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBookshelf;
    pub const LEGACY_MOSSY_COBBLESTONE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyMossyCobblestone;
    pub const LEGACY_OBSIDIAN: MaterialMaterialEnum = MaterialMaterialEnum::LegacyObsidian;
    pub const LEGACY_TORCH: MaterialMaterialEnum = MaterialMaterialEnum::LegacyTorch;
    pub const LEGACY_FIRE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyFire;
    pub const LEGACY_MOB_SPAWNER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMobSpawner;
    pub const LEGACY_WOOD_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWoodStairs;
    pub const LEGACY_CHEST: MaterialMaterialEnum = MaterialMaterialEnum::LegacyChest;
    pub const LEGACY_REDSTONE_WIRE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRedstoneWire;
    pub const LEGACY_DIAMOND_ORE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDiamondOre;
    pub const LEGACY_DIAMOND_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDiamondBlock;
    pub const LEGACY_WORKBENCH: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWorkbench;
    pub const LEGACY_CROPS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCrops;
    pub const LEGACY_SOIL: MaterialMaterialEnum = MaterialMaterialEnum::LegacySoil;
    pub const LEGACY_FURNACE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyFurnace;
    pub const LEGACY_BURNING_FURNACE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBurningFurnace;
    pub const LEGACY_SIGN_POST: MaterialMaterialEnum = MaterialMaterialEnum::LegacySignPost;
    pub const LEGACY_WOODEN_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWoodenDoor;
    pub const LEGACY_LADDER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLadder;
    pub const LEGACY_RAILS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRails;
    pub const LEGACY_COBBLESTONE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyCobblestoneStairs;
    pub const LEGACY_WALL_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWallSign;
    pub const LEGACY_LEVER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLever;
    pub const LEGACY_STONE_PLATE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStonePlate;
    pub const LEGACY_IRON_DOOR_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyIronDoorBlock;
    pub const LEGACY_WOOD_PLATE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWoodPlate;
    pub const LEGACY_REDSTONE_ORE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRedstoneOre;
    pub const LEGACY_GLOWING_REDSTONE_ORE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyGlowingRedstoneOre;
    pub const LEGACY_REDSTONE_TORCH_OFF: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedstoneTorchOff;
    pub const LEGACY_REDSTONE_TORCH_ON: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedstoneTorchOn;
    pub const LEGACY_STONE_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStoneButton;
    pub const LEGACY_SNOW: MaterialMaterialEnum = MaterialMaterialEnum::LegacySnow;
    pub const LEGACY_ICE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIce;
    pub const LEGACY_SNOW_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacySnowBlock;
    pub const LEGACY_CACTUS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCactus;
    pub const LEGACY_CLAY: MaterialMaterialEnum = MaterialMaterialEnum::LegacyClay;
    pub const LEGACY_SUGAR_CANE_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacySugarCaneBlock;
    pub const LEGACY_JUKEBOX: MaterialMaterialEnum = MaterialMaterialEnum::LegacyJukebox;
    pub const LEGACY_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyFence;
    pub const LEGACY_PUMPKIN: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPumpkin;
    pub const LEGACY_NETHERRACK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyNetherrack;
    pub const LEGACY_SOUL_SAND: MaterialMaterialEnum = MaterialMaterialEnum::LegacySoulSand;
    pub const LEGACY_GLOWSTONE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGlowstone;
    pub const LEGACY_PORTAL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPortal;
    pub const LEGACY_JACK_O_LANTERN: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyJackOLantern;
    pub const LEGACY_CAKE_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCakeBlock;
    pub const LEGACY_DIODE_BLOCK_OFF: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDiodeBlockOff;
    pub const LEGACY_DIODE_BLOCK_ON: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDiodeBlockOn;
    pub const LEGACY_STAINED_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStainedGlass;
    pub const LEGACY_TRAP_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyTrapDoor;
    pub const LEGACY_MONSTER_EGGS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMonsterEggs;
    pub const LEGACY_SMOOTH_BRICK: MaterialMaterialEnum = MaterialMaterialEnum::LegacySmoothBrick;
    pub const LEGACY_HUGE_MUSHROOM_1: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyHugeMushroom1;
    pub const LEGACY_HUGE_MUSHROOM_2: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyHugeMushroom2;
    pub const LEGACY_IRON_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronFence;
    pub const LEGACY_THIN_GLASS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyThinGlass;
    pub const LEGACY_MELON_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMelonBlock;
    pub const LEGACY_PUMPKIN_STEM: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPumpkinStem;
    pub const LEGACY_MELON_STEM: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMelonStem;
    pub const LEGACY_VINE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyVine;
    pub const LEGACY_FENCE_GATE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyFenceGate;
    pub const LEGACY_BRICK_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBrickStairs;
    pub const LEGACY_SMOOTH_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::LegacySmoothStairs;
    pub const LEGACY_MYCEL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMycel;
    pub const LEGACY_WATER_LILY: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWaterLily;
    pub const LEGACY_NETHER_BRICK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyNetherBrick;
    pub const LEGACY_NETHER_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyNetherFence;
    pub const LEGACY_NETHER_BRICK_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyNetherBrickStairs;
    pub const LEGACY_NETHER_WARTS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyNetherWarts;
    pub const LEGACY_ENCHANTMENT_TABLE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyEnchantmentTable;
    pub const LEGACY_BREWING_STAND: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBrewingStand;
    pub const LEGACY_CAULDRON: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCauldron;
    pub const LEGACY_ENDER_PORTAL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEnderPortal;
    pub const LEGACY_ENDER_PORTAL_FRAME: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyEnderPortalFrame;
    pub const LEGACY_ENDER_STONE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEnderStone;
    pub const LEGACY_DRAGON_EGG: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDragonEgg;
    pub const LEGACY_REDSTONE_LAMP_OFF: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedstoneLampOff;
    pub const LEGACY_REDSTONE_LAMP_ON: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedstoneLampOn;
    pub const LEGACY_WOOD_DOUBLE_STEP: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyWoodDoubleStep;
    pub const LEGACY_WOOD_STEP: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWoodStep;
    pub const LEGACY_COCOA: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCocoa;
    pub const LEGACY_SANDSTONE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacySandstoneStairs;
    pub const LEGACY_EMERALD_ORE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEmeraldOre;
    pub const LEGACY_ENDER_CHEST: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEnderChest;
    pub const LEGACY_TRIPWIRE_HOOK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyTripwireHook;
    pub const LEGACY_TRIPWIRE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyTripwire;
    pub const LEGACY_EMERALD_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEmeraldBlock;
    pub const LEGACY_SPRUCE_WOOD_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacySpruceWoodStairs;
    pub const LEGACY_BIRCH_WOOD_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBirchWoodStairs;
    pub const LEGACY_JUNGLE_WOOD_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyJungleWoodStairs;
    pub const LEGACY_COMMAND: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCommand;
    pub const LEGACY_BEACON: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBeacon;
    pub const LEGACY_COBBLE_WALL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCobbleWall;
    pub const LEGACY_FLOWER_POT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyFlowerPot;
    pub const LEGACY_CARROT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCarrot;
    pub const LEGACY_POTATO: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPotato;
    pub const LEGACY_WOOD_BUTTON: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWoodButton;
    pub const LEGACY_SKULL: MaterialMaterialEnum = MaterialMaterialEnum::LegacySkull;
    pub const LEGACY_ANVIL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyAnvil;
    pub const LEGACY_TRAPPED_CHEST: MaterialMaterialEnum = MaterialMaterialEnum::LegacyTrappedChest;
    pub const LEGACY_GOLD_PLATE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldPlate;
    pub const LEGACY_IRON_PLATE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronPlate;
    pub const LEGACY_REDSTONE_COMPARATOR_OFF: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedstoneComparatorOff;
    pub const LEGACY_REDSTONE_COMPARATOR_ON: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedstoneComparatorOn;
    pub const LEGACY_DAYLIGHT_DETECTOR: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDaylightDetector;
    pub const LEGACY_REDSTONE_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedstoneBlock;
    pub const LEGACY_QUARTZ_ORE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyQuartzOre;
    pub const LEGACY_HOPPER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyHopper;
    pub const LEGACY_QUARTZ_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyQuartzBlock;
    pub const LEGACY_QUARTZ_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyQuartzStairs;
    pub const LEGACY_ACTIVATOR_RAIL: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyActivatorRail;
    pub const LEGACY_DROPPER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDropper;
    pub const LEGACY_STAINED_CLAY: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStainedClay;
    pub const LEGACY_STAINED_GLASS_PANE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyStainedGlassPane;
    pub const LEGACY_LEAVES_2: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLeaves2;
    pub const LEGACY_LOG_2: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLog2;
    pub const LEGACY_ACACIA_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyAcaciaStairs;
    pub const LEGACY_DARK_OAK_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDarkOakStairs;
    pub const LEGACY_SLIME_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacySlimeBlock;
    pub const LEGACY_BARRIER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBarrier;
    pub const LEGACY_IRON_TRAPDOOR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronTrapdoor;
    pub const LEGACY_PRISMARINE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPrismarine;
    pub const LEGACY_SEA_LANTERN: MaterialMaterialEnum = MaterialMaterialEnum::LegacySeaLantern;
    pub const LEGACY_HAY_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyHayBlock;
    pub const LEGACY_CARPET: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCarpet;
    pub const LEGACY_HARD_CLAY: MaterialMaterialEnum = MaterialMaterialEnum::LegacyHardClay;
    pub const LEGACY_COAL_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCoalBlock;
    pub const LEGACY_PACKED_ICE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPackedIce;
    pub const LEGACY_DOUBLE_PLANT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDoublePlant;
    pub const LEGACY_STANDING_BANNER: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyStandingBanner;
    pub const LEGACY_WALL_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWallBanner;
    pub const LEGACY_DAYLIGHT_DETECTOR_INVERTED: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDaylightDetectorInverted;
    pub const LEGACY_RED_SANDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRedSandstone;
    pub const LEGACY_RED_SANDSTONE_STAIRS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedSandstoneStairs;
    pub const LEGACY_DOUBLE_STONE_SLAB2: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDoubleStoneSlab2;
    pub const LEGACY_STONE_SLAB2: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStoneSlab2;
    pub const LEGACY_SPRUCE_FENCE_GATE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacySpruceFenceGate;
    pub const LEGACY_BIRCH_FENCE_GATE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBirchFenceGate;
    pub const LEGACY_JUNGLE_FENCE_GATE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyJungleFenceGate;
    pub const LEGACY_DARK_OAK_FENCE_GATE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDarkOakFenceGate;
    pub const LEGACY_ACACIA_FENCE_GATE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyAcaciaFenceGate;
    pub const LEGACY_SPRUCE_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::LegacySpruceFence;
    pub const LEGACY_BIRCH_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBirchFence;
    pub const LEGACY_JUNGLE_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyJungleFence;
    pub const LEGACY_DARK_OAK_FENCE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDarkOakFence;
    pub const LEGACY_ACACIA_FENCE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyAcaciaFence;
    pub const LEGACY_SPRUCE_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::LegacySpruceDoor;
    pub const LEGACY_BIRCH_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBirchDoor;
    pub const LEGACY_JUNGLE_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyJungleDoor;
    pub const LEGACY_ACACIA_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyAcaciaDoor;
    pub const LEGACY_DARK_OAK_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDarkOakDoor;
    pub const LEGACY_END_ROD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEndRod;
    pub const LEGACY_CHORUS_PLANT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyChorusPlant;
    pub const LEGACY_CHORUS_FLOWER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyChorusFlower;
    pub const LEGACY_PURPUR_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPurpurBlock;
    pub const LEGACY_PURPUR_PILLAR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPurpurPillar;
    pub const LEGACY_PURPUR_STAIRS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPurpurStairs;
    pub const LEGACY_PURPUR_DOUBLE_SLAB: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPurpurDoubleSlab;
    pub const LEGACY_PURPUR_SLAB: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPurpurSlab;
    pub const LEGACY_END_BRICKS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEndBricks;
    pub const LEGACY_BEETROOT_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBeetrootBlock;
    pub const LEGACY_GRASS_PATH: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGrassPath;
    pub const LEGACY_END_GATEWAY: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEndGateway;
    pub const LEGACY_COMMAND_REPEATING: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyCommandRepeating;
    pub const LEGACY_COMMAND_CHAIN: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCommandChain;
    pub const LEGACY_FROSTED_ICE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyFrostedIce;
    pub const LEGACY_MAGMA: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMagma;
    pub const LEGACY_NETHER_WART_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyNetherWartBlock;
    pub const LEGACY_RED_NETHER_BRICK: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedNetherBrick;
    pub const LEGACY_BONE_BLOCK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBoneBlock;
    pub const LEGACY_STRUCTURE_VOID: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyStructureVoid;
    pub const LEGACY_OBSERVER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyObserver;
    pub const LEGACY_WHITE_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyWhiteShulkerBox;
    pub const LEGACY_ORANGE_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyOrangeShulkerBox;
    pub const LEGACY_MAGENTA_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyMagentaShulkerBox;
    pub const LEGACY_LIGHT_BLUE_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyLightBlueShulkerBox;
    pub const LEGACY_YELLOW_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyYellowShulkerBox;
    pub const LEGACY_LIME_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyLimeShulkerBox;
    pub const LEGACY_PINK_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPinkShulkerBox;
    pub const LEGACY_GRAY_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyGrayShulkerBox;
    pub const LEGACY_SILVER_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacySilverShulkerBox;
    pub const LEGACY_CYAN_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyCyanShulkerBox;
    pub const LEGACY_PURPLE_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPurpleShulkerBox;
    pub const LEGACY_BLUE_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBlueShulkerBox;
    pub const LEGACY_BROWN_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBrownShulkerBox;
    pub const LEGACY_GREEN_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyGreenShulkerBox;
    pub const LEGACY_RED_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedShulkerBox;
    pub const LEGACY_BLACK_SHULKER_BOX: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBlackShulkerBox;
    pub const LEGACY_WHITE_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyWhiteGlazedTerracotta;
    pub const LEGACY_ORANGE_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyOrangeGlazedTerracotta;
    pub const LEGACY_MAGENTA_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyMagentaGlazedTerracotta;
    pub const LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyLightBlueGlazedTerracotta;
    pub const LEGACY_YELLOW_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyYellowGlazedTerracotta;
    pub const LEGACY_LIME_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyLimeGlazedTerracotta;
    pub const LEGACY_PINK_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPinkGlazedTerracotta;
    pub const LEGACY_GRAY_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyGrayGlazedTerracotta;
    pub const LEGACY_SILVER_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacySilverGlazedTerracotta;
    pub const LEGACY_CYAN_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyCyanGlazedTerracotta;
    pub const LEGACY_PURPLE_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPurpleGlazedTerracotta;
    pub const LEGACY_BLUE_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBlueGlazedTerracotta;
    pub const LEGACY_BROWN_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBrownGlazedTerracotta;
    pub const LEGACY_GREEN_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyGreenGlazedTerracotta;
    pub const LEGACY_RED_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedGlazedTerracotta;
    pub const LEGACY_BLACK_GLAZED_TERRACOTTA: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBlackGlazedTerracotta;
    pub const LEGACY_CONCRETE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyConcrete;
    pub const LEGACY_CONCRETE_POWDER: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyConcretePowder;
    pub const LEGACY_STRUCTURE_BLOCK: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyStructureBlock;
    pub const LEGACY_IRON_SPADE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronSpade;
    pub const LEGACY_IRON_PICKAXE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronPickaxe;
    pub const LEGACY_IRON_AXE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronAxe;
    pub const LEGACY_FLINT_AND_STEEL: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyFlintAndSteel;
    pub const LEGACY_APPLE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyApple;
    pub const LEGACY_BOW: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBow;
    pub const LEGACY_ARROW: MaterialMaterialEnum = MaterialMaterialEnum::LegacyArrow;
    pub const LEGACY_COAL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCoal;
    pub const LEGACY_DIAMOND: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDiamond;
    pub const LEGACY_IRON_INGOT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronIngot;
    pub const LEGACY_GOLD_INGOT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldIngot;
    pub const LEGACY_IRON_SWORD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronSword;
    pub const LEGACY_WOOD_SWORD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWoodSword;
    pub const LEGACY_WOOD_SPADE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWoodSpade;
    pub const LEGACY_WOOD_PICKAXE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWoodPickaxe;
    pub const LEGACY_WOOD_AXE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWoodAxe;
    pub const LEGACY_STONE_SWORD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStoneSword;
    pub const LEGACY_STONE_SPADE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStoneSpade;
    pub const LEGACY_STONE_PICKAXE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStonePickaxe;
    pub const LEGACY_STONE_AXE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStoneAxe;
    pub const LEGACY_DIAMOND_SWORD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDiamondSword;
    pub const LEGACY_DIAMOND_SPADE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDiamondSpade;
    pub const LEGACY_DIAMOND_PICKAXE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDiamondPickaxe;
    pub const LEGACY_DIAMOND_AXE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDiamondAxe;
    pub const LEGACY_STICK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStick;
    pub const LEGACY_BOWL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBowl;
    pub const LEGACY_MUSHROOM_SOUP: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMushroomSoup;
    pub const LEGACY_GOLD_SWORD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldSword;
    pub const LEGACY_GOLD_SPADE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldSpade;
    pub const LEGACY_GOLD_PICKAXE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldPickaxe;
    pub const LEGACY_GOLD_AXE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldAxe;
    pub const LEGACY_STRING: MaterialMaterialEnum = MaterialMaterialEnum::LegacyString;
    pub const LEGACY_FEATHER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyFeather;
    pub const LEGACY_SULPHUR: MaterialMaterialEnum = MaterialMaterialEnum::LegacySulphur;
    pub const LEGACY_WOOD_HOE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWoodHoe;
    pub const LEGACY_STONE_HOE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyStoneHoe;
    pub const LEGACY_IRON_HOE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronHoe;
    pub const LEGACY_DIAMOND_HOE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDiamondHoe;
    pub const LEGACY_GOLD_HOE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldHoe;
    pub const LEGACY_SEEDS: MaterialMaterialEnum = MaterialMaterialEnum::LegacySeeds;
    pub const LEGACY_WHEAT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWheat;
    pub const LEGACY_BREAD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBread;
    pub const LEGACY_LEATHER_HELMET: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyLeatherHelmet;
    pub const LEGACY_LEATHER_CHESTPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyLeatherChestplate;
    pub const LEGACY_LEATHER_LEGGINGS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyLeatherLeggings;
    pub const LEGACY_LEATHER_BOOTS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLeatherBoots;
    pub const LEGACY_CHAINMAIL_HELMET: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyChainmailHelmet;
    pub const LEGACY_CHAINMAIL_CHESTPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyChainmailChestplate;
    pub const LEGACY_CHAINMAIL_LEGGINGS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyChainmailLeggings;
    pub const LEGACY_CHAINMAIL_BOOTS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyChainmailBoots;
    pub const LEGACY_IRON_HELMET: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronHelmet;
    pub const LEGACY_IRON_CHESTPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyIronChestplate;
    pub const LEGACY_IRON_LEGGINGS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronLeggings;
    pub const LEGACY_IRON_BOOTS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronBoots;
    pub const LEGACY_DIAMOND_HELMET: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDiamondHelmet;
    pub const LEGACY_DIAMOND_CHESTPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDiamondChestplate;
    pub const LEGACY_DIAMOND_LEGGINGS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDiamondLeggings;
    pub const LEGACY_DIAMOND_BOOTS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDiamondBoots;
    pub const LEGACY_GOLD_HELMET: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldHelmet;
    pub const LEGACY_GOLD_CHESTPLATE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyGoldChestplate;
    pub const LEGACY_GOLD_LEGGINGS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldLeggings;
    pub const LEGACY_GOLD_BOOTS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldBoots;
    pub const LEGACY_FLINT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyFlint;
    pub const LEGACY_PORK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPork;
    pub const LEGACY_GRILLED_PORK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGrilledPork;
    pub const LEGACY_PAINTING: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPainting;
    pub const LEGACY_GOLDEN_APPLE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldenApple;
    pub const LEGACY_SIGN: MaterialMaterialEnum = MaterialMaterialEnum::LegacySign;
    pub const LEGACY_WOOD_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWoodDoor;
    pub const LEGACY_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBucket;
    pub const LEGACY_WATER_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWaterBucket;
    pub const LEGACY_LAVA_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLavaBucket;
    pub const LEGACY_MINECART: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMinecart;
    pub const LEGACY_SADDLE: MaterialMaterialEnum = MaterialMaterialEnum::LegacySaddle;
    pub const LEGACY_IRON_DOOR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronDoor;
    pub const LEGACY_REDSTONE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRedstone;
    pub const LEGACY_SNOW_BALL: MaterialMaterialEnum = MaterialMaterialEnum::LegacySnowBall;
    pub const LEGACY_BOAT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBoat;
    pub const LEGACY_LEATHER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLeather;
    pub const LEGACY_MILK_BUCKET: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMilkBucket;
    pub const LEGACY_CLAY_BRICK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyClayBrick;
    pub const LEGACY_CLAY_BALL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyClayBall;
    pub const LEGACY_SUGAR_CANE: MaterialMaterialEnum = MaterialMaterialEnum::LegacySugarCane;
    pub const LEGACY_PAPER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPaper;
    pub const LEGACY_BOOK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBook;
    pub const LEGACY_SLIME_BALL: MaterialMaterialEnum = MaterialMaterialEnum::LegacySlimeBall;
    pub const LEGACY_STORAGE_MINECART: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyStorageMinecart;
    pub const LEGACY_POWERED_MINECART: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPoweredMinecart;
    pub const LEGACY_EGG: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEgg;
    pub const LEGACY_COMPASS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCompass;
    pub const LEGACY_FISHING_ROD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyFishingRod;
    pub const LEGACY_WATCH: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWatch;
    pub const LEGACY_GLOWSTONE_DUST: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyGlowstoneDust;
    pub const LEGACY_RAW_FISH: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRawFish;
    pub const LEGACY_COOKED_FISH: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCookedFish;
    pub const LEGACY_INK_SACK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyInkSack;
    pub const LEGACY_BONE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBone;
    pub const LEGACY_SUGAR: MaterialMaterialEnum = MaterialMaterialEnum::LegacySugar;
    pub const LEGACY_CAKE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCake;
    pub const LEGACY_BED: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBed;
    pub const LEGACY_DIODE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyDiode;
    pub const LEGACY_COOKIE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCookie;
    pub const LEGACY_MAP: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMap;
    pub const LEGACY_SHEARS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyShears;
    pub const LEGACY_MELON: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMelon;
    pub const LEGACY_PUMPKIN_SEEDS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPumpkinSeeds;
    pub const LEGACY_MELON_SEEDS: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMelonSeeds;
    pub const LEGACY_RAW_BEEF: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRawBeef;
    pub const LEGACY_COOKED_BEEF: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCookedBeef;
    pub const LEGACY_RAW_CHICKEN: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRawChicken;
    pub const LEGACY_COOKED_CHICKEN: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyCookedChicken;
    pub const LEGACY_ROTTEN_FLESH: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRottenFlesh;
    pub const LEGACY_ENDER_PEARL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEnderPearl;
    pub const LEGACY_BLAZE_ROD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBlazeRod;
    pub const LEGACY_GHAST_TEAR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGhastTear;
    pub const LEGACY_GOLD_NUGGET: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldNugget;
    pub const LEGACY_NETHER_STALK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyNetherStalk;
    pub const LEGACY_POTION: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPotion;
    pub const LEGACY_GLASS_BOTTLE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGlassBottle;
    pub const LEGACY_SPIDER_EYE: MaterialMaterialEnum = MaterialMaterialEnum::LegacySpiderEye;
    pub const LEGACY_FERMENTED_SPIDER_EYE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyFermentedSpiderEye;
    pub const LEGACY_BLAZE_POWDER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBlazePowder;
    pub const LEGACY_MAGMA_CREAM: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMagmaCream;
    pub const LEGACY_BREWING_STAND_ITEM: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBrewingStandItem;
    pub const LEGACY_CAULDRON_ITEM: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCauldronItem;
    pub const LEGACY_EYE_OF_ENDER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEyeOfEnder;
    pub const LEGACY_SPECKLED_MELON: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacySpeckledMelon;
    pub const LEGACY_MONSTER_EGG: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMonsterEgg;
    pub const LEGACY_EXP_BOTTLE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyExpBottle;
    pub const LEGACY_FIREBALL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyFireball;
    pub const LEGACY_BOOK_AND_QUILL: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBookAndQuill;
    pub const LEGACY_WRITTEN_BOOK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyWrittenBook;
    pub const LEGACY_EMERALD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEmerald;
    pub const LEGACY_ITEM_FRAME: MaterialMaterialEnum = MaterialMaterialEnum::LegacyItemFrame;
    pub const LEGACY_FLOWER_POT_ITEM: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyFlowerPotItem;
    pub const LEGACY_CARROT_ITEM: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCarrotItem;
    pub const LEGACY_POTATO_ITEM: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPotatoItem;
    pub const LEGACY_BAKED_POTATO: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBakedPotato;
    pub const LEGACY_POISONOUS_POTATO: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPoisonousPotato;
    pub const LEGACY_EMPTY_MAP: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEmptyMap;
    pub const LEGACY_GOLDEN_CARROT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldenCarrot;
    pub const LEGACY_SKULL_ITEM: MaterialMaterialEnum = MaterialMaterialEnum::LegacySkullItem;
    pub const LEGACY_CARROT_STICK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCarrotStick;
    pub const LEGACY_NETHER_STAR: MaterialMaterialEnum = MaterialMaterialEnum::LegacyNetherStar;
    pub const LEGACY_PUMPKIN_PIE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyPumpkinPie;
    pub const LEGACY_FIREWORK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyFirework;
    pub const LEGACY_FIREWORK_CHARGE: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyFireworkCharge;
    pub const LEGACY_ENCHANTED_BOOK: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyEnchantedBook;
    pub const LEGACY_REDSTONE_COMPARATOR: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyRedstoneComparator;
    pub const LEGACY_NETHER_BRICK_ITEM: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyNetherBrickItem;
    pub const LEGACY_QUARTZ: MaterialMaterialEnum = MaterialMaterialEnum::LegacyQuartz;
    pub const LEGACY_EXPLOSIVE_MINECART: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyExplosiveMinecart;
    pub const LEGACY_HOPPER_MINECART: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyHopperMinecart;
    pub const LEGACY_PRISMARINE_SHARD: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPrismarineShard;
    pub const LEGACY_PRISMARINE_CRYSTALS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyPrismarineCrystals;
    pub const LEGACY_RABBIT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRabbit;
    pub const LEGACY_COOKED_RABBIT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCookedRabbit;
    pub const LEGACY_RABBIT_STEW: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRabbitStew;
    pub const LEGACY_RABBIT_FOOT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRabbitFoot;
    pub const LEGACY_RABBIT_HIDE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRabbitHide;
    pub const LEGACY_ARMOR_STAND: MaterialMaterialEnum = MaterialMaterialEnum::LegacyArmorStand;
    pub const LEGACY_IRON_BARDING: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronBarding;
    pub const LEGACY_GOLD_BARDING: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldBarding;
    pub const LEGACY_DIAMOND_BARDING: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDiamondBarding;
    pub const LEGACY_LEASH: MaterialMaterialEnum = MaterialMaterialEnum::LegacyLeash;
    pub const LEGACY_NAME_TAG: MaterialMaterialEnum = MaterialMaterialEnum::LegacyNameTag;
    pub const LEGACY_COMMAND_MINECART: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyCommandMinecart;
    pub const LEGACY_MUTTON: MaterialMaterialEnum = MaterialMaterialEnum::LegacyMutton;
    pub const LEGACY_COOKED_MUTTON: MaterialMaterialEnum = MaterialMaterialEnum::LegacyCookedMutton;
    pub const LEGACY_BANNER: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBanner;
    pub const LEGACY_END_CRYSTAL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyEndCrystal;
    pub const LEGACY_SPRUCE_DOOR_ITEM: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacySpruceDoorItem;
    pub const LEGACY_BIRCH_DOOR_ITEM: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBirchDoorItem;
    pub const LEGACY_JUNGLE_DOOR_ITEM: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyJungleDoorItem;
    pub const LEGACY_ACACIA_DOOR_ITEM: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyAcaciaDoorItem;
    pub const LEGACY_DARK_OAK_DOOR_ITEM: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDarkOakDoorItem;
    pub const LEGACY_CHORUS_FRUIT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyChorusFruit;
    pub const LEGACY_CHORUS_FRUIT_POPPED: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyChorusFruitPopped;
    pub const LEGACY_BEETROOT: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBeetroot;
    pub const LEGACY_BEETROOT_SEEDS: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyBeetrootSeeds;
    pub const LEGACY_BEETROOT_SOUP: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBeetrootSoup;
    pub const LEGACY_DRAGONS_BREATH: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyDragonsBreath;
    pub const LEGACY_SPLASH_POTION: MaterialMaterialEnum = MaterialMaterialEnum::LegacySplashPotion;
    pub const LEGACY_SPECTRAL_ARROW: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacySpectralArrow;
    pub const LEGACY_TIPPED_ARROW: MaterialMaterialEnum = MaterialMaterialEnum::LegacyTippedArrow;
    pub const LEGACY_LINGERING_POTION: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyLingeringPotion;
    pub const LEGACY_SHIELD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyShield;
    pub const LEGACY_ELYTRA: MaterialMaterialEnum = MaterialMaterialEnum::LegacyElytra;
    pub const LEGACY_BOAT_SPRUCE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBoatSpruce;
    pub const LEGACY_BOAT_BIRCH: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBoatBirch;
    pub const LEGACY_BOAT_JUNGLE: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBoatJungle;
    pub const LEGACY_BOAT_ACACIA: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBoatAcacia;
    pub const LEGACY_BOAT_DARK_OAK: MaterialMaterialEnum = MaterialMaterialEnum::LegacyBoatDarkOak;
    pub const LEGACY_TOTEM: MaterialMaterialEnum = MaterialMaterialEnum::LegacyTotem;
    pub const LEGACY_SHULKER_SHELL: MaterialMaterialEnum = MaterialMaterialEnum::LegacyShulkerShell;
    pub const LEGACY_IRON_NUGGET: MaterialMaterialEnum = MaterialMaterialEnum::LegacyIronNugget;
    pub const LEGACY_KNOWLEDGE_BOOK: MaterialMaterialEnum =
        MaterialMaterialEnum::LegacyKnowledgeBook;
    pub const LEGACY_GOLD_RECORD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGoldRecord;
    pub const LEGACY_GREEN_RECORD: MaterialMaterialEnum = MaterialMaterialEnum::LegacyGreenRecord;
    pub const LEGACY_RECORD_3: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRecord3;
    pub const LEGACY_RECORD_4: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRecord4;
    pub const LEGACY_RECORD_5: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRecord5;
    pub const LEGACY_RECORD_6: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRecord6;
    pub const LEGACY_RECORD_7: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRecord7;
    pub const LEGACY_RECORD_8: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRecord8;
    pub const LEGACY_RECORD_9: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRecord9;
    pub const LEGACY_RECORD_10: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRecord10;
    pub const LEGACY_RECORD_11: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRecord11;
    pub const LEGACY_RECORD_12: MaterialMaterialEnum = MaterialMaterialEnum::LegacyRecord12;
    pub fn from_string(str: String) -> std::option::Option<MaterialMaterialEnum> {
        match str.as_str() {
            "AIR" => Some(MaterialMaterialEnum::Air),
            "STONE" => Some(MaterialMaterialEnum::Stone),
            "GRANITE" => Some(MaterialMaterialEnum::Granite),
            "POLISHED_GRANITE" => Some(MaterialMaterialEnum::PolishedGranite),
            "DIORITE" => Some(MaterialMaterialEnum::Diorite),
            "POLISHED_DIORITE" => Some(MaterialMaterialEnum::PolishedDiorite),
            "ANDESITE" => Some(MaterialMaterialEnum::Andesite),
            "POLISHED_ANDESITE" => Some(MaterialMaterialEnum::PolishedAndesite),
            "DEEPSLATE" => Some(MaterialMaterialEnum::Deepslate),
            "COBBLED_DEEPSLATE" => Some(MaterialMaterialEnum::CobbledDeepslate),
            "POLISHED_DEEPSLATE" => Some(MaterialMaterialEnum::PolishedDeepslate),
            "CALCITE" => Some(MaterialMaterialEnum::Calcite),
            "TUFF" => Some(MaterialMaterialEnum::Tuff),
            "DRIPSTONE_BLOCK" => Some(MaterialMaterialEnum::DripstoneBlock),
            "GRASS_BLOCK" => Some(MaterialMaterialEnum::GrassBlock),
            "DIRT" => Some(MaterialMaterialEnum::Dirt),
            "COARSE_DIRT" => Some(MaterialMaterialEnum::CoarseDirt),
            "PODZOL" => Some(MaterialMaterialEnum::Podzol),
            "ROOTED_DIRT" => Some(MaterialMaterialEnum::RootedDirt),
            "MUD" => Some(MaterialMaterialEnum::Mud),
            "CRIMSON_NYLIUM" => Some(MaterialMaterialEnum::CrimsonNylium),
            "WARPED_NYLIUM" => Some(MaterialMaterialEnum::WarpedNylium),
            "COBBLESTONE" => Some(MaterialMaterialEnum::Cobblestone),
            "OAK_PLANKS" => Some(MaterialMaterialEnum::OakPlanks),
            "SPRUCE_PLANKS" => Some(MaterialMaterialEnum::SprucePlanks),
            "BIRCH_PLANKS" => Some(MaterialMaterialEnum::BirchPlanks),
            "JUNGLE_PLANKS" => Some(MaterialMaterialEnum::JunglePlanks),
            "ACACIA_PLANKS" => Some(MaterialMaterialEnum::AcaciaPlanks),
            "CHERRY_PLANKS" => Some(MaterialMaterialEnum::CherryPlanks),
            "DARK_OAK_PLANKS" => Some(MaterialMaterialEnum::DarkOakPlanks),
            "MANGROVE_PLANKS" => Some(MaterialMaterialEnum::MangrovePlanks),
            "BAMBOO_PLANKS" => Some(MaterialMaterialEnum::BambooPlanks),
            "CRIMSON_PLANKS" => Some(MaterialMaterialEnum::CrimsonPlanks),
            "WARPED_PLANKS" => Some(MaterialMaterialEnum::WarpedPlanks),
            "BAMBOO_MOSAIC" => Some(MaterialMaterialEnum::BambooMosaic),
            "OAK_SAPLING" => Some(MaterialMaterialEnum::OakSapling),
            "SPRUCE_SAPLING" => Some(MaterialMaterialEnum::SpruceSapling),
            "BIRCH_SAPLING" => Some(MaterialMaterialEnum::BirchSapling),
            "JUNGLE_SAPLING" => Some(MaterialMaterialEnum::JungleSapling),
            "ACACIA_SAPLING" => Some(MaterialMaterialEnum::AcaciaSapling),
            "CHERRY_SAPLING" => Some(MaterialMaterialEnum::CherrySapling),
            "DARK_OAK_SAPLING" => Some(MaterialMaterialEnum::DarkOakSapling),
            "MANGROVE_PROPAGULE" => Some(MaterialMaterialEnum::MangrovePropagule),
            "BEDROCK" => Some(MaterialMaterialEnum::Bedrock),
            "SAND" => Some(MaterialMaterialEnum::Sand),
            "SUSPICIOUS_SAND" => Some(MaterialMaterialEnum::SuspiciousSand),
            "SUSPICIOUS_GRAVEL" => Some(MaterialMaterialEnum::SuspiciousGravel),
            "RED_SAND" => Some(MaterialMaterialEnum::RedSand),
            "GRAVEL" => Some(MaterialMaterialEnum::Gravel),
            "COAL_ORE" => Some(MaterialMaterialEnum::CoalOre),
            "DEEPSLATE_COAL_ORE" => Some(MaterialMaterialEnum::DeepslateCoalOre),
            "IRON_ORE" => Some(MaterialMaterialEnum::IronOre),
            "DEEPSLATE_IRON_ORE" => Some(MaterialMaterialEnum::DeepslateIronOre),
            "COPPER_ORE" => Some(MaterialMaterialEnum::CopperOre),
            "DEEPSLATE_COPPER_ORE" => Some(MaterialMaterialEnum::DeepslateCopperOre),
            "GOLD_ORE" => Some(MaterialMaterialEnum::GoldOre),
            "DEEPSLATE_GOLD_ORE" => Some(MaterialMaterialEnum::DeepslateGoldOre),
            "REDSTONE_ORE" => Some(MaterialMaterialEnum::RedstoneOre),
            "DEEPSLATE_REDSTONE_ORE" => Some(MaterialMaterialEnum::DeepslateRedstoneOre),
            "EMERALD_ORE" => Some(MaterialMaterialEnum::EmeraldOre),
            "DEEPSLATE_EMERALD_ORE" => Some(MaterialMaterialEnum::DeepslateEmeraldOre),
            "LAPIS_ORE" => Some(MaterialMaterialEnum::LapisOre),
            "DEEPSLATE_LAPIS_ORE" => Some(MaterialMaterialEnum::DeepslateLapisOre),
            "DIAMOND_ORE" => Some(MaterialMaterialEnum::DiamondOre),
            "DEEPSLATE_DIAMOND_ORE" => Some(MaterialMaterialEnum::DeepslateDiamondOre),
            "NETHER_GOLD_ORE" => Some(MaterialMaterialEnum::NetherGoldOre),
            "NETHER_QUARTZ_ORE" => Some(MaterialMaterialEnum::NetherQuartzOre),
            "ANCIENT_DEBRIS" => Some(MaterialMaterialEnum::AncientDebris),
            "COAL_BLOCK" => Some(MaterialMaterialEnum::CoalBlock),
            "RAW_IRON_BLOCK" => Some(MaterialMaterialEnum::RawIronBlock),
            "RAW_COPPER_BLOCK" => Some(MaterialMaterialEnum::RawCopperBlock),
            "RAW_GOLD_BLOCK" => Some(MaterialMaterialEnum::RawGoldBlock),
            "AMETHYST_BLOCK" => Some(MaterialMaterialEnum::AmethystBlock),
            "BUDDING_AMETHYST" => Some(MaterialMaterialEnum::BuddingAmethyst),
            "IRON_BLOCK" => Some(MaterialMaterialEnum::IronBlock),
            "COPPER_BLOCK" => Some(MaterialMaterialEnum::CopperBlock),
            "GOLD_BLOCK" => Some(MaterialMaterialEnum::GoldBlock),
            "DIAMOND_BLOCK" => Some(MaterialMaterialEnum::DiamondBlock),
            "NETHERITE_BLOCK" => Some(MaterialMaterialEnum::NetheriteBlock),
            "EXPOSED_COPPER" => Some(MaterialMaterialEnum::ExposedCopper),
            "WEATHERED_COPPER" => Some(MaterialMaterialEnum::WeatheredCopper),
            "OXIDIZED_COPPER" => Some(MaterialMaterialEnum::OxidizedCopper),
            "CUT_COPPER" => Some(MaterialMaterialEnum::CutCopper),
            "EXPOSED_CUT_COPPER" => Some(MaterialMaterialEnum::ExposedCutCopper),
            "WEATHERED_CUT_COPPER" => Some(MaterialMaterialEnum::WeatheredCutCopper),
            "OXIDIZED_CUT_COPPER" => Some(MaterialMaterialEnum::OxidizedCutCopper),
            "CUT_COPPER_STAIRS" => Some(MaterialMaterialEnum::CutCopperStairs),
            "EXPOSED_CUT_COPPER_STAIRS" => Some(MaterialMaterialEnum::ExposedCutCopperStairs),
            "WEATHERED_CUT_COPPER_STAIRS" => Some(MaterialMaterialEnum::WeatheredCutCopperStairs),
            "OXIDIZED_CUT_COPPER_STAIRS" => Some(MaterialMaterialEnum::OxidizedCutCopperStairs),
            "CUT_COPPER_SLAB" => Some(MaterialMaterialEnum::CutCopperSlab),
            "EXPOSED_CUT_COPPER_SLAB" => Some(MaterialMaterialEnum::ExposedCutCopperSlab),
            "WEATHERED_CUT_COPPER_SLAB" => Some(MaterialMaterialEnum::WeatheredCutCopperSlab),
            "OXIDIZED_CUT_COPPER_SLAB" => Some(MaterialMaterialEnum::OxidizedCutCopperSlab),
            "WAXED_COPPER_BLOCK" => Some(MaterialMaterialEnum::WaxedCopperBlock),
            "WAXED_EXPOSED_COPPER" => Some(MaterialMaterialEnum::WaxedExposedCopper),
            "WAXED_WEATHERED_COPPER" => Some(MaterialMaterialEnum::WaxedWeatheredCopper),
            "WAXED_OXIDIZED_COPPER" => Some(MaterialMaterialEnum::WaxedOxidizedCopper),
            "WAXED_CUT_COPPER" => Some(MaterialMaterialEnum::WaxedCutCopper),
            "WAXED_EXPOSED_CUT_COPPER" => Some(MaterialMaterialEnum::WaxedExposedCutCopper),
            "WAXED_WEATHERED_CUT_COPPER" => Some(MaterialMaterialEnum::WaxedWeatheredCutCopper),
            "WAXED_OXIDIZED_CUT_COPPER" => Some(MaterialMaterialEnum::WaxedOxidizedCutCopper),
            "WAXED_CUT_COPPER_STAIRS" => Some(MaterialMaterialEnum::WaxedCutCopperStairs),
            "WAXED_EXPOSED_CUT_COPPER_STAIRS" => {
                Some(MaterialMaterialEnum::WaxedExposedCutCopperStairs)
            }
            "WAXED_WEATHERED_CUT_COPPER_STAIRS" => {
                Some(MaterialMaterialEnum::WaxedWeatheredCutCopperStairs)
            }
            "WAXED_OXIDIZED_CUT_COPPER_STAIRS" => {
                Some(MaterialMaterialEnum::WaxedOxidizedCutCopperStairs)
            }
            "WAXED_CUT_COPPER_SLAB" => Some(MaterialMaterialEnum::WaxedCutCopperSlab),
            "WAXED_EXPOSED_CUT_COPPER_SLAB" => {
                Some(MaterialMaterialEnum::WaxedExposedCutCopperSlab)
            }
            "WAXED_WEATHERED_CUT_COPPER_SLAB" => {
                Some(MaterialMaterialEnum::WaxedWeatheredCutCopperSlab)
            }
            "WAXED_OXIDIZED_CUT_COPPER_SLAB" => {
                Some(MaterialMaterialEnum::WaxedOxidizedCutCopperSlab)
            }
            "OAK_LOG" => Some(MaterialMaterialEnum::OakLog),
            "SPRUCE_LOG" => Some(MaterialMaterialEnum::SpruceLog),
            "BIRCH_LOG" => Some(MaterialMaterialEnum::BirchLog),
            "JUNGLE_LOG" => Some(MaterialMaterialEnum::JungleLog),
            "ACACIA_LOG" => Some(MaterialMaterialEnum::AcaciaLog),
            "CHERRY_LOG" => Some(MaterialMaterialEnum::CherryLog),
            "DARK_OAK_LOG" => Some(MaterialMaterialEnum::DarkOakLog),
            "MANGROVE_LOG" => Some(MaterialMaterialEnum::MangroveLog),
            "MANGROVE_ROOTS" => Some(MaterialMaterialEnum::MangroveRoots),
            "MUDDY_MANGROVE_ROOTS" => Some(MaterialMaterialEnum::MuddyMangroveRoots),
            "CRIMSON_STEM" => Some(MaterialMaterialEnum::CrimsonStem),
            "WARPED_STEM" => Some(MaterialMaterialEnum::WarpedStem),
            "BAMBOO_BLOCK" => Some(MaterialMaterialEnum::BambooBlock),
            "STRIPPED_OAK_LOG" => Some(MaterialMaterialEnum::StrippedOakLog),
            "STRIPPED_SPRUCE_LOG" => Some(MaterialMaterialEnum::StrippedSpruceLog),
            "STRIPPED_BIRCH_LOG" => Some(MaterialMaterialEnum::StrippedBirchLog),
            "STRIPPED_JUNGLE_LOG" => Some(MaterialMaterialEnum::StrippedJungleLog),
            "STRIPPED_ACACIA_LOG" => Some(MaterialMaterialEnum::StrippedAcaciaLog),
            "STRIPPED_CHERRY_LOG" => Some(MaterialMaterialEnum::StrippedCherryLog),
            "STRIPPED_DARK_OAK_LOG" => Some(MaterialMaterialEnum::StrippedDarkOakLog),
            "STRIPPED_MANGROVE_LOG" => Some(MaterialMaterialEnum::StrippedMangroveLog),
            "STRIPPED_CRIMSON_STEM" => Some(MaterialMaterialEnum::StrippedCrimsonStem),
            "STRIPPED_WARPED_STEM" => Some(MaterialMaterialEnum::StrippedWarpedStem),
            "STRIPPED_OAK_WOOD" => Some(MaterialMaterialEnum::StrippedOakWood),
            "STRIPPED_SPRUCE_WOOD" => Some(MaterialMaterialEnum::StrippedSpruceWood),
            "STRIPPED_BIRCH_WOOD" => Some(MaterialMaterialEnum::StrippedBirchWood),
            "STRIPPED_JUNGLE_WOOD" => Some(MaterialMaterialEnum::StrippedJungleWood),
            "STRIPPED_ACACIA_WOOD" => Some(MaterialMaterialEnum::StrippedAcaciaWood),
            "STRIPPED_CHERRY_WOOD" => Some(MaterialMaterialEnum::StrippedCherryWood),
            "STRIPPED_DARK_OAK_WOOD" => Some(MaterialMaterialEnum::StrippedDarkOakWood),
            "STRIPPED_MANGROVE_WOOD" => Some(MaterialMaterialEnum::StrippedMangroveWood),
            "STRIPPED_CRIMSON_HYPHAE" => Some(MaterialMaterialEnum::StrippedCrimsonHyphae),
            "STRIPPED_WARPED_HYPHAE" => Some(MaterialMaterialEnum::StrippedWarpedHyphae),
            "STRIPPED_BAMBOO_BLOCK" => Some(MaterialMaterialEnum::StrippedBambooBlock),
            "OAK_WOOD" => Some(MaterialMaterialEnum::OakWood),
            "SPRUCE_WOOD" => Some(MaterialMaterialEnum::SpruceWood),
            "BIRCH_WOOD" => Some(MaterialMaterialEnum::BirchWood),
            "JUNGLE_WOOD" => Some(MaterialMaterialEnum::JungleWood),
            "ACACIA_WOOD" => Some(MaterialMaterialEnum::AcaciaWood),
            "CHERRY_WOOD" => Some(MaterialMaterialEnum::CherryWood),
            "DARK_OAK_WOOD" => Some(MaterialMaterialEnum::DarkOakWood),
            "MANGROVE_WOOD" => Some(MaterialMaterialEnum::MangroveWood),
            "CRIMSON_HYPHAE" => Some(MaterialMaterialEnum::CrimsonHyphae),
            "WARPED_HYPHAE" => Some(MaterialMaterialEnum::WarpedHyphae),
            "OAK_LEAVES" => Some(MaterialMaterialEnum::OakLeaves),
            "SPRUCE_LEAVES" => Some(MaterialMaterialEnum::SpruceLeaves),
            "BIRCH_LEAVES" => Some(MaterialMaterialEnum::BirchLeaves),
            "JUNGLE_LEAVES" => Some(MaterialMaterialEnum::JungleLeaves),
            "ACACIA_LEAVES" => Some(MaterialMaterialEnum::AcaciaLeaves),
            "CHERRY_LEAVES" => Some(MaterialMaterialEnum::CherryLeaves),
            "DARK_OAK_LEAVES" => Some(MaterialMaterialEnum::DarkOakLeaves),
            "MANGROVE_LEAVES" => Some(MaterialMaterialEnum::MangroveLeaves),
            "AZALEA_LEAVES" => Some(MaterialMaterialEnum::AzaleaLeaves),
            "FLOWERING_AZALEA_LEAVES" => Some(MaterialMaterialEnum::FloweringAzaleaLeaves),
            "SPONGE" => Some(MaterialMaterialEnum::Sponge),
            "WET_SPONGE" => Some(MaterialMaterialEnum::WetSponge),
            "GLASS" => Some(MaterialMaterialEnum::Glass),
            "TINTED_GLASS" => Some(MaterialMaterialEnum::TintedGlass),
            "LAPIS_BLOCK" => Some(MaterialMaterialEnum::LapisBlock),
            "SANDSTONE" => Some(MaterialMaterialEnum::Sandstone),
            "CHISELED_SANDSTONE" => Some(MaterialMaterialEnum::ChiseledSandstone),
            "CUT_SANDSTONE" => Some(MaterialMaterialEnum::CutSandstone),
            "COBWEB" => Some(MaterialMaterialEnum::Cobweb),
            "GRASS" => Some(MaterialMaterialEnum::Grass),
            "FERN" => Some(MaterialMaterialEnum::Fern),
            "AZALEA" => Some(MaterialMaterialEnum::Azalea),
            "FLOWERING_AZALEA" => Some(MaterialMaterialEnum::FloweringAzalea),
            "DEAD_BUSH" => Some(MaterialMaterialEnum::DeadBush),
            "SEAGRASS" => Some(MaterialMaterialEnum::Seagrass),
            "SEA_PICKLE" => Some(MaterialMaterialEnum::SeaPickle),
            "WHITE_WOOL" => Some(MaterialMaterialEnum::WhiteWool),
            "ORANGE_WOOL" => Some(MaterialMaterialEnum::OrangeWool),
            "MAGENTA_WOOL" => Some(MaterialMaterialEnum::MagentaWool),
            "LIGHT_BLUE_WOOL" => Some(MaterialMaterialEnum::LightBlueWool),
            "YELLOW_WOOL" => Some(MaterialMaterialEnum::YellowWool),
            "LIME_WOOL" => Some(MaterialMaterialEnum::LimeWool),
            "PINK_WOOL" => Some(MaterialMaterialEnum::PinkWool),
            "GRAY_WOOL" => Some(MaterialMaterialEnum::GrayWool),
            "LIGHT_GRAY_WOOL" => Some(MaterialMaterialEnum::LightGrayWool),
            "CYAN_WOOL" => Some(MaterialMaterialEnum::CyanWool),
            "PURPLE_WOOL" => Some(MaterialMaterialEnum::PurpleWool),
            "BLUE_WOOL" => Some(MaterialMaterialEnum::BlueWool),
            "BROWN_WOOL" => Some(MaterialMaterialEnum::BrownWool),
            "GREEN_WOOL" => Some(MaterialMaterialEnum::GreenWool),
            "RED_WOOL" => Some(MaterialMaterialEnum::RedWool),
            "BLACK_WOOL" => Some(MaterialMaterialEnum::BlackWool),
            "DANDELION" => Some(MaterialMaterialEnum::Dandelion),
            "POPPY" => Some(MaterialMaterialEnum::Poppy),
            "BLUE_ORCHID" => Some(MaterialMaterialEnum::BlueOrchid),
            "ALLIUM" => Some(MaterialMaterialEnum::Allium),
            "AZURE_BLUET" => Some(MaterialMaterialEnum::AzureBluet),
            "RED_TULIP" => Some(MaterialMaterialEnum::RedTulip),
            "ORANGE_TULIP" => Some(MaterialMaterialEnum::OrangeTulip),
            "WHITE_TULIP" => Some(MaterialMaterialEnum::WhiteTulip),
            "PINK_TULIP" => Some(MaterialMaterialEnum::PinkTulip),
            "OXEYE_DAISY" => Some(MaterialMaterialEnum::OxeyeDaisy),
            "CORNFLOWER" => Some(MaterialMaterialEnum::Cornflower),
            "LILY_OF_THE_VALLEY" => Some(MaterialMaterialEnum::LilyOfTheValley),
            "WITHER_ROSE" => Some(MaterialMaterialEnum::WitherRose),
            "TORCHFLOWER" => Some(MaterialMaterialEnum::Torchflower),
            "PITCHER_PLANT" => Some(MaterialMaterialEnum::PitcherPlant),
            "SPORE_BLOSSOM" => Some(MaterialMaterialEnum::SporeBlossom),
            "BROWN_MUSHROOM" => Some(MaterialMaterialEnum::BrownMushroom),
            "RED_MUSHROOM" => Some(MaterialMaterialEnum::RedMushroom),
            "CRIMSON_FUNGUS" => Some(MaterialMaterialEnum::CrimsonFungus),
            "WARPED_FUNGUS" => Some(MaterialMaterialEnum::WarpedFungus),
            "CRIMSON_ROOTS" => Some(MaterialMaterialEnum::CrimsonRoots),
            "WARPED_ROOTS" => Some(MaterialMaterialEnum::WarpedRoots),
            "NETHER_SPROUTS" => Some(MaterialMaterialEnum::NetherSprouts),
            "WEEPING_VINES" => Some(MaterialMaterialEnum::WeepingVines),
            "TWISTING_VINES" => Some(MaterialMaterialEnum::TwistingVines),
            "SUGAR_CANE" => Some(MaterialMaterialEnum::SugarCane),
            "KELP" => Some(MaterialMaterialEnum::Kelp),
            "MOSS_CARPET" => Some(MaterialMaterialEnum::MossCarpet),
            "PINK_PETALS" => Some(MaterialMaterialEnum::PinkPetals),
            "MOSS_BLOCK" => Some(MaterialMaterialEnum::MossBlock),
            "HANGING_ROOTS" => Some(MaterialMaterialEnum::HangingRoots),
            "BIG_DRIPLEAF" => Some(MaterialMaterialEnum::BigDripleaf),
            "SMALL_DRIPLEAF" => Some(MaterialMaterialEnum::SmallDripleaf),
            "BAMBOO" => Some(MaterialMaterialEnum::Bamboo),
            "OAK_SLAB" => Some(MaterialMaterialEnum::OakSlab),
            "SPRUCE_SLAB" => Some(MaterialMaterialEnum::SpruceSlab),
            "BIRCH_SLAB" => Some(MaterialMaterialEnum::BirchSlab),
            "JUNGLE_SLAB" => Some(MaterialMaterialEnum::JungleSlab),
            "ACACIA_SLAB" => Some(MaterialMaterialEnum::AcaciaSlab),
            "CHERRY_SLAB" => Some(MaterialMaterialEnum::CherrySlab),
            "DARK_OAK_SLAB" => Some(MaterialMaterialEnum::DarkOakSlab),
            "MANGROVE_SLAB" => Some(MaterialMaterialEnum::MangroveSlab),
            "BAMBOO_SLAB" => Some(MaterialMaterialEnum::BambooSlab),
            "BAMBOO_MOSAIC_SLAB" => Some(MaterialMaterialEnum::BambooMosaicSlab),
            "CRIMSON_SLAB" => Some(MaterialMaterialEnum::CrimsonSlab),
            "WARPED_SLAB" => Some(MaterialMaterialEnum::WarpedSlab),
            "STONE_SLAB" => Some(MaterialMaterialEnum::StoneSlab),
            "SMOOTH_STONE_SLAB" => Some(MaterialMaterialEnum::SmoothStoneSlab),
            "SANDSTONE_SLAB" => Some(MaterialMaterialEnum::SandstoneSlab),
            "CUT_SANDSTONE_SLAB" => Some(MaterialMaterialEnum::CutSandstoneSlab),
            "PETRIFIED_OAK_SLAB" => Some(MaterialMaterialEnum::PetrifiedOakSlab),
            "COBBLESTONE_SLAB" => Some(MaterialMaterialEnum::CobblestoneSlab),
            "BRICK_SLAB" => Some(MaterialMaterialEnum::BrickSlab),
            "STONE_BRICK_SLAB" => Some(MaterialMaterialEnum::StoneBrickSlab),
            "MUD_BRICK_SLAB" => Some(MaterialMaterialEnum::MudBrickSlab),
            "NETHER_BRICK_SLAB" => Some(MaterialMaterialEnum::NetherBrickSlab),
            "QUARTZ_SLAB" => Some(MaterialMaterialEnum::QuartzSlab),
            "RED_SANDSTONE_SLAB" => Some(MaterialMaterialEnum::RedSandstoneSlab),
            "CUT_RED_SANDSTONE_SLAB" => Some(MaterialMaterialEnum::CutRedSandstoneSlab),
            "PURPUR_SLAB" => Some(MaterialMaterialEnum::PurpurSlab),
            "PRISMARINE_SLAB" => Some(MaterialMaterialEnum::PrismarineSlab),
            "PRISMARINE_BRICK_SLAB" => Some(MaterialMaterialEnum::PrismarineBrickSlab),
            "DARK_PRISMARINE_SLAB" => Some(MaterialMaterialEnum::DarkPrismarineSlab),
            "SMOOTH_QUARTZ" => Some(MaterialMaterialEnum::SmoothQuartz),
            "SMOOTH_RED_SANDSTONE" => Some(MaterialMaterialEnum::SmoothRedSandstone),
            "SMOOTH_SANDSTONE" => Some(MaterialMaterialEnum::SmoothSandstone),
            "SMOOTH_STONE" => Some(MaterialMaterialEnum::SmoothStone),
            "BRICKS" => Some(MaterialMaterialEnum::Bricks),
            "BOOKSHELF" => Some(MaterialMaterialEnum::Bookshelf),
            "CHISELED_BOOKSHELF" => Some(MaterialMaterialEnum::ChiseledBookshelf),
            "DECORATED_POT" => Some(MaterialMaterialEnum::DecoratedPot),
            "MOSSY_COBBLESTONE" => Some(MaterialMaterialEnum::MossyCobblestone),
            "OBSIDIAN" => Some(MaterialMaterialEnum::Obsidian),
            "TORCH" => Some(MaterialMaterialEnum::Torch),
            "END_ROD" => Some(MaterialMaterialEnum::EndRod),
            "CHORUS_PLANT" => Some(MaterialMaterialEnum::ChorusPlant),
            "CHORUS_FLOWER" => Some(MaterialMaterialEnum::ChorusFlower),
            "PURPUR_BLOCK" => Some(MaterialMaterialEnum::PurpurBlock),
            "PURPUR_PILLAR" => Some(MaterialMaterialEnum::PurpurPillar),
            "PURPUR_STAIRS" => Some(MaterialMaterialEnum::PurpurStairs),
            "SPAWNER" => Some(MaterialMaterialEnum::Spawner),
            "CHEST" => Some(MaterialMaterialEnum::Chest),
            "CRAFTING_TABLE" => Some(MaterialMaterialEnum::CraftingTable),
            "FARMLAND" => Some(MaterialMaterialEnum::Farmland),
            "FURNACE" => Some(MaterialMaterialEnum::Furnace),
            "LADDER" => Some(MaterialMaterialEnum::Ladder),
            "COBBLESTONE_STAIRS" => Some(MaterialMaterialEnum::CobblestoneStairs),
            "SNOW" => Some(MaterialMaterialEnum::Snow),
            "ICE" => Some(MaterialMaterialEnum::Ice),
            "SNOW_BLOCK" => Some(MaterialMaterialEnum::SnowBlock),
            "CACTUS" => Some(MaterialMaterialEnum::Cactus),
            "CLAY" => Some(MaterialMaterialEnum::Clay),
            "JUKEBOX" => Some(MaterialMaterialEnum::Jukebox),
            "OAK_FENCE" => Some(MaterialMaterialEnum::OakFence),
            "SPRUCE_FENCE" => Some(MaterialMaterialEnum::SpruceFence),
            "BIRCH_FENCE" => Some(MaterialMaterialEnum::BirchFence),
            "JUNGLE_FENCE" => Some(MaterialMaterialEnum::JungleFence),
            "ACACIA_FENCE" => Some(MaterialMaterialEnum::AcaciaFence),
            "CHERRY_FENCE" => Some(MaterialMaterialEnum::CherryFence),
            "DARK_OAK_FENCE" => Some(MaterialMaterialEnum::DarkOakFence),
            "MANGROVE_FENCE" => Some(MaterialMaterialEnum::MangroveFence),
            "BAMBOO_FENCE" => Some(MaterialMaterialEnum::BambooFence),
            "CRIMSON_FENCE" => Some(MaterialMaterialEnum::CrimsonFence),
            "WARPED_FENCE" => Some(MaterialMaterialEnum::WarpedFence),
            "PUMPKIN" => Some(MaterialMaterialEnum::Pumpkin),
            "CARVED_PUMPKIN" => Some(MaterialMaterialEnum::CarvedPumpkin),
            "JACK_O_LANTERN" => Some(MaterialMaterialEnum::JackOLantern),
            "NETHERRACK" => Some(MaterialMaterialEnum::Netherrack),
            "SOUL_SAND" => Some(MaterialMaterialEnum::SoulSand),
            "SOUL_SOIL" => Some(MaterialMaterialEnum::SoulSoil),
            "BASALT" => Some(MaterialMaterialEnum::Basalt),
            "POLISHED_BASALT" => Some(MaterialMaterialEnum::PolishedBasalt),
            "SMOOTH_BASALT" => Some(MaterialMaterialEnum::SmoothBasalt),
            "SOUL_TORCH" => Some(MaterialMaterialEnum::SoulTorch),
            "GLOWSTONE" => Some(MaterialMaterialEnum::Glowstone),
            "INFESTED_STONE" => Some(MaterialMaterialEnum::InfestedStone),
            "INFESTED_COBBLESTONE" => Some(MaterialMaterialEnum::InfestedCobblestone),
            "INFESTED_STONE_BRICKS" => Some(MaterialMaterialEnum::InfestedStoneBricks),
            "INFESTED_MOSSY_STONE_BRICKS" => Some(MaterialMaterialEnum::InfestedMossyStoneBricks),
            "INFESTED_CRACKED_STONE_BRICKS" => {
                Some(MaterialMaterialEnum::InfestedCrackedStoneBricks)
            }
            "INFESTED_CHISELED_STONE_BRICKS" => {
                Some(MaterialMaterialEnum::InfestedChiseledStoneBricks)
            }
            "INFESTED_DEEPSLATE" => Some(MaterialMaterialEnum::InfestedDeepslate),
            "STONE_BRICKS" => Some(MaterialMaterialEnum::StoneBricks),
            "MOSSY_STONE_BRICKS" => Some(MaterialMaterialEnum::MossyStoneBricks),
            "CRACKED_STONE_BRICKS" => Some(MaterialMaterialEnum::CrackedStoneBricks),
            "CHISELED_STONE_BRICKS" => Some(MaterialMaterialEnum::ChiseledStoneBricks),
            "PACKED_MUD" => Some(MaterialMaterialEnum::PackedMud),
            "MUD_BRICKS" => Some(MaterialMaterialEnum::MudBricks),
            "DEEPSLATE_BRICKS" => Some(MaterialMaterialEnum::DeepslateBricks),
            "CRACKED_DEEPSLATE_BRICKS" => Some(MaterialMaterialEnum::CrackedDeepslateBricks),
            "DEEPSLATE_TILES" => Some(MaterialMaterialEnum::DeepslateTiles),
            "CRACKED_DEEPSLATE_TILES" => Some(MaterialMaterialEnum::CrackedDeepslateTiles),
            "CHISELED_DEEPSLATE" => Some(MaterialMaterialEnum::ChiseledDeepslate),
            "REINFORCED_DEEPSLATE" => Some(MaterialMaterialEnum::ReinforcedDeepslate),
            "BROWN_MUSHROOM_BLOCK" => Some(MaterialMaterialEnum::BrownMushroomBlock),
            "RED_MUSHROOM_BLOCK" => Some(MaterialMaterialEnum::RedMushroomBlock),
            "MUSHROOM_STEM" => Some(MaterialMaterialEnum::MushroomStem),
            "IRON_BARS" => Some(MaterialMaterialEnum::IronBars),
            "CHAIN" => Some(MaterialMaterialEnum::Chain),
            "GLASS_PANE" => Some(MaterialMaterialEnum::GlassPane),
            "MELON" => Some(MaterialMaterialEnum::Melon),
            "VINE" => Some(MaterialMaterialEnum::Vine),
            "GLOW_LICHEN" => Some(MaterialMaterialEnum::GlowLichen),
            "BRICK_STAIRS" => Some(MaterialMaterialEnum::BrickStairs),
            "STONE_BRICK_STAIRS" => Some(MaterialMaterialEnum::StoneBrickStairs),
            "MUD_BRICK_STAIRS" => Some(MaterialMaterialEnum::MudBrickStairs),
            "MYCELIUM" => Some(MaterialMaterialEnum::Mycelium),
            "LILY_PAD" => Some(MaterialMaterialEnum::LilyPad),
            "NETHER_BRICKS" => Some(MaterialMaterialEnum::NetherBricks),
            "CRACKED_NETHER_BRICKS" => Some(MaterialMaterialEnum::CrackedNetherBricks),
            "CHISELED_NETHER_BRICKS" => Some(MaterialMaterialEnum::ChiseledNetherBricks),
            "NETHER_BRICK_FENCE" => Some(MaterialMaterialEnum::NetherBrickFence),
            "NETHER_BRICK_STAIRS" => Some(MaterialMaterialEnum::NetherBrickStairs),
            "SCULK" => Some(MaterialMaterialEnum::Sculk),
            "SCULK_VEIN" => Some(MaterialMaterialEnum::SculkVein),
            "SCULK_CATALYST" => Some(MaterialMaterialEnum::SculkCatalyst),
            "SCULK_SHRIEKER" => Some(MaterialMaterialEnum::SculkShrieker),
            "ENCHANTING_TABLE" => Some(MaterialMaterialEnum::EnchantingTable),
            "END_PORTAL_FRAME" => Some(MaterialMaterialEnum::EndPortalFrame),
            "END_STONE" => Some(MaterialMaterialEnum::EndStone),
            "END_STONE_BRICKS" => Some(MaterialMaterialEnum::EndStoneBricks),
            "DRAGON_EGG" => Some(MaterialMaterialEnum::DragonEgg),
            "SANDSTONE_STAIRS" => Some(MaterialMaterialEnum::SandstoneStairs),
            "ENDER_CHEST" => Some(MaterialMaterialEnum::EnderChest),
            "EMERALD_BLOCK" => Some(MaterialMaterialEnum::EmeraldBlock),
            "OAK_STAIRS" => Some(MaterialMaterialEnum::OakStairs),
            "SPRUCE_STAIRS" => Some(MaterialMaterialEnum::SpruceStairs),
            "BIRCH_STAIRS" => Some(MaterialMaterialEnum::BirchStairs),
            "JUNGLE_STAIRS" => Some(MaterialMaterialEnum::JungleStairs),
            "ACACIA_STAIRS" => Some(MaterialMaterialEnum::AcaciaStairs),
            "CHERRY_STAIRS" => Some(MaterialMaterialEnum::CherryStairs),
            "DARK_OAK_STAIRS" => Some(MaterialMaterialEnum::DarkOakStairs),
            "MANGROVE_STAIRS" => Some(MaterialMaterialEnum::MangroveStairs),
            "BAMBOO_STAIRS" => Some(MaterialMaterialEnum::BambooStairs),
            "BAMBOO_MOSAIC_STAIRS" => Some(MaterialMaterialEnum::BambooMosaicStairs),
            "CRIMSON_STAIRS" => Some(MaterialMaterialEnum::CrimsonStairs),
            "WARPED_STAIRS" => Some(MaterialMaterialEnum::WarpedStairs),
            "COMMAND_BLOCK" => Some(MaterialMaterialEnum::CommandBlock),
            "BEACON" => Some(MaterialMaterialEnum::Beacon),
            "COBBLESTONE_WALL" => Some(MaterialMaterialEnum::CobblestoneWall),
            "MOSSY_COBBLESTONE_WALL" => Some(MaterialMaterialEnum::MossyCobblestoneWall),
            "BRICK_WALL" => Some(MaterialMaterialEnum::BrickWall),
            "PRISMARINE_WALL" => Some(MaterialMaterialEnum::PrismarineWall),
            "RED_SANDSTONE_WALL" => Some(MaterialMaterialEnum::RedSandstoneWall),
            "MOSSY_STONE_BRICK_WALL" => Some(MaterialMaterialEnum::MossyStoneBrickWall),
            "GRANITE_WALL" => Some(MaterialMaterialEnum::GraniteWall),
            "STONE_BRICK_WALL" => Some(MaterialMaterialEnum::StoneBrickWall),
            "MUD_BRICK_WALL" => Some(MaterialMaterialEnum::MudBrickWall),
            "NETHER_BRICK_WALL" => Some(MaterialMaterialEnum::NetherBrickWall),
            "ANDESITE_WALL" => Some(MaterialMaterialEnum::AndesiteWall),
            "RED_NETHER_BRICK_WALL" => Some(MaterialMaterialEnum::RedNetherBrickWall),
            "SANDSTONE_WALL" => Some(MaterialMaterialEnum::SandstoneWall),
            "END_STONE_BRICK_WALL" => Some(MaterialMaterialEnum::EndStoneBrickWall),
            "DIORITE_WALL" => Some(MaterialMaterialEnum::DioriteWall),
            "BLACKSTONE_WALL" => Some(MaterialMaterialEnum::BlackstoneWall),
            "POLISHED_BLACKSTONE_WALL" => Some(MaterialMaterialEnum::PolishedBlackstoneWall),
            "POLISHED_BLACKSTONE_BRICK_WALL" => {
                Some(MaterialMaterialEnum::PolishedBlackstoneBrickWall)
            }
            "COBBLED_DEEPSLATE_WALL" => Some(MaterialMaterialEnum::CobbledDeepslateWall),
            "POLISHED_DEEPSLATE_WALL" => Some(MaterialMaterialEnum::PolishedDeepslateWall),
            "DEEPSLATE_BRICK_WALL" => Some(MaterialMaterialEnum::DeepslateBrickWall),
            "DEEPSLATE_TILE_WALL" => Some(MaterialMaterialEnum::DeepslateTileWall),
            "ANVIL" => Some(MaterialMaterialEnum::Anvil),
            "CHIPPED_ANVIL" => Some(MaterialMaterialEnum::ChippedAnvil),
            "DAMAGED_ANVIL" => Some(MaterialMaterialEnum::DamagedAnvil),
            "CHISELED_QUARTZ_BLOCK" => Some(MaterialMaterialEnum::ChiseledQuartzBlock),
            "QUARTZ_BLOCK" => Some(MaterialMaterialEnum::QuartzBlock),
            "QUARTZ_BRICKS" => Some(MaterialMaterialEnum::QuartzBricks),
            "QUARTZ_PILLAR" => Some(MaterialMaterialEnum::QuartzPillar),
            "QUARTZ_STAIRS" => Some(MaterialMaterialEnum::QuartzStairs),
            "WHITE_TERRACOTTA" => Some(MaterialMaterialEnum::WhiteTerracotta),
            "ORANGE_TERRACOTTA" => Some(MaterialMaterialEnum::OrangeTerracotta),
            "MAGENTA_TERRACOTTA" => Some(MaterialMaterialEnum::MagentaTerracotta),
            "LIGHT_BLUE_TERRACOTTA" => Some(MaterialMaterialEnum::LightBlueTerracotta),
            "YELLOW_TERRACOTTA" => Some(MaterialMaterialEnum::YellowTerracotta),
            "LIME_TERRACOTTA" => Some(MaterialMaterialEnum::LimeTerracotta),
            "PINK_TERRACOTTA" => Some(MaterialMaterialEnum::PinkTerracotta),
            "GRAY_TERRACOTTA" => Some(MaterialMaterialEnum::GrayTerracotta),
            "LIGHT_GRAY_TERRACOTTA" => Some(MaterialMaterialEnum::LightGrayTerracotta),
            "CYAN_TERRACOTTA" => Some(MaterialMaterialEnum::CyanTerracotta),
            "PURPLE_TERRACOTTA" => Some(MaterialMaterialEnum::PurpleTerracotta),
            "BLUE_TERRACOTTA" => Some(MaterialMaterialEnum::BlueTerracotta),
            "BROWN_TERRACOTTA" => Some(MaterialMaterialEnum::BrownTerracotta),
            "GREEN_TERRACOTTA" => Some(MaterialMaterialEnum::GreenTerracotta),
            "RED_TERRACOTTA" => Some(MaterialMaterialEnum::RedTerracotta),
            "BLACK_TERRACOTTA" => Some(MaterialMaterialEnum::BlackTerracotta),
            "BARRIER" => Some(MaterialMaterialEnum::Barrier),
            "LIGHT" => Some(MaterialMaterialEnum::Light),
            "HAY_BLOCK" => Some(MaterialMaterialEnum::HayBlock),
            "WHITE_CARPET" => Some(MaterialMaterialEnum::WhiteCarpet),
            "ORANGE_CARPET" => Some(MaterialMaterialEnum::OrangeCarpet),
            "MAGENTA_CARPET" => Some(MaterialMaterialEnum::MagentaCarpet),
            "LIGHT_BLUE_CARPET" => Some(MaterialMaterialEnum::LightBlueCarpet),
            "YELLOW_CARPET" => Some(MaterialMaterialEnum::YellowCarpet),
            "LIME_CARPET" => Some(MaterialMaterialEnum::LimeCarpet),
            "PINK_CARPET" => Some(MaterialMaterialEnum::PinkCarpet),
            "GRAY_CARPET" => Some(MaterialMaterialEnum::GrayCarpet),
            "LIGHT_GRAY_CARPET" => Some(MaterialMaterialEnum::LightGrayCarpet),
            "CYAN_CARPET" => Some(MaterialMaterialEnum::CyanCarpet),
            "PURPLE_CARPET" => Some(MaterialMaterialEnum::PurpleCarpet),
            "BLUE_CARPET" => Some(MaterialMaterialEnum::BlueCarpet),
            "BROWN_CARPET" => Some(MaterialMaterialEnum::BrownCarpet),
            "GREEN_CARPET" => Some(MaterialMaterialEnum::GreenCarpet),
            "RED_CARPET" => Some(MaterialMaterialEnum::RedCarpet),
            "BLACK_CARPET" => Some(MaterialMaterialEnum::BlackCarpet),
            "TERRACOTTA" => Some(MaterialMaterialEnum::Terracotta),
            "PACKED_ICE" => Some(MaterialMaterialEnum::PackedIce),
            "DIRT_PATH" => Some(MaterialMaterialEnum::DirtPath),
            "SUNFLOWER" => Some(MaterialMaterialEnum::Sunflower),
            "LILAC" => Some(MaterialMaterialEnum::Lilac),
            "ROSE_BUSH" => Some(MaterialMaterialEnum::RoseBush),
            "PEONY" => Some(MaterialMaterialEnum::Peony),
            "TALL_GRASS" => Some(MaterialMaterialEnum::TallGrass),
            "LARGE_FERN" => Some(MaterialMaterialEnum::LargeFern),
            "WHITE_STAINED_GLASS" => Some(MaterialMaterialEnum::WhiteStainedGlass),
            "ORANGE_STAINED_GLASS" => Some(MaterialMaterialEnum::OrangeStainedGlass),
            "MAGENTA_STAINED_GLASS" => Some(MaterialMaterialEnum::MagentaStainedGlass),
            "LIGHT_BLUE_STAINED_GLASS" => Some(MaterialMaterialEnum::LightBlueStainedGlass),
            "YELLOW_STAINED_GLASS" => Some(MaterialMaterialEnum::YellowStainedGlass),
            "LIME_STAINED_GLASS" => Some(MaterialMaterialEnum::LimeStainedGlass),
            "PINK_STAINED_GLASS" => Some(MaterialMaterialEnum::PinkStainedGlass),
            "GRAY_STAINED_GLASS" => Some(MaterialMaterialEnum::GrayStainedGlass),
            "LIGHT_GRAY_STAINED_GLASS" => Some(MaterialMaterialEnum::LightGrayStainedGlass),
            "CYAN_STAINED_GLASS" => Some(MaterialMaterialEnum::CyanStainedGlass),
            "PURPLE_STAINED_GLASS" => Some(MaterialMaterialEnum::PurpleStainedGlass),
            "BLUE_STAINED_GLASS" => Some(MaterialMaterialEnum::BlueStainedGlass),
            "BROWN_STAINED_GLASS" => Some(MaterialMaterialEnum::BrownStainedGlass),
            "GREEN_STAINED_GLASS" => Some(MaterialMaterialEnum::GreenStainedGlass),
            "RED_STAINED_GLASS" => Some(MaterialMaterialEnum::RedStainedGlass),
            "BLACK_STAINED_GLASS" => Some(MaterialMaterialEnum::BlackStainedGlass),
            "WHITE_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::WhiteStainedGlassPane),
            "ORANGE_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::OrangeStainedGlassPane),
            "MAGENTA_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::MagentaStainedGlassPane),
            "LIGHT_BLUE_STAINED_GLASS_PANE" => {
                Some(MaterialMaterialEnum::LightBlueStainedGlassPane)
            }
            "YELLOW_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::YellowStainedGlassPane),
            "LIME_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::LimeStainedGlassPane),
            "PINK_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::PinkStainedGlassPane),
            "GRAY_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::GrayStainedGlassPane),
            "LIGHT_GRAY_STAINED_GLASS_PANE" => {
                Some(MaterialMaterialEnum::LightGrayStainedGlassPane)
            }
            "CYAN_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::CyanStainedGlassPane),
            "PURPLE_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::PurpleStainedGlassPane),
            "BLUE_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::BlueStainedGlassPane),
            "BROWN_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::BrownStainedGlassPane),
            "GREEN_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::GreenStainedGlassPane),
            "RED_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::RedStainedGlassPane),
            "BLACK_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::BlackStainedGlassPane),
            "PRISMARINE" => Some(MaterialMaterialEnum::Prismarine),
            "PRISMARINE_BRICKS" => Some(MaterialMaterialEnum::PrismarineBricks),
            "DARK_PRISMARINE" => Some(MaterialMaterialEnum::DarkPrismarine),
            "PRISMARINE_STAIRS" => Some(MaterialMaterialEnum::PrismarineStairs),
            "PRISMARINE_BRICK_STAIRS" => Some(MaterialMaterialEnum::PrismarineBrickStairs),
            "DARK_PRISMARINE_STAIRS" => Some(MaterialMaterialEnum::DarkPrismarineStairs),
            "SEA_LANTERN" => Some(MaterialMaterialEnum::SeaLantern),
            "RED_SANDSTONE" => Some(MaterialMaterialEnum::RedSandstone),
            "CHISELED_RED_SANDSTONE" => Some(MaterialMaterialEnum::ChiseledRedSandstone),
            "CUT_RED_SANDSTONE" => Some(MaterialMaterialEnum::CutRedSandstone),
            "RED_SANDSTONE_STAIRS" => Some(MaterialMaterialEnum::RedSandstoneStairs),
            "REPEATING_COMMAND_BLOCK" => Some(MaterialMaterialEnum::RepeatingCommandBlock),
            "CHAIN_COMMAND_BLOCK" => Some(MaterialMaterialEnum::ChainCommandBlock),
            "MAGMA_BLOCK" => Some(MaterialMaterialEnum::MagmaBlock),
            "NETHER_WART_BLOCK" => Some(MaterialMaterialEnum::NetherWartBlock),
            "WARPED_WART_BLOCK" => Some(MaterialMaterialEnum::WarpedWartBlock),
            "RED_NETHER_BRICKS" => Some(MaterialMaterialEnum::RedNetherBricks),
            "BONE_BLOCK" => Some(MaterialMaterialEnum::BoneBlock),
            "STRUCTURE_VOID" => Some(MaterialMaterialEnum::StructureVoid),
            "SHULKER_BOX" => Some(MaterialMaterialEnum::ShulkerBox),
            "WHITE_SHULKER_BOX" => Some(MaterialMaterialEnum::WhiteShulkerBox),
            "ORANGE_SHULKER_BOX" => Some(MaterialMaterialEnum::OrangeShulkerBox),
            "MAGENTA_SHULKER_BOX" => Some(MaterialMaterialEnum::MagentaShulkerBox),
            "LIGHT_BLUE_SHULKER_BOX" => Some(MaterialMaterialEnum::LightBlueShulkerBox),
            "YELLOW_SHULKER_BOX" => Some(MaterialMaterialEnum::YellowShulkerBox),
            "LIME_SHULKER_BOX" => Some(MaterialMaterialEnum::LimeShulkerBox),
            "PINK_SHULKER_BOX" => Some(MaterialMaterialEnum::PinkShulkerBox),
            "GRAY_SHULKER_BOX" => Some(MaterialMaterialEnum::GrayShulkerBox),
            "LIGHT_GRAY_SHULKER_BOX" => Some(MaterialMaterialEnum::LightGrayShulkerBox),
            "CYAN_SHULKER_BOX" => Some(MaterialMaterialEnum::CyanShulkerBox),
            "PURPLE_SHULKER_BOX" => Some(MaterialMaterialEnum::PurpleShulkerBox),
            "BLUE_SHULKER_BOX" => Some(MaterialMaterialEnum::BlueShulkerBox),
            "BROWN_SHULKER_BOX" => Some(MaterialMaterialEnum::BrownShulkerBox),
            "GREEN_SHULKER_BOX" => Some(MaterialMaterialEnum::GreenShulkerBox),
            "RED_SHULKER_BOX" => Some(MaterialMaterialEnum::RedShulkerBox),
            "BLACK_SHULKER_BOX" => Some(MaterialMaterialEnum::BlackShulkerBox),
            "WHITE_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::WhiteGlazedTerracotta),
            "ORANGE_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::OrangeGlazedTerracotta),
            "MAGENTA_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::MagentaGlazedTerracotta),
            "LIGHT_BLUE_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::LightBlueGlazedTerracotta),
            "YELLOW_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::YellowGlazedTerracotta),
            "LIME_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::LimeGlazedTerracotta),
            "PINK_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::PinkGlazedTerracotta),
            "GRAY_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::GrayGlazedTerracotta),
            "LIGHT_GRAY_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::LightGrayGlazedTerracotta),
            "CYAN_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::CyanGlazedTerracotta),
            "PURPLE_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::PurpleGlazedTerracotta),
            "BLUE_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::BlueGlazedTerracotta),
            "BROWN_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::BrownGlazedTerracotta),
            "GREEN_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::GreenGlazedTerracotta),
            "RED_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::RedGlazedTerracotta),
            "BLACK_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::BlackGlazedTerracotta),
            "WHITE_CONCRETE" => Some(MaterialMaterialEnum::WhiteConcrete),
            "ORANGE_CONCRETE" => Some(MaterialMaterialEnum::OrangeConcrete),
            "MAGENTA_CONCRETE" => Some(MaterialMaterialEnum::MagentaConcrete),
            "LIGHT_BLUE_CONCRETE" => Some(MaterialMaterialEnum::LightBlueConcrete),
            "YELLOW_CONCRETE" => Some(MaterialMaterialEnum::YellowConcrete),
            "LIME_CONCRETE" => Some(MaterialMaterialEnum::LimeConcrete),
            "PINK_CONCRETE" => Some(MaterialMaterialEnum::PinkConcrete),
            "GRAY_CONCRETE" => Some(MaterialMaterialEnum::GrayConcrete),
            "LIGHT_GRAY_CONCRETE" => Some(MaterialMaterialEnum::LightGrayConcrete),
            "CYAN_CONCRETE" => Some(MaterialMaterialEnum::CyanConcrete),
            "PURPLE_CONCRETE" => Some(MaterialMaterialEnum::PurpleConcrete),
            "BLUE_CONCRETE" => Some(MaterialMaterialEnum::BlueConcrete),
            "BROWN_CONCRETE" => Some(MaterialMaterialEnum::BrownConcrete),
            "GREEN_CONCRETE" => Some(MaterialMaterialEnum::GreenConcrete),
            "RED_CONCRETE" => Some(MaterialMaterialEnum::RedConcrete),
            "BLACK_CONCRETE" => Some(MaterialMaterialEnum::BlackConcrete),
            "WHITE_CONCRETE_POWDER" => Some(MaterialMaterialEnum::WhiteConcretePowder),
            "ORANGE_CONCRETE_POWDER" => Some(MaterialMaterialEnum::OrangeConcretePowder),
            "MAGENTA_CONCRETE_POWDER" => Some(MaterialMaterialEnum::MagentaConcretePowder),
            "LIGHT_BLUE_CONCRETE_POWDER" => Some(MaterialMaterialEnum::LightBlueConcretePowder),
            "YELLOW_CONCRETE_POWDER" => Some(MaterialMaterialEnum::YellowConcretePowder),
            "LIME_CONCRETE_POWDER" => Some(MaterialMaterialEnum::LimeConcretePowder),
            "PINK_CONCRETE_POWDER" => Some(MaterialMaterialEnum::PinkConcretePowder),
            "GRAY_CONCRETE_POWDER" => Some(MaterialMaterialEnum::GrayConcretePowder),
            "LIGHT_GRAY_CONCRETE_POWDER" => Some(MaterialMaterialEnum::LightGrayConcretePowder),
            "CYAN_CONCRETE_POWDER" => Some(MaterialMaterialEnum::CyanConcretePowder),
            "PURPLE_CONCRETE_POWDER" => Some(MaterialMaterialEnum::PurpleConcretePowder),
            "BLUE_CONCRETE_POWDER" => Some(MaterialMaterialEnum::BlueConcretePowder),
            "BROWN_CONCRETE_POWDER" => Some(MaterialMaterialEnum::BrownConcretePowder),
            "GREEN_CONCRETE_POWDER" => Some(MaterialMaterialEnum::GreenConcretePowder),
            "RED_CONCRETE_POWDER" => Some(MaterialMaterialEnum::RedConcretePowder),
            "BLACK_CONCRETE_POWDER" => Some(MaterialMaterialEnum::BlackConcretePowder),
            "TURTLE_EGG" => Some(MaterialMaterialEnum::TurtleEgg),
            "SNIFFER_EGG" => Some(MaterialMaterialEnum::SnifferEgg),
            "DEAD_TUBE_CORAL_BLOCK" => Some(MaterialMaterialEnum::DeadTubeCoralBlock),
            "DEAD_BRAIN_CORAL_BLOCK" => Some(MaterialMaterialEnum::DeadBrainCoralBlock),
            "DEAD_BUBBLE_CORAL_BLOCK" => Some(MaterialMaterialEnum::DeadBubbleCoralBlock),
            "DEAD_FIRE_CORAL_BLOCK" => Some(MaterialMaterialEnum::DeadFireCoralBlock),
            "DEAD_HORN_CORAL_BLOCK" => Some(MaterialMaterialEnum::DeadHornCoralBlock),
            "TUBE_CORAL_BLOCK" => Some(MaterialMaterialEnum::TubeCoralBlock),
            "BRAIN_CORAL_BLOCK" => Some(MaterialMaterialEnum::BrainCoralBlock),
            "BUBBLE_CORAL_BLOCK" => Some(MaterialMaterialEnum::BubbleCoralBlock),
            "FIRE_CORAL_BLOCK" => Some(MaterialMaterialEnum::FireCoralBlock),
            "HORN_CORAL_BLOCK" => Some(MaterialMaterialEnum::HornCoralBlock),
            "TUBE_CORAL" => Some(MaterialMaterialEnum::TubeCoral),
            "BRAIN_CORAL" => Some(MaterialMaterialEnum::BrainCoral),
            "BUBBLE_CORAL" => Some(MaterialMaterialEnum::BubbleCoral),
            "FIRE_CORAL" => Some(MaterialMaterialEnum::FireCoral),
            "HORN_CORAL" => Some(MaterialMaterialEnum::HornCoral),
            "DEAD_BRAIN_CORAL" => Some(MaterialMaterialEnum::DeadBrainCoral),
            "DEAD_BUBBLE_CORAL" => Some(MaterialMaterialEnum::DeadBubbleCoral),
            "DEAD_FIRE_CORAL" => Some(MaterialMaterialEnum::DeadFireCoral),
            "DEAD_HORN_CORAL" => Some(MaterialMaterialEnum::DeadHornCoral),
            "DEAD_TUBE_CORAL" => Some(MaterialMaterialEnum::DeadTubeCoral),
            "TUBE_CORAL_FAN" => Some(MaterialMaterialEnum::TubeCoralFan),
            "BRAIN_CORAL_FAN" => Some(MaterialMaterialEnum::BrainCoralFan),
            "BUBBLE_CORAL_FAN" => Some(MaterialMaterialEnum::BubbleCoralFan),
            "FIRE_CORAL_FAN" => Some(MaterialMaterialEnum::FireCoralFan),
            "HORN_CORAL_FAN" => Some(MaterialMaterialEnum::HornCoralFan),
            "DEAD_TUBE_CORAL_FAN" => Some(MaterialMaterialEnum::DeadTubeCoralFan),
            "DEAD_BRAIN_CORAL_FAN" => Some(MaterialMaterialEnum::DeadBrainCoralFan),
            "DEAD_BUBBLE_CORAL_FAN" => Some(MaterialMaterialEnum::DeadBubbleCoralFan),
            "DEAD_FIRE_CORAL_FAN" => Some(MaterialMaterialEnum::DeadFireCoralFan),
            "DEAD_HORN_CORAL_FAN" => Some(MaterialMaterialEnum::DeadHornCoralFan),
            "BLUE_ICE" => Some(MaterialMaterialEnum::BlueIce),
            "CONDUIT" => Some(MaterialMaterialEnum::Conduit),
            "POLISHED_GRANITE_STAIRS" => Some(MaterialMaterialEnum::PolishedGraniteStairs),
            "SMOOTH_RED_SANDSTONE_STAIRS" => Some(MaterialMaterialEnum::SmoothRedSandstoneStairs),
            "MOSSY_STONE_BRICK_STAIRS" => Some(MaterialMaterialEnum::MossyStoneBrickStairs),
            "POLISHED_DIORITE_STAIRS" => Some(MaterialMaterialEnum::PolishedDioriteStairs),
            "MOSSY_COBBLESTONE_STAIRS" => Some(MaterialMaterialEnum::MossyCobblestoneStairs),
            "END_STONE_BRICK_STAIRS" => Some(MaterialMaterialEnum::EndStoneBrickStairs),
            "STONE_STAIRS" => Some(MaterialMaterialEnum::StoneStairs),
            "SMOOTH_SANDSTONE_STAIRS" => Some(MaterialMaterialEnum::SmoothSandstoneStairs),
            "SMOOTH_QUARTZ_STAIRS" => Some(MaterialMaterialEnum::SmoothQuartzStairs),
            "GRANITE_STAIRS" => Some(MaterialMaterialEnum::GraniteStairs),
            "ANDESITE_STAIRS" => Some(MaterialMaterialEnum::AndesiteStairs),
            "RED_NETHER_BRICK_STAIRS" => Some(MaterialMaterialEnum::RedNetherBrickStairs),
            "POLISHED_ANDESITE_STAIRS" => Some(MaterialMaterialEnum::PolishedAndesiteStairs),
            "DIORITE_STAIRS" => Some(MaterialMaterialEnum::DioriteStairs),
            "COBBLED_DEEPSLATE_STAIRS" => Some(MaterialMaterialEnum::CobbledDeepslateStairs),
            "POLISHED_DEEPSLATE_STAIRS" => Some(MaterialMaterialEnum::PolishedDeepslateStairs),
            "DEEPSLATE_BRICK_STAIRS" => Some(MaterialMaterialEnum::DeepslateBrickStairs),
            "DEEPSLATE_TILE_STAIRS" => Some(MaterialMaterialEnum::DeepslateTileStairs),
            "POLISHED_GRANITE_SLAB" => Some(MaterialMaterialEnum::PolishedGraniteSlab),
            "SMOOTH_RED_SANDSTONE_SLAB" => Some(MaterialMaterialEnum::SmoothRedSandstoneSlab),
            "MOSSY_STONE_BRICK_SLAB" => Some(MaterialMaterialEnum::MossyStoneBrickSlab),
            "POLISHED_DIORITE_SLAB" => Some(MaterialMaterialEnum::PolishedDioriteSlab),
            "MOSSY_COBBLESTONE_SLAB" => Some(MaterialMaterialEnum::MossyCobblestoneSlab),
            "END_STONE_BRICK_SLAB" => Some(MaterialMaterialEnum::EndStoneBrickSlab),
            "SMOOTH_SANDSTONE_SLAB" => Some(MaterialMaterialEnum::SmoothSandstoneSlab),
            "SMOOTH_QUARTZ_SLAB" => Some(MaterialMaterialEnum::SmoothQuartzSlab),
            "GRANITE_SLAB" => Some(MaterialMaterialEnum::GraniteSlab),
            "ANDESITE_SLAB" => Some(MaterialMaterialEnum::AndesiteSlab),
            "RED_NETHER_BRICK_SLAB" => Some(MaterialMaterialEnum::RedNetherBrickSlab),
            "POLISHED_ANDESITE_SLAB" => Some(MaterialMaterialEnum::PolishedAndesiteSlab),
            "DIORITE_SLAB" => Some(MaterialMaterialEnum::DioriteSlab),
            "COBBLED_DEEPSLATE_SLAB" => Some(MaterialMaterialEnum::CobbledDeepslateSlab),
            "POLISHED_DEEPSLATE_SLAB" => Some(MaterialMaterialEnum::PolishedDeepslateSlab),
            "DEEPSLATE_BRICK_SLAB" => Some(MaterialMaterialEnum::DeepslateBrickSlab),
            "DEEPSLATE_TILE_SLAB" => Some(MaterialMaterialEnum::DeepslateTileSlab),
            "SCAFFOLDING" => Some(MaterialMaterialEnum::Scaffolding),
            "REDSTONE" => Some(MaterialMaterialEnum::Redstone),
            "REDSTONE_TORCH" => Some(MaterialMaterialEnum::RedstoneTorch),
            "REDSTONE_BLOCK" => Some(MaterialMaterialEnum::RedstoneBlock),
            "REPEATER" => Some(MaterialMaterialEnum::Repeater),
            "COMPARATOR" => Some(MaterialMaterialEnum::Comparator),
            "PISTON" => Some(MaterialMaterialEnum::Piston),
            "STICKY_PISTON" => Some(MaterialMaterialEnum::StickyPiston),
            "SLIME_BLOCK" => Some(MaterialMaterialEnum::SlimeBlock),
            "HONEY_BLOCK" => Some(MaterialMaterialEnum::HoneyBlock),
            "OBSERVER" => Some(MaterialMaterialEnum::Observer),
            "HOPPER" => Some(MaterialMaterialEnum::Hopper),
            "DISPENSER" => Some(MaterialMaterialEnum::Dispenser),
            "DROPPER" => Some(MaterialMaterialEnum::Dropper),
            "LECTERN" => Some(MaterialMaterialEnum::Lectern),
            "TARGET" => Some(MaterialMaterialEnum::Target),
            "LEVER" => Some(MaterialMaterialEnum::Lever),
            "LIGHTNING_ROD" => Some(MaterialMaterialEnum::LightningRod),
            "DAYLIGHT_DETECTOR" => Some(MaterialMaterialEnum::DaylightDetector),
            "SCULK_SENSOR" => Some(MaterialMaterialEnum::SculkSensor),
            "CALIBRATED_SCULK_SENSOR" => Some(MaterialMaterialEnum::CalibratedSculkSensor),
            "TRIPWIRE_HOOK" => Some(MaterialMaterialEnum::TripwireHook),
            "TRAPPED_CHEST" => Some(MaterialMaterialEnum::TrappedChest),
            "TNT" => Some(MaterialMaterialEnum::Tnt),
            "REDSTONE_LAMP" => Some(MaterialMaterialEnum::RedstoneLamp),
            "NOTE_BLOCK" => Some(MaterialMaterialEnum::NoteBlock),
            "STONE_BUTTON" => Some(MaterialMaterialEnum::StoneButton),
            "POLISHED_BLACKSTONE_BUTTON" => Some(MaterialMaterialEnum::PolishedBlackstoneButton),
            "OAK_BUTTON" => Some(MaterialMaterialEnum::OakButton),
            "SPRUCE_BUTTON" => Some(MaterialMaterialEnum::SpruceButton),
            "BIRCH_BUTTON" => Some(MaterialMaterialEnum::BirchButton),
            "JUNGLE_BUTTON" => Some(MaterialMaterialEnum::JungleButton),
            "ACACIA_BUTTON" => Some(MaterialMaterialEnum::AcaciaButton),
            "CHERRY_BUTTON" => Some(MaterialMaterialEnum::CherryButton),
            "DARK_OAK_BUTTON" => Some(MaterialMaterialEnum::DarkOakButton),
            "MANGROVE_BUTTON" => Some(MaterialMaterialEnum::MangroveButton),
            "BAMBOO_BUTTON" => Some(MaterialMaterialEnum::BambooButton),
            "CRIMSON_BUTTON" => Some(MaterialMaterialEnum::CrimsonButton),
            "WARPED_BUTTON" => Some(MaterialMaterialEnum::WarpedButton),
            "STONE_PRESSURE_PLATE" => Some(MaterialMaterialEnum::StonePressurePlate),
            "POLISHED_BLACKSTONE_PRESSURE_PLATE" => {
                Some(MaterialMaterialEnum::PolishedBlackstonePressurePlate)
            }
            "LIGHT_WEIGHTED_PRESSURE_PLATE" => {
                Some(MaterialMaterialEnum::LightWeightedPressurePlate)
            }
            "HEAVY_WEIGHTED_PRESSURE_PLATE" => {
                Some(MaterialMaterialEnum::HeavyWeightedPressurePlate)
            }
            "OAK_PRESSURE_PLATE" => Some(MaterialMaterialEnum::OakPressurePlate),
            "SPRUCE_PRESSURE_PLATE" => Some(MaterialMaterialEnum::SprucePressurePlate),
            "BIRCH_PRESSURE_PLATE" => Some(MaterialMaterialEnum::BirchPressurePlate),
            "JUNGLE_PRESSURE_PLATE" => Some(MaterialMaterialEnum::JunglePressurePlate),
            "ACACIA_PRESSURE_PLATE" => Some(MaterialMaterialEnum::AcaciaPressurePlate),
            "CHERRY_PRESSURE_PLATE" => Some(MaterialMaterialEnum::CherryPressurePlate),
            "DARK_OAK_PRESSURE_PLATE" => Some(MaterialMaterialEnum::DarkOakPressurePlate),
            "MANGROVE_PRESSURE_PLATE" => Some(MaterialMaterialEnum::MangrovePressurePlate),
            "BAMBOO_PRESSURE_PLATE" => Some(MaterialMaterialEnum::BambooPressurePlate),
            "CRIMSON_PRESSURE_PLATE" => Some(MaterialMaterialEnum::CrimsonPressurePlate),
            "WARPED_PRESSURE_PLATE" => Some(MaterialMaterialEnum::WarpedPressurePlate),
            "IRON_DOOR" => Some(MaterialMaterialEnum::IronDoor),
            "OAK_DOOR" => Some(MaterialMaterialEnum::OakDoor),
            "SPRUCE_DOOR" => Some(MaterialMaterialEnum::SpruceDoor),
            "BIRCH_DOOR" => Some(MaterialMaterialEnum::BirchDoor),
            "JUNGLE_DOOR" => Some(MaterialMaterialEnum::JungleDoor),
            "ACACIA_DOOR" => Some(MaterialMaterialEnum::AcaciaDoor),
            "CHERRY_DOOR" => Some(MaterialMaterialEnum::CherryDoor),
            "DARK_OAK_DOOR" => Some(MaterialMaterialEnum::DarkOakDoor),
            "MANGROVE_DOOR" => Some(MaterialMaterialEnum::MangroveDoor),
            "BAMBOO_DOOR" => Some(MaterialMaterialEnum::BambooDoor),
            "CRIMSON_DOOR" => Some(MaterialMaterialEnum::CrimsonDoor),
            "WARPED_DOOR" => Some(MaterialMaterialEnum::WarpedDoor),
            "IRON_TRAPDOOR" => Some(MaterialMaterialEnum::IronTrapdoor),
            "OAK_TRAPDOOR" => Some(MaterialMaterialEnum::OakTrapdoor),
            "SPRUCE_TRAPDOOR" => Some(MaterialMaterialEnum::SpruceTrapdoor),
            "BIRCH_TRAPDOOR" => Some(MaterialMaterialEnum::BirchTrapdoor),
            "JUNGLE_TRAPDOOR" => Some(MaterialMaterialEnum::JungleTrapdoor),
            "ACACIA_TRAPDOOR" => Some(MaterialMaterialEnum::AcaciaTrapdoor),
            "CHERRY_TRAPDOOR" => Some(MaterialMaterialEnum::CherryTrapdoor),
            "DARK_OAK_TRAPDOOR" => Some(MaterialMaterialEnum::DarkOakTrapdoor),
            "MANGROVE_TRAPDOOR" => Some(MaterialMaterialEnum::MangroveTrapdoor),
            "BAMBOO_TRAPDOOR" => Some(MaterialMaterialEnum::BambooTrapdoor),
            "CRIMSON_TRAPDOOR" => Some(MaterialMaterialEnum::CrimsonTrapdoor),
            "WARPED_TRAPDOOR" => Some(MaterialMaterialEnum::WarpedTrapdoor),
            "OAK_FENCE_GATE" => Some(MaterialMaterialEnum::OakFenceGate),
            "SPRUCE_FENCE_GATE" => Some(MaterialMaterialEnum::SpruceFenceGate),
            "BIRCH_FENCE_GATE" => Some(MaterialMaterialEnum::BirchFenceGate),
            "JUNGLE_FENCE_GATE" => Some(MaterialMaterialEnum::JungleFenceGate),
            "ACACIA_FENCE_GATE" => Some(MaterialMaterialEnum::AcaciaFenceGate),
            "CHERRY_FENCE_GATE" => Some(MaterialMaterialEnum::CherryFenceGate),
            "DARK_OAK_FENCE_GATE" => Some(MaterialMaterialEnum::DarkOakFenceGate),
            "MANGROVE_FENCE_GATE" => Some(MaterialMaterialEnum::MangroveFenceGate),
            "BAMBOO_FENCE_GATE" => Some(MaterialMaterialEnum::BambooFenceGate),
            "CRIMSON_FENCE_GATE" => Some(MaterialMaterialEnum::CrimsonFenceGate),
            "WARPED_FENCE_GATE" => Some(MaterialMaterialEnum::WarpedFenceGate),
            "POWERED_RAIL" => Some(MaterialMaterialEnum::PoweredRail),
            "DETECTOR_RAIL" => Some(MaterialMaterialEnum::DetectorRail),
            "RAIL" => Some(MaterialMaterialEnum::Rail),
            "ACTIVATOR_RAIL" => Some(MaterialMaterialEnum::ActivatorRail),
            "SADDLE" => Some(MaterialMaterialEnum::Saddle),
            "MINECART" => Some(MaterialMaterialEnum::Minecart),
            "CHEST_MINECART" => Some(MaterialMaterialEnum::ChestMinecart),
            "FURNACE_MINECART" => Some(MaterialMaterialEnum::FurnaceMinecart),
            "TNT_MINECART" => Some(MaterialMaterialEnum::TntMinecart),
            "HOPPER_MINECART" => Some(MaterialMaterialEnum::HopperMinecart),
            "CARROT_ON_A_STICK" => Some(MaterialMaterialEnum::CarrotOnAStick),
            "WARPED_FUNGUS_ON_A_STICK" => Some(MaterialMaterialEnum::WarpedFungusOnAStick),
            "ELYTRA" => Some(MaterialMaterialEnum::Elytra),
            "OAK_BOAT" => Some(MaterialMaterialEnum::OakBoat),
            "OAK_CHEST_BOAT" => Some(MaterialMaterialEnum::OakChestBoat),
            "SPRUCE_BOAT" => Some(MaterialMaterialEnum::SpruceBoat),
            "SPRUCE_CHEST_BOAT" => Some(MaterialMaterialEnum::SpruceChestBoat),
            "BIRCH_BOAT" => Some(MaterialMaterialEnum::BirchBoat),
            "BIRCH_CHEST_BOAT" => Some(MaterialMaterialEnum::BirchChestBoat),
            "JUNGLE_BOAT" => Some(MaterialMaterialEnum::JungleBoat),
            "JUNGLE_CHEST_BOAT" => Some(MaterialMaterialEnum::JungleChestBoat),
            "ACACIA_BOAT" => Some(MaterialMaterialEnum::AcaciaBoat),
            "ACACIA_CHEST_BOAT" => Some(MaterialMaterialEnum::AcaciaChestBoat),
            "CHERRY_BOAT" => Some(MaterialMaterialEnum::CherryBoat),
            "CHERRY_CHEST_BOAT" => Some(MaterialMaterialEnum::CherryChestBoat),
            "DARK_OAK_BOAT" => Some(MaterialMaterialEnum::DarkOakBoat),
            "DARK_OAK_CHEST_BOAT" => Some(MaterialMaterialEnum::DarkOakChestBoat),
            "MANGROVE_BOAT" => Some(MaterialMaterialEnum::MangroveBoat),
            "MANGROVE_CHEST_BOAT" => Some(MaterialMaterialEnum::MangroveChestBoat),
            "BAMBOO_RAFT" => Some(MaterialMaterialEnum::BambooRaft),
            "BAMBOO_CHEST_RAFT" => Some(MaterialMaterialEnum::BambooChestRaft),
            "STRUCTURE_BLOCK" => Some(MaterialMaterialEnum::StructureBlock),
            "JIGSAW" => Some(MaterialMaterialEnum::Jigsaw),
            "TURTLE_HELMET" => Some(MaterialMaterialEnum::TurtleHelmet),
            "SCUTE" => Some(MaterialMaterialEnum::Scute),
            "FLINT_AND_STEEL" => Some(MaterialMaterialEnum::FlintAndSteel),
            "APPLE" => Some(MaterialMaterialEnum::Apple),
            "BOW" => Some(MaterialMaterialEnum::Bow),
            "ARROW" => Some(MaterialMaterialEnum::Arrow),
            "COAL" => Some(MaterialMaterialEnum::Coal),
            "CHARCOAL" => Some(MaterialMaterialEnum::Charcoal),
            "DIAMOND" => Some(MaterialMaterialEnum::Diamond),
            "EMERALD" => Some(MaterialMaterialEnum::Emerald),
            "LAPIS_LAZULI" => Some(MaterialMaterialEnum::LapisLazuli),
            "QUARTZ" => Some(MaterialMaterialEnum::Quartz),
            "AMETHYST_SHARD" => Some(MaterialMaterialEnum::AmethystShard),
            "RAW_IRON" => Some(MaterialMaterialEnum::RawIron),
            "IRON_INGOT" => Some(MaterialMaterialEnum::IronIngot),
            "RAW_COPPER" => Some(MaterialMaterialEnum::RawCopper),
            "COPPER_INGOT" => Some(MaterialMaterialEnum::CopperIngot),
            "RAW_GOLD" => Some(MaterialMaterialEnum::RawGold),
            "GOLD_INGOT" => Some(MaterialMaterialEnum::GoldIngot),
            "NETHERITE_INGOT" => Some(MaterialMaterialEnum::NetheriteIngot),
            "NETHERITE_SCRAP" => Some(MaterialMaterialEnum::NetheriteScrap),
            "WOODEN_SWORD" => Some(MaterialMaterialEnum::WoodenSword),
            "WOODEN_SHOVEL" => Some(MaterialMaterialEnum::WoodenShovel),
            "WOODEN_PICKAXE" => Some(MaterialMaterialEnum::WoodenPickaxe),
            "WOODEN_AXE" => Some(MaterialMaterialEnum::WoodenAxe),
            "WOODEN_HOE" => Some(MaterialMaterialEnum::WoodenHoe),
            "STONE_SWORD" => Some(MaterialMaterialEnum::StoneSword),
            "STONE_SHOVEL" => Some(MaterialMaterialEnum::StoneShovel),
            "STONE_PICKAXE" => Some(MaterialMaterialEnum::StonePickaxe),
            "STONE_AXE" => Some(MaterialMaterialEnum::StoneAxe),
            "STONE_HOE" => Some(MaterialMaterialEnum::StoneHoe),
            "GOLDEN_SWORD" => Some(MaterialMaterialEnum::GoldenSword),
            "GOLDEN_SHOVEL" => Some(MaterialMaterialEnum::GoldenShovel),
            "GOLDEN_PICKAXE" => Some(MaterialMaterialEnum::GoldenPickaxe),
            "GOLDEN_AXE" => Some(MaterialMaterialEnum::GoldenAxe),
            "GOLDEN_HOE" => Some(MaterialMaterialEnum::GoldenHoe),
            "IRON_SWORD" => Some(MaterialMaterialEnum::IronSword),
            "IRON_SHOVEL" => Some(MaterialMaterialEnum::IronShovel),
            "IRON_PICKAXE" => Some(MaterialMaterialEnum::IronPickaxe),
            "IRON_AXE" => Some(MaterialMaterialEnum::IronAxe),
            "IRON_HOE" => Some(MaterialMaterialEnum::IronHoe),
            "DIAMOND_SWORD" => Some(MaterialMaterialEnum::DiamondSword),
            "DIAMOND_SHOVEL" => Some(MaterialMaterialEnum::DiamondShovel),
            "DIAMOND_PICKAXE" => Some(MaterialMaterialEnum::DiamondPickaxe),
            "DIAMOND_AXE" => Some(MaterialMaterialEnum::DiamondAxe),
            "DIAMOND_HOE" => Some(MaterialMaterialEnum::DiamondHoe),
            "NETHERITE_SWORD" => Some(MaterialMaterialEnum::NetheriteSword),
            "NETHERITE_SHOVEL" => Some(MaterialMaterialEnum::NetheriteShovel),
            "NETHERITE_PICKAXE" => Some(MaterialMaterialEnum::NetheritePickaxe),
            "NETHERITE_AXE" => Some(MaterialMaterialEnum::NetheriteAxe),
            "NETHERITE_HOE" => Some(MaterialMaterialEnum::NetheriteHoe),
            "STICK" => Some(MaterialMaterialEnum::Stick),
            "BOWL" => Some(MaterialMaterialEnum::Bowl),
            "MUSHROOM_STEW" => Some(MaterialMaterialEnum::MushroomStew),
            "STRING" => Some(MaterialMaterialEnum::String),
            "FEATHER" => Some(MaterialMaterialEnum::Feather),
            "GUNPOWDER" => Some(MaterialMaterialEnum::Gunpowder),
            "WHEAT_SEEDS" => Some(MaterialMaterialEnum::WheatSeeds),
            "WHEAT" => Some(MaterialMaterialEnum::Wheat),
            "BREAD" => Some(MaterialMaterialEnum::Bread),
            "LEATHER_HELMET" => Some(MaterialMaterialEnum::LeatherHelmet),
            "LEATHER_CHESTPLATE" => Some(MaterialMaterialEnum::LeatherChestplate),
            "LEATHER_LEGGINGS" => Some(MaterialMaterialEnum::LeatherLeggings),
            "LEATHER_BOOTS" => Some(MaterialMaterialEnum::LeatherBoots),
            "CHAINMAIL_HELMET" => Some(MaterialMaterialEnum::ChainmailHelmet),
            "CHAINMAIL_CHESTPLATE" => Some(MaterialMaterialEnum::ChainmailChestplate),
            "CHAINMAIL_LEGGINGS" => Some(MaterialMaterialEnum::ChainmailLeggings),
            "CHAINMAIL_BOOTS" => Some(MaterialMaterialEnum::ChainmailBoots),
            "IRON_HELMET" => Some(MaterialMaterialEnum::IronHelmet),
            "IRON_CHESTPLATE" => Some(MaterialMaterialEnum::IronChestplate),
            "IRON_LEGGINGS" => Some(MaterialMaterialEnum::IronLeggings),
            "IRON_BOOTS" => Some(MaterialMaterialEnum::IronBoots),
            "DIAMOND_HELMET" => Some(MaterialMaterialEnum::DiamondHelmet),
            "DIAMOND_CHESTPLATE" => Some(MaterialMaterialEnum::DiamondChestplate),
            "DIAMOND_LEGGINGS" => Some(MaterialMaterialEnum::DiamondLeggings),
            "DIAMOND_BOOTS" => Some(MaterialMaterialEnum::DiamondBoots),
            "GOLDEN_HELMET" => Some(MaterialMaterialEnum::GoldenHelmet),
            "GOLDEN_CHESTPLATE" => Some(MaterialMaterialEnum::GoldenChestplate),
            "GOLDEN_LEGGINGS" => Some(MaterialMaterialEnum::GoldenLeggings),
            "GOLDEN_BOOTS" => Some(MaterialMaterialEnum::GoldenBoots),
            "NETHERITE_HELMET" => Some(MaterialMaterialEnum::NetheriteHelmet),
            "NETHERITE_CHESTPLATE" => Some(MaterialMaterialEnum::NetheriteChestplate),
            "NETHERITE_LEGGINGS" => Some(MaterialMaterialEnum::NetheriteLeggings),
            "NETHERITE_BOOTS" => Some(MaterialMaterialEnum::NetheriteBoots),
            "FLINT" => Some(MaterialMaterialEnum::Flint),
            "PORKCHOP" => Some(MaterialMaterialEnum::Porkchop),
            "COOKED_PORKCHOP" => Some(MaterialMaterialEnum::CookedPorkchop),
            "PAINTING" => Some(MaterialMaterialEnum::Painting),
            "GOLDEN_APPLE" => Some(MaterialMaterialEnum::GoldenApple),
            "ENCHANTED_GOLDEN_APPLE" => Some(MaterialMaterialEnum::EnchantedGoldenApple),
            "OAK_SIGN" => Some(MaterialMaterialEnum::OakSign),
            "SPRUCE_SIGN" => Some(MaterialMaterialEnum::SpruceSign),
            "BIRCH_SIGN" => Some(MaterialMaterialEnum::BirchSign),
            "JUNGLE_SIGN" => Some(MaterialMaterialEnum::JungleSign),
            "ACACIA_SIGN" => Some(MaterialMaterialEnum::AcaciaSign),
            "CHERRY_SIGN" => Some(MaterialMaterialEnum::CherrySign),
            "DARK_OAK_SIGN" => Some(MaterialMaterialEnum::DarkOakSign),
            "MANGROVE_SIGN" => Some(MaterialMaterialEnum::MangroveSign),
            "BAMBOO_SIGN" => Some(MaterialMaterialEnum::BambooSign),
            "CRIMSON_SIGN" => Some(MaterialMaterialEnum::CrimsonSign),
            "WARPED_SIGN" => Some(MaterialMaterialEnum::WarpedSign),
            "OAK_HANGING_SIGN" => Some(MaterialMaterialEnum::OakHangingSign),
            "SPRUCE_HANGING_SIGN" => Some(MaterialMaterialEnum::SpruceHangingSign),
            "BIRCH_HANGING_SIGN" => Some(MaterialMaterialEnum::BirchHangingSign),
            "JUNGLE_HANGING_SIGN" => Some(MaterialMaterialEnum::JungleHangingSign),
            "ACACIA_HANGING_SIGN" => Some(MaterialMaterialEnum::AcaciaHangingSign),
            "CHERRY_HANGING_SIGN" => Some(MaterialMaterialEnum::CherryHangingSign),
            "DARK_OAK_HANGING_SIGN" => Some(MaterialMaterialEnum::DarkOakHangingSign),
            "MANGROVE_HANGING_SIGN" => Some(MaterialMaterialEnum::MangroveHangingSign),
            "BAMBOO_HANGING_SIGN" => Some(MaterialMaterialEnum::BambooHangingSign),
            "CRIMSON_HANGING_SIGN" => Some(MaterialMaterialEnum::CrimsonHangingSign),
            "WARPED_HANGING_SIGN" => Some(MaterialMaterialEnum::WarpedHangingSign),
            "BUCKET" => Some(MaterialMaterialEnum::Bucket),
            "WATER_BUCKET" => Some(MaterialMaterialEnum::WaterBucket),
            "LAVA_BUCKET" => Some(MaterialMaterialEnum::LavaBucket),
            "POWDER_SNOW_BUCKET" => Some(MaterialMaterialEnum::PowderSnowBucket),
            "SNOWBALL" => Some(MaterialMaterialEnum::Snowball),
            "LEATHER" => Some(MaterialMaterialEnum::Leather),
            "MILK_BUCKET" => Some(MaterialMaterialEnum::MilkBucket),
            "PUFFERFISH_BUCKET" => Some(MaterialMaterialEnum::PufferfishBucket),
            "SALMON_BUCKET" => Some(MaterialMaterialEnum::SalmonBucket),
            "COD_BUCKET" => Some(MaterialMaterialEnum::CodBucket),
            "TROPICAL_FISH_BUCKET" => Some(MaterialMaterialEnum::TropicalFishBucket),
            "AXOLOTL_BUCKET" => Some(MaterialMaterialEnum::AxolotlBucket),
            "TADPOLE_BUCKET" => Some(MaterialMaterialEnum::TadpoleBucket),
            "BRICK" => Some(MaterialMaterialEnum::Brick),
            "CLAY_BALL" => Some(MaterialMaterialEnum::ClayBall),
            "DRIED_KELP_BLOCK" => Some(MaterialMaterialEnum::DriedKelpBlock),
            "PAPER" => Some(MaterialMaterialEnum::Paper),
            "BOOK" => Some(MaterialMaterialEnum::Book),
            "SLIME_BALL" => Some(MaterialMaterialEnum::SlimeBall),
            "EGG" => Some(MaterialMaterialEnum::Egg),
            "COMPASS" => Some(MaterialMaterialEnum::Compass),
            "RECOVERY_COMPASS" => Some(MaterialMaterialEnum::RecoveryCompass),
            "BUNDLE" => Some(MaterialMaterialEnum::Bundle),
            "FISHING_ROD" => Some(MaterialMaterialEnum::FishingRod),
            "CLOCK" => Some(MaterialMaterialEnum::Clock),
            "SPYGLASS" => Some(MaterialMaterialEnum::Spyglass),
            "GLOWSTONE_DUST" => Some(MaterialMaterialEnum::GlowstoneDust),
            "COD" => Some(MaterialMaterialEnum::Cod),
            "SALMON" => Some(MaterialMaterialEnum::Salmon),
            "TROPICAL_FISH" => Some(MaterialMaterialEnum::TropicalFish),
            "PUFFERFISH" => Some(MaterialMaterialEnum::Pufferfish),
            "COOKED_COD" => Some(MaterialMaterialEnum::CookedCod),
            "COOKED_SALMON" => Some(MaterialMaterialEnum::CookedSalmon),
            "INK_SAC" => Some(MaterialMaterialEnum::InkSac),
            "GLOW_INK_SAC" => Some(MaterialMaterialEnum::GlowInkSac),
            "COCOA_BEANS" => Some(MaterialMaterialEnum::CocoaBeans),
            "WHITE_DYE" => Some(MaterialMaterialEnum::WhiteDye),
            "ORANGE_DYE" => Some(MaterialMaterialEnum::OrangeDye),
            "MAGENTA_DYE" => Some(MaterialMaterialEnum::MagentaDye),
            "LIGHT_BLUE_DYE" => Some(MaterialMaterialEnum::LightBlueDye),
            "YELLOW_DYE" => Some(MaterialMaterialEnum::YellowDye),
            "LIME_DYE" => Some(MaterialMaterialEnum::LimeDye),
            "PINK_DYE" => Some(MaterialMaterialEnum::PinkDye),
            "GRAY_DYE" => Some(MaterialMaterialEnum::GrayDye),
            "LIGHT_GRAY_DYE" => Some(MaterialMaterialEnum::LightGrayDye),
            "CYAN_DYE" => Some(MaterialMaterialEnum::CyanDye),
            "PURPLE_DYE" => Some(MaterialMaterialEnum::PurpleDye),
            "BLUE_DYE" => Some(MaterialMaterialEnum::BlueDye),
            "BROWN_DYE" => Some(MaterialMaterialEnum::BrownDye),
            "GREEN_DYE" => Some(MaterialMaterialEnum::GreenDye),
            "RED_DYE" => Some(MaterialMaterialEnum::RedDye),
            "BLACK_DYE" => Some(MaterialMaterialEnum::BlackDye),
            "BONE_MEAL" => Some(MaterialMaterialEnum::BoneMeal),
            "BONE" => Some(MaterialMaterialEnum::Bone),
            "SUGAR" => Some(MaterialMaterialEnum::Sugar),
            "CAKE" => Some(MaterialMaterialEnum::Cake),
            "WHITE_BED" => Some(MaterialMaterialEnum::WhiteBed),
            "ORANGE_BED" => Some(MaterialMaterialEnum::OrangeBed),
            "MAGENTA_BED" => Some(MaterialMaterialEnum::MagentaBed),
            "LIGHT_BLUE_BED" => Some(MaterialMaterialEnum::LightBlueBed),
            "YELLOW_BED" => Some(MaterialMaterialEnum::YellowBed),
            "LIME_BED" => Some(MaterialMaterialEnum::LimeBed),
            "PINK_BED" => Some(MaterialMaterialEnum::PinkBed),
            "GRAY_BED" => Some(MaterialMaterialEnum::GrayBed),
            "LIGHT_GRAY_BED" => Some(MaterialMaterialEnum::LightGrayBed),
            "CYAN_BED" => Some(MaterialMaterialEnum::CyanBed),
            "PURPLE_BED" => Some(MaterialMaterialEnum::PurpleBed),
            "BLUE_BED" => Some(MaterialMaterialEnum::BlueBed),
            "BROWN_BED" => Some(MaterialMaterialEnum::BrownBed),
            "GREEN_BED" => Some(MaterialMaterialEnum::GreenBed),
            "RED_BED" => Some(MaterialMaterialEnum::RedBed),
            "BLACK_BED" => Some(MaterialMaterialEnum::BlackBed),
            "COOKIE" => Some(MaterialMaterialEnum::Cookie),
            "FILLED_MAP" => Some(MaterialMaterialEnum::FilledMap),
            "SHEARS" => Some(MaterialMaterialEnum::Shears),
            "MELON_SLICE" => Some(MaterialMaterialEnum::MelonSlice),
            "DRIED_KELP" => Some(MaterialMaterialEnum::DriedKelp),
            "PUMPKIN_SEEDS" => Some(MaterialMaterialEnum::PumpkinSeeds),
            "MELON_SEEDS" => Some(MaterialMaterialEnum::MelonSeeds),
            "BEEF" => Some(MaterialMaterialEnum::Beef),
            "COOKED_BEEF" => Some(MaterialMaterialEnum::CookedBeef),
            "CHICKEN" => Some(MaterialMaterialEnum::Chicken),
            "COOKED_CHICKEN" => Some(MaterialMaterialEnum::CookedChicken),
            "ROTTEN_FLESH" => Some(MaterialMaterialEnum::RottenFlesh),
            "ENDER_PEARL" => Some(MaterialMaterialEnum::EnderPearl),
            "BLAZE_ROD" => Some(MaterialMaterialEnum::BlazeRod),
            "GHAST_TEAR" => Some(MaterialMaterialEnum::GhastTear),
            "GOLD_NUGGET" => Some(MaterialMaterialEnum::GoldNugget),
            "NETHER_WART" => Some(MaterialMaterialEnum::NetherWart),
            "POTION" => Some(MaterialMaterialEnum::Potion),
            "GLASS_BOTTLE" => Some(MaterialMaterialEnum::GlassBottle),
            "SPIDER_EYE" => Some(MaterialMaterialEnum::SpiderEye),
            "FERMENTED_SPIDER_EYE" => Some(MaterialMaterialEnum::FermentedSpiderEye),
            "BLAZE_POWDER" => Some(MaterialMaterialEnum::BlazePowder),
            "MAGMA_CREAM" => Some(MaterialMaterialEnum::MagmaCream),
            "BREWING_STAND" => Some(MaterialMaterialEnum::BrewingStand),
            "CAULDRON" => Some(MaterialMaterialEnum::Cauldron),
            "ENDER_EYE" => Some(MaterialMaterialEnum::EnderEye),
            "GLISTERING_MELON_SLICE" => Some(MaterialMaterialEnum::GlisteringMelonSlice),
            "ALLAY_SPAWN_EGG" => Some(MaterialMaterialEnum::AllaySpawnEgg),
            "AXOLOTL_SPAWN_EGG" => Some(MaterialMaterialEnum::AxolotlSpawnEgg),
            "BAT_SPAWN_EGG" => Some(MaterialMaterialEnum::BatSpawnEgg),
            "BEE_SPAWN_EGG" => Some(MaterialMaterialEnum::BeeSpawnEgg),
            "BLAZE_SPAWN_EGG" => Some(MaterialMaterialEnum::BlazeSpawnEgg),
            "CAT_SPAWN_EGG" => Some(MaterialMaterialEnum::CatSpawnEgg),
            "CAMEL_SPAWN_EGG" => Some(MaterialMaterialEnum::CamelSpawnEgg),
            "CAVE_SPIDER_SPAWN_EGG" => Some(MaterialMaterialEnum::CaveSpiderSpawnEgg),
            "CHICKEN_SPAWN_EGG" => Some(MaterialMaterialEnum::ChickenSpawnEgg),
            "COD_SPAWN_EGG" => Some(MaterialMaterialEnum::CodSpawnEgg),
            "COW_SPAWN_EGG" => Some(MaterialMaterialEnum::CowSpawnEgg),
            "CREEPER_SPAWN_EGG" => Some(MaterialMaterialEnum::CreeperSpawnEgg),
            "DOLPHIN_SPAWN_EGG" => Some(MaterialMaterialEnum::DolphinSpawnEgg),
            "DONKEY_SPAWN_EGG" => Some(MaterialMaterialEnum::DonkeySpawnEgg),
            "DROWNED_SPAWN_EGG" => Some(MaterialMaterialEnum::DrownedSpawnEgg),
            "ELDER_GUARDIAN_SPAWN_EGG" => Some(MaterialMaterialEnum::ElderGuardianSpawnEgg),
            "ENDER_DRAGON_SPAWN_EGG" => Some(MaterialMaterialEnum::EnderDragonSpawnEgg),
            "ENDERMAN_SPAWN_EGG" => Some(MaterialMaterialEnum::EndermanSpawnEgg),
            "ENDERMITE_SPAWN_EGG" => Some(MaterialMaterialEnum::EndermiteSpawnEgg),
            "EVOKER_SPAWN_EGG" => Some(MaterialMaterialEnum::EvokerSpawnEgg),
            "FOX_SPAWN_EGG" => Some(MaterialMaterialEnum::FoxSpawnEgg),
            "FROG_SPAWN_EGG" => Some(MaterialMaterialEnum::FrogSpawnEgg),
            "GHAST_SPAWN_EGG" => Some(MaterialMaterialEnum::GhastSpawnEgg),
            "GLOW_SQUID_SPAWN_EGG" => Some(MaterialMaterialEnum::GlowSquidSpawnEgg),
            "GOAT_SPAWN_EGG" => Some(MaterialMaterialEnum::GoatSpawnEgg),
            "GUARDIAN_SPAWN_EGG" => Some(MaterialMaterialEnum::GuardianSpawnEgg),
            "HOGLIN_SPAWN_EGG" => Some(MaterialMaterialEnum::HoglinSpawnEgg),
            "HORSE_SPAWN_EGG" => Some(MaterialMaterialEnum::HorseSpawnEgg),
            "HUSK_SPAWN_EGG" => Some(MaterialMaterialEnum::HuskSpawnEgg),
            "IRON_GOLEM_SPAWN_EGG" => Some(MaterialMaterialEnum::IronGolemSpawnEgg),
            "LLAMA_SPAWN_EGG" => Some(MaterialMaterialEnum::LlamaSpawnEgg),
            "MAGMA_CUBE_SPAWN_EGG" => Some(MaterialMaterialEnum::MagmaCubeSpawnEgg),
            "MOOSHROOM_SPAWN_EGG" => Some(MaterialMaterialEnum::MooshroomSpawnEgg),
            "MULE_SPAWN_EGG" => Some(MaterialMaterialEnum::MuleSpawnEgg),
            "OCELOT_SPAWN_EGG" => Some(MaterialMaterialEnum::OcelotSpawnEgg),
            "PANDA_SPAWN_EGG" => Some(MaterialMaterialEnum::PandaSpawnEgg),
            "PARROT_SPAWN_EGG" => Some(MaterialMaterialEnum::ParrotSpawnEgg),
            "PHANTOM_SPAWN_EGG" => Some(MaterialMaterialEnum::PhantomSpawnEgg),
            "PIG_SPAWN_EGG" => Some(MaterialMaterialEnum::PigSpawnEgg),
            "PIGLIN_SPAWN_EGG" => Some(MaterialMaterialEnum::PiglinSpawnEgg),
            "PIGLIN_BRUTE_SPAWN_EGG" => Some(MaterialMaterialEnum::PiglinBruteSpawnEgg),
            "PILLAGER_SPAWN_EGG" => Some(MaterialMaterialEnum::PillagerSpawnEgg),
            "POLAR_BEAR_SPAWN_EGG" => Some(MaterialMaterialEnum::PolarBearSpawnEgg),
            "PUFFERFISH_SPAWN_EGG" => Some(MaterialMaterialEnum::PufferfishSpawnEgg),
            "RABBIT_SPAWN_EGG" => Some(MaterialMaterialEnum::RabbitSpawnEgg),
            "RAVAGER_SPAWN_EGG" => Some(MaterialMaterialEnum::RavagerSpawnEgg),
            "SALMON_SPAWN_EGG" => Some(MaterialMaterialEnum::SalmonSpawnEgg),
            "SHEEP_SPAWN_EGG" => Some(MaterialMaterialEnum::SheepSpawnEgg),
            "SHULKER_SPAWN_EGG" => Some(MaterialMaterialEnum::ShulkerSpawnEgg),
            "SILVERFISH_SPAWN_EGG" => Some(MaterialMaterialEnum::SilverfishSpawnEgg),
            "SKELETON_SPAWN_EGG" => Some(MaterialMaterialEnum::SkeletonSpawnEgg),
            "SKELETON_HORSE_SPAWN_EGG" => Some(MaterialMaterialEnum::SkeletonHorseSpawnEgg),
            "SLIME_SPAWN_EGG" => Some(MaterialMaterialEnum::SlimeSpawnEgg),
            "SNIFFER_SPAWN_EGG" => Some(MaterialMaterialEnum::SnifferSpawnEgg),
            "SNOW_GOLEM_SPAWN_EGG" => Some(MaterialMaterialEnum::SnowGolemSpawnEgg),
            "SPIDER_SPAWN_EGG" => Some(MaterialMaterialEnum::SpiderSpawnEgg),
            "SQUID_SPAWN_EGG" => Some(MaterialMaterialEnum::SquidSpawnEgg),
            "STRAY_SPAWN_EGG" => Some(MaterialMaterialEnum::StraySpawnEgg),
            "STRIDER_SPAWN_EGG" => Some(MaterialMaterialEnum::StriderSpawnEgg),
            "TADPOLE_SPAWN_EGG" => Some(MaterialMaterialEnum::TadpoleSpawnEgg),
            "TRADER_LLAMA_SPAWN_EGG" => Some(MaterialMaterialEnum::TraderLlamaSpawnEgg),
            "TROPICAL_FISH_SPAWN_EGG" => Some(MaterialMaterialEnum::TropicalFishSpawnEgg),
            "TURTLE_SPAWN_EGG" => Some(MaterialMaterialEnum::TurtleSpawnEgg),
            "VEX_SPAWN_EGG" => Some(MaterialMaterialEnum::VexSpawnEgg),
            "VILLAGER_SPAWN_EGG" => Some(MaterialMaterialEnum::VillagerSpawnEgg),
            "VINDICATOR_SPAWN_EGG" => Some(MaterialMaterialEnum::VindicatorSpawnEgg),
            "WANDERING_TRADER_SPAWN_EGG" => Some(MaterialMaterialEnum::WanderingTraderSpawnEgg),
            "WARDEN_SPAWN_EGG" => Some(MaterialMaterialEnum::WardenSpawnEgg),
            "WITCH_SPAWN_EGG" => Some(MaterialMaterialEnum::WitchSpawnEgg),
            "WITHER_SPAWN_EGG" => Some(MaterialMaterialEnum::WitherSpawnEgg),
            "WITHER_SKELETON_SPAWN_EGG" => Some(MaterialMaterialEnum::WitherSkeletonSpawnEgg),
            "WOLF_SPAWN_EGG" => Some(MaterialMaterialEnum::WolfSpawnEgg),
            "ZOGLIN_SPAWN_EGG" => Some(MaterialMaterialEnum::ZoglinSpawnEgg),
            "ZOMBIE_SPAWN_EGG" => Some(MaterialMaterialEnum::ZombieSpawnEgg),
            "ZOMBIE_HORSE_SPAWN_EGG" => Some(MaterialMaterialEnum::ZombieHorseSpawnEgg),
            "ZOMBIE_VILLAGER_SPAWN_EGG" => Some(MaterialMaterialEnum::ZombieVillagerSpawnEgg),
            "ZOMBIFIED_PIGLIN_SPAWN_EGG" => Some(MaterialMaterialEnum::ZombifiedPiglinSpawnEgg),
            "EXPERIENCE_BOTTLE" => Some(MaterialMaterialEnum::ExperienceBottle),
            "FIRE_CHARGE" => Some(MaterialMaterialEnum::FireCharge),
            "WRITABLE_BOOK" => Some(MaterialMaterialEnum::WritableBook),
            "WRITTEN_BOOK" => Some(MaterialMaterialEnum::WrittenBook),
            "ITEM_FRAME" => Some(MaterialMaterialEnum::ItemFrame),
            "GLOW_ITEM_FRAME" => Some(MaterialMaterialEnum::GlowItemFrame),
            "FLOWER_POT" => Some(MaterialMaterialEnum::FlowerPot),
            "CARROT" => Some(MaterialMaterialEnum::Carrot),
            "POTATO" => Some(MaterialMaterialEnum::Potato),
            "BAKED_POTATO" => Some(MaterialMaterialEnum::BakedPotato),
            "POISONOUS_POTATO" => Some(MaterialMaterialEnum::PoisonousPotato),
            "MAP" => Some(MaterialMaterialEnum::Map),
            "GOLDEN_CARROT" => Some(MaterialMaterialEnum::GoldenCarrot),
            "SKELETON_SKULL" => Some(MaterialMaterialEnum::SkeletonSkull),
            "WITHER_SKELETON_SKULL" => Some(MaterialMaterialEnum::WitherSkeletonSkull),
            "PLAYER_HEAD" => Some(MaterialMaterialEnum::PlayerHead),
            "ZOMBIE_HEAD" => Some(MaterialMaterialEnum::ZombieHead),
            "CREEPER_HEAD" => Some(MaterialMaterialEnum::CreeperHead),
            "DRAGON_HEAD" => Some(MaterialMaterialEnum::DragonHead),
            "PIGLIN_HEAD" => Some(MaterialMaterialEnum::PiglinHead),
            "NETHER_STAR" => Some(MaterialMaterialEnum::NetherStar),
            "PUMPKIN_PIE" => Some(MaterialMaterialEnum::PumpkinPie),
            "FIREWORK_ROCKET" => Some(MaterialMaterialEnum::FireworkRocket),
            "FIREWORK_STAR" => Some(MaterialMaterialEnum::FireworkStar),
            "ENCHANTED_BOOK" => Some(MaterialMaterialEnum::EnchantedBook),
            "NETHER_BRICK" => Some(MaterialMaterialEnum::NetherBrick),
            "PRISMARINE_SHARD" => Some(MaterialMaterialEnum::PrismarineShard),
            "PRISMARINE_CRYSTALS" => Some(MaterialMaterialEnum::PrismarineCrystals),
            "RABBIT" => Some(MaterialMaterialEnum::Rabbit),
            "COOKED_RABBIT" => Some(MaterialMaterialEnum::CookedRabbit),
            "RABBIT_STEW" => Some(MaterialMaterialEnum::RabbitStew),
            "RABBIT_FOOT" => Some(MaterialMaterialEnum::RabbitFoot),
            "RABBIT_HIDE" => Some(MaterialMaterialEnum::RabbitHide),
            "ARMOR_STAND" => Some(MaterialMaterialEnum::ArmorStand),
            "IRON_HORSE_ARMOR" => Some(MaterialMaterialEnum::IronHorseArmor),
            "GOLDEN_HORSE_ARMOR" => Some(MaterialMaterialEnum::GoldenHorseArmor),
            "DIAMOND_HORSE_ARMOR" => Some(MaterialMaterialEnum::DiamondHorseArmor),
            "LEATHER_HORSE_ARMOR" => Some(MaterialMaterialEnum::LeatherHorseArmor),
            "LEAD" => Some(MaterialMaterialEnum::Lead),
            "NAME_TAG" => Some(MaterialMaterialEnum::NameTag),
            "COMMAND_BLOCK_MINECART" => Some(MaterialMaterialEnum::CommandBlockMinecart),
            "MUTTON" => Some(MaterialMaterialEnum::Mutton),
            "COOKED_MUTTON" => Some(MaterialMaterialEnum::CookedMutton),
            "WHITE_BANNER" => Some(MaterialMaterialEnum::WhiteBanner),
            "ORANGE_BANNER" => Some(MaterialMaterialEnum::OrangeBanner),
            "MAGENTA_BANNER" => Some(MaterialMaterialEnum::MagentaBanner),
            "LIGHT_BLUE_BANNER" => Some(MaterialMaterialEnum::LightBlueBanner),
            "YELLOW_BANNER" => Some(MaterialMaterialEnum::YellowBanner),
            "LIME_BANNER" => Some(MaterialMaterialEnum::LimeBanner),
            "PINK_BANNER" => Some(MaterialMaterialEnum::PinkBanner),
            "GRAY_BANNER" => Some(MaterialMaterialEnum::GrayBanner),
            "LIGHT_GRAY_BANNER" => Some(MaterialMaterialEnum::LightGrayBanner),
            "CYAN_BANNER" => Some(MaterialMaterialEnum::CyanBanner),
            "PURPLE_BANNER" => Some(MaterialMaterialEnum::PurpleBanner),
            "BLUE_BANNER" => Some(MaterialMaterialEnum::BlueBanner),
            "BROWN_BANNER" => Some(MaterialMaterialEnum::BrownBanner),
            "GREEN_BANNER" => Some(MaterialMaterialEnum::GreenBanner),
            "RED_BANNER" => Some(MaterialMaterialEnum::RedBanner),
            "BLACK_BANNER" => Some(MaterialMaterialEnum::BlackBanner),
            "END_CRYSTAL" => Some(MaterialMaterialEnum::EndCrystal),
            "CHORUS_FRUIT" => Some(MaterialMaterialEnum::ChorusFruit),
            "POPPED_CHORUS_FRUIT" => Some(MaterialMaterialEnum::PoppedChorusFruit),
            "TORCHFLOWER_SEEDS" => Some(MaterialMaterialEnum::TorchflowerSeeds),
            "PITCHER_POD" => Some(MaterialMaterialEnum::PitcherPod),
            "BEETROOT" => Some(MaterialMaterialEnum::Beetroot),
            "BEETROOT_SEEDS" => Some(MaterialMaterialEnum::BeetrootSeeds),
            "BEETROOT_SOUP" => Some(MaterialMaterialEnum::BeetrootSoup),
            "DRAGON_BREATH" => Some(MaterialMaterialEnum::DragonBreath),
            "SPLASH_POTION" => Some(MaterialMaterialEnum::SplashPotion),
            "SPECTRAL_ARROW" => Some(MaterialMaterialEnum::SpectralArrow),
            "TIPPED_ARROW" => Some(MaterialMaterialEnum::TippedArrow),
            "LINGERING_POTION" => Some(MaterialMaterialEnum::LingeringPotion),
            "SHIELD" => Some(MaterialMaterialEnum::Shield),
            "TOTEM_OF_UNDYING" => Some(MaterialMaterialEnum::TotemOfUndying),
            "SHULKER_SHELL" => Some(MaterialMaterialEnum::ShulkerShell),
            "IRON_NUGGET" => Some(MaterialMaterialEnum::IronNugget),
            "KNOWLEDGE_BOOK" => Some(MaterialMaterialEnum::KnowledgeBook),
            "DEBUG_STICK" => Some(MaterialMaterialEnum::DebugStick),
            "MUSIC_DISC_13" => Some(MaterialMaterialEnum::MusicDisc13),
            "MUSIC_DISC_CAT" => Some(MaterialMaterialEnum::MusicDiscCat),
            "MUSIC_DISC_BLOCKS" => Some(MaterialMaterialEnum::MusicDiscBlocks),
            "MUSIC_DISC_CHIRP" => Some(MaterialMaterialEnum::MusicDiscChirp),
            "MUSIC_DISC_FAR" => Some(MaterialMaterialEnum::MusicDiscFar),
            "MUSIC_DISC_MALL" => Some(MaterialMaterialEnum::MusicDiscMall),
            "MUSIC_DISC_MELLOHI" => Some(MaterialMaterialEnum::MusicDiscMellohi),
            "MUSIC_DISC_STAL" => Some(MaterialMaterialEnum::MusicDiscStal),
            "MUSIC_DISC_STRAD" => Some(MaterialMaterialEnum::MusicDiscStrad),
            "MUSIC_DISC_WARD" => Some(MaterialMaterialEnum::MusicDiscWard),
            "MUSIC_DISC_11" => Some(MaterialMaterialEnum::MusicDisc11),
            "MUSIC_DISC_WAIT" => Some(MaterialMaterialEnum::MusicDiscWait),
            "MUSIC_DISC_OTHERSIDE" => Some(MaterialMaterialEnum::MusicDiscOtherside),
            "MUSIC_DISC_RELIC" => Some(MaterialMaterialEnum::MusicDiscRelic),
            "MUSIC_DISC_5" => Some(MaterialMaterialEnum::MusicDisc5),
            "MUSIC_DISC_PIGSTEP" => Some(MaterialMaterialEnum::MusicDiscPigstep),
            "DISC_FRAGMENT_5" => Some(MaterialMaterialEnum::DiscFragment5),
            "TRIDENT" => Some(MaterialMaterialEnum::Trident),
            "PHANTOM_MEMBRANE" => Some(MaterialMaterialEnum::PhantomMembrane),
            "NAUTILUS_SHELL" => Some(MaterialMaterialEnum::NautilusShell),
            "HEART_OF_THE_SEA" => Some(MaterialMaterialEnum::HeartOfTheSea),
            "CROSSBOW" => Some(MaterialMaterialEnum::Crossbow),
            "SUSPICIOUS_STEW" => Some(MaterialMaterialEnum::SuspiciousStew),
            "LOOM" => Some(MaterialMaterialEnum::Loom),
            "FLOWER_BANNER_PATTERN" => Some(MaterialMaterialEnum::FlowerBannerPattern),
            "CREEPER_BANNER_PATTERN" => Some(MaterialMaterialEnum::CreeperBannerPattern),
            "SKULL_BANNER_PATTERN" => Some(MaterialMaterialEnum::SkullBannerPattern),
            "MOJANG_BANNER_PATTERN" => Some(MaterialMaterialEnum::MojangBannerPattern),
            "GLOBE_BANNER_PATTERN" => Some(MaterialMaterialEnum::GlobeBannerPattern),
            "PIGLIN_BANNER_PATTERN" => Some(MaterialMaterialEnum::PiglinBannerPattern),
            "GOAT_HORN" => Some(MaterialMaterialEnum::GoatHorn),
            "COMPOSTER" => Some(MaterialMaterialEnum::Composter),
            "BARREL" => Some(MaterialMaterialEnum::Barrel),
            "SMOKER" => Some(MaterialMaterialEnum::Smoker),
            "BLAST_FURNACE" => Some(MaterialMaterialEnum::BlastFurnace),
            "CARTOGRAPHY_TABLE" => Some(MaterialMaterialEnum::CartographyTable),
            "FLETCHING_TABLE" => Some(MaterialMaterialEnum::FletchingTable),
            "GRINDSTONE" => Some(MaterialMaterialEnum::Grindstone),
            "SMITHING_TABLE" => Some(MaterialMaterialEnum::SmithingTable),
            "STONECUTTER" => Some(MaterialMaterialEnum::Stonecutter),
            "BELL" => Some(MaterialMaterialEnum::Bell),
            "LANTERN" => Some(MaterialMaterialEnum::Lantern),
            "SOUL_LANTERN" => Some(MaterialMaterialEnum::SoulLantern),
            "SWEET_BERRIES" => Some(MaterialMaterialEnum::SweetBerries),
            "GLOW_BERRIES" => Some(MaterialMaterialEnum::GlowBerries),
            "CAMPFIRE" => Some(MaterialMaterialEnum::Campfire),
            "SOUL_CAMPFIRE" => Some(MaterialMaterialEnum::SoulCampfire),
            "SHROOMLIGHT" => Some(MaterialMaterialEnum::Shroomlight),
            "HONEYCOMB" => Some(MaterialMaterialEnum::Honeycomb),
            "BEE_NEST" => Some(MaterialMaterialEnum::BeeNest),
            "BEEHIVE" => Some(MaterialMaterialEnum::Beehive),
            "HONEY_BOTTLE" => Some(MaterialMaterialEnum::HoneyBottle),
            "HONEYCOMB_BLOCK" => Some(MaterialMaterialEnum::HoneycombBlock),
            "LODESTONE" => Some(MaterialMaterialEnum::Lodestone),
            "CRYING_OBSIDIAN" => Some(MaterialMaterialEnum::CryingObsidian),
            "BLACKSTONE" => Some(MaterialMaterialEnum::Blackstone),
            "BLACKSTONE_SLAB" => Some(MaterialMaterialEnum::BlackstoneSlab),
            "BLACKSTONE_STAIRS" => Some(MaterialMaterialEnum::BlackstoneStairs),
            "GILDED_BLACKSTONE" => Some(MaterialMaterialEnum::GildedBlackstone),
            "POLISHED_BLACKSTONE" => Some(MaterialMaterialEnum::PolishedBlackstone),
            "POLISHED_BLACKSTONE_SLAB" => Some(MaterialMaterialEnum::PolishedBlackstoneSlab),
            "POLISHED_BLACKSTONE_STAIRS" => Some(MaterialMaterialEnum::PolishedBlackstoneStairs),
            "CHISELED_POLISHED_BLACKSTONE" => {
                Some(MaterialMaterialEnum::ChiseledPolishedBlackstone)
            }
            "POLISHED_BLACKSTONE_BRICKS" => Some(MaterialMaterialEnum::PolishedBlackstoneBricks),
            "POLISHED_BLACKSTONE_BRICK_SLAB" => {
                Some(MaterialMaterialEnum::PolishedBlackstoneBrickSlab)
            }
            "POLISHED_BLACKSTONE_BRICK_STAIRS" => {
                Some(MaterialMaterialEnum::PolishedBlackstoneBrickStairs)
            }
            "CRACKED_POLISHED_BLACKSTONE_BRICKS" => {
                Some(MaterialMaterialEnum::CrackedPolishedBlackstoneBricks)
            }
            "RESPAWN_ANCHOR" => Some(MaterialMaterialEnum::RespawnAnchor),
            "CANDLE" => Some(MaterialMaterialEnum::Candle),
            "WHITE_CANDLE" => Some(MaterialMaterialEnum::WhiteCandle),
            "ORANGE_CANDLE" => Some(MaterialMaterialEnum::OrangeCandle),
            "MAGENTA_CANDLE" => Some(MaterialMaterialEnum::MagentaCandle),
            "LIGHT_BLUE_CANDLE" => Some(MaterialMaterialEnum::LightBlueCandle),
            "YELLOW_CANDLE" => Some(MaterialMaterialEnum::YellowCandle),
            "LIME_CANDLE" => Some(MaterialMaterialEnum::LimeCandle),
            "PINK_CANDLE" => Some(MaterialMaterialEnum::PinkCandle),
            "GRAY_CANDLE" => Some(MaterialMaterialEnum::GrayCandle),
            "LIGHT_GRAY_CANDLE" => Some(MaterialMaterialEnum::LightGrayCandle),
            "CYAN_CANDLE" => Some(MaterialMaterialEnum::CyanCandle),
            "PURPLE_CANDLE" => Some(MaterialMaterialEnum::PurpleCandle),
            "BLUE_CANDLE" => Some(MaterialMaterialEnum::BlueCandle),
            "BROWN_CANDLE" => Some(MaterialMaterialEnum::BrownCandle),
            "GREEN_CANDLE" => Some(MaterialMaterialEnum::GreenCandle),
            "RED_CANDLE" => Some(MaterialMaterialEnum::RedCandle),
            "BLACK_CANDLE" => Some(MaterialMaterialEnum::BlackCandle),
            "SMALL_AMETHYST_BUD" => Some(MaterialMaterialEnum::SmallAmethystBud),
            "MEDIUM_AMETHYST_BUD" => Some(MaterialMaterialEnum::MediumAmethystBud),
            "LARGE_AMETHYST_BUD" => Some(MaterialMaterialEnum::LargeAmethystBud),
            "AMETHYST_CLUSTER" => Some(MaterialMaterialEnum::AmethystCluster),
            "POINTED_DRIPSTONE" => Some(MaterialMaterialEnum::PointedDripstone),
            "OCHRE_FROGLIGHT" => Some(MaterialMaterialEnum::OchreFroglight),
            "VERDANT_FROGLIGHT" => Some(MaterialMaterialEnum::VerdantFroglight),
            "PEARLESCENT_FROGLIGHT" => Some(MaterialMaterialEnum::PearlescentFroglight),
            "FROGSPAWN" => Some(MaterialMaterialEnum::Frogspawn),
            "ECHO_SHARD" => Some(MaterialMaterialEnum::EchoShard),
            "BRUSH" => Some(MaterialMaterialEnum::Brush),
            "NETHERITE_UPGRADE_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::NetheriteUpgradeSmithingTemplate)
            }
            "SENTRY_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::SentryArmorTrimSmithingTemplate)
            }
            "DUNE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::DuneArmorTrimSmithingTemplate)
            }
            "COAST_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::CoastArmorTrimSmithingTemplate)
            }
            "WILD_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::WildArmorTrimSmithingTemplate)
            }
            "WARD_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::WardArmorTrimSmithingTemplate)
            }
            "EYE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::EyeArmorTrimSmithingTemplate)
            }
            "VEX_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::VexArmorTrimSmithingTemplate)
            }
            "TIDE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::TideArmorTrimSmithingTemplate)
            }
            "SNOUT_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::SnoutArmorTrimSmithingTemplate)
            }
            "RIB_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::RibArmorTrimSmithingTemplate)
            }
            "SPIRE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::SpireArmorTrimSmithingTemplate)
            }
            "WAYFINDER_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::WayfinderArmorTrimSmithingTemplate)
            }
            "SHAPER_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::ShaperArmorTrimSmithingTemplate)
            }
            "SILENCE_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::SilenceArmorTrimSmithingTemplate)
            }
            "RAISER_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::RaiserArmorTrimSmithingTemplate)
            }
            "HOST_ARMOR_TRIM_SMITHING_TEMPLATE" => {
                Some(MaterialMaterialEnum::HostArmorTrimSmithingTemplate)
            }
            "ANGLER_POTTERY_SHERD" => Some(MaterialMaterialEnum::AnglerPotterySherd),
            "ARCHER_POTTERY_SHERD" => Some(MaterialMaterialEnum::ArcherPotterySherd),
            "ARMS_UP_POTTERY_SHERD" => Some(MaterialMaterialEnum::ArmsUpPotterySherd),
            "BLADE_POTTERY_SHERD" => Some(MaterialMaterialEnum::BladePotterySherd),
            "BREWER_POTTERY_SHERD" => Some(MaterialMaterialEnum::BrewerPotterySherd),
            "BURN_POTTERY_SHERD" => Some(MaterialMaterialEnum::BurnPotterySherd),
            "DANGER_POTTERY_SHERD" => Some(MaterialMaterialEnum::DangerPotterySherd),
            "EXPLORER_POTTERY_SHERD" => Some(MaterialMaterialEnum::ExplorerPotterySherd),
            "FRIEND_POTTERY_SHERD" => Some(MaterialMaterialEnum::FriendPotterySherd),
            "HEART_POTTERY_SHERD" => Some(MaterialMaterialEnum::HeartPotterySherd),
            "HEARTBREAK_POTTERY_SHERD" => Some(MaterialMaterialEnum::HeartbreakPotterySherd),
            "HOWL_POTTERY_SHERD" => Some(MaterialMaterialEnum::HowlPotterySherd),
            "MINER_POTTERY_SHERD" => Some(MaterialMaterialEnum::MinerPotterySherd),
            "MOURNER_POTTERY_SHERD" => Some(MaterialMaterialEnum::MournerPotterySherd),
            "PLENTY_POTTERY_SHERD" => Some(MaterialMaterialEnum::PlentyPotterySherd),
            "PRIZE_POTTERY_SHERD" => Some(MaterialMaterialEnum::PrizePotterySherd),
            "SHEAF_POTTERY_SHERD" => Some(MaterialMaterialEnum::SheafPotterySherd),
            "SHELTER_POTTERY_SHERD" => Some(MaterialMaterialEnum::ShelterPotterySherd),
            "SKULL_POTTERY_SHERD" => Some(MaterialMaterialEnum::SkullPotterySherd),
            "SNORT_POTTERY_SHERD" => Some(MaterialMaterialEnum::SnortPotterySherd),
            "WATER" => Some(MaterialMaterialEnum::Water),
            "LAVA" => Some(MaterialMaterialEnum::Lava),
            "TALL_SEAGRASS" => Some(MaterialMaterialEnum::TallSeagrass),
            "PISTON_HEAD" => Some(MaterialMaterialEnum::PistonHead),
            "MOVING_PISTON" => Some(MaterialMaterialEnum::MovingPiston),
            "WALL_TORCH" => Some(MaterialMaterialEnum::WallTorch),
            "FIRE" => Some(MaterialMaterialEnum::Fire),
            "SOUL_FIRE" => Some(MaterialMaterialEnum::SoulFire),
            "REDSTONE_WIRE" => Some(MaterialMaterialEnum::RedstoneWire),
            "OAK_WALL_SIGN" => Some(MaterialMaterialEnum::OakWallSign),
            "SPRUCE_WALL_SIGN" => Some(MaterialMaterialEnum::SpruceWallSign),
            "BIRCH_WALL_SIGN" => Some(MaterialMaterialEnum::BirchWallSign),
            "ACACIA_WALL_SIGN" => Some(MaterialMaterialEnum::AcaciaWallSign),
            "CHERRY_WALL_SIGN" => Some(MaterialMaterialEnum::CherryWallSign),
            "JUNGLE_WALL_SIGN" => Some(MaterialMaterialEnum::JungleWallSign),
            "DARK_OAK_WALL_SIGN" => Some(MaterialMaterialEnum::DarkOakWallSign),
            "MANGROVE_WALL_SIGN" => Some(MaterialMaterialEnum::MangroveWallSign),
            "BAMBOO_WALL_SIGN" => Some(MaterialMaterialEnum::BambooWallSign),
            "OAK_WALL_HANGING_SIGN" => Some(MaterialMaterialEnum::OakWallHangingSign),
            "SPRUCE_WALL_HANGING_SIGN" => Some(MaterialMaterialEnum::SpruceWallHangingSign),
            "BIRCH_WALL_HANGING_SIGN" => Some(MaterialMaterialEnum::BirchWallHangingSign),
            "ACACIA_WALL_HANGING_SIGN" => Some(MaterialMaterialEnum::AcaciaWallHangingSign),
            "CHERRY_WALL_HANGING_SIGN" => Some(MaterialMaterialEnum::CherryWallHangingSign),
            "JUNGLE_WALL_HANGING_SIGN" => Some(MaterialMaterialEnum::JungleWallHangingSign),
            "DARK_OAK_WALL_HANGING_SIGN" => Some(MaterialMaterialEnum::DarkOakWallHangingSign),
            "MANGROVE_WALL_HANGING_SIGN" => Some(MaterialMaterialEnum::MangroveWallHangingSign),
            "CRIMSON_WALL_HANGING_SIGN" => Some(MaterialMaterialEnum::CrimsonWallHangingSign),
            "WARPED_WALL_HANGING_SIGN" => Some(MaterialMaterialEnum::WarpedWallHangingSign),
            "BAMBOO_WALL_HANGING_SIGN" => Some(MaterialMaterialEnum::BambooWallHangingSign),
            "REDSTONE_WALL_TORCH" => Some(MaterialMaterialEnum::RedstoneWallTorch),
            "SOUL_WALL_TORCH" => Some(MaterialMaterialEnum::SoulWallTorch),
            "NETHER_PORTAL" => Some(MaterialMaterialEnum::NetherPortal),
            "ATTACHED_PUMPKIN_STEM" => Some(MaterialMaterialEnum::AttachedPumpkinStem),
            "ATTACHED_MELON_STEM" => Some(MaterialMaterialEnum::AttachedMelonStem),
            "PUMPKIN_STEM" => Some(MaterialMaterialEnum::PumpkinStem),
            "MELON_STEM" => Some(MaterialMaterialEnum::MelonStem),
            "WATER_CAULDRON" => Some(MaterialMaterialEnum::WaterCauldron),
            "LAVA_CAULDRON" => Some(MaterialMaterialEnum::LavaCauldron),
            "POWDER_SNOW_CAULDRON" => Some(MaterialMaterialEnum::PowderSnowCauldron),
            "END_PORTAL" => Some(MaterialMaterialEnum::EndPortal),
            "COCOA" => Some(MaterialMaterialEnum::Cocoa),
            "TRIPWIRE" => Some(MaterialMaterialEnum::Tripwire),
            "POTTED_TORCHFLOWER" => Some(MaterialMaterialEnum::PottedTorchflower),
            "POTTED_OAK_SAPLING" => Some(MaterialMaterialEnum::PottedOakSapling),
            "POTTED_SPRUCE_SAPLING" => Some(MaterialMaterialEnum::PottedSpruceSapling),
            "POTTED_BIRCH_SAPLING" => Some(MaterialMaterialEnum::PottedBirchSapling),
            "POTTED_JUNGLE_SAPLING" => Some(MaterialMaterialEnum::PottedJungleSapling),
            "POTTED_ACACIA_SAPLING" => Some(MaterialMaterialEnum::PottedAcaciaSapling),
            "POTTED_CHERRY_SAPLING" => Some(MaterialMaterialEnum::PottedCherrySapling),
            "POTTED_DARK_OAK_SAPLING" => Some(MaterialMaterialEnum::PottedDarkOakSapling),
            "POTTED_MANGROVE_PROPAGULE" => Some(MaterialMaterialEnum::PottedMangrovePropagule),
            "POTTED_FERN" => Some(MaterialMaterialEnum::PottedFern),
            "POTTED_DANDELION" => Some(MaterialMaterialEnum::PottedDandelion),
            "POTTED_POPPY" => Some(MaterialMaterialEnum::PottedPoppy),
            "POTTED_BLUE_ORCHID" => Some(MaterialMaterialEnum::PottedBlueOrchid),
            "POTTED_ALLIUM" => Some(MaterialMaterialEnum::PottedAllium),
            "POTTED_AZURE_BLUET" => Some(MaterialMaterialEnum::PottedAzureBluet),
            "POTTED_RED_TULIP" => Some(MaterialMaterialEnum::PottedRedTulip),
            "POTTED_ORANGE_TULIP" => Some(MaterialMaterialEnum::PottedOrangeTulip),
            "POTTED_WHITE_TULIP" => Some(MaterialMaterialEnum::PottedWhiteTulip),
            "POTTED_PINK_TULIP" => Some(MaterialMaterialEnum::PottedPinkTulip),
            "POTTED_OXEYE_DAISY" => Some(MaterialMaterialEnum::PottedOxeyeDaisy),
            "POTTED_CORNFLOWER" => Some(MaterialMaterialEnum::PottedCornflower),
            "POTTED_LILY_OF_THE_VALLEY" => Some(MaterialMaterialEnum::PottedLilyOfTheValley),
            "POTTED_WITHER_ROSE" => Some(MaterialMaterialEnum::PottedWitherRose),
            "POTTED_RED_MUSHROOM" => Some(MaterialMaterialEnum::PottedRedMushroom),
            "POTTED_BROWN_MUSHROOM" => Some(MaterialMaterialEnum::PottedBrownMushroom),
            "POTTED_DEAD_BUSH" => Some(MaterialMaterialEnum::PottedDeadBush),
            "POTTED_CACTUS" => Some(MaterialMaterialEnum::PottedCactus),
            "CARROTS" => Some(MaterialMaterialEnum::Carrots),
            "POTATOES" => Some(MaterialMaterialEnum::Potatoes),
            "SKELETON_WALL_SKULL" => Some(MaterialMaterialEnum::SkeletonWallSkull),
            "WITHER_SKELETON_WALL_SKULL" => Some(MaterialMaterialEnum::WitherSkeletonWallSkull),
            "ZOMBIE_WALL_HEAD" => Some(MaterialMaterialEnum::ZombieWallHead),
            "PLAYER_WALL_HEAD" => Some(MaterialMaterialEnum::PlayerWallHead),
            "CREEPER_WALL_HEAD" => Some(MaterialMaterialEnum::CreeperWallHead),
            "DRAGON_WALL_HEAD" => Some(MaterialMaterialEnum::DragonWallHead),
            "PIGLIN_WALL_HEAD" => Some(MaterialMaterialEnum::PiglinWallHead),
            "WHITE_WALL_BANNER" => Some(MaterialMaterialEnum::WhiteWallBanner),
            "ORANGE_WALL_BANNER" => Some(MaterialMaterialEnum::OrangeWallBanner),
            "MAGENTA_WALL_BANNER" => Some(MaterialMaterialEnum::MagentaWallBanner),
            "LIGHT_BLUE_WALL_BANNER" => Some(MaterialMaterialEnum::LightBlueWallBanner),
            "YELLOW_WALL_BANNER" => Some(MaterialMaterialEnum::YellowWallBanner),
            "LIME_WALL_BANNER" => Some(MaterialMaterialEnum::LimeWallBanner),
            "PINK_WALL_BANNER" => Some(MaterialMaterialEnum::PinkWallBanner),
            "GRAY_WALL_BANNER" => Some(MaterialMaterialEnum::GrayWallBanner),
            "LIGHT_GRAY_WALL_BANNER" => Some(MaterialMaterialEnum::LightGrayWallBanner),
            "CYAN_WALL_BANNER" => Some(MaterialMaterialEnum::CyanWallBanner),
            "PURPLE_WALL_BANNER" => Some(MaterialMaterialEnum::PurpleWallBanner),
            "BLUE_WALL_BANNER" => Some(MaterialMaterialEnum::BlueWallBanner),
            "BROWN_WALL_BANNER" => Some(MaterialMaterialEnum::BrownWallBanner),
            "GREEN_WALL_BANNER" => Some(MaterialMaterialEnum::GreenWallBanner),
            "RED_WALL_BANNER" => Some(MaterialMaterialEnum::RedWallBanner),
            "BLACK_WALL_BANNER" => Some(MaterialMaterialEnum::BlackWallBanner),
            "TORCHFLOWER_CROP" => Some(MaterialMaterialEnum::TorchflowerCrop),
            "PITCHER_CROP" => Some(MaterialMaterialEnum::PitcherCrop),
            "BEETROOTS" => Some(MaterialMaterialEnum::Beetroots),
            "END_GATEWAY" => Some(MaterialMaterialEnum::EndGateway),
            "FROSTED_ICE" => Some(MaterialMaterialEnum::FrostedIce),
            "KELP_PLANT" => Some(MaterialMaterialEnum::KelpPlant),
            "DEAD_TUBE_CORAL_WALL_FAN" => Some(MaterialMaterialEnum::DeadTubeCoralWallFan),
            "DEAD_BRAIN_CORAL_WALL_FAN" => Some(MaterialMaterialEnum::DeadBrainCoralWallFan),
            "DEAD_BUBBLE_CORAL_WALL_FAN" => Some(MaterialMaterialEnum::DeadBubbleCoralWallFan),
            "DEAD_FIRE_CORAL_WALL_FAN" => Some(MaterialMaterialEnum::DeadFireCoralWallFan),
            "DEAD_HORN_CORAL_WALL_FAN" => Some(MaterialMaterialEnum::DeadHornCoralWallFan),
            "TUBE_CORAL_WALL_FAN" => Some(MaterialMaterialEnum::TubeCoralWallFan),
            "BRAIN_CORAL_WALL_FAN" => Some(MaterialMaterialEnum::BrainCoralWallFan),
            "BUBBLE_CORAL_WALL_FAN" => Some(MaterialMaterialEnum::BubbleCoralWallFan),
            "FIRE_CORAL_WALL_FAN" => Some(MaterialMaterialEnum::FireCoralWallFan),
            "HORN_CORAL_WALL_FAN" => Some(MaterialMaterialEnum::HornCoralWallFan),
            "BAMBOO_SAPLING" => Some(MaterialMaterialEnum::BambooSapling),
            "POTTED_BAMBOO" => Some(MaterialMaterialEnum::PottedBamboo),
            "VOID_AIR" => Some(MaterialMaterialEnum::VoidAir),
            "CAVE_AIR" => Some(MaterialMaterialEnum::CaveAir),
            "BUBBLE_COLUMN" => Some(MaterialMaterialEnum::BubbleColumn),
            "SWEET_BERRY_BUSH" => Some(MaterialMaterialEnum::SweetBerryBush),
            "WEEPING_VINES_PLANT" => Some(MaterialMaterialEnum::WeepingVinesPlant),
            "TWISTING_VINES_PLANT" => Some(MaterialMaterialEnum::TwistingVinesPlant),
            "CRIMSON_WALL_SIGN" => Some(MaterialMaterialEnum::CrimsonWallSign),
            "WARPED_WALL_SIGN" => Some(MaterialMaterialEnum::WarpedWallSign),
            "POTTED_CRIMSON_FUNGUS" => Some(MaterialMaterialEnum::PottedCrimsonFungus),
            "POTTED_WARPED_FUNGUS" => Some(MaterialMaterialEnum::PottedWarpedFungus),
            "POTTED_CRIMSON_ROOTS" => Some(MaterialMaterialEnum::PottedCrimsonRoots),
            "POTTED_WARPED_ROOTS" => Some(MaterialMaterialEnum::PottedWarpedRoots),
            "CANDLE_CAKE" => Some(MaterialMaterialEnum::CandleCake),
            "WHITE_CANDLE_CAKE" => Some(MaterialMaterialEnum::WhiteCandleCake),
            "ORANGE_CANDLE_CAKE" => Some(MaterialMaterialEnum::OrangeCandleCake),
            "MAGENTA_CANDLE_CAKE" => Some(MaterialMaterialEnum::MagentaCandleCake),
            "LIGHT_BLUE_CANDLE_CAKE" => Some(MaterialMaterialEnum::LightBlueCandleCake),
            "YELLOW_CANDLE_CAKE" => Some(MaterialMaterialEnum::YellowCandleCake),
            "LIME_CANDLE_CAKE" => Some(MaterialMaterialEnum::LimeCandleCake),
            "PINK_CANDLE_CAKE" => Some(MaterialMaterialEnum::PinkCandleCake),
            "GRAY_CANDLE_CAKE" => Some(MaterialMaterialEnum::GrayCandleCake),
            "LIGHT_GRAY_CANDLE_CAKE" => Some(MaterialMaterialEnum::LightGrayCandleCake),
            "CYAN_CANDLE_CAKE" => Some(MaterialMaterialEnum::CyanCandleCake),
            "PURPLE_CANDLE_CAKE" => Some(MaterialMaterialEnum::PurpleCandleCake),
            "BLUE_CANDLE_CAKE" => Some(MaterialMaterialEnum::BlueCandleCake),
            "BROWN_CANDLE_CAKE" => Some(MaterialMaterialEnum::BrownCandleCake),
            "GREEN_CANDLE_CAKE" => Some(MaterialMaterialEnum::GreenCandleCake),
            "RED_CANDLE_CAKE" => Some(MaterialMaterialEnum::RedCandleCake),
            "BLACK_CANDLE_CAKE" => Some(MaterialMaterialEnum::BlackCandleCake),
            "POWDER_SNOW" => Some(MaterialMaterialEnum::PowderSnow),
            "CAVE_VINES" => Some(MaterialMaterialEnum::CaveVines),
            "CAVE_VINES_PLANT" => Some(MaterialMaterialEnum::CaveVinesPlant),
            "BIG_DRIPLEAF_STEM" => Some(MaterialMaterialEnum::BigDripleafStem),
            "POTTED_AZALEA_BUSH" => Some(MaterialMaterialEnum::PottedAzaleaBush),
            "POTTED_FLOWERING_AZALEA_BUSH" => Some(MaterialMaterialEnum::PottedFloweringAzaleaBush),
            "LEGACY_AIR" => Some(MaterialMaterialEnum::LegacyAir),
            "LEGACY_STONE" => Some(MaterialMaterialEnum::LegacyStone),
            "LEGACY_GRASS" => Some(MaterialMaterialEnum::LegacyGrass),
            "LEGACY_DIRT" => Some(MaterialMaterialEnum::LegacyDirt),
            "LEGACY_COBBLESTONE" => Some(MaterialMaterialEnum::LegacyCobblestone),
            "LEGACY_WOOD" => Some(MaterialMaterialEnum::LegacyWood),
            "LEGACY_SAPLING" => Some(MaterialMaterialEnum::LegacySapling),
            "LEGACY_BEDROCK" => Some(MaterialMaterialEnum::LegacyBedrock),
            "LEGACY_WATER" => Some(MaterialMaterialEnum::LegacyWater),
            "LEGACY_STATIONARY_WATER" => Some(MaterialMaterialEnum::LegacyStationaryWater),
            "LEGACY_LAVA" => Some(MaterialMaterialEnum::LegacyLava),
            "LEGACY_STATIONARY_LAVA" => Some(MaterialMaterialEnum::LegacyStationaryLava),
            "LEGACY_SAND" => Some(MaterialMaterialEnum::LegacySand),
            "LEGACY_GRAVEL" => Some(MaterialMaterialEnum::LegacyGravel),
            "LEGACY_GOLD_ORE" => Some(MaterialMaterialEnum::LegacyGoldOre),
            "LEGACY_IRON_ORE" => Some(MaterialMaterialEnum::LegacyIronOre),
            "LEGACY_COAL_ORE" => Some(MaterialMaterialEnum::LegacyCoalOre),
            "LEGACY_LOG" => Some(MaterialMaterialEnum::LegacyLog),
            "LEGACY_LEAVES" => Some(MaterialMaterialEnum::LegacyLeaves),
            "LEGACY_SPONGE" => Some(MaterialMaterialEnum::LegacySponge),
            "LEGACY_GLASS" => Some(MaterialMaterialEnum::LegacyGlass),
            "LEGACY_LAPIS_ORE" => Some(MaterialMaterialEnum::LegacyLapisOre),
            "LEGACY_LAPIS_BLOCK" => Some(MaterialMaterialEnum::LegacyLapisBlock),
            "LEGACY_DISPENSER" => Some(MaterialMaterialEnum::LegacyDispenser),
            "LEGACY_SANDSTONE" => Some(MaterialMaterialEnum::LegacySandstone),
            "LEGACY_NOTE_BLOCK" => Some(MaterialMaterialEnum::LegacyNoteBlock),
            "LEGACY_BED_BLOCK" => Some(MaterialMaterialEnum::LegacyBedBlock),
            "LEGACY_POWERED_RAIL" => Some(MaterialMaterialEnum::LegacyPoweredRail),
            "LEGACY_DETECTOR_RAIL" => Some(MaterialMaterialEnum::LegacyDetectorRail),
            "LEGACY_PISTON_STICKY_BASE" => Some(MaterialMaterialEnum::LegacyPistonStickyBase),
            "LEGACY_WEB" => Some(MaterialMaterialEnum::LegacyWeb),
            "LEGACY_LONG_GRASS" => Some(MaterialMaterialEnum::LegacyLongGrass),
            "LEGACY_DEAD_BUSH" => Some(MaterialMaterialEnum::LegacyDeadBush),
            "LEGACY_PISTON_BASE" => Some(MaterialMaterialEnum::LegacyPistonBase),
            "LEGACY_PISTON_EXTENSION" => Some(MaterialMaterialEnum::LegacyPistonExtension),
            "LEGACY_WOOL" => Some(MaterialMaterialEnum::LegacyWool),
            "LEGACY_PISTON_MOVING_PIECE" => Some(MaterialMaterialEnum::LegacyPistonMovingPiece),
            "LEGACY_YELLOW_FLOWER" => Some(MaterialMaterialEnum::LegacyYellowFlower),
            "LEGACY_RED_ROSE" => Some(MaterialMaterialEnum::LegacyRedRose),
            "LEGACY_BROWN_MUSHROOM" => Some(MaterialMaterialEnum::LegacyBrownMushroom),
            "LEGACY_RED_MUSHROOM" => Some(MaterialMaterialEnum::LegacyRedMushroom),
            "LEGACY_GOLD_BLOCK" => Some(MaterialMaterialEnum::LegacyGoldBlock),
            "LEGACY_IRON_BLOCK" => Some(MaterialMaterialEnum::LegacyIronBlock),
            "LEGACY_DOUBLE_STEP" => Some(MaterialMaterialEnum::LegacyDoubleStep),
            "LEGACY_STEP" => Some(MaterialMaterialEnum::LegacyStep),
            "LEGACY_BRICK" => Some(MaterialMaterialEnum::LegacyBrick),
            "LEGACY_TNT" => Some(MaterialMaterialEnum::LegacyTnt),
            "LEGACY_BOOKSHELF" => Some(MaterialMaterialEnum::LegacyBookshelf),
            "LEGACY_MOSSY_COBBLESTONE" => Some(MaterialMaterialEnum::LegacyMossyCobblestone),
            "LEGACY_OBSIDIAN" => Some(MaterialMaterialEnum::LegacyObsidian),
            "LEGACY_TORCH" => Some(MaterialMaterialEnum::LegacyTorch),
            "LEGACY_FIRE" => Some(MaterialMaterialEnum::LegacyFire),
            "LEGACY_MOB_SPAWNER" => Some(MaterialMaterialEnum::LegacyMobSpawner),
            "LEGACY_WOOD_STAIRS" => Some(MaterialMaterialEnum::LegacyWoodStairs),
            "LEGACY_CHEST" => Some(MaterialMaterialEnum::LegacyChest),
            "LEGACY_REDSTONE_WIRE" => Some(MaterialMaterialEnum::LegacyRedstoneWire),
            "LEGACY_DIAMOND_ORE" => Some(MaterialMaterialEnum::LegacyDiamondOre),
            "LEGACY_DIAMOND_BLOCK" => Some(MaterialMaterialEnum::LegacyDiamondBlock),
            "LEGACY_WORKBENCH" => Some(MaterialMaterialEnum::LegacyWorkbench),
            "LEGACY_CROPS" => Some(MaterialMaterialEnum::LegacyCrops),
            "LEGACY_SOIL" => Some(MaterialMaterialEnum::LegacySoil),
            "LEGACY_FURNACE" => Some(MaterialMaterialEnum::LegacyFurnace),
            "LEGACY_BURNING_FURNACE" => Some(MaterialMaterialEnum::LegacyBurningFurnace),
            "LEGACY_SIGN_POST" => Some(MaterialMaterialEnum::LegacySignPost),
            "LEGACY_WOODEN_DOOR" => Some(MaterialMaterialEnum::LegacyWoodenDoor),
            "LEGACY_LADDER" => Some(MaterialMaterialEnum::LegacyLadder),
            "LEGACY_RAILS" => Some(MaterialMaterialEnum::LegacyRails),
            "LEGACY_COBBLESTONE_STAIRS" => Some(MaterialMaterialEnum::LegacyCobblestoneStairs),
            "LEGACY_WALL_SIGN" => Some(MaterialMaterialEnum::LegacyWallSign),
            "LEGACY_LEVER" => Some(MaterialMaterialEnum::LegacyLever),
            "LEGACY_STONE_PLATE" => Some(MaterialMaterialEnum::LegacyStonePlate),
            "LEGACY_IRON_DOOR_BLOCK" => Some(MaterialMaterialEnum::LegacyIronDoorBlock),
            "LEGACY_WOOD_PLATE" => Some(MaterialMaterialEnum::LegacyWoodPlate),
            "LEGACY_REDSTONE_ORE" => Some(MaterialMaterialEnum::LegacyRedstoneOre),
            "LEGACY_GLOWING_REDSTONE_ORE" => Some(MaterialMaterialEnum::LegacyGlowingRedstoneOre),
            "LEGACY_REDSTONE_TORCH_OFF" => Some(MaterialMaterialEnum::LegacyRedstoneTorchOff),
            "LEGACY_REDSTONE_TORCH_ON" => Some(MaterialMaterialEnum::LegacyRedstoneTorchOn),
            "LEGACY_STONE_BUTTON" => Some(MaterialMaterialEnum::LegacyStoneButton),
            "LEGACY_SNOW" => Some(MaterialMaterialEnum::LegacySnow),
            "LEGACY_ICE" => Some(MaterialMaterialEnum::LegacyIce),
            "LEGACY_SNOW_BLOCK" => Some(MaterialMaterialEnum::LegacySnowBlock),
            "LEGACY_CACTUS" => Some(MaterialMaterialEnum::LegacyCactus),
            "LEGACY_CLAY" => Some(MaterialMaterialEnum::LegacyClay),
            "LEGACY_SUGAR_CANE_BLOCK" => Some(MaterialMaterialEnum::LegacySugarCaneBlock),
            "LEGACY_JUKEBOX" => Some(MaterialMaterialEnum::LegacyJukebox),
            "LEGACY_FENCE" => Some(MaterialMaterialEnum::LegacyFence),
            "LEGACY_PUMPKIN" => Some(MaterialMaterialEnum::LegacyPumpkin),
            "LEGACY_NETHERRACK" => Some(MaterialMaterialEnum::LegacyNetherrack),
            "LEGACY_SOUL_SAND" => Some(MaterialMaterialEnum::LegacySoulSand),
            "LEGACY_GLOWSTONE" => Some(MaterialMaterialEnum::LegacyGlowstone),
            "LEGACY_PORTAL" => Some(MaterialMaterialEnum::LegacyPortal),
            "LEGACY_JACK_O_LANTERN" => Some(MaterialMaterialEnum::LegacyJackOLantern),
            "LEGACY_CAKE_BLOCK" => Some(MaterialMaterialEnum::LegacyCakeBlock),
            "LEGACY_DIODE_BLOCK_OFF" => Some(MaterialMaterialEnum::LegacyDiodeBlockOff),
            "LEGACY_DIODE_BLOCK_ON" => Some(MaterialMaterialEnum::LegacyDiodeBlockOn),
            "LEGACY_STAINED_GLASS" => Some(MaterialMaterialEnum::LegacyStainedGlass),
            "LEGACY_TRAP_DOOR" => Some(MaterialMaterialEnum::LegacyTrapDoor),
            "LEGACY_MONSTER_EGGS" => Some(MaterialMaterialEnum::LegacyMonsterEggs),
            "LEGACY_SMOOTH_BRICK" => Some(MaterialMaterialEnum::LegacySmoothBrick),
            "LEGACY_HUGE_MUSHROOM_1" => Some(MaterialMaterialEnum::LegacyHugeMushroom1),
            "LEGACY_HUGE_MUSHROOM_2" => Some(MaterialMaterialEnum::LegacyHugeMushroom2),
            "LEGACY_IRON_FENCE" => Some(MaterialMaterialEnum::LegacyIronFence),
            "LEGACY_THIN_GLASS" => Some(MaterialMaterialEnum::LegacyThinGlass),
            "LEGACY_MELON_BLOCK" => Some(MaterialMaterialEnum::LegacyMelonBlock),
            "LEGACY_PUMPKIN_STEM" => Some(MaterialMaterialEnum::LegacyPumpkinStem),
            "LEGACY_MELON_STEM" => Some(MaterialMaterialEnum::LegacyMelonStem),
            "LEGACY_VINE" => Some(MaterialMaterialEnum::LegacyVine),
            "LEGACY_FENCE_GATE" => Some(MaterialMaterialEnum::LegacyFenceGate),
            "LEGACY_BRICK_STAIRS" => Some(MaterialMaterialEnum::LegacyBrickStairs),
            "LEGACY_SMOOTH_STAIRS" => Some(MaterialMaterialEnum::LegacySmoothStairs),
            "LEGACY_MYCEL" => Some(MaterialMaterialEnum::LegacyMycel),
            "LEGACY_WATER_LILY" => Some(MaterialMaterialEnum::LegacyWaterLily),
            "LEGACY_NETHER_BRICK" => Some(MaterialMaterialEnum::LegacyNetherBrick),
            "LEGACY_NETHER_FENCE" => Some(MaterialMaterialEnum::LegacyNetherFence),
            "LEGACY_NETHER_BRICK_STAIRS" => Some(MaterialMaterialEnum::LegacyNetherBrickStairs),
            "LEGACY_NETHER_WARTS" => Some(MaterialMaterialEnum::LegacyNetherWarts),
            "LEGACY_ENCHANTMENT_TABLE" => Some(MaterialMaterialEnum::LegacyEnchantmentTable),
            "LEGACY_BREWING_STAND" => Some(MaterialMaterialEnum::LegacyBrewingStand),
            "LEGACY_CAULDRON" => Some(MaterialMaterialEnum::LegacyCauldron),
            "LEGACY_ENDER_PORTAL" => Some(MaterialMaterialEnum::LegacyEnderPortal),
            "LEGACY_ENDER_PORTAL_FRAME" => Some(MaterialMaterialEnum::LegacyEnderPortalFrame),
            "LEGACY_ENDER_STONE" => Some(MaterialMaterialEnum::LegacyEnderStone),
            "LEGACY_DRAGON_EGG" => Some(MaterialMaterialEnum::LegacyDragonEgg),
            "LEGACY_REDSTONE_LAMP_OFF" => Some(MaterialMaterialEnum::LegacyRedstoneLampOff),
            "LEGACY_REDSTONE_LAMP_ON" => Some(MaterialMaterialEnum::LegacyRedstoneLampOn),
            "LEGACY_WOOD_DOUBLE_STEP" => Some(MaterialMaterialEnum::LegacyWoodDoubleStep),
            "LEGACY_WOOD_STEP" => Some(MaterialMaterialEnum::LegacyWoodStep),
            "LEGACY_COCOA" => Some(MaterialMaterialEnum::LegacyCocoa),
            "LEGACY_SANDSTONE_STAIRS" => Some(MaterialMaterialEnum::LegacySandstoneStairs),
            "LEGACY_EMERALD_ORE" => Some(MaterialMaterialEnum::LegacyEmeraldOre),
            "LEGACY_ENDER_CHEST" => Some(MaterialMaterialEnum::LegacyEnderChest),
            "LEGACY_TRIPWIRE_HOOK" => Some(MaterialMaterialEnum::LegacyTripwireHook),
            "LEGACY_TRIPWIRE" => Some(MaterialMaterialEnum::LegacyTripwire),
            "LEGACY_EMERALD_BLOCK" => Some(MaterialMaterialEnum::LegacyEmeraldBlock),
            "LEGACY_SPRUCE_WOOD_STAIRS" => Some(MaterialMaterialEnum::LegacySpruceWoodStairs),
            "LEGACY_BIRCH_WOOD_STAIRS" => Some(MaterialMaterialEnum::LegacyBirchWoodStairs),
            "LEGACY_JUNGLE_WOOD_STAIRS" => Some(MaterialMaterialEnum::LegacyJungleWoodStairs),
            "LEGACY_COMMAND" => Some(MaterialMaterialEnum::LegacyCommand),
            "LEGACY_BEACON" => Some(MaterialMaterialEnum::LegacyBeacon),
            "LEGACY_COBBLE_WALL" => Some(MaterialMaterialEnum::LegacyCobbleWall),
            "LEGACY_FLOWER_POT" => Some(MaterialMaterialEnum::LegacyFlowerPot),
            "LEGACY_CARROT" => Some(MaterialMaterialEnum::LegacyCarrot),
            "LEGACY_POTATO" => Some(MaterialMaterialEnum::LegacyPotato),
            "LEGACY_WOOD_BUTTON" => Some(MaterialMaterialEnum::LegacyWoodButton),
            "LEGACY_SKULL" => Some(MaterialMaterialEnum::LegacySkull),
            "LEGACY_ANVIL" => Some(MaterialMaterialEnum::LegacyAnvil),
            "LEGACY_TRAPPED_CHEST" => Some(MaterialMaterialEnum::LegacyTrappedChest),
            "LEGACY_GOLD_PLATE" => Some(MaterialMaterialEnum::LegacyGoldPlate),
            "LEGACY_IRON_PLATE" => Some(MaterialMaterialEnum::LegacyIronPlate),
            "LEGACY_REDSTONE_COMPARATOR_OFF" => {
                Some(MaterialMaterialEnum::LegacyRedstoneComparatorOff)
            }
            "LEGACY_REDSTONE_COMPARATOR_ON" => {
                Some(MaterialMaterialEnum::LegacyRedstoneComparatorOn)
            }
            "LEGACY_DAYLIGHT_DETECTOR" => Some(MaterialMaterialEnum::LegacyDaylightDetector),
            "LEGACY_REDSTONE_BLOCK" => Some(MaterialMaterialEnum::LegacyRedstoneBlock),
            "LEGACY_QUARTZ_ORE" => Some(MaterialMaterialEnum::LegacyQuartzOre),
            "LEGACY_HOPPER" => Some(MaterialMaterialEnum::LegacyHopper),
            "LEGACY_QUARTZ_BLOCK" => Some(MaterialMaterialEnum::LegacyQuartzBlock),
            "LEGACY_QUARTZ_STAIRS" => Some(MaterialMaterialEnum::LegacyQuartzStairs),
            "LEGACY_ACTIVATOR_RAIL" => Some(MaterialMaterialEnum::LegacyActivatorRail),
            "LEGACY_DROPPER" => Some(MaterialMaterialEnum::LegacyDropper),
            "LEGACY_STAINED_CLAY" => Some(MaterialMaterialEnum::LegacyStainedClay),
            "LEGACY_STAINED_GLASS_PANE" => Some(MaterialMaterialEnum::LegacyStainedGlassPane),
            "LEGACY_LEAVES_2" => Some(MaterialMaterialEnum::LegacyLeaves2),
            "LEGACY_LOG_2" => Some(MaterialMaterialEnum::LegacyLog2),
            "LEGACY_ACACIA_STAIRS" => Some(MaterialMaterialEnum::LegacyAcaciaStairs),
            "LEGACY_DARK_OAK_STAIRS" => Some(MaterialMaterialEnum::LegacyDarkOakStairs),
            "LEGACY_SLIME_BLOCK" => Some(MaterialMaterialEnum::LegacySlimeBlock),
            "LEGACY_BARRIER" => Some(MaterialMaterialEnum::LegacyBarrier),
            "LEGACY_IRON_TRAPDOOR" => Some(MaterialMaterialEnum::LegacyIronTrapdoor),
            "LEGACY_PRISMARINE" => Some(MaterialMaterialEnum::LegacyPrismarine),
            "LEGACY_SEA_LANTERN" => Some(MaterialMaterialEnum::LegacySeaLantern),
            "LEGACY_HAY_BLOCK" => Some(MaterialMaterialEnum::LegacyHayBlock),
            "LEGACY_CARPET" => Some(MaterialMaterialEnum::LegacyCarpet),
            "LEGACY_HARD_CLAY" => Some(MaterialMaterialEnum::LegacyHardClay),
            "LEGACY_COAL_BLOCK" => Some(MaterialMaterialEnum::LegacyCoalBlock),
            "LEGACY_PACKED_ICE" => Some(MaterialMaterialEnum::LegacyPackedIce),
            "LEGACY_DOUBLE_PLANT" => Some(MaterialMaterialEnum::LegacyDoublePlant),
            "LEGACY_STANDING_BANNER" => Some(MaterialMaterialEnum::LegacyStandingBanner),
            "LEGACY_WALL_BANNER" => Some(MaterialMaterialEnum::LegacyWallBanner),
            "LEGACY_DAYLIGHT_DETECTOR_INVERTED" => {
                Some(MaterialMaterialEnum::LegacyDaylightDetectorInverted)
            }
            "LEGACY_RED_SANDSTONE" => Some(MaterialMaterialEnum::LegacyRedSandstone),
            "LEGACY_RED_SANDSTONE_STAIRS" => Some(MaterialMaterialEnum::LegacyRedSandstoneStairs),
            "LEGACY_DOUBLE_STONE_SLAB2" => Some(MaterialMaterialEnum::LegacyDoubleStoneSlab2),
            "LEGACY_STONE_SLAB2" => Some(MaterialMaterialEnum::LegacyStoneSlab2),
            "LEGACY_SPRUCE_FENCE_GATE" => Some(MaterialMaterialEnum::LegacySpruceFenceGate),
            "LEGACY_BIRCH_FENCE_GATE" => Some(MaterialMaterialEnum::LegacyBirchFenceGate),
            "LEGACY_JUNGLE_FENCE_GATE" => Some(MaterialMaterialEnum::LegacyJungleFenceGate),
            "LEGACY_DARK_OAK_FENCE_GATE" => Some(MaterialMaterialEnum::LegacyDarkOakFenceGate),
            "LEGACY_ACACIA_FENCE_GATE" => Some(MaterialMaterialEnum::LegacyAcaciaFenceGate),
            "LEGACY_SPRUCE_FENCE" => Some(MaterialMaterialEnum::LegacySpruceFence),
            "LEGACY_BIRCH_FENCE" => Some(MaterialMaterialEnum::LegacyBirchFence),
            "LEGACY_JUNGLE_FENCE" => Some(MaterialMaterialEnum::LegacyJungleFence),
            "LEGACY_DARK_OAK_FENCE" => Some(MaterialMaterialEnum::LegacyDarkOakFence),
            "LEGACY_ACACIA_FENCE" => Some(MaterialMaterialEnum::LegacyAcaciaFence),
            "LEGACY_SPRUCE_DOOR" => Some(MaterialMaterialEnum::LegacySpruceDoor),
            "LEGACY_BIRCH_DOOR" => Some(MaterialMaterialEnum::LegacyBirchDoor),
            "LEGACY_JUNGLE_DOOR" => Some(MaterialMaterialEnum::LegacyJungleDoor),
            "LEGACY_ACACIA_DOOR" => Some(MaterialMaterialEnum::LegacyAcaciaDoor),
            "LEGACY_DARK_OAK_DOOR" => Some(MaterialMaterialEnum::LegacyDarkOakDoor),
            "LEGACY_END_ROD" => Some(MaterialMaterialEnum::LegacyEndRod),
            "LEGACY_CHORUS_PLANT" => Some(MaterialMaterialEnum::LegacyChorusPlant),
            "LEGACY_CHORUS_FLOWER" => Some(MaterialMaterialEnum::LegacyChorusFlower),
            "LEGACY_PURPUR_BLOCK" => Some(MaterialMaterialEnum::LegacyPurpurBlock),
            "LEGACY_PURPUR_PILLAR" => Some(MaterialMaterialEnum::LegacyPurpurPillar),
            "LEGACY_PURPUR_STAIRS" => Some(MaterialMaterialEnum::LegacyPurpurStairs),
            "LEGACY_PURPUR_DOUBLE_SLAB" => Some(MaterialMaterialEnum::LegacyPurpurDoubleSlab),
            "LEGACY_PURPUR_SLAB" => Some(MaterialMaterialEnum::LegacyPurpurSlab),
            "LEGACY_END_BRICKS" => Some(MaterialMaterialEnum::LegacyEndBricks),
            "LEGACY_BEETROOT_BLOCK" => Some(MaterialMaterialEnum::LegacyBeetrootBlock),
            "LEGACY_GRASS_PATH" => Some(MaterialMaterialEnum::LegacyGrassPath),
            "LEGACY_END_GATEWAY" => Some(MaterialMaterialEnum::LegacyEndGateway),
            "LEGACY_COMMAND_REPEATING" => Some(MaterialMaterialEnum::LegacyCommandRepeating),
            "LEGACY_COMMAND_CHAIN" => Some(MaterialMaterialEnum::LegacyCommandChain),
            "LEGACY_FROSTED_ICE" => Some(MaterialMaterialEnum::LegacyFrostedIce),
            "LEGACY_MAGMA" => Some(MaterialMaterialEnum::LegacyMagma),
            "LEGACY_NETHER_WART_BLOCK" => Some(MaterialMaterialEnum::LegacyNetherWartBlock),
            "LEGACY_RED_NETHER_BRICK" => Some(MaterialMaterialEnum::LegacyRedNetherBrick),
            "LEGACY_BONE_BLOCK" => Some(MaterialMaterialEnum::LegacyBoneBlock),
            "LEGACY_STRUCTURE_VOID" => Some(MaterialMaterialEnum::LegacyStructureVoid),
            "LEGACY_OBSERVER" => Some(MaterialMaterialEnum::LegacyObserver),
            "LEGACY_WHITE_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyWhiteShulkerBox),
            "LEGACY_ORANGE_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyOrangeShulkerBox),
            "LEGACY_MAGENTA_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyMagentaShulkerBox),
            "LEGACY_LIGHT_BLUE_SHULKER_BOX" => {
                Some(MaterialMaterialEnum::LegacyLightBlueShulkerBox)
            }
            "LEGACY_YELLOW_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyYellowShulkerBox),
            "LEGACY_LIME_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyLimeShulkerBox),
            "LEGACY_PINK_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyPinkShulkerBox),
            "LEGACY_GRAY_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyGrayShulkerBox),
            "LEGACY_SILVER_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacySilverShulkerBox),
            "LEGACY_CYAN_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyCyanShulkerBox),
            "LEGACY_PURPLE_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyPurpleShulkerBox),
            "LEGACY_BLUE_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyBlueShulkerBox),
            "LEGACY_BROWN_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyBrownShulkerBox),
            "LEGACY_GREEN_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyGreenShulkerBox),
            "LEGACY_RED_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyRedShulkerBox),
            "LEGACY_BLACK_SHULKER_BOX" => Some(MaterialMaterialEnum::LegacyBlackShulkerBox),
            "LEGACY_WHITE_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyWhiteGlazedTerracotta)
            }
            "LEGACY_ORANGE_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyOrangeGlazedTerracotta)
            }
            "LEGACY_MAGENTA_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyMagentaGlazedTerracotta)
            }
            "LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyLightBlueGlazedTerracotta)
            }
            "LEGACY_YELLOW_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyYellowGlazedTerracotta)
            }
            "LEGACY_LIME_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyLimeGlazedTerracotta)
            }
            "LEGACY_PINK_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyPinkGlazedTerracotta)
            }
            "LEGACY_GRAY_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyGrayGlazedTerracotta)
            }
            "LEGACY_SILVER_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacySilverGlazedTerracotta)
            }
            "LEGACY_CYAN_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyCyanGlazedTerracotta)
            }
            "LEGACY_PURPLE_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyPurpleGlazedTerracotta)
            }
            "LEGACY_BLUE_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyBlueGlazedTerracotta)
            }
            "LEGACY_BROWN_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyBrownGlazedTerracotta)
            }
            "LEGACY_GREEN_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyGreenGlazedTerracotta)
            }
            "LEGACY_RED_GLAZED_TERRACOTTA" => Some(MaterialMaterialEnum::LegacyRedGlazedTerracotta),
            "LEGACY_BLACK_GLAZED_TERRACOTTA" => {
                Some(MaterialMaterialEnum::LegacyBlackGlazedTerracotta)
            }
            "LEGACY_CONCRETE" => Some(MaterialMaterialEnum::LegacyConcrete),
            "LEGACY_CONCRETE_POWDER" => Some(MaterialMaterialEnum::LegacyConcretePowder),
            "LEGACY_STRUCTURE_BLOCK" => Some(MaterialMaterialEnum::LegacyStructureBlock),
            "LEGACY_IRON_SPADE" => Some(MaterialMaterialEnum::LegacyIronSpade),
            "LEGACY_IRON_PICKAXE" => Some(MaterialMaterialEnum::LegacyIronPickaxe),
            "LEGACY_IRON_AXE" => Some(MaterialMaterialEnum::LegacyIronAxe),
            "LEGACY_FLINT_AND_STEEL" => Some(MaterialMaterialEnum::LegacyFlintAndSteel),
            "LEGACY_APPLE" => Some(MaterialMaterialEnum::LegacyApple),
            "LEGACY_BOW" => Some(MaterialMaterialEnum::LegacyBow),
            "LEGACY_ARROW" => Some(MaterialMaterialEnum::LegacyArrow),
            "LEGACY_COAL" => Some(MaterialMaterialEnum::LegacyCoal),
            "LEGACY_DIAMOND" => Some(MaterialMaterialEnum::LegacyDiamond),
            "LEGACY_IRON_INGOT" => Some(MaterialMaterialEnum::LegacyIronIngot),
            "LEGACY_GOLD_INGOT" => Some(MaterialMaterialEnum::LegacyGoldIngot),
            "LEGACY_IRON_SWORD" => Some(MaterialMaterialEnum::LegacyIronSword),
            "LEGACY_WOOD_SWORD" => Some(MaterialMaterialEnum::LegacyWoodSword),
            "LEGACY_WOOD_SPADE" => Some(MaterialMaterialEnum::LegacyWoodSpade),
            "LEGACY_WOOD_PICKAXE" => Some(MaterialMaterialEnum::LegacyWoodPickaxe),
            "LEGACY_WOOD_AXE" => Some(MaterialMaterialEnum::LegacyWoodAxe),
            "LEGACY_STONE_SWORD" => Some(MaterialMaterialEnum::LegacyStoneSword),
            "LEGACY_STONE_SPADE" => Some(MaterialMaterialEnum::LegacyStoneSpade),
            "LEGACY_STONE_PICKAXE" => Some(MaterialMaterialEnum::LegacyStonePickaxe),
            "LEGACY_STONE_AXE" => Some(MaterialMaterialEnum::LegacyStoneAxe),
            "LEGACY_DIAMOND_SWORD" => Some(MaterialMaterialEnum::LegacyDiamondSword),
            "LEGACY_DIAMOND_SPADE" => Some(MaterialMaterialEnum::LegacyDiamondSpade),
            "LEGACY_DIAMOND_PICKAXE" => Some(MaterialMaterialEnum::LegacyDiamondPickaxe),
            "LEGACY_DIAMOND_AXE" => Some(MaterialMaterialEnum::LegacyDiamondAxe),
            "LEGACY_STICK" => Some(MaterialMaterialEnum::LegacyStick),
            "LEGACY_BOWL" => Some(MaterialMaterialEnum::LegacyBowl),
            "LEGACY_MUSHROOM_SOUP" => Some(MaterialMaterialEnum::LegacyMushroomSoup),
            "LEGACY_GOLD_SWORD" => Some(MaterialMaterialEnum::LegacyGoldSword),
            "LEGACY_GOLD_SPADE" => Some(MaterialMaterialEnum::LegacyGoldSpade),
            "LEGACY_GOLD_PICKAXE" => Some(MaterialMaterialEnum::LegacyGoldPickaxe),
            "LEGACY_GOLD_AXE" => Some(MaterialMaterialEnum::LegacyGoldAxe),
            "LEGACY_STRING" => Some(MaterialMaterialEnum::LegacyString),
            "LEGACY_FEATHER" => Some(MaterialMaterialEnum::LegacyFeather),
            "LEGACY_SULPHUR" => Some(MaterialMaterialEnum::LegacySulphur),
            "LEGACY_WOOD_HOE" => Some(MaterialMaterialEnum::LegacyWoodHoe),
            "LEGACY_STONE_HOE" => Some(MaterialMaterialEnum::LegacyStoneHoe),
            "LEGACY_IRON_HOE" => Some(MaterialMaterialEnum::LegacyIronHoe),
            "LEGACY_DIAMOND_HOE" => Some(MaterialMaterialEnum::LegacyDiamondHoe),
            "LEGACY_GOLD_HOE" => Some(MaterialMaterialEnum::LegacyGoldHoe),
            "LEGACY_SEEDS" => Some(MaterialMaterialEnum::LegacySeeds),
            "LEGACY_WHEAT" => Some(MaterialMaterialEnum::LegacyWheat),
            "LEGACY_BREAD" => Some(MaterialMaterialEnum::LegacyBread),
            "LEGACY_LEATHER_HELMET" => Some(MaterialMaterialEnum::LegacyLeatherHelmet),
            "LEGACY_LEATHER_CHESTPLATE" => Some(MaterialMaterialEnum::LegacyLeatherChestplate),
            "LEGACY_LEATHER_LEGGINGS" => Some(MaterialMaterialEnum::LegacyLeatherLeggings),
            "LEGACY_LEATHER_BOOTS" => Some(MaterialMaterialEnum::LegacyLeatherBoots),
            "LEGACY_CHAINMAIL_HELMET" => Some(MaterialMaterialEnum::LegacyChainmailHelmet),
            "LEGACY_CHAINMAIL_CHESTPLATE" => Some(MaterialMaterialEnum::LegacyChainmailChestplate),
            "LEGACY_CHAINMAIL_LEGGINGS" => Some(MaterialMaterialEnum::LegacyChainmailLeggings),
            "LEGACY_CHAINMAIL_BOOTS" => Some(MaterialMaterialEnum::LegacyChainmailBoots),
            "LEGACY_IRON_HELMET" => Some(MaterialMaterialEnum::LegacyIronHelmet),
            "LEGACY_IRON_CHESTPLATE" => Some(MaterialMaterialEnum::LegacyIronChestplate),
            "LEGACY_IRON_LEGGINGS" => Some(MaterialMaterialEnum::LegacyIronLeggings),
            "LEGACY_IRON_BOOTS" => Some(MaterialMaterialEnum::LegacyIronBoots),
            "LEGACY_DIAMOND_HELMET" => Some(MaterialMaterialEnum::LegacyDiamondHelmet),
            "LEGACY_DIAMOND_CHESTPLATE" => Some(MaterialMaterialEnum::LegacyDiamondChestplate),
            "LEGACY_DIAMOND_LEGGINGS" => Some(MaterialMaterialEnum::LegacyDiamondLeggings),
            "LEGACY_DIAMOND_BOOTS" => Some(MaterialMaterialEnum::LegacyDiamondBoots),
            "LEGACY_GOLD_HELMET" => Some(MaterialMaterialEnum::LegacyGoldHelmet),
            "LEGACY_GOLD_CHESTPLATE" => Some(MaterialMaterialEnum::LegacyGoldChestplate),
            "LEGACY_GOLD_LEGGINGS" => Some(MaterialMaterialEnum::LegacyGoldLeggings),
            "LEGACY_GOLD_BOOTS" => Some(MaterialMaterialEnum::LegacyGoldBoots),
            "LEGACY_FLINT" => Some(MaterialMaterialEnum::LegacyFlint),
            "LEGACY_PORK" => Some(MaterialMaterialEnum::LegacyPork),
            "LEGACY_GRILLED_PORK" => Some(MaterialMaterialEnum::LegacyGrilledPork),
            "LEGACY_PAINTING" => Some(MaterialMaterialEnum::LegacyPainting),
            "LEGACY_GOLDEN_APPLE" => Some(MaterialMaterialEnum::LegacyGoldenApple),
            "LEGACY_SIGN" => Some(MaterialMaterialEnum::LegacySign),
            "LEGACY_WOOD_DOOR" => Some(MaterialMaterialEnum::LegacyWoodDoor),
            "LEGACY_BUCKET" => Some(MaterialMaterialEnum::LegacyBucket),
            "LEGACY_WATER_BUCKET" => Some(MaterialMaterialEnum::LegacyWaterBucket),
            "LEGACY_LAVA_BUCKET" => Some(MaterialMaterialEnum::LegacyLavaBucket),
            "LEGACY_MINECART" => Some(MaterialMaterialEnum::LegacyMinecart),
            "LEGACY_SADDLE" => Some(MaterialMaterialEnum::LegacySaddle),
            "LEGACY_IRON_DOOR" => Some(MaterialMaterialEnum::LegacyIronDoor),
            "LEGACY_REDSTONE" => Some(MaterialMaterialEnum::LegacyRedstone),
            "LEGACY_SNOW_BALL" => Some(MaterialMaterialEnum::LegacySnowBall),
            "LEGACY_BOAT" => Some(MaterialMaterialEnum::LegacyBoat),
            "LEGACY_LEATHER" => Some(MaterialMaterialEnum::LegacyLeather),
            "LEGACY_MILK_BUCKET" => Some(MaterialMaterialEnum::LegacyMilkBucket),
            "LEGACY_CLAY_BRICK" => Some(MaterialMaterialEnum::LegacyClayBrick),
            "LEGACY_CLAY_BALL" => Some(MaterialMaterialEnum::LegacyClayBall),
            "LEGACY_SUGAR_CANE" => Some(MaterialMaterialEnum::LegacySugarCane),
            "LEGACY_PAPER" => Some(MaterialMaterialEnum::LegacyPaper),
            "LEGACY_BOOK" => Some(MaterialMaterialEnum::LegacyBook),
            "LEGACY_SLIME_BALL" => Some(MaterialMaterialEnum::LegacySlimeBall),
            "LEGACY_STORAGE_MINECART" => Some(MaterialMaterialEnum::LegacyStorageMinecart),
            "LEGACY_POWERED_MINECART" => Some(MaterialMaterialEnum::LegacyPoweredMinecart),
            "LEGACY_EGG" => Some(MaterialMaterialEnum::LegacyEgg),
            "LEGACY_COMPASS" => Some(MaterialMaterialEnum::LegacyCompass),
            "LEGACY_FISHING_ROD" => Some(MaterialMaterialEnum::LegacyFishingRod),
            "LEGACY_WATCH" => Some(MaterialMaterialEnum::LegacyWatch),
            "LEGACY_GLOWSTONE_DUST" => Some(MaterialMaterialEnum::LegacyGlowstoneDust),
            "LEGACY_RAW_FISH" => Some(MaterialMaterialEnum::LegacyRawFish),
            "LEGACY_COOKED_FISH" => Some(MaterialMaterialEnum::LegacyCookedFish),
            "LEGACY_INK_SACK" => Some(MaterialMaterialEnum::LegacyInkSack),
            "LEGACY_BONE" => Some(MaterialMaterialEnum::LegacyBone),
            "LEGACY_SUGAR" => Some(MaterialMaterialEnum::LegacySugar),
            "LEGACY_CAKE" => Some(MaterialMaterialEnum::LegacyCake),
            "LEGACY_BED" => Some(MaterialMaterialEnum::LegacyBed),
            "LEGACY_DIODE" => Some(MaterialMaterialEnum::LegacyDiode),
            "LEGACY_COOKIE" => Some(MaterialMaterialEnum::LegacyCookie),
            "LEGACY_MAP" => Some(MaterialMaterialEnum::LegacyMap),
            "LEGACY_SHEARS" => Some(MaterialMaterialEnum::LegacyShears),
            "LEGACY_MELON" => Some(MaterialMaterialEnum::LegacyMelon),
            "LEGACY_PUMPKIN_SEEDS" => Some(MaterialMaterialEnum::LegacyPumpkinSeeds),
            "LEGACY_MELON_SEEDS" => Some(MaterialMaterialEnum::LegacyMelonSeeds),
            "LEGACY_RAW_BEEF" => Some(MaterialMaterialEnum::LegacyRawBeef),
            "LEGACY_COOKED_BEEF" => Some(MaterialMaterialEnum::LegacyCookedBeef),
            "LEGACY_RAW_CHICKEN" => Some(MaterialMaterialEnum::LegacyRawChicken),
            "LEGACY_COOKED_CHICKEN" => Some(MaterialMaterialEnum::LegacyCookedChicken),
            "LEGACY_ROTTEN_FLESH" => Some(MaterialMaterialEnum::LegacyRottenFlesh),
            "LEGACY_ENDER_PEARL" => Some(MaterialMaterialEnum::LegacyEnderPearl),
            "LEGACY_BLAZE_ROD" => Some(MaterialMaterialEnum::LegacyBlazeRod),
            "LEGACY_GHAST_TEAR" => Some(MaterialMaterialEnum::LegacyGhastTear),
            "LEGACY_GOLD_NUGGET" => Some(MaterialMaterialEnum::LegacyGoldNugget),
            "LEGACY_NETHER_STALK" => Some(MaterialMaterialEnum::LegacyNetherStalk),
            "LEGACY_POTION" => Some(MaterialMaterialEnum::LegacyPotion),
            "LEGACY_GLASS_BOTTLE" => Some(MaterialMaterialEnum::LegacyGlassBottle),
            "LEGACY_SPIDER_EYE" => Some(MaterialMaterialEnum::LegacySpiderEye),
            "LEGACY_FERMENTED_SPIDER_EYE" => Some(MaterialMaterialEnum::LegacyFermentedSpiderEye),
            "LEGACY_BLAZE_POWDER" => Some(MaterialMaterialEnum::LegacyBlazePowder),
            "LEGACY_MAGMA_CREAM" => Some(MaterialMaterialEnum::LegacyMagmaCream),
            "LEGACY_BREWING_STAND_ITEM" => Some(MaterialMaterialEnum::LegacyBrewingStandItem),
            "LEGACY_CAULDRON_ITEM" => Some(MaterialMaterialEnum::LegacyCauldronItem),
            "LEGACY_EYE_OF_ENDER" => Some(MaterialMaterialEnum::LegacyEyeOfEnder),
            "LEGACY_SPECKLED_MELON" => Some(MaterialMaterialEnum::LegacySpeckledMelon),
            "LEGACY_MONSTER_EGG" => Some(MaterialMaterialEnum::LegacyMonsterEgg),
            "LEGACY_EXP_BOTTLE" => Some(MaterialMaterialEnum::LegacyExpBottle),
            "LEGACY_FIREBALL" => Some(MaterialMaterialEnum::LegacyFireball),
            "LEGACY_BOOK_AND_QUILL" => Some(MaterialMaterialEnum::LegacyBookAndQuill),
            "LEGACY_WRITTEN_BOOK" => Some(MaterialMaterialEnum::LegacyWrittenBook),
            "LEGACY_EMERALD" => Some(MaterialMaterialEnum::LegacyEmerald),
            "LEGACY_ITEM_FRAME" => Some(MaterialMaterialEnum::LegacyItemFrame),
            "LEGACY_FLOWER_POT_ITEM" => Some(MaterialMaterialEnum::LegacyFlowerPotItem),
            "LEGACY_CARROT_ITEM" => Some(MaterialMaterialEnum::LegacyCarrotItem),
            "LEGACY_POTATO_ITEM" => Some(MaterialMaterialEnum::LegacyPotatoItem),
            "LEGACY_BAKED_POTATO" => Some(MaterialMaterialEnum::LegacyBakedPotato),
            "LEGACY_POISONOUS_POTATO" => Some(MaterialMaterialEnum::LegacyPoisonousPotato),
            "LEGACY_EMPTY_MAP" => Some(MaterialMaterialEnum::LegacyEmptyMap),
            "LEGACY_GOLDEN_CARROT" => Some(MaterialMaterialEnum::LegacyGoldenCarrot),
            "LEGACY_SKULL_ITEM" => Some(MaterialMaterialEnum::LegacySkullItem),
            "LEGACY_CARROT_STICK" => Some(MaterialMaterialEnum::LegacyCarrotStick),
            "LEGACY_NETHER_STAR" => Some(MaterialMaterialEnum::LegacyNetherStar),
            "LEGACY_PUMPKIN_PIE" => Some(MaterialMaterialEnum::LegacyPumpkinPie),
            "LEGACY_FIREWORK" => Some(MaterialMaterialEnum::LegacyFirework),
            "LEGACY_FIREWORK_CHARGE" => Some(MaterialMaterialEnum::LegacyFireworkCharge),
            "LEGACY_ENCHANTED_BOOK" => Some(MaterialMaterialEnum::LegacyEnchantedBook),
            "LEGACY_REDSTONE_COMPARATOR" => Some(MaterialMaterialEnum::LegacyRedstoneComparator),
            "LEGACY_NETHER_BRICK_ITEM" => Some(MaterialMaterialEnum::LegacyNetherBrickItem),
            "LEGACY_QUARTZ" => Some(MaterialMaterialEnum::LegacyQuartz),
            "LEGACY_EXPLOSIVE_MINECART" => Some(MaterialMaterialEnum::LegacyExplosiveMinecart),
            "LEGACY_HOPPER_MINECART" => Some(MaterialMaterialEnum::LegacyHopperMinecart),
            "LEGACY_PRISMARINE_SHARD" => Some(MaterialMaterialEnum::LegacyPrismarineShard),
            "LEGACY_PRISMARINE_CRYSTALS" => Some(MaterialMaterialEnum::LegacyPrismarineCrystals),
            "LEGACY_RABBIT" => Some(MaterialMaterialEnum::LegacyRabbit),
            "LEGACY_COOKED_RABBIT" => Some(MaterialMaterialEnum::LegacyCookedRabbit),
            "LEGACY_RABBIT_STEW" => Some(MaterialMaterialEnum::LegacyRabbitStew),
            "LEGACY_RABBIT_FOOT" => Some(MaterialMaterialEnum::LegacyRabbitFoot),
            "LEGACY_RABBIT_HIDE" => Some(MaterialMaterialEnum::LegacyRabbitHide),
            "LEGACY_ARMOR_STAND" => Some(MaterialMaterialEnum::LegacyArmorStand),
            "LEGACY_IRON_BARDING" => Some(MaterialMaterialEnum::LegacyIronBarding),
            "LEGACY_GOLD_BARDING" => Some(MaterialMaterialEnum::LegacyGoldBarding),
            "LEGACY_DIAMOND_BARDING" => Some(MaterialMaterialEnum::LegacyDiamondBarding),
            "LEGACY_LEASH" => Some(MaterialMaterialEnum::LegacyLeash),
            "LEGACY_NAME_TAG" => Some(MaterialMaterialEnum::LegacyNameTag),
            "LEGACY_COMMAND_MINECART" => Some(MaterialMaterialEnum::LegacyCommandMinecart),
            "LEGACY_MUTTON" => Some(MaterialMaterialEnum::LegacyMutton),
            "LEGACY_COOKED_MUTTON" => Some(MaterialMaterialEnum::LegacyCookedMutton),
            "LEGACY_BANNER" => Some(MaterialMaterialEnum::LegacyBanner),
            "LEGACY_END_CRYSTAL" => Some(MaterialMaterialEnum::LegacyEndCrystal),
            "LEGACY_SPRUCE_DOOR_ITEM" => Some(MaterialMaterialEnum::LegacySpruceDoorItem),
            "LEGACY_BIRCH_DOOR_ITEM" => Some(MaterialMaterialEnum::LegacyBirchDoorItem),
            "LEGACY_JUNGLE_DOOR_ITEM" => Some(MaterialMaterialEnum::LegacyJungleDoorItem),
            "LEGACY_ACACIA_DOOR_ITEM" => Some(MaterialMaterialEnum::LegacyAcaciaDoorItem),
            "LEGACY_DARK_OAK_DOOR_ITEM" => Some(MaterialMaterialEnum::LegacyDarkOakDoorItem),
            "LEGACY_CHORUS_FRUIT" => Some(MaterialMaterialEnum::LegacyChorusFruit),
            "LEGACY_CHORUS_FRUIT_POPPED" => Some(MaterialMaterialEnum::LegacyChorusFruitPopped),
            "LEGACY_BEETROOT" => Some(MaterialMaterialEnum::LegacyBeetroot),
            "LEGACY_BEETROOT_SEEDS" => Some(MaterialMaterialEnum::LegacyBeetrootSeeds),
            "LEGACY_BEETROOT_SOUP" => Some(MaterialMaterialEnum::LegacyBeetrootSoup),
            "LEGACY_DRAGONS_BREATH" => Some(MaterialMaterialEnum::LegacyDragonsBreath),
            "LEGACY_SPLASH_POTION" => Some(MaterialMaterialEnum::LegacySplashPotion),
            "LEGACY_SPECTRAL_ARROW" => Some(MaterialMaterialEnum::LegacySpectralArrow),
            "LEGACY_TIPPED_ARROW" => Some(MaterialMaterialEnum::LegacyTippedArrow),
            "LEGACY_LINGERING_POTION" => Some(MaterialMaterialEnum::LegacyLingeringPotion),
            "LEGACY_SHIELD" => Some(MaterialMaterialEnum::LegacyShield),
            "LEGACY_ELYTRA" => Some(MaterialMaterialEnum::LegacyElytra),
            "LEGACY_BOAT_SPRUCE" => Some(MaterialMaterialEnum::LegacyBoatSpruce),
            "LEGACY_BOAT_BIRCH" => Some(MaterialMaterialEnum::LegacyBoatBirch),
            "LEGACY_BOAT_JUNGLE" => Some(MaterialMaterialEnum::LegacyBoatJungle),
            "LEGACY_BOAT_ACACIA" => Some(MaterialMaterialEnum::LegacyBoatAcacia),
            "LEGACY_BOAT_DARK_OAK" => Some(MaterialMaterialEnum::LegacyBoatDarkOak),
            "LEGACY_TOTEM" => Some(MaterialMaterialEnum::LegacyTotem),
            "LEGACY_SHULKER_SHELL" => Some(MaterialMaterialEnum::LegacyShulkerShell),
            "LEGACY_IRON_NUGGET" => Some(MaterialMaterialEnum::LegacyIronNugget),
            "LEGACY_KNOWLEDGE_BOOK" => Some(MaterialMaterialEnum::LegacyKnowledgeBook),
            "LEGACY_GOLD_RECORD" => Some(MaterialMaterialEnum::LegacyGoldRecord),
            "LEGACY_GREEN_RECORD" => Some(MaterialMaterialEnum::LegacyGreenRecord),
            "LEGACY_RECORD_3" => Some(MaterialMaterialEnum::LegacyRecord3),
            "LEGACY_RECORD_4" => Some(MaterialMaterialEnum::LegacyRecord4),
            "LEGACY_RECORD_5" => Some(MaterialMaterialEnum::LegacyRecord5),
            "LEGACY_RECORD_6" => Some(MaterialMaterialEnum::LegacyRecord6),
            "LEGACY_RECORD_7" => Some(MaterialMaterialEnum::LegacyRecord7),
            "LEGACY_RECORD_8" => Some(MaterialMaterialEnum::LegacyRecord8),
            "LEGACY_RECORD_9" => Some(MaterialMaterialEnum::LegacyRecord9),
            "LEGACY_RECORD_10" => Some(MaterialMaterialEnum::LegacyRecord10),
            "LEGACY_RECORD_11" => Some(MaterialMaterialEnum::LegacyRecord11),
            "LEGACY_RECORD_12" => Some(MaterialMaterialEnum::LegacyRecord12),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<MaterialMaterial<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Material$Material");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Material$Material;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        MaterialMaterial::from_raw(
            &jni,
            raw_obj,
            MaterialMaterial::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents various map environment types that a world may be
#[derive(PartialEq, Eq)]
pub enum WorldEnvironmentEnum {
    Normal,
    Nether,
    TheEnd,
    Custom,
}
impl std::fmt::Display for WorldEnvironmentEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            WorldEnvironmentEnum::Normal => f.write_str("NORMAL"),
            WorldEnvironmentEnum::Nether => f.write_str("NETHER"),
            WorldEnvironmentEnum::TheEnd => f.write_str("THE_END"),
            WorldEnvironmentEnum::Custom => f.write_str("CUSTOM"),
        }
    }
}
impl<'mc> std::fmt::Display for WorldEnvironment<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct WorldEnvironment<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub WorldEnvironmentEnum,
);
impl<'mc> std::ops::Deref for WorldEnvironment<'mc> {
    type Target = WorldEnvironmentEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for WorldEnvironment<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for WorldEnvironment<'mc> {
    type Enum = WorldEnvironmentEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate WorldEnvironment from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/World$Environment")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a WorldEnvironment object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> WorldEnvironment<'mc> {
    pub const NORMAL: WorldEnvironmentEnum = WorldEnvironmentEnum::Normal;
    pub const NETHER: WorldEnvironmentEnum = WorldEnvironmentEnum::Nether;
    pub const THE_END: WorldEnvironmentEnum = WorldEnvironmentEnum::TheEnd;
    pub const CUSTOM: WorldEnvironmentEnum = WorldEnvironmentEnum::Custom;
    pub fn from_string(str: String) -> std::option::Option<WorldEnvironmentEnum> {
        match str.as_str() {
            "NORMAL" => Some(WorldEnvironmentEnum::Normal),
            "NETHER" => Some(WorldEnvironmentEnum::Nether),
            "THE_END" => Some(WorldEnvironmentEnum::TheEnd),
            "CUSTOM" => Some(WorldEnvironmentEnum::Custom),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<WorldEnvironment<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/World$Environment");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/World$Environment;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        WorldEnvironment::from_raw(
            &jni,
            raw_obj,
            WorldEnvironment::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }

    //@Deprecated

    #[deprecated]
    //@Nullable

    /// <span class="deprecated-label">Deprecated.</span>
    /// <div class="deprecation-comment">
    /// Magic value
    /// </div>
    /// Magic value
    ///
    /// Get an environment by ID
    pub fn get_environment(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: i32,
    ) -> Result<Option<crate::WorldEnvironment<'mc>>, Box<dyn std::error::Error>> {
        let sig = String::from("(I)Lorg/bukkit/World$Environment;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let cls = jni.find_class("org/bukkit/World$Environment");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "getEnvironment",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        if unsafe { jni::objects::JObject::from_raw(res.as_jni().l) }.is_null() {
            return Ok(None);
        }
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Ok(Some(crate::WorldEnvironment::from_raw(
            &jni,
            raw_obj,
            crate::WorldEnvironment::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )?))
    }
    //

    //

    pub fn id(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getId", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
}
/// A delegate for handling block changes. This serves as a direct interface between generation algorithms in the server implementation and utilizing code.
///
/// This is a representation of an abstract class.
pub struct BlockChangeDelegate<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for BlockChangeDelegate<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for BlockChangeDelegate<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate BlockChangeDelegate from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/BlockChangeDelegate")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a BlockChangeDelegate object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> BlockChangeDelegate<'mc> {
    //

    pub fn height(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getHeight", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //@NotNull

    /// Get the block data at the location.
    pub fn get_block_data(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<crate::block::data::BlockData<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(III)Lorg/bukkit/block/data/BlockData;");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "getBlockData",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::block::data::BlockData::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn set_block_data(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
        arg3: impl Into<crate::block::data::BlockData<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(IIILorg/bukkit/block/data/BlockData;)Z");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        let val_4 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg3.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setBlockData",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
                jni::objects::JValueGen::from(val_4),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Checks if the specified block is empty (air) or not.
    pub fn is_empty(
        &self,
        arg0: i32,
        arg1: i32,
        arg2: i32,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(III)Z");
        let val_1 = jni::objects::JValueGen::Int(arg0.into());
        let val_2 = jni::objects::JValueGen::Int(arg1.into());
        let val_3 = jni::objects::JValueGen::Int(arg2.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isEmpty",
            sig.as_str(),
            vec![
                jni::objects::JValueGen::from(val_1),
                jni::objects::JValueGen::from(val_2),
                jni::objects::JValueGen::from(val_3),
            ],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
}
/// This class handles the creation and storage of all structure types for Bukkit. Structure Types are the different kinds of structures that can be generated during world/chunk generation. These include Villages, Mineshafts, Mansions, etc.
///
/// The registration of new <a href="StructureType.html" title="class in org.bukkit"><code>StructureType</code></a>s is case-sensitive.
pub struct StructureType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for StructureType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for StructureType<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate StructureType from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/StructureType")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a StructureType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> StructureType<'mc> {
    //

    pub fn map_icon(&self) -> Result<crate::map::MapCursorType<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/map/MapCursor$Type;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getMapIcon", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        let raw_obj = unsafe { jni::objects::JObject::from_raw(res.l()?.clone()) };
        let variant = self
            .0
            .call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = self.jni_ref().translate_error(variant)?;
        let variant_str = self
            .0
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        crate::map::MapCursorType::from_raw(
            &self.jni_ref(),
            raw_obj,
            crate::map::MapCursorType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
    //

    pub fn structure_types(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
    ) -> Result<blackboxmc_java::JavaMap<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Map;");
        let cls = jni.find_class("java/util/Map");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(cls, "getStructureTypes", sig.as_str(), vec![]);
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        blackboxmc_java::JavaMap::from_raw(&jni, obj)
    }
    //

    pub fn name(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getName", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn key(&self) -> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/NamespacedKey;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getKey", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::NamespacedKey::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for StructureType<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling StructureType.toString: {}", err),
        }
    }
}

impl<'mc> Into<crate::Keyed<'mc>> for StructureType<'mc> {
    fn into(self) -> crate::Keyed<'mc> {
        crate::Keyed::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting StructureType into crate::Keyed")
    }
}
/// Represents the status of a <a href="Raid.html" title="interface in org.bukkit"><code>Raid</code></a>.
#[derive(PartialEq, Eq)]
pub enum RaidRaidStatusEnum {
    Ongoing,
    Victory,
    Loss,
    Stopped,
}
impl std::fmt::Display for RaidRaidStatusEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            RaidRaidStatusEnum::Ongoing => f.write_str("ONGOING"),
            RaidRaidStatusEnum::Victory => f.write_str("VICTORY"),
            RaidRaidStatusEnum::Loss => f.write_str("LOSS"),
            RaidRaidStatusEnum::Stopped => f.write_str("STOPPED"),
        }
    }
}
impl<'mc> std::fmt::Display for RaidRaidStatus<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct RaidRaidStatus<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub RaidRaidStatusEnum,
);
impl<'mc> std::ops::Deref for RaidRaidStatus<'mc> {
    type Target = RaidRaidStatusEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for RaidRaidStatus<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for RaidRaidStatus<'mc> {
    type Enum = RaidRaidStatusEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(
                eyre::eyre!("Tried to instantiate RaidRaidStatus from null object.").into(),
            );
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Raid$RaidStatus")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a RaidRaidStatus object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> RaidRaidStatus<'mc> {
    pub const ONGOING: RaidRaidStatusEnum = RaidRaidStatusEnum::Ongoing;
    pub const VICTORY: RaidRaidStatusEnum = RaidRaidStatusEnum::Victory;
    pub const LOSS: RaidRaidStatusEnum = RaidRaidStatusEnum::Loss;
    pub const STOPPED: RaidRaidStatusEnum = RaidRaidStatusEnum::Stopped;
    pub fn from_string(str: String) -> std::option::Option<RaidRaidStatusEnum> {
        match str.as_str() {
            "ONGOING" => Some(RaidRaidStatusEnum::Ongoing),
            "VICTORY" => Some(RaidRaidStatusEnum::Victory),
            "LOSS" => Some(RaidRaidStatusEnum::Loss),
            "STOPPED" => Some(RaidRaidStatusEnum::Stopped),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<RaidRaidStatus<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Raid$RaidStatus");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Raid$RaidStatus;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        RaidRaidStatus::from_raw(
            &jni,
            raw_obj,
            RaidRaidStatus::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }

    //
}
#[derive(PartialEq, Eq)]
pub enum InstrumentEnum {
    Piano,
    BassDrum,
    SnareDrum,
    Sticks,
    BassGuitar,
    Flute,
    Bell,
    Guitar,
    Chime,
    Xylophone,
    IronXylophone,
    CowBell,
    Didgeridoo,
    Bit,
    Banjo,
    Pling,
    Zombie,
    Skeleton,
    Creeper,
    Dragon,
    WitherSkeleton,
    Piglin,
    CustomHead,
}
impl std::fmt::Display for InstrumentEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            InstrumentEnum::Piano => f.write_str("PIANO"),
            InstrumentEnum::BassDrum => f.write_str("BASS_DRUM"),
            InstrumentEnum::SnareDrum => f.write_str("SNARE_DRUM"),
            InstrumentEnum::Sticks => f.write_str("STICKS"),
            InstrumentEnum::BassGuitar => f.write_str("BASS_GUITAR"),
            InstrumentEnum::Flute => f.write_str("FLUTE"),
            InstrumentEnum::Bell => f.write_str("BELL"),
            InstrumentEnum::Guitar => f.write_str("GUITAR"),
            InstrumentEnum::Chime => f.write_str("CHIME"),
            InstrumentEnum::Xylophone => f.write_str("XYLOPHONE"),
            InstrumentEnum::IronXylophone => f.write_str("IRON_XYLOPHONE"),
            InstrumentEnum::CowBell => f.write_str("COW_BELL"),
            InstrumentEnum::Didgeridoo => f.write_str("DIDGERIDOO"),
            InstrumentEnum::Bit => f.write_str("BIT"),
            InstrumentEnum::Banjo => f.write_str("BANJO"),
            InstrumentEnum::Pling => f.write_str("PLING"),
            InstrumentEnum::Zombie => f.write_str("ZOMBIE"),
            InstrumentEnum::Skeleton => f.write_str("SKELETON"),
            InstrumentEnum::Creeper => f.write_str("CREEPER"),
            InstrumentEnum::Dragon => f.write_str("DRAGON"),
            InstrumentEnum::WitherSkeleton => f.write_str("WITHER_SKELETON"),
            InstrumentEnum::Piglin => f.write_str("PIGLIN"),
            InstrumentEnum::CustomHead => f.write_str("CUSTOM_HEAD"),
        }
    }
}
impl<'mc> std::fmt::Display for Instrument<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct Instrument<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub InstrumentEnum,
);
impl<'mc> std::ops::Deref for Instrument<'mc> {
    type Target = InstrumentEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for Instrument<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for Instrument<'mc> {
    type Enum = InstrumentEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Instrument from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Instrument")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Instrument object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> Instrument<'mc> {
    pub const PIANO: InstrumentEnum = InstrumentEnum::Piano;
    pub const BASS_DRUM: InstrumentEnum = InstrumentEnum::BassDrum;
    pub const SNARE_DRUM: InstrumentEnum = InstrumentEnum::SnareDrum;
    pub const STICKS: InstrumentEnum = InstrumentEnum::Sticks;
    pub const BASS_GUITAR: InstrumentEnum = InstrumentEnum::BassGuitar;
    pub const FLUTE: InstrumentEnum = InstrumentEnum::Flute;
    pub const BELL: InstrumentEnum = InstrumentEnum::Bell;
    pub const GUITAR: InstrumentEnum = InstrumentEnum::Guitar;
    pub const CHIME: InstrumentEnum = InstrumentEnum::Chime;
    pub const XYLOPHONE: InstrumentEnum = InstrumentEnum::Xylophone;
    pub const IRON_XYLOPHONE: InstrumentEnum = InstrumentEnum::IronXylophone;
    pub const COW_BELL: InstrumentEnum = InstrumentEnum::CowBell;
    pub const DIDGERIDOO: InstrumentEnum = InstrumentEnum::Didgeridoo;
    pub const BIT: InstrumentEnum = InstrumentEnum::Bit;
    pub const BANJO: InstrumentEnum = InstrumentEnum::Banjo;
    pub const PLING: InstrumentEnum = InstrumentEnum::Pling;
    pub const ZOMBIE: InstrumentEnum = InstrumentEnum::Zombie;
    pub const SKELETON: InstrumentEnum = InstrumentEnum::Skeleton;
    pub const CREEPER: InstrumentEnum = InstrumentEnum::Creeper;
    pub const DRAGON: InstrumentEnum = InstrumentEnum::Dragon;
    pub const WITHER_SKELETON: InstrumentEnum = InstrumentEnum::WitherSkeleton;
    pub const PIGLIN: InstrumentEnum = InstrumentEnum::Piglin;
    pub const CUSTOM_HEAD: InstrumentEnum = InstrumentEnum::CustomHead;
    pub fn from_string(str: String) -> std::option::Option<InstrumentEnum> {
        match str.as_str() {
            "PIANO" => Some(InstrumentEnum::Piano),
            "BASS_DRUM" => Some(InstrumentEnum::BassDrum),
            "SNARE_DRUM" => Some(InstrumentEnum::SnareDrum),
            "STICKS" => Some(InstrumentEnum::Sticks),
            "BASS_GUITAR" => Some(InstrumentEnum::BassGuitar),
            "FLUTE" => Some(InstrumentEnum::Flute),
            "BELL" => Some(InstrumentEnum::Bell),
            "GUITAR" => Some(InstrumentEnum::Guitar),
            "CHIME" => Some(InstrumentEnum::Chime),
            "XYLOPHONE" => Some(InstrumentEnum::Xylophone),
            "IRON_XYLOPHONE" => Some(InstrumentEnum::IronXylophone),
            "COW_BELL" => Some(InstrumentEnum::CowBell),
            "DIDGERIDOO" => Some(InstrumentEnum::Didgeridoo),
            "BIT" => Some(InstrumentEnum::Bit),
            "BANJO" => Some(InstrumentEnum::Banjo),
            "PLING" => Some(InstrumentEnum::Pling),
            "ZOMBIE" => Some(InstrumentEnum::Zombie),
            "SKELETON" => Some(InstrumentEnum::Skeleton),
            "CREEPER" => Some(InstrumentEnum::Creeper),
            "DRAGON" => Some(InstrumentEnum::Dragon),
            "WITHER_SKELETON" => Some(InstrumentEnum::WitherSkeleton),
            "PIGLIN" => Some(InstrumentEnum::Piglin),
            "CUSTOM_HEAD" => Some(InstrumentEnum::CustomHead),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<Instrument<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/Instrument");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/Instrument;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        Instrument::from_raw(
            &jni,
            raw_obj,
            Instrument::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a tag that may be defined by the server or a resource pack to group like things together. Note that whilst all tags defined within this interface must be present in implementations, their existence is not guaranteed across future versions.
///
/// This is a representation of an abstract class.
pub struct Tag<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Tag<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Tag<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Tag from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Tag")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Tag object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Tag<'mc> {
    //

    pub fn values(&self) -> Result<blackboxmc_java::JavaSet<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Set;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getValues", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaSet::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn is_tagged(
        &self,
        arg0: impl Into<crate::Keyed<'mc>>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Keyed;)Z");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "isTagged",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn key(&self) -> Result<crate::NamespacedKey<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/NamespacedKey;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getKey", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::NamespacedKey::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
}
impl<'mc> Into<crate::Keyed<'mc>> for Tag<'mc> {
    fn into(self) -> crate::Keyed<'mc> {
        crate::Keyed::from_raw(&self.jni_ref(), self.1)
            .expect("Error converting Tag into crate::Keyed")
    }
}
#[derive(PartialEq, Eq)]
pub enum SkullTypeEnum {
    Skeleton,
    Wither,
    Zombie,
    Player,
    Creeper,
    Dragon,
    Piglin,
}
impl std::fmt::Display for SkullTypeEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            SkullTypeEnum::Skeleton => f.write_str("SKELETON"),
            SkullTypeEnum::Wither => f.write_str("WITHER"),
            SkullTypeEnum::Zombie => f.write_str("ZOMBIE"),
            SkullTypeEnum::Player => f.write_str("PLAYER"),
            SkullTypeEnum::Creeper => f.write_str("CREEPER"),
            SkullTypeEnum::Dragon => f.write_str("DRAGON"),
            SkullTypeEnum::Piglin => f.write_str("PIGLIN"),
        }
    }
}
impl<'mc> std::fmt::Display for SkullType<'mc> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        self.2.fmt(f)
    }
}
pub struct SkullType<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
    pub SkullTypeEnum,
);
impl<'mc> std::ops::Deref for SkullType<'mc> {
    type Target = SkullTypeEnum;
    fn deref(&self) -> &Self::Target {
        return &self.2;
    }
}

impl<'mc> JNIRaw<'mc> for SkullType<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatableEnum<'mc> for SkullType<'mc> {
    type Enum = SkullTypeEnum;

    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,

        e: Self::Enum,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate SkullType from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/SkullType")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a SkullType object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj, e))
        }
    }
}

impl<'mc> SkullType<'mc> {
    pub const SKELETON: SkullTypeEnum = SkullTypeEnum::Skeleton;
    pub const WITHER: SkullTypeEnum = SkullTypeEnum::Wither;
    pub const ZOMBIE: SkullTypeEnum = SkullTypeEnum::Zombie;
    pub const PLAYER: SkullTypeEnum = SkullTypeEnum::Player;
    pub const CREEPER: SkullTypeEnum = SkullTypeEnum::Creeper;
    pub const DRAGON: SkullTypeEnum = SkullTypeEnum::Dragon;
    pub const PIGLIN: SkullTypeEnum = SkullTypeEnum::Piglin;
    pub fn from_string(str: String) -> std::option::Option<SkullTypeEnum> {
        match str.as_str() {
            "SKELETON" => Some(SkullTypeEnum::Skeleton),
            "WITHER" => Some(SkullTypeEnum::Wither),
            "ZOMBIE" => Some(SkullTypeEnum::Zombie),
            "PLAYER" => Some(SkullTypeEnum::Player),
            "CREEPER" => Some(SkullTypeEnum::Creeper),
            "DRAGON" => Some(SkullTypeEnum::Dragon),
            "PIGLIN" => Some(SkullTypeEnum::Piglin),
            _ => None,
        }
    }

    pub fn value_of(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<String>,
    ) -> Result<SkullType<'mc>, Box<dyn std::error::Error>> {
        let val_1 = jni::objects::JObject::from(jni.new_string(arg0.into())?);
        let cls = jni.find_class("org/bukkit/SkullType");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "valueOf",
            "(Ljava/lang/String;)Lorg/bukkit/SkullType;",
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        let raw_obj = obj;
        let variant = jni.call_method(&raw_obj, "toString", "()Ljava/lang/String;", vec![]);
        let variant = jni.translate_error(variant)?;
        let variant_str = jni
            .get_string(unsafe { &jni::objects::JString::from_raw(variant.as_jni().l) })?
            .to_string_lossy()
            .to_string();
        SkullType::from_raw(
            &jni,
            raw_obj,
            SkullType::from_string(variant_str)
                .ok_or(eyre::eyre!("String gaven for variant was invalid"))?,
        )
    }
}
/// Represents a 3-dimensional position in a world.
///
/// No constraints are placed on any angular values other than that they be specified in degrees. This means that negative angles or angles of greater magnitude than 360 are valid, but may be normalized to any other equivalent representation by the implementation.
pub struct Location<'mc>(
    pub(crate) blackboxmc_general::SharedJNIEnv<'mc>,
    pub(crate) jni::objects::JObject<'mc>,
);

impl<'mc> JNIRaw<'mc> for Location<'mc> {
    fn jni_ref(&self) -> blackboxmc_general::SharedJNIEnv<'mc> {
        self.0.clone()
    }

    fn jni_object(&self) -> jni::objects::JObject<'mc> {
        unsafe { jni::objects::JObject::from_raw(self.1.clone()) }
    }
}

impl<'mc> JNIInstantiatable<'mc> for Location<'mc> {
    fn from_raw(
        env: &blackboxmc_general::SharedJNIEnv<'mc>,
        obj: jni::objects::JObject<'mc>,
    ) -> Result<Self, Box<dyn std::error::Error>> {
        if obj.is_null() {
            return Err(eyre::eyre!("Tried to instantiate Location from null object.").into());
        }
        let (valid, name) = env.validate_name(&obj, "org/bukkit/Location")?;
        if !valid {
            Err(eyre::eyre!(
                "Invalid argument passed. Expected a Location object, got {}",
                name
            )
            .into())
        } else {
            Ok(Self(env.clone(), obj))
        }
    }
}

impl<'mc> Location<'mc> {
    pub fn new(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<crate::World<'mc>>,
        arg1: f64,
        arg2: f64,
        arg3: std::option::Option<f64>,
        arg4: std::option::Option<f32>,
        arg5: std::option::Option<f32>,
    ) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "Lorg/bukkit/World;";
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        args.push(val_1);
        sig += "D";
        let val_2 = jni::objects::JValueGen::Double(arg1.into());
        args.push(val_2);
        sig += "D";
        let val_3 = jni::objects::JValueGen::Double(arg2.into());
        args.push(val_3);
        if let Some(a) = arg3 {
            sig += "D";
            let val_4 = jni::objects::JValueGen::Double(a.into());
            args.push(val_4);
        }
        if let Some(a) = arg4 {
            sig += "F";
            let val_5 = jni::objects::JValueGen::Float(a.into());
            args.push(val_5);
        }
        if let Some(a) = arg5 {
            sig += "F";
            let val_6 = jni::objects::JValueGen::Float(a.into());
            args.push(val_6);
        }
        sig += ")V";
        let cls = jni.find_class("org/bukkit/Location");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.new_object(cls, sig.as_str(), args);
        let res = jni.translate_error_no_gen(res)?;
        crate::Location::from_raw(&jni, res)
    }
    //@NotNull

    /// Performs scalar multiplication, multiplying all components with a scalar. Not world-aware.
    pub fn multiply(&self, arg0: f64) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(D)Lorg/bukkit/Location;");
        let val_1 = jni::objects::JValueGen::Double(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "multiply",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn world(&self) -> Result<crate::World<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/World;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getWorld", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::World::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn block(&self) -> Result<crate::block::Block<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/block/Block;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlock", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::block::Block::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn x(&self) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("()D");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getX", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    pub fn y(&self) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("()D");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getY", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    pub fn z(&self) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("()D");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getZ", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    pub fn chunk(&self) -> Result<crate::Chunk<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Chunk;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getChunk", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Chunk::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn set_world(
        &self,
        arg0: impl Into<crate::World<'mc>>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/World;)V");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setWorld",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn is_world_loaded(&self) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("()Z");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "isWorldLoaded", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    /// Sets the x-coordinate of this location
    pub fn set_x(&self, arg0: f64) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(D)V");
        let val_1 = jni::objects::JValueGen::Double(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setX",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn block_x(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlockX", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Safely converts a double (location coordinate) to an int (block coordinate)
    pub fn loc_to_block(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: f64,
    ) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("(D)I");
        let val_1 = jni::objects::JValueGen::Double(arg0.into());
        let cls = jni.find_class("int");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "locToBlock",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Sets the y-coordinate of this location
    pub fn set_y(&self, arg0: f64) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(D)V");
        let val_1 = jni::objects::JValueGen::Double(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setY",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn block_y(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlockY", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Sets the z-coordinate of this location
    pub fn set_z(&self, arg0: f64) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(D)V");
        let val_1 = jni::objects::JValueGen::Double(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setZ",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn block_z(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getBlockZ", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    /// Sets the yaw of this location, measured in degrees.
    /// <ul>
    /// <li>A yaw of 0 or 360 represents the positive z direction.</li>
    /// <li>A yaw of 180 represents the negative z direction.</li>
    /// <li>A yaw of 90 represents the negative x direction.</li>
    /// <li>A yaw of 270 represents the positive x direction.</li>
    /// </ul> Increasing yaw values are the equivalent of turning to your right-facing, increasing the scale of the next respective axis, and decreasing the scale of the previous axis.
    pub fn set_yaw(&self, arg0: f32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(F)V");
        let val_1 = jni::objects::JValueGen::Float(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setYaw",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn yaw(&self) -> Result<f32, Box<dyn std::error::Error>> {
        let sig = String::from("()F");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getYaw", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.f()?)
    }
    //

    /// Sets the pitch of this location, measured in degrees.
    /// <ul>
    /// <li>A pitch of 0 represents level forward facing.</li>
    /// <li>A pitch of 90 represents downward facing, or negative y direction.</li>
    /// <li>A pitch of -90 represents upward facing, or positive y direction.</li>
    /// </ul> Increasing pitch values the equivalent of looking down.
    pub fn set_pitch(&self, arg0: f32) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("(F)V");
        let val_1 = jni::objects::JValueGen::Float(arg0.into());
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setPitch",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn pitch(&self) -> Result<f32, Box<dyn std::error::Error>> {
        let sig = String::from("()F");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getPitch", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.f()?)
    }
    //

    pub fn direction(&self) -> Result<crate::util::Vector<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/util/Vector;");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "getDirection", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::util::Vector::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn set_direction(
        &self,
        arg0: impl Into<crate::util::Vector<'mc>>,
    ) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/util/Vector;)Lorg/bukkit/Location;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "setDirection",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn subtract_with_location(
        &self,
        arg0: std::option::Option<impl Into<crate::util::Vector<'mc>>>,
    ) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/util/Vector;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/Location;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "subtract", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    /// Subtracts the location by another. Not world-aware and orientation independent.
    pub fn subtract_with_double(
        &self,
        arg0: f64,
        arg1: f64,
        arg2: std::option::Option<f64>,
    ) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "D";
        let val_1 = jni::objects::JValueGen::Double(arg0.into());
        args.push(val_1);
        sig += "D";
        let val_2 = jni::objects::JValueGen::Double(arg1.into());
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "D";
            let val_3 = jni::objects::JValueGen::Double(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/Location;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "subtract", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn length_squared(&self) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("()D");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "lengthSquared", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    pub fn distance_squared(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
    ) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Location;)D");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "distanceSquared",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    pub fn to_vector(&self) -> Result<crate::util::Vector<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/util/Vector;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toVector", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::util::Vector::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn check_finite(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res =
            self.jni_ref()
                .call_method(&self.jni_object(), "checkFinite", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn serialize(&self) -> Result<blackboxmc_java::JavaMap<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/util/Map;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "serialize", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        blackboxmc_java::JavaMap::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn deserialize(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: impl Into<blackboxmc_java::JavaMap<'mc>>,
    ) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/util/Map;)Lorg/bukkit/Location;");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let cls = jni.find_class("org/bukkit/Location");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "deserialize",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        let obj = res.l()?;
        crate::Location::from_raw(&jni, obj)
    }
    //

    /// Normalizes the given yaw angle to a value between <code>+/-180</code> degrees.
    pub fn normalize_yaw(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: f32,
    ) -> Result<f32, Box<dyn std::error::Error>> {
        let sig = String::from("(F)F");
        let val_1 = jni::objects::JValueGen::Float(arg0.into());
        let cls = jni.find_class("float");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "normalizeYaw",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(res.f()?)
    }
    //

    /// Normalizes the given pitch angle to a value between <code>+/-90</code> degrees.
    pub fn normalize_pitch(
        jni: &blackboxmc_general::SharedJNIEnv<'mc>,
        arg0: f32,
    ) -> Result<f32, Box<dyn std::error::Error>> {
        let sig = String::from("(F)F");
        let val_1 = jni::objects::JValueGen::Float(arg0.into());
        let cls = jni.find_class("float");
        let cls = jni.translate_error_with_class(cls)?;
        let res = jni.call_static_method(
            cls,
            "normalizePitch",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = jni.translate_error(res)?;
        Ok(res.f()?)
    }
    //

    pub fn add_with_vector(
        &self,
        arg0: std::option::Option<impl Into<crate::Location<'mc>>>,
    ) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "Lorg/bukkit/Location;";
            let val_1 = jni::objects::JValueGen::Object(unsafe {
                jni::objects::JObject::from_raw(a.into().jni_object().clone())
            });
            args.push(val_1);
        }
        sig += ")Lorg/bukkit/Location;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "add", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //@NotNull

    /// Adds the location by another. Not world-aware.
    pub fn add_with_double(
        &self,
        arg0: f64,
        arg1: f64,
        arg2: std::option::Option<f64>,
    ) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += "D";
        let val_1 = jni::objects::JValueGen::Double(arg0.into());
        args.push(val_1);
        sig += "D";
        let val_2 = jni::objects::JValueGen::Double(arg1.into());
        args.push(val_2);
        if let Some(a) = arg2 {
            sig += "D";
            let val_3 = jni::objects::JValueGen::Double(a.into());
            args.push(val_3);
        }
        sig += ")Lorg/bukkit/Location;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "add", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn equals(
        &self,
        arg0: jni::objects::JObject<'mc>,
    ) -> Result<bool, Box<dyn std::error::Error>> {
        let sig = String::from("(Ljava/lang/Object;)Z");
        let val_1 = jni::objects::JValueGen::Object(arg0);
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "equals",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.z()?)
    }
    //

    pub fn length(&self) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("()D");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "length", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    #[doc(hidden)]
    pub fn internal_to_string(&self) -> Result<String, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/String;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "toString", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(self
            .jni_ref()
            .get_string(unsafe { &jni::objects::JString::from_raw(res.as_jni().l) })?
            .to_string_lossy()
            .to_string())
    }
    //

    pub fn hash_code(&self) -> Result<i32, Box<dyn std::error::Error>> {
        let sig = String::from("()I");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "hashCode", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.i()?)
    }
    //

    pub fn clone(&self) -> Result<jni::objects::JObject<'mc>, Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        sig += ")Ljava/lang/Object;";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "clone", sig.as_str(), args);
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.l()?)
    }
    //

    pub fn zero(&self) -> Result<crate::Location<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Lorg/bukkit/Location;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "zero", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        crate::Location::from_raw(&self.jni_ref(), unsafe {
            jni::objects::JObject::from_raw(res.l()?.clone())
        })
    }
    //

    pub fn distance(
        &self,
        arg0: impl Into<crate::Location<'mc>>,
    ) -> Result<f64, Box<dyn std::error::Error>> {
        let sig = String::from("(Lorg/bukkit/Location;)D");
        let val_1 = jni::objects::JValueGen::Object(unsafe {
            jni::objects::JObject::from_raw(arg0.into().jni_object().clone())
        });
        let res = self.jni_ref().call_method(
            &self.jni_object(),
            "distance",
            sig.as_str(),
            vec![jni::objects::JValueGen::from(val_1)],
        );
        let res = self.jni_ref().translate_error(res)?;
        Ok(res.d()?)
    }
    //

    pub fn wait(
        &self,
        arg0: std::option::Option<i64>,
        arg1: std::option::Option<i32>,
    ) -> Result<(), Box<dyn std::error::Error>> {
        let mut args = Vec::new();
        let mut sig = String::from("(");
        if let Some(a) = arg0 {
            sig += "J";
            let val_1 = jni::objects::JValueGen::Long(a.into());
            args.push(val_1);
        }
        if let Some(a) = arg1 {
            sig += "I";
            let val_2 = jni::objects::JValueGen::Int(a.into());
            args.push(val_2);
        }
        sig += ")V";
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "wait", sig.as_str(), args);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn class(&self) -> Result<jni::objects::JClass<'mc>, Box<dyn std::error::Error>> {
        let sig = String::from("()Ljava/lang/Class;");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "getClass", sig.as_str(), vec![]);
        let res = self.jni_ref().translate_error(res)?;
        Ok(unsafe { jni::objects::JClass::from_raw(res.as_jni().l) })
    }
    //

    pub fn notify(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notify", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
    //

    pub fn notify_all(&self) -> Result<(), Box<dyn std::error::Error>> {
        let sig = String::from("()V");
        let res = self
            .jni_ref()
            .call_method(&self.jni_object(), "notifyAll", sig.as_str(), vec![]);
        self.jni_ref().translate_error(res)?;
        Ok(())
    }
}

impl<'mc> std::string::ToString for Location<'mc> {
    fn to_string(&self) -> String {
        match &self.internal_to_string() {
            Ok(a) => a.clone(),
            Err(err) => format!("Error calling Location.toString: {}", err),
        }
    }
}

impl<'mc> Into<crate::configuration::serialization::ConfigurationSerializable<'mc>>
    for Location<'mc>
{
    fn into(self) -> crate::configuration::serialization::ConfigurationSerializable<'mc> {
        crate::configuration::serialization::ConfigurationSerializable::from_raw(&self.jni_ref(), self.1).expect("Error converting Location into crate::configuration::serialization::ConfigurationSerializable")
    }
}
pub mod advancement;
pub mod attribute;
pub mod ban;
pub mod block;
pub mod boss;
pub mod command;
pub mod configuration;
pub mod conversations;
pub mod enchantments;
pub mod entity;
pub mod event;
pub mod generator;
pub mod help;
pub mod inventory;
pub mod loot;
pub mod map;
pub mod material;
pub mod metadata;
pub mod packs;
pub mod permissions;
pub mod persistence;
pub mod plugin;
pub mod potion;
pub mod profile;
pub mod projectiles;
pub mod scheduler;
pub mod scoreboard;
pub mod structure;
pub mod util;
